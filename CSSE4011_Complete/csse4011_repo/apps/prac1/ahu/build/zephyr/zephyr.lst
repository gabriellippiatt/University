
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	40 92 00 20 35 c7 00 00 3d 84 02 00 09 c7 00 00     @.. 5...=.......
    1010:	09 c7 00 00 09 c7 00 00 09 c7 00 00 00 00 00 00     ................
	...
    102c:	8d be 00 00 09 c7 00 00 00 00 00 00 35 be 00 00     ............5...
    103c:	09 c7 00 00                                         ....

00001040 <_irq_vector_table>:
    1040:	41 bf 00 00 f5 bd 01 00 41 bf 00 00 41 bf 00 00     A.......A...A...
    1050:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    1060:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    1070:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    1080:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    1090:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    10a0:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    10b0:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    10c0:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    10d0:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    10e0:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...
    10f0:	41 bf 00 00 41 bf 00 00 41 bf 00 00 41 bf 00 00     A...A...A...A...

Disassembly of section text:

00001100 <__aeabi_drsub>:
    1100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1104:	e002      	b.n	110c <__adddf3>
    1106:	bf00      	nop

00001108 <__aeabi_dsub>:
    1108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000110c <__adddf3>:
    110c:	b530      	push	{r4, r5, lr}
    110e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1116:	ea94 0f05 	teq	r4, r5
    111a:	bf08      	it	eq
    111c:	ea90 0f02 	teqeq	r0, r2
    1120:	bf1f      	itttt	ne
    1122:	ea54 0c00 	orrsne.w	ip, r4, r0
    1126:	ea55 0c02 	orrsne.w	ip, r5, r2
    112a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    112e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1132:	f000 80e2 	beq.w	12fa <__adddf3+0x1ee>
    1136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    113a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    113e:	bfb8      	it	lt
    1140:	426d      	neglt	r5, r5
    1142:	dd0c      	ble.n	115e <__adddf3+0x52>
    1144:	442c      	add	r4, r5
    1146:	ea80 0202 	eor.w	r2, r0, r2
    114a:	ea81 0303 	eor.w	r3, r1, r3
    114e:	ea82 0000 	eor.w	r0, r2, r0
    1152:	ea83 0101 	eor.w	r1, r3, r1
    1156:	ea80 0202 	eor.w	r2, r0, r2
    115a:	ea81 0303 	eor.w	r3, r1, r3
    115e:	2d36      	cmp	r5, #54	; 0x36
    1160:	bf88      	it	hi
    1162:	bd30      	pophi	{r4, r5, pc}
    1164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    116c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1174:	d002      	beq.n	117c <__adddf3+0x70>
    1176:	4240      	negs	r0, r0
    1178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    117c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1188:	d002      	beq.n	1190 <__adddf3+0x84>
    118a:	4252      	negs	r2, r2
    118c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1190:	ea94 0f05 	teq	r4, r5
    1194:	f000 80a7 	beq.w	12e6 <__adddf3+0x1da>
    1198:	f1a4 0401 	sub.w	r4, r4, #1
    119c:	f1d5 0e20 	rsbs	lr, r5, #32
    11a0:	db0d      	blt.n	11be <__adddf3+0xb2>
    11a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    11a6:	fa22 f205 	lsr.w	r2, r2, r5
    11aa:	1880      	adds	r0, r0, r2
    11ac:	f141 0100 	adc.w	r1, r1, #0
    11b0:	fa03 f20e 	lsl.w	r2, r3, lr
    11b4:	1880      	adds	r0, r0, r2
    11b6:	fa43 f305 	asr.w	r3, r3, r5
    11ba:	4159      	adcs	r1, r3
    11bc:	e00e      	b.n	11dc <__adddf3+0xd0>
    11be:	f1a5 0520 	sub.w	r5, r5, #32
    11c2:	f10e 0e20 	add.w	lr, lr, #32
    11c6:	2a01      	cmp	r2, #1
    11c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    11cc:	bf28      	it	cs
    11ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    11d2:	fa43 f305 	asr.w	r3, r3, r5
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    11dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    11e0:	d507      	bpl.n	11f2 <__adddf3+0xe6>
    11e2:	f04f 0e00 	mov.w	lr, #0
    11e6:	f1dc 0c00 	rsbs	ip, ip, #0
    11ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    11ee:	eb6e 0101 	sbc.w	r1, lr, r1
    11f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    11f6:	d31b      	bcc.n	1230 <__adddf3+0x124>
    11f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    11fc:	d30c      	bcc.n	1218 <__adddf3+0x10c>
    11fe:	0849      	lsrs	r1, r1, #1
    1200:	ea5f 0030 	movs.w	r0, r0, rrx
    1204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1208:	f104 0401 	add.w	r4, r4, #1
    120c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1214:	f080 809a 	bcs.w	134c <__adddf3+0x240>
    1218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    121c:	bf08      	it	eq
    121e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1222:	f150 0000 	adcs.w	r0, r0, #0
    1226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    122a:	ea41 0105 	orr.w	r1, r1, r5
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1234:	4140      	adcs	r0, r0
    1236:	eb41 0101 	adc.w	r1, r1, r1
    123a:	3c01      	subs	r4, #1
    123c:	bf28      	it	cs
    123e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    1242:	d2e9      	bcs.n	1218 <__adddf3+0x10c>
    1244:	f091 0f00 	teq	r1, #0
    1248:	bf04      	itt	eq
    124a:	4601      	moveq	r1, r0
    124c:	2000      	moveq	r0, #0
    124e:	fab1 f381 	clz	r3, r1
    1252:	bf08      	it	eq
    1254:	3320      	addeq	r3, #32
    1256:	f1a3 030b 	sub.w	r3, r3, #11
    125a:	f1b3 0220 	subs.w	r2, r3, #32
    125e:	da0c      	bge.n	127a <__adddf3+0x16e>
    1260:	320c      	adds	r2, #12
    1262:	dd08      	ble.n	1276 <__adddf3+0x16a>
    1264:	f102 0c14 	add.w	ip, r2, #20
    1268:	f1c2 020c 	rsb	r2, r2, #12
    126c:	fa01 f00c 	lsl.w	r0, r1, ip
    1270:	fa21 f102 	lsr.w	r1, r1, r2
    1274:	e00c      	b.n	1290 <__adddf3+0x184>
    1276:	f102 0214 	add.w	r2, r2, #20
    127a:	bfd8      	it	le
    127c:	f1c2 0c20 	rsble	ip, r2, #32
    1280:	fa01 f102 	lsl.w	r1, r1, r2
    1284:	fa20 fc0c 	lsr.w	ip, r0, ip
    1288:	bfdc      	itt	le
    128a:	ea41 010c 	orrle.w	r1, r1, ip
    128e:	4090      	lslle	r0, r2
    1290:	1ae4      	subs	r4, r4, r3
    1292:	bfa2      	ittt	ge
    1294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1298:	4329      	orrge	r1, r5
    129a:	bd30      	popge	{r4, r5, pc}
    129c:	ea6f 0404 	mvn.w	r4, r4
    12a0:	3c1f      	subs	r4, #31
    12a2:	da1c      	bge.n	12de <__adddf3+0x1d2>
    12a4:	340c      	adds	r4, #12
    12a6:	dc0e      	bgt.n	12c6 <__adddf3+0x1ba>
    12a8:	f104 0414 	add.w	r4, r4, #20
    12ac:	f1c4 0220 	rsb	r2, r4, #32
    12b0:	fa20 f004 	lsr.w	r0, r0, r4
    12b4:	fa01 f302 	lsl.w	r3, r1, r2
    12b8:	ea40 0003 	orr.w	r0, r0, r3
    12bc:	fa21 f304 	lsr.w	r3, r1, r4
    12c0:	ea45 0103 	orr.w	r1, r5, r3
    12c4:	bd30      	pop	{r4, r5, pc}
    12c6:	f1c4 040c 	rsb	r4, r4, #12
    12ca:	f1c4 0220 	rsb	r2, r4, #32
    12ce:	fa20 f002 	lsr.w	r0, r0, r2
    12d2:	fa01 f304 	lsl.w	r3, r1, r4
    12d6:	ea40 0003 	orr.w	r0, r0, r3
    12da:	4629      	mov	r1, r5
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	fa21 f004 	lsr.w	r0, r1, r4
    12e2:	4629      	mov	r1, r5
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	f094 0f00 	teq	r4, #0
    12ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    12ee:	bf06      	itte	eq
    12f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    12f4:	3401      	addeq	r4, #1
    12f6:	3d01      	subne	r5, #1
    12f8:	e74e      	b.n	1198 <__adddf3+0x8c>
    12fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    12fe:	bf18      	it	ne
    1300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1304:	d029      	beq.n	135a <__adddf3+0x24e>
    1306:	ea94 0f05 	teq	r4, r5
    130a:	bf08      	it	eq
    130c:	ea90 0f02 	teqeq	r0, r2
    1310:	d005      	beq.n	131e <__adddf3+0x212>
    1312:	ea54 0c00 	orrs.w	ip, r4, r0
    1316:	bf04      	itt	eq
    1318:	4619      	moveq	r1, r3
    131a:	4610      	moveq	r0, r2
    131c:	bd30      	pop	{r4, r5, pc}
    131e:	ea91 0f03 	teq	r1, r3
    1322:	bf1e      	ittt	ne
    1324:	2100      	movne	r1, #0
    1326:	2000      	movne	r0, #0
    1328:	bd30      	popne	{r4, r5, pc}
    132a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    132e:	d105      	bne.n	133c <__adddf3+0x230>
    1330:	0040      	lsls	r0, r0, #1
    1332:	4149      	adcs	r1, r1
    1334:	bf28      	it	cs
    1336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    133a:	bd30      	pop	{r4, r5, pc}
    133c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1340:	bf3c      	itt	cc
    1342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1346:	bd30      	popcc	{r4, r5, pc}
    1348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    134c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1354:	f04f 0000 	mov.w	r0, #0
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    135e:	bf1a      	itte	ne
    1360:	4619      	movne	r1, r3
    1362:	4610      	movne	r0, r2
    1364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1368:	bf1c      	itt	ne
    136a:	460b      	movne	r3, r1
    136c:	4602      	movne	r2, r0
    136e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1372:	bf06      	itte	eq
    1374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1378:	ea91 0f03 	teqeq	r1, r3
    137c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	bf00      	nop

00001384 <__aeabi_ui2d>:
    1384:	f090 0f00 	teq	r0, #0
    1388:	bf04      	itt	eq
    138a:	2100      	moveq	r1, #0
    138c:	4770      	bxeq	lr
    138e:	b530      	push	{r4, r5, lr}
    1390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1398:	f04f 0500 	mov.w	r5, #0
    139c:	f04f 0100 	mov.w	r1, #0
    13a0:	e750      	b.n	1244 <__adddf3+0x138>
    13a2:	bf00      	nop

000013a4 <__aeabi_i2d>:
    13a4:	f090 0f00 	teq	r0, #0
    13a8:	bf04      	itt	eq
    13aa:	2100      	moveq	r1, #0
    13ac:	4770      	bxeq	lr
    13ae:	b530      	push	{r4, r5, lr}
    13b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    13b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    13b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    13bc:	bf48      	it	mi
    13be:	4240      	negmi	r0, r0
    13c0:	f04f 0100 	mov.w	r1, #0
    13c4:	e73e      	b.n	1244 <__adddf3+0x138>
    13c6:	bf00      	nop

000013c8 <__aeabi_f2d>:
    13c8:	0042      	lsls	r2, r0, #1
    13ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    13ce:	ea4f 0131 	mov.w	r1, r1, rrx
    13d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    13d6:	bf1f      	itttt	ne
    13d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    13dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    13e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    13e4:	4770      	bxne	lr
    13e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    13ea:	bf08      	it	eq
    13ec:	4770      	bxeq	lr
    13ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    13f2:	bf04      	itt	eq
    13f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    13f8:	4770      	bxeq	lr
    13fa:	b530      	push	{r4, r5, lr}
    13fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    1400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1408:	e71c      	b.n	1244 <__adddf3+0x138>
    140a:	bf00      	nop

0000140c <__aeabi_ul2d>:
    140c:	ea50 0201 	orrs.w	r2, r0, r1
    1410:	bf08      	it	eq
    1412:	4770      	bxeq	lr
    1414:	b530      	push	{r4, r5, lr}
    1416:	f04f 0500 	mov.w	r5, #0
    141a:	e00a      	b.n	1432 <__aeabi_l2d+0x16>

0000141c <__aeabi_l2d>:
    141c:	ea50 0201 	orrs.w	r2, r0, r1
    1420:	bf08      	it	eq
    1422:	4770      	bxeq	lr
    1424:	b530      	push	{r4, r5, lr}
    1426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    142a:	d502      	bpl.n	1432 <__aeabi_l2d+0x16>
    142c:	4240      	negs	r0, r0
    142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    143e:	f43f aed8 	beq.w	11f2 <__adddf3+0xe6>
    1442:	f04f 0203 	mov.w	r2, #3
    1446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    144a:	bf18      	it	ne
    144c:	3203      	addne	r2, #3
    144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1452:	bf18      	it	ne
    1454:	3203      	addne	r2, #3
    1456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    145a:	f1c2 0320 	rsb	r3, r2, #32
    145e:	fa00 fc03 	lsl.w	ip, r0, r3
    1462:	fa20 f002 	lsr.w	r0, r0, r2
    1466:	fa01 fe03 	lsl.w	lr, r1, r3
    146a:	ea40 000e 	orr.w	r0, r0, lr
    146e:	fa21 f102 	lsr.w	r1, r1, r2
    1472:	4414      	add	r4, r2
    1474:	e6bd      	b.n	11f2 <__adddf3+0xe6>
    1476:	bf00      	nop

00001478 <__aeabi_d2f>:
    1478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    147c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    1480:	bf24      	itt	cs
    1482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    1486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    148a:	d90d      	bls.n	14a8 <__aeabi_d2f+0x30>
    148c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    1494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    1498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    149c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    14a0:	bf08      	it	eq
    14a2:	f020 0001 	biceq.w	r0, r0, #1
    14a6:	4770      	bx	lr
    14a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    14ac:	d121      	bne.n	14f2 <__aeabi_d2f+0x7a>
    14ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    14b2:	bfbc      	itt	lt
    14b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    14b8:	4770      	bxlt	lr
    14ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    14be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    14c2:	f1c2 0218 	rsb	r2, r2, #24
    14c6:	f1c2 0c20 	rsb	ip, r2, #32
    14ca:	fa10 f30c 	lsls.w	r3, r0, ip
    14ce:	fa20 f002 	lsr.w	r0, r0, r2
    14d2:	bf18      	it	ne
    14d4:	f040 0001 	orrne.w	r0, r0, #1
    14d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    14dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    14e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    14e4:	ea40 000c 	orr.w	r0, r0, ip
    14e8:	fa23 f302 	lsr.w	r3, r3, r2
    14ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    14f0:	e7cc      	b.n	148c <__aeabi_d2f+0x14>
    14f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    14f6:	d107      	bne.n	1508 <__aeabi_d2f+0x90>
    14f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    14fc:	bf1e      	ittt	ne
    14fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    1502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    1506:	4770      	bxne	lr
    1508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    150c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1514:	4770      	bx	lr
    1516:	bf00      	nop

00001518 <__aeabi_uldivmod>:
    1518:	b953      	cbnz	r3, 1530 <__aeabi_uldivmod+0x18>
    151a:	b94a      	cbnz	r2, 1530 <__aeabi_uldivmod+0x18>
    151c:	2900      	cmp	r1, #0
    151e:	bf08      	it	eq
    1520:	2800      	cmpeq	r0, #0
    1522:	bf1c      	itt	ne
    1524:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1528:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    152c:	f000 b80c 	b.w	1548 <__aeabi_idiv0>
    1530:	f1ad 0c08 	sub.w	ip, sp, #8
    1534:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1538:	f000 f808 	bl	154c <__udivmoddi4>
    153c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1544:	b004      	add	sp, #16
    1546:	4770      	bx	lr

00001548 <__aeabi_idiv0>:
    1548:	4770      	bx	lr
    154a:	bf00      	nop

0000154c <__udivmoddi4>:
    154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1550:	4607      	mov	r7, r0
    1552:	468c      	mov	ip, r1
    1554:	4608      	mov	r0, r1
    1556:	9e09      	ldr	r6, [sp, #36]	; 0x24
    1558:	4615      	mov	r5, r2
    155a:	463c      	mov	r4, r7
    155c:	4619      	mov	r1, r3
    155e:	2b00      	cmp	r3, #0
    1560:	f040 80c6 	bne.w	16f0 <__udivmoddi4+0x1a4>
    1564:	4282      	cmp	r2, r0
    1566:	fab2 f782 	clz	r7, r2
    156a:	d946      	bls.n	15fa <__udivmoddi4+0xae>
    156c:	b14f      	cbz	r7, 1582 <__udivmoddi4+0x36>
    156e:	f1c7 0e20 	rsb	lr, r7, #32
    1572:	fa24 fe0e 	lsr.w	lr, r4, lr
    1576:	fa00 f307 	lsl.w	r3, r0, r7
    157a:	40bd      	lsls	r5, r7
    157c:	ea4e 0c03 	orr.w	ip, lr, r3
    1580:	40bc      	lsls	r4, r7
    1582:	ea4f 4815 	mov.w	r8, r5, lsr #16
    1586:	fa1f fe85 	uxth.w	lr, r5
    158a:	fbbc f9f8 	udiv	r9, ip, r8
    158e:	0c22      	lsrs	r2, r4, #16
    1590:	fb08 c319 	mls	r3, r8, r9, ip
    1594:	fb09 fa0e 	mul.w	sl, r9, lr
    1598:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    159c:	459a      	cmp	sl, r3
    159e:	d928      	bls.n	15f2 <__udivmoddi4+0xa6>
    15a0:	18eb      	adds	r3, r5, r3
    15a2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    15a6:	d204      	bcs.n	15b2 <__udivmoddi4+0x66>
    15a8:	459a      	cmp	sl, r3
    15aa:	d902      	bls.n	15b2 <__udivmoddi4+0x66>
    15ac:	f1a9 0002 	sub.w	r0, r9, #2
    15b0:	442b      	add	r3, r5
    15b2:	eba3 030a 	sub.w	r3, r3, sl
    15b6:	b2a4      	uxth	r4, r4
    15b8:	fbb3 f2f8 	udiv	r2, r3, r8
    15bc:	fb08 3312 	mls	r3, r8, r2, r3
    15c0:	fb02 fe0e 	mul.w	lr, r2, lr
    15c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    15c8:	45a6      	cmp	lr, r4
    15ca:	d914      	bls.n	15f6 <__udivmoddi4+0xaa>
    15cc:	192c      	adds	r4, r5, r4
    15ce:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    15d2:	d203      	bcs.n	15dc <__udivmoddi4+0x90>
    15d4:	45a6      	cmp	lr, r4
    15d6:	d901      	bls.n	15dc <__udivmoddi4+0x90>
    15d8:	1e93      	subs	r3, r2, #2
    15da:	442c      	add	r4, r5
    15dc:	eba4 040e 	sub.w	r4, r4, lr
    15e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    15e4:	b11e      	cbz	r6, 15ee <__udivmoddi4+0xa2>
    15e6:	40fc      	lsrs	r4, r7
    15e8:	2300      	movs	r3, #0
    15ea:	6034      	str	r4, [r6, #0]
    15ec:	6073      	str	r3, [r6, #4]
    15ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15f2:	4648      	mov	r0, r9
    15f4:	e7dd      	b.n	15b2 <__udivmoddi4+0x66>
    15f6:	4613      	mov	r3, r2
    15f8:	e7f0      	b.n	15dc <__udivmoddi4+0x90>
    15fa:	b902      	cbnz	r2, 15fe <__udivmoddi4+0xb2>
    15fc:	deff      	udf	#255	; 0xff
    15fe:	bb87      	cbnz	r7, 1662 <__udivmoddi4+0x116>
    1600:	1a83      	subs	r3, r0, r2
    1602:	2101      	movs	r1, #1
    1604:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1608:	b2aa      	uxth	r2, r5
    160a:	fbb3 fcfe 	udiv	ip, r3, lr
    160e:	0c20      	lsrs	r0, r4, #16
    1610:	fb0e 331c 	mls	r3, lr, ip, r3
    1614:	fb0c f802 	mul.w	r8, ip, r2
    1618:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    161c:	4598      	cmp	r8, r3
    161e:	d963      	bls.n	16e8 <__udivmoddi4+0x19c>
    1620:	18eb      	adds	r3, r5, r3
    1622:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1626:	d204      	bcs.n	1632 <__udivmoddi4+0xe6>
    1628:	4598      	cmp	r8, r3
    162a:	d902      	bls.n	1632 <__udivmoddi4+0xe6>
    162c:	f1ac 0002 	sub.w	r0, ip, #2
    1630:	442b      	add	r3, r5
    1632:	eba3 0308 	sub.w	r3, r3, r8
    1636:	b2a4      	uxth	r4, r4
    1638:	fbb3 fcfe 	udiv	ip, r3, lr
    163c:	fb0e 331c 	mls	r3, lr, ip, r3
    1640:	fb0c f202 	mul.w	r2, ip, r2
    1644:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1648:	42a2      	cmp	r2, r4
    164a:	d94f      	bls.n	16ec <__udivmoddi4+0x1a0>
    164c:	192c      	adds	r4, r5, r4
    164e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1652:	d204      	bcs.n	165e <__udivmoddi4+0x112>
    1654:	42a2      	cmp	r2, r4
    1656:	d902      	bls.n	165e <__udivmoddi4+0x112>
    1658:	f1ac 0302 	sub.w	r3, ip, #2
    165c:	442c      	add	r4, r5
    165e:	1aa4      	subs	r4, r4, r2
    1660:	e7be      	b.n	15e0 <__udivmoddi4+0x94>
    1662:	f1c7 0c20 	rsb	ip, r7, #32
    1666:	fa20 f80c 	lsr.w	r8, r0, ip
    166a:	fa00 f307 	lsl.w	r3, r0, r7
    166e:	fa24 fc0c 	lsr.w	ip, r4, ip
    1672:	40bd      	lsls	r5, r7
    1674:	ea4c 0203 	orr.w	r2, ip, r3
    1678:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    167c:	b2ab      	uxth	r3, r5
    167e:	fbb8 fcfe 	udiv	ip, r8, lr
    1682:	0c11      	lsrs	r1, r2, #16
    1684:	fb0e 801c 	mls	r0, lr, ip, r8
    1688:	fb0c f903 	mul.w	r9, ip, r3
    168c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    1690:	4581      	cmp	r9, r0
    1692:	fa04 f407 	lsl.w	r4, r4, r7
    1696:	d923      	bls.n	16e0 <__udivmoddi4+0x194>
    1698:	1828      	adds	r0, r5, r0
    169a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    169e:	d204      	bcs.n	16aa <__udivmoddi4+0x15e>
    16a0:	4581      	cmp	r9, r0
    16a2:	d902      	bls.n	16aa <__udivmoddi4+0x15e>
    16a4:	f1ac 0102 	sub.w	r1, ip, #2
    16a8:	4428      	add	r0, r5
    16aa:	eba0 0009 	sub.w	r0, r0, r9
    16ae:	b292      	uxth	r2, r2
    16b0:	fbb0 fcfe 	udiv	ip, r0, lr
    16b4:	fb0e 001c 	mls	r0, lr, ip, r0
    16b8:	fb0c f803 	mul.w	r8, ip, r3
    16bc:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    16c0:	4598      	cmp	r8, r3
    16c2:	d90f      	bls.n	16e4 <__udivmoddi4+0x198>
    16c4:	18eb      	adds	r3, r5, r3
    16c6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    16ca:	d204      	bcs.n	16d6 <__udivmoddi4+0x18a>
    16cc:	4598      	cmp	r8, r3
    16ce:	d902      	bls.n	16d6 <__udivmoddi4+0x18a>
    16d0:	f1ac 0202 	sub.w	r2, ip, #2
    16d4:	442b      	add	r3, r5
    16d6:	eba3 0308 	sub.w	r3, r3, r8
    16da:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    16de:	e791      	b.n	1604 <__udivmoddi4+0xb8>
    16e0:	4661      	mov	r1, ip
    16e2:	e7e2      	b.n	16aa <__udivmoddi4+0x15e>
    16e4:	4662      	mov	r2, ip
    16e6:	e7f6      	b.n	16d6 <__udivmoddi4+0x18a>
    16e8:	4660      	mov	r0, ip
    16ea:	e7a2      	b.n	1632 <__udivmoddi4+0xe6>
    16ec:	4663      	mov	r3, ip
    16ee:	e7b6      	b.n	165e <__udivmoddi4+0x112>
    16f0:	4283      	cmp	r3, r0
    16f2:	d905      	bls.n	1700 <__udivmoddi4+0x1b4>
    16f4:	b10e      	cbz	r6, 16fa <__udivmoddi4+0x1ae>
    16f6:	e9c6 7000 	strd	r7, r0, [r6]
    16fa:	2100      	movs	r1, #0
    16fc:	4608      	mov	r0, r1
    16fe:	e776      	b.n	15ee <__udivmoddi4+0xa2>
    1700:	fab3 f183 	clz	r1, r3
    1704:	b981      	cbnz	r1, 1728 <__udivmoddi4+0x1dc>
    1706:	4283      	cmp	r3, r0
    1708:	d301      	bcc.n	170e <__udivmoddi4+0x1c2>
    170a:	42ba      	cmp	r2, r7
    170c:	d80a      	bhi.n	1724 <__udivmoddi4+0x1d8>
    170e:	1abc      	subs	r4, r7, r2
    1710:	eb60 0303 	sbc.w	r3, r0, r3
    1714:	2001      	movs	r0, #1
    1716:	469c      	mov	ip, r3
    1718:	2e00      	cmp	r6, #0
    171a:	d068      	beq.n	17ee <__udivmoddi4+0x2a2>
    171c:	e9c6 4c00 	strd	r4, ip, [r6]
    1720:	2100      	movs	r1, #0
    1722:	e764      	b.n	15ee <__udivmoddi4+0xa2>
    1724:	4608      	mov	r0, r1
    1726:	e7f7      	b.n	1718 <__udivmoddi4+0x1cc>
    1728:	f1c1 0c20 	rsb	ip, r1, #32
    172c:	408b      	lsls	r3, r1
    172e:	fa22 f40c 	lsr.w	r4, r2, ip
    1732:	431c      	orrs	r4, r3
    1734:	fa02 f501 	lsl.w	r5, r2, r1
    1738:	fa00 f301 	lsl.w	r3, r0, r1
    173c:	fa27 f20c 	lsr.w	r2, r7, ip
    1740:	fa20 fb0c 	lsr.w	fp, r0, ip
    1744:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1748:	4313      	orrs	r3, r2
    174a:	fbbb f8f9 	udiv	r8, fp, r9
    174e:	fa1f fe84 	uxth.w	lr, r4
    1752:	fb09 bb18 	mls	fp, r9, r8, fp
    1756:	0c1a      	lsrs	r2, r3, #16
    1758:	fb08 fa0e 	mul.w	sl, r8, lr
    175c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    1760:	4592      	cmp	sl, r2
    1762:	fa07 f701 	lsl.w	r7, r7, r1
    1766:	d93e      	bls.n	17e6 <__udivmoddi4+0x29a>
    1768:	18a2      	adds	r2, r4, r2
    176a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    176e:	d204      	bcs.n	177a <__udivmoddi4+0x22e>
    1770:	4592      	cmp	sl, r2
    1772:	d902      	bls.n	177a <__udivmoddi4+0x22e>
    1774:	f1a8 0002 	sub.w	r0, r8, #2
    1778:	4422      	add	r2, r4
    177a:	eba2 020a 	sub.w	r2, r2, sl
    177e:	b29b      	uxth	r3, r3
    1780:	fbb2 f8f9 	udiv	r8, r2, r9
    1784:	fb09 2218 	mls	r2, r9, r8, r2
    1788:	fb08 fe0e 	mul.w	lr, r8, lr
    178c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1790:	4596      	cmp	lr, r2
    1792:	d92a      	bls.n	17ea <__udivmoddi4+0x29e>
    1794:	18a2      	adds	r2, r4, r2
    1796:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    179a:	d204      	bcs.n	17a6 <__udivmoddi4+0x25a>
    179c:	4596      	cmp	lr, r2
    179e:	d902      	bls.n	17a6 <__udivmoddi4+0x25a>
    17a0:	f1a8 0302 	sub.w	r3, r8, #2
    17a4:	4422      	add	r2, r4
    17a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    17aa:	fba0 9305 	umull	r9, r3, r0, r5
    17ae:	eba2 020e 	sub.w	r2, r2, lr
    17b2:	429a      	cmp	r2, r3
    17b4:	46ce      	mov	lr, r9
    17b6:	4698      	mov	r8, r3
    17b8:	d302      	bcc.n	17c0 <__udivmoddi4+0x274>
    17ba:	d106      	bne.n	17ca <__udivmoddi4+0x27e>
    17bc:	454f      	cmp	r7, r9
    17be:	d204      	bcs.n	17ca <__udivmoddi4+0x27e>
    17c0:	ebb9 0e05 	subs.w	lr, r9, r5
    17c4:	eb63 0804 	sbc.w	r8, r3, r4
    17c8:	3801      	subs	r0, #1
    17ca:	b186      	cbz	r6, 17ee <__udivmoddi4+0x2a2>
    17cc:	ebb7 030e 	subs.w	r3, r7, lr
    17d0:	eb62 0708 	sbc.w	r7, r2, r8
    17d4:	fa07 fc0c 	lsl.w	ip, r7, ip
    17d8:	40cb      	lsrs	r3, r1
    17da:	ea4c 0303 	orr.w	r3, ip, r3
    17de:	40cf      	lsrs	r7, r1
    17e0:	e9c6 3700 	strd	r3, r7, [r6]
    17e4:	e79c      	b.n	1720 <__udivmoddi4+0x1d4>
    17e6:	4640      	mov	r0, r8
    17e8:	e7c7      	b.n	177a <__udivmoddi4+0x22e>
    17ea:	4643      	mov	r3, r8
    17ec:	e7db      	b.n	17a6 <__udivmoddi4+0x25a>
    17ee:	4631      	mov	r1, r6
    17f0:	e6fd      	b.n	15ee <__udivmoddi4+0xa2>
    17f2:	0000      	movs	r0, r0
    17f4:	0000      	movs	r0, r0
	...

000017f8 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
    17f8:	2800      	cmp	r0, #0
    17fa:	f000 80a6 	beq.w	194a <ll_adv_enable+0x152>
{
    17fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1802:	4c5b      	ldr	r4, [pc, #364]	; (1970 <ll_adv_enable+0x178>)
    1804:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
    1808:	f015 0501 	ands.w	r5, r5, #1
{
    180c:	b08c      	sub	sp, #48	; 0x30
	if (!adv || adv->is_enabled) {
    180e:	f040 8087 	bne.w	1920 <ll_adv_enable+0x128>
	ull_filter_adv_update(lll->filter_policy);
    1812:	f894 0020 	ldrb.w	r0, [r4, #32]
	lll->rl_idx = FILTER_IDX_NONE;
    1816:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1818:	0980      	lsrs	r0, r0, #6
	lll->rl_idx = FILTER_IDX_NONE;
    181a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	ull_filter_adv_update(lll->filter_policy);
    181e:	f019 fe91 	bl	1b544 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1822:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    1826:	0742      	lsls	r2, r0, #29
    1828:	d47f      	bmi.n	192a <ll_adv_enable+0x132>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    182a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    182e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1832:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1836:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    183a:	6a96      	ldr	r6, [r2, #40]	; 0x28
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    183c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    183e:	b17e      	cbz	r6, 1860 <ll_adv_enable+0x68>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    1840:	484b      	ldr	r0, [pc, #300]	; (1970 <ll_adv_enable+0x178>)
    1842:	4631      	mov	r1, r6
    1844:	f015 fbd0 	bl	16fe8 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
    1848:	7833      	ldrb	r3, [r6, #0]
    184a:	065b      	lsls	r3, r3, #25
    184c:	d504      	bpl.n	1858 <ll_adv_enable+0x60>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    184e:	2106      	movs	r1, #6
    1850:	f010 fd42 	bl	122d8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1854:	2800      	cmp	r0, #0
    1856:	d07f      	beq.n	1958 <ll_adv_enable+0x160>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1858:	4845      	ldr	r0, [pc, #276]	; (1970 <ll_adv_enable+0x178>)
    185a:	4639      	mov	r1, r7
    185c:	f015 fbc4 	bl	16fe8 <ull_adv_pdu_update_addrs>
	uint8_t ch_map = lll->chan_map;
    1860:	f894 3020 	ldrb.w	r3, [r4, #32]
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1864:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1866:	f3c3 0302 	ubfx	r3, r3, #0, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    186a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
    186e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1872:	f010 febd 	bl	125f0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1876:	4602      	mov	r2, r0
    1878:	2800      	cmp	r0, #0
    187a:	d068      	beq.n	194e <ll_adv_enable+0x156>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    187c:	7879      	ldrb	r1, [r7, #1]
    187e:	4630      	mov	r0, r6
    1880:	f015 f9ee 	bl	16c60 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1884:	493b      	ldr	r1, [pc, #236]	; (1974 <ll_adv_enable+0x17c>)
	uint16_t interval = adv->interval;
    1886:	f8b4 803c 	ldrh.w	r8, [r4, #60]	; 0x3c
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
    188a:	2600      	movs	r6, #0
	adv->ull.ticks_prepare_to_start =
    188c:	2331      	movs	r3, #49	; 0x31
    188e:	e9c4 6301 	strd	r6, r3, [r4, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1892:	fba0 0101 	umull	r0, r1, r0, r1
    1896:	a334      	add	r3, pc, #208	; (adr r3, 1968 <ll_adv_enable+0x170>)
    1898:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    189c:	e9c4 6605 	strd	r6, r6, [r4, #20]
	hdr->ref = 0U;
    18a0:	7026      	strb	r6, [r4, #0]
	adv->ull.ticks_preempt_to_start =
    18a2:	60e6      	str	r6, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    18a4:	f7ff fe38 	bl	1518 <__aeabi_uldivmod>
    18a8:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    18aa:	f012 f899 	bl	139e0 <ticker_ticks_now_get>
		const uint32_t ticks_slot = adv->ull.ticks_slot +
    18ae:	6922      	ldr	r2, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    18b0:	4b31      	ldr	r3, [pc, #196]	; (1978 <ll_adv_enable+0x180>)
		ret = ticker_start_ext(
    18b2:	9204      	str	r2, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
    18b4:	4607      	mov	r7, r0
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18b6:	4831      	ldr	r0, [pc, #196]	; (197c <ll_adv_enable+0x184>)
		ret = ticker_start_ext(
    18b8:	9406      	str	r4, [sp, #24]
    18ba:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    18be:	f202 1247 	addw	r2, r2, #327	; 0x147
		ret = ticker_start_ext(
    18c2:	f8cd 9020 	str.w	r9, [sp, #32]
    18c6:	9602      	str	r6, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18c8:	fba8 0100 	umull	r0, r1, r8, r0
		ll_adv_ticker_ext[handle].ticks_slot_window =
    18cc:	601a      	str	r2, [r3, #0]
		ret = ticker_start_ext(
    18ce:	9309      	str	r3, [sp, #36]	; 0x24
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18d0:	2391      	movs	r3, #145	; 0x91
    18d2:	fb03 1108 	mla	r1, r3, r8, r1
		ret = ticker_start_ext(
    18d6:	4b2a      	ldr	r3, [pc, #168]	; (1980 <ll_adv_enable+0x188>)
    18d8:	9307      	str	r3, [sp, #28]
    18da:	4b2a      	ldr	r3, [pc, #168]	; (1984 <ll_adv_enable+0x18c>)
    18dc:	9305      	str	r3, [sp, #20]
    18de:	f64f 73ff 	movw	r3, #65535	; 0xffff
		ret_cb = TICKER_STATUS_BUSY;
    18e2:	f04f 0a02 	mov.w	sl, #2
		ret = ticker_start_ext(
    18e6:	9303      	str	r3, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18e8:	a31f      	add	r3, pc, #124	; (adr r3, 1968 <ll_adv_enable+0x170>)
    18ea:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    18ee:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18f2:	f7ff fe11 	bl	1518 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    18f6:	2103      	movs	r1, #3
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18f8:	9001      	str	r0, [sp, #4]
		ret = ticker_start_ext(
    18fa:	463b      	mov	r3, r7
    18fc:	4652      	mov	r2, sl
    18fe:	9600      	str	r6, [sp, #0]
    1900:	4630      	mov	r0, r6
    1902:	f011 feed 	bl	136e0 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1906:	4649      	mov	r1, r9
    1908:	f014 fc94 	bl	16234 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    190c:	b9f8      	cbnz	r0, 194e <ll_adv_enable+0x156>
	adv->is_enabled = 1;
    190e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    1912:	f043 0301 	orr.w	r3, r3, #1
    1916:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    191a:	f015 fd41 	bl	173a0 <ull_scan_is_enabled_get>
    191e:	b1e8      	cbz	r0, 195c <ll_adv_enable+0x164>
			return 0;
    1920:	2500      	movs	r5, #0
}
    1922:	4628      	mov	r0, r5
    1924:	b00c      	add	sp, #48	; 0x30
    1926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    192a:	462a      	mov	r2, r5
    192c:	f104 013f 	add.w	r1, r4, #63	; 0x3f
    1930:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1934:	f019 ff98 	bl	1b868 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1938:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    193a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		if (lll->rl_idx != FILTER_IDX_NONE) {
    193e:	f43f af74 	beq.w	182a <ll_adv_enable+0x32>
			ull_filter_rpa_update(false);
    1942:	4628      	mov	r0, r5
    1944:	f019 fe44 	bl	1b5d0 <ull_filter_rpa_update>
    1948:	e76f      	b.n	182a <ll_adv_enable+0x32>
		return disable(handle);
    194a:	f015 b8ff 	b.w	16b4c <disable.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
    194e:	250c      	movs	r5, #12
}
    1950:	4628      	mov	r0, r5
    1952:	b00c      	add	sp, #48	; 0x30
    1954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_INVALID_PARAM;
    1958:	2512      	movs	r5, #18
    195a:	e7e2      	b.n	1922 <ll_adv_enable+0x12a>
		ull_filter_adv_scan_state_cb(BIT(0));
    195c:	2001      	movs	r0, #1
    195e:	f019 fdd3 	bl	1b508 <ull_filter_adv_scan_state_cb>
    1962:	e7de      	b.n	1922 <ll_adv_enable+0x12a>
    1964:	f3af 8000 	nop.w
    1968:	1afd498d 	.word	0x1afd498d
    196c:	00000007 	.word	0x00000007
    1970:	20004938 	.word	0x20004938
    1974:	3b9aca00 	.word	0x3b9aca00
    1978:	20004980 	.word	0x20004980
    197c:	84e72a00 	.word	0x84e72a00
    1980:	0001583d 	.word	0x0001583d
    1984:	00016cd1 	.word	0x00016cd1

00001988 <ull_adv_time_update>:
{
    1988:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    198a:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    198e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1990:	f3c3 0302 	ubfx	r3, r3, #0, #3
{
    1994:	460d      	mov	r5, r1
    1996:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1998:	2101      	movs	r1, #1
    199a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    199e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    19a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    19a4:	f010 fe24 	bl	125f0 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    19a8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    19aa:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    19ac:	4628      	mov	r0, r5
    19ae:	f015 f957 	bl	16c60 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    19b2:	491d      	ldr	r1, [pc, #116]	; (1a28 <ull_adv_time_update+0xa0>)
    19b4:	a31a      	add	r3, pc, #104	; (adr r3, 1a20 <ull_adv_time_update+0x98>)
    19b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ba:	fba0 0101 	umull	r0, r1, r0, r1
    19be:	f7ff fdab 	bl	1518 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    19c2:	6923      	ldr	r3, [r4, #16]
    19c4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    19c6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    19c8:	d220      	bcs.n	1a0c <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    19ca:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    19cc:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    19ce:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    19d0:	4a16      	ldr	r2, [pc, #88]	; (1a2c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    19d2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    19d4:	4b16      	ldr	r3, [pc, #88]	; (1a30 <ull_adv_time_update+0xa8>)
    19d6:	1aa2      	subs	r2, r4, r2
    19d8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    19dc:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    19de:	0912      	lsrs	r2, r2, #4
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    19e0:	2300      	movs	r3, #0
    19e2:	440a      	add	r2, r1
    19e4:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    19e6:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    19e8:	4912      	ldr	r1, [pc, #72]	; (1a34 <ull_adv_time_update+0xac>)
    19ea:	9105      	str	r1, [sp, #20]
    19ec:	e9cd 3303 	strd	r3, r3, [sp, #12]
    19f0:	2103      	movs	r1, #3
    19f2:	b2d2      	uxtb	r2, r2
    19f4:	9606      	str	r6, [sp, #24]
    19f6:	9300      	str	r3, [sp, #0]
    19f8:	4618      	mov	r0, r3
    19fa:	f011 ff39 	bl	13870 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    19fe:	4631      	mov	r1, r6
    1a00:	f014 fc18 	bl	16234 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1a04:	b948      	cbnz	r0, 1a1a <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    1a06:	6125      	str	r5, [r4, #16]
}
    1a08:	b00a      	add	sp, #40	; 0x28
    1a0a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    1a0c:	d902      	bls.n	1a14 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    1a0e:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    1a10:	2300      	movs	r3, #0
    1a12:	e7dc      	b.n	19ce <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    1a14:	2000      	movs	r0, #0
}
    1a16:	b00a      	add	sp, #40	; 0x28
    1a18:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1a1a:	200c      	movs	r0, #12
}
    1a1c:	b00a      	add	sp, #40	; 0x28
    1a1e:	bd70      	pop	{r4, r5, r6, pc}
    1a20:	1afd498d 	.word	0x1afd498d
    1a24:	00000007 	.word	0x00000007
    1a28:	3b9aca00 	.word	0x3b9aca00
    1a2c:	20004938 	.word	0x20004938
    1a30:	38e38e39 	.word	0x38e38e39
    1a34:	0001583d 	.word	0x0001583d

00001a38 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1a38:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    1a3a:	4c19      	ldr	r4, [pc, #100]	; (1aa0 <ll_scan_params_set+0x68>)
{
    1a3c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    1a40:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    1a44:	f01c 0501 	ands.w	r5, ip, #1
    1a48:	d122      	bne.n	1a90 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    1a4a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    1a4e:	0140      	lsls	r0, r0, #5
    1a50:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    1a54:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    1a56:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    1a5a:	f00e 0e18 	and.w	lr, lr, #24
    1a5e:	f000 0020 	and.w	r0, r0, #32
    1a62:	ea40 000e 	orr.w	r0, r0, lr
    1a66:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    1a6a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a6c:	480d      	ldr	r0, [pc, #52]	; (1aa4 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    1a6e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a72:	fba2 0100 	umull	r0, r1, r2, r0
    1a76:	2391      	movs	r3, #145	; 0x91
    1a78:	fb03 1102 	mla	r1, r3, r2, r1
    1a7c:	a306      	add	r3, pc, #24	; (adr r3, 1a98 <ll_scan_params_set+0x60>)
    1a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    1a82:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a86:	f7ff fd47 	bl	1518 <__aeabi_uldivmod>
    1a8a:	6420      	str	r0, [r4, #64]	; 0x40
}
    1a8c:	4628      	mov	r0, r5
    1a8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1a90:	250c      	movs	r5, #12
}
    1a92:	4628      	mov	r0, r5
    1a94:	bd38      	pop	{r3, r4, r5, pc}
    1a96:	bf00      	nop
    1a98:	1afd498d 	.word	0x1afd498d
    1a9c:	00000007 	.word	0x00000007
    1aa0:	200049a4 	.word	0x200049a4
    1aa4:	84e72a00 	.word	0x84e72a00

00001aa8 <ull_scan_params_set>:
{
    1aa8:	b510      	push	{r4, lr}
    1aaa:	f89d c008 	ldrb.w	ip, [sp, #8]
    1aae:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    1ab0:	0149      	lsls	r1, r1, #5
    1ab2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    1ab6:	f000 0018 	and.w	r0, r0, #24
    1aba:	f001 0c20 	and.w	ip, r1, #32
    1abe:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    1ac0:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    1ac2:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1ac6:	480c      	ldr	r0, [pc, #48]	; (1af8 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    1ac8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    1acc:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1ad0:	2291      	movs	r2, #145	; 0x91
    1ad2:	fba3 0100 	umull	r0, r1, r3, r0
    1ad6:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1ada:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1ade:	a304      	add	r3, pc, #16	; (adr r3, 1af0 <ull_scan_params_set+0x48>)
    1ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ae4:	f7ff fd18 	bl	1518 <__aeabi_uldivmod>
    1ae8:	6260      	str	r0, [r4, #36]	; 0x24
}
    1aea:	bd10      	pop	{r4, pc}
    1aec:	f3af 8000 	nop.w
    1af0:	1afd498d 	.word	0x1afd498d
    1af4:	00000007 	.word	0x00000007
    1af8:	84e72a00 	.word	0x84e72a00
    1afc:	00000000 	.word	0x00000000

00001b00 <ull_scan_enable>:
{
    1b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b04:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1b06:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1b0a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    1b0e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    1b12:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1b16:	f360 1386 	bfi	r3, r0, #6, #1
{
    1b1a:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1b1c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1b20:	f011 ff96 	bl	13a50 <ll_addr_read>
	lll->chan = 0U;
    1b24:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b28:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1b2a:	484d      	ldr	r0, [pc, #308]	; (1c60 <ull_scan_enable+0x160>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1b2c:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    1b2e:	f002 0279 	and.w	r2, r2, #121	; 0x79
    1b32:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b34:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1b38:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b3c:	2291      	movs	r2, #145	; 0x91
    1b3e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1b42:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1b46:	a344      	add	r3, pc, #272	; (adr r3, 1c58 <ull_scan_enable+0x158>)
    1b48:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    1b4c:	7025      	strb	r5, [r4, #0]
    1b4e:	f7ff fce3 	bl	1518 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    1b52:	2331      	movs	r3, #49	; 0x31
    1b54:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    1b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    1b5a:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    1b5c:	3309      	adds	r3, #9
	    (ticks_interval -
    1b5e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1b62:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    1b64:	bf32      	itee	cc
    1b66:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    1b68:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    1b6a:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b6c:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    1b6e:	f011 ff37 	bl	139e0 <ticker_ticks_now_get>
	if (!lll->conn) {
    1b72:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    1b74:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1b76:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d04c      	beq.n	1c18 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1b7e:	4d39      	ldr	r5, [pc, #228]	; (1c64 <ull_scan_enable+0x164>)
    1b80:	4b39      	ldr	r3, [pc, #228]	; (1c68 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b82:	f8cd 8020 	str.w	r8, [sp, #32]
    1b86:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1b88:	1b65      	subs	r5, r4, r5
    1b8a:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b8e:	4834      	ldr	r0, [pc, #208]	; (1c60 <ull_scan_enable+0x160>)
    1b90:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b92:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b96:	fba3 0100 	umull	r0, r1, r3, r0
    1b9a:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b9c:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1ba0:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ba4:	6923      	ldr	r3, [r4, #16]
    1ba6:	9304      	str	r3, [sp, #16]
    1ba8:	4b30      	ldr	r3, [pc, #192]	; (1c6c <ull_scan_enable+0x16c>)
    1baa:	9307      	str	r3, [sp, #28]
    1bac:	4b30      	ldr	r3, [pc, #192]	; (1c70 <ull_scan_enable+0x170>)
    1bae:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1bb0:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1bb4:	a328      	add	r3, pc, #160	; (adr r3, 1c58 <ull_scan_enable+0x158>)
    1bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    1bba:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1bbe:	f7ff fcab 	bl	1518 <__aeabi_uldivmod>
    1bc2:	4610      	mov	r0, r2
    1bc4:	4619      	mov	r1, r3
    1bc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1bca:	2300      	movs	r3, #0
    1bcc:	f7ff fca4 	bl	1518 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1bd0:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1bd2:	3504      	adds	r5, #4
    1bd4:	b2ed      	uxtb	r5, r5
    1bd6:	462a      	mov	r2, r5
    1bd8:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1bdc:	463b      	mov	r3, r7
    1bde:	2103      	movs	r1, #3
    1be0:	f8cd a000 	str.w	sl, [sp]
    1be4:	4650      	mov	r0, sl
    1be6:	f011 fdd1 	bl	1378c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1bea:	4641      	mov	r1, r8
    1bec:	f014 fb22 	bl	16234 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1bf0:	4605      	mov	r5, r0
    1bf2:	b968      	cbnz	r0, 1c10 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
    1bf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1bf8:	f043 0301 	orr.w	r3, r3, #1
    1bfc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    1c00:	f015 f9c8 	bl	16f94 <ull_adv_is_enabled_get>
    1c04:	4604      	mov	r4, r0
    1c06:	b1f8      	cbz	r0, 1c48 <ull_scan_enable+0x148>
	return 0;
    1c08:	4628      	mov	r0, r5
}
    1c0a:	b00c      	add	sp, #48	; 0x30
    1c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1c10:	200c      	movs	r0, #12
}
    1c12:	b00c      	add	sp, #48	; 0x30
    1c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1c18:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1c1c:	6921      	ldr	r1, [r4, #16]
    1c1e:	4643      	mov	r3, r8
    1c20:	aa0a      	add	r2, sp, #40	; 0x28
    1c22:	2003      	movs	r0, #3
    1c24:	f002 f914 	bl	3e50 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c2a:	2900      	cmp	r1, #0
    1c2c:	d0a7      	beq.n	1b7e <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1c2e:	4811      	ldr	r0, [pc, #68]	; (1c74 <ull_scan_enable+0x174>)
    1c30:	a309      	add	r3, pc, #36	; (adr r3, 1c58 <ull_scan_enable+0x158>)
    1c32:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c36:	fba1 0100 	umull	r0, r1, r1, r0
    1c3a:	f7ff fc6d 	bl	1518 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1c3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1c40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1c44:	4407      	add	r7, r0
    1c46:	e79a      	b.n	1b7e <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
    1c48:	4648      	mov	r0, r9
    1c4a:	f019 fc5d 	bl	1b508 <ull_filter_adv_scan_state_cb>
	return 0;
    1c4e:	4620      	mov	r0, r4
}
    1c50:	b00c      	add	sp, #48	; 0x30
    1c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c56:	bf00      	nop
    1c58:	1afd498d 	.word	0x1afd498d
    1c5c:	00000007 	.word	0x00000007
    1c60:	84e72a00 	.word	0x84e72a00
    1c64:	200049a4 	.word	0x200049a4
    1c68:	38e38e39 	.word	0x38e38e39
    1c6c:	0001583d 	.word	0x0001583d
    1c70:	0001719d 	.word	0x0001719d
    1c74:	3b9aca00 	.word	0x3b9aca00

00001c78 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1c7c:	f890 e0bc 	ldrb.w	lr, [r0, #188]	; 0xbc
    1c80:	f890 c0bb 	ldrb.w	ip, [r0, #187]	; 0xbb
    1c84:	45e6      	cmp	lr, ip
{
    1c86:	b08b      	sub	sp, #44	; 0x2c
    1c88:	4604      	mov	r4, r0
    1c8a:	460e      	mov	r6, r1
    1c8c:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    1c8e:	d02e      	beq.n	1cee <ull_conn_llcp+0x76>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1c90:	ebac 0c0e 	sub.w	ip, ip, lr
    1c94:	f00c 0c03 	and.w	ip, ip, #3
    1c98:	f1bc 0f02 	cmp.w	ip, #2
    1c9c:	d00c      	beq.n	1cb8 <ull_conn_llcp+0x40>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    1c9e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1ca2:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1ca6:	1a9b      	subs	r3, r3, r2
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	2b01      	cmp	r3, #1
    1cac:	f000 817b 	beq.w	1fa6 <ull_conn_llcp+0x32e>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1cb0:	2000      	movs	r0, #0
	}

	/* Continue prepare */
	return 0;
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */
}
    1cb2:	b00b      	add	sp, #44	; 0x2c
    1cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1cb8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    1cbc:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1cc0:	429a      	cmp	r2, r3
    1cc2:	d006      	beq.n	1cd2 <ull_conn_llcp+0x5a>
			     LLCP_LENGTH_STATE_RESIZE) ||
    1cc4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			if ((conn->llcp_length.state ==
    1cc8:	f003 0306 	and.w	r3, r3, #6
    1ccc:	2b04      	cmp	r3, #4
    1cce:	f000 83a9 	beq.w	2424 <ull_conn_llcp+0x7ac>
		switch (conn->llcp_type) {
    1cd2:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
    1cd6:	1e7b      	subs	r3, r7, #1
    1cd8:	2b05      	cmp	r3, #5
    1cda:	f200 8352 	bhi.w	2382 <ull_conn_llcp+0x70a>
    1cde:	e8df f013 	tbh	[pc, r3, lsl #1]
    1ce2:	001f      	.short	0x001f
    1ce4:	029c0326 	.word	0x029c0326
    1ce8:	02610350 	.word	0x02610350
    1cec:	01cb      	.short	0x01cb
	    !conn->llcp_enc.pause_rx) {
    1cee:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
    1cf2:	f013 0801 	ands.w	r8, r3, #1
    1cf6:	d1d2      	bne.n	1c9e <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1cf8:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
    1cfc:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    1d00:	428a      	cmp	r2, r1
    1d02:	f000 834c 	beq.w	239e <ull_conn_llcp+0x726>
			conn->llcp_type = LLCP_CONN_UPD;
    1d06:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d08:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
			conn->llcp_type = LLCP_CONN_UPD;
    1d0c:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d10:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
			conn->llcp_ack -= 2U;
    1d14:	f1ae 0c02 	sub.w	ip, lr, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d18:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
    1d1a:	f880 c0bc 	strb.w	ip, [r0, #188]	; 0xbc
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d1e:	d1d1      	bne.n	1cc4 <ull_conn_llcp+0x4c>
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d20:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1d22:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    1d24:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d26:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d2a:	b2bf      	uxth	r7, r7
    1d2c:	19ea      	adds	r2, r5, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d2e:	f013 0107 	ands.w	r1, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d32:	b292      	uxth	r2, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d34:	f040 83bc 	bne.w	24b0 <ull_conn_llcp+0x838>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1d38:	f8b4 50c0 	ldrh.w	r5, [r4, #192]	; 0xc0
    1d3c:	1b52      	subs	r2, r2, r5
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1d3e:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1d40:	fa1f f982 	uxth.w	r9, r2
	} else if (instant_latency <= 0x7FFF) {
    1d44:	d4ab      	bmi.n	1c9e <ull_conn_llcp+0x26>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d46:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    1d4a:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
    1d4e:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    1d52:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d56:	4293      	cmp	r3, r2
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1d58:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    1d5c:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d60:	d009      	beq.n	1d76 <ull_conn_llcp+0xfe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1d62:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d66:	f003 030f 	and.w	r3, r3, #15
    1d6a:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1d6c:	bf04      	itt	eq
    1d6e:	f884 215d 	strbeq.w	r2, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1d72:	f8a4 10ac 	strheq.w	r1, [r4, #172]	; 0xac
	if (conn == conn_upd_curr) {
    1d76:	4bb4      	ldr	r3, [pc, #720]	; (2048 <ull_conn_llcp+0x3d0>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1d78:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
	if (conn == conn_upd_curr) {
    1d7c:	681a      	ldr	r2, [r3, #0]
    1d7e:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1d80:	bf04      	itt	eq
    1d82:	2200      	moveq	r2, #0
    1d84:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1d86:	f1b8 0f00 	cmp.w	r8, #0
    1d8a:	f000 8722 	beq.w	2bd2 <ull_conn_llcp+0xf5a>
    1d8e:	f8d8 0000 	ldr.w	r0, [r8]
    1d92:	2800      	cmp	r0, #0
    1d94:	f000 871d 	beq.w	2bd2 <ull_conn_llcp+0xf5a>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1d98:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    1d9c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1da0:	6842      	ldr	r2, [r0, #4]
    1da2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
    1da6:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1da8:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1dac:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
		if ((conn->llcp_cu.interval != lll->interval) ||
    1db0:	f000 872a 	beq.w	2c08 <ull_conn_llcp+0xf90>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1db4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1db8:	f8a8 301e 	strh.w	r3, [r8, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1dbc:	2318      	movs	r3, #24
    1dbe:	f888 3004 	strb.w	r3, [r8, #4]
			cu->status = 0x00;
    1dc2:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1dc4:	f8a8 c006 	strh.w	ip, [r8, #6]
			cu->latency = conn->llcp_cu.latency;
    1dc8:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1dcc:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->status = 0x00;
    1dd0:	f888 301c 	strb.w	r3, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1dd4:	4641      	mov	r1, r8
    1dd6:	f014 f9b5 	bl	16144 <ll_rx_put>
		ll_rx_sched();
    1dda:	f014 f9bd 	bl	16158 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1dde:	68a3      	ldr	r3, [r4, #8]
    1de0:	2b00      	cmp	r3, #0
    1de2:	da09      	bge.n	1df8 <ull_conn_llcp+0x180>
			uint32_t ticks_prepare_to_start =
    1de4:	68e0      	ldr	r0, [r4, #12]
    1de6:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1dec:	4290      	cmp	r0, r2
    1dee:	bf2c      	ite	cs
    1df0:	1831      	addcs	r1, r6, r0
    1df2:	18b1      	addcc	r1, r6, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1df4:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1df6:	1ace      	subs	r6, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1dfa:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
    1dfe:	fb13 f309 	smulbb	r3, r3, r9
    1e02:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1e04:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
    1e08:	fb18 f201 	smulbb	r2, r8, r1
    1e0c:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1e0e:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1e10:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
    1e14:	f080 86cb 	bcs.w	2bae <ull_conn_llcp+0xf36>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1e18:	1ad3      	subs	r3, r2, r3
    1e1a:	498c      	ldr	r1, [pc, #560]	; (204c <ull_conn_llcp+0x3d4>)
    1e1c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1e20:	fb02 f303 	mul.w	r3, r2, r3
    1e24:	fba3 0101 	umull	r0, r1, r3, r1
    1e28:	a385      	add	r3, pc, #532	; (adr r3, 2040 <ull_conn_llcp+0x3c8>)
    1e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e2e:	f7ff fb73 	bl	1518 <__aeabi_uldivmod>
    1e32:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1e36:	441e      	add	r6, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    1e38:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1e3a:	441d      	add	r5, r3
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
    1e3c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1e40:	1bef      	subs	r7, r5, r7
    1e42:	444f      	add	r7, r9
		conn_interval_us = conn->llcp_cu.interval *
    1e44:	f240 45e2 	movw	r5, #1250	; 0x4e2
		} else if (!lll->role) {
    1e48:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1e4a:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1e4c:	fb05 f508 	mul.w	r5, r5, r8
		} else if (!lll->role) {
    1e50:	f2c0 87b9 	blt.w	2dc6 <ull_conn_llcp+0x114e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1e54:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    1e58:	487c      	ldr	r0, [pc, #496]	; (204c <ull_conn_llcp+0x3d4>)
    1e5a:	a379      	add	r3, pc, #484	; (adr r3, 2040 <ull_conn_llcp+0x3c8>)
    1e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e60:	fba1 0100 	umull	r0, r1, r1, r0
    1e64:	f7ff fb58 	bl	1518 <__aeabi_uldivmod>
    1e68:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1e6c:	3701      	adds	r7, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1e6e:	4978      	ldr	r1, [pc, #480]	; (2050 <ull_conn_llcp+0x3d8>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e70:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
    1e74:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e78:	4b76      	ldr	r3, [pc, #472]	; (2054 <ull_conn_llcp+0x3dc>)
		lll->interval = conn->llcp_cu.interval;
    1e7a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1e7e:	4429      	add	r1, r5
    1e80:	fbb1 f1f5 	udiv	r1, r1, r5
    1e84:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e88:	f242 7110 	movw	r1, #10000	; 0x2710
    1e8c:	fb01 5202 	mla	r2, r1, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e90:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e92:	3a01      	subs	r2, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1e94:	1d81      	adds	r1, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e96:	fbb2 f2f5 	udiv	r2, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e9a:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e9e:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1ea2:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1ea4:	428a      	cmp	r2, r1
		lll->latency = conn->llcp_cu.latency;
    1ea6:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1ea8:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1eac:	dd04      	ble.n	1eb8 <ull_conn_llcp+0x240>
    1eae:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1eb2:	30fa      	adds	r0, #250	; 0xfa
    1eb4:	4402      	add	r2, r0
    1eb6:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1eb8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1ebc:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
    1ec0:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
    1ec2:	bf44      	itt	mi
    1ec4:	2300      	movmi	r3, #0
    1ec6:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1eca:	2102      	movs	r1, #2
    1ecc:	2001      	movs	r0, #1
    1ece:	f01c ff5b 	bl	1ed88 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1ed2:	2200      	movs	r2, #0
    1ed4:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1ed6:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1ed8:	2001      	movs	r0, #1
    1eda:	f010 fa59 	bl	12390 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1ede:	495e      	ldr	r1, [pc, #376]	; (2058 <ull_conn_llcp+0x3e0>)
    1ee0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    1ee4:	4620      	mov	r0, r4
    1ee6:	f010 f9e3 	bl	122b0 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1eea:	f100 0805 	add.w	r8, r0, #5
    1eee:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1ef2:	4b5a      	ldr	r3, [pc, #360]	; (205c <ull_conn_llcp+0x3e4>)
    1ef4:	9400      	str	r4, [sp, #0]
    1ef6:	4642      	mov	r2, r8
    1ef8:	2101      	movs	r1, #1
    1efa:	2000      	movs	r0, #0
    1efc:	f011 fcd0 	bl	138a0 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1f00:	f030 0302 	bics.w	r3, r0, #2
    1f04:	d00c      	beq.n	1f20 <ull_conn_llcp+0x2a8>
    1f06:	4a56      	ldr	r2, [pc, #344]	; (2060 <ull_conn_llcp+0x3e8>)
    1f08:	4956      	ldr	r1, [pc, #344]	; (2064 <ull_conn_llcp+0x3ec>)
    1f0a:	4857      	ldr	r0, [pc, #348]	; (2068 <ull_conn_llcp+0x3f0>)
    1f0c:	f640 43cb 	movw	r3, #3275	; 0xccb
    1f10:	f023 fdf8 	bl	25b04 <printk>
    1f14:	4040      	eors	r0, r0
    1f16:	f380 8811 	msr	BASEPRI, r0
    1f1a:	f04f 0003 	mov.w	r0, #3
    1f1e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f20:	9408      	str	r4, [sp, #32]
    1f22:	9406      	str	r4, [sp, #24]
    1f24:	6923      	ldr	r3, [r4, #16]
    1f26:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f28:	4c48      	ldr	r4, [pc, #288]	; (204c <ull_conn_llcp+0x3d4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f2a:	4b50      	ldr	r3, [pc, #320]	; (206c <ull_conn_llcp+0x3f4>)
    1f2c:	9307      	str	r3, [sp, #28]
    1f2e:	4b50      	ldr	r3, [pc, #320]	; (2070 <ull_conn_llcp+0x3f8>)
    1f30:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f32:	fba5 5404 	umull	r5, r4, r5, r4
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f36:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1f3a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1f3c:	4628      	mov	r0, r5
    1f3e:	a340      	add	r3, pc, #256	; (adr r3, 2040 <ull_conn_llcp+0x3c8>)
    1f40:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f44:	4621      	mov	r1, r4
    1f46:	f7ff fae7 	bl	1518 <__aeabi_uldivmod>
    1f4a:	4610      	mov	r0, r2
    1f4c:	4619      	mov	r1, r3
    1f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f52:	2300      	movs	r3, #0
    1f54:	f7ff fae0 	bl	1518 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f58:	a339      	add	r3, pc, #228	; (adr r3, 2040 <ull_conn_llcp+0x3c8>)
    1f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f5e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f60:	4621      	mov	r1, r4
    1f62:	4628      	mov	r0, r5
    1f64:	f7ff fad8 	bl	1518 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f68:	4633      	mov	r3, r6
    1f6a:	e9cd 7000 	strd	r7, r0, [sp]
    1f6e:	4642      	mov	r2, r8
    1f70:	2101      	movs	r1, #1
    1f72:	2000      	movs	r0, #0
    1f74:	f011 fc0a 	bl	1378c <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1f78:	f030 0302 	bics.w	r3, r0, #2
    1f7c:	d00c      	beq.n	1f98 <ull_conn_llcp+0x320>
    1f7e:	4a38      	ldr	r2, [pc, #224]	; (2060 <ull_conn_llcp+0x3e8>)
    1f80:	4938      	ldr	r1, [pc, #224]	; (2064 <ull_conn_llcp+0x3ec>)
    1f82:	4839      	ldr	r0, [pc, #228]	; (2068 <ull_conn_llcp+0x3f0>)
    1f84:	f640 43e5 	movw	r3, #3301	; 0xce5
    1f88:	f023 fdbc 	bl	25b04 <printk>
    1f8c:	4040      	eors	r0, r0
    1f8e:	f380 8811 	msr	BASEPRI, r0
    1f92:	f04f 0003 	mov.w	r0, #3
    1f96:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1f98:	f1b9 0f00 	cmp.w	r9, #0
    1f9c:	f040 86f4 	bne.w	2d88 <ull_conn_llcp+0x1110>
				return -ECANCELED;
    1fa0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1fa4:	e685      	b.n	1cb2 <ull_conn_llcp+0x3a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1fa6:	4833      	ldr	r0, [pc, #204]	; (2074 <ull_conn_llcp+0x3fc>)
    1fa8:	f010 f94c 	bl	12244 <mem_acquire>
		if (tx) {
    1fac:	2800      	cmp	r0, #0
    1fae:	d038      	beq.n	2022 <ull_conn_llcp+0x3aa>
			conn->llcp_terminate.ack--;
    1fb0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    1fb4:	3b01      	subs	r3, #1
    1fb6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fba:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1fbc:	2202      	movs	r2, #2
    1fbe:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fc0:	f043 0303 	orr.w	r3, r3, #3
    1fc4:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    1fc6:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    1fc8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
    1fcc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		if (!conn->tx_ctrl) {
    1fd0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			pdu_tx->llctrl.terminate_ind.error_code =
    1fd4:	7202      	strb	r2, [r0, #8]
	if (
    1fd6:	b1b3      	cbz	r3, 2006 <ull_conn_llcp+0x38e>
	    !conn->llcp_enc.pause_tx &&
    1fd8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1fdc:	0795      	lsls	r5, r2, #30
    1fde:	d412      	bmi.n	2006 <ull_conn_llcp+0x38e>
	    !conn->llcp_phy.pause_tx &&
    1fe0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1fe4:	07d2      	lsls	r2, r2, #31
    1fe6:	d40e      	bmi.n	2006 <ull_conn_llcp+0x38e>
		if (conn->tx_head == conn->tx_data) {
    1fe8:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1fec:	4293      	cmp	r3, r2
    1fee:	f000 8700 	beq.w	2df2 <ull_conn_llcp+0x117a>
		} else if (!conn->tx_ctrl) {
    1ff2:	b959      	cbnz	r1, 200c <ull_conn_llcp+0x394>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1ff4:	791a      	ldrb	r2, [r3, #4]
    1ff6:	f002 0203 	and.w	r2, r2, #3
    1ffa:	2a03      	cmp	r2, #3
    1ffc:	f001 809c 	beq.w	3138 <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2000:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    2004:	e004      	b.n	2010 <ull_conn_llcp+0x398>
		if (!conn->tx_ctrl) {
    2006:	2900      	cmp	r1, #0
    2008:	f000 847f 	beq.w	290a <ull_conn_llcp+0xc92>
	tx->next = conn->tx_ctrl_last->next;
    200c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2010:	681a      	ldr	r2, [r3, #0]
    2012:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2014:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2016:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2018:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    201c:	2b00      	cmp	r3, #0
    201e:	f000 8205 	beq.w	242c <ull_conn_llcp+0x7b4>
		if (!conn->procedure_expire) {
    2022:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    2026:	2800      	cmp	r0, #0
    2028:	f47f ae42 	bne.w	1cb0 <ull_conn_llcp+0x38>
			conn->procedure_expire = conn->supervision_reload;
    202c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
    2030:	2b01      	cmp	r3, #1
    2032:	f240 8465 	bls.w	2900 <ull_conn_llcp+0xc88>
			conn->procedure_expire = conn->supervision_reload;
    2036:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    203a:	e639      	b.n	1cb0 <ull_conn_llcp+0x38>
    203c:	f3af 8000 	nop.w
    2040:	1afd498d 	.word	0x1afd498d
    2044:	00000007 	.word	0x00000007
    2048:	20004a00 	.word	0x20004a00
    204c:	3b9aca00 	.word	0x3b9aca00
    2050:	026259ff 	.word	0x026259ff
    2054:	01c9c37f 	.word	0x01c9c37f
    2058:	20003408 	.word	0x20003408
    205c:	000178b1 	.word	0x000178b1
    2060:	0002cfb4 	.word	0x0002cfb4
    2064:	0002d0d0 	.word	0x0002d0d0
    2068:	0002c8dc 	.word	0x0002c8dc
    206c:	00017859 	.word	0x00017859
    2070:	0001a3a9 	.word	0x0001a3a9
    2074:	20004a94 	.word	0x20004a94
			event_counter = lll->event_counter +
    2078:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    207a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    207c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    2080:	440a      	add	r2, r1
    2082:	442a      	add	r2, r5
    2084:	b295      	uxth	r5, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    2086:	07da      	lsls	r2, r3, #31
    2088:	4619      	mov	r1, r3
    208a:	f100 8277 	bmi.w	257c <ull_conn_llcp+0x904>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    208e:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    2092:	1aad      	subs	r5, r5, r2
    2094:	0428      	lsls	r0, r5, #16
    2096:	f53f ae02 	bmi.w	1c9e <ull_conn_llcp+0x26>
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
    209a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
    209e:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
    20a2:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    20a6:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
    20aa:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    20ae:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
    20b2:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
    20b6:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    20ba:	f040 859b 	bne.w	2bf4 <ull_conn_llcp+0xf7c>
		uint16_t eff_tx_time = lll->max_tx_time;
    20be:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    20c2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    20c6:	d008      	beq.n	20da <ull_conn_llcp+0x462>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    20c8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    20cc:	095b      	lsrs	r3, r3, #5
    20ce:	f363 0202 	bfi	r2, r3, #0, #3
    20d2:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    20d6:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    20da:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    20de:	2d00      	cmp	r5, #0
    20e0:	f000 85af 	beq.w	2c42 <ull_conn_llcp+0xfca>
    20e4:	6828      	ldr	r0, [r5, #0]
    20e6:	2800      	cmp	r0, #0
    20e8:	f000 85ab 	beq.w	2c42 <ull_conn_llcp+0xfca>
		conn->llcp_rx = rx->hdr.link->mem;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    20ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		    (lll->phy_rx == old_rx)) {
    20f0:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		conn->llcp_rx = rx->hdr.link->mem;
    20f4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    20f8:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    20fc:	0789      	lsls	r1, r1, #30
    20fe:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    2102:	f3c2 0e02 	ubfx	lr, r2, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2106:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    210a:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    210e:	d402      	bmi.n	2116 <ull_conn_llcp+0x49e>
    2110:	4599      	cmp	r9, r3
    2112:	f000 868a 	beq.w	2e2a <ull_conn_llcp+0x11b2>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    2116:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2118:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    211a:	231c      	movs	r3, #28
    211c:	712b      	strb	r3, [r5, #4]

		upd = (void *)rx->pdu;
		upd->status = 0U;
    211e:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    2120:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    2124:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    2128:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    212a:	4629      	mov	r1, r5
    212c:	f014 f80a 	bl	16144 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    2130:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    2134:	2d00      	cmp	r5, #0
    2136:	f000 8613 	beq.w	2d60 <ull_conn_llcp+0x10e8>
    213a:	6828      	ldr	r0, [r5, #0]
    213c:	2800      	cmp	r0, #0
    213e:	f000 860f 	beq.w	2d60 <ull_conn_llcp+0x10e8>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    2142:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
    2146:	6842      	ldr	r2, [r0, #4]
    2148:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
    214c:	42b3      	cmp	r3, r6
    214e:	d30a      	bcc.n	2166 <ull_conn_llcp+0x4ee>
    2150:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2154:	d807      	bhi.n	2166 <ull_conn_llcp+0x4ee>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    2156:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
    215a:	42bb      	cmp	r3, r7
    215c:	d303      	bcc.n	2166 <ull_conn_llcp+0x4ee>
		    (eff_rx_time <= lll->max_rx_time) &&
    215e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2162:	f240 87f1 	bls.w	3148 <ull_conn_llcp+0x14d0>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    2166:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
    216a:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    216e:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    2170:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2172:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2174:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    2178:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    217c:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    217e:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    2182:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    2184:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2186:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    218a:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    218c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    218e:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2190:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    2192:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2194:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2196:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    2198:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    219a:	f013 ffd3 	bl	16144 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    219e:	f013 ffdb 	bl	16158 <ll_rx_sched>
    21a2:	e57c      	b.n	1c9e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    21a4:	48cb      	ldr	r0, [pc, #812]	; (24d4 <ull_conn_llcp+0x85c>)
    21a6:	f010 f84d 	bl	12244 <mem_acquire>
	if (tx) {
    21aa:	2800      	cmp	r0, #0
    21ac:	f43f ad77 	beq.w	1c9e <ull_conn_llcp+0x26>
		conn->llcp_ack = conn->llcp_req;
    21b0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    21b4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    21b8:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21ba:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    21bc:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    21be:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21c2:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    21c6:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21c8:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    21ca:	71c1      	strb	r1, [r0, #7]
		if (!conn->tx_ctrl) {
    21cc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	if (
    21d0:	2b00      	cmp	r3, #0
    21d2:	f000 83a3 	beq.w	291c <ull_conn_llcp+0xca4>
	    !conn->llcp_enc.pause_tx &&
    21d6:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    21da:	078d      	lsls	r5, r1, #30
    21dc:	f100 839e 	bmi.w	291c <ull_conn_llcp+0xca4>
	    !conn->llcp_phy.pause_tx &&
    21e0:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    21e4:	07c9      	lsls	r1, r1, #31
    21e6:	f100 8399 	bmi.w	291c <ull_conn_llcp+0xca4>
		if (conn->tx_head == conn->tx_data) {
    21ea:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    21ee:	428b      	cmp	r3, r1
    21f0:	f000 8767 	beq.w	30c2 <ull_conn_llcp+0x144a>
		} else if (!conn->tx_ctrl) {
    21f4:	2a00      	cmp	r2, #0
    21f6:	f000 87e0 	beq.w	31ba <ull_conn_llcp+0x1542>
	tx->next = conn->tx_ctrl_last->next;
    21fa:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    21fe:	681a      	ldr	r2, [r3, #0]
    2200:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2202:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2204:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2206:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    220a:	2b00      	cmp	r3, #0
    220c:	f000 85b8 	beq.w	2d80 <ull_conn_llcp+0x1108>
		conn->procedure_expire = conn->procedure_reload;
    2210:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2214:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2218:	e541      	b.n	1c9e <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    221a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    221e:	f013 0503 	ands.w	r5, r3, #3
    2222:	f47f ad3c 	bne.w	1c9e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2226:	48ab      	ldr	r0, [pc, #684]	; (24d4 <ull_conn_llcp+0x85c>)
    2228:	f010 f80c 	bl	12244 <mem_acquire>
	if (!tx) {
    222c:	4606      	mov	r6, r0
    222e:	2800      	cmp	r0, #0
    2230:	f43f ad35 	beq.w	1c9e <ull_conn_llcp+0x26>
	if (!lll->role) {
    2234:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2238:	2b00      	cmp	r3, #0
    223a:	f280 82fd 	bge.w	2838 <ull_conn_llcp+0xbc0>
	else if (!lll->enc_rx) {
    223e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    2242:	0719      	lsls	r1, r3, #28
    2244:	f100 860e 	bmi.w	2e64 <ull_conn_llcp+0x11ec>
		if (conn->llcp.encryption.error_code) {
    2248:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
    224c:	2d00      	cmp	r5, #0
    224e:	f040 86c5 	bne.w	2fdc <ull_conn_llcp+0x1364>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    2252:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    2256:	463b      	mov	r3, r7
    2258:	462a      	mov	r2, r5
    225a:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    225e:	f204 1049 	addw	r0, r4, #329	; 0x149
    2262:	f01c f8c1 	bl	1e3e8 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    2266:	2210      	movs	r2, #16
    2268:	4639      	mov	r1, r7
    226a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    226e:	f026 fa9f 	bl	287b0 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2272:	2208      	movs	r2, #8
    2274:	f104 0178 	add.w	r1, r4, #120	; 0x78
    2278:	f104 0099 	add.w	r0, r4, #153	; 0x99
    227c:	f026 fa98 	bl	287b0 <memcpy>
			lll->ccm_rx.direction = 1U;
    2280:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    2284:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
			lll->ccm_rx.counter = 0U;
    2288:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
    228c:	f043 0301 	orr.w	r3, r3, #1
    2290:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
			lll->enc_rx = 1U;
    2294:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    2298:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
			lll->ccm_tx.direction = 0U;
    229c:	f365 0200 	bfi	r2, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    22a0:	2101      	movs	r1, #1
			lll->enc_rx = 1U;
    22a2:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_tx.direction = 0U;
    22a6:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    22aa:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_tx.counter = 0U;
    22ae:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
			lll->ccm_rx.counter = 0U;
    22b2:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    22b6:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    22ba:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    22be:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    22c2:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    22c6:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22ca:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    22cc:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    22ce:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22d2:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    22d6:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22d8:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    22da:	71f1      	strb	r1, [r6, #7]
	if (
    22dc:	2b00      	cmp	r3, #0
    22de:	f000 8326 	beq.w	292e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    22e2:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    22e6:	0790      	lsls	r0, r2, #30
    22e8:	f100 8321 	bmi.w	292e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    22ec:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    22f0:	07d1      	lsls	r1, r2, #31
    22f2:	f100 831c 	bmi.w	292e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    22f6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    22fa:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    22fe:	428b      	cmp	r3, r1
    2300:	f000 82f1 	beq.w	28e6 <ull_conn_llcp+0xc6e>
		} else if (!conn->tx_ctrl) {
    2304:	2a00      	cmp	r2, #0
    2306:	f000 8770 	beq.w	31ea <ull_conn_llcp+0x1572>
	tx->next = conn->tx_ctrl_last->next;
    230a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    230e:	681a      	ldr	r2, [r3, #0]
    2310:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2312:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2314:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    2316:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    231a:	2b00      	cmp	r3, #0
    231c:	f000 8565 	beq.w	2dea <ull_conn_llcp+0x1172>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    2320:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    2324:	f043 0303 	orr.w	r3, r3, #3
    2328:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    232c:	e4b7      	b.n	1c9e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    232e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    2330:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    2332:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    2336:	440a      	add	r2, r1
    2338:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
    233a:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    233c:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
    233e:	f100 80d1 	bmi.w	24e4 <ull_conn_llcp+0x86c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2342:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    2346:	1aad      	subs	r5, r5, r2
    2348:	0428      	lsls	r0, r5, #16
    234a:	f53f aca8 	bmi.w	1c9e <ull_conn_llcp+0x26>
			conn->llcp_ack = conn->llcp_req;
    234e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    2352:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
    2356:	f104 0534 	add.w	r5, r4, #52	; 0x34
    235a:	2205      	movs	r2, #5
    235c:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    2360:	4628      	mov	r0, r5
    2362:	f026 fa25 	bl	287b0 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    2366:	2105      	movs	r1, #5
    2368:	4628      	mov	r0, r5
    236a:	f010 f941 	bl	125f0 <util_ones_count_get>
		lll->data_chan_count =
    236e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    2372:	2201      	movs	r2, #1
		lll->data_chan_count =
    2374:	f360 0305 	bfi	r3, r0, #0, #6
    2378:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    237c:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
    2380:	e48d      	b.n	1c9e <ull_conn_llcp+0x26>
			LL_ASSERT(0);
    2382:	4a55      	ldr	r2, [pc, #340]	; (24d8 <ull_conn_llcp+0x860>)
    2384:	4955      	ldr	r1, [pc, #340]	; (24dc <ull_conn_llcp+0x864>)
    2386:	4856      	ldr	r0, [pc, #344]	; (24e0 <ull_conn_llcp+0x868>)
    2388:	f240 43e1 	movw	r3, #1249	; 0x4e1
    238c:	f023 fbba 	bl	25b04 <printk>
    2390:	4040      	eors	r0, r0
    2392:	f380 8811 	msr	BASEPRI, r0
    2396:	f04f 0003 	mov.w	r0, #3
    239a:	df02      	svc	2
			break;
    239c:	e47f      	b.n	1c9e <ull_conn_llcp+0x26>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    239e:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    23a2:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
    23a6:	42ba      	cmp	r2, r7
    23a8:	d143      	bne.n	2432 <ull_conn_llcp+0x7ba>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    23aa:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    23ae:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
    23b2:	42ba      	cmp	r2, r7
    23b4:	f000 82c6 	beq.w	2944 <ull_conn_llcp+0xccc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    23b8:	1bd2      	subs	r2, r2, r7
    23ba:	07d0      	lsls	r0, r2, #31
    23bc:	f57f ac6f 	bpl.w	1c9e <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    23c0:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    23c4:	07d9      	lsls	r1, r3, #31
    23c6:	f140 85b5 	bpl.w	2f34 <ull_conn_llcp+0x12bc>
	} else if (conn->llcp_version.rx) {
    23ca:	0798      	lsls	r0, r3, #30
    23cc:	f140 85ad 	bpl.w	2f2a <ull_conn_llcp+0x12b2>
		rx = ll_pdu_rx_alloc();
    23d0:	f013 fee6 	bl	161a0 <ll_pdu_rx_alloc>
		if (!rx) {
    23d4:	4601      	mov	r1, r0
    23d6:	b300      	cbz	r0, 241a <ull_conn_llcp+0x7a2>
		conn->llcp_version.ack = conn->llcp_version.req;
    23d8:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    23dc:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		rx->hdr.handle = conn->lll.handle;
    23e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    23e2:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    23e4:	2303      	movs	r3, #3
    23e6:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23e8:	7f03      	ldrb	r3, [r0, #28]
    23ea:	f043 0303 	orr.w	r3, r3, #3
    23ee:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    23f0:	2306      	movs	r3, #6
    23f2:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    23f4:	230c      	movs	r3, #12
    23f6:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    23f8:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
    23fc:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    2400:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    2404:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    2408:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    240c:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    2410:	6808      	ldr	r0, [r1, #0]
    2412:	f013 fe97 	bl	16144 <ll_rx_put>
	ll_rx_sched();
    2416:	f013 fe9f 	bl	16158 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    241a:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    241e:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
    2422:	e435      	b.n	1c90 <ull_conn_llcp+0x18>
				event_len_prep(conn);
    2424:	4620      	mov	r0, r4
    2426:	f015 fb31 	bl	17a8c <event_len_prep>
    242a:	e452      	b.n	1cd2 <ull_conn_llcp+0x5a>
		conn->tx_data_last = tx;
    242c:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2430:	e5f7      	b.n	2022 <ull_conn_llcp+0x3aa>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    2432:	1bd2      	subs	r2, r2, r7
    2434:	07d1      	lsls	r1, r2, #31
    2436:	f57f ac32 	bpl.w	1c9e <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    243a:	f890 10ba 	ldrb.w	r1, [r0, #186]	; 0xba
    243e:	f011 0701 	ands.w	r7, r1, #1
    2442:	f000 8425 	beq.w	2c90 <ull_conn_llcp+0x1018>
		rx = ll_pdu_rx_alloc();
    2446:	f013 feab 	bl	161a0 <ll_pdu_rx_alloc>
		if (!rx) {
    244a:	4607      	mov	r7, r0
    244c:	2800      	cmp	r0, #0
    244e:	d0e4      	beq.n	241a <ull_conn_llcp+0x7a2>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    2450:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    2454:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2458:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    245a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    245c:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    245e:	f043 0303 	orr.w	r3, r3, #3
    2462:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    2464:	2309      	movs	r3, #9
    2466:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    2468:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    246a:	2303      	movs	r3, #3
    246c:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    246e:	4641      	mov	r1, r8
    2470:	2208      	movs	r2, #8
    2472:	3020      	adds	r0, #32
    2474:	f026 f9a7 	bl	287c6 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    2478:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    247c:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    247e:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    2482:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2486:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    248a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    248c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    2490:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    2494:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2498:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    249a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    249e:	0a12      	lsrs	r2, r2, #8
    24a0:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    24a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    24a8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    24ac:	4639      	mov	r1, r7
    24ae:	e7af      	b.n	2410 <ull_conn_llcp+0x798>
		switch (conn->llcp_cu.state) {
    24b0:	1e4b      	subs	r3, r1, #1
    24b2:	2b04      	cmp	r3, #4
    24b4:	f201 8126 	bhi.w	3704 <ull_conn_llcp+0x1a8c>
    24b8:	a101      	add	r1, pc, #4	; (adr r1, 24c0 <ull_conn_llcp+0x848>)
    24ba:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    24be:	bf00      	nop
    24c0:	00002725 	.word	0x00002725
    24c4:	00002645 	.word	0x00002645
    24c8:	00001c9f 	.word	0x00001c9f
    24cc:	0000272b 	.word	0x0000272b
    24d0:	0000279b 	.word	0x0000279b
    24d4:	20004a94 	.word	0x20004a94
    24d8:	0002cfb4 	.word	0x0002cfb4
    24dc:	0002c97c 	.word	0x0002c97c
    24e0:	0002c8dc 	.word	0x0002c8dc
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24e4:	48cb      	ldr	r0, [pc, #812]	; (2814 <ull_conn_llcp+0xb9c>)
    24e6:	f00f fead 	bl	12244 <mem_acquire>
		if (tx) {
    24ea:	4606      	mov	r6, r0
    24ec:	2800      	cmp	r0, #0
    24ee:	f43f abd6 	beq.w	1c9e <ull_conn_llcp+0x26>
						      conn->lll.latency + 6;
    24f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    24f4:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24f8:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    24fa:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    24fc:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    2500:	442a      	add	r2, r5
			conn->llcp.chan_map.initiate = 0U;
    2502:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
    2506:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    250a:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    250e:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    2510:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2512:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2514:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2516:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    2518:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    251c:	2205      	movs	r2, #5
    251e:	3008      	adds	r0, #8
    2520:	f026 f946 	bl	287b0 <memcpy>
	    conn->tx_head &&
    2524:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2528:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    252c:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    2530:	2b00      	cmp	r3, #0
    2532:	f000 8432 	beq.w	2d9a <ull_conn_llcp+0x1122>
	    !conn->llcp_enc.pause_tx &&
    2536:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    253a:	0797      	lsls	r7, r2, #30
    253c:	f100 842d 	bmi.w	2d9a <ull_conn_llcp+0x1122>
	    !conn->llcp_phy.pause_tx &&
    2540:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2544:	07d5      	lsls	r5, r2, #31
    2546:	f100 8428 	bmi.w	2d9a <ull_conn_llcp+0x1122>
		if (conn->tx_head == conn->tx_data) {
    254a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    254e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2552:	428b      	cmp	r3, r1
    2554:	f000 863b 	beq.w	31ce <ull_conn_llcp+0x1556>
		} else if (!conn->tx_ctrl) {
    2558:	2a00      	cmp	r2, #0
    255a:	f000 8727 	beq.w	33ac <ull_conn_llcp+0x1734>
	tx->next = conn->tx_ctrl_last->next;
    255e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2562:	681a      	ldr	r2, [r3, #0]
    2564:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2566:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2568:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    256a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    256e:	2b00      	cmp	r3, #0
    2570:	f47f ab95 	bne.w	1c9e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    2574:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2578:	f7ff bb91 	b.w	1c9e <ull_conn_llcp+0x26>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    257c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    2580:	2200      	movs	r2, #0
    2582:	f00f fecd 	bl	12320 <memq_peek>
    2586:	4606      	mov	r6, r0
    2588:	2800      	cmp	r0, #0
    258a:	f47f ab88 	bne.w	1c9e <ull_conn_llcp+0x26>
		rx = ll_pdu_rx_alloc_peek(2);
    258e:	2002      	movs	r0, #2
    2590:	f013 fde8 	bl	16164 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2594:	4680      	mov	r8, r0
    2596:	2800      	cmp	r0, #0
    2598:	f43f ab81 	beq.w	1c9e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    259c:	489d      	ldr	r0, [pc, #628]	; (2814 <ull_conn_llcp+0xb9c>)
    259e:	f00f fe51 	bl	12244 <mem_acquire>
		if (!tx) {
    25a2:	4607      	mov	r7, r0
    25a4:	2800      	cmp	r0, #0
    25a6:	f43f ab7a 	beq.w	1c9e <ull_conn_llcp+0x26>
		conn->llcp.phy_upd_ind.initiate = 0U;
    25aa:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    25ae:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    25b2:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    25b6:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    25ba:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    25be:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
    25c2:	b2db      	uxtb	r3, r3
    25c4:	f040 8596 	bne.w	30f4 <ull_conn_llcp+0x147c>
			conn->llcp_ack = conn->llcp_req;
    25c8:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
    25cc:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
    25d0:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    25d2:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
    25d6:	f100 85c0 	bmi.w	315a <ull_conn_llcp+0x14e2>
    25da:	4633      	mov	r3, r6
    25dc:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    25de:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    25e0:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    25e2:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    25e4:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    25e6:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    25e8:	2218      	movs	r2, #24
	    conn->tx_head &&
    25ea:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		if (!conn->tx_ctrl) {
    25ee:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->llctrl.opcode =
    25f2:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25f4:	793a      	ldrb	r2, [r7, #4]
    25f6:	f042 0203 	orr.w	r2, r2, #3
    25fa:	713a      	strb	r2, [r7, #4]
	if (
    25fc:	2b00      	cmp	r3, #0
    25fe:	f000 8527 	beq.w	3050 <ull_conn_llcp+0x13d8>
	    !conn->llcp_enc.pause_tx &&
    2602:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2606:	0796      	lsls	r6, r2, #30
    2608:	f100 8522 	bmi.w	3050 <ull_conn_llcp+0x13d8>
	    !conn->llcp_phy.pause_tx &&
    260c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2610:	07d5      	lsls	r5, r2, #31
    2612:	f100 851d 	bmi.w	3050 <ull_conn_llcp+0x13d8>
		if (conn->tx_head == conn->tx_data) {
    2616:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    261a:	4293      	cmp	r3, r2
    261c:	f000 86a2 	beq.w	3364 <ull_conn_llcp+0x16ec>
		} else if (!conn->tx_ctrl) {
    2620:	2900      	cmp	r1, #0
    2622:	f000 86dd 	beq.w	33e0 <ull_conn_llcp+0x1768>
	tx->next = conn->tx_ctrl_last->next;
    2626:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    262a:	681a      	ldr	r2, [r3, #0]
    262c:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    262e:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2630:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2634:	683b      	ldr	r3, [r7, #0]
    2636:	2b00      	cmp	r3, #0
    2638:	f47f ab31 	bne.w	1c9e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    263c:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
    2640:	f7ff bb2d 	b.w	1c9e <ull_conn_llcp+0x26>
		switch (conn->llcp_cu.state) {
    2644:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 2818 <ull_conn_llcp+0xba0>
		rx = ll_pdu_rx_alloc_peek(1);
    2648:	2001      	movs	r0, #1
    264a:	f013 fd8b 	bl	16164 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    264e:	4607      	mov	r7, r0
    2650:	2800      	cmp	r0, #0
    2652:	f43f ab24 	beq.w	1c9e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2656:	486f      	ldr	r0, [pc, #444]	; (2814 <ull_conn_llcp+0xb9c>)
    2658:	f00f fdf4 	bl	12244 <mem_acquire>
		if (!tx) {
    265c:	4605      	mov	r5, r0
    265e:	2800      	cmp	r0, #0
    2660:	f43f ab1d 	beq.w	1c9e <ull_conn_llcp+0x26>
	if (!conn_upd_curr) {
    2664:	4b6d      	ldr	r3, [pc, #436]	; (281c <ull_conn_llcp+0xba4>)
    2666:	681a      	ldr	r2, [r3, #0]
    2668:	2a00      	cmp	r2, #0
    266a:	f000 845b 	beq.w	2f24 <ull_conn_llcp+0x12ac>
		(void)ll_pdu_rx_alloc();
    266e:	f013 fd97 	bl	161a0 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    2672:	683b      	ldr	r3, [r7, #0]
    2674:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    2678:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    267a:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    267c:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2680:	f043 0303 	orr.w	r3, r3, #3
    2684:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2686:	230c      	movs	r3, #12
    2688:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    268a:	2300      	movs	r3, #0
    268c:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    268e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    2692:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2694:	4a62      	ldr	r2, [pc, #392]	; (2820 <ull_conn_llcp+0xba8>)
    2696:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    269a:	fba2 2303 	umull	r2, r3, r2, r3
    269e:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    26a0:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    26a4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    26a8:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    26ac:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    26b0:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    26b4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    26b8:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    26bc:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    26c0:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    26c4:	2203      	movs	r2, #3
    26c6:	f362 0302 	bfi	r3, r2, #0, #3
    26ca:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    26ce:	68a3      	ldr	r3, [r4, #8]
    26d0:	2b00      	cmp	r3, #0
    26d2:	da0a      	bge.n	26ea <ull_conn_llcp+0xa72>
			uint32_t ticks_prepare_to_start =
    26d4:	68e0      	ldr	r0, [r4, #12]
    26d6:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    26d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    26dc:	4290      	cmp	r0, r2
    26de:	bf2c      	ite	cs
    26e0:	1831      	addcs	r1, r6, r0
    26e2:	18b1      	addcc	r1, r6, r2
    26e4:	1acb      	subs	r3, r1, r3
    26e6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    26ea:	4b4e      	ldr	r3, [pc, #312]	; (2824 <ull_conn_llcp+0xbac>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    26ec:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    26ee:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    26f0:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    26f4:	2102      	movs	r1, #2
    26f6:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    26f8:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    26fc:	f00f fe7a 	bl	123f4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2700:	2800      	cmp	r0, #0
    2702:	f43f aacc 	beq.w	1c9e <ull_conn_llcp+0x26>
    2706:	4a48      	ldr	r2, [pc, #288]	; (2828 <ull_conn_llcp+0xbb0>)
    2708:	4948      	ldr	r1, [pc, #288]	; (282c <ull_conn_llcp+0xbb4>)
    270a:	4849      	ldr	r0, [pc, #292]	; (2830 <ull_conn_llcp+0xbb8>)
    270c:	f640 3373 	movw	r3, #2931	; 0xb73
    2710:	f023 f9f8 	bl	25b04 <printk>
    2714:	4040      	eors	r0, r0
    2716:	f380 8811 	msr	BASEPRI, r0
    271a:	f04f 0003 	mov.w	r0, #3
    271e:	df02      	svc	2
    2720:	f7ff babd 	b.w	1c9e <ull_conn_llcp+0x26>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    2724:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2834 <ull_conn_llcp+0xbbc>
    2728:	e78e      	b.n	2648 <ull_conn_llcp+0x9d0>
						      conn->lll.latency + 6;
    272a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    272c:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2730:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    2734:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
						      conn->lll.latency + 6;
    2738:	3306      	adds	r3, #6
    273a:	441a      	add	r2, r3
    273c:	b293      	uxth	r3, r2
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    273e:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    2742:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    2746:	f1a5 0209 	sub.w	r2, r5, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    274a:	812b      	strh	r3, [r5, #8]
		if (!conn->tx_ctrl) {
    274c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2750:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (
    2754:	2900      	cmp	r1, #0
    2756:	f000 83ce 	beq.w	2ef6 <ull_conn_llcp+0x127e>
	    !conn->llcp_enc.pause_tx &&
    275a:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    275e:	0787      	lsls	r7, r0, #30
    2760:	f100 83c9 	bmi.w	2ef6 <ull_conn_llcp+0x127e>
	    !conn->llcp_phy.pause_tx &&
    2764:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    2768:	07c6      	lsls	r6, r0, #31
    276a:	f100 83c4 	bmi.w	2ef6 <ull_conn_llcp+0x127e>
		if (conn->tx_head == conn->tx_data) {
    276e:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    2772:	4281      	cmp	r1, r0
    2774:	f000 859e 	beq.w	32b4 <ull_conn_llcp+0x163c>
		} else if (!conn->tx_ctrl) {
    2778:	2b00      	cmp	r3, #0
    277a:	f000 866e 	beq.w	345a <ull_conn_llcp+0x17e2>
	tx->next = conn->tx_ctrl_last->next;
    277e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2782:	6819      	ldr	r1, [r3, #0]
    2784:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    2788:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    278a:	f855 1c09 	ldr.w	r1, [r5, #-9]
	conn->tx_ctrl_last = tx;
    278e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2792:	2900      	cmp	r1, #0
    2794:	f47f aa83 	bne.w	1c9e <ull_conn_llcp+0x26>
    2798:	e038      	b.n	280c <ull_conn_llcp+0xb94>
			conn->llcp_ack = conn->llcp_req;
    279a:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    279e:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			conn->llcp_cu.ack = conn->llcp_cu.req;
    27a2:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	conn_upd_curr = NULL;
    27a6:	4a1d      	ldr	r2, [pc, #116]	; (281c <ull_conn_llcp+0xba4>)
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    27a8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
			conn->llcp_cu.ack = conn->llcp_cu.req;
    27ac:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	    conn->tx_head &&
    27b0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    27b4:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    27b8:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    27bc:	2100      	movs	r1, #0
    27be:	6011      	str	r1, [r2, #0]
		if (!conn->tx_ctrl) {
    27c0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    27c4:	f1a5 0209 	sub.w	r2, r5, #9
	if (
    27c8:	2b00      	cmp	r3, #0
    27ca:	f000 83a1 	beq.w	2f10 <ull_conn_llcp+0x1298>
	    !conn->llcp_enc.pause_tx &&
    27ce:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    27d2:	0786      	lsls	r6, r0, #30
    27d4:	f100 839c 	bmi.w	2f10 <ull_conn_llcp+0x1298>
	    !conn->llcp_phy.pause_tx &&
    27d8:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    27dc:	07c0      	lsls	r0, r0, #31
    27de:	f100 8397 	bmi.w	2f10 <ull_conn_llcp+0x1298>
		if (conn->tx_head == conn->tx_data) {
    27e2:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    27e6:	4283      	cmp	r3, r0
    27e8:	f000 85ea 	beq.w	33c0 <ull_conn_llcp+0x1748>
		} else if (!conn->tx_ctrl) {
    27ec:	2900      	cmp	r1, #0
    27ee:	f000 862a 	beq.w	3446 <ull_conn_llcp+0x17ce>
	tx->next = conn->tx_ctrl_last->next;
    27f2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    27f6:	6819      	ldr	r1, [r3, #0]
    27f8:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    27fc:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    27fe:	f855 3c09 	ldr.w	r3, [r5, #-9]
	conn->tx_ctrl_last = tx;
    2802:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2806:	2b00      	cmp	r3, #0
    2808:	f47f aa49 	bne.w	1c9e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    280c:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    2810:	f7ff ba45 	b.w	1c9e <ull_conn_llcp+0x26>
    2814:	20004a94 	.word	0x20004a94
    2818:	00004019 	.word	0x00004019
    281c:	20004a00 	.word	0x20004a00
    2820:	d1b71759 	.word	0xd1b71759
    2824:	200006a4 	.word	0x200006a4
    2828:	0002cfb4 	.word	0x0002cfb4
    282c:	0002ce04 	.word	0x0002ce04
    2830:	0002c8dc 	.word	0x0002c8dc
    2834:	0001a9fd 	.word	0x0001a9fd
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2838:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    283c:	463b      	mov	r3, r7
    283e:	462a      	mov	r2, r5
    2840:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    2844:	f204 1049 	addw	r0, r4, #329	; 0x149
    2848:	f01b fdce 	bl	1e3e8 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    284c:	2210      	movs	r2, #16
    284e:	4639      	mov	r1, r7
    2850:	f104 0080 	add.w	r0, r4, #128	; 0x80
    2854:	f025 ffac 	bl	287b0 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2858:	2208      	movs	r2, #8
    285a:	f104 0178 	add.w	r1, r4, #120	; 0x78
    285e:	f104 0099 	add.w	r0, r4, #153	; 0x99
    2862:	f025 ffa5 	bl	287b0 <memcpy>
		lll->ccm_rx.direction = 0;
    2866:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    286a:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    286e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    2872:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->ccm_tx.counter = 0;
    2876:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
		lll->enc_rx = 1;
    287a:	f023 0318 	bic.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    287e:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    2882:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.counter = 0;
    2886:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    288a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    288e:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    2892:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    2896:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    289a:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    289e:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->enc_rx = 1;
    28a2:	f043 0318 	orr.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    28a6:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    28aa:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conn->lll.enc_tx = 1;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    28ae:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    28b0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28b4:	7932      	ldrb	r2, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    28b6:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    28b8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28bc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    28c0:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28c2:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    28c4:	71f1      	strb	r1, [r6, #7]
	if (
    28c6:	b393      	cbz	r3, 292e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    28c8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    28cc:	0792      	lsls	r2, r2, #30
    28ce:	d42e      	bmi.n	292e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    28d0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    28d4:	07d7      	lsls	r7, r2, #31
    28d6:	d42a      	bmi.n	292e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    28d8:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    28dc:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    28de:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    28e2:	f47f ad0f 	bne.w	2304 <ull_conn_llcp+0x68c>
			conn->tx_data = conn->tx_data->next;
    28e6:	6819      	ldr	r1, [r3, #0]
    28e8:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    28ec:	2a00      	cmp	r2, #0
    28ee:	f47f ad0c 	bne.w	230a <ull_conn_llcp+0x692>
			tx->next = conn->tx_head->next;
    28f2:	681a      	ldr	r2, [r3, #0]
    28f4:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    28f6:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    28f8:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    28fa:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    28fe:	e50c      	b.n	231a <ull_conn_llcp+0x6a2>
				conn->procedure_expire++;
    2900:	3301      	adds	r3, #1
    2902:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2906:	f7ff b9d4 	b.w	1cb2 <ull_conn_llcp+0x3a>
			tx->next = conn->tx_head;
    290a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    290c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2910:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2914:	2b00      	cmp	r3, #0
    2916:	f47f ab84 	bne.w	2022 <ull_conn_llcp+0x3aa>
    291a:	e587      	b.n	242c <ull_conn_llcp+0x7b4>
		if (!conn->tx_ctrl) {
    291c:	2a00      	cmp	r2, #0
    291e:	f47f ac6c 	bne.w	21fa <ull_conn_llcp+0x582>
			tx->next = conn->tx_head;
    2922:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2924:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2928:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    292c:	e46d      	b.n	220a <ull_conn_llcp+0x592>
		if (!conn->tx_ctrl) {
    292e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2932:	2a00      	cmp	r2, #0
    2934:	f47f ace9 	bne.w	230a <ull_conn_llcp+0x692>
			tx->next = conn->tx_head;
    2938:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    293a:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    293e:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2942:	e4ea      	b.n	231a <ull_conn_llcp+0x6a2>
		} else if (conn->llcp_conn_param.ack !=
    2944:	f890 715d 	ldrb.w	r7, [r0, #349]	; 0x15d
    2948:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    294c:	4297      	cmp	r7, r2
    294e:	f000 8230 	beq.w	2db2 <ull_conn_llcp+0x113a>
	return conn_upd_curr && (conn_upd_curr != conn);
    2952:	4fc7      	ldr	r7, [pc, #796]	; (2c70 <ull_conn_llcp+0xff8>)
    2954:	683a      	ldr	r2, [r7, #0]
    2956:	2a00      	cmp	r2, #0
    2958:	f000 8393 	beq.w	3082 <ull_conn_llcp+0x140a>
    295c:	4290      	cmp	r0, r2
    295e:	f47f a99e 	bne.w	1c9e <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    2962:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    2966:	f002 020f 	and.w	r2, r2, #15
    296a:	2a08      	cmp	r2, #8
    296c:	f200 86db 	bhi.w	3726 <ull_conn_llcp+0x1aae>
    2970:	a001      	add	r0, pc, #4	; (adr r0, 2978 <ull_conn_llcp+0xd00>)
    2972:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2976:	bf00      	nop
    2978:	00002ae1 	.word	0x00002ae1
    297c:	00002a59 	.word	0x00002a59
    2980:	00002a09 	.word	0x00002a09
    2984:	00001c91 	.word	0x00001c91
    2988:	00001c91 	.word	0x00001c91
    298c:	00001c91 	.word	0x00001c91
    2990:	00001c91 	.word	0x00001c91
    2994:	00001c91 	.word	0x00001c91
    2998:	0000299d 	.word	0x0000299d
			event_counter = lll->event_counter +
    299c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    299e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    29a0:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    29a4:	440a      	add	r2, r1
    29a6:	442a      	add	r2, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    29a8:	f894 515e 	ldrb.w	r5, [r4, #350]	; 0x15e
	    conn->tx_head &&
    29ac:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    29b0:	f820 2c02 	strh.w	r2, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    29b4:	2204      	movs	r2, #4
    29b6:	f362 0503 	bfi	r5, r2, #0, #4
    29ba:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    29be:	f1a0 0213 	sub.w	r2, r0, #19
		if (!conn->tx_ctrl) {
    29c2:	f8d4 51a0 	ldr.w	r5, [r4, #416]	; 0x1a0
	if (
    29c6:	2900      	cmp	r1, #0
    29c8:	f000 83ed 	beq.w	31a6 <ull_conn_llcp+0x152e>
	    conn->tx_head &&
    29cc:	079e      	lsls	r6, r3, #30
    29ce:	f100 83ea 	bmi.w	31a6 <ull_conn_llcp+0x152e>
	    !conn->llcp_phy.pause_tx &&
    29d2:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    29d6:	07db      	lsls	r3, r3, #31
    29d8:	f100 83e5 	bmi.w	31a6 <ull_conn_llcp+0x152e>
		if (conn->tx_head == conn->tx_data) {
    29dc:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    29e0:	4299      	cmp	r1, r3
    29e2:	f000 85f9 	beq.w	35d8 <ull_conn_llcp+0x1960>
		} else if (!conn->tx_ctrl) {
    29e6:	2d00      	cmp	r5, #0
    29e8:	f000 864a 	beq.w	3680 <ull_conn_llcp+0x1a08>
	tx->next = conn->tx_ctrl_last->next;
    29ec:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    29f0:	6819      	ldr	r1, [r3, #0]
    29f2:	f840 1c13 	str.w	r1, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
    29f6:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    29f8:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    29fc:	f850 3c13 	ldr.w	r3, [r0, #-19]
    2a00:	2b00      	cmp	r3, #0
    2a02:	f47f a94c 	bne.w	1c9e <ull_conn_llcp+0x26>
    2a06:	e701      	b.n	280c <ull_conn_llcp+0xb94>
	if (conn->llcp_enc.pause_tx) {
    2a08:	079f      	lsls	r7, r3, #30
    2a0a:	f53f a948 	bmi.w	1c9e <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    2a0e:	f013 fbc7 	bl	161a0 <ll_pdu_rx_alloc>
	if (!rx) {
    2a12:	4601      	mov	r1, r0
    2a14:	2800      	cmp	r0, #0
    2a16:	f43f ad00 	beq.w	241a <ull_conn_llcp+0x7a2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a1a:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a1e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a20:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a22:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a26:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2a2a:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a2c:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	rx->hdr.handle = conn->lll.handle;
    2a30:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2a32:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a34:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2a36:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2a38:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    2a3c:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2a3e:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2a42:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2a44:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2a48:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2a4a:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    2a4e:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a50:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    2a52:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a54:	77cb      	strb	r3, [r1, #31]
    2a56:	e4db      	b.n	2410 <ull_conn_llcp+0x798>
	if (conn->llcp_conn_param.status) {
    2a58:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	f040 83de 	bne.w	321e <ull_conn_llcp+0x15a6>
	if (!conn->lll.role) {
    2a62:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    2a66:	2a00      	cmp	r2, #0
    2a68:	f2c0 8516 	blt.w	3498 <ull_conn_llcp+0x1820>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a6c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_offset_us = 0U;
    2a70:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a74:	2006      	movs	r0, #6
    2a76:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    2a7a:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a7e:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    2a82:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
    2a84:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
		conn->llcp_cu.win_size = 1U;
    2a88:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		if (preferred_periodicity) {
    2a8c:	2800      	cmp	r0, #0
    2a8e:	f000 84f7 	beq.w	3480 <ull_conn_llcp+0x1808>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2a92:	fbb2 f3f0 	udiv	r3, r2, r0
    2a96:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    2a9a:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2a9e:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    2aa0:	4298      	cmp	r0, r3
    2aa2:	bf98      	it	ls
    2aa4:	461a      	movls	r2, r3
    2aa6:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2aaa:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2aae:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    2ab2:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    2ab6:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2aba:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2abe:	00db      	lsls	r3, r3, #3
    2ac0:	f022 020f 	bic.w	r2, r2, #15
    2ac4:	f043 0302 	orr.w	r3, r3, #2
    2ac8:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    2aca:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2acc:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    2ad0:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2ad4:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    2ad8:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		return;
    2adc:	f7ff b8df 	b.w	1c9e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2ae0:	4864      	ldr	r0, [pc, #400]	; (2c74 <ull_conn_llcp+0xffc>)
    2ae2:	f00f fbaf 	bl	12244 <mem_acquire>
	if (!tx) {
    2ae6:	4602      	mov	r2, r0
    2ae8:	2800      	cmp	r0, #0
    2aea:	f43f ac96 	beq.w	241a <ull_conn_llcp+0x7a2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2aee:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    2af0:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2af2:	f043 0303 	orr.w	r3, r3, #3
    2af6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2af8:	2318      	movs	r3, #24
    2afa:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2afc:	230f      	movs	r3, #15
    2afe:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2b00:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    2b04:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2b06:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2b0a:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2b0c:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2b10:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2b12:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    2b16:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    2b18:	2300      	movs	r3, #0
    2b1a:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2b1c:	74c3      	strb	r3, [r0, #19]
    2b1e:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b24:	7543      	strb	r3, [r0, #21]
    2b26:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    2b28:	75c3      	strb	r3, [r0, #23]
    2b2a:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2b2c:	7643      	strb	r3, [r0, #25]
    2b2e:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2b30:	76c3      	strb	r3, [r0, #27]
    2b32:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    2b34:	7743      	strb	r3, [r0, #29]
    2b36:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
    2b38:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2b3c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2b40:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    2b44:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2b48:	2107      	movs	r1, #7
    2b4a:	f361 0303 	bfi	r3, r1, #0, #4
    2b4e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    2b52:	68a3      	ldr	r3, [r4, #8]
    2b54:	2b00      	cmp	r3, #0
    2b56:	da0a      	bge.n	2b6e <ull_conn_llcp+0xef6>
			uint32_t ticks_prepare_to_start =
    2b58:	68e7      	ldr	r7, [r4, #12]
    2b5a:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    2b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    2b60:	4287      	cmp	r7, r0
    2b62:	bf2c      	ite	cs
    2b64:	19f1      	addcs	r1, r6, r7
    2b66:	1831      	addcc	r1, r6, r0
    2b68:	1acb      	subs	r3, r1, r3
    2b6a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		win_offs = &p->offset0;
    2b6e:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    2b70:	4b41      	ldr	r3, [pc, #260]	; (2c78 <ull_conn_llcp+0x1000>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
    2b72:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2b76:	2201      	movs	r2, #1
    2b78:	2102      	movs	r1, #2
    2b7a:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    2b7c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2b7e:	f00f fc39 	bl	123f4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2b82:	2800      	cmp	r0, #0
    2b84:	f43f ac49 	beq.w	241a <ull_conn_llcp+0x7a2>
    2b88:	4a3c      	ldr	r2, [pc, #240]	; (2c7c <ull_conn_llcp+0x1004>)
    2b8a:	493d      	ldr	r1, [pc, #244]	; (2c80 <ull_conn_llcp+0x1008>)
    2b8c:	f640 63f6 	movw	r3, #3830	; 0xef6
		LL_ASSERT(0);
    2b90:	483c      	ldr	r0, [pc, #240]	; (2c84 <ull_conn_llcp+0x100c>)
    2b92:	f022 ffb7 	bl	25b04 <printk>
    2b96:	4040      	eors	r0, r0
    2b98:	f380 8811 	msr	BASEPRI, r0
    2b9c:	f04f 0003 	mov.w	r0, #3
    2ba0:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2ba2:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2ba6:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		break;
    2baa:	f7ff b871 	b.w	1c90 <ull_conn_llcp+0x18>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2bae:	fb08 3311 	mls	r3, r8, r1, r3
    2bb2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2bb6:	4934      	ldr	r1, [pc, #208]	; (2c88 <ull_conn_llcp+0x1010>)
    2bb8:	b29b      	uxth	r3, r3
    2bba:	fb02 f303 	mul.w	r3, r2, r3
    2bbe:	fba3 0101 	umull	r0, r1, r3, r1
    2bc2:	a329      	add	r3, pc, #164	; (adr r3, 2c68 <ull_conn_llcp+0xff0>)
    2bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bc8:	f7fe fca6 	bl	1518 <__aeabi_uldivmod>
    2bcc:	1a36      	subs	r6, r6, r0
    2bce:	f7ff b933 	b.w	1e38 <ull_conn_llcp+0x1c0>
		LL_ASSERT(rx && rx->hdr.link);
    2bd2:	4a2a      	ldr	r2, [pc, #168]	; (2c7c <ull_conn_llcp+0x1004>)
    2bd4:	492d      	ldr	r1, [pc, #180]	; (2c8c <ull_conn_llcp+0x1014>)
    2bd6:	482b      	ldr	r0, [pc, #172]	; (2c84 <ull_conn_llcp+0x100c>)
    2bd8:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    2bdc:	f022 ff92 	bl	25b04 <printk>
    2be0:	4040      	eors	r0, r0
    2be2:	f380 8811 	msr	BASEPRI, r0
    2be6:	f04f 0003 	mov.w	r0, #3
    2bea:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2bec:	f8d8 0000 	ldr.w	r0, [r8]
    2bf0:	f7ff b8d2 	b.w	1d98 <ull_conn_llcp+0x120>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2bf4:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2bf8:	f360 0202 	bfi	r2, r0, #0, #3
    2bfc:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2c00:	f44f 76a4 	mov.w	r6, #328	; 0x148
    2c04:	f7ff ba5d 	b.w	20c2 <ull_conn_llcp+0x44a>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2c08:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    2c0c:	4594      	cmp	ip, r2
    2c0e:	f47f a8d1 	bne.w	1db4 <ull_conn_llcp+0x13c>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2c12:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    2c16:	fb0c fe03 	mul.w	lr, ip, r3
    2c1a:	f242 7c10 	movw	ip, #10000	; 0x2710
    2c1e:	fb0c ec01 	mla	ip, ip, r1, lr
    2c22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    2c26:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2c2a:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
    2c2e:	fa1f fc8c 	uxth.w	ip, ip
    2c32:	45e6      	cmp	lr, ip
    2c34:	f47f a8be 	bne.w	1db4 <ull_conn_llcp+0x13c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2c38:	2301      	movs	r3, #1
    2c3a:	f888 3004 	strb.w	r3, [r8, #4]
    2c3e:	f7ff b8c9 	b.w	1dd4 <ull_conn_llcp+0x15c>
		LL_ASSERT(rx && rx->hdr.link);
    2c42:	4a0e      	ldr	r2, [pc, #56]	; (2c7c <ull_conn_llcp+0x1004>)
    2c44:	4911      	ldr	r1, [pc, #68]	; (2c8c <ull_conn_llcp+0x1014>)
    2c46:	480f      	ldr	r0, [pc, #60]	; (2c84 <ull_conn_llcp+0x100c>)
    2c48:	f241 231a 	movw	r3, #4634	; 0x121a
    2c4c:	f022 ff5a 	bl	25b04 <printk>
    2c50:	4040      	eors	r0, r0
    2c52:	f380 8811 	msr	BASEPRI, r0
    2c56:	f04f 0003 	mov.w	r0, #3
    2c5a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2c5c:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2c5e:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    2c62:	f7ff ba43 	b.w	20ec <ull_conn_llcp+0x474>
    2c66:	bf00      	nop
    2c68:	1afd498d 	.word	0x1afd498d
    2c6c:	00000007 	.word	0x00000007
    2c70:	20004a00 	.word	0x20004a00
    2c74:	20004a94 	.word	0x20004a94
    2c78:	200006b4 	.word	0x200006b4
    2c7c:	0002cfb4 	.word	0x0002cfb4
    2c80:	0002ce04 	.word	0x0002ce04
    2c84:	0002c8dc 	.word	0x0002c8dc
    2c88:	3b9aca00 	.word	0x3b9aca00
    2c8c:	0002d094 	.word	0x0002d094
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2c90:	48cd      	ldr	r0, [pc, #820]	; (2fc8 <ull_conn_llcp+0x1350>)
    2c92:	f00f fad7 	bl	12244 <mem_acquire>
	if (tx) {
    2c96:	4680      	mov	r8, r0
    2c98:	2800      	cmp	r0, #0
    2c9a:	f43f abbe 	beq.w	241a <ull_conn_llcp+0x7a2>
		conn->llcp_feature.ack--;
    2c9e:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    2ca2:	3b01      	subs	r3, #1
    2ca4:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2ca8:	2309      	movs	r3, #9
    2caa:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2cac:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2cb0:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2cb2:	7903      	ldrb	r3, [r0, #4]
    2cb4:	f043 0303 	orr.w	r3, r3, #3
    2cb8:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2cba:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    2cbe:	bfac      	ite	ge
    2cc0:	2308      	movge	r3, #8
    2cc2:	230e      	movlt	r3, #14
    2cc4:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2cc6:	4639      	mov	r1, r7
    2cc8:	4410      	add	r0, r2
    2cca:	f025 fd7c 	bl	287c6 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    2cce:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    2cd2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    2cd4:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    2cd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2cdc:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    2ce0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    2ce2:	f888 300c 	strb.w	r3, [r8, #12]
    2ce6:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    2cea:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    2cee:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    2cf2:	0a09      	lsrs	r1, r1, #8
    2cf4:	0a12      	lsrs	r2, r2, #8
    2cf6:	f888 100b 	strb.w	r1, [r8, #11]
    2cfa:	f888 300d 	strb.w	r3, [r8, #13]
    2cfe:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    2d02:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2d06:	2b00      	cmp	r3, #0
    2d08:	f000 8084 	beq.w	2e14 <ull_conn_llcp+0x119c>
	    !conn->llcp_enc.pause_tx &&
    2d0c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2d10:	0792      	lsls	r2, r2, #30
    2d12:	d47f      	bmi.n	2e14 <ull_conn_llcp+0x119c>
	    !conn->llcp_phy.pause_tx &&
    2d14:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2d18:	07d7      	lsls	r7, r2, #31
    2d1a:	d47b      	bmi.n	2e14 <ull_conn_llcp+0x119c>
		if (conn->tx_head == conn->tx_data) {
    2d1c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2d20:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2d24:	428b      	cmp	r3, r1
    2d26:	f000 826a 	beq.w	31fe <ull_conn_llcp+0x1586>
		} else if (!conn->tx_ctrl) {
    2d2a:	2a00      	cmp	r2, #0
    2d2c:	f000 836e 	beq.w	340c <ull_conn_llcp+0x1794>
	tx->next = conn->tx_ctrl_last->next;
    2d30:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2d34:	681a      	ldr	r2, [r3, #0]
    2d36:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2d3a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    2d3e:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    2d42:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2d46:	2b00      	cmp	r3, #0
    2d48:	f000 81b8 	beq.w	30bc <ull_conn_llcp+0x1444>
		conn->procedure_expire = conn->procedure_reload;
    2d4c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2d50:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2d54:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		conn->procedure_expire = conn->procedure_reload;
    2d58:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    2d5c:	f7fe bf98 	b.w	1c90 <ull_conn_llcp+0x18>
		LL_ASSERT(rx && rx->hdr.link);
    2d60:	4a9a      	ldr	r2, [pc, #616]	; (2fcc <ull_conn_llcp+0x1354>)
    2d62:	499b      	ldr	r1, [pc, #620]	; (2fd0 <ull_conn_llcp+0x1358>)
    2d64:	489b      	ldr	r0, [pc, #620]	; (2fd4 <ull_conn_llcp+0x135c>)
    2d66:	f241 2349 	movw	r3, #4681	; 0x1249
    2d6a:	f022 fecb 	bl	25b04 <printk>
    2d6e:	4040      	eors	r0, r0
    2d70:	f380 8811 	msr	BASEPRI, r0
    2d74:	f04f 0003 	mov.w	r0, #3
    2d78:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2d7a:	6828      	ldr	r0, [r5, #0]
    2d7c:	f7ff b9e1 	b.w	2142 <ull_conn_llcp+0x4ca>
		conn->tx_data_last = tx;
    2d80:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2d84:	f7ff ba44 	b.w	2210 <ull_conn_llcp+0x598>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2d88:	2201      	movs	r2, #1
    2d8a:	4610      	mov	r0, r2
    2d8c:	2102      	movs	r1, #2
    2d8e:	f00f faff 	bl	12390 <mayfly_enable>
				return -ECANCELED;
    2d92:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2d96:	f7fe bf8c 	b.w	1cb2 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    2d9a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2d9e:	2a00      	cmp	r2, #0
    2da0:	f47f abdd 	bne.w	255e <ull_conn_llcp+0x8e6>
			tx->next = conn->tx_head;
    2da4:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2da6:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2daa:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2dae:	f7ff bbde 	b.w	256e <ull_conn_llcp+0x8f6>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2db2:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    2db6:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
    2dba:	429a      	cmp	r2, r3
    2dbc:	d055      	beq.n	2e6a <ull_conn_llcp+0x11f2>
			event_len_prep(conn);
    2dbe:	f014 fe65 	bl	17a8c <event_len_prep>
    2dc2:	f7ff bb2a 	b.w	241a <ull_conn_llcp+0x7a2>
			LL_ASSERT(0);
    2dc6:	4a81      	ldr	r2, [pc, #516]	; (2fcc <ull_conn_llcp+0x1354>)
    2dc8:	4983      	ldr	r1, [pc, #524]	; (2fd8 <ull_conn_llcp+0x1360>)
    2dca:	4882      	ldr	r0, [pc, #520]	; (2fd4 <ull_conn_llcp+0x135c>)
    2dcc:	f640 439c 	movw	r3, #3228	; 0xc9c
    2dd0:	f022 fe98 	bl	25b04 <printk>
    2dd4:	4040      	eors	r0, r0
    2dd6:	f380 8811 	msr	BASEPRI, r0
    2dda:	f04f 0003 	mov.w	r0, #3
    2dde:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2de0:	2700      	movs	r7, #0
		lll->interval = conn->llcp_cu.interval;
    2de2:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    2de6:	f7ff b842 	b.w	1e6e <ull_conn_llcp+0x1f6>
		conn->tx_data_last = tx;
    2dea:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2dee:	f7ff ba97 	b.w	2320 <ull_conn_llcp+0x6a8>
			conn->tx_data = conn->tx_data->next;
    2df2:	681a      	ldr	r2, [r3, #0]
    2df4:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2df8:	2900      	cmp	r1, #0
    2dfa:	f47f a907 	bne.w	200c <ull_conn_llcp+0x394>
			tx->next = conn->tx_head->next;
    2dfe:	681a      	ldr	r2, [r3, #0]
    2e00:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2e02:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2e04:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2e06:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	f47f a909 	bne.w	2022 <ull_conn_llcp+0x3aa>
    2e10:	f7ff bb0c 	b.w	242c <ull_conn_llcp+0x7b4>
		if (!conn->tx_ctrl) {
    2e14:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2e18:	2a00      	cmp	r2, #0
    2e1a:	d189      	bne.n	2d30 <ull_conn_llcp+0x10b8>
			tx->next = conn->tx_head;
    2e1c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2e20:	e9c4 8867 	strd	r8, r8, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2e24:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
    2e28:	e78d      	b.n	2d46 <ull_conn_llcp+0x10ce>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2e2a:	4590      	cmp	r8, r2
    2e2c:	f47f a973 	bne.w	2116 <ull_conn_llcp+0x49e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2e30:	2301      	movs	r3, #1
    2e32:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2e34:	4629      	mov	r1, r5
    2e36:	f013 f985 	bl	16144 <ll_rx_put>
				rx = conn->llcp_rx;
    2e3a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    2e3e:	2d00      	cmp	r5, #0
    2e40:	f000 829d 	beq.w	337e <ull_conn_llcp+0x1706>
    2e44:	6828      	ldr	r0, [r5, #0]
    2e46:	2800      	cmp	r0, #0
    2e48:	f000 8299 	beq.w	337e <ull_conn_llcp+0x1706>
				conn->llcp_rx = rx->hdr.link->mem;
    2e4c:	6842      	ldr	r2, [r0, #4]
    2e4e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2e52:	2301      	movs	r3, #1
    2e54:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2e56:	4629      	mov	r1, r5
    2e58:	f013 f974 	bl	16144 <ll_rx_put>
			ll_rx_sched();
    2e5c:	f013 f97c 	bl	16158 <ll_rx_sched>
			return;
    2e60:	f7fe bf1d 	b.w	1c9e <ull_conn_llcp+0x26>
	conn->lll.enc_tx = 1;
    2e64:	f043 0310 	orr.w	r3, r3, #16
    2e68:	e521      	b.n	28ae <ull_conn_llcp+0xc36>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2e6a:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    2e6e:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
    2e72:	429a      	cmp	r2, r3
    2e74:	f43e af13 	beq.w	1c9e <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    2e78:	f890 2196 	ldrb.w	r2, [r0, #406]	; 0x196
    2e7c:	f002 0103 	and.w	r1, r2, #3
    2e80:	2903      	cmp	r1, #3
    2e82:	f000 822a 	beq.w	32da <ull_conn_llcp+0x1662>
    2e86:	2900      	cmp	r1, #0
    2e88:	f47e af09 	bne.w	1c9e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2e8c:	484e      	ldr	r0, [pc, #312]	; (2fc8 <ull_conn_llcp+0x1350>)
    2e8e:	f00f f9d9 	bl	12244 <mem_acquire>
		if (!tx) {
    2e92:	4601      	mov	r1, r0
    2e94:	2800      	cmp	r0, #0
    2e96:	f43f aac0 	beq.w	241a <ull_conn_llcp+0x7a2>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2e9a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2e9e:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2ea2:	2201      	movs	r2, #1
    2ea4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2ea8:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2eac:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2eb0:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2eb4:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2eb8:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
    2ebc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2ec0:	f360 07c3 	bfi	r7, r0, #3, #1
    2ec4:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2ec8:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ecc:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2ece:	f367 02c5 	bfi	r2, r7, #3, #3
    2ed2:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2ed6:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    2eda:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2edc:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    2ee0:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2ee2:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ee4:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    2ee6:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2ee8:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2eea:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2eec:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2eee:	4620      	mov	r0, r4
    2ef0:	f014 fad6 	bl	174a0 <ctrl_tx_pause_enqueue>
    2ef4:	e72a      	b.n	2d4c <ull_conn_llcp+0x10d4>
		if (!conn->tx_ctrl) {
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	f47f ac41 	bne.w	277e <ull_conn_llcp+0xb06>
			tx->next = conn->tx_head;
    2efc:	f845 1c09 	str.w	r1, [r5, #-9]
				conn->tx_ctrl = tx;
    2f00:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2f04:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2f08:	2900      	cmp	r1, #0
    2f0a:	f47e aec8 	bne.w	1c9e <ull_conn_llcp+0x26>
    2f0e:	e47d      	b.n	280c <ull_conn_llcp+0xb94>
		if (!conn->tx_ctrl) {
    2f10:	2900      	cmp	r1, #0
    2f12:	f47f ac6e 	bne.w	27f2 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head;
    2f16:	f845 3c09 	str.w	r3, [r5, #-9]
				conn->tx_ctrl = tx;
    2f1a:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2f1e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    2f22:	e470      	b.n	2806 <ull_conn_llcp+0xb8e>
		conn_upd_curr = conn;
    2f24:	601c      	str	r4, [r3, #0]
    2f26:	f7ff bba2 	b.w	266e <ull_conn_llcp+0x9f6>
		LL_ASSERT(0);
    2f2a:	4a28      	ldr	r2, [pc, #160]	; (2fcc <ull_conn_llcp+0x1354>)
    2f2c:	492a      	ldr	r1, [pc, #168]	; (2fd8 <ull_conn_llcp+0x1360>)
    2f2e:	f640 63a1 	movw	r3, #3745	; 0xea1
    2f32:	e62d      	b.n	2b90 <ull_conn_llcp+0xf18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2f34:	4824      	ldr	r0, [pc, #144]	; (2fc8 <ull_conn_llcp+0x1350>)
    2f36:	f00f f985 	bl	12244 <mem_acquire>
		if (tx) {
    2f3a:	2800      	cmp	r0, #0
    2f3c:	f43f aa6d 	beq.w	241a <ull_conn_llcp+0x7a2>
			conn->llcp_version.ack--;
    2f40:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    2f44:	3b01      	subs	r3, #1
    2f46:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    2f4a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    2f4e:	f043 0301 	orr.w	r3, r3, #1
    2f52:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f56:	7903      	ldrb	r3, [r0, #4]
    2f58:	f043 0303 	orr.w	r3, r3, #3
    2f5c:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2f5e:	2306      	movs	r3, #6
    2f60:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    2f62:	230c      	movs	r3, #12
    2f64:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    2f66:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2f68:	f06f 030e 	mvn.w	r3, #14
    2f6c:	7243      	strb	r3, [r0, #9]
    2f6e:	2305      	movs	r3, #5
    2f70:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f76:	72c3      	strb	r3, [r0, #11]
    2f78:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    2f7a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2f7e:	2b00      	cmp	r3, #0
    2f80:	f000 80ad 	beq.w	30de <ull_conn_llcp+0x1466>
	    !conn->llcp_enc.pause_tx &&
    2f84:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2f88:	0792      	lsls	r2, r2, #30
    2f8a:	f100 80a8 	bmi.w	30de <ull_conn_llcp+0x1466>
	    !conn->llcp_phy.pause_tx &&
    2f8e:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2f92:	07d7      	lsls	r7, r2, #31
    2f94:	f100 80a3 	bmi.w	30de <ull_conn_llcp+0x1466>
		if (conn->tx_head == conn->tx_data) {
    2f98:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2f9c:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2f9e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2fa2:	f000 8227 	beq.w	33f4 <ull_conn_llcp+0x177c>
		} else if (!conn->tx_ctrl) {
    2fa6:	2a00      	cmp	r2, #0
    2fa8:	f000 8334 	beq.w	3614 <ull_conn_llcp+0x199c>
	tx->next = conn->tx_ctrl_last->next;
    2fac:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2fb0:	681a      	ldr	r2, [r3, #0]
    2fb2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2fb4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2fb6:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2fba:	6803      	ldr	r3, [r0, #0]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	f47f aec5 	bne.w	2d4c <ull_conn_llcp+0x10d4>
		conn->tx_data_last = tx;
    2fc2:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    2fc6:	e6c1      	b.n	2d4c <ull_conn_llcp+0x10d4>
    2fc8:	20004a94 	.word	0x20004a94
    2fcc:	0002cfb4 	.word	0x0002cfb4
    2fd0:	0002d094 	.word	0x0002d094
    2fd4:	0002c8dc 	.word	0x0002c8dc
    2fd8:	0002c97c 	.word	0x0002c97c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2fdc:	7903      	ldrb	r3, [r0, #4]
    2fde:	f043 0303 	orr.w	r3, r3, #3
    2fe2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2fe4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    2fe8:	07da      	lsls	r2, r3, #31
    2fea:	d545      	bpl.n	3078 <ull_conn_llcp+0x1400>
	    (conn->llcp_feature.features_conn &
    2fec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	if (conn->common.fex_valid &&
    2ff0:	075b      	lsls	r3, r3, #29
    2ff2:	d541      	bpl.n	3078 <ull_conn_llcp+0x1400>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2ff4:	2311      	movs	r3, #17
    2ff6:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2ff8:	2303      	movs	r3, #3
    2ffa:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    2ffc:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    2ffe:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    3000:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
    3004:	2200      	movs	r2, #0
    3006:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
    300a:	b35b      	cbz	r3, 3064 <ull_conn_llcp+0x13ec>
	    !conn->llcp_enc.pause_tx &&
    300c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3010:	0797      	lsls	r7, r2, #30
    3012:	d427      	bmi.n	3064 <ull_conn_llcp+0x13ec>
	    !conn->llcp_phy.pause_tx &&
    3014:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    3018:	07d5      	lsls	r5, r2, #31
    301a:	d423      	bmi.n	3064 <ull_conn_llcp+0x13ec>
		if (conn->tx_head == conn->tx_data) {
    301c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    3020:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    3022:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    3026:	f000 8139 	beq.w	329c <ull_conn_llcp+0x1624>
		} else if (!conn->tx_ctrl) {
    302a:	2a00      	cmp	r2, #0
    302c:	f000 821f 	beq.w	346e <ull_conn_llcp+0x17f6>
	tx->next = conn->tx_ctrl_last->next;
    3030:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    3034:	681a      	ldr	r2, [r3, #0]
    3036:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    3038:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    303a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    303e:	6833      	ldr	r3, [r6, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d076      	beq.n	3132 <ull_conn_llcp+0x14ba>
			conn->llcp_ack = conn->llcp_req;
    3044:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    3048:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			return;
    304c:	f7fe be27 	b.w	1c9e <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    3050:	2900      	cmp	r1, #0
    3052:	f47f aae8 	bne.w	2626 <ull_conn_llcp+0x9ae>
			tx->next = conn->tx_head;
    3056:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    3058:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    305c:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    3060:	f7ff bae8 	b.w	2634 <ull_conn_llcp+0x9bc>
		if (!conn->tx_ctrl) {
    3064:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    3068:	2a00      	cmp	r2, #0
    306a:	d1e1      	bne.n	3030 <ull_conn_llcp+0x13b8>
			tx->next = conn->tx_head;
    306c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    306e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3072:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    3076:	e7e2      	b.n	303e <ull_conn_llcp+0x13c6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    3078:	230d      	movs	r3, #13
    307a:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    307c:	7235      	strb	r5, [r6, #8]
    307e:	2702      	movs	r7, #2
    3080:	e7bd      	b.n	2ffe <ull_conn_llcp+0x1386>
	switch (conn->llcp_conn_param.state) {
    3082:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    3086:	f002 020f 	and.w	r2, r2, #15
    308a:	2a08      	cmp	r2, #8
    308c:	f200 834b 	bhi.w	3726 <ull_conn_llcp+0x1aae>
    3090:	a001      	add	r0, pc, #4	; (adr r0, 3098 <ull_conn_llcp+0x1420>)
    3092:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    3096:	bf00      	nop
    3098:	00002ae1 	.word	0x00002ae1
    309c:	00002a59 	.word	0x00002a59
    30a0:	00002a09 	.word	0x00002a09
    30a4:	00001c9f 	.word	0x00001c9f
    30a8:	00001c9f 	.word	0x00001c9f
    30ac:	00001c9f 	.word	0x00001c9f
    30b0:	00001c9f 	.word	0x00001c9f
    30b4:	00001c9f 	.word	0x00001c9f
    30b8:	0000299d 	.word	0x0000299d
		conn->tx_data_last = tx;
    30bc:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    30c0:	e644      	b.n	2d4c <ull_conn_llcp+0x10d4>
			conn->tx_data = conn->tx_data->next;
    30c2:	6819      	ldr	r1, [r3, #0]
    30c4:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    30c8:	2a00      	cmp	r2, #0
    30ca:	f47f a896 	bne.w	21fa <ull_conn_llcp+0x582>
			tx->next = conn->tx_head->next;
    30ce:	681a      	ldr	r2, [r3, #0]
    30d0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    30d2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    30d4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    30d6:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    30da:	f7ff b896 	b.w	220a <ull_conn_llcp+0x592>
		if (!conn->tx_ctrl) {
    30de:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    30e2:	2a00      	cmp	r2, #0
    30e4:	f47f af62 	bne.w	2fac <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head;
    30e8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    30ea:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    30ee:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    30f2:	e762      	b.n	2fba <ull_conn_llcp+0x1342>
							 lll->latency +
    30f4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    30f6:	3206      	adds	r2, #6
    30f8:	442a      	add	r2, r5
			conn->llcp.phy_upd_ind.instant = event_counter +
    30fa:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    30fe:	f013 f84f 	bl	161a0 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    3102:	f8d8 3000 	ldr.w	r3, [r8]
    3106:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    310a:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    310c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
				rx = ll_pdu_rx_alloc();
    3110:	f013 f846 	bl	161a0 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    3114:	6803      	ldr	r3, [r0, #0]
    3116:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    311a:	6059      	str	r1, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    311c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    3120:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
				conn->llcp_rx = rx;
    3124:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    3128:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    312c:	095b      	lsrs	r3, r3, #5
    312e:	f7ff ba56 	b.w	25de <ull_conn_llcp+0x966>
		conn->tx_data_last = tx;
    3132:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    3136:	e785      	b.n	3044 <ull_conn_llcp+0x13cc>
	    ((pdu_data_tx->llctrl.opcode !=
    3138:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    313a:	2a03      	cmp	r2, #3
    313c:	f43f ae5f 	beq.w	2dfe <ull_conn_llcp+0x1186>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3140:	2a0a      	cmp	r2, #10
    3142:	f47e af5d 	bne.w	2000 <ull_conn_llcp+0x388>
    3146:	e65a      	b.n	2dfe <ull_conn_llcp+0x1186>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    3148:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
    314a:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    314c:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    314e:	f012 fff9 	bl	16144 <ll_rx_put>
			ll_rx_sched();
    3152:	f013 f801 	bl	16158 <ll_rx_sched>
			return;
    3156:	f7fe bda2 	b.w	1c9e <ull_conn_llcp+0x26>
				(void)ll_pdu_rx_alloc();
    315a:	f013 f821 	bl	161a0 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    315e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3160:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    3164:	231c      	movs	r3, #28
				upd->status = 0U;
    3166:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    316a:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    316e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    3172:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    3176:	f3c3 0302 	ubfx	r3, r3, #0, #3
    317a:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    317e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    3182:	f3c3 0302 	ubfx	r3, r3, #0, #3
    3186:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    318a:	4641      	mov	r1, r8
    318c:	f012 ffda 	bl	16144 <ll_rx_put>
				ll_rx_sched();
    3190:	f012 ffe2 	bl	16158 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    3194:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    3198:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    319c:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    31a0:	095b      	lsrs	r3, r3, #5
    31a2:	f7ff ba1c 	b.w	25de <ull_conn_llcp+0x966>
		if (!conn->tx_ctrl) {
    31a6:	2d00      	cmp	r5, #0
    31a8:	f47f ac20 	bne.w	29ec <ull_conn_llcp+0xd74>
			tx->next = conn->tx_head;
    31ac:	f840 1c13 	str.w	r1, [r0, #-19]
				conn->tx_ctrl = tx;
    31b0:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    31b4:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    31b8:	e420      	b.n	29fc <ull_conn_llcp+0xd84>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    31ba:	791a      	ldrb	r2, [r3, #4]
    31bc:	f002 0203 	and.w	r2, r2, #3
    31c0:	2a03      	cmp	r2, #3
    31c2:	f000 80eb 	beq.w	339c <ull_conn_llcp+0x1724>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    31c6:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    31ca:	f7ff b816 	b.w	21fa <ull_conn_llcp+0x582>
			conn->tx_data = conn->tx_data->next;
    31ce:	6819      	ldr	r1, [r3, #0]
    31d0:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    31d4:	2a00      	cmp	r2, #0
    31d6:	f47f a9c2 	bne.w	255e <ull_conn_llcp+0x8e6>
			tx->next = conn->tx_head->next;
    31da:	681a      	ldr	r2, [r3, #0]
    31dc:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    31de:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    31e0:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    31e2:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    31e6:	f7ff b9c2 	b.w	256e <ull_conn_llcp+0x8f6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    31ea:	791a      	ldrb	r2, [r3, #4]
    31ec:	f002 0203 	and.w	r2, r2, #3
    31f0:	2a03      	cmp	r2, #3
    31f2:	f000 8114 	beq.w	341e <ull_conn_llcp+0x17a6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    31f6:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    31fa:	f7ff b886 	b.w	230a <ull_conn_llcp+0x692>
			conn->tx_data = conn->tx_data->next;
    31fe:	6819      	ldr	r1, [r3, #0]
    3200:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3204:	2a00      	cmp	r2, #0
    3206:	f47f ad93 	bne.w	2d30 <ull_conn_llcp+0x10b8>
			tx->next = conn->tx_head->next;
    320a:	681a      	ldr	r2, [r3, #0]
    320c:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    3210:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    3214:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    3218:	e9c4 8868 	strd	r8, r8, [r4, #416]	; 0x1a0
    321c:	e593      	b.n	2d46 <ull_conn_llcp+0x10ce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    321e:	489a      	ldr	r0, [pc, #616]	; (3488 <ull_conn_llcp+0x1810>)
    3220:	f00f f810 	bl	12244 <mem_acquire>
		if (!tx) {
    3224:	2800      	cmp	r0, #0
    3226:	f43f a8f8 	beq.w	241a <ull_conn_llcp+0x7a2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    322a:	7902      	ldrb	r2, [r0, #4]
    322c:	f042 0203 	orr.w	r2, r2, #3
    3230:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    3232:	2211      	movs	r2, #17
    3234:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    3236:	2203      	movs	r2, #3
    3238:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    323a:	220f      	movs	r2, #15
    323c:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    323e:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
    3242:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    3244:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    3248:	2a00      	cmp	r2, #0
    324a:	f000 80f1 	beq.w	3430 <ull_conn_llcp+0x17b8>
	    !conn->llcp_enc.pause_tx &&
    324e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3252:	0789      	lsls	r1, r1, #30
    3254:	f100 80ec 	bmi.w	3430 <ull_conn_llcp+0x17b8>
	    !conn->llcp_phy.pause_tx &&
    3258:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    325c:	07cb      	lsls	r3, r1, #31
    325e:	f100 80e7 	bmi.w	3430 <ull_conn_llcp+0x17b8>
		if (conn->tx_head == conn->tx_data) {
    3262:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    3266:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    3268:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    326c:	f000 81f1 	beq.w	3652 <ull_conn_llcp+0x19da>
		} else if (!conn->tx_ctrl) {
    3270:	2900      	cmp	r1, #0
    3272:	f000 81fd 	beq.w	3670 <ull_conn_llcp+0x19f8>
	tx->next = conn->tx_ctrl_last->next;
    3276:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    327a:	6811      	ldr	r1, [r2, #0]
    327c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    327e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    3280:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    3284:	6802      	ldr	r2, [r0, #0]
    3286:	2a00      	cmp	r2, #0
    3288:	f000 81ef 	beq.w	366a <ull_conn_llcp+0x19f2>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    328c:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    3290:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    3294:	2300      	movs	r3, #0
    3296:	603b      	str	r3, [r7, #0]
		return;
    3298:	f7ff b8bf 	b.w	241a <ull_conn_llcp+0x7a2>
			conn->tx_data = conn->tx_data->next;
    329c:	6819      	ldr	r1, [r3, #0]
    329e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    32a2:	2a00      	cmp	r2, #0
    32a4:	f47f aec4 	bne.w	3030 <ull_conn_llcp+0x13b8>
			tx->next = conn->tx_head->next;
    32a8:	681a      	ldr	r2, [r3, #0]
    32aa:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    32ac:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    32ae:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    32b2:	e6c4      	b.n	303e <ull_conn_llcp+0x13c6>
			conn->tx_data = conn->tx_data->next;
    32b4:	6808      	ldr	r0, [r1, #0]
    32b6:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    32ba:	2b00      	cmp	r3, #0
    32bc:	f47f aa5f 	bne.w	277e <ull_conn_llcp+0xb06>
			tx->next = conn->tx_head->next;
    32c0:	680b      	ldr	r3, [r1, #0]
    32c2:	f845 3c09 	str.w	r3, [r5, #-9]
			conn->tx_head->next = tx;
    32c6:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
    32c8:	f855 1c09 	ldr.w	r1, [r5, #-9]
				conn->tx_ctrl_last = tx;
    32cc:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
	if (!tx->next) {
    32d0:	2900      	cmp	r1, #0
    32d2:	f47e ace4 	bne.w	1c9e <ull_conn_llcp+0x26>
    32d6:	f7ff ba99 	b.w	280c <ull_conn_llcp+0xb94>
		if (conn->llcp_phy.tx & PHY_2M) {
    32da:	0717      	lsls	r7, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    32dc:	f880 3195 	strb.w	r3, [r0, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    32e0:	f3c2 0382 	ubfx	r3, r2, #2, #3
    32e4:	f140 814f 	bpl.w	3586 <ull_conn_llcp+0x190e>
			conn->llcp_phy.tx = PHY_2M;
    32e8:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    32ec:	2202      	movs	r2, #2
    32ee:	f362 0384 	bfi	r3, r2, #2, #3
    32f2:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    32f6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    32fa:	0659      	lsls	r1, r3, #25
    32fc:	ea4f 1253 	mov.w	r2, r3, lsr #5
    3300:	f140 8139 	bpl.w	3576 <ull_conn_llcp+0x18fe>
			conn->llcp_phy.rx = PHY_2M;
    3304:	2202      	movs	r2, #2
    3306:	f362 1347 	bfi	r3, r2, #5, #3
    330a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    330e:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    3312:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3316:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    331a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    331e:	f3c2 0182 	ubfx	r1, r2, #2, #3
    3322:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3326:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    332a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    332e:	428f      	cmp	r7, r1
    3330:	bf08      	it	eq
    3332:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3334:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    3336:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    333a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    333e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    3342:	bf08      	it	eq
    3344:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3346:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    334a:	f1ae 0c02 	sub.w	ip, lr, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    334e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    3352:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    3354:	f884 c0bc 	strb.w	ip, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    3358:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    335c:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3360:	f7fe bcb7 	b.w	1cd2 <ull_conn_llcp+0x5a>
			conn->tx_data = conn->tx_data->next;
    3364:	681a      	ldr	r2, [r3, #0]
    3366:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    336a:	2900      	cmp	r1, #0
    336c:	f47f a95b 	bne.w	2626 <ull_conn_llcp+0x9ae>
			tx->next = conn->tx_head->next;
    3370:	681a      	ldr	r2, [r3, #0]
    3372:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    3374:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    3376:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    337a:	f7ff b95b 	b.w	2634 <ull_conn_llcp+0x9bc>
				LL_ASSERT(rx && rx->hdr.link);
    337e:	4a43      	ldr	r2, [pc, #268]	; (348c <ull_conn_llcp+0x1814>)
    3380:	4943      	ldr	r1, [pc, #268]	; (3490 <ull_conn_llcp+0x1818>)
    3382:	4844      	ldr	r0, [pc, #272]	; (3494 <ull_conn_llcp+0x181c>)
    3384:	f241 232c 	movw	r3, #4652	; 0x122c
    3388:	f022 fbbc 	bl	25b04 <printk>
    338c:	4040      	eors	r0, r0
    338e:	f380 8811 	msr	BASEPRI, r0
    3392:	f04f 0003 	mov.w	r0, #3
    3396:	df02      	svc	2
    3398:	6828      	ldr	r0, [r5, #0]
    339a:	e557      	b.n	2e4c <ull_conn_llcp+0x11d4>
	    ((pdu_data_tx->llctrl.opcode !=
    339c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    339e:	2a03      	cmp	r2, #3
    33a0:	f43f ae95 	beq.w	30ce <ull_conn_llcp+0x1456>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    33a4:	2a0a      	cmp	r2, #10
    33a6:	f47f af0e 	bne.w	31c6 <ull_conn_llcp+0x154e>
    33aa:	e690      	b.n	30ce <ull_conn_llcp+0x1456>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33ac:	791a      	ldrb	r2, [r3, #4]
    33ae:	f002 0203 	and.w	r2, r2, #3
    33b2:	2a03      	cmp	r2, #3
    33b4:	f000 80d7 	beq.w	3566 <ull_conn_llcp+0x18ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33b8:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    33bc:	f7ff b8cf 	b.w	255e <ull_conn_llcp+0x8e6>
			conn->tx_data = conn->tx_data->next;
    33c0:	6818      	ldr	r0, [r3, #0]
    33c2:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    33c6:	2900      	cmp	r1, #0
    33c8:	f47f aa13 	bne.w	27f2 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head->next;
    33cc:	6819      	ldr	r1, [r3, #0]
    33ce:	f845 1c09 	str.w	r1, [r5, #-9]
			conn->tx_head->next = tx;
    33d2:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    33d4:	f855 3c09 	ldr.w	r3, [r5, #-9]
				conn->tx_ctrl_last = tx;
    33d8:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    33dc:	f7ff ba13 	b.w	2806 <ull_conn_llcp+0xb8e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33e0:	791a      	ldrb	r2, [r3, #4]
    33e2:	f002 0203 	and.w	r2, r2, #3
    33e6:	2a03      	cmp	r2, #3
    33e8:	f000 811c 	beq.w	3624 <ull_conn_llcp+0x19ac>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33ec:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    33f0:	f7ff b919 	b.w	2626 <ull_conn_llcp+0x9ae>
			conn->tx_data = conn->tx_data->next;
    33f4:	6819      	ldr	r1, [r3, #0]
    33f6:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    33fa:	2a00      	cmp	r2, #0
    33fc:	f47f add6 	bne.w	2fac <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head->next;
    3400:	681a      	ldr	r2, [r3, #0]
    3402:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    3404:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    3406:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    340a:	e5d6      	b.n	2fba <ull_conn_llcp+0x1342>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    340c:	791a      	ldrb	r2, [r3, #4]
    340e:	f002 0203 	and.w	r2, r2, #3
    3412:	2a03      	cmp	r2, #3
    3414:	f000 8115 	beq.w	3642 <ull_conn_llcp+0x19ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3418:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    341c:	e488      	b.n	2d30 <ull_conn_llcp+0x10b8>
	    ((pdu_data_tx->llctrl.opcode !=
    341e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3420:	2a03      	cmp	r2, #3
    3422:	f43f aa66 	beq.w	28f2 <ull_conn_llcp+0xc7a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3426:	2a0a      	cmp	r2, #10
    3428:	f47f aee5 	bne.w	31f6 <ull_conn_llcp+0x157e>
    342c:	f7ff ba61 	b.w	28f2 <ull_conn_llcp+0xc7a>
		if (!conn->tx_ctrl) {
    3430:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    3434:	2900      	cmp	r1, #0
    3436:	f47f af1e 	bne.w	3276 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head;
    343a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    343c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3440:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    3444:	e71e      	b.n	3284 <ull_conn_llcp+0x160c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3446:	7919      	ldrb	r1, [r3, #4]
    3448:	f001 0103 	and.w	r1, r1, #3
    344c:	2903      	cmp	r1, #3
    344e:	f000 80d1 	beq.w	35f4 <ull_conn_llcp+0x197c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3452:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3456:	f7ff b9cc 	b.w	27f2 <ull_conn_llcp+0xb7a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    345a:	790b      	ldrb	r3, [r1, #4]
    345c:	f003 0303 	and.w	r3, r3, #3
    3460:	2b03      	cmp	r3, #3
    3462:	f000 80cf 	beq.w	3604 <ull_conn_llcp+0x198c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3466:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    346a:	f7ff b988 	b.w	277e <ull_conn_llcp+0xb06>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    346e:	791a      	ldrb	r2, [r3, #4]
    3470:	f002 0203 	and.w	r2, r2, #3
    3474:	2a03      	cmp	r2, #3
    3476:	f000 810f 	beq.w	3698 <ull_conn_llcp+0x1a20>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    347a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    347e:	e5d7      	b.n	3030 <ull_conn_llcp+0x13b8>
			conn->llcp_cu.interval = interval_max;
    3480:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
    3484:	f7ff bb11 	b.w	2aaa <ull_conn_llcp+0xe32>
    3488:	20004a94 	.word	0x20004a94
    348c:	0002cfb4 	.word	0x0002cfb4
    3490:	0002d094 	.word	0x0002d094
    3494:	0002c8dc 	.word	0x0002c8dc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3498:	48a6      	ldr	r0, [pc, #664]	; (3734 <ull_conn_llcp+0x1abc>)
    349a:	f00e fed3 	bl	12244 <mem_acquire>
	if (!tx) {
    349e:	2800      	cmp	r0, #0
    34a0:	f43e afbb 	beq.w	241a <ull_conn_llcp+0x7a2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    34a4:	7902      	ldrb	r2, [r0, #4]
    34a6:	f042 0203 	orr.w	r2, r2, #3
    34aa:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    34ac:	2218      	movs	r2, #24
    34ae:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    34b0:	2210      	movs	r2, #16
    34b2:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    34b4:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
    34b8:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    34ba:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    34be:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    34c0:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    34c4:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    34c6:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    34ca:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    34cc:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
    34d0:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    34d2:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
    34d6:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    34da:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    34de:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    34e2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
    34e6:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    34ea:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
    34ee:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    34f2:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    34f6:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    34fa:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
    34fe:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    3502:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
    3506:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    350a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    350e:	2a00      	cmp	r2, #0
    3510:	d043      	beq.n	359a <ull_conn_llcp+0x1922>
	    !conn->llcp_enc.pause_tx &&
    3512:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3516:	0789      	lsls	r1, r1, #30
    3518:	d43f      	bmi.n	359a <ull_conn_llcp+0x1922>
	    !conn->llcp_phy.pause_tx &&
    351a:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    351e:	07cb      	lsls	r3, r1, #31
    3520:	d43b      	bmi.n	359a <ull_conn_llcp+0x1922>
		if (conn->tx_head == conn->tx_data) {
    3522:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    3526:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    3528:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    352c:	f000 80c2 	beq.w	36b4 <ull_conn_llcp+0x1a3c>
		} else if (!conn->tx_ctrl) {
    3530:	2900      	cmp	r1, #0
    3532:	f000 80d2 	beq.w	36da <ull_conn_llcp+0x1a62>
	tx->next = conn->tx_ctrl_last->next;
    3536:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    353a:	6811      	ldr	r1, [r2, #0]
    353c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    353e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    3540:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    3544:	6802      	ldr	r2, [r0, #0]
    3546:	2a00      	cmp	r2, #0
    3548:	f000 80a3 	beq.w	3692 <ull_conn_llcp+0x1a1a>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    354c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    3550:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    3554:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    3558:	2205      	movs	r2, #5
    355a:	f362 0303 	bfi	r3, r2, #0, #4
    355e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    3562:	f7fe bb95 	b.w	1c90 <ull_conn_llcp+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
    3566:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3568:	2a03      	cmp	r2, #3
    356a:	f43f ae36 	beq.w	31da <ull_conn_llcp+0x1562>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    356e:	2a0a      	cmp	r2, #10
    3570:	f47f af22 	bne.w	33b8 <ull_conn_llcp+0x1740>
    3574:	e631      	b.n	31da <ull_conn_llcp+0x1562>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    3576:	07d7      	lsls	r7, r2, #31
    3578:	d519      	bpl.n	35ae <ull_conn_llcp+0x1936>
			conn->llcp_phy.rx = PHY_1M;
    357a:	2201      	movs	r2, #1
    357c:	f362 1347 	bfi	r3, r2, #5, #3
    3580:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    3584:	e6c3      	b.n	330e <ull_conn_llcp+0x1696>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    3586:	07d8      	lsls	r0, r3, #31
    3588:	d51a      	bpl.n	35c0 <ull_conn_llcp+0x1948>
			conn->llcp_phy.tx = PHY_1M;
    358a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    358e:	2201      	movs	r2, #1
    3590:	f362 0384 	bfi	r3, r2, #2, #3
    3594:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    3598:	e6ad      	b.n	32f6 <ull_conn_llcp+0x167e>
		if (!conn->tx_ctrl) {
    359a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    359e:	2900      	cmp	r1, #0
    35a0:	d1c9      	bne.n	3536 <ull_conn_llcp+0x18be>
			tx->next = conn->tx_head;
    35a2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    35a4:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    35a8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    35ac:	e7ca      	b.n	3544 <ull_conn_llcp+0x18cc>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    35ae:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    35b2:	bf18      	it	ne
    35b4:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    35b6:	f362 1347 	bfi	r3, r2, #5, #3
    35ba:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    35be:	e6a6      	b.n	330e <ull_conn_llcp+0x1696>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    35c0:	f013 0304 	ands.w	r3, r3, #4
    35c4:	f000 8082 	beq.w	36cc <ull_conn_llcp+0x1a54>
			conn->llcp_phy.tx = PHY_CODED;
    35c8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    35cc:	2204      	movs	r2, #4
    35ce:	f362 0384 	bfi	r3, r2, #2, #3
    35d2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    35d6:	e68e      	b.n	32f6 <ull_conn_llcp+0x167e>
			conn->tx_data = conn->tx_data->next;
    35d8:	680b      	ldr	r3, [r1, #0]
    35da:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    35de:	2d00      	cmp	r5, #0
    35e0:	f47f aa04 	bne.w	29ec <ull_conn_llcp+0xd74>
			tx->next = conn->tx_head->next;
    35e4:	680b      	ldr	r3, [r1, #0]
    35e6:	f840 3c13 	str.w	r3, [r0, #-19]
			conn->tx_head->next = tx;
    35ea:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
    35ec:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    35f0:	f7ff ba04 	b.w	29fc <ull_conn_llcp+0xd84>
	    ((pdu_data_tx->llctrl.opcode !=
    35f4:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35f6:	2903      	cmp	r1, #3
    35f8:	f43f aee8 	beq.w	33cc <ull_conn_llcp+0x1754>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    35fc:	290a      	cmp	r1, #10
    35fe:	f47f af28 	bne.w	3452 <ull_conn_llcp+0x17da>
    3602:	e6e3      	b.n	33cc <ull_conn_llcp+0x1754>
	    ((pdu_data_tx->llctrl.opcode !=
    3604:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3606:	2b03      	cmp	r3, #3
    3608:	f43f ae5a 	beq.w	32c0 <ull_conn_llcp+0x1648>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    360c:	2b0a      	cmp	r3, #10
    360e:	f47f af2a 	bne.w	3466 <ull_conn_llcp+0x17ee>
    3612:	e655      	b.n	32c0 <ull_conn_llcp+0x1648>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3614:	791a      	ldrb	r2, [r3, #4]
    3616:	f002 0203 	and.w	r2, r2, #3
    361a:	2a03      	cmp	r2, #3
    361c:	d00a      	beq.n	3634 <ull_conn_llcp+0x19bc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    361e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3622:	e4c3      	b.n	2fac <ull_conn_llcp+0x1334>
	    ((pdu_data_tx->llctrl.opcode !=
    3624:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3626:	2a03      	cmp	r2, #3
    3628:	f43f aea2 	beq.w	3370 <ull_conn_llcp+0x16f8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    362c:	2a0a      	cmp	r2, #10
    362e:	f47f aedd 	bne.w	33ec <ull_conn_llcp+0x1774>
    3632:	e69d      	b.n	3370 <ull_conn_llcp+0x16f8>
	    ((pdu_data_tx->llctrl.opcode !=
    3634:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3636:	2a03      	cmp	r2, #3
    3638:	f43f aee2 	beq.w	3400 <ull_conn_llcp+0x1788>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    363c:	2a0a      	cmp	r2, #10
    363e:	d1ee      	bne.n	361e <ull_conn_llcp+0x19a6>
    3640:	e6de      	b.n	3400 <ull_conn_llcp+0x1788>
	    ((pdu_data_tx->llctrl.opcode !=
    3642:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3644:	2a03      	cmp	r2, #3
    3646:	f43f ade0 	beq.w	320a <ull_conn_llcp+0x1592>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    364a:	2a0a      	cmp	r2, #10
    364c:	f47f aee4 	bne.w	3418 <ull_conn_llcp+0x17a0>
    3650:	e5db      	b.n	320a <ull_conn_llcp+0x1592>
			conn->tx_data = conn->tx_data->next;
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3658:	2900      	cmp	r1, #0
    365a:	f47f ae0c 	bne.w	3276 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head->next;
    365e:	6811      	ldr	r1, [r2, #0]
    3660:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    3662:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    3664:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    3668:	e60c      	b.n	3284 <ull_conn_llcp+0x160c>
		conn->tx_data_last = tx;
    366a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    366e:	e60d      	b.n	328c <ull_conn_llcp+0x1614>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3670:	7911      	ldrb	r1, [r2, #4]
    3672:	f001 0103 	and.w	r1, r1, #3
    3676:	2903      	cmp	r1, #3
    3678:	d016      	beq.n	36a8 <ull_conn_llcp+0x1a30>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    367a:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    367e:	e5fa      	b.n	3276 <ull_conn_llcp+0x15fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3680:	790b      	ldrb	r3, [r1, #4]
    3682:	f003 0303 	and.w	r3, r3, #3
    3686:	2b03      	cmp	r3, #3
    3688:	d02f      	beq.n	36ea <ull_conn_llcp+0x1a72>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    368a:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    368e:	f7ff b9ad 	b.w	29ec <ull_conn_llcp+0xd74>
		conn->tx_data_last = tx;
    3692:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    3696:	e759      	b.n	354c <ull_conn_llcp+0x18d4>
	    ((pdu_data_tx->llctrl.opcode !=
    3698:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    369a:	2a03      	cmp	r2, #3
    369c:	f43f ae04 	beq.w	32a8 <ull_conn_llcp+0x1630>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    36a0:	2a0a      	cmp	r2, #10
    36a2:	f47f aeea 	bne.w	347a <ull_conn_llcp+0x1802>
    36a6:	e5ff      	b.n	32a8 <ull_conn_llcp+0x1630>
	    ((pdu_data_tx->llctrl.opcode !=
    36a8:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36aa:	2903      	cmp	r1, #3
    36ac:	d0d7      	beq.n	365e <ull_conn_llcp+0x19e6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    36ae:	290a      	cmp	r1, #10
    36b0:	d1e3      	bne.n	367a <ull_conn_llcp+0x1a02>
    36b2:	e7d4      	b.n	365e <ull_conn_llcp+0x19e6>
			conn->tx_data = conn->tx_data->next;
    36b4:	6813      	ldr	r3, [r2, #0]
    36b6:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    36ba:	2900      	cmp	r1, #0
    36bc:	f47f af3b 	bne.w	3536 <ull_conn_llcp+0x18be>
			tx->next = conn->tx_head->next;
    36c0:	6811      	ldr	r1, [r2, #0]
    36c2:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    36c4:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    36c6:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    36ca:	e73b      	b.n	3544 <ull_conn_llcp+0x18cc>
			conn->llcp_phy.tx = 0U;
    36cc:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    36d0:	f363 0284 	bfi	r2, r3, #2, #3
    36d4:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    36d8:	e60d      	b.n	32f6 <ull_conn_llcp+0x167e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36da:	7911      	ldrb	r1, [r2, #4]
    36dc:	f001 0103 	and.w	r1, r1, #3
    36e0:	2903      	cmp	r1, #3
    36e2:	d009      	beq.n	36f8 <ull_conn_llcp+0x1a80>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    36e4:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    36e8:	e725      	b.n	3536 <ull_conn_llcp+0x18be>
	    ((pdu_data_tx->llctrl.opcode !=
    36ea:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36ec:	2b03      	cmp	r3, #3
    36ee:	f43f af79 	beq.w	35e4 <ull_conn_llcp+0x196c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    36f2:	2b0a      	cmp	r3, #10
    36f4:	d1c9      	bne.n	368a <ull_conn_llcp+0x1a12>
    36f6:	e775      	b.n	35e4 <ull_conn_llcp+0x196c>
	    ((pdu_data_tx->llctrl.opcode !=
    36f8:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36fa:	2903      	cmp	r1, #3
    36fc:	d0e0      	beq.n	36c0 <ull_conn_llcp+0x1a48>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    36fe:	290a      	cmp	r1, #10
    3700:	d1f0      	bne.n	36e4 <ull_conn_llcp+0x1a6c>
    3702:	e7dd      	b.n	36c0 <ull_conn_llcp+0x1a48>
			LL_ASSERT(0);
    3704:	4a0c      	ldr	r2, [pc, #48]	; (3738 <ull_conn_llcp+0x1ac0>)
    3706:	490d      	ldr	r1, [pc, #52]	; (373c <ull_conn_llcp+0x1ac4>)
    3708:	480d      	ldr	r0, [pc, #52]	; (3740 <ull_conn_llcp+0x1ac8>)
    370a:	f640 33c7 	movw	r3, #3015	; 0xbc7
    370e:	f022 f9f9 	bl	25b04 <printk>
    3712:	4040      	eors	r0, r0
    3714:	f380 8811 	msr	BASEPRI, r0
    3718:	f04f 0003 	mov.w	r0, #3
    371c:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    371e:	f04f 0800 	mov.w	r8, #0
			break;
    3722:	f7fe bf91 	b.w	2648 <ull_conn_llcp+0x9d0>
		LL_ASSERT(0);
    3726:	4a04      	ldr	r2, [pc, #16]	; (3738 <ull_conn_llcp+0x1ac0>)
    3728:	4904      	ldr	r1, [pc, #16]	; (373c <ull_conn_llcp+0x1ac4>)
    372a:	f640 73e1 	movw	r3, #4065	; 0xfe1
    372e:	f7ff ba2f 	b.w	2b90 <ull_conn_llcp+0xf18>
    3732:	bf00      	nop
    3734:	20004a94 	.word	0x20004a94
    3738:	0002cfb4 	.word	0x0002cfb4
    373c:	0002c97c 	.word	0x0002c97c
    3740:	0002c8dc 	.word	0x0002c8dc
    3744:	00000000 	.word	0x00000000

00003748 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    3748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    374c:	b08b      	sub	sp, #44	; 0x2c
    374e:	460f      	mov	r7, r1
    3750:	9304      	str	r3, [sp, #16]
    3752:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    3756:	9005      	str	r0, [sp, #20]
    3758:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    375a:	2000      	movs	r0, #0
{
    375c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    3760:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    3764:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    3768:	9303      	str	r3, [sp, #12]
    376a:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    376c:	f013 fe26 	bl	173bc <ull_scan_is_disabled_get>
	if (!scan) {
    3770:	2800      	cmp	r0, #0
    3772:	f000 8194 	beq.w	3a9e <ll_create_connection+0x356>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    3776:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    377a:	4605      	mov	r5, r0
    377c:	4650      	mov	r0, sl
    377e:	f010 f957 	bl	13a30 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    3782:	f1ba 0f00 	cmp.w	sl, #0
    3786:	d16a      	bne.n	385e <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    3788:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    378a:	f105 021c 	add.w	r2, r5, #28
    378e:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    3790:	2b00      	cmp	r3, #0
    3792:	d06b      	beq.n	386c <ll_create_connection+0x124>
		conn_lll = lll->conn;
    3794:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    3798:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    379c:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    37a0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    37a4:	f000 0007 	and.w	r0, r0, #7
    37a8:	f018 fee2 	bl	1c570 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    37ac:	f8b8 1026 	ldrh.w	r1, [r8, #38]	; 0x26
    37b0:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    37b4:	4401      	add	r1, r0
    37b6:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
    37ba:	4401      	add	r1, r0
    37bc:	48c2      	ldr	r0, [pc, #776]	; (3ac8 <ll_create_connection+0x380>)
    37be:	a3c0      	add	r3, pc, #768	; (adr r3, 3ac0 <ll_create_connection+0x378>)
    37c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    37c4:	fba1 0100 	umull	r0, r1, r1, r0
    37c8:	f7fd fea6 	bl	1518 <__aeabi_uldivmod>
    37cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    37d0:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    37d2:	4630      	mov	r0, r6
    37d4:	f017 fed8 	bl	1b588 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    37d8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    37dc:	f36f 0341 	bfc	r3, #1, #1
    37e0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    37e4:	23ff      	movs	r3, #255	; 0xff
    37e6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    37ea:	b366      	cbz	r6, 3846 <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    37ec:	f1a9 0302 	sub.w	r3, r9, #2
    37f0:	2b01      	cmp	r3, #1
    37f2:	f240 8158 	bls.w	3aa6 <ll_create_connection+0x35e>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    37f6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    37fa:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    37fc:	f369 0342 	bfi	r3, r9, #1, #2
    3800:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    3804:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3808:	f362 0300 	bfi	r3, r2, #0, #1
    380c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    3810:	9914      	ldr	r1, [sp, #80]	; 0x50
    3812:	2206      	movs	r2, #6
    3814:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3818:	f024 ffca 	bl	287b0 <memcpy>
	lll->conn_timeout = timeout;
    381c:	9b03      	ldr	r3, [sp, #12]
    381e:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    3820:	9a05      	ldr	r2, [sp, #20]
    3822:	9600      	str	r6, [sp, #0]
    3824:	463b      	mov	r3, r7
    3826:	f105 001c 	add.w	r0, r5, #28
    382a:	2100      	movs	r1, #0
    382c:	f7fe f93c 	bl	1aa8 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    3830:	f019 f83c 	bl	1c8ac <lll_clock_wait>
	if (err) {
    3834:	2800      	cmp	r0, #0
    3836:	f040 8157 	bne.w	3ae8 <ll_create_connection+0x3a0>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    383a:	4628      	mov	r0, r5
    383c:	f7fe f960 	bl	1b00 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    3840:	b00b      	add	sp, #44	; 0x2c
    3842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    3846:	f018 facd 	bl	1bde4 <ull_filter_lll_rl_enabled>
    384a:	2800      	cmp	r0, #0
    384c:	d0ce      	beq.n	37ec <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    384e:	9914      	ldr	r1, [sp, #80]	; 0x50
    3850:	9804      	ldr	r0, [sp, #16]
    3852:	4632      	mov	r2, r6
    3854:	f018 f808 	bl	1b868 <ull_filter_rl_find>
    3858:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    385c:	e7c6      	b.n	37ec <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    385e:	2106      	movs	r1, #6
    3860:	f00e fd3a 	bl	122d8 <mem_nz>
    3864:	2800      	cmp	r0, #0
    3866:	d18f      	bne.n	3788 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    3868:	2012      	movs	r0, #18
    386a:	e7e9      	b.n	3840 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    386c:	f012 fc5e 	bl	1612c <ll_rx_link_alloc>
	if (!link) {
    3870:	9007      	str	r0, [sp, #28]
    3872:	2800      	cmp	r0, #0
    3874:	f000 816f 	beq.w	3b56 <ll_create_connection+0x40e>
	conn = ll_conn_acquire();
    3878:	f014 f9fe 	bl	17c78 <ll_conn_acquire>
	if (!conn) {
    387c:	4604      	mov	r4, r0
    387e:	2800      	cmp	r0, #0
    3880:	f000 818b 	beq.w	3b9a <ll_create_connection+0x452>
	err = util_aa_le32(conn_lll->access_addr);
    3884:	3020      	adds	r0, #32
    3886:	f00e fec7 	bl	12618 <util_aa_le32>
	conn_lll = &conn->lll;
    388a:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    388e:	2800      	cmp	r0, #0
    3890:	f040 8154 	bne.w	3b3c <ll_create_connection+0x3f4>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    3894:	2103      	movs	r1, #3
    3896:	f104 0024 	add.w	r0, r4, #36	; 0x24
    389a:	f018 fd17 	bl	1c2cc <lll_csrand_get>
	conn_lll->interval = interval;
    389e:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    38a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->interval = interval;
    38a2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    38a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    38a8:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    38ac:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    38ae:	2800      	cmp	r0, #0
    38b0:	f000 8153 	beq.w	3b5a <ll_create_connection+0x412>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    38b4:	f104 0148 	add.w	r1, r4, #72	; 0x48
    38b8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    38bc:	f00e fd18 	bl	122f0 <memq_init>
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    38c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38c2:	4a82      	ldr	r2, [pc, #520]	; (3acc <ll_create_connection+0x384>)
    38c4:	401a      	ands	r2, r3
	conn_lll->sn = 0;
    38c6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    38ca:	f023 0307 	bic.w	r3, r3, #7
    38ce:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    38d2:	4b7f      	ldr	r3, [pc, #508]	; (3ad0 <ll_create_connection+0x388>)
    38d4:	4313      	orrs	r3, r2
    38d6:	6463      	str	r3, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    38d8:	4b7e      	ldr	r3, [pc, #504]	; (3ad4 <ll_create_connection+0x38c>)
    38da:	6423      	str	r3, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
    38dc:	f04f 0b00 	mov.w	fp, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    38e0:	231b      	movs	r3, #27
    38e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
	conn_lll->link_tx_free = NULL;
    38e4:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    38e8:	f8a4 b05c 	strh.w	fp, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    38ec:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    38f0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    38f4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    38f8:	f017 f8d4 	bl	1aaa4 <ull_chan_map_get>
    38fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    3900:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    3904:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    3906:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    390a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    390e:	f018 fcdd 	bl	1c2cc <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3912:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3916:	4b70      	ldr	r3, [pc, #448]	; (3ad8 <ll_create_connection+0x390>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    3918:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    391c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    391e:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3922:	fba3 1302 	umull	r1, r3, r3, r2
    3926:	08db      	lsrs	r3, r3, #3
    3928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    392c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    3930:	3305      	adds	r3, #5
    3932:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    3936:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    393a:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    393c:	f8a4 b0a8 	strh.w	fp, [r4, #168]	; 0xa8
	conn_lll->data_chan_sel = 0;
    3940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3944:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    3948:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    394c:	f8a4 b0ac 	strh.w	fp, [r4, #172]	; 0xac
	conn_lll->central.initiated = 0;
    3950:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    3954:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    3958:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    395c:	4b5f      	ldr	r3, [pc, #380]	; (3adc <ll_create_connection+0x394>)
	conn->apto_expire = 0U;
    395e:	f8a4 b0b4 	strh.w	fp, [r4, #180]	; 0xb4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    3962:	fb02 f101 	mul.w	r1, r2, r1
    3966:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3968:	440b      	add	r3, r1
    396a:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    396e:	495c      	ldr	r1, [pc, #368]	; (3ae0 <ll_create_connection+0x398>)
	conn->appto_expire = 0U;
    3970:	f8a4 b0b0 	strh.w	fp, [r4, #176]	; 0xb0
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    3974:	4411      	add	r1, r2
    3976:	fbb1 f1f2 	udiv	r1, r1, r2
    397a:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    397e:	f242 7110 	movw	r1, #10000	; 0x2710
    3982:	fb01 210c 	mla	r1, r1, ip, r2
    3986:	3901      	subs	r1, #1
    3988:	fbb1 f2f2 	udiv	r2, r1, r2
    398c:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    3990:	2206      	movs	r2, #6
    3992:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    3996:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3998:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    399a:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    399c:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    39a0:	dd02      	ble.n	39a8 <ll_create_connection+0x260>
    39a2:	3a06      	subs	r2, #6
    39a4:	1a12      	subs	r2, r2, r0
    39a6:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    39a8:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    39ac:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    39b0:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    39b4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    39b8:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    39bc:	f8a4 b0bc 	strh.w	fp, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    39c0:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    39c4:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    39c8:	f8a4 b0f8 	strh.w	fp, [r4, #248]	; 0xf8
	conn->llcp_feature.features_conn = ll_feat_get();
    39cc:	f011 fed0 	bl	15770 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    39d0:	9b07      	ldr	r3, [sp, #28]
    39d2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    39d6:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    39da:	f8a4 b110 	strh.w	fp, [r4, #272]	; 0x110
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    39de:	f023 0303 	bic.w	r3, r3, #3
    39e2:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    39e6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    39ea:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    39ee:	f023 0318 	bic.w	r3, r3, #24
    39f2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    39f6:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_terminate.reason_final = 0U;
    39fa:	f884 b11b 	strb.w	fp, [r4, #283]	; 0x11b
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    39fe:	f023 0307 	bic.w	r3, r3, #7
    3a02:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_conn_param.disabled = 0U;
    3a06:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    3a0a:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
	conn->llcp_conn_param.disabled = 0U;
    3a0e:	f36b 1345 	bfi	r3, fp, #5, #1
    3a12:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_length.disabled = 0U;
    3a16:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_conn_param.req = 0U;
    3a1a:	f8a4 b15c 	strh.w	fp, [r4, #348]	; 0x15c
	conn->llcp_length.disabled = 0U;
    3a1e:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    3a22:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    3a24:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_feature.features_peer = 0;
    3a28:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    3a2a:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    3a2e:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    3a32:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    3a36:	f8a4 b190 	strh.w	fp, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    3a3a:	f014 fc21 	bl	18280 <ull_conn_default_tx_octets_get>
    3a3e:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    3a42:	f014 fc23 	bl	1828c <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3a46:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    3a4a:	4b26      	ldr	r3, [pc, #152]	; (3ae4 <ll_create_connection+0x39c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    3a4c:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3a50:	4013      	ands	r3, r2
    3a52:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    3a56:	f014 fc1f 	bl	18298 <ull_conn_default_phy_tx_get>
    3a5a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    3a5e:	f360 0302 	bfi	r3, r0, #0, #3
    3a62:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    3a66:	f014 fc1d 	bl	182a4 <ull_conn_default_phy_rx_get>
    3a6a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    3a6e:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    3a72:	f360 03c5 	bfi	r3, r0, #3, #3
    3a76:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->ull.ticks_prepare_to_start =
    3a7a:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    3a7c:	e9c4 bb6a 	strd	fp, fp, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    3a80:	e9c4 bb68 	strd	fp, fp, [r4, #416]	; 0x1a0
	conn->ull.ticks_active_to_start = 0U;
    3a84:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    3a88:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    3a8c:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    3a8e:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    3a92:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    3a96:	f884 b000 	strb.w	fp, [r4]
    3a9a:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    3a9c:	e67e      	b.n	379c <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    3a9e:	200c      	movs	r0, #12
}
    3aa0:	b00b      	add	sp, #44	; 0x2c
    3aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    3aa6:	2000      	movs	r0, #0
    3aa8:	f017 fd92 	bl	1b5d0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    3aac:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3ab0:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    3ab4:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    3ab6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    3aba:	e69c      	b.n	37f6 <ll_create_connection+0xae>
    3abc:	f3af 8000 	nop.w
    3ac0:	1afd498d 	.word	0x1afd498d
    3ac4:	00000007 	.word	0x00000007
    3ac8:	3b9aca00 	.word	0x3b9aca00
    3acc:	f8800000 	.word	0xf8800000
    3ad0:	01110148 	.word	0x01110148
    3ad4:	0148001b 	.word	0x0148001b
    3ad8:	aaaaaaab 	.word	0xaaaaaaab
    3adc:	01c9c37f 	.word	0x01c9c37f
    3ae0:	026259ff 	.word	0x026259ff
    3ae4:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    3ae8:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    3aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3aec:	b163      	cbz	r3, 3b08 <ll_create_connection+0x3c0>
    3aee:	4a2d      	ldr	r2, [pc, #180]	; (3ba4 <ll_create_connection+0x45c>)
    3af0:	492d      	ldr	r1, [pc, #180]	; (3ba8 <ll_create_connection+0x460>)
    3af2:	482e      	ldr	r0, [pc, #184]	; (3bac <ll_create_connection+0x464>)
    3af4:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    3af8:	f022 f804 	bl	25b04 <printk>
    3afc:	4040      	eors	r0, r0
    3afe:	f380 8811 	msr	BASEPRI, r0
    3b02:	f04f 0003 	mov.w	r0, #3
    3b06:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    3b08:	f104 0130 	add.w	r1, r4, #48	; 0x30
    3b0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3b10:	f00e fbf2 	bl	122f8 <memq_deinit>
	LL_ASSERT(link);
    3b14:	4606      	mov	r6, r0
    3b16:	2800      	cmp	r0, #0
    3b18:	d031      	beq.n	3b7e <ll_create_connection+0x436>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    3b1a:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    3b1c:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    3b1e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    3b22:	b1f4      	cbz	r4, 3b62 <ll_create_connection+0x41a>

	ll_rx_link_release(link);
    3b24:	4620      	mov	r0, r4
    3b26:	f012 fb07 	bl	16138 <ll_rx_link_release>

	ll_conn_release(conn);
    3b2a:	4638      	mov	r0, r7
    3b2c:	f014 f8aa 	bl	17c84 <ll_conn_release>
	scan->lll.conn = NULL;
    3b30:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    3b32:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    3b34:	622b      	str	r3, [r5, #32]
}
    3b36:	b00b      	add	sp, #44	; 0x2c
    3b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    3b3c:	4a19      	ldr	r2, [pc, #100]	; (3ba4 <ll_create_connection+0x45c>)
    3b3e:	491c      	ldr	r1, [pc, #112]	; (3bb0 <ll_create_connection+0x468>)
    3b40:	481a      	ldr	r0, [pc, #104]	; (3bac <ll_create_connection+0x464>)
    3b42:	23bf      	movs	r3, #191	; 0xbf
    3b44:	f021 ffde 	bl	25b04 <printk>
    3b48:	4040      	eors	r0, r0
    3b4a:	f380 8811 	msr	BASEPRI, r0
    3b4e:	f04f 0003 	mov.w	r0, #3
    3b52:	df02      	svc	2
    3b54:	e69e      	b.n	3894 <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3b56:	2007      	movs	r0, #7
    3b58:	e672      	b.n	3840 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    3b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3b5e:	65a0      	str	r0, [r4, #88]	; 0x58
    3b60:	e6a8      	b.n	38b4 <ll_create_connection+0x16c>
	LL_ASSERT(link);
    3b62:	4a10      	ldr	r2, [pc, #64]	; (3ba4 <ll_create_connection+0x45c>)
    3b64:	4913      	ldr	r1, [pc, #76]	; (3bb4 <ll_create_connection+0x46c>)
    3b66:	4811      	ldr	r0, [pc, #68]	; (3bac <ll_create_connection+0x464>)
    3b68:	f240 43c1 	movw	r3, #1217	; 0x4c1
    3b6c:	f021 ffca 	bl	25b04 <printk>
    3b70:	4040      	eors	r0, r0
    3b72:	f380 8811 	msr	BASEPRI, r0
    3b76:	f04f 0003 	mov.w	r0, #3
    3b7a:	df02      	svc	2
    3b7c:	e7d2      	b.n	3b24 <ll_create_connection+0x3dc>
	LL_ASSERT(link);
    3b7e:	4a09      	ldr	r2, [pc, #36]	; (3ba4 <ll_create_connection+0x45c>)
    3b80:	490c      	ldr	r1, [pc, #48]	; (3bb4 <ll_create_connection+0x46c>)
    3b82:	480a      	ldr	r0, [pc, #40]	; (3bac <ll_create_connection+0x464>)
    3b84:	f240 43ba 	movw	r3, #1210	; 0x4ba
    3b88:	f021 ffbc 	bl	25b04 <printk>
    3b8c:	4040      	eors	r0, r0
    3b8e:	f380 8811 	msr	BASEPRI, r0
    3b92:	f04f 0003 	mov.w	r0, #3
    3b96:	df02      	svc	2
    3b98:	e7bf      	b.n	3b1a <ll_create_connection+0x3d2>
		ll_rx_link_release(link);
    3b9a:	9807      	ldr	r0, [sp, #28]
    3b9c:	f012 facc 	bl	16138 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3ba0:	2007      	movs	r0, #7
    3ba2:	e64d      	b.n	3840 <ll_create_connection+0xf8>
    3ba4:	0002d194 	.word	0x0002d194
    3ba8:	0002d1d8 	.word	0x0002d1d8
    3bac:	0002c8dc 	.word	0x0002c8dc
    3bb0:	0002cd00 	.word	0x0002cd00
    3bb4:	0002d00c 	.word	0x0002d00c

00003bb8 <ull_central_setup>:
{
    3bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    3bbc:	4680      	mov	r8, r0
{
    3bbe:	b08f      	sub	sp, #60	; 0x3c
    3bc0:	4604      	mov	r4, r0
    3bc2:	460f      	mov	r7, r1
    3bc4:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3bc6:	f100 0124 	add.w	r1, r0, #36	; 0x24
    3bca:	2206      	movs	r2, #6
    3bcc:	a80c      	add	r0, sp, #48	; 0x30
	peer_addr_type = pdu_tx->rx_addr;
    3bce:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3bd2:	f024 fded 	bl	287b0 <memcpy>
	chan_sel = pdu_tx->chan_sel;
    3bd6:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3bda:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
    3bde:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
    3be2:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    3be6:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3be8:	f040 8104 	bne.w	3df4 <ull_central_setup+0x23c>
	cc->status = 0U;
    3bec:	2300      	movs	r3, #0
    3bee:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    3bf0:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
    3bf2:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
    3bf6:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3bfa:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3bfe:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    3c02:	f000 80e1 	beq.w	3dc8 <ull_central_setup+0x210>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3c06:	f104 011e 	add.w	r1, r4, #30
    3c0a:	f024 fdd1 	bl	287b0 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    3c0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c12:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3c16:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3c1a:	f000 80df 	beq.w	3ddc <ull_central_setup+0x224>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3c1e:	4652      	mov	r2, sl
    3c20:	4640      	mov	r0, r8
    3c22:	f104 011e 	add.w	r1, r4, #30
    3c26:	930b      	str	r3, [sp, #44]	; 0x2c
    3c28:	f017 f98a 	bl	1af40 <ll_rl_id_addr_get>
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3c2e:	4618      	mov	r0, r3
		cc->peer_addr_type += 2;
    3c30:	7fa3      	ldrb	r3, [r4, #30]
    3c32:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c34:	a90c      	add	r1, sp, #48	; 0x30
		cc->peer_addr_type += 2;
    3c36:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c38:	2206      	movs	r2, #6
    3c3a:	f024 fdb9 	bl	287b0 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    3c3e:	683b      	ldr	r3, [r7, #0]
    3c40:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    3c44:	89eb      	ldrh	r3, [r5, #14]
    3c46:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    3c48:	8a2b      	ldrh	r3, [r5, #16]
    3c4a:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    3c4c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    3c50:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    3c52:	f018 fe7d 	bl	1c950 <lll_clock_sca_local_get>
    3c56:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    3c5a:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    3c5e:	4640      	mov	r0, r8
    3c60:	f014 f816 	bl	17c90 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    3c64:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    3c66:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    3c68:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    3c6a:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    3c6c:	6820      	ldr	r0, [r4, #0]
    3c6e:	f012 fa69 	bl	16144 <ll_rx_put>
		rx->handle = lll->handle;
    3c72:	89ab      	ldrh	r3, [r5, #12]
    3c74:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3c76:	231b      	movs	r3, #27
		link = rx->link;
    3c78:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3c7a:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    3c7c:	f1b9 0f00 	cmp.w	r9, #0
    3c80:	f040 80c6 	bne.w	3e10 <ull_central_setup+0x258>
			cs->csa = 0x00;
    3c84:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    3c88:	4631      	mov	r1, r6
    3c8a:	4620      	mov	r0, r4
    3c8c:	f012 fa5a 	bl	16144 <ll_rx_put>
	ll_rx_sched();
    3c90:	f012 fa62 	bl	16158 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3c94:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3c98:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    3c9c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3ca0:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    3ca4:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3ca6:	429e      	cmp	r6, r3
    3ca8:	bf38      	it	cc
    3caa:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3cac:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3cb0:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3cb4:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3cb8:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3cbc:	f018 fc58 	bl	1c570 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    3cc0:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3cc2:	2200      	movs	r2, #0
    3cc4:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3cc6:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3cc8:	2001      	movs	r0, #1
    3cca:	f00e fb61 	bl	12390 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3cce:	4650      	mov	r0, sl
    3cd0:	f013 fb4c 	bl	1736c <ull_scan_handle_get>
    3cd4:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3cd6:	4b56      	ldr	r3, [pc, #344]	; (3e30 <ull_central_setup+0x278>)
    3cd8:	f8cd a000 	str.w	sl, [sp]
    3cdc:	b2d2      	uxtb	r2, r2
    3cde:	2101      	movs	r1, #1
    3ce0:	2000      	movs	r0, #0
    3ce2:	f00f fddd 	bl	138a0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3ce6:	f030 0302 	bics.w	r3, r0, #2
    3cea:	d00c      	beq.n	3d06 <ull_central_setup+0x14e>
    3cec:	4a51      	ldr	r2, [pc, #324]	; (3e34 <ull_central_setup+0x27c>)
    3cee:	4952      	ldr	r1, [pc, #328]	; (3e38 <ull_central_setup+0x280>)
    3cf0:	4852      	ldr	r0, [pc, #328]	; (3e3c <ull_central_setup+0x284>)
    3cf2:	f240 33c9 	movw	r3, #969	; 0x3c9
    3cf6:	f021 ff05 	bl	25b04 <printk>
    3cfa:	4040      	eors	r0, r0
    3cfc:	f380 8811 	msr	BASEPRI, r0
    3d00:	f04f 0003 	mov.w	r0, #3
    3d04:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3d06:	f04f 0a00 	mov.w	sl, #0
    3d0a:	4653      	mov	r3, sl
    3d0c:	2203      	movs	r2, #3
    3d0e:	2101      	movs	r1, #1
    3d10:	f8cd a000 	str.w	sl, [sp]
    3d14:	4650      	mov	r0, sl
    3d16:	f00f fdc3 	bl	138a0 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3d1a:	4640      	mov	r0, r8
    3d1c:	f013 ffb8 	bl	17c90 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d20:	68bb      	ldr	r3, [r7, #8]
    3d22:	f8cd 8018 	str.w	r8, [sp, #24]
    3d26:	3b09      	subs	r3, #9
    3d28:	1b9e      	subs	r6, r3, r6
    3d2a:	4b45      	ldr	r3, [pc, #276]	; (3e40 <ull_central_setup+0x288>)
    3d2c:	9307      	str	r3, [sp, #28]
    3d2e:	4b45      	ldr	r3, [pc, #276]	; (3e44 <ull_central_setup+0x28c>)
    3d30:	9305      	str	r3, [sp, #20]
    3d32:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d36:	4f44      	ldr	r7, [pc, #272]	; (3e48 <ull_central_setup+0x290>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d38:	9308      	str	r3, [sp, #32]
    3d3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d3e:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d42:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3d46:	1d45      	adds	r5, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3d48:	a337      	add	r3, pc, #220	; (adr r3, 3e28 <ull_central_setup+0x270>)
    3d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d4e:	4648      	mov	r0, r9
    3d50:	4641      	mov	r1, r8
    3d52:	f7fd fbe1 	bl	1518 <__aeabi_uldivmod>
    3d56:	4610      	mov	r0, r2
    3d58:	4619      	mov	r1, r3
    3d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d5e:	2300      	movs	r3, #0
    3d60:	f7fd fbda 	bl	1518 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d64:	a330      	add	r3, pc, #192	; (adr r3, 3e28 <ull_central_setup+0x270>)
    3d66:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d6a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d6c:	4641      	mov	r1, r8
    3d6e:	4648      	mov	r0, r9
    3d70:	f7fd fbd2 	bl	1518 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3d74:	a32c      	add	r3, pc, #176	; (adr r3, 3e28 <ull_central_setup+0x270>)
    3d76:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d7a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3d7c:	fba4 0107 	umull	r0, r1, r4, r7
    3d80:	f7fd fbca 	bl	1518 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d84:	b2ed      	uxtb	r5, r5
    3d86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d8a:	9000      	str	r0, [sp, #0]
    3d8c:	4633      	mov	r3, r6
    3d8e:	462a      	mov	r2, r5
    3d90:	2101      	movs	r1, #1
    3d92:	4650      	mov	r0, sl
    3d94:	f00f fcfa 	bl	1378c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3d98:	f030 0302 	bics.w	r3, r0, #2
    3d9c:	d00c      	beq.n	3db8 <ull_central_setup+0x200>
    3d9e:	4a25      	ldr	r2, [pc, #148]	; (3e34 <ull_central_setup+0x27c>)
    3da0:	4925      	ldr	r1, [pc, #148]	; (3e38 <ull_central_setup+0x280>)
    3da2:	4826      	ldr	r0, [pc, #152]	; (3e3c <ull_central_setup+0x284>)
    3da4:	f240 33fa 	movw	r3, #1018	; 0x3fa
    3da8:	f021 feac 	bl	25b04 <printk>
    3dac:	4040      	eors	r0, r0
    3dae:	f380 8811 	msr	BASEPRI, r0
    3db2:	f04f 0003 	mov.w	r0, #3
    3db6:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3db8:	2201      	movs	r2, #1
    3dba:	2102      	movs	r1, #2
    3dbc:	4610      	mov	r0, r2
    3dbe:	f00e fae7 	bl	12390 <mayfly_enable>
}
    3dc2:	b00f      	add	sp, #60	; 0x3c
    3dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3dc8:	f024 fcfd 	bl	287c6 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    3dcc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3dd0:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3dd4:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3dd8:	f47f af21 	bne.w	3c1e <ull_central_setup+0x66>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    3ddc:	4618      	mov	r0, r3
    3dde:	2206      	movs	r2, #6
    3de0:	2100      	movs	r1, #0
    3de2:	f024 fcf0 	bl	287c6 <memset>
		cc->peer_addr_type = peer_addr_type;
    3de6:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    3de8:	a90c      	add	r1, sp, #48	; 0x30
    3dea:	4650      	mov	r0, sl
    3dec:	2206      	movs	r2, #6
    3dee:	f024 fcdf 	bl	287b0 <memcpy>
    3df2:	e724      	b.n	3c3e <ull_central_setup+0x86>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3df4:	4a0f      	ldr	r2, [pc, #60]	; (3e34 <ull_central_setup+0x27c>)
    3df6:	4915      	ldr	r1, [pc, #84]	; (3e4c <ull_central_setup+0x294>)
    3df8:	4810      	ldr	r0, [pc, #64]	; (3e3c <ull_central_setup+0x284>)
    3dfa:	f44f 7352 	mov.w	r3, #840	; 0x348
    3dfe:	f021 fe81 	bl	25b04 <printk>
    3e02:	4040      	eors	r0, r0
    3e04:	f380 8811 	msr	BASEPRI, r0
    3e08:	f04f 0003 	mov.w	r0, #3
    3e0c:	df02      	svc	2
    3e0e:	e6ed      	b.n	3bec <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
    3e10:	7f6b      	ldrb	r3, [r5, #29]
    3e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e16:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3e18:	1d28      	adds	r0, r5, #4
    3e1a:	f016 fe8f 	bl	1ab3c <lll_chan_id>
			cs->csa = 0x01;
    3e1e:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3e20:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    3e22:	7733      	strb	r3, [r6, #28]
    3e24:	e730      	b.n	3c88 <ull_central_setup+0xd0>
    3e26:	bf00      	nop
    3e28:	1afd498d 	.word	0x1afd498d
    3e2c:	00000007 	.word	0x00000007
    3e30:	0001a375 	.word	0x0001a375
    3e34:	0002d194 	.word	0x0002d194
    3e38:	0002d0d0 	.word	0x0002d0d0
    3e3c:	0002c8dc 	.word	0x0002c8dc
    3e40:	0001a379 	.word	0x0001a379
    3e44:	0001a3a9 	.word	0x0001a3a9
    3e48:	3b9aca00 	.word	0x3b9aca00
    3e4c:	0002cb50 	.word	0x0002cb50

00003e50 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    3e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e54:	b08f      	sub	sp, #60	; 0x3c
    3e56:	461e      	mov	r6, r3
    3e58:	9309      	str	r3, [sp, #36]	; 0x24
    3e5a:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    3e5c:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3e5e:	1d0a      	adds	r2, r1, #4
    3e60:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3f68 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    3e64:	f8df b104 	ldr.w	fp, [pc, #260]	; 3f6c <ull_sched_after_mstr_slot_get+0x11c>
    3e68:	f8df a104 	ldr.w	sl, [pc, #260]	; 3f70 <ull_sched_after_mstr_slot_get+0x120>
    3e6c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 3f74 <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3e70:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3e72:	2100      	movs	r1, #0
    3e74:	6031      	str	r1, [r6, #0]
{
    3e76:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    3e78:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    3e7c:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3e7e:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    3e80:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3e82:	9106      	str	r1, [sp, #24]
    3e84:	af0d      	add	r7, sp, #52	; 0x34
    3e86:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3e88:	2302      	movs	r3, #2
    3e8a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3e8c:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3e90:	9600      	str	r6, [sp, #0]
    3e92:	462b      	mov	r3, r5
    3e94:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3e98:	4621      	mov	r1, r4
    3e9a:	2000      	movs	r0, #0
    3e9c:	f00f fd42 	bl	13924 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3ea0:	2802      	cmp	r0, #2
    3ea2:	d02d      	beq.n	3f00 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d130      	bne.n	3f0c <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    3eaa:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3eae:	2bff      	cmp	r3, #255	; 0xff
    3eb0:	d03c      	beq.n	3f2c <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    3eb2:	2b05      	cmp	r3, #5
    3eb4:	d1e8      	bne.n	3e88 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3eb6:	2000      	movs	r0, #0
    3eb8:	f013 fef2 	bl	17ca0 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3ebc:	2800      	cmp	r0, #0
    3ebe:	d0e3      	beq.n	3e88 <ull_sched_after_mstr_slot_get+0x38>
    3ec0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	dbdf      	blt.n	3e88 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    3ec8:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    3eca:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3ece:	29ff      	cmp	r1, #255	; 0xff
    3ed0:	d00c      	beq.n	3eec <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3ed2:	9906      	ldr	r1, [sp, #24]
    3ed4:	9207      	str	r2, [sp, #28]
    3ed6:	4618      	mov	r0, r3
    3ed8:	9304      	str	r3, [sp, #16]
    3eda:	f00f fd83 	bl	139e4 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3ede:	9b05      	ldr	r3, [sp, #20]
    3ee0:	9a08      	ldr	r2, [sp, #32]
    3ee2:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    3ee4:	4288      	cmp	r0, r1
    3ee6:	9b04      	ldr	r3, [sp, #16]
    3ee8:	9a07      	ldr	r2, [sp, #28]
    3eea:	d822      	bhi.n	3f32 <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    3eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3ef0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3ef4:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3ef6:	e7c7      	b.n	3e88 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3ef8:	4621      	mov	r1, r4
    3efa:	2000      	movs	r0, #0
    3efc:	f00f fd58 	bl	139b0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f02:	2b02      	cmp	r3, #2
    3f04:	d0f8      	beq.n	3ef8 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d0ce      	beq.n	3eaa <ull_sched_after_mstr_slot_get+0x5a>
    3f0c:	2373      	movs	r3, #115	; 0x73
    3f0e:	465a      	mov	r2, fp
    3f10:	4651      	mov	r1, sl
    3f12:	4648      	mov	r0, r9
    3f14:	f021 fdf6 	bl	25b04 <printk>
    3f18:	4040      	eors	r0, r0
    3f1a:	f380 8811 	msr	BASEPRI, r0
    3f1e:	f04f 0003 	mov.w	r0, #3
    3f22:	df02      	svc	2
		if (ticker_id == 0xff) {
    3f24:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3f28:	2bff      	cmp	r3, #255	; 0xff
    3f2a:	d1c2      	bne.n	3eb2 <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    3f2c:	9b04      	ldr	r3, [sp, #16]
    3f2e:	2bff      	cmp	r3, #255	; 0xff
    3f30:	d010      	beq.n	3f54 <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3f32:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3f36:	4810      	ldr	r0, [pc, #64]	; (3f78 <ull_sched_after_mstr_slot_get+0x128>)
    3f38:	4413      	add	r3, r2
    3f3a:	fba3 0100 	umull	r0, r1, r3, r0
    3f3e:	2207      	movs	r2, #7
    3f40:	fb02 1103 	mla	r1, r2, r3, r1
    3f44:	a306      	add	r3, pc, #24	; (adr r3, 3f60 <ull_sched_after_mstr_slot_get+0x110>)
    3f46:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f4a:	f7fd fae5 	bl	1518 <__aeabi_uldivmod>
    3f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3f50:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3f52:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    3f54:	b00f      	add	sp, #60	; 0x3c
    3f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f5a:	bf00      	nop
    3f5c:	f3af 8000 	nop.w
    3f60:	3b9aca00 	.word	0x3b9aca00
    3f64:	00000000 	.word	0x00000000
    3f68:	0001a745 	.word	0x0001a745
    3f6c:	0002d224 	.word	0x0002d224
    3f70:	0002d268 	.word	0x0002d268
    3f74:	0002c8dc 	.word	0x0002c8dc
    3f78:	1afd498d 	.word	0x1afd498d
    3f7c:	00000000 	.word	0x00000000

00003f80 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3f80:	b570      	push	{r4, r5, r6, lr}
    3f82:	b082      	sub	sp, #8
    3f84:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    3f86:	9201      	str	r2, [sp, #4]
{
    3f88:	4615      	mov	r5, r2
    3f8a:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3f8c:	aa01      	add	r2, sp, #4
    3f8e:	2002      	movs	r0, #2
    3f90:	f7ff ff5e 	bl	3e50 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3f94:	6823      	ldr	r3, [r4, #0]
    3f96:	b30b      	cbz	r3, 3fdc <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3f98:	9801      	ldr	r0, [sp, #4]
    3f9a:	1b43      	subs	r3, r0, r5
    3f9c:	021b      	lsls	r3, r3, #8
    3f9e:	d41f      	bmi.n	3fe0 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3fa0:	4629      	mov	r1, r5
    3fa2:	f00f fd1f 	bl	139e4 <ticker_ticks_diff_get>
    3fa6:	4a1a      	ldr	r2, [pc, #104]	; (4010 <after_mstr_offset_get+0x90>)
    3fa8:	4603      	mov	r3, r0
    3faa:	2107      	movs	r1, #7
    3fac:	fba0 0202 	umull	r0, r2, r0, r2
    3fb0:	fb01 2103 	mla	r1, r1, r3, r2
    3fb4:	a314      	add	r3, pc, #80	; (adr r3, 4008 <after_mstr_offset_get+0x88>)
    3fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fba:	f7fd faad 	bl	1518 <__aeabi_uldivmod>
    3fbe:	6822      	ldr	r2, [r4, #0]
    3fc0:	4402      	add	r2, r0
    3fc2:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3fc4:	2a00      	cmp	r2, #0
    3fc6:	db09      	blt.n	3fdc <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    3fc8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3fcc:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3fd0:	4290      	cmp	r0, r2
    3fd2:	d203      	bcs.n	3fdc <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    3fd4:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    3fd6:	4282      	cmp	r2, r0
    3fd8:	d8fc      	bhi.n	3fd4 <after_mstr_offset_get+0x54>
    3fda:	6022      	str	r2, [r4, #0]
		}
	}
}
    3fdc:	b002      	add	sp, #8
    3fde:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3fe0:	4601      	mov	r1, r0
    3fe2:	4628      	mov	r0, r5
    3fe4:	f00f fcfe 	bl	139e4 <ticker_ticks_diff_get>
    3fe8:	4a09      	ldr	r2, [pc, #36]	; (4010 <after_mstr_offset_get+0x90>)
    3fea:	4603      	mov	r3, r0
    3fec:	2107      	movs	r1, #7
    3fee:	fba0 0202 	umull	r0, r2, r0, r2
    3ff2:	fb01 2103 	mla	r1, r1, r3, r2
    3ff6:	a304      	add	r3, pc, #16	; (adr r3, 4008 <after_mstr_offset_get+0x88>)
    3ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ffc:	f7fd fa8c 	bl	1518 <__aeabi_uldivmod>
    4000:	6822      	ldr	r2, [r4, #0]
    4002:	1a12      	subs	r2, r2, r0
    4004:	6022      	str	r2, [r4, #0]
    4006:	e7dd      	b.n	3fc4 <after_mstr_offset_get+0x44>
    4008:	3b9aca00 	.word	0x3b9aca00
    400c:	00000000 	.word	0x00000000
    4010:	1afd498d 	.word	0x1afd498d
    4014:	00000000 	.word	0x00000000

00004018 <ull_sched_mfy_win_offset_select>:
{
    4018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    401c:	f8b0 116c 	ldrh.w	r1, [r0, #364]	; 0x16c
{
    4020:	b088      	sub	sp, #32
    4022:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    4024:	f240 43e2 	movw	r3, #1250	; 0x4e2
    4028:	4847      	ldr	r0, [pc, #284]	; (4148 <ull_sched_mfy_win_offset_select+0x130>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    402a:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    402c:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    4030:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    4032:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    4034:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    4038:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    403c:	fba1 0100 	umull	r0, r1, r1, r0
    4040:	a33f      	add	r3, pc, #252	; (adr r3, 4140 <ull_sched_mfy_win_offset_select+0x128>)
    4042:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    4046:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    4048:	f7fd fa66 	bl	1518 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    404c:	f10d 030f 	add.w	r3, sp, #15
    4050:	9501      	str	r5, [sp, #4]
    4052:	9300      	str	r3, [sp, #0]
    4054:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    4058:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    405a:	aa04      	add	r2, sp, #16
    405c:	4620      	mov	r0, r4
    405e:	2101      	movs	r1, #1
    4060:	f016 fb72 	bl	1a748 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    4064:	f89d 800f 	ldrb.w	r8, [sp, #15]
    4068:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    406c:	fa5f fc8c 	uxtb.w	ip, ip
    4070:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    4074:	4630      	mov	r0, r6
    4076:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
    407a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    407e:	f504 76bc 	add.w	r6, r4, #376	; 0x178
			if (win_offset_s != 0xffff) {
    4082:	f64f 7eff 	movw	lr, #65535	; 0xffff
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    4086:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    4088:	f1b8 0f00 	cmp.w	r8, #0
    408c:	d00a      	beq.n	40a4 <ull_sched_mfy_win_offset_select+0x8c>
    408e:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    4090:	4572      	cmp	r2, lr
    4092:	d004      	beq.n	409e <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    4094:	8819      	ldrh	r1, [r3, #0]
    4096:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    4098:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    409c:	d01d      	beq.n	40da <ull_sched_mfy_win_offset_select+0xc2>
		while (offset_index_m < offset_m_max) {
    409e:	3302      	adds	r3, #2
    40a0:	459c      	cmp	ip, r3
    40a2:	d1f5      	bne.n	4090 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    40a4:	3702      	adds	r7, #2
    40a6:	42be      	cmp	r6, r7
    40a8:	d1ed      	bne.n	4086 <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    40aa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	} else if (!has_offset_s) {
    40ae:	bb48      	cbnz	r0, 4104 <ull_sched_mfy_win_offset_select+0xec>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    40b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    40b4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    40b8:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    40bc:	0a10      	lsrs	r0, r2, #8
    40be:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
	dst[0] = val;
    40c2:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    40c4:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    40c6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    40ca:	2204      	movs	r2, #4
    40cc:	f362 0302 	bfi	r3, r2, #0, #3
    40d0:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    40d4:	b008      	add	sp, #32
    40d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    40da:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    40de:	f240 43e2 	movw	r3, #1250	; 0x4e2
    40e2:	fb02 f303 	mul.w	r3, r2, r3
    40e6:	0a10      	lsrs	r0, r2, #8
    40e8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	dst[0] = val;
    40ec:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    40ee:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    40f0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    40f4:	2204      	movs	r2, #4
    40f6:	f362 0302 	bfi	r3, r2, #0, #3
    40fa:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    40fe:	b008      	add	sp, #32
    4100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    4104:	2203      	movs	r2, #3
    4106:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    410a:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    410e:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    4112:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4114:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    4118:	2011      	movs	r0, #17
    411a:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    411e:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    4122:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    4126:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    4128:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    412a:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    412e:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    4130:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
}
    4134:	b008      	add	sp, #32
    4136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    413a:	bf00      	nop
    413c:	f3af 8000 	nop.w
    4140:	1afd498d 	.word	0x1afd498d
    4144:	00000007 	.word	0x00000007
    4148:	3b9aca00 	.word	0x3b9aca00
    414c:	00000000 	.word	0x00000000

00004150 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    4150:	b538      	push	{r3, r4, r5, lr}
    4152:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    4154:	f019 f936 	bl	1d3c4 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    4158:	7da2      	ldrb	r2, [r4, #22]
    415a:	f3c2 0341 	ubfx	r3, r2, #1, #2
    415e:	3301      	adds	r3, #1
    4160:	f003 0303 	and.w	r3, r3, #3
    4164:	2b03      	cmp	r3, #3
    4166:	d034      	beq.n	41d2 <isr_window+0x82>
    4168:	f363 0242 	bfi	r2, r3, #1, #2
    416c:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    416e:	f103 0025 	add.w	r0, r3, #37	; 0x25
    4172:	f018 f9bb 	bl	1c4ec <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    4176:	6863      	ldr	r3, [r4, #4]
    4178:	b30b      	cbz	r3, 41be <isr_window+0x6e>
    417a:	6923      	ldr	r3, [r4, #16]
    417c:	b1fb      	cbz	r3, 41be <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    417e:	f01a fca7 	bl	1ead0 <radio_tmr_start_get>
    4182:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    4184:	f00f fc2c 	bl	139e0 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    4188:	1cc1      	adds	r1, r0, #3
    418a:	2000      	movs	r0, #0
    418c:	f01a fc6e 	bl	1ea6c <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    4190:	f01a fcd0 	bl	1eb34 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    4194:	f01a fc9c 	bl	1ead0 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    4198:	4629      	mov	r1, r5
    419a:	f00f fc23 	bl	139e4 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    419e:	4912      	ldr	r1, [pc, #72]	; (41e8 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    41a0:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    41a2:	2207      	movs	r2, #7
    41a4:	fba0 0101 	umull	r0, r1, r0, r1
    41a8:	fb02 1103 	mla	r1, r2, r3, r1
    41ac:	a30c      	add	r3, pc, #48	; (adr r3, 41e0 <isr_window+0x90>)
    41ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    41b2:	f7fd f9b1 	bl	1518 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    41b6:	6923      	ldr	r3, [r4, #16]
    41b8:	1a1b      	subs	r3, r3, r0
    41ba:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    41bc:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    41be:	f00f fc0f 	bl	139e0 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    41c2:	1cc1      	adds	r1, r0, #3
    41c4:	2000      	movs	r0, #0
    41c6:	f01a fc51 	bl	1ea6c <radio_tmr_start_tick>
}
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    41ce:	f01a bcb1 	b.w	1eb34 <radio_tmr_end_capture>
		lll->chan = 0U;
    41d2:	f36f 0242 	bfc	r2, #1, #2
    41d6:	75a2      	strb	r2, [r4, #22]
    41d8:	2025      	movs	r0, #37	; 0x25
    41da:	e7ca      	b.n	4172 <isr_window+0x22>
    41dc:	f3af 8000 	nop.w
    41e0:	3b9aca00 	.word	0x3b9aca00
    41e4:	00000000 	.word	0x00000000
    41e8:	1afd498d 	.word	0x1afd498d
    41ec:	00000000 	.word	0x00000000

000041f0 <isr_rx>:
{
    41f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41f4:	b087      	sub	sp, #28
    41f6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    41f8:	f01a fa4c 	bl	1e694 <radio_is_done>
	if (trx_done) {
    41fc:	b2c0      	uxtb	r0, r0
    41fe:	b950      	cbnz	r0, 4216 <isr_rx+0x26>
	lll_isr_status_reset();
    4200:	f018 f9ca 	bl	1c598 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    4204:	48b4      	ldr	r0, [pc, #720]	; (44d8 <isr_rx+0x2e8>)
    4206:	4621      	mov	r1, r4
    4208:	f01a f920 	bl	1e44c <radio_isr_set>
}
    420c:	b007      	add	sp, #28
    420e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    4212:	f01a ba15 	b.w	1e640 <radio_disable>
		crc_ok = radio_crc_is_valid();
    4216:	f01a fa5d 	bl	1e6d4 <radio_crc_is_valid>
    421a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    421c:	f01a fb78 	bl	1e910 <radio_filter_has_match>
    4220:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    4222:	f01a fb7f 	bl	1e924 <radio_filter_match_get>
    4226:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    4228:	f01a fd7a 	bl	1ed20 <radio_ar_has_match>
    422c:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    422e:	f01a fd5b 	bl	1ece8 <radio_ar_match_get>
    4232:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    4234:	f01a fb30 	bl	1e898 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    4238:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    423a:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    423c:	f01a fb12 	bl	1e864 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    4240:	f018 f9aa 	bl	1c598 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    4244:	2d00      	cmp	r5, #0
    4246:	d0dd      	beq.n	4204 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    4248:	2001      	movs	r0, #1
    424a:	f012 f8d7 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    424e:	4605      	mov	r5, r0
    4250:	2800      	cmp	r0, #0
    4252:	f000 817d 	beq.w	4550 <isr_rx+0x360>
	rl_idx = devmatch_ok ?
    4256:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    425a:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    425c:	f040 816f 	bne.w	453e <isr_rx+0x34e>
    4260:	2e00      	cmp	r6, #0
    4262:	f040 80cc 	bne.w	43fe <isr_rx+0x20e>
    4266:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    4268:	465a      	mov	r2, fp
    426a:	463b      	mov	r3, r7
    426c:	4631      	mov	r1, r6
    426e:	4620      	mov	r0, r4
    4270:	f019 fad6 	bl	1d820 <lll_scan_isr_rx_check>
	if (has_adva &&
    4274:	2800      	cmp	r0, #0
    4276:	d0c5      	beq.n	4204 <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    4278:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    427a:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
    427c:	2100      	movs	r1, #0
    427e:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
    4282:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    4286:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    428a:	2a00      	cmp	r2, #0
    428c:	f000 80d3 	beq.w	4436 <isr_rx+0x246>
    4290:	6862      	ldr	r2, [r4, #4]
    4292:	f892 2020 	ldrb.w	r2, [r2, #32]
    4296:	0790      	lsls	r0, r2, #30
    4298:	f100 80cd 	bmi.w	4436 <isr_rx+0x246>
    429c:	2907      	cmp	r1, #7
    429e:	d0b1      	beq.n	4204 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    42a0:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    42a2:	0712      	lsls	r2, r2, #28
    42a4:	f140 8162 	bpl.w	456c <isr_rx+0x37c>
    42a8:	2900      	cmp	r1, #0
    42aa:	f040 80ae 	bne.w	440a <isr_rx+0x21a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    42ae:	7f6b      	ldrb	r3, [r5, #29]
    42b0:	2b25      	cmp	r3, #37	; 0x25
    42b2:	f200 8122 	bhi.w	44fa <isr_rx+0x30a>
			rx = ull_pdu_rx_alloc_peek(4);
    42b6:	2004      	movs	r0, #4
    42b8:	f012 f8a0 	bl	163fc <ull_pdu_rx_alloc_peek>
		if (!rx) {
    42bc:	2800      	cmp	r0, #0
    42be:	d0a1      	beq.n	4204 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    42c0:	f01a fc40 	bl	1eb44 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    42c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    42c6:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    42c8:	b943      	cbnz	r3, 42dc <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    42ca:	8c23      	ldrh	r3, [r4, #32]
    42cc:	f240 2271 	movw	r2, #625	; 0x271
    42d0:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    42d4:	fbb0 f2f3 	udiv	r2, r0, r3
    42d8:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    42dc:	6823      	ldr	r3, [r4, #0]
    42de:	691a      	ldr	r2, [r3, #16]
    42e0:	4b7e      	ldr	r3, [pc, #504]	; (44dc <isr_rx+0x2ec>)
    42e2:	2107      	movs	r1, #7
    42e4:	fba2 0303 	umull	r0, r3, r2, r3
    42e8:	fb01 3102 	mla	r1, r1, r2, r3
    42ec:	a378      	add	r3, pc, #480	; (adr r3, 44d0 <isr_rx+0x2e0>)
    42ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    42f2:	f7fd f911 	bl	1518 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    42f6:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    42fa:	4543      	cmp	r3, r8
    42fc:	d382      	bcc.n	4204 <isr_rx+0x14>
		radio_switch_complete_and_disable();
    42fe:	f01a faa3 	bl	1e848 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4302:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    4304:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4306:	f017 fbcd 	bl	1baa4 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    430a:	7de3      	ldrb	r3, [r4, #23]
    430c:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    430e:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    4310:	f140 81cf 	bpl.w	46b2 <isr_rx+0x4c2>
    4314:	2800      	cmp	r0, #0
    4316:	f000 81cc 	beq.w	46b2 <isr_rx+0x4c2>
			init_addr = lrpa->val;
    431a:	4683      	mov	fp, r0
			init_tx_addr = 1;
    431c:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    4320:	f01a f9e6 	bl	1e6f0 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    4324:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4326:	aa05      	add	r2, sp, #20
    4328:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    432a:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    432e:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    4330:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4332:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4336:	9200      	str	r2, [sp, #0]
    4338:	4620      	mov	r0, r4
    433a:	2200      	movs	r2, #0
    433c:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    4340:	f019 fa88 	bl	1d854 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    4344:	4650      	mov	r0, sl
    4346:	f01a f95b 	bl	1e600 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    434a:	f01a f999 	bl	1e680 <radio_is_ready>
    434e:	2800      	cmp	r0, #0
    4350:	f040 81c5 	bne.w	46de <isr_rx+0x4ee>
		radio_isr_set(isr_done_cleanup, lll);
    4354:	4862      	ldr	r0, [pc, #392]	; (44e0 <isr_rx+0x2f0>)
    4356:	4621      	mov	r1, r4
    4358:	f01a f878 	bl	1e44c <radio_isr_set>
		lll->conn->central.initiated = 1U;
    435c:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    435e:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    4360:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    4364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    4368:	f042 0201 	orr.w	r2, r2, #1
    436c:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    4370:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    4372:	f012 f861 	bl	16438 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4376:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
    4378:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    437a:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    437c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4380:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    4382:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    4384:	4651      	mov	r1, sl
    4386:	2224      	movs	r2, #36	; 0x24
    4388:	301c      	adds	r0, #28
    438a:	f024 fa11 	bl	287b0 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    438e:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
    4392:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4396:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    439a:	f365 1345 	bfi	r3, r5, #5, #1
    439e:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    43a2:	f01a fb95 	bl	1ead0 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    43a6:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    43a8:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    43ac:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    43ae:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    43b0:	f01a f934 	bl	1e61c <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    43b4:	2e00      	cmp	r6, #0
    43b6:	bf08      	it	eq
    43b8:	27ff      	moveq	r7, #255	; 0xff
    43ba:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    43be:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    43c0:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    43c2:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    43c6:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    43ca:	d003      	beq.n	43d4 <isr_rx+0x1e4>
    43cc:	f1b9 0300 	subs.w	r3, r9, #0
    43d0:	bf18      	it	ne
    43d2:	2301      	movne	r3, #1
    43d4:	f898 201a 	ldrb.w	r2, [r8, #26]
    43d8:	f363 0200 	bfi	r2, r3, #0, #1
    43dc:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
    43e0:	f012 f82a 	bl	16438 <ull_pdu_rx_alloc>
    43e4:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    43e6:	4641      	mov	r1, r8
    43e8:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
    43ec:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
    43f0:	f012 f838 	bl	16464 <ull_rx_put>
		ull_rx_sched();
    43f4:	f012 f846 	bl	16484 <ull_rx_sched>
}
    43f8:	b007      	add	sp, #28
    43fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    43fe:	fa5f f08a 	uxtb.w	r0, sl
    4402:	f017 fbdd 	bl	1bbc0 <ull_filter_lll_rl_irk_idx>
    4406:	4607      	mov	r7, r0
    4408:	e72e      	b.n	4268 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    440a:	2901      	cmp	r1, #1
    440c:	d115      	bne.n	443a <isr_rx+0x24a>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    440e:	7f6b      	ldrb	r3, [r5, #29]
    4410:	2b0c      	cmp	r3, #12
    4412:	f47f aef7 	bne.w	4204 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    4416:	7f2a      	ldrb	r2, [r5, #28]
    4418:	9700      	str	r7, [sp, #0]
    441a:	2300      	movs	r3, #0
    441c:	9301      	str	r3, [sp, #4]
    441e:	09d2      	lsrs	r2, r2, #7
    4420:	f105 0324 	add.w	r3, r5, #36	; 0x24
    4424:	4620      	mov	r0, r4
    4426:	f019 f94d 	bl	1d6c4 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    442a:	2800      	cmp	r0, #0
    442c:	f47f af43 	bne.w	42b6 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4430:	7f29      	ldrb	r1, [r5, #28]
    4432:	f001 010f 	and.w	r1, r1, #15
    4436:	2900      	cmp	r1, #0
    4438:	d054      	beq.n	44e4 <isr_rx+0x2f4>
    443a:	2906      	cmp	r1, #6
    443c:	d052      	beq.n	44e4 <isr_rx+0x2f4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    443e:	2902      	cmp	r1, #2
    4440:	f000 80a7 	beq.w	4592 <isr_rx+0x3a2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4444:	2901      	cmp	r1, #1
    4446:	d158      	bne.n	44fa <isr_rx+0x30a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4448:	7f6b      	ldrb	r3, [r5, #29]
    444a:	2b0c      	cmp	r3, #12
    444c:	f47f aeda 	bne.w	4204 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    4450:	7f2a      	ldrb	r2, [r5, #28]
    4452:	9700      	str	r7, [sp, #0]
    4454:	f10d 0313 	add.w	r3, sp, #19
    4458:	9301      	str	r3, [sp, #4]
    445a:	09d2      	lsrs	r2, r2, #7
    445c:	f105 0324 	add.w	r3, r5, #36	; 0x24
    4460:	2100      	movs	r1, #0
    4462:	4620      	mov	r0, r4
    4464:	f019 f92e 	bl	1d6c4 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    4468:	2800      	cmp	r0, #0
    446a:	d046      	beq.n	44fa <isr_rx+0x30a>
		 (pdu_adv_rx->len != 0) &&
    446c:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    446e:	2b00      	cmp	r3, #0
    4470:	f43f aec8 	beq.w	4204 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    4474:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    4476:	b12b      	cbz	r3, 4484 <isr_rx+0x294>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    4478:	7f2b      	ldrb	r3, [r5, #28]
    447a:	f003 030f 	and.w	r3, r3, #15
    447e:	2b07      	cmp	r3, #7
    4480:	f47f aec0 	bne.w	4204 <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    4484:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    4486:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    448a:	f011 ffb7 	bl	163fc <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    448e:	4605      	mov	r5, r0
    4490:	2800      	cmp	r0, #0
    4492:	f43f aeb7 	beq.w	4204 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    4496:	f011 ffcf 	bl	16438 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    449a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    449e:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    44a0:	2305      	movs	r3, #5
    44a2:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    44a4:	f1b8 0f00 	cmp.w	r8, #0
    44a8:	d16f      	bne.n	458a <isr_rx+0x39a>
    44aa:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    44ac:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    44ae:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    44b0:	2e00      	cmp	r6, #0
    44b2:	bf08      	it	eq
    44b4:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    44b6:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    44ba:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    44bc:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    44be:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    44c0:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    44c2:	f011 ffcf 	bl	16464 <ull_rx_put>
	ull_rx_sched();
    44c6:	f011 ffdd 	bl	16484 <ull_rx_sched>
	if (!err) {
    44ca:	e69b      	b.n	4204 <isr_rx+0x14>
    44cc:	f3af 8000 	nop.w
    44d0:	3b9aca00 	.word	0x3b9aca00
    44d4:	00000000 	.word	0x00000000
    44d8:	0001d47d 	.word	0x0001d47d
    44dc:	1afd498d 	.word	0x1afd498d
    44e0:	0001d675 	.word	0x0001d675
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    44e4:	7f6b      	ldrb	r3, [r5, #29]
    44e6:	2b25      	cmp	r3, #37	; 0x25
    44e8:	d807      	bhi.n	44fa <isr_rx+0x30a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    44ea:	7da2      	ldrb	r2, [r4, #22]
    44ec:	0692      	lsls	r2, r2, #26
    44ee:	d502      	bpl.n	44f6 <isr_rx+0x306>
		   !lll->conn) {
    44f0:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    44f2:	2a00      	cmp	r2, #0
    44f4:	d04f      	beq.n	4596 <isr_rx+0x3a6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    44f6:	2b25      	cmp	r3, #37	; 0x25
    44f8:	d9b9      	bls.n	446e <isr_rx+0x27e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    44fa:	7f2b      	ldrb	r3, [r5, #28]
    44fc:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    4500:	2b04      	cmp	r3, #4
    4502:	f47f ae7f 	bne.w	4204 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    4506:	7f6b      	ldrb	r3, [r5, #29]
    4508:	2b25      	cmp	r3, #37	; 0x25
    450a:	f63f ae7b 	bhi.w	4204 <isr_rx+0x14>
		   (lll->state != 0U) &&
    450e:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    4510:	07d9      	lsls	r1, r3, #31
    4512:	f57f ae77 	bpl.w	4204 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    4516:	f01a f8eb 	bl	1e6f0 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    451a:	7f2b      	ldrb	r3, [r5, #28]
    451c:	7802      	ldrb	r2, [r0, #0]
    451e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4522:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4526:	f47f ae6d 	bne.w	4204 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    452a:	3008      	adds	r0, #8
    452c:	2206      	movs	r2, #6
    452e:	f105 011e 	add.w	r1, r5, #30
    4532:	f024 f914 	bl	2875e <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4536:	2800      	cmp	r0, #0
    4538:	f47f ae64 	bne.w	4204 <isr_rx+0x14>
    453c:	e796      	b.n	446c <isr_rx+0x27c>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    453e:	7da0      	ldrb	r0, [r4, #22]
    4540:	fa5f f189 	uxtb.w	r1, r9
    4544:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4548:	f017 fad0 	bl	1baec <ull_filter_lll_rl_idx>
    454c:	4607      	mov	r7, r0
    454e:	e68b      	b.n	4268 <isr_rx+0x78>
	LL_ASSERT(node_rx);
    4550:	4a71      	ldr	r2, [pc, #452]	; (4718 <isr_rx+0x528>)
    4552:	4972      	ldr	r1, [pc, #456]	; (471c <isr_rx+0x52c>)
    4554:	4872      	ldr	r0, [pc, #456]	; (4720 <isr_rx+0x530>)
    4556:	f240 23c3 	movw	r3, #707	; 0x2c3
    455a:	f021 fad3 	bl	25b04 <printk>
    455e:	4040      	eors	r0, r0
    4560:	f380 8811 	msr	BASEPRI, r0
    4564:	f04f 0003 	mov.w	r0, #3
    4568:	df02      	svc	2
    456a:	e674      	b.n	4256 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    456c:	2fff      	cmp	r7, #255	; 0xff
    456e:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    4572:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    4576:	d078      	beq.n	466a <isr_rx+0x47a>
		return (rl_idx == lll->rl_idx);
    4578:	7e23      	ldrb	r3, [r4, #24]
    457a:	1bdb      	subs	r3, r3, r7
    457c:	fab3 f383 	clz	r3, r3
    4580:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    4582:	2b00      	cmp	r3, #0
    4584:	f47f ae90 	bne.w	42a8 <isr_rx+0xb8>
    4588:	e755      	b.n	4436 <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    458a:	f01a f977 	bl	1e87c <radio_rssi_get>
    458e:	b2c0      	uxtb	r0, r0
    4590:	e78c      	b.n	44ac <isr_rx+0x2bc>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4592:	7f6b      	ldrb	r3, [r5, #29]
    4594:	e7af      	b.n	44f6 <isr_rx+0x306>
		radio_tmr_tifs_set(EVENT_IFS_US);
    4596:	2096      	movs	r0, #150	; 0x96
    4598:	f01a f9da 	bl	1e950 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    459c:	2000      	movs	r0, #0
    459e:	f01a f8ab 	bl	1e6f8 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    45a2:	2003      	movs	r0, #3
    45a4:	f011 ff2a 	bl	163fc <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    45a8:	4681      	mov	r9, r0
    45aa:	2800      	cmp	r0, #0
    45ac:	f43f ae2a 	beq.w	4204 <isr_rx+0x14>
	ull_pdu_rx_alloc();
    45b0:	f011 ff42 	bl	16438 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    45b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    45b8:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    45bc:	2305      	movs	r3, #5
    45be:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    45c2:	f1b8 0f00 	cmp.w	r8, #0
    45c6:	d170      	bne.n	46aa <isr_rx+0x4ba>
    45c8:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    45ca:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    45cc:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    45d0:	bf14      	ite	ne
    45d2:	463b      	movne	r3, r7
    45d4:	23ff      	moveq	r3, #255	; 0xff
    45d6:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    45da:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    45de:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    45e2:	f36f 0341 	bfc	r3, #1, #1
    45e6:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    45ea:	4649      	mov	r1, r9
    45ec:	f011 ff3a 	bl	16464 <ull_rx_put>
	ull_rx_sched();
    45f0:	f011 ff48 	bl	16484 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    45f4:	f01a f87c 	bl	1e6f0 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    45f8:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    45fa:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    45fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4600:	7832      	ldrb	r2, [r6, #0]
    4602:	01db      	lsls	r3, r3, #7
    4604:	f002 0270 	and.w	r2, r2, #112	; 0x70
    4608:	f043 0303 	orr.w	r3, r3, #3
    460c:	4313      	orrs	r3, r2
    460e:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4610:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4612:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4614:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4616:	f017 fa45 	bl	1baa4 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    461a:	7de3      	ldrb	r3, [r4, #23]
    461c:	079f      	lsls	r7, r3, #30
    461e:	d54f      	bpl.n	46c0 <isr_rx+0x4d0>
    4620:	2800      	cmp	r0, #0
    4622:	d04d      	beq.n	46c0 <isr_rx+0x4d0>
			pdu_tx->tx_addr = 1;
    4624:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4626:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
    4628:	4630      	mov	r0, r6
    462a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    462e:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4632:	2206      	movs	r2, #6
    4634:	f024 f8bc 	bl	287b0 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    4638:	2206      	movs	r2, #6
    463a:	f105 011e 	add.w	r1, r5, #30
    463e:	f106 0008 	add.w	r0, r6, #8
    4642:	f024 f8b5 	bl	287b0 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    4646:	4630      	mov	r0, r6
    4648:	f019 ffda 	bl	1e600 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    464c:	f01a f818 	bl	1e680 <radio_is_ready>
    4650:	2800      	cmp	r0, #0
    4652:	d152      	bne.n	46fa <isr_rx+0x50a>
		radio_tmr_end_capture();
    4654:	f01a fa6e 	bl	1eb34 <radio_tmr_end_capture>
		lll->state = 1U;
    4658:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    465a:	4832      	ldr	r0, [pc, #200]	; (4724 <isr_rx+0x534>)
		lll->state = 1U;
    465c:	f043 0301 	orr.w	r3, r3, #1
    4660:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    4662:	4621      	mov	r1, r4
    4664:	f019 fef2 	bl	1e44c <radio_isr_set>
	if (!err) {
    4668:	e6c6      	b.n	43f8 <isr_rx+0x208>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    466a:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    466e:	aa05      	add	r2, sp, #20
    4670:	4651      	mov	r1, sl
    4672:	4648      	mov	r0, r9
    4674:	f017 fb5a 	bl	1bd2c <ull_filter_lll_rl_addr_allowed>
    4678:	2800      	cmp	r0, #0
    467a:	f43f aed9 	beq.w	4430 <isr_rx+0x240>
	return ((lll->adv_addr_type == addr_type) &&
    467e:	7de3      	ldrb	r3, [r4, #23]
    4680:	f003 0301 	and.w	r3, r3, #1
    4684:	454b      	cmp	r3, r9
    4686:	f47f aed3 	bne.w	4430 <isr_rx+0x240>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    468a:	4651      	mov	r1, sl
    468c:	2206      	movs	r2, #6
    468e:	f104 0008 	add.w	r0, r4, #8
    4692:	f024 f864 	bl	2875e <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4696:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    4698:	fab0 f380 	clz	r3, r0
    469c:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    469e:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    46a2:	2b00      	cmp	r3, #0
    46a4:	f47f ae00 	bne.w	42a8 <isr_rx+0xb8>
    46a8:	e6c5      	b.n	4436 <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    46aa:	f01a f8e7 	bl	1e87c <radio_rssi_get>
    46ae:	b2c3      	uxtb	r3, r0
    46b0:	e78b      	b.n	45ca <isr_rx+0x3da>
			init_tx_addr = lll->init_addr_type;
    46b2:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
    46b6:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    46ba:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
    46be:	e62f      	b.n	4320 <isr_rx+0x130>
			pdu_tx->tx_addr = lll->init_addr_type;
    46c0:	7da3      	ldrb	r3, [r4, #22]
    46c2:	7832      	ldrb	r2, [r6, #0]
    46c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    46c8:	4630      	mov	r0, r6
    46ca:	f363 1286 	bfi	r2, r3, #6, #1
    46ce:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    46d2:	f104 0119 	add.w	r1, r4, #25
    46d6:	2206      	movs	r2, #6
    46d8:	f024 f86a 	bl	287b0 <memcpy>
    46dc:	e7ac      	b.n	4638 <isr_rx+0x448>
		LL_ASSERT(!radio_is_ready());
    46de:	4a0e      	ldr	r2, [pc, #56]	; (4718 <isr_rx+0x528>)
    46e0:	4911      	ldr	r1, [pc, #68]	; (4728 <isr_rx+0x538>)
    46e2:	480f      	ldr	r0, [pc, #60]	; (4720 <isr_rx+0x530>)
    46e4:	f240 4391 	movw	r3, #1169	; 0x491
    46e8:	f021 fa0c 	bl	25b04 <printk>
    46ec:	4040      	eors	r0, r0
    46ee:	f380 8811 	msr	BASEPRI, r0
    46f2:	f04f 0003 	mov.w	r0, #3
    46f6:	df02      	svc	2
    46f8:	e62c      	b.n	4354 <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    46fa:	4a07      	ldr	r2, [pc, #28]	; (4718 <isr_rx+0x528>)
    46fc:	490a      	ldr	r1, [pc, #40]	; (4728 <isr_rx+0x538>)
    46fe:	4808      	ldr	r0, [pc, #32]	; (4720 <isr_rx+0x530>)
    4700:	f240 5316 	movw	r3, #1302	; 0x516
    4704:	f021 f9fe 	bl	25b04 <printk>
    4708:	4040      	eors	r0, r0
    470a:	f380 8811 	msr	BASEPRI, r0
    470e:	f04f 0003 	mov.w	r0, #3
    4712:	df02      	svc	2
    4714:	e79e      	b.n	4654 <isr_rx+0x464>
    4716:	bf00      	nop
    4718:	0002d6dc 	.word	0x0002d6dc
    471c:	0002d688 	.word	0x0002d688
    4720:	0002c8dc 	.word	0x0002c8dc
    4724:	0001d491 	.word	0x0001d491
    4728:	0002d690 	.word	0x0002d690

0000472c <cli_entry>:
* function that handles cli task
* @param arg1 - thread param
*@param arg2 - thread param
*@param arg3 - thread param
**/
void cli_entry(void *arg1, void *arg2, void *arg3) {
    472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cli_init();
    472e:	f001 f867 	bl	5800 <cli_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4732:	4d3f      	ldr	r5, [pc, #252]	; (4830 <cli_entry+0x104>)
        // see if avertsing has been completed and cli task can commmence
         if (k_sem_take(&cli_sem, K_SECONDS(10)) != 0) {
            return;
        }
        //check if sensors have been requested or values need to be sent
        tempRequest = (tempCli == true) ? true : tempRequest;
    4734:	4c3f      	ldr	r4, [pc, #252]	; (4834 <cli_entry+0x108>)
    4736:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    473a:	2300      	movs	r3, #0
    473c:	4628      	mov	r0, r5
    473e:	f020 f94b 	bl	249d8 <z_impl_k_sem_take>
         if (k_sem_take(&cli_sem, K_SECONDS(10)) != 0) {
    4742:	2800      	cmp	r0, #0
    4744:	d173      	bne.n	482e <cli_entry+0x102>
        tempRequest = (tempCli == true) ? true : tempRequest;
    4746:	7823      	ldrb	r3, [r4, #0]
    4748:	4a3b      	ldr	r2, [pc, #236]	; (4838 <cli_entry+0x10c>)
    474a:	b903      	cbnz	r3, 474e <cli_entry+0x22>
    474c:	7813      	ldrb	r3, [r2, #0]
    474e:	7013      	strb	r3, [r2, #0]
        tempCli = false;
        vocRequest = (vocCli == true)  ? true : vocRequest;
    4750:	4a3a      	ldr	r2, [pc, #232]	; (483c <cli_entry+0x110>)
    4752:	493b      	ldr	r1, [pc, #236]	; (4840 <cli_entry+0x114>)
        tempCli = false;
    4754:	2300      	movs	r3, #0
    4756:	7023      	strb	r3, [r4, #0]
        vocRequest = (vocCli == true)  ? true : vocRequest;
    4758:	7813      	ldrb	r3, [r2, #0]
    475a:	b903      	cbnz	r3, 475e <cli_entry+0x32>
    475c:	780b      	ldrb	r3, [r1, #0]
    475e:	700b      	strb	r3, [r1, #0]
        vocCli = false;
    4760:	2300      	movs	r3, #0
    4762:	7013      	strb	r3, [r2, #0]
        humRequest = (humCli == true) ? true : humRequest;
    4764:	4a37      	ldr	r2, [pc, #220]	; (4844 <cli_entry+0x118>)
    4766:	4938      	ldr	r1, [pc, #224]	; (4848 <cli_entry+0x11c>)
    4768:	7813      	ldrb	r3, [r2, #0]
    476a:	b903      	cbnz	r3, 476e <cli_entry+0x42>
    476c:	780b      	ldrb	r3, [r1, #0]
    476e:	700b      	strb	r3, [r1, #0]
        humCli = false;
    4770:	2300      	movs	r3, #0
    4772:	7013      	strb	r3, [r2, #0]
        apRequest = (apCli == true) ? true : apRequest;
    4774:	4a35      	ldr	r2, [pc, #212]	; (484c <cli_entry+0x120>)
    4776:	4936      	ldr	r1, [pc, #216]	; (4850 <cli_entry+0x124>)
    4778:	7813      	ldrb	r3, [r2, #0]
    477a:	b903      	cbnz	r3, 477e <cli_entry+0x52>
    477c:	780b      	ldrb	r3, [r1, #0]
    477e:	700b      	strb	r3, [r1, #0]
        apCli = false;
    4780:	2300      	movs	r3, #0
    4782:	7013      	strb	r3, [r2, #0]
        xRequest = (xCli == true) ? true : xRequest;
    4784:	4a33      	ldr	r2, [pc, #204]	; (4854 <cli_entry+0x128>)
    4786:	4934      	ldr	r1, [pc, #208]	; (4858 <cli_entry+0x12c>)
    4788:	7813      	ldrb	r3, [r2, #0]
    478a:	b903      	cbnz	r3, 478e <cli_entry+0x62>
    478c:	780b      	ldrb	r3, [r1, #0]
    478e:	700b      	strb	r3, [r1, #0]
        xCli = false;
    4790:	2300      	movs	r3, #0
    4792:	7013      	strb	r3, [r2, #0]
        yRequest = (yCli == true) ? true : yRequest;
    4794:	4a31      	ldr	r2, [pc, #196]	; (485c <cli_entry+0x130>)
    4796:	4932      	ldr	r1, [pc, #200]	; (4860 <cli_entry+0x134>)
    4798:	7813      	ldrb	r3, [r2, #0]
    479a:	b903      	cbnz	r3, 479e <cli_entry+0x72>
    479c:	780b      	ldrb	r3, [r1, #0]
    479e:	700b      	strb	r3, [r1, #0]
        yCli = false;
    47a0:	2300      	movs	r3, #0
    47a2:	7013      	strb	r3, [r2, #0]
        zRequest = (zCli == true) ? true : zRequest;
    47a4:	4a2f      	ldr	r2, [pc, #188]	; (4864 <cli_entry+0x138>)
    47a6:	4930      	ldr	r1, [pc, #192]	; (4868 <cli_entry+0x13c>)
    47a8:	7813      	ldrb	r3, [r2, #0]
    47aa:	b903      	cbnz	r3, 47ae <cli_entry+0x82>
    47ac:	780b      	ldrb	r3, [r1, #0]
    47ae:	700b      	strb	r3, [r1, #0]
        zCli = false;
    47b0:	2300      	movs	r3, #0
    47b2:	7013      	strb	r3, [r2, #0]

        // check if commands with I/O have been requested
        butRequest = (buttonCli == true) ? true : butRequest;
    47b4:	4a2d      	ldr	r2, [pc, #180]	; (486c <cli_entry+0x140>)
    47b6:	492e      	ldr	r1, [pc, #184]	; (4870 <cli_entry+0x144>)
    47b8:	7813      	ldrb	r3, [r2, #0]
    47ba:	b903      	cbnz	r3, 47be <cli_entry+0x92>
    47bc:	780b      	ldrb	r3, [r1, #0]
    47be:	700b      	strb	r3, [r1, #0]
        buttonCli = false;
    47c0:	2300      	movs	r3, #0
    47c2:	7013      	strb	r3, [r2, #0]
        ledRequest = (ledCom == true) ? true : ledRequest;
    47c4:	4a2b      	ldr	r2, [pc, #172]	; (4874 <cli_entry+0x148>)
    47c6:	492c      	ldr	r1, [pc, #176]	; (4878 <cli_entry+0x14c>)
    47c8:	7813      	ldrb	r3, [r2, #0]
    47ca:	b903      	cbnz	r3, 47ce <cli_entry+0xa2>
    47cc:	780b      	ldrb	r3, [r1, #0]
    47ce:	700b      	strb	r3, [r1, #0]
        ledCom = false;
    47d0:	2300      	movs	r3, #0
    47d2:	7013      	strb	r3, [r2, #0]
        buzzReq = (buzz == true) ? true : buzzReq;
    47d4:	4a29      	ldr	r2, [pc, #164]	; (487c <cli_entry+0x150>)
    47d6:	492a      	ldr	r1, [pc, #168]	; (4880 <cli_entry+0x154>)
    47d8:	7813      	ldrb	r3, [r2, #0]
    47da:	b903      	cbnz	r3, 47de <cli_entry+0xb2>
    47dc:	780b      	ldrb	r3, [r1, #0]
    47de:	700b      	strb	r3, [r1, #0]
        buzz = false;
    47e0:	2300      	movs	r3, #0
    47e2:	7013      	strb	r3, [r2, #0]
        dcReq = (dc == true) ? true : dcReq;
    47e4:	4a27      	ldr	r2, [pc, #156]	; (4884 <cli_entry+0x158>)
    47e6:	4928      	ldr	r1, [pc, #160]	; (4888 <cli_entry+0x15c>)
    47e8:	7813      	ldrb	r3, [r2, #0]
    47ea:	b903      	cbnz	r3, 47ee <cli_entry+0xc2>
    47ec:	780b      	ldrb	r3, [r1, #0]
    47ee:	700b      	strb	r3, [r1, #0]
        dc = false;
    47f0:	2100      	movs	r1, #0
    47f2:	7011      	strb	r1, [r2, #0]
        sampleReq = (sample == true) ? true : sampleReq;
    47f4:	4a25      	ldr	r2, [pc, #148]	; (488c <cli_entry+0x160>)
    47f6:	4e26      	ldr	r6, [pc, #152]	; (4890 <cli_entry+0x164>)
    47f8:	7813      	ldrb	r3, [r2, #0]
    47fa:	b903      	cbnz	r3, 47fe <cli_entry+0xd2>
    47fc:	7833      	ldrb	r3, [r6, #0]
        sample = false;     
    47fe:	7011      	strb	r1, [r2, #0]
        sampleT = (allOn == true) ? true : sampleT;
    4800:	4924      	ldr	r1, [pc, #144]	; (4894 <cli_entry+0x168>)
    4802:	4f25      	ldr	r7, [pc, #148]	; (4898 <cli_entry+0x16c>)
    4804:	780a      	ldrb	r2, [r1, #0]
    4806:	b902      	cbnz	r2, 480a <cli_entry+0xde>
    4808:	783a      	ldrb	r2, [r7, #0]
        allOn = false;
    480a:	2000      	movs	r0, #0
    480c:	7008      	strb	r0, [r1, #0]
        sampleT = (allOff == true) ? false: sampleT;
    480e:	4923      	ldr	r1, [pc, #140]	; (489c <cli_entry+0x170>)
    4810:	f891 c000 	ldrb.w	ip, [r1]
        sampleReq = (allOff == true) ? false: sampleReq;
        allOff = false;
    4814:	7008      	strb	r0, [r1, #0]
        sampleT = (allOff == true) ? false: sampleT;
    4816:	4584      	cmp	ip, r0
    4818:	bf1c      	itt	ne
    481a:	4602      	movne	r2, r0
        sampleReq = (allOff == true) ? false: sampleReq;
    481c:	4603      	movne	r3, r0
        sampleT = (allOff == true) ? false: sampleT;
    481e:	703a      	strb	r2, [r7, #0]
        sampleReq = (allOff == true) ? false: sampleReq;
    4820:	7033      	strb	r3, [r6, #0]
	return z_impl_k_sleep(timeout);
    4822:	2100      	movs	r1, #0
    4824:	f641 109a 	movw	r0, #6554	; 0x199a
    4828:	f020 fd94 	bl	25354 <z_impl_k_sleep>
    while(1) {
    482c:	e783      	b.n	4736 <cli_entry+0xa>
        
        // don't return to task for 200ms
        k_sleep(K_MSEC(200));
    }
}
    482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4830:	20000b70 	.word	0x20000b70
    4834:	20005ebd 	.word	0x20005ebd
    4838:	20005ee0 	.word	0x20005ee0
    483c:	20005ebf 	.word	0x20005ebf
    4840:	20005ee3 	.word	0x20005ee3
    4844:	20005eb7 	.word	0x20005eb7
    4848:	20005eda 	.word	0x20005eda
    484c:	20005eaf 	.word	0x20005eaf
    4850:	20005ec4 	.word	0x20005ec4
    4854:	20005ec0 	.word	0x20005ec0
    4858:	20005ee5 	.word	0x20005ee5
    485c:	20005ec1 	.word	0x20005ec1
    4860:	20005eea 	.word	0x20005eea
    4864:	20005ec2 	.word	0x20005ec2
    4868:	20005eef 	.word	0x20005eef
    486c:	20005eb2 	.word	0x20005eb2
    4870:	20005ec6 	.word	0x20005ec6
    4874:	20005eb9 	.word	0x20005eb9
    4878:	20005edc 	.word	0x20005edc
    487c:	20005eb3 	.word	0x20005eb3
    4880:	20005ec8 	.word	0x20005ec8
    4884:	20005eb4 	.word	0x20005eb4
    4888:	20005ed2 	.word	0x20005ed2
    488c:	20005ebb 	.word	0x20005ebb
    4890:	20005ede 	.word	0x20005ede
    4894:	20005eae 	.word	0x20005eae
    4898:	20005edf 	.word	0x20005edf
    489c:	20005ead 	.word	0x20005ead

000048a0 <scan_entry>:
void scan_entry(void *arg1, void *arg2, void *arg3) {
    48a0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
    48a2:	4d0a      	ldr	r5, [pc, #40]	; (48cc <scan_entry+0x2c>)
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    48a4:	4c0a      	ldr	r4, [pc, #40]	; (48d0 <scan_entry+0x30>)
	return z_impl_k_sem_take(sem, timeout);
    48a6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    48aa:	2300      	movs	r3, #0
    48ac:	4628      	mov	r0, r5
    48ae:	f020 f893 	bl	249d8 <z_impl_k_sem_take>
        if (k_sem_take(&scan, K_SECONDS(10)) != 0) {
    48b2:	b950      	cbnz	r0, 48ca <scan_entry+0x2a>
        scan_init();
    48b4:	f001 fa04 	bl	5cc0 <scan_init>
	z_impl_k_sem_give(sem);
    48b8:	4620      	mov	r0, r4
    48ba:	f020 f867 	bl	2498c <z_impl_k_sem_give>
	return z_impl_k_sleep(timeout);
    48be:	2100      	movs	r1, #0
    48c0:	f640 40cd 	movw	r0, #3277	; 0xccd
    48c4:	f020 fd46 	bl	25354 <z_impl_k_sleep>
    48c8:	e7ed      	b.n	48a6 <scan_entry+0x6>
}
    48ca:	bd38      	pop	{r3, r4, r5, pc}
    48cc:	20000ba0 	.word	0x20000ba0
    48d0:	20000b58 	.word	0x20000b58

000048d4 <adv_entry>:
void adv_entry(void *arg1, void *arg2, void *arg3) {
    48d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bt_init();
    48d8:	f021 f897 	bl	25a0a <bt_init>
    ble_ahu_adv();
    48dc:	f001 fa10 	bl	5d00 <ble_ahu_adv>
    button_init();
    48e0:	f001 fa7e 	bl	5de0 <button_init>
        sampleOn = false;
    48e4:	4c90      	ldr	r4, [pc, #576]	; (4b28 <adv_entry+0x254>)
        temp = tempVal;
    48e6:	4b91      	ldr	r3, [pc, #580]	; (4b2c <adv_entry+0x258>)
    48e8:	4a91      	ldr	r2, [pc, #580]	; (4b30 <adv_entry+0x25c>)
    48ea:	781b      	ldrb	r3, [r3, #0]
    48ec:	7013      	strb	r3, [r2, #0]
        voc = vocVal;
    48ee:	4b91      	ldr	r3, [pc, #580]	; (4b34 <adv_entry+0x260>)
    48f0:	781a      	ldrb	r2, [r3, #0]
    48f2:	4b91      	ldr	r3, [pc, #580]	; (4b38 <adv_entry+0x264>)
    48f4:	701a      	strb	r2, [r3, #0]
        humidity = humVal;
    48f6:	4b91      	ldr	r3, [pc, #580]	; (4b3c <adv_entry+0x268>)
    48f8:	781a      	ldrb	r2, [r3, #0]
    48fa:	4b91      	ldr	r3, [pc, #580]	; (4b40 <adv_entry+0x26c>)
    48fc:	701a      	strb	r2, [r3, #0]
        airpressure = apVal;
    48fe:	4b91      	ldr	r3, [pc, #580]	; (4b44 <adv_entry+0x270>)
    4900:	781a      	ldrb	r2, [r3, #0]
    4902:	4b91      	ldr	r3, [pc, #580]	; (4b48 <adv_entry+0x274>)
    4904:	701a      	strb	r2, [r3, #0]
        xaccel = xVal;
    4906:	4b91      	ldr	r3, [pc, #580]	; (4b4c <adv_entry+0x278>)
    4908:	e9d3 0100 	ldrd	r0, r1, [r3]
    490c:	f7fc fdb4 	bl	1478 <__aeabi_d2f>
    4910:	4b8f      	ldr	r3, [pc, #572]	; (4b50 <adv_entry+0x27c>)
    4912:	6018      	str	r0, [r3, #0]
        yaccel = yVal;
    4914:	4b8f      	ldr	r3, [pc, #572]	; (4b54 <adv_entry+0x280>)
    4916:	e9d3 0100 	ldrd	r0, r1, [r3]
    491a:	f7fc fdad 	bl	1478 <__aeabi_d2f>
    491e:	4b8e      	ldr	r3, [pc, #568]	; (4b58 <adv_entry+0x284>)
    4920:	6018      	str	r0, [r3, #0]
        zaccel = zVal;
    4922:	4b8e      	ldr	r3, [pc, #568]	; (4b5c <adv_entry+0x288>)
    4924:	e9d3 0100 	ldrd	r0, r1, [r3]
    4928:	f7fc fda6 	bl	1478 <__aeabi_d2f>
    492c:	4b8c      	ldr	r3, [pc, #560]	; (4b60 <adv_entry+0x28c>)
    492e:	6018      	str	r0, [r3, #0]
        button = butVal;
    4930:	4b8c      	ldr	r3, [pc, #560]	; (4b64 <adv_entry+0x290>)
    4932:	781a      	ldrb	r2, [r3, #0]
    4934:	4b8c      	ldr	r3, [pc, #560]	; (4b68 <adv_entry+0x294>)
    4936:	701a      	strb	r2, [r3, #0]
        allRequest = allOn;
    4938:	4b8c      	ldr	r3, [pc, #560]	; (4b6c <adv_entry+0x298>)
    493a:	781a      	ldrb	r2, [r3, #0]
    493c:	4b8c      	ldr	r3, [pc, #560]	; (4b70 <adv_entry+0x29c>)
    493e:	701a      	strb	r2, [r3, #0]
        sampleOn = false;
    4940:	f04f 0300 	mov.w	r3, #0
    4944:	7023      	strb	r3, [r4, #0]
	return z_impl_k_sem_take(sem, timeout);
    4946:	488b      	ldr	r0, [pc, #556]	; (4b74 <adv_entry+0x2a0>)
    4948:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    494c:	2300      	movs	r3, #0
    494e:	f020 f843 	bl	249d8 <z_impl_k_sem_take>
        if (k_sem_take(&adver, K_SECONDS(10)) != 0) {
    4952:	2800      	cmp	r0, #0
    4954:	f040 815a 	bne.w	4c0c <adv_entry+0x338>
        if(tempRequest) {
    4958:	f8df b21c 	ldr.w	fp, [pc, #540]	; 4b78 <adv_entry+0x2a4>
    495c:	f89b 3000 	ldrb.w	r3, [fp]
    4960:	b123      	cbz	r3, 496c <adv_entry+0x98>
            load(requestTempSensor,2,4);
    4962:	4886      	ldr	r0, [pc, #536]	; (4b7c <adv_entry+0x2a8>)
    4964:	2204      	movs	r2, #4
    4966:	2102      	movs	r1, #2
    4968:	f001 f9b2 	bl	5cd0 <load>
        if(humRequest) {
    496c:	f8df a210 	ldr.w	sl, [pc, #528]	; 4b80 <adv_entry+0x2ac>
    4970:	f89a 3000 	ldrb.w	r3, [sl]
    4974:	b123      	cbz	r3, 4980 <adv_entry+0xac>
            load(requestHumSensor,2,4);
    4976:	4883      	ldr	r0, [pc, #524]	; (4b84 <adv_entry+0x2b0>)
    4978:	2204      	movs	r2, #4
    497a:	2102      	movs	r1, #2
    497c:	f001 f9a8 	bl	5cd0 <load>
        if(apRequest) {
    4980:	f8df 9204 	ldr.w	r9, [pc, #516]	; 4b88 <adv_entry+0x2b4>
    4984:	f899 3000 	ldrb.w	r3, [r9]
    4988:	b123      	cbz	r3, 4994 <adv_entry+0xc0>
            load(requestAirPressure,2,4);
    498a:	4880      	ldr	r0, [pc, #512]	; (4b8c <adv_entry+0x2b8>)
    498c:	2204      	movs	r2, #4
    498e:	2102      	movs	r1, #2
    4990:	f001 f99e 	bl	5cd0 <load>
        if(vocRequest) {
    4994:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 4b90 <adv_entry+0x2bc>
    4998:	f898 3000 	ldrb.w	r3, [r8]
    499c:	b123      	cbz	r3, 49a8 <adv_entry+0xd4>
            load(requestVOC,2,4);
    499e:	487d      	ldr	r0, [pc, #500]	; (4b94 <adv_entry+0x2c0>)
    49a0:	2204      	movs	r2, #4
    49a2:	2102      	movs	r1, #2
    49a4:	f001 f994 	bl	5cd0 <load>
        if(xRequest) {
    49a8:	4f7b      	ldr	r7, [pc, #492]	; (4b98 <adv_entry+0x2c4>)
    49aa:	783b      	ldrb	r3, [r7, #0]
    49ac:	b123      	cbz	r3, 49b8 <adv_entry+0xe4>
            load(requestX,2,4);
    49ae:	487b      	ldr	r0, [pc, #492]	; (4b9c <adv_entry+0x2c8>)
    49b0:	2204      	movs	r2, #4
    49b2:	2102      	movs	r1, #2
    49b4:	f001 f98c 	bl	5cd0 <load>
        if(yRequest) {
    49b8:	4b79      	ldr	r3, [pc, #484]	; (4ba0 <adv_entry+0x2cc>)
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	b123      	cbz	r3, 49c8 <adv_entry+0xf4>
            load(requestY,2 ,4);
    49be:	4879      	ldr	r0, [pc, #484]	; (4ba4 <adv_entry+0x2d0>)
    49c0:	2204      	movs	r2, #4
    49c2:	2102      	movs	r1, #2
    49c4:	f001 f984 	bl	5cd0 <load>
        if(zRequest) {
    49c8:	4b77      	ldr	r3, [pc, #476]	; (4ba8 <adv_entry+0x2d4>)
    49ca:	781b      	ldrb	r3, [r3, #0]
    49cc:	b123      	cbz	r3, 49d8 <adv_entry+0x104>
            load(requestZ,2 ,4);
    49ce:	4877      	ldr	r0, [pc, #476]	; (4bac <adv_entry+0x2d8>)
    49d0:	2204      	movs	r2, #4
    49d2:	2102      	movs	r1, #2
    49d4:	f001 f97c 	bl	5cd0 <load>
        if(butRequest) {
    49d8:	4e75      	ldr	r6, [pc, #468]	; (4bb0 <adv_entry+0x2dc>)
    49da:	7833      	ldrb	r3, [r6, #0]
    49dc:	b123      	cbz	r3, 49e8 <adv_entry+0x114>
            load(requestBut,2,4);
    49de:	4875      	ldr	r0, [pc, #468]	; (4bb4 <adv_entry+0x2e0>)
    49e0:	2204      	movs	r2, #4
    49e2:	2102      	movs	r1, #2
    49e4:	f001 f974 	bl	5cd0 <load>
        if(ledRequest) {
    49e8:	4d73      	ldr	r5, [pc, #460]	; (4bb8 <adv_entry+0x2e4>)
    49ea:	782b      	ldrb	r3, [r5, #0]
    49ec:	b1b3      	cbz	r3, 4a1c <adv_entry+0x148>
            if(redOn) {
    49ee:	4b73      	ldr	r3, [pc, #460]	; (4bbc <adv_entry+0x2e8>)
    49f0:	781b      	ldrb	r3, [r3, #0]
    49f2:	b113      	cbz	r3, 49fa <adv_entry+0x126>
                requestLed[4] = 1;
    49f4:	4b72      	ldr	r3, [pc, #456]	; (4bc0 <adv_entry+0x2ec>)
    49f6:	2201      	movs	r2, #1
    49f8:	711a      	strb	r2, [r3, #4]
            if(blueOn) {
    49fa:	4b72      	ldr	r3, [pc, #456]	; (4bc4 <adv_entry+0x2f0>)
    49fc:	781b      	ldrb	r3, [r3, #0]
    49fe:	b113      	cbz	r3, 4a06 <adv_entry+0x132>
                requestLed[6] = 1;                
    4a00:	4b6f      	ldr	r3, [pc, #444]	; (4bc0 <adv_entry+0x2ec>)
    4a02:	2201      	movs	r2, #1
    4a04:	719a      	strb	r2, [r3, #6]
            if(greenOn) {
    4a06:	4b70      	ldr	r3, [pc, #448]	; (4bc8 <adv_entry+0x2f4>)
    4a08:	781b      	ldrb	r3, [r3, #0]
    4a0a:	b113      	cbz	r3, 4a12 <adv_entry+0x13e>
                requestLed[5] = 1;
    4a0c:	4b6c      	ldr	r3, [pc, #432]	; (4bc0 <adv_entry+0x2ec>)
    4a0e:	2201      	movs	r2, #1
    4a10:	715a      	strb	r2, [r3, #5]
            load(requestLed,2,7);
    4a12:	486b      	ldr	r0, [pc, #428]	; (4bc0 <adv_entry+0x2ec>)
    4a14:	2207      	movs	r2, #7
    4a16:	2102      	movs	r1, #2
    4a18:	f001 f95a 	bl	5cd0 <load>
        if(buzzReq) {
    4a1c:	4b6b      	ldr	r3, [pc, #428]	; (4bcc <adv_entry+0x2f8>)
    4a1e:	781b      	ldrb	r3, [r3, #0]
    4a20:	b14b      	cbz	r3, 4a36 <adv_entry+0x162>
            requestBuzz[4] = buzzerFreq >> 8;
    4a22:	4b6b      	ldr	r3, [pc, #428]	; (4bd0 <adv_entry+0x2fc>)
    4a24:	486b      	ldr	r0, [pc, #428]	; (4bd4 <adv_entry+0x300>)
    4a26:	881b      	ldrh	r3, [r3, #0]
            requestBuzz[5] = buzzerFreq & 0x00FF;
    4a28:	7143      	strb	r3, [r0, #5]
            requestBuzz[4] = buzzerFreq >> 8;
    4a2a:	0a1a      	lsrs	r2, r3, #8
    4a2c:	7102      	strb	r2, [r0, #4]
            load(requestBuzz,2,6);
    4a2e:	2102      	movs	r1, #2
    4a30:	2206      	movs	r2, #6
    4a32:	f001 f94d 	bl	5cd0 <load>
        if(dcReq) {
    4a36:	4b68      	ldr	r3, [pc, #416]	; (4bd8 <adv_entry+0x304>)
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	b13b      	cbz	r3, 4a4c <adv_entry+0x178>
            requestDC[4] = dcVal;
    4a3c:	4b67      	ldr	r3, [pc, #412]	; (4bdc <adv_entry+0x308>)
    4a3e:	4868      	ldr	r0, [pc, #416]	; (4be0 <adv_entry+0x30c>)
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	7103      	strb	r3, [r0, #4]
            load(requestDC, 2 , 5);
    4a44:	2205      	movs	r2, #5
    4a46:	2102      	movs	r1, #2
    4a48:	f001 f942 	bl	5cd0 <load>
        if(sampleReq) {
    4a4c:	4b65      	ldr	r3, [pc, #404]	; (4be4 <adv_entry+0x310>)
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	b14b      	cbz	r3, 4a66 <adv_entry+0x192>
            requestSample[4] = sampleTime >> 8;
    4a52:	4b65      	ldr	r3, [pc, #404]	; (4be8 <adv_entry+0x314>)
    4a54:	4865      	ldr	r0, [pc, #404]	; (4bec <adv_entry+0x318>)
    4a56:	881b      	ldrh	r3, [r3, #0]
            requestSample[5] = sampleTime & 0x00FF;
    4a58:	7143      	strb	r3, [r0, #5]
            requestSample[4] = sampleTime >> 8;
    4a5a:	0a1a      	lsrs	r2, r3, #8
    4a5c:	7102      	strb	r2, [r0, #4]
            load(requestSample, 2, 6);
    4a5e:	2102      	movs	r1, #2
    4a60:	2206      	movs	r2, #6
    4a62:	f001 f935 	bl	5cd0 <load>
	return z_impl_k_uptime_ticks();
    4a66:	f026 fbab 	bl	2b1c0 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4a6e:	fba0 0203 	umull	r0, r2, r0, r3
    4a72:	fb03 2201 	mla	r2, r3, r1, r2
    4a76:	0bc0      	lsrs	r0, r0, #15
    4a78:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
        if(k_uptime_get_32() - time >= sampleTime * 1000 && pressed && !sampleT) {
    4a7c:	4a5c      	ldr	r2, [pc, #368]	; (4bf0 <adv_entry+0x31c>)
    4a7e:	6812      	ldr	r2, [r2, #0]
    4a80:	1a80      	subs	r0, r0, r2
    4a82:	4a59      	ldr	r2, [pc, #356]	; (4be8 <adv_entry+0x314>)
    4a84:	8812      	ldrh	r2, [r2, #0]
    4a86:	4353      	muls	r3, r2
    4a88:	4298      	cmp	r0, r3
    4a8a:	d30d      	bcc.n	4aa8 <adv_entry+0x1d4>
    4a8c:	4b59      	ldr	r3, [pc, #356]	; (4bf4 <adv_entry+0x320>)
    4a8e:	781b      	ldrb	r3, [r3, #0]
    4a90:	b153      	cbz	r3, 4aa8 <adv_entry+0x1d4>
    4a92:	4b59      	ldr	r3, [pc, #356]	; (4bf8 <adv_entry+0x324>)
    4a94:	781b      	ldrb	r3, [r3, #0]
    4a96:	b93b      	cbnz	r3, 4aa8 <adv_entry+0x1d4>
            sampleOn = true;
    4a98:	2301      	movs	r3, #1
    4a9a:	7023      	strb	r3, [r4, #0]
            load(requestAll,2,4);
    4a9c:	4857      	ldr	r0, [pc, #348]	; (4bfc <adv_entry+0x328>)
    4a9e:	2204      	movs	r2, #4
    4aa0:	2102      	movs	r1, #2
    4aa2:	f001 f915 	bl	5cd0 <load>
    4aa6:	e008      	b.n	4aba <adv_entry+0x1e6>
        if((sampleOn || sampleT) && pressed) {
    4aa8:	7823      	ldrb	r3, [r4, #0]
    4aaa:	b913      	cbnz	r3, 4ab2 <adv_entry+0x1de>
    4aac:	4b52      	ldr	r3, [pc, #328]	; (4bf8 <adv_entry+0x324>)
    4aae:	781b      	ldrb	r3, [r3, #0]
    4ab0:	b11b      	cbz	r3, 4aba <adv_entry+0x1e6>
    4ab2:	4b50      	ldr	r3, [pc, #320]	; (4bf4 <adv_entry+0x320>)
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d1f0      	bne.n	4a9c <adv_entry+0x1c8>
        if(!tempRequest && !humRequest && !apRequest && !vocRequest && !xRequest && !yRequest && !zRequest && 
    4aba:	f89b 3000 	ldrb.w	r3, [fp]
    4abe:	bb3b      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4ac0:	f89a 3000 	ldrb.w	r3, [sl]
    4ac4:	bb23      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4ac6:	f899 3000 	ldrb.w	r3, [r9]
    4aca:	bb0b      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4acc:	f898 3000 	ldrb.w	r3, [r8]
    4ad0:	b9f3      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4ad2:	783b      	ldrb	r3, [r7, #0]
    4ad4:	b9e3      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4ad6:	4b32      	ldr	r3, [pc, #200]	; (4ba0 <adv_entry+0x2cc>)
    4ad8:	781b      	ldrb	r3, [r3, #0]
    4ada:	b9cb      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4adc:	4b32      	ldr	r3, [pc, #200]	; (4ba8 <adv_entry+0x2d4>)
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	b9b3      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4ae2:	7833      	ldrb	r3, [r6, #0]
    4ae4:	b9a3      	cbnz	r3, 4b10 <adv_entry+0x23c>
            !butRequest && !buzzReq && !ledRequest && !dcReq && !sampleReq && !sampleT && !sampleOn) {
    4ae6:	4b39      	ldr	r3, [pc, #228]	; (4bcc <adv_entry+0x2f8>)
    4ae8:	781b      	ldrb	r3, [r3, #0]
    4aea:	b98b      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4aec:	782b      	ldrb	r3, [r5, #0]
    4aee:	b97b      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4af0:	4b39      	ldr	r3, [pc, #228]	; (4bd8 <adv_entry+0x304>)
    4af2:	781b      	ldrb	r3, [r3, #0]
    4af4:	b963      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4af6:	4b3b      	ldr	r3, [pc, #236]	; (4be4 <adv_entry+0x310>)
    4af8:	781b      	ldrb	r3, [r3, #0]
    4afa:	b94b      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4afc:	4b3e      	ldr	r3, [pc, #248]	; (4bf8 <adv_entry+0x324>)
    4afe:	781b      	ldrb	r3, [r3, #0]
    4b00:	b933      	cbnz	r3, 4b10 <adv_entry+0x23c>
    4b02:	7823      	ldrb	r3, [r4, #0]
    4b04:	b923      	cbnz	r3, 4b10 <adv_entry+0x23c>
            load(defAddy,2,7);
    4b06:	483e      	ldr	r0, [pc, #248]	; (4c00 <adv_entry+0x32c>)
    4b08:	2207      	movs	r2, #7
    4b0a:	2102      	movs	r1, #2
    4b0c:	f001 f8e0 	bl	5cd0 <load>
	z_impl_k_sem_give(sem);
    4b10:	483c      	ldr	r0, [pc, #240]	; (4c04 <adv_entry+0x330>)
    4b12:	f01f ff3b 	bl	2498c <z_impl_k_sem_give>
    4b16:	483c      	ldr	r0, [pc, #240]	; (4c08 <adv_entry+0x334>)
    4b18:	f01f ff38 	bl	2498c <z_impl_k_sem_give>
	return z_impl_k_sleep(timeout);
    4b1c:	2100      	movs	r1, #0
    4b1e:	f641 109a 	movw	r0, #6554	; 0x199a
    4b22:	f020 fc17 	bl	25354 <z_impl_k_sleep>
    while(1) {
    4b26:	e6de      	b.n	48e6 <adv_entry+0x12>
    4b28:	20005edd 	.word	0x20005edd
    4b2c:	20005ee1 	.word	0x20005ee1
    4b30:	20005ebc 	.word	0x20005ebc
    4b34:	20005ee4 	.word	0x20005ee4
    4b38:	20005ebe 	.word	0x20005ebe
    4b3c:	20005edb 	.word	0x20005edb
    4b40:	20005eb8 	.word	0x20005eb8
    4b44:	20005ec5 	.word	0x20005ec5
    4b48:	20005eac 	.word	0x20005eac
    4b4c:	200025f0 	.word	0x200025f0
    4b50:	2000395c 	.word	0x2000395c
    4b54:	200025f8 	.word	0x200025f8
    4b58:	20003960 	.word	0x20003960
    4b5c:	20002600 	.word	0x20002600
    4b60:	20003964 	.word	0x20003964
    4b64:	20005ec7 	.word	0x20005ec7
    4b68:	20005eb1 	.word	0x20005eb1
    4b6c:	20005eae 	.word	0x20005eae
    4b70:	20005ec3 	.word	0x20005ec3
    4b74:	20000b58 	.word	0x20000b58
    4b78:	20005ee0 	.word	0x20005ee0
    4b7c:	200008ef 	.word	0x200008ef
    4b80:	20005eda 	.word	0x20005eda
    4b84:	200008de 	.word	0x200008de
    4b88:	20005ec4 	.word	0x20005ec4
    4b8c:	200008c7 	.word	0x200008c7
    4b90:	20005ee3 	.word	0x20005ee3
    4b94:	200008f3 	.word	0x200008f3
    4b98:	20005ee5 	.word	0x20005ee5
    4b9c:	200008f7 	.word	0x200008f7
    4ba0:	20005eea 	.word	0x20005eea
    4ba4:	200008fb 	.word	0x200008fb
    4ba8:	20005eef 	.word	0x20005eef
    4bac:	200008ff 	.word	0x200008ff
    4bb0:	20005ec6 	.word	0x20005ec6
    4bb4:	200008cf 	.word	0x200008cf
    4bb8:	20005edc 	.word	0x20005edc
    4bbc:	20005eba 	.word	0x20005eba
    4bc0:	200008e2 	.word	0x200008e2
    4bc4:	20005eb0 	.word	0x20005eb0
    4bc8:	20005eb6 	.word	0x20005eb6
    4bcc:	20005ec8 	.word	0x20005ec8
    4bd0:	20005e90 	.word	0x20005e90
    4bd4:	200008d3 	.word	0x200008d3
    4bd8:	20005ed2 	.word	0x20005ed2
    4bdc:	20005eb5 	.word	0x20005eb5
    4be0:	200008d9 	.word	0x200008d9
    4be4:	20005ede 	.word	0x20005ede
    4be8:	20005e92 	.word	0x20005e92
    4bec:	200008e9 	.word	0x200008e9
    4bf0:	2000396c 	.word	0x2000396c
    4bf4:	20005ef4 	.word	0x20005ef4
    4bf8:	20005edf 	.word	0x20005edf
    4bfc:	200008cb 	.word	0x200008cb
    4c00:	20005ed3 	.word	0x20005ed3
    4c04:	20000ba0 	.word	0x20000ba0
    4c08:	20000b70 	.word	0x20000b70
}
    4c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004c10 <cmd_led_ctrl_on>:


/* Command Handler for turning LEDs ON */
static int cmd_led_ctrl_on(const struct shell *shell, size_t argc,
                        char **argv)
{
    4c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ARG_UNUSED(argc);

	const struct device *dev1 = device_get_binding(LED1);
    4c14:	4855      	ldr	r0, [pc, #340]	; (4d6c <cmd_led_ctrl_on+0x15c>)
{
    4c16:	b089      	sub	sp, #36	; 0x24
    4c18:	4616      	mov	r6, r2
	const struct device *dev1 = device_get_binding(LED1);
    4c1a:	f020 fed4 	bl	259c6 <device_get_binding>
    4c1e:	4681      	mov	r9, r0
	const struct device *dev2 = device_get_binding(LED2);
    4c20:	4853      	ldr	r0, [pc, #332]	; (4d70 <cmd_led_ctrl_on+0x160>)
    4c22:	f020 fed0 	bl	259c6 <device_get_binding>
    4c26:	4607      	mov	r7, r0
	const struct device *dev3 = device_get_binding(LED3);
    4c28:	4850      	ldr	r0, [pc, #320]	; (4d6c <cmd_led_ctrl_on+0x15c>)
    4c2a:	f020 fecc 	bl	259c6 <device_get_binding>
    4c2e:	4680      	mov	r8, r0

	if (dev2 == NULL) {
    4c30:	2f00      	cmp	r7, #0
    4c32:	f000 8099 	beq.w	4d68 <cmd_led_ctrl_on+0x158>
		return ENODEV;
	}

	if (strcmp(argv[1],"r") == 0) {
    4c36:	494f      	ldr	r1, [pc, #316]	; (4d74 <cmd_led_ctrl_on+0x164>)
    4c38:	6870      	ldr	r0, [r6, #4]
    4c3a:	4d4f      	ldr	r5, [pc, #316]	; (4d78 <cmd_led_ctrl_on+0x168>)
    4c3c:	f023 fd72 	bl	28724 <strcmp>
    4c40:	4604      	mov	r4, r0
    4c42:	2800      	cmp	r0, #0
    4c44:	d134      	bne.n	4cb0 <cmd_led_ctrl_on+0xa0>
		if (led1_status == 0) {
    4c46:	4a4d      	ldr	r2, [pc, #308]	; (4d7c <cmd_led_ctrl_on+0x16c>)
			led1_status = 1;
			LOG_INF("red led is on");
    4c48:	682b      	ldr	r3, [r5, #0]
		if (led1_status == 0) {
    4c4a:	6811      	ldr	r1, [r2, #0]
    4c4c:	b9d1      	cbnz	r1, 4c84 <cmd_led_ctrl_on+0x74>
			LOG_INF("red led is on");
    4c4e:	f003 0307 	and.w	r3, r3, #7
			led1_status = 1;
    4c52:	2101      	movs	r1, #1
			LOG_INF("red led is on");
    4c54:	2b02      	cmp	r3, #2
			led1_status = 1;
    4c56:	6011      	str	r1, [r2, #0]
			LOG_INF("red led is on");
    4c58:	d90c      	bls.n	4c74 <cmd_led_ctrl_on+0x64>
    4c5a:	4b49      	ldr	r3, [pc, #292]	; (4d80 <cmd_led_ctrl_on+0x170>)
    4c5c:	9306      	str	r3, [sp, #24]
    4c5e:	4b49      	ldr	r3, [pc, #292]	; (4d84 <cmd_led_ctrl_on+0x174>)
    4c60:	9307      	str	r3, [sp, #28]
    4c62:	aa05      	add	r2, sp, #20
    4c64:	2303      	movs	r3, #3
    4c66:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4c6a:	4628      	mov	r0, r5
    4c6c:	9301      	str	r3, [sp, #4]
    4c6e:	9305      	str	r3, [sp, #20]
    4c70:	f020 feab 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev1, PIN1, 1);
    4c74:	2201      	movs	r2, #1
    4c76:	2108      	movs	r1, #8
    4c78:	4648      	mov	r0, r9
	} else {
		LOG_ERR("invalid command");
		return 0;
	}
	
}
    4c7a:	b009      	add	sp, #36	; 0x24
    4c7c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return gpio_pin_set(dev3, PIN3, 1);
    4c80:	f020 be91 	b.w	259a6 <gpio_pin_set>
			LOG_WRN("red led is already on");
    4c84:	f013 0f06 	tst.w	r3, #6
    4c88:	d101      	bne.n	4c8e <cmd_led_ctrl_on+0x7e>
		return 0;
    4c8a:	2400      	movs	r4, #0
    4c8c:	e00c      	b.n	4ca8 <cmd_led_ctrl_on+0x98>
			LOG_WRN("red led is already on");
    4c8e:	4b3e      	ldr	r3, [pc, #248]	; (4d88 <cmd_led_ctrl_on+0x178>)
			LOG_WRN("blue led is already on");
    4c90:	9306      	str	r3, [sp, #24]
    4c92:	4b3c      	ldr	r3, [pc, #240]	; (4d84 <cmd_led_ctrl_on+0x174>)
    4c94:	9307      	str	r3, [sp, #28]
    4c96:	aa05      	add	r2, sp, #20
    4c98:	2303      	movs	r3, #3
    4c9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4c9e:	4628      	mov	r0, r5
    4ca0:	9301      	str	r3, [sp, #4]
    4ca2:	9305      	str	r3, [sp, #20]
    4ca4:	f020 fe91 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    4ca8:	4620      	mov	r0, r4
    4caa:	b009      	add	sp, #36	; 0x24
    4cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (strcmp(argv[1],"g") == 0) {
    4cb0:	4936      	ldr	r1, [pc, #216]	; (4d8c <cmd_led_ctrl_on+0x17c>)
    4cb2:	6870      	ldr	r0, [r6, #4]
    4cb4:	f023 fd36 	bl	28724 <strcmp>
    4cb8:	4604      	mov	r4, r0
    4cba:	b9f8      	cbnz	r0, 4cfc <cmd_led_ctrl_on+0xec>
		if (led2_status == 0) {
    4cbc:	4a34      	ldr	r2, [pc, #208]	; (4d90 <cmd_led_ctrl_on+0x180>)
			LOG_INF("green led is on");
    4cbe:	682b      	ldr	r3, [r5, #0]
		if (led2_status == 0) {
    4cc0:	6811      	ldr	r1, [r2, #0]
    4cc2:	b9b1      	cbnz	r1, 4cf2 <cmd_led_ctrl_on+0xe2>
			LOG_INF("green led is on");
    4cc4:	f003 0307 	and.w	r3, r3, #7
			led2_status = 1;
    4cc8:	2101      	movs	r1, #1
			LOG_INF("green led is on");
    4cca:	2b02      	cmp	r3, #2
			led2_status = 1;
    4ccc:	6011      	str	r1, [r2, #0]
			LOG_INF("green led is on");
    4cce:	d90c      	bls.n	4cea <cmd_led_ctrl_on+0xda>
    4cd0:	4b30      	ldr	r3, [pc, #192]	; (4d94 <cmd_led_ctrl_on+0x184>)
    4cd2:	9306      	str	r3, [sp, #24]
    4cd4:	4b2b      	ldr	r3, [pc, #172]	; (4d84 <cmd_led_ctrl_on+0x174>)
    4cd6:	9307      	str	r3, [sp, #28]
    4cd8:	aa05      	add	r2, sp, #20
    4cda:	2303      	movs	r3, #3
    4cdc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4ce0:	4628      	mov	r0, r5
    4ce2:	9301      	str	r3, [sp, #4]
    4ce4:	9305      	str	r3, [sp, #20]
    4ce6:	f020 fe70 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev2, PIN2, 1);
    4cea:	2201      	movs	r2, #1
    4cec:	2109      	movs	r1, #9
    4cee:	4638      	mov	r0, r7
    4cf0:	e7c3      	b.n	4c7a <cmd_led_ctrl_on+0x6a>
			LOG_WRN("green led is already on");
    4cf2:	f013 0f06 	tst.w	r3, #6
    4cf6:	d0c8      	beq.n	4c8a <cmd_led_ctrl_on+0x7a>
    4cf8:	4b27      	ldr	r3, [pc, #156]	; (4d98 <cmd_led_ctrl_on+0x188>)
    4cfa:	e7c9      	b.n	4c90 <cmd_led_ctrl_on+0x80>
	} else if (strcmp(argv[1],"b") == 0) {
    4cfc:	4927      	ldr	r1, [pc, #156]	; (4d9c <cmd_led_ctrl_on+0x18c>)
    4cfe:	6870      	ldr	r0, [r6, #4]
    4d00:	f023 fd10 	bl	28724 <strcmp>
			LOG_INF("blue led is on");
    4d04:	682b      	ldr	r3, [r5, #0]
	} else if (strcmp(argv[1],"b") == 0) {
    4d06:	4604      	mov	r4, r0
    4d08:	b9f0      	cbnz	r0, 4d48 <cmd_led_ctrl_on+0x138>
		if (led3_status == 0) {
    4d0a:	4a25      	ldr	r2, [pc, #148]	; (4da0 <cmd_led_ctrl_on+0x190>)
    4d0c:	6811      	ldr	r1, [r2, #0]
    4d0e:	b9b1      	cbnz	r1, 4d3e <cmd_led_ctrl_on+0x12e>
			LOG_INF("blue led is on");
    4d10:	f003 0307 	and.w	r3, r3, #7
			led3_status = 1;
    4d14:	2101      	movs	r1, #1
			LOG_INF("blue led is on");
    4d16:	2b02      	cmp	r3, #2
			led3_status = 1;
    4d18:	6011      	str	r1, [r2, #0]
			LOG_INF("blue led is on");
    4d1a:	d90c      	bls.n	4d36 <cmd_led_ctrl_on+0x126>
    4d1c:	4b21      	ldr	r3, [pc, #132]	; (4da4 <cmd_led_ctrl_on+0x194>)
    4d1e:	9306      	str	r3, [sp, #24]
    4d20:	4b18      	ldr	r3, [pc, #96]	; (4d84 <cmd_led_ctrl_on+0x174>)
    4d22:	9307      	str	r3, [sp, #28]
    4d24:	aa05      	add	r2, sp, #20
    4d26:	2303      	movs	r3, #3
    4d28:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4d2c:	4628      	mov	r0, r5
    4d2e:	9301      	str	r3, [sp, #4]
    4d30:	9305      	str	r3, [sp, #20]
    4d32:	f020 fe4a 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev3, PIN3, 1);
    4d36:	2201      	movs	r2, #1
    4d38:	210c      	movs	r1, #12
    4d3a:	4640      	mov	r0, r8
    4d3c:	e79d      	b.n	4c7a <cmd_led_ctrl_on+0x6a>
			LOG_WRN("blue led is already on");
    4d3e:	f013 0f06 	tst.w	r3, #6
    4d42:	d0a2      	beq.n	4c8a <cmd_led_ctrl_on+0x7a>
    4d44:	4b18      	ldr	r3, [pc, #96]	; (4da8 <cmd_led_ctrl_on+0x198>)
    4d46:	e7a3      	b.n	4c90 <cmd_led_ctrl_on+0x80>
		LOG_ERR("invalid command");
    4d48:	075b      	lsls	r3, r3, #29
    4d4a:	d09e      	beq.n	4c8a <cmd_led_ctrl_on+0x7a>
    4d4c:	4b17      	ldr	r3, [pc, #92]	; (4dac <cmd_led_ctrl_on+0x19c>)
    4d4e:	9306      	str	r3, [sp, #24]
    4d50:	4b0c      	ldr	r3, [pc, #48]	; (4d84 <cmd_led_ctrl_on+0x174>)
    4d52:	9307      	str	r3, [sp, #28]
    4d54:	aa05      	add	r2, sp, #20
    4d56:	2303      	movs	r3, #3
    4d58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4d5c:	4628      	mov	r0, r5
    4d5e:	9301      	str	r3, [sp, #4]
    4d60:	9305      	str	r3, [sp, #20]
    4d62:	f020 fe32 	bl	259ca <z_log_msg2_static_create.constprop.0>
    4d66:	e790      	b.n	4c8a <cmd_led_ctrl_on+0x7a>
		return ENODEV;
    4d68:	2413      	movs	r4, #19
    4d6a:	e79d      	b.n	4ca8 <cmd_led_ctrl_on+0x98>
    4d6c:	0002dd66 	.word	0x0002dd66
    4d70:	0002dd6d 	.word	0x0002dd6d
    4d74:	0002f150 	.word	0x0002f150
    4d78:	200009b0 	.word	0x200009b0
    4d7c:	20003950 	.word	0x20003950
    4d80:	0002dd74 	.word	0x0002dd74
    4d84:	0002e203 	.word	0x0002e203
    4d88:	0002dd86 	.word	0x0002dd86
    4d8c:	0002e45a 	.word	0x0002e45a
    4d90:	20003954 	.word	0x20003954
    4d94:	0002dda0 	.word	0x0002dda0
    4d98:	0002ddb4 	.word	0x0002ddb4
    4d9c:	0002e12c 	.word	0x0002e12c
    4da0:	20003958 	.word	0x20003958
    4da4:	0002ddd0 	.word	0x0002ddd0
    4da8:	0002dde3 	.word	0x0002dde3
    4dac:	0002ddfe 	.word	0x0002ddfe

00004db0 <cmd_led_ctrl_off>:

/* Command Handler for turning LEDs OFF */
static int cmd_led_ctrl_off(const struct shell *shell, size_t argc,
                        char **argv)
{
    4db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ARG_UNUSED(argc);

	const struct device *dev1 = device_get_binding(LED1);
    4db4:	4855      	ldr	r0, [pc, #340]	; (4f0c <cmd_led_ctrl_off+0x15c>)
{
    4db6:	b089      	sub	sp, #36	; 0x24
    4db8:	4616      	mov	r6, r2
	const struct device *dev1 = device_get_binding(LED1);
    4dba:	f020 fe04 	bl	259c6 <device_get_binding>
    4dbe:	4681      	mov	r9, r0
	const struct device *dev2 = device_get_binding(LED2);
    4dc0:	4853      	ldr	r0, [pc, #332]	; (4f10 <cmd_led_ctrl_off+0x160>)
    4dc2:	f020 fe00 	bl	259c6 <device_get_binding>
    4dc6:	4607      	mov	r7, r0
	const struct device *dev3 = device_get_binding(LED3);
    4dc8:	4850      	ldr	r0, [pc, #320]	; (4f0c <cmd_led_ctrl_off+0x15c>)
    4dca:	f020 fdfc 	bl	259c6 <device_get_binding>
    4dce:	4680      	mov	r8, r0

	if (dev2 == NULL) {
    4dd0:	2f00      	cmp	r7, #0
    4dd2:	f000 8099 	beq.w	4f08 <cmd_led_ctrl_off+0x158>
		return ENODEV;
	}

	if (strcmp(argv[1],"r") == 0) {
    4dd6:	494f      	ldr	r1, [pc, #316]	; (4f14 <cmd_led_ctrl_off+0x164>)
    4dd8:	6870      	ldr	r0, [r6, #4]
    4dda:	4d4f      	ldr	r5, [pc, #316]	; (4f18 <cmd_led_ctrl_off+0x168>)
    4ddc:	f023 fca2 	bl	28724 <strcmp>
    4de0:	4604      	mov	r4, r0
    4de2:	2800      	cmp	r0, #0
    4de4:	d134      	bne.n	4e50 <cmd_led_ctrl_off+0xa0>
		if (led1_status == 1) {
    4de6:	4a4d      	ldr	r2, [pc, #308]	; (4f1c <cmd_led_ctrl_off+0x16c>)
			led1_status = 0;
			LOG_INF("red led is off");
    4de8:	682b      	ldr	r3, [r5, #0]
		if (led1_status == 1) {
    4dea:	6811      	ldr	r1, [r2, #0]
    4dec:	2901      	cmp	r1, #1
    4dee:	d119      	bne.n	4e24 <cmd_led_ctrl_off+0x74>
			LOG_INF("red led is off");
    4df0:	f003 0307 	and.w	r3, r3, #7
    4df4:	2b02      	cmp	r3, #2
			led1_status = 0;
    4df6:	6010      	str	r0, [r2, #0]
			LOG_INF("red led is off");
    4df8:	d90c      	bls.n	4e14 <cmd_led_ctrl_off+0x64>
    4dfa:	4b49      	ldr	r3, [pc, #292]	; (4f20 <cmd_led_ctrl_off+0x170>)
    4dfc:	9306      	str	r3, [sp, #24]
    4dfe:	4b49      	ldr	r3, [pc, #292]	; (4f24 <cmd_led_ctrl_off+0x174>)
    4e00:	9307      	str	r3, [sp, #28]
    4e02:	aa05      	add	r2, sp, #20
    4e04:	2303      	movs	r3, #3
    4e06:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4e0a:	4628      	mov	r0, r5
    4e0c:	9301      	str	r3, [sp, #4]
    4e0e:	9305      	str	r3, [sp, #20]
    4e10:	f020 fddb 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev1, PIN1, 0);
    4e14:	2200      	movs	r2, #0
    4e16:	2108      	movs	r1, #8
    4e18:	4648      	mov	r0, r9
		}
	} else {
		LOG_ERR("invalid command");
		return 0;
	}
}
    4e1a:	b009      	add	sp, #36	; 0x24
    4e1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return gpio_pin_set(dev3, PIN3, 0);
    4e20:	f020 bdc1 	b.w	259a6 <gpio_pin_set>
			LOG_WRN("red led is already off");
    4e24:	f013 0f06 	tst.w	r3, #6
    4e28:	d101      	bne.n	4e2e <cmd_led_ctrl_off+0x7e>
		return 0;
    4e2a:	2400      	movs	r4, #0
    4e2c:	e00c      	b.n	4e48 <cmd_led_ctrl_off+0x98>
			LOG_WRN("red led is already off");
    4e2e:	4b3e      	ldr	r3, [pc, #248]	; (4f28 <cmd_led_ctrl_off+0x178>)
			LOG_WRN("blue led is already off");
    4e30:	9306      	str	r3, [sp, #24]
    4e32:	4b3c      	ldr	r3, [pc, #240]	; (4f24 <cmd_led_ctrl_off+0x174>)
    4e34:	9307      	str	r3, [sp, #28]
    4e36:	aa05      	add	r2, sp, #20
    4e38:	2303      	movs	r3, #3
    4e3a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4e3e:	4628      	mov	r0, r5
    4e40:	9301      	str	r3, [sp, #4]
    4e42:	9305      	str	r3, [sp, #20]
    4e44:	f020 fdc1 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    4e48:	4620      	mov	r0, r4
    4e4a:	b009      	add	sp, #36	; 0x24
    4e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (strcmp(argv[1],"g") == 0) {
    4e50:	4936      	ldr	r1, [pc, #216]	; (4f2c <cmd_led_ctrl_off+0x17c>)
    4e52:	6870      	ldr	r0, [r6, #4]
    4e54:	f023 fc66 	bl	28724 <strcmp>
    4e58:	4604      	mov	r4, r0
    4e5a:	b9f8      	cbnz	r0, 4e9c <cmd_led_ctrl_off+0xec>
		if (led2_status == 1) {
    4e5c:	4a34      	ldr	r2, [pc, #208]	; (4f30 <cmd_led_ctrl_off+0x180>)
			LOG_INF("green led is off");
    4e5e:	682b      	ldr	r3, [r5, #0]
		if (led2_status == 1) {
    4e60:	6811      	ldr	r1, [r2, #0]
    4e62:	2901      	cmp	r1, #1
    4e64:	d115      	bne.n	4e92 <cmd_led_ctrl_off+0xe2>
			LOG_INF("green led is off");
    4e66:	f003 0307 	and.w	r3, r3, #7
    4e6a:	2b02      	cmp	r3, #2
			led2_status = 0;
    4e6c:	6010      	str	r0, [r2, #0]
			LOG_INF("green led is off");
    4e6e:	d90c      	bls.n	4e8a <cmd_led_ctrl_off+0xda>
    4e70:	4b30      	ldr	r3, [pc, #192]	; (4f34 <cmd_led_ctrl_off+0x184>)
    4e72:	9306      	str	r3, [sp, #24]
    4e74:	4b2b      	ldr	r3, [pc, #172]	; (4f24 <cmd_led_ctrl_off+0x174>)
    4e76:	9307      	str	r3, [sp, #28]
    4e78:	aa05      	add	r2, sp, #20
    4e7a:	2303      	movs	r3, #3
    4e7c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4e80:	4628      	mov	r0, r5
    4e82:	9301      	str	r3, [sp, #4]
    4e84:	9305      	str	r3, [sp, #20]
    4e86:	f020 fda0 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev2, PIN2, 0);
    4e8a:	2200      	movs	r2, #0
    4e8c:	2109      	movs	r1, #9
    4e8e:	4638      	mov	r0, r7
    4e90:	e7c3      	b.n	4e1a <cmd_led_ctrl_off+0x6a>
			LOG_WRN("green led is already off");
    4e92:	f013 0f06 	tst.w	r3, #6
    4e96:	d0c8      	beq.n	4e2a <cmd_led_ctrl_off+0x7a>
    4e98:	4b27      	ldr	r3, [pc, #156]	; (4f38 <cmd_led_ctrl_off+0x188>)
    4e9a:	e7c9      	b.n	4e30 <cmd_led_ctrl_off+0x80>
	} else if (strcmp(argv[1],"b") == 0) {
    4e9c:	4927      	ldr	r1, [pc, #156]	; (4f3c <cmd_led_ctrl_off+0x18c>)
    4e9e:	6870      	ldr	r0, [r6, #4]
    4ea0:	f023 fc40 	bl	28724 <strcmp>
			LOG_INF("blue led is off");
    4ea4:	682b      	ldr	r3, [r5, #0]
	} else if (strcmp(argv[1],"b") == 0) {
    4ea6:	4604      	mov	r4, r0
    4ea8:	b9f0      	cbnz	r0, 4ee8 <cmd_led_ctrl_off+0x138>
		if (led3_status == 1) {
    4eaa:	4a25      	ldr	r2, [pc, #148]	; (4f40 <cmd_led_ctrl_off+0x190>)
    4eac:	6811      	ldr	r1, [r2, #0]
    4eae:	2901      	cmp	r1, #1
    4eb0:	d115      	bne.n	4ede <cmd_led_ctrl_off+0x12e>
			LOG_INF("blue led is off");
    4eb2:	f003 0307 	and.w	r3, r3, #7
    4eb6:	2b02      	cmp	r3, #2
			led3_status = 0;
    4eb8:	6010      	str	r0, [r2, #0]
			LOG_INF("blue led is off");
    4eba:	d90c      	bls.n	4ed6 <cmd_led_ctrl_off+0x126>
    4ebc:	4b21      	ldr	r3, [pc, #132]	; (4f44 <cmd_led_ctrl_off+0x194>)
    4ebe:	9306      	str	r3, [sp, #24]
    4ec0:	4b18      	ldr	r3, [pc, #96]	; (4f24 <cmd_led_ctrl_off+0x174>)
    4ec2:	9307      	str	r3, [sp, #28]
    4ec4:	aa05      	add	r2, sp, #20
    4ec6:	2303      	movs	r3, #3
    4ec8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4ecc:	4628      	mov	r0, r5
    4ece:	9301      	str	r3, [sp, #4]
    4ed0:	9305      	str	r3, [sp, #20]
    4ed2:	f020 fd7a 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev3, PIN3, 0);
    4ed6:	2200      	movs	r2, #0
    4ed8:	210c      	movs	r1, #12
    4eda:	4640      	mov	r0, r8
    4edc:	e79d      	b.n	4e1a <cmd_led_ctrl_off+0x6a>
			LOG_WRN("blue led is already off");
    4ede:	f013 0f06 	tst.w	r3, #6
    4ee2:	d0a2      	beq.n	4e2a <cmd_led_ctrl_off+0x7a>
    4ee4:	4b18      	ldr	r3, [pc, #96]	; (4f48 <cmd_led_ctrl_off+0x198>)
    4ee6:	e7a3      	b.n	4e30 <cmd_led_ctrl_off+0x80>
		LOG_ERR("invalid command");
    4ee8:	075b      	lsls	r3, r3, #29
    4eea:	d09e      	beq.n	4e2a <cmd_led_ctrl_off+0x7a>
    4eec:	4b17      	ldr	r3, [pc, #92]	; (4f4c <cmd_led_ctrl_off+0x19c>)
    4eee:	9306      	str	r3, [sp, #24]
    4ef0:	4b0c      	ldr	r3, [pc, #48]	; (4f24 <cmd_led_ctrl_off+0x174>)
    4ef2:	9307      	str	r3, [sp, #28]
    4ef4:	aa05      	add	r2, sp, #20
    4ef6:	2303      	movs	r3, #3
    4ef8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4efc:	4628      	mov	r0, r5
    4efe:	9301      	str	r3, [sp, #4]
    4f00:	9305      	str	r3, [sp, #20]
    4f02:	f020 fd62 	bl	259ca <z_log_msg2_static_create.constprop.0>
    4f06:	e790      	b.n	4e2a <cmd_led_ctrl_off+0x7a>
		return ENODEV;
    4f08:	2413      	movs	r4, #19
    4f0a:	e79d      	b.n	4e48 <cmd_led_ctrl_off+0x98>
    4f0c:	0002dd66 	.word	0x0002dd66
    4f10:	0002dd6d 	.word	0x0002dd6d
    4f14:	0002f150 	.word	0x0002f150
    4f18:	200009b0 	.word	0x200009b0
    4f1c:	20003950 	.word	0x20003950
    4f20:	0002de12 	.word	0x0002de12
    4f24:	0002e213 	.word	0x0002e213
    4f28:	0002de25 	.word	0x0002de25
    4f2c:	0002e45a 	.word	0x0002e45a
    4f30:	20003954 	.word	0x20003954
    4f34:	0002de40 	.word	0x0002de40
    4f38:	0002de55 	.word	0x0002de55
    4f3c:	0002e12c 	.word	0x0002e12c
    4f40:	20003958 	.word	0x20003958
    4f44:	0002de72 	.word	0x0002de72
    4f48:	0002de86 	.word	0x0002de86
    4f4c:	0002ddfe 	.word	0x0002ddfe

00004f50 <cmd_led_ctrl_toggle>:

/* Command Handler for toggling LEDs */
static int cmd_led_ctrl_toggle(const struct shell *shell, size_t argc,
                        char **argv)
{
    4f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        ARG_UNUSED(argc);

	const struct device *dev1 = device_get_binding(LED1);
    4f54:	4861      	ldr	r0, [pc, #388]	; (50dc <cmd_led_ctrl_toggle+0x18c>)
{
    4f56:	b088      	sub	sp, #32
    4f58:	4615      	mov	r5, r2
	const struct device *dev1 = device_get_binding(LED1);
    4f5a:	f020 fd34 	bl	259c6 <device_get_binding>
    4f5e:	4680      	mov	r8, r0
	const struct device *dev2 = device_get_binding(LED2);
    4f60:	485f      	ldr	r0, [pc, #380]	; (50e0 <cmd_led_ctrl_toggle+0x190>)
    4f62:	f020 fd30 	bl	259c6 <device_get_binding>
    4f66:	4606      	mov	r6, r0
	const struct device *dev3 = device_get_binding(LED3);
    4f68:	485c      	ldr	r0, [pc, #368]	; (50dc <cmd_led_ctrl_toggle+0x18c>)
    4f6a:	f020 fd2c 	bl	259c6 <device_get_binding>
    4f6e:	4607      	mov	r7, r0

	if (dev2 == NULL) {
    4f70:	2e00      	cmp	r6, #0
    4f72:	f000 80b1 	beq.w	50d8 <cmd_led_ctrl_toggle+0x188>
		return ENODEV;
	}

	if (strcmp(argv[1],"r") == 0) {
    4f76:	495b      	ldr	r1, [pc, #364]	; (50e4 <cmd_led_ctrl_toggle+0x194>)
    4f78:	6868      	ldr	r0, [r5, #4]
    4f7a:	4c5b      	ldr	r4, [pc, #364]	; (50e8 <cmd_led_ctrl_toggle+0x198>)
    4f7c:	f023 fbd2 	bl	28724 <strcmp>
    4f80:	2800      	cmp	r0, #0
    4f82:	d130      	bne.n	4fe6 <cmd_led_ctrl_toggle+0x96>
		if (led1_status == 0) {
    4f84:	4a59      	ldr	r2, [pc, #356]	; (50ec <cmd_led_ctrl_toggle+0x19c>)
			led1_status = 1;
			LOG_INF("red led is on");
    4f86:	6823      	ldr	r3, [r4, #0]
		if (led1_status == 0) {
    4f88:	6811      	ldr	r1, [r2, #0]
			LOG_INF("red led is on");
    4f8a:	f003 0307 	and.w	r3, r3, #7
		if (led1_status == 0) {
    4f8e:	b9c1      	cbnz	r1, 4fc2 <cmd_led_ctrl_toggle+0x72>
			led1_status = 1;
    4f90:	2101      	movs	r1, #1
			LOG_INF("red led is on");
    4f92:	2b02      	cmp	r3, #2
			led1_status = 1;
    4f94:	6011      	str	r1, [r2, #0]
			LOG_INF("red led is on");
    4f96:	d90c      	bls.n	4fb2 <cmd_led_ctrl_toggle+0x62>
    4f98:	4b55      	ldr	r3, [pc, #340]	; (50f0 <cmd_led_ctrl_toggle+0x1a0>)
    4f9a:	9306      	str	r3, [sp, #24]
    4f9c:	4b55      	ldr	r3, [pc, #340]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    4f9e:	9307      	str	r3, [sp, #28]
    4fa0:	aa05      	add	r2, sp, #20
    4fa2:	2303      	movs	r3, #3
    4fa4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4fa8:	4620      	mov	r0, r4
    4faa:	9301      	str	r3, [sp, #4]
    4fac:	9305      	str	r3, [sp, #20]
    4fae:	f020 fd0c 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev1, PIN1, 1);
    4fb2:	2201      	movs	r2, #1
		} else {
			led1_status = 0;
			LOG_INF("red led is off");
			return gpio_pin_set(dev1, PIN1, 0);
    4fb4:	2108      	movs	r1, #8
    4fb6:	4640      	mov	r0, r8
		}
	} else {
		LOG_ERR("invalid command");
		return 0;
	}
}
    4fb8:	b008      	add	sp, #32
    4fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return gpio_pin_set(dev3, PIN3, 0);
    4fbe:	f020 bcf2 	b.w	259a6 <gpio_pin_set>
			LOG_INF("red led is off");
    4fc2:	2b02      	cmp	r3, #2
			led1_status = 0;
    4fc4:	6010      	str	r0, [r2, #0]
			LOG_INF("red led is off");
    4fc6:	d90c      	bls.n	4fe2 <cmd_led_ctrl_toggle+0x92>
    4fc8:	4b4b      	ldr	r3, [pc, #300]	; (50f8 <cmd_led_ctrl_toggle+0x1a8>)
    4fca:	9306      	str	r3, [sp, #24]
    4fcc:	4b49      	ldr	r3, [pc, #292]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    4fce:	9307      	str	r3, [sp, #28]
    4fd0:	aa05      	add	r2, sp, #20
    4fd2:	2303      	movs	r3, #3
    4fd4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4fd8:	4620      	mov	r0, r4
    4fda:	9301      	str	r3, [sp, #4]
    4fdc:	9305      	str	r3, [sp, #20]
    4fde:	f020 fcf4 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev1, PIN1, 0);
    4fe2:	2200      	movs	r2, #0
    4fe4:	e7e6      	b.n	4fb4 <cmd_led_ctrl_toggle+0x64>
	} else if (strcmp(argv[1],"g") == 0) {
    4fe6:	4945      	ldr	r1, [pc, #276]	; (50fc <cmd_led_ctrl_toggle+0x1ac>)
    4fe8:	6868      	ldr	r0, [r5, #4]
    4fea:	f023 fb9b 	bl	28724 <strcmp>
    4fee:	bb60      	cbnz	r0, 504a <cmd_led_ctrl_toggle+0xfa>
		if (led2_status == 0) {
    4ff0:	4a43      	ldr	r2, [pc, #268]	; (5100 <cmd_led_ctrl_toggle+0x1b0>)
			LOG_INF("green led is on");
    4ff2:	6823      	ldr	r3, [r4, #0]
		if (led2_status == 0) {
    4ff4:	6811      	ldr	r1, [r2, #0]
			LOG_INF("green led is on");
    4ff6:	f003 0307 	and.w	r3, r3, #7
		if (led2_status == 0) {
    4ffa:	b9a1      	cbnz	r1, 5026 <cmd_led_ctrl_toggle+0xd6>
			led2_status = 1;
    4ffc:	2101      	movs	r1, #1
			LOG_INF("green led is on");
    4ffe:	2b02      	cmp	r3, #2
			led2_status = 1;
    5000:	6011      	str	r1, [r2, #0]
			LOG_INF("green led is on");
    5002:	d90c      	bls.n	501e <cmd_led_ctrl_toggle+0xce>
    5004:	4b3f      	ldr	r3, [pc, #252]	; (5104 <cmd_led_ctrl_toggle+0x1b4>)
    5006:	9306      	str	r3, [sp, #24]
    5008:	4b3a      	ldr	r3, [pc, #232]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    500a:	9307      	str	r3, [sp, #28]
    500c:	aa05      	add	r2, sp, #20
    500e:	2303      	movs	r3, #3
    5010:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5014:	4620      	mov	r0, r4
    5016:	9301      	str	r3, [sp, #4]
    5018:	9305      	str	r3, [sp, #20]
    501a:	f020 fcd6 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev2, PIN2, 1);
    501e:	2201      	movs	r2, #1
			return gpio_pin_set(dev2, PIN2, 0);
    5020:	2109      	movs	r1, #9
    5022:	4630      	mov	r0, r6
    5024:	e7c8      	b.n	4fb8 <cmd_led_ctrl_toggle+0x68>
			LOG_INF("green led is off");
    5026:	2b02      	cmp	r3, #2
			led2_status = 0;
    5028:	6010      	str	r0, [r2, #0]
			LOG_INF("green led is off");
    502a:	d90c      	bls.n	5046 <cmd_led_ctrl_toggle+0xf6>
    502c:	4b36      	ldr	r3, [pc, #216]	; (5108 <cmd_led_ctrl_toggle+0x1b8>)
    502e:	9306      	str	r3, [sp, #24]
    5030:	4b30      	ldr	r3, [pc, #192]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    5032:	9307      	str	r3, [sp, #28]
    5034:	aa05      	add	r2, sp, #20
    5036:	2303      	movs	r3, #3
    5038:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    503c:	4620      	mov	r0, r4
    503e:	9301      	str	r3, [sp, #4]
    5040:	9305      	str	r3, [sp, #20]
    5042:	f020 fcc2 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev2, PIN2, 0);
    5046:	2200      	movs	r2, #0
    5048:	e7ea      	b.n	5020 <cmd_led_ctrl_toggle+0xd0>
	} else if (strcmp(argv[1],"b") == 0) {
    504a:	4930      	ldr	r1, [pc, #192]	; (510c <cmd_led_ctrl_toggle+0x1bc>)
    504c:	6868      	ldr	r0, [r5, #4]
    504e:	f023 fb69 	bl	28724 <strcmp>
    5052:	bb60      	cbnz	r0, 50ae <cmd_led_ctrl_toggle+0x15e>
		if (led3_status == 0) {
    5054:	4a2e      	ldr	r2, [pc, #184]	; (5110 <cmd_led_ctrl_toggle+0x1c0>)
			LOG_INF("blue led is on");
    5056:	6823      	ldr	r3, [r4, #0]
		if (led3_status == 0) {
    5058:	6811      	ldr	r1, [r2, #0]
			LOG_INF("blue led is on");
    505a:	f003 0307 	and.w	r3, r3, #7
		if (led3_status == 0) {
    505e:	b9a1      	cbnz	r1, 508a <cmd_led_ctrl_toggle+0x13a>
			led3_status = 1;
    5060:	2101      	movs	r1, #1
			LOG_INF("blue led is on");
    5062:	2b02      	cmp	r3, #2
			led3_status = 1;
    5064:	6011      	str	r1, [r2, #0]
			LOG_INF("blue led is on");
    5066:	d90c      	bls.n	5082 <cmd_led_ctrl_toggle+0x132>
    5068:	4b2a      	ldr	r3, [pc, #168]	; (5114 <cmd_led_ctrl_toggle+0x1c4>)
    506a:	9306      	str	r3, [sp, #24]
    506c:	4b21      	ldr	r3, [pc, #132]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    506e:	9307      	str	r3, [sp, #28]
    5070:	aa05      	add	r2, sp, #20
    5072:	2303      	movs	r3, #3
    5074:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5078:	4620      	mov	r0, r4
    507a:	9301      	str	r3, [sp, #4]
    507c:	9305      	str	r3, [sp, #20]
    507e:	f020 fca4 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev3, PIN3, 1);
    5082:	2201      	movs	r2, #1
			return gpio_pin_set(dev3, PIN3, 0);
    5084:	210c      	movs	r1, #12
    5086:	4638      	mov	r0, r7
    5088:	e796      	b.n	4fb8 <cmd_led_ctrl_toggle+0x68>
			LOG_INF("blue led is off");
    508a:	2b02      	cmp	r3, #2
			led3_status = 0;
    508c:	6010      	str	r0, [r2, #0]
			LOG_INF("blue led is off");
    508e:	d90c      	bls.n	50aa <cmd_led_ctrl_toggle+0x15a>
    5090:	4b21      	ldr	r3, [pc, #132]	; (5118 <cmd_led_ctrl_toggle+0x1c8>)
    5092:	9306      	str	r3, [sp, #24]
    5094:	4b17      	ldr	r3, [pc, #92]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    5096:	9307      	str	r3, [sp, #28]
    5098:	aa05      	add	r2, sp, #20
    509a:	2303      	movs	r3, #3
    509c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    50a0:	4620      	mov	r0, r4
    50a2:	9301      	str	r3, [sp, #4]
    50a4:	9305      	str	r3, [sp, #20]
    50a6:	f020 fc90 	bl	259ca <z_log_msg2_static_create.constprop.0>
			return gpio_pin_set(dev3, PIN3, 0);
    50aa:	2200      	movs	r2, #0
    50ac:	e7ea      	b.n	5084 <cmd_led_ctrl_toggle+0x134>
		LOG_ERR("invalid command");
    50ae:	6820      	ldr	r0, [r4, #0]
    50b0:	f010 0007 	ands.w	r0, r0, #7
    50b4:	d00d      	beq.n	50d2 <cmd_led_ctrl_toggle+0x182>
    50b6:	4b19      	ldr	r3, [pc, #100]	; (511c <cmd_led_ctrl_toggle+0x1cc>)
    50b8:	9306      	str	r3, [sp, #24]
    50ba:	4b0e      	ldr	r3, [pc, #56]	; (50f4 <cmd_led_ctrl_toggle+0x1a4>)
    50bc:	9307      	str	r3, [sp, #28]
    50be:	4620      	mov	r0, r4
    50c0:	2303      	movs	r3, #3
    50c2:	aa05      	add	r2, sp, #20
    50c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    50c8:	9301      	str	r3, [sp, #4]
    50ca:	9305      	str	r3, [sp, #20]
    50cc:	f020 fc7d 	bl	259ca <z_log_msg2_static_create.constprop.0>
		return 0;
    50d0:	2000      	movs	r0, #0
}
    50d2:	b008      	add	sp, #32
    50d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ENODEV;
    50d8:	2013      	movs	r0, #19
    50da:	e7fa      	b.n	50d2 <cmd_led_ctrl_toggle+0x182>
    50dc:	0002dd66 	.word	0x0002dd66
    50e0:	0002dd6d 	.word	0x0002dd6d
    50e4:	0002f150 	.word	0x0002f150
    50e8:	200009b0 	.word	0x200009b0
    50ec:	20003950 	.word	0x20003950
    50f0:	0002dd74 	.word	0x0002dd74
    50f4:	0002e224 	.word	0x0002e224
    50f8:	0002de12 	.word	0x0002de12
    50fc:	0002e45a 	.word	0x0002e45a
    5100:	20003954 	.word	0x20003954
    5104:	0002dda0 	.word	0x0002dda0
    5108:	0002de40 	.word	0x0002de40
    510c:	0002e12c 	.word	0x0002e12c
    5110:	20003958 	.word	0x20003958
    5114:	0002ddd0 	.word	0x0002ddd0
    5118:	0002de72 	.word	0x0002de72
    511c:	0002ddfe 	.word	0x0002ddfe

00005120 <cmd_time_seconds>:

/* Command Handler for displaying the time (unformatted) */
static int cmd_time_seconds(const struct shell *shell, size_t argc,
                        char **argv)
{
    5120:	b570      	push	{r4, r5, r6, lr}
        ARG_UNUSED(argc);

	char time_str[80];
	uint32_t time_int;

	if (strcmp(argv[1],NULL) != 0) {
    5122:	2100      	movs	r1, #0
{
    5124:	b096      	sub	sp, #88	; 0x58
    5126:	4606      	mov	r6, r0
	if (strcmp(argv[1],NULL) != 0) {
    5128:	6850      	ldr	r0, [r2, #4]
    512a:	f023 fafb 	bl	28724 <strcmp>
    512e:	b190      	cbz	r0, 5156 <cmd_time_seconds+0x36>
		LOG_ERR("Invalid Parameter. Should be NULL for unfromatted time");
    5130:	4816      	ldr	r0, [pc, #88]	; (518c <cmd_time_seconds+0x6c>)
    5132:	6803      	ldr	r3, [r0, #0]
    5134:	075b      	lsls	r3, r3, #29
    5136:	d00b      	beq.n	5150 <cmd_time_seconds+0x30>
    5138:	4b15      	ldr	r3, [pc, #84]	; (5190 <cmd_time_seconds+0x70>)
    513a:	9306      	str	r3, [sp, #24]
    513c:	4b15      	ldr	r3, [pc, #84]	; (5194 <cmd_time_seconds+0x74>)
    513e:	9307      	str	r3, [sp, #28]
    5140:	aa05      	add	r2, sp, #20
    5142:	2303      	movs	r3, #3
    5144:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5148:	9301      	str	r3, [sp, #4]
    514a:	9305      	str	r3, [sp, #20]
    514c:	f020 fc3d 	bl	259ca <z_log_msg2_static_create.constprop.0>

	shell_print(shell,"%d",seconds);

	return 0;
	}
}
    5150:	2000      	movs	r0, #0
    5152:	b016      	add	sp, #88	; 0x58
    5154:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_uptime_ticks();
    5156:	f026 f833 	bl	2b1c0 <z_impl_k_uptime_ticks>
    515a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    515e:	fba0 4005 	umull	r4, r0, r0, r5
    5162:	fb05 0001 	mla	r0, r5, r1, r0
    5166:	0be4      	lsrs	r4, r4, #15
	sprintf(time_str, "%d", k_uptime_get_32());
    5168:	ea44 4240 	orr.w	r2, r4, r0, lsl #17
    516c:	490a      	ldr	r1, [pc, #40]	; (5198 <cmd_time_seconds+0x78>)
    516e:	a802      	add	r0, sp, #8
    5170:	f007 fc2a 	bl	c9c8 <sprintf>
	time_int = atoi(time_str);
    5174:	a802      	add	r0, sp, #8
    5176:	f023 f96b 	bl	28450 <atoi>
	shell_print(shell,"%d",seconds);
    517a:	4a08      	ldr	r2, [pc, #32]	; (519c <cmd_time_seconds+0x7c>)
    517c:	fbb0 f3f5 	udiv	r3, r0, r5
    5180:	2108      	movs	r1, #8
    5182:	4630      	mov	r0, r6
    5184:	f021 fe91 	bl	26eaa <shell_fprintf>
	return 0;
    5188:	e7e2      	b.n	5150 <cmd_time_seconds+0x30>
    518a:	bf00      	nop
    518c:	200009b0 	.word	0x200009b0
    5190:	0002dea2 	.word	0x0002dea2
    5194:	0002e238 	.word	0x0002e238
    5198:	000315e6 	.word	0x000315e6
    519c:	0002e491 	.word	0x0002e491

000051a0 <cmd_sample_all_on>:
/* Command Handler for displaying the sample all on */
static int cmd_sample_all_on(const struct shell *shell, size_t argc,
                        char **argv)
{
        ARG_UNUSED(argc);
		allOn = true;
    51a0:	4b0d      	ldr	r3, [pc, #52]	; (51d8 <cmd_sample_all_on+0x38>)

	LOG_INF("sample all on");
    51a2:	480e      	ldr	r0, [pc, #56]	; (51dc <cmd_sample_all_on+0x3c>)
{
    51a4:	b500      	push	{lr}
		allOn = true;
    51a6:	2201      	movs	r2, #1
    51a8:	701a      	strb	r2, [r3, #0]
	LOG_INF("sample all on");
    51aa:	6803      	ldr	r3, [r0, #0]
    51ac:	f003 0307 	and.w	r3, r3, #7
    51b0:	2b02      	cmp	r3, #2
{
    51b2:	b089      	sub	sp, #36	; 0x24
	LOG_INF("sample all on");
    51b4:	d90b      	bls.n	51ce <cmd_sample_all_on+0x2e>
    51b6:	4b0a      	ldr	r3, [pc, #40]	; (51e0 <cmd_sample_all_on+0x40>)
    51b8:	9306      	str	r3, [sp, #24]
    51ba:	4b0a      	ldr	r3, [pc, #40]	; (51e4 <cmd_sample_all_on+0x44>)
    51bc:	9307      	str	r3, [sp, #28]
    51be:	aa05      	add	r2, sp, #20
    51c0:	2303      	movs	r3, #3
    51c2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    51c6:	9301      	str	r3, [sp, #4]
    51c8:	9305      	str	r3, [sp, #20]
    51ca:	f020 fbfe 	bl	259ca <z_log_msg2_static_create.constprop.0>

	return 0;
}
    51ce:	2000      	movs	r0, #0
    51d0:	b009      	add	sp, #36	; 0x24
    51d2:	f85d fb04 	ldr.w	pc, [sp], #4
    51d6:	bf00      	nop
    51d8:	20005eae 	.word	0x20005eae
    51dc:	200009b0 	.word	0x200009b0
    51e0:	0002dedd 	.word	0x0002dedd
    51e4:	0002e1d2 	.word	0x0002e1d2

000051e8 <cmd_sample_all_off>:
/* Command Handler for displaying the sample all on */
static int cmd_sample_all_off(const struct shell *shell, size_t argc,
                        char **argv)
{
        ARG_UNUSED(argc);
		allOn = false;
    51e8:	4b0e      	ldr	r3, [pc, #56]	; (5224 <cmd_sample_all_off+0x3c>)
		allOff = true;

	LOG_INF("sample all off");
    51ea:	480f      	ldr	r0, [pc, #60]	; (5228 <cmd_sample_all_off+0x40>)
		allOn = false;
    51ec:	2200      	movs	r2, #0
{
    51ee:	b500      	push	{lr}
		allOn = false;
    51f0:	701a      	strb	r2, [r3, #0]
		allOff = true;
    51f2:	4b0e      	ldr	r3, [pc, #56]	; (522c <cmd_sample_all_off+0x44>)
    51f4:	2201      	movs	r2, #1
    51f6:	701a      	strb	r2, [r3, #0]
	LOG_INF("sample all off");
    51f8:	6803      	ldr	r3, [r0, #0]
    51fa:	f003 0307 	and.w	r3, r3, #7
    51fe:	2b02      	cmp	r3, #2
{
    5200:	b089      	sub	sp, #36	; 0x24
	LOG_INF("sample all off");
    5202:	d90b      	bls.n	521c <cmd_sample_all_off+0x34>
    5204:	4b0a      	ldr	r3, [pc, #40]	; (5230 <cmd_sample_all_off+0x48>)
    5206:	9306      	str	r3, [sp, #24]
    5208:	4b0a      	ldr	r3, [pc, #40]	; (5234 <cmd_sample_all_off+0x4c>)
    520a:	9307      	str	r3, [sp, #28]
    520c:	aa05      	add	r2, sp, #20
    520e:	2303      	movs	r3, #3
    5210:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5214:	9301      	str	r3, [sp, #4]
    5216:	9305      	str	r3, [sp, #20]
    5218:	f020 fbd7 	bl	259ca <z_log_msg2_static_create.constprop.0>

	return 0;
}
    521c:	2000      	movs	r0, #0
    521e:	b009      	add	sp, #36	; 0x24
    5220:	f85d fb04 	ldr.w	pc, [sp], #4
    5224:	20005eae 	.word	0x20005eae
    5228:	200009b0 	.word	0x200009b0
    522c:	20005ead 	.word	0x20005ead
    5230:	0002deef 	.word	0x0002deef
    5234:	0002e249 	.word	0x0002e249

00005238 <cmd_sample_ctrl>:
{
    5238:	b500      	push	{lr}
		sample = true;
    523a:	4b0f      	ldr	r3, [pc, #60]	; (5278 <cmd_sample_ctrl+0x40>)
		sampleTime = atoi(argv[1]);
    523c:	6850      	ldr	r0, [r2, #4]
		sample = true;
    523e:	2101      	movs	r1, #1
{
    5240:	b089      	sub	sp, #36	; 0x24
		sample = true;
    5242:	7019      	strb	r1, [r3, #0]
		sampleTime = atoi(argv[1]);
    5244:	f023 f904 	bl	28450 <atoi>
    5248:	4b0c      	ldr	r3, [pc, #48]	; (527c <cmd_sample_ctrl+0x44>)
    524a:	8018      	strh	r0, [r3, #0]
	LOG_INF("Control sample");
    524c:	480c      	ldr	r0, [pc, #48]	; (5280 <cmd_sample_ctrl+0x48>)
    524e:	6803      	ldr	r3, [r0, #0]
    5250:	f003 0307 	and.w	r3, r3, #7
    5254:	2b02      	cmp	r3, #2
    5256:	d90b      	bls.n	5270 <cmd_sample_ctrl+0x38>
    5258:	4b0a      	ldr	r3, [pc, #40]	; (5284 <cmd_sample_ctrl+0x4c>)
    525a:	9306      	str	r3, [sp, #24]
    525c:	4b0a      	ldr	r3, [pc, #40]	; (5288 <cmd_sample_ctrl+0x50>)
    525e:	9307      	str	r3, [sp, #28]
    5260:	aa05      	add	r2, sp, #20
    5262:	2303      	movs	r3, #3
    5264:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5268:	9301      	str	r3, [sp, #4]
    526a:	9305      	str	r3, [sp, #20]
    526c:	f020 fbad 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    5270:	2000      	movs	r0, #0
    5272:	b009      	add	sp, #36	; 0x24
    5274:	f85d fb04 	ldr.w	pc, [sp], #4
    5278:	20005ebb 	.word	0x20005ebb
    527c:	20005e92 	.word	0x20005e92
    5280:	200009b0 	.word	0x200009b0
    5284:	0002df02 	.word	0x0002df02
    5288:	0002e25c 	.word	0x0002e25c

0000528c <cmd_dc_ctrl>:
{
    528c:	b500      	push	{lr}
		dc = true;
    528e:	4b0f      	ldr	r3, [pc, #60]	; (52cc <cmd_dc_ctrl+0x40>)
		dcVal = atoi(argv[1]);
    5290:	6850      	ldr	r0, [r2, #4]
		dc = true;
    5292:	2101      	movs	r1, #1
{
    5294:	b089      	sub	sp, #36	; 0x24
		dc = true;
    5296:	7019      	strb	r1, [r3, #0]
		dcVal = atoi(argv[1]);
    5298:	f023 f8da 	bl	28450 <atoi>
    529c:	4b0c      	ldr	r3, [pc, #48]	; (52d0 <cmd_dc_ctrl+0x44>)
    529e:	7018      	strb	r0, [r3, #0]
	LOG_INF("Control DC");
    52a0:	480c      	ldr	r0, [pc, #48]	; (52d4 <cmd_dc_ctrl+0x48>)
    52a2:	6803      	ldr	r3, [r0, #0]
    52a4:	f003 0307 	and.w	r3, r3, #7
    52a8:	2b02      	cmp	r3, #2
    52aa:	d90b      	bls.n	52c4 <cmd_dc_ctrl+0x38>
    52ac:	4b0a      	ldr	r3, [pc, #40]	; (52d8 <cmd_dc_ctrl+0x4c>)
    52ae:	9306      	str	r3, [sp, #24]
    52b0:	4b0a      	ldr	r3, [pc, #40]	; (52dc <cmd_dc_ctrl+0x50>)
    52b2:	9307      	str	r3, [sp, #28]
    52b4:	aa05      	add	r2, sp, #20
    52b6:	2303      	movs	r3, #3
    52b8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    52bc:	9301      	str	r3, [sp, #4]
    52be:	9305      	str	r3, [sp, #20]
    52c0:	f020 fb83 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    52c4:	2000      	movs	r0, #0
    52c6:	b009      	add	sp, #36	; 0x24
    52c8:	f85d fb04 	ldr.w	pc, [sp], #4
    52cc:	20005eb4 	.word	0x20005eb4
    52d0:	20005eb5 	.word	0x20005eb5
    52d4:	200009b0 	.word	0x200009b0
    52d8:	0002df15 	.word	0x0002df15
    52dc:	0002e26c 	.word	0x0002e26c

000052e0 <cmd_rgb_ctrl>:
{
    52e0:	b510      	push	{r4, lr}
		ledCom = true;
    52e2:	4b36      	ldr	r3, [pc, #216]	; (53bc <cmd_rgb_ctrl+0xdc>)
		if(argv[1][0] == 'o') {
    52e4:	6852      	ldr	r2, [r2, #4]
			LOG_ERR("Invalid Command");
    52e6:	4836      	ldr	r0, [pc, #216]	; (53c0 <cmd_rgb_ctrl+0xe0>)
		ledCom = true;
    52e8:	2401      	movs	r4, #1
    52ea:	701c      	strb	r4, [r3, #0]
		if(argv[1][0] == 'o') {
    52ec:	7811      	ldrb	r1, [r2, #0]
			LOG_ERR("Invalid Command");
    52ee:	6803      	ldr	r3, [r0, #0]
		if(argv[1][0] == 'o') {
    52f0:	296f      	cmp	r1, #111	; 0x6f
{
    52f2:	b088      	sub	sp, #32
			LOG_ERR("Invalid Command");
    52f4:	f003 0307 	and.w	r3, r3, #7
		if(argv[1][0] == 'o') {
    52f8:	d11a      	bne.n	5330 <cmd_rgb_ctrl+0x50>
			redOn = true;
    52fa:	4932      	ldr	r1, [pc, #200]	; (53c4 <cmd_rgb_ctrl+0xe4>)
    52fc:	700c      	strb	r4, [r1, #0]
		if(argv[1][1] == 'o') {
    52fe:	7851      	ldrb	r1, [r2, #1]
    5300:	296f      	cmp	r1, #111	; 0x6f
    5302:	d133      	bne.n	536c <cmd_rgb_ctrl+0x8c>
			greenOn = true;
    5304:	4930      	ldr	r1, [pc, #192]	; (53c8 <cmd_rgb_ctrl+0xe8>)
    5306:	2001      	movs	r0, #1
			greenOn = false;
    5308:	7008      	strb	r0, [r1, #0]
		if(argv[1][2] == 'o') {
    530a:	7892      	ldrb	r2, [r2, #2]
    530c:	2a6f      	cmp	r2, #111	; 0x6f
    530e:	d13a      	bne.n	5386 <cmd_rgb_ctrl+0xa6>
			blueOn = true;
    5310:	4a2e      	ldr	r2, [pc, #184]	; (53cc <cmd_rgb_ctrl+0xec>)
    5312:	2101      	movs	r1, #1
			blueOn = false;
    5314:	7011      	strb	r1, [r2, #0]
	LOG_INF("Control RGB");
    5316:	2b02      	cmp	r3, #2
    5318:	d925      	bls.n	5366 <cmd_rgb_ctrl+0x86>
    531a:	4b2d      	ldr	r3, [pc, #180]	; (53d0 <cmd_rgb_ctrl+0xf0>)
    531c:	9306      	str	r3, [sp, #24]
    531e:	4b2d      	ldr	r3, [pc, #180]	; (53d4 <cmd_rgb_ctrl+0xf4>)
    5320:	9307      	str	r3, [sp, #28]
    5322:	2303      	movs	r3, #3
    5324:	9301      	str	r3, [sp, #4]
    5326:	9305      	str	r3, [sp, #20]
    5328:	aa05      	add	r2, sp, #20
    532a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    532e:	e043      	b.n	53b8 <cmd_rgb_ctrl+0xd8>
		} else if(argv[1][0] == 'f') {
    5330:	2966      	cmp	r1, #102	; 0x66
    5332:	d103      	bne.n	533c <cmd_rgb_ctrl+0x5c>
			redOn = false;
    5334:	4923      	ldr	r1, [pc, #140]	; (53c4 <cmd_rgb_ctrl+0xe4>)
    5336:	2000      	movs	r0, #0
    5338:	7008      	strb	r0, [r1, #0]
    533a:	e7e0      	b.n	52fe <cmd_rgb_ctrl+0x1e>
		} else if(argv[1][0] == 't') {
    533c:	2974      	cmp	r1, #116	; 0x74
    533e:	d105      	bne.n	534c <cmd_rgb_ctrl+0x6c>
			redOn = !redOn;
    5340:	4820      	ldr	r0, [pc, #128]	; (53c4 <cmd_rgb_ctrl+0xe4>)
    5342:	7801      	ldrb	r1, [r0, #0]
    5344:	f081 0101 	eor.w	r1, r1, #1
    5348:	7001      	strb	r1, [r0, #0]
    534a:	e7d8      	b.n	52fe <cmd_rgb_ctrl+0x1e>
			LOG_ERR("Invalid Command");
    534c:	b15b      	cbz	r3, 5366 <cmd_rgb_ctrl+0x86>
    534e:	4b22      	ldr	r3, [pc, #136]	; (53d8 <cmd_rgb_ctrl+0xf8>)
    5350:	9306      	str	r3, [sp, #24]
    5352:	4b20      	ldr	r3, [pc, #128]	; (53d4 <cmd_rgb_ctrl+0xf4>)
    5354:	9307      	str	r3, [sp, #28]
    5356:	2303      	movs	r3, #3
    5358:	9301      	str	r3, [sp, #4]
    535a:	9305      	str	r3, [sp, #20]
    535c:	aa05      	add	r2, sp, #20
    535e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	LOG_INF("Control RGB");
    5362:	f020 fb32 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    5366:	2000      	movs	r0, #0
    5368:	b008      	add	sp, #32
    536a:	bd10      	pop	{r4, pc}
		} else if(argv[1][1] == 'f') {
    536c:	2966      	cmp	r1, #102	; 0x66
    536e:	d102      	bne.n	5376 <cmd_rgb_ctrl+0x96>
			greenOn = false;
    5370:	4915      	ldr	r1, [pc, #84]	; (53c8 <cmd_rgb_ctrl+0xe8>)
    5372:	2000      	movs	r0, #0
    5374:	e7c8      	b.n	5308 <cmd_rgb_ctrl+0x28>
		} else if(argv[1][1] == 't') {
    5376:	2974      	cmp	r1, #116	; 0x74
    5378:	d112      	bne.n	53a0 <cmd_rgb_ctrl+0xc0>
			 greenOn= !greenOn;
    537a:	4813      	ldr	r0, [pc, #76]	; (53c8 <cmd_rgb_ctrl+0xe8>)
    537c:	7801      	ldrb	r1, [r0, #0]
    537e:	f081 0101 	eor.w	r1, r1, #1
    5382:	7001      	strb	r1, [r0, #0]
    5384:	e7c1      	b.n	530a <cmd_rgb_ctrl+0x2a>
		} else if(argv[1][2] == 'f') {
    5386:	2a66      	cmp	r2, #102	; 0x66
    5388:	d102      	bne.n	5390 <cmd_rgb_ctrl+0xb0>
			blueOn = false;
    538a:	4a10      	ldr	r2, [pc, #64]	; (53cc <cmd_rgb_ctrl+0xec>)
    538c:	2100      	movs	r1, #0
    538e:	e7c1      	b.n	5314 <cmd_rgb_ctrl+0x34>
		} else if(argv[1][2] == 't') {
    5390:	2a74      	cmp	r2, #116	; 0x74
    5392:	d105      	bne.n	53a0 <cmd_rgb_ctrl+0xc0>
			 blueOn = !blueOn;
    5394:	490d      	ldr	r1, [pc, #52]	; (53cc <cmd_rgb_ctrl+0xec>)
    5396:	780a      	ldrb	r2, [r1, #0]
    5398:	f082 0201 	eor.w	r2, r2, #1
    539c:	700a      	strb	r2, [r1, #0]
    539e:	e7ba      	b.n	5316 <cmd_rgb_ctrl+0x36>
			LOG_ERR("Invalid Command");
    53a0:	2b00      	cmp	r3, #0
    53a2:	d0e0      	beq.n	5366 <cmd_rgb_ctrl+0x86>
    53a4:	4b0c      	ldr	r3, [pc, #48]	; (53d8 <cmd_rgb_ctrl+0xf8>)
    53a6:	9306      	str	r3, [sp, #24]
    53a8:	4b0a      	ldr	r3, [pc, #40]	; (53d4 <cmd_rgb_ctrl+0xf4>)
    53aa:	9307      	str	r3, [sp, #28]
    53ac:	2303      	movs	r3, #3
    53ae:	9301      	str	r3, [sp, #4]
    53b0:	9305      	str	r3, [sp, #20]
    53b2:	aa05      	add	r2, sp, #20
    53b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	LOG_INF("Control RGB");
    53b8:	4801      	ldr	r0, [pc, #4]	; (53c0 <cmd_rgb_ctrl+0xe0>)
    53ba:	e7d2      	b.n	5362 <cmd_rgb_ctrl+0x82>
    53bc:	20005eb9 	.word	0x20005eb9
    53c0:	200009b0 	.word	0x200009b0
    53c4:	20005eba 	.word	0x20005eba
    53c8:	20005eb6 	.word	0x20005eb6
    53cc:	20005eb0 	.word	0x20005eb0
    53d0:	0002df38 	.word	0x0002df38
    53d4:	0002e284 	.word	0x0002e284
    53d8:	0002df24 	.word	0x0002df24

000053dc <cmd_buzzer_ctrl>:
{
    53dc:	b500      	push	{lr}
		buzz = true;
    53de:	4b0f      	ldr	r3, [pc, #60]	; (541c <cmd_buzzer_ctrl+0x40>)
		buzzerFreq = atoi(argv[1]);
    53e0:	6850      	ldr	r0, [r2, #4]
		buzz = true;
    53e2:	2101      	movs	r1, #1
{
    53e4:	b089      	sub	sp, #36	; 0x24
		buzz = true;
    53e6:	7019      	strb	r1, [r3, #0]
		buzzerFreq = atoi(argv[1]);
    53e8:	f023 f832 	bl	28450 <atoi>
    53ec:	4b0c      	ldr	r3, [pc, #48]	; (5420 <cmd_buzzer_ctrl+0x44>)
    53ee:	8018      	strh	r0, [r3, #0]
	LOG_INF("Control Buzzer");
    53f0:	480c      	ldr	r0, [pc, #48]	; (5424 <cmd_buzzer_ctrl+0x48>)
    53f2:	6803      	ldr	r3, [r0, #0]
    53f4:	f003 0307 	and.w	r3, r3, #7
    53f8:	2b02      	cmp	r3, #2
    53fa:	d90b      	bls.n	5414 <cmd_buzzer_ctrl+0x38>
    53fc:	4b0a      	ldr	r3, [pc, #40]	; (5428 <cmd_buzzer_ctrl+0x4c>)
    53fe:	9306      	str	r3, [sp, #24]
    5400:	4b0a      	ldr	r3, [pc, #40]	; (542c <cmd_buzzer_ctrl+0x50>)
    5402:	9307      	str	r3, [sp, #28]
    5404:	aa05      	add	r2, sp, #20
    5406:	2303      	movs	r3, #3
    5408:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    540c:	9301      	str	r3, [sp, #4]
    540e:	9305      	str	r3, [sp, #20]
    5410:	f020 fadb 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    5414:	2000      	movs	r0, #0
    5416:	b009      	add	sp, #36	; 0x24
    5418:	f85d fb04 	ldr.w	pc, [sp], #4
    541c:	20005eb3 	.word	0x20005eb3
    5420:	20005e90 	.word	0x20005e90
    5424:	200009b0 	.word	0x200009b0
    5428:	0002df48 	.word	0x0002df48
    542c:	0002e291 	.word	0x0002e291

00005430 <cmd_pb_read>:
{
    5430:	b510      	push	{r4, lr}
		buttonCli = true;
    5432:	4b13      	ldr	r3, [pc, #76]	; (5480 <cmd_pb_read+0x50>)
    5434:	2201      	movs	r2, #1
{
    5436:	b088      	sub	sp, #32
    5438:	4604      	mov	r4, r0
		k_sleep(K_MSEC(waitTime));
    543a:	2100      	movs	r1, #0
    543c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		buttonCli = true;
    5440:	701a      	strb	r2, [r3, #0]
		k_sleep(K_MSEC(waitTime));
    5442:	f020 fad3 	bl	259ec <k_sleep.isra.0>
		shell_print(shell,"%d\n",button);
    5446:	4b0f      	ldr	r3, [pc, #60]	; (5484 <cmd_pb_read+0x54>)
    5448:	4a0f      	ldr	r2, [pc, #60]	; (5488 <cmd_pb_read+0x58>)
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	4620      	mov	r0, r4
    544e:	2108      	movs	r1, #8
    5450:	f021 fd2b 	bl	26eaa <shell_fprintf>
	LOG_INF("Read PB");
    5454:	480d      	ldr	r0, [pc, #52]	; (548c <cmd_pb_read+0x5c>)
    5456:	6803      	ldr	r3, [r0, #0]
    5458:	f003 0307 	and.w	r3, r3, #7
    545c:	2b02      	cmp	r3, #2
    545e:	d90b      	bls.n	5478 <cmd_pb_read+0x48>
    5460:	4b0b      	ldr	r3, [pc, #44]	; (5490 <cmd_pb_read+0x60>)
    5462:	9306      	str	r3, [sp, #24]
    5464:	4b0b      	ldr	r3, [pc, #44]	; (5494 <cmd_pb_read+0x64>)
    5466:	9307      	str	r3, [sp, #28]
    5468:	aa05      	add	r2, sp, #20
    546a:	2303      	movs	r3, #3
    546c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5470:	9301      	str	r3, [sp, #4]
    5472:	9305      	str	r3, [sp, #20]
    5474:	f020 faa9 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    5478:	2000      	movs	r0, #0
    547a:	b008      	add	sp, #32
    547c:	bd10      	pop	{r4, pc}
    547e:	bf00      	nop
    5480:	20005eb2 	.word	0x20005eb2
    5484:	20005eb1 	.word	0x20005eb1
    5488:	0002df5b 	.word	0x0002df5b
    548c:	200009b0 	.word	0x200009b0
    5490:	0002df60 	.word	0x0002df60
    5494:	0002e278 	.word	0x0002e278

00005498 <cmd_lis2dh_read>:
{
    5498:	b570      	push	{r4, r5, r6, lr}
	if (strcmp(argv[1],"x") == 0) {
    549a:	493e      	ldr	r1, [pc, #248]	; (5594 <cmd_lis2dh_read+0xfc>)
    549c:	4c3e      	ldr	r4, [pc, #248]	; (5598 <cmd_lis2dh_read+0x100>)
{
    549e:	b08a      	sub	sp, #40	; 0x28
    54a0:	4605      	mov	r5, r0
	if (strcmp(argv[1],"x") == 0) {
    54a2:	6850      	ldr	r0, [r2, #4]
{
    54a4:	4616      	mov	r6, r2
	if (strcmp(argv[1],"x") == 0) {
    54a6:	f023 f93d 	bl	28724 <strcmp>
    54aa:	bb38      	cbnz	r0, 54fc <cmd_lis2dh_read+0x64>
		xCli = true;
    54ac:	4b3b      	ldr	r3, [pc, #236]	; (559c <cmd_lis2dh_read+0x104>)
    54ae:	2201      	movs	r2, #1
		k_sleep(K_MSEC(waitTime));
    54b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    54b4:	2100      	movs	r1, #0
		xCli = true;
    54b6:	701a      	strb	r2, [r3, #0]
		k_sleep(K_MSEC(waitTime));
    54b8:	f020 fa98 	bl	259ec <k_sleep.isra.0>
		shell_print(shell,"%f m/s^2\n",xaccel);
    54bc:	4b38      	ldr	r3, [pc, #224]	; (55a0 <cmd_lis2dh_read+0x108>)
    54be:	6818      	ldr	r0, [r3, #0]
    54c0:	f7fb ff82 	bl	13c8 <__aeabi_f2d>
    54c4:	4a37      	ldr	r2, [pc, #220]	; (55a4 <cmd_lis2dh_read+0x10c>)
    54c6:	e9cd 0100 	strd	r0, r1, [sp]
    54ca:	2108      	movs	r1, #8
    54cc:	4628      	mov	r0, r5
    54ce:	f021 fcec 	bl	26eaa <shell_fprintf>
		LOG_INF("Read X Acceleration");
    54d2:	6823      	ldr	r3, [r4, #0]
    54d4:	f003 0307 	and.w	r3, r3, #7
    54d8:	2b02      	cmp	r3, #2
    54da:	d90c      	bls.n	54f6 <cmd_lis2dh_read+0x5e>
    54dc:	4b32      	ldr	r3, [pc, #200]	; (55a8 <cmd_lis2dh_read+0x110>)
		LOG_INF("Read Z Acceleration");
    54de:	9308      	str	r3, [sp, #32]
    54e0:	4b32      	ldr	r3, [pc, #200]	; (55ac <cmd_lis2dh_read+0x114>)
    54e2:	9309      	str	r3, [sp, #36]	; 0x24
    54e4:	2303      	movs	r3, #3
    54e6:	9303      	str	r3, [sp, #12]
    54e8:	9307      	str	r3, [sp, #28]
    54ea:	aa07      	add	r2, sp, #28
    54ec:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
		LOG_ERR("invalid command");
    54f0:	4620      	mov	r0, r4
    54f2:	f020 fa6a 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    54f6:	2000      	movs	r0, #0
    54f8:	b00a      	add	sp, #40	; 0x28
    54fa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strcmp(argv[1],"y") == 0) {
    54fc:	492c      	ldr	r1, [pc, #176]	; (55b0 <cmd_lis2dh_read+0x118>)
    54fe:	6870      	ldr	r0, [r6, #4]
    5500:	f023 f910 	bl	28724 <strcmp>
    5504:	b9c8      	cbnz	r0, 553a <cmd_lis2dh_read+0xa2>
		yCli = true;
    5506:	4b2b      	ldr	r3, [pc, #172]	; (55b4 <cmd_lis2dh_read+0x11c>)
    5508:	2201      	movs	r2, #1
		k_sleep(K_MSEC(waitTime));
    550a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    550e:	2100      	movs	r1, #0
		yCli = true;
    5510:	701a      	strb	r2, [r3, #0]
		k_sleep(K_MSEC(waitTime));
    5512:	f020 fa6b 	bl	259ec <k_sleep.isra.0>
		shell_print(shell,"%f m/s^2\n",yaccel);
    5516:	4b28      	ldr	r3, [pc, #160]	; (55b8 <cmd_lis2dh_read+0x120>)
    5518:	6818      	ldr	r0, [r3, #0]
    551a:	f7fb ff55 	bl	13c8 <__aeabi_f2d>
    551e:	4a21      	ldr	r2, [pc, #132]	; (55a4 <cmd_lis2dh_read+0x10c>)
    5520:	e9cd 0100 	strd	r0, r1, [sp]
    5524:	2108      	movs	r1, #8
    5526:	4628      	mov	r0, r5
    5528:	f021 fcbf 	bl	26eaa <shell_fprintf>
		LOG_INF("Read Y Acceleration");
    552c:	6823      	ldr	r3, [r4, #0]
    552e:	f003 0307 	and.w	r3, r3, #7
    5532:	2b02      	cmp	r3, #2
    5534:	d9df      	bls.n	54f6 <cmd_lis2dh_read+0x5e>
    5536:	4b21      	ldr	r3, [pc, #132]	; (55bc <cmd_lis2dh_read+0x124>)
    5538:	e7d1      	b.n	54de <cmd_lis2dh_read+0x46>
	} else if (strcmp(argv[1],"z") == 0) {
    553a:	4921      	ldr	r1, [pc, #132]	; (55c0 <cmd_lis2dh_read+0x128>)
    553c:	6870      	ldr	r0, [r6, #4]
    553e:	f023 f8f1 	bl	28724 <strcmp>
    5542:	b9c8      	cbnz	r0, 5578 <cmd_lis2dh_read+0xe0>
		zCli = true;
    5544:	4b1f      	ldr	r3, [pc, #124]	; (55c4 <cmd_lis2dh_read+0x12c>)
    5546:	2201      	movs	r2, #1
		k_sleep(K_MSEC(waitTime));
    5548:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    554c:	2100      	movs	r1, #0
		zCli = true;
    554e:	701a      	strb	r2, [r3, #0]
		k_sleep(K_MSEC(waitTime));
    5550:	f020 fa4c 	bl	259ec <k_sleep.isra.0>
		shell_print(shell,"%f m/s^2\n",zaccel);
    5554:	4b1c      	ldr	r3, [pc, #112]	; (55c8 <cmd_lis2dh_read+0x130>)
    5556:	6818      	ldr	r0, [r3, #0]
    5558:	f7fb ff36 	bl	13c8 <__aeabi_f2d>
    555c:	4a11      	ldr	r2, [pc, #68]	; (55a4 <cmd_lis2dh_read+0x10c>)
    555e:	e9cd 0100 	strd	r0, r1, [sp]
    5562:	2108      	movs	r1, #8
    5564:	4628      	mov	r0, r5
    5566:	f021 fca0 	bl	26eaa <shell_fprintf>
		LOG_INF("Read Z Acceleration");
    556a:	6823      	ldr	r3, [r4, #0]
    556c:	f003 0307 	and.w	r3, r3, #7
    5570:	2b02      	cmp	r3, #2
    5572:	d9c0      	bls.n	54f6 <cmd_lis2dh_read+0x5e>
    5574:	4b15      	ldr	r3, [pc, #84]	; (55cc <cmd_lis2dh_read+0x134>)
    5576:	e7b2      	b.n	54de <cmd_lis2dh_read+0x46>
		LOG_ERR("invalid command");
    5578:	6823      	ldr	r3, [r4, #0]
    557a:	075b      	lsls	r3, r3, #29
    557c:	d0bb      	beq.n	54f6 <cmd_lis2dh_read+0x5e>
    557e:	4b14      	ldr	r3, [pc, #80]	; (55d0 <cmd_lis2dh_read+0x138>)
    5580:	9308      	str	r3, [sp, #32]
    5582:	4b0a      	ldr	r3, [pc, #40]	; (55ac <cmd_lis2dh_read+0x114>)
    5584:	9309      	str	r3, [sp, #36]	; 0x24
    5586:	2303      	movs	r3, #3
    5588:	9303      	str	r3, [sp, #12]
    558a:	9307      	str	r3, [sp, #28]
    558c:	aa07      	add	r2, sp, #28
    558e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5592:	e7ad      	b.n	54f0 <cmd_lis2dh_read+0x58>
    5594:	0002fd63 	.word	0x0002fd63
    5598:	200009b0 	.word	0x200009b0
    559c:	20005ec0 	.word	0x20005ec0
    55a0:	2000395c 	.word	0x2000395c
    55a4:	0002df6c 	.word	0x0002df6c
    55a8:	0002df77 	.word	0x0002df77
    55ac:	0002e2a1 	.word	0x0002e2a1
    55b0:	00031ff2 	.word	0x00031ff2
    55b4:	20005ec1 	.word	0x20005ec1
    55b8:	20003960 	.word	0x20003960
    55bc:	0002df8f 	.word	0x0002df8f
    55c0:	0002dfa7 	.word	0x0002dfa7
    55c4:	20005ec2 	.word	0x20005ec2
    55c8:	20003964 	.word	0x20003964
    55cc:	0002dfa9 	.word	0x0002dfa9
    55d0:	0002ddfe 	.word	0x0002ddfe

000055d4 <cmd_ccs811_read>:
{
    55d4:	b510      	push	{r4, lr}
	vocCli = true;
    55d6:	4b13      	ldr	r3, [pc, #76]	; (5624 <cmd_ccs811_read+0x50>)
    55d8:	2201      	movs	r2, #1
{
    55da:	b088      	sub	sp, #32
    55dc:	4604      	mov	r4, r0
	k_sleep(K_MSEC(waitTime));
    55de:	2100      	movs	r1, #0
    55e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	vocCli = true;
    55e4:	701a      	strb	r2, [r3, #0]
	k_sleep(K_MSEC(waitTime));
    55e6:	f020 fa01 	bl	259ec <k_sleep.isra.0>
	shell_print(shell,"%d atm\n",voc);
    55ea:	4b0f      	ldr	r3, [pc, #60]	; (5628 <cmd_ccs811_read+0x54>)
    55ec:	4a0f      	ldr	r2, [pc, #60]	; (562c <cmd_ccs811_read+0x58>)
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	4620      	mov	r0, r4
    55f2:	2108      	movs	r1, #8
    55f4:	f021 fc59 	bl	26eaa <shell_fprintf>
	LOG_INF("Read VOC");
    55f8:	480d      	ldr	r0, [pc, #52]	; (5630 <cmd_ccs811_read+0x5c>)
    55fa:	6803      	ldr	r3, [r0, #0]
    55fc:	f003 0307 	and.w	r3, r3, #7
    5600:	2b02      	cmp	r3, #2
    5602:	d90b      	bls.n	561c <cmd_ccs811_read+0x48>
    5604:	4b0b      	ldr	r3, [pc, #44]	; (5634 <cmd_ccs811_read+0x60>)
    5606:	9306      	str	r3, [sp, #24]
    5608:	4b0b      	ldr	r3, [pc, #44]	; (5638 <cmd_ccs811_read+0x64>)
    560a:	9307      	str	r3, [sp, #28]
    560c:	aa05      	add	r2, sp, #20
    560e:	2303      	movs	r3, #3
    5610:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5614:	9301      	str	r3, [sp, #4]
    5616:	9305      	str	r3, [sp, #20]
    5618:	f020 f9d7 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    561c:	2000      	movs	r0, #0
    561e:	b008      	add	sp, #32
    5620:	bd10      	pop	{r4, pc}
    5622:	bf00      	nop
    5624:	20005ebf 	.word	0x20005ebf
    5628:	20005ebe 	.word	0x20005ebe
    562c:	0002dfc1 	.word	0x0002dfc1
    5630:	200009b0 	.word	0x200009b0
    5634:	0002dfca 	.word	0x0002dfca
    5638:	0002e2b1 	.word	0x0002e2b1

0000563c <cmd_lps22_read>:
{
    563c:	b510      	push	{r4, lr}
	apCli = true;
    563e:	4b13      	ldr	r3, [pc, #76]	; (568c <cmd_lps22_read+0x50>)
    5640:	2201      	movs	r2, #1
{
    5642:	b088      	sub	sp, #32
    5644:	4604      	mov	r4, r0
	k_sleep(K_MSEC(waitTime));
    5646:	2100      	movs	r1, #0
    5648:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	apCli = true;
    564c:	701a      	strb	r2, [r3, #0]
	k_sleep(K_MSEC(waitTime));
    564e:	f020 f9cd 	bl	259ec <k_sleep.isra.0>
	shell_print(shell,"%d kPA\n",airpressure);
    5652:	4b0f      	ldr	r3, [pc, #60]	; (5690 <cmd_lps22_read+0x54>)
    5654:	4a0f      	ldr	r2, [pc, #60]	; (5694 <cmd_lps22_read+0x58>)
    5656:	781b      	ldrb	r3, [r3, #0]
    5658:	4620      	mov	r0, r4
    565a:	2108      	movs	r1, #8
    565c:	f021 fc25 	bl	26eaa <shell_fprintf>
	LOG_INF("Read Pressure");
    5660:	480d      	ldr	r0, [pc, #52]	; (5698 <cmd_lps22_read+0x5c>)
    5662:	6803      	ldr	r3, [r0, #0]
    5664:	f003 0307 	and.w	r3, r3, #7
    5668:	2b02      	cmp	r3, #2
    566a:	d90b      	bls.n	5684 <cmd_lps22_read+0x48>
    566c:	4b0b      	ldr	r3, [pc, #44]	; (569c <cmd_lps22_read+0x60>)
    566e:	9306      	str	r3, [sp, #24]
    5670:	4b0b      	ldr	r3, [pc, #44]	; (56a0 <cmd_lps22_read+0x64>)
    5672:	9307      	str	r3, [sp, #28]
    5674:	aa05      	add	r2, sp, #20
    5676:	2303      	movs	r3, #3
    5678:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    567c:	9301      	str	r3, [sp, #4]
    567e:	9305      	str	r3, [sp, #20]
    5680:	f020 f9a3 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    5684:	2000      	movs	r0, #0
    5686:	b008      	add	sp, #32
    5688:	bd10      	pop	{r4, pc}
    568a:	bf00      	nop
    568c:	20005eaf 	.word	0x20005eaf
    5690:	20005eac 	.word	0x20005eac
    5694:	0002dfd7 	.word	0x0002dfd7
    5698:	200009b0 	.word	0x200009b0
    569c:	0002dfe0 	.word	0x0002dfe0
    56a0:	0002e1e4 	.word	0x0002e1e4

000056a4 <cmd_hts221_read>:
{
    56a4:	b570      	push	{r4, r5, r6, lr}
	if (strcmp(argv[1],"t") == 0) {
    56a6:	492b      	ldr	r1, [pc, #172]	; (5754 <cmd_hts221_read+0xb0>)
    56a8:	4c2b      	ldr	r4, [pc, #172]	; (5758 <cmd_hts221_read+0xb4>)
{
    56aa:	b088      	sub	sp, #32
    56ac:	4605      	mov	r5, r0
	if (strcmp(argv[1],"t") == 0) {
    56ae:	6850      	ldr	r0, [r2, #4]
{
    56b0:	4616      	mov	r6, r2
	if (strcmp(argv[1],"t") == 0) {
    56b2:	f023 f837 	bl	28724 <strcmp>
    56b6:	bb18      	cbnz	r0, 5700 <cmd_hts221_read+0x5c>
		tempCli = true;
    56b8:	4b28      	ldr	r3, [pc, #160]	; (575c <cmd_hts221_read+0xb8>)
    56ba:	2201      	movs	r2, #1
		k_sleep(K_MSEC(waitTime));
    56bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    56c0:	2100      	movs	r1, #0
		tempCli = true;
    56c2:	701a      	strb	r2, [r3, #0]
		k_sleep(K_MSEC(waitTime));
    56c4:	f020 f992 	bl	259ec <k_sleep.isra.0>
		shell_print(shell,"%d C\n",temp);
    56c8:	4b25      	ldr	r3, [pc, #148]	; (5760 <cmd_hts221_read+0xbc>)
    56ca:	4a26      	ldr	r2, [pc, #152]	; (5764 <cmd_hts221_read+0xc0>)
    56cc:	781b      	ldrb	r3, [r3, #0]
    56ce:	2108      	movs	r1, #8
    56d0:	4628      	mov	r0, r5
    56d2:	f021 fbea 	bl	26eaa <shell_fprintf>
		LOG_INF("Read Temperature");
    56d6:	6823      	ldr	r3, [r4, #0]
    56d8:	f003 0307 	and.w	r3, r3, #7
    56dc:	2b02      	cmp	r3, #2
    56de:	d90c      	bls.n	56fa <cmd_hts221_read+0x56>
    56e0:	4b21      	ldr	r3, [pc, #132]	; (5768 <cmd_hts221_read+0xc4>)
		LOG_INF("Read Humidity");
    56e2:	9306      	str	r3, [sp, #24]
    56e4:	4b21      	ldr	r3, [pc, #132]	; (576c <cmd_hts221_read+0xc8>)
    56e6:	9307      	str	r3, [sp, #28]
    56e8:	2303      	movs	r3, #3
    56ea:	9301      	str	r3, [sp, #4]
    56ec:	9305      	str	r3, [sp, #20]
    56ee:	aa05      	add	r2, sp, #20
    56f0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
		LOG_ERR("invalid command");
    56f4:	4620      	mov	r0, r4
    56f6:	f020 f968 	bl	259ca <z_log_msg2_static_create.constprop.0>
}
    56fa:	2000      	movs	r0, #0
    56fc:	b008      	add	sp, #32
    56fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strcmp(argv[1],"h") == 0) {
    5700:	491b      	ldr	r1, [pc, #108]	; (5770 <cmd_hts221_read+0xcc>)
    5702:	6870      	ldr	r0, [r6, #4]
    5704:	f023 f80e 	bl	28724 <strcmp>
    5708:	b9a8      	cbnz	r0, 5736 <cmd_hts221_read+0x92>
		humCli = true;
    570a:	4b1a      	ldr	r3, [pc, #104]	; (5774 <cmd_hts221_read+0xd0>)
    570c:	2201      	movs	r2, #1
		k_sleep(K_MSEC(waitTime));
    570e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    5712:	2100      	movs	r1, #0
		humCli = true;
    5714:	701a      	strb	r2, [r3, #0]
		k_sleep(K_MSEC(waitTime));
    5716:	f020 f969 	bl	259ec <k_sleep.isra.0>
		shell_print(shell,"%d %%\n",humidity);
    571a:	4b17      	ldr	r3, [pc, #92]	; (5778 <cmd_hts221_read+0xd4>)
    571c:	4a17      	ldr	r2, [pc, #92]	; (577c <cmd_hts221_read+0xd8>)
    571e:	781b      	ldrb	r3, [r3, #0]
    5720:	2108      	movs	r1, #8
    5722:	4628      	mov	r0, r5
    5724:	f021 fbc1 	bl	26eaa <shell_fprintf>
		LOG_INF("Read Humidity");
    5728:	6823      	ldr	r3, [r4, #0]
    572a:	f003 0307 	and.w	r3, r3, #7
    572e:	2b02      	cmp	r3, #2
    5730:	d9e3      	bls.n	56fa <cmd_hts221_read+0x56>
    5732:	4b13      	ldr	r3, [pc, #76]	; (5780 <cmd_hts221_read+0xdc>)
    5734:	e7d5      	b.n	56e2 <cmd_hts221_read+0x3e>
		LOG_ERR("invalid command");
    5736:	6823      	ldr	r3, [r4, #0]
    5738:	075b      	lsls	r3, r3, #29
    573a:	d0de      	beq.n	56fa <cmd_hts221_read+0x56>
    573c:	4b11      	ldr	r3, [pc, #68]	; (5784 <cmd_hts221_read+0xe0>)
    573e:	9306      	str	r3, [sp, #24]
    5740:	4b0a      	ldr	r3, [pc, #40]	; (576c <cmd_hts221_read+0xc8>)
    5742:	9307      	str	r3, [sp, #28]
    5744:	2303      	movs	r3, #3
    5746:	9301      	str	r3, [sp, #4]
    5748:	9305      	str	r3, [sp, #20]
    574a:	aa05      	add	r2, sp, #20
    574c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5750:	e7d0      	b.n	56f4 <cmd_hts221_read+0x50>
    5752:	bf00      	nop
    5754:	00030df3 	.word	0x00030df3
    5758:	200009b0 	.word	0x200009b0
    575c:	20005ebd 	.word	0x20005ebd
    5760:	20005ebc 	.word	0x20005ebc
    5764:	0002dff2 	.word	0x0002dff2
    5768:	0002dff9 	.word	0x0002dff9
    576c:	0002e1f3 	.word	0x0002e1f3
    5770:	0002efce 	.word	0x0002efce
    5774:	20005eb7 	.word	0x20005eb7
    5778:	20005eb8 	.word	0x20005eb8
    577c:	0002e00e 	.word	0x0002e00e
    5780:	0002e016 	.word	0x0002e016
    5784:	0002ddfe 	.word	0x0002ddfe

00005788 <cmd_time_formatted>:
{
    5788:	b5f0      	push	{r4, r5, r6, r7, lr}
    578a:	4605      	mov	r5, r0
    578c:	b097      	sub	sp, #92	; 0x5c
    578e:	f025 fd17 	bl	2b1c0 <z_impl_k_uptime_ticks>
    5792:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    5796:	fba0 0204 	umull	r0, r2, r0, r4
    579a:	fb04 2201 	mla	r2, r4, r1, r2
    579e:	0bc0      	lsrs	r0, r0, #15
	sprintf(time_str, "%d", k_uptime_get_32());
    57a0:	ea40 4242 	orr.w	r2, r0, r2, lsl #17
    57a4:	4913      	ldr	r1, [pc, #76]	; (57f4 <cmd_time_formatted+0x6c>)
    57a6:	a802      	add	r0, sp, #8
    57a8:	f007 f90e 	bl	c9c8 <sprintf>
	time_int = atoi(time_str);
    57ac:	a802      	add	r0, sp, #8
    57ae:	f022 fe4f 	bl	28450 <atoi>
	int seconds = (int) ((time_int / 1000) % 60);
    57b2:	263c      	movs	r6, #60	; 0x3c
    57b4:	fbb0 f4f4 	udiv	r4, r0, r4
	int hours   = (int) ((time_int / (1000*60*60)) % 24);
    57b8:	2318      	movs	r3, #24
	int seconds = (int) ((time_int / 1000) % 60);
    57ba:	fbb4 f2f6 	udiv	r2, r4, r6
	int hours   = (int) ((time_int / (1000*60*60)) % 24);
    57be:	490e      	ldr	r1, [pc, #56]	; (57f8 <cmd_time_formatted+0x70>)
    57c0:	fbb0 f1f1 	udiv	r1, r0, r1
	int seconds = (int) ((time_int / 1000) % 60);
    57c4:	fb06 4412 	mls	r4, r6, r2, r4
	int minutes = (int) ((time_int / (1000*60)) % 60);
    57c8:	f64e 2260 	movw	r2, #60000	; 0xea60
    57cc:	fbb0 f2f2 	udiv	r2, r0, r2
    57d0:	fbb2 f0f6 	udiv	r0, r2, r6
    57d4:	fb06 2210 	mls	r2, r6, r0, r2
	shell_print(shell,"%02d:%02d:%02d", hours, minutes, seconds);
    57d8:	9200      	str	r2, [sp, #0]
    57da:	4628      	mov	r0, r5
	int hours   = (int) ((time_int / (1000*60*60)) % 24);
    57dc:	fbb1 f7f3 	udiv	r7, r1, r3
	shell_print(shell,"%02d:%02d:%02d", hours, minutes, seconds);
    57e0:	4a06      	ldr	r2, [pc, #24]	; (57fc <cmd_time_formatted+0x74>)
    57e2:	9401      	str	r4, [sp, #4]
    57e4:	fb03 1317 	mls	r3, r3, r7, r1
    57e8:	2108      	movs	r1, #8
    57ea:	f021 fb5e 	bl	26eaa <shell_fprintf>
}
    57ee:	2000      	movs	r0, #0
    57f0:	b017      	add	sp, #92	; 0x5c
    57f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57f4:	000315e6 	.word	0x000315e6
    57f8:	0036ee80 	.word	0x0036ee80
    57fc:	0002e028 	.word	0x0002e028

00005800 <cli_init>:

/*
 * Sample app to init USB, and demonstrate shell functionality
 */
void cli_init(void)
{
    5800:	b570      	push	{r4, r5, r6, lr}
    5802:	b088      	sub	sp, #32
	int ret2;
	int ret3;

	/* Setup DTR */
	const struct device *shell_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_shell_uart));
	uint32_t dtr = 0;
    5804:	2000      	movs	r0, #0
    5806:	9000      	str	r0, [sp, #0]
	
	if (usb_enable(NULL))
    5808:	f005 f84e 	bl	a8a8 <usb_enable>
    580c:	2800      	cmp	r0, #0
    580e:	d145      	bne.n	589c <cli_init+0x9c>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    5810:	4c2a      	ldr	r4, [pc, #168]	; (58bc <cli_init+0xbc>)
	 * This is not necessary, however, can be useful from reading early data
	 *
	 * Remove the following while loop if DTR is not required!!
	 */
	
	while (!dtr) {
    5812:	9b00      	ldr	r3, [sp, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	d043      	beq.n	58a0 <cli_init+0xa0>
		k_sleep(K_MSEC(100));
	} 

	/* DTR - OK, Continue */

	dev1 = device_get_binding(LED1);
    5818:	4829      	ldr	r0, [pc, #164]	; (58c0 <cli_init+0xc0>)
    581a:	f020 f8d4 	bl	259c6 <device_get_binding>
	if (dev1 == NULL) {
    581e:	4606      	mov	r6, r0
    5820:	2800      	cmp	r0, #0
    5822:	d03b      	beq.n	589c <cli_init+0x9c>
		return;
	}
	dev2 = device_get_binding(LED2);
    5824:	4827      	ldr	r0, [pc, #156]	; (58c4 <cli_init+0xc4>)
    5826:	f020 f8ce 	bl	259c6 <device_get_binding>
	if (dev2 == NULL) {
    582a:	4605      	mov	r5, r0
    582c:	2800      	cmp	r0, #0
    582e:	d035      	beq.n	589c <cli_init+0x9c>
		return;
	}
	dev3 = device_get_binding(LED3);
    5830:	4823      	ldr	r0, [pc, #140]	; (58c0 <cli_init+0xc0>)
    5832:	f020 f8c8 	bl	259c6 <device_get_binding>
	if (dev3 == NULL) {
    5836:	4604      	mov	r4, r0
    5838:	b380      	cbz	r0, 589c <cli_init+0x9c>
		return;
	}

	ret1 = gpio_pin_configure(dev1, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    583a:	2108      	movs	r1, #8
    583c:	4630      	mov	r0, r6
    583e:	f020 f8c7 	bl	259d0 <gpio_pin_configure.constprop.0>
	if (ret1 < 0) {
    5842:	2800      	cmp	r0, #0
    5844:	db2a      	blt.n	589c <cli_init+0x9c>
		return;
	}
	ret2 = gpio_pin_configure(dev2, PIN2, GPIO_OUTPUT_ACTIVE | FLAGS2);
    5846:	2109      	movs	r1, #9
    5848:	4628      	mov	r0, r5
    584a:	f020 f8c1 	bl	259d0 <gpio_pin_configure.constprop.0>
	if (ret2 < 0) {
    584e:	2800      	cmp	r0, #0
    5850:	db24      	blt.n	589c <cli_init+0x9c>
		return;
	}
	ret3 = gpio_pin_configure(dev3, PIN3, GPIO_OUTPUT_ACTIVE | FLAGS3);
    5852:	210c      	movs	r1, #12
    5854:	4620      	mov	r0, r4
    5856:	f020 f8bb 	bl	259d0 <gpio_pin_configure.constprop.0>
	if (ret3 < 0) {
    585a:	2800      	cmp	r0, #0
    585c:	db1e      	blt.n	589c <cli_init+0x9c>
		return;
	}

	// Turn off all the LEDs
	gpio_pin_set(dev1, PIN1, 0);
    585e:	2200      	movs	r2, #0
    5860:	2108      	movs	r1, #8
    5862:	4630      	mov	r0, r6
    5864:	f020 f89f 	bl	259a6 <gpio_pin_set>
	gpio_pin_set(dev2, PIN2, 0);
    5868:	2200      	movs	r2, #0
    586a:	2109      	movs	r1, #9
    586c:	4628      	mov	r0, r5
    586e:	f020 f89a 	bl	259a6 <gpio_pin_set>
	gpio_pin_set(dev3, PIN3, 0);
    5872:	2200      	movs	r2, #0
    5874:	210c      	movs	r1, #12
    5876:	4620      	mov	r0, r4
    5878:	f020 f895 	bl	259a6 <gpio_pin_set>

	LOG_DBG("led init OK");
    587c:	4812      	ldr	r0, [pc, #72]	; (58c8 <cli_init+0xc8>)
    587e:	6803      	ldr	r3, [r0, #0]
    5880:	075b      	lsls	r3, r3, #29
    5882:	d50b      	bpl.n	589c <cli_init+0x9c>
    5884:	4b11      	ldr	r3, [pc, #68]	; (58cc <cli_init+0xcc>)
    5886:	9306      	str	r3, [sp, #24]
    5888:	4b11      	ldr	r3, [pc, #68]	; (58d0 <cli_init+0xd0>)
    588a:	9307      	str	r3, [sp, #28]
    588c:	aa05      	add	r2, sp, #20
    588e:	2303      	movs	r3, #3
    5890:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    5894:	9301      	str	r3, [sp, #4]
    5896:	9305      	str	r3, [sp, #20]
    5898:	f020 f897 	bl	259ca <z_log_msg2_static_create.constprop.0>
    589c:	b008      	add	sp, #32
    589e:	bd70      	pop	{r4, r5, r6, pc}
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    58a0:	68a3      	ldr	r3, [r4, #8]
    58a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    58a4:	b11b      	cbz	r3, 58ae <cli_init+0xae>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    58a6:	466a      	mov	r2, sp
    58a8:	2104      	movs	r1, #4
    58aa:	4620      	mov	r0, r4
    58ac:	4798      	blx	r3
		k_sleep(K_MSEC(100));
    58ae:	f640 40cd 	movw	r0, #3277	; 0xccd
    58b2:	2100      	movs	r1, #0
    58b4:	f020 f89a 	bl	259ec <k_sleep.isra.0>
    58b8:	e7ab      	b.n	5812 <cli_init+0x12>
    58ba:	bf00      	nop
    58bc:	0002b648 	.word	0x0002b648
    58c0:	0002dd66 	.word	0x0002dd66
    58c4:	0002dd6d 	.word	0x0002dd6d
    58c8:	200009b0 	.word	0x200009b0
    58cc:	0002e038 	.word	0x0002e038
    58d0:	0002e1c9 	.word	0x0002e1c9

000058d4 <scan_cb>:
 * @param buf variable which stores the advertised data
 */
static void scan_cb(const bt_addr_le_t *addr, int8_t rssi, uint8_t adv_type,
		    struct net_buf_simple *buf)

{	// counter stores the amount of values which match the desired address
    58d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    58d8:	461c      	mov	r4, r3
	int counter = 0;

	//desired thingy address
	uint8_t thingyad[6] = {0xEF,0x92,0x55,0xBB, 0x95, 0xFE};
    58da:	4b9a      	ldr	r3, [pc, #616]	; (5b44 <scan_cb+0x270>)
{	// counter stores the amount of values which match the desired address
    58dc:	b087      	sub	sp, #28
    58de:	4602      	mov	r2, r0
	uint8_t thingyad[6] = {0xEF,0x92,0x55,0xBB, 0x95, 0xFE};
    58e0:	6818      	ldr	r0, [r3, #0]
    58e2:	889b      	ldrh	r3, [r3, #4]
    58e4:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t thingyad2[6] = {0x9A,0x7A,0xC2,0x07, 0x7F, 0xE5};
    58e8:	4b97      	ldr	r3, [pc, #604]	; (5b48 <scan_cb+0x274>)
	uint8_t thingyad[6] = {0xEF,0x92,0x55,0xBB, 0x95, 0xFE};
    58ea:	9002      	str	r0, [sp, #8]
	uint8_t thingyad2[6] = {0x9A,0x7A,0xC2,0x07, 0x7F, 0xE5};
    58ec:	6818      	ldr	r0, [r3, #0]
    58ee:	889b      	ldrh	r3, [r3, #4]
    58f0:	f8ad 3014 	strh.w	r3, [sp, #20]

	// loops through device adress and compares it to thingy address
	for(int i = 0; i < 6; i++) {
    58f4:	1c53      	adds	r3, r2, #1
	uint8_t thingyad2[6] = {0x9A,0x7A,0xC2,0x07, 0x7F, 0xE5};
    58f6:	9004      	str	r0, [sp, #16]
    58f8:	ad02      	add	r5, sp, #8
    58fa:	3207      	adds	r2, #7
    58fc:	4618      	mov	r0, r3
	int counter = 0;
    58fe:	2100      	movs	r1, #0
		if(addr->a.val[i] == thingyad[i]) {
    5900:	f810 7b01 	ldrb.w	r7, [r0], #1
    5904:	f815 6b01 	ldrb.w	r6, [r5], #1
    5908:	42b7      	cmp	r7, r6
			counter++;
    590a:	bf08      	it	eq
    590c:	3101      	addeq	r1, #1
	for(int i = 0; i < 6; i++) {
    590e:	4290      	cmp	r0, r2
    5910:	d1f6      	bne.n	5900 <scan_cb+0x2c>
		}
	}

	// if all values in current addres match, thingy has been found
	if(counter == 6) {
    5912:	2906      	cmp	r1, #6
		thingyFound = true;
    5914:	bf02      	ittt	eq
    5916:	498d      	ldreq	r1, [pc, #564]	; (5b4c <scan_cb+0x278>)
    5918:	2001      	moveq	r0, #1
    591a:	7008      	strbeq	r0, [r1, #0]

	//reset the counter
	counter = 0;

	// loops through device adress and compares it to thingy address
	for(int i = 0; i < 6; i++) {
    591c:	a804      	add	r0, sp, #16
	counter = 0;
    591e:	2100      	movs	r1, #0
		if(addr->a.val[i] == thingyad2[i]) {
    5920:	f813 6b01 	ldrb.w	r6, [r3], #1
    5924:	f810 5b01 	ldrb.w	r5, [r0], #1
    5928:	42ae      	cmp	r6, r5
			counter++;
    592a:	bf08      	it	eq
    592c:	3101      	addeq	r1, #1
	for(int i = 0; i < 6; i++) {
    592e:	4293      	cmp	r3, r2
    5930:	d1f6      	bne.n	5920 <scan_cb+0x4c>
		}
	}

	// if all values in current addres match, thingy has been found
	if(counter == 6) {
    5932:	2906      	cmp	r1, #6
    5934:	4e85      	ldr	r6, [pc, #532]	; (5b4c <scan_cb+0x278>)
    5936:	f040 81b4 	bne.w	5ca2 <scan_cb+0x3ce>
		thingyFound = true;
    593a:	2301      	movs	r3, #1
    593c:	7033      	strb	r3, [r6, #0]
	}
	counter = 0;

	// if thingy was found and check requests
	if (thingyFound) {
		if(tempRequest) {
    593e:	4b84      	ldr	r3, [pc, #528]	; (5b50 <scan_cb+0x27c>)
    5940:	781a      	ldrb	r2, [r3, #0]
    5942:	b142      	cbz	r2, 5956 <scan_cb+0x82>
			if(buf->data[sensorId] == 0x02) {
    5944:	6822      	ldr	r2, [r4, #0]
    5946:	7951      	ldrb	r1, [r2, #5]
    5948:	2902      	cmp	r1, #2
    594a:	d104      	bne.n	5956 <scan_cb+0x82>
				tempVal = buf->data[sensorVal];
    594c:	79d1      	ldrb	r1, [r2, #7]
    594e:	4a81      	ldr	r2, [pc, #516]	; (5b54 <scan_cb+0x280>)
    5950:	7011      	strb	r1, [r2, #0]
				tempRequest = false;
    5952:	2200      	movs	r2, #0
    5954:	701a      	strb	r2, [r3, #0]
			}
		}
		if(humRequest) {
    5956:	4b80      	ldr	r3, [pc, #512]	; (5b58 <scan_cb+0x284>)
    5958:	781a      	ldrb	r2, [r3, #0]
    595a:	b142      	cbz	r2, 596e <scan_cb+0x9a>
			if(buf->data[sensorId] == 0x02) {
    595c:	6822      	ldr	r2, [r4, #0]
    595e:	7951      	ldrb	r1, [r2, #5]
    5960:	2902      	cmp	r1, #2
    5962:	d104      	bne.n	596e <scan_cb+0x9a>
				humVal = buf->data[sensorVal];
    5964:	79d1      	ldrb	r1, [r2, #7]
    5966:	4a7d      	ldr	r2, [pc, #500]	; (5b5c <scan_cb+0x288>)
    5968:	7011      	strb	r1, [r2, #0]
				humRequest = false;
    596a:	2200      	movs	r2, #0
    596c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(apRequest) {
    596e:	4b7c      	ldr	r3, [pc, #496]	; (5b60 <scan_cb+0x28c>)
    5970:	781a      	ldrb	r2, [r3, #0]
    5972:	b142      	cbz	r2, 5986 <scan_cb+0xb2>
			if(buf->data[sensorId] == 0x02) {
    5974:	6822      	ldr	r2, [r4, #0]
    5976:	7951      	ldrb	r1, [r2, #5]
    5978:	2902      	cmp	r1, #2
    597a:	d104      	bne.n	5986 <scan_cb+0xb2>
				 apVal = buf->data[sensorVal];
    597c:	79d1      	ldrb	r1, [r2, #7]
    597e:	4a79      	ldr	r2, [pc, #484]	; (5b64 <scan_cb+0x290>)
    5980:	7011      	strb	r1, [r2, #0]
				 apRequest = false;
    5982:	2200      	movs	r2, #0
    5984:	701a      	strb	r2, [r3, #0]
			}
		 }
		if(vocRequest) {
    5986:	4b78      	ldr	r3, [pc, #480]	; (5b68 <scan_cb+0x294>)
    5988:	781a      	ldrb	r2, [r3, #0]
    598a:	b142      	cbz	r2, 599e <scan_cb+0xca>
			if(buf->data[sensorId] == 0x02) {
    598c:	6822      	ldr	r2, [r4, #0]
    598e:	7951      	ldrb	r1, [r2, #5]
    5990:	2902      	cmp	r1, #2
    5992:	d104      	bne.n	599e <scan_cb+0xca>
				vocVal = buf->data[sensorVal];
    5994:	79d1      	ldrb	r1, [r2, #7]
    5996:	4a75      	ldr	r2, [pc, #468]	; (5b6c <scan_cb+0x298>)
    5998:	7011      	strb	r1, [r2, #0]
				vocRequest = false;
    599a:	2200      	movs	r2, #0
    599c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(xRequest) {
    599e:	4a74      	ldr	r2, [pc, #464]	; (5b70 <scan_cb+0x29c>)
    59a0:	7813      	ldrb	r3, [r2, #0]
    59a2:	b303      	cbz	r3, 59e6 <scan_cb+0x112>
			if(buf->data[sensorId] == 0x02) {
    59a4:	6823      	ldr	r3, [r4, #0]
    59a6:	795b      	ldrb	r3, [r3, #5]
    59a8:	2b02      	cmp	r3, #2
    59aa:	d11c      	bne.n	59e6 <scan_cb+0x112>
    59ac:	4971      	ldr	r1, [pc, #452]	; (5b74 <scan_cb+0x2a0>)
    59ae:	2307      	movs	r3, #7
				for(int i = 0; i < 4; i++) {
					xvals[i] = buf->data[sensorVal+i];
    59b0:	6820      	ldr	r0, [r4, #0]
    59b2:	5cc0      	ldrb	r0, [r0, r3]
    59b4:	f801 0b01 	strb.w	r0, [r1], #1
				for(int i = 0; i < 4; i++) {
    59b8:	3301      	adds	r3, #1
    59ba:	2b0b      	cmp	r3, #11
    59bc:	d1f8      	bne.n	59b0 <scan_cb+0xdc>
				}
				xRequest = false;
    59be:	2300      	movs	r3, #0
				xVal = hextofloat(xvals);
    59c0:	486c      	ldr	r0, [pc, #432]	; (5b74 <scan_cb+0x2a0>)
				xRequest = false;
    59c2:	7013      	strb	r3, [r2, #0]
				xVal = hextofloat(xvals);
    59c4:	f020 f814 	bl	259f0 <hextofloat>
    59c8:	f7fb fcfe 	bl	13c8 <__aeabi_f2d>
    59cc:	4d6a      	ldr	r5, [pc, #424]	; (5b78 <scan_cb+0x2a4>)
    59ce:	460b      	mov	r3, r1
    59d0:	4602      	mov	r2, r0
    59d2:	e9c5 2300 	strd	r2, r3, [r5]
				if(buf -> data[sensorId + 1] == 17) {
    59d6:	6823      	ldr	r3, [r4, #0]
    59d8:	799b      	ldrb	r3, [r3, #6]
    59da:	2b11      	cmp	r3, #17
					xVal = xVal * -1;
    59dc:	bf02      	ittt	eq
    59de:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    59e2:	6028      	streq	r0, [r5, #0]
    59e4:	6069      	streq	r1, [r5, #4]
				}
			 }
		}
		if(yRequest) {
    59e6:	4a65      	ldr	r2, [pc, #404]	; (5b7c <scan_cb+0x2a8>)
    59e8:	7813      	ldrb	r3, [r2, #0]
    59ea:	b303      	cbz	r3, 5a2e <scan_cb+0x15a>
			if(buf->data[sensorId] == 0x02) {
    59ec:	6823      	ldr	r3, [r4, #0]
    59ee:	795b      	ldrb	r3, [r3, #5]
    59f0:	2b02      	cmp	r3, #2
    59f2:	d11c      	bne.n	5a2e <scan_cb+0x15a>
    59f4:	4962      	ldr	r1, [pc, #392]	; (5b80 <scan_cb+0x2ac>)
    59f6:	2307      	movs	r3, #7
				for(int i = 0; i < 4; i++) {
					yvals[i] = buf->data[sensorVal+i];
    59f8:	6820      	ldr	r0, [r4, #0]
    59fa:	5cc0      	ldrb	r0, [r0, r3]
    59fc:	f801 0b01 	strb.w	r0, [r1], #1
				for(int i = 0; i < 4; i++) {
    5a00:	3301      	adds	r3, #1
    5a02:	2b0b      	cmp	r3, #11
    5a04:	d1f8      	bne.n	59f8 <scan_cb+0x124>
				}
				yRequest = false;
    5a06:	2300      	movs	r3, #0
				yVal = hextofloat(yvals);
    5a08:	485d      	ldr	r0, [pc, #372]	; (5b80 <scan_cb+0x2ac>)
				yRequest = false;
    5a0a:	7013      	strb	r3, [r2, #0]
				yVal = hextofloat(yvals);
    5a0c:	f01f fff0 	bl	259f0 <hextofloat>
    5a10:	f7fb fcda 	bl	13c8 <__aeabi_f2d>
    5a14:	4d5b      	ldr	r5, [pc, #364]	; (5b84 <scan_cb+0x2b0>)
    5a16:	460b      	mov	r3, r1
    5a18:	4602      	mov	r2, r0
    5a1a:	e9c5 2300 	strd	r2, r3, [r5]
				if(buf -> data[sensorId + 1] == 17) {
    5a1e:	6823      	ldr	r3, [r4, #0]
    5a20:	799b      	ldrb	r3, [r3, #6]
    5a22:	2b11      	cmp	r3, #17
					yVal = yVal * -1;
    5a24:	bf02      	ittt	eq
    5a26:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    5a2a:	6028      	streq	r0, [r5, #0]
    5a2c:	6069      	streq	r1, [r5, #4]
				}
			}
		}
		if(zRequest) {
    5a2e:	4a56      	ldr	r2, [pc, #344]	; (5b88 <scan_cb+0x2b4>)
    5a30:	7813      	ldrb	r3, [r2, #0]
    5a32:	b1b3      	cbz	r3, 5a62 <scan_cb+0x18e>
			if(buf->data[sensorId] == 0x02) {
    5a34:	6823      	ldr	r3, [r4, #0]
    5a36:	795b      	ldrb	r3, [r3, #5]
    5a38:	2b02      	cmp	r3, #2
    5a3a:	d112      	bne.n	5a62 <scan_cb+0x18e>
    5a3c:	4953      	ldr	r1, [pc, #332]	; (5b8c <scan_cb+0x2b8>)
    5a3e:	2307      	movs	r3, #7
				for(int i = 0; i < 4; i++) {
					zvals[i] = buf->data[sensorVal+i];
    5a40:	6820      	ldr	r0, [r4, #0]
    5a42:	5cc0      	ldrb	r0, [r0, r3]
    5a44:	f801 0b01 	strb.w	r0, [r1], #1
				for(int i = 0; i < 4; i++) {
    5a48:	3301      	adds	r3, #1
    5a4a:	2b0b      	cmp	r3, #11
    5a4c:	d1f8      	bne.n	5a40 <scan_cb+0x16c>
				}
				zRequest = false;
    5a4e:	2300      	movs	r3, #0
				zVal = hextofloat(zvals);
    5a50:	484e      	ldr	r0, [pc, #312]	; (5b8c <scan_cb+0x2b8>)
				zRequest = false;
    5a52:	7013      	strb	r3, [r2, #0]
				zVal = hextofloat(zvals);
    5a54:	f01f ffcc 	bl	259f0 <hextofloat>
    5a58:	f7fb fcb6 	bl	13c8 <__aeabi_f2d>
    5a5c:	4b4c      	ldr	r3, [pc, #304]	; (5b90 <scan_cb+0x2bc>)
    5a5e:	e9c3 0100 	strd	r0, r1, [r3]
			}
		}
		if(butRequest) {
    5a62:	4b4c      	ldr	r3, [pc, #304]	; (5b94 <scan_cb+0x2c0>)
    5a64:	781a      	ldrb	r2, [r3, #0]
    5a66:	b142      	cbz	r2, 5a7a <scan_cb+0x1a6>
			if(buf->data[sensorId] == 0x02) {
    5a68:	6822      	ldr	r2, [r4, #0]
    5a6a:	7951      	ldrb	r1, [r2, #5]
    5a6c:	2902      	cmp	r1, #2
    5a6e:	d104      	bne.n	5a7a <scan_cb+0x1a6>
				butVal = buf->data[sensorVal];
    5a70:	79d1      	ldrb	r1, [r2, #7]
    5a72:	4a49      	ldr	r2, [pc, #292]	; (5b98 <scan_cb+0x2c4>)
    5a74:	7011      	strb	r1, [r2, #0]
				butRequest = false;
    5a76:	2200      	movs	r2, #0
    5a78:	701a      	strb	r2, [r3, #0]
			}
		}
		if(ledRequest) {
    5a7a:	4948      	ldr	r1, [pc, #288]	; (5b9c <scan_cb+0x2c8>)
    5a7c:	780b      	ldrb	r3, [r1, #0]
    5a7e:	b14b      	cbz	r3, 5a94 <scan_cb+0x1c0>
			if(buf->data[sensorId] == 0x02) {
    5a80:	6823      	ldr	r3, [r4, #0]
    5a82:	795b      	ldrb	r3, [r3, #5]
    5a84:	2b02      	cmp	r3, #2
    5a86:	d105      	bne.n	5a94 <scan_cb+0x1c0>
				requestLed[4] = 0;
    5a88:	4a45      	ldr	r2, [pc, #276]	; (5ba0 <scan_cb+0x2cc>)
    5a8a:	2300      	movs	r3, #0
    5a8c:	7113      	strb	r3, [r2, #4]
        		requestLed[5] = 0;
    5a8e:	7153      	strb	r3, [r2, #5]
        		requestLed[6] = 0;
    5a90:	7193      	strb	r3, [r2, #6]
				ledRequest = false;
    5a92:	700b      	strb	r3, [r1, #0]
			}
		}
		if(buzzReq) {
    5a94:	4b43      	ldr	r3, [pc, #268]	; (5ba4 <scan_cb+0x2d0>)
    5a96:	781a      	ldrb	r2, [r3, #0]
    5a98:	b12a      	cbz	r2, 5aa6 <scan_cb+0x1d2>
			if(buf->data[sensorId] == 0x02) {
    5a9a:	6822      	ldr	r2, [r4, #0]
    5a9c:	7952      	ldrb	r2, [r2, #5]
    5a9e:	2a02      	cmp	r2, #2
				buzzReq = false;
    5aa0:	bf04      	itt	eq
    5aa2:	2200      	moveq	r2, #0
    5aa4:	701a      	strbeq	r2, [r3, #0]
			}
		}
		if(dcReq) {
    5aa6:	4b40      	ldr	r3, [pc, #256]	; (5ba8 <scan_cb+0x2d4>)
    5aa8:	781a      	ldrb	r2, [r3, #0]
    5aaa:	b12a      	cbz	r2, 5ab8 <scan_cb+0x1e4>
			if(buf->data[sensorId] == 0x02) {
    5aac:	6822      	ldr	r2, [r4, #0]
    5aae:	7952      	ldrb	r2, [r2, #5]
    5ab0:	2a02      	cmp	r2, #2
				dcReq = false;
    5ab2:	bf04      	itt	eq
    5ab4:	2200      	moveq	r2, #0
    5ab6:	701a      	strbeq	r2, [r3, #0]
			}
		}
		if(sampleReq) {
    5ab8:	4b3c      	ldr	r3, [pc, #240]	; (5bac <scan_cb+0x2d8>)
    5aba:	781a      	ldrb	r2, [r3, #0]
    5abc:	b12a      	cbz	r2, 5aca <scan_cb+0x1f6>
			if(buf->data[sensorId] == 0x02) {
    5abe:	6822      	ldr	r2, [r4, #0]
    5ac0:	7952      	ldrb	r2, [r2, #5]
    5ac2:	2a02      	cmp	r2, #2
				sampleReq = false;
    5ac4:	bf04      	itt	eq
    5ac6:	2200      	moveq	r2, #0
    5ac8:	701a      	strbeq	r2, [r3, #0]
			}
		}
		if(sampleT || sampleOn) {
    5aca:	4b39      	ldr	r3, [pc, #228]	; (5bb0 <scan_cb+0x2dc>)
    5acc:	781a      	ldrb	r2, [r3, #0]
    5ace:	b922      	cbnz	r2, 5ada <scan_cb+0x206>
    5ad0:	4a38      	ldr	r2, [pc, #224]	; (5bb4 <scan_cb+0x2e0>)
    5ad2:	7812      	ldrb	r2, [r2, #0]
    5ad4:	2a00      	cmp	r2, #0
    5ad6:	f000 80e1 	beq.w	5c9c <scan_cb+0x3c8>
			if(buf->data[sensorId] == 0x02) {
    5ada:	6822      	ldr	r2, [r4, #0]
    5adc:	7952      	ldrb	r2, [r2, #5]
    5ade:	2a02      	cmp	r2, #2
    5ae0:	f040 80dc 	bne.w	5c9c <scan_cb+0x3c8>
				sampleT = false;
    5ae4:	2500      	movs	r5, #0
    5ae6:	701d      	strb	r5, [r3, #0]
    5ae8:	f025 fb6a 	bl	2b1c0 <z_impl_k_uptime_ticks>
    5aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5af0:	fba0 0302 	umull	r0, r3, r0, r2
    5af4:	fb02 3301 	mla	r3, r2, r1, r3
    5af8:	0bc0      	lsrs	r0, r0, #15
				time = k_uptime_get_32();
				uint8_t d1[4] = {0,0,0,0};
				if(sampleCount > 95) {
    5afa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5bb8 <scan_cb+0x2e4>
					sampleCount = 0;
				}
				allData[0][sampleCount] = buf->data[sensorVal - 1];
    5afe:	6824      	ldr	r4, [r4, #0]
    5b00:	4f2e      	ldr	r7, [pc, #184]	; (5bbc <scan_cb+0x2e8>)
				uint8_t d1[4] = {0,0,0,0};
    5b02:	9501      	str	r5, [sp, #4]
    5b04:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
	return (uint32_t)k_uptime_get();
    5b08:	4b2d      	ldr	r3, [pc, #180]	; (5bc0 <scan_cb+0x2ec>)
    5b0a:	6018      	str	r0, [r3, #0]
				if(sampleCount > 95) {
    5b0c:	f8d8 3000 	ldr.w	r3, [r8]
				allData[0][sampleCount] = buf->data[sensorVal - 1];
    5b10:	79a0      	ldrb	r0, [r4, #6]
				if(sampleCount > 95) {
    5b12:	2b5f      	cmp	r3, #95	; 0x5f
					sampleCount = 0;
    5b14:	bfc8      	it	gt
    5b16:	f8c8 5000 	strgt.w	r5, [r8]
				allData[0][sampleCount] = buf->data[sensorVal - 1];
    5b1a:	f8d8 5000 	ldr.w	r5, [r8]
    5b1e:	f7fb fc31 	bl	1384 <__aeabi_ui2d>
    5b22:	eb07 09c5 	add.w	r9, r7, r5, lsl #3
    5b26:	e9c9 0100 	strd	r0, r1, [r9]
				allData[1][sampleCount] = buf->data[sensorVal];
    5b2a:	79e0      	ldrb	r0, [r4, #7]
    5b2c:	f7fb fc2a 	bl	1384 <__aeabi_ui2d>
    5b30:	f105 0964 	add.w	r9, r5, #100	; 0x64
    5b34:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
    5b38:	e9c9 0100 	strd	r0, r1, [r9]
				for(int i = 0; i < 4; i++) {
					d1[i] = buf ->data[sensorVal + i + 1];
    5b3c:	7a23      	ldrb	r3, [r4, #8]
    5b3e:	f88d 3004 	strb.w	r3, [sp, #4]
    5b42:	e03f      	b.n	5bc4 <scan_cb+0x2f0>
    5b44:	0002e2c8 	.word	0x0002e2c8
    5b48:	0002e2cf 	.word	0x0002e2cf
    5b4c:	20005ee2 	.word	0x20005ee2
    5b50:	20005ee0 	.word	0x20005ee0
    5b54:	20005ee1 	.word	0x20005ee1
    5b58:	20005eda 	.word	0x20005eda
    5b5c:	20005edb 	.word	0x20005edb
    5b60:	20005ec4 	.word	0x20005ec4
    5b64:	20005ec5 	.word	0x20005ec5
    5b68:	20005ee3 	.word	0x20005ee3
    5b6c:	20005ee4 	.word	0x20005ee4
    5b70:	20005ee5 	.word	0x20005ee5
    5b74:	20005ee6 	.word	0x20005ee6
    5b78:	200025f0 	.word	0x200025f0
    5b7c:	20005eea 	.word	0x20005eea
    5b80:	20005eeb 	.word	0x20005eeb
    5b84:	200025f8 	.word	0x200025f8
    5b88:	20005eef 	.word	0x20005eef
    5b8c:	20005ef0 	.word	0x20005ef0
    5b90:	20002600 	.word	0x20002600
    5b94:	20005ec6 	.word	0x20005ec6
    5b98:	20005ec7 	.word	0x20005ec7
    5b9c:	20005edc 	.word	0x20005edc
    5ba0:	200008e2 	.word	0x200008e2
    5ba4:	20005ec8 	.word	0x20005ec8
    5ba8:	20005ed2 	.word	0x20005ed2
    5bac:	20005ede 	.word	0x20005ede
    5bb0:	20005edf 	.word	0x20005edf
    5bb4:	20005edd 	.word	0x20005edd
    5bb8:	20003968 	.word	0x20003968
    5bbc:	20001010 	.word	0x20001010
    5bc0:	2000396c 	.word	0x2000396c
    5bc4:	7a63      	ldrb	r3, [r4, #9]
    5bc6:	f88d 3005 	strb.w	r3, [sp, #5]
    5bca:	7aa3      	ldrb	r3, [r4, #10]
    5bcc:	f88d 3006 	strb.w	r3, [sp, #6]
				}
				allData[4][sampleCount] = hextofloat(d1);
    5bd0:	a801      	add	r0, sp, #4
					d1[i] = buf ->data[sensorVal + i + 1];
    5bd2:	7ae3      	ldrb	r3, [r4, #11]
    5bd4:	f88d 3007 	strb.w	r3, [sp, #7]
				allData[4][sampleCount] = hextofloat(d1);
    5bd8:	f01f ff0a 	bl	259f0 <hextofloat>
    5bdc:	f7fb fbf4 	bl	13c8 <__aeabi_f2d>
    5be0:	f505 79c8 	add.w	r9, r5, #400	; 0x190
    5be4:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
    5be8:	e9c9 0100 	strd	r0, r1, [r9]
				for(int i = 0; i < 4; i++) {
					d1[i] = buf ->data[sensorVal + i + 5];
    5bec:	7b23      	ldrb	r3, [r4, #12]
    5bee:	f88d 3004 	strb.w	r3, [sp, #4]
    5bf2:	7b63      	ldrb	r3, [r4, #13]
    5bf4:	f88d 3005 	strb.w	r3, [sp, #5]
    5bf8:	7ba3      	ldrb	r3, [r4, #14]
    5bfa:	f88d 3006 	strb.w	r3, [sp, #6]
				}
				allData[5][sampleCount] = hextofloat(d1);
    5bfe:	a801      	add	r0, sp, #4
					d1[i] = buf ->data[sensorVal + i + 5];
    5c00:	7be3      	ldrb	r3, [r4, #15]
    5c02:	f88d 3007 	strb.w	r3, [sp, #7]
				allData[5][sampleCount] = hextofloat(d1);
    5c06:	f01f fef3 	bl	259f0 <hextofloat>
    5c0a:	f7fb fbdd 	bl	13c8 <__aeabi_f2d>
    5c0e:	f505 79fa 	add.w	r9, r5, #500	; 0x1f4
    5c12:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
    5c16:	e9c9 0100 	strd	r0, r1, [r9]
				for(int i = 0; i < 4; i++) {
					d1[i] = buf ->data[sensorVal + i + 9];
    5c1a:	7c23      	ldrb	r3, [r4, #16]
    5c1c:	f88d 3004 	strb.w	r3, [sp, #4]
    5c20:	7c63      	ldrb	r3, [r4, #17]
    5c22:	f88d 3005 	strb.w	r3, [sp, #5]
    5c26:	7ca3      	ldrb	r3, [r4, #18]
    5c28:	f88d 3006 	strb.w	r3, [sp, #6]
				}
				allData[6][sampleCount] = hextofloat(d1);
    5c2c:	a801      	add	r0, sp, #4
					d1[i] = buf ->data[sensorVal + i + 9];
    5c2e:	7ce3      	ldrb	r3, [r4, #19]
    5c30:	f88d 3007 	strb.w	r3, [sp, #7]
				allData[6][sampleCount] = hextofloat(d1);
    5c34:	f01f fedc 	bl	259f0 <hextofloat>
    5c38:	f7fb fbc6 	bl	13c8 <__aeabi_f2d>
    5c3c:	f505 7916 	add.w	r9, r5, #600	; 0x258
    5c40:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
    5c44:	e9c9 0100 	strd	r0, r1, [r9]
				allData[2][sampleCount] = buf->data[sensorVal + 13];
    5c48:	7d20      	ldrb	r0, [r4, #20]
    5c4a:	f7fb fb9b 	bl	1384 <__aeabi_ui2d>
    5c4e:	f105 09c8 	add.w	r9, r5, #200	; 0xc8
    5c52:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
    5c56:	e9c9 0100 	strd	r0, r1, [r9]
				allData[3][sampleCount] = buf->data[sensorVal + 14];
    5c5a:	7d60      	ldrb	r0, [r4, #21]
				for(int i = 0; i < 7; i++) {
					printk("%d:%f\n",i,allData[i][sampleCount]);
    5c5c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5cb8 <scan_cb+0x3e4>
				allData[3][sampleCount] = buf->data[sensorVal + 14];
    5c60:	f7fb fb90 	bl	1384 <__aeabi_ui2d>
    5c64:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    5c68:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    5c6c:	e9c5 0100 	strd	r0, r1, [r5]
				for(int i = 0; i < 7; i++) {
    5c70:	2400      	movs	r4, #0
					printk("%d:%f\n",i,allData[i][sampleCount]);
    5c72:	2564      	movs	r5, #100	; 0x64
    5c74:	f8d8 3000 	ldr.w	r3, [r8]
    5c78:	fb05 3304 	mla	r3, r5, r4, r3
    5c7c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    5c80:	4621      	mov	r1, r4
    5c82:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c86:	4648      	mov	r0, r9
				for(int i = 0; i < 7; i++) {
    5c88:	3401      	adds	r4, #1
					printk("%d:%f\n",i,allData[i][sampleCount]);
    5c8a:	f01f ff3b 	bl	25b04 <printk>
				for(int i = 0; i < 7; i++) {
    5c8e:	2c07      	cmp	r4, #7
    5c90:	d1f0      	bne.n	5c74 <scan_cb+0x3a0>
				}
				sampleCount++;
    5c92:	f8d8 3000 	ldr.w	r3, [r8]
    5c96:	3301      	adds	r3, #1
    5c98:	f8c8 3000 	str.w	r3, [r8]
			}
		}
		thingyFound = false;
    5c9c:	2300      	movs	r3, #0
    5c9e:	7033      	strb	r3, [r6, #0]
    5ca0:	e003      	b.n	5caa <scan_cb+0x3d6>
	if (thingyFound) {
    5ca2:	7833      	ldrb	r3, [r6, #0]
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	f47f ae4a 	bne.w	593e <scan_cb+0x6a>
	}
	mfg_data[2]++;
    5caa:	4a04      	ldr	r2, [pc, #16]	; (5cbc <scan_cb+0x3e8>)
    5cac:	7893      	ldrb	r3, [r2, #2]
    5cae:	3301      	adds	r3, #1
    5cb0:	7093      	strb	r3, [r2, #2]
}
    5cb2:	b007      	add	sp, #28
    5cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5cb8:	0002e2c1 	.word	0x0002e2c1
    5cbc:	200008c4 	.word	0x200008c4

00005cc0 <scan_init>:
 * @brief function which initialises scanning of devices
 * 
 */
void scan_init(void) {
	// set call back function and designated struct
	bt_le_scan_start(&scan_param, scan_cb);
    5cc0:	4901      	ldr	r1, [pc, #4]	; (5cc8 <scan_init+0x8>)
    5cc2:	4802      	ldr	r0, [pc, #8]	; (5ccc <scan_init+0xc>)
    5cc4:	f009 bc00 	b.w	f4c8 <bt_le_scan_start>
    5cc8:	000058d5 	.word	0x000058d5
    5ccc:	20000168 	.word	0x20000168

00005cd0 <load>:
 * 
 * @param sensorData1 data to be advertsied 
 * @param start where the data needs to start being inserted
 * @param len length of sensorData1
 */
void load(uint8_t sensorData1[],int start,int len) {
    5cd0:	b410      	push	{r4}
	// counter to keep track of data allocation
	int c = 0;

	// loop stores all data in main data array
	for(int i = start; i < start + len; i++) {
		data[i] = sensorData1[c];
    5cd2:	4b08      	ldr	r3, [pc, #32]	; (5cf4 <load+0x24>)
    5cd4:	3801      	subs	r0, #1
	for(int i = start; i < start + len; i++) {
    5cd6:	440a      	add	r2, r1
    5cd8:	428a      	cmp	r2, r1
    5cda:	dc06      	bgt.n	5cea <load+0x1a>
		c++;
	}

	// update advertisement based on new data
	bt_le_adv_update_data(ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    5cdc:	2301      	movs	r3, #1
    5cde:	4a06      	ldr	r2, [pc, #24]	; (5cf8 <load+0x28>)
    5ce0:	4806      	ldr	r0, [pc, #24]	; (5cfc <load+0x2c>)
}
    5ce2:	bc10      	pop	{r4}
	bt_le_adv_update_data(ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    5ce4:	4619      	mov	r1, r3
    5ce6:	f009 b85d 	b.w	eda4 <bt_le_adv_update_data>
		data[i] = sensorData1[c];
    5cea:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    5cee:	54cc      	strb	r4, [r1, r3]
	for(int i = start; i < start + len; i++) {
    5cf0:	3101      	adds	r1, #1
    5cf2:	e7f1      	b.n	5cd8 <load+0x8>
    5cf4:	20005ec9 	.word	0x20005ec9
    5cf8:	0002bf44 	.word	0x0002bf44
    5cfc:	20000160 	.word	0x20000160

00005d00 <ble_ahu_adv>:

/**
 * @brief function which intis the bluetooth advertisement
 * 
 */
void ble_ahu_adv(void) {
    5d00:	b570      	push	{r4, r5, r6, lr}
	char addr_s[BT_ADDR_LE_STR_LEN];
	bt_addr_le_t addr = {0};
	size_t count = 1;

	bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    5d02:	4d25      	ldr	r5, [pc, #148]	; (5d98 <ble_ahu_adv+0x98>)
void ble_ahu_adv(void) {
    5d04:	b09a      	sub	sp, #104	; 0x68
	bt_addr_le_t addr = {0};
    5d06:	2300      	movs	r3, #0
    5d08:	9308      	str	r3, [sp, #32]
    5d0a:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
	bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    5d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5d10:	ac0d      	add	r4, sp, #52	; 0x34
    5d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	size_t count = 1;
    5d14:	2601      	movs	r6, #1
	bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    5d16:	682b      	ldr	r3, [r5, #0]
    5d18:	6023      	str	r3, [r4, #0]
    5d1a:	4920      	ldr	r1, [pc, #128]	; (5d9c <ble_ahu_adv+0x9c>)
    5d1c:	4b20      	ldr	r3, [pc, #128]	; (5da0 <ble_ahu_adv+0xa0>)
    5d1e:	9600      	str	r6, [sp, #0]
    5d20:	4632      	mov	r2, r6
    5d22:	a80d      	add	r0, sp, #52	; 0x34
	size_t count = 1;
    5d24:	9607      	str	r6, [sp, #28]
	bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    5d26:	f009 f975 	bl	f014 <bt_le_adv_start>
					BT_GAP_ADV_FAST_INT_MIN_1, \
					BT_GAP_ADV_FAST_INT_MAX_1, \
					NULL), ad, ARRAY_SIZE(ad),
					sd, ARRAY_SIZE(sd));

	bt_id_get(&addr, &count);
    5d2a:	a907      	add	r1, sp, #28
    5d2c:	a808      	add	r0, sp, #32
    5d2e:	f008 fd17 	bl	e760 <bt_id_get>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5d32:	f89d 3020 	ldrb.w	r3, [sp, #32]
    5d36:	ac0a      	add	r4, sp, #40	; 0x28
    5d38:	2b03      	cmp	r3, #3
    5d3a:	d826      	bhi.n	5d8a <ble_ahu_adv+0x8a>
    5d3c:	e8df f003 	tbb	[pc, r3]
    5d40:	23211f02 	.word	0x23211f02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5d44:	4917      	ldr	r1, [pc, #92]	; (5da4 <ble_ahu_adv+0xa4>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5d46:	4620      	mov	r0, r4
    5d48:	f022 fcb2 	bl	286b0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5d4c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    5d50:	9304      	str	r3, [sp, #16]
    5d52:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    5d56:	9303      	str	r3, [sp, #12]
    5d58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    5d5c:	9302      	str	r3, [sp, #8]
    5d5e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    5d62:	9301      	str	r3, [sp, #4]
    5d64:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    5d68:	9300      	str	r3, [sp, #0]
    5d6a:	4a0f      	ldr	r2, [pc, #60]	; (5da8 <ble_ahu_adv+0xa8>)
    5d6c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    5d70:	9405      	str	r4, [sp, #20]
    5d72:	211e      	movs	r1, #30
    5d74:	a812      	add	r0, sp, #72	; 0x48
    5d76:	f01f fed2 	bl	25b1e <snprintk>
	bt_addr_le_to_str(&addr, addr_s, sizeof(addr_s));
}
    5d7a:	b01a      	add	sp, #104	; 0x68
    5d7c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    5d7e:	490b      	ldr	r1, [pc, #44]	; (5dac <ble_ahu_adv+0xac>)
    5d80:	e7e1      	b.n	5d46 <ble_ahu_adv+0x46>
		strcpy(type, "public-id");
    5d82:	490b      	ldr	r1, [pc, #44]	; (5db0 <ble_ahu_adv+0xb0>)
    5d84:	e7df      	b.n	5d46 <ble_ahu_adv+0x46>
		strcpy(type, "random-id");
    5d86:	490b      	ldr	r1, [pc, #44]	; (5db4 <ble_ahu_adv+0xb4>)
    5d88:	e7dd      	b.n	5d46 <ble_ahu_adv+0x46>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5d8a:	4a0b      	ldr	r2, [pc, #44]	; (5db8 <ble_ahu_adv+0xb8>)
    5d8c:	210a      	movs	r1, #10
    5d8e:	4620      	mov	r0, r4
    5d90:	f01f fec5 	bl	25b1e <snprintk>
		break;
    5d94:	e7da      	b.n	5d4c <ble_ahu_adv+0x4c>
    5d96:	bf00      	nop
    5d98:	0002bb40 	.word	0x0002bb40
    5d9c:	20000160 	.word	0x20000160
    5da0:	0002bf44 	.word	0x0002bf44
    5da4:	0002e2d6 	.word	0x0002e2d6
    5da8:	0002e2f8 	.word	0x0002e2f8
    5dac:	0002e2dd 	.word	0x0002e2dd
    5db0:	0002e2e4 	.word	0x0002e2e4
    5db4:	0002e2ee 	.word	0x0002e2ee
    5db8:	00031636 	.word	0x00031636

00005dbc <button_pressed>:
 * @param cb 
 * @param pins 
 */
void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins) {
   	pressed= !pressed;
    5dbc:	4a06      	ldr	r2, [pc, #24]	; (5dd8 <button_pressed+0x1c>)
		    uint32_t pins) {
    5dbe:	b508      	push	{r3, lr}
   	pressed= !pressed;
    5dc0:	7813      	ldrb	r3, [r2, #0]
    5dc2:	f083 0301 	eor.w	r3, r3, #1
    5dc6:	7013      	strb	r3, [r2, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    5dc8:	f024 fbc5 	bl	2a556 <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
    5dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5dd0:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    5dd2:	4802      	ldr	r0, [pc, #8]	; (5ddc <button_pressed+0x20>)
    5dd4:	f01f be96 	b.w	25b04 <printk>
    5dd8:	20005ef4 	.word	0x20005ef4
    5ddc:	0002e320 	.word	0x0002e320

00005de0 <button_init>:

/**
 * @brief 
 * 
 */
void button_init(void) {
    5de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5de2:	b087      	sub	sp, #28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    5de4:	4c32      	ldr	r4, [pc, #200]	; (5eb0 <button_init+0xd0>)
    5de6:	4620      	mov	r0, r4
    5de8:	f024 fdd9 	bl	2a99e <z_device_is_ready>
    5dec:	4603      	mov	r3, r0
	int ret;

	if (!device_is_ready(button.port)) {
    5dee:	b978      	cbnz	r0, 5e10 <button_init+0x30>
		LOG_ERR("Error: button device %s is not ready\n",
    5df0:	4930      	ldr	r1, [pc, #192]	; (5eb4 <button_init+0xd4>)
    5df2:	680a      	ldr	r2, [r1, #0]
    5df4:	0755      	lsls	r5, r2, #29
    5df6:	d009      	beq.n	5e0c <button_init+0x2c>
    5df8:	6822      	ldr	r2, [r4, #0]
    5dfa:	9203      	str	r2, [sp, #12]
    5dfc:	4a2e      	ldr	r2, [pc, #184]	; (5eb8 <button_init+0xd8>)
    5dfe:	9202      	str	r2, [sp, #8]
    5e00:	4a2e      	ldr	r2, [pc, #184]	; (5ebc <button_init+0xdc>)
    5e02:	e9cd 0200 	strd	r0, r2, [sp]
    5e06:	2201      	movs	r2, #1
    5e08:	f01f fe02 	bl	25a10 <z_log_msg2_runtime_create.constprop.0>
		return;
	}

	gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
	gpio_add_callback(button.port, &button_cb_data);
}
    5e0c:	b007      	add	sp, #28
    5e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    5e10:	6927      	ldr	r7, [r4, #16]
	const struct gpio_driver_api *api =
    5e12:	68a6      	ldr	r6, [r4, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5e14:	683b      	ldr	r3, [r7, #0]
    5e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e1a:	603b      	str	r3, [r7, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    5e1c:	f240 1211 	movw	r2, #273	; 0x111
    5e20:	6833      	ldr	r3, [r6, #0]
    5e22:	2106      	movs	r1, #6
    5e24:	4620      	mov	r0, r4
    5e26:	4798      	blx	r3
	if (ret != 0) {
    5e28:	4605      	mov	r5, r0
    5e2a:	b198      	cbz	r0, 5e54 <button_init+0x74>
		LOG_ERR("Error %d: failed to configure %s pin %d\n",
    5e2c:	4921      	ldr	r1, [pc, #132]	; (5eb4 <button_init+0xd4>)
    5e2e:	680b      	ldr	r3, [r1, #0]
    5e30:	075a      	lsls	r2, r3, #29
    5e32:	d0eb      	beq.n	5e0c <button_init+0x2c>
    5e34:	2306      	movs	r3, #6
    5e36:	9305      	str	r3, [sp, #20]
    5e38:	6823      	ldr	r3, [r4, #0]
    5e3a:	e9cd 0303 	strd	r0, r3, [sp, #12]
    5e3e:	4b1e      	ldr	r3, [pc, #120]	; (5eb8 <button_init+0xd8>)
    5e40:	9302      	str	r3, [sp, #8]
    5e42:	4b1f      	ldr	r3, [pc, #124]	; (5ec0 <button_init+0xe0>)
    5e44:	9301      	str	r3, [sp, #4]
    5e46:	2300      	movs	r3, #0
    5e48:	9300      	str	r3, [sp, #0]
		LOG_ERR("Error %d: failed to configure interrupt on %s pin %d\n",
    5e4a:	2201      	movs	r2, #1
    5e4c:	4618      	mov	r0, r3
    5e4e:	f01f fddf 	bl	25a10 <z_log_msg2_runtime_create.constprop.0>
    5e52:	e7db      	b.n	5e0c <button_init+0x2c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5e54:	683b      	ldr	r3, [r7, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5e56:	69b7      	ldr	r7, [r6, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    5e58:	f013 0f40 	tst.w	r3, #64	; 0x40
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5e5c:	bf0c      	ite	eq
    5e5e:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    5e62:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    5e66:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    5e6a:	2106      	movs	r1, #6
    5e6c:	4620      	mov	r0, r4
    5e6e:	47b8      	blx	r7
	if (ret != 0) {
    5e70:	b178      	cbz	r0, 5e92 <button_init+0xb2>
		LOG_ERR("Error %d: failed to configure interrupt on %s pin %d\n",
    5e72:	4910      	ldr	r1, [pc, #64]	; (5eb4 <button_init+0xd4>)
    5e74:	680b      	ldr	r3, [r1, #0]
    5e76:	075b      	lsls	r3, r3, #29
    5e78:	d0c8      	beq.n	5e0c <button_init+0x2c>
    5e7a:	2306      	movs	r3, #6
    5e7c:	9305      	str	r3, [sp, #20]
    5e7e:	6823      	ldr	r3, [r4, #0]
    5e80:	e9cd 0303 	strd	r0, r3, [sp, #12]
    5e84:	4b0c      	ldr	r3, [pc, #48]	; (5eb8 <button_init+0xd8>)
    5e86:	9302      	str	r3, [sp, #8]
    5e88:	4b0e      	ldr	r3, [pc, #56]	; (5ec4 <button_init+0xe4>)
    5e8a:	e9cd 5300 	strd	r5, r3, [sp]
    5e8e:	462b      	mov	r3, r5
    5e90:	e7db      	b.n	5e4a <button_init+0x6a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    5e92:	490d      	ldr	r1, [pc, #52]	; (5ec8 <button_init+0xe8>)
    5e94:	4b0d      	ldr	r3, [pc, #52]	; (5ecc <button_init+0xec>)
    5e96:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    5e98:	2340      	movs	r3, #64	; 0x40
    5e9a:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    5e9c:	69f3      	ldr	r3, [r6, #28]
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	d0b4      	beq.n	5e0c <button_init+0x2c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    5ea2:	2201      	movs	r2, #1
    5ea4:	4620      	mov	r0, r4
}
    5ea6:	b007      	add	sp, #28
    5ea8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5eac:	4718      	bx	r3
    5eae:	bf00      	nop
    5eb0:	0002b618 	.word	0x0002b618
    5eb4:	200009ac 	.word	0x200009ac
    5eb8:	0002e3d5 	.word	0x0002e3d5
    5ebc:	0002e336 	.word	0x0002e336
    5ec0:	0002e360 	.word	0x0002e360
    5ec4:	0002e38d 	.word	0x0002e38d
    5ec8:	20003970 	.word	0x20003970
    5ecc:	00005dbd 	.word	0x00005dbd

00005ed0 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    5ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ed4:	4605      	mov	r5, r0
    5ed6:	b08b      	sub	sp, #44	; 0x2c
    5ed8:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    5eda:	f015 0303 	ands.w	r3, r5, #3
    5ede:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    5ee2:	9203      	str	r2, [sp, #12]
    5ee4:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    5ee6:	9301      	str	r3, [sp, #4]
    5ee8:	f040 81f5 	bne.w	62d6 <cbvprintf_package+0x406>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    5eec:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    5eee:	2d00      	cmp	r5, #0
    5ef0:	f040 81f4 	bne.w	62dc <cbvprintf_package+0x40c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    5ef4:	f001 0607 	and.w	r6, r1, #7
    5ef8:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    5efa:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    5efe:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    5f02:	2704      	movs	r7, #4
	s = fmt--;
    5f04:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    5f06:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    5f0a:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    5f0e:	4652      	mov	r2, sl
	size = sizeof(char *);
    5f10:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    5f12:	b105      	cbz	r5, 5f16 <cbvprintf_package+0x46>
				*(const char **)buf = s;
    5f14:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    5f16:	9b03      	ldr	r3, [sp, #12]
    5f18:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    5f1c:	4bce      	ldr	r3, [pc, #824]	; (6258 <cbvprintf_package+0x388>)
    5f1e:	4298      	cmp	r0, r3
    5f20:	f0c0 812a 	bcc.w	6178 <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    5f24:	4bcd      	ldr	r3, [pc, #820]	; (625c <cbvprintf_package+0x38c>)
    5f26:	4298      	cmp	r0, r3
    5f28:	f080 8126 	bcs.w	6178 <cbvprintf_package+0x2a8>
    5f2c:	f1be 0f00 	cmp.w	lr, #0
    5f30:	f000 813c 	beq.w	61ac <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
    5f34:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    5f38:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    5f3c:	f1be 0f00 	cmp.w	lr, #0
    5f40:	f000 811d 	beq.w	617e <cbvprintf_package+0x2ae>
    5f44:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    5f48:	f0c0 8119 	bcc.w	617e <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    5f4c:	f06f 0015 	mvn.w	r0, #21
    5f50:	e0f5      	b.n	613e <cbvprintf_package+0x26e>
		if (!parsing) {
    5f52:	b932      	cbnz	r2, 5f62 <cbvprintf_package+0x92>
			if (*fmt == '%') {
    5f54:	2b25      	cmp	r3, #37	; 0x25
    5f56:	f040 812c 	bne.w	61b2 <cbvprintf_package+0x2e2>
				parsing = true;
    5f5a:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    5f5c:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    5f5e:	46b9      	mov	r9, r7
    5f60:	e127      	b.n	61b2 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    5f62:	2b2b      	cmp	r3, #43	; 0x2b
    5f64:	d824      	bhi.n	5fb0 <cbvprintf_package+0xe0>
    5f66:	2b1f      	cmp	r3, #31
    5f68:	d801      	bhi.n	5f6e <cbvprintf_package+0x9e>
			parsing = false;
    5f6a:	2200      	movs	r2, #0
    5f6c:	e121      	b.n	61b2 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    5f6e:	f1a3 0020 	sub.w	r0, r3, #32
    5f72:	280b      	cmp	r0, #11
    5f74:	d8f9      	bhi.n	5f6a <cbvprintf_package+0x9a>
    5f76:	f20f 0c08 	addw	ip, pc, #8
    5f7a:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    5f7e:	bf00      	nop
    5f80:	000061b3 	.word	0x000061b3
    5f84:	00005f6b 	.word	0x00005f6b
    5f88:	00005f6b 	.word	0x00005f6b
    5f8c:	000061b3 	.word	0x000061b3
    5f90:	00005f6b 	.word	0x00005f6b
    5f94:	00005f6b 	.word	0x00005f6b
    5f98:	00005f6b 	.word	0x00005f6b
    5f9c:	00005f6b 	.word	0x00005f6b
    5fa0:	00005f6b 	.word	0x00005f6b
    5fa4:	00005f6b 	.word	0x00005f6b
    5fa8:	00006157 	.word	0x00006157
    5fac:	000061b3 	.word	0x000061b3
    5fb0:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    5fb4:	fa5f fc80 	uxtb.w	ip, r0
    5fb8:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    5fbc:	d8d5      	bhi.n	5f6a <cbvprintf_package+0x9a>
    5fbe:	284d      	cmp	r0, #77	; 0x4d
    5fc0:	d8d3      	bhi.n	5f6a <cbvprintf_package+0x9a>
    5fc2:	f20f 0c08 	addw	ip, pc, #8
    5fc6:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    5fca:	bf00      	nop
    5fcc:	000061b3 	.word	0x000061b3
    5fd0:	000061b3 	.word	0x000061b3
    5fd4:	00005f6b 	.word	0x00005f6b
    5fd8:	000061b3 	.word	0x000061b3
    5fdc:	000061b3 	.word	0x000061b3
    5fe0:	000061b3 	.word	0x000061b3
    5fe4:	000061b3 	.word	0x000061b3
    5fe8:	000061b3 	.word	0x000061b3
    5fec:	000061b3 	.word	0x000061b3
    5ff0:	000061b3 	.word	0x000061b3
    5ff4:	000061b3 	.word	0x000061b3
    5ff8:	000061b3 	.word	0x000061b3
    5ffc:	000061b3 	.word	0x000061b3
    6000:	00005f6b 	.word	0x00005f6b
    6004:	00005f6b 	.word	0x00005f6b
    6008:	00005f6b 	.word	0x00005f6b
    600c:	00005f6b 	.word	0x00005f6b
    6010:	00005f6b 	.word	0x00005f6b
    6014:	00005f6b 	.word	0x00005f6b
    6018:	00005f6b 	.word	0x00005f6b
    601c:	0000611f 	.word	0x0000611f
    6020:	00005f6b 	.word	0x00005f6b
    6024:	00005f6b 	.word	0x00005f6b
    6028:	00005f6b 	.word	0x00005f6b
    602c:	0000611f 	.word	0x0000611f
    6030:	0000611f 	.word	0x0000611f
    6034:	0000611f 	.word	0x0000611f
    6038:	00005f6b 	.word	0x00005f6b
    603c:	00005f6b 	.word	0x00005f6b
    6040:	00005f6b 	.word	0x00005f6b
    6044:	00005f6b 	.word	0x00005f6b
    6048:	000061b3 	.word	0x000061b3
    604c:	00005f6b 	.word	0x00005f6b
    6050:	00005f6b 	.word	0x00005f6b
    6054:	00005f6b 	.word	0x00005f6b
    6058:	00005f6b 	.word	0x00005f6b
    605c:	00005f6b 	.word	0x00005f6b
    6060:	00005f6b 	.word	0x00005f6b
    6064:	00005f6b 	.word	0x00005f6b
    6068:	00005f6b 	.word	0x00005f6b
    606c:	00005f6b 	.word	0x00005f6b
    6070:	00005f6b 	.word	0x00005f6b
    6074:	00005f6b 	.word	0x00005f6b
    6078:	00006105 	.word	0x00006105
    607c:	00005f6b 	.word	0x00005f6b
    6080:	00005f6b 	.word	0x00005f6b
    6084:	00005f6b 	.word	0x00005f6b
    6088:	00005f6b 	.word	0x00005f6b
    608c:	00005f6b 	.word	0x00005f6b
    6090:	00005f6b 	.word	0x00005f6b
    6094:	00005f6b 	.word	0x00005f6b
    6098:	00005f6b 	.word	0x00005f6b
    609c:	0000611f 	.word	0x0000611f
    60a0:	00005f6b 	.word	0x00005f6b
    60a4:	00006105 	.word	0x00006105
    60a8:	00006105 	.word	0x00006105
    60ac:	0000611f 	.word	0x0000611f
    60b0:	0000611f 	.word	0x0000611f
    60b4:	0000611f 	.word	0x0000611f
    60b8:	000061b3 	.word	0x000061b3
    60bc:	00006105 	.word	0x00006105
    60c0:	0000614d 	.word	0x0000614d
    60c4:	00005f6b 	.word	0x00005f6b
    60c8:	000061b3 	.word	0x000061b3
    60cc:	00005f6b 	.word	0x00005f6b
    60d0:	00006151 	.word	0x00006151
    60d4:	00006105 	.word	0x00006105
    60d8:	00006151 	.word	0x00006151
    60dc:	00005f6b 	.word	0x00005f6b
    60e0:	00005f6b 	.word	0x00005f6b
    60e4:	00006151 	.word	0x00006151
    60e8:	00005f5d 	.word	0x00005f5d
    60ec:	00006105 	.word	0x00006105
    60f0:	00005f6b 	.word	0x00005f6b
    60f4:	00005f6b 	.word	0x00005f6b
    60f8:	00006105 	.word	0x00006105
    60fc:	00005f6b 	.word	0x00005f6b
    6100:	00005f5d 	.word	0x00005f5d
			if (fmt[-1] == 'l') {
    6104:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    6108:	2a6c      	cmp	r2, #108	; 0x6c
    610a:	d123      	bne.n	6154 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    610c:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    6110:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    6112:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    6116:	d02d      	beq.n	6174 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    6118:	2704      	movs	r7, #4
					size = sizeof(long long);
    611a:	46b9      	mov	r9, r7
    611c:	e01b      	b.n	6156 <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    611e:	f108 0807 	add.w	r8, r8, #7
    6122:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    6126:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    6128:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    612c:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    6130:	b155      	cbz	r5, 6148 <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    6132:	eb0e 0004 	add.w	r0, lr, r4
    6136:	42b0      	cmp	r0, r6
    6138:	d904      	bls.n	6144 <cbvprintf_package+0x274>
					return -ENOSPC;
    613a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    613e:	b00b      	add	sp, #44	; 0x2c
    6140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    6144:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    6148:	3408      	adds	r4, #8
			parsing = false;
    614a:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    614c:	2708      	movs	r7, #8
    614e:	e706      	b.n	5f5e <cbvprintf_package+0x8e>
			parsing = false;
    6150:	2200      	movs	r2, #0
    6152:	e7e1      	b.n	6118 <cbvprintf_package+0x248>
			parsing = false;
    6154:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    6156:	3c01      	subs	r4, #1
    6158:	443c      	add	r4, r7
    615a:	4278      	negs	r0, r7
    615c:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    615e:	b125      	cbz	r5, 616a <cbvprintf_package+0x29a>
    6160:	eba9 0005 	sub.w	r0, r9, r5
    6164:	4420      	add	r0, r4
    6166:	42b0      	cmp	r0, r6
    6168:	d8e7      	bhi.n	613a <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    616a:	2b73      	cmp	r3, #115	; 0x73
    616c:	d143      	bne.n	61f6 <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
    616e:	f858 0b04 	ldr.w	r0, [r8], #4
    6172:	e6ce      	b.n	5f12 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    6174:	2708      	movs	r7, #8
    6176:	e7d0      	b.n	611a <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    6178:	f04f 0c00 	mov.w	ip, #0
    617c:	e6dc      	b.n	5f38 <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    617e:	9b00      	ldr	r3, [sp, #0]
    6180:	2b0f      	cmp	r3, #15
    6182:	f63f aee3 	bhi.w	5f4c <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    6186:	b345      	cbz	r5, 61da <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    6188:	f8dd e000 	ldr.w	lr, [sp]
    618c:	a80a      	add	r0, sp, #40	; 0x28
    618e:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    6192:	4470      	add	r0, lr
    6194:	f1bc 0f00 	cmp.w	ip, #0
    6198:	d019      	beq.n	61ce <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    619a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    619e:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    61a2:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    61a6:	9b00      	ldr	r3, [sp, #0]
    61a8:	3301      	adds	r3, #1
    61aa:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    61ac:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    61ae:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    61b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    61b6:	2b00      	cmp	r3, #0
    61b8:	f47f aecb 	bne.w	5f52 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    61bc:	1b60      	subs	r0, r4, r5
    61be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    61c2:	f4bf aec3 	bcs.w	5f4c <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    61c6:	bb9d      	cbnz	r5, 6230 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    61c8:	3e08      	subs	r6, #8
    61ca:	4430      	add	r0, r6
    61cc:	e7b7      	b.n	613e <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    61ce:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    61d2:	9b02      	ldr	r3, [sp, #8]
    61d4:	3301      	adds	r3, #1
    61d6:	9302      	str	r3, [sp, #8]
    61d8:	e7e5      	b.n	61a6 <cbvprintf_package+0x2d6>
				} else if (is_ro) {
    61da:	f1bc 0f00 	cmp.w	ip, #0
    61de:	d001      	beq.n	61e4 <cbvprintf_package+0x314>
					len += 1;
    61e0:	3601      	adds	r6, #1
    61e2:	e7e0      	b.n	61a6 <cbvprintf_package+0x2d6>
    61e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    61e8:	f022 fa8c 	bl	28704 <strlen>
    61ec:	3602      	adds	r6, #2
    61ee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    61f2:	4406      	add	r6, r0
    61f4:	e7d7      	b.n	61a6 <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
    61f6:	f1b9 0f04 	cmp.w	r9, #4
    61fa:	d108      	bne.n	620e <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
    61fc:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    6200:	b115      	cbz	r5, 6208 <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
    6202:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    6206:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    6208:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    620a:	4680      	mov	r8, r0
    620c:	e7d1      	b.n	61b2 <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
    620e:	f1b9 0f08 	cmp.w	r9, #8
    6212:	f47f ae9b 	bne.w	5f4c <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    6216:	f108 0307 	add.w	r3, r8, #7
    621a:	f023 0307 	bic.w	r3, r3, #7
    621e:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    6222:	b11d      	cbz	r5, 622c <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
    6224:	e9d3 bc00 	ldrd	fp, ip, [r3]
    6228:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    622c:	3408      	adds	r4, #8
    622e:	e7c0      	b.n	61b2 <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
    6230:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    6232:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    6234:	0880      	lsrs	r0, r0, #2
    6236:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    6238:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    623a:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    623e:	f1ba 0f00 	cmp.w	sl, #0
    6242:	d005      	beq.n	6250 <cbvprintf_package+0x380>
    6244:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    6246:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    624a:	9a00      	ldr	r2, [sp, #0]
    624c:	429a      	cmp	r2, r3
    624e:	d107      	bne.n	6260 <cbvprintf_package+0x390>
		if (BUF_OFFSET + 1 + size > len) {
    6250:	f1c5 0901 	rsb	r9, r5, #1
    6254:	e039      	b.n	62ca <cbvprintf_package+0x3fa>
    6256:	bf00      	nop
    6258:	0002b548 	.word	0x0002b548
    625c:	00032010 	.word	0x00032010
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    6260:	f811 2b01 	ldrb.w	r2, [r1], #1
    6264:	0617      	lsls	r7, r2, #24
    6266:	d507      	bpl.n	6278 <cbvprintf_package+0x3a8>
			if (BUF_OFFSET + 1 > len) {
    6268:	1827      	adds	r7, r4, r0
    626a:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    626c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    6270:	f63f af63 	bhi.w	613a <cbvprintf_package+0x26a>
			*buf++ = pos;
    6274:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    6278:	3301      	adds	r3, #1
    627a:	e7e6      	b.n	624a <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    627c:	9b01      	ldr	r3, [sp, #4]
    627e:	aa06      	add	r2, sp, #24
    6280:	f812 8003 	ldrb.w	r8, [r2, r3]
    6284:	f1ba 0f00 	cmp.w	sl, #0
    6288:	d002      	beq.n	6290 <cbvprintf_package+0x3c0>
    628a:	f018 0f80 	tst.w	r8, #128	; 0x80
    628e:	d119      	bne.n	62c4 <cbvprintf_package+0x3f4>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    6290:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    6294:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    6296:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    629a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    629e:	4608      	mov	r0, r1
    62a0:	9102      	str	r1, [sp, #8]
    62a2:	f022 fa2f 	bl	28704 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    62a6:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    62aa:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    62ac:	443a      	add	r2, r7
    62ae:	42b2      	cmp	r2, r6
    62b0:	f63f af43 	bhi.w	613a <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    62b4:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
    62b8:	9902      	ldr	r1, [sp, #8]
    62ba:	4620      	mov	r0, r4
    62bc:	463a      	mov	r2, r7
    62be:	f022 fa77 	bl	287b0 <memcpy>
		buf += size;
    62c2:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    62c4:	9b01      	ldr	r3, [sp, #4]
    62c6:	3301      	adds	r3, #1
    62c8:	9301      	str	r3, [sp, #4]
    62ca:	e9dd 2300 	ldrd	r2, r3, [sp]
    62ce:	429a      	cmp	r2, r3
    62d0:	d1d4      	bne.n	627c <cbvprintf_package+0x3ac>
	return BUF_OFFSET;
    62d2:	1b60      	subs	r0, r4, r5
    62d4:	e733      	b.n	613e <cbvprintf_package+0x26e>
		return -EFAULT;
    62d6:	f06f 000d 	mvn.w	r0, #13
    62da:	e730      	b.n	613e <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    62dc:	2907      	cmp	r1, #7
    62de:	f63f ae0e 	bhi.w	5efe <cbvprintf_package+0x2e>
    62e2:	e72a      	b.n	613a <cbvprintf_package+0x26a>

000062e4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    62e4:	b530      	push	{r4, r5, lr}
    62e6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    62e8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    62ec:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    62ee:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    62f0:	a901      	add	r1, sp, #4
    62f2:	4805      	ldr	r0, [pc, #20]	; (6308 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    62f4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    62f6:	f000 f8e9 	bl	64cc <cbvprintf>

	if (ctx.count < ctx.max) {
    62fa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    62fe:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    6300:	bfb8      	it	lt
    6302:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    6304:	b005      	add	sp, #20
    6306:	bd30      	pop	{r4, r5, pc}
    6308:	00025adf 	.word	0x00025adf

0000630c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    630c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6310:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    6314:	f019 0808 	ands.w	r8, r9, #8
{
    6318:	4604      	mov	r4, r0
    631a:	4693      	mov	fp, r2
	if (processing) {
    631c:	d00d      	beq.n	633a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    631e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    6320:	bf0c      	ite	eq
    6322:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    6326:	f049 0920 	orrne.w	r9, r9, #32
    632a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    632e:	f38b 8811 	msr	BASEPRI, fp
    6332:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    6336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    633a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    633e:	2902      	cmp	r1, #2
    6340:	d107      	bne.n	6352 <process_event+0x46>
			evt = process_recheck(mgr);
    6342:	4620      	mov	r0, r4
    6344:	f01f fc12 	bl	25b6c <process_recheck>
		if (evt == EVT_NOP) {
    6348:	2800      	cmp	r0, #0
    634a:	d0f0      	beq.n	632e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    634c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    634e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    6350:	d14e      	bne.n	63f0 <process_event+0xe4>
			res = mgr->last_res;
    6352:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6354:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    6356:	2f00      	cmp	r7, #0
    6358:	da15      	bge.n	6386 <process_event+0x7a>
		*clients = mgr->clients;
    635a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    635c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    6360:	e9c4 8800 	strd	r8, r8, [r4]
    6364:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    6368:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    636a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    636c:	8b21      	ldrh	r1, [r4, #24]
    636e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    6372:	45ca      	cmp	sl, r9
    6374:	d002      	beq.n	637c <process_event+0x70>
		if (do_monitors
    6376:	68a3      	ldr	r3, [r4, #8]
    6378:	2b00      	cmp	r3, #0
    637a:	d15a      	bne.n	6432 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    637c:	b90d      	cbnz	r5, 6382 <process_event+0x76>
		    || (transit != NULL)) {
    637e:	2e00      	cmp	r6, #0
    6380:	d071      	beq.n	6466 <process_event+0x15a>
    6382:	2300      	movs	r3, #0
    6384:	e056      	b.n	6434 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6386:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    638a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    638c:	2a01      	cmp	r2, #1
    638e:	d81e      	bhi.n	63ce <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6390:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    6394:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    6396:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6398:	b289      	uxth	r1, r1
    639a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    639e:	d10a      	bne.n	63b6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    63a0:	b13d      	cbz	r5, 63b2 <process_event+0xa6>
    63a2:	8b63      	ldrh	r3, [r4, #26]
    63a4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    63a6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    63a8:	3301      	adds	r3, #1
    63aa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    63ac:	2a00      	cmp	r2, #0
    63ae:	d1fa      	bne.n	63a6 <process_event+0x9a>
    63b0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63b2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    63b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    63b8:	4620      	mov	r0, r4
    63ba:	f01f fbd7 	bl	25b6c <process_recheck>
    63be:	4606      	mov	r6, r0
    63c0:	2800      	cmp	r0, #0
    63c2:	d0d3      	beq.n	636c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    63c4:	8b23      	ldrh	r3, [r4, #24]
    63c6:	f043 0320 	orr.w	r3, r3, #32
    63ca:	8323      	strh	r3, [r4, #24]
    63cc:	e7cd      	b.n	636a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    63ce:	2b04      	cmp	r3, #4
    63d0:	d10c      	bne.n	63ec <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63d2:	f021 0107 	bic.w	r1, r1, #7
    63d6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    63d8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    63da:	4620      	mov	r0, r4
    63dc:	f01f fbc6 	bl	25b6c <process_recheck>
    63e0:	4605      	mov	r5, r0
    63e2:	2800      	cmp	r0, #0
    63e4:	d0c1      	beq.n	636a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    63e6:	f041 0120 	orr.w	r1, r1, #32
    63ea:	8321      	strh	r1, [r4, #24]
    63ec:	2500      	movs	r5, #0
    63ee:	e7bc      	b.n	636a <process_event+0x5e>
		} else if (evt == EVT_START) {
    63f0:	2803      	cmp	r0, #3
    63f2:	d109      	bne.n	6408 <process_event+0xfc>
			transit = mgr->transitions->start;
    63f4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63f6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    63fa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63fc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    6400:	8323      	strh	r3, [r4, #24]
}
    6402:	2500      	movs	r5, #0
		res = 0;
    6404:	462f      	mov	r7, r5
    6406:	e7b1      	b.n	636c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    6408:	2804      	cmp	r0, #4
    640a:	d106      	bne.n	641a <process_event+0x10e>
			transit = mgr->transitions->stop;
    640c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    640e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    6412:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6414:	f043 0304 	orr.w	r3, r3, #4
    6418:	e7f2      	b.n	6400 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    641a:	2805      	cmp	r0, #5
    641c:	d106      	bne.n	642c <process_event+0x120>
			transit = mgr->transitions->reset;
    641e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6420:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    6424:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6426:	f043 0305 	orr.w	r3, r3, #5
    642a:	e7e9      	b.n	6400 <process_event+0xf4>
    642c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    642e:	462e      	mov	r6, r5
    6430:	e7e8      	b.n	6404 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    6432:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    6434:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    6438:	8321      	strh	r1, [r4, #24]
    643a:	f38b 8811 	msr	BASEPRI, fp
    643e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    6442:	b9fb      	cbnz	r3, 6484 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    6444:	bb85      	cbnz	r5, 64a8 <process_event+0x19c>
			if (transit != NULL) {
    6446:	b116      	cbz	r6, 644e <process_event+0x142>
				transit(mgr, transition_complete);
    6448:	491f      	ldr	r1, [pc, #124]	; (64c8 <process_event+0x1bc>)
    644a:	4620      	mov	r0, r4
    644c:	47b0      	blx	r6
	__asm__ volatile(
    644e:	f04f 0320 	mov.w	r3, #32
    6452:	f3ef 8b11 	mrs	fp, BASEPRI
    6456:	f383 8812 	msr	BASEPRI_MAX, r3
    645a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    645e:	8b23      	ldrh	r3, [r4, #24]
    6460:	f023 0308 	bic.w	r3, r3, #8
    6464:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    6466:	8b23      	ldrh	r3, [r4, #24]
    6468:	06da      	lsls	r2, r3, #27
    646a:	d525      	bpl.n	64b8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    646c:	f023 0310 	bic.w	r3, r3, #16
    6470:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    6472:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    6474:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    6478:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    647c:	2900      	cmp	r1, #0
    647e:	f47f af5e 	bne.w	633e <process_event+0x32>
out:
    6482:	e754      	b.n	632e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    6484:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6486:	2900      	cmp	r1, #0
    6488:	d0dc      	beq.n	6444 <process_event+0x138>
	return node->next;
    648a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    648e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    6492:	463b      	mov	r3, r7
    6494:	4652      	mov	r2, sl
    6496:	4620      	mov	r0, r4
    6498:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    649a:	f1b9 0f00 	cmp.w	r9, #0
    649e:	d0d1      	beq.n	6444 <process_event+0x138>
    64a0:	4649      	mov	r1, r9
    64a2:	f8d9 9000 	ldr.w	r9, [r9]
    64a6:	e7f2      	b.n	648e <process_event+0x182>
    64a8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    64aa:	463b      	mov	r3, r7
    64ac:	4652      	mov	r2, sl
    64ae:	4620      	mov	r0, r4
    64b0:	682d      	ldr	r5, [r5, #0]
    64b2:	f01f fb77 	bl	25ba4 <notify_one>
    64b6:	e7c5      	b.n	6444 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    64b8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    64bc:	bf1e      	ittt	ne
    64be:	f023 0320 	bicne.w	r3, r3, #32
    64c2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    64c4:	2102      	movne	r1, #2
    64c6:	e7d5      	b.n	6474 <process_event+0x168>
    64c8:	00025bd1 	.word	0x00025bd1

000064cc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    64cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64d0:	4681      	mov	r9, r0
    64d2:	b09b      	sub	sp, #108	; 0x6c
    64d4:	468a      	mov	sl, r1
    64d6:	4615      	mov	r5, r2
    64d8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    64da:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    64dc:	7828      	ldrb	r0, [r5, #0]
    64de:	b910      	cbnz	r0, 64e6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    64e0:	4630      	mov	r0, r6
    64e2:	f000 bdee 	b.w	70c2 <cbvprintf+0xbf6>
			OUTC(*fp++);
    64e6:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    64e8:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    64ea:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    64ec:	d006      	beq.n	64fc <cbvprintf+0x30>
			OUTC(*fp++);
    64ee:	4651      	mov	r1, sl
			OUTC('%');
    64f0:	47c8      	blx	r9
    64f2:	2800      	cmp	r0, #0
    64f4:	f2c0 85e5 	blt.w	70c2 <cbvprintf+0xbf6>
    64f8:	3601      	adds	r6, #1
		if (bps == NULL) {
    64fa:	e24c      	b.n	6996 <cbvprintf+0x4ca>
		} state = {
    64fc:	2218      	movs	r2, #24
    64fe:	2100      	movs	r1, #0
    6500:	a80c      	add	r0, sp, #48	; 0x30
    6502:	f022 f960 	bl	287c6 <memset>
	if (*sp == '%') {
    6506:	786b      	ldrb	r3, [r5, #1]
    6508:	2b25      	cmp	r3, #37	; 0x25
    650a:	d07c      	beq.n	6606 <cbvprintf+0x13a>
    650c:	2200      	movs	r2, #0
    650e:	1c68      	adds	r0, r5, #1
    6510:	4696      	mov	lr, r2
    6512:	4690      	mov	r8, r2
    6514:	4694      	mov	ip, r2
    6516:	4617      	mov	r7, r2
    6518:	4601      	mov	r1, r0
		switch (*sp) {
    651a:	f810 3b01 	ldrb.w	r3, [r0], #1
    651e:	2b2b      	cmp	r3, #43	; 0x2b
    6520:	f000 80a0 	beq.w	6664 <cbvprintf+0x198>
    6524:	f200 8097 	bhi.w	6656 <cbvprintf+0x18a>
    6528:	2b20      	cmp	r3, #32
    652a:	f000 809e 	beq.w	666a <cbvprintf+0x19e>
    652e:	2b23      	cmp	r3, #35	; 0x23
    6530:	f000 809e 	beq.w	6670 <cbvprintf+0x1a4>
    6534:	b12f      	cbz	r7, 6542 <cbvprintf+0x76>
    6536:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    653a:	f040 0004 	orr.w	r0, r0, #4
    653e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    6542:	f1bc 0f00 	cmp.w	ip, #0
    6546:	d005      	beq.n	6554 <cbvprintf+0x88>
    6548:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    654c:	f040 0008 	orr.w	r0, r0, #8
    6550:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    6554:	f1b8 0f00 	cmp.w	r8, #0
    6558:	d005      	beq.n	6566 <cbvprintf+0x9a>
    655a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    655e:	f040 0010 	orr.w	r0, r0, #16
    6562:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    6566:	f1be 0f00 	cmp.w	lr, #0
    656a:	d005      	beq.n	6578 <cbvprintf+0xac>
    656c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    6570:	f040 0020 	orr.w	r0, r0, #32
    6574:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    6578:	b12a      	cbz	r2, 6586 <cbvprintf+0xba>
    657a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    657e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    6582:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    6586:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    658a:	f002 0044 	and.w	r0, r2, #68	; 0x44
    658e:	2844      	cmp	r0, #68	; 0x44
    6590:	d103      	bne.n	659a <cbvprintf+0xce>
		conv->flag_zero = false;
    6592:	f36f 1286 	bfc	r2, #6, #1
    6596:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    659a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    659e:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    65a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    65a4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    65a8:	d17e      	bne.n	66a8 <cbvprintf+0x1dc>
		conv->width_star = true;
    65aa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    65ae:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    65b2:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    65b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    65b8:	781a      	ldrb	r2, [r3, #0]
    65ba:	2a2e      	cmp	r2, #46	; 0x2e
    65bc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    65c0:	bf0c      	ite	eq
    65c2:	2101      	moveq	r1, #1
    65c4:	2100      	movne	r1, #0
    65c6:	f361 0241 	bfi	r2, r1, #1, #1
    65ca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    65ce:	d177      	bne.n	66c0 <cbvprintf+0x1f4>
	if (*sp == '*') {
    65d0:	785a      	ldrb	r2, [r3, #1]
    65d2:	2a2a      	cmp	r2, #42	; 0x2a
    65d4:	d06d      	beq.n	66b2 <cbvprintf+0x1e6>
	++sp;
    65d6:	3301      	adds	r3, #1
	size_t val = 0;
    65d8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    65da:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    65de:	4618      	mov	r0, r3
    65e0:	f810 2b01 	ldrb.w	r2, [r0], #1
    65e4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    65e8:	2f09      	cmp	r7, #9
    65ea:	f240 80ab 	bls.w	6744 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    65ee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    65f2:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    65f4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    65f8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    65fc:	f361 0241 	bfi	r2, r1, #1, #1
    6600:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    6604:	e05c      	b.n	66c0 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    6606:	1caa      	adds	r2, r5, #2
    6608:	9202      	str	r2, [sp, #8]
    660a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    660e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    6612:	07df      	lsls	r7, r3, #31
    6614:	f140 8173 	bpl.w	68fe <cbvprintf+0x432>
			width = va_arg(ap, int);
    6618:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    661c:	f1bb 0f00 	cmp.w	fp, #0
    6620:	da07      	bge.n	6632 <cbvprintf+0x166>
				conv->flag_dash = true;
    6622:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    6626:	f042 0204 	orr.w	r2, r2, #4
    662a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    662e:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    6632:	0758      	lsls	r0, r3, #29
    6634:	f140 816c 	bpl.w	6910 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    6638:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    663c:	f1b8 0f00 	cmp.w	r8, #0
    6640:	f280 816b 	bge.w	691a <cbvprintf+0x44e>
				conv->prec_present = false;
    6644:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    6648:	f36f 0341 	bfc	r3, #1, #1
    664c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    6650:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    6654:	e161      	b.n	691a <cbvprintf+0x44e>
		switch (*sp) {
    6656:	2b2d      	cmp	r3, #45	; 0x2d
    6658:	d00d      	beq.n	6676 <cbvprintf+0x1aa>
    665a:	2b30      	cmp	r3, #48	; 0x30
    665c:	f47f af6a 	bne.w	6534 <cbvprintf+0x68>
			conv->flag_zero = true;
    6660:	2201      	movs	r2, #1
	} while (loop);
    6662:	e759      	b.n	6518 <cbvprintf+0x4c>
			conv->flag_plus = true;
    6664:	f04f 0c01 	mov.w	ip, #1
    6668:	e756      	b.n	6518 <cbvprintf+0x4c>
			conv->flag_space = true;
    666a:	f04f 0801 	mov.w	r8, #1
    666e:	e753      	b.n	6518 <cbvprintf+0x4c>
			conv->flag_hash = true;
    6670:	f04f 0e01 	mov.w	lr, #1
    6674:	e750      	b.n	6518 <cbvprintf+0x4c>
		switch (*sp) {
    6676:	2701      	movs	r7, #1
    6678:	e74e      	b.n	6518 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    667a:	fb0c 7202 	mla	r2, ip, r2, r7
    667e:	3a30      	subs	r2, #48	; 0x30
    6680:	4603      	mov	r3, r0
    6682:	4618      	mov	r0, r3
    6684:	f810 7b01 	ldrb.w	r7, [r0], #1
    6688:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    668c:	f1be 0f09 	cmp.w	lr, #9
    6690:	d9f3      	bls.n	667a <cbvprintf+0x1ae>
	if (sp != wp) {
    6692:	4299      	cmp	r1, r3
    6694:	d090      	beq.n	65b8 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    6696:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    669a:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    669c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    669e:	f362 0141 	bfi	r1, r2, #1, #1
    66a2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    66a6:	e787      	b.n	65b8 <cbvprintf+0xec>
    66a8:	460b      	mov	r3, r1
	size_t val = 0;
    66aa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    66ac:	f04f 0c0a 	mov.w	ip, #10
    66b0:	e7e7      	b.n	6682 <cbvprintf+0x1b6>
		conv->prec_star = true;
    66b2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    66b6:	f042 0204 	orr.w	r2, r2, #4
    66ba:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    66be:	3302      	adds	r3, #2
	switch (*sp) {
    66c0:	4619      	mov	r1, r3
    66c2:	f811 2b01 	ldrb.w	r2, [r1], #1
    66c6:	2a6c      	cmp	r2, #108	; 0x6c
    66c8:	d05c      	beq.n	6784 <cbvprintf+0x2b8>
    66ca:	d840      	bhi.n	674e <cbvprintf+0x282>
    66cc:	2a68      	cmp	r2, #104	; 0x68
    66ce:	d046      	beq.n	675e <cbvprintf+0x292>
    66d0:	2a6a      	cmp	r2, #106	; 0x6a
    66d2:	d061      	beq.n	6798 <cbvprintf+0x2cc>
    66d4:	2a4c      	cmp	r2, #76	; 0x4c
    66d6:	d067      	beq.n	67a8 <cbvprintf+0x2dc>
    66d8:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    66da:	460b      	mov	r3, r1
    66dc:	f813 2b01 	ldrb.w	r2, [r3], #1
    66e0:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    66e2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    66e4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    66e8:	f200 80df 	bhi.w	68aa <cbvprintf+0x3de>
    66ec:	2a57      	cmp	r2, #87	; 0x57
    66ee:	d868      	bhi.n	67c2 <cbvprintf+0x2f6>
    66f0:	2a41      	cmp	r2, #65	; 0x41
    66f2:	d004      	beq.n	66fe <cbvprintf+0x232>
    66f4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    66f8:	2b02      	cmp	r3, #2
    66fa:	f200 80d6 	bhi.w	68aa <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    66fe:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    6702:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    6706:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    6708:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    670c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    6710:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    6714:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    6718:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    671c:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    6720:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    6724:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    6726:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    672a:	b2cb      	uxtb	r3, r1
    672c:	f100 80e5 	bmi.w	68fa <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    6730:	f003 0278 	and.w	r2, r3, #120	; 0x78
    6734:	2a18      	cmp	r2, #24
    6736:	f040 80b5 	bne.w	68a4 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    673a:	f36f 03c6 	bfc	r3, #3, #4
    673e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6742:	e09c      	b.n	687e <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    6744:	fb0c 2101 	mla	r1, ip, r1, r2
    6748:	3930      	subs	r1, #48	; 0x30
    674a:	4603      	mov	r3, r0
    674c:	e747      	b.n	65de <cbvprintf+0x112>
	switch (*sp) {
    674e:	2a74      	cmp	r2, #116	; 0x74
    6750:	d026      	beq.n	67a0 <cbvprintf+0x2d4>
    6752:	2a7a      	cmp	r2, #122	; 0x7a
    6754:	d1c0      	bne.n	66d8 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    6756:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    675a:	2206      	movs	r2, #6
    675c:	e00d      	b.n	677a <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    675e:	785a      	ldrb	r2, [r3, #1]
    6760:	2a68      	cmp	r2, #104	; 0x68
    6762:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    6766:	d106      	bne.n	6776 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    6768:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    676a:	f361 02c6 	bfi	r2, r1, #3, #4
    676e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    6772:	1c99      	adds	r1, r3, #2
    6774:	e7b1      	b.n	66da <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    6776:	4613      	mov	r3, r2
    6778:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    677a:	f362 03c6 	bfi	r3, r2, #3, #4
    677e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    6782:	e7aa      	b.n	66da <cbvprintf+0x20e>
		if (*++sp == 'l') {
    6784:	785a      	ldrb	r2, [r3, #1]
    6786:	2a6c      	cmp	r2, #108	; 0x6c
    6788:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    678c:	d101      	bne.n	6792 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    678e:	2104      	movs	r1, #4
    6790:	e7eb      	b.n	676a <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    6792:	4613      	mov	r3, r2
    6794:	2203      	movs	r2, #3
    6796:	e7f0      	b.n	677a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    6798:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    679c:	2205      	movs	r2, #5
    679e:	e7ec      	b.n	677a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    67a0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    67a4:	2207      	movs	r2, #7
    67a6:	e7e8      	b.n	677a <cbvprintf+0x2ae>
		conv->unsupported = true;
    67a8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    67ac:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    67b0:	f023 0302 	bic.w	r3, r3, #2
    67b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    67b8:	f043 0302 	orr.w	r3, r3, #2
    67bc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    67c0:	e78b      	b.n	66da <cbvprintf+0x20e>
	switch (conv->specifier) {
    67c2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    67c6:	2b20      	cmp	r3, #32
    67c8:	d86f      	bhi.n	68aa <cbvprintf+0x3de>
    67ca:	a101      	add	r1, pc, #4	; (adr r1, 67d0 <cbvprintf+0x304>)
    67cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    67d0:	00006883 	.word	0x00006883
    67d4:	000068ab 	.word	0x000068ab
    67d8:	000068ab 	.word	0x000068ab
    67dc:	000068ab 	.word	0x000068ab
    67e0:	000068ab 	.word	0x000068ab
    67e4:	000068ab 	.word	0x000068ab
    67e8:	000068ab 	.word	0x000068ab
    67ec:	000068ab 	.word	0x000068ab
    67f0:	000068ab 	.word	0x000068ab
    67f4:	000066ff 	.word	0x000066ff
    67f8:	000068ab 	.word	0x000068ab
    67fc:	00006883 	.word	0x00006883
    6800:	00006855 	.word	0x00006855
    6804:	000066ff 	.word	0x000066ff
    6808:	000066ff 	.word	0x000066ff
    680c:	000066ff 	.word	0x000066ff
    6810:	000068ab 	.word	0x000068ab
    6814:	00006855 	.word	0x00006855
    6818:	000068ab 	.word	0x000068ab
    681c:	000068ab 	.word	0x000068ab
    6820:	000068ab 	.word	0x000068ab
    6824:	000068ab 	.word	0x000068ab
    6828:	000068b9 	.word	0x000068b9
    682c:	00006883 	.word	0x00006883
    6830:	000068dd 	.word	0x000068dd
    6834:	000068ab 	.word	0x000068ab
    6838:	000068ab 	.word	0x000068ab
    683c:	000068dd 	.word	0x000068dd
    6840:	000068ab 	.word	0x000068ab
    6844:	00006883 	.word	0x00006883
    6848:	000068ab 	.word	0x000068ab
    684c:	000068ab 	.word	0x000068ab
    6850:	00006883 	.word	0x00006883
		conv->specifier_cat = SPECIFIER_SINT;
    6854:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    6858:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    685a:	f361 0302 	bfi	r3, r1, #0, #3
    685e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    6862:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    6866:	f003 0378 	and.w	r3, r3, #120	; 0x78
    686a:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    686c:	bf02      	ittt	eq
    686e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    6872:	f041 0101 	orreq.w	r1, r1, #1
    6876:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    687a:	2a63      	cmp	r2, #99	; 0x63
    687c:	d005      	beq.n	688a <cbvprintf+0x3be>
	bool unsupported = false;
    687e:	2300      	movs	r3, #0
    6880:	e006      	b.n	6890 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    6882:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    6886:	2102      	movs	r1, #2
    6888:	e7e7      	b.n	685a <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    688a:	3b00      	subs	r3, #0
    688c:	bf18      	it	ne
    688e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    6890:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    6894:	f3c2 0140 	ubfx	r1, r2, #1, #1
    6898:	430b      	orrs	r3, r1
    689a:	f363 0241 	bfi	r2, r3, #1, #1
    689e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    68a2:	e6b4      	b.n	660e <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    68a4:	f013 0f38 	tst.w	r3, #56	; 0x38
    68a8:	d0e9      	beq.n	687e <cbvprintf+0x3b2>
			conv->invalid = true;
    68aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    68ae:	f043 0301 	orr.w	r3, r3, #1
    68b2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    68b6:	e7e2      	b.n	687e <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    68b8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    68bc:	2203      	movs	r2, #3
    68be:	f362 0302 	bfi	r3, r2, #0, #3
    68c2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    68c6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    68ca:	f003 0378 	and.w	r3, r3, #120	; 0x78
    68ce:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    68d2:	f1dc 0300 	rsbs	r3, ip, #0
    68d6:	eb43 030c 	adc.w	r3, r3, ip
    68da:	e7d9      	b.n	6890 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    68dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    68e0:	2203      	movs	r2, #3
    68e2:	f362 0302 	bfi	r3, r2, #0, #3
    68e6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    68ea:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    68ee:	f013 0f78 	tst.w	r3, #120	; 0x78
    68f2:	bf14      	ite	ne
    68f4:	2301      	movne	r3, #1
    68f6:	2300      	moveq	r3, #0
    68f8:	e7ca      	b.n	6890 <cbvprintf+0x3c4>
			unsupported = true;
    68fa:	2301      	movs	r3, #1
    68fc:	e7c8      	b.n	6890 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    68fe:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    6902:	2a00      	cmp	r2, #0
			width = conv->width_value;
    6904:	bfb4      	ite	lt
    6906:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    690a:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    690e:	e690      	b.n	6632 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    6910:	0799      	lsls	r1, r3, #30
    6912:	f57f ae9d 	bpl.w	6650 <cbvprintf+0x184>
			precision = conv->prec_value;
    6916:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    691a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    691e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    6920:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    6924:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    6928:	f003 0207 	and.w	r2, r3, #7
    692c:	2a04      	cmp	r2, #4
    692e:	d109      	bne.n	6944 <cbvprintf+0x478>
		    && !conv->prec_present) {
    6930:	078a      	lsls	r2, r1, #30
    6932:	d407      	bmi.n	6944 <cbvprintf+0x478>
			if (conv->specifier_a) {
    6934:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    6938:	2a00      	cmp	r2, #0
    693a:	bfb4      	ite	lt
    693c:	f04f 080d 	movlt.w	r8, #13
    6940:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    6944:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    6948:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    694a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    694e:	d137      	bne.n	69c0 <cbvprintf+0x4f4>
			switch (length_mod) {
    6950:	1ecb      	subs	r3, r1, #3
    6952:	2b04      	cmp	r3, #4
    6954:	d821      	bhi.n	699a <cbvprintf+0x4ce>
    6956:	e8df f003 	tbb	[pc, r3]
    695a:	0903      	.short	0x0903
    695c:	2009      	.short	0x2009
    695e:	20          	.byte	0x20
    695f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    6960:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    6964:	17da      	asrs	r2, r3, #31
    6966:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    696a:	e006      	b.n	697a <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    696c:	3407      	adds	r4, #7
    696e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    6972:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    6976:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    697a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    697e:	07bb      	lsls	r3, r7, #30
    6980:	d056      	beq.n	6a30 <cbvprintf+0x564>
			OUTS(sp, fp);
    6982:	9b02      	ldr	r3, [sp, #8]
    6984:	462a      	mov	r2, r5
    6986:	4651      	mov	r1, sl
    6988:	4648      	mov	r0, r9
    698a:	f01f fc20 	bl	261ce <outs>
    698e:	2800      	cmp	r0, #0
    6990:	f2c0 8397 	blt.w	70c2 <cbvprintf+0xbf6>
    6994:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    6996:	9d02      	ldr	r5, [sp, #8]
    6998:	e5a0      	b.n	64dc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    699a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    699e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    69a0:	ea4f 72e3 	mov.w	r2, r3, asr #31
    69a4:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    69a8:	d105      	bne.n	69b6 <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    69aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    69ae:	930c      	str	r3, [sp, #48]	; 0x30
    69b0:	2300      	movs	r3, #0
    69b2:	930d      	str	r3, [sp, #52]	; 0x34
    69b4:	e7e1      	b.n	697a <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    69b6:	2902      	cmp	r1, #2
    69b8:	d1df      	bne.n	697a <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    69ba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    69be:	e7d1      	b.n	6964 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    69c0:	2b02      	cmp	r3, #2
    69c2:	d123      	bne.n	6a0c <cbvprintf+0x540>
			switch (length_mod) {
    69c4:	1ecb      	subs	r3, r1, #3
    69c6:	2b04      	cmp	r3, #4
    69c8:	d813      	bhi.n	69f2 <cbvprintf+0x526>
    69ca:	e8df f003 	tbb	[pc, r3]
    69ce:	0a03      	.short	0x0a03
    69d0:	120a      	.short	0x120a
    69d2:	12          	.byte	0x12
    69d3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    69d4:	6822      	ldr	r2, [r4, #0]
    69d6:	920c      	str	r2, [sp, #48]	; 0x30
    69d8:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    69da:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    69dc:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    69de:	4604      	mov	r4, r0
    69e0:	e7cb      	b.n	697a <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    69e2:	1de0      	adds	r0, r4, #7
    69e4:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    69e8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    69ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    69f0:	e7f5      	b.n	69de <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    69f2:	f854 3b04 	ldr.w	r3, [r4], #4
    69f6:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    69f8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    69fa:	f04f 0300 	mov.w	r3, #0
    69fe:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    6a00:	d0d3      	beq.n	69aa <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    6a02:	2902      	cmp	r1, #2
    6a04:	d1b9      	bne.n	697a <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    6a06:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6a0a:	e7d0      	b.n	69ae <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    6a0c:	2b04      	cmp	r3, #4
    6a0e:	d109      	bne.n	6a24 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    6a10:	1de3      	adds	r3, r4, #7
    6a12:	f023 0307 	bic.w	r3, r3, #7
    6a16:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    6a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    6a22:	e7aa      	b.n	697a <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    6a24:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    6a26:	bf04      	itt	eq
    6a28:	f854 3b04 	ldreq.w	r3, [r4], #4
    6a2c:	930c      	streq	r3, [sp, #48]	; 0x30
    6a2e:	e7a4      	b.n	697a <cbvprintf+0x4ae>
		switch (conv->specifier) {
    6a30:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    6a34:	2a78      	cmp	r2, #120	; 0x78
    6a36:	d8ae      	bhi.n	6996 <cbvprintf+0x4ca>
    6a38:	2a57      	cmp	r2, #87	; 0x57
    6a3a:	f200 808c 	bhi.w	6b56 <cbvprintf+0x68a>
    6a3e:	2a25      	cmp	r2, #37	; 0x25
    6a40:	f000 80d4 	beq.w	6bec <cbvprintf+0x720>
    6a44:	2a24      	cmp	r2, #36	; 0x24
    6a46:	d9a6      	bls.n	6996 <cbvprintf+0x4ca>
    6a48:	2a41      	cmp	r2, #65	; 0x41
    6a4a:	d003      	beq.n	6a54 <cbvprintf+0x588>
    6a4c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    6a50:	2b02      	cmp	r3, #2
    6a52:	d8a0      	bhi.n	6996 <cbvprintf+0x4ca>
	} u = {
    6a54:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    6a58:	2b00      	cmp	r3, #0
    6a5a:	f2c0 81be 	blt.w	6dda <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    6a5e:	0738      	lsls	r0, r7, #28
    6a60:	f100 81bd 	bmi.w	6dde <cbvprintf+0x912>
		*sign = ' ';
    6a64:	f017 0710 	ands.w	r7, r7, #16
    6a68:	bf18      	it	ne
    6a6a:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    6a6c:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    6a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6a74:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    6a78:	2d00      	cmp	r5, #0
    6a7a:	f040 81b2 	bne.w	6de2 <cbvprintf+0x916>
    6a7e:	ea51 0003 	orrs.w	r0, r1, r3
    6a82:	bf14      	ite	ne
    6a84:	2001      	movne	r0, #1
    6a86:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    6a88:	02db      	lsls	r3, r3, #11
    6a8a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    6a8e:	02c9      	lsls	r1, r1, #11
		c = 'f';
    6a90:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    6a92:	ea45 0e01 	orr.w	lr, r5, r1
    6a96:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    6a9a:	bf08      	it	eq
    6a9c:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    6a9e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    6aa2:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    6aa6:	f000 8206 	beq.w	6eb6 <cbvprintf+0x9ea>
		if (is_subnormal) {
    6aaa:	2800      	cmp	r0, #0
    6aac:	f040 81ce 	bne.w	6e4c <cbvprintf+0x980>
		fract |= BIT_63;
    6ab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    6ab4:	f04f 0c00 	mov.w	ip, #0
    6ab8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    6abc:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    6ac0:	9109      	str	r1, [sp, #36]	; 0x24
    6ac2:	4663      	mov	r3, ip
		fract *= 5U;
    6ac4:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    6ac8:	f115 0f02 	cmn.w	r5, #2
    6acc:	f2c0 81c5 	blt.w	6e5a <cbvprintf+0x98e>
    6ad0:	f1bc 0f00 	cmp.w	ip, #0
    6ad4:	d001      	beq.n	6ada <cbvprintf+0x60e>
    6ad6:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    6ada:	2d00      	cmp	r5, #0
		fract += 2;
    6adc:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    6ae0:	f300 81d0 	bgt.w	6e84 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    6ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ae6:	9908      	ldr	r1, [sp, #32]
    6ae8:	f1c5 0c04 	rsb	ip, r5, #4
    6aec:	351c      	adds	r5, #28
    6aee:	fa00 f505 	lsl.w	r5, r0, r5
    6af2:	f1ac 0e20 	sub.w	lr, ip, #32
    6af6:	fa21 f10c 	lsr.w	r1, r1, ip
    6afa:	fa20 fe0e 	lsr.w	lr, r0, lr
    6afe:	4329      	orrs	r1, r5
    6b00:	ea41 010e 	orr.w	r1, r1, lr
    6b04:	fa20 f00c 	lsr.w	r0, r0, ip
    6b08:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    6b0c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    6b10:	2947      	cmp	r1, #71	; 0x47
    6b12:	f040 81d7 	bne.w	6ec4 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    6b16:	1cdd      	adds	r5, r3, #3
    6b18:	db02      	blt.n	6b20 <cbvprintf+0x654>
    6b1a:	4598      	cmp	r8, r3
    6b1c:	f280 81ce 	bge.w	6ebc <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    6b20:	3a02      	subs	r2, #2
			if (precision > 0) {
    6b22:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    6b26:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    6b28:	dd01      	ble.n	6b2e <cbvprintf+0x662>
				precision--;
    6b2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    6b2e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6b32:	0688      	lsls	r0, r1, #26
    6b34:	f100 81c6 	bmi.w	6ec4 <cbvprintf+0x9f8>
    6b38:	f1b8 0f00 	cmp.w	r8, #0
    6b3c:	bfd4      	ite	le
    6b3e:	2100      	movle	r1, #0
    6b40:	2101      	movgt	r1, #1
	if (c == 'f') {
    6b42:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    6b44:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    6b46:	f040 81bf 	bne.w	6ec8 <cbvprintf+0x9fc>
		if (decimals < 0) {
    6b4a:	eb18 0503 	adds.w	r5, r8, r3
    6b4e:	f140 81bd 	bpl.w	6ecc <cbvprintf+0xa00>
			decimals = 0;
    6b52:	2500      	movs	r5, #0
    6b54:	e1bd      	b.n	6ed2 <cbvprintf+0xa06>
		switch (conv->specifier) {
    6b56:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    6b5a:	2b20      	cmp	r3, #32
    6b5c:	f63f af1b 	bhi.w	6996 <cbvprintf+0x4ca>
    6b60:	a001      	add	r0, pc, #4	; (adr r0, 6b68 <cbvprintf+0x69c>)
    6b62:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    6b66:	bf00      	nop
    6b68:	00006d7d 	.word	0x00006d7d
    6b6c:	00006997 	.word	0x00006997
    6b70:	00006997 	.word	0x00006997
    6b74:	00006997 	.word	0x00006997
    6b78:	00006997 	.word	0x00006997
    6b7c:	00006997 	.word	0x00006997
    6b80:	00006997 	.word	0x00006997
    6b84:	00006997 	.word	0x00006997
    6b88:	00006997 	.word	0x00006997
    6b8c:	00006a55 	.word	0x00006a55
    6b90:	00006997 	.word	0x00006997
    6b94:	00006c19 	.word	0x00006c19
    6b98:	00006d1d 	.word	0x00006d1d
    6b9c:	00006a55 	.word	0x00006a55
    6ba0:	00006a55 	.word	0x00006a55
    6ba4:	00006a55 	.word	0x00006a55
    6ba8:	00006997 	.word	0x00006997
    6bac:	00006d1d 	.word	0x00006d1d
    6bb0:	00006997 	.word	0x00006997
    6bb4:	00006997 	.word	0x00006997
    6bb8:	00006997 	.word	0x00006997
    6bbc:	00006997 	.word	0x00006997
    6bc0:	00006db3 	.word	0x00006db3
    6bc4:	00006d7d 	.word	0x00006d7d
    6bc8:	00006d81 	.word	0x00006d81
    6bcc:	00006997 	.word	0x00006997
    6bd0:	00006997 	.word	0x00006997
    6bd4:	00006bf3 	.word	0x00006bf3
    6bd8:	00006997 	.word	0x00006997
    6bdc:	00006d7d 	.word	0x00006d7d
    6be0:	00006997 	.word	0x00006997
    6be4:	00006997 	.word	0x00006997
    6be8:	00006d7d 	.word	0x00006d7d
			OUTC('%');
    6bec:	4651      	mov	r1, sl
    6bee:	4610      	mov	r0, r2
    6bf0:	e47e      	b.n	64f0 <cbvprintf+0x24>
			if (precision >= 0) {
    6bf2:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    6bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    6bf8:	db09      	blt.n	6c0e <cbvprintf+0x742>
				len = strnlen(bps, precision);
    6bfa:	4641      	mov	r1, r8
    6bfc:	4610      	mov	r0, r2
    6bfe:	9203      	str	r2, [sp, #12]
    6c00:	f021 fd87 	bl	28712 <strnlen>
				len = strlen(bps);
    6c04:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    6c06:	2700      	movs	r7, #0
			bpe = bps + len;
    6c08:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    6c0a:	b962      	cbnz	r2, 6c26 <cbvprintf+0x75a>
    6c0c:	e6c3      	b.n	6996 <cbvprintf+0x4ca>
				len = strlen(bps);
    6c0e:	4610      	mov	r0, r2
    6c10:	9203      	str	r2, [sp, #12]
    6c12:	f021 fd77 	bl	28704 <strlen>
    6c16:	e7f5      	b.n	6c04 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    6c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c1a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    6c1e:	2700      	movs	r7, #0
			bpe = buf + 1;
    6c20:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    6c24:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    6c26:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    6c28:	b107      	cbz	r7, 6c2c <cbvprintf+0x760>
			nj_len += 1U;
    6c2a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    6c2c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    6c30:	06c1      	lsls	r1, r0, #27
    6c32:	f140 823a 	bpl.w	70aa <cbvprintf+0xbde>
			nj_len += 2U;
    6c36:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    6c38:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    6c3a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    6c3c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    6c3e:	bf44      	itt	mi
    6c40:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    6c42:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    6c44:	f1bb 0f00 	cmp.w	fp, #0
    6c48:	dd23      	ble.n	6c92 <cbvprintf+0x7c6>
			width -= (int)nj_len;
    6c4a:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    6c4e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    6c52:	0759      	lsls	r1, r3, #29
    6c54:	f3c3 0880 	ubfx	r8, r3, #2, #1
    6c58:	d41b      	bmi.n	6c92 <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    6c5a:	0658      	lsls	r0, r3, #25
    6c5c:	f140 8234 	bpl.w	70c8 <cbvprintf+0xbfc>
					if (sign != 0) {
    6c60:	2f00      	cmp	r7, #0
    6c62:	f000 8234 	beq.w	70ce <cbvprintf+0xc02>
						OUTC(sign);
    6c66:	4651      	mov	r1, sl
    6c68:	4638      	mov	r0, r7
    6c6a:	9203      	str	r2, [sp, #12]
    6c6c:	47c8      	blx	r9
    6c6e:	2800      	cmp	r0, #0
    6c70:	f2c0 8227 	blt.w	70c2 <cbvprintf+0xbf6>
    6c74:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    6c76:	4647      	mov	r7, r8
						OUTC(sign);
    6c78:	3601      	adds	r6, #1
					pad = '0';
    6c7a:	f04f 0830 	mov.w	r8, #48	; 0x30
    6c7e:	445e      	add	r6, fp
    6c80:	465b      	mov	r3, fp
				while (width-- > 0) {
    6c82:	2b00      	cmp	r3, #0
    6c84:	eba6 000b 	sub.w	r0, r6, fp
    6c88:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    6c8c:	f300 8211 	bgt.w	70b2 <cbvprintf+0xbe6>
    6c90:	4606      	mov	r6, r0
		if (sign != 0) {
    6c92:	b147      	cbz	r7, 6ca6 <cbvprintf+0x7da>
			OUTC(sign);
    6c94:	4651      	mov	r1, sl
    6c96:	4638      	mov	r0, r7
    6c98:	9203      	str	r2, [sp, #12]
    6c9a:	47c8      	blx	r9
    6c9c:	2800      	cmp	r0, #0
    6c9e:	f2c0 8210 	blt.w	70c2 <cbvprintf+0xbf6>
    6ca2:	9a03      	ldr	r2, [sp, #12]
    6ca4:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    6ca6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    6caa:	0659      	lsls	r1, r3, #25
    6cac:	f140 8265 	bpl.w	717a <cbvprintf+0xcae>
			if (conv->specifier_a) {
    6cb0:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	eba6 0302 	sub.w	r3, r6, r2
    6cba:	9303      	str	r3, [sp, #12]
    6cbc:	f2c0 820a 	blt.w	70d4 <cbvprintf+0xc08>
    6cc0:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    6cc2:	7838      	ldrb	r0, [r7, #0]
    6cc4:	9b03      	ldr	r3, [sp, #12]
    6cc6:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    6cca:	2a09      	cmp	r2, #9
    6ccc:	46b8      	mov	r8, r7
    6cce:	eb03 0607 	add.w	r6, r3, r7
    6cd2:	f107 0701 	add.w	r7, r7, #1
    6cd6:	f240 8229 	bls.w	712c <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    6cda:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    6cde:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    6ce0:	0693      	lsls	r3, r2, #26
    6ce2:	d408      	bmi.n	6cf6 <cbvprintf+0x82a>
    6ce4:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    6ce6:	2f00      	cmp	r7, #0
    6ce8:	eba6 0307 	sub.w	r3, r6, r7
    6cec:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    6cf0:	f300 8222 	bgt.w	7138 <cbvprintf+0xc6c>
    6cf4:	461e      	mov	r6, r3
				if (*cp == '.') {
    6cf6:	f898 0000 	ldrb.w	r0, [r8]
    6cfa:	282e      	cmp	r0, #46	; 0x2e
    6cfc:	d10b      	bne.n	6d16 <cbvprintf+0x84a>
					OUTC(*cp++);
    6cfe:	4651      	mov	r1, sl
    6d00:	47c8      	blx	r9
						OUTC('0');
    6d02:	2800      	cmp	r0, #0
    6d04:	f2c0 81dd 	blt.w	70c2 <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    6d08:	2f00      	cmp	r7, #0
						OUTC('0');
    6d0a:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    6d0e:	f300 821a 	bgt.w	7146 <cbvprintf+0xc7a>
					OUTC(*cp++);
    6d12:	f108 0801 	add.w	r8, r8, #1
    6d16:	eba6 0608 	sub.w	r6, r6, r8
    6d1a:	e21d      	b.n	7158 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    6d1c:	073d      	lsls	r5, r7, #28
    6d1e:	d42b      	bmi.n	6d78 <cbvprintf+0x8ac>
				sign = ' ';
    6d20:	f017 0710 	ands.w	r7, r7, #16
    6d24:	bf18      	it	ne
    6d26:	2720      	movne	r7, #32
			sint = value->sint;
    6d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	da05      	bge.n	6d3c <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    6d30:	4252      	negs	r2, r2
    6d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6d36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    6d3a:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    6d3c:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    6d40:	9300      	str	r3, [sp, #0]
    6d42:	aa0e      	add	r2, sp, #56	; 0x38
    6d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    6d48:	ab13      	add	r3, sp, #76	; 0x4c
    6d4a:	f01f f9fa 	bl	26142 <encode_uint>
    6d4e:	4602      	mov	r2, r0
			if (precision >= 0) {
    6d50:	f1b8 0f00 	cmp.w	r8, #0
    6d54:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    6d58:	f6ff af57 	blt.w	6c0a <cbvprintf+0x73e>
				conv->flag_zero = false;
    6d5c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    6d60:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    6d62:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    6d66:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    6d68:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    6d6c:	f67f af4d 	bls.w	6c0a <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    6d70:	eba8 0303 	sub.w	r3, r8, r3
    6d74:	930f      	str	r3, [sp, #60]	; 0x3c
    6d76:	e748      	b.n	6c0a <cbvprintf+0x73e>
				sign = '+';
    6d78:	272b      	movs	r7, #43	; 0x2b
    6d7a:	e7d5      	b.n	6d28 <cbvprintf+0x85c>
		switch (conv->specifier) {
    6d7c:	2700      	movs	r7, #0
    6d7e:	e7dd      	b.n	6d3c <cbvprintf+0x870>
			if (value->ptr != NULL) {
    6d80:	980c      	ldr	r0, [sp, #48]	; 0x30
    6d82:	2800      	cmp	r0, #0
    6d84:	f000 818d 	beq.w	70a2 <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    6d88:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    6d8c:	9300      	str	r3, [sp, #0]
    6d8e:	aa0e      	add	r2, sp, #56	; 0x38
    6d90:	ab13      	add	r3, sp, #76	; 0x4c
    6d92:	2100      	movs	r1, #0
    6d94:	f01f f9d5 	bl	26142 <encode_uint>
				conv->altform_0c = true;
    6d98:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    6d9c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    6da0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    6da4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    6da8:	4602      	mov	r2, r0
				conv->altform_0c = true;
    6daa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    6dae:	2700      	movs	r7, #0
				goto prec_int_pad0;
    6db0:	e7ce      	b.n	6d50 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    6db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    6db4:	2907      	cmp	r1, #7
    6db6:	f63f adee 	bhi.w	6996 <cbvprintf+0x4ca>
    6dba:	e8df f001 	tbb	[pc, r1]
    6dbe:	040c      	.short	0x040c
    6dc0:	08080c06 	.word	0x08080c06
    6dc4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    6dc6:	701e      	strb	r6, [r3, #0]
		break;
    6dc8:	e5e5      	b.n	6996 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    6dca:	801e      	strh	r6, [r3, #0]
		break;
    6dcc:	e5e3      	b.n	6996 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    6dce:	17f2      	asrs	r2, r6, #31
    6dd0:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    6dd4:	e5df      	b.n	6996 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    6dd6:	601e      	str	r6, [r3, #0]
		break;
    6dd8:	e5dd      	b.n	6996 <cbvprintf+0x4ca>
		*sign = '-';
    6dda:	272d      	movs	r7, #45	; 0x2d
    6ddc:	e646      	b.n	6a6c <cbvprintf+0x5a0>
		*sign = '+';
    6dde:	272b      	movs	r7, #43	; 0x2b
    6de0:	e644      	b.n	6a6c <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    6de2:	f240 70ff 	movw	r0, #2047	; 0x7ff
    6de6:	4285      	cmp	r5, r0
    6de8:	d12d      	bne.n	6e46 <cbvprintf+0x97a>
		if (fract == 0) {
    6dea:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6dec:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    6df0:	d11b      	bne.n	6e2a <cbvprintf+0x95e>
			if (isupper((int)c)) {
    6df2:	2a19      	cmp	r2, #25
    6df4:	d811      	bhi.n	6e1a <cbvprintf+0x94e>
				*buf++ = 'I';
    6df6:	2349      	movs	r3, #73	; 0x49
    6df8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    6dfc:	234e      	movs	r3, #78	; 0x4e
    6dfe:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    6e02:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    6e04:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    6e08:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    6e0c:	f36f 1386 	bfc	r3, #6, #1
    6e10:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    6e14:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    6e18:	e704      	b.n	6c24 <cbvprintf+0x758>
				*buf++ = 'i';
    6e1a:	2369      	movs	r3, #105	; 0x69
    6e1c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    6e20:	236e      	movs	r3, #110	; 0x6e
    6e22:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    6e26:	2366      	movs	r3, #102	; 0x66
    6e28:	e7ec      	b.n	6e04 <cbvprintf+0x938>
			if (isupper((int)c)) {
    6e2a:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    6e2c:	bf99      	ittee	ls
    6e2e:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    6e30:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    6e32:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    6e34:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    6e36:	bf94      	ite	ls
    6e38:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    6e3c:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    6e40:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    6e44:	e7de      	b.n	6e04 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    6e46:	2000      	movs	r0, #0
    6e48:	e61e      	b.n	6a88 <cbvprintf+0x5bc>
				expo--;
    6e4a:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    6e4c:	1849      	adds	r1, r1, r1
    6e4e:	415b      	adcs	r3, r3
    6e50:	2b00      	cmp	r3, #0
    6e52:	dafa      	bge.n	6e4a <cbvprintf+0x97e>
    6e54:	e9cd 1308 	strd	r1, r3, [sp, #32]
    6e58:	e62a      	b.n	6ab0 <cbvprintf+0x5e4>
			fract >>= 1;
    6e5a:	0840      	lsrs	r0, r0, #1
    6e5c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    6e60:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    6e62:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    6e66:	46ac      	mov	ip, r5
			expo++;
    6e68:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    6e6c:	d2f5      	bcs.n	6e5a <cbvprintf+0x98e>
		fract *= 5U;
    6e6e:	fb0e f501 	mul.w	r5, lr, r1
    6e72:	fba0 010e 	umull	r0, r1, r0, lr
    6e76:	4429      	add	r1, r5
		decexp--;
    6e78:	3b01      	subs	r3, #1
		expo++;
    6e7a:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    6e7e:	f04f 0c01 	mov.w	ip, #1
    6e82:	e621      	b.n	6ac8 <cbvprintf+0x5fc>
		fract += 2;
    6e84:	3102      	adds	r1, #2
    6e86:	f140 0000 	adc.w	r0, r0, #0
    6e8a:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    6e8e:	a808      	add	r0, sp, #32
    6e90:	e9cd 2303 	strd	r2, r3, [sp, #12]
    6e94:	f01f f926 	bl	260e4 <_ldiv5>
		decexp++;
    6e98:	9b04      	ldr	r3, [sp, #16]
    6e9a:	9a03      	ldr	r2, [sp, #12]
    6e9c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    6ea0:	3d01      	subs	r5, #1
		decexp++;
    6ea2:	3301      	adds	r3, #1
			fract <<= 1;
    6ea4:	1849      	adds	r1, r1, r1
    6ea6:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    6ea8:	2800      	cmp	r0, #0
			expo--;
    6eaa:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    6eae:	daf9      	bge.n	6ea4 <cbvprintf+0x9d8>
    6eb0:	e9cd 1008 	strd	r1, r0, [sp, #32]
    6eb4:	e611      	b.n	6ada <cbvprintf+0x60e>
    6eb6:	2300      	movs	r3, #0
    6eb8:	461d      	mov	r5, r3
    6eba:	e613      	b.n	6ae4 <cbvprintf+0x618>
			precision -= decexp;
    6ebc:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    6ec0:	2266      	movs	r2, #102	; 0x66
    6ec2:	e634      	b.n	6b2e <cbvprintf+0x662>
	bool prune_zero = false;
    6ec4:	2100      	movs	r1, #0
    6ec6:	e63c      	b.n	6b42 <cbvprintf+0x676>
		decimals = precision + 1;
    6ec8:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    6ecc:	2d10      	cmp	r5, #16
    6ece:	bfa8      	it	ge
    6ed0:	2510      	movge	r5, #16
    6ed2:	2110      	movs	r1, #16
    6ed4:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    6ed6:	2000      	movs	r0, #0
    6ed8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    6edc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    6ee0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    6ee4:	b9a5      	cbnz	r5, 6f10 <cbvprintf+0xa44>
	fract += round;
    6ee6:	9d08      	ldr	r5, [sp, #32]
    6ee8:	1949      	adds	r1, r1, r5
    6eea:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6eec:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    6ef0:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    6ef4:	d21b      	bcs.n	6f2e <cbvprintf+0xa62>
	fract += round;
    6ef6:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    6efa:	2a66      	cmp	r2, #102	; 0x66
    6efc:	f040 8099 	bne.w	7032 <cbvprintf+0xb66>
		if (decexp > 0) {
    6f00:	2b00      	cmp	r3, #0
    6f02:	dc23      	bgt.n	6f4c <cbvprintf+0xa80>
			*buf++ = '0';
    6f04:	2130      	movs	r1, #48	; 0x30
    6f06:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    6f0a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    6f0e:	e02f      	b.n	6f70 <cbvprintf+0xaa4>
	*v >>= 1;
    6f10:	0849      	lsrs	r1, r1, #1
    6f12:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    6f16:	0840      	lsrs	r0, r0, #1
    6f18:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    6f1c:	a80a      	add	r0, sp, #40	; 0x28
    6f1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6f22:	3d01      	subs	r5, #1
    6f24:	f01f f8de 	bl	260e4 <_ldiv5>
    6f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    6f2c:	e7d8      	b.n	6ee0 <cbvprintf+0xa14>
	*v >>= 1;
    6f2e:	0849      	lsrs	r1, r1, #1
    6f30:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    6f34:	a808      	add	r0, sp, #32
	*v >>= 1;
    6f36:	086d      	lsrs	r5, r5, #1
    6f38:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6f3c:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    6f40:	f01f f8d0 	bl	260e4 <_ldiv5>
		decexp++;
    6f44:	9b05      	ldr	r3, [sp, #20]
    6f46:	9a04      	ldr	r2, [sp, #16]
    6f48:	3301      	adds	r3, #1
    6f4a:	e7d6      	b.n	6efa <cbvprintf+0xa2e>
	char *buf = bps;
    6f4c:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    6f4e:	9907      	ldr	r1, [sp, #28]
    6f50:	2900      	cmp	r1, #0
    6f52:	dd0b      	ble.n	6f6c <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    6f54:	a907      	add	r1, sp, #28
    6f56:	a808      	add	r0, sp, #32
    6f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6f5c:	f01f f8da 	bl	26114 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    6f60:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    6f62:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    6f66:	3b01      	subs	r3, #1
    6f68:	9a04      	ldr	r2, [sp, #16]
    6f6a:	d1f0      	bne.n	6f4e <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    6f6c:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    6f6e:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    6f70:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6f74:	0689      	lsls	r1, r1, #26
    6f76:	d402      	bmi.n	6f7e <cbvprintf+0xab2>
    6f78:	f1b8 0f00 	cmp.w	r8, #0
    6f7c:	dd1d      	ble.n	6fba <cbvprintf+0xaee>
			*buf++ = '.';
    6f7e:	212e      	movs	r1, #46	; 0x2e
    6f80:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    6f84:	b19b      	cbz	r3, 6fae <cbvprintf+0xae2>
    6f86:	f1b8 0f00 	cmp.w	r8, #0
    6f8a:	dd16      	ble.n	6fba <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    6f8c:	4259      	negs	r1, r3
    6f8e:	4541      	cmp	r1, r8
    6f90:	bfa8      	it	ge
    6f92:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    6f94:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    6f98:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    6f9a:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    6f9c:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    6fa0:	bfd4      	ite	le
    6fa2:	2100      	movle	r1, #0
    6fa4:	2101      	movgt	r1, #1
    6fa6:	f361 1045 	bfi	r0, r1, #5, #1
    6faa:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    6fae:	f1b8 0f00 	cmp.w	r8, #0
    6fb2:	dd02      	ble.n	6fba <cbvprintf+0xaee>
    6fb4:	9907      	ldr	r1, [sp, #28]
    6fb6:	2900      	cmp	r1, #0
    6fb8:	dc56      	bgt.n	7068 <cbvprintf+0xb9c>
	if (prune_zero) {
    6fba:	9903      	ldr	r1, [sp, #12]
    6fbc:	2900      	cmp	r1, #0
    6fbe:	d163      	bne.n	7088 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    6fc0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    6fc4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    6fc8:	2945      	cmp	r1, #69	; 0x45
    6fca:	d121      	bne.n	7010 <cbvprintf+0xb44>
		if (decexp < 0) {
    6fcc:	2b00      	cmp	r3, #0
		*buf++ = c;
    6fce:	4629      	mov	r1, r5
			decexp = -decexp;
    6fd0:	bfb8      	it	lt
    6fd2:	425b      	neglt	r3, r3
		*buf++ = c;
    6fd4:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    6fd8:	bfb4      	ite	lt
    6fda:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    6fdc:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    6fde:	2b63      	cmp	r3, #99	; 0x63
    6fe0:	706a      	strb	r2, [r5, #1]
    6fe2:	dd09      	ble.n	6ff8 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    6fe4:	2064      	movs	r0, #100	; 0x64
    6fe6:	fbb3 f2f0 	udiv	r2, r3, r0
    6fea:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    6fee:	1ce9      	adds	r1, r5, #3
    6ff0:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    6ff4:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    6ff8:	200a      	movs	r0, #10
    6ffa:	460d      	mov	r5, r1
    6ffc:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    7000:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    7004:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    7008:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    700a:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    700e:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    7010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7012:	2b00      	cmp	r3, #0
    7014:	dc43      	bgt.n	709e <cbvprintf+0xbd2>
    7016:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7018:	2b00      	cmp	r3, #0
    701a:	bfd4      	ite	le
    701c:	2300      	movle	r3, #0
    701e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    7020:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    7024:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    7028:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    702a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    702e:	702b      	strb	r3, [r5, #0]
	return bps;
    7030:	e5f8      	b.n	6c24 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    7032:	a907      	add	r1, sp, #28
    7034:	a808      	add	r0, sp, #32
    7036:	e9cd 2304 	strd	r2, r3, [sp, #16]
    703a:	f01f f86b 	bl	26114 <_get_digit>
		if (*buf++ != '0') {
    703e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    7042:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    7046:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    704a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    704c:	bf18      	it	ne
    704e:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    7052:	0688      	lsls	r0, r1, #26
    7054:	d402      	bmi.n	705c <cbvprintf+0xb90>
    7056:	f1b8 0f00 	cmp.w	r8, #0
    705a:	dd12      	ble.n	7082 <cbvprintf+0xbb6>
			*buf++ = '.';
    705c:	212e      	movs	r1, #46	; 0x2e
    705e:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    7062:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    7066:	e7a2      	b.n	6fae <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    7068:	a907      	add	r1, sp, #28
    706a:	a808      	add	r0, sp, #32
    706c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    7070:	f01f f850 	bl	26114 <_get_digit>
		precision--;
    7074:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    7078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    707c:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    7080:	e795      	b.n	6fae <cbvprintf+0xae2>
		if (*buf++ != '0') {
    7082:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    7086:	e798      	b.n	6fba <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    7088:	2100      	movs	r1, #0
    708a:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    708c:	4628      	mov	r0, r5
    708e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    7092:	2930      	cmp	r1, #48	; 0x30
    7094:	d0fa      	beq.n	708c <cbvprintf+0xbc0>
		if (*buf != '.') {
    7096:	292e      	cmp	r1, #46	; 0x2e
    7098:	bf18      	it	ne
    709a:	4605      	movne	r5, r0
    709c:	e792      	b.n	6fc4 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    709e:	2301      	movs	r3, #1
    70a0:	e7be      	b.n	7020 <cbvprintf+0xb54>
			bpe = bps + 5;
    70a2:	4d4b      	ldr	r5, [pc, #300]	; (71d0 <cbvprintf+0xd04>)
		char sign = 0;
    70a4:	4607      	mov	r7, r0
			bps = "(nil)";
    70a6:	1f6a      	subs	r2, r5, #5
    70a8:	e5bd      	b.n	6c26 <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    70aa:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    70ac:	bf48      	it	mi
    70ae:	3301      	addmi	r3, #1
    70b0:	e5c2      	b.n	6c38 <cbvprintf+0x76c>
					OUTC(pad);
    70b2:	4651      	mov	r1, sl
    70b4:	4640      	mov	r0, r8
    70b6:	9203      	str	r2, [sp, #12]
    70b8:	47c8      	blx	r9
    70ba:	2800      	cmp	r0, #0
    70bc:	9a03      	ldr	r2, [sp, #12]
    70be:	f6bf addf 	bge.w	6c80 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    70c2:	b01b      	add	sp, #108	; 0x6c
    70c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    70c8:	f04f 0820 	mov.w	r8, #32
    70cc:	e5d7      	b.n	6c7e <cbvprintf+0x7b2>
					pad = '0';
    70ce:	f04f 0830 	mov.w	r8, #48	; 0x30
    70d2:	e5d4      	b.n	6c7e <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    70d4:	4690      	mov	r8, r2
    70d6:	9b03      	ldr	r3, [sp, #12]
    70d8:	4647      	mov	r7, r8
    70da:	4443      	add	r3, r8
				while (*cp != 'p') {
    70dc:	f818 0b01 	ldrb.w	r0, [r8], #1
    70e0:	2870      	cmp	r0, #112	; 0x70
    70e2:	d11e      	bne.n	7122 <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    70e4:	461e      	mov	r6, r3
    70e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    70e8:	eb03 0806 	add.w	r8, r3, r6
    70ec:	eba8 0306 	sub.w	r3, r8, r6
    70f0:	2b00      	cmp	r3, #0
    70f2:	dc3b      	bgt.n	716c <cbvprintf+0xca0>
			OUTS(cp, bpe);
    70f4:	462b      	mov	r3, r5
    70f6:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    70f8:	4651      	mov	r1, sl
    70fa:	4648      	mov	r0, r9
    70fc:	f01f f867 	bl	261ce <outs>
    7100:	2800      	cmp	r0, #0
    7102:	dbde      	blt.n	70c2 <cbvprintf+0xbf6>
    7104:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    7106:	4606      	mov	r6, r0
    7108:	4483      	add	fp, r0
		while (width > 0) {
    710a:	ebab 0306 	sub.w	r3, fp, r6
    710e:	2b00      	cmp	r3, #0
    7110:	f77f ac41 	ble.w	6996 <cbvprintf+0x4ca>
			OUTC(' ');
    7114:	4651      	mov	r1, sl
    7116:	2020      	movs	r0, #32
    7118:	47c8      	blx	r9
    711a:	2800      	cmp	r0, #0
    711c:	dbd1      	blt.n	70c2 <cbvprintf+0xbf6>
    711e:	3601      	adds	r6, #1
			--width;
    7120:	e7f3      	b.n	710a <cbvprintf+0xc3e>
					OUTC(*cp++);
    7122:	4651      	mov	r1, sl
    7124:	47c8      	blx	r9
    7126:	2800      	cmp	r0, #0
    7128:	dad5      	bge.n	70d6 <cbvprintf+0xc0a>
    712a:	e7ca      	b.n	70c2 <cbvprintf+0xbf6>
					OUTC(*cp++);
    712c:	4651      	mov	r1, sl
    712e:	47c8      	blx	r9
    7130:	2800      	cmp	r0, #0
    7132:	f6bf adc6 	bge.w	6cc2 <cbvprintf+0x7f6>
    7136:	e7c4      	b.n	70c2 <cbvprintf+0xbf6>
						OUTC('0');
    7138:	4651      	mov	r1, sl
    713a:	2030      	movs	r0, #48	; 0x30
    713c:	47c8      	blx	r9
    713e:	2800      	cmp	r0, #0
    7140:	f6bf add1 	bge.w	6ce6 <cbvprintf+0x81a>
    7144:	e7bd      	b.n	70c2 <cbvprintf+0xbf6>
						OUTC('0');
    7146:	4651      	mov	r1, sl
    7148:	2030      	movs	r0, #48	; 0x30
    714a:	47c8      	blx	r9
    714c:	3f01      	subs	r7, #1
    714e:	e5d8      	b.n	6d02 <cbvprintf+0x836>
					OUTC(*cp++);
    7150:	4651      	mov	r1, sl
    7152:	47c8      	blx	r9
    7154:	2800      	cmp	r0, #0
    7156:	dbb4      	blt.n	70c2 <cbvprintf+0xbf6>
    7158:	4647      	mov	r7, r8
    715a:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    715e:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    7162:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    7166:	2a09      	cmp	r2, #9
    7168:	d9f2      	bls.n	7150 <cbvprintf+0xc84>
    716a:	e7bb      	b.n	70e4 <cbvprintf+0xc18>
				OUTC('0');
    716c:	4651      	mov	r1, sl
    716e:	2030      	movs	r0, #48	; 0x30
    7170:	47c8      	blx	r9
    7172:	2800      	cmp	r0, #0
    7174:	dba5      	blt.n	70c2 <cbvprintf+0xbf6>
    7176:	3601      	adds	r6, #1
    7178:	e7b8      	b.n	70ec <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    717a:	06d8      	lsls	r0, r3, #27
    717c:	d401      	bmi.n	7182 <cbvprintf+0xcb6>
    717e:	0719      	lsls	r1, r3, #28
    7180:	d507      	bpl.n	7192 <cbvprintf+0xcc6>
				OUTC('0');
    7182:	4651      	mov	r1, sl
    7184:	2030      	movs	r0, #48	; 0x30
    7186:	9203      	str	r2, [sp, #12]
    7188:	47c8      	blx	r9
    718a:	2800      	cmp	r0, #0
    718c:	db99      	blt.n	70c2 <cbvprintf+0xbf6>
    718e:	9a03      	ldr	r2, [sp, #12]
    7190:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    7192:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    7196:	06db      	lsls	r3, r3, #27
    7198:	d508      	bpl.n	71ac <cbvprintf+0xce0>
				OUTC(conv->specifier);
    719a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    719e:	9203      	str	r2, [sp, #12]
    71a0:	4651      	mov	r1, sl
    71a2:	47c8      	blx	r9
    71a4:	2800      	cmp	r0, #0
    71a6:	db8c      	blt.n	70c2 <cbvprintf+0xbf6>
    71a8:	9a03      	ldr	r2, [sp, #12]
    71aa:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    71ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    71ae:	4437      	add	r7, r6
    71b0:	1bbb      	subs	r3, r7, r6
    71b2:	2b00      	cmp	r3, #0
    71b4:	dc01      	bgt.n	71ba <cbvprintf+0xcee>
			OUTS(bps, bpe);
    71b6:	462b      	mov	r3, r5
    71b8:	e79e      	b.n	70f8 <cbvprintf+0xc2c>
				OUTC('0');
    71ba:	4651      	mov	r1, sl
    71bc:	2030      	movs	r0, #48	; 0x30
    71be:	9203      	str	r2, [sp, #12]
    71c0:	47c8      	blx	r9
    71c2:	2800      	cmp	r0, #0
    71c4:	f6ff af7d 	blt.w	70c2 <cbvprintf+0xbf6>
    71c8:	9a03      	ldr	r2, [sp, #12]
    71ca:	3601      	adds	r6, #1
    71cc:	e7f0      	b.n	71b0 <cbvprintf+0xce4>
    71ce:	bf00      	nop
    71d0:	0002e3e6 	.word	0x0002e3e6

000071d4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    71d4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    71d6:	4910      	ldr	r1, [pc, #64]	; (7218 <enable_logger+0x44>)
    71d8:	4810      	ldr	r0, [pc, #64]	; (721c <enable_logger+0x48>)
{
    71da:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    71dc:	2200      	movs	r2, #0
    71de:	f024 f820 	bl	2b222 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    71e2:	4d0f      	ldr	r5, [pc, #60]	; (7220 <enable_logger+0x4c>)
    71e4:	490f      	ldr	r1, [pc, #60]	; (7224 <enable_logger+0x50>)
    71e6:	2200      	movs	r2, #0
    71e8:	2300      	movs	r3, #0
    71ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    71ee:	2400      	movs	r4, #0
    71f0:	230e      	movs	r3, #14
    71f2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    71f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    71fa:	4b0b      	ldr	r3, [pc, #44]	; (7228 <enable_logger+0x54>)
    71fc:	9400      	str	r4, [sp, #0]
    71fe:	f44f 7240 	mov.w	r2, #768	; 0x300
    7202:	4628      	mov	r0, r5
    7204:	f01d fa2e 	bl	24664 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7208:	4908      	ldr	r1, [pc, #32]	; (722c <enable_logger+0x58>)
    720a:	4628      	mov	r0, r5
    720c:	f01d f978 	bl	24500 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    7210:	4620      	mov	r0, r4
    7212:	b009      	add	sp, #36	; 0x24
    7214:	bd30      	pop	{r4, r5, pc}
    7216:	bf00      	nop
    7218:	00007231 	.word	0x00007231
    721c:	20002a08 	.word	0x20002a08
    7220:	20002a40 	.word	0x20002a40
    7224:	200070a0 	.word	0x200070a0
    7228:	00007485 	.word	0x00007485
    722c:	0002e773 	.word	0x0002e773

00007230 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    7230:	4801      	ldr	r0, [pc, #4]	; (7238 <log_process_thread_timer_expiry_fn+0x8>)
    7232:	f01d bbab 	b.w	2498c <z_impl_k_sem_give>
    7236:	bf00      	nop
    7238:	20000b88 	.word	0x20000b88

0000723c <log_init>:
{
    723c:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    723e:	4b12      	ldr	r3, [pc, #72]	; (7288 <log_init+0x4c>)
    7240:	f3bf 8f5b 	dmb	ish
    7244:	e853 5f00 	ldrex	r5, [r3]
    7248:	1c6a      	adds	r2, r5, #1
    724a:	e843 2100 	strex	r1, r2, [r3]
    724e:	2900      	cmp	r1, #0
    7250:	d1f8      	bne.n	7244 <log_init+0x8>
    7252:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    7256:	b92d      	cbnz	r5, 7264 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    7258:	4c0c      	ldr	r4, [pc, #48]	; (728c <log_init+0x50>)
    725a:	4e0d      	ldr	r6, [pc, #52]	; (7290 <log_init+0x54>)
    725c:	1b36      	subs	r6, r6, r4
    725e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    7260:	42b5      	cmp	r5, r6
    7262:	db00      	blt.n	7266 <log_init+0x2a>
}
    7264:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    7266:	7b23      	ldrb	r3, [r4, #12]
    7268:	b153      	cbz	r3, 7280 <log_init+0x44>
			if (backend->api->init != NULL) {
    726a:	6823      	ldr	r3, [r4, #0]
    726c:	699b      	ldr	r3, [r3, #24]
    726e:	b10b      	cbz	r3, 7274 <log_init+0x38>
				backend->api->init(backend);
    7270:	4620      	mov	r0, r4
    7272:	4798      	blx	r3
			log_backend_enable(backend,
    7274:	6863      	ldr	r3, [r4, #4]
    7276:	2204      	movs	r2, #4
    7278:	6819      	ldr	r1, [r3, #0]
    727a:	4620      	mov	r0, r4
    727c:	f000 fa38 	bl	76f0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    7280:	3501      	adds	r5, #1
    7282:	3410      	adds	r4, #16
    7284:	e7ec      	b.n	7260 <log_init+0x24>
    7286:	bf00      	nop
    7288:	20003984 	.word	0x20003984
    728c:	0002ba04 	.word	0x0002ba04
    7290:	0002ba24 	.word	0x0002ba24

00007294 <z_log_notify_backend_enabled>:
{
    7294:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    7296:	4c04      	ldr	r4, [pc, #16]	; (72a8 <z_log_notify_backend_enabled+0x14>)
    7298:	7823      	ldrb	r3, [r4, #0]
    729a:	b913      	cbnz	r3, 72a2 <z_log_notify_backend_enabled+0xe>
    729c:	4803      	ldr	r0, [pc, #12]	; (72ac <z_log_notify_backend_enabled+0x18>)
    729e:	f01d fb75 	bl	2498c <z_impl_k_sem_give>
	backend_attached = true;
    72a2:	2301      	movs	r3, #1
    72a4:	7023      	strb	r3, [r4, #0]
}
    72a6:	bd10      	pop	{r4, pc}
    72a8:	20005ef5 	.word	0x20005ef5
    72ac:	20000b88 	.word	0x20000b88

000072b0 <z_log_dropped>:
    72b0:	4b0c      	ldr	r3, [pc, #48]	; (72e4 <z_log_dropped+0x34>)
    72b2:	f3bf 8f5b 	dmb	ish
    72b6:	e853 2f00 	ldrex	r2, [r3]
    72ba:	3201      	adds	r2, #1
    72bc:	e843 2100 	strex	r1, r2, [r3]
    72c0:	2900      	cmp	r1, #0
    72c2:	d1f8      	bne.n	72b6 <z_log_dropped+0x6>
    72c4:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    72c8:	b158      	cbz	r0, 72e2 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    72ca:	f3bf 8f5b 	dmb	ish
    72ce:	4b06      	ldr	r3, [pc, #24]	; (72e8 <z_log_dropped+0x38>)
    72d0:	e853 2f00 	ldrex	r2, [r3]
    72d4:	3a01      	subs	r2, #1
    72d6:	e843 2100 	strex	r1, r2, [r3]
    72da:	2900      	cmp	r1, #0
    72dc:	d1f8      	bne.n	72d0 <z_log_dropped+0x20>
    72de:	f3bf 8f5b 	dmb	ish
}
    72e2:	4770      	bx	lr
    72e4:	20003980 	.word	0x20003980
    72e8:	2000397c 	.word	0x2000397c

000072ec <z_log_dropped_read_and_clear>:
}
    72ec:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    72ee:	4b06      	ldr	r3, [pc, #24]	; (7308 <z_log_dropped_read_and_clear+0x1c>)
    72f0:	f3bf 8f5b 	dmb	ish
    72f4:	4602      	mov	r2, r0
    72f6:	e853 0f00 	ldrex	r0, [r3]
    72fa:	e843 2100 	strex	r1, r2, [r3]
    72fe:	2900      	cmp	r1, #0
    7300:	d1f9      	bne.n	72f6 <z_log_dropped_read_and_clear+0xa>
    7302:	f3bf 8f5b 	dmb	ish
    7306:	4770      	bx	lr
    7308:	20003980 	.word	0x20003980

0000730c <dropped_notify>:
{
    730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    730e:	f7ff ffed 	bl	72ec <z_log_dropped_read_and_clear>
    7312:	4c0a      	ldr	r4, [pc, #40]	; (733c <dropped_notify+0x30>)
    7314:	4d0a      	ldr	r5, [pc, #40]	; (7340 <dropped_notify+0x34>)
    7316:	1b2d      	subs	r5, r5, r4
    7318:	4607      	mov	r7, r0
    731a:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    731c:	2600      	movs	r6, #0
    731e:	42ae      	cmp	r6, r5
    7320:	db00      	blt.n	7324 <dropped_notify+0x18>
}
    7322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    7324:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    7326:	795b      	ldrb	r3, [r3, #5]
    7328:	b12b      	cbz	r3, 7336 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    732a:	6823      	ldr	r3, [r4, #0]
    732c:	691b      	ldr	r3, [r3, #16]
    732e:	b113      	cbz	r3, 7336 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    7330:	4639      	mov	r1, r7
    7332:	4620      	mov	r0, r4
    7334:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    7336:	3601      	adds	r6, #1
    7338:	3410      	adds	r4, #16
    733a:	e7f0      	b.n	731e <dropped_notify+0x12>
    733c:	0002ba04 	.word	0x0002ba04
    7340:	0002ba24 	.word	0x0002ba24

00007344 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    7344:	4901      	ldr	r1, [pc, #4]	; (734c <z_log_msg2_init+0x8>)
    7346:	4802      	ldr	r0, [pc, #8]	; (7350 <z_log_msg2_init+0xc>)
    7348:	f01f b8cf 	b.w	264ea <mpsc_pbuf_init>
    734c:	0002bf4c 	.word	0x0002bf4c
    7350:	20003988 	.word	0x20003988

00007354 <log_core_init>:
	panic_mode = false;
    7354:	4a09      	ldr	r2, [pc, #36]	; (737c <log_core_init+0x28>)
{
    7356:	b508      	push	{r3, lr}
	panic_mode = false;
    7358:	2300      	movs	r3, #0
    735a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    735c:	4a08      	ldr	r2, [pc, #32]	; (7380 <log_core_init+0x2c>)
    735e:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    7360:	4b08      	ldr	r3, [pc, #32]	; (7384 <log_core_init+0x30>)
    7362:	4a09      	ldr	r2, [pc, #36]	; (7388 <log_core_init+0x34>)
    7364:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    7366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    736a:	f000 fbd1 	bl	7b10 <log_output_timestamp_freq_set>
		z_log_msg2_init();
    736e:	f7ff ffe9 	bl	7344 <z_log_msg2_init>
}
    7372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    7376:	f000 b925 	b.w	75c4 <z_log_runtime_filters_init>
    737a:	bf00      	nop
    737c:	20005ef6 	.word	0x20005ef6
    7380:	20003980 	.word	0x20003980
    7384:	2000017c 	.word	0x2000017c
    7388:	000269f1 	.word	0x000269f1

0000738c <z_log_msg2_alloc>:
{
    738c:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    738e:	2200      	movs	r2, #0
    7390:	4801      	ldr	r0, [pc, #4]	; (7398 <z_log_msg2_alloc+0xc>)
    7392:	2300      	movs	r3, #0
    7394:	f01f b8c8 	b.w	26528 <mpsc_pbuf_alloc>
    7398:	20003988 	.word	0x20003988

0000739c <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    739c:	4801      	ldr	r0, [pc, #4]	; (73a4 <z_log_msg2_claim+0x8>)
    739e:	f01f b956 	b.w	2664e <mpsc_pbuf_claim>
    73a2:	bf00      	nop
    73a4:	20003988 	.word	0x20003988

000073a8 <z_log_msg2_free>:
{
    73a8:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    73aa:	4801      	ldr	r0, [pc, #4]	; (73b0 <z_log_msg2_free+0x8>)
    73ac:	f01f b99b 	b.w	266e6 <mpsc_pbuf_free>
    73b0:	20003988 	.word	0x20003988

000073b4 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    73b4:	4801      	ldr	r0, [pc, #4]	; (73bc <z_log_msg2_pending+0x8>)
    73b6:	f01f b9ca 	b.w	2674e <mpsc_pbuf_is_pending>
    73ba:	bf00      	nop
    73bc:	20003988 	.word	0x20003988

000073c0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    73c0:	4b2a      	ldr	r3, [pc, #168]	; (746c <z_impl_log_process+0xac>)
    73c2:	781b      	ldrb	r3, [r3, #0]
{
    73c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73c8:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    73ca:	b90b      	cbnz	r3, 73d0 <z_impl_log_process+0x10>
    73cc:	2800      	cmp	r0, #0
    73ce:	d04b      	beq.n	7468 <z_impl_log_process+0xa8>
	msg = get_msg();
    73d0:	f01f fb22 	bl	26a18 <get_msg>
	if (msg.msg) {
    73d4:	4605      	mov	r5, r0
    73d6:	b118      	cbz	r0, 73e0 <z_impl_log_process+0x20>
		if (!bypass) {
    73d8:	b16e      	cbz	r6, 73f6 <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    73da:	4628      	mov	r0, r5
    73dc:	f7ff ffe4 	bl	73a8 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    73e0:	b92e      	cbnz	r6, 73ee <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    73e2:	4b23      	ldr	r3, [pc, #140]	; (7470 <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    73e4:	681b      	ldr	r3, [r3, #0]
    73e6:	2b00      	cmp	r3, #0
    73e8:	dd01      	ble.n	73ee <z_impl_log_process+0x2e>
		dropped_notify();
    73ea:	f7ff ff8f 	bl	730c <dropped_notify>
}
    73ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    73f2:	f7ff bfdf 	b.w	73b4 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    73f6:	4b1f      	ldr	r3, [pc, #124]	; (7474 <z_impl_log_process+0xb4>)
    73f8:	f3bf 8f5b 	dmb	ish
    73fc:	e853 2f00 	ldrex	r2, [r3]
    7400:	3a01      	subs	r2, #1
    7402:	e843 2100 	strex	r1, r2, [r3]
    7406:	2900      	cmp	r1, #0
    7408:	d1f8      	bne.n	73fc <z_impl_log_process+0x3c>
    740a:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    740e:	4c1a      	ldr	r4, [pc, #104]	; (7478 <z_impl_log_process+0xb8>)
    7410:	4f1a      	ldr	r7, [pc, #104]	; (747c <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    7412:	f8df a06c 	ldr.w	sl, [pc, #108]	; 7480 <z_impl_log_process+0xc0>
    7416:	1b3f      	subs	r7, r7, r4
    7418:	113f      	asrs	r7, r7, #4
    741a:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    741c:	45b8      	cmp	r8, r7
    741e:	dadc      	bge.n	73da <z_impl_log_process+0x1a>
	return backend->cb->active;
    7420:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    7422:	795b      	ldrb	r3, [r3, #5]
    7424:	b1cb      	cbz	r3, 745a <z_impl_log_process+0x9a>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    7426:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    7428:	074b      	lsls	r3, r1, #29
    742a:	d411      	bmi.n	7450 <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    742c:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    7430:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    7432:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    7436:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    743a:	b192      	cbz	r2, 7462 <z_impl_log_process+0xa2>
    743c:	eba2 020a 	sub.w	r2, r2, sl
    7440:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    7444:	2301      	movs	r3, #1
    7446:	4620      	mov	r0, r4
    7448:	f000 f968 	bl	771c <log_filter_get>
			if (log_backend_is_active(backend) &&
    744c:	4548      	cmp	r0, r9
    744e:	d304      	bcc.n	745a <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    7450:	6823      	ldr	r3, [r4, #0]
    7452:	4629      	mov	r1, r5
    7454:	681b      	ldr	r3, [r3, #0]
    7456:	4620      	mov	r0, r4
    7458:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    745a:	f108 0801 	add.w	r8, r8, #1
    745e:	3410      	adds	r4, #16
    7460:	e7dc      	b.n	741c <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    7462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7466:	e7ed      	b.n	7444 <z_impl_log_process+0x84>
}
    7468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    746c:	20005ef5 	.word	0x20005ef5
    7470:	20003980 	.word	0x20003980
    7474:	2000397c 	.word	0x2000397c
    7478:	0002ba04 	.word	0x0002ba04
    747c:	0002ba24 	.word	0x0002ba24
    7480:	20000920 	.word	0x20000920

00007484 <log_process_thread_func>:
{
    7484:	b510      	push	{r4, lr}
	log_init();
    7486:	f7ff fed9 	bl	723c <log_init>
	return z_impl_z_current_get();
    748a:	f01d ff7d 	bl	25388 <z_impl_z_current_get>
	proc_tid = process_tid;
    748e:	4b0c      	ldr	r3, [pc, #48]	; (74c0 <log_process_thread_func+0x3c>)
    7490:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    7492:	b130      	cbz	r0, 74a2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    7494:	4b0b      	ldr	r3, [pc, #44]	; (74c4 <log_process_thread_func+0x40>)
	    process_tid &&
    7496:	681b      	ldr	r3, [r3, #0]
    7498:	2b09      	cmp	r3, #9
    749a:	dd02      	ble.n	74a2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    749c:	480a      	ldr	r0, [pc, #40]	; (74c8 <log_process_thread_func+0x44>)
    749e:	f01d fa75 	bl	2498c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    74a2:	4c09      	ldr	r4, [pc, #36]	; (74c8 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    74a4:	2000      	movs	r0, #0
    74a6:	f7ff ff8b 	bl	73c0 <z_impl_log_process>
		if (log_process(false) == false) {
    74aa:	2800      	cmp	r0, #0
    74ac:	d1fa      	bne.n	74a4 <log_process_thread_func+0x20>
    74ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    74b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74b6:	4620      	mov	r0, r4
    74b8:	f01d fa8e 	bl	249d8 <z_impl_k_sem_take>
    74bc:	e7f2      	b.n	74a4 <log_process_thread_func+0x20>
    74be:	bf00      	nop
    74c0:	200039c4 	.word	0x200039c4
    74c4:	2000397c 	.word	0x2000397c
    74c8:	20000b88 	.word	0x20000b88

000074cc <z_log_msg_post_finalize>:
{
    74cc:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    74ce:	4b1d      	ldr	r3, [pc, #116]	; (7544 <z_log_msg_post_finalize+0x78>)
    74d0:	f3bf 8f5b 	dmb	ish
    74d4:	e853 2f00 	ldrex	r2, [r3]
    74d8:	1c51      	adds	r1, r2, #1
    74da:	e843 1000 	strex	r0, r1, [r3]
    74de:	2800      	cmp	r0, #0
    74e0:	d1f8      	bne.n	74d4 <z_log_msg_post_finalize+0x8>
    74e2:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    74e6:	4b18      	ldr	r3, [pc, #96]	; (7548 <z_log_msg_post_finalize+0x7c>)
    74e8:	781b      	ldrb	r3, [r3, #0]
    74ea:	b183      	cbz	r3, 750e <z_log_msg_post_finalize+0x42>
    74ec:	f04f 0320 	mov.w	r3, #32
    74f0:	f3ef 8411 	mrs	r4, BASEPRI
    74f4:	f383 8812 	msr	BASEPRI_MAX, r3
    74f8:	f3bf 8f6f 	isb	sy
    74fc:	2000      	movs	r0, #0
    74fe:	f7ff ff5f 	bl	73c0 <z_impl_log_process>
	__asm__ volatile(
    7502:	f384 8811 	msr	BASEPRI, r4
    7506:	f3bf 8f6f 	isb	sy
}
    750a:	b002      	add	sp, #8
    750c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    750e:	4b0f      	ldr	r3, [pc, #60]	; (754c <z_log_msg_post_finalize+0x80>)
    7510:	681b      	ldr	r3, [r3, #0]
    7512:	2b00      	cmp	r3, #0
    7514:	d0f9      	beq.n	750a <z_log_msg_post_finalize+0x3e>
    7516:	b952      	cbnz	r2, 752e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    7518:	2200      	movs	r2, #0
    751a:	2300      	movs	r3, #0
    751c:	e9cd 2300 	strd	r2, r3, [sp]
    7520:	480b      	ldr	r0, [pc, #44]	; (7550 <z_log_msg_post_finalize+0x84>)
    7522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    7526:	2300      	movs	r3, #0
    7528:	f01e f946 	bl	257b8 <z_impl_k_timer_start>
    752c:	e7ed      	b.n	750a <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    752e:	2a0a      	cmp	r2, #10
    7530:	d1eb      	bne.n	750a <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    7532:	4807      	ldr	r0, [pc, #28]	; (7550 <z_log_msg_post_finalize+0x84>)
    7534:	f023 fe81 	bl	2b23a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    7538:	4806      	ldr	r0, [pc, #24]	; (7554 <z_log_msg_post_finalize+0x88>)
}
    753a:	b002      	add	sp, #8
    753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7540:	f01d ba24 	b.w	2498c <z_impl_k_sem_give>
    7544:	2000397c 	.word	0x2000397c
    7548:	20005ef6 	.word	0x20005ef6
    754c:	200039c4 	.word	0x200039c4
    7550:	20002a08 	.word	0x20002a08
    7554:	20000b88 	.word	0x20000b88

00007558 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    7558:	4b06      	ldr	r3, [pc, #24]	; (7574 <z_log_msg2_commit+0x1c>)
{
    755a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    755c:	681b      	ldr	r3, [r3, #0]
{
    755e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    7560:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    7562:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    7564:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    7566:	4804      	ldr	r0, [pc, #16]	; (7578 <z_log_msg2_commit+0x20>)
    7568:	f01f f854 	bl	26614 <mpsc_pbuf_commit>
}
    756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    7570:	f7ff bfac 	b.w	74cc <z_log_msg_post_finalize>
    7574:	2000017c 	.word	0x2000017c
    7578:	20003988 	.word	0x20003988

0000757c <z_impl_log_panic>:
{
    757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    757e:	4f0e      	ldr	r7, [pc, #56]	; (75b8 <z_impl_log_panic+0x3c>)
    7580:	783d      	ldrb	r5, [r7, #0]
    7582:	b975      	cbnz	r5, 75a2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    7584:	4c0d      	ldr	r4, [pc, #52]	; (75bc <z_impl_log_panic+0x40>)
    7586:	4e0e      	ldr	r6, [pc, #56]	; (75c0 <z_impl_log_panic+0x44>)
	log_init();
    7588:	f7ff fe58 	bl	723c <log_init>
    758c:	1b36      	subs	r6, r6, r4
    758e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    7590:	42b5      	cmp	r5, r6
    7592:	db07      	blt.n	75a4 <z_impl_log_panic+0x28>
    7594:	2000      	movs	r0, #0
    7596:	f7ff ff13 	bl	73c0 <z_impl_log_process>
		while (log_process(false) == true) {
    759a:	2800      	cmp	r0, #0
    759c:	d1fa      	bne.n	7594 <z_impl_log_panic+0x18>
	panic_mode = true;
    759e:	2301      	movs	r3, #1
    75a0:	703b      	strb	r3, [r7, #0]
}
    75a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    75a4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    75a6:	795b      	ldrb	r3, [r3, #5]
    75a8:	b11b      	cbz	r3, 75b2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    75aa:	6823      	ldr	r3, [r4, #0]
    75ac:	4620      	mov	r0, r4
    75ae:	695b      	ldr	r3, [r3, #20]
    75b0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    75b2:	3501      	adds	r5, #1
    75b4:	3410      	adds	r4, #16
    75b6:	e7eb      	b.n	7590 <z_impl_log_panic+0x14>
    75b8:	20005ef6 	.word	0x20005ef6
    75bc:	0002ba04 	.word	0x0002ba04
    75c0:	0002ba24 	.word	0x0002ba24

000075c4 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    75c4:	480b      	ldr	r0, [pc, #44]	; (75f4 <z_log_runtime_filters_init+0x30>)
    75c6:	4b0c      	ldr	r3, [pc, #48]	; (75f8 <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    75c8:	b530      	push	{r4, r5, lr}
    75ca:	1a1b      	subs	r3, r3, r0
    75cc:	4c0b      	ldr	r4, [pc, #44]	; (75fc <z_log_runtime_filters_init+0x38>)
    75ce:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    75d0:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    75d2:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    75d4:	4299      	cmp	r1, r3
    75d6:	d100      	bne.n	75da <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    75d8:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    75da:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    75de:	6825      	ldr	r5, [r4, #0]
    75e0:	f002 0207 	and.w	r2, r2, #7
    75e4:	f025 0507 	bic.w	r5, r5, #7
    75e8:	432a      	orrs	r2, r5
    75ea:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    75ee:	3101      	adds	r1, #1
    75f0:	e7f0      	b.n	75d4 <z_log_runtime_filters_init+0x10>
    75f2:	bf00      	nop
    75f4:	0002b844 	.word	0x0002b844
    75f8:	0002ba04 	.word	0x0002ba04
    75fc:	20000920 	.word	0x20000920

00007600 <log_source_name_get>:
    7600:	4a04      	ldr	r2, [pc, #16]	; (7614 <log_source_name_get+0x14>)
    7602:	4b05      	ldr	r3, [pc, #20]	; (7618 <log_source_name_get+0x18>)
    7604:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    7606:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    760a:	bf34      	ite	cc
    760c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    7610:	2000      	movcs	r0, #0
}
    7612:	4770      	bx	lr
    7614:	0002b844 	.word	0x0002b844
    7618:	0002ba04 	.word	0x0002ba04

0000761c <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7620:	4689      	mov	r9, r1
    7622:	4616      	mov	r6, r2
    7624:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    7626:	4604      	mov	r4, r0
    7628:	b9b8      	cbnz	r0, 765a <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    762a:	f8df a084 	ldr.w	sl, [pc, #132]	; 76b0 <z_impl_log_filter_set+0x94>
    762e:	4f21      	ldr	r7, [pc, #132]	; (76b4 <z_impl_log_filter_set+0x98>)
    7630:	eba7 070a 	sub.w	r7, r7, sl
    7634:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    7636:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    7638:	42bc      	cmp	r4, r7
    763a:	db02      	blt.n	7642 <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    763c:	4628      	mov	r0, r5
    763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    7642:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    7646:	4643      	mov	r3, r8
    7648:	4632      	mov	r2, r6
    764a:	4649      	mov	r1, r9
    764c:	f7ff ffe6 	bl	761c <z_impl_log_filter_set>
				max = MAX(current, max);
    7650:	4285      	cmp	r5, r0
    7652:	bf38      	it	cc
    7654:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    7656:	3401      	adds	r4, #1
    7658:	e7ee      	b.n	7638 <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    765a:	4b17      	ldr	r3, [pc, #92]	; (76b8 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    765c:	4c17      	ldr	r4, [pc, #92]	; (76bc <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    765e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    7662:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    7664:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    7666:	791a      	ldrb	r2, [r3, #4]
    7668:	2307      	movs	r3, #7
    766a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    766e:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    7672:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    7674:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    7678:	bf28      	it	cs
    767a:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    767c:	ea23 0301 	bic.w	r3, r3, r1
    7680:	f005 0107 	and.w	r1, r5, #7
    7684:	fa01 f202 	lsl.w	r2, r1, r2
    7688:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    768a:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    768c:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    768e:	fa23 f002 	lsr.w	r0, r3, r2
    7692:	f000 0007 	and.w	r0, r0, #7
    7696:	4281      	cmp	r1, r0
    7698:	f102 0203 	add.w	r2, r2, #3
    769c:	bf38      	it	cc
    769e:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    76a0:	2a1e      	cmp	r2, #30
    76a2:	d1f4      	bne.n	768e <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    76a4:	f023 0307 	bic.w	r3, r3, #7
    76a8:	430b      	orrs	r3, r1
    76aa:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    76ae:	e7c5      	b.n	763c <z_impl_log_filter_set+0x20>
    76b0:	0002ba04 	.word	0x0002ba04
    76b4:	0002ba24 	.word	0x0002ba24
    76b8:	0002b844 	.word	0x0002b844
    76bc:	20000920 	.word	0x20000920

000076c0 <backend_filter_set>:
{
    76c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76c2:	4c09      	ldr	r4, [pc, #36]	; (76e8 <backend_filter_set+0x28>)
    76c4:	4b09      	ldr	r3, [pc, #36]	; (76ec <backend_filter_set+0x2c>)
    76c6:	1ae4      	subs	r4, r4, r3
    76c8:	4606      	mov	r6, r0
    76ca:	460f      	mov	r7, r1
    76cc:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    76ce:	2500      	movs	r5, #0
    76d0:	42a5      	cmp	r5, r4
    76d2:	d100      	bne.n	76d6 <backend_filter_set+0x16>
}
    76d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76d6:	2100      	movs	r1, #0
    76d8:	b22a      	sxth	r2, r5
    76da:	463b      	mov	r3, r7
    76dc:	4630      	mov	r0, r6
    76de:	f7ff ff9d 	bl	761c <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    76e2:	3501      	adds	r5, #1
    76e4:	e7f4      	b.n	76d0 <backend_filter_set+0x10>
    76e6:	bf00      	nop
    76e8:	0002ba04 	.word	0x0002ba04
    76ec:	0002b844 	.word	0x0002b844

000076f0 <log_backend_enable>:
	id += backend - log_backend_get(0);
    76f0:	4b09      	ldr	r3, [pc, #36]	; (7718 <log_backend_enable+0x28>)
    76f2:	1ac3      	subs	r3, r0, r3
{
    76f4:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    76f6:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    76f8:	6846      	ldr	r6, [r0, #4]
{
    76fa:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    76fc:	3301      	adds	r3, #1
{
    76fe:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    7700:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    7702:	4611      	mov	r1, r2
    7704:	f7ff ffdc 	bl	76c0 <backend_filter_set>
	backend->cb->ctx = ctx;
    7708:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    770a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    770c:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    770e:	715a      	strb	r2, [r3, #5]
}
    7710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    7714:	f7ff bdbe 	b.w	7294 <z_log_notify_backend_enabled>
    7718:	0002ba04 	.word	0x0002ba04

0000771c <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    771c:	b163      	cbz	r3, 7738 <log_filter_get+0x1c>
		if (source_id < 0) {
    771e:	2a00      	cmp	r2, #0
    7720:	db0f      	blt.n	7742 <log_filter_get+0x26>
	return backend->cb->id;
    7722:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    7724:	4908      	ldr	r1, [pc, #32]	; (7748 <log_filter_get+0x2c>)
    7726:	7918      	ldrb	r0, [r3, #4]
    7728:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    772c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    7730:	40d8      	lsrs	r0, r3
    7732:	f000 0007 	and.w	r0, r0, #7
    7736:	4770      	bx	lr
	return __log_const_start[source_id].level;
    7738:	4b04      	ldr	r3, [pc, #16]	; (774c <log_filter_get+0x30>)
    773a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    773e:	7910      	ldrb	r0, [r2, #4]
    7740:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    7742:	2004      	movs	r0, #4
}
    7744:	4770      	bx	lr
    7746:	bf00      	nop
    7748:	20000920 	.word	0x20000920
    774c:	0002b844 	.word	0x0002b844

00007750 <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    7750:	4b02      	ldr	r3, [pc, #8]	; (775c <log_msg_mem_get_free+0xc>)
    7752:	6898      	ldr	r0, [r3, #8]
    7754:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    7756:	1ac0      	subs	r0, r0, r3
    7758:	4770      	bx	lr
    775a:	bf00      	nop
    775c:	200039c8 	.word	0x200039c8

00007760 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    7760:	4b01      	ldr	r3, [pc, #4]	; (7768 <log_msg_mem_get_used+0x8>)
    7762:	6998      	ldr	r0, [r3, #24]
    7764:	4770      	bx	lr
    7766:	bf00      	nop
    7768:	200039c8 	.word	0x200039c8

0000776c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    776c:	b40e      	push	{r1, r2, r3}
    776e:	b503      	push	{r0, r1, lr}
    7770:	ab03      	add	r3, sp, #12
    7772:	4601      	mov	r1, r0
    7774:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    7778:	4804      	ldr	r0, [pc, #16]	; (778c <print_formatted+0x20>)
	va_start(args, fmt);
    777a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    777c:	f7fe fea6 	bl	64cc <cbvprintf>
	va_end(args);

	return length;
}
    7780:	b002      	add	sp, #8
    7782:	f85d eb04 	ldr.w	lr, [sp], #4
    7786:	b003      	add	sp, #12
    7788:	4770      	bx	lr
    778a:	bf00      	nop
    778c:	00026a63 	.word	0x00026a63

00007790 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    7790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7794:	461d      	mov	r5, r3
    7796:	9b08      	ldr	r3, [sp, #32]
    7798:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    779a:	06da      	lsls	r2, r3, #27
{
    779c:	4604      	mov	r4, r0
    779e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    77a0:	d405      	bmi.n	77ae <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    77a2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    77a4:	bf4c      	ite	mi
    77a6:	492a      	ldrmi	r1, [pc, #168]	; (7850 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    77a8:	492a      	ldrpl	r1, [pc, #168]	; (7854 <hexdump_line_print+0xc4>)
    77aa:	f7ff ffdf 	bl	776c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    77ae:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 7858 <hexdump_line_print+0xc8>
{
    77b2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    77b6:	45a8      	cmp	r8, r5
    77b8:	db2a      	blt.n	7810 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    77ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 785c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    77be:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 7860 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    77c2:	f8df a094 	ldr.w	sl, [pc, #148]	; 7858 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    77c6:	2500      	movs	r5, #0
		if (i < length) {
    77c8:	42bd      	cmp	r5, r7
    77ca:	d22f      	bcs.n	782c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    77cc:	5d72      	ldrb	r2, [r6, r5]
    77ce:	4649      	mov	r1, r9
    77d0:	4620      	mov	r0, r4
    77d2:	f7ff ffcb 	bl	776c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    77d6:	3501      	adds	r5, #1
    77d8:	2d10      	cmp	r5, #16
    77da:	d120      	bne.n	781e <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    77dc:	4921      	ldr	r1, [pc, #132]	; (7864 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    77de:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7858 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    77e2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7868 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    77e6:	4620      	mov	r0, r4
    77e8:	f7ff ffc0 	bl	776c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    77ec:	2500      	movs	r5, #0
		if (i < length) {
    77ee:	42af      	cmp	r7, r5
    77f0:	d928      	bls.n	7844 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    77f2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    77f4:	f1a2 0320 	sub.w	r3, r2, #32
    77f8:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    77fa:	bf28      	it	cs
    77fc:	222e      	movcs	r2, #46	; 0x2e
    77fe:	4649      	mov	r1, r9
    7800:	4620      	mov	r0, r4
    7802:	f7ff ffb3 	bl	776c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    7806:	3501      	adds	r5, #1
    7808:	2d10      	cmp	r5, #16
    780a:	d114      	bne.n	7836 <hexdump_line_print+0xa6>
		}
	}
}
    780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    7810:	4649      	mov	r1, r9
    7812:	4620      	mov	r0, r4
    7814:	f7ff ffaa 	bl	776c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    7818:	f108 0801 	add.w	r8, r8, #1
    781c:	e7cb      	b.n	77b6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    781e:	076a      	lsls	r2, r5, #29
    7820:	d1d2      	bne.n	77c8 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    7822:	4651      	mov	r1, sl
    7824:	4620      	mov	r0, r4
    7826:	f7ff ffa1 	bl	776c <print_formatted>
    782a:	e7cd      	b.n	77c8 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    782c:	4641      	mov	r1, r8
    782e:	4620      	mov	r0, r4
    7830:	f7ff ff9c 	bl	776c <print_formatted>
    7834:	e7cf      	b.n	77d6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    7836:	076b      	lsls	r3, r5, #29
    7838:	d1d9      	bne.n	77ee <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    783a:	4641      	mov	r1, r8
    783c:	4620      	mov	r0, r4
    783e:	f7ff ff95 	bl	776c <print_formatted>
    7842:	e7d4      	b.n	77ee <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    7844:	4641      	mov	r1, r8
    7846:	4620      	mov	r0, r4
    7848:	f7ff ff90 	bl	776c <print_formatted>
    784c:	e7db      	b.n	7806 <hexdump_line_print+0x76>
    784e:	bf00      	nop
    7850:	0002e014 	.word	0x0002e014
    7854:	0002e510 	.word	0x0002e510
    7858:	0002e3f3 	.word	0x0002e3f3
    785c:	0002e3f1 	.word	0x0002e3f1
    7860:	0002e3eb 	.word	0x0002e3eb
    7864:	0002e3f5 	.word	0x0002e3f5
    7868:	0002efae 	.word	0x0002efae

0000786c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7870:	b087      	sub	sp, #28
    7872:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    7874:	f001 0301 	and.w	r3, r1, #1
{
    7878:	9205      	str	r2, [sp, #20]
    787a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    787e:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    7882:	9304      	str	r3, [sp, #16]
{
    7884:	4607      	mov	r7, r0
    7886:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    7888:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    788c:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    7890:	f01f f8c6 	bl	26a20 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    7894:	4602      	mov	r2, r0
    7896:	2800      	cmp	r0, #0
    7898:	d044      	beq.n	7924 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    789a:	493a      	ldr	r1, [pc, #232]	; (7984 <prefix_print+0x118>)
    789c:	4638      	mov	r0, r7
    789e:	f7ff ff65 	bl	776c <print_formatted>
    78a2:	4605      	mov	r5, r0
	}

	if (stamp) {
    78a4:	f1bb 0f00 	cmp.w	fp, #0
    78a8:	d008      	beq.n	78bc <prefix_print+0x50>
	if (!format) {
    78aa:	f018 0f44 	tst.w	r8, #68	; 0x44
    78ae:	d13b      	bne.n	7928 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    78b0:	4935      	ldr	r1, [pc, #212]	; (7988 <prefix_print+0x11c>)
    78b2:	4622      	mov	r2, r4
    78b4:	4638      	mov	r0, r7
    78b6:	f7ff ff59 	bl	776c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    78ba:	4405      	add	r5, r0
	if (color) {
    78bc:	9b04      	ldr	r3, [sp, #16]
    78be:	b153      	cbz	r3, 78d6 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    78c0:	4b32      	ldr	r3, [pc, #200]	; (798c <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    78c2:	4933      	ldr	r1, [pc, #204]	; (7990 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    78c4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    78c8:	4b32      	ldr	r3, [pc, #200]	; (7994 <prefix_print+0x128>)
    78ca:	4638      	mov	r0, r7
    78cc:	2a00      	cmp	r2, #0
    78ce:	bf08      	it	eq
    78d0:	461a      	moveq	r2, r3
    78d2:	f7ff ff4b 	bl	776c <print_formatted>
	if (level_on) {
    78d6:	b13e      	cbz	r6, 78e8 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    78d8:	4b2f      	ldr	r3, [pc, #188]	; (7998 <prefix_print+0x12c>)
    78da:	4930      	ldr	r1, [pc, #192]	; (799c <prefix_print+0x130>)
    78dc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    78e0:	4638      	mov	r0, r7
    78e2:	f7ff ff43 	bl	776c <print_formatted>
    78e6:	4606      	mov	r6, r0
	if (source_id >= 0) {
    78e8:	f1ba 0f00 	cmp.w	sl, #0
    78ec:	db16      	blt.n	791c <prefix_print+0xb0>
		total += print_formatted(output,
    78ee:	9b05      	ldr	r3, [sp, #20]
    78f0:	2b00      	cmp	r3, #0
    78f2:	d045      	beq.n	7980 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    78f4:	2301      	movs	r3, #1
    78f6:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    78fa:	4b29      	ldr	r3, [pc, #164]	; (79a0 <prefix_print+0x134>)
    78fc:	4c29      	ldr	r4, [pc, #164]	; (79a4 <prefix_print+0x138>)
    78fe:	f019 0f1e 	tst.w	r9, #30
    7902:	bf18      	it	ne
    7904:	461c      	movne	r4, r3
    7906:	4651      	mov	r1, sl
    7908:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    790c:	f7ff fe78 	bl	7600 <log_source_name_get>
    7910:	4621      	mov	r1, r4
    7912:	4602      	mov	r2, r0
    7914:	4638      	mov	r0, r7
    7916:	f7ff ff29 	bl	776c <print_formatted>
    791a:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    791c:	1970      	adds	r0, r6, r5
    791e:	b007      	add	sp, #28
    7920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    7924:	4605      	mov	r5, r0
    7926:	e7bd      	b.n	78a4 <prefix_print+0x38>
	} else if (freq != 0U) {
    7928:	4b1f      	ldr	r3, [pc, #124]	; (79a8 <prefix_print+0x13c>)
    792a:	6818      	ldr	r0, [r3, #0]
    792c:	2800      	cmp	r0, #0
    792e:	d0c4      	beq.n	78ba <prefix_print+0x4e>
		timestamp /= timestamp_div;
    7930:	4b1e      	ldr	r3, [pc, #120]	; (79ac <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    7932:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    7936:	681b      	ldr	r3, [r3, #0]
    7938:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    793c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    7940:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    7944:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    7948:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    794c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    7950:	fbb3 f2f1 	udiv	r2, r3, r1
    7954:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    7958:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    795c:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    7960:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    7964:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    7968:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    796c:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    796e:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    7972:	490f      	ldr	r1, [pc, #60]	; (79b0 <prefix_print+0x144>)
    7974:	e9cd e001 	strd	lr, r0, [sp, #4]
    7978:	4638      	mov	r0, r7
    797a:	f7ff fef7 	bl	776c <print_formatted>
    797e:	e79c      	b.n	78ba <prefix_print+0x4e>
		total += print_formatted(output,
    7980:	4c08      	ldr	r4, [pc, #32]	; (79a4 <prefix_print+0x138>)
    7982:	e7c0      	b.n	7906 <prefix_print+0x9a>
    7984:	0002e405 	.word	0x0002e405
    7988:	0002e409 	.word	0x0002e409
    798c:	0002bf60 	.word	0x0002bf60
    7990:	0002ea53 	.word	0x0002ea53
    7994:	0002e3f7 	.word	0x0002e3f7
    7998:	0002bf74 	.word	0x0002bf74
    799c:	0002e42e 	.word	0x0002e42e
    79a0:	0002e401 	.word	0x0002e401
    79a4:	0002e3fc 	.word	0x0002e3fc
    79a8:	200039e4 	.word	0x200039e4
    79ac:	200039e8 	.word	0x200039e8
    79b0:	0002e412 	.word	0x0002e412

000079b4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    79b4:	b538      	push	{r3, r4, r5, lr}
    79b6:	460c      	mov	r4, r1
	if (color) {
    79b8:	07e1      	lsls	r1, r4, #31
{
    79ba:	4605      	mov	r5, r0
	if (color) {
    79bc:	d503      	bpl.n	79c6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    79be:	4a08      	ldr	r2, [pc, #32]	; (79e0 <postfix_print+0x2c>)
    79c0:	4908      	ldr	r1, [pc, #32]	; (79e4 <postfix_print+0x30>)
    79c2:	f7ff fed3 	bl	776c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    79c6:	06e2      	lsls	r2, r4, #27
    79c8:	d408      	bmi.n	79dc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    79ca:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    79cc:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    79ce:	bf4c      	ite	mi
    79d0:	4905      	ldrmi	r1, [pc, #20]	; (79e8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    79d2:	4906      	ldrpl	r1, [pc, #24]	; (79ec <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    79d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    79d8:	f7ff bec8 	b.w	776c <print_formatted>
}
    79dc:	bd38      	pop	{r3, r4, r5, pc}
    79de:	bf00      	nop
    79e0:	0002e3f7 	.word	0x0002e3f7
    79e4:	0002ea53 	.word	0x0002ea53
    79e8:	0002e014 	.word	0x0002e014
    79ec:	0002e510 	.word	0x0002e510

000079f0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    79f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    79f4:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    79f6:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    79fa:	4606      	mov	r6, r0
    79fc:	460c      	mov	r4, r1
    79fe:	4690      	mov	r8, r2
    7a00:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    7a04:	d04d      	beq.n	7aa2 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    7a06:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    7a08:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    7a0a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d044      	beq.n	7a9c <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    7a12:	4925      	ldr	r1, [pc, #148]	; (7aa8 <log_output_msg2_process+0xb8>)
    7a14:	1a5b      	subs	r3, r3, r1
    7a16:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    7a1a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    7a1e:	f8cd 9000 	str.w	r9, [sp]
    7a22:	68a3      	ldr	r3, [r4, #8]
    7a24:	2200      	movs	r2, #0
    7a26:	4641      	mov	r1, r8
    7a28:	4630      	mov	r0, r6
    7a2a:	f7ff ff1f 	bl	786c <prefix_print>
    7a2e:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    7a30:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    7a32:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    7a36:	f3c3 2349 	ubfx	r3, r3, #9, #10
    7a3a:	b153      	cbz	r3, 7a52 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    7a3c:	4f1b      	ldr	r7, [pc, #108]	; (7aac <log_output_msg2_process+0xbc>)
    7a3e:	481c      	ldr	r0, [pc, #112]	; (7ab0 <log_output_msg2_process+0xc0>)
    7a40:	491c      	ldr	r1, [pc, #112]	; (7ab4 <log_output_msg2_process+0xc4>)
    7a42:	462b      	mov	r3, r5
    7a44:	4632      	mov	r2, r6
    7a46:	f1b9 0f00 	cmp.w	r9, #0
    7a4a:	bf08      	it	eq
    7a4c:	4638      	moveq	r0, r7
    7a4e:	f01d ffee 	bl	25a2e <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    7a52:	8867      	ldrh	r7, [r4, #2]
    7a54:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    7a58:	b197      	cbz	r7, 7a80 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    7a5a:	6823      	ldr	r3, [r4, #0]
    7a5c:	f3c3 2349 	ubfx	r3, r3, #9, #10
    7a60:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    7a62:	2f10      	cmp	r7, #16
    7a64:	463c      	mov	r4, r7
    7a66:	bf28      	it	cs
    7a68:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    7a6a:	4629      	mov	r1, r5
    7a6c:	f8cd 8000 	str.w	r8, [sp]
    7a70:	4653      	mov	r3, sl
    7a72:	4622      	mov	r2, r4
    7a74:	4630      	mov	r0, r6
    7a76:	f7ff fe8b 	bl	7790 <hexdump_line_print>
	} while (len);
    7a7a:	1b3f      	subs	r7, r7, r4
		data += length;
    7a7c:	4425      	add	r5, r4
	} while (len);
    7a7e:	d1f0      	bne.n	7a62 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    7a80:	f1b9 0f00 	cmp.w	r9, #0
    7a84:	d004      	beq.n	7a90 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    7a86:	464a      	mov	r2, r9
    7a88:	4641      	mov	r1, r8
    7a8a:	4630      	mov	r0, r6
    7a8c:	f7ff ff92 	bl	79b4 <postfix_print>
	}

	log_output_flush(output);
    7a90:	4630      	mov	r0, r6
}
    7a92:	b004      	add	sp, #16
    7a94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    7a98:	f01e bfd6 	b.w	26a48 <log_output_flush>
		int16_t source_id = source ?
    7a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7aa0:	e7bb      	b.n	7a1a <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    7aa2:	46ca      	mov	sl, r9
    7aa4:	e7c4      	b.n	7a30 <log_output_msg2_process+0x40>
    7aa6:	bf00      	nop
    7aa8:	20000920 	.word	0x20000920
    7aac:	00026a99 	.word	0x00026a99
    7ab0:	00026a63 	.word	0x00026a63
    7ab4:	000064cd 	.word	0x000064cd

00007ab8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    7ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    7aba:	f242 730f 	movw	r3, #9999	; 0x270f
    7abe:	428b      	cmp	r3, r1
    7ac0:	bf28      	it	cs
    7ac2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    7ac4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    7ac6:	4a0f      	ldr	r2, [pc, #60]	; (7b04 <log_output_dropped_process+0x4c>)
{
    7ac8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    7aca:	2105      	movs	r1, #5
    7acc:	4668      	mov	r0, sp
    7ace:	f01e f826 	bl	25b1e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    7ad2:	6863      	ldr	r3, [r4, #4]
    7ad4:	490c      	ldr	r1, [pc, #48]	; (7b08 <log_output_dropped_process+0x50>)
    7ad6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    7ad8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    7ada:	220b      	movs	r2, #11
    7adc:	4628      	mov	r0, r5
    7ade:	f01e ffa6 	bl	26a2e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    7ae2:	6863      	ldr	r3, [r4, #4]
    7ae4:	4632      	mov	r2, r6
    7ae6:	4669      	mov	r1, sp
    7ae8:	4628      	mov	r0, r5
    7aea:	685b      	ldr	r3, [r3, #4]
    7aec:	f01e ff9f 	bl	26a2e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    7af0:	6863      	ldr	r3, [r4, #4]
    7af2:	4906      	ldr	r1, [pc, #24]	; (7b0c <log_output_dropped_process+0x54>)
    7af4:	685b      	ldr	r3, [r3, #4]
    7af6:	221b      	movs	r2, #27
    7af8:	4628      	mov	r0, r5
    7afa:	f01e ff98 	bl	26a2e <buffer_write>
		     output->control_block->ctx);
}
    7afe:	b002      	add	sp, #8
    7b00:	bd70      	pop	{r4, r5, r6, pc}
    7b02:	bf00      	nop
    7b04:	000315e6 	.word	0x000315e6
    7b08:	0002e478 	.word	0x0002e478
    7b0c:	0002e45c 	.word	0x0002e45c

00007b10 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    7b10:	4a08      	ldr	r2, [pc, #32]	; (7b34 <log_output_timestamp_freq_set+0x24>)
{
    7b12:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    7b14:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    7b16:	4c08      	ldr	r4, [pc, #32]	; (7b38 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    7b18:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    7b1a:	2100      	movs	r1, #0
    7b1c:	42a0      	cmp	r0, r4
    7b1e:	d804      	bhi.n	7b2a <log_output_timestamp_freq_set+0x1a>
    7b20:	b101      	cbz	r1, 7b24 <log_output_timestamp_freq_set+0x14>
    7b22:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    7b24:	4b05      	ldr	r3, [pc, #20]	; (7b3c <log_output_timestamp_freq_set+0x2c>)
    7b26:	6018      	str	r0, [r3, #0]
}
    7b28:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    7b2a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    7b2c:	005b      	lsls	r3, r3, #1
    7b2e:	2101      	movs	r1, #1
    7b30:	e7f4      	b.n	7b1c <log_output_timestamp_freq_set+0xc>
    7b32:	bf00      	nop
    7b34:	200039e8 	.word	0x200039e8
    7b38:	000f4240 	.word	0x000f4240
    7b3c:	200039e4 	.word	0x200039e4

00007b40 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    7b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b44:	b085      	sub	sp, #20
    7b46:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    7b4a:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    7b4e:	4605      	mov	r5, r0
    7b50:	4688      	mov	r8, r1
    7b52:	4614      	mov	r4, r2
    7b54:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    7b56:	f1bb 0f00 	cmp.w	fp, #0
    7b5a:	d037      	beq.n	7bcc <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    7b5c:	2200      	movs	r2, #0
    7b5e:	f8cd a000 	str.w	sl, [sp]
    7b62:	465b      	mov	r3, fp
    7b64:	210c      	movs	r1, #12
    7b66:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    7b68:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    7b6c:	f7fe f9b0 	bl	5ed0 <cbvprintf_package>
    7b70:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    7b72:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7b76:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    7b7a:	f005 0407 	and.w	r4, r5, #7
    7b7e:	4d14      	ldr	r5, [pc, #80]	; (7bd0 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    7b80:	4b14      	ldr	r3, [pc, #80]	; (7bd4 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    7b82:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7b84:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    7b86:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    7b8a:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7b8e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    7b92:	432c      	orrs	r4, r5
    7b94:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    7b98:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    7b9a:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    7b9c:	f7ff fbf6 	bl	738c <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    7ba0:	4605      	mov	r5, r0
    7ba2:	b150      	cbz	r0, 7bba <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    7ba4:	f1bb 0f00 	cmp.w	fp, #0
    7ba8:	d007      	beq.n	7bba <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    7baa:	f8cd a000 	str.w	sl, [sp]
    7bae:	465b      	mov	r3, fp
    7bb0:	2200      	movs	r2, #0
    7bb2:	4639      	mov	r1, r7
    7bb4:	300c      	adds	r0, #12
    7bb6:	f7fe f98b 	bl	5ed0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    7bba:	464b      	mov	r3, r9
    7bbc:	4622      	mov	r2, r4
    7bbe:	4641      	mov	r1, r8
    7bc0:	4628      	mov	r0, r5
}
    7bc2:	b005      	add	sp, #20
    7bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    7bc8:	f01e bf73 	b.w	26ab2 <z_log_msg2_finalize>
		plen = 0;
    7bcc:	465f      	mov	r7, fp
    7bce:	e7d0      	b.n	7b72 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    7bd0:	0007fe00 	.word	0x0007fe00
    7bd4:	7ff80000 	.word	0x7ff80000

00007bd8 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    7bd8:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    7bda:	2804      	cmp	r0, #4
	entry->handler = NULL;
    7bdc:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    7bde:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    7be0:	bf98      	it	ls
    7be2:	4b04      	ldrls	r3, [pc, #16]	; (7bf4 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    7be4:	4a04      	ldr	r2, [pc, #16]	; (7bf8 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    7be6:	bf98      	it	ls
    7be8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    7bec:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    7bee:	600b      	str	r3, [r1, #0]
}
    7bf0:	4770      	bx	lr
    7bf2:	bf00      	nop
    7bf4:	0002bfc8 	.word	0x0002bfc8
    7bf8:	0002bfa4 	.word	0x0002bfa4

00007bfc <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    7bfc:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    7bfe:	4a08      	ldr	r2, [pc, #32]	; (7c20 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    7c00:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    7c02:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    7c04:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    7c06:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    7c08:	4b06      	ldr	r3, [pc, #24]	; (7c24 <backend_name_get+0x28>)
    7c0a:	4a07      	ldr	r2, [pc, #28]	; (7c28 <backend_name_get+0x2c>)
    7c0c:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    7c0e:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    7c12:	bf3e      	ittt	cc
    7c14:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    7c18:	689b      	ldrcc	r3, [r3, #8]
    7c1a:	600b      	strcc	r3, [r1, #0]
	}
}
    7c1c:	4770      	bx	lr
    7c1e:	bf00      	nop
    7c20:	0002c11c 	.word	0x0002c11c
    7c24:	0002ba04 	.word	0x0002ba04
    7c28:	0002ba24 	.word	0x0002ba24

00007c2c <cmd_log_memory_slabs>:
{
    7c2c:	b538      	push	{r3, r4, r5, lr}
    7c2e:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    7c30:	f7ff fd8e 	bl	7750 <log_msg_mem_get_free>
    7c34:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    7c36:	f7ff fd93 	bl	7760 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    7c3a:	4a09      	ldr	r2, [pc, #36]	; (7c60 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    7c3c:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    7c3e:	2108      	movs	r1, #8
    7c40:	4620      	mov	r0, r4
    7c42:	f01f f932 	bl	26eaa <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    7c46:	462b      	mov	r3, r5
    7c48:	4620      	mov	r0, r4
    7c4a:	4a06      	ldr	r2, [pc, #24]	; (7c64 <cmd_log_memory_slabs+0x38>)
    7c4c:	2108      	movs	r1, #8
    7c4e:	f01f f92c 	bl	26eaa <shell_fprintf>
		shell_print(
    7c52:	4620      	mov	r0, r4
    7c54:	4a04      	ldr	r2, [pc, #16]	; (7c68 <cmd_log_memory_slabs+0x3c>)
    7c56:	2108      	movs	r1, #8
    7c58:	f01f f927 	bl	26eaa <shell_fprintf>
}
    7c5c:	2000      	movs	r0, #0
    7c5e:	bd38      	pop	{r3, r4, r5, pc}
    7c60:	0002e484 	.word	0x0002e484
    7c64:	0002e495 	.word	0x0002e495
    7c68:	0002e4a6 	.word	0x0002e4a6

00007c6c <cmd_log_backends_list>:
{
    7c6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7c70:	4b11      	ldr	r3, [pc, #68]	; (7cb8 <cmd_log_backends_list+0x4c>)
    7c72:	4c12      	ldr	r4, [pc, #72]	; (7cbc <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    7c74:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7cc0 <cmd_log_backends_list+0x54>
    7c78:	f8df 9048 	ldr.w	r9, [pc, #72]	; 7cc4 <cmd_log_backends_list+0x58>
    7c7c:	f8df a048 	ldr.w	sl, [pc, #72]	; 7cc8 <cmd_log_backends_list+0x5c>
    7c80:	1b1b      	subs	r3, r3, r4
{
    7c82:	4607      	mov	r7, r0
    7c84:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    7c86:	2500      	movs	r5, #0
    7c88:	42b5      	cmp	r5, r6
    7c8a:	db03      	blt.n	7c94 <cmd_log_backends_list+0x28>
}
    7c8c:	2000      	movs	r0, #0
    7c8e:	b002      	add	sp, #8
    7c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    7c94:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    7c96:	7959      	ldrb	r1, [r3, #5]
    7c98:	791b      	ldrb	r3, [r3, #4]
    7c9a:	2900      	cmp	r1, #0
    7c9c:	bf14      	ite	ne
    7c9e:	4642      	movne	r2, r8
    7ca0:	464a      	moveq	r2, r9
    7ca2:	e9cd 2300 	strd	r2, r3, [sp]
    7ca6:	2108      	movs	r1, #8
    7ca8:	68a3      	ldr	r3, [r4, #8]
    7caa:	4652      	mov	r2, sl
    7cac:	4638      	mov	r0, r7
    7cae:	f01f f8fc 	bl	26eaa <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    7cb2:	3501      	adds	r5, #1
    7cb4:	3410      	adds	r4, #16
    7cb6:	e7e7      	b.n	7c88 <cmd_log_backends_list+0x1c>
    7cb8:	0002ba24 	.word	0x0002ba24
    7cbc:	0002ba04 	.word	0x0002ba04
    7cc0:	00031758 	.word	0x00031758
    7cc4:	0002f554 	.word	0x0002f554
    7cc8:	0002e4f2 	.word	0x0002e4f2

00007ccc <log_status>:
{
    7ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    7cd0:	4b24      	ldr	r3, [pc, #144]	; (7d64 <log_status+0x98>)
    7cd2:	4c25      	ldr	r4, [pc, #148]	; (7d68 <log_status+0x9c>)
    7cd4:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    7cd6:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    7cd8:	795b      	ldrb	r3, [r3, #5]
{
    7cda:	b085      	sub	sp, #20
    7cdc:	4605      	mov	r5, r0
    7cde:	460e      	mov	r6, r1
    7ce0:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    7ce2:	b91b      	cbnz	r3, 7cec <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    7ce4:	4a21      	ldr	r2, [pc, #132]	; (7d6c <log_status+0xa0>)
    7ce6:	2103      	movs	r1, #3
    7ce8:	f01f f8df 	bl	26eaa <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    7cec:	4b20      	ldr	r3, [pc, #128]	; (7d70 <log_status+0xa4>)
    7cee:	4a21      	ldr	r2, [pc, #132]	; (7d74 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    7cf0:	f8df a084 	ldr.w	sl, [pc, #132]	; 7d78 <log_status+0xac>
    7cf4:	f8df b084 	ldr.w	fp, [pc, #132]	; 7d7c <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    7cf8:	2108      	movs	r1, #8
    7cfa:	4628      	mov	r0, r5
    7cfc:	f01f f8d5 	bl	26eaa <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    7d00:	4a1f      	ldr	r2, [pc, #124]	; (7d80 <log_status+0xb4>)
    7d02:	2108      	movs	r1, #8
    7d04:	4628      	mov	r0, r5
    7d06:	f01f f8d0 	bl	26eaa <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    7d0a:	f04f 0800 	mov.w	r8, #0
    7d0e:	fa0f f788 	sxth.w	r7, r8
    7d12:	42a7      	cmp	r7, r4
    7d14:	f108 0801 	add.w	r8, r8, #1
    7d18:	d303      	bcc.n	7d22 <log_status+0x56>
}
    7d1a:	2000      	movs	r0, #0
    7d1c:	b005      	add	sp, #20
    7d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7d22:	463a      	mov	r2, r7
    7d24:	2301      	movs	r3, #1
    7d26:	2100      	movs	r1, #0
    7d28:	4630      	mov	r0, r6
    7d2a:	f7ff fcf7 	bl	771c <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7d2e:	2300      	movs	r3, #0
    7d30:	463a      	mov	r2, r7
    7d32:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7d34:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7d36:	4630      	mov	r0, r6
    7d38:	f7ff fcf0 	bl	771c <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    7d3c:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7d3e:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    7d40:	2000      	movs	r0, #0
    7d42:	f7ff fc5d 	bl	7600 <log_source_name_get>
    7d46:	9a03      	ldr	r2, [sp, #12]
    7d48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    7d4c:	9201      	str	r2, [sp, #4]
    7d4e:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    7d52:	9200      	str	r2, [sp, #0]
    7d54:	4603      	mov	r3, r0
    7d56:	465a      	mov	r2, fp
    7d58:	2108      	movs	r1, #8
    7d5a:	4628      	mov	r0, r5
    7d5c:	f01f f8a5 	bl	26eaa <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    7d60:	e7d5      	b.n	7d0e <log_status+0x42>
    7d62:	bf00      	nop
    7d64:	0002b844 	.word	0x0002b844
    7d68:	0002ba04 	.word	0x0002ba04
    7d6c:	0002e513 	.word	0x0002e513
    7d70:	0002e525 	.word	0x0002e525
    7d74:	0002e531 	.word	0x0002e531
    7d78:	0002bfb4 	.word	0x0002bfb4
    7d7c:	0002e58c 	.word	0x0002e58c
    7d80:	0002e54f 	.word	0x0002e54f

00007d84 <module_name_get>:
{
    7d84:	b510      	push	{r4, lr}
	entry->handler = NULL;
    7d86:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    7d88:	4a05      	ldr	r2, [pc, #20]	; (7da0 <module_name_get+0x1c>)
	entry->handler = NULL;
    7d8a:	60cb      	str	r3, [r1, #12]
{
    7d8c:	460c      	mov	r4, r1
	entry->help  = NULL;
    7d8e:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    7d90:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    7d92:	4601      	mov	r1, r0
    7d94:	4618      	mov	r0, r3
    7d96:	f7ff fc33 	bl	7600 <log_source_name_get>
    7d9a:	6020      	str	r0, [r4, #0]
}
    7d9c:	bd10      	pop	{r4, pc}
    7d9e:	bf00      	nop
    7da0:	0002bfa4 	.word	0x0002bfa4

00007da4 <shell_backend_cmd_execute>:
{
    7da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    7da8:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    7dac:	4c18      	ldr	r4, [pc, #96]	; (7e10 <shell_backend_cmd_execute+0x6c>)
{
    7dae:	b085      	sub	sp, #20
    7db0:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    7db2:	4650      	mov	r0, sl
{
    7db4:	4689      	mov	r9, r1
    7db6:	4690      	mov	r8, r2
    7db8:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    7dba:	f020 fca3 	bl	28704 <strlen>
    7dbe:	4915      	ldr	r1, [pc, #84]	; (7e14 <shell_backend_cmd_execute+0x70>)
    7dc0:	1b09      	subs	r1, r1, r4
    7dc2:	110b      	asrs	r3, r1, #4
    7dc4:	4602      	mov	r2, r0
    7dc6:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    7dc8:	2700      	movs	r7, #0
    7dca:	46a3      	mov	fp, r4
    7dcc:	9b01      	ldr	r3, [sp, #4]
    7dce:	429f      	cmp	r7, r3
    7dd0:	db08      	blt.n	7de4 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    7dd2:	4a11      	ldr	r2, [pc, #68]	; (7e18 <shell_backend_cmd_execute+0x74>)
    7dd4:	4653      	mov	r3, sl
    7dd6:	2101      	movs	r1, #1
    7dd8:	4630      	mov	r0, r6
    7dda:	f01f f866 	bl	26eaa <shell_fprintf>
		return -ENOEXEC;
    7dde:	f06f 0507 	mvn.w	r5, #7
    7de2:	e00f      	b.n	7e04 <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    7de4:	68a1      	ldr	r1, [r4, #8]
    7de6:	9203      	str	r2, [sp, #12]
    7de8:	4650      	mov	r0, sl
    7dea:	f020 fca7 	bl	2873c <strncmp>
    7dee:	3410      	adds	r4, #16
    7df0:	9a03      	ldr	r2, [sp, #12]
    7df2:	4605      	mov	r5, r0
    7df4:	b950      	cbnz	r0, 7e0c <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    7df6:	9c02      	ldr	r4, [sp, #8]
    7df8:	4643      	mov	r3, r8
    7dfa:	464a      	mov	r2, r9
    7dfc:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    7e00:	4630      	mov	r0, r6
    7e02:	47a0      	blx	r4
}
    7e04:	4628      	mov	r0, r5
    7e06:	b005      	add	sp, #20
    7e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    7e0c:	3701      	adds	r7, #1
    7e0e:	e7dd      	b.n	7dcc <shell_backend_cmd_execute+0x28>
    7e10:	0002ba04 	.word	0x0002ba04
    7e14:	0002ba24 	.word	0x0002ba24
    7e18:	0002e5a0 	.word	0x0002e5a0

00007e1c <cmd_log_backend_status>:
{
    7e1c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    7e1e:	4b02      	ldr	r3, [pc, #8]	; (7e28 <cmd_log_backend_status+0xc>)
    7e20:	f7ff ffc0 	bl	7da4 <shell_backend_cmd_execute>
}
    7e24:	2000      	movs	r0, #0
    7e26:	bd08      	pop	{r3, pc}
    7e28:	00007ccd 	.word	0x00007ccd

00007e2c <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    7e2c:	4b01      	ldr	r3, [pc, #4]	; (7e34 <cmd_log_backend_halt+0x8>)
    7e2e:	f7ff bfb9 	b.w	7da4 <shell_backend_cmd_execute>
    7e32:	bf00      	nop
    7e34:	00026b29 	.word	0x00026b29

00007e38 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    7e38:	4b01      	ldr	r3, [pc, #4]	; (7e40 <cmd_log_backend_go+0x8>)
    7e3a:	f7ff bfb3 	b.w	7da4 <shell_backend_cmd_execute>
    7e3e:	bf00      	nop
    7e40:	00026b31 	.word	0x00026b31

00007e44 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    7e44:	4b01      	ldr	r3, [pc, #4]	; (7e4c <cmd_log_backend_enable+0x8>)
    7e46:	f7ff bfad 	b.w	7da4 <shell_backend_cmd_execute>
    7e4a:	bf00      	nop
    7e4c:	00007f4d 	.word	0x00007f4d

00007e50 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    7e50:	4b01      	ldr	r3, [pc, #4]	; (7e58 <cmd_log_backend_disable+0x8>)
    7e52:	f7ff bfa7 	b.w	7da4 <shell_backend_cmd_execute>
    7e56:	bf00      	nop
    7e58:	00026b7d 	.word	0x00026b7d

00007e5c <shell_state_precheck>:
{
    7e5c:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    7e5e:	69c3      	ldr	r3, [r0, #28]
    7e60:	68db      	ldr	r3, [r3, #12]
    7e62:	791c      	ldrb	r4, [r3, #4]
    7e64:	b92c      	cbnz	r4, 7e72 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    7e66:	4a04      	ldr	r2, [pc, #16]	; (7e78 <shell_state_precheck+0x1c>)
    7e68:	2101      	movs	r1, #1
    7e6a:	f01f f81e 	bl	26eaa <shell_fprintf>
    7e6e:	4620      	mov	r0, r4
}
    7e70:	bd10      	pop	{r4, pc}
	return true;
    7e72:	2001      	movs	r0, #1
    7e74:	e7fc      	b.n	7e70 <shell_state_precheck+0x14>
    7e76:	bf00      	nop
    7e78:	0002e5b5 	.word	0x0002e5b5

00007e7c <filters_set>:
{
    7e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e80:	4e2c      	ldr	r6, [pc, #176]	; (7f34 <filters_set+0xb8>)
    7e82:	461f      	mov	r7, r3
    7e84:	4b2c      	ldr	r3, [pc, #176]	; (7f38 <filters_set+0xbc>)
    7e86:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    7e88:	1e15      	subs	r5, r2, #0
{
    7e8a:	b085      	sub	sp, #20
    7e8c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    7e90:	bf14      	ite	ne
    7e92:	462b      	movne	r3, r5
    7e94:	4633      	moveq	r3, r6
    7e96:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    7e98:	684b      	ldr	r3, [r1, #4]
    7e9a:	795b      	ldrb	r3, [r3, #5]
{
    7e9c:	4680      	mov	r8, r0
    7e9e:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    7ea0:	b91b      	cbnz	r3, 7eaa <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    7ea2:	4a26      	ldr	r2, [pc, #152]	; (7f3c <filters_set+0xc0>)
    7ea4:	2103      	movs	r1, #3
    7ea6:	f01f f800 	bl	26eaa <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    7eaa:	f8df a094 	ldr.w	sl, [pc, #148]	; 7f40 <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    7eae:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    7eb0:	9b02      	ldr	r3, [sp, #8]
    7eb2:	429c      	cmp	r4, r3
    7eb4:	db02      	blt.n	7ebc <filters_set+0x40>
}
    7eb6:	b005      	add	sp, #20
    7eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    7ebc:	b3bd      	cbz	r5, 7f2e <filters_set+0xb2>
    7ebe:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    7ec2:	2300      	movs	r3, #0
    7ec4:	429e      	cmp	r6, r3
    7ec6:	d107      	bne.n	7ed8 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    7ec8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    7ecc:	4a1d      	ldr	r2, [pc, #116]	; (7f44 <filters_set+0xc8>)
    7ece:	2101      	movs	r1, #1
    7ed0:	4640      	mov	r0, r8
    7ed2:	f01e ffea 	bl	26eaa <shell_fprintf>
    7ed6:	e023      	b.n	7f20 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    7ed8:	4619      	mov	r1, r3
    7eda:	2000      	movs	r0, #0
    7edc:	9303      	str	r3, [sp, #12]
    7ede:	f7ff fb8f 	bl	7600 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    7ee2:	2240      	movs	r2, #64	; 0x40
    7ee4:	4659      	mov	r1, fp
    7ee6:	f020 fc29 	bl	2873c <strncmp>
    7eea:	9b03      	ldr	r3, [sp, #12]
    7eec:	b9d0      	cbnz	r0, 7f24 <filters_set+0xa8>
			return i;
    7eee:	461a      	mov	r2, r3
    7ef0:	2100      	movs	r1, #0
    7ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7ef4:	b212      	sxth	r2, r2
    7ef6:	4648      	mov	r0, r9
    7ef8:	f7ff fb90 	bl	761c <z_impl_log_filter_set>
			if (set_lvl != level) {
    7efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7efe:	4283      	cmp	r3, r0
    7f00:	4683      	mov	fp, r0
    7f02:	d00d      	beq.n	7f20 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    7f04:	b985      	cbnz	r5, 7f28 <filters_set+0xac>
					log_source_name_get(
    7f06:	4621      	mov	r1, r4
    7f08:	4628      	mov	r0, r5
    7f0a:	f7ff fb79 	bl	7600 <log_source_name_get>
    7f0e:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    7f10:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    7f14:	9200      	str	r2, [sp, #0]
    7f16:	2103      	movs	r1, #3
    7f18:	4a0b      	ldr	r2, [pc, #44]	; (7f48 <filters_set+0xcc>)
    7f1a:	4640      	mov	r0, r8
    7f1c:	f01e ffc5 	bl	26eaa <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    7f20:	3401      	adds	r4, #1
    7f22:	e7c5      	b.n	7eb0 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    7f24:	3301      	adds	r3, #1
    7f26:	e7cd      	b.n	7ec4 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    7f28:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    7f2c:	e7f0      	b.n	7f10 <filters_set+0x94>
    7f2e:	4622      	mov	r2, r4
    7f30:	e7de      	b.n	7ef0 <filters_set+0x74>
    7f32:	bf00      	nop
    7f34:	0002ba04 	.word	0x0002ba04
    7f38:	0002b844 	.word	0x0002b844
    7f3c:	0002e5d9 	.word	0x0002e5d9
    7f40:	0002bfb4 	.word	0x0002bfb4
    7f44:	0002e604 	.word	0x0002e604
    7f48:	0002e5ee 	.word	0x0002e5ee

00007f4c <log_enable>:
{
    7f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    7f50:	f8d3 b004 	ldr.w	fp, [r3, #4]
    7f54:	f8df a04c 	ldr.w	sl, [pc, #76]	; 7fa4 <log_enable+0x58>
{
    7f58:	4606      	mov	r6, r0
    7f5a:	4688      	mov	r8, r1
    7f5c:	4691      	mov	r9, r2
    7f5e:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    7f60:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    7f62:	f85a 1b04 	ldr.w	r1, [sl], #4
    7f66:	2204      	movs	r2, #4
    7f68:	4658      	mov	r0, fp
    7f6a:	f020 fbe7 	bl	2873c <strncmp>
    7f6e:	4604      	mov	r4, r0
    7f70:	b170      	cbz	r0, 7f90 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    7f72:	3701      	adds	r7, #1
    7f74:	2f05      	cmp	r7, #5
    7f76:	d1f4      	bne.n	7f62 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    7f78:	686b      	ldr	r3, [r5, #4]
    7f7a:	4a0b      	ldr	r2, [pc, #44]	; (7fa8 <log_enable+0x5c>)
    7f7c:	2101      	movs	r1, #1
    7f7e:	4630      	mov	r0, r6
    7f80:	f01e ff93 	bl	26eaa <shell_fprintf>
    7f84:	f06f 0407 	mvn.w	r4, #7
}
    7f88:	4620      	mov	r0, r4
    7f8a:	b003      	add	sp, #12
    7f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    7f90:	9700      	str	r7, [sp, #0]
    7f92:	f105 0308 	add.w	r3, r5, #8
    7f96:	f1a9 0202 	sub.w	r2, r9, #2
    7f9a:	4641      	mov	r1, r8
    7f9c:	4630      	mov	r0, r6
    7f9e:	f7ff ff6d 	bl	7e7c <filters_set>
	return 0;
    7fa2:	e7f1      	b.n	7f88 <log_enable+0x3c>
    7fa4:	0002bfb4 	.word	0x0002bfb4
    7fa8:	0002e61e 	.word	0x0002e61e

00007fac <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    7fac:	4b01      	ldr	r3, [pc, #4]	; (7fb4 <log_backend_rtt_init+0x8>)
    7fae:	2201      	movs	r2, #1
    7fb0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    7fb2:	4770      	bx	lr
    7fb4:	20005f07 	.word	0x20005f07

00007fb8 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    7fb8:	4b02      	ldr	r3, [pc, #8]	; (7fc4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    7fba:	4803      	ldr	r0, [pc, #12]	; (7fc8 <panic+0x10>)
    7fbc:	2201      	movs	r2, #1
    7fbe:	701a      	strb	r2, [r3, #0]
    7fc0:	f01e bd42 	b.w	26a48 <log_output_flush>
    7fc4:	20005f08 	.word	0x20005f08
    7fc8:	0002c148 	.word	0x0002c148

00007fcc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    7fcc:	4801      	ldr	r0, [pc, #4]	; (7fd4 <dropped+0x8>)
    7fce:	f7ff bd73 	b.w	7ab8 <log_output_dropped_process>
    7fd2:	bf00      	nop
    7fd4:	0002c148 	.word	0x0002c148

00007fd8 <process>:
{
	uint32_t flags = log_backend_std_get_flags();

	flags |= IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ? LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_output_msg2_process(&log_output_rtt, &msg->log, flags);
    7fd8:	4801      	ldr	r0, [pc, #4]	; (7fe0 <process+0x8>)
    7fda:	220f      	movs	r2, #15
    7fdc:	f7ff bd08 	b.w	79f0 <log_output_msg2_process>
    7fe0:	0002c148 	.word	0x0002c148

00007fe4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    7fe4:	4b05      	ldr	r3, [pc, #20]	; (7ffc <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    7fe6:	781b      	ldrb	r3, [r3, #0]
    7fe8:	b11b      	cbz	r3, 7ff2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    7fea:	f241 3088 	movw	r0, #5000	; 0x1388
    7fee:	f023 b8e9 	b.w	2b1c4 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    7ff2:	20a4      	movs	r0, #164	; 0xa4
    7ff4:	2100      	movs	r1, #0
    7ff6:	f01d b9ad 	b.w	25354 <z_impl_k_sleep>
    7ffa:	bf00      	nop
    7ffc:	20005f08 	.word	0x20005f08

00008000 <data_out_block_mode>:
{
    8000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    8004:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8094 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    8008:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8098 <data_out_block_mode+0x98>
{
    800c:	4680      	mov	r8, r0
    800e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    8010:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    8012:	f899 5000 	ldrb.w	r5, [r9]
    8016:	b9cd      	cbnz	r5, 804c <data_out_block_mode+0x4c>
    8018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    801c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8020:	4650      	mov	r0, sl
    8022:	f01c fbc3 	bl	247ac <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    8026:	463a      	mov	r2, r7
    8028:	4641      	mov	r1, r8
    802a:	4628      	mov	r0, r5
    802c:	f01b ff82 	bl	23f34 <SEGGER_RTT_WriteSkipNoLock>
    8030:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    8032:	4650      	mov	r0, sl
    8034:	f01c fc32 	bl	2489c <z_impl_k_mutex_unlock>
		if (ret) {
    8038:	4d18      	ldr	r5, [pc, #96]	; (809c <data_out_block_mode+0x9c>)
    803a:	b1fe      	cbz	r6, 807c <data_out_block_mode+0x7c>
	host_present = true;
    803c:	2301      	movs	r3, #1
    803e:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    8040:	f899 3000 	ldrb.w	r3, [r9]
    8044:	b96b      	cbnz	r3, 8062 <data_out_block_mode+0x62>
}
    8046:	4638      	mov	r0, r7
    8048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    804c:	463a      	mov	r2, r7
    804e:	4641      	mov	r1, r8
    8050:	2000      	movs	r0, #0
    8052:	f01b ff6f 	bl	23f34 <SEGGER_RTT_WriteSkipNoLock>
    8056:	4606      	mov	r6, r0
    8058:	e7ee      	b.n	8038 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    805a:	b95c      	cbnz	r4, 8074 <data_out_block_mode+0x74>
		host_present = false;
    805c:	702c      	strb	r4, [r5, #0]
    805e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    8062:	2000      	movs	r0, #0
    8064:	f01b ffb2 	bl	23fcc <SEGGER_RTT_HasDataUp>
    8068:	2800      	cmp	r0, #0
    806a:	d0ec      	beq.n	8046 <data_out_block_mode+0x46>
    806c:	782b      	ldrb	r3, [r5, #0]
    806e:	2b00      	cmp	r3, #0
    8070:	d1f3      	bne.n	805a <data_out_block_mode+0x5a>
    8072:	e7e8      	b.n	8046 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    8074:	3c01      	subs	r4, #1
    8076:	f7ff ffb5 	bl	7fe4 <on_failed_write.part.0>
    807a:	e7f2      	b.n	8062 <data_out_block_mode+0x62>
		} else if (host_present) {
    807c:	782b      	ldrb	r3, [r5, #0]
    807e:	b113      	cbz	r3, 8086 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    8080:	3c01      	subs	r4, #1
    8082:	d104      	bne.n	808e <data_out_block_mode+0x8e>
		host_present = false;
    8084:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    8086:	782b      	ldrb	r3, [r5, #0]
    8088:	2b00      	cmp	r3, #0
    808a:	d1c2      	bne.n	8012 <data_out_block_mode+0x12>
    808c:	e7db      	b.n	8046 <data_out_block_mode+0x46>
    808e:	f7ff ffa9 	bl	7fe4 <on_failed_write.part.0>
    8092:	e7f8      	b.n	8086 <data_out_block_mode+0x86>
    8094:	20005f08 	.word	0x20005f08
    8098:	20000b00 	.word	0x20000b00
    809c:	20005f07 	.word	0x20005f07

000080a0 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    80a0:	b513      	push	{r0, r1, r4, lr}
    80a2:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    80a4:	f022 fd5d 	bl	2ab62 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    80a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
    80ac:	9301      	str	r3, [sp, #4]
    80ae:	f3c0 4307 	ubfx	r3, r0, #16, #8
    80b2:	9300      	str	r3, [sp, #0]
    80b4:	4a04      	ldr	r2, [pc, #16]	; (80c8 <cmd_kernel_version+0x28>)
    80b6:	0e03      	lsrs	r3, r0, #24
    80b8:	2108      	movs	r1, #8
    80ba:	4620      	mov	r0, r4
    80bc:	f01e fef5 	bl	26eaa <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    80c0:	2000      	movs	r0, #0
    80c2:	b002      	add	sp, #8
    80c4:	bd10      	pop	{r4, pc}
    80c6:	bf00      	nop
    80c8:	0002e7e9 	.word	0x0002e7e9

000080cc <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    80cc:	b510      	push	{r4, lr}
    80ce:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    80d0:	f023 f876 	bl	2b1c0 <z_impl_k_uptime_ticks>
    80d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    80d8:	fba0 2003 	umull	r2, r0, r0, r3
    80dc:	fb03 0301 	mla	r3, r3, r1, r0
    80e0:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    80e2:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    80e6:	4620      	mov	r0, r4
    80e8:	4a02      	ldr	r2, [pc, #8]	; (80f4 <cmd_kernel_uptime+0x28>)
    80ea:	2108      	movs	r1, #8
    80ec:	f01e fedd 	bl	26eaa <shell_fprintf>
	return 0;
}
    80f0:	2000      	movs	r0, #0
    80f2:	bd10      	pop	{r4, pc}
    80f4:	0002e802 	.word	0x0002e802

000080f8 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    80f8:	b510      	push	{r4, lr}
    80fa:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    80fc:	f019 fec0 	bl	21e80 <sys_clock_elapsed>
    8100:	4a08      	ldr	r2, [pc, #32]	; (8124 <cmd_kernel_threads+0x2c>)
    8102:	4603      	mov	r3, r0
    8104:	2108      	movs	r1, #8
    8106:	4620      	mov	r0, r4
    8108:	f01e fecf 	bl	26eaa <shell_fprintf>
	shell_print(shell, "Threads:");
    810c:	4a06      	ldr	r2, [pc, #24]	; (8128 <cmd_kernel_threads+0x30>)
    810e:	4620      	mov	r0, r4
    8110:	2108      	movs	r1, #8
    8112:	f01e feca 	bl	26eaa <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    8116:	4805      	ldr	r0, [pc, #20]	; (812c <cmd_kernel_threads+0x34>)
    8118:	4621      	mov	r1, r4
    811a:	f01c f9b9 	bl	24490 <k_thread_foreach>
	return 0;
}
    811e:	2000      	movs	r0, #0
    8120:	bd10      	pop	{r4, pc}
    8122:	bf00      	nop
    8124:	0002e811 	.word	0x0002e811
    8128:	0002e830 	.word	0x0002e830
    812c:	00008191 	.word	0x00008191

00008130 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    8130:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    8132:	4601      	mov	r1, r0
{
    8134:	b087      	sub	sp, #28
    8136:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    8138:	4811      	ldr	r0, [pc, #68]	; (8180 <cmd_kernel_stacks+0x50>)
    813a:	f01c f9a9 	bl	24490 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    813e:	4a11      	ldr	r2, [pc, #68]	; (8184 <cmd_kernel_stacks+0x54>)
		unused = 0;
    8140:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    8142:	f812 1b01 	ldrb.w	r1, [r2], #1
    8146:	29aa      	cmp	r1, #170	; 0xaa
    8148:	d103      	bne.n	8152 <cmd_kernel_stacks+0x22>
				unused++;
    814a:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    814c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    8150:	d1f7      	bne.n	8142 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    8152:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    8156:	2264      	movs	r2, #100	; 0x64
    8158:	434a      	muls	r2, r1
    815a:	0ad2      	lsrs	r2, r2, #11
    815c:	9205      	str	r2, [sp, #20]
    815e:	2500      	movs	r5, #0
    8160:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8164:	e9cd 1203 	strd	r1, r2, [sp, #12]
    8168:	e9cd 2301 	strd	r2, r3, [sp, #4]
    816c:	4620      	mov	r0, r4
    816e:	4b06      	ldr	r3, [pc, #24]	; (8188 <cmd_kernel_stacks+0x58>)
    8170:	4a06      	ldr	r2, [pc, #24]	; (818c <cmd_kernel_stacks+0x5c>)
    8172:	9500      	str	r5, [sp, #0]
    8174:	2108      	movs	r1, #8
    8176:	f01e fe98 	bl	26eaa <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    817a:	4628      	mov	r0, r5
    817c:	b007      	add	sp, #28
    817e:	bd30      	pop	{r4, r5, pc}
    8180:	00008271 	.word	0x00008271
    8184:	200093e0 	.word	0x200093e0
    8188:	200093c0 	.word	0x200093c0
    818c:	0002e83a 	.word	0x0002e83a

00008190 <shell_tdata_dump>:
{
    8190:	b5f0      	push	{r4, r5, r6, r7, lr}
    8192:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    8194:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    8198:	4604      	mov	r4, r0
    819a:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    819c:	f022 fccf 	bl	2ab3e <k_thread_name_get>
    81a0:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    81a2:	f01d f8f1 	bl	25388 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    81a6:	4b23      	ldr	r3, [pc, #140]	; (8234 <shell_tdata_dump+0xa4>)
    81a8:	4a23      	ldr	r2, [pc, #140]	; (8238 <shell_tdata_dump+0xa8>)
    81aa:	2e00      	cmp	r6, #0
    81ac:	bf08      	it	eq
    81ae:	461e      	moveq	r6, r3
    81b0:	4b22      	ldr	r3, [pc, #136]	; (823c <shell_tdata_dump+0xac>)
    81b2:	e9cd 4600 	strd	r4, r6, [sp]
    81b6:	4284      	cmp	r4, r0
    81b8:	bf18      	it	ne
    81ba:	4613      	movne	r3, r2
    81bc:	2108      	movs	r1, #8
    81be:	4628      	mov	r0, r5
    81c0:	4a1f      	ldr	r2, [pc, #124]	; (8240 <shell_tdata_dump+0xb0>)
    81c2:	f01e fe72 	bl	26eaa <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    81c6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    81ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    81ce:	f994 300e 	ldrsb.w	r3, [r4, #14]
    81d2:	4a1c      	ldr	r2, [pc, #112]	; (8244 <shell_tdata_dump+0xb4>)
    81d4:	9300      	str	r3, [sp, #0]
    81d6:	2108      	movs	r1, #8
    81d8:	7b23      	ldrb	r3, [r4, #12]
    81da:	4628      	mov	r0, r5
    81dc:	f01e fe65 	bl	26eaa <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    81e0:	4620      	mov	r0, r4
    81e2:	f01c f99d 	bl	24520 <k_thread_state_str>
    81e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    81e8:	9200      	str	r2, [sp, #0]
    81ea:	4603      	mov	r3, r0
    81ec:	4a16      	ldr	r2, [pc, #88]	; (8248 <shell_tdata_dump+0xb8>)
    81ee:	2108      	movs	r1, #8
    81f0:	4628      	mov	r0, r5
    81f2:	f01e fe5a 	bl	26eaa <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    81f6:	a905      	add	r1, sp, #20
    81f8:	4620      	mov	r0, r4
    81fa:	f022 fca4 	bl	2ab46 <z_impl_k_thread_stack_space_get>
	if (ret) {
    81fe:	4603      	mov	r3, r0
    8200:	b130      	cbz	r0, 8210 <shell_tdata_dump+0x80>
		shell_print(shell,
    8202:	4a12      	ldr	r2, [pc, #72]	; (824c <shell_tdata_dump+0xbc>)
    8204:	2108      	movs	r1, #8
    8206:	4628      	mov	r0, r5
    8208:	f01e fe4f 	bl	26eaa <shell_fprintf>
}
    820c:	b007      	add	sp, #28
    820e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    8210:	9a05      	ldr	r2, [sp, #20]
    8212:	2364      	movs	r3, #100	; 0x64
    8214:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    8216:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    821a:	434b      	muls	r3, r1
		shell_print(shell,
    821c:	4a0c      	ldr	r2, [pc, #48]	; (8250 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    821e:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    8222:	2108      	movs	r1, #8
    8224:	e9cd 7302 	strd	r7, r3, [sp, #8]
    8228:	4628      	mov	r0, r5
    822a:	463b      	mov	r3, r7
    822c:	f01e fe3d 	bl	26eaa <shell_fprintf>
}
    8230:	e7ec      	b.n	820c <shell_tdata_dump+0x7c>
    8232:	bf00      	nop
    8234:	0002e880 	.word	0x0002e880
    8238:	0002e3f3 	.word	0x0002e3f3
    823c:	0002ff7b 	.word	0x0002ff7b
    8240:	0002e883 	.word	0x0002e883
    8244:	0002e88f 	.word	0x0002e88f
    8248:	0002e8bb 	.word	0x0002e8bb
    824c:	0002e8d2 	.word	0x0002e8d2
    8250:	0002e8ff 	.word	0x0002e8ff

00008254 <cmd_kernel_cycles>:
{
    8254:	b510      	push	{r4, lr}
    8256:	4604      	mov	r4, r0
    8258:	f022 f97d 	bl	2a556 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    825c:	4a03      	ldr	r2, [pc, #12]	; (826c <cmd_kernel_cycles+0x18>)
    825e:	4603      	mov	r3, r0
    8260:	2108      	movs	r1, #8
    8262:	4620      	mov	r0, r4
    8264:	f01e fe21 	bl	26eaa <shell_fprintf>
}
    8268:	2000      	movs	r0, #0
    826a:	bd10      	pop	{r4, pc}
    826c:	0002e936 	.word	0x0002e936

00008270 <shell_stack_dump>:
{
    8270:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    8272:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    8276:	b089      	sub	sp, #36	; 0x24
    8278:	4604      	mov	r4, r0
    827a:	460d      	mov	r5, r1
    827c:	a907      	add	r1, sp, #28
    827e:	f022 fc62 	bl	2ab46 <z_impl_k_thread_stack_space_get>
	if (ret) {
    8282:	4603      	mov	r3, r0
    8284:	b130      	cbz	r0, 8294 <shell_stack_dump+0x24>
		shell_print(shell,
    8286:	4a10      	ldr	r2, [pc, #64]	; (82c8 <shell_stack_dump+0x58>)
    8288:	2108      	movs	r1, #8
    828a:	4628      	mov	r0, r5
    828c:	f01e fe0d 	bl	26eaa <shell_fprintf>
}
    8290:	b009      	add	sp, #36	; 0x24
    8292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    8294:	4620      	mov	r0, r4
    8296:	f022 fc52 	bl	2ab3e <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    829a:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    829c:	4a0b      	ldr	r2, [pc, #44]	; (82cc <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    829e:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    82a0:	2800      	cmp	r0, #0
    82a2:	bf18      	it	ne
    82a4:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    82a6:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    82a8:	e9cd 1702 	strd	r1, r7, [sp, #8]
    82ac:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    82b0:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    82b2:	4a07      	ldr	r2, [pc, #28]	; (82d0 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    82b4:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    82b8:	2108      	movs	r1, #8
    82ba:	e9cd 6304 	strd	r6, r3, [sp, #16]
    82be:	4628      	mov	r0, r5
    82c0:	4623      	mov	r3, r4
    82c2:	f01e fdf2 	bl	26eaa <shell_fprintf>
    82c6:	e7e3      	b.n	8290 <shell_stack_dump+0x20>
    82c8:	0002e8d2 	.word	0x0002e8d2
    82cc:	0002e880 	.word	0x0002e880
    82d0:	0002e94c 	.word	0x0002e94c

000082d4 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    82d4:	4603      	mov	r3, r0
	const char *name = dev->name;
    82d6:	6800      	ldr	r0, [r0, #0]
{
    82d8:	b510      	push	{r4, lr}
    82da:	460c      	mov	r4, r1
    82dc:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    82de:	b108      	cbz	r0, 82e4 <get_device_name+0x10>
    82e0:	7802      	ldrb	r2, [r0, #0]
    82e2:	b922      	cbnz	r2, 82ee <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    82e4:	4a02      	ldr	r2, [pc, #8]	; (82f0 <get_device_name+0x1c>)
    82e6:	4620      	mov	r0, r4
    82e8:	f004 fb56 	bl	c998 <snprintf>
		name = buf;
    82ec:	4620      	mov	r0, r4
	}

	return name;
}
    82ee:	bd10      	pop	{r4, pc}
    82f0:	0002ea23 	.word	0x0002ea23

000082f4 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    82f4:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    82f6:	680c      	ldr	r4, [r1, #0]
    82f8:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    82fc:	f7ff ffea 	bl	82d4 <get_device_name>
    8300:	4a03      	ldr	r2, [pc, #12]	; (8310 <cmd_device_list_visitor+0x1c>)
    8302:	4603      	mov	r3, r0
    8304:	2108      	movs	r1, #8
    8306:	4620      	mov	r0, r4
    8308:	f01e fdcf 	bl	26eaa <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    830c:	2000      	movs	r0, #0
    830e:	bd10      	pop	{r4, pc}
    8310:	0002ea28 	.word	0x0002ea28

00008314 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    8314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8318:	b08a      	sub	sp, #40	; 0x28
    831a:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    831c:	a801      	add	r0, sp, #4
    831e:	f01b fead 	bl	2407c <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    8322:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    8324:	4a1b      	ldr	r2, [pc, #108]	; (8394 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    8326:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8398 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    832a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 839c <cmd_device_list+0x88>
    832e:	f8df a070 	ldr.w	sl, [pc, #112]	; 83a0 <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    8332:	2318      	movs	r3, #24
    8334:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    8338:	2108      	movs	r1, #8
    833a:	4628      	mov	r0, r5
    833c:	f01e fdb5 	bl	26eaa <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    8340:	9c01      	ldr	r4, [sp, #4]
    8342:	42b4      	cmp	r4, r6
    8344:	d303      	bcc.n	834e <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    8346:	2000      	movs	r0, #0
    8348:	b00a      	add	sp, #40	; 0x28
    834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    834e:	af05      	add	r7, sp, #20
    8350:	4639      	mov	r1, r7
    8352:	2214      	movs	r2, #20
    8354:	4620      	mov	r0, r4
    8356:	f7ff ffbd 	bl	82d4 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    835a:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    835c:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    835e:	2108      	movs	r1, #8
    8360:	4628      	mov	r0, r5
    8362:	f01e fda2 	bl	26eaa <shell_fprintf>
    8366:	4620      	mov	r0, r4
    8368:	f022 fb19 	bl	2a99e <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    836c:	4a0d      	ldr	r2, [pc, #52]	; (83a4 <cmd_device_list+0x90>)
    836e:	2800      	cmp	r0, #0
    8370:	bf14      	ite	ne
    8372:	464b      	movne	r3, r9
    8374:	4653      	moveq	r3, sl
    8376:	2108      	movs	r1, #8
    8378:	4628      	mov	r0, r5
    837a:	f01e fd96 	bl	26eaa <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    837e:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    8380:	4620      	mov	r0, r4
    8382:	4909      	ldr	r1, [pc, #36]	; (83a8 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    8384:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    8386:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    8388:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    838c:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    838e:	f022 fb10 	bl	2a9b2 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    8392:	e7d6      	b.n	8342 <cmd_device_list+0x2e>
    8394:	0002ea47 	.word	0x0002ea47
    8398:	0002ea51 	.word	0x0002ea51
    839c:	0002ea38 	.word	0x0002ea38
    83a0:	0002ea3e 	.word	0x0002ea3e
    83a4:	0002ea56 	.word	0x0002ea56
    83a8:	000082f5 	.word	0x000082f5

000083ac <device_get_config_level>:
{
    83ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    83b0:	4b11      	ldr	r3, [pc, #68]	; (83f8 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    83b2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 83fc <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    83b6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    83ba:	3101      	adds	r1, #1
{
    83bc:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    83be:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    83c2:	4606      	mov	r6, r0
	bool devices = false;
    83c4:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    83c6:	45a0      	cmp	r8, r4
    83c8:	d803      	bhi.n	83d2 <device_get_config_level+0x26>
}
    83ca:	4638      	mov	r0, r7
    83cc:	b007      	add	sp, #28
    83ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    83d2:	4620      	mov	r0, r4
    83d4:	f022 fae3 	bl	2a99e <z_device_is_ready>
		if (device_is_ready(dev)) {
    83d8:	4605      	mov	r5, r0
    83da:	b158      	cbz	r0, 83f4 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    83dc:	2214      	movs	r2, #20
    83de:	a901      	add	r1, sp, #4
    83e0:	4620      	mov	r0, r4
    83e2:	f7ff ff77 	bl	82d4 <get_device_name>
    83e6:	464a      	mov	r2, r9
    83e8:	4603      	mov	r3, r0
    83ea:	2108      	movs	r1, #8
    83ec:	4630      	mov	r0, r6
    83ee:	f01e fd5c 	bl	26eaa <shell_fprintf>
			devices = true;
    83f2:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    83f4:	3418      	adds	r4, #24
    83f6:	e7e6      	b.n	83c6 <device_get_config_level+0x1a>
    83f8:	0002c200 	.word	0x0002c200
    83fc:	0002ea5d 	.word	0x0002ea5d

00008400 <cmd_device_levels>:
{
    8400:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    8402:	2108      	movs	r1, #8
{
    8404:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    8406:	4a1e      	ldr	r2, [pc, #120]	; (8480 <cmd_device_levels+0x80>)
    8408:	f01e fd4f 	bl	26eaa <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    840c:	2100      	movs	r1, #0
    840e:	4620      	mov	r0, r4
    8410:	f7ff ffcc 	bl	83ac <device_get_config_level>
	if (ret == false) {
    8414:	b920      	cbnz	r0, 8420 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    8416:	4a1b      	ldr	r2, [pc, #108]	; (8484 <cmd_device_levels+0x84>)
    8418:	2108      	movs	r1, #8
    841a:	4620      	mov	r0, r4
    841c:	f01e fd45 	bl	26eaa <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    8420:	2108      	movs	r1, #8
    8422:	4620      	mov	r0, r4
    8424:	4a18      	ldr	r2, [pc, #96]	; (8488 <cmd_device_levels+0x88>)
    8426:	f01e fd40 	bl	26eaa <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    842a:	2101      	movs	r1, #1
    842c:	4620      	mov	r0, r4
    842e:	f7ff ffbd 	bl	83ac <device_get_config_level>
	if (ret == false) {
    8432:	b920      	cbnz	r0, 843e <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    8434:	4a13      	ldr	r2, [pc, #76]	; (8484 <cmd_device_levels+0x84>)
    8436:	2108      	movs	r1, #8
    8438:	4620      	mov	r0, r4
    843a:	f01e fd36 	bl	26eaa <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    843e:	2108      	movs	r1, #8
    8440:	4620      	mov	r0, r4
    8442:	4a12      	ldr	r2, [pc, #72]	; (848c <cmd_device_levels+0x8c>)
    8444:	f01e fd31 	bl	26eaa <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    8448:	2102      	movs	r1, #2
    844a:	4620      	mov	r0, r4
    844c:	f7ff ffae 	bl	83ac <device_get_config_level>
	if (ret == false) {
    8450:	b920      	cbnz	r0, 845c <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    8452:	4a0c      	ldr	r2, [pc, #48]	; (8484 <cmd_device_levels+0x84>)
    8454:	2108      	movs	r1, #8
    8456:	4620      	mov	r0, r4
    8458:	f01e fd27 	bl	26eaa <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    845c:	2108      	movs	r1, #8
    845e:	4620      	mov	r0, r4
    8460:	4a0b      	ldr	r2, [pc, #44]	; (8490 <cmd_device_levels+0x90>)
    8462:	f01e fd22 	bl	26eaa <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    8466:	2103      	movs	r1, #3
    8468:	4620      	mov	r0, r4
    846a:	f7ff ff9f 	bl	83ac <device_get_config_level>
	if (ret == false) {
    846e:	b920      	cbnz	r0, 847a <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    8470:	4a04      	ldr	r2, [pc, #16]	; (8484 <cmd_device_levels+0x84>)
    8472:	2108      	movs	r1, #8
    8474:	4620      	mov	r0, r4
    8476:	f01e fd18 	bl	26eaa <shell_fprintf>
}
    847a:	2000      	movs	r0, #0
    847c:	bd10      	pop	{r4, pc}
    847e:	bf00      	nop
    8480:	0002ea63 	.word	0x0002ea63
    8484:	0002ea72 	.word	0x0002ea72
    8488:	0002ea7a 	.word	0x0002ea7a
    848c:	0002ea89 	.word	0x0002ea89
    8490:	0002ea97 	.word	0x0002ea97

00008494 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    8494:	1e8b      	subs	r3, r1, #2
    8496:	2b02      	cmp	r3, #2
{
    8498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    849c:	4607      	mov	r7, r0
    849e:	4688      	mov	r8, r1
    84a0:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    84a2:	d833      	bhi.n	850c <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    84a4:	6860      	ldr	r0, [r4, #4]
    84a6:	2210      	movs	r2, #16
    84a8:	2100      	movs	r1, #0
    84aa:	f020 f868 	bl	2857e <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    84ae:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    84b2:	4606      	mov	r6, r0
	if (argc < 3) {
    84b4:	d01e      	beq.n	84f4 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    84b6:	68a0      	ldr	r0, [r4, #8]
    84b8:	220a      	movs	r2, #10
    84ba:	2100      	movs	r1, #0
    84bc:	f020 f85f 	bl	2857e <strtoul>
    84c0:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    84c2:	4a21      	ldr	r2, [pc, #132]	; (8548 <cmd_devmem+0xb4>)
    84c4:	462b      	mov	r3, r5
    84c6:	2108      	movs	r1, #8
    84c8:	4638      	mov	r0, r7
    84ca:	f01e fcee 	bl	26eaa <shell_fprintf>

	if (argc <= 3) {
    84ce:	f1b8 0f04 	cmp.w	r8, #4
    84d2:	d01e      	beq.n	8512 <cmd_devmem+0x7e>
	switch (width) {
    84d4:	2d10      	cmp	r5, #16
    84d6:	d00f      	beq.n	84f8 <cmd_devmem+0x64>
    84d8:	2d20      	cmp	r5, #32
    84da:	d010      	beq.n	84fe <cmd_devmem+0x6a>
    84dc:	2d08      	cmp	r5, #8
    84de:	d110      	bne.n	8502 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    84e0:	7833      	ldrb	r3, [r6, #0]
    84e2:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    84e4:	4a19      	ldr	r2, [pc, #100]	; (854c <cmd_devmem+0xb8>)
    84e6:	2108      	movs	r1, #8
    84e8:	4638      	mov	r0, r7
    84ea:	f01e fcde 	bl	26eaa <shell_fprintf>
	int err = 0;
    84ee:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    84f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    84f4:	2520      	movs	r5, #32
    84f6:	e7e4      	b.n	84c2 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    84f8:	8833      	ldrh	r3, [r6, #0]
    84fa:	b29b      	uxth	r3, r3
	if (err == 0) {
    84fc:	e7f2      	b.n	84e4 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    84fe:	6833      	ldr	r3, [r6, #0]
    8500:	e7f0      	b.n	84e4 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    8502:	4a13      	ldr	r2, [pc, #76]	; (8550 <cmd_devmem+0xbc>)
    8504:	2108      	movs	r1, #8
    8506:	4638      	mov	r0, r7
    8508:	f01e fccf 	bl	26eaa <shell_fprintf>
		return -EINVAL;
    850c:	f06f 0015 	mvn.w	r0, #21
    8510:	e7ee      	b.n	84f0 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    8512:	68e0      	ldr	r0, [r4, #12]
    8514:	2210      	movs	r2, #16
    8516:	2100      	movs	r1, #0
    8518:	f020 f831 	bl	2857e <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    851c:	4a0d      	ldr	r2, [pc, #52]	; (8554 <cmd_devmem+0xc0>)
    851e:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    8520:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    8522:	2108      	movs	r1, #8
    8524:	4638      	mov	r0, r7
    8526:	f01e fcc0 	bl	26eaa <shell_fprintf>
	switch (width) {
    852a:	2d10      	cmp	r5, #16
    852c:	d006      	beq.n	853c <cmd_devmem+0xa8>
    852e:	2d20      	cmp	r5, #32
    8530:	d007      	beq.n	8542 <cmd_devmem+0xae>
    8532:	2d08      	cmp	r5, #8
    8534:	d1e5      	bne.n	8502 <cmd_devmem+0x6e>
		sys_write8(value, addr);
    8536:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    8538:	7034      	strb	r4, [r6, #0]
    853a:	e7d8      	b.n	84ee <cmd_devmem+0x5a>
		sys_write16(value, addr);
    853c:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    853e:	8034      	strh	r4, [r6, #0]
    8540:	e7d5      	b.n	84ee <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    8542:	6034      	str	r4, [r6, #0]
    8544:	e7d3      	b.n	84ee <cmd_devmem+0x5a>
    8546:	bf00      	nop
    8548:	0002eaf4 	.word	0x0002eaf4
    854c:	0002eb1f 	.word	0x0002eb1f
    8550:	0002eb09 	.word	0x0002eb09
    8554:	0002eb30 	.word	0x0002eb30

00008558 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    8558:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    855a:	4e0e      	ldr	r6, [pc, #56]	; (8594 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    855c:	4604      	mov	r4, r0
	if (bypass && in_use) {
    855e:	7833      	ldrb	r3, [r6, #0]
    8560:	460d      	mov	r5, r1
    8562:	b131      	cbz	r1, 8572 <set_bypass.isra.0+0x1a>
    8564:	b12b      	cbz	r3, 8572 <set_bypass.isra.0+0x1a>
}
    8566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    856a:	4a0b      	ldr	r2, [pc, #44]	; (8598 <set_bypass.isra.0+0x40>)
    856c:	2101      	movs	r1, #1
    856e:	f01e bc9c 	b.w	26eaa <shell_fprintf>
	in_use = !in_use;
    8572:	f083 0301 	eor.w	r3, r3, #1
    8576:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    8578:	b133      	cbz	r3, 8588 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    857a:	4a08      	ldr	r2, [pc, #32]	; (859c <set_bypass.isra.0+0x44>)
    857c:	2108      	movs	r1, #8
    857e:	4620      	mov	r0, r4
    8580:	f01e fc93 	bl	26eaa <shell_fprintf>
		in_use = true;
    8584:	2301      	movs	r3, #1
    8586:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    8588:	4629      	mov	r1, r5
    858a:	4620      	mov	r0, r4
}
    858c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    8590:	f01e bcb0 	b.w	26ef4 <shell_set_bypass>
    8594:	20005f0b 	.word	0x20005f0b
    8598:	0002eb44 	.word	0x0002eb44
    859c:	0002eb7f 	.word	0x0002eb7f

000085a0 <bypass_cb>:
{
    85a0:	b570      	push	{r4, r5, r6, lr}
    85a2:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    85a4:	483c      	ldr	r0, [pc, #240]	; (8698 <bypass_cb+0xf8>)
    85a6:	7803      	ldrb	r3, [r0, #0]
    85a8:	2b18      	cmp	r3, #24
    85aa:	d102      	bne.n	85b2 <bypass_cb+0x12>
    85ac:	780b      	ldrb	r3, [r1, #0]
    85ae:	2b11      	cmp	r3, #17
    85b0:	d031      	beq.n	8616 <bypass_cb+0x76>
    85b2:	3a01      	subs	r2, #1
    85b4:	460b      	mov	r3, r1
    85b6:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    85b8:	429d      	cmp	r5, r3
    85ba:	d125      	bne.n	8608 <bypass_cb+0x68>
	tail = recv[len - 1];
    85bc:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    85be:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    85c0:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    85c2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    85c6:	2b09      	cmp	r3, #9
    85c8:	4c34      	ldr	r4, [pc, #208]	; (869c <bypass_cb+0xfc>)
    85ca:	d904      	bls.n	85d6 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    85cc:	f022 0320 	bic.w	r3, r2, #32
    85d0:	3b41      	subs	r3, #65	; 0x41
    85d2:	2b05      	cmp	r3, #5
    85d4:	d804      	bhi.n	85e0 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    85d6:	6823      	ldr	r3, [r4, #0]
    85d8:	4931      	ldr	r1, [pc, #196]	; (86a0 <bypass_cb+0x100>)
    85da:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    85dc:	3301      	adds	r3, #1
    85de:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    85e0:	6823      	ldr	r3, [r4, #0]
    85e2:	2b02      	cmp	r3, #2
    85e4:	d134      	bne.n	8650 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    85e6:	2210      	movs	r2, #16
    85e8:	482d      	ldr	r0, [pc, #180]	; (86a0 <bypass_cb+0x100>)
    85ea:	2100      	movs	r1, #0
    85ec:	f01f ffc7 	bl	2857e <strtoul>
		*bytes = byte;
    85f0:	4a2c      	ldr	r2, [pc, #176]	; (86a4 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    85f2:	6813      	ldr	r3, [r2, #0]
    85f4:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    85f8:	6013      	str	r3, [r2, #0]
		sum++;
    85fa:	4a2b      	ldr	r2, [pc, #172]	; (86a8 <bypass_cb+0x108>)
    85fc:	6813      	ldr	r3, [r2, #0]
    85fe:	3301      	adds	r3, #1
    8600:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    8602:	2300      	movs	r3, #0
    8604:	6023      	str	r3, [r4, #0]
    8606:	e023      	b.n	8650 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    8608:	f813 6b01 	ldrb.w	r6, [r3], #1
    860c:	2e18      	cmp	r6, #24
    860e:	d1d3      	bne.n	85b8 <bypass_cb+0x18>
    8610:	781e      	ldrb	r6, [r3, #0]
    8612:	2e11      	cmp	r6, #17
    8614:	d1d0      	bne.n	85b8 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    8616:	4d24      	ldr	r5, [pc, #144]	; (86a8 <bypass_cb+0x108>)
    8618:	4a24      	ldr	r2, [pc, #144]	; (86ac <bypass_cb+0x10c>)
    861a:	682b      	ldr	r3, [r5, #0]
    861c:	2108      	movs	r1, #8
    861e:	4620      	mov	r0, r4
    8620:	f01e fc43 	bl	26eaa <shell_fprintf>
		set_bypass(sh, NULL);
    8624:	4620      	mov	r0, r4
    8626:	2100      	movs	r1, #0
    8628:	f7ff ff96 	bl	8558 <set_bypass.isra.0>
		if (!littleendian) {
    862c:	4b20      	ldr	r3, [pc, #128]	; (86b0 <bypass_cb+0x110>)
    862e:	7818      	ldrb	r0, [r3, #0]
    8630:	b970      	cbnz	r0, 8650 <bypass_cb+0xb0>
    8632:	4a20      	ldr	r2, [pc, #128]	; (86b4 <bypass_cb+0x114>)
    8634:	682b      	ldr	r3, [r5, #0]
    8636:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    8638:	2b04      	cmp	r3, #4
    863a:	dc0a      	bgt.n	8652 <bypass_cb+0xb2>
    863c:	b108      	cbz	r0, 8642 <bypass_cb+0xa2>
    863e:	6011      	str	r1, [r2, #0]
    8640:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    8642:	f013 0103 	ands.w	r1, r3, #3
    8646:	d10b      	bne.n	8660 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    8648:	6812      	ldr	r2, [r2, #0]
    864a:	6813      	ldr	r3, [r2, #0]
    864c:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    864e:	6013      	str	r3, [r2, #0]
}
    8650:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    8652:	6808      	ldr	r0, [r1, #0]
    8654:	ba00      	rev	r0, r0
    8656:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    865a:	3b04      	subs	r3, #4
				data++;
    865c:	2001      	movs	r0, #1
    865e:	e7eb      	b.n	8638 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    8660:	425b      	negs	r3, r3
    8662:	f003 0303 	and.w	r3, r3, #3
    8666:	bf58      	it	pl
    8668:	4259      	negpl	r1, r3
    866a:	2902      	cmp	r1, #2
    866c:	d104      	bne.n	8678 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    866e:	6812      	ldr	r2, [r2, #0]
    8670:	8813      	ldrh	r3, [r2, #0]
    8672:	ba5b      	rev16	r3, r3
    8674:	b29b      	uxth	r3, r3
    8676:	e7ea      	b.n	864e <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    8678:	2903      	cmp	r1, #3
    867a:	d1e9      	bne.n	8650 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    867c:	6810      	ldr	r0, [r2, #0]
    867e:	6802      	ldr	r2, [r0, #0]
    8680:	0411      	lsls	r1, r2, #16
    8682:	f3c2 4307 	ubfx	r3, r2, #16, #8
    8686:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    868a:	430b      	orrs	r3, r1
    868c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    8690:	4313      	orrs	r3, r2
    8692:	6003      	str	r3, [r0, #0]
    8694:	e7dc      	b.n	8650 <bypass_cb+0xb0>
    8696:	bf00      	nop
    8698:	20005f0d 	.word	0x20005f0d
    869c:	20003a04 	.word	0x20003a04
    86a0:	20005f09 	.word	0x20005f09
    86a4:	20003a00 	.word	0x20003a00
    86a8:	20003a0c 	.word	0x20003a0c
    86ac:	0002eba9 	.word	0x0002eba9
    86b0:	20005f0c 	.word	0x20005f0c
    86b4:	20003a08 	.word	0x20003a08

000086b8 <cmd_load>:
{
    86b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86bc:	460d      	mov	r5, r1
	chunk_element = 0;
    86be:	492d      	ldr	r1, [pc, #180]	; (8774 <cmd_load+0xbc>)
	littleendian = false;
    86c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8778 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    86c4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 877c <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    86c8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8780 <cmd_load+0xc8>
	littleendian = false;
    86cc:	2300      	movs	r3, #0
	chunk_element = 0;
    86ce:	600b      	str	r3, [r1, #0]
	sum = 0;
    86d0:	492c      	ldr	r1, [pc, #176]	; (8784 <cmd_load+0xcc>)
	littleendian = false;
    86d2:	f888 3000 	strb.w	r3, [r8]
{
    86d6:	4606      	mov	r6, r0
	sum = 0;
    86d8:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    86da:	4614      	mov	r4, r2
    86dc:	2d01      	cmp	r5, #1
    86de:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    86e0:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    86e4:	d921      	bls.n	872a <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    86e6:	4618      	mov	r0, r3
    86e8:	2202      	movs	r2, #2
    86ea:	4649      	mov	r1, r9
    86ec:	9301      	str	r3, [sp, #4]
    86ee:	f020 f825 	bl	2873c <strncmp>
    86f2:	9b01      	ldr	r3, [sp, #4]
    86f4:	b988      	cbnz	r0, 871a <cmd_load+0x62>
    86f6:	6822      	ldr	r2, [r4, #0]
    86f8:	7892      	ldrb	r2, [r2, #2]
    86fa:	3a00      	subs	r2, #0
    86fc:	bf18      	it	ne
    86fe:	2201      	movne	r2, #1
    8700:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    8704:	4920      	ldr	r1, [pc, #128]	; (8788 <cmd_load+0xd0>)
    8706:	2202      	movs	r2, #2
    8708:	4650      	mov	r0, sl
    870a:	f020 f817 	bl	2873c <strncmp>
    870e:	b930      	cbnz	r0, 871e <cmd_load+0x66>
			littleendian = true;
    8710:	2301      	movs	r3, #1
    8712:	f888 3000 	strb.w	r3, [r8]
		argc--;
    8716:	3d01      	subs	r5, #1
    8718:	e7e0      	b.n	86dc <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    871a:	2200      	movs	r2, #0
    871c:	e7f0      	b.n	8700 <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    871e:	4649      	mov	r1, r9
    8720:	4650      	mov	r0, sl
    8722:	f01f ffff 	bl	28724 <strcmp>
    8726:	b9b0      	cbnz	r0, 8756 <cmd_load+0x9e>
			argv++;
    8728:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    872a:	2200      	movs	r2, #0
    872c:	4611      	mov	r1, r2
    872e:	6878      	ldr	r0, [r7, #4]
    8730:	f01f feb1 	bl	28496 <strtol>
    8734:	4b15      	ldr	r3, [pc, #84]	; (878c <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    8736:	2200      	movs	r2, #0
    8738:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    873a:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    873c:	6878      	ldr	r0, [r7, #4]
    873e:	f01f feaa 	bl	28496 <strtol>
    8742:	4b13      	ldr	r3, [pc, #76]	; (8790 <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    8744:	4913      	ldr	r1, [pc, #76]	; (8794 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    8746:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    8748:	4630      	mov	r0, r6
    874a:	f7ff ff05 	bl	8558 <set_bypass.isra.0>
}
    874e:	2000      	movs	r0, #0
    8750:	b003      	add	sp, #12
    8752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    8756:	f89a 2000 	ldrb.w	r2, [sl]
    875a:	2a2d      	cmp	r2, #45	; 0x2d
    875c:	d1e5      	bne.n	872a <cmd_load+0x72>
    875e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    8762:	2a00      	cmp	r2, #0
    8764:	d0e1      	beq.n	872a <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    8766:	4653      	mov	r3, sl
    8768:	465a      	mov	r2, fp
    876a:	2108      	movs	r1, #8
    876c:	4630      	mov	r0, r6
    876e:	f01e fb9c 	bl	26eaa <shell_fprintf>
    8772:	e7d0      	b.n	8716 <cmd_load+0x5e>
    8774:	20003a04 	.word	0x20003a04
    8778:	20005f0c 	.word	0x20005f0c
    877c:	0002ebc3 	.word	0x0002ebc3
    8780:	0002ebc9 	.word	0x0002ebc9
    8784:	20003a0c 	.word	0x20003a0c
    8788:	0002ebc6 	.word	0x0002ebc6
    878c:	20003a00 	.word	0x20003a00
    8790:	20003a08 	.word	0x20003a08
    8794:	000085a1 	.word	0x000085a1

00008798 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    8798:	b507      	push	{r0, r1, r2, lr}
    879a:	480a      	ldr	r0, [pc, #40]	; (87c4 <enable_shell_uart+0x2c>)
    879c:	f022 f8ff 	bl	2a99e <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    87a0:	b160      	cbz	r0, 87bc <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    87a2:	4a09      	ldr	r2, [pc, #36]	; (87c8 <enable_shell_uart+0x30>)
    87a4:	4907      	ldr	r1, [pc, #28]	; (87c4 <enable_shell_uart+0x2c>)
    87a6:	6812      	ldr	r2, [r2, #0]
    87a8:	4808      	ldr	r0, [pc, #32]	; (87cc <enable_shell_uart+0x34>)
    87aa:	2304      	movs	r3, #4
    87ac:	9300      	str	r3, [sp, #0]
    87ae:	2301      	movs	r3, #1
    87b0:	f000 fe0e 	bl	93d0 <shell_init>

	return 0;
    87b4:	2000      	movs	r0, #0
}
    87b6:	b003      	add	sp, #12
    87b8:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    87bc:	f06f 0012 	mvn.w	r0, #18
    87c0:	e7f9      	b.n	87b6 <enable_shell_uart+0x1e>
    87c2:	bf00      	nop
    87c4:	0002b648 	.word	0x0002b648
    87c8:	0002c29c 	.word	0x0002c29c
    87cc:	0002ba24 	.word	0x0002ba24

000087d0 <init>:
{
    87d0:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    87d2:	6846      	ldr	r6, [r0, #4]
{
    87d4:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    87d6:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    87d8:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    87da:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    87dc:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    87de:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    87e2:	2208      	movs	r2, #8
	buf->tail = 0;
    87e4:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    87e8:	4629      	mov	r1, r5
    87ea:	4410      	add	r0, r2
    87ec:	f01f ffeb 	bl	287c6 <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    87f0:	68f0      	ldr	r0, [r6, #12]
    87f2:	2208      	movs	r2, #8
	buf->tail = 0;
    87f4:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    87f8:	4629      	mov	r1, r5
    87fa:	4410      	add	r0, r2
    87fc:	f01f ffe3 	bl	287c6 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    8800:	6833      	ldr	r3, [r6, #0]
    8802:	60dd      	str	r5, [r3, #12]
	const struct uart_driver_api *api =
    8804:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    8806:	b12b      	cbz	r3, 8814 <init+0x44>
    8808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    880a:	b11b      	cbz	r3, 8814 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    880c:	4905      	ldr	r1, [pc, #20]	; (8824 <init+0x54>)
    880e:	4632      	mov	r2, r6
    8810:	4620      	mov	r0, r4
    8812:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    8814:	68a3      	ldr	r3, [r4, #8]
    8816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8818:	b10b      	cbz	r3, 881e <init+0x4e>
		api->irq_rx_enable(dev);
    881a:	4620      	mov	r0, r4
    881c:	4798      	blx	r3
}
    881e:	2000      	movs	r0, #0
    8820:	bd70      	pop	{r4, r5, r6, pc}
    8822:	bf00      	nop
    8824:	00008829 	.word	0x00008829

00008828 <uart_callback>:
{
    8828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    882c:	4604      	mov	r4, r0
    882e:	b089      	sub	sp, #36	; 0x24
    8830:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    8832:	6883      	ldr	r3, [r0, #8]
    8834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8836:	b103      	cbz	r3, 883a <uart_callback+0x12>
	return api->irq_update(dev);
    8838:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    883a:	68a3      	ldr	r3, [r4, #8]
    883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    883e:	bb5b      	cbnz	r3, 8898 <uart_callback+0x70>
			LOG_WRN("RX ring buffer full.");
    8840:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8964 <uart_callback+0x13c>
    8844:	f8df a120 	ldr.w	sl, [pc, #288]	; 8968 <uart_callback+0x140>
    8848:	f8df b120 	ldr.w	fp, [pc, #288]	; 896c <uart_callback+0x144>
{
    884c:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    8850:	68f0      	ldr	r0, [r6, #12]
    8852:	4669      	mov	r1, sp
    8854:	6902      	ldr	r2, [r0, #16]
    8856:	f01d fce4 	bl	26222 <ring_buf_put_claim>
		if (len > 0) {
    885a:	4607      	mov	r7, r0
    885c:	2800      	cmp	r0, #0
    885e:	d043      	beq.n	88e8 <uart_callback+0xc0>
	if (api->fifo_read == NULL) {
    8860:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    8862:	9900      	ldr	r1, [sp, #0]
    8864:	699b      	ldr	r3, [r3, #24]
    8866:	2b00      	cmp	r3, #0
    8868:	d03b      	beq.n	88e2 <uart_callback+0xba>
	return api->fifo_read(dev, rx_data, size);
    886a:	4602      	mov	r2, r0
    886c:	4620      	mov	r0, r4
    886e:	4798      	blx	r3
				new_data = true;
    8870:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    8872:	4629      	mov	r1, r5
    8874:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    8876:	bf18      	it	ne
    8878:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    887c:	f01d fcfe 	bl	2627c <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    8880:	b10d      	cbz	r5, 8886 <uart_callback+0x5e>
    8882:	42af      	cmp	r7, r5
    8884:	d0e4      	beq.n	8850 <uart_callback+0x28>
	if (new_data) {
    8886:	f1b8 0f00 	cmp.w	r8, #0
    888a:	d009      	beq.n	88a0 <uart_callback+0x78>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    888c:	6833      	ldr	r3, [r6, #0]
    888e:	2000      	movs	r0, #0
    8890:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    8894:	4790      	blx	r2
}
    8896:	e003      	b.n	88a0 <uart_callback+0x78>
	return api->irq_rx_ready(dev);
    8898:	4620      	mov	r0, r4
    889a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    889c:	2800      	cmp	r0, #0
    889e:	d1cf      	bne.n	8840 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    88a0:	68a3      	ldr	r3, [r4, #8]
    88a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    88a4:	2b00      	cmp	r3, #0
    88a6:	d13c      	bne.n	8922 <uart_callback+0xfa>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    88a8:	68b0      	ldr	r0, [r6, #8]
    88aa:	a901      	add	r1, sp, #4
    88ac:	6902      	ldr	r2, [r0, #16]
    88ae:	f01d fd20 	bl	262f2 <ring_buf_get_claim>
	if (len) {
    88b2:	4605      	mov	r5, r0
    88b4:	2800      	cmp	r0, #0
    88b6:	d04f      	beq.n	8958 <uart_callback+0x130>
	if (api->line_ctrl_get == NULL) {
    88b8:	68a3      	ldr	r3, [r4, #8]
    88ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    88bc:	2b00      	cmp	r3, #0
    88be:	d037      	beq.n	8930 <uart_callback+0x108>
	return api->line_ctrl_get(dev, ctrl, val);
    88c0:	aa02      	add	r2, sp, #8
    88c2:	2104      	movs	r1, #4
    88c4:	4620      	mov	r0, r4
    88c6:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    88c8:	f110 0f58 	cmn.w	r0, #88	; 0x58
    88cc:	d030      	beq.n	8930 <uart_callback+0x108>
    88ce:	3086      	adds	r0, #134	; 0x86
    88d0:	d02e      	beq.n	8930 <uart_callback+0x108>
			if (dtr) {
    88d2:	9b02      	ldr	r3, [sp, #8]
    88d4:	bb63      	cbnz	r3, 8930 <uart_callback+0x108>
	return z_impl_k_sleep(timeout);
    88d6:	2100      	movs	r1, #0
    88d8:	f640 40cd 	movw	r0, #3277	; 0xccd
    88dc:	f01c fd3a 	bl	25354 <z_impl_k_sleep>
		while (true) {
    88e0:	e7ea      	b.n	88b8 <uart_callback+0x90>
		return -ENOSYS;
    88e2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    88e6:	e7c3      	b.n	8870 <uart_callback+0x48>
			LOG_WRN("RX ring buffer full.");
    88e8:	f8d9 3000 	ldr.w	r3, [r9]
    88ec:	f013 0f06 	tst.w	r3, #6
    88f0:	d00b      	beq.n	890a <uart_callback+0xe2>
    88f2:	2303      	movs	r3, #3
    88f4:	e9cd ab06 	strd	sl, fp, [sp, #24]
    88f8:	9301      	str	r3, [sp, #4]
    88fa:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    88fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8900:	4603      	mov	r3, r0
    8902:	aa05      	add	r2, sp, #20
    8904:	4648      	mov	r0, r9
    8906:	f01e f8ef 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    890a:	68a3      	ldr	r3, [r4, #8]
    890c:	699b      	ldr	r3, [r3, #24]
    890e:	b12b      	cbz	r3, 891c <uart_callback+0xf4>
	return api->fifo_read(dev, rx_data, size);
    8910:	2201      	movs	r2, #1
    8912:	a902      	add	r1, sp, #8
    8914:	4620      	mov	r0, r4
    8916:	4798      	blx	r3
    8918:	4605      	mov	r5, r0
    891a:	e7b1      	b.n	8880 <uart_callback+0x58>
		return -ENOSYS;
    891c:	f06f 0557 	mvn.w	r5, #87	; 0x57
    8920:	e7ae      	b.n	8880 <uart_callback+0x58>
	return api->irq_tx_ready(dev);
    8922:	4620      	mov	r0, r4
    8924:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    8926:	2800      	cmp	r0, #0
    8928:	d1be      	bne.n	88a8 <uart_callback+0x80>
}
    892a:	b009      	add	sp, #36	; 0x24
    892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (api->fifo_fill == NULL) {
    8930:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    8932:	9901      	ldr	r1, [sp, #4]
    8934:	695b      	ldr	r3, [r3, #20]
    8936:	b163      	cbz	r3, 8952 <uart_callback+0x12a>
	return api->fifo_fill(dev, tx_data, size);
    8938:	462a      	mov	r2, r5
    893a:	4620      	mov	r0, r4
    893c:	4798      	blx	r3
    893e:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    8940:	68b0      	ldr	r0, [r6, #8]
    8942:	f01d fd01 	bl	26348 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    8946:	6833      	ldr	r3, [r6, #0]
    8948:	2001      	movs	r0, #1
    894a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    894e:	4790      	blx	r2
}
    8950:	e7eb      	b.n	892a <uart_callback+0x102>
		return -ENOSYS;
    8952:	f06f 0157 	mvn.w	r1, #87	; 0x57
    8956:	e7f3      	b.n	8940 <uart_callback+0x118>
		uart_irq_tx_disable(dev);
    8958:	4620      	mov	r0, r4
    895a:	f01e f953 	bl	26c04 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    895e:	6833      	ldr	r3, [r6, #0]
    8960:	60dd      	str	r5, [r3, #12]
    8962:	e7f0      	b.n	8946 <uart_callback+0x11e>
    8964:	200009e0 	.word	0x200009e0
    8968:	0002ec6b 	.word	0x0002ec6b
    896c:	0002ecb4 	.word	0x0002ecb4

00008970 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    8970:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    8972:	6881      	ldr	r1, [r0, #8]
{
    8974:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    8976:	3108      	adds	r1, #8
    8978:	f001 f8ba 	bl	9af0 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    897c:	68a1      	ldr	r1, [r4, #8]
    897e:	4a03      	ldr	r2, [pc, #12]	; (898c <shell_internal_help_print+0x1c>)
    8980:	4620      	mov	r0, r4
    8982:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    8984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    8988:	f001 b85a 	b.w	9a40 <z_shell_help_subcmd_print>
    898c:	0002ecc3 	.word	0x0002ecc3

00008990 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    8990:	4901      	ldr	r1, [pc, #4]	; (8998 <z_cursor_next_line_move.isra.0+0x8>)
    8992:	f01e b9cd 	b.w	26d30 <z_shell_raw_fprintf>
    8996:	bf00      	nop
    8998:	0002e014 	.word	0x0002e014

0000899c <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    899e:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    89a0:	6880      	ldr	r0, [r0, #8]
    89a2:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    89a6:	075a      	lsls	r2, r3, #29
{
    89a8:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    89aa:	d505      	bpl.n	89b8 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    89ac:	2100      	movs	r1, #0
    89ae:	f01e fa00 	bl	26db2 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    89b2:	68e0      	ldr	r0, [r4, #12]
    89b4:	f01f f915 	bl	27be2 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    89b8:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    89ba:	68db      	ldr	r3, [r3, #12]
    89bc:	b96b      	cbnz	r3, 89da <history_handle+0x3e>
		if (up) {
    89be:	2d00      	cmp	r5, #0
    89c0:	d037      	beq.n	8a32 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    89c2:	68a0      	ldr	r0, [r4, #8]
    89c4:	3042      	adds	r0, #66	; 0x42
    89c6:	f01e f9ad 	bl	26d24 <z_shell_strlen>

			if (cmd_len) {
    89ca:	68a3      	ldr	r3, [r4, #8]
    89cc:	b398      	cbz	r0, 8a36 <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    89ce:	f103 0142 	add.w	r1, r3, #66	; 0x42
    89d2:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    89d6:	f01f fe6b 	bl	286b0 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    89da:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    89dc:	68e0      	ldr	r0, [r4, #12]
    89de:	f10d 0306 	add.w	r3, sp, #6
    89e2:	3242      	adds	r2, #66	; 0x42
    89e4:	4629      	mov	r1, r5
    89e6:	f01f f8ff 	bl	27be8 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    89ea:	b958      	cbnz	r0, 8a04 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    89ec:	68a0      	ldr	r0, [r4, #8]
    89ee:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    89f2:	3042      	adds	r0, #66	; 0x42
    89f4:	f01f fe5c 	bl	286b0 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    89f8:	68a0      	ldr	r0, [r4, #8]
    89fa:	3042      	adds	r0, #66	; 0x42
    89fc:	f01e f992 	bl	26d24 <z_shell_strlen>
    8a00:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    8a04:	4620      	mov	r0, r4
    8a06:	f01e fd7a 	bl	274fe <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    8a0a:	68a3      	ldr	r3, [r4, #8]
    8a0c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    8a10:	069b      	lsls	r3, r3, #26
    8a12:	d503      	bpl.n	8a1c <history_handle+0x80>
    8a14:	4909      	ldr	r1, [pc, #36]	; (8a3c <history_handle+0xa0>)
    8a16:	6960      	ldr	r0, [r4, #20]
    8a18:	f01e f98a 	bl	26d30 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    8a1c:	4620      	mov	r0, r4
    8a1e:	f000 fedf 	bl	97e0 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    8a22:	68a3      	ldr	r3, [r4, #8]
    8a24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a28:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    8a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    8a2c:	4620      	mov	r0, r4
    8a2e:	f01e fcd3 	bl	273d8 <z_shell_op_cond_next_line>
}
    8a32:	b003      	add	sp, #12
    8a34:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    8a36:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    8a3a:	e7ce      	b.n	89da <history_handle+0x3e>
    8a3c:	0002bb8d 	.word	0x0002bb8d

00008a40 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    8a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    8a44:	2300      	movs	r3, #0
{
    8a46:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    8a48:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    8a4c:	6883      	ldr	r3, [r0, #8]
{
    8a4e:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    8a50:	3342      	adds	r3, #66	; 0x42
    8a52:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    8a54:	f01e fd59 	bl	2750a <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    8a58:	4620      	mov	r0, r4
    8a5a:	f01e fca9 	bl	273b0 <z_shell_cursor_in_empty_line>
    8a5e:	b910      	cbnz	r0, 8a66 <execute+0x26>
		z_cursor_next_line_move(shell);
    8a60:	6960      	ldr	r0, [r4, #20]
    8a62:	f7ff ff95 	bl	8990 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    8a66:	68a0      	ldr	r0, [r4, #8]
    8a68:	2214      	movs	r2, #20
    8a6a:	2100      	movs	r1, #0
    8a6c:	3008      	adds	r0, #8
    8a6e:	f01f feaa 	bl	287c6 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    8a72:	4620      	mov	r0, r4
    8a74:	f01e fc15 	bl	272a2 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    8a78:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    8a7a:	68e0      	ldr	r0, [r4, #12]
    8a7c:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    8a7e:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    8a80:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    8a82:	f01f f8e8 	bl	27c56 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    8a86:	4620      	mov	r0, r4
    8a88:	f01f f96b 	bl	27d62 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    8a8c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    8a90:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    8a92:	46b2      	mov	sl, r6
    8a94:	af11      	add	r7, sp, #68	; 0x44
    8a96:	9602      	str	r6, [sp, #8]
    8a98:	4635      	mov	r5, r6
    8a9a:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    8a9c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    8aa0:	2a01      	cmp	r2, #1
    8aa2:	f000 80d6 	beq.w	8c52 <execute+0x212>
    8aa6:	2b0b      	cmp	r3, #11
    8aa8:	f240 80ae 	bls.w	8c08 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    8aac:	9b06      	ldr	r3, [sp, #24]
    8aae:	2b02      	cmp	r3, #2
    8ab0:	f040 80ae 	bne.w	8c10 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    8ab4:	4b89      	ldr	r3, [pc, #548]	; (8cdc <execute+0x29c>)
    8ab6:	4a8a      	ldr	r2, [pc, #552]	; (8ce0 <execute+0x2a0>)
    8ab8:	2101      	movs	r1, #1
    8aba:	e014      	b.n	8ae6 <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    8abc:	9a03      	ldr	r2, [sp, #12]
    8abe:	2302      	movs	r3, #2
    8ac0:	4639      	mov	r1, r7
    8ac2:	a806      	add	r0, sp, #24
    8ac4:	f01e fa81 	bl	26fca <z_shell_make_argv>
		if (argc == 0) {
    8ac8:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    8aca:	687a      	ldr	r2, [r7, #4]
    8acc:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    8ace:	4603      	mov	r3, r0
		if (argc == 0) {
    8ad0:	b929      	cbnz	r1, 8ade <execute+0x9e>
			return -ENOEXEC;
    8ad2:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    8ad6:	4628      	mov	r0, r5
    8ad8:	b01f      	add	sp, #124	; 0x7c
    8ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    8ade:	2901      	cmp	r1, #1
    8ae0:	d105      	bne.n	8aee <execute+0xae>
    8ae2:	b120      	cbz	r0, 8aee <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    8ae4:	4a7f      	ldr	r2, [pc, #508]	; (8ce4 <execute+0x2a4>)
    8ae6:	4620      	mov	r0, r4
    8ae8:	f01e fdbb 	bl	27662 <z_shell_fprintf>
    8aec:	e7f1      	b.n	8ad2 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    8aee:	9b05      	ldr	r3, [sp, #20]
    8af0:	b34b      	cbz	r3, 8b46 <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    8af2:	6838      	ldr	r0, [r7, #0]
    8af4:	f001 f820 	bl	9b38 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    8af8:	b198      	cbz	r0, 8b22 <execute+0xe2>
			if (help_entry.help) {
    8afa:	b166      	cbz	r6, 8b16 <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    8afc:	68a5      	ldr	r5, [r4, #8]
    8afe:	960d      	str	r6, [sp, #52]	; 0x34
    8b00:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    8b02:	ae0c      	add	r6, sp, #48	; 0x30
    8b04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8b08:	6833      	ldr	r3, [r6, #0]
    8b0a:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    8b0c:	4620      	mov	r0, r4
    8b0e:	f7ff ff2f 	bl	8970 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    8b12:	2501      	movs	r5, #1
    8b14:	e7df      	b.n	8ad6 <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    8b16:	4a74      	ldr	r2, [pc, #464]	; (8ce8 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    8b18:	2101      	movs	r1, #1
    8b1a:	4620      	mov	r0, r4
    8b1c:	f01e fda1 	bl	27662 <z_shell_fprintf>
		return false;
    8b20:	e7d7      	b.n	8ad2 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    8b22:	9b05      	ldr	r3, [sp, #20]
    8b24:	b17b      	cbz	r3, 8b46 <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    8b26:	683a      	ldr	r2, [r7, #0]
    8b28:	4629      	mov	r1, r5
    8b2a:	4620      	mov	r0, r4
    8b2c:	f001 f968 	bl	9e00 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    8b30:	2802      	cmp	r0, #2
    8b32:	f000 808e 	beq.w	8c52 <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    8b36:	2803      	cmp	r0, #3
    8b38:	d005      	beq.n	8b46 <execute+0x106>
				++cmd_lvl;
    8b3a:	9b05      	ldr	r3, [sp, #20]
    8b3c:	3301      	adds	r3, #1
    8b3e:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    8b40:	2301      	movs	r3, #1
    8b42:	9302      	str	r3, [sp, #8]
				continue;
    8b44:	e7aa      	b.n	8a9c <execute+0x5c>
		if (has_last_handler == false) {
    8b46:	f1ba 0f00 	cmp.w	sl, #0
    8b4a:	d105      	bne.n	8b58 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    8b4c:	6839      	ldr	r1, [r7, #0]
    8b4e:	aa07      	add	r2, sp, #28
    8b50:	4658      	mov	r0, fp
    8b52:	f01e fb25 	bl	271a0 <z_shell_find_cmd>
    8b56:	4605      	mov	r5, r0
		argvp++;
    8b58:	3704      	adds	r7, #4
		args_left--;
    8b5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    8b5e:	2d00      	cmp	r5, #0
    8b60:	d040      	beq.n	8be4 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    8b62:	9a02      	ldr	r2, [sp, #8]
    8b64:	68eb      	ldr	r3, [r5, #12]
    8b66:	b142      	cbz	r2, 8b7a <execute+0x13a>
    8b68:	b313      	cbz	r3, 8bb0 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    8b6a:	4620      	mov	r0, r4
    8b6c:	f01e fccd 	bl	2750a <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    8b70:	4620      	mov	r0, r4
    8b72:	f01e fc31 	bl	273d8 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    8b76:	4a5d      	ldr	r2, [pc, #372]	; (8cec <execute+0x2ac>)
    8b78:	e7ce      	b.n	8b18 <execute+0xd8>
	if (entry->handler) {
    8b7a:	b1cb      	cbz	r3, 8bb0 <execute+0x170>
		*active_cmd = *entry;
    8b7c:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    8b7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    8b82:	46ae      	mov	lr, r5
    8b84:	f103 0c08 	add.w	ip, r3, #8
    8b88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8b8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8b90:	f8de 3000 	ldr.w	r3, [lr]
    8b94:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    8b98:	68ab      	ldr	r3, [r5, #8]
    8b9a:	b94b      	cbnz	r3, 8bb0 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    8b9c:	7c6b      	ldrb	r3, [r5, #17]
    8b9e:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    8ba0:	bf01      	itttt	eq
    8ba2:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    8ba6:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    8baa:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    8bae:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    8bb0:	f8d5 c004 	ldr.w	ip, [r5, #4]
    8bb4:	f1bc 0f00 	cmp.w	ip, #0
    8bb8:	d008      	beq.n	8bcc <execute+0x18c>
		*help_entry = *entry;
    8bba:	46ae      	mov	lr, r5
    8bbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8bc0:	ae0c      	add	r6, sp, #48	; 0x30
    8bc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8bc4:	f8de 3000 	ldr.w	r3, [lr]
    8bc8:	6033      	str	r3, [r6, #0]
    8bca:	4666      	mov	r6, ip
    8bcc:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    8bce:	f1b8 0f00 	cmp.w	r8, #0
    8bd2:	d103      	bne.n	8bdc <execute+0x19c>
    8bd4:	9b06      	ldr	r3, [sp, #24]
    8bd6:	2b02      	cmp	r3, #2
    8bd8:	f47f af60 	bne.w	8a9c <execute+0x5c>
			cmd_lvl++;
    8bdc:	9b05      	ldr	r3, [sp, #20]
    8bde:	3301      	adds	r3, #1
    8be0:	9305      	str	r3, [sp, #20]
    8be2:	e75b      	b.n	8a9c <execute+0x5c>
			if (cmd_lvl == 0 &&
    8be4:	9b05      	ldr	r3, [sp, #20]
    8be6:	b963      	cbnz	r3, 8c02 <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    8be8:	68a3      	ldr	r3, [r4, #8]
    8bea:	69db      	ldr	r3, [r3, #28]
    8bec:	b10b      	cbz	r3, 8bf2 <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    8bee:	68db      	ldr	r3, [r3, #12]
    8bf0:	b93b      	cbnz	r3, 8c02 <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    8bf2:	4b3f      	ldr	r3, [pc, #252]	; (8cf0 <execute+0x2b0>)
    8bf4:	9300      	str	r3, [sp, #0]
    8bf6:	4a3f      	ldr	r2, [pc, #252]	; (8cf4 <execute+0x2b4>)
    8bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8bfa:	2101      	movs	r1, #1
    8bfc:	4620      	mov	r0, r4
    8bfe:	f01e fd30 	bl	27662 <z_shell_fprintf>
			has_last_handler = true;
    8c02:	f04f 0a01 	mov.w	sl, #1
    8c06:	e7e2      	b.n	8bce <execute+0x18e>
		&& args_left > 0) {
    8c08:	f1b8 0f00 	cmp.w	r8, #0
    8c0c:	f47f af56 	bne.w	8abc <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    8c10:	9b02      	ldr	r3, [sp, #8]
    8c12:	b14b      	cbz	r3, 8c28 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    8c14:	4620      	mov	r0, r4
    8c16:	f01f f8c5 	bl	27da4 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    8c1a:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    8c1c:	230c      	movs	r3, #12
    8c1e:	3242      	adds	r2, #66	; 0x42
    8c20:	a911      	add	r1, sp, #68	; 0x44
    8c22:	a805      	add	r0, sp, #20
    8c24:	f01e f9d1 	bl	26fca <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    8c28:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    8c2a:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    8c2c:	ab1e      	add	r3, sp, #120	; 0x78
    8c2e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8c32:	2200      	movs	r2, #0
    8c34:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    8c38:	6943      	ldr	r3, [r0, #20]
    8c3a:	b973      	cbnz	r3, 8c5a <execute+0x21a>
			if (help_entry->help == NULL) {
    8c3c:	2e00      	cmp	r6, #0
    8c3e:	f43f af48 	beq.w	8ad2 <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    8c42:	68c3      	ldr	r3, [r0, #12]
    8c44:	42b3      	cmp	r3, r6
    8c46:	f43f af61 	beq.w	8b0c <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    8c4a:	960d      	str	r6, [sp, #52]	; 0x34
    8c4c:	f100 0508 	add.w	r5, r0, #8
    8c50:	e757      	b.n	8b02 <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    8c52:	9b05      	ldr	r3, [sp, #20]
    8c54:	2b0b      	cmp	r3, #11
    8c56:	d9db      	bls.n	8c10 <execute+0x1d0>
    8c58:	e728      	b.n	8aac <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    8c5a:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    8c5c:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    8c60:	b1b3      	cbz	r3, 8c90 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    8c62:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    8c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8c68:	29ff      	cmp	r1, #255	; 0xff
    8c6a:	bf18      	it	ne
    8c6c:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    8c6e:	429d      	cmp	r5, r3
    8c70:	d302      	bcc.n	8c78 <execute+0x238>
    8c72:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    8c74:	429d      	cmp	r5, r3
    8c76:	d90b      	bls.n	8c90 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    8c78:	6883      	ldr	r3, [r0, #8]
    8c7a:	4a1f      	ldr	r2, [pc, #124]	; (8cf8 <execute+0x2b8>)
    8c7c:	2101      	movs	r1, #1
    8c7e:	4620      	mov	r0, r4
    8c80:	f01e fcef 	bl	27662 <z_shell_fprintf>
			shell_internal_help_print(shell);
    8c84:	4620      	mov	r0, r4
    8c86:	f7ff fe73 	bl	8970 <shell_internal_help_print>
		return -EINVAL;
    8c8a:	f06f 0515 	mvn.w	r5, #21
    8c8e:	e722      	b.n	8ad6 <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    8c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8c94:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8c98:	f01e f810 	bl	26cbc <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    8c9c:	68a0      	ldr	r0, [r4, #8]
    8c9e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    8ca2:	f01e f89f 	bl	26de4 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    8ca6:	68a3      	ldr	r3, [r4, #8]
    8ca8:	aa11      	add	r2, sp, #68	; 0x44
    8caa:	4629      	mov	r1, r5
    8cac:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    8cb0:	695b      	ldr	r3, [r3, #20]
    8cb2:	4620      	mov	r0, r4
    8cb4:	4798      	blx	r3
    8cb6:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8cb8:	68a0      	ldr	r0, [r4, #8]
    8cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8cc2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    8cc6:	f01e f840 	bl	26d4a <k_mutex_lock.constprop.0.isra.0>
    8cca:	68a0      	ldr	r0, [r4, #8]
    8ccc:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    8cd0:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8cd4:	f01e f801 	bl	26cda <atomic_and>
	return ret;
    8cd8:	e6fd      	b.n	8ad6 <execute+0x96>
    8cda:	bf00      	nop
    8cdc:	0002ed46 	.word	0x0002ed46
    8ce0:	0002ea5f 	.word	0x0002ea5f
    8ce4:	0002ecd1 	.word	0x0002ecd1
    8ce8:	0002ece5 	.word	0x0002ece5
    8cec:	0002ed03 	.word	0x0002ed03
    8cf0:	0002ed32 	.word	0x0002ed32
    8cf4:	0002effb 	.word	0x0002effb
    8cf8:	0002ed6a 	.word	0x0002ed6a

00008cfc <state_set.constprop.0>:
	shell->ctx->state = state;
    8cfc:	6883      	ldr	r3, [r0, #8]
    8cfe:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    8d00:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    8d02:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    8d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    8d06:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    8d08:	b9ba      	cbnz	r2, 8d3a <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    8d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    8d0e:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    8d10:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    8d14:	04db      	lsls	r3, r3, #19
    8d16:	d50b      	bpl.n	8d30 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    8d18:	2103      	movs	r1, #3
    8d1a:	4b08      	ldr	r3, [pc, #32]	; (8d3c <state_set.constprop.0+0x40>)
    8d1c:	4a08      	ldr	r2, [pc, #32]	; (8d40 <state_set.constprop.0+0x44>)
    8d1e:	f01e fca0 	bl	27662 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    8d22:	68a0      	ldr	r0, [r4, #8]
    8d24:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8d28:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8d2c:	f01d ffd5 	bl	26cda <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    8d30:	4620      	mov	r0, r4
}
    8d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    8d36:	f000 be65 	b.w	9a04 <z_shell_print_prompt_and_cmd>
}
    8d3a:	bd10      	pop	{r4, pc}
    8d3c:	0002ed85 	.word	0x0002ed85
    8d40:	0002ea53 	.word	0x0002ea53

00008d44 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    8d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d48:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    8d4a:	6880      	ldr	r0, [r0, #8]
    8d4c:	b0ab      	sub	sp, #172	; 0xac
    8d4e:	2101      	movs	r1, #1
    8d50:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8d54:	f01d ffb2 	bl	26cbc <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    8d58:	68a3      	ldr	r3, [r4, #8]
    8d5a:	791b      	ldrb	r3, [r3, #4]
    8d5c:	2b02      	cmp	r3, #2
    8d5e:	d117      	bne.n	8d90 <shell_process+0x4c>
	size_t count = 0;
    8d60:	2300      	movs	r3, #0
    8d62:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    8d64:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    8d66:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    8d68:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    8d6a:	6803      	ldr	r3, [r0, #0]
    8d6c:	691d      	ldr	r5, [r3, #16]
    8d6e:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    8d70:	b1c6      	cbz	r6, 8da4 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    8d72:	2210      	movs	r2, #16
    8d74:	a91d      	add	r1, sp, #116	; 0x74
    8d76:	47a8      	blx	r5
			if (count) {
    8d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8d7a:	b14a      	cbz	r2, 8d90 <shell_process+0x4c>
				bypass(shell, buf, count);
    8d7c:	a91d      	add	r1, sp, #116	; 0x74
    8d7e:	4620      	mov	r0, r4
    8d80:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    8d82:	68a3      	ldr	r3, [r4, #8]
    8d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8d86:	2b00      	cmp	r3, #0
    8d88:	d1ec      	bne.n	8d64 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    8d8a:	4620      	mov	r0, r4
    8d8c:	f7ff ffb6 	bl	8cfc <state_set.constprop.0>
    8d90:	68a0      	ldr	r0, [r4, #8]
    8d92:	f06f 0101 	mvn.w	r1, #1
    8d96:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    8d9a:	b02b      	add	sp, #172	; 0xac
    8d9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8da0:	f01d bf9b 	b.w	26cda <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    8da4:	2201      	movs	r2, #1
    8da6:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    8daa:	47a8      	blx	r5
		if (count == 0) {
    8dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dae:	2b00      	cmp	r3, #0
    8db0:	d0ee      	beq.n	8d90 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    8db2:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    8db6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    8dba:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    8dbc:	2a00      	cmp	r2, #0
    8dbe:	dbd1      	blt.n	8d64 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    8dc0:	7942      	ldrb	r2, [r0, #5]
    8dc2:	2a03      	cmp	r2, #3
    8dc4:	f200 82fd 	bhi.w	93c2 <shell_process+0x67e>
    8dc8:	e8df f012 	tbh	[pc, r2, lsl #1]
    8dcc:	02750004 	.word	0x02750004
    8dd0:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    8dd4:	2b0d      	cmp	r3, #13
    8dd6:	d01a      	beq.n	8e0e <shell_process+0xca>
    8dd8:	2b0a      	cmp	r3, #10
    8dda:	d018      	beq.n	8e0e <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    8ddc:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    8de0:	f36f 02ca 	bfc	r2, #3, #8
    8de4:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    8de8:	2b09      	cmp	r3, #9
    8dea:	d04c      	beq.n	8e86 <shell_process+0x142>
    8dec:	d832      	bhi.n	8e54 <shell_process+0x110>
    8dee:	2b00      	cmp	r3, #0
    8df0:	d0b8      	beq.n	8d64 <shell_process+0x20>
    8df2:	2b08      	cmp	r3, #8
    8df4:	f000 81c4 	beq.w	9180 <shell_process+0x43c>
    8df8:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    8dfc:	2a5e      	cmp	r2, #94	; 0x5e
    8dfe:	f200 81cb 	bhi.w	9198 <shell_process+0x454>
					z_flag_history_exit_set(shell, true);
    8e02:	2101      	movs	r1, #1
    8e04:	f01d ffd5 	bl	26db2 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    8e08:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    8e0c:	e0e8      	b.n	8fe0 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    8e0e:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    8e12:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    8e16:	b12a      	cbz	r2, 8e24 <shell_process+0xe0>
    8e18:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    8e1c:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    8e20:	4293      	cmp	r3, r2
    8e22:	d1e1      	bne.n	8de8 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    8e24:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    8e28:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    8e2a:	f363 02ca 	bfi	r2, r3, #3, #8
    8e2e:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    8e32:	b959      	cbnz	r1, 8e4c <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    8e34:	f01d ffbd 	bl	26db2 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    8e38:	68e0      	ldr	r0, [r4, #12]
    8e3a:	f01e fed2 	bl	27be2 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    8e3e:	6960      	ldr	r0, [r4, #20]
    8e40:	f7ff fda6 	bl	8990 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    8e44:	4620      	mov	r0, r4
    8e46:	f7ff ff59 	bl	8cfc <state_set.constprop.0>
		break;
    8e4a:	e78b      	b.n	8d64 <shell_process+0x20>
					(void)execute(shell);
    8e4c:	4620      	mov	r0, r4
    8e4e:	f7ff fdf7 	bl	8a40 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    8e52:	e7f7      	b.n	8e44 <shell_process+0x100>
    8e54:	2b1b      	cmp	r3, #27
    8e56:	d013      	beq.n	8e80 <shell_process+0x13c>
    8e58:	2b7f      	cmp	r3, #127	; 0x7f
    8e5a:	d1cd      	bne.n	8df8 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    8e5c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    8e60:	079a      	lsls	r2, r3, #30
    8e62:	f57f af7f 	bpl.w	8d64 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    8e66:	2101      	movs	r1, #1
    8e68:	f01d ffa3 	bl	26db2 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    8e6c:	68a3      	ldr	r3, [r4, #8]
    8e6e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    8e72:	071b      	lsls	r3, r3, #28
    8e74:	f100 818c 	bmi.w	9190 <shell_process+0x44c>
		z_shell_op_char_delete(shell);
    8e78:	4620      	mov	r0, r4
    8e7a:	f01e fc32 	bl	276e2 <z_shell_op_char_delete>
		break;
    8e7e:	e771      	b.n	8d64 <shell_process+0x20>
	shell->ctx->receive_state = state;
    8e80:	2301      	movs	r3, #1
    8e82:	7143      	strb	r3, [r0, #5]
}
    8e84:	e76e      	b.n	8d64 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    8e86:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    8e8a:	079e      	lsls	r6, r3, #30
    8e8c:	f57f af6a 	bpl.w	8d64 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    8e90:	2101      	movs	r1, #1
    8e92:	f01d ff8e 	bl	26db2 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    8e96:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    8e98:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    8e9a:	2bff      	cmp	r3, #255	; 0xff
    8e9c:	f43f af62 	beq.w	8d64 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    8ea0:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    8ea2:	f100 0142 	add.w	r1, r0, #66	; 0x42
    8ea6:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    8eaa:	f01f fc81 	bl	287b0 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    8eae:	68a2      	ldr	r2, [r4, #8]
    8eb0:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    8eb2:	4413      	add	r3, r2
    8eb4:	2500      	movs	r5, #0
    8eb6:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    8eba:	a91d      	add	r1, sp, #116	; 0x74
    8ebc:	230c      	movs	r3, #12
    8ebe:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    8ec2:	a80d      	add	r0, sp, #52	; 0x34
    8ec4:	f01e f881 	bl	26fca <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    8ec8:	990d      	ldr	r1, [sp, #52]	; 0x34
    8eca:	290c      	cmp	r1, #12
    8ecc:	f63f af4a 	bhi.w	8d64 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    8ed0:	ab2a      	add	r3, sp, #168	; 0xa8
    8ed2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8ed6:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    8eda:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    8edc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    8ede:	4413      	add	r3, r2
    8ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    8ee4:	2b20      	cmp	r3, #32
    8ee6:	f000 826e 	beq.w	93c6 <shell_process+0x682>
    8eea:	3b09      	subs	r3, #9
    8eec:	2b04      	cmp	r3, #4
    8eee:	f240 826a 	bls.w	93c6 <shell_process+0x682>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    8ef2:	2901      	cmp	r1, #1
    8ef4:	d84f      	bhi.n	8f96 <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    8ef6:	2500      	movs	r5, #0
    8ef8:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    8efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8efc:	aa2a      	add	r2, sp, #168	; 0xa8
    8efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    8f02:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    8f04:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    8f08:	4650      	mov	r0, sl
    8f0a:	f01d ff0b 	bl	26d24 <z_shell_strlen>
	size_t first = 0;
    8f0e:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    8f10:	4681      	mov	r9, r0
	*longest = 0U;
    8f12:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    8f14:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    8f16:	aa18      	add	r2, sp, #96	; 0x60
    8f18:	4639      	mov	r1, r7
    8f1a:	4628      	mov	r0, r5
    8f1c:	f000 fbfc 	bl	9718 <z_shell_cmd_get>
    8f20:	4683      	mov	fp, r0
    8f22:	2800      	cmp	r0, #0
    8f24:	d144      	bne.n	8fb0 <shell_process+0x26c>
	if (cnt == 1) {
    8f26:	2e01      	cmp	r6, #1
    8f28:	d163      	bne.n	8ff2 <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    8f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8f2c:	aa2a      	add	r2, sp, #168	; 0xa8
    8f2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    8f32:	f853 0c34 	ldr.w	r0, [r3, #-52]
    8f36:	f01d fef5 	bl	26d24 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    8f3a:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    8f3c:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    8f3e:	3208      	adds	r2, #8
    8f40:	4641      	mov	r1, r8
    8f42:	4628      	mov	r0, r5
    8f44:	f000 fbe8 	bl	9718 <z_shell_cmd_get>
    8f48:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    8f4a:	6800      	ldr	r0, [r0, #0]
    8f4c:	f01d feea 	bl	26d24 <z_shell_strlen>
	if (cmd_len != arg_len) {
    8f50:	4286      	cmp	r6, r0
    8f52:	d006      	beq.n	8f62 <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    8f54:	6829      	ldr	r1, [r5, #0]
    8f56:	1b82      	subs	r2, r0, r6
    8f58:	b292      	uxth	r2, r2
    8f5a:	4431      	add	r1, r6
    8f5c:	4620      	mov	r0, r4
    8f5e:	f01e fbbe 	bl	276de <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    8f62:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    8f64:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    8f66:	4403      	add	r3, r0
    8f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    8f6c:	2b20      	cmp	r3, #32
    8f6e:	d03b      	beq.n	8fe8 <shell_process+0x2a4>
    8f70:	3b09      	subs	r3, #9
    8f72:	2b04      	cmp	r3, #4
    8f74:	d938      	bls.n	8fe8 <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    8f76:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    8f7a:	07dd      	lsls	r5, r3, #31
    8f7c:	d52f      	bpl.n	8fde <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    8f7e:	2100      	movs	r1, #0
    8f80:	f01d ff21 	bl	26dc6 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    8f84:	2120      	movs	r1, #32
    8f86:	4620      	mov	r0, r4
    8f88:	f000 fd08 	bl	999c <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    8f8c:	68a0      	ldr	r0, [r4, #8]
    8f8e:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    8f90:	f01d ff19 	bl	26dc6 <z_flag_insert_mode_set.isra.0>
				break;
    8f94:	e6e6      	b.n	8d64 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    8f96:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    8f98:	2000      	movs	r0, #0
    8f9a:	ab0e      	add	r3, sp, #56	; 0x38
    8f9c:	9300      	str	r3, [sp, #0]
    8f9e:	9001      	str	r0, [sp, #4]
    8fa0:	ab0c      	add	r3, sp, #48	; 0x30
    8fa2:	aa1d      	add	r2, sp, #116	; 0x74
    8fa4:	f01e f91c 	bl	271e0 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    8fa8:	4605      	mov	r5, r0
    8faa:	2800      	cmp	r0, #0
    8fac:	d1a5      	bne.n	8efa <shell_process+0x1b6>
    8fae:	e6d9      	b.n	8d64 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    8fb0:	f8db 0000 	ldr.w	r0, [fp]
    8fb4:	464a      	mov	r2, r9
    8fb6:	4651      	mov	r1, sl
    8fb8:	f01f fbc0 	bl	2873c <strncmp>
		if (is_candidate) {
    8fbc:	b968      	cbnz	r0, 8fda <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    8fbe:	f8db 0000 	ldr.w	r0, [fp]
    8fc2:	f01f fb9f 	bl	28704 <strlen>
    8fc6:	9b04      	ldr	r3, [sp, #16]
    8fc8:	4283      	cmp	r3, r0
    8fca:	bf38      	it	cc
    8fcc:	4603      	movcc	r3, r0
    8fce:	b29b      	uxth	r3, r3
				*first_idx = idx;
    8fd0:	2e00      	cmp	r6, #0
    8fd2:	bf08      	it	eq
    8fd4:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    8fd6:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    8fd8:	3601      	adds	r6, #1
		idx++;
    8fda:	3701      	adds	r7, #1
    8fdc:	e79b      	b.n	8f16 <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    8fde:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    8fe0:	4620      	mov	r0, r4
    8fe2:	f000 fcdb 	bl	999c <z_shell_op_char_insert>
    8fe6:	e6bd      	b.n	8d64 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    8fe8:	2101      	movs	r1, #1
    8fea:	4620      	mov	r0, r4
    8fec:	f01e fa27 	bl	2743e <z_shell_op_cursor_move>
    8ff0:	e6b8      	b.n	8d64 <shell_process+0x20>
	} else if (cnt > 1) {
    8ff2:	f67f aeb7 	bls.w	8d64 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    8ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8ff8:	aa2a      	add	r2, sp, #168	; 0xa8
    8ffa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8ffe:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    9002:	4650      	mov	r0, sl
    9004:	f01d fe8e 	bl	26d24 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    9008:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    900a:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    900c:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    9010:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 92e4 <shell_process+0x5a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    9014:	9605      	str	r6, [sp, #20]
    9016:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    901a:	68a2      	ldr	r2, [r4, #8]
    901c:	9903      	ldr	r1, [sp, #12]
    901e:	3208      	adds	r2, #8
    9020:	4628      	mov	r0, r5
    9022:	f000 fb79 	bl	9718 <z_shell_cmd_get>
		idx++;
    9026:	9b03      	ldr	r3, [sp, #12]
    9028:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    902a:	4607      	mov	r7, r0
		idx++;
    902c:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    902e:	f1ba 0f00 	cmp.w	sl, #0
    9032:	d152      	bne.n	90da <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    9034:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    9036:	2f00      	cmp	r7, #0
    9038:	d159      	bne.n	90ee <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    903a:	68a2      	ldr	r2, [r4, #8]
    903c:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    903e:	9b05      	ldr	r3, [sp, #20]
    9040:	3b01      	subs	r3, #1
    9042:	9305      	str	r3, [sp, #20]
    9044:	d1e9      	bne.n	901a <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    9046:	6960      	ldr	r0, [r4, #20]
    9048:	f7ff fca2 	bl	8990 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    904c:	4620      	mov	r0, r4
    904e:	f000 fcd9 	bl	9a04 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    9052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9054:	aa2a      	add	r2, sp, #168	; 0xa8
    9056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    905a:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    905e:	f853 0c34 	ldr.w	r0, [r3, #-52]
    9062:	f01d fe5f 	bl	26d24 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    9066:	4641      	mov	r1, r8
    9068:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    906a:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    906c:	4628      	mov	r0, r5
    906e:	f000 fb53 	bl	9718 <z_shell_cmd_get>
    9072:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    9074:	68a0      	ldr	r0, [r4, #8]
    9076:	f8d8 1000 	ldr.w	r1, [r8]
    907a:	22ff      	movs	r2, #255	; 0xff
    907c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9080:	f01f fb20 	bl	286c4 <strncpy>
	*str = match->syntax;
    9084:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    9088:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    908c:	aa18      	add	r2, sp, #96	; 0x60
    908e:	4649      	mov	r1, r9
    9090:	4628      	mov	r0, r5
    9092:	f109 0b01 	add.w	fp, r9, #1
    9096:	f000 fb3f 	bl	9718 <z_shell_cmd_get>
		if (match2 == NULL) {
    909a:	2800      	cmp	r0, #0
    909c:	d063      	beq.n	9166 <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    909e:	68a3      	ldr	r3, [r4, #8]
    90a0:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    90a2:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    90a6:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    90a8:	f813 cb01 	ldrb.w	ip, [r3], #1
    90ac:	5c81      	ldrb	r1, [r0, r2]
    90ae:	4561      	cmp	r1, ip
    90b0:	d105      	bne.n	90be <shell_process+0x37a>
    90b2:	b121      	cbz	r1, 90be <shell_process+0x37a>
		common++;
    90b4:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    90b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    90ba:	428a      	cmp	r2, r1
    90bc:	d1f4      	bne.n	90a8 <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    90be:	b10f      	cbz	r7, 90c4 <shell_process+0x380>
    90c0:	42ba      	cmp	r2, r7
    90c2:	db08      	blt.n	90d6 <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    90c4:	4542      	cmp	r2, r8
			--cnt;
    90c6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    90ca:	bfa8      	it	ge
    90cc:	4642      	movge	r2, r8
	while (cnt > 1) {
    90ce:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    90d0:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    90d4:	d047      	beq.n	9166 <shell_process+0x422>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    90d6:	46d9      	mov	r9, fp
    90d8:	e7d8      	b.n	908c <shell_process+0x348>
		if (str && match->syntax &&
    90da:	6800      	ldr	r0, [r0, #0]
    90dc:	2800      	cmp	r0, #0
    90de:	d0a9      	beq.n	9034 <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    90e0:	9a06      	ldr	r2, [sp, #24]
    90e2:	4651      	mov	r1, sl
    90e4:	f01f fb2a 	bl	2873c <strncmp>
		if (str && match->syntax &&
    90e8:	2800      	cmp	r0, #0
    90ea:	d0a3      	beq.n	9034 <shell_process+0x2f0>
    90ec:	e795      	b.n	901a <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    90ee:	4658      	mov	r0, fp
    90f0:	f01d fe18 	bl	26d24 <z_shell_strlen>
    90f4:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    90f6:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    90f8:	18c2      	adds	r2, r0, r3
    90fa:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    90fc:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    90fe:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    9100:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    9102:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    9104:	f01d fe0e 	bl	26d24 <z_shell_strlen>
    9108:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    910a:	4638      	mov	r0, r7
    910c:	f01d fe0a 	bl	26d24 <z_shell_strlen>
    9110:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    9112:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    9116:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    911a:	68a0      	ldr	r0, [r4, #8]
    911c:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    9120:	1a59      	subs	r1, r3, r1
    9122:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    9126:	b292      	uxth	r2, r2
    9128:	fbbc f1f2 	udiv	r1, ip, r2
    912c:	fb02 c211 	mls	r2, r2, r1, ip
    9130:	f10c 0e01 	add.w	lr, ip, #1
    9134:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    9136:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    913a:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    913e:	b95a      	cbnz	r2, 9158 <shell_process+0x414>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    9140:	4a69      	ldr	r2, [pc, #420]	; (92e8 <shell_process+0x5a4>)
    9142:	9700      	str	r7, [sp, #0]
    9144:	465b      	mov	r3, fp
    9146:	2106      	movs	r1, #6
    9148:	4620      	mov	r0, r4
    914a:	f01e fa8a 	bl	27662 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    914e:	4649      	mov	r1, r9
    9150:	4620      	mov	r0, r4
    9152:	f000 fb2f 	bl	97b4 <z_shell_op_cursor_horiz_move>
    9156:	e772      	b.n	903e <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    9158:	4a64      	ldr	r2, [pc, #400]	; (92ec <shell_process+0x5a8>)
    915a:	463b      	mov	r3, r7
    915c:	2106      	movs	r1, #6
    915e:	4620      	mov	r0, r4
    9160:	f01e fa7f 	bl	27662 <z_shell_fprintf>
    9164:	e7f3      	b.n	914e <shell_process+0x40a>
	if (common) {
    9166:	f1b8 0f00 	cmp.w	r8, #0
    916a:	f43f adfb 	beq.w	8d64 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    916e:	eba8 0207 	sub.w	r2, r8, r7
    9172:	b292      	uxth	r2, r2
    9174:	eb0a 0107 	add.w	r1, sl, r7
    9178:	4620      	mov	r0, r4
    917a:	f01e fab0 	bl	276de <z_shell_op_completion_insert>
    917e:	e5f1      	b.n	8d64 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    9180:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    9184:	0799      	lsls	r1, r3, #30
    9186:	f57f aded 	bpl.w	8d64 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    918a:	2101      	movs	r1, #1
    918c:	f01d fe11 	bl	26db2 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    9190:	4620      	mov	r0, r4
    9192:	f01e fac1 	bl	27718 <z_shell_op_char_backspace>
    9196:	e5e5      	b.n	8d64 <shell_process+0x20>
    9198:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    919c:	0797      	lsls	r7, r2, #30
    919e:	f57f ade1 	bpl.w	8d64 <shell_process+0x20>
	switch (data) {
    91a2:	3b01      	subs	r3, #1
    91a4:	2b16      	cmp	r3, #22
    91a6:	f63f addd 	bhi.w	8d64 <shell_process+0x20>
    91aa:	a201      	add	r2, pc, #4	; (adr r2, 91b0 <shell_process+0x46c>)
    91ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    91b0:	00009399 	.word	0x00009399
    91b4:	0000920d 	.word	0x0000920d
    91b8:	00009215 	.word	0x00009215
    91bc:	00008e79 	.word	0x00008e79
    91c0:	0000938d 	.word	0x0000938d
    91c4:	00009233 	.word	0x00009233
    91c8:	00008d65 	.word	0x00008d65
    91cc:	00008d65 	.word	0x00008d65
    91d0:	00008d65 	.word	0x00008d65
    91d4:	00008d65 	.word	0x00008d65
    91d8:	0000923b 	.word	0x0000923b
    91dc:	00009243 	.word	0x00009243
    91e0:	00008d65 	.word	0x00008d65
    91e4:	0000926d 	.word	0x0000926d
    91e8:	00008d65 	.word	0x00008d65
    91ec:	00009277 	.word	0x00009277
    91f0:	00008d65 	.word	0x00008d65
    91f4:	00008d65 	.word	0x00008d65
    91f8:	00008d65 	.word	0x00008d65
    91fc:	00008d65 	.word	0x00008d65
    9200:	0000927b 	.word	0x0000927b
    9204:	00008d65 	.word	0x00008d65
    9208:	000092a7 	.word	0x000092a7
		z_shell_op_left_arrow(shell);
    920c:	4620      	mov	r0, r4
    920e:	f01e f983 	bl	27518 <z_shell_op_left_arrow>
		break;
    9212:	e5a7      	b.n	8d64 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    9214:	4620      	mov	r0, r4
    9216:	f01e f978 	bl	2750a <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    921a:	4620      	mov	r0, r4
    921c:	f01e f8c8 	bl	273b0 <z_shell_cursor_in_empty_line>
    9220:	b910      	cbnz	r0, 9228 <shell_process+0x4e4>
			z_cursor_next_line_move(shell);
    9222:	6960      	ldr	r0, [r4, #20]
    9224:	f7ff fbb4 	bl	8990 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    9228:	68a0      	ldr	r0, [r4, #8]
    922a:	2101      	movs	r1, #1
    922c:	f01d fdc1 	bl	26db2 <z_flag_history_exit_set.isra.0>
    9230:	e608      	b.n	8e44 <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    9232:	4620      	mov	r0, r4
    9234:	f01e f978 	bl	27528 <z_shell_op_right_arrow>
		break;
    9238:	e594      	b.n	8d64 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    923a:	4620      	mov	r0, r4
    923c:	f01e f97d 	bl	2753a <z_shell_op_delete_from_cursor>
		break;
    9240:	e590      	b.n	8d64 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9242:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    9246:	069e      	lsls	r6, r3, #26
    9248:	d503      	bpl.n	9252 <shell_process+0x50e>
    924a:	4929      	ldr	r1, [pc, #164]	; (92f0 <shell_process+0x5ac>)
    924c:	6960      	ldr	r0, [r4, #20]
    924e:	f01d fd6f 	bl	26d30 <z_shell_raw_fprintf>
    9252:	68a3      	ldr	r3, [r4, #8]
    9254:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    9258:	069d      	lsls	r5, r3, #26
    925a:	d503      	bpl.n	9264 <shell_process+0x520>
    925c:	4925      	ldr	r1, [pc, #148]	; (92f4 <shell_process+0x5b0>)
    925e:	6960      	ldr	r0, [r4, #20]
    9260:	f01d fd66 	bl	26d30 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    9264:	4620      	mov	r0, r4
    9266:	f000 fbcd 	bl	9a04 <z_shell_print_prompt_and_cmd>
		break;
    926a:	e57b      	b.n	8d64 <shell_process+0x20>
		history_handle(shell, false);
    926c:	2100      	movs	r1, #0
		history_handle(shell, true);
    926e:	4620      	mov	r0, r4
    9270:	f7ff fb94 	bl	899c <history_handle>
		break;
    9274:	e576      	b.n	8d64 <shell_process+0x20>
		history_handle(shell, true);
    9276:	2101      	movs	r1, #1
    9278:	e7f9      	b.n	926e <shell_process+0x52a>
		z_shell_op_cursor_home_move(shell);
    927a:	4620      	mov	r0, r4
    927c:	f01e f93f 	bl	274fe <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    9280:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    9282:	2300      	movs	r3, #0
    9284:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    9288:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    928a:	2101      	movs	r1, #1
    928c:	f01d fd91 	bl	26db2 <z_flag_history_exit_set.isra.0>
    9290:	68a3      	ldr	r3, [r4, #8]
    9292:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    9296:	0698      	lsls	r0, r3, #26
    9298:	f57f ad64 	bpl.w	8d64 <shell_process+0x20>
    929c:	4916      	ldr	r1, [pc, #88]	; (92f8 <shell_process+0x5b4>)
    929e:	6960      	ldr	r0, [r4, #20]
    92a0:	f01d fd46 	bl	26d30 <z_shell_raw_fprintf>
    92a4:	e55e      	b.n	8d64 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    92a6:	4620      	mov	r0, r4
    92a8:	f000 fae0 	bl	986c <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    92ac:	68a0      	ldr	r0, [r4, #8]
    92ae:	2101      	movs	r1, #1
    92b0:	f01d fd7f 	bl	26db2 <z_flag_history_exit_set.isra.0>
		break;
    92b4:	e556      	b.n	8d64 <shell_process+0x20>
			if (data == '[') {
    92b6:	2b5b      	cmp	r3, #91	; 0x5b
    92b8:	d101      	bne.n	92be <shell_process+0x57a>
	shell->ctx->receive_state = state;
    92ba:	2302      	movs	r3, #2
    92bc:	e5e1      	b.n	8e82 <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    92be:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    92c2:	0791      	lsls	r1, r2, #30
    92c4:	d506      	bpl.n	92d4 <shell_process+0x590>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    92c6:	2b62      	cmp	r3, #98	; 0x62
    92c8:	d108      	bne.n	92dc <shell_process+0x598>
		z_shell_op_cursor_word_move(shell, -1);
    92ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    92ce:	4620      	mov	r0, r4
    92d0:	f01e f8d9 	bl	27486 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    92d4:	68a3      	ldr	r3, [r4, #8]
    92d6:	2200      	movs	r2, #0
    92d8:	715a      	strb	r2, [r3, #5]
}
    92da:	e543      	b.n	8d64 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    92dc:	2b66      	cmp	r3, #102	; 0x66
    92de:	d1f9      	bne.n	92d4 <shell_process+0x590>
		z_shell_op_cursor_word_move(shell, 1);
    92e0:	2101      	movs	r1, #1
    92e2:	e7f4      	b.n	92ce <shell_process+0x58a>
    92e4:	0002e3f2 	.word	0x0002e3f2
    92e8:	0002edc9 	.word	0x0002edc9
    92ec:	0002ea53 	.word	0x0002ea53
    92f0:	0002bb92 	.word	0x0002bb92
    92f4:	0002bb97 	.word	0x0002bb97
    92f8:	0002bb8d 	.word	0x0002bb8d
	shell->ctx->receive_state = state;
    92fc:	2200      	movs	r2, #0
    92fe:	7142      	strb	r2, [r0, #5]
    9300:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    9304:	0792      	lsls	r2, r2, #30
    9306:	f57f ad2d 	bpl.w	8d64 <shell_process+0x20>
			switch (data) {
    930a:	3b31      	subs	r3, #49	; 0x31
    930c:	2b1b      	cmp	r3, #27
    930e:	f63f ad29 	bhi.w	8d64 <shell_process+0x20>
    9312:	a201      	add	r2, pc, #4	; (adr r2, 9318 <shell_process+0x5d4>)
    9314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9318:	00009395 	.word	0x00009395
    931c:	000093a1 	.word	0x000093a1
    9320:	000093b3 	.word	0x000093b3
    9324:	00009389 	.word	0x00009389
    9328:	00008d65 	.word	0x00008d65
    932c:	00008d65 	.word	0x00008d65
    9330:	00008d65 	.word	0x00008d65
    9334:	00008d65 	.word	0x00008d65
    9338:	00008d65 	.word	0x00008d65
    933c:	00008d65 	.word	0x00008d65
    9340:	00008d65 	.word	0x00008d65
    9344:	00008d65 	.word	0x00008d65
    9348:	00008d65 	.word	0x00008d65
    934c:	00008d65 	.word	0x00008d65
    9350:	00008d65 	.word	0x00008d65
    9354:	00008d65 	.word	0x00008d65
    9358:	00009277 	.word	0x00009277
    935c:	0000926d 	.word	0x0000926d
    9360:	00009233 	.word	0x00009233
    9364:	0000920d 	.word	0x0000920d
    9368:	00008d65 	.word	0x00008d65
    936c:	0000938d 	.word	0x0000938d
    9370:	00008d65 	.word	0x00008d65
    9374:	00009399 	.word	0x00009399
    9378:	00008d65 	.word	0x00008d65
    937c:	00008d65 	.word	0x00008d65
    9380:	00008d65 	.word	0x00008d65
    9384:	000093a5 	.word	0x000093a5
	shell->ctx->receive_state = state;
    9388:	2303      	movs	r3, #3
    938a:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    938c:	4620      	mov	r0, r4
    938e:	f01e f8bc 	bl	2750a <z_shell_op_cursor_end_move>
		break;
    9392:	e4e7      	b.n	8d64 <shell_process+0x20>
	shell->ctx->receive_state = state;
    9394:	2303      	movs	r3, #3
    9396:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    9398:	4620      	mov	r0, r4
    939a:	f01e f8b0 	bl	274fe <z_shell_op_cursor_home_move>
		break;
    939e:	e4e1      	b.n	8d64 <shell_process+0x20>
	shell->ctx->receive_state = state;
    93a0:	2303      	movs	r3, #3
    93a2:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    93a4:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    93a8:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    93ac:	f081 0101 	eor.w	r1, r1, #1
    93b0:	e5ee      	b.n	8f90 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    93b2:	2303      	movs	r3, #3
    93b4:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    93b6:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    93ba:	079b      	lsls	r3, r3, #30
    93bc:	f57f acd2 	bpl.w	8d64 <shell_process+0x20>
    93c0:	e55a      	b.n	8e78 <shell_process+0x134>
	shell->ctx->receive_state = state;
    93c2:	2300      	movs	r3, #0
    93c4:	e55d      	b.n	8e82 <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    93c6:	2900      	cmp	r1, #0
    93c8:	f43f ad95 	beq.w	8ef6 <shell_process+0x1b2>
    93cc:	e5e4      	b.n	8f98 <shell_process+0x254>
    93ce:	bf00      	nop

000093d0 <shell_init>:
{
    93d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    93d4:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    93d6:	6880      	ldr	r0, [r0, #8]
{
    93d8:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    93da:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    93de:	b089      	sub	sp, #36	; 0x24
    93e0:	4615      	mov	r5, r2
    93e2:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    93e4:	2900      	cmp	r1, #0
    93e6:	d161      	bne.n	94ac <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    93e8:	f44f 7244 	mov.w	r2, #784	; 0x310
    93ec:	f01f f9eb 	bl	287c6 <memset>
	sh->ctx->prompt = sh->default_prompt;
    93f0:	68a3      	ldr	r3, [r4, #8]
    93f2:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    93f4:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    93f6:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    93f8:	f01e fc99 	bl	27d2e <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    93fc:	68a0      	ldr	r0, [r4, #8]
    93fe:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    9402:	f021 fbc0 	bl	2ab86 <z_impl_k_mutex_init>
    9406:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    940a:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    940e:	68a0      	ldr	r0, [r4, #8]
    9410:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    9412:	f022 f87b 	bl	2b50c <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    9416:	68a0      	ldr	r0, [r4, #8]
    9418:	2200      	movs	r2, #0
    941a:	1983      	adds	r3, r0, r6
    941c:	2101      	movs	r1, #1
    941e:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    9420:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    9422:	f022 f856 	bl	2b4d2 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    9426:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    942a:	f109 0914 	add.w	r9, r9, #20
    942e:	d1ee      	bne.n	940e <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    9430:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    9432:	68a0      	ldr	r0, [r4, #8]
    9434:	2600      	movs	r6, #0
    9436:	2102      	movs	r1, #2
    9438:	601e      	str	r6, [r3, #0]
    943a:	f500 7019 	add.w	r0, r0, #612	; 0x264
    943e:	f01d fc3d 	bl	26cbc <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    9442:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    9444:	4a1b      	ldr	r2, [pc, #108]	; (94b4 <shell_init+0xe4>)
    9446:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    9448:	6818      	ldr	r0, [r3, #0]
    944a:	f01d fc6b 	bl	26d24 <z_shell_strlen>
    944e:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    9450:	4a19      	ldr	r2, [pc, #100]	; (94b8 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    9452:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    9456:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    9458:	f366 0582 	bfi	r5, r6, #2, #1
    945c:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    9460:	6803      	ldr	r3, [r0, #0]
    9462:	4641      	mov	r1, r8
    9464:	681d      	ldr	r5, [r3, #0]
    9466:	4623      	mov	r3, r4
    9468:	47a8      	blx	r5
	if (ret == 0) {
    946a:	4605      	mov	r5, r0
    946c:	b9d0      	cbnz	r0, 94a4 <shell_init+0xd4>
	shell->ctx->state = state;
    946e:	68a3      	ldr	r3, [r4, #8]
    9470:	2201      	movs	r2, #1
    9472:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    9474:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9478:	2200      	movs	r2, #0
    947a:	2300      	movs	r3, #0
    947c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9480:	230e      	movs	r3, #14
    9482:	9303      	str	r3, [sp, #12]
    9484:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9486:	9504      	str	r5, [sp, #16]
    9488:	e9cd 7301 	strd	r7, r3, [sp, #4]
    948c:	9400      	str	r4, [sp, #0]
    948e:	4b0b      	ldr	r3, [pc, #44]	; (94bc <shell_init+0xec>)
    9490:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9494:	f01b f8e6 	bl	24664 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    9498:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    949a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    949c:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    94a0:	f01b f82e 	bl	24500 <z_impl_k_thread_name_set>
}
    94a4:	4628      	mov	r0, r5
    94a6:	b009      	add	sp, #36	; 0x24
    94a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    94ac:	f06f 0577 	mvn.w	r5, #119	; 0x77
    94b0:	e7f8      	b.n	94a4 <shell_init+0xd4>
    94b2:	bf00      	nop
    94b4:	00500018 	.word	0x00500018
    94b8:	00026d4f 	.word	0x00026d4f
    94bc:	0000950d 	.word	0x0000950d

000094c0 <shell_start>:
{
    94c0:	b510      	push	{r4, lr}
    94c2:	4604      	mov	r4, r0
	return shell->ctx->state;
    94c4:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    94c6:	7903      	ldrb	r3, [r0, #4]
    94c8:	2b01      	cmp	r3, #1
    94ca:	d119      	bne.n	9500 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    94cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    94d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    94d4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    94d8:	f01d fc37 	bl	26d4a <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    94dc:	2108      	movs	r1, #8
    94de:	4620      	mov	r0, r4
    94e0:	f000 f986 	bl	97f0 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    94e4:	4908      	ldr	r1, [pc, #32]	; (9508 <shell_start+0x48>)
    94e6:	6960      	ldr	r0, [r4, #20]
    94e8:	f01d fc22 	bl	26d30 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    94ec:	4620      	mov	r0, r4
    94ee:	f7ff fc05 	bl	8cfc <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    94f2:	68a0      	ldr	r0, [r4, #8]
    94f4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    94f8:	f01d fc74 	bl	26de4 <k_mutex_unlock.isra.0>
	return 0;
    94fc:	2000      	movs	r0, #0
}
    94fe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    9500:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9504:	e7fb      	b.n	94fe <shell_start+0x3e>
    9506:	bf00      	nop
    9508:	0002e013 	.word	0x0002e013

0000950c <shell_thread>:
{
    950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9510:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    9512:	6840      	ldr	r0, [r0, #4]
    9514:	6803      	ldr	r3, [r0, #0]
{
    9516:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    9518:	689b      	ldr	r3, [r3, #8]
    951a:	2100      	movs	r1, #0
{
    951c:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    951e:	4798      	blx	r3
	if (err != 0) {
    9520:	2800      	cmp	r0, #0
    9522:	d14c      	bne.n	95be <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    9524:	b126      	cbz	r6, 9530 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    9526:	69e0      	ldr	r0, [r4, #28]
    9528:	462a      	mov	r2, r5
    952a:	4621      	mov	r1, r4
    952c:	f01e f9c8 	bl	278c0 <z_shell_log_backend_enable>
	err = shell_start(shell);
    9530:	4620      	mov	r0, r4
    9532:	f7ff ffc5 	bl	94c0 <shell_start>
	if (err != 0) {
    9536:	2800      	cmp	r0, #0
    9538:	d141      	bne.n	95be <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    953a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 95c4 <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    953e:	4f22      	ldr	r7, [pc, #136]	; (95c8 <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    9540:	4e22      	ldr	r6, [pc, #136]	; (95cc <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    9542:	68a0      	ldr	r0, [r4, #8]
    9544:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    9548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    954c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9550:	2103      	movs	r1, #3
    9552:	f01c f983 	bl	2585c <z_impl_k_poll>
		if (err != 0) {
    9556:	4605      	mov	r5, r0
    9558:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    955a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    955e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9562:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    9566:	b175      	cbz	r5, 9586 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    9568:	f01d fbef 	bl	26d4a <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    956c:	4620      	mov	r0, r4
    956e:	462b      	mov	r3, r5
    9570:	4a17      	ldr	r2, [pc, #92]	; (95d0 <shell_thread+0xc4>)
    9572:	2101      	movs	r1, #1
    9574:	f01e f875 	bl	27662 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    9578:	68a0      	ldr	r0, [r4, #8]
}
    957a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    957e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    9582:	f01d bc2f 	b.w	26de4 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    9586:	f01d fbe0 	bl	26d4a <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    958a:	6860      	ldr	r0, [r4, #4]
    958c:	6803      	ldr	r3, [r0, #0]
    958e:	695b      	ldr	r3, [r3, #20]
    9590:	b103      	cbz	r3, 9594 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    9592:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    9594:	4642      	mov	r2, r8
    9596:	4620      	mov	r0, r4
    9598:	2102      	movs	r1, #2
    959a:	f01d fbad 	bl	26cf8 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    959e:	463a      	mov	r2, r7
    95a0:	4620      	mov	r0, r4
    95a2:	2100      	movs	r1, #0
    95a4:	f01d fba8 	bl	26cf8 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    95a8:	4620      	mov	r0, r4
    95aa:	4632      	mov	r2, r6
    95ac:	2101      	movs	r1, #1
    95ae:	f01d fba3 	bl	26cf8 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    95b2:	68a0      	ldr	r0, [r4, #8]
    95b4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    95b8:	f01d fc14 	bl	26de4 <k_mutex_unlock.isra.0>
    95bc:	e7c1      	b.n	9542 <shell_thread+0x36>
}
    95be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95c2:	bf00      	nop
    95c4:	00026d63 	.word	0x00026d63
    95c8:	00008d45 	.word	0x00008d45
    95cc:	00026de9 	.word	0x00026de9
    95d0:	0002edcf 	.word	0x0002edcf

000095d4 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    95d4:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    95d6:	4a0d      	ldr	r2, [pc, #52]	; (960c <cmd_help+0x38>)
{
    95d8:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    95da:	2108      	movs	r1, #8
    95dc:	f01d fc65 	bl	26eaa <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    95e0:	4620      	mov	r0, r4
    95e2:	4a0b      	ldr	r2, [pc, #44]	; (9610 <cmd_help+0x3c>)
    95e4:	2108      	movs	r1, #8
    95e6:	f01d fc60 	bl	26eaa <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    95ea:	4620      	mov	r0, r4
    95ec:	4a09      	ldr	r2, [pc, #36]	; (9614 <cmd_help+0x40>)
    95ee:	2108      	movs	r1, #8
    95f0:	f01d fc5b 	bl	26eaa <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    95f4:	4620      	mov	r0, r4
    95f6:	4a08      	ldr	r2, [pc, #32]	; (9618 <cmd_help+0x44>)
    95f8:	2108      	movs	r1, #8
    95fa:	f01d fc56 	bl	26eaa <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    95fe:	4620      	mov	r0, r4
    9600:	4a06      	ldr	r2, [pc, #24]	; (961c <cmd_help+0x48>)
    9602:	2100      	movs	r1, #0
    9604:	f000 fa1c 	bl	9a40 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    9608:	2000      	movs	r0, #0
    960a:	bd10      	pop	{r4, pc}
    960c:	0002ede6 	.word	0x0002ede6
    9610:	0002ee24 	.word	0x0002ee24
    9614:	0002ee83 	.word	0x0002ee83
    9618:	0002eed7 	.word	0x0002eed7
    961c:	0002ef71 	.word	0x0002ef71

00009620 <shell_hexdump_line>:
{
    9620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9624:	4616      	mov	r6, r2
    9626:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    9628:	4a2a      	ldr	r2, [pc, #168]	; (96d4 <shell_hexdump_line+0xb4>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    962a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 96d8 <shell_hexdump_line+0xb8>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    962e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 96dc <shell_hexdump_line+0xbc>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    9632:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 96e0 <shell_hexdump_line+0xc0>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    9636:	460b      	mov	r3, r1
    9638:	2108      	movs	r1, #8
{
    963a:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    963c:	f01d fc35 	bl	26eaa <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    9640:	2500      	movs	r5, #0
		if (i < len) {
    9642:	42af      	cmp	r7, r5
    9644:	d931      	bls.n	96aa <shell_hexdump_line+0x8a>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    9646:	5d73      	ldrb	r3, [r6, r5]
    9648:	464a      	mov	r2, r9
    964a:	2108      	movs	r1, #8
    964c:	4620      	mov	r0, r4
    964e:	f01d fc2c 	bl	26eaa <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    9652:	3501      	adds	r5, #1
    9654:	2d10      	cmp	r5, #16
    9656:	d120      	bne.n	969a <shell_hexdump_line+0x7a>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    9658:	4a22      	ldr	r2, [pc, #136]	; (96e4 <shell_hexdump_line+0xc4>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
    965a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 96e0 <shell_hexdump_line+0xc0>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    965e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 96e8 <shell_hexdump_line+0xc8>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    9662:	2108      	movs	r1, #8
    9664:	4620      	mov	r0, r4
    9666:	f01d fc20 	bl	26eaa <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    966a:	2500      	movs	r5, #0
		if (i < len) {
    966c:	42bd      	cmp	r5, r7
    966e:	d22a      	bcs.n	96c6 <shell_hexdump_line+0xa6>
			char c = data[i];
    9670:	5d73      	ldrb	r3, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    9672:	f1a3 0220 	sub.w	r2, r3, #32
    9676:	2a5f      	cmp	r2, #95	; 0x5f
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    9678:	bf28      	it	cs
    967a:	232e      	movcs	r3, #46	; 0x2e
    967c:	464a      	mov	r2, r9
    967e:	2108      	movs	r1, #8
    9680:	4620      	mov	r0, r4
    9682:	f01d fc12 	bl	26eaa <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    9686:	3501      	adds	r5, #1
    9688:	2d10      	cmp	r5, #16
    968a:	d114      	bne.n	96b6 <shell_hexdump_line+0x96>
	shell_print(shell, "|");
    968c:	4620      	mov	r0, r4
    968e:	4a17      	ldr	r2, [pc, #92]	; (96ec <shell_hexdump_line+0xcc>)
}
    9690:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
    9694:	2108      	movs	r1, #8
    9696:	f01d bc08 	b.w	26eaa <shell_fprintf>
		if (i > 0 && !(i % 8)) {
    969a:	076a      	lsls	r2, r5, #29
    969c:	d1d1      	bne.n	9642 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    969e:	4652      	mov	r2, sl
    96a0:	2108      	movs	r1, #8
    96a2:	4620      	mov	r0, r4
    96a4:	f01d fc01 	bl	26eaa <shell_fprintf>
    96a8:	e7cb      	b.n	9642 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    96aa:	4642      	mov	r2, r8
    96ac:	2108      	movs	r1, #8
    96ae:	4620      	mov	r0, r4
    96b0:	f01d fbfb 	bl	26eaa <shell_fprintf>
    96b4:	e7cd      	b.n	9652 <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
    96b6:	076b      	lsls	r3, r5, #29
    96b8:	d1d8      	bne.n	966c <shell_hexdump_line+0x4c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    96ba:	4642      	mov	r2, r8
    96bc:	2108      	movs	r1, #8
    96be:	4620      	mov	r0, r4
    96c0:	f01d fbf3 	bl	26eaa <shell_fprintf>
    96c4:	e7d2      	b.n	966c <shell_hexdump_line+0x4c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    96c6:	4642      	mov	r2, r8
    96c8:	2108      	movs	r1, #8
    96ca:	4620      	mov	r0, r4
    96cc:	f01d fbed 	bl	26eaa <shell_fprintf>
    96d0:	e7d9      	b.n	9686 <shell_hexdump_line+0x66>
    96d2:	bf00      	nop
    96d4:	0002ef87 	.word	0x0002ef87
    96d8:	0002e3f1 	.word	0x0002e3f1
    96dc:	0002e3eb 	.word	0x0002e3eb
    96e0:	0002e3f3 	.word	0x0002e3f3
    96e4:	0002e3f5 	.word	0x0002e3f5
    96e8:	0002efae 	.word	0x0002efae
    96ec:	0002ef8e 	.word	0x0002ef8e

000096f0 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    96f0:	b510      	push	{r4, lr}
    96f2:	4604      	mov	r4, r0
    96f4:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    96f6:	460a      	mov	r2, r1
    96f8:	4601      	mov	r1, r0
    96fa:	4806      	ldr	r0, [pc, #24]	; (9714 <z_shell_fprintf_fmt+0x24>)
    96fc:	f7fc fee6 	bl	64cc <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    9700:	6923      	ldr	r3, [r4, #16]
    9702:	791b      	ldrb	r3, [r3, #4]
    9704:	b123      	cbz	r3, 9710 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    9706:	4620      	mov	r0, r4
	}
}
    9708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    970c:	f01d bbf5 	b.w	26efa <z_shell_fprintf_buffer_flush>
}
    9710:	bd10      	pop	{r4, pc}
    9712:	bf00      	nop
    9714:	00026f13 	.word	0x00026f13

00009718 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    9718:	b510      	push	{r4, lr}
    971a:	460b      	mov	r3, r1
    971c:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    971e:	b950      	cbnz	r0, 9736 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    9720:	490e      	ldr	r1, [pc, #56]	; (975c <z_shell_cmd_get+0x44>)
    9722:	4a0f      	ldr	r2, [pc, #60]	; (9760 <z_shell_cmd_get+0x48>)
    9724:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    9726:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    972a:	d20f      	bcs.n	974c <z_shell_cmd_get+0x34>
    972c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9730:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    9732:	4620      	mov	r0, r4
    9734:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    9736:	6881      	ldr	r1, [r0, #8]
    9738:	b141      	cbz	r1, 974c <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    973a:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    973c:	7809      	ldrb	r1, [r1, #0]
    973e:	b139      	cbz	r1, 9750 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    9740:	4618      	mov	r0, r3
    9742:	4621      	mov	r1, r4
    9744:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    9746:	6823      	ldr	r3, [r4, #0]
    9748:	2b00      	cmp	r3, #0
    974a:	d1f2      	bne.n	9732 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    974c:	2400      	movs	r4, #0
    974e:	e7f0      	b.n	9732 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    9750:	2014      	movs	r0, #20
    9752:	4343      	muls	r3, r0
    9754:	18d4      	adds	r4, r2, r3
    9756:	58d3      	ldr	r3, [r2, r3]
    9758:	e7f6      	b.n	9748 <z_shell_cmd_get+0x30>
    975a:	bf00      	nop
    975c:	0002ba54 	.word	0x0002ba54
    9760:	0002bb14 	.word	0x0002bb14

00009764 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9764:	6883      	ldr	r3, [r0, #8]
    9766:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    976a:	069b      	lsls	r3, r3, #26
    976c:	d503      	bpl.n	9776 <z_clear_eos+0x12>
    976e:	4902      	ldr	r1, [pc, #8]	; (9778 <z_clear_eos+0x14>)
    9770:	6940      	ldr	r0, [r0, #20]
    9772:	f01d bdfc 	b.w	2736e <z_shell_raw_fprintf>
}
    9776:	4770      	bx	lr
    9778:	0002bb9d 	.word	0x0002bb9d

0000977c <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    977c:	4901      	ldr	r1, [pc, #4]	; (9784 <z_cursor_next_line_move.isra.0+0x8>)
    977e:	f01d bdf6 	b.w	2736e <z_shell_raw_fprintf>
    9782:	bf00      	nop
    9784:	0002e014 	.word	0x0002e014

00009788 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    9788:	1e0a      	subs	r2, r1, #0
    978a:	dc0d      	bgt.n	97a8 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    978c:	d00e      	beq.n	97ac <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    978e:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9790:	6881      	ldr	r1, [r0, #8]
    9792:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    9796:	0689      	lsls	r1, r1, #26
    9798:	d508      	bpl.n	97ac <z_shell_op_cursor_vert_move+0x24>
    979a:	2a00      	cmp	r2, #0
    979c:	4904      	ldr	r1, [pc, #16]	; (97b0 <z_shell_op_cursor_vert_move+0x28>)
    979e:	6940      	ldr	r0, [r0, #20]
    97a0:	bfb8      	it	lt
    97a2:	4252      	neglt	r2, r2
    97a4:	f01d bde3 	b.w	2736e <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    97a8:	2341      	movs	r3, #65	; 0x41
    97aa:	e7f1      	b.n	9790 <z_shell_op_cursor_vert_move+0x8>
}
    97ac:	4770      	bx	lr
    97ae:	bf00      	nop
    97b0:	0002efaa 	.word	0x0002efaa

000097b4 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    97b4:	1e0a      	subs	r2, r1, #0
    97b6:	dc0d      	bgt.n	97d4 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    97b8:	d00e      	beq.n	97d8 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    97ba:	2344      	movs	r3, #68	; 0x44
    97bc:	6881      	ldr	r1, [r0, #8]
    97be:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    97c2:	0689      	lsls	r1, r1, #26
    97c4:	d508      	bpl.n	97d8 <z_shell_op_cursor_horiz_move+0x24>
    97c6:	2a00      	cmp	r2, #0
    97c8:	4904      	ldr	r1, [pc, #16]	; (97dc <z_shell_op_cursor_horiz_move+0x28>)
    97ca:	6940      	ldr	r0, [r0, #20]
    97cc:	bfb8      	it	lt
    97ce:	4252      	neglt	r2, r2
    97d0:	f01d bdcd 	b.w	2736e <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    97d4:	2343      	movs	r3, #67	; 0x43
    97d6:	e7f1      	b.n	97bc <z_shell_op_cursor_horiz_move+0x8>
}
    97d8:	4770      	bx	lr
    97da:	bf00      	nop
    97dc:	0002efaa 	.word	0x0002efaa

000097e0 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    97e0:	6882      	ldr	r2, [r0, #8]
    97e2:	4902      	ldr	r1, [pc, #8]	; (97ec <z_shell_print_cmd+0xc>)
    97e4:	6940      	ldr	r0, [r0, #20]
    97e6:	3242      	adds	r2, #66	; 0x42
    97e8:	f01d bdc1 	b.w	2736e <z_shell_raw_fprintf>
    97ec:	0002ea53 	.word	0x0002ea53

000097f0 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    97f0:	2908      	cmp	r1, #8
{
    97f2:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    97f4:	d816      	bhi.n	9824 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    97f6:	6883      	ldr	r3, [r0, #8]
    97f8:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    97fc:	4291      	cmp	r1, r2
    97fe:	d011      	beq.n	9824 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    9800:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    9802:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    9806:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    980a:	d005      	beq.n	9818 <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    980c:	0699      	lsls	r1, r3, #26
    980e:	d509      	bpl.n	9824 <z_shell_vt100_color_set+0x34>
    9810:	4905      	ldr	r1, [pc, #20]	; (9828 <z_shell_vt100_color_set+0x38>)
    9812:	6940      	ldr	r0, [r0, #20]
    9814:	f01d bdab 	b.w	2736e <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    9818:	069b      	lsls	r3, r3, #26
    981a:	d503      	bpl.n	9824 <z_shell_vt100_color_set+0x34>
    981c:	4903      	ldr	r1, [pc, #12]	; (982c <z_shell_vt100_color_set+0x3c>)
    981e:	6940      	ldr	r0, [r0, #20]
    9820:	f01d bda5 	b.w	2736e <z_shell_raw_fprintf>
	}
}
    9824:	4770      	bx	lr
    9826:	bf00      	nop
    9828:	0002efb1 	.word	0x0002efb1
    982c:	0002bba2 	.word	0x0002bba2

00009830 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    9830:	b538      	push	{r3, r4, r5, lr}
    9832:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    9834:	7809      	ldrb	r1, [r1, #0]
{
    9836:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    9838:	f7ff ffda 	bl	97f0 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    983c:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    983e:	2a07      	cmp	r2, #7
    9840:	d810      	bhi.n	9864 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    9842:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    9844:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    9848:	4291      	cmp	r1, r2
    984a:	d00b      	beq.n	9864 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    984c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    9850:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    9854:	069b      	lsls	r3, r3, #26
    9856:	d505      	bpl.n	9864 <z_shell_vt100_colors_restore+0x34>
    9858:	6960      	ldr	r0, [r4, #20]
    985a:	4903      	ldr	r1, [pc, #12]	; (9868 <z_shell_vt100_colors_restore+0x38>)
}
    985c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    9860:	f01d bd85 	b.w	2736e <z_shell_raw_fprintf>
}
    9864:	bd38      	pop	{r3, r4, r5, pc}
    9866:	bf00      	nop
    9868:	0002efba 	.word	0x0002efba

0000986c <z_shell_op_word_remove>:
{
    986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    986e:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    9870:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    9872:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    9874:	2a00      	cmp	r2, #0
    9876:	d04e      	beq.n	9916 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    9878:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    987a:	2800      	cmp	r0, #0
    987c:	d04b      	beq.n	9916 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    987e:	3041      	adds	r0, #65	; 0x41
    9880:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    9882:	f103 0642 	add.w	r6, r3, #66	; 0x42
    9886:	4603      	mov	r3, r0
    9888:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    988a:	42b3      	cmp	r3, r6
    988c:	b2a4      	uxth	r4, r4
    988e:	4619      	mov	r1, r3
    9890:	d30d      	bcc.n	98ae <z_shell_op_word_remove+0x42>
    9892:	f811 7901 	ldrb.w	r7, [r1], #-1
    9896:	2f20      	cmp	r7, #32
    9898:	d03b      	beq.n	9912 <z_shell_op_word_remove+0xa6>
    989a:	4619      	mov	r1, r3
    989c:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    989e:	7808      	ldrb	r0, [r1, #0]
    98a0:	2820      	cmp	r0, #32
    98a2:	d004      	beq.n	98ae <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    98a4:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    98a6:	429e      	cmp	r6, r3
		++chars_to_delete;
    98a8:	b2a4      	uxth	r4, r4
		--str;
    98aa:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    98ac:	d9f5      	bls.n	989a <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    98ae:	1c63      	adds	r3, r4, #1
    98b0:	1c4e      	adds	r6, r1, #1
    98b2:	1b12      	subs	r2, r2, r4
    98b4:	4419      	add	r1, r3
    98b6:	4630      	mov	r0, r6
    98b8:	f01e ff62 	bl	28780 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    98bc:	68a9      	ldr	r1, [r5, #8]
    98be:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    98c0:	1b12      	subs	r2, r2, r4
    98c2:	b292      	uxth	r2, r2
    98c4:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    98c6:	440a      	add	r2, r1
    98c8:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    98ca:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    98cc:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    98d0:	b209      	sxth	r1, r1
    98d2:	4628      	mov	r0, r5
    98d4:	f01d fdb3 	bl	2743e <z_shell_op_cursor_move>
    98d8:	68ab      	ldr	r3, [r5, #8]
    98da:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    98de:	069a      	lsls	r2, r3, #26
    98e0:	d503      	bpl.n	98ea <z_shell_op_word_remove+0x7e>
    98e2:	490d      	ldr	r1, [pc, #52]	; (9918 <z_shell_op_word_remove+0xac>)
    98e4:	6968      	ldr	r0, [r5, #20]
    98e6:	f01d fd42 	bl	2736e <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    98ea:	4633      	mov	r3, r6
    98ec:	4a0b      	ldr	r2, [pc, #44]	; (991c <z_shell_op_word_remove+0xb0>)
    98ee:	2108      	movs	r1, #8
    98f0:	4628      	mov	r0, r5
    98f2:	f01d feb6 	bl	27662 <z_shell_fprintf>
	z_clear_eos(shell);
    98f6:	4628      	mov	r0, r5
    98f8:	f7ff ff34 	bl	9764 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    98fc:	68ab      	ldr	r3, [r5, #8]
    98fe:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    9902:	069b      	lsls	r3, r3, #26
    9904:	d507      	bpl.n	9916 <z_shell_op_word_remove+0xaa>
    9906:	6968      	ldr	r0, [r5, #20]
    9908:	4905      	ldr	r1, [pc, #20]	; (9920 <z_shell_op_word_remove+0xb4>)
}
    990a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    990e:	f01d bd2e 	b.w	2736e <z_shell_raw_fprintf>
    9912:	460b      	mov	r3, r1
    9914:	e7b8      	b.n	9888 <z_shell_op_word_remove+0x1c>
    9916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9918:	0002bba7 	.word	0x0002bba7
    991c:	0002ea53 	.word	0x0002ea53
    9920:	0002bbab 	.word	0x0002bbab

00009924 <reprint_from_cursor>:
{
    9924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9928:	4604      	mov	r4, r0
    992a:	460d      	mov	r5, r1
	if (data_removed) {
    992c:	4617      	mov	r7, r2
    992e:	b10a      	cbz	r2, 9934 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    9930:	f7ff ff18 	bl	9764 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    9934:	68a3      	ldr	r3, [r4, #8]
    9936:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    993a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    993c:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    993e:	f100 0042 	add.w	r0, r0, #66	; 0x42
    9942:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    9944:	d51f      	bpl.n	9986 <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    9946:	4618      	mov	r0, r3
    9948:	f01e fedc 	bl	28704 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    994c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9994 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    9950:	4606      	mov	r6, r0
		while (len--) {
    9952:	b996      	cbnz	r6, 997a <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    9954:	68a3      	ldr	r3, [r4, #8]
    9956:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    9958:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    995a:	4620      	mov	r0, r4
    995c:	f01d fd14 	bl	27388 <full_line_cmd>
    9960:	b120      	cbz	r0, 996c <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    9962:	b107      	cbz	r7, 9966 <reprint_from_cursor+0x42>
    9964:	b115      	cbz	r5, 996c <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    9966:	6960      	ldr	r0, [r4, #20]
    9968:	f7ff ff08 	bl	977c <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    996c:	4269      	negs	r1, r5
    996e:	4620      	mov	r0, r4
    9970:	b209      	sxth	r1, r1
}
    9972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    9976:	f01d bd62 	b.w	2743e <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    997a:	6960      	ldr	r0, [r4, #20]
    997c:	4641      	mov	r1, r8
    997e:	f01d fcf6 	bl	2736e <z_shell_raw_fprintf>
    9982:	3e01      	subs	r6, #1
    9984:	e7e5      	b.n	9952 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    9986:	4a04      	ldr	r2, [pc, #16]	; (9998 <reprint_from_cursor+0x74>)
    9988:	2108      	movs	r1, #8
    998a:	4620      	mov	r0, r4
    998c:	f01d fe69 	bl	27662 <z_shell_fprintf>
    9990:	e7e0      	b.n	9954 <reprint_from_cursor+0x30>
    9992:	bf00      	nop
    9994:	0002ff7b 	.word	0x0002ff7b
    9998:	0002ea53 	.word	0x0002ea53

0000999c <z_shell_op_char_insert>:
{
    999c:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    999e:	6883      	ldr	r3, [r0, #8]
    99a0:	f88d 1007 	strb.w	r1, [sp, #7]
    99a4:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    99a8:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    99aa:	07d0      	lsls	r0, r2, #31
    99ac:	d521      	bpl.n	99f2 <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    99ae:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    99b0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    99b2:	428a      	cmp	r2, r1
    99b4:	d01d      	beq.n	99f2 <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    99b6:	1c48      	adds	r0, r1, #1
    99b8:	4419      	add	r1, r3
		char_replace(shell, data);
    99ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    99be:	87d8      	strh	r0, [r3, #62]	; 0x3e
    99c0:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    99c4:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    99c8:	0789      	lsls	r1, r1, #30
    99ca:	d510      	bpl.n	99ee <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    99cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    99d0:	6960      	ldr	r0, [r4, #20]
    99d2:	490b      	ldr	r1, [pc, #44]	; (9a00 <z_shell_op_char_insert+0x64>)
		data = '*';
    99d4:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    99d8:	bf18      	it	ne
    99da:	222a      	movne	r2, #42	; 0x2a
    99dc:	f01d fcc7 	bl	2736e <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    99e0:	4620      	mov	r0, r4
    99e2:	f01d fce5 	bl	273b0 <z_shell_cursor_in_empty_line>
    99e6:	b110      	cbz	r0, 99ee <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    99e8:	6960      	ldr	r0, [r4, #20]
    99ea:	f7ff fec7 	bl	977c <z_cursor_next_line_move.isra.0>
}
    99ee:	b002      	add	sp, #8
    99f0:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    99f2:	2201      	movs	r2, #1
    99f4:	f10d 0107 	add.w	r1, sp, #7
    99f8:	4620      	mov	r0, r4
    99fa:	f01d fe3f 	bl	2767c <data_insert>
}
    99fe:	e7f6      	b.n	99ee <z_shell_op_char_insert+0x52>
    9a00:	0002efae 	.word	0x0002efae

00009a04 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    9a04:	6883      	ldr	r3, [r0, #8]
    9a06:	4a0a      	ldr	r2, [pc, #40]	; (9a30 <z_shell_print_prompt_and_cmd+0x2c>)
    9a08:	681b      	ldr	r3, [r3, #0]
{
    9a0a:	b510      	push	{r4, lr}
    9a0c:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    9a0e:	2102      	movs	r1, #2
    9a10:	f01d fe27 	bl	27662 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    9a14:	68a3      	ldr	r3, [r4, #8]
    9a16:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    9a1a:	079b      	lsls	r3, r3, #30
    9a1c:	d507      	bpl.n	9a2e <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    9a1e:	4620      	mov	r0, r4
    9a20:	f7ff fede 	bl	97e0 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    9a24:	4620      	mov	r0, r4
}
    9a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    9a2a:	f01d bce5 	b.w	273f8 <z_shell_op_cursor_position_synchronize>
}
    9a2e:	bd10      	pop	{r4, pc}
    9a30:	0002ea53 	.word	0x0002ea53

00009a34 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    9a34:	4901      	ldr	r1, [pc, #4]	; (9a3c <z_cursor_next_line_move.isra.0+0x8>)
    9a36:	f01d bfcb 	b.w	279d0 <z_shell_raw_fprintf>
    9a3a:	bf00      	nop
    9a3c:	0002e014 	.word	0x0002e014

00009a40 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    9a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a44:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    9a46:	2100      	movs	r1, #0
{
    9a48:	b08d      	sub	sp, #52	; 0x34
    9a4a:	4604      	mov	r4, r0
    9a4c:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    9a4e:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    9a50:	aa07      	add	r2, sp, #28
    9a52:	4630      	mov	r0, r6
    9a54:	f101 0801 	add.w	r8, r1, #1
    9a58:	f7ff fe5e 	bl	9718 <z_shell_cmd_get>
    9a5c:	b9a0      	cbnz	r0, 9a88 <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    9a5e:	b185      	cbz	r5, 9a82 <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    9a60:	b127      	cbz	r7, 9a6c <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    9a62:	463a      	mov	r2, r7
    9a64:	2108      	movs	r1, #8
    9a66:	4620      	mov	r0, r4
    9a68:	f01d fdfb 	bl	27662 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    9a6c:	4f1e      	ldr	r7, [pc, #120]	; (9ae8 <z_shell_help_subcmd_print+0xa8>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    9a6e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 9aec <z_shell_help_subcmd_print+0xac>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    9a72:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    9a74:	aa07      	add	r2, sp, #28
    9a76:	4630      	mov	r0, r6
    9a78:	f101 0801 	add.w	r8, r1, #1
    9a7c:	f7ff fe4c 	bl	9718 <z_shell_cmd_get>
    9a80:	b960      	cbnz	r0, 9a9c <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    9a82:	b00d      	add	sp, #52	; 0x34
    9a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    9a88:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    9a8a:	b110      	cbz	r0, 9a92 <z_shell_help_subcmd_print+0x52>
    9a8c:	f01e fe3a 	bl	28704 <strlen>
    9a90:	b280      	uxth	r0, r0
    9a92:	4285      	cmp	r5, r0
    9a94:	bf38      	it	cc
    9a96:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    9a98:	4641      	mov	r1, r8
    9a9a:	e7d9      	b.n	9a50 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    9a9c:	6803      	ldr	r3, [r0, #0]
    9a9e:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    9aa2:	4811      	ldr	r0, [pc, #68]	; (9ae8 <z_shell_help_subcmd_print+0xa8>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    9aa4:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    9aa6:	f01e fe2d 	bl	28704 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    9aaa:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    9aac:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    9aae:	b183      	cbz	r3, 9ad2 <z_shell_help_subcmd_print+0x92>
    9ab0:	781a      	ldrb	r2, [r3, #0]
    9ab2:	b172      	cbz	r2, 9ad2 <z_shell_help_subcmd_print+0x92>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    9ab4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    9ab8:	9500      	str	r5, [sp, #0]
    9aba:	463b      	mov	r3, r7
    9abc:	464a      	mov	r2, r9
    9abe:	2108      	movs	r1, #8
    9ac0:	4620      	mov	r0, r4
    9ac2:	f01d fdce 	bl	27662 <z_shell_fprintf>
	if (item_help == NULL) {
    9ac6:	f1ba 0f00 	cmp.w	sl, #0
    9aca:	d104      	bne.n	9ad6 <z_shell_help_subcmd_print+0x96>
		z_cursor_next_line_move(shell);
    9acc:	6960      	ldr	r0, [r4, #20]
    9ace:	f7ff ffb1 	bl	9a34 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    9ad2:	4641      	mov	r1, r8
    9ad4:	e7ce      	b.n	9a74 <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    9ad6:	1c6a      	adds	r2, r5, #1
    9ad8:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    9adc:	b292      	uxth	r2, r2
    9ade:	4651      	mov	r1, sl
    9ae0:	4620      	mov	r0, r4
    9ae2:	f01d ff82 	bl	279ea <formatted_text_print.constprop.0>
    9ae6:	e7f4      	b.n	9ad2 <z_shell_help_subcmd_print+0x92>
    9ae8:	0002efdb 	.word	0x0002efdb
    9aec:	0002efc3 	.word	0x0002efc3

00009af0 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    9af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9af2:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    9af4:	6808      	ldr	r0, [r1, #0]
{
    9af6:	460d      	mov	r5, r1
    9af8:	b1b8      	cbz	r0, 9b2a <z_shell_help_cmd_print+0x3a>
    9afa:	f01e fe03 	bl	28704 <strlen>
    9afe:	b284      	uxth	r4, r0
    9b00:	4f0b      	ldr	r7, [pc, #44]	; (9b30 <z_shell_help_cmd_print+0x40>)
    9b02:	4638      	mov	r0, r7
    9b04:	f01e fdfe 	bl	28704 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    9b08:	682b      	ldr	r3, [r5, #0]
    9b0a:	4a0a      	ldr	r2, [pc, #40]	; (9b34 <z_shell_help_cmd_print+0x44>)
    9b0c:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    9b0e:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    9b10:	2108      	movs	r1, #8
    9b12:	4630      	mov	r0, r6
    9b14:	f01d fda5 	bl	27662 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    9b18:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    9b1a:	6869      	ldr	r1, [r5, #4]
    9b1c:	4622      	mov	r2, r4
    9b1e:	4630      	mov	r0, r6
}
    9b20:	b003      	add	sp, #12
    9b22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    9b26:	f01d bf60 	b.w	279ea <formatted_text_print.constprop.0>
    9b2a:	4604      	mov	r4, r0
    9b2c:	e7e8      	b.n	9b00 <z_shell_help_cmd_print+0x10>
    9b2e:	bf00      	nop
    9b30:	0002efd7 	.word	0x0002efd7
    9b34:	0002edca 	.word	0x0002edca

00009b38 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    9b38:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    9b3a:	4907      	ldr	r1, [pc, #28]	; (9b58 <z_shell_help_request+0x20>)
{
    9b3c:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    9b3e:	f01e fdf1 	bl	28724 <strcmp>
    9b42:	b138      	cbz	r0, 9b54 <z_shell_help_request+0x1c>
    9b44:	4905      	ldr	r1, [pc, #20]	; (9b5c <z_shell_help_request+0x24>)
    9b46:	4620      	mov	r0, r4
    9b48:	f01e fdec 	bl	28724 <strcmp>
    9b4c:	fab0 f080 	clz	r0, r0
    9b50:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    9b52:	bd10      	pop	{r4, pc}
		return true;
    9b54:	2001      	movs	r0, #1
    9b56:	e7fc      	b.n	9b52 <z_shell_help_request+0x1a>
    9b58:	0002efcd 	.word	0x0002efcd
    9b5c:	0002efd0 	.word	0x0002efd0

00009b60 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    9b60:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9b62:	6883      	ldr	r3, [r0, #8]
    9b64:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    9b68:	069b      	lsls	r3, r3, #26
{
    9b6a:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    9b6c:	d503      	bpl.n	9b76 <cmd_resize_default+0x16>
    9b6e:	4904      	ldr	r1, [pc, #16]	; (9b80 <cmd_resize_default+0x20>)
    9b70:	6940      	ldr	r0, [r0, #20]
    9b72:	f01d ffb1 	bl	27ad8 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    9b76:	68a3      	ldr	r3, [r4, #8]
    9b78:	4a02      	ldr	r2, [pc, #8]	; (9b84 <cmd_resize_default+0x24>)
    9b7a:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    9b7c:	2000      	movs	r0, #0
    9b7e:	bd10      	pop	{r4, pc}
    9b80:	0002bbaf 	.word	0x0002bbaf
    9b84:	00500018 	.word	0x00500018

00009b88 <cmd_shell_stats_show>:
{
    9b88:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    9b8a:	6983      	ldr	r3, [r0, #24]
    9b8c:	4a03      	ldr	r2, [pc, #12]	; (9b9c <cmd_shell_stats_show+0x14>)
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	2108      	movs	r1, #8
    9b92:	f01d f98a 	bl	26eaa <shell_fprintf>
}
    9b96:	2000      	movs	r0, #0
    9b98:	bd08      	pop	{r3, pc}
    9b9a:	bf00      	nop
    9b9c:	0002efde 	.word	0x0002efde

00009ba0 <cmd_history>:
{
    9ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    9ba2:	4e0f      	ldr	r6, [pc, #60]	; (9be0 <cmd_history+0x40>)
{
    9ba4:	4604      	mov	r4, r0
    9ba6:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    9ba8:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    9baa:	68e0      	ldr	r0, [r4, #12]
    9bac:	f10d 030e 	add.w	r3, sp, #14
    9bb0:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    9bb4:	2101      	movs	r1, #1
    9bb6:	f01e f817 	bl	27be8 <z_shell_history_get>
		if (len) {
    9bba:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    9bbe:	68a3      	ldr	r3, [r4, #8]
    9bc0:	b150      	cbz	r0, 9bd8 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    9bc2:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    9bc6:	9300      	str	r3, [sp, #0]
    9bc8:	4632      	mov	r2, r6
    9bca:	462b      	mov	r3, r5
    9bcc:	2108      	movs	r1, #8
    9bce:	4620      	mov	r0, r4
    9bd0:	f01d f96b 	bl	26eaa <shell_fprintf>
	while (1) {
    9bd4:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    9bd6:	e7e7      	b.n	9ba8 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    9bd8:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    9bdc:	b004      	add	sp, #16
    9bde:	bd70      	pop	{r4, r5, r6, pc}
    9be0:	0002efee 	.word	0x0002efee

00009be4 <cmd_echo>:
	if (argc == 2) {
    9be4:	2902      	cmp	r1, #2
{
    9be6:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    9be8:	d10d      	bne.n	9c06 <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    9bea:	6853      	ldr	r3, [r2, #4]
    9bec:	9301      	str	r3, [sp, #4]
    9bee:	4b0e      	ldr	r3, [pc, #56]	; (9c28 <cmd_echo+0x44>)
    9bf0:	9300      	str	r3, [sp, #0]
    9bf2:	6813      	ldr	r3, [r2, #0]
    9bf4:	4a0d      	ldr	r2, [pc, #52]	; (9c2c <cmd_echo+0x48>)
    9bf6:	2101      	movs	r1, #1
    9bf8:	f01d f957 	bl	26eaa <shell_fprintf>
    9bfc:	f06f 0015 	mvn.w	r0, #21
}
    9c00:	b003      	add	sp, #12
    9c02:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    9c06:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    9c08:	4a09      	ldr	r2, [pc, #36]	; (9c30 <cmd_echo+0x4c>)
    9c0a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    9c0e:	f013 0f02 	tst.w	r3, #2
    9c12:	f04f 0108 	mov.w	r1, #8
    9c16:	4b07      	ldr	r3, [pc, #28]	; (9c34 <cmd_echo+0x50>)
    9c18:	bf18      	it	ne
    9c1a:	4613      	movne	r3, r2
    9c1c:	4a06      	ldr	r2, [pc, #24]	; (9c38 <cmd_echo+0x54>)
    9c1e:	f01d f944 	bl	26eaa <shell_fprintf>
	return 0;
    9c22:	2000      	movs	r0, #0
    9c24:	e7ec      	b.n	9c00 <cmd_echo+0x1c>
    9c26:	bf00      	nop
    9c28:	0002f001 	.word	0x0002f001
    9c2c:	0002eff8 	.word	0x0002eff8
    9c30:	0002deec 	.word	0x0002deec
    9c34:	0002defe 	.word	0x0002defe
    9c38:	0002f016 	.word	0x0002f016

00009c3c <cmd_clear>:
{
    9c3c:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9c3e:	6883      	ldr	r3, [r0, #8]
    9c40:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    9c44:	069a      	lsls	r2, r3, #26
{
    9c46:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    9c48:	d503      	bpl.n	9c52 <cmd_clear+0x16>
    9c4a:	4907      	ldr	r1, [pc, #28]	; (9c68 <cmd_clear+0x2c>)
    9c4c:	6940      	ldr	r0, [r0, #20]
    9c4e:	f01d ff43 	bl	27ad8 <z_shell_raw_fprintf>
    9c52:	68a3      	ldr	r3, [r4, #8]
    9c54:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    9c58:	069b      	lsls	r3, r3, #26
    9c5a:	d503      	bpl.n	9c64 <cmd_clear+0x28>
    9c5c:	4903      	ldr	r1, [pc, #12]	; (9c6c <cmd_clear+0x30>)
    9c5e:	6960      	ldr	r0, [r4, #20]
    9c60:	f01d ff3a 	bl	27ad8 <z_shell_raw_fprintf>
}
    9c64:	2000      	movs	r0, #0
    9c66:	bd10      	pop	{r4, pc}
    9c68:	0002bbb6 	.word	0x0002bbb6
    9c6c:	0002bbbb 	.word	0x0002bbbb

00009c70 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    9c70:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    9c72:	2901      	cmp	r1, #1
{
    9c74:	b085      	sub	sp, #20
    9c76:	4604      	mov	r4, r0
	if (argc != 1) {
    9c78:	d00d      	beq.n	9c96 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    9c7a:	6853      	ldr	r3, [r2, #4]
    9c7c:	9301      	str	r3, [sp, #4]
    9c7e:	4b59      	ldr	r3, [pc, #356]	; (9de4 <cmd_resize+0x174>)
    9c80:	9300      	str	r3, [sp, #0]
    9c82:	6813      	ldr	r3, [r2, #0]
    9c84:	4a58      	ldr	r2, [pc, #352]	; (9de8 <cmd_resize+0x178>)
    9c86:	2101      	movs	r1, #1
    9c88:	f01d f90f 	bl	26eaa <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    9c8c:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    9c90:	4628      	mov	r0, r5
    9c92:	b005      	add	sp, #20
    9c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c96:	6883      	ldr	r3, [r0, #8]
    9c98:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    9c9c:	069a      	lsls	r2, r3, #26
    9c9e:	d503      	bpl.n	9ca8 <cmd_resize+0x38>
    9ca0:	4952      	ldr	r1, [pc, #328]	; (9dec <cmd_resize+0x17c>)
    9ca2:	6940      	ldr	r0, [r0, #20]
    9ca4:	f01d ff18 	bl	27ad8 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    9ca8:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    9cac:	4620      	mov	r0, r4
    9cae:	f7ff fd6b 	bl	9788 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    9cb2:	21fa      	movs	r1, #250	; 0xfa
    9cb4:	4620      	mov	r0, r4
    9cb6:	f7ff fd7d 	bl	97b4 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    9cba:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    9cbc:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    9cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
    9cc2:	4629      	mov	r1, r5
    9cc4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    9cc8:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    9ccc:	f01e fd7b 	bl	287c6 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    9cd0:	4947      	ldr	r1, [pc, #284]	; (9df0 <cmd_resize+0x180>)
    9cd2:	6960      	ldr	r0, [r4, #20]
    9cd4:	f01d ff00 	bl	27ad8 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    9cd8:	6960      	ldr	r0, [r4, #20]
    9cda:	f01d f90e 	bl	26efa <z_shell_fprintf_buffer_flush>
    9cde:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    9ce2:	6860      	ldr	r0, [r4, #4]
    9ce4:	6803      	ldr	r3, [r0, #0]
    9ce6:	2201      	movs	r2, #1
    9ce8:	691f      	ldr	r7, [r3, #16]
    9cea:	f10d 010b 	add.w	r1, sp, #11
    9cee:	ab03      	add	r3, sp, #12
    9cf0:	47b8      	blx	r7
			if (cnt == 0) {
    9cf2:	9b03      	ldr	r3, [sp, #12]
    9cf4:	b953      	cbnz	r3, 9d0c <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    9cf6:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    9cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9cfc:	b2b6      	uxth	r6, r6
    9cfe:	f021 fa61 	bl	2b1c4 <z_impl_k_busy_wait>
    9d02:	2e00      	cmp	r6, #0
    9d04:	d1ed      	bne.n	9ce2 <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    9d06:	f06f 0585 	mvn.w	r5, #133	; 0x85
    9d0a:	e034      	b.n	9d76 <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    9d0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    9d10:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    9d12:	2b1b      	cmp	r3, #27
    9d14:	d05a      	beq.n	9dcc <cmd_resize+0x15c>
    9d16:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    9d1a:	2a1b      	cmp	r2, #27
    9d1c:	d1e1      	bne.n	9ce2 <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    9d1e:	2b52      	cmp	r3, #82	; 0x52
    9d20:	d154      	bne.n	9dcc <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    9d22:	440d      	add	r5, r1
    9d24:	2300      	movs	r3, #0
    9d26:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    9d2a:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    9d2e:	2a5b      	cmp	r2, #91	; 0x5b
    9d30:	d154      	bne.n	9ddc <cmd_resize+0x16c>
    9d32:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    9d36:	461f      	mov	r7, r3
				buff_idx = 2U;
    9d38:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    9d3a:	f815 0b01 	ldrb.w	r0, [r5], #1
    9d3e:	4632      	mov	r2, r6
    9d40:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    9d42:	f106 0601 	add.w	r6, r6, #1
    9d46:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    9d48:	d12b      	bne.n	9da2 <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    9d4a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    9d4e:	d0da      	beq.n	9d06 <cmd_resize+0x96>
    9d50:	f202 1243 	addw	r2, r2, #323	; 0x143
    9d54:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    9d58:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    9d5a:	f812 5b01 	ldrb.w	r5, [r2], #1
    9d5e:	bb55      	cbnz	r5, 9db6 <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    9d60:	2bfa      	cmp	r3, #250	; 0xfa
    9d62:	bf28      	it	cs
    9d64:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    9d66:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    9d68:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    9d6a:	463b      	mov	r3, r7
    9d6c:	bf28      	it	cs
    9d6e:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    9d70:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    9d74:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9d76:	68a3      	ldr	r3, [r4, #8]
    9d78:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    9d7c:	069b      	lsls	r3, r3, #26
    9d7e:	d503      	bpl.n	9d88 <cmd_resize+0x118>
    9d80:	491c      	ldr	r1, [pc, #112]	; (9df4 <cmd_resize+0x184>)
    9d82:	6960      	ldr	r0, [r4, #20]
    9d84:	f01d fea8 	bl	27ad8 <z_shell_raw_fprintf>
	if (err != 0) {
    9d88:	2d00      	cmp	r5, #0
    9d8a:	d081      	beq.n	9c90 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    9d8c:	68a3      	ldr	r3, [r4, #8]
    9d8e:	4a1a      	ldr	r2, [pc, #104]	; (9df8 <cmd_resize+0x188>)
    9d90:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    9d92:	2103      	movs	r1, #3
    9d94:	4a19      	ldr	r2, [pc, #100]	; (9dfc <cmd_resize+0x18c>)
    9d96:	4620      	mov	r0, r4
    9d98:	f01d f887 	bl	26eaa <shell_fprintf>
    9d9c:	f06f 0507 	mvn.w	r5, #7
    9da0:	e776      	b.n	9c90 <cmd_resize+0x20>
					*y = *y * 10U +
    9da2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    9da6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    9daa:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    9dac:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    9db0:	b29f      	uxth	r7, r3
					if (buff_idx >=
    9db2:	d1c2      	bne.n	9d3a <cmd_resize+0xca>
    9db4:	e7a7      	b.n	9d06 <cmd_resize+0x96>
					*x = *x * 10U +
    9db6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    9dba:	3601      	adds	r6, #1
					*x = *x * 10U +
    9dbc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    9dc0:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    9dc2:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    9dc4:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    9dc6:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    9dc8:	d9c7      	bls.n	9d5a <cmd_resize+0xea>
    9dca:	e79c      	b.n	9d06 <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    9dcc:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    9dce:	3501      	adds	r5, #1
    9dd0:	b2ad      	uxth	r5, r5
    9dd2:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    9dd4:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    9dd8:	d983      	bls.n	9ce2 <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    9dda:	2300      	movs	r3, #0
    9ddc:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    9de0:	e791      	b.n	9d06 <cmd_resize+0x96>
    9de2:	bf00      	nop
    9de4:	0002f001 	.word	0x0002f001
    9de8:	0002eff8 	.word	0x0002eff8
    9dec:	0002bbc1 	.word	0x0002bbc1
    9df0:	0002f419 	.word	0x0002f419
    9df4:	0002bbc5 	.word	0x0002bbc5
    9df8:	00500018 	.word	0x00500018
    9dfc:	0002f027 	.word	0x0002f027

00009e00 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    9e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e04:	4607      	mov	r7, r0
    9e06:	b089      	sub	sp, #36	; 0x24
    9e08:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    9e0a:	4689      	mov	r9, r1
    9e0c:	b921      	cbnz	r1, 9e18 <z_shell_wildcard_process+0x18>
		return ret_val;
    9e0e:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    9e10:	4620      	mov	r0, r4
    9e12:	b009      	add	sp, #36	; 0x24
    9e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    9e18:	4610      	mov	r0, r2
    9e1a:	f01d ff8e 	bl	27d3a <z_shell_has_wildcard>
    9e1e:	2800      	cmp	r0, #0
    9e20:	d0f5      	beq.n	9e0e <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    9e22:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    9e26:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    9e28:	2402      	movs	r4, #2
    9e2a:	e024      	b.n	9e76 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    9e2c:	465c      	mov	r4, fp
    9e2e:	e03c      	b.n	9eaa <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    9e30:	4629      	mov	r1, r5
    9e32:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    9e36:	f01e fc1b 	bl	28670 <strstr>
	if (!completion_addr) {
    9e3a:	4606      	mov	r6, r0
    9e3c:	2800      	cmp	r0, #0
    9e3e:	d04c      	beq.n	9eda <z_shell_wildcard_process+0xda>
    9e40:	f01e fc60 	bl	28704 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    9e44:	b282      	uxth	r2, r0
    9e46:	1c60      	adds	r0, r4, #1
    9e48:	3201      	adds	r2, #1
    9e4a:	4631      	mov	r1, r6
    9e4c:	4430      	add	r0, r6
    9e4e:	f01e fc97 	bl	28780 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    9e52:	4622      	mov	r2, r4
    9e54:	4659      	mov	r1, fp
    9e56:	4630      	mov	r0, r6
    9e58:	f01e fcaa 	bl	287b0 <memcpy>
	completion_addr[cmd_len] = ' ';
    9e5c:	f04f 0320 	mov.w	r3, #32
    9e60:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    9e62:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    9e66:	3001      	adds	r0, #1
    9e68:	4404      	add	r4, r0
    9e6a:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    9e6e:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    9e72:	2400      	movs	r4, #0
    9e74:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    9e76:	1c4b      	adds	r3, r1, #1
    9e78:	aa03      	add	r2, sp, #12
    9e7a:	4648      	mov	r0, r9
    9e7c:	9301      	str	r3, [sp, #4]
    9e7e:	f7ff fc4b 	bl	9718 <z_shell_cmd_get>
    9e82:	4606      	mov	r6, r0
    9e84:	b1e8      	cbz	r0, 9ec2 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    9e86:	6831      	ldr	r1, [r6, #0]
    9e88:	2200      	movs	r2, #0
    9e8a:	4628      	mov	r0, r5
    9e8c:	f01c fd9b 	bl	269c6 <fnmatch>
    9e90:	2800      	cmp	r0, #0
    9e92:	d1ef      	bne.n	9e74 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    9e94:	f8d6 b000 	ldr.w	fp, [r6]
    9e98:	f8d7 a008 	ldr.w	sl, [r7, #8]
    9e9c:	f1bb 0f00 	cmp.w	fp, #0
    9ea0:	d0c4      	beq.n	9e2c <z_shell_wildcard_process+0x2c>
    9ea2:	4658      	mov	r0, fp
    9ea4:	f01e fc2e 	bl	28704 <strlen>
    9ea8:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    9eaa:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    9eae:	4422      	add	r2, r4
    9eb0:	2aff      	cmp	r2, #255	; 0xff
    9eb2:	ddbd      	ble.n	9e30 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    9eb4:	4a0a      	ldr	r2, [pc, #40]	; (9ee0 <z_shell_wildcard_process+0xe0>)
    9eb6:	462b      	mov	r3, r5
    9eb8:	2103      	movs	r1, #3
    9eba:	4638      	mov	r0, r7
    9ebc:	f01d fbd1 	bl	27662 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    9ec0:	2401      	movs	r4, #1
	if (cnt > 0) {
    9ec2:	f1b8 0f00 	cmp.w	r8, #0
    9ec6:	d0a3      	beq.n	9e10 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    9ec8:	68b8      	ldr	r0, [r7, #8]
    9eca:	462a      	mov	r2, r5
    9ecc:	f100 0140 	add.w	r1, r0, #64	; 0x40
    9ed0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9ed4:	f01d f93d 	bl	27152 <z_shell_pattern_remove>
	return ret_val;
    9ed8:	e79a      	b.n	9e10 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    9eda:	2402      	movs	r4, #2
    9edc:	e7f1      	b.n	9ec2 <z_shell_wildcard_process+0xc2>
    9ede:	bf00      	nop
    9ee0:	0002f41e 	.word	0x0002f41e

00009ee4 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9ee4:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <class_handler+0x34>)
{
    9ee6:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9ee8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9eea:	4e0c      	ldr	r6, [pc, #48]	; (9f1c <class_handler+0x38>)
    9eec:	4b0c      	ldr	r3, [pc, #48]	; (9f20 <class_handler+0x3c>)
    9eee:	42b3      	cmp	r3, r6
    9ef0:	d303      	bcc.n	9efa <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    9ef2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9ef6:	bcf0      	pop	{r4, r5, r6, r7}
    9ef8:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    9efa:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9efc:	42bd      	cmp	r5, r7
    9efe:	d309      	bcc.n	9f14 <class_handler+0x30>
		if (iface->class_handler &&
    9f00:	691c      	ldr	r4, [r3, #16]
    9f02:	b13c      	cbz	r4, 9f14 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    9f04:	f895 c002 	ldrb.w	ip, [r5, #2]
    9f08:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    9f0a:	45ac      	cmp	ip, r5
    9f0c:	d102      	bne.n	9f14 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    9f0e:	4623      	mov	r3, r4
}
    9f10:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    9f12:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9f14:	3324      	adds	r3, #36	; 0x24
    9f16:	e7ea      	b.n	9eee <class_handler+0xa>
    9f18:	20003d90 	.word	0x20003d90
    9f1c:	20000de4 	.word	0x20000de4
    9f20:	20000dc0 	.word	0x20000dc0

00009f24 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    9f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9f28:	4c13      	ldr	r4, [pc, #76]	; (9f78 <custom_handler+0x54>)
    9f2a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9f7c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9f2e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9f80 <custom_handler+0x5c>
{
    9f32:	4605      	mov	r5, r0
    9f34:	460e      	mov	r6, r1
    9f36:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9f38:	4544      	cmp	r4, r8
    9f3a:	d303      	bcc.n	9f44 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    9f3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    9f44:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9f46:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    9f4a:	429a      	cmp	r2, r3
    9f4c:	d312      	bcc.n	9f74 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    9f4e:	69a3      	ldr	r3, [r4, #24]
    9f50:	b183      	cbz	r3, 9f74 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    9f52:	7890      	ldrb	r0, [r2, #2]
    9f54:	7929      	ldrb	r1, [r5, #4]
    9f56:	4288      	cmp	r0, r1
    9f58:	d105      	bne.n	9f66 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    9f5a:	463a      	mov	r2, r7
    9f5c:	4631      	mov	r1, r6
    9f5e:	4628      	mov	r0, r5
}
    9f60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    9f64:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    9f66:	7952      	ldrb	r2, [r2, #5]
    9f68:	2a01      	cmp	r2, #1
    9f6a:	d103      	bne.n	9f74 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    9f6c:	463a      	mov	r2, r7
    9f6e:	4631      	mov	r1, r6
    9f70:	4628      	mov	r0, r5
    9f72:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9f74:	3424      	adds	r4, #36	; 0x24
    9f76:	e7df      	b.n	9f38 <custom_handler+0x14>
    9f78:	20000dc0 	.word	0x20000dc0
    9f7c:	20000de4 	.word	0x20000de4
    9f80:	20003d90 	.word	0x20003d90

00009f84 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    9f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9f88:	4c0b      	ldr	r4, [pc, #44]	; (9fb8 <vendor_handler+0x34>)
    9f8a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 9fbc <vendor_handler+0x38>
{
    9f8e:	4605      	mov	r5, r0
    9f90:	460e      	mov	r6, r1
    9f92:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9f94:	4544      	cmp	r4, r8
    9f96:	d302      	bcc.n	9f9e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    9f98:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9f9c:	e009      	b.n	9fb2 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    9f9e:	6963      	ldr	r3, [r4, #20]
    9fa0:	b90b      	cbnz	r3, 9fa6 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9fa2:	3424      	adds	r4, #36	; 0x24
    9fa4:	e7f6      	b.n	9f94 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    9fa6:	463a      	mov	r2, r7
    9fa8:	4631      	mov	r1, r6
    9faa:	4628      	mov	r0, r5
    9fac:	4798      	blx	r3
    9fae:	2800      	cmp	r0, #0
    9fb0:	d1f7      	bne.n	9fa2 <vendor_handler+0x1e>
}
    9fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fb6:	bf00      	nop
    9fb8:	20000dc0 	.word	0x20000dc0
    9fbc:	20000de4 	.word	0x20000de4

00009fc0 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    9fc0:	4802      	ldr	r0, [pc, #8]	; (9fcc <usb_reset_alt_setting+0xc>)
    9fc2:	2208      	movs	r2, #8
    9fc4:	2100      	movs	r1, #0
    9fc6:	f01e bbfe 	b.w	287c6 <memset>
    9fca:	bf00      	nop
    9fcc:	20003e4b 	.word	0x20003e4b

00009fd0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    9fd0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9fd2:	4b0b      	ldr	r3, [pc, #44]	; (a000 <is_ep_valid.part.0+0x30>)
    9fd4:	4c0b      	ldr	r4, [pc, #44]	; (a004 <is_ep_valid.part.0+0x34>)
    9fd6:	42a3      	cmp	r3, r4
    9fd8:	d301      	bcc.n	9fde <is_ep_valid.part.0+0xe>
	return false;
    9fda:	2000      	movs	r0, #0
}
    9fdc:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    9fde:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    9fe0:	7f1e      	ldrb	r6, [r3, #28]
    9fe2:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    9fe4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    9fe6:	b2d5      	uxtb	r5, r2
    9fe8:	42ae      	cmp	r6, r5
    9fea:	d801      	bhi.n	9ff0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9fec:	3324      	adds	r3, #36	; 0x24
    9fee:	e7f2      	b.n	9fd6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    9ff0:	3201      	adds	r2, #1
    9ff2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    9ff6:	4285      	cmp	r5, r0
    9ff8:	d1f5      	bne.n	9fe6 <is_ep_valid.part.0+0x16>
				return true;
    9ffa:	2001      	movs	r0, #1
    9ffc:	e7ee      	b.n	9fdc <is_ep_valid.part.0+0xc>
    9ffe:	bf00      	nop
    a000:	20000dc0 	.word	0x20000dc0
    a004:	20000de4 	.word	0x20000de4

0000a008 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    a008:	4809      	ldr	r0, [pc, #36]	; (a030 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    a00a:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    a00c:	7803      	ldrb	r3, [r0, #0]
    a00e:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    a012:	330a      	adds	r3, #10
    a014:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    a018:	b13b      	cbz	r3, a02a <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    a01a:	f100 0208 	add.w	r2, r0, #8
    a01e:	f100 0110 	add.w	r1, r0, #16
    a022:	4798      	blx	r3
    a024:	43c0      	mvns	r0, r0
    a026:	0fc0      	lsrs	r0, r0, #31
}
    a028:	bd08      	pop	{r3, pc}
		return false;
    a02a:	4618      	mov	r0, r3
    a02c:	e7fc      	b.n	a028 <usb_handle_request.constprop.0+0x20>
    a02e:	bf00      	nop
    a030:	20003d90 	.word	0x20003d90

0000a034 <set_endpoint>:
{
    a034:	b590      	push	{r4, r7, lr}
    a036:	b085      	sub	sp, #20
    a038:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    a03a:	7883      	ldrb	r3, [r0, #2]
    a03c:	723b      	strb	r3, [r7, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    a03e:	7903      	ldrb	r3, [r0, #4]
    a040:	7942      	ldrb	r2, [r0, #5]
    a042:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a046:	817b      	strh	r3, [r7, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    a048:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    a04a:	f107 0008 	add.w	r0, r7, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    a04e:	f003 0303 	and.w	r3, r3, #3
    a052:	733b      	strb	r3, [r7, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    a054:	f015 fea2 	bl	1fd9c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    a058:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a05c:	d138      	bne.n	a0d0 <set_endpoint+0x9c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    a05e:	4831      	ldr	r0, [pc, #196]	; (a124 <set_endpoint+0xf0>)
    a060:	6803      	ldr	r3, [r0, #0]
    a062:	f013 0f06 	tst.w	r3, #6
    a066:	d011      	beq.n	a08c <set_endpoint+0x58>
    a068:	466c      	mov	r4, sp
    a06a:	b088      	sub	sp, #32
    a06c:	466a      	mov	r2, sp
    a06e:	492e      	ldr	r1, [pc, #184]	; (a128 <set_endpoint+0xf4>)
    a070:	7a3b      	ldrb	r3, [r7, #8]
    a072:	6111      	str	r1, [r2, #16]
    a074:	492d      	ldr	r1, [pc, #180]	; (a12c <set_endpoint+0xf8>)
    a076:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a07a:	2304      	movs	r3, #4
    a07c:	f842 3f0c 	str.w	r3, [r2, #12]!
    a080:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    a084:	607b      	str	r3, [r7, #4]
    a086:	f01d fe9c 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a08a:	46a5      	mov	sp, r4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    a08c:	7a38      	ldrb	r0, [r7, #8]
    a08e:	f015 ff3d 	bl	1ff0c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    a092:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a096:	d138      	bne.n	a10a <set_endpoint+0xd6>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    a098:	4822      	ldr	r0, [pc, #136]	; (a124 <set_endpoint+0xf0>)
    a09a:	6803      	ldr	r3, [r0, #0]
    a09c:	f013 0f06 	tst.w	r3, #6
    a0a0:	d011      	beq.n	a0c6 <set_endpoint+0x92>
    a0a2:	466c      	mov	r4, sp
    a0a4:	b088      	sub	sp, #32
    a0a6:	466a      	mov	r2, sp
    a0a8:	4921      	ldr	r1, [pc, #132]	; (a130 <set_endpoint+0xfc>)
    a0aa:	7a3b      	ldrb	r3, [r7, #8]
    a0ac:	6111      	str	r1, [r2, #16]
    a0ae:	491f      	ldr	r1, [pc, #124]	; (a12c <set_endpoint+0xf8>)
    a0b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a0b4:	2304      	movs	r3, #4
    a0b6:	f842 3f0c 	str.w	r3, [r2, #12]!
    a0ba:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    a0be:	607b      	str	r3, [r7, #4]
    a0c0:	f01d fe7f 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a0c4:	46a5      	mov	sp, r4
	usb_dev.configured = true;
    a0c6:	4b1b      	ldr	r3, [pc, #108]	; (a134 <set_endpoint+0x100>)
    a0c8:	2001      	movs	r0, #1
    a0ca:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    a0ce:	e006      	b.n	a0de <set_endpoint+0xaa>
	} else if (ret) {
    a0d0:	2800      	cmp	r0, #0
    a0d2:	d0db      	beq.n	a08c <set_endpoint+0x58>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    a0d4:	4813      	ldr	r0, [pc, #76]	; (a124 <set_endpoint+0xf0>)
    a0d6:	6803      	ldr	r3, [r0, #0]
    a0d8:	075a      	lsls	r2, r3, #29
    a0da:	d103      	bne.n	a0e4 <set_endpoint+0xb0>
		return false;
    a0dc:	2000      	movs	r0, #0
}
    a0de:	3714      	adds	r7, #20
    a0e0:	46bd      	mov	sp, r7
    a0e2:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    a0e4:	466c      	mov	r4, sp
    a0e6:	7a3b      	ldrb	r3, [r7, #8]
    a0e8:	4913      	ldr	r1, [pc, #76]	; (a138 <set_endpoint+0x104>)
    a0ea:	b088      	sub	sp, #32
    a0ec:	466a      	mov	r2, sp
    a0ee:	6111      	str	r1, [r2, #16]
    a0f0:	490e      	ldr	r1, [pc, #56]	; (a12c <set_endpoint+0xf8>)
    a0f2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a0f6:	2304      	movs	r3, #4
    a0f8:	607b      	str	r3, [r7, #4]
    a0fa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a0fe:	f842 3f0c 	str.w	r3, [r2, #12]!
    a102:	f01d fe5e 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a106:	46a5      	mov	sp, r4
    a108:	e7e8      	b.n	a0dc <set_endpoint+0xa8>
	} else if (ret) {
    a10a:	2800      	cmp	r0, #0
    a10c:	d0db      	beq.n	a0c6 <set_endpoint+0x92>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    a10e:	4805      	ldr	r0, [pc, #20]	; (a124 <set_endpoint+0xf0>)
    a110:	6803      	ldr	r3, [r0, #0]
    a112:	075b      	lsls	r3, r3, #29
    a114:	d0e2      	beq.n	a0dc <set_endpoint+0xa8>
    a116:	466c      	mov	r4, sp
    a118:	b088      	sub	sp, #32
    a11a:	7a3b      	ldrb	r3, [r7, #8]
    a11c:	4907      	ldr	r1, [pc, #28]	; (a13c <set_endpoint+0x108>)
    a11e:	466a      	mov	r2, sp
    a120:	e7e5      	b.n	a0ee <set_endpoint+0xba>
    a122:	bf00      	nop
    a124:	200009f4 	.word	0x200009f4
    a128:	0002f470 	.word	0x0002f470
    a12c:	0002f682 	.word	0x0002f682
    a130:	0002f4bf 	.word	0x0002f4bf
    a134:	20003d90 	.word	0x20003d90
    a138:	0002f497 	.word	0x0002f497
    a13c:	0002f4e3 	.word	0x0002f4e3

0000a140 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    a140:	2804      	cmp	r0, #4
{
    a142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a146:	f8df 8088 	ldr.w	r8, [pc, #136]	; a1d0 <forward_status_cb+0x90>
    a14a:	4604      	mov	r4, r0
    a14c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    a14e:	d10e      	bne.n	a16e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    a150:	f7ff ff36 	bl	9fc0 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    a154:	f8df 907c 	ldr.w	r9, [pc, #124]	; a1d4 <forward_status_cb+0x94>
    a158:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    a15c:	b15b      	cbz	r3, a176 <forward_status_cb+0x36>
			usb_cancel_transfers();
    a15e:	f000 ffc3 	bl	b0e8 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    a162:	2c04      	cmp	r4, #4
    a164:	d001      	beq.n	a16a <forward_status_cb+0x2a>
    a166:	2c01      	cmp	r4, #1
    a168:	d105      	bne.n	a176 <forward_status_cb+0x36>
    a16a:	4d1b      	ldr	r5, [pc, #108]	; (a1d8 <forward_status_cb+0x98>)
    a16c:	e016      	b.n	a19c <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    a16e:	2805      	cmp	r0, #5
    a170:	d0f0      	beq.n	a154 <forward_status_cb+0x14>
    a172:	2801      	cmp	r0, #1
    a174:	d0ee      	beq.n	a154 <forward_status_cb+0x14>
    a176:	4d18      	ldr	r5, [pc, #96]	; (a1d8 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a178:	4545      	cmp	r5, r8
    a17a:	d31e      	bcc.n	a1ba <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    a17c:	4b15      	ldr	r3, [pc, #84]	; (a1d4 <forward_status_cb+0x94>)
    a17e:	6a1b      	ldr	r3, [r3, #32]
    a180:	b31b      	cbz	r3, a1ca <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    a182:	4631      	mov	r1, r6
    a184:	4620      	mov	r0, r4
}
    a186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    a18a:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    a18c:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a190:	2700      	movs	r7, #0
    a192:	7f2a      	ldrb	r2, [r5, #28]
    a194:	b2fb      	uxtb	r3, r7
    a196:	429a      	cmp	r2, r3
    a198:	d803      	bhi.n	a1a2 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a19a:	3524      	adds	r5, #36	; 0x24
    a19c:	4545      	cmp	r5, r8
    a19e:	d3f5      	bcc.n	a18c <forward_status_cb+0x4c>
    a1a0:	e007      	b.n	a1b2 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    a1a2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    a1a6:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    a1a8:	7918      	ldrb	r0, [r3, #4]
    a1aa:	f015 fed9 	bl	1ff60 <usb_dc_ep_disable>
			if (ret < 0) {
    a1ae:	2800      	cmp	r0, #0
    a1b0:	daef      	bge.n	a192 <forward_status_cb+0x52>
				usb_dev.configured = false;
    a1b2:	2300      	movs	r3, #0
    a1b4:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    a1b8:	e7dd      	b.n	a176 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    a1ba:	68eb      	ldr	r3, [r5, #12]
    a1bc:	b11b      	cbz	r3, a1c6 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    a1be:	4632      	mov	r2, r6
    a1c0:	4621      	mov	r1, r4
    a1c2:	4628      	mov	r0, r5
    a1c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a1c6:	3524      	adds	r5, #36	; 0x24
    a1c8:	e7d6      	b.n	a178 <forward_status_cb+0x38>
}
    a1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1ce:	bf00      	nop
    a1d0:	20000de4 	.word	0x20000de4
    a1d4:	20003d90 	.word	0x20003d90
    a1d8:	20000dc0 	.word	0x20000dc0

0000a1dc <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1e0:	b082      	sub	sp, #8
	uint8_t ep = setup->wIndex;
    a1e2:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    a1e4:	af00      	add	r7, sp, #0
	if (USB_EP_GET_IDX(ep) == 0) {
    a1e6:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    a1e8:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    a1ea:	70fc      	strb	r4, [r7, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    a1ec:	d007      	beq.n	a1fe <usb_halt_endpoint_req.isra.0+0x22>
    a1ee:	4620      	mov	r0, r4
    a1f0:	f7ff feee 	bl	9fd0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    a1f4:	b338      	cbz	r0, a246 <usb_halt_endpoint_req.isra.0+0x6a>
	return (usb_dev.configuration != 0);
    a1f6:	4b24      	ldr	r3, [pc, #144]	; (a288 <usb_halt_endpoint_req.isra.0+0xac>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    a1f8:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    a1fc:	b318      	cbz	r0, a246 <usb_halt_endpoint_req.isra.0+0x6a>
			LOG_INF("Set halt ep 0x%02x", ep);
    a1fe:	4823      	ldr	r0, [pc, #140]	; (a28c <usb_halt_endpoint_req.isra.0+0xb0>)
    a200:	4e21      	ldr	r6, [pc, #132]	; (a288 <usb_halt_endpoint_req.isra.0+0xac>)
    a202:	6803      	ldr	r3, [r0, #0]
    a204:	f003 0307 	and.w	r3, r3, #7
		if (halt) {
    a208:	b30d      	cbz	r5, a24e <usb_halt_endpoint_req.isra.0+0x72>
			LOG_INF("Set halt ep 0x%02x", ep);
    a20a:	2b02      	cmp	r3, #2
    a20c:	d910      	bls.n	a230 <usb_halt_endpoint_req.isra.0+0x54>
    a20e:	46e8      	mov	r8, sp
    a210:	b088      	sub	sp, #32
    a212:	466a      	mov	r2, sp
    a214:	4b1e      	ldr	r3, [pc, #120]	; (a290 <usb_halt_endpoint_req.isra.0+0xb4>)
    a216:	6113      	str	r3, [r2, #16]
    a218:	4b1e      	ldr	r3, [pc, #120]	; (a294 <usb_halt_endpoint_req.isra.0+0xb8>)
    a21a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a21e:	2304      	movs	r3, #4
    a220:	f842 3f0c 	str.w	r3, [r2, #12]!
    a224:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    a228:	607b      	str	r3, [r7, #4]
    a22a:	f01d fdca 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a22e:	46c5      	mov	sp, r8
			usb_dc_ep_set_stall(ep);
    a230:	78f8      	ldrb	r0, [r7, #3]
    a232:	f015 fdef 	bl	1fe14 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    a236:	69f3      	ldr	r3, [r6, #28]
    a238:	b90b      	cbnz	r3, a23e <usb_halt_endpoint_req.isra.0+0x62>
		return true;
    a23a:	2001      	movs	r0, #1
    a23c:	e003      	b.n	a246 <usb_halt_endpoint_req.isra.0+0x6a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    a23e:	2008      	movs	r0, #8
    a240:	1cf9      	adds	r1, r7, #3
    a242:	4798      	blx	r3
		return true;
    a244:	4628      	mov	r0, r5
}
    a246:	3708      	adds	r7, #8
    a248:	46bd      	mov	sp, r7
    a24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    a24e:	2b02      	cmp	r3, #2
    a250:	d910      	bls.n	a274 <usb_halt_endpoint_req.isra.0+0x98>
    a252:	466d      	mov	r5, sp
    a254:	b088      	sub	sp, #32
    a256:	466a      	mov	r2, sp
    a258:	4b0f      	ldr	r3, [pc, #60]	; (a298 <usb_halt_endpoint_req.isra.0+0xbc>)
    a25a:	6113      	str	r3, [r2, #16]
    a25c:	4b0d      	ldr	r3, [pc, #52]	; (a294 <usb_halt_endpoint_req.isra.0+0xb8>)
    a25e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a262:	2304      	movs	r3, #4
    a264:	f842 3f0c 	str.w	r3, [r2, #12]!
    a268:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    a26c:	607b      	str	r3, [r7, #4]
    a26e:	f01d fda8 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a272:	46ad      	mov	sp, r5
			usb_dc_ep_clear_stall(ep);
    a274:	78f8      	ldrb	r0, [r7, #3]
    a276:	f015 fe0d 	bl	1fe94 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    a27a:	69f3      	ldr	r3, [r6, #28]
    a27c:	2b00      	cmp	r3, #0
    a27e:	d0dc      	beq.n	a23a <usb_halt_endpoint_req.isra.0+0x5e>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    a280:	1cf9      	adds	r1, r7, #3
    a282:	2009      	movs	r0, #9
    a284:	4798      	blx	r3
    a286:	e7d8      	b.n	a23a <usb_halt_endpoint_req.isra.0+0x5e>
    a288:	20003d90 	.word	0x20003d90
    a28c:	200009f4 	.word	0x200009f4
    a290:	0002f508 	.word	0x0002f508
    a294:	0002f65d 	.word	0x0002f65d
    a298:	0002f51f 	.word	0x0002f51f

0000a29c <usb_handle_standard_request>:
{
    a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    a2a0:	4e9d      	ldr	r6, [pc, #628]	; (a518 <usb_handle_standard_request+0x27c>)
{
    a2a2:	b085      	sub	sp, #20
	if (usb_dev.custom_req_handler &&
    a2a4:	69b3      	ldr	r3, [r6, #24]
{
    a2a6:	af00      	add	r7, sp, #0
    a2a8:	4604      	mov	r4, r0
    a2aa:	4688      	mov	r8, r1
    a2ac:	4691      	mov	r9, r2
	if (usb_dev.custom_req_handler &&
    a2ae:	b963      	cbnz	r3, a2ca <usb_handle_standard_request+0x2e>
	switch (setup->RequestType.recipient) {
    a2b0:	7820      	ldrb	r0, [r4, #0]
    a2b2:	f000 001f 	and.w	r0, r0, #31
    a2b6:	2801      	cmp	r0, #1
    a2b8:	f000 80ac 	beq.w	a414 <usb_handle_standard_request+0x178>
    a2bc:	2802      	cmp	r0, #2
    a2be:	f000 8159 	beq.w	a574 <usb_handle_standard_request+0x2d8>
    a2c2:	b138      	cbz	r0, a2d4 <usb_handle_standard_request+0x38>
		switch (setup->bRequest) {
    a2c4:	f06f 0015 	mvn.w	r0, #21
    a2c8:	e099      	b.n	a3fe <usb_handle_standard_request+0x162>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    a2ca:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    a2cc:	2800      	cmp	r0, #0
    a2ce:	d1ef      	bne.n	a2b0 <usb_handle_standard_request+0x14>
	int rc = 0;
    a2d0:	2000      	movs	r0, #0
    a2d2:	e094      	b.n	a3fe <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    a2d4:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    a2d8:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    a2da:	2a00      	cmp	r2, #0
    a2dc:	da32      	bge.n	a344 <usb_handle_standard_request+0xa8>
		switch (setup->bRequest) {
    a2de:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    a2e0:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    a2e4:	d010      	beq.n	a308 <usb_handle_standard_request+0x6c>
    a2e6:	2b08      	cmp	r3, #8
    a2e8:	d025      	beq.n	a336 <usb_handle_standard_request+0x9a>
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d1ea      	bne.n	a2c4 <usb_handle_standard_request+0x28>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    a2ee:	2101      	movs	r1, #1
	data[1] = 0U;
    a2f0:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    a2f2:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    a2f4:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    a2f8:	2900      	cmp	r1, #0
    a2fa:	bf18      	it	ne
    a2fc:	2302      	movne	r3, #2
    a2fe:	f043 0301 	orr.w	r3, r3, #1
    a302:	7013      	strb	r3, [r2, #0]
		*len = 2;
    a304:	2302      	movs	r3, #2
    a306:	e01a      	b.n	a33e <usb_handle_standard_request+0xa2>
			return usb_get_descriptor(setup, len, data_buf);
    a308:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    a30a:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    a30c:	1f11      	subs	r1, r2, #4
    a30e:	2901      	cmp	r1, #1
    a310:	d9d8      	bls.n	a2c4 <usb_handle_standard_request+0x28>
    a312:	2a07      	cmp	r2, #7
    a314:	d8d6      	bhi.n	a2c4 <usb_handle_standard_request+0x28>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    a316:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    a318:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    a31a:	781c      	ldrb	r4, [r3, #0]
    a31c:	2c00      	cmp	r4, #0
    a31e:	d0d1      	beq.n	a2c4 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == type) {
    a320:	785d      	ldrb	r5, [r3, #1]
    a322:	4295      	cmp	r5, r2
    a324:	d103      	bne.n	a32e <usb_handle_standard_request+0x92>
			if (cur_index == index) {
    a326:	4281      	cmp	r1, r0
    a328:	f000 8159 	beq.w	a5de <usb_handle_standard_request+0x342>
			cur_index++;
    a32c:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    a32e:	4423      	add	r3, r4
    a330:	e7f3      	b.n	a31a <usb_handle_standard_request+0x7e>
			*len = p[DESC_bLength];
    a332:	781b      	ldrb	r3, [r3, #0]
    a334:	e159      	b.n	a5ea <usb_handle_standard_request+0x34e>
			data[0] = usb_dev.configuration;
    a336:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    a33a:	7013      	strb	r3, [r2, #0]
			*len = 1;
    a33c:	2301      	movs	r3, #1
		*len = 2;
    a33e:	f8c8 3000 	str.w	r3, [r8]
		return true;
    a342:	e05c      	b.n	a3fe <usb_handle_standard_request+0x162>
		switch (setup->bRequest) {
    a344:	3b01      	subs	r3, #1
    a346:	2b08      	cmp	r3, #8
    a348:	d8bc      	bhi.n	a2c4 <usb_handle_standard_request+0x28>
    a34a:	a201      	add	r2, pc, #4	; (adr r2, a350 <usb_handle_standard_request+0xb4>)
    a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a350:	0000a3f1 	.word	0x0000a3f1
    a354:	0000a2c5 	.word	0x0000a2c5
    a358:	0000a407 	.word	0x0000a407
    a35c:	0000a2c5 	.word	0x0000a2c5
    a360:	0000a375 	.word	0x0000a375
    a364:	0000a2c5 	.word	0x0000a2c5
    a368:	0000a2c5 	.word	0x0000a2c5
    a36c:	0000a2c5 	.word	0x0000a2c5
    a370:	0000a381 	.word	0x0000a381
			return !usb_dc_set_address(setup->wValue);
    a374:	78a0      	ldrb	r0, [r4, #2]
    a376:	f015 fcb7 	bl	1fce8 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    a37a:	2800      	cmp	r0, #0
    a37c:	d0a8      	beq.n	a2d0 <usb_handle_standard_request+0x34>
    a37e:	e7a1      	b.n	a2c4 <usb_handle_standard_request+0x28>
	if (setup->wValue == 0U) {
    a380:	8865      	ldrh	r5, [r4, #2]
    a382:	b155      	cbz	r5, a39a <usb_handle_standard_request+0xfe>
	uint8_t cur_config = 0xFF;
    a384:	f04f 09ff 	mov.w	r9, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    a388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	bool found = false;
    a38c:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    a38e:	46ca      	mov	sl, r9
	while (p[DESC_bLength] != 0U) {
    a390:	f898 5000 	ldrb.w	r5, [r8]
    a394:	b96d      	cbnz	r5, a3b2 <usb_handle_standard_request+0x116>
	if (found) {
    a396:	2800      	cmp	r0, #0
    a398:	d094      	beq.n	a2c4 <usb_handle_standard_request+0x28>
		usb_reset_alt_setting();
    a39a:	f7ff fe11 	bl	9fc0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    a39e:	8863      	ldrh	r3, [r4, #2]
    a3a0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    a3a4:	69f3      	ldr	r3, [r6, #28]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d092      	beq.n	a2d0 <usb_handle_standard_request+0x34>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    a3aa:	495c      	ldr	r1, [pc, #368]	; (a51c <usb_handle_standard_request+0x280>)
    a3ac:	2003      	movs	r0, #3
    a3ae:	4798      	blx	r3
    a3b0:	e78e      	b.n	a2d0 <usb_handle_standard_request+0x34>
		switch (p[DESC_bDescriptorType]) {
    a3b2:	f898 3001 	ldrb.w	r3, [r8, #1]
    a3b6:	2b04      	cmp	r3, #4
    a3b8:	d00d      	beq.n	a3d6 <usb_handle_standard_request+0x13a>
    a3ba:	2b05      	cmp	r3, #5
    a3bc:	d00e      	beq.n	a3dc <usb_handle_standard_request+0x140>
    a3be:	2b02      	cmp	r3, #2
    a3c0:	d105      	bne.n	a3ce <usb_handle_standard_request+0x132>
			cur_config = p[CONF_DESC_bConfigurationValue];
    a3c2:	f898 9005 	ldrb.w	r9, [r8, #5]
			if (cur_config == setup->wValue) {
    a3c6:	8862      	ldrh	r2, [r4, #2]
				found = true;
    a3c8:	454a      	cmp	r2, r9
    a3ca:	bf08      	it	eq
    a3cc:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    a3ce:	f898 3000 	ldrb.w	r3, [r8]
    a3d2:	4498      	add	r8, r3
    a3d4:	e7dc      	b.n	a390 <usb_handle_standard_request+0xf4>
			cur_alt_setting =
    a3d6:	f898 a003 	ldrb.w	sl, [r8, #3]
			break;
    a3da:	e7f8      	b.n	a3ce <usb_handle_standard_request+0x132>
			if ((cur_config != setup->wValue) ||
    a3dc:	8863      	ldrh	r3, [r4, #2]
    a3de:	454b      	cmp	r3, r9
    a3e0:	d1f5      	bne.n	a3ce <usb_handle_standard_request+0x132>
    a3e2:	f1ba 0f00 	cmp.w	sl, #0
    a3e6:	d1f2      	bne.n	a3ce <usb_handle_standard_request+0x132>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    a3e8:	4640      	mov	r0, r8
    a3ea:	f7ff fe23 	bl	a034 <set_endpoint>
			break;
    a3ee:	e7ee      	b.n	a3ce <usb_handle_standard_request+0x132>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    a3f0:	8863      	ldrh	r3, [r4, #2]
    a3f2:	2b01      	cmp	r3, #1
    a3f4:	f47f af66 	bne.w	a2c4 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = false;
    a3f8:	2000      	movs	r0, #0
    a3fa:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    a3fe:	3714      	adds	r7, #20
    a400:	46bd      	mov	sp, r7
    a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    a406:	8863      	ldrh	r3, [r4, #2]
    a408:	2b01      	cmp	r3, #1
    a40a:	f47f af5b 	bne.w	a2c4 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = true;
    a40e:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    a412:	e75d      	b.n	a2d0 <usb_handle_standard_request+0x34>
	if (!is_device_configured() ||
    a414:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    a418:	2b00      	cmp	r3, #0
    a41a:	f43f af53 	beq.w	a2c4 <usb_handle_standard_request+0x28>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    a41e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    a420:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    a424:	7920      	ldrb	r0, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    a426:	462b      	mov	r3, r5
	while (p[DESC_bLength] != 0U) {
    a428:	781a      	ldrb	r2, [r3, #0]
    a42a:	2a00      	cmp	r2, #0
    a42c:	f43f af4a 	beq.w	a2c4 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    a430:	7859      	ldrb	r1, [r3, #1]
    a432:	2902      	cmp	r1, #2
    a434:	d104      	bne.n	a440 <usb_handle_standard_request+0x1a4>
			if (interface < cfg_descr->bNumInterfaces) {
    a436:	f893 e004 	ldrb.w	lr, [r3, #4]
    a43a:	4586      	cmp	lr, r0
    a43c:	f200 80d8 	bhi.w	a5f0 <usb_handle_standard_request+0x354>
		p += p[DESC_bLength];
    a440:	4413      	add	r3, r2
    a442:	e7f1      	b.n	a428 <usb_handle_standard_request+0x18c>
			data[0] = 0U;
    a444:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    a446:	7050      	strb	r0, [r2, #1]
			*len = 2;
    a448:	f8c8 1000 	str.w	r1, [r8]
			return true;
    a44c:	e7d7      	b.n	a3fe <usb_handle_standard_request+0x162>
		p += p[DESC_bLength];
    a44e:	440d      	add	r5, r1
    a450:	e0dc      	b.n	a60c <usb_handle_standard_request+0x370>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    a452:	280b      	cmp	r0, #11
    a454:	f47f af36 	bne.w	a2c4 <usb_handle_standard_request+0x28>
	bool ret = false;
    a458:	2300      	movs	r3, #0
	uint8_t cur_iface = 0xFF;
    a45a:	f04f 0bff 	mov.w	fp, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    a45e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; a520 <usb_handle_standard_request+0x284>
	uint8_t cur_alt_setting = 0xFF;
    a462:	46d8      	mov	r8, fp
	const uint8_t *if_desc = NULL;
    a464:	469a      	mov	sl, r3
    a466:	e006      	b.n	a476 <usb_handle_standard_request+0x1da>
		switch (p[DESC_bDescriptorType]) {
    a468:	786a      	ldrb	r2, [r5, #1]
    a46a:	2a04      	cmp	r2, #4
    a46c:	d011      	beq.n	a492 <usb_handle_standard_request+0x1f6>
    a46e:	2a05      	cmp	r2, #5
    a470:	d024      	beq.n	a4bc <usb_handle_standard_request+0x220>
		p += p[DESC_bLength];
    a472:	782a      	ldrb	r2, [r5, #0]
    a474:	4415      	add	r5, r2
	while (p[DESC_bLength] != 0U) {
    a476:	782a      	ldrb	r2, [r5, #0]
    a478:	2a00      	cmp	r2, #0
    a47a:	d1f5      	bne.n	a468 <usb_handle_standard_request+0x1cc>
	if (usb_dev.status_callback) {
    a47c:	69f2      	ldr	r2, [r6, #28]
    a47e:	b122      	cbz	r2, a48a <usb_handle_standard_request+0x1ee>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    a480:	4651      	mov	r1, sl
    a482:	2007      	movs	r0, #7
    a484:	607b      	str	r3, [r7, #4]
    a486:	4790      	blx	r2
    a488:	687b      	ldr	r3, [r7, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    a48a:	2b00      	cmp	r3, #0
    a48c:	f47f af20 	bne.w	a2d0 <usb_handle_standard_request+0x34>
    a490:	e718      	b.n	a2c4 <usb_handle_standard_request+0x28>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    a492:	f895 b002 	ldrb.w	fp, [r5, #2]
			if (cur_iface == setup->wIndex &&
    a496:	88a1      	ldrh	r1, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    a498:	f895 8003 	ldrb.w	r8, [r5, #3]
			if (cur_iface == setup->wIndex &&
    a49c:	458b      	cmp	fp, r1
    a49e:	465a      	mov	r2, fp
    a4a0:	d1e7      	bne.n	a472 <usb_handle_standard_request+0x1d6>
			    cur_alt_setting == setup->wValue) {
    a4a2:	8860      	ldrh	r0, [r4, #2]
			if (cur_iface == setup->wIndex &&
    a4a4:	4580      	cmp	r8, r0
    a4a6:	fa1f f188 	uxth.w	r1, r8
    a4aa:	d1e2      	bne.n	a472 <usb_handle_standard_request+0x1d6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    a4ac:	2a07      	cmp	r2, #7
    a4ae:	d85f      	bhi.n	a570 <usb_handle_standard_request+0x2d4>
		usb_dev.alt_setting[iface] = alt_setting;
    a4b0:	4432      	add	r2, r6
		return true;
    a4b2:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    a4b4:	f882 10bb 	strb.w	r1, [r2, #187]	; 0xbb
	return true;
    a4b8:	2301      	movs	r3, #1
    a4ba:	e7da      	b.n	a472 <usb_handle_standard_request+0x1d6>
			if (cur_iface == setup->wIndex) {
    a4bc:	88a2      	ldrh	r2, [r4, #4]
    a4be:	455a      	cmp	r2, fp
    a4c0:	d1d7      	bne.n	a472 <usb_handle_standard_request+0x1d6>
	if (cur_alt_setting != alt_setting) {
    a4c2:	78a3      	ldrb	r3, [r4, #2]
    a4c4:	4543      	cmp	r3, r8
    a4c6:	d04e      	beq.n	a566 <usb_handle_standard_request+0x2ca>
		ret = reset_endpoint(ep_desc);
    a4c8:	78a9      	ldrb	r1, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    a4ca:	6079      	str	r1, [r7, #4]
    a4cc:	4608      	mov	r0, r1
    a4ce:	f000 fded 	bl	b0ac <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    a4d2:	6879      	ldr	r1, [r7, #4]
    a4d4:	4608      	mov	r0, r1
    a4d6:	f015 fd43 	bl	1ff60 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    a4da:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a4de:	6879      	ldr	r1, [r7, #4]
    a4e0:	d124      	bne.n	a52c <usb_handle_standard_request+0x290>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    a4e2:	f8d9 3000 	ldr.w	r3, [r9]
    a4e6:	f013 0f06 	tst.w	r3, #6
    a4ea:	d0e5      	beq.n	a4b8 <usb_handle_standard_request+0x21c>
    a4ec:	466b      	mov	r3, sp
    a4ee:	607b      	str	r3, [r7, #4]
    a4f0:	b088      	sub	sp, #32
    a4f2:	4b0c      	ldr	r3, [pc, #48]	; (a524 <usb_handle_standard_request+0x288>)
    a4f4:	480c      	ldr	r0, [pc, #48]	; (a528 <usb_handle_standard_request+0x28c>)
    a4f6:	466a      	mov	r2, sp
    a4f8:	e9c2 3105 	strd	r3, r1, [r2, #20]
    a4fc:	2104      	movs	r1, #4
    a4fe:	6110      	str	r0, [r2, #16]
    a500:	60f9      	str	r1, [r7, #12]
    a502:	f842 1f0c 	str.w	r1, [r2, #12]!
    a506:	4648      	mov	r0, r9
    a508:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    a50c:	f01d fc59 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	469d      	mov	sp, r3
    a514:	e7d0      	b.n	a4b8 <usb_handle_standard_request+0x21c>
    a516:	bf00      	nop
    a518:	20003d90 	.word	0x20003d90
    a51c:	20003e4a 	.word	0x20003e4a
    a520:	200009f4 	.word	0x200009f4
    a524:	0002f673 	.word	0x0002f673
    a528:	0002f538 	.word	0x0002f538
	} else if (ret) {
    a52c:	2800      	cmp	r0, #0
    a52e:	d0c3      	beq.n	a4b8 <usb_handle_standard_request+0x21c>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    a530:	f8d9 3000 	ldr.w	r3, [r9]
    a534:	f013 0307 	ands.w	r3, r3, #7
    a538:	d09b      	beq.n	a472 <usb_handle_standard_request+0x1d6>
    a53a:	466b      	mov	r3, sp
    a53c:	b088      	sub	sp, #32
    a53e:	466a      	mov	r2, sp
    a540:	607b      	str	r3, [r7, #4]
    a542:	4b3d      	ldr	r3, [pc, #244]	; (a638 <usb_handle_standard_request+0x39c>)
    a544:	6113      	str	r3, [r2, #16]
    a546:	4b3d      	ldr	r3, [pc, #244]	; (a63c <usb_handle_standard_request+0x3a0>)
    a548:	e9c2 3105 	strd	r3, r1, [r2, #20]
    a54c:	2104      	movs	r1, #4
    a54e:	f842 1f0c 	str.w	r1, [r2, #12]!
    a552:	60f9      	str	r1, [r7, #12]
    a554:	4648      	mov	r0, r9
    a556:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a55a:	f01d fc32 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a55e:	687b      	ldr	r3, [r7, #4]
    a560:	469d      	mov	sp, r3
	return false;
    a562:	2300      	movs	r3, #0
    a564:	e785      	b.n	a472 <usb_handle_standard_request+0x1d6>
		ret = set_endpoint(ep_desc);
    a566:	4628      	mov	r0, r5
    a568:	f7ff fd64 	bl	a034 <set_endpoint>
    a56c:	4603      	mov	r3, r0
    a56e:	e780      	b.n	a472 <usb_handle_standard_request+0x1d6>
    a570:	46aa      	mov	sl, r5
    a572:	e7f6      	b.n	a562 <usb_handle_standard_request+0x2c6>
	if (usb_reqtype_is_to_host(setup)) {
    a574:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    a578:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    a57a:	2a00      	cmp	r2, #0
    a57c:	da19      	bge.n	a5b2 <usb_handle_standard_request+0x316>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    a57e:	2b00      	cmp	r3, #0
    a580:	f47f aea0 	bne.w	a2c4 <usb_handle_standard_request+0x28>
	uint8_t ep = setup->wIndex;
    a584:	7924      	ldrb	r4, [r4, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    a586:	0663      	lsls	r3, r4, #25
    a588:	d00a      	beq.n	a5a0 <usb_handle_standard_request+0x304>
    a58a:	4620      	mov	r0, r4
    a58c:	f7ff fd20 	bl	9fd0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    a590:	2800      	cmp	r0, #0
    a592:	f43f ae97 	beq.w	a2c4 <usb_handle_standard_request+0x28>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    a596:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    a59a:	2b00      	cmp	r3, #0
    a59c:	f43f ae92 	beq.w	a2c4 <usb_handle_standard_request+0x28>
    a5a0:	f8d9 5000 	ldr.w	r5, [r9]
		usb_dc_ep_is_stalled(ep, &data[0]);
    a5a4:	4620      	mov	r0, r4
    a5a6:	4629      	mov	r1, r5
    a5a8:	f015 fc94 	bl	1fed4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    a5ac:	2000      	movs	r0, #0
    a5ae:	7068      	strb	r0, [r5, #1]
    a5b0:	e6a8      	b.n	a304 <usb_handle_standard_request+0x68>
		switch (setup->bRequest) {
    a5b2:	2b01      	cmp	r3, #1
    a5b4:	d008      	beq.n	a5c8 <usb_handle_standard_request+0x32c>
    a5b6:	2b03      	cmp	r3, #3
    a5b8:	f47f ae84 	bne.w	a2c4 <usb_handle_standard_request+0x28>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    a5bc:	8863      	ldrh	r3, [r4, #2]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	f47f ae80 	bne.w	a2c4 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    a5c4:	2101      	movs	r1, #1
    a5c6:	e003      	b.n	a5d0 <usb_handle_standard_request+0x334>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    a5c8:	8861      	ldrh	r1, [r4, #2]
    a5ca:	2900      	cmp	r1, #0
    a5cc:	f47f ae7a 	bne.w	a2c4 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    a5d0:	88a0      	ldrh	r0, [r4, #4]
    a5d2:	f7ff fe03 	bl	a1dc <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    a5d6:	2800      	cmp	r0, #0
    a5d8:	f47f ae7a 	bne.w	a2d0 <usb_handle_standard_request+0x34>
    a5dc:	e672      	b.n	a2c4 <usb_handle_standard_request+0x28>
		if (type == USB_DESC_CONFIGURATION) {
    a5de:	2a02      	cmp	r2, #2
		*data = p;
    a5e0:	f8c9 3000 	str.w	r3, [r9]
		if (type == USB_DESC_CONFIGURATION) {
    a5e4:	f47f aea5 	bne.w	a332 <usb_handle_standard_request+0x96>
			*len = (p[CONF_DESC_wTotalLength]) |
    a5e8:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    a5ea:	f8c8 3000 	str.w	r3, [r8]
    a5ee:	e66f      	b.n	a2d0 <usb_handle_standard_request+0x34>
	if (usb_reqtype_is_to_host(setup)) {
    a5f0:	f994 3000 	ldrsb.w	r3, [r4]
		switch (setup->bRequest) {
    a5f4:	7860      	ldrb	r0, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	f6bf af2b 	bge.w	a452 <usb_handle_standard_request+0x1b6>
    a5fc:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    a600:	2800      	cmp	r0, #0
    a602:	f43f af1f 	beq.w	a444 <usb_handle_standard_request+0x1a8>
    a606:	280a      	cmp	r0, #10
    a608:	f47f ae5c 	bne.w	a2c4 <usb_handle_standard_request+0x28>
	while (p[DESC_bLength] != 0U) {
    a60c:	7829      	ldrb	r1, [r5, #0]
    a60e:	2900      	cmp	r1, #0
    a610:	f43f ae58 	beq.w	a2c4 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    a614:	786b      	ldrb	r3, [r5, #1]
    a616:	2b04      	cmp	r3, #4
    a618:	f47f af19 	bne.w	a44e <usb_handle_standard_request+0x1b2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    a61c:	78ab      	ldrb	r3, [r5, #2]
			if (cur_iface == setup->wIndex) {
    a61e:	459c      	cmp	ip, r3
    a620:	f47f af15 	bne.w	a44e <usb_handle_standard_request+0x1b2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    a624:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    a626:	bf96      	itet	ls
    a628:	199b      	addls	r3, r3, r6
	return 0;
    a62a:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    a62c:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    a630:	7013      	strb	r3, [r2, #0]
				*len = 1;
    a632:	2301      	movs	r3, #1
    a634:	e7d9      	b.n	a5ea <usb_handle_standard_request+0x34e>
    a636:	bf00      	nop
    a638:	0002f55d 	.word	0x0002f55d
    a63c:	0002f673 	.word	0x0002f673

0000a640 <usb_write>:
{
    a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    a644:	f8df b068 	ldr.w	fp, [pc, #104]	; a6b0 <usb_write+0x70>
{
    a648:	b085      	sub	sp, #20
    a64a:	4605      	mov	r5, r0
    a64c:	af00      	add	r7, sp, #0
    a64e:	4688      	mov	r8, r1
    a650:	4691      	mov	r9, r2
    a652:	469a      	mov	sl, r3
    a654:	2604      	movs	r6, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a656:	4653      	mov	r3, sl
    a658:	464a      	mov	r2, r9
    a65a:	4641      	mov	r1, r8
    a65c:	4628      	mov	r0, r5
    a65e:	f015 fca5 	bl	1ffac <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    a662:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a666:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    a668:	d11c      	bne.n	a6a4 <usb_write+0x64>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    a66a:	f8db 3000 	ldr.w	r3, [fp]
    a66e:	f013 0f06 	tst.w	r3, #6
    a672:	d013      	beq.n	a69c <usb_write+0x5c>
    a674:	466b      	mov	r3, sp
    a676:	b088      	sub	sp, #32
    a678:	466a      	mov	r2, sp
    a67a:	607b      	str	r3, [r7, #4]
    a67c:	4b0d      	ldr	r3, [pc, #52]	; (a6b4 <usb_write+0x74>)
    a67e:	6113      	str	r3, [r2, #16]
    a680:	4b0d      	ldr	r3, [pc, #52]	; (a6b8 <usb_write+0x78>)
    a682:	2104      	movs	r1, #4
    a684:	e9c2 3505 	strd	r3, r5, [r2, #20]
    a688:	60f9      	str	r1, [r7, #12]
    a68a:	f842 1f0c 	str.w	r1, [r2, #12]!
    a68e:	4658      	mov	r0, fp
    a690:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    a694:	f01d fb95 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	469d      	mov	sp, r3
	z_impl_k_yield();
    a69c:	f01a fdd2 	bl	25244 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    a6a0:	3e01      	subs	r6, #1
    a6a2:	d1d8      	bne.n	a656 <usb_write+0x16>
}
    a6a4:	4620      	mov	r0, r4
    a6a6:	3714      	adds	r7, #20
    a6a8:	46bd      	mov	sp, r7
    a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6ae:	bf00      	nop
    a6b0:	200009f4 	.word	0x200009f4
    a6b4:	0002f583 	.word	0x0002f583
    a6b8:	0002f68f 	.word	0x0002f68f

0000a6bc <usb_data_to_host>:
{
    a6bc:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    a6be:	4c13      	ldr	r4, [pc, #76]	; (a70c <usb_data_to_host+0x50>)
    a6c0:	7d23      	ldrb	r3, [r4, #20]
    a6c2:	b9cb      	cbnz	r3, a6f8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    a6c4:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    a6c6:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    a6c8:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    a6ca:	ab01      	add	r3, sp, #4
    a6cc:	2080      	movs	r0, #128	; 0x80
    a6ce:	f7ff ffb7 	bl	a640 <usb_write>
		usb_dev.data_buf += chunk;
    a6d2:	9a01      	ldr	r2, [sp, #4]
    a6d4:	68a3      	ldr	r3, [r4, #8]
    a6d6:	4413      	add	r3, r2
    a6d8:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    a6da:	68e3      	ldr	r3, [r4, #12]
    a6dc:	1a9b      	subs	r3, r3, r2
    a6de:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    a6e0:	b943      	cbnz	r3, a6f4 <usb_data_to_host+0x38>
    a6e2:	b13a      	cbz	r2, a6f4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    a6e4:	6923      	ldr	r3, [r4, #16]
    a6e6:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    a6e8:	429a      	cmp	r2, r3
    a6ea:	dd03      	ble.n	a6f4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    a6ec:	069b      	lsls	r3, r3, #26
    a6ee:	d101      	bne.n	a6f4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    a6f0:	2301      	movs	r3, #1
    a6f2:	7523      	strb	r3, [r4, #20]
}
    a6f4:	b002      	add	sp, #8
    a6f6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    a6f8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    a6fa:	461a      	mov	r2, r3
    a6fc:	4619      	mov	r1, r3
    a6fe:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    a700:	7523      	strb	r3, [r4, #20]
}
    a702:	b002      	add	sp, #8
    a704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    a708:	f015 bc50 	b.w	1ffac <usb_dc_ep_write>
    a70c:	20003d90 	.word	0x20003d90

0000a710 <usb_handle_control_transfer>:
{
    a710:	b530      	push	{r4, r5, lr}
    a712:	b08b      	sub	sp, #44	; 0x2c
	uint32_t chunk = 0U;
    a714:	2300      	movs	r3, #0
{
    a716:	4602      	mov	r2, r0
    a718:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    a71a:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    a71c:	2800      	cmp	r0, #0
    a71e:	d16f      	bne.n	a800 <usb_handle_control_transfer+0xf0>
    a720:	2900      	cmp	r1, #0
    a722:	d14c      	bne.n	a7be <usb_handle_control_transfer+0xae>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    a724:	2208      	movs	r2, #8
    a726:	460b      	mov	r3, r1
    a728:	eb0d 0102 	add.w	r1, sp, r2
    a72c:	f01f fc36 	bl	29f9c <usb_dc_ep_read>
    a730:	2800      	cmp	r0, #0
    a732:	da04      	bge.n	a73e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    a734:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    a736:	f015 fb6d 	bl	1fe14 <usb_dc_ep_set_stall>
}
    a73a:	b00b      	add	sp, #44	; 0x2c
    a73c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    a73e:	4c35      	ldr	r4, [pc, #212]	; (a814 <usb_handle_control_transfer+0x104>)
		setup->bRequest = setup_raw.bRequest;
    a740:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    a744:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    a748:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    a74a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a74e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    a750:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    a754:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    a756:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    a758:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    a75c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a760:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    a762:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    a764:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    a768:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    a76a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    a76c:	d41a      	bmi.n	a7a4 <usb_handle_control_transfer+0x94>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    a76e:	2b80      	cmp	r3, #128	; 0x80
    a770:	d914      	bls.n	a79c <usb_handle_control_transfer+0x8c>
				LOG_ERR("Request buffer too small");
    a772:	4829      	ldr	r0, [pc, #164]	; (a818 <usb_handle_control_transfer+0x108>)
    a774:	6803      	ldr	r3, [r0, #0]
    a776:	075b      	lsls	r3, r3, #29
    a778:	d00b      	beq.n	a792 <usb_handle_control_transfer+0x82>
    a77a:	4b28      	ldr	r3, [pc, #160]	; (a81c <usb_handle_control_transfer+0x10c>)
    a77c:	9308      	str	r3, [sp, #32]
    a77e:	4b28      	ldr	r3, [pc, #160]	; (a820 <usb_handle_control_transfer+0x110>)
    a780:	9309      	str	r3, [sp, #36]	; 0x24
    a782:	aa07      	add	r2, sp, #28
    a784:	2303      	movs	r3, #3
    a786:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a78a:	9301      	str	r3, [sp, #4]
    a78c:	9307      	str	r3, [sp, #28]
    a78e:	f01d fb18 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    a792:	2080      	movs	r0, #128	; 0x80
    a794:	f015 fb3e 	bl	1fe14 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    a798:	2000      	movs	r0, #0
    a79a:	e7cc      	b.n	a736 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    a79c:	b113      	cbz	r3, a7a4 <usb_handle_control_transfer+0x94>
				usb_dev.data_buf_residue = setup->wLength;
    a79e:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    a7a2:	e7ca      	b.n	a73a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    a7a4:	f7ff fc30 	bl	a008 <usb_handle_request.constprop.0>
    a7a8:	2800      	cmp	r0, #0
    a7aa:	d0c3      	beq.n	a734 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    a7ac:	88e2      	ldrh	r2, [r4, #6]
    a7ae:	6923      	ldr	r3, [r4, #16]
    a7b0:	429a      	cmp	r2, r3
    a7b2:	bfd4      	ite	le
    a7b4:	60e2      	strle	r2, [r4, #12]
    a7b6:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    a7b8:	f7ff ff80 	bl	a6bc <usb_data_to_host>
    a7bc:	e7bd      	b.n	a73a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    a7be:	4c15      	ldr	r4, [pc, #84]	; (a814 <usb_handle_control_transfer+0x104>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a7c0:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    a7c4:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a7c6:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    a7c8:	dc04      	bgt.n	a7d4 <usb_handle_control_transfer+0xc4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a7ca:	f01f fbe7 	bl	29f9c <usb_dc_ep_read>
    a7ce:	2800      	cmp	r0, #0
    a7d0:	dab3      	bge.n	a73a <usb_handle_control_transfer+0x2a>
    a7d2:	e7af      	b.n	a734 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a7d4:	462a      	mov	r2, r5
    a7d6:	f01f fbe1 	bl	29f9c <usb_dc_ep_read>
    a7da:	2800      	cmp	r0, #0
    a7dc:	dbd9      	blt.n	a792 <usb_handle_control_transfer+0x82>
		usb_dev.data_buf += chunk;
    a7de:	9900      	ldr	r1, [sp, #0]
    a7e0:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    a7e2:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    a7e4:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    a7e6:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    a7e8:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    a7ea:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d1a4      	bne.n	a73a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    a7f0:	f104 0338 	add.w	r3, r4, #56	; 0x38
    a7f4:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    a7f6:	f7ff fc07 	bl	a008 <usb_handle_request.constprop.0>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d1dc      	bne.n	a7b8 <usb_handle_control_transfer+0xa8>
    a7fe:	e799      	b.n	a734 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    a800:	2880      	cmp	r0, #128	; 0x80
    a802:	d19a      	bne.n	a73a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    a804:	4b03      	ldr	r3, [pc, #12]	; (a814 <usb_handle_control_transfer+0x104>)
    a806:	68da      	ldr	r2, [r3, #12]
    a808:	2a00      	cmp	r2, #0
    a80a:	d1d5      	bne.n	a7b8 <usb_handle_control_transfer+0xa8>
    a80c:	7d1b      	ldrb	r3, [r3, #20]
    a80e:	2b00      	cmp	r3, #0
    a810:	d1d2      	bne.n	a7b8 <usb_handle_control_transfer+0xa8>
    a812:	e792      	b.n	a73a <usb_handle_control_transfer+0x2a>
    a814:	20003d90 	.word	0x20003d90
    a818:	200009f4 	.word	0x200009f4
    a81c:	0002f5ae 	.word	0x0002f5ae
    a820:	0002f636 	.word	0x0002f636

0000a824 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    a824:	4b05      	ldr	r3, [pc, #20]	; (a83c <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    a826:	4a06      	ldr	r2, [pc, #24]	; (a840 <usb_set_config+0x1c>)
    a828:	629a      	str	r2, [r3, #40]	; 0x28
    a82a:	4a06      	ldr	r2, [pc, #24]	; (a844 <usb_set_config+0x20>)
    a82c:	62da      	str	r2, [r3, #44]	; 0x2c
    a82e:	4a06      	ldr	r2, [pc, #24]	; (a848 <usb_set_config+0x24>)
    a830:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    a832:	4a06      	ldr	r2, [pc, #24]	; (a84c <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    a834:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    a836:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    a838:	2000      	movs	r0, #0
    a83a:	4770      	bx	lr
    a83c:	20003d90 	.word	0x20003d90
    a840:	0000a29d 	.word	0x0000a29d
    a844:	00009ee5 	.word	0x00009ee5
    a848:	00009f85 	.word	0x00009f85
    a84c:	00009f25 	.word	0x00009f25

0000a850 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    a850:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    a852:	4b11      	ldr	r3, [pc, #68]	; (a898 <usb_device_init+0x48>)
    a854:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    a858:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    a85a:	b9d4      	cbnz	r4, a892 <usb_device_init+0x42>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    a85c:	f000 fa2e 	bl	acbc <usb_get_device_descriptor>
	if (!device_descriptor) {
    a860:	b990      	cbnz	r0, a888 <usb_device_init+0x38>
		LOG_ERR("Failed to configure USB device stack");
    a862:	480e      	ldr	r0, [pc, #56]	; (a89c <usb_device_init+0x4c>)
    a864:	6803      	ldr	r3, [r0, #0]
    a866:	075b      	lsls	r3, r3, #29
    a868:	d00b      	beq.n	a882 <usb_device_init+0x32>
    a86a:	4b0d      	ldr	r3, [pc, #52]	; (a8a0 <usb_device_init+0x50>)
    a86c:	9306      	str	r3, [sp, #24]
    a86e:	4b0d      	ldr	r3, [pc, #52]	; (a8a4 <usb_device_init+0x54>)
    a870:	9307      	str	r3, [sp, #28]
    a872:	aa05      	add	r2, sp, #20
    a874:	2303      	movs	r3, #3
    a876:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a87a:	9301      	str	r3, [sp, #4]
    a87c:	9305      	str	r3, [sp, #20]
    a87e:	f01d faa0 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
    a882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a886:	e002      	b.n	a88e <usb_device_init+0x3e>
		return -1;
	}

	usb_set_config(device_descriptor);
    a888:	f7ff ffcc 	bl	a824 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    a88c:	4620      	mov	r0, r4
}
    a88e:	b008      	add	sp, #32
    a890:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a892:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a896:	e7fa      	b.n	a88e <usb_device_init+0x3e>
    a898:	20003d90 	.word	0x20003d90
    a89c:	200009f4 	.word	0x200009f4
    a8a0:	0002f5cb 	.word	0x0002f5cb
    a8a4:	0002f626 	.word	0x0002f626

0000a8a8 <usb_enable>:
{
    a8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8ac:	4604      	mov	r4, r0
    a8ae:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    a8b0:	4d3d      	ldr	r5, [pc, #244]	; (a9a8 <usb_enable+0x100>)
	return z_impl_k_mutex_lock(mutex, timeout);
    a8b2:	483e      	ldr	r0, [pc, #248]	; (a9ac <usb_enable+0x104>)
    a8b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a8b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a8bc:	f019 ff76 	bl	247ac <z_impl_k_mutex_lock>
    a8c0:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    a8c4:	b19e      	cbz	r6, a8ee <usb_enable+0x46>
		LOG_WRN("USB device support already enabled");
    a8c6:	483a      	ldr	r0, [pc, #232]	; (a9b0 <usb_enable+0x108>)
    a8c8:	6803      	ldr	r3, [r0, #0]
    a8ca:	f013 0f06 	tst.w	r3, #6
    a8ce:	d00b      	beq.n	a8e8 <usb_enable+0x40>
    a8d0:	4b38      	ldr	r3, [pc, #224]	; (a9b4 <usb_enable+0x10c>)
    a8d2:	9306      	str	r3, [sp, #24]
    a8d4:	4b38      	ldr	r3, [pc, #224]	; (a9b8 <usb_enable+0x110>)
    a8d6:	9307      	str	r3, [sp, #28]
    a8d8:	aa05      	add	r2, sp, #20
    a8da:	2303      	movs	r3, #3
    a8dc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    a8e0:	9301      	str	r3, [sp, #4]
    a8e2:	9305      	str	r3, [sp, #20]
    a8e4:	f01d fa6d 	bl	27dc2 <z_log_msg2_static_create.constprop.0>
		ret = -EALREADY;
    a8e8:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a8ec:	e03f      	b.n	a96e <usb_enable+0xc6>
	usb_dev.status_callback = cb;
    a8ee:	4833      	ldr	r0, [pc, #204]	; (a9bc <usb_enable+0x114>)
	usb_dev.user_status_callback = status_cb;
    a8f0:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    a8f2:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    a8f4:	f015 fcee 	bl	202d4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    a8f8:	f015 f9b8 	bl	1fc6c <usb_dc_attach>
	if (ret < 0) {
    a8fc:	1e04      	subs	r4, r0, #0
    a8fe:	db36      	blt.n	a96e <usb_enable+0xc6>
	ret = usb_transfer_init();
    a900:	f000 fc1a 	bl	b138 <usb_transfer_init>
	if (ret < 0) {
    a904:	1e04      	subs	r4, r0, #0
    a906:	db32      	blt.n	a96e <usb_enable+0xc6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    a908:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    a90a:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    a90c:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    a910:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    a914:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    a918:	f015 fa40 	bl	1fd9c <usb_dc_ep_configure>
	if (ret < 0) {
    a91c:	1e04      	subs	r4, r0, #0
    a91e:	db26      	blt.n	a96e <usb_enable+0xc6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    a920:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    a922:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    a924:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    a928:	f015 fa38 	bl	1fd9c <usb_dc_ep_configure>
	if (ret < 0) {
    a92c:	1e04      	subs	r4, r0, #0
    a92e:	db1e      	blt.n	a96e <usb_enable+0xc6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    a930:	4923      	ldr	r1, [pc, #140]	; (a9c0 <usb_enable+0x118>)
    a932:	4630      	mov	r0, r6
    a934:	f015 fcba 	bl	202ac <usb_dc_ep_set_callback>
	if (ret < 0) {
    a938:	1e04      	subs	r4, r0, #0
    a93a:	db18      	blt.n	a96e <usb_enable+0xc6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    a93c:	4920      	ldr	r1, [pc, #128]	; (a9c0 <usb_enable+0x118>)
    a93e:	4638      	mov	r0, r7
    a940:	f015 fcb4 	bl	202ac <usb_dc_ep_set_callback>
	if (ret < 0) {
    a944:	1e04      	subs	r4, r0, #0
    a946:	db12      	blt.n	a96e <usb_enable+0xc6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a948:	4c1e      	ldr	r4, [pc, #120]	; (a9c4 <usb_enable+0x11c>)
    a94a:	f8df 807c 	ldr.w	r8, [pc, #124]	; a9c8 <usb_enable+0x120>
    a94e:	4544      	cmp	r4, r8
    a950:	d314      	bcc.n	a97c <usb_enable+0xd4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    a952:	2000      	movs	r0, #0
    a954:	f015 fada 	bl	1ff0c <usb_dc_ep_enable>
	if (ret < 0) {
    a958:	1e04      	subs	r4, r0, #0
    a95a:	db08      	blt.n	a96e <usb_enable+0xc6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    a95c:	2080      	movs	r0, #128	; 0x80
    a95e:	f015 fad5 	bl	1ff0c <usb_dc_ep_enable>
	if (ret < 0) {
    a962:	1e04      	subs	r4, r0, #0
    a964:	db03      	blt.n	a96e <usb_enable+0xc6>
	usb_dev.enabled = true;
    a966:	2301      	movs	r3, #1
    a968:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    a96c:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    a96e:	480f      	ldr	r0, [pc, #60]	; (a9ac <usb_enable+0x104>)
    a970:	f019 ff94 	bl	2489c <z_impl_k_mutex_unlock>
}
    a974:	4620      	mov	r0, r4
    a976:	b008      	add	sp, #32
    a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    a97c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a97e:	2600      	movs	r6, #0
    a980:	7f22      	ldrb	r2, [r4, #28]
    a982:	b2f3      	uxtb	r3, r6
    a984:	429a      	cmp	r2, r3
    a986:	d801      	bhi.n	a98c <usb_enable+0xe4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a988:	3424      	adds	r4, #36	; 0x24
    a98a:	e7e0      	b.n	a94e <usb_enable+0xa6>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    a98c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    a990:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    a994:	7910      	ldrb	r0, [r2, #4]
    a996:	f015 fc89 	bl	202ac <usb_dc_ep_set_callback>
    a99a:	3601      	adds	r6, #1
    a99c:	2800      	cmp	r0, #0
    a99e:	d0ef      	beq.n	a980 <usb_enable+0xd8>
    a9a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a9a4:	e7e3      	b.n	a96e <usb_enable+0xc6>
    a9a6:	bf00      	nop
    a9a8:	20003d90 	.word	0x20003d90
    a9ac:	20000b14 	.word	0x20000b14
    a9b0:	200009f4 	.word	0x200009f4
    a9b4:	0002f5f4 	.word	0x0002f5f4
    a9b8:	0002f652 	.word	0x0002f652
    a9bc:	0000a141 	.word	0x0000a141
    a9c0:	0000a711 	.word	0x0000a711
    a9c4:	20000dc0 	.word	0x20000dc0
    a9c8:	20000de4 	.word	0x20000de4

0000a9cc <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    a9cc:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    a9ce:	4b1f      	ldr	r3, [pc, #124]	; (aa4c <usb_update_sn_string_descriptor+0x80>)
{
    a9d0:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    a9d2:	aa05      	add	r2, sp, #20
    a9d4:	f103 0510 	add.w	r5, r3, #16
    a9d8:	6818      	ldr	r0, [r3, #0]
    a9da:	6859      	ldr	r1, [r3, #4]
    a9dc:	4614      	mov	r4, r2
    a9de:	c403      	stmia	r4!, {r0, r1}
    a9e0:	3308      	adds	r3, #8
    a9e2:	42ab      	cmp	r3, r5
    a9e4:	4622      	mov	r2, r4
    a9e6:	d1f7      	bne.n	a9d8 <usb_update_sn_string_descriptor+0xc>
    a9e8:	781b      	ldrb	r3, [r3, #0]
    a9ea:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    a9ec:	2210      	movs	r2, #16
    a9ee:	2100      	movs	r1, #0
    a9f0:	a801      	add	r0, sp, #4
    a9f2:	f01d fee8 	bl	287c6 <memset>
	memset(sn, 0, sizeof(sn));
    a9f6:	2212      	movs	r2, #18
    a9f8:	2100      	movs	r1, #0
    a9fa:	4815      	ldr	r0, [pc, #84]	; (aa50 <usb_update_sn_string_descriptor+0x84>)
    a9fc:	f01d fee3 	bl	287c6 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    aa00:	2110      	movs	r1, #16
    aa02:	a801      	add	r0, sp, #4
    aa04:	f01f fbc2 	bl	2a18c <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    aa08:	2800      	cmp	r0, #0
    aa0a:	dd1b      	ble.n	aa44 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    aa0c:	2808      	cmp	r0, #8
    aa0e:	bfb8      	it	lt
    aa10:	2008      	movlt	r0, #8
    aa12:	3808      	subs	r0, #8
    aa14:	ab01      	add	r3, sp, #4
    aa16:	4a0e      	ldr	r2, [pc, #56]	; (aa50 <usb_update_sn_string_descriptor+0x84>)
    aa18:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    aa1a:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    aa1c:	f810 3b01 	ldrb.w	r3, [r0], #1
    aa20:	ac0a      	add	r4, sp, #40	; 0x28
    aa22:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    aa26:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    aa2a:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    aa2e:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    aa30:	ac0a      	add	r4, sp, #40	; 0x28
    aa32:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    aa34:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    aa36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    aa3a:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    aa3c:	2908      	cmp	r1, #8
    aa3e:	f102 0202 	add.w	r2, r2, #2
    aa42:	d1eb      	bne.n	aa1c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    aa44:	4802      	ldr	r0, [pc, #8]	; (aa50 <usb_update_sn_string_descriptor+0x84>)
    aa46:	b00b      	add	sp, #44	; 0x2c
    aa48:	bd30      	pop	{r4, r5, pc}
    aa4a:	bf00      	nop
    aa4c:	0002f699 	.word	0x0002f699
    aa50:	20005f2c 	.word	0x20005f2c

0000aa54 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa58:	b08d      	sub	sp, #52	; 0x34
    aa5a:	4604      	mov	r4, r0
    aa5c:	af00      	add	r7, sp, #0
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    aa5e:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    aa60:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    aa64:	46aa      	mov	sl, r5
	struct usb_cfg_data *cfg_data = NULL;
    aa66:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    aa68:	46a8      	mov	r8, r5

	while (head->bLength != 0U) {
    aa6a:	7820      	ldrb	r0, [r4, #0]
    aa6c:	b920      	cbnz	r0, aa78 <usb_fix_descriptor+0x24>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    aa6e:	4b87      	ldr	r3, [pc, #540]	; (ac8c <usb_fix_descriptor+0x238>)
    aa70:	3402      	adds	r4, #2
    aa72:	429c      	cmp	r4, r3
    aa74:	d035      	beq.n	aae2 <usb_fix_descriptor+0x8e>
    aa76:	e7f2      	b.n	aa5e <usb_fix_descriptor+0xa>
		switch (head->bDescriptorType) {
    aa78:	7863      	ldrb	r3, [r4, #1]
    aa7a:	2b05      	cmp	r3, #5
    aa7c:	d805      	bhi.n	aa8a <usb_fix_descriptor+0x36>
    aa7e:	e8df f003 	tbb	[pc, r3]
    aa82:	04aa      	.short	0x04aa
    aa84:	3707aa03 	.word	0x3707aa03
    aa88:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    aa8a:	7823      	ldrb	r3, [r4, #0]
    aa8c:	441c      	add	r4, r3
    aa8e:	e7ec      	b.n	aa6a <usb_fix_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    aa90:	78e3      	ldrb	r3, [r4, #3]
    aa92:	2b00      	cmp	r3, #0
    aa94:	d1f9      	bne.n	aa8a <usb_fix_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
    aa96:	78a3      	ldrb	r3, [r4, #2]
    aa98:	b33b      	cbz	r3, aaea <usb_fix_descriptor+0x96>
			numof_ifaces++;
    aa9a:	f10a 0a01 	add.w	sl, sl, #1
    aa9e:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    aaa2:	e7f2      	b.n	aa8a <usb_fix_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
    aaa4:	6872      	ldr	r2, [r6, #4]
    aaa6:	4294      	cmp	r4, r2
    aaa8:	f000 80e7 	beq.w	ac7a <usb_fix_descriptor+0x226>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    aaac:	3624      	adds	r6, #36	; 0x24
    aaae:	429e      	cmp	r6, r3
    aab0:	d3f8      	bcc.n	aaa4 <usb_fix_descriptor+0x50>
					LOG_ERR("There is no usb_cfg_data "
    aab2:	4877      	ldr	r0, [pc, #476]	; (ac90 <usb_fix_descriptor+0x23c>)
    aab4:	6803      	ldr	r3, [r0, #0]
    aab6:	075b      	lsls	r3, r3, #29
    aab8:	d011      	beq.n	aade <usb_fix_descriptor+0x8a>
    aaba:	466d      	mov	r5, sp
    aabc:	b088      	sub	sp, #32
    aabe:	466a      	mov	r2, sp
    aac0:	4b74      	ldr	r3, [pc, #464]	; (ac94 <usb_fix_descriptor+0x240>)
    aac2:	6113      	str	r3, [r2, #16]
    aac4:	4b74      	ldr	r3, [pc, #464]	; (ac98 <usb_fix_descriptor+0x244>)
    aac6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    aaca:	2304      	movs	r3, #4
    aacc:	61bb      	str	r3, [r7, #24]
    aace:	f842 3f0c 	str.w	r3, [r2, #12]!
    aad2:	2300      	movs	r3, #0
    aad4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    aad8:	f01c f806 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    aadc:	46ad      	mov	sp, r5
				return -1;
    aade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    aae2:	3734      	adds	r7, #52	; 0x34
    aae4:	46bd      	mov	sp, r7
    aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    aaea:	4e6c      	ldr	r6, [pc, #432]	; (ac9c <usb_fix_descriptor+0x248>)
    aaec:	4b6c      	ldr	r3, [pc, #432]	; (aca0 <usb_fix_descriptor+0x24c>)
    aaee:	e7de      	b.n	aaae <usb_fix_descriptor+0x5a>
			if (!cfg_data) {
    aaf0:	2e00      	cmp	r6, #0
    aaf2:	d16e      	bne.n	abd2 <usb_fix_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    aaf4:	4866      	ldr	r0, [pc, #408]	; (ac90 <usb_fix_descriptor+0x23c>)
    aaf6:	6803      	ldr	r3, [r0, #0]
    aaf8:	075d      	lsls	r5, r3, #29
    aafa:	d0f0      	beq.n	aade <usb_fix_descriptor+0x8a>
    aafc:	4b69      	ldr	r3, [pc, #420]	; (aca4 <usb_fix_descriptor+0x250>)
				LOG_ERR("Failed to validate endpoints");
    aafe:	62bb      	str	r3, [r7, #40]	; 0x28
    ab00:	4b65      	ldr	r3, [pc, #404]	; (ac98 <usb_fix_descriptor+0x244>)
    ab02:	62fb      	str	r3, [r7, #44]	; 0x2c
    ab04:	2303      	movs	r3, #3
    ab06:	617b      	str	r3, [r7, #20]
    ab08:	627b      	str	r3, [r7, #36]	; 0x24
    ab0a:	2300      	movs	r3, #0
    ab0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    ab10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ab14:	f01b ffe8 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    ab18:	e7e1      	b.n	aade <usb_fix_descriptor+0x8a>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    ab1a:	6a31      	ldr	r1, [r6, #32]
    ab1c:	78a0      	ldrb	r0, [r4, #2]
    ab1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    ab22:	790b      	ldrb	r3, [r1, #4]
    ab24:	4298      	cmp	r0, r3
    ab26:	d009      	beq.n	ab3c <usb_fix_descriptor+0xe8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    ab28:	3201      	adds	r2, #1
    ab2a:	7f33      	ldrb	r3, [r6, #28]
    ab2c:	429a      	cmp	r2, r3
    ab2e:	d3f4      	bcc.n	ab1a <usb_fix_descriptor+0xc6>
				LOG_ERR("Failed to validate endpoints");
    ab30:	4857      	ldr	r0, [pc, #348]	; (ac90 <usb_fix_descriptor+0x23c>)
    ab32:	6803      	ldr	r3, [r0, #0]
    ab34:	075c      	lsls	r4, r3, #29
    ab36:	d0d2      	beq.n	aade <usb_fix_descriptor+0x8a>
    ab38:	4b5b      	ldr	r3, [pc, #364]	; (aca8 <usb_fix_descriptor+0x254>)
    ab3a:	e7e0      	b.n	aafe <usb_fix_descriptor+0xaa>
    ab3c:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    ab40:	78e0      	ldrb	r0, [r4, #3]
    ab42:	f000 0003 	and.w	r0, r0, #3
    ab46:	7738      	strb	r0, [r7, #28]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    ab48:	7920      	ldrb	r0, [r4, #4]
    ab4a:	f894 c005 	ldrb.w	ip, [r4, #5]
    ab4e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    ab52:	8378      	strh	r0, [r7, #26]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    ab54:	f994 0002 	ldrsb.w	r0, [r4, #2]
    ab58:	2800      	cmp	r0, #0
    ab5a:	fa5f f389 	uxtb.w	r3, r9
    ab5e:	da2a      	bge.n	abb6 <usb_fix_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    ab60:	f109 0010 	add.w	r0, r9, #16
    ab64:	f04f 0c01 	mov.w	ip, #1
    ab68:	fa0c f000 	lsl.w	r0, ip, r0
    ab6c:	ea10 0f0b 	tst.w	r0, fp
    ab70:	d129      	bne.n	abc6 <usb_fix_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    ab72:	f063 007f 	orn	r0, r3, #127	; 0x7f
    ab76:	7638      	strb	r0, [r7, #24]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    ab78:	f107 0018 	add.w	r0, r7, #24
    ab7c:	e9c7 3101 	strd	r3, r1, [r7, #4]
    ab80:	60fa      	str	r2, [r7, #12]
    ab82:	f015 f8c3 	bl	1fd0c <usb_dc_ep_check_cap>
    ab86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    ab8a:	687b      	ldr	r3, [r7, #4]
    ab8c:	b9d8      	cbnz	r0, abc6 <usb_fix_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    ab8e:	7e3a      	ldrb	r2, [r7, #24]
    ab90:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    ab92:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    ab96:	bf1c      	itt	ne
    ab98:	3310      	addne	r3, #16
    ab9a:	b2db      	uxtbne	r3, r3
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    ab9c:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    ab9e:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
    aba2:	bf15      	itete	ne
    aba4:	fa02 f303 	lslne.w	r3, r2, r3
					*requested_ep |= (1U << idx);
    aba8:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
    abac:	ea4b 0b03 	orrne.w	fp, fp, r3
					*requested_ep |= (1U << idx);
    abb0:	ea4b 0b02 	orreq.w	fp, fp, r2
				return 0;
    abb4:	e769      	b.n	aa8a <usb_fix_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
    abb6:	2001      	movs	r0, #1
    abb8:	fa00 f009 	lsl.w	r0, r0, r9
    abbc:	ea10 0f0b 	tst.w	r0, fp
    abc0:	d101      	bne.n	abc6 <usb_fix_descriptor+0x172>
				ep_cfg.ep_addr = idx;
    abc2:	763b      	strb	r3, [r7, #24]
    abc4:	e7d8      	b.n	ab78 <usb_fix_descriptor+0x124>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    abc6:	f109 0901 	add.w	r9, r9, #1
    abca:	f1b9 0f10 	cmp.w	r9, #16
    abce:	d1b7      	bne.n	ab40 <usb_fix_descriptor+0xec>
    abd0:	e7aa      	b.n	ab28 <usb_fix_descriptor+0xd4>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    abd2:	2200      	movs	r2, #0
    abd4:	e7a9      	b.n	ab2a <usb_fix_descriptor+0xd6>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    abd6:	2d03      	cmp	r5, #3
    abd8:	d12f      	bne.n	ac3a <usb_fix_descriptor+0x1e6>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    abda:	f7ff fef7 	bl	a9cc <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    abde:	4681      	mov	r9, r0
    abe0:	b1d0      	cbz	r0, ac18 <usb_fix_descriptor+0x1c4>
	runtime_sn_len = strlen(runtime_sn);
    abe2:	f01d fd8f 	bl	28704 <strlen>
	if (!runtime_sn_len) {
    abe6:	60f8      	str	r0, [r7, #12]
    abe8:	b1b0      	cbz	r0, ac18 <usb_fix_descriptor+0x1c4>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    abea:	4830      	ldr	r0, [pc, #192]	; (acac <usb_fix_descriptor+0x258>)
    abec:	f01d fd8a 	bl	28704 <strlen>
	if (runtime_sn_len != default_sn_len) {
    abf0:	68fa      	ldr	r2, [r7, #12]
    abf2:	4282      	cmp	r2, r0
    abf4:	d01c      	beq.n	ac30 <usb_fix_descriptor+0x1dc>
		LOG_ERR("the new SN descriptor doesn't have the same "
    abf6:	4826      	ldr	r0, [pc, #152]	; (ac90 <usb_fix_descriptor+0x23c>)
    abf8:	6803      	ldr	r3, [r0, #0]
    abfa:	0759      	lsls	r1, r3, #29
    abfc:	d00c      	beq.n	ac18 <usb_fix_descriptor+0x1c4>
    abfe:	4b2c      	ldr	r3, [pc, #176]	; (acb0 <usb_fix_descriptor+0x25c>)
    ac00:	62bb      	str	r3, [r7, #40]	; 0x28
    ac02:	4b2c      	ldr	r3, [pc, #176]	; (acb4 <usb_fix_descriptor+0x260>)
    ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
    ac06:	617d      	str	r5, [r7, #20]
    ac08:	627d      	str	r5, [r7, #36]	; 0x24
    ac0a:	2300      	movs	r3, #0
    ac0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    ac10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ac14:	f01b ff68 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    ac18:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    ac1a:	f06f 0102 	mvn.w	r1, #2
    ac1e:	18e2      	adds	r2, r4, r3
    ac20:	1b09      	subs	r1, r1, r4
    ac22:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    ac26:	42d1      	cmn	r1, r2
    ac28:	d513      	bpl.n	ac52 <usb_fix_descriptor+0x1fe>
			str_descr_idx += 1U;
    ac2a:	3501      	adds	r5, #1
    ac2c:	b2ed      	uxtb	r5, r5
			break;
    ac2e:	e72c      	b.n	aa8a <usb_fix_descriptor+0x36>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    ac30:	4649      	mov	r1, r9
    ac32:	1ca0      	adds	r0, r4, #2
    ac34:	f01d fdbc 	bl	287b0 <memcpy>
    ac38:	e7ee      	b.n	ac18 <usb_fix_descriptor+0x1c4>
			if (str_descr_idx) {
    ac3a:	2d00      	cmp	r5, #0
    ac3c:	d1ec      	bne.n	ac18 <usb_fix_descriptor+0x1c4>
				if (!cfg_descr) {
    ac3e:	f1b8 0f00 	cmp.w	r8, #0
    ac42:	d10f      	bne.n	ac64 <usb_fix_descriptor+0x210>
					LOG_ERR("Incomplete device descriptor");
    ac44:	4812      	ldr	r0, [pc, #72]	; (ac90 <usb_fix_descriptor+0x23c>)
    ac46:	6803      	ldr	r3, [r0, #0]
    ac48:	075a      	lsls	r2, r3, #29
    ac4a:	f43f af48 	beq.w	aade <usb_fix_descriptor+0x8a>
    ac4e:	4b1a      	ldr	r3, [pc, #104]	; (acb8 <usb_fix_descriptor+0x264>)
    ac50:	e755      	b.n	aafe <usb_fix_descriptor+0xaa>
		buf[i] = 0U;
    ac52:	f04f 0000 	mov.w	r0, #0
    ac56:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    ac5a:	f813 0901 	ldrb.w	r0, [r3], #-1
    ac5e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    ac62:	e7e0      	b.n	ac26 <usb_fix_descriptor+0x1d2>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    ac64:	eba4 0308 	sub.w	r3, r4, r8
	dst[0] = val;
    ac68:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    ac6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ac70:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    ac74:	f888 a004 	strb.w	sl, [r8, #4]
    ac78:	e7d7      	b.n	ac2a <usb_fix_descriptor+0x1d6>
				if (cfg_data->interface_config) {
    ac7a:	68b3      	ldr	r3, [r6, #8]
    ac7c:	2b00      	cmp	r3, #0
    ac7e:	f43f af0c 	beq.w	aa9a <usb_fix_descriptor+0x46>
					cfg_data->interface_config(head,
    ac82:	4651      	mov	r1, sl
    ac84:	4620      	mov	r0, r4
    ac86:	4798      	blx	r3
    ac88:	e707      	b.n	aa9a <usb_fix_descriptor+0x46>
    ac8a:	bf00      	nop
    ac8c:	20000dbd 	.word	0x20000dbd
    ac90:	200009f0 	.word	0x200009f0
    ac94:	0002f6aa 	.word	0x0002f6aa
    ac98:	0002f7f9 	.word	0x0002f7f9
    ac9c:	20000dc0 	.word	0x20000dc0
    aca0:	20000de4 	.word	0x20000de4
    aca4:	0002f6ce 	.word	0x0002f6ce
    aca8:	0002f713 	.word	0x0002f713
    acac:	0002f699 	.word	0x0002f699
    acb0:	0002f734 	.word	0x0002f734
    acb4:	0002f7d6 	.word	0x0002f7d6
    acb8:	0002f783 	.word	0x0002f783

0000acbc <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    acbc:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    acbe:	480f      	ldr	r0, [pc, #60]	; (acfc <usb_get_device_descriptor+0x40>)
{
    acc0:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    acc2:	f7ff fec7 	bl	aa54 <usb_fix_descriptor>
    acc6:	b1a8      	cbz	r0, acf4 <usb_get_device_descriptor+0x38>
		LOG_ERR("Failed to fixup USB descriptor");
    acc8:	480d      	ldr	r0, [pc, #52]	; (ad00 <usb_get_device_descriptor+0x44>)
    acca:	6803      	ldr	r3, [r0, #0]
    accc:	f013 0307 	ands.w	r3, r3, #7
    acd0:	d012      	beq.n	acf8 <usb_get_device_descriptor+0x3c>
    acd2:	4b0c      	ldr	r3, [pc, #48]	; (ad04 <usb_get_device_descriptor+0x48>)
    acd4:	9306      	str	r3, [sp, #24]
    acd6:	4b0c      	ldr	r3, [pc, #48]	; (ad08 <usb_get_device_descriptor+0x4c>)
    acd8:	9307      	str	r3, [sp, #28]
    acda:	2303      	movs	r3, #3
    acdc:	9301      	str	r3, [sp, #4]
    acde:	9305      	str	r3, [sp, #20]
    ace0:	2300      	movs	r3, #0
    ace2:	aa05      	add	r2, sp, #20
    ace4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ace8:	f01b fefe 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		return NULL;
    acec:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    acee:	b009      	add	sp, #36	; 0x24
    acf0:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    acf4:	4801      	ldr	r0, [pc, #4]	; (acfc <usb_get_device_descriptor+0x40>)
    acf6:	e7fa      	b.n	acee <usb_get_device_descriptor+0x32>
		return NULL;
    acf8:	4618      	mov	r0, r3
    acfa:	e7f8      	b.n	acee <usb_get_device_descriptor+0x32>
    acfc:	20000d20 	.word	0x20000d20
    ad00:	200009f0 	.word	0x200009f0
    ad04:	0002f7a4 	.word	0x0002f7a4
    ad08:	0002f80c 	.word	0x0002f80c

0000ad0c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    ad0c:	b510      	push	{r4, lr}
    ad0e:	4b09      	ldr	r3, [pc, #36]	; (ad34 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    ad10:	2100      	movs	r1, #0
    ad12:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    ad14:	781c      	ldrb	r4, [r3, #0]
    ad16:	4284      	cmp	r4, r0
    ad18:	d105      	bne.n	ad26 <usb_ep_get_transfer+0x1a>
    ad1a:	685c      	ldr	r4, [r3, #4]
    ad1c:	b11c      	cbz	r4, ad26 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    ad1e:	2048      	movs	r0, #72	; 0x48
    ad20:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    ad24:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    ad26:	3101      	adds	r1, #1
    ad28:	2904      	cmp	r1, #4
    ad2a:	f103 0348 	add.w	r3, r3, #72	; 0x48
    ad2e:	d1f1      	bne.n	ad14 <usb_ep_get_transfer+0x8>
	return NULL;
    ad30:	2000      	movs	r0, #0
    ad32:	e7f7      	b.n	ad24 <usb_ep_get_transfer+0x18>
    ad34:	20003e54 	.word	0x20003e54

0000ad38 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    ad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ad3c:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    ad3e:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    ad42:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    ad46:	3310      	adds	r3, #16
{
    ad48:	af00      	add	r7, sp, #0
    ad4a:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    ad4c:	d111      	bne.n	ad72 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    ad4e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    ad50:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    ad54:	f013 0602 	ands.w	r6, r3, #2
    ad58:	d055      	beq.n	ae06 <usb_transfer_work+0xce>
		if (!trans->bsize) {
    ad5a:	bb0a      	cbnz	r2, ada0 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    ad5c:	f013 0304 	ands.w	r3, r3, #4
    ad60:	d104      	bne.n	ad6c <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    ad62:	461a      	mov	r2, r3
    ad64:	4619      	mov	r1, r3
    ad66:	4628      	mov	r0, r5
    ad68:	f7ff fc6a 	bl	a640 <usb_write>
			}
			trans->status = 0;
    ad6c:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    ad6e:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    ad72:	f854 3c30 	ldr.w	r3, [r4, #-48]
    ad76:	3310      	adds	r3, #16
    ad78:	d00e      	beq.n	ad98 <usb_transfer_work+0x60>
    ad7a:	f854 6c20 	ldr.w	r6, [r4, #-32]
    ad7e:	b15e      	cbz	r6, ad98 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    ad80:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    ad84:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    ad88:	f01f fed3 	bl	2ab32 <k_is_in_isr>
    ad8c:	2800      	cmp	r0, #0
    ad8e:	d07f      	beq.n	ae90 <usb_transfer_work+0x158>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    ad90:	4847      	ldr	r0, [pc, #284]	; (aeb0 <usb_transfer_work+0x178>)
    ad92:	4621      	mov	r1, r4
    ad94:	f020 f855 	bl	2ae42 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    ad98:	370c      	adds	r7, #12
    ad9a:	46bd      	mov	sp, r7
    ad9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    ada0:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    ada4:	463b      	mov	r3, r7
    ada6:	4628      	mov	r0, r5
    ada8:	f7ff fc4a 	bl	a640 <usb_write>
		if (ret) {
    adac:	4603      	mov	r3, r0
    adae:	b1c8      	cbz	r0, ade4 <usb_transfer_work+0xac>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    adb0:	4840      	ldr	r0, [pc, #256]	; (aeb4 <usb_transfer_work+0x17c>)
    adb2:	6802      	ldr	r2, [r0, #0]
    adb4:	0751      	lsls	r1, r2, #29
    adb6:	d012      	beq.n	adde <usb_transfer_work+0xa6>
    adb8:	466e      	mov	r6, sp
    adba:	b088      	sub	sp, #32
    adbc:	466a      	mov	r2, sp
    adbe:	493e      	ldr	r1, [pc, #248]	; (aeb8 <usb_transfer_work+0x180>)
    adc0:	6111      	str	r1, [r2, #16]
    adc2:	493e      	ldr	r1, [pc, #248]	; (aebc <usb_transfer_work+0x184>)
    adc4:	61d5      	str	r5, [r2, #28]
    adc6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    adca:	2305      	movs	r3, #5
    adcc:	607b      	str	r3, [r7, #4]
    adce:	f842 3f0c 	str.w	r3, [r2, #12]!
    add2:	2300      	movs	r3, #0
    add4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    add8:	f01b fe86 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    addc:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    adde:	f06f 0315 	mvn.w	r3, #21
    ade2:	e7c4      	b.n	ad6e <usb_transfer_work+0x36>
		trans->buffer += bytes;
    ade4:	683a      	ldr	r2, [r7, #0]
    ade6:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    adea:	4413      	add	r3, r2
    adec:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    adf0:	f854 3c28 	ldr.w	r3, [r4, #-40]
    adf4:	1a9b      	subs	r3, r3, r2
    adf6:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    adfa:	f854 3c24 	ldr.w	r3, [r4, #-36]
    adfe:	4413      	add	r3, r2
    ae00:	f844 3c24 	str.w	r3, [r4, #-36]
    ae04:	e7b5      	b.n	ad72 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    ae06:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    ae0a:	463b      	mov	r3, r7
    ae0c:	4628      	mov	r0, r5
    ae0e:	f015 f97b 	bl	20108 <usb_dc_ep_read_wait>
		if (ret) {
    ae12:	4603      	mov	r3, r0
    ae14:	b1b8      	cbz	r0, ae46 <usb_transfer_work+0x10e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    ae16:	4827      	ldr	r0, [pc, #156]	; (aeb4 <usb_transfer_work+0x17c>)
    ae18:	6802      	ldr	r2, [r0, #0]
    ae1a:	0752      	lsls	r2, r2, #29
    ae1c:	d0df      	beq.n	adde <usb_transfer_work+0xa6>
    ae1e:	46e8      	mov	r8, sp
    ae20:	b088      	sub	sp, #32
    ae22:	466a      	mov	r2, sp
    ae24:	4924      	ldr	r1, [pc, #144]	; (aeb8 <usb_transfer_work+0x180>)
    ae26:	6111      	str	r1, [r2, #16]
    ae28:	4924      	ldr	r1, [pc, #144]	; (aebc <usb_transfer_work+0x184>)
    ae2a:	61d5      	str	r5, [r2, #28]
    ae2c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    ae30:	2305      	movs	r3, #5
    ae32:	f842 3f0c 	str.w	r3, [r2, #12]!
    ae36:	607b      	str	r3, [r7, #4]
    ae38:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ae3c:	4633      	mov	r3, r6
    ae3e:	f01b fe53 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    ae42:	46c5      	mov	sp, r8
    ae44:	e7cb      	b.n	adde <usb_transfer_work+0xa6>
		trans->buffer += bytes;
    ae46:	683e      	ldr	r6, [r7, #0]
    ae48:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    ae4c:	4433      	add	r3, r6
    ae4e:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    ae52:	f854 3c28 	ldr.w	r3, [r4, #-40]
    ae56:	1b9b      	subs	r3, r3, r6
    ae58:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    ae5c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    ae60:	4433      	add	r3, r6
    ae62:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    ae66:	2e00      	cmp	r6, #0
    ae68:	d080      	beq.n	ad6c <usb_transfer_work+0x34>
    ae6a:	4628      	mov	r0, r5
    ae6c:	f015 fa38 	bl	202e0 <usb_dc_ep_mps>
    ae70:	fbb6 f3f0 	udiv	r3, r6, r0
    ae74:	fb03 6610 	mls	r6, r3, r0, r6
    ae78:	2e00      	cmp	r6, #0
    ae7a:	f47f af77 	bne.w	ad6c <usb_transfer_work+0x34>
    ae7e:	f854 3c28 	ldr.w	r3, [r4, #-40]
    ae82:	2b00      	cmp	r3, #0
    ae84:	f43f af72 	beq.w	ad6c <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    ae88:	4628      	mov	r0, r5
    ae8a:	f015 f9ad 	bl	201e8 <usb_dc_ep_read_continue>
    ae8e:	e770      	b.n	ad72 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    ae90:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    ae94:	f1a4 0018 	sub.w	r0, r4, #24
    ae98:	f019 fd78 	bl	2498c <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    ae9c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    aea0:	338c      	adds	r3, #140	; 0x8c
    aea2:	f43f af79 	beq.w	ad98 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    aea6:	464a      	mov	r2, r9
    aea8:	4641      	mov	r1, r8
    aeaa:	4628      	mov	r0, r5
    aeac:	47b0      	blx	r6
    aeae:	e773      	b.n	ad98 <usb_transfer_work+0x60>
    aeb0:	20002db0 	.word	0x20002db0
    aeb4:	200009fc 	.word	0x200009fc
    aeb8:	0002f826 	.word	0x0002f826
    aebc:	0002f8cb 	.word	0x0002f8cb

0000aec0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    aec0:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    aec2:	1e4b      	subs	r3, r1, #1
    aec4:	2b01      	cmp	r3, #1
{
    aec6:	b088      	sub	sp, #32
    aec8:	4606      	mov	r6, r0
    aeca:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    aecc:	d81e      	bhi.n	af0c <usb_transfer_ep_callback+0x4c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    aece:	f7ff ff1d 	bl	ad0c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    aed2:	4604      	mov	r4, r0
    aed4:	b9e0      	cbnz	r0, af10 <usb_transfer_ep_callback+0x50>
		if (status == USB_DC_EP_DATA_OUT) {
    aed6:	2d01      	cmp	r5, #1
    aed8:	d118      	bne.n	af0c <usb_transfer_ep_callback+0x4c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    aeda:	466b      	mov	r3, sp
    aedc:	2201      	movs	r2, #1
    aede:	a902      	add	r1, sp, #8
    aee0:	4630      	mov	r0, r6
    aee2:	f015 f911 	bl	20108 <usb_dc_ep_read_wait>
			} while (bytes);
    aee6:	9b00      	ldr	r3, [sp, #0]
    aee8:	2b00      	cmp	r3, #0
    aeea:	d1f6      	bne.n	aeda <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    aeec:	4812      	ldr	r0, [pc, #72]	; (af38 <usb_transfer_ep_callback+0x78>)
    aeee:	6802      	ldr	r2, [r0, #0]
    aef0:	0752      	lsls	r2, r2, #29
    aef2:	d00b      	beq.n	af0c <usb_transfer_ep_callback+0x4c>
    aef4:	4a11      	ldr	r2, [pc, #68]	; (af3c <usb_transfer_ep_callback+0x7c>)
    aef6:	9206      	str	r2, [sp, #24]
    aef8:	4a11      	ldr	r2, [pc, #68]	; (af40 <usb_transfer_ep_callback+0x80>)
    aefa:	9207      	str	r2, [sp, #28]
    aefc:	2203      	movs	r2, #3
    aefe:	9201      	str	r2, [sp, #4]
    af00:	9205      	str	r2, [sp, #20]
    af02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    af06:	aa05      	add	r2, sp, #20
    af08:	f01b fdee 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    af0c:	b008      	add	sp, #32
    af0e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    af10:	f01f fe0f 	bl	2ab32 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    af14:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    af18:	b108      	cbz	r0, af1e <usb_transfer_ep_callback+0x5e>
    af1a:	2d01      	cmp	r5, #1
    af1c:	d105      	bne.n	af2a <usb_transfer_ep_callback+0x6a>
		usb_transfer_work(&trans->work);
    af1e:	4608      	mov	r0, r1
}
    af20:	b008      	add	sp, #32
    af22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    af26:	f7ff bf07 	b.w	ad38 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    af2a:	4806      	ldr	r0, [pc, #24]	; (af44 <usb_transfer_ep_callback+0x84>)
}
    af2c:	b008      	add	sp, #32
    af2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    af32:	f01f bf86 	b.w	2ae42 <k_work_submit_to_queue>
    af36:	bf00      	nop
    af38:	200009fc 	.word	0x200009fc
    af3c:	0002f847 	.word	0x0002f847
    af40:	0002f8dd 	.word	0x0002f8dd
    af44:	20002db0 	.word	0x20002db0

0000af48 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af4c:	b08d      	sub	sp, #52	; 0x34
    af4e:	af00      	add	r7, sp, #0
    af50:	4605      	mov	r5, r0
    af52:	60b9      	str	r1, [r7, #8]
    af54:	4616      	mov	r6, r2
    af56:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    af58:	f01c ff66 	bl	27e28 <usb_transfer_is_busy>
    af5c:	4604      	mov	r4, r0
    af5e:	2800      	cmp	r0, #0
    af60:	f040 8092 	bne.w	b088 <usb_transfer+0x140>
	__asm__ volatile(
    af64:	f04f 0320 	mov.w	r3, #32
    af68:	f3ef 8211 	mrs	r2, BASEPRI
    af6c:	f383 8812 	msr	BASEPRI_MAX, r3
    af70:	f3bf 8f6f 	isb	sy
    af74:	f8df a118 	ldr.w	sl, [pc, #280]	; b090 <usb_transfer+0x148>
    af78:	607a      	str	r2, [r7, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    af7a:	f04f 0948 	mov.w	r9, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    af7e:	fb09 f804 	mul.w	r8, r9, r4
	return z_impl_k_sem_take(sem, timeout);
    af82:	2300      	movs	r3, #0
    af84:	2200      	movs	r2, #0
    af86:	4650      	mov	r0, sl
    af88:	f019 fd26 	bl	249d8 <z_impl_k_sem_take>
    af8c:	4603      	mov	r3, r0
    af8e:	bb50      	cbnz	r0, afe6 <usb_transfer+0x9e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    af90:	f8df b100 	ldr.w	fp, [pc, #256]	; b094 <usb_transfer+0x14c>
    af94:	eb0b 0908 	add.w	r9, fp, r8
    af98:	f8d9 4004 	ldr.w	r4, [r9, #4]
    af9c:	f114 0f10 	cmn.w	r4, #16
    afa0:	d13b      	bne.n	b01a <usb_transfer+0xd2>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    afa2:	483d      	ldr	r0, [pc, #244]	; (b098 <usb_transfer+0x150>)
    afa4:	6802      	ldr	r2, [r0, #0]
    afa6:	0751      	lsls	r1, r2, #29
    afa8:	d010      	beq.n	afcc <usb_transfer+0x84>
    afaa:	466e      	mov	r6, sp
    afac:	b088      	sub	sp, #32
    afae:	466a      	mov	r2, sp
    afb0:	493a      	ldr	r1, [pc, #232]	; (b09c <usb_transfer+0x154>)
    afb2:	6111      	str	r1, [r2, #16]
    afb4:	493a      	ldr	r1, [pc, #232]	; (b0a0 <usb_transfer+0x158>)
    afb6:	e9c2 1505 	strd	r1, r5, [r2, #20]
    afba:	2104      	movs	r1, #4
    afbc:	61b9      	str	r1, [r7, #24]
    afbe:	f842 1f0c 	str.w	r1, [r2, #12]!
    afc2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    afc6:	f01b fd8f 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    afca:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    afcc:	4650      	mov	r0, sl
    afce:	f019 fcdd 	bl	2498c <z_impl_k_sem_give>
	__asm__ volatile(
    afd2:	687b      	ldr	r3, [r7, #4]
    afd4:	f383 8811 	msr	BASEPRI, r3
    afd8:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    afdc:	4620      	mov	r0, r4
    afde:	3734      	adds	r7, #52	; 0x34
    afe0:	46bd      	mov	sp, r7
    afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    afe6:	3401      	adds	r4, #1
    afe8:	2c04      	cmp	r4, #4
    afea:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    afee:	d1c6      	bne.n	af7e <usb_transfer+0x36>
		LOG_ERR("No transfer slot available");
    aff0:	4829      	ldr	r0, [pc, #164]	; (b098 <usb_transfer+0x150>)
    aff2:	6803      	ldr	r3, [r0, #0]
    aff4:	075b      	lsls	r3, r3, #29
    aff6:	d00d      	beq.n	b014 <usb_transfer+0xcc>
    aff8:	4b2a      	ldr	r3, [pc, #168]	; (b0a4 <usb_transfer+0x15c>)
    affa:	62bb      	str	r3, [r7, #40]	; 0x28
    affc:	4b28      	ldr	r3, [pc, #160]	; (b0a0 <usb_transfer+0x158>)
    affe:	62fb      	str	r3, [r7, #44]	; 0x2c
    b000:	2303      	movs	r3, #3
    b002:	617b      	str	r3, [r7, #20]
    b004:	627b      	str	r3, [r7, #36]	; 0x24
    b006:	2300      	movs	r3, #0
    b008:	f107 0224 	add.w	r2, r7, #36	; 0x24
    b00c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b010:	f01b fd6a 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    b014:	f06f 040b 	mvn.w	r4, #11
    b018:	e7db      	b.n	afd2 <usb_transfer+0x8a>
	trans->cb = cb;
    b01a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b01c:	f8c9 3014 	str.w	r3, [r9, #20]
	trans->flags = flags;
    b020:	68fb      	ldr	r3, [r7, #12]
	trans->buffer = data;
    b022:	68ba      	ldr	r2, [r7, #8]
	trans->flags = flags;
    b024:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
	trans->priv = cb_data;
    b028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b02a:	f8c9 3018 	str.w	r3, [r9, #24]
	trans->status = -EBUSY;
    b02e:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    b032:	f8c9 0010 	str.w	r0, [r9, #16]
	trans->bsize = dlen;
    b036:	e9c9 2602 	strd	r2, r6, [r9, #8]
	trans->status = -EBUSY;
    b03a:	f8c9 3004 	str.w	r3, [r9, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    b03e:	4628      	mov	r0, r5
	trans->ep = ep;
    b040:	f80b 5008 	strb.w	r5, [fp, r8]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    b044:	f015 f94c 	bl	202e0 <usb_dc_ep_mps>
    b048:	b168      	cbz	r0, b066 <usb_transfer+0x11e>
    b04a:	4628      	mov	r0, r5
    b04c:	f015 f948 	bl	202e0 <usb_dc_ep_mps>
    b050:	fbb6 f3f0 	udiv	r3, r6, r0
    b054:	fb03 6610 	mls	r6, r3, r0, r6
    b058:	b12e      	cbz	r6, b066 <usb_transfer+0x11e>
		trans->flags |= USB_TRANS_NO_ZLP;
    b05a:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
    b05e:	f043 0304 	orr.w	r3, r3, #4
    b062:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    b066:	68fb      	ldr	r3, [r7, #12]
    b068:	079a      	lsls	r2, r3, #30
    b06a:	d508      	bpl.n	b07e <usb_transfer+0x136>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    b06c:	f108 0834 	add.w	r8, r8, #52	; 0x34
    b070:	480d      	ldr	r0, [pc, #52]	; (b0a8 <usb_transfer+0x160>)
    b072:	eb0b 0108 	add.w	r1, fp, r8
    b076:	f01f fee4 	bl	2ae42 <k_work_submit_to_queue>
	int i, key, ret = 0;
    b07a:	2400      	movs	r4, #0
    b07c:	e7a9      	b.n	afd2 <usb_transfer+0x8a>
		ret = usb_dc_ep_read_continue(ep);
    b07e:	4628      	mov	r0, r5
    b080:	f015 f8b2 	bl	201e8 <usb_dc_ep_read_continue>
    b084:	4604      	mov	r4, r0
    b086:	e7a4      	b.n	afd2 <usb_transfer+0x8a>
		return -EBUSY;
    b088:	f06f 040f 	mvn.w	r4, #15
    b08c:	e7a6      	b.n	afdc <usb_transfer+0x94>
    b08e:	bf00      	nop
    b090:	20003e70 	.word	0x20003e70
    b094:	20003e54 	.word	0x20003e54
    b098:	200009fc 	.word	0x200009fc
    b09c:	0002f884 	.word	0x0002f884
    b0a0:	0002f8be 	.word	0x0002f8be
    b0a4:	0002f865 	.word	0x0002f865
    b0a8:	20002db0 	.word	0x20002db0

0000b0ac <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    b0ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    b0ae:	f04f 0320 	mov.w	r3, #32
    b0b2:	f3ef 8411 	mrs	r4, BASEPRI
    b0b6:	f383 8812 	msr	BASEPRI_MAX, r3
    b0ba:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    b0be:	f7ff fe25 	bl	ad0c <usb_ep_get_transfer>
	if (!trans) {
    b0c2:	b150      	cbz	r0, b0da <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    b0c4:	6843      	ldr	r3, [r0, #4]
    b0c6:	3310      	adds	r3, #16
    b0c8:	d107      	bne.n	b0da <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    b0ca:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    b0ce:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    b0d0:	f100 0134 	add.w	r1, r0, #52	; 0x34
    b0d4:	4803      	ldr	r0, [pc, #12]	; (b0e4 <usb_cancel_transfer+0x38>)
    b0d6:	f01f feb4 	bl	2ae42 <k_work_submit_to_queue>
	__asm__ volatile(
    b0da:	f384 8811 	msr	BASEPRI, r4
    b0de:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    b0e2:	bd10      	pop	{r4, pc}
    b0e4:	20002db0 	.word	0x20002db0

0000b0e8 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    b0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0ec:	4c10      	ldr	r4, [pc, #64]	; (b130 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    b0ee:	f8df 8044 	ldr.w	r8, [pc, #68]	; b134 <usb_cancel_transfers+0x4c>
{
    b0f2:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    b0f4:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    b0f8:	f04f 0320 	mov.w	r3, #32
    b0fc:	f3ef 8611 	mrs	r6, BASEPRI
    b100:	f383 8812 	msr	BASEPRI_MAX, r3
    b104:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    b108:	6863      	ldr	r3, [r4, #4]
    b10a:	3310      	adds	r3, #16
    b10c:	d105      	bne.n	b11a <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    b10e:	f104 0134 	add.w	r1, r4, #52	; 0x34
    b112:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    b114:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    b116:	f01f fe94 	bl	2ae42 <k_work_submit_to_queue>
	__asm__ volatile(
    b11a:	f386 8811 	msr	BASEPRI, r6
    b11e:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    b122:	3d01      	subs	r5, #1
    b124:	f104 0448 	add.w	r4, r4, #72	; 0x48
    b128:	d1e6      	bne.n	b0f8 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    b12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b12e:	bf00      	nop
    b130:	20003e54 	.word	0x20003e54
    b134:	20002db0 	.word	0x20002db0

0000b138 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    b138:	b570      	push	{r4, r5, r6, lr}
    b13a:	4c0a      	ldr	r4, [pc, #40]	; (b164 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    b13c:	4e0a      	ldr	r6, [pc, #40]	; (b168 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    b13e:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    b140:	4631      	mov	r1, r6
    b142:	4620      	mov	r0, r4
    b144:	f01f fe74 	bl	2ae30 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    b148:	2201      	movs	r2, #1
    b14a:	f1a4 0018 	sub.w	r0, r4, #24
    b14e:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    b150:	3501      	adds	r5, #1
    b152:	f01f fded 	bl	2ad30 <z_impl_k_sem_init>
    b156:	2d04      	cmp	r5, #4
    b158:	f104 0448 	add.w	r4, r4, #72	; 0x48
    b15c:	d1f0      	bne.n	b140 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    b15e:	2000      	movs	r0, #0
    b160:	bd70      	pop	{r4, r5, r6, pc}
    b162:	bf00      	nop
    b164:	20003e88 	.word	0x20003e88
    b168:	0000ad39 	.word	0x0000ad39

0000b16c <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b16c:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    b16e:	2301      	movs	r3, #1
    b170:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    b174:	680b      	ldr	r3, [r1, #0]
    b176:	b133      	cbz	r3, b186 <cdc_acm_irq_rx_enable+0x1a>
    b178:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    b17c:	b11b      	cbz	r3, b186 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    b17e:	4802      	ldr	r0, [pc, #8]	; (b188 <cdc_acm_irq_rx_enable+0x1c>)
    b180:	3108      	adds	r1, #8
    b182:	f01f be5e 	b.w	2ae42 <k_work_submit_to_queue>
	}
}
    b186:	4770      	bx	lr
    b188:	20002db0 	.word	0x20002db0

0000b18c <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b18c:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    b18e:	2301      	movs	r3, #1
    b190:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    b194:	680b      	ldr	r3, [r1, #0]
    b196:	b133      	cbz	r3, b1a6 <cdc_acm_irq_tx_enable+0x1a>
    b198:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    b19c:	b11b      	cbz	r3, b1a6 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    b19e:	4802      	ldr	r0, [pc, #8]	; (b1a8 <cdc_acm_irq_tx_enable+0x1c>)
    b1a0:	3108      	adds	r1, #8
    b1a2:	f01f be4e 	b.w	2ae42 <k_work_submit_to_queue>
}
    b1a6:	4770      	bx	lr
    b1a8:	20002db0 	.word	0x20002db0

0000b1ac <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    b1ac:	4a0b      	ldr	r2, [pc, #44]	; (b1dc <cdc_acm_reset_port+0x30>)
{
    b1ae:	4603      	mov	r3, r0
	dev_data->configured = false;
    b1b0:	2100      	movs	r1, #0
    b1b2:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    b1b6:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    b1b8:	6810      	ldr	r0, [r2, #0]
    b1ba:	6758      	str	r0, [r3, #116]	; 0x74
    b1bc:	8890      	ldrh	r0, [r2, #4]
    b1be:	7992      	ldrb	r2, [r2, #6]
    b1c0:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    b1c4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    b1c8:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    b1cc:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    b1d0:	2240      	movs	r2, #64	; 0x40
    b1d2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    b1d6:	f01d baf6 	b.w	287c6 <memset>
    b1da:	bf00      	nop
    b1dc:	0002bbc9 	.word	0x0002bbc9

0000b1e0 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    b1e0:	2301      	movs	r3, #1
    b1e2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    b1e6:	6813      	ldr	r3, [r2, #0]
{
    b1e8:	b510      	push	{r4, lr}
    b1ea:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    b1ec:	b13b      	cbz	r3, b1fe <cdc_acm_write_cb+0x1e>
    b1ee:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    b1f2:	b123      	cbz	r3, b1fe <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    b1f4:	4808      	ldr	r0, [pc, #32]	; (b218 <cdc_acm_write_cb+0x38>)
    b1f6:	f102 0108 	add.w	r1, r2, #8
    b1fa:	f01f fe22 	bl	2ae42 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    b1fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b200:	f01a fffe 	bl	26200 <ring_buf_is_empty>
    b204:	b930      	cbnz	r0, b214 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    b206:	f104 0118 	add.w	r1, r4, #24
    b20a:	4803      	ldr	r0, [pc, #12]	; (b218 <cdc_acm_write_cb+0x38>)
}
    b20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    b210:	f01f be17 	b.w	2ae42 <k_work_submit_to_queue>
}
    b214:	bd10      	pop	{r4, pc}
    b216:	bf00      	nop
    b218:	20002db0 	.word	0x20002db0

0000b21c <tx_work_handler>:
{
    b21c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    b21e:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    b220:	685b      	ldr	r3, [r3, #4]
    b222:	6a1b      	ldr	r3, [r3, #32]
    b224:	7d1e      	ldrb	r6, [r3, #20]
{
    b226:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    b228:	4630      	mov	r0, r6
    b22a:	f01c fdfd 	bl	27e28 <usb_transfer_is_busy>
    b22e:	b9d0      	cbnz	r0, b266 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    b230:	6da8      	ldr	r0, [r5, #88]	; 0x58
    b232:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b236:	a903      	add	r1, sp, #12
    b238:	f01b f85b 	bl	262f2 <ring_buf_get_claim>
	if (!len) {
    b23c:	4604      	mov	r4, r0
    b23e:	b190      	cbz	r0, b266 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    b240:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    b242:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    b246:	bf08      	it	eq
    b248:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    b24c:	9301      	str	r3, [sp, #4]
    b24e:	4b07      	ldr	r3, [pc, #28]	; (b26c <tx_work_handler+0x50>)
    b250:	9903      	ldr	r1, [sp, #12]
    b252:	9300      	str	r3, [sp, #0]
    b254:	4622      	mov	r2, r4
    b256:	2302      	movs	r3, #2
    b258:	4630      	mov	r0, r6
    b25a:	f7ff fe75 	bl	af48 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    b25e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    b260:	4621      	mov	r1, r4
    b262:	f01b f871 	bl	26348 <ring_buf_get_finish>
}
    b266:	b004      	add	sp, #16
    b268:	bd70      	pop	{r4, r5, r6, pc}
    b26a:	bf00      	nop
    b26c:	0000b1e1 	.word	0x0000b1e1

0000b270 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    b270:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b272:	6904      	ldr	r4, [r0, #16]
{
    b274:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    b276:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    b27a:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    b27e:	b113      	cbz	r3, b286 <cdc_acm_poll_out+0x16>
    b280:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    b284:	b19b      	cbz	r3, b2ae <cdc_acm_poll_out+0x3e>
		LOG_INF("USB device not ready, drop data");
    b286:	482a      	ldr	r0, [pc, #168]	; (b330 <cdc_acm_poll_out+0xc0>)
    b288:	6803      	ldr	r3, [r0, #0]
    b28a:	f003 0307 	and.w	r3, r3, #7
    b28e:	2b02      	cmp	r3, #2
    b290:	d90b      	bls.n	b2aa <cdc_acm_poll_out+0x3a>
    b292:	4b28      	ldr	r3, [pc, #160]	; (b334 <cdc_acm_poll_out+0xc4>)
    b294:	9308      	str	r3, [sp, #32]
    b296:	4b28      	ldr	r3, [pc, #160]	; (b338 <cdc_acm_poll_out+0xc8>)
    b298:	9309      	str	r3, [sp, #36]	; 0x24
    b29a:	2303      	movs	r3, #3
    b29c:	9303      	str	r3, [sp, #12]
    b29e:	9307      	str	r3, [sp, #28]
    b2a0:	aa07      	add	r2, sp, #28
    b2a2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    b2a6:	f01c fe32 	bl	27f0e <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    b2aa:	b00b      	add	sp, #44	; 0x2c
    b2ac:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    b2ae:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    b2b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    b2b4:	2201      	movs	r2, #1
    b2b6:	f10d 0107 	add.w	r1, sp, #7
    b2ba:	f01a fffb 	bl	262b4 <ring_buf_put>
    b2be:	2800      	cmp	r0, #0
    b2c0:	d12f      	bne.n	b322 <cdc_acm_poll_out+0xb2>
		LOG_INF("Ring buffer full, drain buffer");
    b2c2:	4d1b      	ldr	r5, [pc, #108]	; (b330 <cdc_acm_poll_out+0xc0>)
    b2c4:	682b      	ldr	r3, [r5, #0]
    b2c6:	f003 0307 	and.w	r3, r3, #7
    b2ca:	2b02      	cmp	r3, #2
    b2cc:	d90c      	bls.n	b2e8 <cdc_acm_poll_out+0x78>
    b2ce:	4b1b      	ldr	r3, [pc, #108]	; (b33c <cdc_acm_poll_out+0xcc>)
    b2d0:	9308      	str	r3, [sp, #32]
    b2d2:	4b19      	ldr	r3, [pc, #100]	; (b338 <cdc_acm_poll_out+0xc8>)
    b2d4:	9309      	str	r3, [sp, #36]	; 0x24
    b2d6:	aa07      	add	r2, sp, #28
    b2d8:	2303      	movs	r3, #3
    b2da:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b2de:	4628      	mov	r0, r5
    b2e0:	9303      	str	r3, [sp, #12]
    b2e2:	9307      	str	r3, [sp, #28]
    b2e4:	f01c fe13 	bl	27f0e <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    b2e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b2ea:	2201      	movs	r2, #1
    b2ec:	2100      	movs	r1, #0
    b2ee:	f01b f849 	bl	26384 <ring_buf_get>
    b2f2:	b970      	cbnz	r0, b312 <cdc_acm_poll_out+0xa2>
			LOG_ERR("Failed to drain buffer");
    b2f4:	682b      	ldr	r3, [r5, #0]
    b2f6:	075b      	lsls	r3, r3, #29
    b2f8:	d0d7      	beq.n	b2aa <cdc_acm_poll_out+0x3a>
    b2fa:	4b11      	ldr	r3, [pc, #68]	; (b340 <cdc_acm_poll_out+0xd0>)
    b2fc:	9308      	str	r3, [sp, #32]
    b2fe:	4b0e      	ldr	r3, [pc, #56]	; (b338 <cdc_acm_poll_out+0xc8>)
    b300:	9309      	str	r3, [sp, #36]	; 0x24
    b302:	2303      	movs	r3, #3
    b304:	480a      	ldr	r0, [pc, #40]	; (b330 <cdc_acm_poll_out+0xc0>)
    b306:	9303      	str	r3, [sp, #12]
    b308:	9307      	str	r3, [sp, #28]
    b30a:	aa07      	add	r2, sp, #28
    b30c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b310:	e7c9      	b.n	b2a6 <cdc_acm_poll_out+0x36>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    b312:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b314:	2201      	movs	r2, #1
    b316:	f10d 0107 	add.w	r1, sp, #7
    b31a:	f01a ffcb 	bl	262b4 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    b31e:	2800      	cmp	r0, #0
    b320:	d0e8      	beq.n	b2f4 <cdc_acm_poll_out+0x84>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    b322:	f104 0118 	add.w	r1, r4, #24
    b326:	4807      	ldr	r0, [pc, #28]	; (b344 <cdc_acm_poll_out+0xd4>)
    b328:	f01f fd8b 	bl	2ae42 <k_work_submit_to_queue>
    b32c:	e7bd      	b.n	b2aa <cdc_acm_poll_out+0x3a>
    b32e:	bf00      	nop
    b330:	200009ec 	.word	0x200009ec
    b334:	0002f8f6 	.word	0x0002f8f6
    b338:	0002faaa 	.word	0x0002faaa
    b33c:	0002f91a 	.word	0x0002f91a
    b340:	0002f93d 	.word	0x0002f93d
    b344:	20002db0 	.word	0x20002db0

0000b348 <cdc_acm_read_cb>:
{
    b348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (size <= 0) {
    b34c:	1e0d      	subs	r5, r1, #0
{
    b34e:	b085      	sub	sp, #20
    b350:	4606      	mov	r6, r0
    b352:	af02      	add	r7, sp, #8
    b354:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    b356:	f102 082c 	add.w	r8, r2, #44	; 0x2c
	if (size <= 0) {
    b35a:	dd2b      	ble.n	b3b4 <cdc_acm_read_cb+0x6c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    b35c:	462a      	mov	r2, r5
    b35e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    b360:	4641      	mov	r1, r8
    b362:	f01a ffa7 	bl	262b4 <ring_buf_put>
	if (wrote < size) {
    b366:	4285      	cmp	r5, r0
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    b368:	4602      	mov	r2, r0
	if (wrote < size) {
    b36a:	d916      	bls.n	b39a <cdc_acm_read_cb+0x52>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    b36c:	4818      	ldr	r0, [pc, #96]	; (b3d0 <cdc_acm_read_cb+0x88>)
    b36e:	6803      	ldr	r3, [r0, #0]
    b370:	075b      	lsls	r3, r3, #29
    b372:	d012      	beq.n	b39a <cdc_acm_read_cb+0x52>
    b374:	46e9      	mov	r9, sp
    b376:	b088      	sub	sp, #32
    b378:	ab02      	add	r3, sp, #8
    b37a:	4916      	ldr	r1, [pc, #88]	; (b3d4 <cdc_acm_read_cb+0x8c>)
    b37c:	9106      	str	r1, [sp, #24]
    b37e:	1aad      	subs	r5, r5, r2
    b380:	4915      	ldr	r1, [pc, #84]	; (b3d8 <cdc_acm_read_cb+0x90>)
    b382:	9107      	str	r1, [sp, #28]
    b384:	461a      	mov	r2, r3
    b386:	2104      	movs	r1, #4
    b388:	9508      	str	r5, [sp, #32]
    b38a:	6079      	str	r1, [r7, #4]
    b38c:	f842 1f0c 	str.w	r1, [r2, #12]!
    b390:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b394:	f01c fdbb 	bl	27f0e <z_log_msg2_static_create.constprop.0>
    b398:	46cd      	mov	sp, r9
	dev_data->rx_ready = true;
    b39a:	2301      	movs	r3, #1
    b39c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    b3a0:	6823      	ldr	r3, [r4, #0]
    b3a2:	b13b      	cbz	r3, b3b4 <cdc_acm_read_cb+0x6c>
    b3a4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b3a8:	b123      	cbz	r3, b3b4 <cdc_acm_read_cb+0x6c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    b3aa:	480c      	ldr	r0, [pc, #48]	; (b3dc <cdc_acm_read_cb+0x94>)
    b3ac:	f104 0108 	add.w	r1, r4, #8
    b3b0:	f01f fd47 	bl	2ae42 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    b3b4:	4b0a      	ldr	r3, [pc, #40]	; (b3e0 <cdc_acm_read_cb+0x98>)
    b3b6:	9300      	str	r3, [sp, #0]
    b3b8:	9401      	str	r4, [sp, #4]
    b3ba:	2301      	movs	r3, #1
    b3bc:	2240      	movs	r2, #64	; 0x40
    b3be:	4641      	mov	r1, r8
    b3c0:	4630      	mov	r0, r6
    b3c2:	f7ff fdc1 	bl	af48 <usb_transfer>
}
    b3c6:	370c      	adds	r7, #12
    b3c8:	46bd      	mov	sp, r7
    b3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b3ce:	bf00      	nop
    b3d0:	200009ec 	.word	0x200009ec
    b3d4:	0002f958 	.word	0x0002f958
    b3d8:	0002facd 	.word	0x0002facd
    b3dc:	20002db0 	.word	0x20002db0
    b3e0:	0000b349 	.word	0x0000b349

0000b3e4 <cdc_acm_dev_status_cb>:
{
    b3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3e8:	b088      	sub	sp, #32
    b3ea:	4605      	mov	r5, r0
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    b3f0:	4601      	mov	r1, r0
    b3f2:	486a      	ldr	r0, [pc, #424]	; (b59c <cdc_acm_dev_status_cb+0x1b8>)
    b3f4:	f01c fce8 	bl	27dc8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    b3f8:	4604      	mov	r4, r0
    b3fa:	b9c8      	cbnz	r0, b430 <cdc_acm_dev_status_cb+0x4c>
		LOG_WRN("Device data not found for cfg %p", cfg);
    b3fc:	4868      	ldr	r0, [pc, #416]	; (b5a0 <cdc_acm_dev_status_cb+0x1bc>)
    b3fe:	6803      	ldr	r3, [r0, #0]
    b400:	f013 0f06 	tst.w	r3, #6
    b404:	d010      	beq.n	b428 <cdc_acm_dev_status_cb+0x44>
    b406:	466c      	mov	r4, sp
    b408:	b088      	sub	sp, #32
    b40a:	466a      	mov	r2, sp
    b40c:	4b65      	ldr	r3, [pc, #404]	; (b5a4 <cdc_acm_dev_status_cb+0x1c0>)
    b40e:	6113      	str	r3, [r2, #16]
    b410:	4b65      	ldr	r3, [pc, #404]	; (b5a8 <cdc_acm_dev_status_cb+0x1c4>)
    b412:	e9c2 3505 	strd	r3, r5, [r2, #20]
    b416:	2304      	movs	r3, #4
    b418:	f842 3f0c 	str.w	r3, [r2, #12]!
    b41c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b420:	60bb      	str	r3, [r7, #8]
    b422:	f01c fd74 	bl	27f0e <z_log_msg2_static_create.constprop.0>
    b426:	46a5      	mov	sp, r4
}
    b428:	3720      	adds	r7, #32
    b42a:	46bd      	mov	sp, r7
    b42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    b430:	4605      	mov	r5, r0
	switch (status) {
    b432:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    b434:	f855 3980 	ldr.w	r3, [r5], #-128
    b438:	f8d3 8004 	ldr.w	r8, [r3, #4]
	switch (status) {
    b43c:	2905      	cmp	r1, #5
    b43e:	d8f3      	bhi.n	b428 <cdc_acm_dev_status_cb+0x44>
    b440:	a301      	add	r3, pc, #4	; (adr r3, b448 <cdc_acm_dev_status_cb+0x64>)
    b442:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    b446:	bf00      	nop
    b448:	0000b4ef 	.word	0x0000b4ef
    b44c:	0000b429 	.word	0x0000b429
    b450:	0000b461 	.word	0x0000b461
    b454:	0000b4c9 	.word	0x0000b4c9
    b458:	0000b4f7 	.word	0x0000b4f7
    b45c:	0000b525 	.word	0x0000b525
		LOG_INF("Device configured");
    b460:	484f      	ldr	r0, [pc, #316]	; (b5a0 <cdc_acm_dev_status_cb+0x1bc>)
    b462:	6803      	ldr	r3, [r0, #0]
    b464:	f003 0307 	and.w	r3, r3, #7
    b468:	2b02      	cmp	r3, #2
    b46a:	d90c      	bls.n	b486 <cdc_acm_dev_status_cb+0xa2>
    b46c:	4b4f      	ldr	r3, [pc, #316]	; (b5ac <cdc_acm_dev_status_cb+0x1c8>)
    b46e:	61bb      	str	r3, [r7, #24]
    b470:	4b4f      	ldr	r3, [pc, #316]	; (b5b0 <cdc_acm_dev_status_cb+0x1cc>)
    b472:	61fb      	str	r3, [r7, #28]
    b474:	f107 0214 	add.w	r2, r7, #20
    b478:	2303      	movs	r3, #3
    b47a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b47e:	607b      	str	r3, [r7, #4]
    b480:	617b      	str	r3, [r7, #20]
    b482:	f01c fd44 	bl	27f0e <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    b486:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    b48a:	b941      	cbnz	r1, b49e <cdc_acm_dev_status_cb+0xba>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    b48c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    b490:	462a      	mov	r2, r5
    b492:	7b18      	ldrb	r0, [r3, #12]
    b494:	f7ff ff58 	bl	b348 <cdc_acm_read_cb>
			dev_data->configured = true;
    b498:	2301      	movs	r3, #1
    b49a:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    b49e:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	d1c0      	bne.n	b428 <cdc_acm_dev_status_cb+0x44>
			dev_data->tx_ready = true;
    b4a6:	2301      	movs	r3, #1
    b4a8:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    b4ac:	f854 3c80 	ldr.w	r3, [r4, #-128]
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	d0b9      	beq.n	b428 <cdc_acm_dev_status_cb+0x44>
    b4b4:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d0b5      	beq.n	b428 <cdc_acm_dev_status_cb+0x44>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    b4bc:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
    b4c0:	483c      	ldr	r0, [pc, #240]	; (b5b4 <cdc_acm_dev_status_cb+0x1d0>)
    b4c2:	f01f fcbe 	bl	2ae42 <k_work_submit_to_queue>
    b4c6:	e7af      	b.n	b428 <cdc_acm_dev_status_cb+0x44>
		LOG_INF("Device disconnected");
    b4c8:	4835      	ldr	r0, [pc, #212]	; (b5a0 <cdc_acm_dev_status_cb+0x1bc>)
    b4ca:	6803      	ldr	r3, [r0, #0]
    b4cc:	f003 0307 	and.w	r3, r3, #7
    b4d0:	2b02      	cmp	r3, #2
    b4d2:	d90c      	bls.n	b4ee <cdc_acm_dev_status_cb+0x10a>
    b4d4:	4b38      	ldr	r3, [pc, #224]	; (b5b8 <cdc_acm_dev_status_cb+0x1d4>)
    b4d6:	61bb      	str	r3, [r7, #24]
    b4d8:	4b35      	ldr	r3, [pc, #212]	; (b5b0 <cdc_acm_dev_status_cb+0x1cc>)
    b4da:	61fb      	str	r3, [r7, #28]
    b4dc:	f107 0214 	add.w	r2, r7, #20
    b4e0:	2303      	movs	r3, #3
    b4e2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b4e6:	607b      	str	r3, [r7, #4]
    b4e8:	617b      	str	r3, [r7, #20]
    b4ea:	f01c fd10 	bl	27f0e <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    b4ee:	4628      	mov	r0, r5
    b4f0:	f7ff fe5c 	bl	b1ac <cdc_acm_reset_port>
		break;
    b4f4:	e798      	b.n	b428 <cdc_acm_dev_status_cb+0x44>
		LOG_INF("Device suspended");
    b4f6:	482a      	ldr	r0, [pc, #168]	; (b5a0 <cdc_acm_dev_status_cb+0x1bc>)
    b4f8:	6803      	ldr	r3, [r0, #0]
    b4fa:	f003 0307 	and.w	r3, r3, #7
    b4fe:	2b02      	cmp	r3, #2
    b500:	d90c      	bls.n	b51c <cdc_acm_dev_status_cb+0x138>
    b502:	4b2e      	ldr	r3, [pc, #184]	; (b5bc <cdc_acm_dev_status_cb+0x1d8>)
    b504:	61bb      	str	r3, [r7, #24]
    b506:	4b2a      	ldr	r3, [pc, #168]	; (b5b0 <cdc_acm_dev_status_cb+0x1cc>)
    b508:	61fb      	str	r3, [r7, #28]
    b50a:	f107 0214 	add.w	r2, r7, #20
    b50e:	2303      	movs	r3, #3
    b510:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b514:	607b      	str	r3, [r7, #4]
    b516:	617b      	str	r3, [r7, #20]
    b518:	f01c fcf9 	bl	27f0e <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    b51c:	2301      	movs	r3, #1
    b51e:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    b522:	e781      	b.n	b428 <cdc_acm_dev_status_cb+0x44>
		LOG_INF("Device resumed");
    b524:	4e1e      	ldr	r6, [pc, #120]	; (b5a0 <cdc_acm_dev_status_cb+0x1bc>)
    b526:	6833      	ldr	r3, [r6, #0]
    b528:	f003 0307 	and.w	r3, r3, #7
    b52c:	2b02      	cmp	r3, #2
    b52e:	d90d      	bls.n	b54c <cdc_acm_dev_status_cb+0x168>
    b530:	4b23      	ldr	r3, [pc, #140]	; (b5c0 <cdc_acm_dev_status_cb+0x1dc>)
    b532:	61bb      	str	r3, [r7, #24]
    b534:	4b1e      	ldr	r3, [pc, #120]	; (b5b0 <cdc_acm_dev_status_cb+0x1cc>)
    b536:	61fb      	str	r3, [r7, #28]
    b538:	f107 0214 	add.w	r2, r7, #20
    b53c:	2303      	movs	r3, #3
    b53e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b542:	4630      	mov	r0, r6
    b544:	607b      	str	r3, [r7, #4]
    b546:	617b      	str	r3, [r7, #20]
    b548:	f01c fce1 	bl	27f0e <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    b54c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b550:	2b00      	cmp	r3, #0
    b552:	f43f af69 	beq.w	b428 <cdc_acm_dev_status_cb+0x44>
			LOG_INF("from suspend");
    b556:	6833      	ldr	r3, [r6, #0]
    b558:	f003 0307 	and.w	r3, r3, #7
    b55c:	2b02      	cmp	r3, #2
    b55e:	d90d      	bls.n	b57c <cdc_acm_dev_status_cb+0x198>
    b560:	4b18      	ldr	r3, [pc, #96]	; (b5c4 <cdc_acm_dev_status_cb+0x1e0>)
    b562:	61bb      	str	r3, [r7, #24]
    b564:	4b12      	ldr	r3, [pc, #72]	; (b5b0 <cdc_acm_dev_status_cb+0x1cc>)
    b566:	61fb      	str	r3, [r7, #28]
    b568:	480d      	ldr	r0, [pc, #52]	; (b5a0 <cdc_acm_dev_status_cb+0x1bc>)
    b56a:	2303      	movs	r3, #3
    b56c:	f107 0214 	add.w	r2, r7, #20
    b570:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b574:	607b      	str	r3, [r7, #4]
    b576:	617b      	str	r3, [r7, #20]
    b578:	f01c fcc9 	bl	27f0e <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    b57c:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    b580:	2100      	movs	r1, #0
    b582:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    b586:	2b00      	cmp	r3, #0
    b588:	f43f af4e 	beq.w	b428 <cdc_acm_dev_status_cb+0x44>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    b58c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    b590:	462a      	mov	r2, r5
    b592:	7b18      	ldrb	r0, [r3, #12]
    b594:	f7ff fed8 	bl	b348 <cdc_acm_read_cb>
    b598:	e746      	b.n	b428 <cdc_acm_dev_status_cb+0x44>
    b59a:	bf00      	nop
    b59c:	20003f74 	.word	0x20003f74
    b5a0:	200009ec 	.word	0x200009ec
    b5a4:	0002f97d 	.word	0x0002f97d
    b5a8:	0002faeb 	.word	0x0002faeb
    b5ac:	0002f9a2 	.word	0x0002f9a2
    b5b0:	0002fadd 	.word	0x0002fadd
    b5b4:	20002db0 	.word	0x20002db0
    b5b8:	0002f9b8 	.word	0x0002f9b8
    b5bc:	0002f9d0 	.word	0x0002f9d0
    b5c0:	0002f9e5 	.word	0x0002f9e5
    b5c4:	0002f9f8 	.word	0x0002f9f8

0000b5c8 <cdc_acm_fifo_fill>:
{
    b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5cc:	b082      	sub	sp, #8
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b5ce:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    b5d0:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    b5d4:	af00      	add	r7, sp, #0
    b5d6:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    b5d8:	b113      	cbz	r3, b5e0 <cdc_acm_fifo_fill+0x18>
    b5da:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    b5de:	b1d3      	cbz	r3, b616 <cdc_acm_fifo_fill+0x4e>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    b5e0:	4820      	ldr	r0, [pc, #128]	; (b664 <cdc_acm_fifo_fill+0x9c>)
    b5e2:	6804      	ldr	r4, [r0, #0]
    b5e4:	f014 0406 	ands.w	r4, r4, #6
    b5e8:	d039      	beq.n	b65e <cdc_acm_fifo_fill+0x96>
    b5ea:	466c      	mov	r4, sp
    b5ec:	b088      	sub	sp, #32
    b5ee:	466a      	mov	r2, sp
    b5f0:	4b1d      	ldr	r3, [pc, #116]	; (b668 <cdc_acm_fifo_fill+0xa0>)
    b5f2:	6113      	str	r3, [r2, #16]
    b5f4:	4b1d      	ldr	r3, [pc, #116]	; (b66c <cdc_acm_fifo_fill+0xa4>)
    b5f6:	e9c2 3505 	strd	r3, r5, [r2, #20]
    b5fa:	2304      	movs	r3, #4
    b5fc:	f842 3f0c 	str.w	r3, [r2, #12]!
    b600:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b604:	607b      	str	r3, [r7, #4]
    b606:	f01c fc82 	bl	27f0e <z_log_msg2_static_create.constprop.0>
		return 0;
    b60a:	2000      	movs	r0, #0
    b60c:	46a5      	mov	sp, r4
}
    b60e:	3708      	adds	r7, #8
    b610:	46bd      	mov	sp, r7
    b612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    b616:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    b618:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    b61c:	f01a fe4a 	bl	262b4 <ring_buf_put>
	if (wrote < len) {
    b620:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    b622:	4604      	mov	r4, r0
	if (wrote < len) {
    b624:	d216      	bcs.n	b654 <cdc_acm_fifo_fill+0x8c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    b626:	480f      	ldr	r0, [pc, #60]	; (b664 <cdc_acm_fifo_fill+0x9c>)
    b628:	6803      	ldr	r3, [r0, #0]
    b62a:	f013 0f06 	tst.w	r3, #6
    b62e:	d011      	beq.n	b654 <cdc_acm_fifo_fill+0x8c>
    b630:	46e8      	mov	r8, sp
    b632:	b088      	sub	sp, #32
    b634:	466a      	mov	r2, sp
    b636:	4b0e      	ldr	r3, [pc, #56]	; (b670 <cdc_acm_fifo_fill+0xa8>)
    b638:	6113      	str	r3, [r2, #16]
    b63a:	4b0c      	ldr	r3, [pc, #48]	; (b66c <cdc_acm_fifo_fill+0xa4>)
    b63c:	6153      	str	r3, [r2, #20]
    b63e:	1b2d      	subs	r5, r5, r4
    b640:	2304      	movs	r3, #4
    b642:	6195      	str	r5, [r2, #24]
    b644:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b648:	f842 3f0c 	str.w	r3, [r2, #12]!
    b64c:	607b      	str	r3, [r7, #4]
    b64e:	f01c fc5e 	bl	27f0e <z_log_msg2_static_create.constprop.0>
    b652:	46c5      	mov	sp, r8
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    b654:	4807      	ldr	r0, [pc, #28]	; (b674 <cdc_acm_fifo_fill+0xac>)
    b656:	f106 0118 	add.w	r1, r6, #24
    b65a:	f01f fbf2 	bl	2ae42 <k_work_submit_to_queue>
		return 0;
    b65e:	4620      	mov	r0, r4
    b660:	e7d5      	b.n	b60e <cdc_acm_fifo_fill+0x46>
    b662:	bf00      	nop
    b664:	200009ec 	.word	0x200009ec
    b668:	0002fa09 	.word	0x0002fa09
    b66c:	0002fabb 	.word	0x0002fabb
    b670:	0002f958 	.word	0x0002f958
    b674:	20002db0 	.word	0x20002db0

0000b678 <cdc_acm_int_in>:
{
    b678:	b5b0      	push	{r4, r5, r7, lr}
    b67a:	b082      	sub	sp, #8
    b67c:	4604      	mov	r4, r0
    b67e:	af00      	add	r7, sp, #0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    b680:	4601      	mov	r1, r0
    b682:	4810      	ldr	r0, [pc, #64]	; (b6c4 <cdc_acm_int_in+0x4c>)
    b684:	f01c fbba 	bl	27dfc <usb_get_dev_data_by_ep>
	if (common == NULL) {
    b688:	b9c0      	cbnz	r0, b6bc <cdc_acm_int_in+0x44>
		LOG_WRN("Device data not found for endpoint %u", ep);
    b68a:	480f      	ldr	r0, [pc, #60]	; (b6c8 <cdc_acm_int_in+0x50>)
    b68c:	6803      	ldr	r3, [r0, #0]
    b68e:	f013 0f06 	tst.w	r3, #6
    b692:	d010      	beq.n	b6b6 <cdc_acm_int_in+0x3e>
    b694:	466d      	mov	r5, sp
    b696:	b088      	sub	sp, #32
    b698:	466a      	mov	r2, sp
    b69a:	4b0c      	ldr	r3, [pc, #48]	; (b6cc <cdc_acm_int_in+0x54>)
    b69c:	6113      	str	r3, [r2, #16]
    b69e:	4b0c      	ldr	r3, [pc, #48]	; (b6d0 <cdc_acm_int_in+0x58>)
    b6a0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b6a4:	2304      	movs	r3, #4
    b6a6:	f842 3f0c 	str.w	r3, [r2, #12]!
    b6aa:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b6ae:	607b      	str	r3, [r7, #4]
    b6b0:	f01c fc2d 	bl	27f0e <z_log_msg2_static_create.constprop.0>
    b6b4:	46ad      	mov	sp, r5
}
    b6b6:	3708      	adds	r7, #8
    b6b8:	46bd      	mov	sp, r7
    b6ba:	bdb0      	pop	{r4, r5, r7, pc}
	dev_data->notification_sent = 1U;
    b6bc:	2301      	movs	r3, #1
    b6be:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    b6c2:	e7f8      	b.n	b6b6 <cdc_acm_int_in+0x3e>
    b6c4:	20003f74 	.word	0x20003f74
    b6c8:	200009ec 	.word	0x200009ec
    b6cc:	0002fa3f 	.word	0x0002fa3f
    b6d0:	0002fb01 	.word	0x0002fb01

0000b6d4 <cdc_acm_class_handle_req>:
{
    b6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6d6:	b083      	sub	sp, #12
    b6d8:	4604      	mov	r4, r0
    b6da:	af00      	add	r7, sp, #0
    b6dc:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    b6de:	7901      	ldrb	r1, [r0, #4]
    b6e0:	481f      	ldr	r0, [pc, #124]	; (b760 <cdc_acm_class_handle_req+0x8c>)
{
    b6e2:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    b6e4:	f01c fb7c 	bl	27de0 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    b6e8:	b9c8      	cbnz	r0, b71e <cdc_acm_class_handle_req+0x4a>
		LOG_WRN("Device data not found for interface %u",
    b6ea:	481e      	ldr	r0, [pc, #120]	; (b764 <cdc_acm_class_handle_req+0x90>)
    b6ec:	6803      	ldr	r3, [r0, #0]
    b6ee:	f013 0f06 	tst.w	r3, #6
    b6f2:	d011      	beq.n	b718 <cdc_acm_class_handle_req+0x44>
    b6f4:	88a3      	ldrh	r3, [r4, #4]
    b6f6:	491c      	ldr	r1, [pc, #112]	; (b768 <cdc_acm_class_handle_req+0x94>)
    b6f8:	466c      	mov	r4, sp
    b6fa:	b088      	sub	sp, #32
    b6fc:	466a      	mov	r2, sp
    b6fe:	6111      	str	r1, [r2, #16]
    b700:	491a      	ldr	r1, [pc, #104]	; (b76c <cdc_acm_class_handle_req+0x98>)
    b702:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b706:	2304      	movs	r3, #4
    b708:	f842 3f0c 	str.w	r3, [r2, #12]!
    b70c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b710:	607b      	str	r3, [r7, #4]
    b712:	f01c fbfc 	bl	27f0e <z_log_msg2_static_create.constprop.0>
    b716:	46a5      	mov	sp, r4
		return -ENODEV;
    b718:	f06f 0012 	mvn.w	r0, #18
    b71c:	e011      	b.n	b742 <cdc_acm_class_handle_req+0x6e>
	if (usb_reqtype_is_to_device(setup)) {
    b71e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    b722:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    b724:	2a00      	cmp	r2, #0
    b726:	db13      	blt.n	b750 <cdc_acm_class_handle_req+0x7c>
		switch (setup->bRequest) {
    b728:	2b20      	cmp	r3, #32
    b72a:	d004      	beq.n	b736 <cdc_acm_class_handle_req+0x62>
    b72c:	2b22      	cmp	r3, #34	; 0x22
    b72e:	d00b      	beq.n	b748 <cdc_acm_class_handle_req+0x74>
	return -ENOTSUP;
    b730:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b734:	e005      	b.n	b742 <cdc_acm_class_handle_req+0x6e>
			memcpy(&dev_data->line_coding, *data,
    b736:	6829      	ldr	r1, [r5, #0]
    b738:	2207      	movs	r2, #7
    b73a:	380c      	subs	r0, #12
    b73c:	f01d f838 	bl	287b0 <memcpy>
			return 0;
    b740:	2000      	movs	r0, #0
}
    b742:	370c      	adds	r7, #12
    b744:	46bd      	mov	sp, r7
    b746:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    b748:	8863      	ldrh	r3, [r4, #2]
    b74a:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    b74e:	e7f7      	b.n	b740 <cdc_acm_class_handle_req+0x6c>
		if (setup->bRequest == GET_LINE_CODING) {
    b750:	2b21      	cmp	r3, #33	; 0x21
    b752:	d1ed      	bne.n	b730 <cdc_acm_class_handle_req+0x5c>
			*data = (uint8_t *)(&dev_data->line_coding);
    b754:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    b756:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    b758:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    b75a:	6033      	str	r3, [r6, #0]
    b75c:	e7f0      	b.n	b740 <cdc_acm_class_handle_req+0x6c>
    b75e:	bf00      	nop
    b760:	20003f74 	.word	0x20003f74
    b764:	200009ec 	.word	0x200009ec
    b768:	0002fa69 	.word	0x0002fa69
    b76c:	0002fb10 	.word	0x0002fb10

0000b770 <cdc_acm_init>:
{
    b770:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b772:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    b774:	2300      	movs	r3, #0
    b776:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    b77a:	4b0c      	ldr	r3, [pc, #48]	; (b7ac <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    b77c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    b780:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    b782:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    b786:	b969      	cbnz	r1, b7a4 <cdc_acm_init+0x34>
	list->head = node;
    b788:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    b78c:	f104 0008 	add.w	r0, r4, #8
    b790:	4907      	ldr	r1, [pc, #28]	; (b7b0 <cdc_acm_init+0x40>)
    b792:	f01f fb4d 	bl	2ae30 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    b796:	f104 0018 	add.w	r0, r4, #24
    b79a:	4906      	ldr	r1, [pc, #24]	; (b7b4 <cdc_acm_init+0x44>)
    b79c:	f01f fb48 	bl	2ae30 <k_work_init>
}
    b7a0:	2000      	movs	r0, #0
    b7a2:	bd10      	pop	{r4, pc}
	parent->next = child;
    b7a4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    b7a6:	605a      	str	r2, [r3, #4]
}
    b7a8:	e7f0      	b.n	b78c <cdc_acm_init+0x1c>
    b7aa:	bf00      	nop
    b7ac:	20003f74 	.word	0x20003f74
    b7b0:	00027e53 	.word	0x00027e53
    b7b4:	0000b21d 	.word	0x0000b21d

0000b7b8 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    b7b8:	b530      	push	{r4, r5, lr}
    b7ba:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    b7bc:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b7be:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    b7c0:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    b7c4:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    b7c6:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    b7c8:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    b7cc:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    b7ce:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    b7d2:	2002      	movs	r0, #2
    b7d4:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    b7d8:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    b7da:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    b7de:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    b7e2:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    b7e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    b7e8:	220a      	movs	r2, #10
    b7ea:	a901      	add	r1, sp, #4
    b7ec:	f7fe ff28 	bl	a640 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    b7f0:	4c05      	ldr	r4, [pc, #20]	; (b808 <cdc_acm_send_notification.isra.0+0x50>)
    b7f2:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    b7f6:	b923      	cbnz	r3, b802 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    b7f8:	2001      	movs	r0, #1
    b7fa:	f01f fce3 	bl	2b1c4 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    b7fe:	3c01      	subs	r4, #1
    b800:	d1f7      	bne.n	b7f2 <cdc_acm_send_notification.isra.0+0x3a>
}
    b802:	b005      	add	sp, #20
    b804:	bd30      	pop	{r4, r5, pc}
    b806:	bf00      	nop
    b808:	000186a1 	.word	0x000186a1

0000b80c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    b80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    b80e:	4d09      	ldr	r5, [pc, #36]	; (b834 <z_usb_work_q_init+0x28>)
    b810:	4909      	ldr	r1, [pc, #36]	; (b838 <z_usb_work_q_init+0x2c>)
    b812:	2400      	movs	r4, #0
    b814:	9400      	str	r4, [sp, #0]
    b816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b81a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b81e:	4628      	mov	r0, r5
    b820:	f019 fa26 	bl	24c70 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    b824:	4905      	ldr	r1, [pc, #20]	; (b83c <z_usb_work_q_init+0x30>)
    b826:	4628      	mov	r0, r5
    b828:	f018 fe6a 	bl	24500 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    b82c:	4620      	mov	r0, r4
    b82e:	b003      	add	sp, #12
    b830:	bd30      	pop	{r4, r5, pc}
    b832:	bf00      	nop
    b834:	20002db0 	.word	0x20002db0
    b838:	20007be0 	.word	0x20007be0
    b83c:	0002fb29 	.word	0x0002fb29

0000b840 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    b840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b844:	4605      	mov	r5, r0
	__asm__ volatile(
    b846:	f04f 0320 	mov.w	r3, #32
    b84a:	f3ef 8611 	mrs	r6, BASEPRI
    b84e:	f383 8812 	msr	BASEPRI_MAX, r3
    b852:	f3bf 8f6f 	isb	sy
	return list->head;
    b856:	4b0e      	ldr	r3, [pc, #56]	; (b890 <pm_state_notify+0x50>)
    b858:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b85a:	b19c      	cbz	r4, b884 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b85c:	4f0d      	ldr	r7, [pc, #52]	; (b894 <pm_state_notify+0x54>)
    b85e:	f8df 8038 	ldr.w	r8, [pc, #56]	; b898 <pm_state_notify+0x58>
    b862:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    b866:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    b86a:	2d00      	cmp	r5, #0
    b86c:	bf08      	it	eq
    b86e:	4613      	moveq	r3, r2
		if (callback) {
    b870:	b12b      	cbz	r3, b87e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b872:	f898 2014 	ldrb.w	r2, [r8, #20]
    b876:	fb09 f202 	mul.w	r2, r9, r2
    b87a:	5cb8      	ldrb	r0, [r7, r2]
    b87c:	4798      	blx	r3
	return node->next;
    b87e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b880:	2c00      	cmp	r4, #0
    b882:	d1f0      	bne.n	b866 <pm_state_notify+0x26>
	__asm__ volatile(
    b884:	f386 8811 	msr	BASEPRI, r6
    b888:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    b88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b890:	20003f7c 	.word	0x20003f7c
    b894:	20003f84 	.word	0x20003f84
    b898:	20005e4c 	.word	0x20005e4c

0000b89c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b89c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    b89e:	2301      	movs	r3, #1
    b8a0:	f000 001f 	and.w	r0, r0, #31
    b8a4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b8a8:	4b07      	ldr	r3, [pc, #28]	; (b8c8 <atomic_clear_bit.constprop.0+0x2c>)
    b8aa:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b8ae:	43c0      	mvns	r0, r0
    b8b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b8b4:	e853 2f00 	ldrex	r2, [r3]
    b8b8:	4002      	ands	r2, r0
    b8ba:	e843 2100 	strex	r1, r2, [r3]
    b8be:	2900      	cmp	r1, #0
    b8c0:	d1f8      	bne.n	b8b4 <atomic_clear_bit.constprop.0+0x18>
    b8c2:	f3bf 8f5b 	dmb	ish
}
    b8c6:	4770      	bx	lr
    b8c8:	20003f90 	.word	0x20003f90

0000b8cc <pm_system_resume>:

void pm_system_resume(void)
{
    b8cc:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    b8ce:	4b1d      	ldr	r3, [pc, #116]	; (b944 <pm_system_resume+0x78>)
    b8d0:	7d1c      	ldrb	r4, [r3, #20]
    b8d2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    b8d6:	f004 031f 	and.w	r3, r4, #31
    b8da:	2201      	movs	r2, #1
    b8dc:	409a      	lsls	r2, r3
    b8de:	4b1a      	ldr	r3, [pc, #104]	; (b948 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b8e0:	0961      	lsrs	r1, r4, #5
{
    b8e2:	b085      	sub	sp, #20
    b8e4:	43d0      	mvns	r0, r2
    b8e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b8ea:	e853 1f00 	ldrex	r1, [r3]
    b8ee:	ea01 0500 	and.w	r5, r1, r0
    b8f2:	e843 5c00 	strex	ip, r5, [r3]
    b8f6:	f1bc 0f00 	cmp.w	ip, #0
    b8fa:	d1f6      	bne.n	b8ea <pm_system_resume+0x1e>
    b8fc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b900:	4211      	tst	r1, r2
    b902:	d017      	beq.n	b934 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    b904:	4d11      	ldr	r5, [pc, #68]	; (b94c <pm_system_resume+0x80>)
    b906:	220c      	movs	r2, #12
    b908:	fb02 5204 	mla	r2, r2, r4, r5
    b90c:	ca07      	ldmia	r2, {r0, r1, r2}
    b90e:	ab01      	add	r3, sp, #4
    b910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    b914:	4a0e      	ldr	r2, [pc, #56]	; (b950 <pm_system_resume+0x84>)
    b916:	b17a      	cbz	r2, b938 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    b918:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    b91c:	f01c ff7c 	bl	28818 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    b920:	2000      	movs	r0, #0
    b922:	f7ff ff8d 	bl	b840 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b926:	230c      	movs	r3, #12
    b928:	435c      	muls	r4, r3
    b92a:	192a      	adds	r2, r5, r4
    b92c:	2300      	movs	r3, #0
    b92e:	512b      	str	r3, [r5, r4]
    b930:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b934:	b005      	add	sp, #20
    b936:	bd30      	pop	{r4, r5, pc}
    b938:	f382 8811 	msr	BASEPRI, r2
    b93c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b940:	e7ee      	b.n	b920 <pm_system_resume+0x54>
    b942:	bf00      	nop
    b944:	20005e4c 	.word	0x20005e4c
    b948:	20003f94 	.word	0x20003f94
    b94c:	20003f84 	.word	0x20003f84
    b950:	00028819 	.word	0x00028819

0000b954 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    b954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    b958:	4b35      	ldr	r3, [pc, #212]	; (ba30 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b95a:	4a36      	ldr	r2, [pc, #216]	; (ba34 <pm_system_suspend+0xe0>)
    b95c:	7d1c      	ldrb	r4, [r3, #20]
    b95e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b962:	0963      	lsrs	r3, r4, #5
    b964:	ea4f 0983 	mov.w	r9, r3, lsl #2
    b968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b96c:	4d32      	ldr	r5, [pc, #200]	; (ba38 <pm_system_suspend+0xe4>)
    b96e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b972:	f004 081f 	and.w	r8, r4, #31
    b976:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    b97a:	f013 0f01 	tst.w	r3, #1
{
    b97e:	b085      	sub	sp, #20
    b980:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    b982:	d10a      	bne.n	b99a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    b984:	4601      	mov	r1, r0
    b986:	4620      	mov	r0, r4
    b988:	f000 f876 	bl	ba78 <pm_policy_next_state>
		if (info != NULL) {
    b98c:	b128      	cbz	r0, b99a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    b98e:	c807      	ldmia	r0, {r0, r1, r2}
    b990:	230c      	movs	r3, #12
    b992:	fb03 5304 	mla	r3, r3, r4, r5
    b996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b99a:	230c      	movs	r3, #12
    b99c:	4363      	muls	r3, r4
    b99e:	18ea      	adds	r2, r5, r3
    b9a0:	5cee      	ldrb	r6, [r5, r3]
    b9a2:	b936      	cbnz	r6, b9b2 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    b9a4:	4620      	mov	r0, r4
    b9a6:	f7ff ff79 	bl	b89c <atomic_clear_bit.constprop.0>
		ret = false;
    b9aa:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    b9ac:	b005      	add	sp, #20
    b9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    b9b2:	1c7b      	adds	r3, r7, #1
    b9b4:	d00f      	beq.n	b9d6 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    b9b6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b9ba:	4820      	ldr	r0, [pc, #128]	; (ba3c <pm_system_suspend+0xe8>)
    b9bc:	4a20      	ldr	r2, [pc, #128]	; (ba40 <pm_system_suspend+0xec>)
    b9be:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    b9c2:	2100      	movs	r1, #0
    b9c4:	2300      	movs	r3, #0
    b9c6:	fbec 0106 	umlal	r0, r1, ip, r6
    b9ca:	f7f5 fda5 	bl	1518 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    b9ce:	2101      	movs	r1, #1
    b9d0:	1a38      	subs	r0, r7, r0
    b9d2:	f01f fbd7 	bl	2b184 <z_set_timeout_expiry>
	k_sched_lock();
    b9d6:	f019 fa3f 	bl	24e58 <k_sched_lock>
	pm_state_notify(true);
    b9da:	2001      	movs	r0, #1
    b9dc:	f7ff ff30 	bl	b840 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b9e0:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b9e4:	2301      	movs	r3, #1
    b9e6:	fa03 f808 	lsl.w	r8, r3, r8
    b9ea:	4b16      	ldr	r3, [pc, #88]	; (ba44 <pm_system_suspend+0xf0>)
    b9ec:	4499      	add	r9, r3
    b9ee:	e859 3f00 	ldrex	r3, [r9]
    b9f2:	ea43 0308 	orr.w	r3, r3, r8
    b9f6:	e849 3200 	strex	r2, r3, [r9]
    b9fa:	2a00      	cmp	r2, #0
    b9fc:	d1f7      	bne.n	b9ee <pm_system_suspend+0x9a>
    b9fe:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    ba02:	230c      	movs	r3, #12
    ba04:	fb03 5504 	mla	r5, r3, r4, r5
    ba08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    ba0c:	ab01      	add	r3, sp, #4
    ba0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    ba12:	4a0d      	ldr	r2, [pc, #52]	; (ba48 <pm_system_suspend+0xf4>)
    ba14:	b11a      	cbz	r2, ba1e <pm_system_suspend+0xca>
		pm_power_state_set(info);
    ba16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    ba1a:	f01c feea 	bl	287f2 <pm_power_state_set>
	pm_system_resume();
    ba1e:	f7ff ff55 	bl	b8cc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    ba22:	4620      	mov	r0, r4
    ba24:	f7ff ff3a 	bl	b89c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    ba28:	f019 fbe4 	bl	251f4 <k_sched_unlock>
	bool ret = true;
    ba2c:	2001      	movs	r0, #1
    ba2e:	e7bd      	b.n	b9ac <pm_system_suspend+0x58>
    ba30:	20005e4c 	.word	0x20005e4c
    ba34:	20003f90 	.word	0x20003f90
    ba38:	20003f84 	.word	0x20003f84
    ba3c:	000f423f 	.word	0x000f423f
    ba40:	000f4240 	.word	0x000f4240
    ba44:	20003f94 	.word	0x20003f94
    ba48:	000287f3 	.word	0x000287f3

0000ba4c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba4c:	4b05      	ldr	r3, [pc, #20]	; (ba64 <pm_constraint_get+0x18>)
    ba4e:	f3bf 8f5b 	dmb	ish
    ba52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ba56:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    ba5a:	fab0 f080 	clz	r0, r0
    ba5e:	0940      	lsrs	r0, r0, #5
    ba60:	4770      	bx	lr
    ba62:	bf00      	nop
    ba64:	20003f98 	.word	0x20003f98

0000ba68 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    ba68:	b908      	cbnz	r0, ba6e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    ba6a:	4b02      	ldr	r3, [pc, #8]	; (ba74 <pm_state_cpu_get_all+0xc>)
    ba6c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    ba6e:	2000      	movs	r0, #0
    ba70:	4770      	bx	lr
    ba72:	bf00      	nop
    ba74:	0002c59c 	.word	0x0002c59c

0000ba78 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba7c:	b085      	sub	sp, #20
    ba7e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    ba80:	a903      	add	r1, sp, #12
    ba82:	f7ff fff1 	bl	ba68 <pm_state_cpu_get_all>
    ba86:	f8df a074 	ldr.w	sl, [pc, #116]	; bafc <pm_policy_next_state+0x84>
    ba8a:	f8df 8074 	ldr.w	r8, [pc, #116]	; bb00 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    ba8e:	1e44      	subs	r4, r0, #1
    ba90:	b224      	sxth	r4, r4
    ba92:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    ba96:	f04f 0900 	mov.w	r9, #0
    ba9a:	1c63      	adds	r3, r4, #1
    ba9c:	d104      	bne.n	baa8 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    ba9e:	2500      	movs	r5, #0
}
    baa0:	4628      	mov	r0, r5
    baa2:	b005      	add	sp, #20
    baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    baa8:	9a03      	ldr	r2, [sp, #12]
    baaa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    baae:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    bab2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    bab6:	f7ff ffc9 	bl	ba4c <pm_constraint_get>
    baba:	b1e0      	cbz	r0, baf6 <pm_policy_next_state+0x7e>
    babc:	6868      	ldr	r0, [r5, #4]
    babe:	f04f 0b00 	mov.w	fp, #0
    bac2:	46d4      	mov	ip, sl
    bac4:	4659      	mov	r1, fp
    bac6:	fbe0 c107 	umlal	ip, r1, r0, r7
    baca:	4642      	mov	r2, r8
    bacc:	464b      	mov	r3, r9
    bace:	4660      	mov	r0, ip
    bad0:	f7f5 fd22 	bl	1518 <__aeabi_uldivmod>
    bad4:	9001      	str	r0, [sp, #4]
    bad6:	68a8      	ldr	r0, [r5, #8]
    bad8:	46d4      	mov	ip, sl
    bada:	4659      	mov	r1, fp
    badc:	fbe0 c107 	umlal	ip, r1, r0, r7
    bae0:	4642      	mov	r2, r8
    bae2:	464b      	mov	r3, r9
    bae4:	4660      	mov	r0, ip
    bae6:	f7f5 fd17 	bl	1518 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    baea:	1c72      	adds	r2, r6, #1
    baec:	d0d8      	beq.n	baa0 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    baee:	9b01      	ldr	r3, [sp, #4]
    baf0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    baf2:	42b0      	cmp	r0, r6
    baf4:	d9d4      	bls.n	baa0 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    baf6:	3c01      	subs	r4, #1
    baf8:	b224      	sxth	r4, r4
    bafa:	e7ce      	b.n	ba9a <pm_policy_next_state+0x22>
    bafc:	000f423f 	.word	0x000f423f
    bb00:	000f4240 	.word	0x000f4240

0000bb04 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    bb04:	4904      	ldr	r1, [pc, #16]	; (bb18 <sub_bytes+0x14>)
    bb06:	1e43      	subs	r3, r0, #1
    bb08:	300f      	adds	r0, #15
    bb0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    bb0e:	5c8a      	ldrb	r2, [r1, r2]
    bb10:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    bb12:	4283      	cmp	r3, r0
    bb14:	d1f9      	bne.n	bb0a <sub_bytes+0x6>
	}
}
    bb16:	4770      	bx	lr
    bb18:	0002fb35 	.word	0x0002fb35

0000bb1c <tc_aes128_set_encrypt_key>:
{
    bb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    bb1e:	4e26      	ldr	r6, [pc, #152]	; (bbb8 <tc_aes128_set_encrypt_key+0x9c>)
{
    bb20:	4607      	mov	r7, r0
    bb22:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    bb24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    bb26:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    bb28:	ad01      	add	r5, sp, #4
    bb2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bb2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    bb2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bb30:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    bb34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    bb38:	4638      	mov	r0, r7
    bb3a:	2f00      	cmp	r7, #0
    bb3c:	d038      	beq.n	bbb0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    bb3e:	2c00      	cmp	r4, #0
    bb40:	d038      	beq.n	bbb4 <tc_aes128_set_encrypt_key+0x98>
    bb42:	1f38      	subs	r0, r7, #4
    bb44:	4621      	mov	r1, r4
    bb46:	4602      	mov	r2, r0
    bb48:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    bb4a:	784b      	ldrb	r3, [r1, #1]
    bb4c:	780d      	ldrb	r5, [r1, #0]
    bb4e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    bb50:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    bb54:	78cd      	ldrb	r5, [r1, #3]
    bb56:	432b      	orrs	r3, r5
    bb58:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    bb5a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    bb5c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    bb60:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    bb62:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    bb66:	d1f0      	bne.n	bb4a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    bb68:	4c14      	ldr	r4, [pc, #80]	; (bbbc <tc_aes128_set_encrypt_key+0xa0>)
    bb6a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    bb6c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    bb6e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    bb70:	d116      	bne.n	bba0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    bb72:	f3c3 4207 	ubfx	r2, r3, #16, #8
    bb76:	5ca5      	ldrb	r5, [r4, r2]
    bb78:	0e1a      	lsrs	r2, r3, #24
    bb7a:	5ca2      	ldrb	r2, [r4, r2]
    bb7c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    bb80:	f3c3 2507 	ubfx	r5, r3, #8, #8
    bb84:	b2db      	uxtb	r3, r3
    bb86:	5d65      	ldrb	r5, [r4, r5]
    bb88:	5ce3      	ldrb	r3, [r4, r3]
    bb8a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    bb8e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    bb92:	ad0c      	add	r5, sp, #48	; 0x30
    bb94:	f021 0303 	bic.w	r3, r1, #3
    bb98:	442b      	add	r3, r5
    bb9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    bb9e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    bba0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    bba4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    bba6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    bba8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    bbaa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    bbac:	d1de      	bne.n	bb6c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    bbae:	2001      	movs	r0, #1
}
    bbb0:	b00d      	add	sp, #52	; 0x34
    bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    bbb4:	4620      	mov	r0, r4
    bbb6:	e7fb      	b.n	bbb0 <tc_aes128_set_encrypt_key+0x94>
    bbb8:	0002bb54 	.word	0x0002bb54
    bbbc:	0002fb35 	.word	0x0002fb35

0000bbc0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    bbc0:	4901      	ldr	r1, [pc, #4]	; (bbc8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    bbc2:	2210      	movs	r2, #16
	str	r2, [r1]
    bbc4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    bbc6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    bbc8:	e000ed10 	.word	0xe000ed10

0000bbcc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    bbcc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    bbce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    bbd0:	f380 8811 	msr	BASEPRI, r0
	isb
    bbd4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    bbd8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    bbdc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    bbde:	b662      	cpsie	i
	isb
    bbe0:	f3bf 8f6f 	isb	sy

	bx	lr
    bbe4:	4770      	bx	lr
    bbe6:	bf00      	nop

0000bbe8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    bbe8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    bbea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    bbec:	f381 8811 	msr	BASEPRI, r1

	wfe
    bbf0:	bf20      	wfe

	msr	BASEPRI, r0
    bbf2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    bbf6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    bbf8:	4770      	bx	lr
    bbfa:	bf00      	nop

0000bbfc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    bbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc00:	b082      	sub	sp, #8
    bc02:	4682      	mov	sl, r0
    bc04:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    bc06:	460c      	mov	r4, r1
    bc08:	2900      	cmp	r1, #0
    bc0a:	d063      	beq.n	bcd4 <z_arm_fatal_error+0xd8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    bc0c:	4d35      	ldr	r5, [pc, #212]	; (bce4 <z_arm_fatal_error+0xe8>)
    bc0e:	682b      	ldr	r3, [r5, #0]
    bc10:	0758      	lsls	r0, r3, #29
    bc12:	d05f      	beq.n	bcd4 <z_arm_fatal_error+0xd8>
    bc14:	466e      	mov	r6, sp
    bc16:	b08a      	sub	sp, #40	; 0x28
    bc18:	466a      	mov	r2, sp
    bc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
    bc1e:	4b32      	ldr	r3, [pc, #200]	; (bce8 <z_arm_fatal_error+0xec>)
    bc20:	f8df 80c8 	ldr.w	r8, [pc, #200]	; bcec <z_arm_fatal_error+0xf0>
    bc24:	6113      	str	r3, [r2, #16]
    bc26:	f04f 0906 	mov.w	r9, #6
    bc2a:	68a3      	ldr	r3, [r4, #8]
    bc2c:	61d1      	str	r1, [r2, #28]
    bc2e:	e9c2 8005 	strd	r8, r0, [r2, #20]
    bc32:	6213      	str	r3, [r2, #32]
    bc34:	f8c7 9004 	str.w	r9, [r7, #4]
    bc38:	f842 9f0c 	str.w	r9, [r2, #12]!
    bc3c:	2300      	movs	r3, #0
    bc3e:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    bc42:	4628      	mov	r0, r5
    bc44:	f01a ff50 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    bc48:	682b      	ldr	r3, [r5, #0]
    bc4a:	0759      	lsls	r1, r3, #29
    bc4c:	46b5      	mov	sp, r6
    bc4e:	d041      	beq.n	bcd4 <z_arm_fatal_error+0xd8>
    bc50:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    bc54:	4b26      	ldr	r3, [pc, #152]	; (bcf0 <z_arm_fatal_error+0xf4>)
    bc56:	f8c7 9004 	str.w	r9, [r7, #4]
    bc5a:	b08a      	sub	sp, #40	; 0x28
    bc5c:	466a      	mov	r2, sp
    bc5e:	e9c2 3804 	strd	r3, r8, [r2, #16]
    bc62:	6963      	ldr	r3, [r4, #20]
    bc64:	6213      	str	r3, [r2, #32]
    bc66:	e9c2 0106 	strd	r0, r1, [r2, #24]
    bc6a:	f842 9f0c 	str.w	r9, [r2, #12]!
    bc6e:	2300      	movs	r3, #0
    bc70:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    bc74:	4628      	mov	r0, r5
    bc76:	f01a ff37 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    bc7a:	682b      	ldr	r3, [r5, #0]
    bc7c:	075a      	lsls	r2, r3, #29
    bc7e:	46b5      	mov	sp, r6
    bc80:	d028      	beq.n	bcd4 <z_arm_fatal_error+0xd8>
    bc82:	b088      	sub	sp, #32
    bc84:	466a      	mov	r2, sp
    bc86:	491b      	ldr	r1, [pc, #108]	; (bcf4 <z_arm_fatal_error+0xf8>)
    bc88:	69e3      	ldr	r3, [r4, #28]
    bc8a:	6193      	str	r3, [r2, #24]
    bc8c:	f04f 0904 	mov.w	r9, #4
    bc90:	e9c2 1804 	strd	r1, r8, [r2, #16]
    bc94:	f8c7 9004 	str.w	r9, [r7, #4]
    bc98:	f842 9f0c 	str.w	r9, [r2, #12]!
    bc9c:	2300      	movs	r3, #0
    bc9e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bca2:	4628      	mov	r0, r5
    bca4:	f01a ff20 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    bca8:	682b      	ldr	r3, [r5, #0]
    bcaa:	075b      	lsls	r3, r3, #29
    bcac:	46b5      	mov	sp, r6
    bcae:	d011      	beq.n	bcd4 <z_arm_fatal_error+0xd8>
    bcb0:	b088      	sub	sp, #32
    bcb2:	466a      	mov	r2, sp
    bcb4:	4910      	ldr	r1, [pc, #64]	; (bcf8 <z_arm_fatal_error+0xfc>)
    bcb6:	69a3      	ldr	r3, [r4, #24]
    bcb8:	6193      	str	r3, [r2, #24]
    bcba:	e9c2 1804 	strd	r1, r8, [r2, #16]
    bcbe:	f8c7 9004 	str.w	r9, [r7, #4]
    bcc2:	f842 9f0c 	str.w	r9, [r2, #12]!
    bcc6:	2300      	movs	r3, #0
    bcc8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bccc:	4628      	mov	r0, r5
    bcce:	f01a ff0b 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    bcd2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    bcd4:	4621      	mov	r1, r4
    bcd6:	4650      	mov	r0, sl
    bcd8:	f018 fa2e 	bl	24138 <z_fatal_error>
}
    bcdc:	3708      	adds	r7, #8
    bcde:	46bd      	mov	sp, r7
    bce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bce4:	200009d0 	.word	0x200009d0
    bce8:	0002fc35 	.word	0x0002fc35
    bcec:	0002fce0 	.word	0x0002fce0
    bcf0:	0002fc68 	.word	0x0002fc68
    bcf4:	0002fc9b 	.word	0x0002fc9b
    bcf8:	0002fcae 	.word	0x0002fcae

0000bcfc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    bcfc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bcfe:	2b00      	cmp	r3, #0
    bd00:	db08      	blt.n	bd14 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd02:	2201      	movs	r2, #1
    bd04:	f000 001f 	and.w	r0, r0, #31
    bd08:	fa02 f000 	lsl.w	r0, r2, r0
    bd0c:	095b      	lsrs	r3, r3, #5
    bd0e:	4a02      	ldr	r2, [pc, #8]	; (bd18 <arch_irq_enable+0x1c>)
    bd10:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    bd14:	4770      	bx	lr
    bd16:	bf00      	nop
    bd18:	e000e100 	.word	0xe000e100

0000bd1c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    bd1c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bd1e:	2b00      	cmp	r3, #0
    bd20:	db0d      	blt.n	bd3e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd22:	2201      	movs	r2, #1
    bd24:	095b      	lsrs	r3, r3, #5
    bd26:	f000 001f 	and.w	r0, r0, #31
    bd2a:	fa02 f000 	lsl.w	r0, r2, r0
    bd2e:	3320      	adds	r3, #32
    bd30:	4a03      	ldr	r2, [pc, #12]	; (bd40 <arch_irq_disable+0x24>)
    bd32:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    bd36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bd3a:	f3bf 8f6f 	isb	sy
}
    bd3e:	4770      	bx	lr
    bd40:	e000e100 	.word	0xe000e100

0000bd44 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    bd44:	4b05      	ldr	r3, [pc, #20]	; (bd5c <arch_irq_is_enabled+0x18>)
    bd46:	0942      	lsrs	r2, r0, #5
    bd48:	f000 001f 	and.w	r0, r0, #31
    bd4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    bd50:	2301      	movs	r3, #1
    bd52:	fa03 f000 	lsl.w	r0, r3, r0
}
    bd56:	4010      	ands	r0, r2
    bd58:	4770      	bx	lr
    bd5a:	bf00      	nop
    bd5c:	e000e100 	.word	0xe000e100

0000bd60 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    bd60:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    bd62:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd64:	bfa8      	it	ge
    bd66:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    bd6a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd6e:	bfb8      	it	lt
    bd70:	4b06      	ldrlt	r3, [pc, #24]	; (bd8c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd72:	ea4f 1141 	mov.w	r1, r1, lsl #5
    bd76:	bfac      	ite	ge
    bd78:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd7c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd80:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd82:	bfb4      	ite	lt
    bd84:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd86:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    bd8a:	4770      	bx	lr
    bd8c:	e000ed14 	.word	0xe000ed14

0000bd90 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    bd90:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    bd92:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    bd94:	4b04      	ldr	r3, [pc, #16]	; (bda8 <_arch_isr_direct_pm+0x18>)
    bd96:	699a      	ldr	r2, [r3, #24]
    bd98:	b11a      	cbz	r2, bda2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    bd9a:	2200      	movs	r2, #0
    bd9c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    bd9e:	f01e fee3 	bl	2ab68 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    bda2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    bda4:	bd08      	pop	{r3, pc}
    bda6:	bf00      	nop
    bda8:	20005e4c 	.word	0x20005e4c

0000bdac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    bdac:	bf30      	wfi
    b z_SysNmiOnReset
    bdae:	f7ff bffd 	b.w	bdac <z_SysNmiOnReset>
    bdb2:	bf00      	nop

0000bdb4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    bdb4:	4a0f      	ldr	r2, [pc, #60]	; (bdf4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    bdb6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    bdb8:	4b0f      	ldr	r3, [pc, #60]	; (bdf8 <z_arm_prep_c+0x44>)
    bdba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    bdbe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    bdc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bdc4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    bdc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    bdcc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    bdd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    bdd4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    bdd8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    bddc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    bde0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    bde4:	f018 fa72 	bl	242cc <z_bss_zero>
	z_data_copy();
    bde8:	f019 fb4c 	bl	25484 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    bdec:	f000 fc96 	bl	c71c <z_arm_interrupt_init>
	z_cstart();
    bdf0:	f018 fa76 	bl	242e0 <z_cstart>
    bdf4:	00001000 	.word	0x00001000
    bdf8:	e000ed00 	.word	0xe000ed00

0000bdfc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    bdfc:	4a0a      	ldr	r2, [pc, #40]	; (be28 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    bdfe:	490b      	ldr	r1, [pc, #44]	; (be2c <arch_swap+0x30>)
	_current->arch.basepri = key;
    be00:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    be02:	6809      	ldr	r1, [r1, #0]
    be04:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    be08:	4909      	ldr	r1, [pc, #36]	; (be30 <arch_swap+0x34>)
	_current->arch.basepri = key;
    be0a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    be0e:	684b      	ldr	r3, [r1, #4]
    be10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    be14:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    be16:	2300      	movs	r3, #0
    be18:	f383 8811 	msr	BASEPRI, r3
    be1c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    be20:	6893      	ldr	r3, [r2, #8]
}
    be22:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    be26:	4770      	bx	lr
    be28:	20005e4c 	.word	0x20005e4c
    be2c:	0002dd04 	.word	0x0002dd04
    be30:	e000ed00 	.word	0xe000ed00

0000be34 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    be34:	4913      	ldr	r1, [pc, #76]	; (be84 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    be36:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    be38:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    be3c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    be3e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    be42:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    be46:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    be48:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    be4c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    be50:	4f0d      	ldr	r7, [pc, #52]	; (be88 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    be52:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    be56:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    be58:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    be5a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    be5c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    be60:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    be62:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    be66:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    be6a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    be6c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    be6e:	f000 fc9d 	bl	c7ac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    be72:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    be76:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    be7a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    be7e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    be82:	4770      	bx	lr
    ldr r1, =_kernel
    be84:	20005e4c 	.word	0x20005e4c
    ldr v4, =_SCS_ICSR
    be88:	e000ed04 	.word	0xe000ed04

0000be8c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    be8c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    be90:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    be92:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    be96:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    be9a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    be9c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    bea0:	2902      	cmp	r1, #2
    beq _oops
    bea2:	d0ff      	beq.n	bea4 <_oops>

0000bea4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    bea4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    bea6:	f01c fac1 	bl	2842c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    beaa:	bd01      	pop	{r0, pc}

0000beac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    beac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    beb0:	9b00      	ldr	r3, [sp, #0]
    beb2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    beb6:	490a      	ldr	r1, [pc, #40]	; (bee0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    beb8:	9b01      	ldr	r3, [sp, #4]
    beba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    bebe:	9b02      	ldr	r3, [sp, #8]
    bec0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    bec4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    bec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    becc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    bed0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    bed4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    bed6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    bed8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    beda:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    bede:	4770      	bx	lr
    bee0:	00025d45 	.word	0x00025d45

0000bee4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    bee4:	4a0a      	ldr	r2, [pc, #40]	; (bf10 <z_check_thread_stack_fail+0x2c>)
{
    bee6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    bee8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    beea:	b178      	cbz	r0, bf0c <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    beec:	f113 0f16 	cmn.w	r3, #22
    bef0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    bef4:	d005      	beq.n	bf02 <z_check_thread_stack_fail+0x1e>
    bef6:	f1a0 0220 	sub.w	r2, r0, #32
    befa:	429a      	cmp	r2, r3
    befc:	d805      	bhi.n	bf0a <z_check_thread_stack_fail+0x26>
    befe:	4283      	cmp	r3, r0
    bf00:	d203      	bcs.n	bf0a <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    bf02:	4281      	cmp	r1, r0
    bf04:	bf28      	it	cs
    bf06:	2000      	movcs	r0, #0
    bf08:	4770      	bx	lr
    bf0a:	2000      	movs	r0, #0
}
    bf0c:	4770      	bx	lr
    bf0e:	bf00      	nop
    bf10:	20005e4c 	.word	0x20005e4c

0000bf14 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    bf14:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    bf16:	4b09      	ldr	r3, [pc, #36]	; (bf3c <arch_switch_to_main_thread+0x28>)
    bf18:	6098      	str	r0, [r3, #8]
{
    bf1a:	460d      	mov	r5, r1
    bf1c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    bf1e:	f000 fc45 	bl	c7ac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    bf22:	4620      	mov	r0, r4
    bf24:	f385 8809 	msr	PSP, r5
    bf28:	2100      	movs	r1, #0
    bf2a:	b663      	cpsie	if
    bf2c:	f381 8811 	msr	BASEPRI, r1
    bf30:	f3bf 8f6f 	isb	sy
    bf34:	2200      	movs	r2, #0
    bf36:	2300      	movs	r3, #0
    bf38:	f019 ff04 	bl	25d44 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    bf3c:	20005e4c 	.word	0x20005e4c

0000bf40 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    bf40:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    bf42:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    bf44:	4a0b      	ldr	r2, [pc, #44]	; (bf74 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    bf46:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    bf48:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    bf4a:	bf1e      	ittt	ne
	movne	r1, #0
    bf4c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    bf4e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    bf50:	f01e fe0a 	blne	2ab68 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    bf54:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    bf56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    bf5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    bf5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    bf62:	4905      	ldr	r1, [pc, #20]	; (bf78 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    bf64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    bf66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    bf68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    bf6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    bf6e:	4903      	ldr	r1, [pc, #12]	; (bf7c <_isr_wrapper+0x3c>)
	bx r1
    bf70:	4708      	bx	r1
    bf72:	0000      	.short	0x0000
	ldr r2, =_kernel
    bf74:	20005e4c 	.word	0x20005e4c
	ldr r1, =_sw_isr_table
    bf78:	0002b690 	.word	0x0002b690
	ldr r1, =z_arm_int_exit
    bf7c:	0000bf81 	.word	0x0000bf81

0000bf80 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    bf80:	4b04      	ldr	r3, [pc, #16]	; (bf94 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    bf82:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    bf84:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    bf86:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    bf88:	d003      	beq.n	bf92 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    bf8a:	4903      	ldr	r1, [pc, #12]	; (bf98 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    bf8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    bf90:	600a      	str	r2, [r1, #0]

0000bf92 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    bf92:	4770      	bx	lr
	ldr r3, =_kernel
    bf94:	20005e4c 	.word	0x20005e4c
	ldr r1, =_SCS_ICSR
    bf98:	e000ed04 	.word	0xe000ed04

0000bf9c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    bfa0:	4c58      	ldr	r4, [pc, #352]	; (c104 <bus_fault.constprop.0+0x168>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    bfa2:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** BUS FAULT *****");
    bfa4:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    bfa6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    bfa8:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    bfaa:	af00      	add	r7, sp, #0
    bfac:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    bfae:	d00d      	beq.n	bfcc <bus_fault.constprop.0+0x30>
    bfb0:	4b55      	ldr	r3, [pc, #340]	; (c108 <bus_fault.constprop.0+0x16c>)
    bfb2:	61bb      	str	r3, [r7, #24]
    bfb4:	4b55      	ldr	r3, [pc, #340]	; (c10c <bus_fault.constprop.0+0x170>)
    bfb6:	61fb      	str	r3, [r7, #28]
    bfb8:	f107 0214 	add.w	r2, r7, #20
    bfbc:	2303      	movs	r3, #3
    bfbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bfc2:	4620      	mov	r0, r4
    bfc4:	607b      	str	r3, [r7, #4]
    bfc6:	617b      	str	r3, [r7, #20]
    bfc8:	f01c fa3f 	bl	2844a <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    bfcc:	4b50      	ldr	r3, [pc, #320]	; (c110 <bus_fault.constprop.0+0x174>)
    bfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bfd0:	04da      	lsls	r2, r3, #19
    bfd2:	d510      	bpl.n	bff6 <bus_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Stacking error");
    bfd4:	6823      	ldr	r3, [r4, #0]
    bfd6:	075b      	lsls	r3, r3, #29
    bfd8:	d00d      	beq.n	bff6 <bus_fault.constprop.0+0x5a>
    bfda:	4b4e      	ldr	r3, [pc, #312]	; (c114 <bus_fault.constprop.0+0x178>)
    bfdc:	61bb      	str	r3, [r7, #24]
    bfde:	4b4b      	ldr	r3, [pc, #300]	; (c10c <bus_fault.constprop.0+0x170>)
    bfe0:	61fb      	str	r3, [r7, #28]
    bfe2:	4848      	ldr	r0, [pc, #288]	; (c104 <bus_fault.constprop.0+0x168>)
    bfe4:	2303      	movs	r3, #3
    bfe6:	f107 0214 	add.w	r2, r7, #20
    bfea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bfee:	607b      	str	r3, [r7, #4]
    bff0:	617b      	str	r3, [r7, #20]
    bff2:	f01c fa2a 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    bff6:	4b46      	ldr	r3, [pc, #280]	; (c110 <bus_fault.constprop.0+0x174>)
    bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bffa:	0518      	lsls	r0, r3, #20
    bffc:	d510      	bpl.n	c020 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Unstacking error");
    bffe:	6823      	ldr	r3, [r4, #0]
    c000:	0759      	lsls	r1, r3, #29
    c002:	d00d      	beq.n	c020 <bus_fault.constprop.0+0x84>
    c004:	4b44      	ldr	r3, [pc, #272]	; (c118 <bus_fault.constprop.0+0x17c>)
    c006:	61bb      	str	r3, [r7, #24]
    c008:	4b40      	ldr	r3, [pc, #256]	; (c10c <bus_fault.constprop.0+0x170>)
    c00a:	61fb      	str	r3, [r7, #28]
    c00c:	483d      	ldr	r0, [pc, #244]	; (c104 <bus_fault.constprop.0+0x168>)
    c00e:	2303      	movs	r3, #3
    c010:	f107 0214 	add.w	r2, r7, #20
    c014:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c018:	607b      	str	r3, [r7, #4]
    c01a:	617b      	str	r3, [r7, #20]
    c01c:	f01c fa15 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c020:	4b3b      	ldr	r3, [pc, #236]	; (c110 <bus_fault.constprop.0+0x174>)
    c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c024:	059a      	lsls	r2, r3, #22
    c026:	d530      	bpl.n	c08a <bus_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Precise data bus error");
    c028:	6823      	ldr	r3, [r4, #0]
    c02a:	075b      	lsls	r3, r3, #29
    c02c:	d00d      	beq.n	c04a <bus_fault.constprop.0+0xae>
    c02e:	4b3b      	ldr	r3, [pc, #236]	; (c11c <bus_fault.constprop.0+0x180>)
    c030:	61bb      	str	r3, [r7, #24]
    c032:	4b36      	ldr	r3, [pc, #216]	; (c10c <bus_fault.constprop.0+0x170>)
    c034:	61fb      	str	r3, [r7, #28]
    c036:	4833      	ldr	r0, [pc, #204]	; (c104 <bus_fault.constprop.0+0x168>)
    c038:	2303      	movs	r3, #3
    c03a:	f107 0214 	add.w	r2, r7, #20
    c03e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c042:	607b      	str	r3, [r7, #4]
    c044:	617b      	str	r3, [r7, #20]
    c046:	f01c fa00 	bl	2844a <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c04a:	4b31      	ldr	r3, [pc, #196]	; (c110 <bus_fault.constprop.0+0x174>)
    c04c:	6b99      	ldr	r1, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c050:	0418      	lsls	r0, r3, #16
    c052:	d51a      	bpl.n	c08a <bus_fault.constprop.0+0xee>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    c054:	6823      	ldr	r3, [r4, #0]
    c056:	075a      	lsls	r2, r3, #29
    c058:	d011      	beq.n	c07e <bus_fault.constprop.0+0xe2>
    c05a:	46e8      	mov	r8, sp
    c05c:	b088      	sub	sp, #32
    c05e:	466a      	mov	r2, sp
    c060:	4b2f      	ldr	r3, [pc, #188]	; (c120 <bus_fault.constprop.0+0x184>)
    c062:	6113      	str	r3, [r2, #16]
    c064:	4b29      	ldr	r3, [pc, #164]	; (c10c <bus_fault.constprop.0+0x170>)
    c066:	4827      	ldr	r0, [pc, #156]	; (c104 <bus_fault.constprop.0+0x168>)
    c068:	e9c2 3105 	strd	r3, r1, [r2, #20]
    c06c:	2304      	movs	r3, #4
    c06e:	f842 3f0c 	str.w	r3, [r2, #12]!
    c072:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c076:	60bb      	str	r3, [r7, #8]
    c078:	f01c f9e7 	bl	2844a <z_log_msg2_static_create.constprop.0>
    c07c:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    c07e:	b126      	cbz	r6, c08a <bus_fault.constprop.0+0xee>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c080:	4a23      	ldr	r2, [pc, #140]	; (c110 <bus_fault.constprop.0+0x174>)
    c082:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c084:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c088:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c08a:	4b21      	ldr	r3, [pc, #132]	; (c110 <bus_fault.constprop.0+0x174>)
    c08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c08e:	055b      	lsls	r3, r3, #21
    c090:	d510      	bpl.n	c0b4 <bus_fault.constprop.0+0x118>
		PR_FAULT_INFO("  Imprecise data bus error");
    c092:	6823      	ldr	r3, [r4, #0]
    c094:	075e      	lsls	r6, r3, #29
    c096:	d00d      	beq.n	c0b4 <bus_fault.constprop.0+0x118>
    c098:	4b22      	ldr	r3, [pc, #136]	; (c124 <bus_fault.constprop.0+0x188>)
    c09a:	61bb      	str	r3, [r7, #24]
    c09c:	4b1b      	ldr	r3, [pc, #108]	; (c10c <bus_fault.constprop.0+0x170>)
    c09e:	61fb      	str	r3, [r7, #28]
    c0a0:	4818      	ldr	r0, [pc, #96]	; (c104 <bus_fault.constprop.0+0x168>)
    c0a2:	2303      	movs	r3, #3
    c0a4:	f107 0214 	add.w	r2, r7, #20
    c0a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c0ac:	607b      	str	r3, [r7, #4]
    c0ae:	617b      	str	r3, [r7, #20]
    c0b0:	f01c f9cb 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    c0b4:	4b16      	ldr	r3, [pc, #88]	; (c110 <bus_fault.constprop.0+0x174>)
    c0b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c0b8:	05d0      	lsls	r0, r2, #23
    c0ba:	d51b      	bpl.n	c0f4 <bus_fault.constprop.0+0x158>
		PR_FAULT_INFO("  Instruction bus error");
    c0bc:	6823      	ldr	r3, [r4, #0]
    c0be:	0759      	lsls	r1, r3, #29
    c0c0:	d00d      	beq.n	c0de <bus_fault.constprop.0+0x142>
    c0c2:	4b19      	ldr	r3, [pc, #100]	; (c128 <bus_fault.constprop.0+0x18c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    c0c4:	61bb      	str	r3, [r7, #24]
    c0c6:	4b11      	ldr	r3, [pc, #68]	; (c10c <bus_fault.constprop.0+0x170>)
    c0c8:	61fb      	str	r3, [r7, #28]
    c0ca:	480e      	ldr	r0, [pc, #56]	; (c104 <bus_fault.constprop.0+0x168>)
    c0cc:	2303      	movs	r3, #3
    c0ce:	f107 0214 	add.w	r2, r7, #20
    c0d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c0d6:	607b      	str	r3, [r7, #4]
    c0d8:	617b      	str	r3, [r7, #20]
    c0da:	f01c f9b6 	bl	2844a <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c0de:	4a0c      	ldr	r2, [pc, #48]	; (c110 <bus_fault.constprop.0+0x174>)
    c0e0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    c0e2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c0e4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    c0e8:	3720      	adds	r7, #32
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c0ea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    c0ec:	7028      	strb	r0, [r5, #0]
}
    c0ee:	46bd      	mov	sp, r7
    c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    c0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0f6:	049a      	lsls	r2, r3, #18
    c0f8:	d5f1      	bpl.n	c0de <bus_fault.constprop.0+0x142>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    c0fa:	6823      	ldr	r3, [r4, #0]
    c0fc:	075b      	lsls	r3, r3, #29
    c0fe:	d0ee      	beq.n	c0de <bus_fault.constprop.0+0x142>
    c100:	4b0a      	ldr	r3, [pc, #40]	; (c12c <bus_fault.constprop.0+0x190>)
    c102:	e7df      	b.n	c0c4 <bus_fault.constprop.0+0x128>
    c104:	200009d0 	.word	0x200009d0
    c108:	0002fce9 	.word	0x0002fce9
    c10c:	000300c4 	.word	0x000300c4
    c110:	e000ed00 	.word	0xe000ed00
    c114:	0002fd03 	.word	0x0002fd03
    c118:	0002fd18 	.word	0x0002fd18
    c11c:	0002fd2f 	.word	0x0002fd2f
    c120:	0002fd4c 	.word	0x0002fd4c
    c124:	0002fd65 	.word	0x0002fd65
    c128:	0002fd84 	.word	0x0002fd84
    c12c:	0002fda0 	.word	0x0002fda0

0000c130 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    c130:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    c132:	4c4a      	ldr	r4, [pc, #296]	; (c25c <usage_fault.constprop.0+0x12c>)
    c134:	6823      	ldr	r3, [r4, #0]
    c136:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    c138:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    c13a:	d00c      	beq.n	c156 <usage_fault.constprop.0+0x26>
    c13c:	4b48      	ldr	r3, [pc, #288]	; (c260 <usage_fault.constprop.0+0x130>)
    c13e:	9306      	str	r3, [sp, #24]
    c140:	4b48      	ldr	r3, [pc, #288]	; (c264 <usage_fault.constprop.0+0x134>)
    c142:	9307      	str	r3, [sp, #28]
    c144:	aa05      	add	r2, sp, #20
    c146:	2303      	movs	r3, #3
    c148:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c14c:	4620      	mov	r0, r4
    c14e:	9301      	str	r3, [sp, #4]
    c150:	9305      	str	r3, [sp, #20]
    c152:	f01c f97a 	bl	2844a <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c156:	4b44      	ldr	r3, [pc, #272]	; (c268 <usage_fault.constprop.0+0x138>)
    c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c15a:	0198      	lsls	r0, r3, #6
    c15c:	d50f      	bpl.n	c17e <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Division by zero");
    c15e:	6823      	ldr	r3, [r4, #0]
    c160:	0759      	lsls	r1, r3, #29
    c162:	d00c      	beq.n	c17e <usage_fault.constprop.0+0x4e>
    c164:	4b41      	ldr	r3, [pc, #260]	; (c26c <usage_fault.constprop.0+0x13c>)
    c166:	9306      	str	r3, [sp, #24]
    c168:	4b3e      	ldr	r3, [pc, #248]	; (c264 <usage_fault.constprop.0+0x134>)
    c16a:	9307      	str	r3, [sp, #28]
    c16c:	483b      	ldr	r0, [pc, #236]	; (c25c <usage_fault.constprop.0+0x12c>)
    c16e:	2303      	movs	r3, #3
    c170:	aa05      	add	r2, sp, #20
    c172:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c176:	9301      	str	r3, [sp, #4]
    c178:	9305      	str	r3, [sp, #20]
    c17a:	f01c f966 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c17e:	4b3a      	ldr	r3, [pc, #232]	; (c268 <usage_fault.constprop.0+0x138>)
    c180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c182:	01da      	lsls	r2, r3, #7
    c184:	d50f      	bpl.n	c1a6 <usage_fault.constprop.0+0x76>
		PR_FAULT_INFO("  Unaligned memory access");
    c186:	6823      	ldr	r3, [r4, #0]
    c188:	075b      	lsls	r3, r3, #29
    c18a:	d00c      	beq.n	c1a6 <usage_fault.constprop.0+0x76>
    c18c:	4b38      	ldr	r3, [pc, #224]	; (c270 <usage_fault.constprop.0+0x140>)
    c18e:	9306      	str	r3, [sp, #24]
    c190:	4b34      	ldr	r3, [pc, #208]	; (c264 <usage_fault.constprop.0+0x134>)
    c192:	9307      	str	r3, [sp, #28]
    c194:	4831      	ldr	r0, [pc, #196]	; (c25c <usage_fault.constprop.0+0x12c>)
    c196:	2303      	movs	r3, #3
    c198:	aa05      	add	r2, sp, #20
    c19a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c19e:	9301      	str	r3, [sp, #4]
    c1a0:	9305      	str	r3, [sp, #20]
    c1a2:	f01c f952 	bl	2844a <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c1a6:	4b30      	ldr	r3, [pc, #192]	; (c268 <usage_fault.constprop.0+0x138>)
    c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1aa:	0318      	lsls	r0, r3, #12
    c1ac:	d50f      	bpl.n	c1ce <usage_fault.constprop.0+0x9e>
		PR_FAULT_INFO("  No coprocessor instructions");
    c1ae:	6823      	ldr	r3, [r4, #0]
    c1b0:	0759      	lsls	r1, r3, #29
    c1b2:	d00c      	beq.n	c1ce <usage_fault.constprop.0+0x9e>
    c1b4:	4b2f      	ldr	r3, [pc, #188]	; (c274 <usage_fault.constprop.0+0x144>)
    c1b6:	9306      	str	r3, [sp, #24]
    c1b8:	4b2a      	ldr	r3, [pc, #168]	; (c264 <usage_fault.constprop.0+0x134>)
    c1ba:	9307      	str	r3, [sp, #28]
    c1bc:	4827      	ldr	r0, [pc, #156]	; (c25c <usage_fault.constprop.0+0x12c>)
    c1be:	2303      	movs	r3, #3
    c1c0:	aa05      	add	r2, sp, #20
    c1c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c1c6:	9301      	str	r3, [sp, #4]
    c1c8:	9305      	str	r3, [sp, #20]
    c1ca:	f01c f93e 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c1ce:	4b26      	ldr	r3, [pc, #152]	; (c268 <usage_fault.constprop.0+0x138>)
    c1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1d2:	035a      	lsls	r2, r3, #13
    c1d4:	d50f      	bpl.n	c1f6 <usage_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    c1d6:	6823      	ldr	r3, [r4, #0]
    c1d8:	075b      	lsls	r3, r3, #29
    c1da:	d00c      	beq.n	c1f6 <usage_fault.constprop.0+0xc6>
    c1dc:	4b26      	ldr	r3, [pc, #152]	; (c278 <usage_fault.constprop.0+0x148>)
    c1de:	9306      	str	r3, [sp, #24]
    c1e0:	4b20      	ldr	r3, [pc, #128]	; (c264 <usage_fault.constprop.0+0x134>)
    c1e2:	9307      	str	r3, [sp, #28]
    c1e4:	481d      	ldr	r0, [pc, #116]	; (c25c <usage_fault.constprop.0+0x12c>)
    c1e6:	2303      	movs	r3, #3
    c1e8:	aa05      	add	r2, sp, #20
    c1ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c1ee:	9301      	str	r3, [sp, #4]
    c1f0:	9305      	str	r3, [sp, #20]
    c1f2:	f01c f92a 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c1f6:	4b1c      	ldr	r3, [pc, #112]	; (c268 <usage_fault.constprop.0+0x138>)
    c1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1fa:	0398      	lsls	r0, r3, #14
    c1fc:	d50f      	bpl.n	c21e <usage_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    c1fe:	6823      	ldr	r3, [r4, #0]
    c200:	0759      	lsls	r1, r3, #29
    c202:	d00c      	beq.n	c21e <usage_fault.constprop.0+0xee>
    c204:	4b1d      	ldr	r3, [pc, #116]	; (c27c <usage_fault.constprop.0+0x14c>)
    c206:	9306      	str	r3, [sp, #24]
    c208:	4b16      	ldr	r3, [pc, #88]	; (c264 <usage_fault.constprop.0+0x134>)
    c20a:	9307      	str	r3, [sp, #28]
    c20c:	4813      	ldr	r0, [pc, #76]	; (c25c <usage_fault.constprop.0+0x12c>)
    c20e:	2303      	movs	r3, #3
    c210:	aa05      	add	r2, sp, #20
    c212:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c216:	9301      	str	r3, [sp, #4]
    c218:	9305      	str	r3, [sp, #20]
    c21a:	f01c f916 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c21e:	4b12      	ldr	r3, [pc, #72]	; (c268 <usage_fault.constprop.0+0x138>)
    c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c222:	03da      	lsls	r2, r3, #15
    c224:	d50f      	bpl.n	c246 <usage_fault.constprop.0+0x116>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    c226:	6823      	ldr	r3, [r4, #0]
    c228:	075b      	lsls	r3, r3, #29
    c22a:	d00c      	beq.n	c246 <usage_fault.constprop.0+0x116>
    c22c:	4b14      	ldr	r3, [pc, #80]	; (c280 <usage_fault.constprop.0+0x150>)
    c22e:	9306      	str	r3, [sp, #24]
    c230:	4b0c      	ldr	r3, [pc, #48]	; (c264 <usage_fault.constprop.0+0x134>)
    c232:	9307      	str	r3, [sp, #28]
    c234:	4809      	ldr	r0, [pc, #36]	; (c25c <usage_fault.constprop.0+0x12c>)
    c236:	2303      	movs	r3, #3
    c238:	aa05      	add	r2, sp, #20
    c23a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c23e:	9301      	str	r3, [sp, #4]
    c240:	9305      	str	r3, [sp, #20]
    c242:	f01c f902 	bl	2844a <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c246:	4a08      	ldr	r2, [pc, #32]	; (c268 <usage_fault.constprop.0+0x138>)
    c248:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c24a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    c24e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    c252:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c254:	6293      	str	r3, [r2, #40]	; 0x28
}
    c256:	b008      	add	sp, #32
    c258:	bd10      	pop	{r4, pc}
    c25a:	bf00      	nop
    c25c:	200009d0 	.word	0x200009d0
    c260:	0002fdd3 	.word	0x0002fdd3
    c264:	000300b8 	.word	0x000300b8
    c268:	e000ed00 	.word	0xe000ed00
    c26c:	0002fdef 	.word	0x0002fdef
    c270:	0002fe06 	.word	0x0002fe06
    c274:	0002fe24 	.word	0x0002fe24
    c278:	0002fe46 	.word	0x0002fe46
    c27c:	0002fe6f 	.word	0x0002fe6f
    c280:	0002fe8d 	.word	0x0002fe8d

0000c284 <mem_manage_fault>:
{
    c284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    c288:	4c62      	ldr	r4, [pc, #392]	; (c414 <mem_manage_fault+0x190>)
{
    c28a:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** MPU FAULT *****");
    c28c:	6823      	ldr	r3, [r4, #0]
{
    c28e:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    c290:	0759      	lsls	r1, r3, #29
{
    c292:	af00      	add	r7, sp, #0
    c294:	4680      	mov	r8, r0
    c296:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    c298:	d00d      	beq.n	c2b6 <mem_manage_fault+0x32>
    c29a:	4b5f      	ldr	r3, [pc, #380]	; (c418 <mem_manage_fault+0x194>)
    c29c:	61bb      	str	r3, [r7, #24]
    c29e:	4b5f      	ldr	r3, [pc, #380]	; (c41c <mem_manage_fault+0x198>)
    c2a0:	61fb      	str	r3, [r7, #28]
    c2a2:	f107 0214 	add.w	r2, r7, #20
    c2a6:	2303      	movs	r3, #3
    c2a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c2ac:	4620      	mov	r0, r4
    c2ae:	607b      	str	r3, [r7, #4]
    c2b0:	617b      	str	r3, [r7, #20]
    c2b2:	f01c f8ca 	bl	2844a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c2b6:	4b5a      	ldr	r3, [pc, #360]	; (c420 <mem_manage_fault+0x19c>)
    c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2ba:	06da      	lsls	r2, r3, #27
    c2bc:	d510      	bpl.n	c2e0 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Stacking error (context area might be"
    c2be:	6823      	ldr	r3, [r4, #0]
    c2c0:	075b      	lsls	r3, r3, #29
    c2c2:	d00d      	beq.n	c2e0 <mem_manage_fault+0x5c>
    c2c4:	4b57      	ldr	r3, [pc, #348]	; (c424 <mem_manage_fault+0x1a0>)
    c2c6:	61bb      	str	r3, [r7, #24]
    c2c8:	4b54      	ldr	r3, [pc, #336]	; (c41c <mem_manage_fault+0x198>)
    c2ca:	61fb      	str	r3, [r7, #28]
    c2cc:	4851      	ldr	r0, [pc, #324]	; (c414 <mem_manage_fault+0x190>)
    c2ce:	2303      	movs	r3, #3
    c2d0:	f107 0214 	add.w	r2, r7, #20
    c2d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c2d8:	607b      	str	r3, [r7, #4]
    c2da:	617b      	str	r3, [r7, #20]
    c2dc:	f01c f8b5 	bl	2844a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c2e0:	4b4f      	ldr	r3, [pc, #316]	; (c420 <mem_manage_fault+0x19c>)
    c2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2e4:	071e      	lsls	r6, r3, #28
    c2e6:	d510      	bpl.n	c30a <mem_manage_fault+0x86>
		PR_FAULT_INFO("  Unstacking error");
    c2e8:	6823      	ldr	r3, [r4, #0]
    c2ea:	0758      	lsls	r0, r3, #29
    c2ec:	d00d      	beq.n	c30a <mem_manage_fault+0x86>
    c2ee:	4b4e      	ldr	r3, [pc, #312]	; (c428 <mem_manage_fault+0x1a4>)
    c2f0:	61bb      	str	r3, [r7, #24]
    c2f2:	4b4a      	ldr	r3, [pc, #296]	; (c41c <mem_manage_fault+0x198>)
    c2f4:	61fb      	str	r3, [r7, #28]
    c2f6:	4847      	ldr	r0, [pc, #284]	; (c414 <mem_manage_fault+0x190>)
    c2f8:	2303      	movs	r3, #3
    c2fa:	f107 0214 	add.w	r2, r7, #20
    c2fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c302:	607b      	str	r3, [r7, #4]
    c304:	617b      	str	r3, [r7, #20]
    c306:	f01c f8a0 	bl	2844a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c30a:	4b45      	ldr	r3, [pc, #276]	; (c420 <mem_manage_fault+0x19c>)
    c30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c30e:	0799      	lsls	r1, r3, #30
    c310:	d43e      	bmi.n	c390 <mem_manage_fault+0x10c>
	uint32_t mmfar = -EINVAL;
    c312:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c316:	4b42      	ldr	r3, [pc, #264]	; (c420 <mem_manage_fault+0x19c>)
    c318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c31a:	07d9      	lsls	r1, r3, #31
    c31c:	d510      	bpl.n	c340 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Instruction Access Violation");
    c31e:	6823      	ldr	r3, [r4, #0]
    c320:	075a      	lsls	r2, r3, #29
    c322:	d00d      	beq.n	c340 <mem_manage_fault+0xbc>
    c324:	4b41      	ldr	r3, [pc, #260]	; (c42c <mem_manage_fault+0x1a8>)
    c326:	61bb      	str	r3, [r7, #24]
    c328:	4b3c      	ldr	r3, [pc, #240]	; (c41c <mem_manage_fault+0x198>)
    c32a:	61fb      	str	r3, [r7, #28]
    c32c:	4839      	ldr	r0, [pc, #228]	; (c414 <mem_manage_fault+0x190>)
    c32e:	2303      	movs	r3, #3
    c330:	f107 0214 	add.w	r2, r7, #20
    c334:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c338:	607b      	str	r3, [r7, #4]
    c33a:	617b      	str	r3, [r7, #20]
    c33c:	f01c f885 	bl	2844a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c340:	4b37      	ldr	r3, [pc, #220]	; (c420 <mem_manage_fault+0x19c>)
    c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c344:	069b      	lsls	r3, r3, #26
    c346:	d510      	bpl.n	c36a <mem_manage_fault+0xe6>
		PR_FAULT_INFO(
    c348:	6823      	ldr	r3, [r4, #0]
    c34a:	0758      	lsls	r0, r3, #29
    c34c:	d00d      	beq.n	c36a <mem_manage_fault+0xe6>
    c34e:	4b38      	ldr	r3, [pc, #224]	; (c430 <mem_manage_fault+0x1ac>)
    c350:	61bb      	str	r3, [r7, #24]
    c352:	4b32      	ldr	r3, [pc, #200]	; (c41c <mem_manage_fault+0x198>)
    c354:	61fb      	str	r3, [r7, #28]
    c356:	482f      	ldr	r0, [pc, #188]	; (c414 <mem_manage_fault+0x190>)
    c358:	2303      	movs	r3, #3
    c35a:	f107 0214 	add.w	r2, r7, #20
    c35e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c362:	607b      	str	r3, [r7, #4]
    c364:	617b      	str	r3, [r7, #20]
    c366:	f01c f870 	bl	2844a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c36a:	4b2d      	ldr	r3, [pc, #180]	; (c420 <mem_manage_fault+0x19c>)
    c36c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c36e:	06d1      	lsls	r1, r2, #27
    c370:	d442      	bmi.n	c3f8 <mem_manage_fault+0x174>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c374:	0792      	lsls	r2, r2, #30
    c376:	d43f      	bmi.n	c3f8 <mem_manage_fault+0x174>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c378:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c37a:	4a29      	ldr	r2, [pc, #164]	; (c420 <mem_manage_fault+0x19c>)
    c37c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c37e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    c382:	6293      	str	r3, [r2, #40]	; 0x28
}
    c384:	3720      	adds	r7, #32
	*recoverable = memory_fault_recoverable(esf, true);
    c386:	2300      	movs	r3, #0
    c388:	702b      	strb	r3, [r5, #0]
}
    c38a:	46bd      	mov	sp, r7
    c38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    c390:	6823      	ldr	r3, [r4, #0]
    c392:	075a      	lsls	r2, r3, #29
    c394:	d00d      	beq.n	c3b2 <mem_manage_fault+0x12e>
    c396:	4b27      	ldr	r3, [pc, #156]	; (c434 <mem_manage_fault+0x1b0>)
    c398:	61bb      	str	r3, [r7, #24]
    c39a:	4b20      	ldr	r3, [pc, #128]	; (c41c <mem_manage_fault+0x198>)
    c39c:	61fb      	str	r3, [r7, #28]
    c39e:	481d      	ldr	r0, [pc, #116]	; (c414 <mem_manage_fault+0x190>)
    c3a0:	2303      	movs	r3, #3
    c3a2:	f107 0214 	add.w	r2, r7, #20
    c3a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c3aa:	607b      	str	r3, [r7, #4]
    c3ac:	617b      	str	r3, [r7, #20]
    c3ae:	f01c f84c 	bl	2844a <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    c3b2:	4b1b      	ldr	r3, [pc, #108]	; (c420 <mem_manage_fault+0x19c>)
    c3b4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3b8:	061b      	lsls	r3, r3, #24
    c3ba:	d5aa      	bpl.n	c312 <mem_manage_fault+0x8e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    c3bc:	6823      	ldr	r3, [r4, #0]
    c3be:	0758      	lsls	r0, r3, #29
    c3c0:	d011      	beq.n	c3e6 <mem_manage_fault+0x162>
    c3c2:	46ea      	mov	sl, sp
    c3c4:	b088      	sub	sp, #32
    c3c6:	466a      	mov	r2, sp
    c3c8:	4b1b      	ldr	r3, [pc, #108]	; (c438 <mem_manage_fault+0x1b4>)
    c3ca:	6113      	str	r3, [r2, #16]
    c3cc:	4b13      	ldr	r3, [pc, #76]	; (c41c <mem_manage_fault+0x198>)
    c3ce:	4811      	ldr	r0, [pc, #68]	; (c414 <mem_manage_fault+0x190>)
    c3d0:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c3d4:	2304      	movs	r3, #4
    c3d6:	f842 3f0c 	str.w	r3, [r2, #12]!
    c3da:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c3de:	60bb      	str	r3, [r7, #8]
    c3e0:	f01c f833 	bl	2844a <z_log_msg2_static_create.constprop.0>
    c3e4:	46d5      	mov	sp, sl
			if (from_hard_fault != 0) {
    c3e6:	f1b9 0f00 	cmp.w	r9, #0
    c3ea:	d094      	beq.n	c316 <mem_manage_fault+0x92>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c3ec:	4a0c      	ldr	r2, [pc, #48]	; (c420 <mem_manage_fault+0x19c>)
    c3ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c3f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c3f4:	6293      	str	r3, [r2, #40]	; 0x28
    c3f6:	e78e      	b.n	c316 <mem_manage_fault+0x92>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    c3f8:	685b      	ldr	r3, [r3, #4]
    c3fa:	051b      	lsls	r3, r3, #20
    c3fc:	d5bc      	bpl.n	c378 <mem_manage_fault+0xf4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    c3fe:	4641      	mov	r1, r8
    c400:	4630      	mov	r0, r6
    c402:	f7ff fd6f 	bl	bee4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    c406:	2800      	cmp	r0, #0
    c408:	d0b6      	beq.n	c378 <mem_manage_fault+0xf4>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    c40a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    c40e:	2002      	movs	r0, #2
    c410:	e7b3      	b.n	c37a <mem_manage_fault+0xf6>
    c412:	bf00      	nop
    c414:	200009d0 	.word	0x200009d0
    c418:	0002febc 	.word	0x0002febc
    c41c:	000300ce 	.word	0x000300ce
    c420:	e000ed00 	.word	0xe000ed00
    c424:	0002fed6 	.word	0x0002fed6
    c428:	0002fd18 	.word	0x0002fd18
    c42c:	0002ff43 	.word	0x0002ff43
    c430:	0002fda0 	.word	0x0002fda0
    c434:	0002ff0d 	.word	0x0002ff0d
    c438:	0002ff29 	.word	0x0002ff29

0000c43c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    c43c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    c43e:	ab0a      	add	r3, sp, #40	; 0x28
    c440:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    c442:	9302      	str	r3, [sp, #8]
    c444:	4b05      	ldr	r3, [pc, #20]	; (c45c <z_log_msg2_runtime_create.constprop.0+0x20>)
    c446:	9301      	str	r3, [sp, #4]
    c448:	2300      	movs	r3, #0
    c44a:	9300      	str	r3, [sp, #0]
    c44c:	2201      	movs	r2, #1
    c44e:	4618      	mov	r0, r3
    c450:	f7fb fb76 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
    c454:	b007      	add	sp, #28
    c456:	f85d fb04 	ldr.w	pc, [sp], #4
    c45a:	bf00      	nop
    c45c:	0002ff66 	.word	0x0002ff66

0000c460 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    c460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c464:	4b94      	ldr	r3, [pc, #592]	; (c6b8 <CONFIG_USB_DEVICE_VID+0x165>)
{
    c466:	b091      	sub	sp, #68	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c468:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    c46c:	af06      	add	r7, sp, #24
    c46e:	4688      	mov	r8, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c470:	f3c9 0408 	ubfx	r4, r9, #0, #9
    c474:	2500      	movs	r5, #0
    c476:	f385 8811 	msr	BASEPRI, r5
    c47a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    c47e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    c482:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    c486:	d115      	bne.n	c4b4 <z_arm_fault+0x54>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    c488:	f002 030c 	and.w	r3, r2, #12
    c48c:	2b08      	cmp	r3, #8
    c48e:	d114      	bne.n	c4ba <z_arm_fault+0x5a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    c490:	488a      	ldr	r0, [pc, #552]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c492:	6803      	ldr	r3, [r0, #0]
    c494:	f013 0607 	ands.w	r6, r3, #7
    c498:	d00d      	beq.n	c4b6 <z_arm_fault+0x56>
    c49a:	4b89      	ldr	r3, [pc, #548]	; (c6c0 <CONFIG_USB_DEVICE_VID+0x16d>)
    c49c:	61bb      	str	r3, [r7, #24]
    c49e:	4b89      	ldr	r3, [pc, #548]	; (c6c4 <CONFIG_USB_DEVICE_VID+0x171>)
    c4a0:	61fb      	str	r3, [r7, #28]
    c4a2:	f107 0214 	add.w	r2, r7, #20
    c4a6:	2303      	movs	r3, #3
    c4a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c4ac:	607b      	str	r3, [r7, #4]
    c4ae:	617b      	str	r3, [r7, #20]
    c4b0:	f01b ffcb 	bl	2844a <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    c4b4:	462e      	mov	r6, r5
		return NULL;
    c4b6:	46b0      	mov	r8, r6
    c4b8:	e004      	b.n	c4c4 <z_arm_fault+0x64>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c4ba:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    c4bc:	bf4e      	itee	mi
    c4be:	462e      	movmi	r6, r5
			ptr_esf = (z_arch_esf_t *)msp;
    c4c0:	4680      	movpl	r8, r0
			*nested_exc = true;
    c4c2:	2601      	movpl	r6, #1
	*recoverable = false;
    c4c4:	2300      	movs	r3, #0
    c4c6:	70fb      	strb	r3, [r7, #3]
	switch (fault) {
    c4c8:	1ee3      	subs	r3, r4, #3
    c4ca:	2b09      	cmp	r3, #9
    c4cc:	f200 80d4 	bhi.w	c678 <CONFIG_USB_DEVICE_VID+0x125>
    c4d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    c4d4:	00bb000a 	.word	0x00bb000a
    c4d8:	00b800be 	.word	0x00b800be
    c4dc:	00d200d2 	.word	0x00d200d2
    c4e0:	00d200d2 	.word	0x00d200d2
    c4e4:	00c100d2 	.word	0x00c100d2
	PR_FAULT_INFO("***** HARD FAULT *****");
    c4e8:	4d74      	ldr	r5, [pc, #464]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c4ea:	682b      	ldr	r3, [r5, #0]
    c4ec:	075a      	lsls	r2, r3, #29
    c4ee:	d00d      	beq.n	c50c <z_arm_fault+0xac>
    c4f0:	4b75      	ldr	r3, [pc, #468]	; (c6c8 <CONFIG_USB_DEVICE_VID+0x175>)
    c4f2:	61bb      	str	r3, [r7, #24]
    c4f4:	4b75      	ldr	r3, [pc, #468]	; (c6cc <CONFIG_USB_DEVICE_VID+0x179>)
    c4f6:	61fb      	str	r3, [r7, #28]
    c4f8:	f107 0214 	add.w	r2, r7, #20
    c4fc:	2303      	movs	r3, #3
    c4fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c502:	4628      	mov	r0, r5
    c504:	607b      	str	r3, [r7, #4]
    c506:	617b      	str	r3, [r7, #20]
    c508:	f01b ff9f 	bl	2844a <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c50c:	4a6a      	ldr	r2, [pc, #424]	; (c6b8 <CONFIG_USB_DEVICE_VID+0x165>)
    c50e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    c510:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c514:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    c518:	f887 9003 	strb.w	r9, [r7, #3]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c51c:	d013      	beq.n	c546 <z_arm_fault+0xe6>
		PR_EXC("  Bus fault on vector table read");
    c51e:	682b      	ldr	r3, [r5, #0]
    c520:	075b      	lsls	r3, r3, #29
    c522:	d101      	bne.n	c528 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c524:	2400      	movs	r4, #0
    c526:	e022      	b.n	c56e <CONFIG_USB_DEVICE_VID+0x1b>
		PR_EXC("  Bus fault on vector table read");
    c528:	4b69      	ldr	r3, [pc, #420]	; (c6d0 <CONFIG_USB_DEVICE_VID+0x17d>)
    c52a:	61bb      	str	r3, [r7, #24]
    c52c:	4b67      	ldr	r3, [pc, #412]	; (c6cc <CONFIG_USB_DEVICE_VID+0x179>)
    c52e:	61fb      	str	r3, [r7, #28]
    c530:	4862      	ldr	r0, [pc, #392]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c532:	2303      	movs	r3, #3
    c534:	607b      	str	r3, [r7, #4]
    c536:	617b      	str	r3, [r7, #20]
    c538:	f107 0214 	add.w	r2, r7, #20
    c53c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	PR_FAULT_INFO(
    c540:	f01b ff83 	bl	2844a <z_log_msg2_static_create.constprop.0>
    c544:	e7ee      	b.n	c524 <z_arm_fault+0xc4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c546:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    c548:	2b00      	cmp	r3, #0
    c54a:	da2d      	bge.n	c5a8 <CONFIG_USB_DEVICE_VID+0x55>
		PR_EXC("  Debug event");
    c54c:	682b      	ldr	r3, [r5, #0]
    c54e:	075d      	lsls	r5, r3, #29
    c550:	d0e8      	beq.n	c524 <z_arm_fault+0xc4>
    c552:	4b60      	ldr	r3, [pc, #384]	; (c6d4 <CONFIG_USB_DEVICE_VID+0x181>)
    c554:	61bb      	str	r3, [r7, #24]
    c556:	4b5d      	ldr	r3, [pc, #372]	; (c6cc <CONFIG_USB_DEVICE_VID+0x179>)
    c558:	61fb      	str	r3, [r7, #28]
    c55a:	4858      	ldr	r0, [pc, #352]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c55c:	2303      	movs	r3, #3
    c55e:	f107 0214 	add.w	r2, r7, #20
    c562:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c566:	607b      	str	r3, [r7, #4]
    c568:	617b      	str	r3, [r7, #20]
    c56a:	f01b ff6e 	bl	2844a <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    c56e:	78fb      	ldrb	r3, [r7, #3]
    c570:	b9b3      	cbnz	r3, c5a0 <CONFIG_USB_DEVICE_VID+0x4d>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c572:	2220      	movs	r2, #32
    c574:	4641      	mov	r1, r8
    c576:	f107 0008 	add.w	r0, r7, #8
    c57a:	f01c f919 	bl	287b0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c580:	2e00      	cmp	r6, #0
    c582:	f000 8093 	beq.w	c6ac <CONFIG_USB_DEVICE_VID+0x159>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c586:	f3c3 0208 	ubfx	r2, r3, #0, #9
    c58a:	b922      	cbnz	r2, c596 <CONFIG_USB_DEVICE_VID+0x43>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c58c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    c590:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c594:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    c596:	f107 0108 	add.w	r1, r7, #8
    c59a:	4620      	mov	r0, r4
    c59c:	f7ff fb2e 	bl	bbfc <z_arm_fatal_error>
}
    c5a0:	372c      	adds	r7, #44	; 0x2c
    c5a2:	46bd      	mov	sp, r7
    c5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c5a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    c5aa:	005c      	lsls	r4, r3, #1
    c5ac:	d5ba      	bpl.n	c524 <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
    c5ae:	682b      	ldr	r3, [r5, #0]
    c5b0:	0758      	lsls	r0, r3, #29
    c5b2:	d00d      	beq.n	c5d0 <CONFIG_USB_DEVICE_VID+0x7d>
    c5b4:	4b48      	ldr	r3, [pc, #288]	; (c6d8 <CONFIG_USB_DEVICE_VID+0x185>)
    c5b6:	61bb      	str	r3, [r7, #24]
    c5b8:	4b44      	ldr	r3, [pc, #272]	; (c6cc <CONFIG_USB_DEVICE_VID+0x179>)
    c5ba:	61fb      	str	r3, [r7, #28]
    c5bc:	483f      	ldr	r0, [pc, #252]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c5be:	2303      	movs	r3, #3
    c5c0:	f107 0214 	add.w	r2, r7, #20
    c5c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c5c8:	607b      	str	r3, [r7, #4]
    c5ca:	617b      	str	r3, [r7, #20]
    c5cc:	f01b ff3d 	bl	2844a <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    c5d0:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c5d4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    c5d8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    c5dc:	429a      	cmp	r2, r3
    c5de:	d00a      	beq.n	c5f6 <CONFIG_USB_DEVICE_VID+0xa3>
		} else if (SCB_MMFSR != 0) {
    c5e0:	4b35      	ldr	r3, [pc, #212]	; (c6b8 <CONFIG_USB_DEVICE_VID+0x165>)
    c5e2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    c5e6:	b302      	cbz	r2, c62a <CONFIG_USB_DEVICE_VID+0xd7>
			reason = mem_manage_fault(esf, 1, recoverable);
    c5e8:	1cfa      	adds	r2, r7, #3
    c5ea:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    c5ec:	4640      	mov	r0, r8
    c5ee:	f7ff fe49 	bl	c284 <mem_manage_fault>
    c5f2:	4604      	mov	r4, r0
		break;
    c5f4:	e7bb      	b.n	c56e <CONFIG_USB_DEVICE_VID+0x1b>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    c5f6:	682b      	ldr	r3, [r5, #0]
    c5f8:	0759      	lsls	r1, r3, #29
    c5fa:	d013      	beq.n	c624 <CONFIG_USB_DEVICE_VID+0xd1>
    c5fc:	466c      	mov	r4, sp
    c5fe:	b088      	sub	sp, #32
    c600:	aa06      	add	r2, sp, #24
    c602:	4936      	ldr	r1, [pc, #216]	; (c6dc <CONFIG_USB_DEVICE_VID+0x189>)
    c604:	f8d8 3000 	ldr.w	r3, [r8]
    c608:	6111      	str	r1, [r2, #16]
    c60a:	4930      	ldr	r1, [pc, #192]	; (c6cc <CONFIG_USB_DEVICE_VID+0x179>)
    c60c:	482b      	ldr	r0, [pc, #172]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c60e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c612:	2304      	movs	r3, #4
    c614:	f842 3f0c 	str.w	r3, [r2, #12]!
    c618:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c61c:	60bb      	str	r3, [r7, #8]
    c61e:	f01b ff14 	bl	2844a <z_log_msg2_static_create.constprop.0>
    c622:	46a5      	mov	sp, r4
			reason = esf->basic.r0;
    c624:	f8d8 4000 	ldr.w	r4, [r8]
    c628:	e7a1      	b.n	c56e <CONFIG_USB_DEVICE_VID+0x1b>
		} else if (SCB_BFSR != 0) {
    c62a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    c62e:	b122      	cbz	r2, c63a <CONFIG_USB_DEVICE_VID+0xe7>
			reason = bus_fault(esf, 1, recoverable);
    c630:	1cf9      	adds	r1, r7, #3
    c632:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    c634:	f7ff fcb2 	bl	bf9c <bus_fault.constprop.0>
    c638:	e7db      	b.n	c5f2 <CONFIG_USB_DEVICE_VID+0x9f>
		} else if (SCB_UFSR != 0) {
    c63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    c63c:	b29b      	uxth	r3, r3
    c63e:	2b00      	cmp	r3, #0
    c640:	f43f af70 	beq.w	c524 <z_arm_fault+0xc4>
		reason = usage_fault(esf);
    c644:	f7ff fd74 	bl	c130 <usage_fault.constprop.0>
    c648:	e7d3      	b.n	c5f2 <CONFIG_USB_DEVICE_VID+0x9f>
		reason = mem_manage_fault(esf, 0, recoverable);
    c64a:	1cfa      	adds	r2, r7, #3
    c64c:	2100      	movs	r1, #0
    c64e:	e7cd      	b.n	c5ec <CONFIG_USB_DEVICE_VID+0x99>
		reason = bus_fault(esf, 0, recoverable);
    c650:	1cf9      	adds	r1, r7, #3
    c652:	2000      	movs	r0, #0
    c654:	e7ee      	b.n	c634 <CONFIG_USB_DEVICE_VID+0xe1>
	PR_FAULT_INFO(
    c656:	4819      	ldr	r0, [pc, #100]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c658:	6803      	ldr	r3, [r0, #0]
    c65a:	075a      	lsls	r2, r3, #29
    c65c:	f43f af62 	beq.w	c524 <z_arm_fault+0xc4>
    c660:	4b1f      	ldr	r3, [pc, #124]	; (c6e0 <CONFIG_USB_DEVICE_VID+0x18d>)
    c662:	61bb      	str	r3, [r7, #24]
    c664:	4b1f      	ldr	r3, [pc, #124]	; (c6e4 <CONFIG_USB_DEVICE_VID+0x191>)
    c666:	61fb      	str	r3, [r7, #28]
    c668:	2303      	movs	r3, #3
    c66a:	607b      	str	r3, [r7, #4]
    c66c:	617b      	str	r3, [r7, #20]
    c66e:	f107 0214 	add.w	r2, r7, #20
    c672:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c676:	e763      	b.n	c540 <z_arm_fault+0xe0>
	PR_FAULT_INFO("***** %s %d) *****",
    c678:	4910      	ldr	r1, [pc, #64]	; (c6bc <CONFIG_USB_DEVICE_VID+0x169>)
    c67a:	680b      	ldr	r3, [r1, #0]
    c67c:	075b      	lsls	r3, r3, #29
    c67e:	f43f af51 	beq.w	c524 <z_arm_fault+0xc4>
    c682:	4a19      	ldr	r2, [pc, #100]	; (c6e8 <CONFIG_USB_DEVICE_VID+0x195>)
    c684:	4b19      	ldr	r3, [pc, #100]	; (c6ec <CONFIG_USB_DEVICE_VID+0x199>)
    c686:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    c68a:	bf18      	it	ne
    c68c:	4613      	movne	r3, r2
    c68e:	3c10      	subs	r4, #16
    c690:	e9cd 3403 	strd	r3, r4, [sp, #12]
    c694:	4b16      	ldr	r3, [pc, #88]	; (c6f0 <CONFIG_USB_DEVICE_VID+0x19d>)
    c696:	9302      	str	r3, [sp, #8]
    c698:	2400      	movs	r4, #0
    c69a:	4b16      	ldr	r3, [pc, #88]	; (c6f4 <CONFIG_USB_DEVICE_VID+0x1a1>)
    c69c:	9301      	str	r3, [sp, #4]
    c69e:	9400      	str	r4, [sp, #0]
    c6a0:	4623      	mov	r3, r4
    c6a2:	2201      	movs	r2, #1
    c6a4:	4620      	mov	r0, r4
    c6a6:	f7ff fec9 	bl	c43c <z_log_msg2_runtime_create.constprop.0>
    c6aa:	e760      	b.n	c56e <CONFIG_USB_DEVICE_VID+0x1b>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c6ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c6b0:	f023 0301 	bic.w	r3, r3, #1
    c6b4:	e76e      	b.n	c594 <CONFIG_USB_DEVICE_VID+0x41>
    c6b6:	bf00      	nop
    c6b8:	e000ed00 	.word	0xe000ed00
    c6bc:	200009d0 	.word	0x200009d0
    c6c0:	0002ffab 	.word	0x0002ffab
    c6c4:	000300ea 	.word	0x000300ea
    c6c8:	0002ffda 	.word	0x0002ffda
    c6cc:	000300df 	.word	0x000300df
    c6d0:	0002fff5 	.word	0x0002fff5
    c6d4:	0003001a 	.word	0x0003001a
    c6d8:	0003002c 	.word	0x0003002c
    c6dc:	0003004f 	.word	0x0003004f
    c6e0:	0003006f 	.word	0x0003006f
    c6e4:	000300aa 	.word	0x000300aa
    c6e8:	0002ff92 	.word	0x0002ff92
    c6ec:	0002ff7d 	.word	0x0002ff7d
    c6f0:	00030097 	.word	0x00030097
    c6f4:	0002ff66 	.word	0x0002ff66

0000c6f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c6f8:	4a02      	ldr	r2, [pc, #8]	; (c704 <z_arm_fault_init+0xc>)
    c6fa:	6953      	ldr	r3, [r2, #20]
    c6fc:	f043 0310 	orr.w	r3, r3, #16
    c700:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    c702:	4770      	bx	lr
    c704:	e000ed00 	.word	0xe000ed00

0000c708 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    c708:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    c70c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    c710:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    c712:	4672      	mov	r2, lr
	bl z_arm_fault
    c714:	f7ff fea4 	bl	c460 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    c718:	bd01      	pop	{r0, pc}
    c71a:	bf00      	nop

0000c71c <z_arm_interrupt_init>:
    c71c:	4804      	ldr	r0, [pc, #16]	; (c730 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    c71e:	2300      	movs	r3, #0
    c720:	2120      	movs	r1, #32
    c722:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c724:	3301      	adds	r3, #1
    c726:	2b30      	cmp	r3, #48	; 0x30
    c728:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    c72c:	d1f9      	bne.n	c722 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    c72e:	4770      	bx	lr
    c730:	e000e100 	.word	0xe000e100

0000c734 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    c734:	f01e ff02 	bl	2b53c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c738:	2020      	movs	r0, #32
    msr BASEPRI, r0
    c73a:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    c73e:	480b      	ldr	r0, [pc, #44]	; (c76c <__start+0x38>)
    ldr r1, =0xaa
    c740:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c744:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    c748:	f01c f83d 	bl	287c6 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    c74c:	4807      	ldr	r0, [pc, #28]	; (c76c <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c74e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    c752:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c754:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    c758:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    c75c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    c75e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    c760:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    c764:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    c768:	f7ff fb24 	bl	bdb4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    c76c:	200093c0 	.word	0x200093c0

0000c770 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    c770:	4b06      	ldr	r3, [pc, #24]	; (c78c <z_impl_k_thread_abort+0x1c>)
    c772:	689b      	ldr	r3, [r3, #8]
    c774:	4283      	cmp	r3, r0
    c776:	d107      	bne.n	c788 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c778:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    c77c:	b123      	cbz	r3, c788 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c77e:	4a04      	ldr	r2, [pc, #16]	; (c790 <z_impl_k_thread_abort+0x20>)
    c780:	6853      	ldr	r3, [r2, #4]
    c782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c786:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    c788:	f018 be14 	b.w	253b4 <z_thread_abort>
    c78c:	20005e4c 	.word	0x20005e4c
    c790:	e000ed00 	.word	0xe000ed00

0000c794 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    c794:	4b02      	ldr	r3, [pc, #8]	; (c7a0 <z_arm_configure_static_mpu_regions+0xc>)
    c796:	4a03      	ldr	r2, [pc, #12]	; (c7a4 <z_arm_configure_static_mpu_regions+0x10>)
    c798:	4803      	ldr	r0, [pc, #12]	; (c7a8 <z_arm_configure_static_mpu_regions+0x14>)
    c79a:	2101      	movs	r1, #1
    c79c:	f000 b8aa 	b.w	c8f4 <arm_core_mpu_configure_static_mpu_regions>
    c7a0:	20040000 	.word	0x20040000
    c7a4:	20000000 	.word	0x20000000
    c7a8:	0002c59c 	.word	0x0002c59c

0000c7ac <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    c7ac:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    c7b0:	4b05      	ldr	r3, [pc, #20]	; (c7c8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    c7b2:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    c7b4:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    c7b6:	4a05      	ldr	r2, [pc, #20]	; (c7cc <z_arm_configure_dynamic_mpu_regions+0x20>)
    c7b8:	2120      	movs	r1, #32
    c7ba:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    c7be:	4618      	mov	r0, r3
    c7c0:	2101      	movs	r1, #1
    c7c2:	f000 b8a1 	b.w	c908 <arm_core_mpu_configure_dynamic_mpu_regions>
    c7c6:	bf00      	nop
    c7c8:	20003fb4 	.word	0x20003fb4
    c7cc:	150b0000 	.word	0x150b0000

0000c7d0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    c7d2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; c8b0 <mpu_configure_regions+0xe0>
    c7d6:	b083      	sub	sp, #12
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    c7d8:	2500      	movs	r5, #0
{
    c7da:	af00      	add	r7, sp, #0
	for (i = 0; i < regions_num; i++) {
    c7dc:	428d      	cmp	r5, r1
    c7de:	db03      	blt.n	c7e8 <mpu_configure_regions+0x18>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    c7e0:	4610      	mov	r0, r2
    c7e2:	370c      	adds	r7, #12
    c7e4:	46bd      	mov	sp, r7
    c7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    c7e8:	6844      	ldr	r4, [r0, #4]
    c7ea:	2c00      	cmp	r4, #0
    c7ec:	d05c      	beq.n	c8a8 <mpu_configure_regions+0xd8>
		if (do_sanity_check &&
    c7ee:	b30b      	cbz	r3, c834 <mpu_configure_regions+0x64>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    c7f0:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    c7f4:	ea14 0f0e 	tst.w	r4, lr
    c7f8:	d016      	beq.n	c828 <mpu_configure_regions+0x58>
			LOG_ERR("Partition %u: sanity check failed.", i);
    c7fa:	482e      	ldr	r0, [pc, #184]	; (c8b4 <mpu_configure_regions+0xe4>)
    c7fc:	6803      	ldr	r3, [r0, #0]
    c7fe:	075a      	lsls	r2, r3, #29
    c800:	d02f      	beq.n	c862 <mpu_configure_regions+0x92>
    c802:	466c      	mov	r4, sp
    c804:	b088      	sub	sp, #32
    c806:	466a      	mov	r2, sp
    c808:	4b2b      	ldr	r3, [pc, #172]	; (c8b8 <mpu_configure_regions+0xe8>)
    c80a:	6113      	str	r3, [r2, #16]
    c80c:	4b2b      	ldr	r3, [pc, #172]	; (c8bc <mpu_configure_regions+0xec>)
    c80e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    c812:	2304      	movs	r3, #4
    c814:	f842 3f0c 	str.w	r3, [r2, #12]!
    c818:	607b      	str	r3, [r7, #4]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    c81a:	2300      	movs	r3, #0
    c81c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c820:	f01a f962 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    c824:	46a5      	mov	sp, r4
		if (reg_index == -EINVAL) {
    c826:	e01c      	b.n	c862 <mpu_configure_regions+0x92>
		&&
    c828:	2c1f      	cmp	r4, #31
    c82a:	d9e6      	bls.n	c7fa <mpu_configure_regions+0x2a>
		((part->start & (part->size - 1U)) == 0U);
    c82c:	6806      	ldr	r6, [r0, #0]
		&&
    c82e:	ea1e 0f06 	tst.w	lr, r6
    c832:	d1e2      	bne.n	c7fa <mpu_configure_regions+0x2a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    c834:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    c836:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c838:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    c83c:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    c83e:	d913      	bls.n	c868 <mpu_configure_regions+0x98>
	if (size > (1UL << 31)) {
    c840:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    c844:	d812      	bhi.n	c86c <mpu_configure_regions+0x9c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    c846:	3c01      	subs	r4, #1
    c848:	fab4 f484 	clz	r4, r4
    c84c:	f1c4 041f 	rsb	r4, r4, #31
    c850:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    c852:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c854:	ea4e 0404 	orr.w	r4, lr, r4
    c858:	d918      	bls.n	c88c <mpu_configure_regions+0xbc>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    c85a:	4816      	ldr	r0, [pc, #88]	; (c8b4 <mpu_configure_regions+0xe4>)
    c85c:	6803      	ldr	r3, [r0, #0]
    c85e:	075b      	lsls	r3, r3, #29
    c860:	d106      	bne.n	c870 <mpu_configure_regions+0xa0>
			return -EINVAL;
    c862:	f06f 0215 	mvn.w	r2, #21
    c866:	e7bb      	b.n	c7e0 <mpu_configure_regions+0x10>
		return REGION_32B;
    c868:	2408      	movs	r4, #8
    c86a:	e7f2      	b.n	c852 <mpu_configure_regions+0x82>
		return REGION_4G;
    c86c:	243e      	movs	r4, #62	; 0x3e
    c86e:	e7f0      	b.n	c852 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    c870:	466c      	mov	r4, sp
    c872:	b088      	sub	sp, #32
    c874:	466b      	mov	r3, sp
    c876:	4912      	ldr	r1, [pc, #72]	; (c8c0 <mpu_configure_regions+0xf0>)
    c878:	6119      	str	r1, [r3, #16]
    c87a:	4912      	ldr	r1, [pc, #72]	; (c8c4 <mpu_configure_regions+0xf4>)
    c87c:	e9c3 1205 	strd	r1, r2, [r3, #20]
    c880:	461a      	mov	r2, r3
    c882:	2104      	movs	r1, #4
    c884:	f842 1f0c 	str.w	r1, [r2, #12]!
    c888:	6079      	str	r1, [r7, #4]
    c88a:	e7c6      	b.n	c81a <mpu_configure_regions+0x4a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c88c:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    c890:	4316      	orrs	r6, r2
    c892:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c896:	f044 0401 	orr.w	r4, r4, #1
    c89a:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c89e:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    c8a2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c8a4:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    c8a8:	3501      	adds	r5, #1
    c8aa:	300c      	adds	r0, #12
    c8ac:	e796      	b.n	c7dc <mpu_configure_regions+0xc>
    c8ae:	bf00      	nop
    c8b0:	e000ed00 	.word	0xe000ed00
    c8b4:	200009c8 	.word	0x200009c8
    c8b8:	000300f6 	.word	0x000300f6
    c8bc:	00030160 	.word	0x00030160
    c8c0:	0003011d 	.word	0x0003011d
    c8c4:	00030147 	.word	0x00030147

0000c8c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c8c8:	4b04      	ldr	r3, [pc, #16]	; (c8dc <arm_core_mpu_enable+0x14>)
    c8ca:	2205      	movs	r2, #5
    c8cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c8d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c8d4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c8d8:	4770      	bx	lr
    c8da:	bf00      	nop
    c8dc:	e000ed00 	.word	0xe000ed00

0000c8e0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c8e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c8e4:	4b02      	ldr	r3, [pc, #8]	; (c8f0 <arm_core_mpu_disable+0x10>)
    c8e6:	2200      	movs	r2, #0
    c8e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c8ec:	4770      	bx	lr
    c8ee:	bf00      	nop
    c8f0:	e000ed00 	.word	0xe000ed00

0000c8f4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    c8f4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    c8f6:	4c03      	ldr	r4, [pc, #12]	; (c904 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    c8f8:	2301      	movs	r3, #1
    c8fa:	7822      	ldrb	r2, [r4, #0]
    c8fc:	f7ff ff68 	bl	c7d0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c900:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    c902:	bd10      	pop	{r4, pc}
    c904:	20005f3e 	.word	0x20005f3e

0000c908 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    c908:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    c90a:	4a09      	ldr	r2, [pc, #36]	; (c930 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    c90c:	2300      	movs	r3, #0
    c90e:	7812      	ldrb	r2, [r2, #0]
    c910:	f7ff ff5e 	bl	c7d0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    c914:	f110 0f16 	cmn.w	r0, #22
    c918:	d003      	beq.n	c922 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    c91a:	4b06      	ldr	r3, [pc, #24]	; (c934 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    c91c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    c91e:	2807      	cmp	r0, #7
    c920:	dd00      	ble.n	c924 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    c922:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    c924:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    c928:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    c92c:	3001      	adds	r0, #1
    c92e:	e7f6      	b.n	c91e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    c930:	20005f3e 	.word	0x20005f3e
    c934:	e000ed00 	.word	0xe000ed00

0000c938 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c938:	4914      	ldr	r1, [pc, #80]	; (c98c <z_arm_mpu_init+0x54>)
    c93a:	6808      	ldr	r0, [r1, #0]
    c93c:	2808      	cmp	r0, #8
{
    c93e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    c940:	d821      	bhi.n	c986 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    c942:	f7ff ffcd 	bl	c8e0 <arm_core_mpu_disable>
    c946:	4c12      	ldr	r4, [pc, #72]	; (c990 <z_arm_mpu_init+0x58>)
    c948:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c94a:	2200      	movs	r2, #0
    c94c:	4290      	cmp	r0, r2
    c94e:	f101 010c 	add.w	r1, r1, #12
    c952:	d105      	bne.n	c960 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c954:	4b0f      	ldr	r3, [pc, #60]	; (c994 <z_arm_mpu_init+0x5c>)
    c956:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    c958:	f7ff ffb6 	bl	c8c8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c95c:	2000      	movs	r0, #0
}
    c95e:	bd10      	pop	{r4, pc}
    c960:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c964:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    c968:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    c96c:	4313      	orrs	r3, r2
    c96e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c972:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c976:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c97a:	f043 0301 	orr.w	r3, r3, #1
    c97e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c982:	3201      	adds	r2, #1
    c984:	e7e2      	b.n	c94c <z_arm_mpu_init+0x14>
		return -1;
    c986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c98a:	e7e8      	b.n	c95e <z_arm_mpu_init+0x26>
    c98c:	0002c5a8 	.word	0x0002c5a8
    c990:	e000ed00 	.word	0xe000ed00
    c994:	20005f3e 	.word	0x20005f3e

0000c998 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    c998:	b40c      	push	{r2, r3}
    c99a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    c99c:	b909      	cbnz	r1, c9a2 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    c99e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    c9a2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    c9a6:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    c9a8:	9a06      	ldr	r2, [sp, #24]
    c9aa:	4806      	ldr	r0, [pc, #24]	; (c9c4 <snprintf+0x2c>)
	va_start(vargs, format);
    c9ac:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    c9ae:	a902      	add	r1, sp, #8
    c9b0:	f7f9 fd8c 	bl	64cc <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    c9b4:	9b02      	ldr	r3, [sp, #8]
    c9b6:	2200      	movs	r2, #0
    c9b8:	701a      	strb	r2, [r3, #0]
	return r;
}
    c9ba:	b005      	add	sp, #20
    c9bc:	f85d eb04 	ldr.w	lr, [sp], #4
    c9c0:	b002      	add	sp, #8
    c9c2:	4770      	bx	lr
    c9c4:	000287d9 	.word	0x000287d9

0000c9c8 <sprintf>:

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
    c9c8:	b40e      	push	{r1, r2, r3}
    c9ca:	b50f      	push	{r0, r1, r2, r3, lr}
    c9cc:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    c9ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    c9d2:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
    c9d6:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    c9d8:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    c9da:	4806      	ldr	r0, [pc, #24]	; (c9f4 <sprintf+0x2c>)
	va_start(vargs, format);
    c9dc:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    c9de:	a902      	add	r1, sp, #8
    c9e0:	f7f9 fd74 	bl	64cc <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    c9e4:	9b02      	ldr	r3, [sp, #8]
    c9e6:	2200      	movs	r2, #0
    c9e8:	701a      	strb	r2, [r3, #0]
	return r;
}
    c9ea:	b004      	add	sp, #16
    c9ec:	f85d eb04 	ldr.w	lr, [sp], #4
    c9f0:	b003      	add	sp, #12
    c9f2:	4770      	bx	lr
    c9f4:	000287d9 	.word	0x000287d9

0000c9f8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    c9f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    c9fa:	f04f 0320 	mov.w	r3, #32
    c9fe:	f3ef 8011 	mrs	r0, BASEPRI
    ca02:	f383 8812 	msr	BASEPRI_MAX, r3
    ca06:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ca0a:	4a11      	ldr	r2, [pc, #68]	; (ca50 <nordicsemi_nrf52_init+0x58>)
    ca0c:	2301      	movs	r3, #1
    ca0e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    ca12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ca16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    ca1a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    ca1e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    ca22:	2c08      	cmp	r4, #8
    ca24:	d108      	bne.n	ca38 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ca26:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    ca2a:	2905      	cmp	r1, #5
    ca2c:	d804      	bhi.n	ca38 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    ca2e:	4c09      	ldr	r4, [pc, #36]	; (ca54 <nordicsemi_nrf52_init+0x5c>)
    ca30:	5c61      	ldrb	r1, [r4, r1]
    ca32:	b109      	cbz	r1, ca38 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    ca34:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    ca38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ca3c:	2201      	movs	r2, #1
    ca3e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    ca42:	f380 8811 	msr	BASEPRI, r0
    ca46:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ca4a:	2000      	movs	r0, #0
    ca4c:	bd10      	pop	{r4, pc}
    ca4e:	bf00      	nop
    ca50:	4001e000 	.word	0x4001e000
    ca54:	00030189 	.word	0x00030189

0000ca58 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ca58:	b120      	cbz	r0, ca64 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    ca5a:	4b03      	ldr	r3, [pc, #12]	; (ca68 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    ca5c:	0180      	lsls	r0, r0, #6
    ca5e:	f043 0301 	orr.w	r3, r3, #1
    ca62:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ca64:	4770      	bx	lr
    ca66:	bf00      	nop
    ca68:	0002bbd0 	.word	0x0002bbd0

0000ca6c <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    ca6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ca70:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    ca74:	07db      	lsls	r3, r3, #31
    ca76:	d52e      	bpl.n	cad6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    ca78:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    ca7c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    ca80:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    ca84:	2b07      	cmp	r3, #7
    ca86:	d126      	bne.n	cad6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    ca88:	4a14      	ldr	r2, [pc, #80]	; (cadc <board_nrf52840dongle_nrf52840_init+0x70>)
    ca8a:	2301      	movs	r3, #1
    ca8c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    ca90:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    ca94:	2b00      	cmp	r3, #0
    ca96:	d0fb      	beq.n	ca90 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    ca98:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    ca9c:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    caa0:	f023 0307 	bic.w	r3, r3, #7
    caa4:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    caa8:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    caac:	2300      	movs	r3, #0
    caae:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    cab2:	4a0a      	ldr	r2, [pc, #40]	; (cadc <board_nrf52840dongle_nrf52840_init+0x70>)
    cab4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    cab8:	2b00      	cmp	r3, #0
    caba:	d0fb      	beq.n	cab4 <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    cabc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    cac0:	4907      	ldr	r1, [pc, #28]	; (cae0 <board_nrf52840dongle_nrf52840_init+0x74>)
    cac2:	4b08      	ldr	r3, [pc, #32]	; (cae4 <board_nrf52840dongle_nrf52840_init+0x78>)
    cac4:	68ca      	ldr	r2, [r1, #12]
    cac6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    caca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    cacc:	60cb      	str	r3, [r1, #12]
    cace:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    cad2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    cad4:	e7fd      	b.n	cad2 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    cad6:	2000      	movs	r0, #0
    cad8:	4770      	bx	lr
    cada:	bf00      	nop
    cadc:	4001e000 	.word	0x4001e000
    cae0:	e000ed00 	.word	0xe000ed00
    cae4:	05fa0004 	.word	0x05fa0004

0000cae8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    cae8:	4b0e      	ldr	r3, [pc, #56]	; (cb24 <bt_hex_real+0x3c>)
    caea:	2940      	cmp	r1, #64	; 0x40
{
    caec:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    caee:	bf28      	it	cs
    caf0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    caf2:	4c0d      	ldr	r4, [pc, #52]	; (cb28 <bt_hex_real+0x40>)
    caf4:	1846      	adds	r6, r0, r1
    caf6:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    caf8:	42b0      	cmp	r0, r6
    cafa:	f103 0302 	add.w	r3, r3, #2
    cafe:	d104      	bne.n	cb0a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    cb00:	2300      	movs	r3, #0
    cb02:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    cb06:	4807      	ldr	r0, [pc, #28]	; (cb24 <bt_hex_real+0x3c>)
    cb08:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    cb0a:	7802      	ldrb	r2, [r0, #0]
    cb0c:	0912      	lsrs	r2, r2, #4
    cb0e:	5ca2      	ldrb	r2, [r4, r2]
    cb10:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    cb14:	f810 2b01 	ldrb.w	r2, [r0], #1
    cb18:	f002 020f 	and.w	r2, r2, #15
    cb1c:	5ca2      	ldrb	r2, [r4, r2]
    cb1e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    cb22:	e7e9      	b.n	caf8 <bt_hex_real+0x10>
    cb24:	20005f5d 	.word	0x20005f5d
    cb28:	0003018f 	.word	0x0003018f

0000cb2c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    cb2c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    cb2e:	7803      	ldrb	r3, [r0, #0]
    cb30:	b08b      	sub	sp, #44	; 0x2c
    cb32:	4604      	mov	r4, r0
    cb34:	ad07      	add	r5, sp, #28
    cb36:	2b03      	cmp	r3, #3
    cb38:	d821      	bhi.n	cb7e <bt_addr_le_str_real+0x52>
    cb3a:	e8df f003 	tbb	[pc, r3]
    cb3e:	1a02      	.short	0x1a02
    cb40:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    cb42:	4912      	ldr	r1, [pc, #72]	; (cb8c <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    cb44:	4628      	mov	r0, r5
    cb46:	f01b fdb3 	bl	286b0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    cb4a:	7863      	ldrb	r3, [r4, #1]
    cb4c:	9304      	str	r3, [sp, #16]
    cb4e:	78a3      	ldrb	r3, [r4, #2]
    cb50:	9303      	str	r3, [sp, #12]
    cb52:	78e3      	ldrb	r3, [r4, #3]
    cb54:	9302      	str	r3, [sp, #8]
    cb56:	7923      	ldrb	r3, [r4, #4]
    cb58:	9301      	str	r3, [sp, #4]
    cb5a:	7963      	ldrb	r3, [r4, #5]
    cb5c:	9300      	str	r3, [sp, #0]
    cb5e:	4a0c      	ldr	r2, [pc, #48]	; (cb90 <bt_addr_le_str_real+0x64>)
    cb60:	79a3      	ldrb	r3, [r4, #6]
    cb62:	9505      	str	r5, [sp, #20]
    cb64:	211e      	movs	r1, #30
    cb66:	480b      	ldr	r0, [pc, #44]	; (cb94 <bt_addr_le_str_real+0x68>)
    cb68:	f018 ffd9 	bl	25b1e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    cb6c:	4809      	ldr	r0, [pc, #36]	; (cb94 <bt_addr_le_str_real+0x68>)
    cb6e:	b00b      	add	sp, #44	; 0x2c
    cb70:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    cb72:	4909      	ldr	r1, [pc, #36]	; (cb98 <bt_addr_le_str_real+0x6c>)
    cb74:	e7e6      	b.n	cb44 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    cb76:	4909      	ldr	r1, [pc, #36]	; (cb9c <bt_addr_le_str_real+0x70>)
    cb78:	e7e4      	b.n	cb44 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    cb7a:	4909      	ldr	r1, [pc, #36]	; (cba0 <bt_addr_le_str_real+0x74>)
    cb7c:	e7e2      	b.n	cb44 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    cb7e:	4a09      	ldr	r2, [pc, #36]	; (cba4 <bt_addr_le_str_real+0x78>)
    cb80:	210a      	movs	r1, #10
    cb82:	4628      	mov	r0, r5
    cb84:	f018 ffcb 	bl	25b1e <snprintk>
		break;
    cb88:	e7df      	b.n	cb4a <bt_addr_le_str_real+0x1e>
    cb8a:	bf00      	nop
    cb8c:	0002e2d6 	.word	0x0002e2d6
    cb90:	0002e2f8 	.word	0x0002e2f8
    cb94:	20005f3f 	.word	0x20005f3f
    cb98:	0002e2dd 	.word	0x0002e2dd
    cb9c:	0002e2e4 	.word	0x0002e2e4
    cba0:	0002e2ee 	.word	0x0002e2ee
    cba4:	00031636 	.word	0x00031636

0000cba8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    cba8:	b430      	push	{r4, r5}
    cbaa:	4603      	mov	r3, r0
    cbac:	4608      	mov	r0, r1
	switch (src->type) {
    cbae:	781a      	ldrb	r2, [r3, #0]
    cbb0:	2a01      	cmp	r2, #1
    cbb2:	d013      	beq.n	cbdc <uuid_to_uuid128+0x34>
    cbb4:	2a02      	cmp	r2, #2
    cbb6:	d026      	beq.n	cc06 <uuid_to_uuid128+0x5e>
    cbb8:	b972      	cbnz	r2, cbd8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    cbba:	4a15      	ldr	r2, [pc, #84]	; (cc10 <uuid_to_uuid128+0x68>)
    cbbc:	f102 0410 	add.w	r4, r2, #16
    cbc0:	f852 5b04 	ldr.w	r5, [r2], #4
    cbc4:	f841 5b04 	str.w	r5, [r1], #4
    cbc8:	42a2      	cmp	r2, r4
    cbca:	d1f9      	bne.n	cbc0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    cbcc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    cbce:	7812      	ldrb	r2, [r2, #0]
    cbd0:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    cbd2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    cbd4:	0a1b      	lsrs	r3, r3, #8
    cbd6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    cbd8:	bc30      	pop	{r4, r5}
    cbda:	4770      	bx	lr
		*dst = uuid128_base;
    cbdc:	4a0c      	ldr	r2, [pc, #48]	; (cc10 <uuid_to_uuid128+0x68>)
    cbde:	f102 0410 	add.w	r4, r2, #16
    cbe2:	f852 5b04 	ldr.w	r5, [r2], #4
    cbe6:	f841 5b04 	str.w	r5, [r1], #4
    cbea:	42a2      	cmp	r2, r4
    cbec:	d1f9      	bne.n	cbe2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    cbee:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    cbf0:	7812      	ldrb	r2, [r2, #0]
    cbf2:	700a      	strb	r2, [r1, #0]
    cbf4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    cbf8:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    cbfa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cbfc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    cbfe:	0a1b      	lsrs	r3, r3, #8
    cc00:	7382      	strb	r2, [r0, #14]
    cc02:	7403      	strb	r3, [r0, #16]
}
    cc04:	e7e8      	b.n	cbd8 <uuid_to_uuid128+0x30>
}
    cc06:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    cc08:	2211      	movs	r2, #17
    cc0a:	4619      	mov	r1, r3
    cc0c:	f01b bdd0 	b.w	287b0 <memcpy>
    cc10:	000301a7 	.word	0x000301a7

0000cc14 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    cc14:	b538      	push	{r3, r4, r5, lr}
    cc16:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    cc18:	4805      	ldr	r0, [pc, #20]	; (cc30 <bt_buf_get_rx+0x1c>)
    cc1a:	f01d f8f8 	bl	29e0e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    cc1e:	4604      	mov	r4, r0
    cc20:	b120      	cbz	r0, cc2c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    cc22:	2100      	movs	r1, #0
    cc24:	3008      	adds	r0, #8
    cc26:	f01d f911 	bl	29e4c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    cc2a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    cc2c:	4620      	mov	r0, r4
    cc2e:	bd38      	pop	{r3, r4, r5, pc}
    cc30:	20000cc8 	.word	0x20000cc8

0000cc34 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    cc34:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    cc36:	490b      	ldr	r1, [pc, #44]	; (cc64 <bt_buf_get_cmd_complete+0x30>)
{
    cc38:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    cc3a:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    cc3e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    cc40:	b920      	cbnz	r0, cc4c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    cc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    cc46:	2001      	movs	r0, #1
    cc48:	f7ff bfe4 	b.w	cc14 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    cc4c:	f01d f90f 	bl	29e6e <net_buf_ref>
    cc50:	2301      	movs	r3, #1
		buf->len = 0U;
    cc52:	2100      	movs	r1, #0
    cc54:	7503      	strb	r3, [r0, #20]
    cc56:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    cc58:	4604      	mov	r4, r0
    cc5a:	3008      	adds	r0, #8
    cc5c:	f01d f8f6 	bl	29e4c <net_buf_simple_reserve>
}
    cc60:	4620      	mov	r0, r4
    cc62:	bd10      	pop	{r4, pc}
    cc64:	20000000 	.word	0x20000000

0000cc68 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    cc68:	b570      	push	{r4, r5, r6, lr}
    cc6a:	4604      	mov	r4, r0
	switch (evt) {
    cc6c:	2c0f      	cmp	r4, #15
{
    cc6e:	460d      	mov	r5, r1
    cc70:	4610      	mov	r0, r2
    cc72:	4619      	mov	r1, r3
	switch (evt) {
    cc74:	d805      	bhi.n	cc82 <bt_buf_get_evt+0x1a>
    cc76:	2c0d      	cmp	r4, #13
    cc78:	d912      	bls.n	cca0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    cc7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    cc7e:	f7ff bfd9 	b.w	cc34 <bt_buf_get_cmd_complete>
	switch (evt) {
    cc82:	2c13      	cmp	r4, #19
    cc84:	d10c      	bne.n	cca0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    cc86:	480b      	ldr	r0, [pc, #44]	; (ccb4 <bt_buf_get_evt+0x4c>)
    cc88:	f01d f8c1 	bl	29e0e <net_buf_alloc_fixed>
			if (buf) {
    cc8c:	4604      	mov	r4, r0
    cc8e:	b128      	cbz	r0, cc9c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    cc90:	2100      	movs	r1, #0
    cc92:	3008      	adds	r0, #8
    cc94:	f01d f8da 	bl	29e4c <net_buf_simple_reserve>
    cc98:	2301      	movs	r3, #1
    cc9a:	7523      	strb	r3, [r4, #20]
}
    cc9c:	4620      	mov	r0, r4
    cc9e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    cca0:	4602      	mov	r2, r0
    cca2:	460b      	mov	r3, r1
		if (discardable) {
    cca4:	b10d      	cbz	r5, ccaa <bt_buf_get_evt+0x42>
    cca6:	4804      	ldr	r0, [pc, #16]	; (ccb8 <bt_buf_get_evt+0x50>)
    cca8:	e7ee      	b.n	cc88 <bt_buf_get_evt+0x20>
}
    ccaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ccae:	2001      	movs	r0, #1
    ccb0:	f7ff bfb0 	b.w	cc14 <bt_buf_get_rx>
    ccb4:	20000cf4 	.word	0x20000cf4
    ccb8:	20000c44 	.word	0x20000c44

0000ccbc <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    ccbc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    ccbe:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    ccc0:	781a      	ldrb	r2, [r3, #0]
    ccc2:	b972      	cbnz	r2, cce2 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ccc4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    ccc8:	4620      	mov	r0, r4
    ccca:	f002 fecd 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    ccce:	4605      	mov	r5, r0
    ccd0:	b940      	cbnz	r0, cce4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    ccd2:	4b08      	ldr	r3, [pc, #32]	; (ccf4 <hci_disconn_complete_prio+0x38>)
    ccd4:	881a      	ldrh	r2, [r3, #0]
    ccd6:	b922      	cbnz	r2, cce2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    ccd8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    ccdc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    cce0:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    cce2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    cce4:	2101      	movs	r1, #1
    cce6:	f002 fec7 	bl	fa78 <bt_conn_set_state>
	bt_conn_unref(conn);
    ccea:	4628      	mov	r0, r5
}
    ccec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ccf0:	f01c b95b 	b.w	28faa <bt_conn_unref>
    ccf4:	20005e94 	.word	0x20005e94

0000ccf8 <hci_data_buf_overflow>:
{
    ccf8:	b590      	push	{r4, r7, lr}
    ccfa:	4603      	mov	r3, r0
    ccfc:	b083      	sub	sp, #12
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    ccfe:	480e      	ldr	r0, [pc, #56]	; (cd38 <hci_data_buf_overflow+0x40>)
    cd00:	6802      	ldr	r2, [r0, #0]
    cd02:	f012 0f06 	tst.w	r2, #6
{
    cd06:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    cd08:	d012      	beq.n	cd30 <hci_data_buf_overflow+0x38>
    cd0a:	466c      	mov	r4, sp
    cd0c:	b088      	sub	sp, #32
    cd0e:	466a      	mov	r2, sp
    cd10:	689b      	ldr	r3, [r3, #8]
    cd12:	490a      	ldr	r1, [pc, #40]	; (cd3c <hci_data_buf_overflow+0x44>)
    cd14:	781b      	ldrb	r3, [r3, #0]
    cd16:	6111      	str	r1, [r2, #16]
    cd18:	4909      	ldr	r1, [pc, #36]	; (cd40 <hci_data_buf_overflow+0x48>)
    cd1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cd1e:	2304      	movs	r3, #4
    cd20:	f842 3f0c 	str.w	r3, [r2, #12]!
    cd24:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    cd28:	607b      	str	r3, [r7, #4]
    cd2a:	f01b fe42 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    cd2e:	46a5      	mov	sp, r4
}
    cd30:	370c      	adds	r7, #12
    cd32:	46bd      	mov	sp, r7
    cd34:	bd90      	pop	{r4, r7, pc}
    cd36:	bf00      	nop
    cd38:	20000994 	.word	0x20000994
    cd3c:	000301bf 	.word	0x000301bf
    cd40:	000307fc 	.word	0x000307fc

0000cd44 <le_conn_update_complete>:

	bt_conn_unref(conn);
}

static void le_conn_update_complete(struct net_buf *buf)
{
    cd44:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd46:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    cd48:	6885      	ldr	r5, [r0, #8]
	struct bt_conn *conn;
	uint16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    cd4a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    cd4e:	af00      	add	r7, sp, #0

	BT_DBG("status 0x%02x, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    cd50:	4630      	mov	r0, r6
    cd52:	f002 fe89 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    cd56:	4604      	mov	r4, r0
    cd58:	b9b8      	cbnz	r0, cd8a <le_conn_update_complete+0x46>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    cd5a:	4827      	ldr	r0, [pc, #156]	; (cdf8 <le_conn_update_complete+0xb4>)
    cd5c:	6803      	ldr	r3, [r0, #0]
    cd5e:	075a      	lsls	r2, r3, #29
    cd60:	d010      	beq.n	cd84 <le_conn_update_complete+0x40>
    cd62:	466c      	mov	r4, sp
    cd64:	b088      	sub	sp, #32
    cd66:	466a      	mov	r2, sp
    cd68:	4b24      	ldr	r3, [pc, #144]	; (cdfc <le_conn_update_complete+0xb8>)
    cd6a:	6113      	str	r3, [r2, #16]
    cd6c:	4b24      	ldr	r3, [pc, #144]	; (ce00 <le_conn_update_complete+0xbc>)
    cd6e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    cd72:	2304      	movs	r3, #4
    cd74:	f842 3f0c 	str.w	r3, [r2, #12]!
    cd78:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    cd7c:	603b      	str	r3, [r7, #0]
    cd7e:	f01b fe18 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    cd82:	46a5      	mov	sp, r4

		bt_l2cap_update_conn_param(conn, &param);
	}

	bt_conn_unref(conn);
}
    cd84:	370c      	adds	r7, #12
    cd86:	46bd      	mov	sp, r7
    cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    cd8a:	782b      	ldrb	r3, [r5, #0]
    cd8c:	b9bb      	cbnz	r3, cdbe <le_conn_update_complete+0x7a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    cd8e:	792a      	ldrb	r2, [r5, #4]
    cd90:	78eb      	ldrb	r3, [r5, #3]
    cd92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    cd96:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    cd9a:	79aa      	ldrb	r2, [r5, #6]
    cd9c:	796b      	ldrb	r3, [r5, #5]
    cd9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    cda2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    cda6:	79eb      	ldrb	r3, [r5, #7]
    cda8:	7a2a      	ldrb	r2, [r5, #8]
    cdaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    cdae:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    cdb2:	f002 ffcb 	bl	fd4c <notify_le_param_updated>
	bt_conn_unref(conn);
    cdb6:	4620      	mov	r0, r4
    cdb8:	f01c f8f7 	bl	28faa <bt_conn_unref>
    cdbc:	e7e2      	b.n	cd84 <le_conn_update_complete+0x40>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    cdbe:	2b1a      	cmp	r3, #26
    cdc0:	d1f9      	bne.n	cdb6 <le_conn_update_complete+0x72>
    cdc2:	78c3      	ldrb	r3, [r0, #3]
    cdc4:	2b01      	cmp	r3, #1
    cdc6:	d1f6      	bne.n	cdb6 <le_conn_update_complete+0x72>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    cdc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    cdcc:	3004      	adds	r0, #4
    cdce:	f01b fde1 	bl	28994 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    cdd2:	0543      	lsls	r3, r0, #21
    cdd4:	d4ef      	bmi.n	cdb6 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
    cdd6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    cdda:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
    cddc:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    cde0:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
    cde2:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    cde6:	80bb      	strh	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    cde8:	4639      	mov	r1, r7
		param.timeout = conn->le.pending_timeout;
    cdea:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    cdee:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
    cdf0:	4620      	mov	r0, r4
    cdf2:	f003 fb65 	bl	104c0 <bt_l2cap_update_conn_param>
    cdf6:	e7de      	b.n	cdb6 <le_conn_update_complete+0x72>
    cdf8:	20000994 	.word	0x20000994
    cdfc:	000301eb 	.word	0x000301eb
    ce00:	00030901 	.word	0x00030901

0000ce04 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
    ce04:	b590      	push	{r4, r7, lr}
    ce06:	b083      	sub	sp, #12
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    ce08:	2101      	movs	r1, #1
    ce0a:	af00      	add	r7, sp, #0
    ce0c:	3008      	adds	r0, #8
    ce0e:	f01d f887 	bl	29f20 <net_buf_simple_pull_mem>
    ce12:	4603      	mov	r3, r0
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    ce14:	480c      	ldr	r0, [pc, #48]	; (ce48 <hci_hardware_error+0x44>)
    ce16:	6802      	ldr	r2, [r0, #0]
    ce18:	0752      	lsls	r2, r2, #29
    ce1a:	d011      	beq.n	ce40 <hci_hardware_error+0x3c>
    ce1c:	466c      	mov	r4, sp
    ce1e:	b088      	sub	sp, #32
    ce20:	466a      	mov	r2, sp
    ce22:	490a      	ldr	r1, [pc, #40]	; (ce4c <hci_hardware_error+0x48>)
    ce24:	781b      	ldrb	r3, [r3, #0]
    ce26:	6111      	str	r1, [r2, #16]
    ce28:	4909      	ldr	r1, [pc, #36]	; (ce50 <hci_hardware_error+0x4c>)
    ce2a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    ce2e:	2304      	movs	r3, #4
    ce30:	f842 3f0c 	str.w	r3, [r2, #12]!
    ce34:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ce38:	607b      	str	r3, [r7, #4]
    ce3a:	f01b fdba 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    ce3e:	46a5      	mov	sp, r4
}
    ce40:	370c      	adds	r7, #12
    ce42:	46bd      	mov	sp, r7
    ce44:	bd90      	pop	{r4, r7, pc}
    ce46:	bf00      	nop
    ce48:	20000994 	.word	0x20000994
    ce4c:	00030213 	.word	0x00030213
    ce50:	000307bf 	.word	0x000307bf

0000ce54 <le_data_len_change>:
{
    ce54:	b5b0      	push	{r4, r5, r7, lr}
    ce56:	b082      	sub	sp, #8
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ce58:	6883      	ldr	r3, [r0, #8]
    ce5a:	881c      	ldrh	r4, [r3, #0]
{
    ce5c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    ce5e:	4620      	mov	r0, r4
    ce60:	f002 fe02 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    ce64:	b9b8      	cbnz	r0, ce96 <le_data_len_change+0x42>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ce66:	480d      	ldr	r0, [pc, #52]	; (ce9c <le_data_len_change+0x48>)
    ce68:	6803      	ldr	r3, [r0, #0]
    ce6a:	075b      	lsls	r3, r3, #29
    ce6c:	d010      	beq.n	ce90 <le_data_len_change+0x3c>
    ce6e:	466d      	mov	r5, sp
    ce70:	b088      	sub	sp, #32
    ce72:	466a      	mov	r2, sp
    ce74:	4b0a      	ldr	r3, [pc, #40]	; (cea0 <le_data_len_change+0x4c>)
    ce76:	6113      	str	r3, [r2, #16]
    ce78:	4b0a      	ldr	r3, [pc, #40]	; (cea4 <le_data_len_change+0x50>)
    ce7a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ce7e:	2304      	movs	r3, #4
    ce80:	f842 3f0c 	str.w	r3, [r2, #12]!
    ce84:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ce88:	607b      	str	r3, [r7, #4]
    ce8a:	f01b fd92 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    ce8e:	46ad      	mov	sp, r5
}
    ce90:	3708      	adds	r7, #8
    ce92:	46bd      	mov	sp, r7
    ce94:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    ce96:	f01c f888 	bl	28faa <bt_conn_unref>
    ce9a:	e7f9      	b.n	ce90 <le_data_len_change+0x3c>
    ce9c:	20000994 	.word	0x20000994
    cea0:	000301eb 	.word	0x000301eb
    cea4:	00030780 	.word	0x00030780

0000cea8 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    cea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    ceaa:	4c0b      	ldr	r4, [pc, #44]	; (ced8 <hci_vendor_event+0x30>)
    ceac:	6823      	ldr	r3, [r4, #0]
    ceae:	f013 0f06 	tst.w	r3, #6
    ceb2:	d00f      	beq.n	ced4 <hci_vendor_event+0x2c>
    ceb4:	8981      	ldrh	r1, [r0, #12]
    ceb6:	6880      	ldr	r0, [r0, #8]
    ceb8:	f7ff fe16 	bl	cae8 <bt_hex_real>
    cebc:	4b07      	ldr	r3, [pc, #28]	; (cedc <hci_vendor_event+0x34>)
    cebe:	9302      	str	r3, [sp, #8]
    cec0:	4b07      	ldr	r3, [pc, #28]	; (cee0 <hci_vendor_event+0x38>)
    cec2:	9301      	str	r3, [sp, #4]
    cec4:	2300      	movs	r3, #0
    cec6:	9003      	str	r0, [sp, #12]
    cec8:	9300      	str	r3, [sp, #0]
    ceca:	2202      	movs	r2, #2
    cecc:	4621      	mov	r1, r4
    cece:	4618      	mov	r0, r3
    ced0:	f01b fd72 	bl	289b8 <z_log_msg2_runtime_create.constprop.0>
			bt_hex(buf->data, buf->len));
	}
}
    ced4:	b004      	add	sp, #16
    ced6:	bd10      	pop	{r4, pc}
    ced8:	20000994 	.word	0x20000994
    cedc:	000308f0 	.word	0x000308f0
    cee0:	00030239 	.word	0x00030239

0000cee4 <handle_event>:
{
    cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cee6:	b089      	sub	sp, #36	; 0x24
    cee8:	4604      	mov	r4, r0
    ceea:	af06      	add	r7, sp, #24
    ceec:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    ceee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    cef2:	7811      	ldrb	r1, [r2, #0]
    cef4:	42a1      	cmp	r1, r4
    cef6:	d01b      	beq.n	cf30 <handle_event+0x4c>
	for (i = 0; i < num_handlers; i++) {
    cef8:	3208      	adds	r2, #8
    cefa:	4293      	cmp	r3, r2
    cefc:	d1f9      	bne.n	cef2 <handle_event+0xe>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    cefe:	4d1c      	ldr	r5, [pc, #112]	; (cf70 <handle_event+0x8c>)
    cf00:	682b      	ldr	r3, [r5, #0]
    cf02:	f013 0f06 	tst.w	r3, #6
    cf06:	d02d      	beq.n	cf64 <handle_event+0x80>
    cf08:	8986      	ldrh	r6, [r0, #12]
    cf0a:	6880      	ldr	r0, [r0, #8]
    cf0c:	4631      	mov	r1, r6
    cf0e:	f7ff fdeb 	bl	cae8 <bt_hex_real>
    cf12:	4b18      	ldr	r3, [pc, #96]	; (cf74 <handle_event+0x90>)
    cf14:	9302      	str	r3, [sp, #8]
    cf16:	4b18      	ldr	r3, [pc, #96]	; (cf78 <handle_event+0x94>)
    cf18:	9301      	str	r3, [sp, #4]
    cf1a:	2300      	movs	r3, #0
    cf1c:	e9cd 6004 	strd	r6, r0, [sp, #16]
    cf20:	9403      	str	r4, [sp, #12]
    cf22:	9300      	str	r3, [sp, #0]
    cf24:	2202      	movs	r2, #2
    cf26:	4629      	mov	r1, r5
    cf28:	4618      	mov	r0, r3
    cf2a:	f01b fd45 	bl	289b8 <z_log_msg2_runtime_create.constprop.0>
    cf2e:	e019      	b.n	cf64 <handle_event+0x80>
		if (buf->len < handler->min_len) {
    cf30:	8983      	ldrh	r3, [r0, #12]
    cf32:	7851      	ldrb	r1, [r2, #1]
    cf34:	4299      	cmp	r1, r3
    cf36:	d918      	bls.n	cf6a <handle_event+0x86>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    cf38:	480d      	ldr	r0, [pc, #52]	; (cf70 <handle_event+0x8c>)
    cf3a:	6802      	ldr	r2, [r0, #0]
    cf3c:	0752      	lsls	r2, r2, #29
    cf3e:	d011      	beq.n	cf64 <handle_event+0x80>
    cf40:	466d      	mov	r5, sp
    cf42:	b088      	sub	sp, #32
    cf44:	490d      	ldr	r1, [pc, #52]	; (cf7c <handle_event+0x98>)
    cf46:	910a      	str	r1, [sp, #40]	; 0x28
    cf48:	490a      	ldr	r1, [pc, #40]	; (cf74 <handle_event+0x90>)
    cf4a:	940d      	str	r4, [sp, #52]	; 0x34
    cf4c:	aa06      	add	r2, sp, #24
    cf4e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cf52:	2305      	movs	r3, #5
    cf54:	f842 3f0c 	str.w	r3, [r2, #12]!
    cf58:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cf5c:	607b      	str	r3, [r7, #4]
    cf5e:	f01b fd28 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    cf62:	46ad      	mov	sp, r5
}
    cf64:	370c      	adds	r7, #12
    cf66:	46bd      	mov	sp, r7
    cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		handler->handler(buf);
    cf6a:	6853      	ldr	r3, [r2, #4]
    cf6c:	4798      	blx	r3
		return;
    cf6e:	e7f9      	b.n	cf64 <handle_event+0x80>
    cf70:	20000994 	.word	0x20000994
    cf74:	000307e2 	.word	0x000307e2
    cf78:	00030287 	.word	0x00030287
    cf7c:	00030261 	.word	0x00030261

0000cf80 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    cf80:	b510      	push	{r4, lr}
    cf82:	2101      	movs	r1, #1
    cf84:	4604      	mov	r4, r0
    cf86:	3008      	adds	r0, #8
    cf88:	f01c ffca 	bl	29f20 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    cf8c:	4621      	mov	r1, r4
    cf8e:	4a03      	ldr	r2, [pc, #12]	; (cf9c <hci_le_meta_event+0x1c>)
    cf90:	7800      	ldrb	r0, [r0, #0]
}
    cf92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    cf96:	2308      	movs	r3, #8
    cf98:	f7ff bfa4 	b.w	cee4 <handle_event>
    cf9c:	0002c5f8 	.word	0x0002c5f8

0000cfa0 <hci_cmd_done>:
{
    cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfa4:	b083      	sub	sp, #12
    cfa6:	4680      	mov	r8, r0
    cfa8:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    cfaa:	7990      	ldrb	r0, [r2, #6]
    cfac:	f8df 9160 	ldr.w	r9, [pc, #352]	; d110 <hci_cmd_done+0x170>
{
    cfb0:	460e      	mov	r6, r1
    cfb2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    cfb4:	f012 f8e0 	bl	1f178 <net_buf_pool_get>
    cfb8:	4581      	cmp	r9, r0
    cfba:	d027      	beq.n	d00c <hci_cmd_done+0x6c>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    cfbc:	4e55      	ldr	r6, [pc, #340]	; (d114 <hci_cmd_done+0x174>)
    cfbe:	6833      	ldr	r3, [r6, #0]
    cfc0:	f013 0f06 	tst.w	r3, #6
    cfc4:	d01e      	beq.n	d004 <hci_cmd_done+0x64>
    cfc6:	79a0      	ldrb	r0, [r4, #6]
    cfc8:	f012 f8d6 	bl	1f178 <net_buf_pool_get>
    cfcc:	46ea      	mov	sl, sp
    cfce:	b08a      	sub	sp, #40	; 0x28
    cfd0:	466d      	mov	r5, sp
    cfd2:	4b51      	ldr	r3, [pc, #324]	; (d118 <hci_cmd_done+0x178>)
    cfd4:	612b      	str	r3, [r5, #16]
    cfd6:	4b51      	ldr	r3, [pc, #324]	; (d11c <hci_cmd_done+0x17c>)
    cfd8:	79a0      	ldrb	r0, [r4, #6]
    cfda:	61e8      	str	r0, [r5, #28]
    cfdc:	e9c5 3805 	strd	r3, r8, [r5, #20]
    cfe0:	f012 f8ca 	bl	1f178 <net_buf_pool_get>
    cfe4:	79a0      	ldrb	r0, [r4, #6]
    cfe6:	f012 f8c7 	bl	1f178 <net_buf_pool_get>
    cfea:	462a      	mov	r2, r5
    cfec:	2307      	movs	r3, #7
    cfee:	e9c5 0908 	strd	r0, r9, [r5, #32]
    cff2:	f842 3f0c 	str.w	r3, [r2, #12]!
    cff6:	607b      	str	r3, [r7, #4]
    cff8:	f44f 5162 	mov.w	r1, #14464	; 0x3880
    cffc:	4630      	mov	r0, r6
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    cffe:	f01b fcd8 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d002:	46d5      	mov	sp, sl
}
    d004:	370c      	adds	r7, #12
    d006:	46bd      	mov	sp, r7
    d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (cmd(buf)->opcode != opcode) {
    d00c:	4620      	mov	r0, r4
    d00e:	f012 f8bb 	bl	1f188 <net_buf_id>
    d012:	4d43      	ldr	r5, [pc, #268]	; (d120 <hci_cmd_done+0x180>)
    d014:	f04f 0b0c 	mov.w	fp, #12
    d018:	fb0b 5000 	mla	r0, fp, r0, r5
    d01c:	8843      	ldrh	r3, [r0, #2]
    d01e:	4543      	cmp	r3, r8
    d020:	d024      	beq.n	d06c <hci_cmd_done+0xcc>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    d022:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d114 <hci_cmd_done+0x174>
    d026:	f8d9 3000 	ldr.w	r3, [r9]
    d02a:	f013 0f06 	tst.w	r3, #6
    d02e:	d0e9      	beq.n	d004 <hci_cmd_done+0x64>
    d030:	4620      	mov	r0, r4
    d032:	f012 f8a9 	bl	1f188 <net_buf_id>
    d036:	46ea      	mov	sl, sp
    d038:	b088      	sub	sp, #32
    d03a:	466e      	mov	r6, sp
    d03c:	4b39      	ldr	r3, [pc, #228]	; (d124 <hci_cmd_done+0x184>)
    d03e:	6133      	str	r3, [r6, #16]
    d040:	4b36      	ldr	r3, [pc, #216]	; (d11c <hci_cmd_done+0x17c>)
    d042:	4620      	mov	r0, r4
    d044:	e9c6 3805 	strd	r3, r8, [r6, #20]
    d048:	f012 f89e 	bl	1f188 <net_buf_id>
    d04c:	4620      	mov	r0, r4
    d04e:	f012 f89b 	bl	1f188 <net_buf_id>
    d052:	fb0b 5500 	mla	r5, fp, r0, r5
    d056:	4632      	mov	r2, r6
    d058:	886b      	ldrh	r3, [r5, #2]
    d05a:	61f3      	str	r3, [r6, #28]
    d05c:	2305      	movs	r3, #5
    d05e:	f842 3f0c 	str.w	r3, [r2, #12]!
    d062:	607b      	str	r3, [r7, #4]
    d064:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    d068:	4648      	mov	r0, r9
    d06a:	e7c8      	b.n	cffe <hci_cmd_done+0x5e>
	if (bt_dev.sent_cmd) {
    d06c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d128 <hci_cmd_done+0x188>
    d070:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
    d074:	b120      	cbz	r0, d080 <hci_cmd_done+0xe0>
		net_buf_unref(bt_dev.sent_cmd);
    d076:	f012 f943 	bl	1f300 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d07a:	2300      	movs	r3, #0
    d07c:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    d080:	4620      	mov	r0, r4
    d082:	f012 f881 	bl	1f188 <net_buf_id>
    d086:	f04f 080c 	mov.w	r8, #12
    d08a:	fb08 5000 	mla	r0, r8, r0, r5
    d08e:	6843      	ldr	r3, [r0, #4]
    d090:	b1b3      	cbz	r3, d0c0 <hci_cmd_done+0x120>
    d092:	b9ae      	cbnz	r6, d0c0 <hci_cmd_done+0x120>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    d094:	4620      	mov	r0, r4
    d096:	f012 f877 	bl	1f188 <net_buf_id>
    d09a:	fb08 5000 	mla	r0, r8, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d09e:	2301      	movs	r3, #1
    d0a0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d0a4:	e9dc 2000 	ldrd	r2, r0, [ip]
    d0a8:	f000 011f 	and.w	r1, r0, #31
    d0ac:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
    d0b0:	f89c 3008 	ldrb.w	r3, [ip, #8]
    d0b4:	0940      	lsrs	r0, r0, #5
    d0b6:	b1e3      	cbz	r3, d0f2 <hci_cmd_done+0x152>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d0b8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    d0bc:	f01b fc6a 	bl	28994 <atomic_or>
	if (cmd(buf)->sync) {
    d0c0:	4620      	mov	r0, r4
    d0c2:	f012 f861 	bl	1f188 <net_buf_id>
    d0c6:	f04f 080c 	mov.w	r8, #12
    d0ca:	fb08 5000 	mla	r0, r8, r0, r5
    d0ce:	6883      	ldr	r3, [r0, #8]
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d097      	beq.n	d004 <hci_cmd_done+0x64>
		cmd(buf)->status = status;
    d0d4:	4620      	mov	r0, r4
    d0d6:	f012 f857 	bl	1f188 <net_buf_id>
    d0da:	fb08 f000 	mul.w	r0, r8, r0
    d0de:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    d0e0:	4620      	mov	r0, r4
    d0e2:	f012 f851 	bl	1f188 <net_buf_id>
    d0e6:	fb08 5500 	mla	r5, r8, r0, r5
    d0ea:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    d0ec:	f017 fc4e 	bl	2498c <z_impl_k_sem_give>
}
    d0f0:	e788      	b.n	d004 <hci_cmd_done+0x64>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d0f2:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d0f4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    d0f8:	f3bf 8f5b 	dmb	ish
    d0fc:	e852 1f00 	ldrex	r1, [r2]
    d100:	4019      	ands	r1, r3
    d102:	e842 1000 	strex	r0, r1, [r2]
    d106:	2800      	cmp	r0, #0
    d108:	d1f8      	bne.n	d0fc <hci_cmd_done+0x15c>
    d10a:	f3bf 8f5b 	dmb	ish
    d10e:	e7d7      	b.n	d0c0 <hci_cmd_done+0x120>
    d110:	20000c9c 	.word	0x20000c9c
    d114:	20000994 	.word	0x20000994
    d118:	000302ad 	.word	0x000302ad
    d11c:	000307ef 	.word	0x000307ef
    d120:	20003fc4 	.word	0x20003fc4
    d124:	000302e6 	.word	0x000302e6
    d128:	20000000 	.word	0x20000000

0000d12c <hci_cmd_status>:
{
    d12c:	b538      	push	{r3, r4, r5, lr}
    d12e:	2104      	movs	r1, #4
    d130:	4604      	mov	r4, r0
    d132:	3008      	adds	r0, #8
    d134:	f01c fef4 	bl	29f20 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    d138:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    d13a:	7801      	ldrb	r1, [r0, #0]
    d13c:	8840      	ldrh	r0, [r0, #2]
    d13e:	4622      	mov	r2, r4
    d140:	f7ff ff2e 	bl	cfa0 <hci_cmd_done>
	if (ncmd) {
    d144:	b125      	cbz	r5, d150 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    d146:	4803      	ldr	r0, [pc, #12]	; (d154 <hci_cmd_status+0x28>)
}
    d148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d14c:	f017 bc1e 	b.w	2498c <z_impl_k_sem_give>
    d150:	bd38      	pop	{r3, r4, r5, pc}
    d152:	bf00      	nop
    d154:	20000118 	.word	0x20000118

0000d158 <hci_cmd_complete>:
{
    d158:	b538      	push	{r3, r4, r5, lr}
    d15a:	2103      	movs	r1, #3
    d15c:	4604      	mov	r4, r0
    d15e:	3008      	adds	r0, #8
    d160:	f01c fede 	bl	29f20 <net_buf_simple_pull_mem>
	status = buf->data[0];
    d164:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    d166:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    d168:	7819      	ldrb	r1, [r3, #0]
    d16a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    d16e:	4622      	mov	r2, r4
    d170:	f7ff ff16 	bl	cfa0 <hci_cmd_done>
	if (ncmd) {
    d174:	b125      	cbz	r5, d180 <hci_cmd_complete+0x28>
    d176:	4803      	ldr	r0, [pc, #12]	; (d184 <hci_cmd_complete+0x2c>)
}
    d178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d17c:	f017 bc06 	b.w	2498c <z_impl_k_sem_give>
    d180:	bd38      	pop	{r3, r4, r5, pc}
    d182:	bf00      	nop
    d184:	20000118 	.word	0x20000118

0000d188 <hci_num_completed_packets>:
{
    d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d18c:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < evt->num_handles; i++) {
    d18e:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    d190:	f8d0 9008 	ldr.w	r9, [r0, #8]
				BT_ERR("packets count mismatch");
    d194:	f8df 8114 	ldr.w	r8, [pc, #276]	; d2ac <hci_num_completed_packets+0x124>
{
    d198:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
    d19a:	46aa      	mov	sl, r5
	for (i = 0; i < evt->num_handles; i++) {
    d19c:	f899 3000 	ldrb.w	r3, [r9]
    d1a0:	429d      	cmp	r5, r3
    d1a2:	db03      	blt.n	d1ac <hci_num_completed_packets+0x24>
}
    d1a4:	3724      	adds	r7, #36	; 0x24
    d1a6:	46bd      	mov	sp, r7
    d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    d1ac:	eb09 0385 	add.w	r3, r9, r5, lsl #2
    d1b0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    d1b4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    d1b8:	4658      	mov	r0, fp
    d1ba:	f002 fc55 	bl	fa68 <bt_conn_lookup_handle>
		if (!conn) {
    d1be:	4604      	mov	r4, r0
    d1c0:	b1d8      	cbz	r0, d1fa <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    d1c2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    d1c6:	2e00      	cmp	r6, #0
    d1c8:	d04e      	beq.n	d268 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
    d1ca:	f04f 0320 	mov.w	r3, #32
    d1ce:	f3ef 8211 	mrs	r2, BASEPRI
    d1d2:	f383 8812 	msr	BASEPRI_MAX, r3
    d1d6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    d1da:	69e3      	ldr	r3, [r4, #28]
    d1dc:	b32b      	cbz	r3, d22a <hci_num_completed_packets+0xa2>
				conn->pending_no_cb--;
    d1de:	3b01      	subs	r3, #1
    d1e0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    d1e2:	f382 8811 	msr	BASEPRI, r2
    d1e6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    d1ea:	4620      	mov	r0, r4
    d1ec:	f002 fac6 	bl	f77c <bt_conn_get_pkts>
    d1f0:	3e01      	subs	r6, #1
    d1f2:	f017 fbcb 	bl	2498c <z_impl_k_sem_give>
    d1f6:	b2b6      	uxth	r6, r6
    d1f8:	e7e5      	b.n	d1c6 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    d1fa:	f8d8 3000 	ldr.w	r3, [r8]
    d1fe:	075a      	lsls	r2, r3, #29
    d200:	d011      	beq.n	d226 <hci_num_completed_packets+0x9e>
    d202:	466c      	mov	r4, sp
    d204:	b088      	sub	sp, #32
    d206:	466a      	mov	r2, sp
    d208:	4b29      	ldr	r3, [pc, #164]	; (d2b0 <hci_num_completed_packets+0x128>)
    d20a:	6113      	str	r3, [r2, #16]
    d20c:	4b29      	ldr	r3, [pc, #164]	; (d2b4 <hci_num_completed_packets+0x12c>)
    d20e:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    d212:	2304      	movs	r3, #4
    d214:	f842 3f0c 	str.w	r3, [r2, #12]!
    d218:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d21c:	4640      	mov	r0, r8
    d21e:	60bb      	str	r3, [r7, #8]
    d220:	f01b fbc7 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d224:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    d226:	3501      	adds	r5, #1
    d228:	e7b8      	b.n	d19c <hci_num_completed_packets+0x14>
	return list->head;
    d22a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    d22c:	b12b      	cbz	r3, d23a <hci_num_completed_packets+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d22e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    d230:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    d232:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d234:	428b      	cmp	r3, r1
	list->tail = node;
    d236:	bf08      	it	eq
    d238:	61a0      	streq	r0, [r4, #24]
    d23a:	f382 8811 	msr	BASEPRI, r2
    d23e:	f3bf 8f6f 	isb	sy
			if (!node) {
    d242:	b9ab      	cbnz	r3, d270 <hci_num_completed_packets+0xe8>
				BT_ERR("packets count mismatch");
    d244:	f8d8 3000 	ldr.w	r3, [r8]
    d248:	075b      	lsls	r3, r3, #29
    d24a:	d00d      	beq.n	d268 <hci_num_completed_packets+0xe0>
    d24c:	4b1a      	ldr	r3, [pc, #104]	; (d2b8 <hci_num_completed_packets+0x130>)
    d24e:	61bb      	str	r3, [r7, #24]
    d250:	4b18      	ldr	r3, [pc, #96]	; (d2b4 <hci_num_completed_packets+0x12c>)
    d252:	61fb      	str	r3, [r7, #28]
    d254:	f107 0214 	add.w	r2, r7, #20
    d258:	2303      	movs	r3, #3
    d25a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d25e:	4640      	mov	r0, r8
    d260:	607b      	str	r3, [r7, #4]
    d262:	617b      	str	r3, [r7, #20]
    d264:	f01b fba5 	bl	289b2 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
    d268:	4620      	mov	r0, r4
    d26a:	f01b fe9e 	bl	28faa <bt_conn_unref>
    d26e:	e7da      	b.n	d226 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
    d270:	f04f 0220 	mov.w	r2, #32
    d274:	f3ef 8111 	mrs	r1, BASEPRI
    d278:	f382 8812 	msr	BASEPRI_MAX, r2
    d27c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    d280:	68da      	ldr	r2, [r3, #12]
    d282:	61e2      	str	r2, [r4, #28]
	return list->tail;
    d284:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    d286:	f8c3 a00c 	str.w	sl, [r3, #12]
	parent->next = child;
    d28a:	f8c3 a000 	str.w	sl, [r3]
Z_GENLIST_APPEND(slist, snode)
    d28e:	b94a      	cbnz	r2, d2a4 <hci_num_completed_packets+0x11c>
	list->head = node;
    d290:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    d294:	f381 8811 	msr	BASEPRI, r1
    d298:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    d29c:	4658      	mov	r0, fp
    d29e:	f017 fce1 	bl	24c64 <k_work_submit>
    d2a2:	e7a2      	b.n	d1ea <hci_num_completed_packets+0x62>
	parent->next = child;
    d2a4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    d2a6:	6263      	str	r3, [r4, #36]	; 0x24
}
    d2a8:	e7f4      	b.n	d294 <hci_num_completed_packets+0x10c>
    d2aa:	bf00      	nop
    d2ac:	20000994 	.word	0x20000994
    d2b0:	0003031d 	.word	0x0003031d
    d2b4:	0003081b 	.word	0x0003081b
    d2b8:	0003033d 	.word	0x0003033d

0000d2bc <hci_disconn_complete>:
{
    d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c0:	b082      	sub	sp, #8
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    d2c2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    d2c4:	7835      	ldrb	r5, [r6, #0]
{
    d2c6:	af00      	add	r7, sp, #0
	if (evt->status) {
    d2c8:	b9dd      	cbnz	r5, d302 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d2ca:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    d2ce:	4640      	mov	r0, r8
    d2d0:	f002 fbca 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    d2d4:	4604      	mov	r4, r0
    d2d6:	b9c0      	cbnz	r0, d30a <hci_disconn_complete+0x4e>
		BT_ERR("Unable to look up conn with handle %u", handle);
    d2d8:	4819      	ldr	r0, [pc, #100]	; (d340 <hci_disconn_complete+0x84>)
    d2da:	6803      	ldr	r3, [r0, #0]
    d2dc:	075a      	lsls	r2, r3, #29
    d2de:	d010      	beq.n	d302 <hci_disconn_complete+0x46>
    d2e0:	466c      	mov	r4, sp
    d2e2:	b088      	sub	sp, #32
    d2e4:	466a      	mov	r2, sp
    d2e6:	4b17      	ldr	r3, [pc, #92]	; (d344 <hci_disconn_complete+0x88>)
    d2e8:	6113      	str	r3, [r2, #16]
    d2ea:	4b17      	ldr	r3, [pc, #92]	; (d348 <hci_disconn_complete+0x8c>)
    d2ec:	e9c2 3805 	strd	r3, r8, [r2, #20]
    d2f0:	2304      	movs	r3, #4
    d2f2:	f842 3f0c 	str.w	r3, [r2, #12]!
    d2f6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d2fa:	607b      	str	r3, [r7, #4]
    d2fc:	f01b fb59 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d300:	46a5      	mov	sp, r4
}
    d302:	3708      	adds	r7, #8
    d304:	46bd      	mov	sp, r7
    d306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    d30a:	78f3      	ldrb	r3, [r6, #3]
    d30c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d30e:	4629      	mov	r1, r5
    d310:	f002 fbb2 	bl	fa78 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    d314:	78a3      	ldrb	r3, [r4, #2]
    d316:	2b01      	cmp	r3, #1
    d318:	d003      	beq.n	d322 <hci_disconn_complete+0x66>
	bt_conn_unref(conn);
    d31a:	4620      	mov	r0, r4
    d31c:	f01b fe45 	bl	28faa <bt_conn_unref>
    d320:	e7ef      	b.n	d302 <hci_disconn_complete+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d322:	f3bf 8f5b 	dmb	ish
    d326:	6863      	ldr	r3, [r4, #4]
    d328:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    d32c:	07db      	lsls	r3, r3, #31
    d32e:	d5f4      	bpl.n	d31a <hci_disconn_complete+0x5e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    d330:	4620      	mov	r0, r4
    d332:	2102      	movs	r1, #2
    d334:	f002 fba0 	bl	fa78 <bt_conn_set_state>
		bt_le_scan_update(false);
    d338:	4628      	mov	r0, r5
    d33a:	f001 ff85 	bl	f248 <bt_le_scan_update>
    d33e:	e7ec      	b.n	d31a <hci_disconn_complete+0x5e>
    d340:	20000994 	.word	0x20000994
    d344:	00030358 	.word	0x00030358
    d348:	000307aa 	.word	0x000307aa

0000d34c <bt_hci_cmd_state_set_init>:
{
    d34c:	b510      	push	{r4, lr}
	state->bit = bit;
    d34e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    d352:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d356:	720b      	strb	r3, [r1, #8]
{
    d358:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    d35a:	f011 ff15 	bl	1f188 <net_buf_id>
    d35e:	4b03      	ldr	r3, [pc, #12]	; (d36c <bt_hci_cmd_state_set_init+0x20>)
    d360:	220c      	movs	r2, #12
    d362:	fb02 3300 	mla	r3, r2, r0, r3
    d366:	605c      	str	r4, [r3, #4]
}
    d368:	bd10      	pop	{r4, pc}
    d36a:	bf00      	nop
    d36c:	20003fc4 	.word	0x20003fc4

0000d370 <bt_hci_cmd_create>:
{
    d370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    d374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d37c:	4606      	mov	r6, r0
    d37e:	4817      	ldr	r0, [pc, #92]	; (d3dc <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    d380:	4d17      	ldr	r5, [pc, #92]	; (d3e0 <bt_hci_cmd_create+0x70>)
{
    d382:	460f      	mov	r7, r1
    d384:	f01c fd43 	bl	29e0e <net_buf_alloc_fixed>
    d388:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    d38a:	f100 0a08 	add.w	sl, r0, #8
    d38e:	2100      	movs	r1, #0
    d390:	f04f 0800 	mov.w	r8, #0
    d394:	4650      	mov	r0, sl
    d396:	f01c fd59 	bl	29e4c <net_buf_simple_reserve>
    d39a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    d39e:	4620      	mov	r0, r4
    d3a0:	f011 fef2 	bl	1f188 <net_buf_id>
    d3a4:	f04f 090c 	mov.w	r9, #12
    d3a8:	fb09 5000 	mla	r0, r9, r0, r5
    d3ac:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    d3ae:	4620      	mov	r0, r4
    d3b0:	f011 feea 	bl	1f188 <net_buf_id>
    d3b4:	fb09 5000 	mla	r0, r9, r0, r5
    d3b8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    d3bc:	4620      	mov	r0, r4
    d3be:	f011 fee3 	bl	1f188 <net_buf_id>
    d3c2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    d3c6:	2103      	movs	r1, #3
    d3c8:	f8c5 8004 	str.w	r8, [r5, #4]
    d3cc:	4650      	mov	r0, sl
    d3ce:	f01c fd80 	bl	29ed2 <net_buf_simple_add>
	hdr->param_len = param_len;
    d3d2:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    d3d4:	8006      	strh	r6, [r0, #0]
}
    d3d6:	4620      	mov	r0, r4
    d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3dc:	20000c9c 	.word	0x20000c9c
    d3e0:	20003fc4 	.word	0x20003fc4

0000d3e4 <bt_hci_cmd_send_sync>:
{
    d3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d3e8:	b089      	sub	sp, #36	; 0x24
    d3ea:	4680      	mov	r8, r0
    d3ec:	af00      	add	r7, sp, #0
    d3ee:	4615      	mov	r5, r2
	if (!buf) {
    d3f0:	460c      	mov	r4, r1
    d3f2:	b921      	cbnz	r1, d3fe <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    d3f4:	f7ff ffbc 	bl	d370 <bt_hci_cmd_create>
		if (!buf) {
    d3f8:	4604      	mov	r4, r0
    d3fa:	2800      	cmp	r0, #0
    d3fc:	d064      	beq.n	d4c8 <bt_hci_cmd_send_sync+0xe4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    d3fe:	f107 0608 	add.w	r6, r7, #8
    d402:	2201      	movs	r2, #1
    d404:	2100      	movs	r1, #0
    d406:	4630      	mov	r0, r6
    d408:	f01d fc92 	bl	2ad30 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    d40c:	4620      	mov	r0, r4
    d40e:	f011 febb 	bl	1f188 <net_buf_id>
    d412:	f8df 90bc 	ldr.w	r9, [pc, #188]	; d4d0 <bt_hci_cmd_send_sync+0xec>
    d416:	230c      	movs	r3, #12
    d418:	fb03 9000 	mla	r0, r3, r0, r9
    d41c:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    d41e:	4620      	mov	r0, r4
    d420:	f01c fd25 	bl	29e6e <net_buf_ref>
    d424:	4601      	mov	r1, r0
    d426:	482b      	ldr	r0, [pc, #172]	; (d4d4 <bt_hci_cmd_send_sync+0xf0>)
    d428:	f01c fd14 	bl	29e54 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    d42c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    d430:	4630      	mov	r0, r6
    d432:	2300      	movs	r3, #0
    d434:	f017 fad0 	bl	249d8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    d438:	4606      	mov	r6, r0
    d43a:	b180      	cbz	r0, d45e <bt_hci_cmd_send_sync+0x7a>
    d43c:	4a26      	ldr	r2, [pc, #152]	; (d4d8 <bt_hci_cmd_send_sync+0xf4>)
    d43e:	4927      	ldr	r1, [pc, #156]	; (d4dc <bt_hci_cmd_send_sync+0xf8>)
    d440:	4827      	ldr	r0, [pc, #156]	; (d4e0 <bt_hci_cmd_send_sync+0xfc>)
    d442:	f240 1331 	movw	r3, #305	; 0x131
    d446:	f018 fb5d 	bl	25b04 <printk>
    d44a:	4826      	ldr	r0, [pc, #152]	; (d4e4 <bt_hci_cmd_send_sync+0x100>)
    d44c:	4631      	mov	r1, r6
    d44e:	f018 fb59 	bl	25b04 <printk>
    d452:	4040      	eors	r0, r0
    d454:	f380 8811 	msr	BASEPRI, r0
    d458:	f04f 0003 	mov.w	r0, #3
    d45c:	df02      	svc	2
	status = cmd(buf)->status;
    d45e:	4620      	mov	r0, r4
    d460:	f011 fe92 	bl	1f188 <net_buf_id>
    d464:	230c      	movs	r3, #12
    d466:	4358      	muls	r0, r3
    d468:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    d46c:	b31e      	cbz	r6, d4b6 <bt_hci_cmd_send_sync+0xd2>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    d46e:	481e      	ldr	r0, [pc, #120]	; (d4e8 <bt_hci_cmd_send_sync+0x104>)
    d470:	6803      	ldr	r3, [r0, #0]
    d472:	f013 0f06 	tst.w	r3, #6
    d476:	d011      	beq.n	d49c <bt_hci_cmd_send_sync+0xb8>
    d478:	466d      	mov	r5, sp
    d47a:	b088      	sub	sp, #32
    d47c:	466a      	mov	r2, sp
    d47e:	4b1b      	ldr	r3, [pc, #108]	; (d4ec <bt_hci_cmd_send_sync+0x108>)
    d480:	6113      	str	r3, [r2, #16]
    d482:	4b1b      	ldr	r3, [pc, #108]	; (d4f0 <bt_hci_cmd_send_sync+0x10c>)
    d484:	61d6      	str	r6, [r2, #28]
    d486:	e9c2 3805 	strd	r3, r8, [r2, #20]
    d48a:	2305      	movs	r3, #5
    d48c:	f842 3f0c 	str.w	r3, [r2, #12]!
    d490:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    d494:	607b      	str	r3, [r7, #4]
    d496:	f01b fa8c 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d49a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    d49c:	4620      	mov	r0, r4
    d49e:	f011 ff2f 	bl	1f300 <net_buf_unref>
			return -EIO;
    d4a2:	2e09      	cmp	r6, #9
    d4a4:	bf0c      	ite	eq
    d4a6:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    d4aa:	f06f 0004 	mvnne.w	r0, #4
}
    d4ae:	3724      	adds	r7, #36	; 0x24
    d4b0:	46bd      	mov	sp, r7
    d4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    d4b6:	b115      	cbz	r5, d4be <bt_hci_cmd_send_sync+0xda>
		*rsp = buf;
    d4b8:	602c      	str	r4, [r5, #0]
	return 0;
    d4ba:	4630      	mov	r0, r6
    d4bc:	e7f7      	b.n	d4ae <bt_hci_cmd_send_sync+0xca>
		net_buf_unref(buf);
    d4be:	4620      	mov	r0, r4
    d4c0:	f011 ff1e 	bl	1f300 <net_buf_unref>
	return 0;
    d4c4:	4628      	mov	r0, r5
    d4c6:	e7f2      	b.n	d4ae <bt_hci_cmd_send_sync+0xca>
			return -ENOBUFS;
    d4c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d4cc:	e7ef      	b.n	d4ae <bt_hci_cmd_send_sync+0xca>
    d4ce:	bf00      	nop
    d4d0:	20003fc4 	.word	0x20003fc4
    d4d4:	20000134 	.word	0x20000134
    d4d8:	00030382 	.word	0x00030382
    d4dc:	000303b6 	.word	0x000303b6
    d4e0:	000303bf 	.word	0x000303bf
    d4e4:	000303dc 	.word	0x000303dc
    d4e8:	20000994 	.word	0x20000994
    d4ec:	000303fc 	.word	0x000303fc
    d4f0:	0003087c 	.word	0x0003087c

0000d4f4 <hci_le_read_max_data_len>:
{
    d4f4:	b570      	push	{r4, r5, r6, lr}
    d4f6:	b088      	sub	sp, #32
    d4f8:	4606      	mov	r6, r0
    d4fa:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    d4fc:	466a      	mov	r2, sp
    d4fe:	2100      	movs	r1, #0
    d500:	f242 002f 	movw	r0, #8239	; 0x202f
    d504:	f7ff ff6e 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    d508:	4604      	mov	r4, r0
    d50a:	b190      	cbz	r0, d532 <hci_le_read_max_data_len+0x3e>
		BT_ERR("Failed to read DLE max data len");
    d50c:	480e      	ldr	r0, [pc, #56]	; (d548 <hci_le_read_max_data_len+0x54>)
    d50e:	6803      	ldr	r3, [r0, #0]
    d510:	075b      	lsls	r3, r3, #29
    d512:	d00b      	beq.n	d52c <hci_le_read_max_data_len+0x38>
    d514:	4b0d      	ldr	r3, [pc, #52]	; (d54c <hci_le_read_max_data_len+0x58>)
    d516:	9306      	str	r3, [sp, #24]
    d518:	4b0d      	ldr	r3, [pc, #52]	; (d550 <hci_le_read_max_data_len+0x5c>)
    d51a:	9307      	str	r3, [sp, #28]
    d51c:	aa05      	add	r2, sp, #20
    d51e:	2303      	movs	r3, #3
    d520:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d524:	9301      	str	r3, [sp, #4]
    d526:	9305      	str	r3, [sp, #20]
    d528:	f01b fa43 	bl	289b2 <z_log_msg2_static_create.constprop.0>
}
    d52c:	4620      	mov	r0, r4
    d52e:	b008      	add	sp, #32
    d530:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    d532:	9800      	ldr	r0, [sp, #0]
    d534:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    d536:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    d53a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    d53c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    d540:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    d542:	f011 fedd 	bl	1f300 <net_buf_unref>
	return 0;
    d546:	e7f1      	b.n	d52c <hci_le_read_max_data_len+0x38>
    d548:	20000994 	.word	0x20000994
    d54c:	0003041c 	.word	0x0003041c
    d550:	000308ad 	.word	0x000308ad

0000d554 <bt_le_create_conn_legacy>:
{
    d554:	b5f0      	push	{r4, r5, r6, r7, lr}
    d556:	b087      	sub	sp, #28
    d558:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    d55a:	f10d 010b 	add.w	r1, sp, #11
    d55e:	2000      	movs	r0, #0
    d560:	f001 fa6e 	bl	ea40 <bt_id_set_create_conn_own_addr>
	if (err) {
    d564:	4604      	mov	r4, r0
    d566:	2800      	cmp	r0, #0
    d568:	d13c      	bne.n	d5e4 <bt_le_create_conn_legacy+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    d56a:	2119      	movs	r1, #25
    d56c:	f242 000d 	movw	r0, #8205	; 0x200d
    d570:	f7ff fefe 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    d574:	4607      	mov	r7, r0
    d576:	b3c0      	cbz	r0, d5ea <bt_le_create_conn_legacy+0x96>
    d578:	2119      	movs	r1, #25
    d57a:	3008      	adds	r0, #8
    d57c:	f01c fca9 	bl	29ed2 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    d580:	2219      	movs	r2, #25
    d582:	4605      	mov	r5, r0
    d584:	4621      	mov	r1, r4
    d586:	f01b f91e 	bl	287c6 <memset>
	cp->own_addr_type = own_addr_type;
    d58a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d58e:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    d590:	f106 0188 	add.w	r1, r6, #136	; 0x88
    d594:	1d68      	adds	r0, r5, #5
    d596:	f01b f9fa 	bl	2898e <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    d59a:	4a15      	ldr	r2, [pc, #84]	; (d5f0 <bt_le_create_conn_legacy+0x9c>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    d59c:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    d59e:	8993      	ldrh	r3, [r2, #12]
    d5a0:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    d5a2:	89d3      	ldrh	r3, [r2, #14]
    d5a4:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    d5a6:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    d5aa:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    d5ae:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    d5b2:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    d5b6:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    d5ba:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    d5be:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    d5c2:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    d5c6:	2301      	movs	r3, #1
    d5c8:	9300      	str	r3, [sp, #0]
    d5ca:	32cc      	adds	r2, #204	; 0xcc
    d5cc:	230b      	movs	r3, #11
    d5ce:	a903      	add	r1, sp, #12
    d5d0:	4638      	mov	r0, r7
    d5d2:	f7ff febb 	bl	d34c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    d5d6:	4622      	mov	r2, r4
    d5d8:	4639      	mov	r1, r7
    d5da:	f242 000d 	movw	r0, #8205	; 0x200d
    d5de:	f7ff ff01 	bl	d3e4 <bt_hci_cmd_send_sync>
    d5e2:	4604      	mov	r4, r0
}
    d5e4:	4620      	mov	r0, r4
    d5e6:	b007      	add	sp, #28
    d5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    d5ea:	f06f 0468 	mvn.w	r4, #104	; 0x68
    d5ee:	e7f9      	b.n	d5e4 <bt_le_create_conn_legacy+0x90>
    d5f0:	20000000 	.word	0x20000000

0000d5f4 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    d5f4:	4b02      	ldr	r3, [pc, #8]	; (d600 <bt_send+0xc>)
    d5f6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    d5fa:	691b      	ldr	r3, [r3, #16]
    d5fc:	4718      	bx	r3
    d5fe:	bf00      	nop
    d600:	20000000 	.word	0x20000000

0000d604 <bt_hci_cmd_send>:
{
    d604:	b5f0      	push	{r4, r5, r6, r7, lr}
    d606:	b083      	sub	sp, #12
    d608:	4605      	mov	r5, r0
    d60a:	af00      	add	r7, sp, #0
	if (!buf) {
    d60c:	460c      	mov	r4, r1
    d60e:	b919      	cbnz	r1, d618 <bt_hci_cmd_send+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    d610:	f7ff feae 	bl	d370 <bt_hci_cmd_create>
		if (!buf) {
    d614:	4604      	mov	r4, r0
    d616:	b350      	cbz	r0, d66e <bt_hci_cmd_send+0x6a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    d618:	f640 4335 	movw	r3, #3125	; 0xc35
    d61c:	429d      	cmp	r5, r3
    d61e:	d120      	bne.n	d662 <bt_hci_cmd_send+0x5e>
		err = bt_send(buf);
    d620:	4620      	mov	r0, r4
    d622:	f7ff ffe7 	bl	d5f4 <bt_send>
		if (err) {
    d626:	4605      	mov	r5, r0
    d628:	b1b8      	cbz	r0, d65a <bt_hci_cmd_send+0x56>
			BT_ERR("Unable to send to driver (err %d)", err);
    d62a:	4812      	ldr	r0, [pc, #72]	; (d674 <bt_hci_cmd_send+0x70>)
    d62c:	6803      	ldr	r3, [r0, #0]
    d62e:	075b      	lsls	r3, r3, #29
    d630:	d010      	beq.n	d654 <bt_hci_cmd_send+0x50>
    d632:	466e      	mov	r6, sp
    d634:	b088      	sub	sp, #32
    d636:	466a      	mov	r2, sp
    d638:	4b0f      	ldr	r3, [pc, #60]	; (d678 <bt_hci_cmd_send+0x74>)
    d63a:	6113      	str	r3, [r2, #16]
    d63c:	4b0f      	ldr	r3, [pc, #60]	; (d67c <bt_hci_cmd_send+0x78>)
    d63e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    d642:	2304      	movs	r3, #4
    d644:	f842 3f0c 	str.w	r3, [r2, #12]!
    d648:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d64c:	607b      	str	r3, [r7, #4]
    d64e:	f01b f9b0 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d652:	46b5      	mov	sp, r6
			net_buf_unref(buf);
    d654:	4620      	mov	r0, r4
    d656:	f011 fe53 	bl	1f300 <net_buf_unref>
}
    d65a:	4628      	mov	r0, r5
    d65c:	370c      	adds	r7, #12
    d65e:	46bd      	mov	sp, r7
    d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    d662:	4807      	ldr	r0, [pc, #28]	; (d680 <bt_hci_cmd_send+0x7c>)
    d664:	4621      	mov	r1, r4
    d666:	f01c fbf5 	bl	29e54 <net_buf_put>
	return 0;
    d66a:	2500      	movs	r5, #0
    d66c:	e7f5      	b.n	d65a <bt_hci_cmd_send+0x56>
			return -ENOBUFS;
    d66e:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d672:	e7f2      	b.n	d65a <bt_hci_cmd_send+0x56>
    d674:	20000994 	.word	0x20000994
    d678:	00030440 	.word	0x00030440
    d67c:	00030891 	.word	0x00030891
    d680:	20000134 	.word	0x20000134

0000d684 <conn_auto_initiate>:
{
    d684:	b5f0      	push	{r4, r5, r6, r7, lr}
    d686:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
    d688:	7a83      	ldrb	r3, [r0, #10]
    d68a:	2b07      	cmp	r3, #7
{
    d68c:	af02      	add	r7, sp, #8
    d68e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    d690:	d121      	bne.n	d6d6 <conn_auto_initiate+0x52>
    d692:	f3bf 8f5b 	dmb	ish
    d696:	6843      	ldr	r3, [r0, #4]
    d698:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    d69c:	0499      	lsls	r1, r3, #18
    d69e:	f100 0604 	add.w	r6, r0, #4
    d6a2:	d41b      	bmi.n	d6dc <conn_auto_initiate+0x58>
    d6a4:	78c3      	ldrb	r3, [r0, #3]
    d6a6:	b123      	cbz	r3, d6b2 <conn_auto_initiate+0x2e>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    d6a8:	4b3b      	ldr	r3, [pc, #236]	; (d798 <conn_auto_initiate+0x114>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    d6aa:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    d6ae:	071a      	lsls	r2, r3, #28
    d6b0:	d514      	bpl.n	d6dc <conn_auto_initiate+0x58>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    d6b2:	2102      	movs	r1, #2
    d6b4:	f242 0016 	movw	r0, #8214	; 0x2016
    d6b8:	f7ff fe5a 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    d6bc:	4605      	mov	r5, r0
    d6be:	b168      	cbz	r0, d6dc <conn_auto_initiate+0x58>
    d6c0:	2102      	movs	r1, #2
    d6c2:	3008      	adds	r0, #8
    d6c4:	f01c fc05 	bl	29ed2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    d6c8:	8823      	ldrh	r3, [r4, #0]
    d6ca:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    d6cc:	4629      	mov	r1, r5
    d6ce:	f242 0016 	movw	r0, #8214	; 0x2016
    d6d2:	f7ff ff97 	bl	d604 <bt_hci_cmd_send>
}
    d6d6:	370c      	adds	r7, #12
    d6d8:	46bd      	mov	sp, r7
    d6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6dc:	f3bf 8f5b 	dmb	ish
    d6e0:	6863      	ldr	r3, [r4, #4]
    d6e2:	4d2d      	ldr	r5, [pc, #180]	; (d798 <conn_auto_initiate+0x114>)
    d6e4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    d6e8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d6ec:	f3c3 3100 	ubfx	r1, r3, #12, #1
    d6f0:	d125      	bne.n	d73e <conn_auto_initiate+0xba>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    d6f2:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    d6f6:	07db      	lsls	r3, r3, #31
    d6f8:	d521      	bpl.n	d73e <conn_auto_initiate+0xba>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    d6fa:	2302      	movs	r3, #2
    d6fc:	461a      	mov	r2, r3
    d6fe:	9100      	str	r1, [sp, #0]
    d700:	4620      	mov	r0, r4
    d702:	f01b f9c2 	bl	28a8a <bt_le_set_phy>
		if (!err) {
    d706:	4603      	mov	r3, r0
    d708:	b920      	cbnz	r0, d714 <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d70a:	2180      	movs	r1, #128	; 0x80
    d70c:	4630      	mov	r0, r6
    d70e:	f01b f941 	bl	28994 <atomic_or>
			return;
    d712:	e7e0      	b.n	d6d6 <conn_auto_initiate+0x52>
		BT_ERR("Failed to set LE PHY (%d)", err);
    d714:	4821      	ldr	r0, [pc, #132]	; (d79c <conn_auto_initiate+0x118>)
    d716:	6802      	ldr	r2, [r0, #0]
    d718:	0756      	lsls	r6, r2, #29
    d71a:	d010      	beq.n	d73e <conn_auto_initiate+0xba>
    d71c:	466e      	mov	r6, sp
    d71e:	b088      	sub	sp, #32
    d720:	aa02      	add	r2, sp, #8
    d722:	491f      	ldr	r1, [pc, #124]	; (d7a0 <conn_auto_initiate+0x11c>)
    d724:	6111      	str	r1, [r2, #16]
    d726:	491f      	ldr	r1, [pc, #124]	; (d7a4 <conn_auto_initiate+0x120>)
    d728:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d72c:	2304      	movs	r3, #4
    d72e:	f842 3f0c 	str.w	r3, [r2, #12]!
    d732:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d736:	607b      	str	r3, [r7, #4]
    d738:	f01b f93b 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d73c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    d73e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    d742:	0698      	lsls	r0, r3, #26
    d744:	d5c7      	bpl.n	d6d6 <conn_auto_initiate+0x52>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    d746:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    d74a:	689b      	ldr	r3, [r3, #8]
    d74c:	0799      	lsls	r1, r3, #30
    d74e:	d5c2      	bpl.n	d6d6 <conn_auto_initiate+0x52>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    d750:	1cb9      	adds	r1, r7, #2
    d752:	4638      	mov	r0, r7
    d754:	f7ff fece 	bl	d4f4 <hci_le_read_max_data_len>
			if (!err) {
    d758:	2800      	cmp	r0, #0
    d75a:	d1bc      	bne.n	d6d6 <conn_auto_initiate+0x52>
				err = bt_le_set_data_len(conn,
    d75c:	887a      	ldrh	r2, [r7, #2]
    d75e:	8839      	ldrh	r1, [r7, #0]
    d760:	4620      	mov	r0, r4
    d762:	f01b f975 	bl	28a50 <bt_le_set_data_len>
				if (err) {
    d766:	4603      	mov	r3, r0
    d768:	2800      	cmp	r0, #0
    d76a:	d0b4      	beq.n	d6d6 <conn_auto_initiate+0x52>
					BT_ERR("Failed to set data len (%d)", err);
    d76c:	480b      	ldr	r0, [pc, #44]	; (d79c <conn_auto_initiate+0x118>)
    d76e:	6802      	ldr	r2, [r0, #0]
    d770:	0752      	lsls	r2, r2, #29
    d772:	d0b0      	beq.n	d6d6 <conn_auto_initiate+0x52>
    d774:	466c      	mov	r4, sp
    d776:	b088      	sub	sp, #32
    d778:	aa02      	add	r2, sp, #8
    d77a:	490b      	ldr	r1, [pc, #44]	; (d7a8 <conn_auto_initiate+0x124>)
    d77c:	6111      	str	r1, [r2, #16]
    d77e:	4909      	ldr	r1, [pc, #36]	; (d7a4 <conn_auto_initiate+0x120>)
    d780:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d784:	2304      	movs	r3, #4
    d786:	f842 3f0c 	str.w	r3, [r2, #12]!
    d78a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d78e:	607b      	str	r3, [r7, #4]
    d790:	f01b f90f 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d794:	46a5      	mov	sp, r4
		}
    d796:	e79e      	b.n	d6d6 <conn_auto_initiate+0x52>
    d798:	20000000 	.word	0x20000000
    d79c:	20000994 	.word	0x20000994
    d7a0:	00030466 	.word	0x00030466
    d7a4:	00030835 	.word	0x00030835
    d7a8:	00030484 	.word	0x00030484

0000d7ac <bt_hci_le_enh_conn_complete>:
{
    d7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7b0:	b08c      	sub	sp, #48	; 0x30
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d7b2:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    d7b6:	4a7e      	ldr	r2, [pc, #504]	; (d9b0 <bt_hci_le_enh_conn_complete+0x204>)
	if (evt->status) {
    d7b8:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    d7ba:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    d7bc:	ea6f 5308 	mvn.w	r3, r8, lsl #20
    d7c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    d7c4:	b29b      	uxth	r3, r3
    d7c6:	4299      	cmp	r1, r3
    d7c8:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    d7cc:	bf08      	it	eq
    d7ce:	8016      	strheq	r6, [r2, #0]
{
    d7d0:	af04      	add	r7, sp, #16
    d7d2:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d7d4:	fa1f f988 	uxth.w	r9, r8
			return true;
    d7d8:	bf08      	it	eq
    d7da:	2601      	moveq	r6, #1
	if (evt->status) {
    d7dc:	2c00      	cmp	r4, #0
    d7de:	d04a      	beq.n	d876 <bt_hci_le_enh_conn_complete+0xca>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d7e0:	2c02      	cmp	r4, #2
    d7e2:	d131      	bne.n	d848 <bt_hci_le_enh_conn_complete+0x9c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    d7e4:	2100      	movs	r1, #0
    d7e6:	2206      	movs	r2, #6
    d7e8:	4608      	mov	r0, r1
    d7ea:	f002 fb51 	bl	fe90 <bt_conn_lookup_state_le>
	if (!conn) {
    d7ee:	4605      	mov	r5, r0
    d7f0:	b9b8      	cbnz	r0, d822 <bt_hci_le_enh_conn_complete+0x76>
		BT_ERR("No pending central connection");
    d7f2:	4870      	ldr	r0, [pc, #448]	; (d9b4 <bt_hci_le_enh_conn_complete+0x208>)
    d7f4:	6803      	ldr	r3, [r0, #0]
    d7f6:	0759      	lsls	r1, r3, #29
    d7f8:	d00c      	beq.n	d814 <bt_hci_le_enh_conn_complete+0x68>
    d7fa:	4b6f      	ldr	r3, [pc, #444]	; (d9b8 <bt_hci_le_enh_conn_complete+0x20c>)
    d7fc:	61bb      	str	r3, [r7, #24]
    d7fe:	4b6f      	ldr	r3, [pc, #444]	; (d9bc <bt_hci_le_enh_conn_complete+0x210>)
    d800:	61fb      	str	r3, [r7, #28]
    d802:	f107 0214 	add.w	r2, r7, #20
    d806:	2303      	movs	r3, #3
    d808:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d80c:	603b      	str	r3, [r7, #0]
    d80e:	617b      	str	r3, [r7, #20]
    d810:	f01b f8cf 	bl	289b2 <z_log_msg2_static_create.constprop.0>
			bt_le_scan_update(false);
    d814:	2000      	movs	r0, #0
    d816:	f001 fd17 	bl	f248 <bt_le_scan_update>
}
    d81a:	3720      	adds	r7, #32
    d81c:	46bd      	mov	sp, r7
    d81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    d822:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d824:	2100      	movs	r1, #0
    d826:	f002 f927 	bl	fa78 <bt_conn_set_state>
    d82a:	f3bf 8f5b 	dmb	ish
    d82e:	686b      	ldr	r3, [r5, #4]
    d830:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    d834:	07da      	lsls	r2, r3, #31
    d836:	d503      	bpl.n	d840 <bt_hci_le_enh_conn_complete+0x94>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    d838:	4621      	mov	r1, r4
    d83a:	4628      	mov	r0, r5
    d83c:	f002 f91c 	bl	fa78 <bt_conn_set_state>
	bt_conn_unref(conn);
    d840:	4628      	mov	r0, r5
    d842:	f01b fbb2 	bl	28faa <bt_conn_unref>
    d846:	e7e5      	b.n	d814 <bt_hci_le_enh_conn_complete+0x68>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    d848:	485a      	ldr	r0, [pc, #360]	; (d9b4 <bt_hci_le_enh_conn_complete+0x208>)
    d84a:	6803      	ldr	r3, [r0, #0]
    d84c:	f013 0f06 	tst.w	r3, #6
    d850:	d0e3      	beq.n	d81a <bt_hci_le_enh_conn_complete+0x6e>
    d852:	466d      	mov	r5, sp
    d854:	b088      	sub	sp, #32
    d856:	aa04      	add	r2, sp, #16
    d858:	4b59      	ldr	r3, [pc, #356]	; (d9c0 <bt_hci_le_enh_conn_complete+0x214>)
    d85a:	6113      	str	r3, [r2, #16]
    d85c:	4b59      	ldr	r3, [pc, #356]	; (d9c4 <bt_hci_le_enh_conn_complete+0x218>)
    d85e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d862:	2304      	movs	r3, #4
    d864:	f842 3f0c 	str.w	r3, [r2, #12]!
    d868:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    d86c:	60bb      	str	r3, [r7, #8]
    d86e:	f01b f8a0 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    d872:	46ad      	mov	sp, r5
    d874:	e7d1      	b.n	d81a <bt_hci_le_enh_conn_complete+0x6e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    d876:	7903      	ldrb	r3, [r0, #4]
    d878:	3b02      	subs	r3, #2
    d87a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    d87c:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    d880:	d83f      	bhi.n	d902 <bt_hci_le_enh_conn_complete+0x156>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    d882:	4651      	mov	r1, sl
    d884:	f107 0008 	add.w	r0, r7, #8
    d888:	f01b f881 	bl	2898e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    d88c:	7a3b      	ldrb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
    d88e:	2206      	movs	r2, #6
    d890:	3b02      	subs	r3, #2
    d892:	f105 0111 	add.w	r1, r5, #17
    d896:	1c78      	adds	r0, r7, #1
    d898:	723b      	strb	r3, [r7, #8]
    d89a:	f01a ff89 	bl	287b0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    d89e:	2301      	movs	r3, #1
    d8a0:	703b      	strb	r3, [r7, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    d8a2:	78e8      	ldrb	r0, [r5, #3]
    d8a4:	b9a8      	cbnz	r0, d8d2 <bt_hci_le_enh_conn_complete+0x126>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    d8a6:	2206      	movs	r2, #6
    d8a8:	f107 0108 	add.w	r1, r7, #8
    d8ac:	f002 faf0 	bl	fe90 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d8b0:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    d8b2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d8b4:	b963      	cbnz	r3, d8d0 <bt_hci_le_enh_conn_complete+0x124>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d8b6:	f3bf 8f5b 	dmb	ish
    d8ba:	4b43      	ldr	r3, [pc, #268]	; (d9c8 <bt_hci_le_enh_conn_complete+0x21c>)
    d8bc:	e853 2f00 	ldrex	r2, [r3]
    d8c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    d8c4:	e843 2100 	strex	r1, r2, [r3]
    d8c8:	2900      	cmp	r1, #0
    d8ca:	d1f7      	bne.n	d8bc <bt_hci_le_enh_conn_complete+0x110>
    d8cc:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    d8d0:	bb5c      	cbnz	r4, d92a <bt_hci_le_enh_conn_complete+0x17e>
		BT_ERR("No pending conn for peer %s",
    d8d2:	4c38      	ldr	r4, [pc, #224]	; (d9b4 <bt_hci_le_enh_conn_complete+0x208>)
    d8d4:	6823      	ldr	r3, [r4, #0]
    d8d6:	075b      	lsls	r3, r3, #29
    d8d8:	d00e      	beq.n	d8f8 <bt_hci_le_enh_conn_complete+0x14c>
    d8da:	4650      	mov	r0, sl
    d8dc:	f7ff f926 	bl	cb2c <bt_addr_le_str_real>
    d8e0:	4b38      	ldr	r3, [pc, #224]	; (d9c4 <bt_hci_le_enh_conn_complete+0x218>)
    d8e2:	9302      	str	r3, [sp, #8]
    d8e4:	4b39      	ldr	r3, [pc, #228]	; (d9cc <bt_hci_le_enh_conn_complete+0x220>)
    d8e6:	9301      	str	r3, [sp, #4]
    d8e8:	2300      	movs	r3, #0
    d8ea:	9003      	str	r0, [sp, #12]
    d8ec:	9300      	str	r3, [sp, #0]
    d8ee:	2201      	movs	r2, #1
    d8f0:	4621      	mov	r1, r4
    d8f2:	4618      	mov	r0, r3
    d8f4:	f01b f860 	bl	289b8 <z_log_msg2_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    d8f8:	211f      	movs	r1, #31
    d8fa:	4648      	mov	r0, r9
    d8fc:	f01b f86c 	bl	289d8 <bt_hci_disconnect>
		return;
    d900:	e78b      	b.n	d81a <bt_hci_le_enh_conn_complete+0x6e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    d902:	78c3      	ldrb	r3, [r0, #3]
    d904:	2b01      	cmp	r3, #1
    d906:	bf04      	itt	eq
    d908:	4b31      	ldreq	r3, [pc, #196]	; (d9d0 <bt_hci_le_enh_conn_complete+0x224>)
    d90a:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    d90e:	4651      	mov	r1, sl
    d910:	4620      	mov	r0, r4
    d912:	f01b f967 	bl	28be4 <bt_lookup_id_addr>
    d916:	4601      	mov	r1, r0
    d918:	f107 0008 	add.w	r0, r7, #8
    d91c:	f01b f837 	bl	2898e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    d920:	4651      	mov	r1, sl
    d922:	4638      	mov	r0, r7
    d924:	f01b f833 	bl	2898e <bt_addr_le_copy>
    d928:	e7bb      	b.n	d8a2 <bt_hci_le_enh_conn_complete+0xf6>
	conn->handle = handle;
    d92a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    d92c:	f107 0108 	add.w	r1, r7, #8
	conn->handle = handle;
    d930:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    d934:	f01b f82b 	bl	2898e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    d938:	7e2a      	ldrb	r2, [r5, #24]
    d93a:	7deb      	ldrb	r3, [r5, #23]
    d93c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d940:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    d944:	7eaa      	ldrb	r2, [r5, #26]
    d946:	7e6b      	ldrb	r3, [r5, #25]
    d948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d94c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    d950:	7f2a      	ldrb	r2, [r5, #28]
    d952:	7eeb      	ldrb	r3, [r5, #27]
    d954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d958:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    d95c:	78eb      	ldrb	r3, [r5, #3]
    d95e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    d960:	2200      	movs	r2, #0
    d962:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d964:	b96b      	cbnz	r3, d982 <bt_hci_le_enh_conn_complete+0x1d6>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    d966:	4639      	mov	r1, r7
    d968:	f104 0096 	add.w	r0, r4, #150	; 0x96
    d96c:	f01b f80f 	bl	2898e <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    d970:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    d972:	4b17      	ldr	r3, [pc, #92]	; (d9d0 <bt_hci_le_enh_conn_complete+0x224>)
					&bt_dev.id_addr[conn->id]);
    d974:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    d978:	4419      	add	r1, r3
    d97a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    d97e:	f01b f806 	bl	2898e <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    d982:	2107      	movs	r1, #7
    d984:	4620      	mov	r0, r4
    d986:	f002 f877 	bl	fa78 <bt_conn_set_state>
	if (is_disconnected) {
    d98a:	b11e      	cbz	r6, d994 <bt_hci_le_enh_conn_complete+0x1e8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    d98c:	2101      	movs	r1, #1
    d98e:	4620      	mov	r0, r4
    d990:	f002 f872 	bl	fa78 <bt_conn_set_state>
	bt_conn_connected(conn);
    d994:	4620      	mov	r0, r4
    d996:	f01b fb0b 	bl	28fb0 <bt_conn_connected>
	conn_auto_initiate(conn);
    d99a:	4620      	mov	r0, r4
    d99c:	f7ff fe72 	bl	d684 <conn_auto_initiate>
	bt_conn_unref(conn);
    d9a0:	4620      	mov	r0, r4
    d9a2:	f01b fb02 	bl	28faa <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d9a6:	78e3      	ldrb	r3, [r4, #3]
    d9a8:	2b00      	cmp	r3, #0
    d9aa:	f47f af36 	bne.w	d81a <bt_hci_le_enh_conn_complete+0x6e>
    d9ae:	e731      	b.n	d814 <bt_hci_le_enh_conn_complete+0x68>
    d9b0:	20005e94 	.word	0x20005e94
    d9b4:	20000994 	.word	0x20000994
    d9b8:	000304a4 	.word	0x000304a4
    d9bc:	00030848 	.word	0x00030848
    d9c0:	000304c6 	.word	0x000304c6
    d9c4:	00030860 	.word	0x00030860
    d9c8:	200000cc 	.word	0x200000cc
    d9cc:	000304e3 	.word	0x000304e3
    d9d0:	20000000 	.word	0x20000000

0000d9d4 <le_phy_update_complete>:
{
    d9d4:	b5b0      	push	{r4, r5, r7, lr}
    d9d6:	b082      	sub	sp, #8
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d9d8:	6883      	ldr	r3, [r0, #8]
    d9da:	f8b3 5001 	ldrh.w	r5, [r3, #1]
{
    d9de:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    d9e0:	4628      	mov	r0, r5
    d9e2:	f002 f841 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    d9e6:	4604      	mov	r4, r0
    d9e8:	b9b8      	cbnz	r0, da1a <le_phy_update_complete+0x46>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d9ea:	4819      	ldr	r0, [pc, #100]	; (da50 <le_phy_update_complete+0x7c>)
    d9ec:	6803      	ldr	r3, [r0, #0]
    d9ee:	075a      	lsls	r2, r3, #29
    d9f0:	d010      	beq.n	da14 <le_phy_update_complete+0x40>
    d9f2:	466c      	mov	r4, sp
    d9f4:	b088      	sub	sp, #32
    d9f6:	466a      	mov	r2, sp
    d9f8:	4b16      	ldr	r3, [pc, #88]	; (da54 <le_phy_update_complete+0x80>)
    d9fa:	6113      	str	r3, [r2, #16]
    d9fc:	4b16      	ldr	r3, [pc, #88]	; (da58 <le_phy_update_complete+0x84>)
    d9fe:	e9c2 3505 	strd	r3, r5, [r2, #20]
    da02:	2304      	movs	r3, #4
    da04:	f842 3f0c 	str.w	r3, [r2, #12]!
    da08:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    da0c:	607b      	str	r3, [r7, #4]
    da0e:	f01a ffd0 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    da12:	46a5      	mov	sp, r4
}
    da14:	3708      	adds	r7, #8
    da16:	46bd      	mov	sp, r7
    da18:	bdb0      	pop	{r4, r5, r7, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    da1a:	3004      	adds	r0, #4
    da1c:	f3bf 8f5b 	dmb	ish
    da20:	e850 3f00 	ldrex	r3, [r0]
    da24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    da28:	e840 2100 	strex	r1, r2, [r0]
    da2c:	2900      	cmp	r1, #0
    da2e:	d1f7      	bne.n	da20 <le_phy_update_complete+0x4c>
    da30:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    da34:	061b      	lsls	r3, r3, #24
    da36:	d506      	bpl.n	da46 <le_phy_update_complete+0x72>
    da38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    da3c:	f01a ffaa 	bl	28994 <atomic_or>
		conn_auto_initiate(conn);
    da40:	4620      	mov	r0, r4
    da42:	f7ff fe1f 	bl	d684 <conn_auto_initiate>
	bt_conn_unref(conn);
    da46:	4620      	mov	r0, r4
    da48:	f01b faaf 	bl	28faa <bt_conn_unref>
    da4c:	e7e2      	b.n	da14 <le_phy_update_complete+0x40>
    da4e:	bf00      	nop
    da50:	20000994 	.word	0x20000994
    da54:	000301eb 	.word	0x000301eb
    da58:	00030793 	.word	0x00030793

0000da5c <le_remote_feat_complete>:
{
    da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da5e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    da60:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    da62:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    da66:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    da68:	4630      	mov	r0, r6
    da6a:	f001 fffd 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    da6e:	4604      	mov	r4, r0
    da70:	b9b8      	cbnz	r0, daa2 <le_remote_feat_complete+0x46>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    da72:	4815      	ldr	r0, [pc, #84]	; (dac8 <le_remote_feat_complete+0x6c>)
    da74:	6803      	ldr	r3, [r0, #0]
    da76:	075b      	lsls	r3, r3, #29
    da78:	d010      	beq.n	da9c <le_remote_feat_complete+0x40>
    da7a:	466c      	mov	r4, sp
    da7c:	b088      	sub	sp, #32
    da7e:	466a      	mov	r2, sp
    da80:	4b12      	ldr	r3, [pc, #72]	; (dacc <le_remote_feat_complete+0x70>)
    da82:	6113      	str	r3, [r2, #16]
    da84:	4b12      	ldr	r3, [pc, #72]	; (dad0 <le_remote_feat_complete+0x74>)
    da86:	e9c2 3605 	strd	r3, r6, [r2, #20]
    da8a:	2304      	movs	r3, #4
    da8c:	f842 3f0c 	str.w	r3, [r2, #12]!
    da90:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    da94:	607b      	str	r3, [r7, #4]
    da96:	f01a ff8c 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    da9a:	46a5      	mov	sp, r4
}
    da9c:	370c      	adds	r7, #12
    da9e:	46bd      	mov	sp, r7
    daa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    daa2:	782b      	ldrb	r3, [r5, #0]
    daa4:	b923      	cbnz	r3, dab0 <le_remote_feat_complete+0x54>
		memcpy(conn->le.features, evt->features,
    daa6:	2208      	movs	r2, #8
    daa8:	1ce9      	adds	r1, r5, #3
    daaa:	30ac      	adds	r0, #172	; 0xac
    daac:	f01a fe80 	bl	287b0 <memcpy>
    dab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    dab4:	1d20      	adds	r0, r4, #4
    dab6:	f01a ff6d 	bl	28994 <atomic_or>
	conn_auto_initiate(conn);
    daba:	4620      	mov	r0, r4
    dabc:	f7ff fde2 	bl	d684 <conn_auto_initiate>
	bt_conn_unref(conn);
    dac0:	4620      	mov	r0, r4
    dac2:	f01b fa72 	bl	28faa <bt_conn_unref>
    dac6:	e7e9      	b.n	da9c <le_remote_feat_complete+0x40>
    dac8:	20000994 	.word	0x20000994
    dacc:	000301eb 	.word	0x000301eb
    dad0:	00030919 	.word	0x00030919

0000dad4 <le_conn_param_neg_reply>:
{
    dad4:	b570      	push	{r4, r5, r6, lr}
    dad6:	4606      	mov	r6, r0
    dad8:	b088      	sub	sp, #32
    dada:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    dadc:	f242 0021 	movw	r0, #8225	; 0x2021
    dae0:	2103      	movs	r1, #3
    dae2:	f7ff fc45 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    dae6:	4604      	mov	r4, r0
    dae8:	b988      	cbnz	r0, db0e <le_conn_param_neg_reply+0x3a>
		BT_ERR("Unable to allocate buffer");
    daea:	4810      	ldr	r0, [pc, #64]	; (db2c <le_conn_param_neg_reply+0x58>)
    daec:	6803      	ldr	r3, [r0, #0]
    daee:	075b      	lsls	r3, r3, #29
    daf0:	d00b      	beq.n	db0a <le_conn_param_neg_reply+0x36>
    daf2:	4b0f      	ldr	r3, [pc, #60]	; (db30 <le_conn_param_neg_reply+0x5c>)
    daf4:	9306      	str	r3, [sp, #24]
    daf6:	4b0f      	ldr	r3, [pc, #60]	; (db34 <le_conn_param_neg_reply+0x60>)
    daf8:	9307      	str	r3, [sp, #28]
    dafa:	aa05      	add	r2, sp, #20
    dafc:	2303      	movs	r3, #3
    dafe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    db02:	9301      	str	r3, [sp, #4]
    db04:	9305      	str	r3, [sp, #20]
    db06:	f01a ff54 	bl	289b2 <z_log_msg2_static_create.constprop.0>
}
    db0a:	b008      	add	sp, #32
    db0c:	bd70      	pop	{r4, r5, r6, pc}
    db0e:	2103      	movs	r1, #3
    db10:	3008      	adds	r0, #8
    db12:	f01c f9de 	bl	29ed2 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    db16:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    db18:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    db1a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    db1c:	f242 0021 	movw	r0, #8225	; 0x2021
}
    db20:	b008      	add	sp, #32
    db22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    db26:	f7ff bd6d 	b.w	d604 <bt_hci_cmd_send>
    db2a:	bf00      	nop
    db2c:	20000994 	.word	0x20000994
    db30:	00030503 	.word	0x00030503
    db34:	00030931 	.word	0x00030931

0000db38 <le_conn_param_req>:
{
    db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db3c:	b084      	sub	sp, #16
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    db3e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    db40:	78d9      	ldrb	r1, [r3, #3]
    db42:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    db44:	f8b3 8000 	ldrh.w	r8, [r3]
{
    db48:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    db4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    db4e:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    db50:	7959      	ldrb	r1, [r3, #5]
    db52:	791a      	ldrb	r2, [r3, #4]
    db54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    db58:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    db5a:	799a      	ldrb	r2, [r3, #6]
    db5c:	79d9      	ldrb	r1, [r3, #7]
    db5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    db62:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    db64:	7a1a      	ldrb	r2, [r3, #8]
    db66:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    db68:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
    db6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    db70:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    db72:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
    db74:	f001 ff78 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    db78:	4606      	mov	r6, r0
    db7a:	b9e0      	cbnz	r0, dbb6 <le_conn_param_req+0x7e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    db7c:	4825      	ldr	r0, [pc, #148]	; (dc14 <le_conn_param_req+0xdc>)
    db7e:	6803      	ldr	r3, [r0, #0]
    db80:	075b      	lsls	r3, r3, #29
    db82:	d010      	beq.n	dba6 <le_conn_param_req+0x6e>
    db84:	466d      	mov	r5, sp
    db86:	b088      	sub	sp, #32
    db88:	466a      	mov	r2, sp
    db8a:	4b23      	ldr	r3, [pc, #140]	; (dc18 <le_conn_param_req+0xe0>)
    db8c:	6113      	str	r3, [r2, #16]
    db8e:	4b23      	ldr	r3, [pc, #140]	; (dc1c <le_conn_param_req+0xe4>)
    db90:	e9c2 3405 	strd	r3, r4, [r2, #20]
    db94:	2304      	movs	r3, #4
    db96:	f842 3f0c 	str.w	r3, [r2, #12]!
    db9a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    db9e:	607b      	str	r3, [r7, #4]
    dba0:	f01a ff07 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    dba4:	46ad      	mov	sp, r5
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    dba6:	2102      	movs	r1, #2
    dba8:	4620      	mov	r0, r4
    dbaa:	f7ff ff93 	bl	dad4 <le_conn_param_neg_reply>
}
    dbae:	3710      	adds	r7, #16
    dbb0:	46bd      	mov	sp, r7
    dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    dbb6:	f107 0108 	add.w	r1, r7, #8
    dbba:	f002 f90f 	bl	fddc <le_param_req>
    dbbe:	b938      	cbnz	r0, dbd0 <le_conn_param_req+0x98>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    dbc0:	211e      	movs	r1, #30
    dbc2:	4620      	mov	r0, r4
    dbc4:	f7ff ff86 	bl	dad4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    dbc8:	4630      	mov	r0, r6
    dbca:	f01b f9ee 	bl	28faa <bt_conn_unref>
    dbce:	e7ee      	b.n	dbae <le_conn_param_req+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    dbd0:	210e      	movs	r1, #14
    dbd2:	f242 0020 	movw	r0, #8224	; 0x2020
    dbd6:	f7ff fbcb 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    dbda:	4605      	mov	r5, r0
    dbdc:	2800      	cmp	r0, #0
    dbde:	d0f3      	beq.n	dbc8 <le_conn_param_req+0x90>
    dbe0:	210e      	movs	r1, #14
    dbe2:	3008      	adds	r0, #8
    dbe4:	f01c f975 	bl	29ed2 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    dbe8:	220e      	movs	r2, #14
    dbea:	4604      	mov	r4, r0
    dbec:	2100      	movs	r1, #0
    dbee:	f01a fdea 	bl	287c6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    dbf2:	893b      	ldrh	r3, [r7, #8]
    dbf4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    dbf6:	897b      	ldrh	r3, [r7, #10]
    dbf8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    dbfa:	89bb      	ldrh	r3, [r7, #12]
    dbfc:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    dbfe:	89fb      	ldrh	r3, [r7, #14]
	cp->handle = sys_cpu_to_le16(handle);
    dc00:	f8a4 8000 	strh.w	r8, [r4]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    dc04:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    dc06:	4629      	mov	r1, r5
    dc08:	f242 0020 	movw	r0, #8224	; 0x2020
    dc0c:	f7ff fcfa 	bl	d604 <bt_hci_cmd_send>
    dc10:	e7da      	b.n	dbc8 <le_conn_param_req+0x90>
    dc12:	bf00      	nop
    dc14:	20000994 	.word	0x20000994
    dc18:	000301eb 	.word	0x000301eb
    dc1c:	0003076e 	.word	0x0003076e

0000dc20 <hci_tx_thread>:
{
    dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    dc24:	f8df a1a0 	ldr.w	sl, [pc, #416]	; ddc8 <hci_tx_thread+0x1a8>
		BT_ASSERT(err == 0);
    dc28:	f8df b1a0 	ldr.w	fp, [pc, #416]	; ddcc <hci_tx_thread+0x1ac>
{
    dc2c:	b08b      	sub	sp, #44	; 0x2c
    dc2e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    dc30:	f8da 300c 	ldr.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    dc34:	4866      	ldr	r0, [pc, #408]	; (ddd0 <hci_tx_thread+0x1b0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    dc36:	f36f 3352 	bfc	r3, #13, #6
    dc3a:	f8ca 300c 	str.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    dc3e:	f001 fed7 	bl	f9f0 <bt_conn_prepare_events>
    dc42:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    dc44:	4860      	ldr	r0, [pc, #384]	; (ddc8 <hci_tx_thread+0x1a8>)
    dc46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dc4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dc4e:	4631      	mov	r1, r6
    dc50:	f017 fe04 	bl	2585c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    dc54:	b160      	cbz	r0, dc70 <hci_tx_thread+0x50>
    dc56:	495f      	ldr	r1, [pc, #380]	; (ddd4 <hci_tx_thread+0x1b4>)
    dc58:	485f      	ldr	r0, [pc, #380]	; (ddd8 <hci_tx_thread+0x1b8>)
    dc5a:	f640 1393 	movw	r3, #2451	; 0x993
    dc5e:	465a      	mov	r2, fp
    dc60:	f017 ff50 	bl	25b04 <printk>
    dc64:	4040      	eors	r0, r0
    dc66:	f380 8811 	msr	BASEPRI, r0
    dc6a:	f04f 0003 	mov.w	r0, #3
    dc6e:	df02      	svc	2
{
    dc70:	f8df 9154 	ldr.w	r9, [pc, #340]	; ddc8 <hci_tx_thread+0x1a8>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    dc74:	f8df 8164 	ldr.w	r8, [pc, #356]	; dddc <hci_tx_thread+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    dc78:	4d59      	ldr	r5, [pc, #356]	; (dde0 <hci_tx_thread+0x1c0>)
	for (; count; ev++, count--) {
    dc7a:	b916      	cbnz	r6, dc82 <hci_tx_thread+0x62>
	z_impl_k_yield();
    dc7c:	f017 fae2 	bl	25244 <z_impl_k_yield>
	while (1) {
    dc80:	e7d6      	b.n	dc30 <hci_tx_thread+0x10>
		switch (ev->state) {
    dc82:	f8d9 300c 	ldr.w	r3, [r9, #12]
    dc86:	f3c3 3345 	ubfx	r3, r3, #13, #6
    dc8a:	2b01      	cmp	r3, #1
    dc8c:	d977      	bls.n	dd7e <hci_tx_thread+0x15e>
    dc8e:	2b04      	cmp	r3, #4
    dc90:	f040 8081 	bne.w	dd96 <hci_tx_thread+0x176>
			if (ev->tag == BT_EVENT_CMD_TX) {
    dc94:	f899 300c 	ldrb.w	r3, [r9, #12]
    dc98:	2b00      	cmp	r3, #0
    dc9a:	d174      	bne.n	dd86 <hci_tx_thread+0x166>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    dc9c:	4851      	ldr	r0, [pc, #324]	; (dde4 <hci_tx_thread+0x1c4>)
    dc9e:	2200      	movs	r2, #0
    dca0:	2300      	movs	r3, #0
    dca2:	f01c f8b9 	bl	29e18 <net_buf_get>
	BT_ASSERT(buf);
    dca6:	4604      	mov	r4, r0
    dca8:	b960      	cbnz	r0, dcc4 <hci_tx_thread+0xa4>
    dcaa:	494f      	ldr	r1, [pc, #316]	; (dde8 <hci_tx_thread+0x1c8>)
    dcac:	484a      	ldr	r0, [pc, #296]	; (ddd8 <hci_tx_thread+0x1b8>)
    dcae:	f640 132a 	movw	r3, #2346	; 0x92a
    dcb2:	465a      	mov	r2, fp
    dcb4:	f017 ff26 	bl	25b04 <printk>
    dcb8:	4040      	eors	r0, r0
    dcba:	f380 8811 	msr	BASEPRI, r0
    dcbe:	f04f 0003 	mov.w	r0, #3
    dcc2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    dcc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dcc8:	4848      	ldr	r0, [pc, #288]	; (ddec <hci_tx_thread+0x1cc>)
    dcca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dcce:	f016 fe83 	bl	249d8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    dcd2:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    dcd6:	b1c3      	cbz	r3, dd0a <hci_tx_thread+0xea>
		BT_ERR("Uncleared pending sent_cmd");
    dcd8:	f8d8 3000 	ldr.w	r3, [r8]
    dcdc:	075a      	lsls	r2, r3, #29
    dcde:	d00d      	beq.n	dcfc <hci_tx_thread+0xdc>
    dce0:	4b43      	ldr	r3, [pc, #268]	; (ddf0 <hci_tx_thread+0x1d0>)
    dce2:	623b      	str	r3, [r7, #32]
    dce4:	4b43      	ldr	r3, [pc, #268]	; (ddf4 <hci_tx_thread+0x1d4>)
    dce6:	627b      	str	r3, [r7, #36]	; 0x24
    dce8:	f107 021c 	add.w	r2, r7, #28
    dcec:	2303      	movs	r3, #3
    dcee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dcf2:	4640      	mov	r0, r8
    dcf4:	60fb      	str	r3, [r7, #12]
    dcf6:	61fb      	str	r3, [r7, #28]
    dcf8:	f01a fe5b 	bl	289b2 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    dcfc:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    dd00:	f011 fafe 	bl	1f300 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    dd04:	2300      	movs	r3, #0
    dd06:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    dd0a:	4620      	mov	r0, r4
    dd0c:	f01c f8af 	bl	29e6e <net_buf_ref>
    dd10:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
	err = bt_send(buf);
    dd14:	4620      	mov	r0, r4
    dd16:	f7ff fc6d 	bl	d5f4 <bt_send>
	if (err) {
    dd1a:	b380      	cbz	r0, dd7e <hci_tx_thread+0x15e>
		BT_ERR("Unable to send to driver (err %d)", err);
    dd1c:	f8d8 3000 	ldr.w	r3, [r8]
    dd20:	075b      	lsls	r3, r3, #29
    dd22:	d013      	beq.n	dd4c <hci_tx_thread+0x12c>
    dd24:	466b      	mov	r3, sp
    dd26:	b088      	sub	sp, #32
    dd28:	466a      	mov	r2, sp
    dd2a:	4933      	ldr	r1, [pc, #204]	; (ddf8 <hci_tx_thread+0x1d8>)
    dd2c:	6111      	str	r1, [r2, #16]
    dd2e:	4931      	ldr	r1, [pc, #196]	; (ddf4 <hci_tx_thread+0x1d4>)
    dd30:	607b      	str	r3, [r7, #4]
    dd32:	e9c2 1005 	strd	r1, r0, [r2, #20]
    dd36:	2104      	movs	r1, #4
    dd38:	f842 1f0c 	str.w	r1, [r2, #12]!
    dd3c:	6139      	str	r1, [r7, #16]
    dd3e:	4640      	mov	r0, r8
    dd40:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dd44:	f01a fe35 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    dd48:	687b      	ldr	r3, [r7, #4]
    dd4a:	469d      	mov	sp, r3
	z_impl_k_sem_give(sem);
    dd4c:	4827      	ldr	r0, [pc, #156]	; (ddec <hci_tx_thread+0x1cc>)
    dd4e:	f016 fe1d 	bl	2498c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    dd52:	4620      	mov	r0, r4
    dd54:	f011 fa18 	bl	1f188 <net_buf_id>
    dd58:	4b28      	ldr	r3, [pc, #160]	; (ddfc <hci_tx_thread+0x1dc>)
    dd5a:	220c      	movs	r2, #12
    dd5c:	fb02 3000 	mla	r0, r2, r0, r3
    dd60:	211f      	movs	r1, #31
    dd62:	8840      	ldrh	r0, [r0, #2]
    dd64:	4622      	mov	r2, r4
    dd66:	f7ff f91b 	bl	cfa0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    dd6a:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    dd6e:	f011 fac7 	bl	1f300 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    dd72:	2300      	movs	r3, #0
		net_buf_unref(buf);
    dd74:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    dd76:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
    dd7a:	f011 fac1 	bl	1f300 <net_buf_unref>
	for (; count; ev++, count--) {
    dd7e:	f109 0914 	add.w	r9, r9, #20
    dd82:	3e01      	subs	r6, #1
    dd84:	e779      	b.n	dc7a <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    dd86:	2b01      	cmp	r3, #1
    dd88:	d1f9      	bne.n	dd7e <hci_tx_thread+0x15e>
					conn = CONTAINER_OF(ev->fifo,
    dd8a:	f8d9 0010 	ldr.w	r0, [r9, #16]
					bt_conn_process_tx(conn);
    dd8e:	3838      	subs	r0, #56	; 0x38
    dd90:	f002 f8de 	bl	ff50 <bt_conn_process_tx>
    dd94:	e7f3      	b.n	dd7e <hci_tx_thread+0x15e>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    dd96:	f8d8 2000 	ldr.w	r2, [r8]
    dd9a:	f012 0f06 	tst.w	r2, #6
    dd9e:	d0ee      	beq.n	dd7e <hci_tx_thread+0x15e>
    dda0:	466c      	mov	r4, sp
    dda2:	b088      	sub	sp, #32
    dda4:	466a      	mov	r2, sp
    dda6:	4916      	ldr	r1, [pc, #88]	; (de00 <hci_tx_thread+0x1e0>)
    dda8:	6111      	str	r1, [r2, #16]
    ddaa:	4916      	ldr	r1, [pc, #88]	; (de04 <hci_tx_thread+0x1e4>)
		switch (ev->state) {
    ddac:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    ddb0:	2304      	movs	r3, #4
    ddb2:	f842 3f0c 	str.w	r3, [r2, #12]!
    ddb6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    ddba:	4640      	mov	r0, r8
    ddbc:	613b      	str	r3, [r7, #16]
    ddbe:	f01a fdf8 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    ddc2:	46a5      	mov	sp, r4
    ddc4:	e7db      	b.n	dd7e <hci_tx_thread+0x15e>
    ddc6:	bf00      	nop
    ddc8:	200002cc 	.word	0x200002cc
    ddcc:	00030382 	.word	0x00030382
    ddd0:	200002e0 	.word	0x200002e0
    ddd4:	000303b6 	.word	0x000303b6
    ddd8:	000303bf 	.word	0x000303bf
    dddc:	20000994 	.word	0x20000994
    dde0:	20000000 	.word	0x20000000
    dde4:	20000134 	.word	0x20000134
    dde8:	000301bb 	.word	0x000301bb
    ddec:	20000118 	.word	0x20000118
    ddf0:	00030521 	.word	0x00030521
    ddf4:	00030812 	.word	0x00030812
    ddf8:	00030440 	.word	0x00030440
    ddfc:	20003fc4 	.word	0x20003fc4
    de00:	00030540 	.word	0x00030540
    de04:	000308d7 	.word	0x000308d7

0000de08 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    de08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de0c:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    de0e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    de12:	4630      	mov	r0, r6
    de14:	f01c f89c 	bl	29f50 <net_buf_simple_headroom>
	state->len = buf->len;
    de18:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    de1c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    de20:	4605      	mov	r5, r0
    de22:	d80c      	bhi.n	de3e <hci_event_prio+0x36>
    de24:	4a1c      	ldr	r2, [pc, #112]	; (de98 <hci_event_prio+0x90>)
    de26:	491d      	ldr	r1, [pc, #116]	; (de9c <hci_event_prio+0x94>)
    de28:	481d      	ldr	r0, [pc, #116]	; (dea0 <hci_event_prio+0x98>)
    de2a:	f640 532f 	movw	r3, #3375	; 0xd2f
    de2e:	f017 fe69 	bl	25b04 <printk>
    de32:	4040      	eors	r0, r0
    de34:	f380 8811 	msr	BASEPRI, r0
    de38:	f04f 0003 	mov.w	r0, #3
    de3c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    de3e:	4630      	mov	r0, r6
    de40:	2102      	movs	r1, #2
    de42:	f01c f86d 	bl	29f20 <net_buf_simple_pull_mem>
    de46:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    de48:	7800      	ldrb	r0, [r0, #0]
    de4a:	f01a fd8e 	bl	2896a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    de4e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    de50:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    de52:	d40c      	bmi.n	de6e <hci_event_prio+0x66>
    de54:	4a10      	ldr	r2, [pc, #64]	; (de98 <hci_event_prio+0x90>)
    de56:	4913      	ldr	r1, [pc, #76]	; (dea4 <hci_event_prio+0x9c>)
    de58:	4811      	ldr	r0, [pc, #68]	; (dea0 <hci_event_prio+0x98>)
    de5a:	f640 5333 	movw	r3, #3379	; 0xd33
    de5e:	f017 fe51 	bl	25b04 <printk>
    de62:	4040      	eors	r0, r0
    de64:	f380 8811 	msr	BASEPRI, r0
    de68:	f04f 0003 	mov.w	r0, #3
    de6c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    de6e:	2305      	movs	r3, #5
    de70:	4a0d      	ldr	r2, [pc, #52]	; (dea8 <hci_event_prio+0xa0>)
    de72:	7838      	ldrb	r0, [r7, #0]
    de74:	4621      	mov	r1, r4
    de76:	f7ff f835 	bl	cee4 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    de7a:	07b3      	lsls	r3, r6, #30
    de7c:	d507      	bpl.n	de8e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    de7e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    de80:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    de84:	fa10 f585 	uxtah	r5, r0, r5
    de88:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    de8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    de8e:	4620      	mov	r0, r4
}
    de90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    de94:	f011 ba34 	b.w	1f300 <net_buf_unref>
    de98:	00030382 	.word	0x00030382
    de9c:	00030565 	.word	0x00030565
    dea0:	000303bf 	.word	0x000303bf
    dea4:	0003057e 	.word	0x0003057e
    dea8:	0002c668 	.word	0x0002c668

0000deac <bt_recv>:

k_tid_t bt_recv_thread_id;

int bt_recv(struct net_buf *buf)
{
    deac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
    deae:	4d5c      	ldr	r5, [pc, #368]	; (e020 <bt_recv+0x174>)
{
    deb0:	b083      	sub	sp, #12
	if (bt_recv_thread_id == NULL) {
    deb2:	682b      	ldr	r3, [r5, #0]
{
    deb4:	af00      	add	r7, sp, #0
    deb6:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    deb8:	b913      	cbnz	r3, dec0 <bt_recv+0x14>
	return z_impl_z_current_get();
    deba:	f017 fa65 	bl	25388 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    debe:	6028      	str	r0, [r5, #0]
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    dec0:	7d23      	ldrb	r3, [r4, #20]

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    dec2:	2b01      	cmp	r3, #1
    dec4:	d062      	beq.n	df8c <bt_recv+0xe0>
    dec6:	2b03      	cmp	r3, #3
    dec8:	f040 808f 	bne.w	dfea <bt_recv+0x13e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    decc:	89a3      	ldrh	r3, [r4, #12]
    dece:	2b03      	cmp	r3, #3
    ded0:	d80c      	bhi.n	deec <bt_recv+0x40>
    ded2:	4a54      	ldr	r2, [pc, #336]	; (e024 <bt_recv+0x178>)
    ded4:	4954      	ldr	r1, [pc, #336]	; (e028 <bt_recv+0x17c>)
    ded6:	4855      	ldr	r0, [pc, #340]	; (e02c <bt_recv+0x180>)
    ded8:	f240 13b5 	movw	r3, #437	; 0x1b5
    dedc:	f017 fe12 	bl	25b04 <printk>
    dee0:	4040      	eors	r0, r0
    dee2:	f380 8811 	msr	BASEPRI, r0
    dee6:	f04f 0003 	mov.w	r0, #3
    deea:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    deec:	2104      	movs	r1, #4
    deee:	f104 0008 	add.w	r0, r4, #8
    def2:	f01c f815 	bl	29f20 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    def6:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    def8:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    defa:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    defc:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    defe:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    df02:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    df04:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    df06:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    df08:	d019      	beq.n	df3e <bt_recv+0x92>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    df0a:	4849      	ldr	r0, [pc, #292]	; (e030 <bt_recv+0x184>)
    df0c:	6802      	ldr	r2, [r0, #0]
    df0e:	0756      	lsls	r6, r2, #29
    df10:	d011      	beq.n	df36 <bt_recv+0x8a>
    df12:	466d      	mov	r5, sp
    df14:	b088      	sub	sp, #32
    df16:	466a      	mov	r2, sp
    df18:	4e46      	ldr	r6, [pc, #280]	; (e034 <bt_recv+0x188>)
    df1a:	6116      	str	r6, [r2, #16]
    df1c:	4e46      	ldr	r6, [pc, #280]	; (e038 <bt_recv+0x18c>)
    df1e:	61d3      	str	r3, [r2, #28]
    df20:	2305      	movs	r3, #5
    df22:	e9c2 6105 	strd	r6, r1, [r2, #20]
    df26:	f842 3f0c 	str.w	r3, [r2, #12]!
    df2a:	607b      	str	r3, [r7, #4]
    df2c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    df30:	f01a fd3f 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    df34:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    df36:	4620      	mov	r0, r4
    df38:	f011 f9e2 	bl	1f300 <net_buf_unref>
    df3c:	e022      	b.n	df84 <bt_recv+0xd8>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    df3e:	f001 fd93 	bl	fa68 <bt_conn_lookup_handle>
	if (!conn) {
    df42:	4605      	mov	r5, r0
    df44:	b998      	cbnz	r0, df6e <bt_recv+0xc2>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    df46:	483a      	ldr	r0, [pc, #232]	; (e030 <bt_recv+0x184>)
    df48:	6803      	ldr	r3, [r0, #0]
    df4a:	075d      	lsls	r5, r3, #29
    df4c:	d0f3      	beq.n	df36 <bt_recv+0x8a>
    df4e:	466d      	mov	r5, sp
    df50:	b088      	sub	sp, #32
    df52:	466a      	mov	r2, sp
    df54:	4939      	ldr	r1, [pc, #228]	; (e03c <bt_recv+0x190>)
    df56:	8ae3      	ldrh	r3, [r4, #22]
    df58:	6111      	str	r1, [r2, #16]
    df5a:	4937      	ldr	r1, [pc, #220]	; (e038 <bt_recv+0x18c>)
    df5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    df60:	2304      	movs	r3, #4
    df62:	f842 3f0c 	str.w	r3, [r2, #12]!
    df66:	607b      	str	r3, [r7, #4]
    df68:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    df6c:	e7e0      	b.n	df30 <bt_recv+0x84>
	acl(buf)->index = bt_conn_index(conn);
    df6e:	f001 feb5 	bl	fcdc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    df72:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    df74:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    df76:	4621      	mov	r1, r4
    df78:	4628      	mov	r0, r5
    df7a:	f001 fc03 	bl	f784 <bt_conn_recv>
	bt_conn_unref(conn);
    df7e:	4628      	mov	r0, r5
    df80:	f01b f813 	bl	28faa <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    df84:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    df86:	370c      	adds	r7, #12
    df88:	46bd      	mov	sp, r7
    df8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    df8c:	89a3      	ldrh	r3, [r4, #12]
    df8e:	2b01      	cmp	r3, #1
    df90:	d80c      	bhi.n	dfac <bt_recv+0x100>
    df92:	4a24      	ldr	r2, [pc, #144]	; (e024 <bt_recv+0x178>)
    df94:	4924      	ldr	r1, [pc, #144]	; (e028 <bt_recv+0x17c>)
    df96:	4825      	ldr	r0, [pc, #148]	; (e02c <bt_recv+0x180>)
    df98:	f640 1317 	movw	r3, #2327	; 0x917
    df9c:	f017 fdb2 	bl	25b04 <printk>
    dfa0:	4040      	eors	r0, r0
    dfa2:	f380 8811 	msr	BASEPRI, r0
    dfa6:	f04f 0003 	mov.w	r0, #3
    dfaa:	df02      	svc	2
    dfac:	2102      	movs	r1, #2
    dfae:	f104 0008 	add.w	r0, r4, #8
    dfb2:	f01b ffb5 	bl	29f20 <net_buf_simple_pull_mem>
    dfb6:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    dfb8:	7800      	ldrb	r0, [r0, #0]
    dfba:	f01a fcd6 	bl	2896a <bt_hci_evt_get_flags>
    dfbe:	0781      	lsls	r1, r0, #30
    dfc0:	d40c      	bmi.n	dfdc <bt_recv+0x130>
    dfc2:	4a18      	ldr	r2, [pc, #96]	; (e024 <bt_recv+0x178>)
    dfc4:	491e      	ldr	r1, [pc, #120]	; (e040 <bt_recv+0x194>)
    dfc6:	4819      	ldr	r0, [pc, #100]	; (e02c <bt_recv+0x180>)
    dfc8:	f640 131b 	movw	r3, #2331	; 0x91b
    dfcc:	f017 fd9a 	bl	25b04 <printk>
    dfd0:	4040      	eors	r0, r0
    dfd2:	f380 8811 	msr	BASEPRI, r0
    dfd6:	f04f 0003 	mov.w	r0, #3
    dfda:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    dfdc:	4a19      	ldr	r2, [pc, #100]	; (e044 <bt_recv+0x198>)
    dfde:	7828      	ldrb	r0, [r5, #0]
    dfe0:	2304      	movs	r3, #4
    dfe2:	4621      	mov	r1, r4
    dfe4:	f7fe ff7e 	bl	cee4 <handle_event>
    dfe8:	e7a5      	b.n	df36 <bt_recv+0x8a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    dfea:	4811      	ldr	r0, [pc, #68]	; (e030 <bt_recv+0x184>)
    dfec:	6802      	ldr	r2, [r0, #0]
    dfee:	0752      	lsls	r2, r2, #29
    dff0:	d010      	beq.n	e014 <bt_recv+0x168>
    dff2:	466d      	mov	r5, sp
    dff4:	b088      	sub	sp, #32
    dff6:	466a      	mov	r2, sp
    dff8:	4913      	ldr	r1, [pc, #76]	; (e048 <bt_recv+0x19c>)
    dffa:	6111      	str	r1, [r2, #16]
    dffc:	4913      	ldr	r1, [pc, #76]	; (e04c <bt_recv+0x1a0>)
	switch (bt_buf_get_type(buf)) {
    dffe:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    e002:	2304      	movs	r3, #4
    e004:	f842 3f0c 	str.w	r3, [r2, #12]!
    e008:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e00c:	607b      	str	r3, [r7, #4]
    e00e:	f01a fcd0 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    e012:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    e014:	4620      	mov	r0, r4
    e016:	f011 f973 	bl	1f300 <net_buf_unref>
		return -EINVAL;
    e01a:	f06f 0015 	mvn.w	r0, #21
    e01e:	e7b2      	b.n	df86 <bt_recv+0xda>
    e020:	20003fc0 	.word	0x20003fc0
    e024:	00030382 	.word	0x00030382
    e028:	00030565 	.word	0x00030565
    e02c:	000303bf 	.word	0x000303bf
    e030:	20000994 	.word	0x20000994
    e034:	00030597 	.word	0x00030597
    e038:	000307d2 	.word	0x000307d2
    e03c:	000305bf 	.word	0x000305bf
    e040:	000305e5 	.word	0x000305e5
    e044:	0002c648 	.word	0x0002c648
    e048:	00030613 	.word	0x00030613
    e04c:	000307da 	.word	0x000307da

0000e050 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    e050:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    e052:	7d03      	ldrb	r3, [r0, #20]
    e054:	2b01      	cmp	r3, #1
{
    e056:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    e058:	d00c      	beq.n	e074 <bt_recv_prio+0x24>
    e05a:	4a09      	ldr	r2, [pc, #36]	; (e080 <bt_recv_prio+0x30>)
    e05c:	4909      	ldr	r1, [pc, #36]	; (e084 <bt_recv_prio+0x34>)
    e05e:	480a      	ldr	r0, [pc, #40]	; (e088 <bt_recv_prio+0x38>)
    e060:	f640 537c 	movw	r3, #3452	; 0xd7c
    e064:	f017 fd4e 	bl	25b04 <printk>
    e068:	4040      	eors	r0, r0
    e06a:	f380 8811 	msr	BASEPRI, r0
    e06e:	f04f 0003 	mov.w	r0, #3
    e072:	df02      	svc	2

	hci_event_prio(buf);
    e074:	4620      	mov	r0, r4
    e076:	f7ff fec7 	bl	de08 <hci_event_prio>

	return 0;
}
    e07a:	2000      	movs	r0, #0
    e07c:	bd10      	pop	{r4, pc}
    e07e:	bf00      	nop
    e080:	00030382 	.word	0x00030382
    e084:	0003062b 	.word	0x0003062b
    e088:	000303bf 	.word	0x000303bf

0000e08c <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    e08c:	4a08      	ldr	r2, [pc, #32]	; (e0b0 <bt_hci_driver_register+0x24>)
{
    e08e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    e090:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    e094:	b930      	cbnz	r0, e0a4 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    e096:	68d9      	ldr	r1, [r3, #12]
    e098:	b139      	cbz	r1, e0aa <bt_hci_driver_register+0x1e>
    e09a:	6919      	ldr	r1, [r3, #16]
    e09c:	b129      	cbz	r1, e0aa <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    e09e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    e0a2:	4770      	bx	lr
		return -EALREADY;
    e0a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e0a8:	4770      	bx	lr
		return -EINVAL;
    e0aa:	f06f 0015 	mvn.w	r0, #21
}
    e0ae:	4770      	bx	lr
    e0b0:	20000000 	.word	0x20000000

0000e0b4 <bt_finalize_init>:

void bt_finalize_init(void)
{
    e0b4:	b508      	push	{r3, lr}
    e0b6:	4804      	ldr	r0, [pc, #16]	; (e0c8 <bt_finalize_init+0x14>)
    e0b8:	2102      	movs	r1, #2
    e0ba:	f01a fc6b 	bl	28994 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    e0be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    e0c2:	2000      	movs	r0, #0
    e0c4:	f001 b8c0 	b.w	f248 <bt_le_scan_update>
    e0c8:	200000cc 	.word	0x200000cc

0000e0cc <bt_init>:

static int bt_init(void)
{
    e0cc:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    e0ce:	4d48      	ldr	r5, [pc, #288]	; (e1f0 <bt_init+0x124>)
    e0d0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    e0d4:	6899      	ldr	r1, [r3, #8]
    e0d6:	f011 0101 	ands.w	r1, r1, #1
{
    e0da:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    e0dc:	d123      	bne.n	e126 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    e0de:	aa02      	add	r2, sp, #8
    e0e0:	f640 4003 	movw	r0, #3075	; 0xc03
    e0e4:	f7ff f97e 	bl	d3e4 <bt_hci_cmd_send_sync>
		if (err) {
    e0e8:	4604      	mov	r4, r0
    e0ea:	2800      	cmp	r0, #0
    e0ec:	d16f      	bne.n	e1ce <bt_init+0x102>
	uint8_t status = buf->data[0];
    e0ee:	9b02      	ldr	r3, [sp, #8]
    e0f0:	689b      	ldr	r3, [r3, #8]
	if (status) {
    e0f2:	781b      	ldrb	r3, [r3, #0]
    e0f4:	b9a3      	cbnz	r3, e120 <bt_init+0x54>
		bt_scan_reset();
    e0f6:	f001 f8a1 	bl	f23c <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e0fa:	f3bf 8f5b 	dmb	ish
    e0fe:	462b      	mov	r3, r5
    e100:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    e104:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    e108:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e10c:	f3bf 8f5b 	dmb	ish
    e110:	e853 1f00 	ldrex	r1, [r3]
    e114:	e843 2000 	strex	r0, r2, [r3]
    e118:	2800      	cmp	r0, #0
    e11a:	d1f9      	bne.n	e110 <bt_init+0x44>
    e11c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    e120:	9802      	ldr	r0, [sp, #8]
    e122:	f011 f8ed 	bl	1f300 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    e126:	aa02      	add	r2, sp, #8
    e128:	2100      	movs	r1, #0
    e12a:	f241 0003 	movw	r0, #4099	; 0x1003
    e12e:	f7ff f959 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e132:	4604      	mov	r4, r0
    e134:	2800      	cmp	r0, #0
    e136:	d14a      	bne.n	e1ce <bt_init+0x102>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    e138:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    e13a:	482e      	ldr	r0, [pc, #184]	; (e1f4 <bt_init+0x128>)
    e13c:	6899      	ldr	r1, [r3, #8]
    e13e:	2208      	movs	r2, #8
    e140:	3101      	adds	r1, #1
    e142:	f01a fb35 	bl	287b0 <memcpy>
	net_buf_unref(rsp);
    e146:	9802      	ldr	r0, [sp, #8]
    e148:	f011 f8da 	bl	1f300 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    e14c:	4621      	mov	r1, r4
    e14e:	aa02      	add	r2, sp, #8
    e150:	f241 0001 	movw	r0, #4097	; 0x1001
    e154:	f7ff f946 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e158:	4604      	mov	r4, r0
    e15a:	2800      	cmp	r0, #0
    e15c:	d137      	bne.n	e1ce <bt_init+0x102>
	read_local_ver_complete(rsp);
    e15e:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    e160:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    e162:	785a      	ldrb	r2, [r3, #1]
    e164:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    e168:	78d9      	ldrb	r1, [r3, #3]
    e16a:	789a      	ldrb	r2, [r3, #2]
    e16c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e170:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    e174:	791a      	ldrb	r2, [r3, #4]
    e176:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    e17a:	7a19      	ldrb	r1, [r3, #8]
    e17c:	79da      	ldrb	r2, [r3, #7]
    e17e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e182:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    e186:	795a      	ldrb	r2, [r3, #5]
    e188:	799b      	ldrb	r3, [r3, #6]
    e18a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e18e:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    e192:	f011 f8b5 	bl	1f300 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    e196:	4621      	mov	r1, r4
    e198:	aa02      	add	r2, sp, #8
    e19a:	f241 0002 	movw	r0, #4098	; 0x1002
    e19e:	f7ff f921 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e1a2:	4604      	mov	r4, r0
    e1a4:	b998      	cbnz	r0, e1ce <bt_init+0x102>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    e1a6:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    e1a8:	4813      	ldr	r0, [pc, #76]	; (e1f8 <bt_init+0x12c>)
    e1aa:	6899      	ldr	r1, [r3, #8]
    e1ac:	2240      	movs	r2, #64	; 0x40
    e1ae:	3101      	adds	r1, #1
    e1b0:	f01a fafe 	bl	287b0 <memcpy>
	net_buf_unref(rsp);
    e1b4:	9802      	ldr	r0, [sp, #8]
    e1b6:	f011 f8a3 	bl	1f300 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    e1ba:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e1be:	0658      	lsls	r0, r3, #25
    e1c0:	d422      	bmi.n	e208 <bt_init+0x13c>
		BT_ERR("Non-LE capable controller detected!");
    e1c2:	480e      	ldr	r0, [pc, #56]	; (e1fc <bt_init+0x130>)
    e1c4:	6803      	ldr	r3, [r0, #0]
    e1c6:	0759      	lsls	r1, r3, #29
    e1c8:	d104      	bne.n	e1d4 <bt_init+0x108>
		return -ENODEV;
    e1ca:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    e1ce:	4620      	mov	r0, r4
    e1d0:	b008      	add	sp, #32
    e1d2:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Non-LE capable controller detected!");
    e1d4:	4b0a      	ldr	r3, [pc, #40]	; (e200 <bt_init+0x134>)
    e1d6:	9306      	str	r3, [sp, #24]
    e1d8:	4b0a      	ldr	r3, [pc, #40]	; (e204 <bt_init+0x138>)
    e1da:	9307      	str	r3, [sp, #28]
    e1dc:	aa05      	add	r2, sp, #20
    e1de:	2303      	movs	r3, #3
    e1e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e1e4:	9301      	str	r3, [sp, #4]
    e1e6:	9305      	str	r3, [sp, #20]
    e1e8:	f01a fbe3 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    e1ec:	e7ed      	b.n	e1ca <bt_init+0xfe>
    e1ee:	bf00      	nop
    e1f0:	20000000 	.word	0x20000000
    e1f4:	20000070 	.word	0x20000070
    e1f8:	20000078 	.word	0x20000078
    e1fc:	20000994 	.word	0x20000994
    e200:	0003064e 	.word	0x0003064e
    e204:	000308c6 	.word	0x000308c6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    e208:	4621      	mov	r1, r4
    e20a:	aa02      	add	r2, sp, #8
    e20c:	f242 0003 	movw	r0, #8195	; 0x2003
    e210:	f7ff f8e8 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e214:	4604      	mov	r4, r0
    e216:	2800      	cmp	r0, #0
    e218:	d1d9      	bne.n	e1ce <bt_init+0x102>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    e21a:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    e21c:	48b9      	ldr	r0, [pc, #740]	; (e504 <bt_init+0x438>)
    e21e:	6899      	ldr	r1, [r3, #8]
    e220:	2208      	movs	r2, #8
    e222:	3101      	adds	r1, #1
    e224:	f01a fac4 	bl	287b0 <memcpy>
	net_buf_unref(rsp);
    e228:	9802      	ldr	r0, [sp, #8]
    e22a:	f011 f869 	bl	1f300 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    e22e:	4621      	mov	r1, r4
    e230:	aa02      	add	r2, sp, #8
    e232:	f242 0002 	movw	r0, #8194	; 0x2002
    e236:	f7ff f8d5 	bl	d3e4 <bt_hci_cmd_send_sync>
		if (err) {
    e23a:	4604      	mov	r4, r0
    e23c:	2800      	cmp	r0, #0
    e23e:	d1c6      	bne.n	e1ce <bt_init+0x102>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    e240:	9b02      	ldr	r3, [sp, #8]
    e242:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    e244:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e248:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    e24c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    e24e:	b121      	cbz	r1, e25a <bt_init+0x18e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    e250:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    e252:	48ad      	ldr	r0, [pc, #692]	; (e508 <bt_init+0x43c>)
    e254:	4611      	mov	r1, r2
    e256:	f01c fd6b 	bl	2ad30 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    e25a:	9802      	ldr	r0, [sp, #8]
    e25c:	f011 f850 	bl	1f300 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    e260:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    e264:	f016 0620 	ands.w	r6, r6, #32
    e268:	f000 80e1 	beq.w	e42e <bt_init+0x362>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    e26c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    e270:	071a      	lsls	r2, r3, #28
    e272:	d512      	bpl.n	e29a <bt_init+0x1ce>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    e274:	aa02      	add	r2, sp, #8
    e276:	2100      	movs	r1, #0
    e278:	f242 001c 	movw	r0, #8220	; 0x201c
    e27c:	f7ff f8b2 	bl	d3e4 <bt_hci_cmd_send_sync>
		if (err) {
    e280:	4604      	mov	r4, r0
    e282:	2800      	cmp	r0, #0
    e284:	d1a3      	bne.n	e1ce <bt_init+0x102>
		le_read_supp_states_complete(rsp);
    e286:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    e288:	6883      	ldr	r3, [r0, #8]
    e28a:	f8d3 2001 	ldr.w	r2, [r3, #1]
    e28e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    e292:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    e296:	f011 f833 	bl	1f300 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    e29a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    e29e:	069b      	lsls	r3, r3, #26
    e2a0:	d523      	bpl.n	e2ea <bt_init+0x21e>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    e2a2:	a901      	add	r1, sp, #4
    e2a4:	4668      	mov	r0, sp
    e2a6:	f7ff f925 	bl	d4f4 <hci_le_read_max_data_len>
		if (err) {
    e2aa:	4604      	mov	r4, r0
    e2ac:	2800      	cmp	r0, #0
    e2ae:	d18e      	bne.n	e1ce <bt_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    e2b0:	2104      	movs	r1, #4
    e2b2:	f242 0024 	movw	r0, #8228	; 0x2024
    e2b6:	f7ff f85b 	bl	d370 <bt_hci_cmd_create>
		if (!buf) {
    e2ba:	4606      	mov	r6, r0
    e2bc:	2800      	cmp	r0, #0
    e2be:	f000 80bd 	beq.w	e43c <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    e2c2:	2104      	movs	r1, #4
    e2c4:	3008      	adds	r0, #8
    e2c6:	f01b fe04 	bl	29ed2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    e2ca:	f8bd 3000 	ldrh.w	r3, [sp]
    e2ce:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    e2d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e2d4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    e2d6:	4622      	mov	r2, r4
    e2d8:	4631      	mov	r1, r6
    e2da:	f242 0024 	movw	r0, #8228	; 0x2024
    e2de:	f7ff f881 	bl	d3e4 <bt_hci_cmd_send_sync>
		if (err) {
    e2e2:	4604      	mov	r4, r0
    e2e4:	2800      	cmp	r0, #0
    e2e6:	f47f af72 	bne.w	e1ce <bt_init+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    e2ea:	2108      	movs	r1, #8
    e2ec:	f242 0001 	movw	r0, #8193	; 0x2001
    e2f0:	f7ff f83e 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    e2f4:	4604      	mov	r4, r0
    e2f6:	2800      	cmp	r0, #0
    e2f8:	f000 80a0 	beq.w	e43c <bt_init+0x370>
    e2fc:	2108      	movs	r1, #8
    e2fe:	4408      	add	r0, r1
    e300:	f01b fde7 	bl	29ed2 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    e304:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    e308:	f012 0f02 	tst.w	r2, #2
    e30c:	bf14      	ite	ne
    e30e:	232f      	movne	r3, #47	; 0x2f
    e310:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    e312:	0696      	lsls	r6, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    e314:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    e318:	bf48      	it	mi
    e31a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    e31e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    e322:	bf18      	it	ne
    e324:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    e328:	2200      	movs	r2, #0
    e32a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    e32c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e330:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    e332:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    e334:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    e336:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    e338:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    e33a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    e33c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    e33e:	4621      	mov	r1, r4
    e340:	f242 0001 	movw	r0, #8193	; 0x2001
    e344:	f7ff f84e 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e348:	4604      	mov	r4, r0
    e34a:	2800      	cmp	r0, #0
    e34c:	f47f af3f 	bne.w	e1ce <bt_init+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    e350:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    e354:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    e358:	0698      	lsls	r0, r3, #26
    e35a:	f100 8084 	bmi.w	e466 <bt_init+0x39a>
	if (bt_dev.le.acl_mtu) {
    e35e:	b9d9      	cbnz	r1, e398 <bt_init+0x2cc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    e360:	aa02      	add	r2, sp, #8
    e362:	f241 0005 	movw	r0, #4101	; 0x1005
    e366:	f7ff f83d 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e36a:	4604      	mov	r4, r0
    e36c:	2800      	cmp	r0, #0
    e36e:	f47f af2e 	bne.w	e1ce <bt_init+0x102>
	if (bt_dev.le.acl_mtu) {
    e372:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    e376:	b963      	cbnz	r3, e392 <bt_init+0x2c6>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    e378:	9b02      	ldr	r3, [sp, #8]
    e37a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    e37c:	785a      	ldrb	r2, [r3, #1]
    e37e:	7899      	ldrb	r1, [r3, #2]
    e380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e384:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    e388:	889a      	ldrh	r2, [r3, #4]
    e38a:	485f      	ldr	r0, [pc, #380]	; (e508 <bt_init+0x43c>)
    e38c:	4611      	mov	r1, r2
    e38e:	f01c fccf 	bl	2ad30 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    e392:	9802      	ldr	r0, [sp, #8]
    e394:	f010 ffb4 	bl	1f300 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    e398:	2108      	movs	r1, #8
    e39a:	f640 4001 	movw	r0, #3073	; 0xc01
    e39e:	f7fe ffe7 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    e3a2:	4604      	mov	r4, r0
    e3a4:	2800      	cmp	r0, #0
    e3a6:	d049      	beq.n	e43c <bt_init+0x370>
    e3a8:	2108      	movs	r1, #8
    e3aa:	4408      	add	r0, r1
    e3ac:	f01b fd91 	bl	29ed2 <net_buf_simple_add>
	dst[0] = val;
    e3b0:	2310      	movs	r3, #16
    e3b2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    e3b4:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    e3b6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    e3b8:	7043      	strb	r3, [r0, #1]
    e3ba:	2602      	movs	r6, #2
    e3bc:	2320      	movs	r3, #32
	dst[0] = val;
    e3be:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    e3c0:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    e3c2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    e3c4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    e3c6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    e3c8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    e3ca:	4621      	mov	r1, r4
    e3cc:	f640 4001 	movw	r0, #3073	; 0xc01
    e3d0:	f7ff f808 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e3d4:	4604      	mov	r4, r0
    e3d6:	2800      	cmp	r0, #0
    e3d8:	f47f aef9 	bne.w	e1ce <bt_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    e3dc:	4601      	mov	r1, r0
    e3de:	466a      	mov	r2, sp
    e3e0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    e3e4:	f7fe fffe 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e3e8:	4604      	mov	r4, r0
    e3ea:	2800      	cmp	r0, #0
    e3ec:	d050      	beq.n	e490 <bt_init+0x3c4>
		BT_WARN("Vendor HCI extensions not available");
    e3ee:	4847      	ldr	r0, [pc, #284]	; (e50c <bt_init+0x440>)
    e3f0:	6803      	ldr	r3, [r0, #0]
    e3f2:	f013 0f06 	tst.w	r3, #6
    e3f6:	d00b      	beq.n	e410 <bt_init+0x344>
    e3f8:	4b45      	ldr	r3, [pc, #276]	; (e510 <bt_init+0x444>)
			BT_WARN("Failed to read supported vendor features");
    e3fa:	9306      	str	r3, [sp, #24]
    e3fc:	4b45      	ldr	r3, [pc, #276]	; (e514 <bt_init+0x448>)
    e3fe:	9307      	str	r3, [sp, #28]
    e400:	aa05      	add	r2, sp, #20
    e402:	2303      	movs	r3, #3
    e404:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e408:	9301      	str	r3, [sp, #4]
    e40a:	9305      	str	r3, [sp, #20]
    e40c:	f01a fad1 	bl	289b2 <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    e410:	f000 fbca 	bl	eba8 <bt_id_init>
	if (err) {
    e414:	4604      	mov	r4, r0
    e416:	2800      	cmp	r0, #0
    e418:	f47f aed9 	bne.w	e1ce <bt_init+0x102>
		err = bt_conn_init();
    e41c:	f001 fdfe 	bl	1001c <bt_conn_init>
		if (err) {
    e420:	4604      	mov	r4, r0
    e422:	2800      	cmp	r0, #0
    e424:	f47f aed3 	bne.w	e1ce <bt_init+0x102>
	bt_finalize_init();
    e428:	f7ff fe44 	bl	e0b4 <bt_finalize_init>
	return 0;
    e42c:	e6cf      	b.n	e1ce <bt_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    e42e:	2102      	movs	r1, #2
    e430:	f640 406d 	movw	r0, #3181	; 0xc6d
    e434:	f7fe ff9c 	bl	d370 <bt_hci_cmd_create>
		if (!buf) {
    e438:	4604      	mov	r4, r0
    e43a:	b910      	cbnz	r0, e442 <bt_init+0x376>
		return -ENOBUFS;
    e43c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e440:	e6c5      	b.n	e1ce <bt_init+0x102>
    e442:	2102      	movs	r1, #2
    e444:	3008      	adds	r0, #8
    e446:	f01b fd44 	bl	29ed2 <net_buf_simple_add>
		cp_le->le = 0x01;
    e44a:	2301      	movs	r3, #1
    e44c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    e44e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    e450:	4621      	mov	r1, r4
    e452:	4632      	mov	r2, r6
    e454:	f640 406d 	movw	r0, #3181	; 0xc6d
    e458:	f7fe ffc4 	bl	d3e4 <bt_hci_cmd_send_sync>
		if (err) {
    e45c:	4604      	mov	r4, r0
    e45e:	2800      	cmp	r0, #0
    e460:	f43f af04 	beq.w	e26c <bt_init+0x1a0>
    e464:	e6b3      	b.n	e1ce <bt_init+0x102>
	else if (!bt_dev.le.acl_mtu) {
    e466:	2900      	cmp	r1, #0
    e468:	d196      	bne.n	e398 <bt_init+0x2cc>
		BT_ERR("ACL BR/EDR buffers not initialized");
    e46a:	4828      	ldr	r0, [pc, #160]	; (e50c <bt_init+0x440>)
    e46c:	6803      	ldr	r3, [r0, #0]
    e46e:	075a      	lsls	r2, r3, #29
    e470:	d00b      	beq.n	e48a <bt_init+0x3be>
    e472:	4b29      	ldr	r3, [pc, #164]	; (e518 <bt_init+0x44c>)
    e474:	9306      	str	r3, [sp, #24]
    e476:	4b29      	ldr	r3, [pc, #164]	; (e51c <bt_init+0x450>)
    e478:	9307      	str	r3, [sp, #28]
    e47a:	aa05      	add	r2, sp, #20
    e47c:	2303      	movs	r3, #3
    e47e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e482:	9301      	str	r3, [sp, #4]
    e484:	9305      	str	r3, [sp, #20]
    e486:	f01a fa94 	bl	289b2 <z_log_msg2_static_create.constprop.0>
		return -EIO;
    e48a:	f06f 0404 	mvn.w	r4, #4
    e48e:	e69e      	b.n	e1ce <bt_init+0x102>
	net_buf_unref(rsp);
    e490:	9800      	ldr	r0, [sp, #0]
    e492:	f010 ff35 	bl	1f300 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    e496:	4621      	mov	r1, r4
    e498:	466a      	mov	r2, sp
    e49a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    e49e:	f7fe ffa1 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e4a2:	4604      	mov	r4, r0
    e4a4:	b130      	cbz	r0, e4b4 <bt_init+0x3e8>
		BT_WARN("Failed to read supported vendor commands");
    e4a6:	4819      	ldr	r0, [pc, #100]	; (e50c <bt_init+0x440>)
    e4a8:	6803      	ldr	r3, [r0, #0]
    e4aa:	f013 0f06 	tst.w	r3, #6
    e4ae:	d0af      	beq.n	e410 <bt_init+0x344>
    e4b0:	4b1b      	ldr	r3, [pc, #108]	; (e520 <bt_init+0x454>)
    e4b2:	e7a2      	b.n	e3fa <bt_init+0x32e>
	rp.cmds = (void *)rsp->data;
    e4b4:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    e4b6:	481b      	ldr	r0, [pc, #108]	; (e524 <bt_init+0x458>)
    e4b8:	6899      	ldr	r1, [r3, #8]
    e4ba:	4632      	mov	r2, r6
    e4bc:	3101      	adds	r1, #1
    e4be:	f01a f977 	bl	287b0 <memcpy>
	net_buf_unref(rsp);
    e4c2:	9800      	ldr	r0, [sp, #0]
    e4c4:	f010 ff1c 	bl	1f300 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    e4c8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    e4cc:	075b      	lsls	r3, r3, #29
    e4ce:	d59f      	bpl.n	e410 <bt_init+0x344>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    e4d0:	466a      	mov	r2, sp
    e4d2:	4621      	mov	r1, r4
    e4d4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    e4d8:	f7fe ff84 	bl	d3e4 <bt_hci_cmd_send_sync>
		if (err) {
    e4dc:	b130      	cbz	r0, e4ec <bt_init+0x420>
			BT_WARN("Failed to read supported vendor features");
    e4de:	480b      	ldr	r0, [pc, #44]	; (e50c <bt_init+0x440>)
    e4e0:	6803      	ldr	r3, [r0, #0]
    e4e2:	f013 0f06 	tst.w	r3, #6
    e4e6:	d093      	beq.n	e410 <bt_init+0x344>
    e4e8:	4b0f      	ldr	r3, [pc, #60]	; (e528 <bt_init+0x45c>)
    e4ea:	e786      	b.n	e3fa <bt_init+0x32e>
		rp.feat = (void *)rsp->data;
    e4ec:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    e4ee:	480f      	ldr	r0, [pc, #60]	; (e52c <bt_init+0x460>)
    e4f0:	6899      	ldr	r1, [r3, #8]
    e4f2:	2201      	movs	r2, #1
    e4f4:	4411      	add	r1, r2
    e4f6:	f01a f95b 	bl	287b0 <memcpy>
		net_buf_unref(rsp);
    e4fa:	9800      	ldr	r0, [sp, #0]
    e4fc:	f010 ff00 	bl	1f300 <net_buf_unref>
    e500:	e786      	b.n	e410 <bt_init+0x344>
    e502:	bf00      	nop
    e504:	200000d0 	.word	0x200000d0
    e508:	20000100 	.word	0x20000100
    e50c:	20000994 	.word	0x20000994
    e510:	0003069d 	.word	0x0003069d
    e514:	000308a1 	.word	0x000308a1
    e518:	00030676 	.word	0x00030676
    e51c:	000308ce 	.word	0x000308ce
    e520:	000306c5 	.word	0x000306c5
    e524:	200000b9 	.word	0x200000b9
    e528:	000306f2 	.word	0x000306f2
    e52c:	200000b8 	.word	0x200000b8

0000e530 <init_work>:

static void init_work(struct k_work *work)
{
    e530:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    e532:	f7ff fdcb 	bl	e0cc <bt_init>
	if (ready_cb) {
    e536:	4b03      	ldr	r3, [pc, #12]	; (e544 <init_work+0x14>)
    e538:	681b      	ldr	r3, [r3, #0]
    e53a:	b113      	cbz	r3, e542 <init_work+0x12>
		ready_cb(err);
	}
}
    e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    e540:	4718      	bx	r3
}
    e542:	bd10      	pop	{r4, pc}
    e544:	20003fdc 	.word	0x20003fdc

0000e548 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    e548:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    e54a:	4d33      	ldr	r5, [pc, #204]	; (e618 <bt_enable+0xd0>)
{
    e54c:	b091      	sub	sp, #68	; 0x44
	if (!bt_dev.drv) {
    e54e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    e552:	af08      	add	r7, sp, #32
    e554:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    e556:	b99b      	cbnz	r3, e580 <bt_enable+0x38>
		BT_ERR("No HCI driver registered");
    e558:	4830      	ldr	r0, [pc, #192]	; (e61c <bt_enable+0xd4>)
    e55a:	6803      	ldr	r3, [r0, #0]
    e55c:	075a      	lsls	r2, r3, #29
    e55e:	d00c      	beq.n	e57a <bt_enable+0x32>
    e560:	4b2f      	ldr	r3, [pc, #188]	; (e620 <bt_enable+0xd8>)
    e562:	61bb      	str	r3, [r7, #24]
    e564:	4b2f      	ldr	r3, [pc, #188]	; (e624 <bt_enable+0xdc>)
    e566:	61fb      	str	r3, [r7, #28]
    e568:	f107 0214 	add.w	r2, r7, #20
    e56c:	2303      	movs	r3, #3
    e56e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e572:	607b      	str	r3, [r7, #4]
    e574:	617b      	str	r3, [r7, #20]
    e576:	f01a fa1c 	bl	289b2 <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    e57a:	f06f 0412 	mvn.w	r4, #18
    e57e:	e03a      	b.n	e5f6 <bt_enable+0xae>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e580:	2101      	movs	r1, #1
    e582:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    e586:	f01a fa05 	bl	28994 <atomic_or>
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e58a:	ea10 0301 	ands.w	r3, r0, r1
    e58e:	d140      	bne.n	e612 <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    e590:	4a25      	ldr	r2, [pc, #148]	; (e628 <bt_enable+0xe0>)
    e592:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e594:	2000      	movs	r0, #0
    e596:	2100      	movs	r1, #0
    e598:	f06f 0208 	mvn.w	r2, #8
    e59c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    e5a0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e5a4:	e9cd 3300 	strd	r3, r3, [sp]
    e5a8:	9304      	str	r3, [sp, #16]
    e5aa:	4920      	ldr	r1, [pc, #128]	; (e62c <bt_enable+0xe4>)
    e5ac:	4b20      	ldr	r3, [pc, #128]	; (e630 <bt_enable+0xe8>)
    e5ae:	4821      	ldr	r0, [pc, #132]	; (e634 <bt_enable+0xec>)
    e5b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e5b4:	f016 f856 	bl	24664 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e5b8:	491f      	ldr	r1, [pc, #124]	; (e638 <bt_enable+0xf0>)
    e5ba:	481e      	ldr	r0, [pc, #120]	; (e634 <bt_enable+0xec>)
    e5bc:	f015 ffa0 	bl	24500 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    e5c0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    e5c4:	68db      	ldr	r3, [r3, #12]
    e5c6:	4798      	blx	r3
	if (err) {
    e5c8:	4604      	mov	r4, r0
    e5ca:	b1c0      	cbz	r0, e5fe <bt_enable+0xb6>
		BT_ERR("HCI driver open failed (%d)", err);
    e5cc:	4813      	ldr	r0, [pc, #76]	; (e61c <bt_enable+0xd4>)
    e5ce:	6803      	ldr	r3, [r0, #0]
    e5d0:	075b      	lsls	r3, r3, #29
    e5d2:	d010      	beq.n	e5f6 <bt_enable+0xae>
    e5d4:	466d      	mov	r5, sp
    e5d6:	4b19      	ldr	r3, [pc, #100]	; (e63c <bt_enable+0xf4>)
    e5d8:	612b      	str	r3, [r5, #16]
    e5da:	4b12      	ldr	r3, [pc, #72]	; (e624 <bt_enable+0xdc>)
    e5dc:	462a      	mov	r2, r5
    e5de:	e9c5 3405 	strd	r3, r4, [r5, #20]
    e5e2:	2304      	movs	r3, #4
    e5e4:	b088      	sub	sp, #32
    e5e6:	f842 3f0c 	str.w	r3, [r2, #12]!
    e5ea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e5ee:	60bb      	str	r3, [r7, #8]
    e5f0:	f01a f9df 	bl	289b2 <z_log_msg2_static_create.constprop.0>
    e5f4:	46ad      	mov	sp, r5
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    e5f6:	4620      	mov	r0, r4
    e5f8:	3724      	adds	r7, #36	; 0x24
    e5fa:	46bd      	mov	sp, r7
    e5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!cb) {
    e5fe:	b91e      	cbnz	r6, e608 <bt_enable+0xc0>
		return bt_init();
    e600:	f7ff fd64 	bl	e0cc <bt_init>
    e604:	4604      	mov	r4, r0
    e606:	e7f6      	b.n	e5f6 <bt_enable+0xae>
	k_work_submit(&bt_dev.init);
    e608:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e60c:	f016 fb2a 	bl	24c64 <k_work_submit>
	return 0;
    e610:	e7f1      	b.n	e5f6 <bt_enable+0xae>
		return -EALREADY;
    e612:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e616:	e7ee      	b.n	e5f6 <bt_enable+0xae>
    e618:	20000000 	.word	0x20000000
    e61c:	20000994 	.word	0x20000994
    e620:	0003071f 	.word	0x0003071f
    e624:	000308e6 	.word	0x000308e6
    e628:	20003fdc 	.word	0x20003fdc
    e62c:	20008000 	.word	0x20008000
    e630:	0000dc21 	.word	0x0000dc21
    e634:	20002e88 	.word	0x20002e88
    e638:	0003073c 	.word	0x0003073c
    e63c:	00030742 	.word	0x00030742

0000e640 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    e640:	4800      	ldr	r0, [pc, #0]	; (e644 <bt_get_name+0x4>)
    e642:	4770      	bx	lr
    e644:	0002e31b 	.word	0x0002e31b

0000e648 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e64a:	4f0b      	ldr	r7, [pc, #44]	; (e678 <id_find+0x30>)
{
    e64c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    e64e:	2500      	movs	r5, #0
    e650:	79fb      	ldrb	r3, [r7, #7]
    e652:	b2ec      	uxtb	r4, r5
    e654:	42a3      	cmp	r3, r4
    e656:	d802      	bhi.n	e65e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e658:	f06f 0401 	mvn.w	r4, #1
    e65c:	e009      	b.n	e672 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e65e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    e662:	2207      	movs	r2, #7
    e664:	4439      	add	r1, r7
    e666:	4630      	mov	r0, r6
    e668:	f01a f879 	bl	2875e <memcmp>
    e66c:	3501      	adds	r5, #1
    e66e:	2800      	cmp	r0, #0
    e670:	d1ee      	bne.n	e650 <id_find+0x8>
}
    e672:	4620      	mov	r0, r4
    e674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e676:	bf00      	nop
    e678:	20000000 	.word	0x20000000

0000e67c <set_random_address>:
{
    e67c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    e67e:	4914      	ldr	r1, [pc, #80]	; (e6d0 <set_random_address+0x54>)
    e680:	2206      	movs	r2, #6
    e682:	4605      	mov	r5, r0
    e684:	f01a f86b 	bl	2875e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e688:	4604      	mov	r4, r0
    e68a:	b1e0      	cbz	r0, e6c6 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e68c:	2106      	movs	r1, #6
    e68e:	f242 0005 	movw	r0, #8197	; 0x2005
    e692:	f7fe fe6d 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    e696:	4604      	mov	r4, r0
    e698:	b1b8      	cbz	r0, e6ca <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e69a:	2206      	movs	r2, #6
    e69c:	4629      	mov	r1, r5
    e69e:	3008      	adds	r0, #8
    e6a0:	f01b fc1d 	bl	29ede <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e6a4:	4621      	mov	r1, r4
    e6a6:	2200      	movs	r2, #0
    e6a8:	f242 0005 	movw	r0, #8197	; 0x2005
    e6ac:	f7fe fe9a 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e6b0:	4604      	mov	r4, r0
    e6b2:	b940      	cbnz	r0, e6c6 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    e6b4:	2206      	movs	r2, #6
    e6b6:	4806      	ldr	r0, [pc, #24]	; (e6d0 <set_random_address+0x54>)
    e6b8:	4629      	mov	r1, r5
    e6ba:	f01a f879 	bl	287b0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e6be:	4b05      	ldr	r3, [pc, #20]	; (e6d4 <set_random_address+0x58>)
    e6c0:	2201      	movs	r2, #1
    e6c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    e6c6:	4620      	mov	r0, r4
    e6c8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    e6ca:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e6ce:	e7fa      	b.n	e6c6 <set_random_address+0x4a>
    e6d0:	20000061 	.word	0x20000061
    e6d4:	20000000 	.word	0x20000000

0000e6d8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e6d8:	b530      	push	{r4, r5, lr}
    e6da:	4604      	mov	r4, r0
    e6dc:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e6de:	460d      	mov	r5, r1
    e6e0:	b1a1      	cbz	r1, e70c <id_create.constprop.0+0x34>
    e6e2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    e6e4:	2207      	movs	r2, #7
    e6e6:	a902      	add	r1, sp, #8
    e6e8:	4628      	mov	r0, r5
    e6ea:	9302      	str	r3, [sp, #8]
    e6ec:	f8cd 300b 	str.w	r3, [sp, #11]
    e6f0:	f01a f835 	bl	2875e <memcmp>
    e6f4:	b150      	cbz	r0, e70c <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    e6f6:	4812      	ldr	r0, [pc, #72]	; (e740 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e6f8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e6fc:	2207      	movs	r2, #7
    e6fe:	4629      	mov	r1, r5
    e700:	4420      	add	r0, r4
    e702:	f01a f855 	bl	287b0 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    e706:	2000      	movs	r0, #0
}
    e708:	b005      	add	sp, #20
    e70a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    e70c:	4668      	mov	r0, sp
    e70e:	f01a f91e 	bl	2894e <bt_addr_le_create_static>
			if (err) {
    e712:	2800      	cmp	r0, #0
    e714:	d1f8      	bne.n	e708 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    e716:	4668      	mov	r0, sp
    e718:	f7ff ff96 	bl	e648 <id_find>
    e71c:	2800      	cmp	r0, #0
    e71e:	daf5      	bge.n	e70c <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e720:	4807      	ldr	r0, [pc, #28]	; (e740 <id_create.constprop.0+0x68>)
    e722:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e726:	4404      	add	r4, r0
    e728:	2207      	movs	r2, #7
    e72a:	4669      	mov	r1, sp
    e72c:	4620      	mov	r0, r4
    e72e:	f01a f83f 	bl	287b0 <memcpy>
		if (addr) {
    e732:	2d00      	cmp	r5, #0
    e734:	d0e7      	beq.n	e706 <id_create.constprop.0+0x2e>
    e736:	2207      	movs	r2, #7
    e738:	4621      	mov	r1, r4
    e73a:	4628      	mov	r0, r5
    e73c:	e7e1      	b.n	e702 <id_create.constprop.0+0x2a>
    e73e:	bf00      	nop
    e740:	20000000 	.word	0x20000000

0000e744 <bt_id_adv_random_addr_check>:
{
    e744:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e746:	4805      	ldr	r0, [pc, #20]	; (e75c <bt_id_adv_random_addr_check+0x18>)
    e748:	f01a fa39 	bl	28bbe <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    e74c:	0503      	lsls	r3, r0, #20
    e74e:	d402      	bmi.n	e756 <bt_id_adv_random_addr_check+0x12>
    e750:	4802      	ldr	r0, [pc, #8]	; (e75c <bt_id_adv_random_addr_check+0x18>)
    e752:	f01a fa34 	bl	28bbe <atomic_get>
}
    e756:	2001      	movs	r0, #1
    e758:	bd08      	pop	{r3, pc}
    e75a:	bf00      	nop
    e75c:	200000cc 	.word	0x200000cc

0000e760 <bt_id_get>:
{
    e760:	b538      	push	{r3, r4, r5, lr}
    e762:	460d      	mov	r5, r1
		size_t to_copy = MIN(*count, bt_dev.id_count);
    e764:	4906      	ldr	r1, [pc, #24]	; (e780 <bt_id_get+0x20>)
    e766:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
    e768:	b138      	cbz	r0, e77a <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
    e76a:	682b      	ldr	r3, [r5, #0]
    e76c:	429c      	cmp	r4, r3
    e76e:	bf28      	it	cs
    e770:	461c      	movcs	r4, r3
		memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
    e772:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    e776:	f01a f81b 	bl	287b0 <memcpy>
		*count = bt_dev.id_count;
    e77a:	602c      	str	r4, [r5, #0]
}
    e77c:	bd38      	pop	{r3, r4, r5, pc}
    e77e:	bf00      	nop
    e780:	20000000 	.word	0x20000000

0000e784 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    e784:	b570      	push	{r4, r5, r6, lr}
    e786:	460c      	mov	r4, r1
    e788:	b08a      	sub	sp, #40	; 0x28
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e78a:	4605      	mov	r5, r0
    e78c:	b918      	cbnz	r0, e796 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    e78e:	b374      	cbz	r4, e7ee <bt_id_create+0x6a>
		return -EINVAL;
    e790:	f06f 0015 	mvn.w	r0, #21
    e794:	e029      	b.n	e7ea <bt_id_create+0x66>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e796:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    e798:	2207      	movs	r2, #7
    e79a:	a902      	add	r1, sp, #8
    e79c:	9302      	str	r3, [sp, #8]
    e79e:	f8cd 300b 	str.w	r3, [sp, #11]
    e7a2:	f019 ffdc 	bl	2875e <memcmp>
    e7a6:	2800      	cmp	r0, #0
    e7a8:	d0f1      	beq.n	e78e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    e7aa:	782b      	ldrb	r3, [r5, #0]
    e7ac:	2b01      	cmp	r3, #1
    e7ae:	d104      	bne.n	e7ba <bt_id_create+0x36>
    e7b0:	79ab      	ldrb	r3, [r5, #6]
    e7b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e7b6:	2bc0      	cmp	r3, #192	; 0xc0
    e7b8:	d010      	beq.n	e7dc <bt_id_create+0x58>
			BT_ERR("Only static random identity address supported");
    e7ba:	481f      	ldr	r0, [pc, #124]	; (e838 <bt_id_create+0xb4>)
    e7bc:	6803      	ldr	r3, [r0, #0]
    e7be:	075a      	lsls	r2, r3, #29
    e7c0:	d0e6      	beq.n	e790 <bt_id_create+0xc>
    e7c2:	4b1e      	ldr	r3, [pc, #120]	; (e83c <bt_id_create+0xb8>)
    e7c4:	9308      	str	r3, [sp, #32]
    e7c6:	4b1e      	ldr	r3, [pc, #120]	; (e840 <bt_id_create+0xbc>)
    e7c8:	9309      	str	r3, [sp, #36]	; 0x24
    e7ca:	aa07      	add	r2, sp, #28
    e7cc:	2303      	movs	r3, #3
    e7ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e7d2:	9301      	str	r3, [sp, #4]
    e7d4:	9307      	str	r3, [sp, #28]
    e7d6:	f01a f9f8 	bl	28bca <z_log_msg2_static_create.constprop.0>
    e7da:	e7d9      	b.n	e790 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    e7dc:	4628      	mov	r0, r5
    e7de:	f7ff ff33 	bl	e648 <id_find>
    e7e2:	2800      	cmp	r0, #0
    e7e4:	dbd3      	blt.n	e78e <bt_id_create+0xa>
			return -EALREADY;
    e7e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    e7ea:	b00a      	add	sp, #40	; 0x28
    e7ec:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    e7ee:	4e15      	ldr	r6, [pc, #84]	; (e844 <bt_id_create+0xc0>)
    e7f0:	79f3      	ldrb	r3, [r6, #7]
    e7f2:	2b01      	cmp	r3, #1
    e7f4:	d01c      	beq.n	e830 <bt_id_create+0xac>
    e7f6:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    e7fa:	f01a f9e0 	bl	28bbe <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e7fe:	07c3      	lsls	r3, r0, #31
    e800:	d40b      	bmi.n	e81a <bt_id_create+0x96>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    e802:	2d00      	cmp	r5, #0
    e804:	d0c4      	beq.n	e790 <bt_id_create+0xc>
    e806:	2207      	movs	r2, #7
    e808:	a904      	add	r1, sp, #16
    e80a:	4628      	mov	r0, r5
    e80c:	9404      	str	r4, [sp, #16]
    e80e:	f8cd 4013 	str.w	r4, [sp, #19]
    e812:	f019 ffa4 	bl	2875e <memcmp>
    e816:	2800      	cmp	r0, #0
    e818:	d0ba      	beq.n	e790 <bt_id_create+0xc>
	new_id = bt_dev.id_count++;
    e81a:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    e81c:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    e81e:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    e820:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    e822:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    e824:	f7ff ff58 	bl	e6d8 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    e828:	2800      	cmp	r0, #0
    e82a:	bf08      	it	eq
    e82c:	4620      	moveq	r0, r4
    e82e:	e7dc      	b.n	e7ea <bt_id_create+0x66>
		return -ENOMEM;
    e830:	f06f 000b 	mvn.w	r0, #11
    e834:	e7d9      	b.n	e7ea <bt_id_create+0x66>
    e836:	bf00      	nop
    e838:	20000998 	.word	0x20000998
    e83c:	00030949 	.word	0x00030949
    e840:	00030af0 	.word	0x00030af0
    e844:	20000000 	.word	0x20000000

0000e848 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    e848:	b570      	push	{r4, r5, r6, lr}
    e84a:	b08a      	sub	sp, #40	; 0x28
    e84c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    e84e:	aa01      	add	r2, sp, #4
    e850:	2100      	movs	r1, #0
    e852:	f241 0009 	movw	r0, #4105	; 0x1009
    e856:	f7fe fdc5 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e85a:	4604      	mov	r4, r0
    e85c:	b198      	cbz	r0, e886 <bt_id_read_public_addr+0x3e>
		BT_WARN("Failed to read public address");
    e85e:	4822      	ldr	r0, [pc, #136]	; (e8e8 <bt_id_read_public_addr+0xa0>)
    e860:	6803      	ldr	r3, [r0, #0]
    e862:	f013 0306 	ands.w	r3, r3, #6
    e866:	d03d      	beq.n	e8e4 <bt_id_read_public_addr+0x9c>
    e868:	4b20      	ldr	r3, [pc, #128]	; (e8ec <bt_id_read_public_addr+0xa4>)
    e86a:	9308      	str	r3, [sp, #32]
    e86c:	4b20      	ldr	r3, [pc, #128]	; (e8f0 <bt_id_read_public_addr+0xa8>)
    e86e:	9309      	str	r3, [sp, #36]	; 0x24
    e870:	aa07      	add	r2, sp, #28
    e872:	2303      	movs	r3, #3
    e874:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e878:	9302      	str	r3, [sp, #8]
    e87a:	9307      	str	r3, [sp, #28]
    e87c:	f01a f9a5 	bl	28bca <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    e880:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    e882:	b00a      	add	sp, #40	; 0x28
    e884:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e886:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e888:	689d      	ldr	r5, [r3, #8]
    e88a:	9002      	str	r0, [sp, #8]
    e88c:	3501      	adds	r5, #1
    e88e:	f8ad 000c 	strh.w	r0, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    e892:	2206      	movs	r2, #6
    e894:	a902      	add	r1, sp, #8
    e896:	4628      	mov	r0, r5
    e898:	f019 ff61 	bl	2875e <memcmp>
    e89c:	b918      	cbnz	r0, e8a6 <bt_id_read_public_addr+0x5e>
		net_buf_unref(rsp);
    e89e:	9801      	ldr	r0, [sp, #4]
    e8a0:	f010 fd2e 	bl	1f300 <net_buf_unref>
    e8a4:	e7ec      	b.n	e880 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    e8a6:	23ff      	movs	r3, #255	; 0xff
    e8a8:	2206      	movs	r2, #6
    e8aa:	a904      	add	r1, sp, #16
    e8ac:	4628      	mov	r0, r5
    e8ae:	f88d 3010 	strb.w	r3, [sp, #16]
    e8b2:	f88d 3011 	strb.w	r3, [sp, #17]
    e8b6:	f88d 3012 	strb.w	r3, [sp, #18]
    e8ba:	f88d 3013 	strb.w	r3, [sp, #19]
    e8be:	f88d 3014 	strb.w	r3, [sp, #20]
    e8c2:	f88d 3015 	strb.w	r3, [sp, #21]
    e8c6:	f019 ff4a 	bl	2875e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e8ca:	2800      	cmp	r0, #0
    e8cc:	d0e7      	beq.n	e89e <bt_id_read_public_addr+0x56>
	memcpy(dst, src, sizeof(*dst));
    e8ce:	2206      	movs	r2, #6
    e8d0:	4629      	mov	r1, r5
    e8d2:	1c70      	adds	r0, r6, #1
    e8d4:	f019 ff6c 	bl	287b0 <memcpy>
	net_buf_unref(rsp);
    e8d8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    e8da:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    e8dc:	f010 fd10 	bl	1f300 <net_buf_unref>
	return 1U;
    e8e0:	2001      	movs	r0, #1
    e8e2:	e7ce      	b.n	e882 <bt_id_read_public_addr+0x3a>
		return 0U;
    e8e4:	4618      	mov	r0, r3
    e8e6:	e7cc      	b.n	e882 <bt_id_read_public_addr+0x3a>
    e8e8:	20000998 	.word	0x20000998
    e8ec:	0003097b 	.word	0x0003097b
    e8f0:	00030ad9 	.word	0x00030ad9

0000e8f4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    e8f4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    e8f6:	4668      	mov	r0, sp
    e8f8:	f7ff ffa6 	bl	e848 <bt_id_read_public_addr>
    e8fc:	4b04      	ldr	r3, [pc, #16]	; (e910 <bt_setup_public_id_addr+0x1c>)
    e8fe:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    e900:	b118      	cbz	r0, e90a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    e902:	4669      	mov	r1, sp
    e904:	2000      	movs	r0, #0
    e906:	f7ff fee7 	bl	e6d8 <id_create.constprop.0>
}
    e90a:	b003      	add	sp, #12
    e90c:	f85d fb04 	ldr.w	pc, [sp], #4
    e910:	20000000 	.word	0x20000000

0000e914 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e918:	4b2c      	ldr	r3, [pc, #176]	; (e9cc <bt_read_static_addr+0xb8>)
    e91a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    e91e:	f014 0401 	ands.w	r4, r4, #1
{
    e922:	b088      	sub	sp, #32
    e924:	4607      	mov	r7, r0
    e926:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e928:	d116      	bne.n	e958 <bt_read_static_addr+0x44>
		BT_WARN("Read Static Addresses command not available");
    e92a:	4829      	ldr	r0, [pc, #164]	; (e9d0 <bt_read_static_addr+0xbc>)
    e92c:	6803      	ldr	r3, [r0, #0]
    e92e:	f013 0f06 	tst.w	r3, #6
    e932:	d104      	bne.n	e93e <bt_read_static_addr+0x2a>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
		return 0;
    e934:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    e936:	4620      	mov	r0, r4
    e938:	b008      	add	sp, #32
    e93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Read Static Addresses command not available");
    e93e:	4b25      	ldr	r3, [pc, #148]	; (e9d4 <bt_read_static_addr+0xc0>)
		BT_WARN("No static addresses stored in controller");
    e940:	9306      	str	r3, [sp, #24]
    e942:	4b25      	ldr	r3, [pc, #148]	; (e9d8 <bt_read_static_addr+0xc4>)
    e944:	9307      	str	r3, [sp, #28]
    e946:	aa05      	add	r2, sp, #20
    e948:	2303      	movs	r3, #3
    e94a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e94e:	9301      	str	r3, [sp, #4]
    e950:	9305      	str	r3, [sp, #20]
    e952:	f01a f93a 	bl	28bca <z_log_msg2_static_create.constprop.0>
    e956:	e7ee      	b.n	e936 <bt_read_static_addr+0x22>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    e958:	466a      	mov	r2, sp
    e95a:	2100      	movs	r1, #0
    e95c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    e960:	f7fe fd40 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    e964:	4605      	mov	r5, r0
    e966:	b188      	cbz	r0, e98c <bt_read_static_addr+0x78>
		BT_WARN("Failed to read static addresses");
    e968:	4819      	ldr	r0, [pc, #100]	; (e9d0 <bt_read_static_addr+0xbc>)
    e96a:	6803      	ldr	r3, [r0, #0]
    e96c:	f013 0f06 	tst.w	r3, #6
    e970:	d0e0      	beq.n	e934 <bt_read_static_addr+0x20>
    e972:	4b1a      	ldr	r3, [pc, #104]	; (e9dc <bt_read_static_addr+0xc8>)
    e974:	9306      	str	r3, [sp, #24]
    e976:	4b18      	ldr	r3, [pc, #96]	; (e9d8 <bt_read_static_addr+0xc4>)
    e978:	9307      	str	r3, [sp, #28]
    e97a:	aa05      	add	r2, sp, #20
    e97c:	2303      	movs	r3, #3
    e97e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e982:	9301      	str	r3, [sp, #4]
    e984:	9305      	str	r3, [sp, #20]
    e986:	f01a f920 	bl	28bca <z_log_msg2_static_create.constprop.0>
    e98a:	e7d3      	b.n	e934 <bt_read_static_addr+0x20>
	rp = (void *)rsp->data;
    e98c:	9b00      	ldr	r3, [sp, #0]
    e98e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    e990:	785c      	ldrb	r4, [r3, #1]
    e992:	42b4      	cmp	r4, r6
    e994:	bf28      	it	cs
    e996:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    e998:	f04f 0816 	mov.w	r8, #22
    e99c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    e99e:	42ac      	cmp	r4, r5
    e9a0:	dc0b      	bgt.n	e9ba <bt_read_static_addr+0xa6>
	net_buf_unref(rsp);
    e9a2:	9800      	ldr	r0, [sp, #0]
    e9a4:	f010 fcac 	bl	1f300 <net_buf_unref>
	if (!cnt) {
    e9a8:	2c00      	cmp	r4, #0
    e9aa:	d1c4      	bne.n	e936 <bt_read_static_addr+0x22>
		BT_WARN("No static addresses stored in controller");
    e9ac:	4808      	ldr	r0, [pc, #32]	; (e9d0 <bt_read_static_addr+0xbc>)
    e9ae:	6803      	ldr	r3, [r0, #0]
    e9b0:	f013 0f06 	tst.w	r3, #6
    e9b4:	d0be      	beq.n	e934 <bt_read_static_addr+0x20>
    e9b6:	4b0a      	ldr	r3, [pc, #40]	; (e9e0 <bt_read_static_addr+0xcc>)
    e9b8:	e7c2      	b.n	e940 <bt_read_static_addr+0x2c>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    e9ba:	fb08 7005 	mla	r0, r8, r5, r7
    e9be:	2216      	movs	r2, #22
    e9c0:	4631      	mov	r1, r6
    e9c2:	f019 fef5 	bl	287b0 <memcpy>
	for (i = 0; i < cnt; i++) {
    e9c6:	3501      	adds	r5, #1
    e9c8:	e7e9      	b.n	e99e <bt_read_static_addr+0x8a>
    e9ca:	bf00      	nop
    e9cc:	20000000 	.word	0x20000000
    e9d0:	20000998 	.word	0x20000998
    e9d4:	0003099d 	.word	0x0003099d
    e9d8:	00030ac5 	.word	0x00030ac5
    e9dc:	000309cd 	.word	0x000309cd
    e9e0:	000309f1 	.word	0x000309f1

0000e9e4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    e9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    e9e6:	4e15      	ldr	r6, [pc, #84]	; (ea3c <bt_setup_random_id_addr+0x58>)
    e9e8:	79f4      	ldrb	r4, [r6, #7]
{
    e9ea:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    e9ec:	b9f4      	cbnz	r4, ea2c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    e9ee:	2101      	movs	r1, #1
    e9f0:	a802      	add	r0, sp, #8
    e9f2:	f7ff ff8f 	bl	e914 <bt_read_static_addr>
    e9f6:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    e9f8:	b1c0      	cbz	r0, ea2c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    e9fa:	2716      	movs	r7, #22
    e9fc:	ab02      	add	r3, sp, #8
    e9fe:	b2e5      	uxtb	r5, r4
    ea00:	fb07 3105 	mla	r1, r7, r5, r3
    ea04:	2206      	movs	r2, #6
    ea06:	f10d 0001 	add.w	r0, sp, #1
    ea0a:	f019 fed1 	bl	287b0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    ea0e:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    ea10:	4669      	mov	r1, sp
    ea12:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    ea14:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    ea18:	f7ff fe5e 	bl	e6d8 <id_create.constprop.0>
				if (err) {
    ea1c:	b920      	cbnz	r0, ea28 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    ea1e:	79f2      	ldrb	r2, [r6, #7]
    ea20:	3401      	adds	r4, #1
    ea22:	b2e3      	uxtb	r3, r4
    ea24:	429a      	cmp	r2, r3
    ea26:	d8e9      	bhi.n	e9fc <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    ea28:	b009      	add	sp, #36	; 0x24
    ea2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    ea2c:	2100      	movs	r1, #0
    ea2e:	4608      	mov	r0, r1
}
    ea30:	b009      	add	sp, #36	; 0x24
    ea32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    ea36:	f7ff bea5 	b.w	e784 <bt_id_create>
    ea3a:	bf00      	nop
    ea3c:	20000000 	.word	0x20000000

0000ea40 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    ea40:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    ea42:	4c07      	ldr	r4, [pc, #28]	; (ea60 <bt_id_set_create_conn_own_addr+0x20>)
    ea44:	7823      	ldrb	r3, [r4, #0]
    ea46:	2b01      	cmp	r3, #1
{
    ea48:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    ea4a:	d003      	beq.n	ea54 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    ea4c:	7823      	ldrb	r3, [r4, #0]
    ea4e:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    ea50:	2000      	movs	r0, #0
}
    ea52:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    ea54:	1c60      	adds	r0, r4, #1
    ea56:	f7ff fe11 	bl	e67c <set_random_address>
			if (err) {
    ea5a:	2800      	cmp	r0, #0
    ea5c:	d0f6      	beq.n	ea4c <bt_id_set_create_conn_own_addr+0xc>
    ea5e:	e7f8      	b.n	ea52 <bt_id_set_create_conn_own_addr+0x12>
    ea60:	20000000 	.word	0x20000000

0000ea64 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    ea64:	b5f0      	push	{r4, r5, r6, r7, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    ea66:	4b17      	ldr	r3, [pc, #92]	; (eac4 <bt_id_set_scan_own_addr+0x60>)
{
    ea68:	b083      	sub	sp, #12
		*own_addr_type = bt_dev.id_addr[0].type;
    ea6a:	781b      	ldrb	r3, [r3, #0]
    ea6c:	700b      	strb	r3, [r1, #0]
{
    ea6e:	af00      	add	r7, sp, #0
    ea70:	4606      	mov	r6, r0
    ea72:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    ea74:	f01a f8ac 	bl	28bd0 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    ea78:	b9f8      	cbnz	r0, eaba <bt_id_set_scan_own_addr+0x56>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    ea7a:	f01a f8b5 	bl	28be8 <bt_id_set_private_addr>
			if (err) {
    ea7e:	4604      	mov	r4, r0
    ea80:	b1c8      	cbz	r0, eab6 <bt_id_set_scan_own_addr+0x52>
				if (active_scan || !is_adv_using_rand_addr()) {
    ea82:	b9de      	cbnz	r6, eabc <bt_id_set_scan_own_addr+0x58>
    ea84:	f01a f8a4 	bl	28bd0 <is_adv_using_rand_addr>
    ea88:	b1c0      	cbz	r0, eabc <bt_id_set_scan_own_addr+0x58>
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    ea8a:	480f      	ldr	r0, [pc, #60]	; (eac8 <bt_id_set_scan_own_addr+0x64>)
    ea8c:	6803      	ldr	r3, [r0, #0]
    ea8e:	f013 0f06 	tst.w	r3, #6
    ea92:	d010      	beq.n	eab6 <bt_id_set_scan_own_addr+0x52>
    ea94:	466e      	mov	r6, sp
    ea96:	b088      	sub	sp, #32
    ea98:	466a      	mov	r2, sp
    ea9a:	4b0c      	ldr	r3, [pc, #48]	; (eacc <bt_id_set_scan_own_addr+0x68>)
    ea9c:	6113      	str	r3, [r2, #16]
    ea9e:	4b0c      	ldr	r3, [pc, #48]	; (ead0 <bt_id_set_scan_own_addr+0x6c>)
    eaa0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    eaa4:	2304      	movs	r3, #4
    eaa6:	f842 3f0c 	str.w	r3, [r2, #12]!
    eaaa:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    eaae:	607b      	str	r3, [r7, #4]
    eab0:	f01a f88b 	bl	28bca <z_log_msg2_static_create.constprop.0>
    eab4:	46b5      	mov	sp, r6
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    eab6:	2301      	movs	r3, #1
    eab8:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    eaba:	2400      	movs	r4, #0
}
    eabc:	4620      	mov	r0, r4
    eabe:	370c      	adds	r7, #12
    eac0:	46bd      	mov	sp, r7
    eac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eac4:	20000000 	.word	0x20000000
    eac8:	20000998 	.word	0x20000998
    eacc:	00030a1e 	.word	0x00030a1e
    ead0:	00030aad 	.word	0x00030aad

0000ead4 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    ead4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    ead8:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    eadc:	7806      	ldrb	r6, [r0, #0]
{
    eade:	4680      	mov	r8, r0
    eae0:	460d      	mov	r5, r1
    eae2:	4691      	mov	r9, r2
    eae4:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    eae6:	d02b      	beq.n	eb40 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    eae8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; eba0 <bt_id_set_adv_own_addr+0xcc>
    eaec:	b12a      	cbz	r2, eafa <bt_id_set_adv_own_addr+0x26>
    eaee:	0688      	lsls	r0, r1, #26
    eaf0:	d503      	bpl.n	eafa <bt_id_set_adv_own_addr+0x26>
    eaf2:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    eaf6:	0659      	lsls	r1, r3, #25
    eaf8:	d54f      	bpl.n	eb9a <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    eafa:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    eafe:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    eb02:	f818 3003 	ldrb.w	r3, [r8, r3]
    eb06:	2b01      	cmp	r3, #1
    eb08:	d009      	beq.n	eb1e <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    eb0a:	ebaa 0606 	sub.w	r6, sl, r6
    eb0e:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    eb12:	f1b9 0f00 	cmp.w	r9, #0
    eb16:	d10e      	bne.n	eb36 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    eb18:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    eb1a:	2400      	movs	r4, #0
    eb1c:	e008      	b.n	eb30 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    eb1e:	2007      	movs	r0, #7
    eb20:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    eb24:	4440      	add	r0, r8
    eb26:	f7ff fda9 	bl	e67c <set_random_address>
				if (err) {
    eb2a:	4604      	mov	r4, r0
    eb2c:	2800      	cmp	r0, #0
    eb2e:	d0ec      	beq.n	eb0a <bt_id_set_adv_own_addr+0x36>
}
    eb30:	4620      	mov	r0, r4
    eb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    eb36:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    eb38:	bf48      	it	mi
    eb3a:	f043 0302 	orrmi.w	r3, r3, #2
    eb3e:	e7eb      	b.n	eb18 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    eb40:	f011 0504 	ands.w	r5, r1, #4
    eb44:	d014      	beq.n	eb70 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    eb46:	f8df 8058 	ldr.w	r8, [pc, #88]	; eba0 <bt_id_set_adv_own_addr+0xcc>
    eb4a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    eb4e:	00f5      	lsls	r5, r6, #3
    eb50:	f818 3003 	ldrb.w	r3, [r8, r3]
    eb54:	2b01      	cmp	r3, #1
    eb56:	d106      	bne.n	eb66 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    eb58:	2007      	movs	r0, #7
    eb5a:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    eb5e:	4440      	add	r0, r8
    eb60:	f7ff fd8c 	bl	e67c <set_random_address>
    eb64:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    eb66:	1bad      	subs	r5, r5, r6
    eb68:	f818 3005 	ldrb.w	r3, [r8, r5]
    eb6c:	703b      	strb	r3, [r7, #0]
    eb6e:	e7df      	b.n	eb30 <bt_id_set_adv_own_addr+0x5c>
    eb70:	480c      	ldr	r0, [pc, #48]	; (eba4 <bt_id_set_adv_own_addr+0xd0>)
    eb72:	f01a f824 	bl	28bbe <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    eb76:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    eb78:	f3c0 1640 	ubfx	r6, r0, #5, #1
    eb7c:	d502      	bpl.n	eb84 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    eb7e:	4628      	mov	r0, r5
    eb80:	f01a f968 	bl	28e54 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    eb84:	4640      	mov	r0, r8
    eb86:	f01a f841 	bl	28c0c <bt_id_set_adv_private_addr>
    eb8a:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    eb8c:	2001      	movs	r0, #1
    eb8e:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    eb90:	2e00      	cmp	r6, #0
    eb92:	d0cd      	beq.n	eb30 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    eb94:	f01a f95e 	bl	28e54 <bt_le_scan_set_enable>
		if (err) {
    eb98:	e7ca      	b.n	eb30 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    eb9a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    eb9e:	e7c7      	b.n	eb30 <bt_id_set_adv_own_addr+0x5c>
    eba0:	20000000 	.word	0x20000000
    eba4:	200000cc 	.word	0x200000cc

0000eba8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    eba8:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ebaa:	4d18      	ldr	r5, [pc, #96]	; (ec0c <bt_id_init+0x64>)
    ebac:	79eb      	ldrb	r3, [r5, #7]
{
    ebae:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ebb0:	b11b      	cbz	r3, ebba <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    ebb2:	2400      	movs	r4, #0
}
    ebb4:	4620      	mov	r0, r4
    ebb6:	b009      	add	sp, #36	; 0x24
    ebb8:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    ebba:	f7ff fe9b 	bl	e8f4 <bt_setup_public_id_addr>
		if (err) {
    ebbe:	4604      	mov	r4, r0
    ebc0:	b180      	cbz	r0, ebe4 <bt_id_init+0x3c>
			BT_ERR("Unable to set identity address");
    ebc2:	4813      	ldr	r0, [pc, #76]	; (ec10 <bt_id_init+0x68>)
    ebc4:	6803      	ldr	r3, [r0, #0]
    ebc6:	075a      	lsls	r2, r3, #29
    ebc8:	d0f4      	beq.n	ebb4 <bt_id_init+0xc>
    ebca:	4b12      	ldr	r3, [pc, #72]	; (ec14 <bt_id_init+0x6c>)
			BT_ERR("Unable to set random address");
    ebcc:	9306      	str	r3, [sp, #24]
    ebce:	4b12      	ldr	r3, [pc, #72]	; (ec18 <bt_id_init+0x70>)
    ebd0:	9307      	str	r3, [sp, #28]
    ebd2:	aa05      	add	r2, sp, #20
    ebd4:	2303      	movs	r3, #3
    ebd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ebda:	9301      	str	r3, [sp, #4]
    ebdc:	9305      	str	r3, [sp, #20]
    ebde:	f019 fff4 	bl	28bca <z_log_msg2_static_create.constprop.0>
    ebe2:	e7e7      	b.n	ebb4 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ebe4:	79eb      	ldrb	r3, [r5, #7]
    ebe6:	2b00      	cmp	r3, #0
    ebe8:	d1e3      	bne.n	ebb2 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    ebea:	f7ff fefb 	bl	e9e4 <bt_setup_random_id_addr>
		if (err) {
    ebee:	4604      	mov	r4, r0
    ebf0:	2800      	cmp	r0, #0
    ebf2:	d1e6      	bne.n	ebc2 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    ebf4:	1c68      	adds	r0, r5, #1
    ebf6:	f7ff fd41 	bl	e67c <set_random_address>
		if (err) {
    ebfa:	4604      	mov	r4, r0
    ebfc:	2800      	cmp	r0, #0
    ebfe:	d0d8      	beq.n	ebb2 <bt_id_init+0xa>
			BT_ERR("Unable to set random address");
    ec00:	4803      	ldr	r0, [pc, #12]	; (ec10 <bt_id_init+0x68>)
    ec02:	6803      	ldr	r3, [r0, #0]
    ec04:	075b      	lsls	r3, r3, #29
    ec06:	d0d5      	beq.n	ebb4 <bt_id_init+0xc>
    ec08:	4b04      	ldr	r3, [pc, #16]	; (ec1c <bt_id_init+0x74>)
    ec0a:	e7df      	b.n	ebcc <bt_id_init+0x24>
    ec0c:	20000000 	.word	0x20000000
    ec10:	20000998 	.word	0x20000998
    ec14:	00030a58 	.word	0x00030a58
    ec18:	00030aa2 	.word	0x00030aa2
    ec1c:	00030a7b 	.word	0x00030a7b

0000ec20 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ec20:	6843      	ldr	r3, [r0, #4]
{
    ec22:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ec24:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ec26:	0558      	lsls	r0, r3, #21
    ec28:	d502      	bpl.n	ec30 <valid_adv_param+0x10>
		return false;
    ec2a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    ec2c:	b003      	add	sp, #12
    ec2e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ec30:	6922      	ldr	r2, [r4, #16]
    ec32:	b10a      	cbz	r2, ec38 <valid_adv_param+0x18>
    ec34:	07d9      	lsls	r1, r3, #31
    ec36:	d5f8      	bpl.n	ec2a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    ec38:	4d1a      	ldr	r5, [pc, #104]	; (eca4 <valid_adv_param+0x84>)
    ec3a:	7820      	ldrb	r0, [r4, #0]
    ec3c:	79eb      	ldrb	r3, [r5, #7]
    ec3e:	4283      	cmp	r3, r0
    ec40:	d9f3      	bls.n	ec2a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    ec42:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ec46:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    ec48:	2207      	movs	r2, #7
    ec4a:	4669      	mov	r1, sp
    ec4c:	4428      	add	r0, r5
    ec4e:	9300      	str	r3, [sp, #0]
    ec50:	f8cd 3003 	str.w	r3, [sp, #3]
    ec54:	f019 fd83 	bl	2875e <memcmp>
	if (param->id >= bt_dev.id_count ||
    ec58:	2800      	cmp	r0, #0
    ec5a:	d0e6      	beq.n	ec2a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ec5c:	6860      	ldr	r0, [r4, #4]
    ec5e:	07c2      	lsls	r2, r0, #31
    ec60:	d406      	bmi.n	ec70 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    ec62:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    ec66:	2b08      	cmp	r3, #8
    ec68:	d802      	bhi.n	ec70 <valid_adv_param+0x50>
    ec6a:	68a3      	ldr	r3, [r4, #8]
    ec6c:	2b9f      	cmp	r3, #159	; 0x9f
    ec6e:	d9dc      	bls.n	ec2a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    ec70:	f010 0f30 	tst.w	r0, #48	; 0x30
    ec74:	d002      	beq.n	ec7c <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    ec76:	6923      	ldr	r3, [r4, #16]
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d0d6      	beq.n	ec2a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    ec7c:	06c3      	lsls	r3, r0, #27
    ec7e:	d401      	bmi.n	ec84 <valid_adv_param+0x64>
    ec80:	6923      	ldr	r3, [r4, #16]
    ec82:	b943      	cbnz	r3, ec96 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    ec84:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    ec88:	429a      	cmp	r2, r3
    ec8a:	d8ce      	bhi.n	ec2a <valid_adv_param+0xa>
    ec8c:	2a1f      	cmp	r2, #31
    ec8e:	d9cc      	bls.n	ec2a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    ec90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    ec94:	d8c9      	bhi.n	ec2a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    ec96:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    ec9a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    ec9e:	bf18      	it	ne
    eca0:	2001      	movne	r0, #1
    eca2:	e7c3      	b.n	ec2c <valid_adv_param+0xc>
    eca4:	20000000 	.word	0x20000000

0000eca8 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecac:	460c      	mov	r4, r1
    ecae:	b08b      	sub	sp, #44	; 0x2c
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    ecb0:	2120      	movs	r1, #32
{
    ecb2:	4682      	mov	sl, r0
    ecb4:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    ecb6:	f7fe fb5b 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    ecba:	4605      	mov	r5, r0
    ecbc:	2800      	cmp	r0, #0
    ecbe:	d063      	beq.n	ed88 <hci_set_ad+0xe0>
	return net_buf_simple_add(&buf->b, len);
    ecc0:	2120      	movs	r1, #32
    ecc2:	3008      	adds	r0, #8
    ecc4:	f01b f905 	bl	29ed2 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    ecc8:	2220      	movs	r2, #32
    ecca:	2100      	movs	r1, #0
    eccc:	4681      	mov	r9, r0
    ecce:	f019 fd7a 	bl	287c6 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    ecd2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
    ecd6:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    ecda:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    ecdc:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    ecde:	f8d4 8000 	ldr.w	r8, [r4]
    ece2:	2300      	movs	r3, #0
    ece4:	6862      	ldr	r2, [r4, #4]
    ece6:	4293      	cmp	r3, r2
    ece8:	d30d      	bcc.n	ed06 <hci_set_ad+0x5e>
	for (size_t i = 0; i < ad_len; i++) {
    ecea:	9b00      	ldr	r3, [sp, #0]
    ecec:	3408      	adds	r4, #8
    ecee:	42a3      	cmp	r3, r4
    ecf0:	d1f5      	bne.n	ecde <hci_set_ad+0x36>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    ecf2:	2200      	movs	r2, #0
    ecf4:	4629      	mov	r1, r5
    ecf6:	4650      	mov	r0, sl
	*data_len = set_data_len;
    ecf8:	f889 6000 	strb.w	r6, [r9]
}
    ecfc:	b00b      	add	sp, #44	; 0x2c
    ecfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    ed02:	f7fe bb6f 	b.w	d3e4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    ed06:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    ed0a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    ed0e:	1cb0      	adds	r0, r6, #2
    ed10:	1881      	adds	r1, r0, r2
    ed12:	291f      	cmp	r1, #31
    ed14:	d921      	bls.n	ed5a <hci_set_ad+0xb2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    ed16:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    ed1a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    ed1e:	d101      	bne.n	ed24 <hci_set_ad+0x7c>
    ed20:	2a00      	cmp	r2, #0
    ed22:	dc18      	bgt.n	ed56 <hci_set_ad+0xae>
					BT_ERR("Too big advertising data");
    ed24:	481a      	ldr	r0, [pc, #104]	; (ed90 <hci_set_ad+0xe8>)
    ed26:	6803      	ldr	r3, [r0, #0]
    ed28:	075b      	lsls	r3, r3, #29
    ed2a:	d00c      	beq.n	ed46 <hci_set_ad+0x9e>
    ed2c:	4b19      	ldr	r3, [pc, #100]	; (ed94 <hci_set_ad+0xec>)
    ed2e:	9308      	str	r3, [sp, #32]
    ed30:	4b19      	ldr	r3, [pc, #100]	; (ed98 <hci_set_ad+0xf0>)
    ed32:	9309      	str	r3, [sp, #36]	; 0x24
    ed34:	2303      	movs	r3, #3
    ed36:	9303      	str	r3, [sp, #12]
    ed38:	9307      	str	r3, [sp, #28]
    ed3a:	2300      	movs	r3, #0
    ed3c:	aa07      	add	r2, sp, #28
    ed3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ed42:	f017 fed1 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		net_buf_unref(buf);
    ed46:	4628      	mov	r0, r5
    ed48:	f010 fada 	bl	1f300 <net_buf_unref>
		return err;
    ed4c:	f06f 0015 	mvn.w	r0, #21
}
    ed50:	b00b      	add	sp, #44	; 0x2c
    ed52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    ed56:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    ed5a:	b2d7      	uxtb	r7, r2
    ed5c:	1c79      	adds	r1, r7, #1
    ed5e:	f80b 1006 	strb.w	r1, [fp, r6]
    ed62:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    ed64:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    ed66:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    ed6a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    ed6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ed72:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    ed74:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    ed76:	f019 fd1b 	bl	287b0 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    ed7a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    ed7c:	443e      	add	r6, r7
    ed7e:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    ed80:	3301      	adds	r3, #1
    ed82:	f108 0808 	add.w	r8, r8, #8
    ed86:	e7ad      	b.n	ece4 <hci_set_ad+0x3c>
		return -ENOBUFS;
    ed88:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ed8c:	e7e0      	b.n	ed50 <hci_set_ad+0xa8>
    ed8e:	bf00      	nop
    ed90:	20000920 	.word	0x20000920
    ed94:	00030afd 	.word	0x00030afd
    ed98:	00030b86 	.word	0x00030b86

0000ed9c <bt_le_adv_lookup_legacy>:
}
    ed9c:	4800      	ldr	r0, [pc, #0]	; (eda0 <bt_le_adv_lookup_legacy+0x4>)
    ed9e:	4770      	bx	lr
    eda0:	20000018 	.word	0x20000018

0000eda4 <bt_le_adv_update_data>:
	return 0;
}

int bt_le_adv_update_data(const struct bt_data *ad, size_t ad_len,
			  const struct bt_data *sd, size_t sd_len)
{
    eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eda6:	4605      	mov	r5, r0
    eda8:	b085      	sub	sp, #20
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    edaa:	480f      	ldr	r0, [pc, #60]	; (ede8 <bt_le_adv_update_data+0x44>)
    edac:	f019 ff58 	bl	28c60 <atomic_get>
    edb0:	461f      	mov	r7, r3

	if (!adv) {
		return -EINVAL;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    edb2:	0643      	lsls	r3, r0, #25
{
    edb4:	4616      	mov	r6, r2
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    edb6:	d513      	bpl.n	ede0 <bt_le_adv_update_data+0x3c>
    edb8:	480b      	ldr	r0, [pc, #44]	; (ede8 <bt_le_adv_update_data+0x44>)
    edba:	f019 ff51 	bl	28c60 <atomic_get>
    edbe:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);

	return le_adv_update(adv, ad, ad_len, sd, sd_len, false, scannable,
    edc0:	480a      	ldr	r0, [pc, #40]	; (edec <bt_le_adv_update_data+0x48>)
    edc2:	f019 fff0 	bl	28da6 <get_adv_name_type>
    edc6:	f3c4 2480 	ubfx	r4, r4, #10, #1
    edca:	9002      	str	r0, [sp, #8]
    edcc:	460a      	mov	r2, r1
    edce:	e9cd 7400 	strd	r7, r4, [sp]
    edd2:	4806      	ldr	r0, [pc, #24]	; (edec <bt_le_adv_update_data+0x48>)
    edd4:	4633      	mov	r3, r6
    edd6:	4629      	mov	r1, r5
    edd8:	f019 ff6e 	bl	28cb8 <le_adv_update.constprop.0>
			     get_adv_name_type(adv));
}
    eddc:	b005      	add	sp, #20
    edde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EAGAIN;
    ede0:	f06f 000a 	mvn.w	r0, #10
    ede4:	e7fa      	b.n	eddc <bt_le_adv_update_data+0x38>
    ede6:	bf00      	nop
    ede8:	20000028 	.word	0x20000028
    edec:	20000018 	.word	0x20000018

0000edf0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    edf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    edf4:	690f      	ldr	r7, [r1, #16]
{
    edf6:	b093      	sub	sp, #76	; 0x4c
	bool dir_adv = (param->peer != NULL), scannable = false;
    edf8:	1e3c      	subs	r4, r7, #0
{
    edfa:	4606      	mov	r6, r0
    edfc:	4880      	ldr	r0, [pc, #512]	; (f000 <bt_le_adv_start_legacy+0x210>)
    edfe:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    ee00:	bf18      	it	ne
    ee02:	2401      	movne	r4, #1
    ee04:	f019 ff2c 	bl	28c60 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ee08:	0780      	lsls	r0, r0, #30
{
    ee0a:	460d      	mov	r5, r1
    ee0c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ee0e:	f140 80ee 	bpl.w	efee <bt_le_adv_start_legacy+0x1fe>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    ee12:	4608      	mov	r0, r1
    ee14:	f7ff ff04 	bl	ec20 <valid_adv_param>
    ee18:	b928      	cbnz	r0, ee26 <bt_le_adv_start_legacy+0x36>
		return -EINVAL;
    ee1a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    ee1e:	4620      	mov	r0, r4
    ee20:	b013      	add	sp, #76	; 0x4c
    ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    ee26:	4628      	mov	r0, r5
    ee28:	f7ff fc8c 	bl	e744 <bt_id_adv_random_addr_check>
    ee2c:	4681      	mov	r9, r0
    ee2e:	2800      	cmp	r0, #0
    ee30:	d0f3      	beq.n	ee1a <bt_le_adv_start_legacy+0x2a>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ee32:	f106 0810 	add.w	r8, r6, #16
    ee36:	4640      	mov	r0, r8
    ee38:	f019 ff12 	bl	28c60 <atomic_get>
    ee3c:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ee3e:	f3c0 1a80 	ubfx	sl, r0, #6, #1
    ee42:	f100 80d7 	bmi.w	eff4 <bt_le_adv_start_legacy+0x204>
	(void)memset(&set_param, 0, sizeof(set_param));
    ee46:	220f      	movs	r2, #15
    ee48:	4651      	mov	r1, sl
    ee4a:	a808      	add	r0, sp, #32
    ee4c:	f019 fcbb 	bl	287c6 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    ee50:	68ab      	ldr	r3, [r5, #8]
    ee52:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    ee56:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    ee58:	68eb      	ldr	r3, [r5, #12]
    ee5a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    ee5e:	f019 fef0 	bl	28c42 <get_adv_channel_map>
	if (adv->id != param->id) {
    ee62:	7832      	ldrb	r2, [r6, #0]
    ee64:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    ee66:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    ee6a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    ee6c:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    ee70:	d004      	beq.n	ee7c <bt_le_adv_start_legacy+0x8c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ee72:	4863      	ldr	r0, [pc, #396]	; (f000 <bt_le_adv_start_legacy+0x210>)
    ee74:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    ee78:	f019 fef8 	bl	28c6c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    ee7c:	4a61      	ldr	r2, [pc, #388]	; (f004 <bt_le_adv_start_legacy+0x214>)
	adv->id = param->id;
    ee7e:	782b      	ldrb	r3, [r5, #0]
    ee80:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    ee82:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    ee86:	6869      	ldr	r1, [r5, #4]
    ee88:	4622      	mov	r2, r4
    ee8a:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    ee8e:	4630      	mov	r0, r6
    ee90:	f7ff fe20 	bl	ead4 <bt_id_set_adv_own_addr>
	if (err) {
    ee94:	4604      	mov	r4, r0
    ee96:	2800      	cmp	r0, #0
    ee98:	d1c1      	bne.n	ee1e <bt_le_adv_start_legacy+0x2e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ee9a:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    ee9e:	2f00      	cmp	r7, #0
    eea0:	d04e      	beq.n	ef40 <bt_le_adv_start_legacy+0x150>
	memcpy(dst, src, sizeof(*dst));
    eea2:	6929      	ldr	r1, [r5, #16]
    eea4:	2207      	movs	r2, #7
    eea6:	f019 fc83 	bl	287b0 <memcpy>
	name_type = get_adv_name_type_param(param);
    eeaa:	4628      	mov	r0, r5
    eeac:	f019 ff8b 	bl	28dc6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    eeb0:	686b      	ldr	r3, [r5, #4]
    eeb2:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    eeb4:	4682      	mov	sl, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    eeb6:	d54c      	bpl.n	ef52 <bt_le_adv_start_legacy+0x162>
		if (dir_adv) {
    eeb8:	2f00      	cmp	r7, #0
    eeba:	d047      	beq.n	ef4c <bt_le_adv_start_legacy+0x15c>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    eebc:	f013 0f10 	tst.w	r3, #16
    eec0:	bf14      	ite	ne
    eec2:	2304      	movne	r3, #4
    eec4:	2301      	moveq	r3, #1
    eec6:	6929      	ldr	r1, [r5, #16]
    eec8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    eecc:	2207      	movs	r2, #7
    eece:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    eed2:	f019 fc6d 	bl	287b0 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    eed6:	f04f 0900 	mov.w	r9, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    eeda:	210f      	movs	r1, #15
    eedc:	f242 0006 	movw	r0, #8198	; 0x2006
    eee0:	f7fe fa46 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    eee4:	4604      	mov	r4, r0
    eee6:	2800      	cmp	r0, #0
    eee8:	f000 8087 	beq.w	effa <bt_le_adv_start_legacy+0x20a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    eeec:	220f      	movs	r2, #15
    eeee:	a908      	add	r1, sp, #32
    eef0:	3008      	adds	r0, #8
    eef2:	f01a fff4 	bl	29ede <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    eef6:	4621      	mov	r1, r4
    eef8:	2200      	movs	r2, #0
    eefa:	f242 0006 	movw	r0, #8198	; 0x2006
    eefe:	f7fe fa71 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    ef02:	4604      	mov	r4, r0
    ef04:	2800      	cmp	r0, #0
    ef06:	d18a      	bne.n	ee1e <bt_le_adv_start_legacy+0x2e>
	if (!dir_adv) {
    ef08:	2f00      	cmp	r7, #0
    ef0a:	d032      	beq.n	ef72 <bt_le_adv_start_legacy+0x182>
	return bt_le_adv_set_enable_legacy(adv, enable);
    ef0c:	2101      	movs	r1, #1
    ef0e:	4630      	mov	r0, r6
    ef10:	f019 ff69 	bl	28de6 <bt_le_adv_set_enable_legacy>
	if (err) {
    ef14:	4604      	mov	r4, r0
    ef16:	2800      	cmp	r0, #0
    ef18:	d039      	beq.n	ef8e <bt_le_adv_start_legacy+0x19e>
		BT_ERR("Failed to start advertiser");
    ef1a:	483b      	ldr	r0, [pc, #236]	; (f008 <bt_le_adv_start_legacy+0x218>)
    ef1c:	6803      	ldr	r3, [r0, #0]
    ef1e:	075d      	lsls	r5, r3, #29
    ef20:	f43f af7d 	beq.w	ee1e <bt_le_adv_start_legacy+0x2e>
    ef24:	4b39      	ldr	r3, [pc, #228]	; (f00c <bt_le_adv_start_legacy+0x21c>)
    ef26:	9310      	str	r3, [sp, #64]	; 0x40
    ef28:	4b39      	ldr	r3, [pc, #228]	; (f010 <bt_le_adv_start_legacy+0x220>)
    ef2a:	9311      	str	r3, [sp, #68]	; 0x44
    ef2c:	2303      	movs	r3, #3
    ef2e:	9307      	str	r3, [sp, #28]
    ef30:	930f      	str	r3, [sp, #60]	; 0x3c
    ef32:	2300      	movs	r3, #0
    ef34:	aa0f      	add	r2, sp, #60	; 0x3c
    ef36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ef3a:	f017 fdd5 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    ef3e:	e76e      	b.n	ee1e <bt_le_adv_start_legacy+0x2e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    ef40:	970c      	str	r7, [sp, #48]	; 0x30
    ef42:	2207      	movs	r2, #7
    ef44:	f8cd 7033 	str.w	r7, [sp, #51]	; 0x33
    ef48:	a90c      	add	r1, sp, #48	; 0x30
    ef4a:	e7ac      	b.n	eea6 <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
    ef4c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    ef50:	e7c3      	b.n	eeda <bt_le_adv_start_legacy+0xea>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    ef52:	059b      	lsls	r3, r3, #22
    ef54:	d403      	bmi.n	ef5e <bt_le_adv_start_legacy+0x16e>
    ef56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ef58:	b90b      	cbnz	r3, ef5e <bt_le_adv_start_legacy+0x16e>
    ef5a:	2802      	cmp	r0, #2
    ef5c:	d103      	bne.n	ef66 <bt_le_adv_start_legacy+0x176>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    ef5e:	2302      	movs	r3, #2
    ef60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    ef64:	e7b9      	b.n	eeda <bt_le_adv_start_legacy+0xea>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    ef66:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    ef68:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    ef6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    ef70:	e7b3      	b.n	eeda <bt_le_adv_start_legacy+0xea>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    ef72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ef74:	9300      	str	r3, [sp, #0]
    ef76:	e9cd 9a01 	strd	r9, sl, [sp, #4]
    ef7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ef7c:	9a05      	ldr	r2, [sp, #20]
    ef7e:	4659      	mov	r1, fp
    ef80:	4630      	mov	r0, r6
    ef82:	f019 fe99 	bl	28cb8 <le_adv_update.constprop.0>
		if (err) {
    ef86:	4604      	mov	r4, r0
    ef88:	2800      	cmp	r0, #0
    ef8a:	d0bf      	beq.n	ef0c <bt_le_adv_start_legacy+0x11c>
    ef8c:	e747      	b.n	ee1e <bt_le_adv_start_legacy+0x2e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ef8e:	bb67      	cbnz	r7, efea <bt_le_adv_start_legacy+0x1fa>
    ef90:	686a      	ldr	r2, [r5, #4]
    ef92:	f082 0202 	eor.w	r2, r2, #2
    ef96:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ef9a:	4640      	mov	r0, r8
    ef9c:	210d      	movs	r1, #13
    ef9e:	f019 fe74 	bl	28c8a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    efa2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    efa6:	425a      	negs	r2, r3
    efa8:	415a      	adcs	r2, r3
    efaa:	4640      	mov	r0, r8
    efac:	2107      	movs	r1, #7
    efae:	f019 fe6c 	bl	28c8a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    efb2:	f1aa 0102 	sub.w	r1, sl, #2
    efb6:	424a      	negs	r2, r1
    efb8:	414a      	adcs	r2, r1
    efba:	4640      	mov	r0, r8
    efbc:	2108      	movs	r1, #8
    efbe:	f019 fe64 	bl	28c8a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    efc2:	686a      	ldr	r2, [r5, #4]
    efc4:	4640      	mov	r0, r8
    efc6:	f002 0201 	and.w	r2, r2, #1
    efca:	2109      	movs	r1, #9
    efcc:	f019 fe5d 	bl	28c8a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    efd0:	464a      	mov	r2, r9
    efd2:	4640      	mov	r0, r8
    efd4:	210a      	movs	r1, #10
    efd6:	f019 fe58 	bl	28c8a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    efda:	686a      	ldr	r2, [r5, #4]
    efdc:	210c      	movs	r1, #12
    efde:	f3c2 0280 	ubfx	r2, r2, #2, #1
    efe2:	4640      	mov	r0, r8
    efe4:	f019 fe51 	bl	28c8a <atomic_set_bit_to>
	return 0;
    efe8:	e719      	b.n	ee1e <bt_le_adv_start_legacy+0x2e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    efea:	4602      	mov	r2, r0
    efec:	e7d5      	b.n	ef9a <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
    efee:	f06f 040a 	mvn.w	r4, #10
    eff2:	e714      	b.n	ee1e <bt_le_adv_start_legacy+0x2e>
		return -EALREADY;
    eff4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    eff8:	e711      	b.n	ee1e <bt_le_adv_start_legacy+0x2e>
		return -ENOBUFS;
    effa:	f06f 0468 	mvn.w	r4, #104	; 0x68
    effe:	e70e      	b.n	ee1e <bt_le_adv_start_legacy+0x2e>
    f000:	200000cc 	.word	0x200000cc
    f004:	20000000 	.word	0x20000000
    f008:	20000920 	.word	0x20000920
    f00c:	00030b1a 	.word	0x00030b1a
    f010:	00030b6f 	.word	0x00030b6f

0000f014 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    f014:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f016:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    f018:	9a06      	ldr	r2, [sp, #24]
{
    f01a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    f01c:	e9cd 3200 	strd	r3, r2, [sp]
    f020:	462b      	mov	r3, r5
    f022:	460a      	mov	r2, r1
    f024:	4601      	mov	r1, r0
    f026:	4811      	ldr	r0, [pc, #68]	; (f06c <bt_le_adv_start+0x58>)
    f028:	f7ff fee2 	bl	edf0 <bt_le_adv_start_legacy>
    f02c:	4621      	mov	r1, r4
    f02e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    f030:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    f032:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    f036:	429d      	cmp	r5, r3
    f038:	d102      	bne.n	f040 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    f03a:	4630      	mov	r0, r6
    f03c:	b002      	add	sp, #8
    f03e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    f040:	880a      	ldrh	r2, [r1, #0]
    f042:	4282      	cmp	r2, r0
    f044:	d104      	bne.n	f050 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    f046:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    f048:	b112      	cbz	r2, f050 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    f04a:	7812      	ldrb	r2, [r2, #0]
    f04c:	07d2      	lsls	r2, r2, #31
    f04e:	d402      	bmi.n	f056 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    f050:	3301      	adds	r3, #1
    f052:	3108      	adds	r1, #8
    f054:	e7ef      	b.n	f036 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    f056:	4906      	ldr	r1, [pc, #24]	; (f070 <bt_le_adv_start+0x5c>)
    f058:	4806      	ldr	r0, [pc, #24]	; (f074 <bt_le_adv_start+0x60>)
    f05a:	f01b ff0f 	bl	2ae7c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    f05e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    f062:	2300      	movs	r3, #0
    f064:	4803      	ldr	r0, [pc, #12]	; (f074 <bt_le_adv_start+0x60>)
    f066:	f015 fe99 	bl	24d9c <k_work_reschedule>
    f06a:	e7e6      	b.n	f03a <bt_le_adv_start+0x26>
    f06c:	20000018 	.word	0x20000018
    f070:	0000f0d5 	.word	0x0000f0d5
    f074:	20000030 	.word	0x20000030

0000f078 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    f078:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    f07a:	4813      	ldr	r0, [pc, #76]	; (f0c8 <bt_le_adv_stop+0x50>)
    f07c:	f019 fed8 	bl	28e30 <bt_le_lim_adv_cancel_timeout>
    f080:	4812      	ldr	r0, [pc, #72]	; (f0cc <bt_le_adv_stop+0x54>)
    f082:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    f086:	f019 fdf1 	bl	28c6c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f08a:	4810      	ldr	r0, [pc, #64]	; (f0cc <bt_le_adv_stop+0x54>)
    f08c:	f019 fde8 	bl	28c60 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f090:	0642      	lsls	r2, r0, #25
    f092:	d402      	bmi.n	f09a <bt_le_adv_stop+0x22>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    f094:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    f096:	4620      	mov	r0, r4
    f098:	bd10      	pop	{r4, pc}
		err = bt_le_adv_set_enable_legacy(adv, false);
    f09a:	480b      	ldr	r0, [pc, #44]	; (f0c8 <bt_le_adv_stop+0x50>)
    f09c:	2100      	movs	r1, #0
    f09e:	f019 fea2 	bl	28de6 <bt_le_adv_set_enable_legacy>
		if (err) {
    f0a2:	4604      	mov	r4, r0
    f0a4:	2800      	cmp	r0, #0
    f0a6:	d1f6      	bne.n	f096 <bt_le_adv_stop+0x1e>
    f0a8:	4809      	ldr	r0, [pc, #36]	; (f0d0 <bt_le_adv_stop+0x58>)
    f0aa:	f019 fdd9 	bl	28c60 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f0ae:	0683      	lsls	r3, r0, #26
    f0b0:	d5f0      	bpl.n	f094 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    f0b2:	4620      	mov	r0, r4
    f0b4:	f019 fece 	bl	28e54 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    f0b8:	4620      	mov	r0, r4
    f0ba:	f019 fd95 	bl	28be8 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    f0be:	2001      	movs	r0, #1
    f0c0:	f019 fec8 	bl	28e54 <bt_le_scan_set_enable>
    f0c4:	e7e7      	b.n	f096 <bt_le_adv_stop+0x1e>
    f0c6:	bf00      	nop
    f0c8:	20000018 	.word	0x20000018
    f0cc:	20000028 	.word	0x20000028
    f0d0:	200000cc 	.word	0x200000cc

0000f0d4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    f0d4:	b590      	push	{r4, r7, lr}
    f0d6:	b083      	sub	sp, #12
    f0d8:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    f0da:	f7ff ffcd 	bl	f078 <bt_le_adv_stop>
    f0de:	4603      	mov	r3, r0
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    f0e0:	480c      	ldr	r0, [pc, #48]	; (f114 <adv_timeout+0x40>)
    f0e2:	6802      	ldr	r2, [r0, #0]
    f0e4:	f012 0f06 	tst.w	r2, #6
    f0e8:	d011      	beq.n	f10e <adv_timeout+0x3a>
    f0ea:	466c      	mov	r4, sp
    f0ec:	b088      	sub	sp, #32
    f0ee:	466a      	mov	r2, sp
    f0f0:	4909      	ldr	r1, [pc, #36]	; (f118 <adv_timeout+0x44>)
    f0f2:	6111      	str	r1, [r2, #16]
    f0f4:	4909      	ldr	r1, [pc, #36]	; (f11c <adv_timeout+0x48>)
    f0f6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f0fa:	2304      	movs	r3, #4
    f0fc:	607b      	str	r3, [r7, #4]
    f0fe:	f842 3f0c 	str.w	r3, [r2, #12]!
    f102:	2300      	movs	r3, #0
    f104:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    f108:	f017 fcee 	bl	26ae8 <z_impl_z_log_msg2_static_create>
    f10c:	46a5      	mov	sp, r4
}
    f10e:	370c      	adds	r7, #12
    f110:	46bd      	mov	sp, r7
    f112:	bd90      	pop	{r4, r7, pc}
    f114:	20000920 	.word	0x20000920
    f118:	00030b39 	.word	0x00030b39
    f11c:	00030b63 	.word	0x00030b63

0000f120 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f120:	4b03      	ldr	r3, [pc, #12]	; (f130 <atomic_get.constprop.0+0x10>)
    f122:	f3bf 8f5b 	dmb	ish
    f126:	6818      	ldr	r0, [r3, #0]
    f128:	f3bf 8f5b 	dmb	ish
}
    f12c:	4770      	bx	lr
    f12e:	bf00      	nop
    f130:	200000cc 	.word	0x200000cc

0000f134 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    f134:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f136:	2102      	movs	r1, #2
{
    f138:	b087      	sub	sp, #28
    f13a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f13c:	f242 000c 	movw	r0, #8204	; 0x200c
    f140:	f7fe f916 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    f144:	4605      	mov	r5, r0
    f146:	b308      	cbz	r0, f18c <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    f148:	2102      	movs	r1, #2
    f14a:	3008      	adds	r0, #8
    f14c:	f01a fec1 	bl	29ed2 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f150:	2c01      	cmp	r4, #1
    f152:	4602      	mov	r2, r0
    f154:	d117      	bne.n	f186 <bt_le_scan_set_enable_legacy+0x52>
    f156:	f7ff ffe3 	bl	f120 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f15a:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f15e:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    f160:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    f162:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    f164:	425c      	negs	r4, r3
    f166:	415c      	adcs	r4, r3
    f168:	4a0a      	ldr	r2, [pc, #40]	; (f194 <bt_le_scan_set_enable_legacy+0x60>)
    f16a:	9400      	str	r4, [sp, #0]
    f16c:	a903      	add	r1, sp, #12
    f16e:	4628      	mov	r0, r5
    f170:	2305      	movs	r3, #5
    f172:	f7fe f8eb 	bl	d34c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f176:	2200      	movs	r2, #0
    f178:	4629      	mov	r1, r5
    f17a:	f242 000c 	movw	r0, #8204	; 0x200c
    f17e:	f7fe f931 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    f182:	b007      	add	sp, #28
    f184:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f186:	2300      	movs	r3, #0
    f188:	7043      	strb	r3, [r0, #1]
    f18a:	e7e9      	b.n	f160 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    f18c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f190:	e7f7      	b.n	f182 <bt_le_scan_set_enable_legacy+0x4e>
    f192:	bf00      	nop
    f194:	200000cc 	.word	0x200000cc

0000f198 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    f198:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f19a:	4605      	mov	r5, r0
    f19c:	4614      	mov	r4, r2
    f19e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    f1a0:	2207      	movs	r2, #7
    f1a2:	2100      	movs	r1, #0
    f1a4:	4668      	mov	r0, sp
    f1a6:	f019 fb0e 	bl	287c6 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    f1aa:	2300      	movs	r3, #0
    f1ac:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    f1b0:	1e6b      	subs	r3, r5, #1
    f1b2:	4258      	negs	r0, r3
    f1b4:	f10d 0105 	add.w	r1, sp, #5
    f1b8:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    f1ba:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    f1be:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    f1c2:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    f1c6:	f7ff fc4d 	bl	ea64 <bt_id_set_scan_own_addr>
	if (err) {
    f1ca:	4604      	mov	r4, r0
    f1cc:	bb38      	cbnz	r0, f21e <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f1ce:	2107      	movs	r1, #7
    f1d0:	f242 000b 	movw	r0, #8203	; 0x200b
    f1d4:	f7fe f8cc 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
    f1d8:	4606      	mov	r6, r0
    f1da:	b348      	cbz	r0, f230 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f1dc:	2207      	movs	r2, #7
    f1de:	4669      	mov	r1, sp
    f1e0:	3008      	adds	r0, #8
    f1e2:	f01a fe7c 	bl	29ede <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f1e6:	4622      	mov	r2, r4
    f1e8:	4631      	mov	r1, r6
    f1ea:	f242 000b 	movw	r0, #8203	; 0x200b
    f1ee:	f7fe f8f9 	bl	d3e4 <bt_hci_cmd_send_sync>
	if (err) {
    f1f2:	4604      	mov	r4, r0
    f1f4:	b998      	cbnz	r0, f21e <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    f1f6:	2001      	movs	r0, #1
    f1f8:	f7ff ff9c 	bl	f134 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    f1fc:	4604      	mov	r4, r0
    f1fe:	b970      	cbnz	r0, f21e <start_le_scan_legacy+0x86>
	if (val) {
    f200:	2d01      	cmp	r5, #1
    f202:	d10f      	bne.n	f224 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f204:	f3bf 8f5b 	dmb	ish
    f208:	4b0b      	ldr	r3, [pc, #44]	; (f238 <start_le_scan_legacy+0xa0>)
    f20a:	e853 2f00 	ldrex	r2, [r3]
    f20e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f212:	e843 2100 	strex	r1, r2, [r3]
    f216:	2900      	cmp	r1, #0
    f218:	d1f7      	bne.n	f20a <start_le_scan_legacy+0x72>
    f21a:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    f21e:	4620      	mov	r0, r4
    f220:	b002      	add	sp, #8
    f222:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f224:	f06f 0180 	mvn.w	r1, #128	; 0x80
    f228:	4803      	ldr	r0, [pc, #12]	; (f238 <start_le_scan_legacy+0xa0>)
    f22a:	f019 fe04 	bl	28e36 <atomic_and>
    f22e:	e7f6      	b.n	f21e <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    f230:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f234:	e7f3      	b.n	f21e <start_le_scan_legacy+0x86>
    f236:	bf00      	nop
    f238:	200000cc 	.word	0x200000cc

0000f23c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    f23c:	4b01      	ldr	r3, [pc, #4]	; (f244 <bt_scan_reset+0x8>)
    f23e:	2200      	movs	r2, #0
    f240:	601a      	str	r2, [r3, #0]
}
    f242:	4770      	bx	lr
    f244:	20003fe8 	.word	0x20003fe8

0000f248 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    f248:	b538      	push	{r3, r4, r5, lr}
    f24a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f24c:	f7ff ff68 	bl	f120 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f250:	0641      	lsls	r1, r0, #25
    f252:	f3c0 1280 	ubfx	r2, r0, #6, #1
    f256:	d501      	bpl.n	f25c <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    f258:	2000      	movs	r0, #0
    f25a:	e031      	b.n	f2c0 <bt_le_scan_update+0x78>
    f25c:	f7ff ff60 	bl	f120 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f260:	0683      	lsls	r3, r0, #26
    f262:	d428      	bmi.n	f2b6 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f264:	2100      	movs	r1, #0
    f266:	2206      	movs	r2, #6
    f268:	4608      	mov	r0, r1
    f26a:	f000 fe11 	bl	fe90 <bt_conn_lookup_state_le>
		if (conn) {
    f26e:	4604      	mov	r4, r0
    f270:	bb38      	cbnz	r0, f2c2 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f272:	2202      	movs	r2, #2
    f274:	4601      	mov	r1, r0
    f276:	f000 fe0b 	bl	fe90 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    f27a:	2800      	cmp	r0, #0
    f27c:	d0ec      	beq.n	f258 <bt_le_scan_update+0x10>
    f27e:	f3bf 8f5b 	dmb	ish
    f282:	4b11      	ldr	r3, [pc, #68]	; (f2c8 <bt_le_scan_update+0x80>)
    f284:	e853 2f00 	ldrex	r2, [r3]
    f288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    f28c:	e843 2100 	strex	r1, r2, [r3]
    f290:	2900      	cmp	r1, #0
    f292:	d1f7      	bne.n	f284 <bt_le_scan_update+0x3c>
    f294:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    f298:	f019 fe87 	bl	28faa <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f29c:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f29e:	4620      	mov	r0, r4
    f2a0:	bf18      	it	ne
    f2a2:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    f2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f2a8:	bf0a      	itet	eq
    f2aa:	2212      	moveq	r2, #18
    f2ac:	2160      	movne	r1, #96	; 0x60
    f2ae:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f2b2:	f7ff bf71 	b.w	f198 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    f2b6:	4610      	mov	r0, r2
    f2b8:	f7ff ff3c 	bl	f134 <bt_le_scan_set_enable_legacy>
		if (err) {
    f2bc:	2800      	cmp	r0, #0
    f2be:	d0d1      	beq.n	f264 <bt_le_scan_update+0x1c>
}
    f2c0:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    f2c2:	f019 fe72 	bl	28faa <bt_conn_unref>
    f2c6:	e7c7      	b.n	f258 <bt_le_scan_update+0x10>
    f2c8:	200000cc 	.word	0x200000cc

0000f2cc <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    f2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    f2d0:	f100 0808 	add.w	r8, r0, #8
    f2d4:	b08f      	sub	sp, #60	; 0x3c
    f2d6:	4604      	mov	r4, r0
    f2d8:	4640      	mov	r0, r8
    f2da:	f01a fe29 	bl	29f30 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    f2de:	f8df a1d0 	ldr.w	sl, [pc, #464]	; f4b0 <bt_hci_le_adv_report+0x1e4>
    f2e2:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    f2e4:	b19e      	cbz	r6, f30e <bt_hci_le_adv_report+0x42>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    f2e6:	89a3      	ldrh	r3, [r4, #12]
    f2e8:	2b08      	cmp	r3, #8
    f2ea:	d813      	bhi.n	f314 <bt_hci_le_adv_report+0x48>
			BT_ERR("Unexpected end of buffer");
    f2ec:	4871      	ldr	r0, [pc, #452]	; (f4b4 <bt_hci_le_adv_report+0x1e8>)
    f2ee:	6803      	ldr	r3, [r0, #0]
    f2f0:	075b      	lsls	r3, r3, #29
    f2f2:	d00c      	beq.n	f30e <bt_hci_le_adv_report+0x42>
    f2f4:	4b70      	ldr	r3, [pc, #448]	; (f4b8 <bt_hci_le_adv_report+0x1ec>)
    f2f6:	930c      	str	r3, [sp, #48]	; 0x30
    f2f8:	4b70      	ldr	r3, [pc, #448]	; (f4bc <bt_hci_le_adv_report+0x1f0>)
    f2fa:	930d      	str	r3, [sp, #52]	; 0x34
    f2fc:	2303      	movs	r3, #3
    f2fe:	9306      	str	r3, [sp, #24]
    f300:	930b      	str	r3, [sp, #44]	; 0x2c
    f302:	2300      	movs	r3, #0
    f304:	aa0b      	add	r2, sp, #44	; 0x2c
    f306:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f30a:	f017 fbed 	bl	26ae8 <z_impl_z_log_msg2_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    f30e:	b00f      	add	sp, #60	; 0x3c
    f310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f314:	2109      	movs	r1, #9
    f316:	4640      	mov	r0, r8
    f318:	f01a fe02 	bl	29f20 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    f31c:	237f      	movs	r3, #127	; 0x7f
    f31e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    f322:	7a01      	ldrb	r1, [r0, #8]
    f324:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f326:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    f328:	7a5b      	ldrb	r3, [r3, #9]
    f32a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    f32e:	23ff      	movs	r3, #255	; 0xff
    f330:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    f334:	2300      	movs	r3, #0
    f336:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f33a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    f33e:	7802      	ldrb	r2, [r0, #0]
    f340:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    f344:	2a04      	cmp	r2, #4
    f346:	bf9c      	itt	ls
    f348:	4b5d      	ldrls	r3, [pc, #372]	; (f4c0 <bt_hci_le_adv_report+0x1f4>)
    f34a:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    f34c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    f350:	b28b      	uxth	r3, r1
    f352:	4605      	mov	r5, r0
    f354:	f100 0901 	add.w	r9, r0, #1
    f358:	9301      	str	r3, [sp, #4]
    f35a:	f7ff fee1 	bl	f120 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f35e:	0647      	lsls	r7, r0, #25
    f360:	d50b      	bpl.n	f37a <bt_hci_le_adv_report+0xae>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    f362:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f366:	0758      	lsls	r0, r3, #29
    f368:	d507      	bpl.n	f37a <bt_hci_le_adv_report+0xae>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    f36a:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    f36c:	4640      	mov	r0, r8
    f36e:	3101      	adds	r1, #1
    f370:	3e01      	subs	r6, #1
    f372:	f01a fdcd 	bl	29f10 <net_buf_simple_pull>
    f376:	b2f6      	uxtb	r6, r6
    f378:	e7b4      	b.n	f2e4 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    f37a:	786b      	ldrb	r3, [r5, #1]
    f37c:	1e9a      	subs	r2, r3, #2
    f37e:	2a01      	cmp	r2, #1
    f380:	d848      	bhi.n	f414 <bt_hci_le_adv_report+0x148>
    f382:	2207      	movs	r2, #7
    f384:	4649      	mov	r1, r9
    f386:	a804      	add	r0, sp, #16
    f388:	f019 fa12 	bl	287b0 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f38c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f390:	3b02      	subs	r3, #2
    f392:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    f396:	ab04      	add	r3, sp, #16
    f398:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    f39a:	f8da 3000 	ldr.w	r3, [sl]
    f39e:	b1a3      	cbz	r3, f3ca <bt_hci_le_adv_report+0xfe>
	state->offset = net_buf_simple_headroom(buf);
    f3a0:	4640      	mov	r0, r8
    f3a2:	f01a fdd5 	bl	29f50 <net_buf_simple_headroom>
		buf->len = len;
    f3a6:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    f3a8:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    f3aa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    f3ae:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f3b0:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    f3b2:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    f3b6:	f8da c000 	ldr.w	ip, [sl]
    f3ba:	a804      	add	r0, sp, #16
    f3bc:	4643      	mov	r3, r8
    f3be:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    f3c0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f3c2:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f3c4:	fa10 f08b 	uxtah	r0, r0, fp
    f3c8:	60a0      	str	r0, [r4, #8]
	return list->head;
    f3ca:	4b3e      	ldr	r3, [pc, #248]	; (f4c4 <bt_hci_le_adv_report+0x1f8>)
    f3cc:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f3ce:	2a00      	cmp	r2, #0
    f3d0:	d033      	beq.n	f43a <bt_hci_le_adv_report+0x16e>
	return node->next;
    f3d2:	f852 7908 	ldr.w	r7, [r2], #-8
    f3d6:	b107      	cbz	r7, f3da <bt_hci_le_adv_report+0x10e>
    f3d8:	3f08      	subs	r7, #8
		if (listener->recv) {
    f3da:	6813      	ldr	r3, [r2, #0]
    f3dc:	9203      	str	r2, [sp, #12]
    f3de:	b193      	cbz	r3, f406 <bt_hci_le_adv_report+0x13a>
	state->offset = net_buf_simple_headroom(buf);
    f3e0:	4640      	mov	r0, r8
    f3e2:	f01a fdb5 	bl	29f50 <net_buf_simple_headroom>
	state->len = buf->len;
    f3e6:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    f3e8:	9a03      	ldr	r2, [sp, #12]
    f3ea:	9302      	str	r3, [sp, #8]
			buf->len = len;
    f3ec:	9b01      	ldr	r3, [sp, #4]
    f3ee:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f3f0:	4683      	mov	fp, r0
			listener->recv(info, buf);
    f3f2:	6812      	ldr	r2, [r2, #0]
    f3f4:	a808      	add	r0, sp, #32
    f3f6:	4641      	mov	r1, r8
    f3f8:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    f3fa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f3fc:	9b02      	ldr	r3, [sp, #8]
    f3fe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f400:	fa10 f08b 	uxtah	r0, r0, fp
    f404:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f406:	b1c7      	cbz	r7, f43a <bt_hci_le_adv_report+0x16e>
    f408:	68bb      	ldr	r3, [r7, #8]
    f40a:	b103      	cbz	r3, f40e <bt_hci_le_adv_report+0x142>
    f40c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    f40e:	463a      	mov	r2, r7
    f410:	461f      	mov	r7, r3
    f412:	e7e2      	b.n	f3da <bt_hci_le_adv_report+0x10e>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    f414:	2bff      	cmp	r3, #255	; 0xff
    f416:	d109      	bne.n	f42c <bt_hci_le_adv_report+0x160>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f418:	2300      	movs	r3, #0
    f41a:	9306      	str	r3, [sp, #24]
    f41c:	2207      	movs	r2, #7
    f41e:	f8cd 301b 	str.w	r3, [sp, #27]
    f422:	a906      	add	r1, sp, #24
    f424:	a804      	add	r0, sp, #16
    f426:	f019 f9c3 	bl	287b0 <memcpy>
}
    f42a:	e7b4      	b.n	f396 <bt_hci_le_adv_report+0xca>
		bt_addr_le_copy(&id_addr,
    f42c:	4649      	mov	r1, r9
    f42e:	2000      	movs	r0, #0
    f430:	f019 fbd8 	bl	28be4 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    f434:	2207      	movs	r2, #7
    f436:	4601      	mov	r1, r0
    f438:	e7f4      	b.n	f424 <bt_hci_le_adv_report+0x158>
	check_pending_conn(&id_addr, addr, info->adv_props);
    f43a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    f43e:	f7ff fe6f 	bl	f120 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f442:	0641      	lsls	r1, r0, #25
    f444:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    f448:	d48f      	bmi.n	f36a <bt_hci_le_adv_report+0x9e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    f44a:	07d2      	lsls	r2, r2, #31
    f44c:	d58d      	bpl.n	f36a <bt_hci_le_adv_report+0x9e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    f44e:	2202      	movs	r2, #2
    f450:	a904      	add	r1, sp, #16
    f452:	4658      	mov	r0, fp
    f454:	f000 fd1c 	bl	fe90 <bt_conn_lookup_state_le>
	if (!conn) {
    f458:	4607      	mov	r7, r0
    f45a:	2800      	cmp	r0, #0
    f45c:	d085      	beq.n	f36a <bt_hci_le_adv_report+0x9e>
    f45e:	f7ff fe5f 	bl	f120 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f462:	0683      	lsls	r3, r0, #26
    f464:	d411      	bmi.n	f48a <bt_hci_le_adv_report+0x1be>
    f466:	2207      	movs	r2, #7
    f468:	4649      	mov	r1, r9
    f46a:	f107 0096 	add.w	r0, r7, #150	; 0x96
    f46e:	f019 f99f 	bl	287b0 <memcpy>
	if (bt_le_create_conn(conn)) {
    f472:	4638      	mov	r0, r7
    f474:	f019 faae 	bl	289d4 <bt_le_create_conn>
    f478:	b960      	cbnz	r0, f494 <bt_hci_le_adv_report+0x1c8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    f47a:	4638      	mov	r0, r7
    f47c:	2106      	movs	r1, #6
    f47e:	f000 fafb 	bl	fa78 <bt_conn_set_state>
	bt_conn_unref(conn);
    f482:	4638      	mov	r0, r7
    f484:	f019 fd91 	bl	28faa <bt_conn_unref>
	return;
    f488:	e76f      	b.n	f36a <bt_hci_le_adv_report+0x9e>
	return bt_le_scan_set_enable_legacy(enable);
    f48a:	4658      	mov	r0, fp
    f48c:	f7ff fe52 	bl	f134 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f490:	2800      	cmp	r0, #0
    f492:	d0e8      	beq.n	f466 <bt_hci_le_adv_report+0x19a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f494:	231f      	movs	r3, #31
    f496:	727b      	strb	r3, [r7, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f498:	2100      	movs	r1, #0
    f49a:	4638      	mov	r0, r7
    f49c:	f000 faec 	bl	fa78 <bt_conn_set_state>
	bt_conn_unref(conn);
    f4a0:	4638      	mov	r0, r7
    f4a2:	f019 fd82 	bl	28faa <bt_conn_unref>
	bt_le_scan_update(false);
    f4a6:	2000      	movs	r0, #0
    f4a8:	f7ff fece 	bl	f248 <bt_le_scan_update>
    f4ac:	e75d      	b.n	f36a <bt_hci_le_adv_report+0x9e>
    f4ae:	bf00      	nop
    f4b0:	20003fe8 	.word	0x20003fe8
    f4b4:	200009a4 	.word	0x200009a4
    f4b8:	00030b9c 	.word	0x00030b9c
    f4bc:	00030bc6 	.word	0x00030bc6
    f4c0:	00030bc1 	.word	0x00030bc1
    f4c4:	20003fe0 	.word	0x20003fe0

0000f4c8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    f4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4cc:	4605      	mov	r5, r0
    f4ce:	f7ff fe27 	bl	f120 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    f4d2:	0780      	lsls	r0, r0, #30
{
    f4d4:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    f4d6:	d56f      	bpl.n	f5b8 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    f4d8:	782a      	ldrb	r2, [r5, #0]
    f4da:	2a01      	cmp	r2, #1
    f4dc:	d904      	bls.n	f4e8 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    f4de:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    f4e2:	4620      	mov	r0, r4
    f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    f4e8:	686b      	ldr	r3, [r5, #4]
    f4ea:	f033 030f 	bics.w	r3, r3, #15
    f4ee:	d1f6      	bne.n	f4de <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    f4f0:	8928      	ldrh	r0, [r5, #8]
    f4f2:	1f03      	subs	r3, r0, #4
    f4f4:	b29b      	uxth	r3, r3
    f4f6:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    f4fa:	42a3      	cmp	r3, r4
    f4fc:	d8ef      	bhi.n	f4de <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    f4fe:	8969      	ldrh	r1, [r5, #10]
    f500:	1f0b      	subs	r3, r1, #4
    f502:	b29b      	uxth	r3, r3
    f504:	42a3      	cmp	r3, r4
    f506:	d8ea      	bhi.n	f4de <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    f508:	4288      	cmp	r0, r1
    f50a:	d3e8      	bcc.n	f4de <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
    f50c:	b99a      	cbnz	r2, f536 <bt_le_scan_start+0x6e>
    f50e:	f3bf 8f5b 	dmb	ish
    f512:	4e2b      	ldr	r6, [pc, #172]	; (f5c0 <bt_le_scan_start+0xf8>)
    f514:	e856 0f00 	ldrex	r0, [r6]
    f518:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    f51c:	e846 3200 	strex	r2, r3, [r6]
    f520:	2a00      	cmp	r2, #0
    f522:	d1f7      	bne.n	f514 <bt_le_scan_start+0x4c>
    f524:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f528:	f010 0240 	ands.w	r2, r0, #64	; 0x40
    f52c:	46b0      	mov	r8, r6
    f52e:	d007      	beq.n	f540 <bt_le_scan_start+0x78>
		return -EALREADY;
    f530:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f534:	e7d5      	b.n	f4e2 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
    f536:	f019 fb7b 	bl	28c30 <bt_id_scan_random_addr_check>
    f53a:	2800      	cmp	r0, #0
    f53c:	d1e7      	bne.n	f50e <bt_le_scan_start+0x46>
    f53e:	e7ce      	b.n	f4de <bt_le_scan_start+0x16>
    f540:	f7ff fdee 	bl	f120 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f544:	0681      	lsls	r1, r0, #26
    f546:	d50a      	bpl.n	f55e <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    f548:	4610      	mov	r0, r2
    f54a:	f7ff fdf3 	bl	f134 <bt_le_scan_set_enable_legacy>
		if (err) {
    f54e:	4604      	mov	r4, r0
    f550:	b128      	cbz	r0, f55e <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f552:	f06f 0140 	mvn.w	r1, #64	; 0x40
    f556:	4630      	mov	r0, r6
    f558:	f019 fc6d 	bl	28e36 <atomic_and>
		return err;
    f55c:	e7c1      	b.n	f4e2 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    f55e:	686b      	ldr	r3, [r5, #4]
	if (val) {
    f560:	07db      	lsls	r3, r3, #31
    f562:	d515      	bpl.n	f590 <bt_le_scan_start+0xc8>
    f564:	f3bf 8f5b 	dmb	ish
    f568:	e858 3f00 	ldrex	r3, [r8]
    f56c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f570:	e848 3200 	strex	r2, r3, [r8]
    f574:	2a00      	cmp	r2, #0
    f576:	d1f7      	bne.n	f568 <bt_le_scan_start+0xa0>
    f578:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    f57c:	89ab      	ldrh	r3, [r5, #12]
    f57e:	b16b      	cbz	r3, f59c <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f580:	480f      	ldr	r0, [pc, #60]	; (f5c0 <bt_le_scan_start+0xf8>)
    f582:	f06f 0140 	mvn.w	r1, #64	; 0x40
    f586:	f019 fc56 	bl	28e36 <atomic_and>
			return -ENOTSUP;
    f58a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    f58e:	e7a8      	b.n	f4e2 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f590:	f46f 7180 	mvn.w	r1, #256	; 0x100
    f594:	480a      	ldr	r0, [pc, #40]	; (f5c0 <bt_le_scan_start+0xf8>)
    f596:	f019 fc4e 	bl	28e36 <atomic_and>
    f59a:	e7ef      	b.n	f57c <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
    f59c:	896a      	ldrh	r2, [r5, #10]
    f59e:	8929      	ldrh	r1, [r5, #8]
    f5a0:	7828      	ldrb	r0, [r5, #0]
    f5a2:	f7ff fdf9 	bl	f198 <start_le_scan_legacy>
	if (err) {
    f5a6:	4604      	mov	r4, r0
    f5a8:	b118      	cbz	r0, f5b2 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f5aa:	4805      	ldr	r0, [pc, #20]	; (f5c0 <bt_le_scan_start+0xf8>)
    f5ac:	f06f 0140 	mvn.w	r1, #64	; 0x40
    f5b0:	e7d2      	b.n	f558 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
    f5b2:	4b04      	ldr	r3, [pc, #16]	; (f5c4 <bt_le_scan_start+0xfc>)
    f5b4:	601f      	str	r7, [r3, #0]
	return 0;
    f5b6:	e794      	b.n	f4e2 <bt_le_scan_start+0x1a>
		return -EAGAIN;
    f5b8:	f06f 040a 	mvn.w	r4, #10
    f5bc:	e791      	b.n	f4e2 <bt_le_scan_start+0x1a>
    f5be:	bf00      	nop
    f5c0:	200000cc 	.word	0x200000cc
    f5c4:	20003fe8 	.word	0x20003fe8

0000f5c8 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    f5c8:	2300      	movs	r3, #0
	tx->user_data = NULL;
    f5ca:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    f5ce:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    f5d0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    f5d2:	4801      	ldr	r0, [pc, #4]	; (f5d8 <tx_free+0x10>)
    f5d4:	f01b bb5b 	b.w	2ac8e <k_queue_append>
    f5d8:	20000bd0 	.word	0x20000bd0

0000f5dc <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    f5dc:	4b0e      	ldr	r3, [pc, #56]	; (f618 <notify_connected+0x3c>)
{
    f5de:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    f5e0:	681d      	ldr	r5, [r3, #0]
{
    f5e2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    f5e4:	b955      	cbnz	r5, f5fc <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f5e6:	4d0d      	ldr	r5, [pc, #52]	; (f61c <notify_connected+0x40>)
    f5e8:	4e0d      	ldr	r6, [pc, #52]	; (f620 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    f5ea:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f5ec:	42b5      	cmp	r5, r6
    f5ee:	d30c      	bcc.n	f60a <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    f5f0:	b989      	cbnz	r1, f616 <notify_connected+0x3a>
		bt_gatt_connected(conn);
    f5f2:	4620      	mov	r0, r4
	}
}
    f5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    f5f8:	f002 bd40 	b.w	1207c <bt_gatt_connected>
		if (cb->connected) {
    f5fc:	682b      	ldr	r3, [r5, #0]
    f5fe:	b113      	cbz	r3, f606 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    f600:	7a61      	ldrb	r1, [r4, #9]
    f602:	4620      	mov	r0, r4
    f604:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f606:	692d      	ldr	r5, [r5, #16]
    f608:	e7ec      	b.n	f5e4 <notify_connected+0x8>
		if (cb->connected) {
    f60a:	682b      	ldr	r3, [r5, #0]
    f60c:	b10b      	cbz	r3, f612 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    f60e:	4620      	mov	r0, r4
    f610:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f612:	3514      	adds	r5, #20
    f614:	e7e9      	b.n	f5ea <notify_connected+0xe>
}
    f616:	bd70      	pop	{r4, r5, r6, pc}
    f618:	20003fec 	.word	0x20003fec
    f61c:	0002b834 	.word	0x0002b834
    f620:	0002b834 	.word	0x0002b834

0000f624 <send_frag>:
{
    f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f628:	b082      	sub	sp, #8
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    f62a:	694d      	ldr	r5, [r1, #20]
{
    f62c:	af00      	add	r7, sp, #0
    f62e:	4604      	mov	r4, r0
    f630:	460e      	mov	r6, r1
    f632:	4692      	mov	sl, r2
    f634:	4698      	mov	r8, r3
	return z_impl_k_sem_take(sem, timeout);
    f636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f63a:	484c      	ldr	r0, [pc, #304]	; (f76c <send_frag+0x148>)
    f63c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f640:	f015 f9ca 	bl	249d8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    f644:	7aa3      	ldrb	r3, [r4, #10]
    f646:	2b07      	cmp	r3, #7
    f648:	d15c      	bne.n	f704 <send_frag+0xe0>
	__asm__ volatile(
    f64a:	f04f 0320 	mov.w	r3, #32
    f64e:	f3ef 8211 	mrs	r2, BASEPRI
    f652:	f383 8812 	msr	BASEPRI_MAX, r3
    f656:	f3bf 8f6f 	isb	sy
	if (tx) {
    f65a:	69a3      	ldr	r3, [r4, #24]
    f65c:	2d00      	cmp	r5, #0
    f65e:	d068      	beq.n	f732 <send_frag+0x10e>
	parent->next = child;
    f660:	2100      	movs	r1, #0
    f662:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    f664:	2b00      	cmp	r3, #0
    f666:	d161      	bne.n	f72c <send_frag+0x108>
	list->head = node;
    f668:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    f66c:	f382 8811 	msr	BASEPRI, r2
    f670:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    f674:	2104      	movs	r1, #4
    f676:	f106 0008 	add.w	r0, r6, #8
    f67a:	f01a fc41 	bl	29f00 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    f67e:	8823      	ldrh	r3, [r4, #0]
    f680:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
    f684:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    f688:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    f68a:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    f68e:	3b04      	subs	r3, #4
    f690:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f692:	2302      	movs	r3, #2
    f694:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    f696:	4630      	mov	r0, r6
    f698:	f7fd ffac 	bl	d5f4 <bt_send>
	if (err) {
    f69c:	4603      	mov	r3, r0
    f69e:	2800      	cmp	r0, #0
    f6a0:	d061      	beq.n	f766 <send_frag+0x142>
		BT_ERR("Unable to send to driver (err %d)", err);
    f6a2:	4833      	ldr	r0, [pc, #204]	; (f770 <send_frag+0x14c>)
    f6a4:	6802      	ldr	r2, [r0, #0]
    f6a6:	0752      	lsls	r2, r2, #29
    f6a8:	d010      	beq.n	f6cc <send_frag+0xa8>
    f6aa:	46ea      	mov	sl, sp
    f6ac:	b088      	sub	sp, #32
    f6ae:	466a      	mov	r2, sp
    f6b0:	4930      	ldr	r1, [pc, #192]	; (f774 <send_frag+0x150>)
    f6b2:	6111      	str	r1, [r2, #16]
    f6b4:	4930      	ldr	r1, [pc, #192]	; (f778 <send_frag+0x154>)
    f6b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f6ba:	2304      	movs	r3, #4
    f6bc:	f842 3f0c 	str.w	r3, [r2, #12]!
    f6c0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f6c4:	607b      	str	r3, [r7, #4]
    f6c6:	f019 fbcd 	bl	28e64 <z_log_msg2_static_create.constprop.0>
    f6ca:	46d5      	mov	sp, sl
	__asm__ volatile(
    f6cc:	f04f 0320 	mov.w	r3, #32
    f6d0:	f3ef 8011 	mrs	r0, BASEPRI
    f6d4:	f383 8812 	msr	BASEPRI_MAX, r3
    f6d8:	f3bf 8f6f 	isb	sy
		if (tx) {
    f6dc:	2d00      	cmp	r5, #0
    f6de:	d03c      	beq.n	f75a <send_frag+0x136>
	return list->head;
    f6e0:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f6e2:	2200      	movs	r2, #0
    f6e4:	b153      	cbz	r3, f6fc <send_frag+0xd8>
    f6e6:	429d      	cmp	r5, r3
    f6e8:	d134      	bne.n	f754 <send_frag+0x130>
	return node->next;
    f6ea:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    f6ec:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    f6ee:	bb62      	cbnz	r2, f74a <send_frag+0x126>
    f6f0:	428d      	cmp	r5, r1
	list->head = node;
    f6f2:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    f6f4:	d100      	bne.n	f6f8 <send_frag+0xd4>
	list->tail = node;
    f6f6:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    f6f8:	2300      	movs	r3, #0
    f6fa:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    f6fc:	f380 8811 	msr	BASEPRI, r0
    f700:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    f704:	4819      	ldr	r0, [pc, #100]	; (f76c <send_frag+0x148>)
    f706:	f015 f941 	bl	2498c <z_impl_k_sem_give>
	if (tx) {
    f70a:	b115      	cbz	r5, f712 <send_frag+0xee>
		tx_free(tx);
    f70c:	4628      	mov	r0, r5
    f70e:	f7ff ff5b 	bl	f5c8 <tx_free>
	if (always_consume) {
    f712:	f1b8 0f00 	cmp.w	r8, #0
    f716:	d004      	beq.n	f722 <send_frag+0xfe>
		net_buf_unref(buf);
    f718:	4630      	mov	r0, r6
    f71a:	f00f fdf1 	bl	1f300 <net_buf_unref>
	return false;
    f71e:	f04f 0800 	mov.w	r8, #0
}
    f722:	4640      	mov	r0, r8
    f724:	3708      	adds	r7, #8
    f726:	46bd      	mov	sp, r7
    f728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f72c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f72e:	61a5      	str	r5, [r4, #24]
}
    f730:	e79c      	b.n	f66c <send_frag+0x48>
		if (tail_tx) {
    f732:	b133      	cbz	r3, f742 <send_frag+0x11e>
			pending_no_cb = &tail_tx->pending_no_cb;
    f734:	f103 090c 	add.w	r9, r3, #12
    f738:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    f73a:	3301      	adds	r3, #1
    f73c:	f8c9 3000 	str.w	r3, [r9]
    f740:	e794      	b.n	f66c <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
    f742:	69e3      	ldr	r3, [r4, #28]
    f744:	f104 091c 	add.w	r9, r4, #28
    f748:	e7f7      	b.n	f73a <send_frag+0x116>
Z_GENLIST_REMOVE(slist, snode)
    f74a:	428d      	cmp	r5, r1
	parent->next = child;
    f74c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f74e:	bf08      	it	eq
    f750:	61a2      	streq	r2, [r4, #24]
}
    f752:	e7d1      	b.n	f6f8 <send_frag+0xd4>
	return node->next;
    f754:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f756:	681b      	ldr	r3, [r3, #0]
    f758:	e7c4      	b.n	f6e4 <send_frag+0xc0>
			(*pending_no_cb)--;
    f75a:	f8d9 3000 	ldr.w	r3, [r9]
    f75e:	3b01      	subs	r3, #1
    f760:	f8c9 3000 	str.w	r3, [r9]
    f764:	e7ca      	b.n	f6fc <send_frag+0xd8>
	return true;
    f766:	f04f 0801 	mov.w	r8, #1
    f76a:	e7da      	b.n	f722 <send_frag+0xfe>
    f76c:	20000100 	.word	0x20000100
    f770:	2000092c 	.word	0x2000092c
    f774:	00030440 	.word	0x00030440
    f778:	00030e2a 	.word	0x00030e2a

0000f77c <bt_conn_get_pkts>:
}
    f77c:	4800      	ldr	r0, [pc, #0]	; (f780 <bt_conn_get_pkts+0x4>)
    f77e:	4770      	bx	lr
    f780:	20000100 	.word	0x20000100

0000f784 <bt_conn_recv>:
{
    f784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f788:	b088      	sub	sp, #32
    f78a:	4616      	mov	r6, r2
    f78c:	af00      	add	r7, sp, #0
    f78e:	4604      	mov	r4, r0
    f790:	460d      	mov	r5, r1
	tx_notify(conn);
    f792:	f019 fb85 	bl	28ea0 <tx_notify>
	switch (flags) {
    f796:	2e01      	cmp	r6, #1
    f798:	d03f      	beq.n	f81a <bt_conn_recv+0x96>
    f79a:	2e02      	cmp	r6, #2
    f79c:	f040 8085 	bne.w	f8aa <bt_conn_recv+0x126>
		if (conn->rx) {
    f7a0:	6923      	ldr	r3, [r4, #16]
    f7a2:	b19b      	cbz	r3, f7cc <bt_conn_recv+0x48>
			BT_ERR("Unexpected first L2CAP frame");
    f7a4:	484f      	ldr	r0, [pc, #316]	; (f8e4 <bt_conn_recv+0x160>)
    f7a6:	6803      	ldr	r3, [r0, #0]
    f7a8:	075a      	lsls	r2, r3, #29
    f7aa:	d00c      	beq.n	f7c6 <bt_conn_recv+0x42>
    f7ac:	4b4e      	ldr	r3, [pc, #312]	; (f8e8 <bt_conn_recv+0x164>)
    f7ae:	61bb      	str	r3, [r7, #24]
    f7b0:	4b4e      	ldr	r3, [pc, #312]	; (f8ec <bt_conn_recv+0x168>)
    f7b2:	61fb      	str	r3, [r7, #28]
    f7b4:	f107 0214 	add.w	r2, r7, #20
    f7b8:	2303      	movs	r3, #3
    f7ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f7be:	607b      	str	r3, [r7, #4]
    f7c0:	617b      	str	r3, [r7, #20]
    f7c2:	f019 fb4f 	bl	28e64 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    f7c6:	4620      	mov	r0, r4
    f7c8:	f019 fb8d 	bl	28ee6 <bt_conn_reset_rx_state>
		conn->rx = buf;
    f7cc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    f7ce:	6921      	ldr	r1, [r4, #16]
    f7d0:	898a      	ldrh	r2, [r1, #12]
    f7d2:	2a01      	cmp	r2, #1
    f7d4:	d93a      	bls.n	f84c <bt_conn_recv+0xc8>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    f7d6:	688b      	ldr	r3, [r1, #8]
    f7d8:	881b      	ldrh	r3, [r3, #0]
    f7da:	3304      	adds	r3, #4
    f7dc:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    f7de:	429a      	cmp	r2, r3
    f7e0:	d334      	bcc.n	f84c <bt_conn_recv+0xc8>
	if (conn->rx->len > acl_total_len) {
    f7e2:	d978      	bls.n	f8d6 <bt_conn_recv+0x152>
		BT_ERR("ACL len mismatch (%u > %u)",
    f7e4:	483f      	ldr	r0, [pc, #252]	; (f8e4 <bt_conn_recv+0x160>)
    f7e6:	6802      	ldr	r2, [r0, #0]
    f7e8:	0752      	lsls	r2, r2, #29
    f7ea:	d012      	beq.n	f812 <bt_conn_recv+0x8e>
    f7ec:	466d      	mov	r5, sp
    f7ee:	b088      	sub	sp, #32
    f7f0:	466a      	mov	r2, sp
    f7f2:	4e3f      	ldr	r6, [pc, #252]	; (f8f0 <bt_conn_recv+0x16c>)
    f7f4:	6116      	str	r6, [r2, #16]
    f7f6:	4e3d      	ldr	r6, [pc, #244]	; (f8ec <bt_conn_recv+0x168>)
    f7f8:	6156      	str	r6, [r2, #20]
    f7fa:	8989      	ldrh	r1, [r1, #12]
    f7fc:	e9c2 1306 	strd	r1, r3, [r2, #24]
    f800:	2305      	movs	r3, #5
    f802:	f842 3f0c 	str.w	r3, [r2, #12]!
    f806:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    f80a:	60bb      	str	r3, [r7, #8]
    f80c:	f019 fb2a 	bl	28e64 <z_log_msg2_static_create.constprop.0>
    f810:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
    f812:	4620      	mov	r0, r4
    f814:	f019 fb67 	bl	28ee6 <bt_conn_reset_rx_state>
		return;
    f818:	e018      	b.n	f84c <bt_conn_recv+0xc8>
		if (!conn->rx) {
    f81a:	6920      	ldr	r0, [r4, #16]
    f81c:	b9d0      	cbnz	r0, f854 <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    f81e:	4831      	ldr	r0, [pc, #196]	; (f8e4 <bt_conn_recv+0x160>)
    f820:	6803      	ldr	r3, [r0, #0]
    f822:	075b      	lsls	r3, r3, #29
    f824:	d00c      	beq.n	f840 <bt_conn_recv+0xbc>
    f826:	4b33      	ldr	r3, [pc, #204]	; (f8f4 <bt_conn_recv+0x170>)
    f828:	61bb      	str	r3, [r7, #24]
    f82a:	4b30      	ldr	r3, [pc, #192]	; (f8ec <bt_conn_recv+0x168>)
    f82c:	61fb      	str	r3, [r7, #28]
    f82e:	f107 0214 	add.w	r2, r7, #20
    f832:	2303      	movs	r3, #3
    f834:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f838:	607b      	str	r3, [r7, #4]
    f83a:	617b      	str	r3, [r7, #20]
    f83c:	f019 fb12 	bl	28e64 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    f840:	4620      	mov	r0, r4
    f842:	f019 fb50 	bl	28ee6 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    f846:	4628      	mov	r0, r5
    f848:	f00f fd5a 	bl	1f300 <net_buf_unref>
}
    f84c:	3720      	adds	r7, #32
    f84e:	46bd      	mov	sp, r7
    f850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!buf->len) {
    f854:	89ae      	ldrh	r6, [r5, #12]
    f856:	2e00      	cmp	r6, #0
    f858:	d0f5      	beq.n	f846 <bt_conn_recv+0xc2>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    f85a:	3008      	adds	r0, #8
    f85c:	f01a fb7c 	bl	29f58 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    f860:	4286      	cmp	r6, r0
    f862:	d918      	bls.n	f896 <bt_conn_recv+0x112>
			BT_ERR("Not enough buffer space for L2CAP data");
    f864:	481f      	ldr	r0, [pc, #124]	; (f8e4 <bt_conn_recv+0x160>)
    f866:	6803      	ldr	r3, [r0, #0]
    f868:	075e      	lsls	r6, r3, #29
    f86a:	d00c      	beq.n	f886 <bt_conn_recv+0x102>
    f86c:	4b22      	ldr	r3, [pc, #136]	; (f8f8 <bt_conn_recv+0x174>)
    f86e:	61bb      	str	r3, [r7, #24]
    f870:	4b1e      	ldr	r3, [pc, #120]	; (f8ec <bt_conn_recv+0x168>)
    f872:	61fb      	str	r3, [r7, #28]
    f874:	f107 0214 	add.w	r2, r7, #20
    f878:	2303      	movs	r3, #3
    f87a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f87e:	607b      	str	r3, [r7, #4]
    f880:	617b      	str	r3, [r7, #20]
    f882:	f019 faef 	bl	28e64 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    f886:	6921      	ldr	r1, [r4, #16]
    f888:	2200      	movs	r2, #0
    f88a:	4620      	mov	r0, r4
    f88c:	f000 fdca 	bl	10424 <bt_l2cap_recv>
			conn->rx = NULL;
    f890:	2300      	movs	r3, #0
    f892:	6123      	str	r3, [r4, #16]
    f894:	e7d7      	b.n	f846 <bt_conn_recv+0xc2>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f896:	6920      	ldr	r0, [r4, #16]
    f898:	89aa      	ldrh	r2, [r5, #12]
    f89a:	68a9      	ldr	r1, [r5, #8]
    f89c:	3008      	adds	r0, #8
    f89e:	f01a fb1e 	bl	29ede <net_buf_simple_add_mem>
		net_buf_unref(buf);
    f8a2:	4628      	mov	r0, r5
    f8a4:	f00f fd2c 	bl	1f300 <net_buf_unref>
		break;
    f8a8:	e791      	b.n	f7ce <bt_conn_recv+0x4a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    f8aa:	480e      	ldr	r0, [pc, #56]	; (f8e4 <bt_conn_recv+0x160>)
    f8ac:	6803      	ldr	r3, [r0, #0]
    f8ae:	0759      	lsls	r1, r3, #29
    f8b0:	d0c6      	beq.n	f840 <bt_conn_recv+0xbc>
    f8b2:	46e8      	mov	r8, sp
    f8b4:	b088      	sub	sp, #32
    f8b6:	466a      	mov	r2, sp
    f8b8:	4b10      	ldr	r3, [pc, #64]	; (f8fc <bt_conn_recv+0x178>)
    f8ba:	6113      	str	r3, [r2, #16]
    f8bc:	4b0b      	ldr	r3, [pc, #44]	; (f8ec <bt_conn_recv+0x168>)
	switch (flags) {
    f8be:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    f8c2:	2304      	movs	r3, #4
    f8c4:	f842 3f0c 	str.w	r3, [r2, #12]!
    f8c8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f8cc:	60bb      	str	r3, [r7, #8]
    f8ce:	f019 fac9 	bl	28e64 <z_log_msg2_static_create.constprop.0>
    f8d2:	46c5      	mov	sp, r8
    f8d4:	e7b4      	b.n	f840 <bt_conn_recv+0xbc>
	conn->rx = NULL;
    f8d6:	2300      	movs	r3, #0
    f8d8:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    f8da:	2201      	movs	r2, #1
    f8dc:	4620      	mov	r0, r4
    f8de:	f000 fda1 	bl	10424 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    f8e2:	e7b3      	b.n	f84c <bt_conn_recv+0xc8>
    f8e4:	2000092c 	.word	0x2000092c
    f8e8:	00030bdb 	.word	0x00030bdb
    f8ec:	00030e44 	.word	0x00030e44
    f8f0:	00030c6b 	.word	0x00030c6b
    f8f4:	00030bfc 	.word	0x00030bfc
    f8f8:	00030c1e 	.word	0x00030c1e
    f8fc:	00030c49 	.word	0x00030c49

0000f900 <bt_conn_send_cb>:
{
    f900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f904:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    f906:	7a83      	ldrb	r3, [r0, #10]
    f908:	2b07      	cmp	r3, #7
{
    f90a:	b088      	sub	sp, #32
    f90c:	4605      	mov	r5, r0
    f90e:	460e      	mov	r6, r1
    f910:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    f912:	d014      	beq.n	f93e <bt_conn_send_cb+0x3e>
		BT_ERR("not connected!");
    f914:	482f      	ldr	r0, [pc, #188]	; (f9d4 <bt_conn_send_cb+0xd4>)
    f916:	6803      	ldr	r3, [r0, #0]
    f918:	075a      	lsls	r2, r3, #29
    f91a:	d00b      	beq.n	f934 <bt_conn_send_cb+0x34>
    f91c:	4b2e      	ldr	r3, [pc, #184]	; (f9d8 <bt_conn_send_cb+0xd8>)
    f91e:	9306      	str	r3, [sp, #24]
    f920:	4b2e      	ldr	r3, [pc, #184]	; (f9dc <bt_conn_send_cb+0xdc>)
    f922:	9307      	str	r3, [sp, #28]
    f924:	aa05      	add	r2, sp, #20
    f926:	2303      	movs	r3, #3
    f928:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f92c:	9301      	str	r3, [sp, #4]
    f92e:	9305      	str	r3, [sp, #20]
    f930:	f019 fa98 	bl	28e64 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
    f934:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    f938:	b008      	add	sp, #32
    f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    f93e:	2a00      	cmp	r2, #0
    f940:	d046      	beq.n	f9d0 <bt_conn_send_cb+0xd0>
	return z_impl_z_current_get();
    f942:	f015 fd21 	bl	25388 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    f946:	4b26      	ldr	r3, [pc, #152]	; (f9e0 <bt_conn_send_cb+0xe0>)
    f948:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    f94a:	4826      	ldr	r0, [pc, #152]	; (f9e4 <bt_conn_send_cb+0xe4>)
    f94c:	bf07      	ittee	eq
    f94e:	2200      	moveq	r2, #0
    f950:	2300      	moveq	r3, #0
    f952:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    f956:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    f95a:	f014 ffe3 	bl	24924 <z_impl_k_queue_get>
    f95e:	4604      	mov	r4, r0
		if (!tx) {
    f960:	b990      	cbnz	r0, f988 <bt_conn_send_cb+0x88>
			BT_ERR("Unable to allocate TX context");
    f962:	481c      	ldr	r0, [pc, #112]	; (f9d4 <bt_conn_send_cb+0xd4>)
    f964:	6803      	ldr	r3, [r0, #0]
    f966:	075b      	lsls	r3, r3, #29
    f968:	d00b      	beq.n	f982 <bt_conn_send_cb+0x82>
    f96a:	4b1f      	ldr	r3, [pc, #124]	; (f9e8 <bt_conn_send_cb+0xe8>)
    f96c:	9306      	str	r3, [sp, #24]
    f96e:	4b1b      	ldr	r3, [pc, #108]	; (f9dc <bt_conn_send_cb+0xdc>)
    f970:	9307      	str	r3, [sp, #28]
    f972:	aa05      	add	r2, sp, #20
    f974:	2303      	movs	r3, #3
    f976:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f97a:	9301      	str	r3, [sp, #4]
    f97c:	9305      	str	r3, [sp, #20]
    f97e:	f019 fa71 	bl	28e64 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
    f982:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f986:	e7d7      	b.n	f938 <bt_conn_send_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    f988:	7aab      	ldrb	r3, [r5, #10]
    f98a:	2b07      	cmp	r3, #7
    f98c:	d014      	beq.n	f9b8 <bt_conn_send_cb+0xb8>
			BT_WARN("Disconnected while allocating context");
    f98e:	4811      	ldr	r0, [pc, #68]	; (f9d4 <bt_conn_send_cb+0xd4>)
    f990:	6803      	ldr	r3, [r0, #0]
    f992:	f013 0f06 	tst.w	r3, #6
    f996:	d00b      	beq.n	f9b0 <bt_conn_send_cb+0xb0>
    f998:	4b14      	ldr	r3, [pc, #80]	; (f9ec <bt_conn_send_cb+0xec>)
    f99a:	9306      	str	r3, [sp, #24]
    f99c:	4b0f      	ldr	r3, [pc, #60]	; (f9dc <bt_conn_send_cb+0xdc>)
    f99e:	9307      	str	r3, [sp, #28]
    f9a0:	aa05      	add	r2, sp, #20
    f9a2:	2303      	movs	r3, #3
    f9a4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f9a8:	9301      	str	r3, [sp, #4]
    f9aa:	9305      	str	r3, [sp, #20]
    f9ac:	f019 fa5a 	bl	28e64 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
    f9b0:	4620      	mov	r0, r4
    f9b2:	f7ff fe09 	bl	f5c8 <tx_free>
    f9b6:	e7bd      	b.n	f934 <bt_conn_send_cb+0x34>
		tx->pending_no_cb = 0U;
    f9b8:	2300      	movs	r3, #0
		tx->user_data = user_data;
    f9ba:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    f9be:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    f9c0:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    f9c2:	f105 0038 	add.w	r0, r5, #56	; 0x38
    f9c6:	4631      	mov	r1, r6
    f9c8:	f01a fa44 	bl	29e54 <net_buf_put>
	return 0;
    f9cc:	2000      	movs	r0, #0
    f9ce:	e7b3      	b.n	f938 <bt_conn_send_cb+0x38>
		tx_data(buf)->tx = NULL;
    f9d0:	614a      	str	r2, [r1, #20]
    f9d2:	e7f6      	b.n	f9c2 <bt_conn_send_cb+0xc2>
    f9d4:	2000092c 	.word	0x2000092c
    f9d8:	00030c8a 	.word	0x00030c8a
    f9dc:	00030e34 	.word	0x00030e34
    f9e0:	20003870 	.word	0x20003870
    f9e4:	20000bd0 	.word	0x20000bd0
    f9e8:	00030c9d 	.word	0x00030c9d
    f9ec:	00030cbf 	.word	0x00030cbf

0000f9f0 <bt_conn_prepare_events>:
{
    f9f0:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
    f9f2:	4b1a      	ldr	r3, [pc, #104]	; (fa5c <bt_conn_prepare_events+0x6c>)
    f9f4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f9f6:	2101      	movs	r1, #1
{
    f9f8:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    f9fa:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f9fc:	f01b fd69 	bl	2b4d2 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    fa00:	4b17      	ldr	r3, [pc, #92]	; (fa60 <bt_conn_prepare_events+0x70>)
    fa02:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    fa06:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    fa0a:	f019 fa25 	bl	28e58 <atomic_get>
    fa0e:	b908      	cbnz	r0, fa14 <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    fa10:	2001      	movs	r0, #1
}
    fa12:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    fa14:	7a9a      	ldrb	r2, [r3, #10]
    fa16:	b99a      	cbnz	r2, fa40 <bt_conn_prepare_events+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fa18:	f3bf 8f5b 	dmb	ish
    fa1c:	1d1a      	adds	r2, r3, #4
    fa1e:	e852 1f00 	ldrex	r1, [r2]
    fa22:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    fa26:	e842 0c00 	strex	ip, r0, [r2]
    fa2a:	f1bc 0f00 	cmp.w	ip, #0
    fa2e:	d1f6      	bne.n	fa1e <bt_conn_prepare_events+0x2e>
    fa30:	f3bf 8f5b 	dmb	ish
    fa34:	064a      	lsls	r2, r1, #25
    fa36:	d503      	bpl.n	fa40 <bt_conn_prepare_events+0x50>
		conn_cleanup(conn);
    fa38:	4618      	mov	r0, r3
    fa3a:	f019 fa5d 	bl	28ef8 <conn_cleanup>
    fa3e:	e7e7      	b.n	fa10 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    fa40:	7a9b      	ldrb	r3, [r3, #10]
    fa42:	2b07      	cmp	r3, #7
    fa44:	d1e4      	bne.n	fa10 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    fa46:	4b07      	ldr	r3, [pc, #28]	; (fa64 <bt_conn_prepare_events+0x74>)
    fa48:	4628      	mov	r0, r5
    fa4a:	2200      	movs	r2, #0
    fa4c:	2104      	movs	r1, #4
    fa4e:	f01b fd40 	bl	2b4d2 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    fa52:	2301      	movs	r3, #1
    fa54:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    fa58:	2002      	movs	r0, #2
	return ev_count;
    fa5a:	e7da      	b.n	fa12 <bt_conn_prepare_events+0x22>
    fa5c:	20000308 	.word	0x20000308
    fa60:	20002f40 	.word	0x20002f40
    fa64:	20002f78 	.word	0x20002f78

0000fa68 <bt_conn_lookup_handle>:
{
    fa68:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    fa6a:	2101      	movs	r1, #1
    fa6c:	4801      	ldr	r0, [pc, #4]	; (fa74 <bt_conn_lookup_handle+0xc>)
    fa6e:	f019 ba7c 	b.w	28f6a <conn_lookup_handle>
    fa72:	bf00      	nop
    fa74:	20002f40 	.word	0x20002f40

0000fa78 <bt_conn_set_state>:
{
    fa78:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa7a:	b087      	sub	sp, #28
	if (conn->state == state) {
    fa7c:	7a86      	ldrb	r6, [r0, #10]
    fa7e:	42b1      	cmp	r1, r6
{
    fa80:	af04      	add	r7, sp, #16
    fa82:	4604      	mov	r4, r0
    fa84:	460d      	mov	r5, r1
	if (conn->state == state) {
    fa86:	d119      	bne.n	fabc <bt_conn_set_state+0x44>
		BT_WARN("no transition %s", state2str(state));
    fa88:	4b8a      	ldr	r3, [pc, #552]	; (fcb4 <bt_conn_set_state+0x23c>)
    fa8a:	681b      	ldr	r3, [r3, #0]
    fa8c:	f013 0f06 	tst.w	r3, #6
    fa90:	d011      	beq.n	fab6 <bt_conn_set_state+0x3e>
	switch (state) {
    fa92:	2908      	cmp	r1, #8
    fa94:	bf96      	itet	ls
    fa96:	4b88      	ldrls	r3, [pc, #544]	; (fcb8 <bt_conn_set_state+0x240>)
		BT_WARN("no transition %s", state2str(state));
    fa98:	4b88      	ldrhi	r3, [pc, #544]	; (fcbc <bt_conn_set_state+0x244>)
    fa9a:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
    fa9e:	9303      	str	r3, [sp, #12]
    faa0:	4b87      	ldr	r3, [pc, #540]	; (fcc0 <bt_conn_set_state+0x248>)
    faa2:	9302      	str	r3, [sp, #8]
    faa4:	4b87      	ldr	r3, [pc, #540]	; (fcc4 <bt_conn_set_state+0x24c>)
    faa6:	9301      	str	r3, [sp, #4]
    faa8:	2300      	movs	r3, #0
    faaa:	4982      	ldr	r1, [pc, #520]	; (fcb4 <bt_conn_set_state+0x23c>)
    faac:	9300      	str	r3, [sp, #0]
    faae:	2202      	movs	r2, #2
    fab0:	4618      	mov	r0, r3
    fab2:	f019 f9da 	bl	28e6a <z_log_msg2_runtime_create.constprop.0>
}
    fab6:	370c      	adds	r7, #12
    fab8:	46bd      	mov	sp, r7
    faba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    fabc:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    fabe:	b1de      	cbz	r6, faf8 <bt_conn_set_state+0x80>
    fac0:	2e06      	cmp	r6, #6
    fac2:	d01f      	beq.n	fb04 <bt_conn_set_state+0x8c>
	switch (conn->state) {
    fac4:	7aa3      	ldrb	r3, [r4, #10]
    fac6:	2b08      	cmp	r3, #8
    fac8:	f200 80e8 	bhi.w	fc9c <bt_conn_set_state+0x224>
    facc:	a201      	add	r2, pc, #4	; (adr r2, fad4 <bt_conn_set_state+0x5c>)
    face:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fad2:	bf00      	nop
    fad4:	0000fb61 	.word	0x0000fb61
    fad8:	0000fb13 	.word	0x0000fb13
    fadc:	0000fab7 	.word	0x0000fab7
    fae0:	0000fab7 	.word	0x0000fab7
    fae4:	0000fab7 	.word	0x0000fab7
    fae8:	0000fab7 	.word	0x0000fab7
    faec:	0000fc17 	.word	0x0000fc17
    faf0:	0000fb43 	.word	0x0000fb43
    faf4:	0000fab7 	.word	0x0000fab7
		if (conn->type != BT_CONN_TYPE_ISO) {
    faf8:	7883      	ldrb	r3, [r0, #2]
    fafa:	2b08      	cmp	r3, #8
    fafc:	d0e2      	beq.n	fac4 <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
    fafe:	f019 fa19 	bl	28f34 <bt_conn_ref>
    fb02:	e7df      	b.n	fac4 <bt_conn_set_state+0x4c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fb04:	7883      	ldrb	r3, [r0, #2]
    fb06:	2b01      	cmp	r3, #1
    fb08:	d1dc      	bne.n	fac4 <bt_conn_set_state+0x4c>
			k_work_cancel_delayable(&conn->deferred_work);
    fb0a:	3058      	adds	r0, #88	; 0x58
    fb0c:	f01b f9c2 	bl	2ae94 <k_work_cancel_delayable>
    fb10:	e7d8      	b.n	fac4 <bt_conn_set_state+0x4c>
	z_impl_k_sem_give(sem);
    fb12:	4d6d      	ldr	r5, [pc, #436]	; (fcc8 <bt_conn_set_state+0x250>)
		tx->pending_no_cb = 0U;
    fb14:	2600      	movs	r6, #0
	__asm__ volatile(
    fb16:	f04f 0320 	mov.w	r3, #32
    fb1a:	f3ef 8211 	mrs	r2, BASEPRI
    fb1e:	f383 8812 	msr	BASEPRI_MAX, r3
    fb22:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    fb26:	69e3      	ldr	r3, [r4, #28]
    fb28:	2b00      	cmp	r3, #0
    fb2a:	f000 8096 	beq.w	fc5a <bt_conn_set_state+0x1e2>
			conn->pending_no_cb--;
    fb2e:	3b01      	subs	r3, #1
    fb30:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    fb32:	f382 8811 	msr	BASEPRI, r2
    fb36:	f3bf 8f6f 	isb	sy
    fb3a:	4628      	mov	r0, r5
    fb3c:	f014 ff26 	bl	2498c <z_impl_k_sem_give>
}
    fb40:	e7e9      	b.n	fb16 <bt_conn_set_state+0x9e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    fb42:	78a3      	ldrb	r3, [r4, #2]
    fb44:	2b04      	cmp	r3, #4
    fb46:	d0b6      	beq.n	fab6 <bt_conn_set_state+0x3e>
	z_impl_k_queue_init(queue);
    fb48:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fb4c:	f01b f893 	bl	2ac76 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    fb50:	485e      	ldr	r0, [pc, #376]	; (fccc <bt_conn_set_state+0x254>)
    fb52:	2100      	movs	r1, #0
    fb54:	f015 fede 	bl	25914 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    fb58:	2300      	movs	r3, #0
	list->tail = NULL;
    fb5a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
    fb5e:	e7aa      	b.n	fab6 <bt_conn_set_state+0x3e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    fb60:	78a3      	ldrb	r3, [r4, #2]
    fb62:	2b04      	cmp	r3, #4
    fb64:	d104      	bne.n	fb70 <bt_conn_set_state+0xf8>
	old = atomic_dec(&conn->ref);
    fb66:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fb6a:	f019 f98d 	bl	28e88 <atomic_dec.isra.0>
}
    fb6e:	e7a2      	b.n	fab6 <bt_conn_set_state+0x3e>
		switch (old_state) {
    fb70:	2e08      	cmp	r6, #8
    fb72:	d8a0      	bhi.n	fab6 <bt_conn_set_state+0x3e>
    fb74:	a301      	add	r3, pc, #4	; (adr r3, fb7c <bt_conn_set_state+0x104>)
    fb76:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    fb7a:	bf00      	nop
    fb7c:	0000fbe7 	.word	0x0000fbe7
    fb80:	0000fba1 	.word	0x0000fba1
    fb84:	0000fbd9 	.word	0x0000fbd9
    fb88:	0000fb67 	.word	0x0000fb67
    fb8c:	0000fb67 	.word	0x0000fb67
    fb90:	0000fbd9 	.word	0x0000fbd9
    fb94:	0000fbd9 	.word	0x0000fbd9
    fb98:	0000fbe7 	.word	0x0000fbe7
    fb9c:	0000fbe7 	.word	0x0000fbe7
			tx_notify(conn);
    fba0:	4620      	mov	r0, r4
    fba2:	f019 f97d 	bl	28ea0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    fba6:	78a3      	ldrb	r3, [r4, #2]
    fba8:	2b01      	cmp	r3, #1
    fbaa:	d103      	bne.n	fbb4 <bt_conn_set_state+0x13c>
				k_work_cancel_delayable(&conn->deferred_work);
    fbac:	f104 0058 	add.w	r0, r4, #88	; 0x58
    fbb0:	f01b f970 	bl	2ae94 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fbb4:	f3bf 8f5b 	dmb	ish
    fbb8:	3404      	adds	r4, #4
    fbba:	e854 3f00 	ldrex	r3, [r4]
    fbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fbc2:	e844 3200 	strex	r2, r3, [r4]
    fbc6:	2a00      	cmp	r2, #0
    fbc8:	d1f7      	bne.n	fbba <bt_conn_set_state+0x142>
    fbca:	f3bf 8f5b 	dmb	ish
    fbce:	2100      	movs	r1, #0
    fbd0:	483e      	ldr	r0, [pc, #248]	; (fccc <bt_conn_set_state+0x254>)
    fbd2:	f015 fe9f 	bl	25914 <z_impl_k_poll_signal_raise>
    fbd6:	e76e      	b.n	fab6 <bt_conn_set_state+0x3e>
			if (conn->err) {
    fbd8:	7a63      	ldrb	r3, [r4, #9]
    fbda:	2b00      	cmp	r3, #0
    fbdc:	d0c3      	beq.n	fb66 <bt_conn_set_state+0xee>
				notify_connected(conn);
    fbde:	4620      	mov	r0, r4
    fbe0:	f7ff fcfc 	bl	f5dc <notify_connected>
    fbe4:	e7bf      	b.n	fb66 <bt_conn_set_state+0xee>
			BT_WARN("Invalid (%u) old state", state);
    fbe6:	4833      	ldr	r0, [pc, #204]	; (fcb4 <bt_conn_set_state+0x23c>)
    fbe8:	6803      	ldr	r3, [r0, #0]
    fbea:	f013 0f06 	tst.w	r3, #6
    fbee:	f43f af62 	beq.w	fab6 <bt_conn_set_state+0x3e>
    fbf2:	466c      	mov	r4, sp
    fbf4:	4b36      	ldr	r3, [pc, #216]	; (fcd0 <bt_conn_set_state+0x258>)
    fbf6:	b088      	sub	sp, #32
    fbf8:	aa04      	add	r2, sp, #16
		BT_WARN("no valid (%u) state was set", state);
    fbfa:	6113      	str	r3, [r2, #16]
    fbfc:	4b30      	ldr	r3, [pc, #192]	; (fcc0 <bt_conn_set_state+0x248>)
    fbfe:	e9c2 3505 	strd	r3, r5, [r2, #20]
    fc02:	2304      	movs	r3, #4
    fc04:	607b      	str	r3, [r7, #4]
    fc06:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    fc0a:	f842 3f0c 	str.w	r3, [r2, #12]!
    fc0e:	f019 f929 	bl	28e64 <z_log_msg2_static_create.constprop.0>
    fc12:	46a5      	mov	sp, r4
    fc14:	e74f      	b.n	fab6 <bt_conn_set_state+0x3e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fc16:	78a3      	ldrb	r3, [r4, #2]
    fc18:	2b01      	cmp	r3, #1
    fc1a:	f47f af4c 	bne.w	fab6 <bt_conn_set_state+0x3e>
					K_MSEC(10 * bt_dev.create_param.timeout));
    fc1e:	4b2d      	ldr	r3, [pc, #180]	; (fcd4 <bt_conn_set_state+0x25c>)
    fc20:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    fc22:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    fc24:	b1b8      	cbz	r0, fc56 <bt_conn_set_state+0x1de>
    fc26:	230a      	movs	r3, #10
    fc28:	4358      	muls	r0, r3
    fc2a:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
    fc2c:	03c9      	lsls	r1, r1, #15
    fc2e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    fc32:	f240 33e7 	movw	r3, #999	; 0x3e7
    fc36:	03c0      	lsls	r0, r0, #15
    fc38:	18c0      	adds	r0, r0, r3
    fc3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc3e:	f04f 0300 	mov.w	r3, #0
    fc42:	f141 0100 	adc.w	r1, r1, #0
    fc46:	f7f1 fc67 	bl	1518 <__aeabi_uldivmod>
    fc4a:	4602      	mov	r2, r0
    fc4c:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    fc4e:	4620      	mov	r0, r4
    fc50:	f015 f870 	bl	24d34 <k_work_schedule>
    fc54:	e72f      	b.n	fab6 <bt_conn_set_state+0x3e>
					K_MSEC(10 * bt_dev.create_param.timeout));
    fc56:	4601      	mov	r1, r0
    fc58:	e7e8      	b.n	fc2c <bt_conn_set_state+0x1b4>
	return list->head;
    fc5a:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    fc5c:	b128      	cbz	r0, fc6a <bt_conn_set_state+0x1f2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fc5e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    fc60:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    fc62:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fc64:	4288      	cmp	r0, r1
	list->tail = node;
    fc66:	bf08      	it	eq
    fc68:	61a3      	streq	r3, [r4, #24]
    fc6a:	f382 8811 	msr	BASEPRI, r2
    fc6e:	f3bf 8f6f 	isb	sy
		if (!node) {
    fc72:	2800      	cmp	r0, #0
    fc74:	f43f af1f 	beq.w	fab6 <bt_conn_set_state+0x3e>
	__asm__ volatile(
    fc78:	f04f 0220 	mov.w	r2, #32
    fc7c:	f3ef 8311 	mrs	r3, BASEPRI
    fc80:	f382 8812 	msr	BASEPRI_MAX, r2
    fc84:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    fc88:	68c2      	ldr	r2, [r0, #12]
    fc8a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    fc8c:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    fc8e:	f383 8811 	msr	BASEPRI, r3
    fc92:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    fc96:	f7ff fc97 	bl	f5c8 <tx_free>
    fc9a:	e74e      	b.n	fb3a <bt_conn_set_state+0xc2>
		BT_WARN("no valid (%u) state was set", state);
    fc9c:	4805      	ldr	r0, [pc, #20]	; (fcb4 <bt_conn_set_state+0x23c>)
    fc9e:	6803      	ldr	r3, [r0, #0]
    fca0:	f013 0f06 	tst.w	r3, #6
    fca4:	f43f af07 	beq.w	fab6 <bt_conn_set_state+0x3e>
    fca8:	466c      	mov	r4, sp
    fcaa:	b088      	sub	sp, #32
    fcac:	4b0a      	ldr	r3, [pc, #40]	; (fcd8 <bt_conn_set_state+0x260>)
    fcae:	aa04      	add	r2, sp, #16
    fcb0:	e7a3      	b.n	fbfa <bt_conn_set_state+0x182>
    fcb2:	bf00      	nop
    fcb4:	2000092c 	.word	0x2000092c
    fcb8:	0002c690 	.word	0x0002c690
    fcbc:	00030ce9 	.word	0x00030ce9
    fcc0:	00030e18 	.word	0x00030e18
    fcc4:	00030cf3 	.word	0x00030cf3
    fcc8:	20000100 	.word	0x20000100
    fccc:	20000308 	.word	0x20000308
    fcd0:	00030d08 	.word	0x00030d08
    fcd4:	20000000 	.word	0x20000000
    fcd8:	00030d23 	.word	0x00030d23

0000fcdc <bt_conn_index>:
		index = conn - acl_conns;
    fcdc:	4b03      	ldr	r3, [pc, #12]	; (fcec <bt_conn_index+0x10>)
    fcde:	1ac0      	subs	r0, r0, r3
    fce0:	4b03      	ldr	r3, [pc, #12]	; (fcf0 <bt_conn_index+0x14>)
    fce2:	1180      	asrs	r0, r0, #6
    fce4:	4358      	muls	r0, r3
}
    fce6:	b2c0      	uxtb	r0, r0
    fce8:	4770      	bx	lr
    fcea:	bf00      	nop
    fcec:	20002f40 	.word	0x20002f40
    fcf0:	aaaaaaab 	.word	0xaaaaaaab

0000fcf4 <bt_conn_create_pdu_timeout>:
{
    fcf4:	b530      	push	{r4, r5, lr}
    fcf6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    fcf8:	4910      	ldr	r1, [pc, #64]	; (fd3c <bt_conn_create_pdu_timeout+0x48>)
    fcfa:	b089      	sub	sp, #36	; 0x24
    fcfc:	2800      	cmp	r0, #0
    fcfe:	bf08      	it	eq
    fd00:	4608      	moveq	r0, r1
    fd02:	f01a f884 	bl	29e0e <net_buf_alloc_fixed>
	if (!buf) {
    fd06:	4604      	mov	r4, r0
    fd08:	b998      	cbnz	r0, fd32 <bt_conn_create_pdu_timeout+0x3e>
		BT_WARN("Unable to allocate buffer within timeout");
    fd0a:	480d      	ldr	r0, [pc, #52]	; (fd40 <bt_conn_create_pdu_timeout+0x4c>)
    fd0c:	6803      	ldr	r3, [r0, #0]
    fd0e:	f013 0f06 	tst.w	r3, #6
    fd12:	d00b      	beq.n	fd2c <bt_conn_create_pdu_timeout+0x38>
    fd14:	4b0b      	ldr	r3, [pc, #44]	; (fd44 <bt_conn_create_pdu_timeout+0x50>)
    fd16:	9306      	str	r3, [sp, #24]
    fd18:	4b0b      	ldr	r3, [pc, #44]	; (fd48 <bt_conn_create_pdu_timeout+0x54>)
    fd1a:	9307      	str	r3, [sp, #28]
    fd1c:	aa05      	add	r2, sp, #20
    fd1e:	2303      	movs	r3, #3
    fd20:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fd24:	9301      	str	r3, [sp, #4]
    fd26:	9305      	str	r3, [sp, #20]
    fd28:	f019 f89c 	bl	28e64 <z_log_msg2_static_create.constprop.0>
}
    fd2c:	4620      	mov	r0, r4
    fd2e:	b009      	add	sp, #36	; 0x24
    fd30:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    fd32:	1d29      	adds	r1, r5, #4
    fd34:	3008      	adds	r0, #8
    fd36:	f01a f889 	bl	29e4c <net_buf_simple_reserve>
	return buf;
    fd3a:	e7f7      	b.n	fd2c <bt_conn_create_pdu_timeout+0x38>
    fd3c:	20000c18 	.word	0x20000c18
    fd40:	2000092c 	.word	0x2000092c
    fd44:	00030d43 	.word	0x00030d43
    fd48:	00030dfd 	.word	0x00030dfd

0000fd4c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    fd4e:	1d03      	adds	r3, r0, #4
{
    fd50:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fd52:	4618      	mov	r0, r3
    fd54:	f019 f880 	bl	28e58 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    fd58:	0582      	lsls	r2, r0, #22
    fd5a:	d519      	bpl.n	fd90 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    fd5c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    fd60:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    fd64:	4291      	cmp	r1, r2
    fd66:	d813      	bhi.n	fd90 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    fd68:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    fd6c:	4291      	cmp	r1, r2
    fd6e:	d30f      	bcc.n	fd90 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    fd70:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    fd74:	4291      	cmp	r1, r2
    fd76:	d10b      	bne.n	fd90 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fd78:	f3bf 8f5b 	dmb	ish
    fd7c:	e853 2f00 	ldrex	r2, [r3]
    fd80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    fd84:	e843 2100 	strex	r1, r2, [r3]
    fd88:	2900      	cmp	r1, #0
    fd8a:	d1f7      	bne.n	fd7c <notify_le_param_updated+0x30>
    fd8c:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    fd90:	4b0f      	ldr	r3, [pc, #60]	; (fdd0 <notify_le_param_updated+0x84>)
    fd92:	681d      	ldr	r5, [r3, #0]
    fd94:	b925      	cbnz	r5, fda0 <notify_le_param_updated+0x54>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd96:	4d0f      	ldr	r5, [pc, #60]	; (fdd4 <notify_le_param_updated+0x88>)
    fd98:	4f0f      	ldr	r7, [pc, #60]	; (fdd8 <notify_le_param_updated+0x8c>)
    fd9a:	42bd      	cmp	r5, r7
    fd9c:	d30c      	bcc.n	fdb8 <notify_le_param_updated+0x6c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    fd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    fda0:	68ee      	ldr	r6, [r5, #12]
    fda2:	b13e      	cbz	r6, fdb4 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
    fda4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    fda8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    fdac:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    fdb0:	4620      	mov	r0, r4
    fdb2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    fdb4:	692d      	ldr	r5, [r5, #16]
    fdb6:	e7ed      	b.n	fd94 <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
    fdb8:	68ee      	ldr	r6, [r5, #12]
    fdba:	b13e      	cbz	r6, fdcc <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
    fdbc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    fdc0:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    fdc4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    fdc8:	4620      	mov	r0, r4
    fdca:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fdcc:	3514      	adds	r5, #20
    fdce:	e7e4      	b.n	fd9a <notify_le_param_updated+0x4e>
    fdd0:	20003fec 	.word	0x20003fec
    fdd4:	0002b834 	.word	0x0002b834
    fdd8:	0002b834 	.word	0x0002b834

0000fddc <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    fddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fde0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    fde2:	4608      	mov	r0, r1
{
    fde4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    fde6:	f018 fe12 	bl	28a0e <bt_le_conn_params_valid>
    fdea:	4605      	mov	r5, r0
    fdec:	b918      	cbnz	r0, fdf6 <le_param_req+0x1a>
		return false;
    fdee:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    fdf0:	4628      	mov	r0, r5
    fdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    fdf6:	4b13      	ldr	r3, [pc, #76]	; (fe44 <le_param_req+0x68>)
    fdf8:	681e      	ldr	r6, [r3, #0]
    fdfa:	b946      	cbnz	r6, fe0e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fdfc:	4e12      	ldr	r6, [pc, #72]	; (fe48 <le_param_req+0x6c>)
    fdfe:	f8df 804c 	ldr.w	r8, [pc, #76]	; fe4c <le_param_req+0x70>
    fe02:	4546      	cmp	r6, r8
    fe04:	d2f4      	bcs.n	fdf0 <le_param_req+0x14>
		if (!cb->le_param_req) {
    fe06:	68b3      	ldr	r3, [r6, #8]
    fe08:	b983      	cbnz	r3, fe2c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fe0a:	3614      	adds	r6, #20
    fe0c:	e7f9      	b.n	fe02 <le_param_req+0x26>
		if (!cb->le_param_req) {
    fe0e:	68b3      	ldr	r3, [r6, #8]
    fe10:	b90b      	cbnz	r3, fe16 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    fe12:	6936      	ldr	r6, [r6, #16]
    fe14:	e7f1      	b.n	fdfa <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    fe16:	4621      	mov	r1, r4
    fe18:	4638      	mov	r0, r7
    fe1a:	4798      	blx	r3
    fe1c:	2800      	cmp	r0, #0
    fe1e:	d0e6      	beq.n	fdee <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    fe20:	4620      	mov	r0, r4
    fe22:	f018 fdf4 	bl	28a0e <bt_le_conn_params_valid>
    fe26:	2800      	cmp	r0, #0
    fe28:	d1f3      	bne.n	fe12 <le_param_req+0x36>
    fe2a:	e7e0      	b.n	fdee <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    fe2c:	4621      	mov	r1, r4
    fe2e:	4638      	mov	r0, r7
    fe30:	4798      	blx	r3
    fe32:	2800      	cmp	r0, #0
    fe34:	d0db      	beq.n	fdee <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    fe36:	4620      	mov	r0, r4
    fe38:	f018 fde9 	bl	28a0e <bt_le_conn_params_valid>
    fe3c:	2800      	cmp	r0, #0
    fe3e:	d1e4      	bne.n	fe0a <le_param_req+0x2e>
    fe40:	e7d5      	b.n	fdee <le_param_req+0x12>
    fe42:	bf00      	nop
    fe44:	20003fec 	.word	0x20003fec
    fe48:	0002b834 	.word	0x0002b834
    fe4c:	0002b834 	.word	0x0002b834

0000fe50 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    fe50:	b570      	push	{r4, r5, r6, lr}
    fe52:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fe54:	480d      	ldr	r0, [pc, #52]	; (fe8c <bt_conn_lookup_addr_le+0x3c>)
{
    fe56:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fe58:	f019 f86c 	bl	28f34 <bt_conn_ref>

		if (!conn) {
    fe5c:	4604      	mov	r4, r0
    fe5e:	b130      	cbz	r0, fe6e <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    fe60:	7883      	ldrb	r3, [r0, #2]
    fe62:	2b01      	cmp	r3, #1
    fe64:	d005      	beq.n	fe72 <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
    fe66:	30b8      	adds	r0, #184	; 0xb8
    fe68:	f019 f80e 	bl	28e88 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    fe6c:	2400      	movs	r4, #0
}
    fe6e:	4620      	mov	r0, r4
    fe70:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    fe72:	4629      	mov	r1, r5
    fe74:	4632      	mov	r2, r6
    fe76:	f019 f8a6 	bl	28fc6 <bt_conn_is_peer_addr_le>
    fe7a:	4601      	mov	r1, r0
    fe7c:	2800      	cmp	r0, #0
    fe7e:	d1f6      	bne.n	fe6e <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
    fe80:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fe84:	f019 f800 	bl	28e88 <atomic_dec.isra.0>
	return NULL;
    fe88:	460c      	mov	r4, r1
			continue;
    fe8a:	e7f0      	b.n	fe6e <bt_conn_lookup_addr_le+0x1e>
    fe8c:	20002f40 	.word	0x20002f40

0000fe90 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe92:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fe94:	480f      	ldr	r0, [pc, #60]	; (fed4 <bt_conn_lookup_state_le+0x44>)
{
    fe96:	460e      	mov	r6, r1
    fe98:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fe9a:	f019 f84b 	bl	28f34 <bt_conn_ref>

		if (!conn) {
    fe9e:	4604      	mov	r4, r0
    fea0:	b1a8      	cbz	r0, fece <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    fea2:	7883      	ldrb	r3, [r0, #2]
    fea4:	2b01      	cmp	r3, #1
    fea6:	d005      	beq.n	feb4 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
    fea8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    feac:	f018 ffec 	bl	28e88 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    feb0:	2400      	movs	r4, #0
			continue;
    feb2:	e00c      	b.n	fece <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    feb4:	b12e      	cbz	r6, fec2 <bt_conn_lookup_state_le+0x32>
    feb6:	4632      	mov	r2, r6
    feb8:	4629      	mov	r1, r5
    feba:	f019 f884 	bl	28fc6 <bt_conn_is_peer_addr_le>
    febe:	2800      	cmp	r0, #0
    fec0:	d0f2      	beq.n	fea8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    fec2:	7aa3      	ldrb	r3, [r4, #10]
    fec4:	42bb      	cmp	r3, r7
    fec6:	d1ef      	bne.n	fea8 <bt_conn_lookup_state_le+0x18>
    fec8:	7a23      	ldrb	r3, [r4, #8]
    feca:	42ab      	cmp	r3, r5
    fecc:	d1ec      	bne.n	fea8 <bt_conn_lookup_state_le+0x18>
}
    fece:	4620      	mov	r0, r4
    fed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fed2:	bf00      	nop
    fed4:	20002f40 	.word	0x20002f40

0000fed8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    fed8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    feda:	4801      	ldr	r0, [pc, #4]	; (fee0 <bt_conn_create_frag_timeout+0x8>)
    fedc:	f7ff bf0a 	b.w	fcf4 <bt_conn_create_pdu_timeout>
    fee0:	20000c70 	.word	0x20000c70

0000fee4 <create_frag>:
{
    fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fee8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    feea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    feee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fef2:	2000      	movs	r0, #0
{
    fef4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    fef6:	f7ff ffef 	bl	fed8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    fefa:	7ab3      	ldrb	r3, [r6, #10]
    fefc:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    fefe:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ff00:	f04f 0600 	mov.w	r6, #0
    ff04:	d005      	beq.n	ff12 <create_frag+0x2e>
		net_buf_unref(frag);
    ff06:	f00f f9fb 	bl	1f300 <net_buf_unref>
		return NULL;
    ff0a:	4635      	mov	r5, r6
}
    ff0c:	4628      	mov	r0, r5
    ff0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    ff12:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    ff14:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    ff18:	4e0c      	ldr	r6, [pc, #48]	; (ff4c <create_frag+0x68>)
    ff1a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ff1c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    ff20:	f01a f81a 	bl	29f58 <net_buf_simple_tailroom>
    ff24:	4580      	cmp	r8, r0
    ff26:	d20c      	bcs.n	ff42 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    ff28:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ff2c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    ff30:	4632      	mov	r2, r6
    ff32:	4638      	mov	r0, r7
    ff34:	f019 ffd3 	bl	29ede <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    ff38:	4631      	mov	r1, r6
    ff3a:	4620      	mov	r0, r4
    ff3c:	f019 ffe8 	bl	29f10 <net_buf_simple_pull>
    ff40:	e7e4      	b.n	ff0c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    ff42:	4638      	mov	r0, r7
    ff44:	f01a f808 	bl	29f58 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ff48:	b286      	uxth	r6, r0
    ff4a:	e7ef      	b.n	ff2c <create_frag+0x48>
    ff4c:	20000000 	.word	0x20000000

0000ff50 <bt_conn_process_tx>:
{
    ff50:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ff52:	7a83      	ldrb	r3, [r0, #10]
{
    ff54:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    ff56:	b993      	cbnz	r3, ff7e <bt_conn_process_tx+0x2e>
    ff58:	f3bf 8f5b 	dmb	ish
    ff5c:	1d03      	adds	r3, r0, #4
    ff5e:	e853 2f00 	ldrex	r2, [r3]
    ff62:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    ff66:	e843 1500 	strex	r5, r1, [r3]
    ff6a:	2d00      	cmp	r5, #0
    ff6c:	d1f7      	bne.n	ff5e <bt_conn_process_tx+0xe>
    ff6e:	f3bf 8f5b 	dmb	ish
    ff72:	0653      	lsls	r3, r2, #25
    ff74:	d503      	bpl.n	ff7e <bt_conn_process_tx+0x2e>
}
    ff76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    ff7a:	f018 bfbd 	b.w	28ef8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    ff7e:	2200      	movs	r2, #0
    ff80:	2300      	movs	r3, #0
    ff82:	f104 0038 	add.w	r0, r4, #56	; 0x38
    ff86:	f019 ff47 	bl	29e18 <net_buf_get>
	BT_ASSERT(buf);
    ff8a:	4605      	mov	r5, r0
    ff8c:	b960      	cbnz	r0, ffa8 <bt_conn_process_tx+0x58>
    ff8e:	4a1f      	ldr	r2, [pc, #124]	; (1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>)
    ff90:	491f      	ldr	r1, [pc, #124]	; (10010 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11>)
    ff92:	4820      	ldr	r0, [pc, #128]	; (10014 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15>)
    ff94:	f240 23e7 	movw	r3, #743	; 0x2e7
    ff98:	f015 fdb4 	bl	25b04 <printk>
    ff9c:	4040      	eors	r0, r0
    ff9e:	f380 8811 	msr	BASEPRI, r0
    ffa2:	f04f 0003 	mov.w	r0, #3
    ffa6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    ffa8:	4e1b      	ldr	r6, [pc, #108]	; (10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>)
	if (buf->len <= conn_mtu(conn)) {
    ffaa:	89aa      	ldrh	r2, [r5, #12]
    ffac:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    ffb0:	429a      	cmp	r2, r3
    ffb2:	d807      	bhi.n	ffc4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    ffb4:	2300      	movs	r3, #0
    ffb6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    ffb8:	4629      	mov	r1, r5
    ffba:	4620      	mov	r0, r4
    ffbc:	f7ff fb32 	bl	f624 <send_frag>
	if (!send_buf(conn, buf)) {
    ffc0:	b130      	cbz	r0, ffd0 <bt_conn_process_tx+0x80>
}
    ffc2:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    ffc4:	4629      	mov	r1, r5
    ffc6:	4620      	mov	r0, r4
    ffc8:	f7ff ff8c 	bl	fee4 <create_frag>
	if (!frag) {
    ffcc:	4601      	mov	r1, r0
    ffce:	b920      	cbnz	r0, ffda <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    ffd0:	4628      	mov	r0, r5
}
    ffd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    ffd6:	f00f b993 	b.w	1f300 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    ffda:	2301      	movs	r3, #1
    ffdc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ffde:	4620      	mov	r0, r4
    ffe0:	f7ff fb20 	bl	f624 <send_frag>
    ffe4:	2800      	cmp	r0, #0
    ffe6:	d0f3      	beq.n	ffd0 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    ffe8:	89aa      	ldrh	r2, [r5, #12]
    ffea:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    ffee:	429a      	cmp	r2, r3
    fff0:	d802      	bhi.n	fff8 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    fff2:	2300      	movs	r3, #0
    fff4:	2203      	movs	r2, #3
    fff6:	e7df      	b.n	ffb8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    fff8:	4629      	mov	r1, r5
    fffa:	4620      	mov	r0, r4
    fffc:	f7ff ff72 	bl	fee4 <create_frag>
		if (!frag) {
   10000:	4601      	mov	r1, r0
   10002:	2800      	cmp	r0, #0
   10004:	d0e4      	beq.n	ffd0 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10006:	2301      	movs	r3, #1
   10008:	461a      	mov	r2, r3
   1000a:	e7e8      	b.n	ffde <bt_conn_process_tx+0x8e>
   1000c:	00030d70 	.word	0x00030d70
   10010:	000301bb 	.word	0x000301bb
   10014:	000303bf 	.word	0x000303bf
   10018:	20000000 	.word	0x20000000

0001001c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1001c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1001e:	4914      	ldr	r1, [pc, #80]	; (10070 <bt_conn_init+0x54>)
   10020:	4814      	ldr	r0, [pc, #80]	; (10074 <bt_conn_init+0x58>)
   10022:	f01a fe34 	bl	2ac8e <k_queue_append>
   10026:	4914      	ldr	r1, [pc, #80]	; (10078 <bt_conn_init+0x5c>)
   10028:	4812      	ldr	r0, [pc, #72]	; (10074 <bt_conn_init+0x58>)
   1002a:	f01a fe30 	bl	2ac8e <k_queue_append>
   1002e:	4913      	ldr	r1, [pc, #76]	; (1007c <bt_conn_init+0x60>)
   10030:	4810      	ldr	r0, [pc, #64]	; (10074 <bt_conn_init+0x58>)
   10032:	f01a fe2c 	bl	2ac8e <k_queue_append>
	}

	bt_att_init();
   10036:	f019 fc04 	bl	29842 <bt_att_init>

	err = bt_smp_init();
   1003a:	f019 fee5 	bl	29e08 <bt_smp_init>
	if (err) {
   1003e:	4605      	mov	r5, r0
   10040:	b9a0      	cbnz	r0, 1006c <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
   10042:	f019 f892 	bl	2916a <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10046:	480e      	ldr	r0, [pc, #56]	; (10080 <bt_conn_init+0x64>)
   10048:	f018 ff74 	bl	28f34 <bt_conn_ref>

			if (!conn) {
   1004c:	4604      	mov	r4, r0
   1004e:	b168      	cbz	r0, 1006c <bt_conn_init+0x50>
   10050:	3004      	adds	r0, #4
   10052:	f018 ff01 	bl	28e58 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   10056:	07c3      	lsls	r3, r0, #31
   10058:	d504      	bpl.n	10064 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1005a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1005c:	2102      	movs	r1, #2
   1005e:	4620      	mov	r0, r4
   10060:	f7ff fd0a 	bl	fa78 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   10064:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   10068:	f018 ff0e 	bl	28e88 <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1006c:	4628      	mov	r0, r5
   1006e:	bd38      	pop	{r3, r4, r5, pc}
   10070:	20003ff0 	.word	0x20003ff0
   10074:	20000bd0 	.word	0x20000bd0
   10078:	20004000 	.word	0x20004000
   1007c:	20004010 	.word	0x20004010
   10080:	20002f40 	.word	0x20002f40

00010084 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   10084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10088:	b082      	sub	sp, #8
   1008a:	4605      	mov	r5, r0
   1008c:	af00      	add	r7, sp, #0
   1008e:	4688      	mov	r8, r1
   10090:	4616      	mov	r6, r2

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   10092:	2300      	movs	r3, #0
   10094:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10098:	2104      	movs	r1, #4
   1009a:	2000      	movs	r0, #0
   1009c:	f7ff fe2a 	bl	fcf4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   100a0:	4604      	mov	r4, r0
   100a2:	b9c8      	cbnz	r0, 100d8 <l2cap_create_le_sig_pdu.constprop.0+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   100a4:	4811      	ldr	r0, [pc, #68]	; (100ec <l2cap_create_le_sig_pdu.constprop.0+0x68>)
   100a6:	6803      	ldr	r3, [r0, #0]
   100a8:	075b      	lsls	r3, r3, #29
   100aa:	d010      	beq.n	100ce <l2cap_create_le_sig_pdu.constprop.0+0x4a>
   100ac:	466e      	mov	r6, sp
   100ae:	b088      	sub	sp, #32
   100b0:	466a      	mov	r2, sp
   100b2:	4b0f      	ldr	r3, [pc, #60]	; (100f0 <l2cap_create_le_sig_pdu.constprop.0+0x6c>)
   100b4:	6113      	str	r3, [r2, #16]
   100b6:	4b0f      	ldr	r3, [pc, #60]	; (100f4 <l2cap_create_le_sig_pdu.constprop.0+0x70>)
   100b8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   100bc:	2304      	movs	r3, #4
   100be:	f842 3f0c 	str.w	r3, [r2, #12]!
   100c2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   100c6:	607b      	str	r3, [r7, #4]
   100c8:	f018 ffc9 	bl	2905e <z_log_msg2_static_create.constprop.0>
   100cc:	46b5      	mov	sp, r6
}
   100ce:	4620      	mov	r0, r4
   100d0:	3708      	adds	r7, #8
   100d2:	46bd      	mov	sp, r7
   100d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   100d8:	2104      	movs	r1, #4
   100da:	3008      	adds	r0, #8
   100dc:	f019 fef9 	bl	29ed2 <net_buf_simple_add>
	hdr->code = code;
   100e0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   100e2:	f880 8001 	strb.w	r8, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   100e6:	8046      	strh	r6, [r0, #2]
	return buf;
   100e8:	e7f1      	b.n	100ce <l2cap_create_le_sig_pdu.constprop.0+0x4a>
   100ea:	bf00      	nop
   100ec:	2000099c 	.word	0x2000099c
   100f0:	00030e50 	.word	0x00030e50
   100f4:	00031034 	.word	0x00031034

000100f8 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   100f8:	b590      	push	{r4, r7, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   100fa:	4a12      	ldr	r2, [pc, #72]	; (10144 <l2cap_accept+0x4c>)
{
   100fc:	b083      	sub	sp, #12
   100fe:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   10100:	6810      	ldr	r0, [r2, #0]
{
   10102:	af00      	add	r7, sp, #0
		if (l2cap->chan.chan.conn) {
   10104:	b928      	cbnz	r0, 10112 <l2cap_accept+0x1a>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   10106:	4b10      	ldr	r3, [pc, #64]	; (10148 <l2cap_accept+0x50>)
   10108:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1010a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1010c:	370c      	adds	r7, #12
   1010e:	46bd      	mov	sp, r7
   10110:	bd90      	pop	{r4, r7, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   10112:	480e      	ldr	r0, [pc, #56]	; (1014c <l2cap_accept+0x54>)
   10114:	6802      	ldr	r2, [r0, #0]
   10116:	0752      	lsls	r2, r2, #29
   10118:	d010      	beq.n	1013c <l2cap_accept+0x44>
   1011a:	466c      	mov	r4, sp
   1011c:	b088      	sub	sp, #32
   1011e:	466a      	mov	r2, sp
   10120:	490b      	ldr	r1, [pc, #44]	; (10150 <l2cap_accept+0x58>)
   10122:	6111      	str	r1, [r2, #16]
   10124:	490b      	ldr	r1, [pc, #44]	; (10154 <l2cap_accept+0x5c>)
   10126:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1012a:	2304      	movs	r3, #4
   1012c:	f842 3f0c 	str.w	r3, [r2, #12]!
   10130:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10134:	607b      	str	r3, [r7, #4]
   10136:	f018 ff92 	bl	2905e <z_log_msg2_static_create.constprop.0>
   1013a:	46a5      	mov	sp, r4
   1013c:	f06f 000b 	mvn.w	r0, #11
   10140:	e7e4      	b.n	1010c <l2cap_accept+0x14>
   10142:	bf00      	nop
   10144:	20003000 	.word	0x20003000
   10148:	0002c6d4 	.word	0x0002c6d4
   1014c:	2000099c 	.word	0x2000099c
   10150:	00030e7c 	.word	0x00030e7c
   10154:	00031027 	.word	0x00031027

00010158 <l2cap_rtx_timeout>:
{
   10158:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->chan.conn;
   1015a:	4604      	mov	r4, r0
{
   1015c:	b083      	sub	sp, #12
	BT_ERR("chan %p timeout", chan);
   1015e:	4811      	ldr	r0, [pc, #68]	; (101a4 <l2cap_rtx_timeout+0x4c>)
   10160:	6803      	ldr	r3, [r0, #0]
	struct bt_conn *conn = chan->chan.conn;
   10162:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   10166:	075b      	lsls	r3, r3, #29
{
   10168:	af00      	add	r7, sp, #0
	BT_ERR("chan %p timeout", chan);
   1016a:	d010      	beq.n	1018e <l2cap_rtx_timeout+0x36>
   1016c:	466e      	mov	r6, sp
   1016e:	b088      	sub	sp, #32
   10170:	466a      	mov	r2, sp
   10172:	4b0d      	ldr	r3, [pc, #52]	; (101a8 <l2cap_rtx_timeout+0x50>)
   10174:	6113      	str	r3, [r2, #16]
   10176:	4b0d      	ldr	r3, [pc, #52]	; (101ac <l2cap_rtx_timeout+0x54>)
   10178:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1017c:	2304      	movs	r3, #4
   1017e:	f842 3f0c 	str.w	r3, [r2, #12]!
   10182:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10186:	607b      	str	r3, [r7, #4]
   10188:	f018 ff69 	bl	2905e <z_log_msg2_static_create.constprop.0>
   1018c:	46b5      	mov	sp, r6
	bt_l2cap_chan_remove(conn, &chan->chan);
   1018e:	4621      	mov	r1, r4
   10190:	4628      	mov	r0, r5
   10192:	f018 ff67 	bl	29064 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   10196:	4620      	mov	r0, r4
   10198:	f018 ff82 	bl	290a0 <bt_l2cap_chan_del>
}
   1019c:	370c      	adds	r7, #12
   1019e:	46bd      	mov	sp, r7
   101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101a2:	bf00      	nop
   101a4:	2000099c 	.word	0x2000099c
   101a8:	00030ea7 	.word	0x00030ea7
   101ac:	0003105a 	.word	0x0003105a

000101b0 <bt_l2cap_connected>:
{
   101b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   101b4:	4e29      	ldr	r6, [pc, #164]	; (1025c <bt_l2cap_connected+0xac>)
   101b6:	4f2a      	ldr	r7, [pc, #168]	; (10260 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   101b8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 10264 <bt_l2cap_connected+0xb4>
{
   101bc:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   101be:	42be      	cmp	r6, r7
   101c0:	d302      	bcc.n	101c8 <bt_l2cap_connected+0x18>
}
   101c2:	b003      	add	sp, #12
   101c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   101c8:	6873      	ldr	r3, [r6, #4]
   101ca:	a901      	add	r1, sp, #4
   101cc:	4620      	mov	r0, r4
   101ce:	4798      	blx	r3
   101d0:	2800      	cmp	r0, #0
   101d2:	db3d      	blt.n	10250 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   101d4:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   101d6:	8833      	ldrh	r3, [r6, #0]
   101d8:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   101dc:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   101e0:	4641      	mov	r1, r8
   101e2:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   101e6:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   101ea:	f01a fe47 	bl	2ae7c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   101ee:	f3bf 8f5b 	dmb	ish
   101f2:	f105 0368 	add.w	r3, r5, #104	; 0x68
   101f6:	2200      	movs	r2, #0
   101f8:	e853 1f00 	ldrex	r1, [r3]
   101fc:	e843 2000 	strex	r0, r2, [r3]
   10200:	2800      	cmp	r0, #0
   10202:	d1f9      	bne.n	101f8 <bt_l2cap_connected+0x48>
   10204:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   10208:	60aa      	str	r2, [r5, #8]
	return list->tail;
   1020a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1020c:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   10210:	bb02      	cbnz	r2, 10254 <bt_l2cap_connected+0xa4>
	list->head = node;
   10212:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   10216:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   10218:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1021a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1021c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   10220:	681b      	ldr	r3, [r3, #0]
   10222:	b103      	cbz	r3, 10226 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   10224:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10226:	9b01      	ldr	r3, [sp, #4]
   10228:	f3bf 8f5b 	dmb	ish
   1022c:	3368      	adds	r3, #104	; 0x68
   1022e:	e853 2f00 	ldrex	r2, [r3]
   10232:	f042 0201 	orr.w	r2, r2, #1
   10236:	e843 2100 	strex	r1, r2, [r3]
   1023a:	2900      	cmp	r1, #0
   1023c:	d1f7      	bne.n	1022e <bt_l2cap_connected+0x7e>
   1023e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   10242:	9801      	ldr	r0, [sp, #4]
   10244:	6843      	ldr	r3, [r0, #4]
   10246:	699b      	ldr	r3, [r3, #24]
   10248:	b113      	cbz	r3, 10250 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   1024a:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1024e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   10250:	360c      	adds	r6, #12
   10252:	e7b4      	b.n	101be <bt_l2cap_connected+0xe>
	parent->next = child;
   10254:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10256:	6563      	str	r3, [r4, #84]	; 0x54
}
   10258:	e7dd      	b.n	10216 <bt_l2cap_connected+0x66>
   1025a:	bf00      	nop
   1025c:	0002b810 	.word	0x0002b810
   10260:	0002b834 	.word	0x0002b834
   10264:	00010159 	.word	0x00010159

00010268 <l2cap_recv>:
{
   10268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1026c:	b08a      	sub	sp, #40	; 0x28
	if (buf->len < sizeof(*hdr)) {
   1026e:	898b      	ldrh	r3, [r1, #12]
   10270:	2b03      	cmp	r3, #3
{
   10272:	af02      	add	r7, sp, #8
   10274:	4606      	mov	r6, r0
   10276:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   10278:	d811      	bhi.n	1029e <l2cap_recv+0x36>
		BT_ERR("Too small L2CAP signaling PDU");
   1027a:	4860      	ldr	r0, [pc, #384]	; (103fc <l2cap_recv+0x194>)
   1027c:	6803      	ldr	r3, [r0, #0]
   1027e:	075d      	lsls	r5, r3, #29
   10280:	d02f      	beq.n	102e2 <l2cap_recv+0x7a>
   10282:	4b5f      	ldr	r3, [pc, #380]	; (10400 <l2cap_recv+0x198>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   10284:	61bb      	str	r3, [r7, #24]
   10286:	4b5f      	ldr	r3, [pc, #380]	; (10404 <l2cap_recv+0x19c>)
   10288:	61fb      	str	r3, [r7, #28]
   1028a:	f107 0214 	add.w	r2, r7, #20
   1028e:	2303      	movs	r3, #3
   10290:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10294:	607b      	str	r3, [r7, #4]
   10296:	617b      	str	r3, [r7, #20]
   10298:	f018 fee1 	bl	2905e <z_log_msg2_static_create.constprop.0>
   1029c:	e021      	b.n	102e2 <l2cap_recv+0x7a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1029e:	2104      	movs	r1, #4
   102a0:	f105 0008 	add.w	r0, r5, #8
   102a4:	f019 fe3c 	bl	29f20 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   102a8:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   102aa:	f8b0 c002 	ldrh.w	ip, [r0, #2]
	if (buf->len != len) {
   102ae:	459c      	cmp	ip, r3
   102b0:	4604      	mov	r4, r0
   102b2:	d01b      	beq.n	102ec <l2cap_recv+0x84>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   102b4:	4851      	ldr	r0, [pc, #324]	; (103fc <l2cap_recv+0x194>)
   102b6:	6802      	ldr	r2, [r0, #0]
   102b8:	0754      	lsls	r4, r2, #29
   102ba:	d012      	beq.n	102e2 <l2cap_recv+0x7a>
   102bc:	466c      	mov	r4, sp
   102be:	b088      	sub	sp, #32
   102c0:	4951      	ldr	r1, [pc, #324]	; (10408 <l2cap_recv+0x1a0>)
   102c2:	9106      	str	r1, [sp, #24]
   102c4:	494f      	ldr	r1, [pc, #316]	; (10404 <l2cap_recv+0x19c>)
   102c6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   102ca:	aa02      	add	r2, sp, #8
   102cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   102d0:	2305      	movs	r3, #5
   102d2:	f842 3f0c 	str.w	r3, [r2, #12]!
   102d6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   102da:	60bb      	str	r3, [r7, #8]
   102dc:	f018 febf 	bl	2905e <z_log_msg2_static_create.constprop.0>
   102e0:	46a5      	mov	sp, r4
}
   102e2:	2000      	movs	r0, #0
   102e4:	3720      	adds	r7, #32
   102e6:	46bd      	mov	sp, r7
   102e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
   102ec:	7841      	ldrb	r1, [r0, #1]
   102ee:	b929      	cbnz	r1, 102fc <l2cap_recv+0x94>
		BT_ERR("Invalid ident value in L2CAP PDU");
   102f0:	4842      	ldr	r0, [pc, #264]	; (103fc <l2cap_recv+0x194>)
   102f2:	6803      	ldr	r3, [r0, #0]
   102f4:	0759      	lsls	r1, r3, #29
   102f6:	d0f4      	beq.n	102e2 <l2cap_recv+0x7a>
   102f8:	4b44      	ldr	r3, [pc, #272]	; (1040c <l2cap_recv+0x1a4>)
   102fa:	e7c3      	b.n	10284 <l2cap_recv+0x1c>
	switch (hdr->code) {
   102fc:	7803      	ldrb	r3, [r0, #0]
   102fe:	2b12      	cmp	r3, #18
   10300:	d027      	beq.n	10352 <l2cap_recv+0xea>
   10302:	2b13      	cmp	r3, #19
   10304:	d01a      	beq.n	1033c <l2cap_recv+0xd4>
   10306:	2b01      	cmp	r3, #1
   10308:	d0eb      	beq.n	102e2 <l2cap_recv+0x7a>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1030a:	483c      	ldr	r0, [pc, #240]	; (103fc <l2cap_recv+0x194>)
   1030c:	6802      	ldr	r2, [r0, #0]
   1030e:	f012 0f06 	tst.w	r2, #6
   10312:	d010      	beq.n	10336 <l2cap_recv+0xce>
   10314:	466d      	mov	r5, sp
   10316:	b088      	sub	sp, #32
   10318:	aa02      	add	r2, sp, #8
   1031a:	493d      	ldr	r1, [pc, #244]	; (10410 <l2cap_recv+0x1a8>)
   1031c:	6111      	str	r1, [r2, #16]
   1031e:	4939      	ldr	r1, [pc, #228]	; (10404 <l2cap_recv+0x19c>)
	switch (hdr->code) {
   10320:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   10324:	2304      	movs	r3, #4
   10326:	f842 3f0c 	str.w	r3, [r2, #12]!
   1032a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1032e:	60bb      	str	r3, [r7, #8]
   10330:	f018 fe95 	bl	2905e <z_log_msg2_static_create.constprop.0>
   10334:	46ad      	mov	sp, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   10336:	7861      	ldrb	r1, [r4, #1]
   10338:	6830      	ldr	r0, [r6, #0]
   1033a:	e01c      	b.n	10376 <l2cap_recv+0x10e>
	if (buf->len < sizeof(*rsp)) {
   1033c:	f1bc 0f01 	cmp.w	ip, #1
   10340:	d8cf      	bhi.n	102e2 <l2cap_recv+0x7a>
		BT_ERR("Too small LE conn param rsp");
   10342:	482e      	ldr	r0, [pc, #184]	; (103fc <l2cap_recv+0x194>)
   10344:	6803      	ldr	r3, [r0, #0]
   10346:	075a      	lsls	r2, r3, #29
   10348:	d0cb      	beq.n	102e2 <l2cap_recv+0x7a>
   1034a:	4b32      	ldr	r3, [pc, #200]	; (10414 <l2cap_recv+0x1ac>)
   1034c:	61bb      	str	r3, [r7, #24]
   1034e:	4b32      	ldr	r3, [pc, #200]	; (10418 <l2cap_recv+0x1b0>)
   10350:	e79a      	b.n	10288 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
   10352:	f1bc 0f07 	cmp.w	ip, #7
   10356:	d807      	bhi.n	10368 <l2cap_recv+0x100>
		BT_ERR("Too small LE conn update param req");
   10358:	4828      	ldr	r0, [pc, #160]	; (103fc <l2cap_recv+0x194>)
   1035a:	6803      	ldr	r3, [r0, #0]
   1035c:	075b      	lsls	r3, r3, #29
   1035e:	d0c0      	beq.n	102e2 <l2cap_recv+0x7a>
   10360:	4b2e      	ldr	r3, [pc, #184]	; (1041c <l2cap_recv+0x1b4>)
   10362:	61bb      	str	r3, [r7, #24]
   10364:	4b2e      	ldr	r3, [pc, #184]	; (10420 <l2cap_recv+0x1b8>)
   10366:	e78f      	b.n	10288 <l2cap_recv+0x20>
   10368:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1036a:	f896 8003 	ldrb.w	r8, [r6, #3]
   1036e:	f1b8 0f00 	cmp.w	r8, #0
   10372:	d003      	beq.n	1037c <l2cap_recv+0x114>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   10374:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   10376:	f018 fec4 	bl	29102 <l2cap_send_reject.constprop.0>
		break;
   1037a:	e7b2      	b.n	102e2 <l2cap_recv+0x7a>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1037c:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1037e:	7850      	ldrb	r0, [r2, #1]
   10380:	7813      	ldrb	r3, [r2, #0]
   10382:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   10386:	813b      	strh	r3, [r7, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   10388:	78d0      	ldrb	r0, [r2, #3]
   1038a:	7893      	ldrb	r3, [r2, #2]
   1038c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   10390:	817b      	strh	r3, [r7, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   10392:	7950      	ldrb	r0, [r2, #5]
   10394:	7913      	ldrb	r3, [r2, #4]
   10396:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1039a:	81bb      	strh	r3, [r7, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1039c:	7993      	ldrb	r3, [r2, #6]
   1039e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   103a0:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   103a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   103a6:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   103a8:	81fb      	strh	r3, [r7, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   103aa:	f7ff fe6b 	bl	10084 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   103ae:	4604      	mov	r4, r0
   103b0:	2800      	cmp	r0, #0
   103b2:	d096      	beq.n	102e2 <l2cap_recv+0x7a>
	accepted = le_param_req(conn, &param);
   103b4:	f107 0108 	add.w	r1, r7, #8
   103b8:	4630      	mov	r0, r6
   103ba:	f7ff fd0f 	bl	fddc <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   103be:	2102      	movs	r1, #2
   103c0:	4605      	mov	r5, r0
   103c2:	f104 0008 	add.w	r0, r4, #8
   103c6:	f019 fd84 	bl	29ed2 <net_buf_simple_add>
	if (accepted) {
   103ca:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   103ce:	b2db      	uxtb	r3, r3
   103d0:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   103d2:	4622      	mov	r2, r4
   103d4:	f8cd 8000 	str.w	r8, [sp]
   103d8:	4643      	mov	r3, r8
   103da:	2105      	movs	r1, #5
   103dc:	4630      	mov	r0, r6
   103de:	f018 fe77 	bl	290d0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   103e2:	b110      	cbz	r0, 103ea <l2cap_recv+0x182>
		net_buf_unref(buf);
   103e4:	4620      	mov	r0, r4
   103e6:	f00e ff8b 	bl	1f300 <net_buf_unref>
	if (accepted) {
   103ea:	2d00      	cmp	r5, #0
   103ec:	f43f af79 	beq.w	102e2 <l2cap_recv+0x7a>
		bt_conn_le_conn_update(conn, &param);
   103f0:	f107 0108 	add.w	r1, r7, #8
   103f4:	4630      	mov	r0, r6
   103f6:	f018 fe06 	bl	29006 <bt_conn_le_conn_update>
   103fa:	e772      	b.n	102e2 <l2cap_recv+0x7a>
   103fc:	2000099c 	.word	0x2000099c
   10400:	00030ebb 	.word	0x00030ebb
   10404:	0003101c 	.word	0x0003101c
   10408:	00030edd 	.word	0x00030edd
   1040c:	00030f02 	.word	0x00030f02
   10410:	00030f6e 	.word	0x00030f6e
   10414:	00030f27 	.word	0x00030f27
   10418:	0003100a 	.word	0x0003100a
   1041c:	00030f47 	.word	0x00030f47
   10420:	00030ff1 	.word	0x00030ff1

00010424 <bt_l2cap_recv>:
{
   10424:	b5b0      	push	{r4, r5, r7, lr}
   10426:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   10428:	898b      	ldrh	r3, [r1, #12]
   1042a:	2b03      	cmp	r3, #3
{
   1042c:	af00      	add	r7, sp, #0
   1042e:	4605      	mov	r5, r0
   10430:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   10432:	d816      	bhi.n	10462 <bt_l2cap_recv+0x3e>
		BT_ERR("Too small L2CAP PDU received");
   10434:	481e      	ldr	r0, [pc, #120]	; (104b0 <bt_l2cap_recv+0x8c>)
   10436:	6803      	ldr	r3, [r0, #0]
   10438:	075b      	lsls	r3, r3, #29
   1043a:	d00c      	beq.n	10456 <bt_l2cap_recv+0x32>
   1043c:	4b1d      	ldr	r3, [pc, #116]	; (104b4 <bt_l2cap_recv+0x90>)
   1043e:	61bb      	str	r3, [r7, #24]
   10440:	4b1d      	ldr	r3, [pc, #116]	; (104b8 <bt_l2cap_recv+0x94>)
   10442:	61fb      	str	r3, [r7, #28]
   10444:	f107 0214 	add.w	r2, r7, #20
   10448:	2303      	movs	r3, #3
   1044a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1044e:	607b      	str	r3, [r7, #4]
   10450:	617b      	str	r3, [r7, #20]
   10452:	f018 fe04 	bl	2905e <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
   10456:	4620      	mov	r0, r4
   10458:	f00e ff52 	bl	1f300 <net_buf_unref>
}
   1045c:	3720      	adds	r7, #32
   1045e:	46bd      	mov	sp, r7
   10460:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10462:	2104      	movs	r1, #4
   10464:	f104 0008 	add.w	r0, r4, #8
   10468:	f019 fd5a 	bl	29f20 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1046c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1046e:	4628      	mov	r0, r5
   10470:	f018 fe70 	bl	29154 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   10474:	b9b0      	cbnz	r0, 104a4 <bt_l2cap_recv+0x80>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   10476:	480e      	ldr	r0, [pc, #56]	; (104b0 <bt_l2cap_recv+0x8c>)
   10478:	6803      	ldr	r3, [r0, #0]
   1047a:	f013 0f06 	tst.w	r3, #6
   1047e:	d0ea      	beq.n	10456 <bt_l2cap_recv+0x32>
   10480:	466d      	mov	r5, sp
   10482:	b088      	sub	sp, #32
   10484:	466a      	mov	r2, sp
   10486:	4b0d      	ldr	r3, [pc, #52]	; (104bc <bt_l2cap_recv+0x98>)
   10488:	6113      	str	r3, [r2, #16]
   1048a:	4b0b      	ldr	r3, [pc, #44]	; (104b8 <bt_l2cap_recv+0x94>)
   1048c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   10490:	2304      	movs	r3, #4
   10492:	f842 3f0c 	str.w	r3, [r2, #12]!
   10496:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1049a:	60bb      	str	r3, [r7, #8]
   1049c:	f018 fddf 	bl	2905e <z_log_msg2_static_create.constprop.0>
   104a0:	46ad      	mov	sp, r5
   104a2:	e7d8      	b.n	10456 <bt_l2cap_recv+0x32>
	chan->ops->recv(chan, buf);
   104a4:	6843      	ldr	r3, [r0, #4]
   104a6:	4621      	mov	r1, r4
   104a8:	691b      	ldr	r3, [r3, #16]
   104aa:	4798      	blx	r3
   104ac:	e7d3      	b.n	10456 <bt_l2cap_recv+0x32>
   104ae:	bf00      	nop
   104b0:	2000099c 	.word	0x2000099c
   104b4:	00030f90 	.word	0x00030f90
   104b8:	0003104c 	.word	0x0003104c
   104bc:	00030fb1 	.word	0x00030fb1

000104c0 <bt_l2cap_update_conn_param>:
{
   104c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   104c2:	460d      	mov	r5, r1
	ident++;
   104c4:	4916      	ldr	r1, [pc, #88]	; (10520 <bt_l2cap_update_conn_param+0x60>)
   104c6:	780b      	ldrb	r3, [r1, #0]
   104c8:	3301      	adds	r3, #1
	if (!ident) {
   104ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   104ce:	bf08      	it	eq
   104d0:	2301      	moveq	r3, #1
   104d2:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   104d4:	7809      	ldrb	r1, [r1, #0]
{
   104d6:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   104d8:	2208      	movs	r2, #8
   104da:	2012      	movs	r0, #18
   104dc:	f7ff fdd2 	bl	10084 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   104e0:	4604      	mov	r4, r0
   104e2:	b1d0      	cbz	r0, 1051a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   104e4:	2108      	movs	r1, #8
   104e6:	4408      	add	r0, r1
   104e8:	f019 fcf3 	bl	29ed2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   104ec:	882b      	ldrh	r3, [r5, #0]
   104ee:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   104f0:	886b      	ldrh	r3, [r5, #2]
   104f2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   104f4:	88ab      	ldrh	r3, [r5, #4]
   104f6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   104f8:	88eb      	ldrh	r3, [r5, #6]
   104fa:	80c3      	strh	r3, [r0, #6]
   104fc:	2300      	movs	r3, #0
   104fe:	9300      	str	r3, [sp, #0]
   10500:	4622      	mov	r2, r4
   10502:	2105      	movs	r1, #5
   10504:	4630      	mov	r0, r6
   10506:	f018 fde3 	bl	290d0 <bt_l2cap_send_cb>
	if (err) {
   1050a:	4605      	mov	r5, r0
   1050c:	b110      	cbz	r0, 10514 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1050e:	4620      	mov	r0, r4
   10510:	f00e fef6 	bl	1f300 <net_buf_unref>
}
   10514:	4628      	mov	r0, r5
   10516:	b002      	add	sp, #8
   10518:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1051a:	f06f 050b 	mvn.w	r5, #11
   1051e:	e7f9      	b.n	10514 <bt_l2cap_update_conn_param+0x54>
   10520:	20005fde 	.word	0x20005fde

00010524 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   10524:	4b02      	ldr	r3, [pc, #8]	; (10530 <att_cfm_sent+0xc>)
   10526:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1052a:	f018 be31 	b.w	29190 <att_sent>
   1052e:	bf00      	nop
   10530:	000295a7 	.word	0x000295a7

00010534 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   10534:	4b02      	ldr	r3, [pc, #8]	; (10540 <att_rsp_sent+0xc>)
   10536:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1053a:	f018 be29 	b.w	29190 <att_sent>
   1053e:	bf00      	nop
   10540:	0002958b 	.word	0x0002958b

00010544 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   10544:	4b02      	ldr	r3, [pc, #8]	; (10550 <att_req_sent+0xc>)
   10546:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1054a:	f018 be21 	b.w	29190 <att_sent>
   1054e:	bf00      	nop
   10550:	00029355 	.word	0x00029355

00010554 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   10554:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   10556:	3808      	subs	r0, #8
   10558:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1055a:	a901      	add	r1, sp, #4
   1055c:	4802      	ldr	r0, [pc, #8]	; (10568 <bt_att_released+0x14>)
   1055e:	f01a fabe 	bl	2aade <k_mem_slab_free>
}
   10562:	b003      	add	sp, #12
   10564:	f85d fb04 	ldr.w	pc, [sp], #4
   10568:	20000aac 	.word	0x20000aac

0001056c <find_type_cb>:
{
   1056c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10570:	b095      	sub	sp, #84	; 0x54
	struct bt_att_chan *chan = data->chan;
   10572:	f8d2 a000 	ldr.w	sl, [r2]
{
   10576:	af02      	add	r7, sp, #8
   10578:	4606      	mov	r6, r0
   1057a:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1057c:	2500      	movs	r5, #0
   1057e:	f642 0301 	movw	r3, #10241	; 0x2801
   10582:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   10584:	f8da 9008 	ldr.w	r9, [sl, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10588:	f887 5034 	strb.w	r5, [r7, #52]	; 0x34
   1058c:	f107 0134 	add.w	r1, r7, #52	; 0x34
{
   10590:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10592:	86fb      	strh	r3, [r7, #54]	; 0x36
   10594:	f018 f992 	bl	288bc <bt_uuid_cmp>
   10598:	2800      	cmp	r0, #0
   1059a:	d077      	beq.n	1068c <find_type_cb+0x120>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1059c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   105a0:	6830      	ldr	r0, [r6, #0]
   105a2:	f887 5034 	strb.w	r5, [r7, #52]	; 0x34
   105a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
   105aa:	86fb      	strh	r3, [r7, #54]	; 0x36
   105ac:	f018 f986 	bl	288bc <bt_uuid_cmp>
   105b0:	b140      	cbz	r0, 105c4 <find_type_cb+0x58>
		if (data->group &&
   105b2:	68a3      	ldr	r3, [r4, #8]
   105b4:	b123      	cbz	r3, 105c0 <find_type_cb+0x54>
   105b6:	885a      	ldrh	r2, [r3, #2]
   105b8:	4542      	cmp	r2, r8
   105ba:	d201      	bcs.n	105c0 <find_type_cb+0x54>
			data->group->end_handle = sys_cpu_to_le16(handle);
   105bc:	f8a3 8002 	strh.w	r8, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   105c0:	2001      	movs	r0, #1
   105c2:	e009      	b.n	105d8 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   105c4:	6861      	ldr	r1, [r4, #4]
   105c6:	4608      	mov	r0, r1
   105c8:	f018 fdda 	bl	29180 <net_buf_frags_len>
   105cc:	f8ba 308a 	ldrh.w	r3, [sl, #138]	; 0x8a
   105d0:	1a1b      	subs	r3, r3, r0
   105d2:	2b03      	cmp	r3, #3
   105d4:	d804      	bhi.n	105e0 <find_type_cb+0x74>
		return BT_GATT_ITER_STOP;
   105d6:	2000      	movs	r0, #0
}
   105d8:	374c      	adds	r7, #76	; 0x4c
   105da:	46bd      	mov	sp, r7
   105dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   105e0:	4608      	mov	r0, r1
   105e2:	f019 fc48 	bl	29e76 <net_buf_frag_last>
   105e6:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   105e8:	6860      	ldr	r0, [r4, #4]
   105ea:	f018 fdc9 	bl	29180 <net_buf_frags_len>
   105ee:	f8ba b08a 	ldrh.w	fp, [sl, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   105f2:	f105 0308 	add.w	r3, r5, #8
   105f6:	ebab 0b00 	sub.w	fp, fp, r0
   105fa:	4618      	mov	r0, r3
   105fc:	607b      	str	r3, [r7, #4]
   105fe:	f019 fcab 	bl	29f58 <net_buf_simple_tailroom>
   10602:	4583      	cmp	fp, r0
   10604:	687b      	ldr	r3, [r7, #4]
   10606:	d244      	bcs.n	10692 <find_type_cb+0x126>
   10608:	6860      	ldr	r0, [r4, #4]
   1060a:	f018 fdb9 	bl	29180 <net_buf_frags_len>
   1060e:	f8ba 308a 	ldrh.w	r3, [sl, #138]	; 0x8a
   10612:	1a18      	subs	r0, r3, r0
	if (!len) {
   10614:	b970      	cbnz	r0, 10634 <find_type_cb+0xc8>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   10616:	6863      	ldr	r3, [r4, #4]
   10618:	7998      	ldrb	r0, [r3, #6]
   1061a:	f00e fdad 	bl	1f178 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1061e:	2200      	movs	r2, #0
   10620:	2300      	movs	r3, #0
   10622:	f019 fbf4 	bl	29e0e <net_buf_alloc_fixed>
		if (!frag) {
   10626:	4605      	mov	r5, r0
   10628:	2800      	cmp	r0, #0
   1062a:	d0d4      	beq.n	105d6 <find_type_cb+0x6a>
		net_buf_frag_add(data->buf, frag);
   1062c:	4601      	mov	r1, r0
   1062e:	6860      	ldr	r0, [r4, #4]
   10630:	f019 fc32 	bl	29e98 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   10634:	2300      	movs	r3, #0
   10636:	9300      	str	r3, [sp, #0]
   10638:	2310      	movs	r3, #16
   1063a:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1063e:	4631      	mov	r1, r6
   10640:	18fa      	adds	r2, r7, r3
   10642:	4648      	mov	r0, r9
   10644:	47d0      	blx	sl
	if (read < 0) {
   10646:	1e06      	subs	r6, r0, #0
   10648:	db20      	blt.n	1068c <find_type_cb+0x120>
	if (read != data->value_len) {
   1064a:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1064c:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1064e:	4296      	cmp	r6, r2
   10650:	d050      	beq.n	106f4 <find_type_cb+0x188>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   10652:	4601      	mov	r1, r0
   10654:	f107 0034 	add.w	r0, r7, #52	; 0x34
   10658:	f018 f95e 	bl	28918 <bt_uuid_create>
   1065c:	b9e8      	cbnz	r0, 1069a <find_type_cb+0x12e>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1065e:	4828      	ldr	r0, [pc, #160]	; (10700 <find_type_cb+0x194>)
   10660:	6803      	ldr	r3, [r0, #0]
   10662:	f013 0f06 	tst.w	r3, #6
   10666:	d011      	beq.n	1068c <find_type_cb+0x120>
   10668:	466d      	mov	r5, sp
   1066a:	b088      	sub	sp, #32
   1066c:	aa02      	add	r2, sp, #8
   1066e:	4925      	ldr	r1, [pc, #148]	; (10704 <find_type_cb+0x198>)
   10670:	7c23      	ldrb	r3, [r4, #16]
   10672:	6111      	str	r1, [r2, #16]
   10674:	4924      	ldr	r1, [pc, #144]	; (10708 <find_type_cb+0x19c>)
   10676:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1067a:	2304      	movs	r3, #4
   1067c:	623b      	str	r3, [r7, #32]
			BT_WARN("Unable to create UUID: size %d", read);
   1067e:	f842 3f0c 	str.w	r3, [r2, #12]!
   10682:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10686:	f018 fea2 	bl	293ce <z_log_msg2_static_create.constprop.0>
   1068a:	46ad      	mov	sp, r5
	data->group = NULL;
   1068c:	2300      	movs	r3, #0
   1068e:	60a3      	str	r3, [r4, #8]
   10690:	e796      	b.n	105c0 <find_type_cb+0x54>
	return net_buf_simple_tailroom(&buf->b);
   10692:	4618      	mov	r0, r3
   10694:	f019 fc60 	bl	29f58 <net_buf_simple_tailroom>
   10698:	e7bc      	b.n	10614 <find_type_cb+0xa8>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1069a:	b2f2      	uxtb	r2, r6
   1069c:	f107 0110 	add.w	r1, r7, #16
   106a0:	f107 0020 	add.w	r0, r7, #32
   106a4:	f018 f938 	bl	28918 <bt_uuid_create>
   106a8:	b978      	cbnz	r0, 106ca <find_type_cb+0x15e>
			BT_WARN("Unable to create UUID: size %d", read);
   106aa:	4815      	ldr	r0, [pc, #84]	; (10700 <find_type_cb+0x194>)
   106ac:	6803      	ldr	r3, [r0, #0]
   106ae:	f013 0f06 	tst.w	r3, #6
   106b2:	d0eb      	beq.n	1068c <find_type_cb+0x120>
   106b4:	466d      	mov	r5, sp
   106b6:	b088      	sub	sp, #32
   106b8:	aa02      	add	r2, sp, #8
   106ba:	4b14      	ldr	r3, [pc, #80]	; (1070c <find_type_cb+0x1a0>)
   106bc:	6113      	str	r3, [r2, #16]
   106be:	4b12      	ldr	r3, [pc, #72]	; (10708 <find_type_cb+0x19c>)
   106c0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   106c4:	2304      	movs	r3, #4
   106c6:	60fb      	str	r3, [r7, #12]
   106c8:	e7d9      	b.n	1067e <find_type_cb+0x112>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   106ca:	f107 0120 	add.w	r1, r7, #32
   106ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
   106d2:	f018 f8f3 	bl	288bc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   106d6:	2800      	cmp	r0, #0
   106d8:	d1d8      	bne.n	1068c <find_type_cb+0x120>
	data->err = 0x00;
   106da:	2300      	movs	r3, #0
   106dc:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   106de:	2104      	movs	r1, #4
   106e0:	f105 0008 	add.w	r0, r5, #8
   106e4:	f019 fbf5 	bl	29ed2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   106e8:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   106ea:	f8a0 8000 	strh.w	r8, [r0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   106ee:	f8a0 8002 	strh.w	r8, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   106f2:	e765      	b.n	105c0 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   106f4:	4632      	mov	r2, r6
   106f6:	f107 0110 	add.w	r1, r7, #16
   106fa:	f018 f830 	bl	2875e <memcmp>
   106fe:	e7ea      	b.n	106d6 <find_type_cb+0x16a>
   10700:	20000924 	.word	0x20000924
   10704:	0003106c 	.word	0x0003106c
   10708:	0003129d 	.word	0x0003129d
   1070c:	0003108f 	.word	0x0003108f

00010710 <att_get>:
{
   10710:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   10712:	7a83      	ldrb	r3, [r0, #10]
   10714:	2b07      	cmp	r3, #7
{
   10716:	b088      	sub	sp, #32
	if (conn->state != BT_CONN_CONNECTED) {
   10718:	d015      	beq.n	10746 <att_get+0x36>
		BT_WARN("Not connected");
   1071a:	481f      	ldr	r0, [pc, #124]	; (10798 <att_get+0x88>)
   1071c:	6803      	ldr	r3, [r0, #0]
   1071e:	f013 0f06 	tst.w	r3, #6
   10722:	d103      	bne.n	1072c <att_get+0x1c>
		return NULL;
   10724:	2400      	movs	r4, #0
}
   10726:	4620      	mov	r0, r4
   10728:	b008      	add	sp, #32
   1072a:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
   1072c:	4b1b      	ldr	r3, [pc, #108]	; (1079c <att_get+0x8c>)
   1072e:	9306      	str	r3, [sp, #24]
   10730:	4b1b      	ldr	r3, [pc, #108]	; (107a0 <att_get+0x90>)
   10732:	9307      	str	r3, [sp, #28]
   10734:	aa05      	add	r2, sp, #20
   10736:	2303      	movs	r3, #3
   10738:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1073c:	9301      	str	r3, [sp, #4]
   1073e:	9305      	str	r3, [sp, #20]
   10740:	f018 fe45 	bl	293ce <z_log_msg2_static_create.constprop.0>
   10744:	e7ee      	b.n	10724 <att_get+0x14>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   10746:	2104      	movs	r1, #4
   10748:	f018 fd04 	bl	29154 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1074c:	4604      	mov	r4, r0
   1074e:	b980      	cbnz	r0, 10772 <att_get+0x62>
		BT_ERR("Unable to find ATT channel");
   10750:	4811      	ldr	r0, [pc, #68]	; (10798 <att_get+0x88>)
   10752:	6803      	ldr	r3, [r0, #0]
   10754:	075a      	lsls	r2, r3, #29
   10756:	d0e5      	beq.n	10724 <att_get+0x14>
   10758:	4b12      	ldr	r3, [pc, #72]	; (107a4 <att_get+0x94>)
   1075a:	9306      	str	r3, [sp, #24]
   1075c:	4b10      	ldr	r3, [pc, #64]	; (107a0 <att_get+0x90>)
   1075e:	9307      	str	r3, [sp, #28]
   10760:	aa05      	add	r2, sp, #20
   10762:	2303      	movs	r3, #3
   10764:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10768:	9301      	str	r3, [sp, #4]
   1076a:	9305      	str	r3, [sp, #20]
   1076c:	f018 fe2f 	bl	293ce <z_log_msg2_static_create.constprop.0>
   10770:	e7d9      	b.n	10726 <att_get+0x16>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10772:	f3bf 8f5b 	dmb	ish
   10776:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1077a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1077e:	075b      	lsls	r3, r3, #29
   10780:	d506      	bpl.n	10790 <att_get+0x80>
		BT_WARN("ATT channel flagged as disconnected");
   10782:	4805      	ldr	r0, [pc, #20]	; (10798 <att_get+0x88>)
   10784:	6803      	ldr	r3, [r0, #0]
   10786:	f013 0f06 	tst.w	r3, #6
   1078a:	d0cb      	beq.n	10724 <att_get+0x14>
   1078c:	4b06      	ldr	r3, [pc, #24]	; (107a8 <att_get+0x98>)
   1078e:	e7ce      	b.n	1072e <att_get+0x1e>
	return att_chan->att;
   10790:	f850 4c08 	ldr.w	r4, [r0, #-8]
   10794:	e7c7      	b.n	10726 <att_get+0x16>
   10796:	bf00      	nop
   10798:	20000924 	.word	0x20000924
   1079c:	000310b2 	.word	0x000310b2
   107a0:	00031301 	.word	0x00031301
   107a4:	000310c4 	.word	0x000310c4
   107a8:	000310e3 	.word	0x000310e3

000107ac <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   107ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107b0:	b084      	sub	sp, #16
   107b2:	af00      	add	r7, sp, #0
   107b4:	4680      	mov	r8, r0
   107b6:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   107b8:	4831      	ldr	r0, [pc, #196]	; (10880 <bt_att_accept+0xd4>)
   107ba:	2200      	movs	r2, #0
   107bc:	2300      	movs	r3, #0
   107be:	1d39      	adds	r1, r7, #4
   107c0:	f013 fe38 	bl	24434 <k_mem_slab_alloc>
   107c4:	4604      	mov	r4, r0
   107c6:	b1d8      	cbz	r0, 10800 <bt_att_accept+0x54>
		BT_ERR("No available ATT context for conn %p", conn);
   107c8:	482e      	ldr	r0, [pc, #184]	; (10884 <bt_att_accept+0xd8>)
   107ca:	6803      	ldr	r3, [r0, #0]
   107cc:	075a      	lsls	r2, r3, #29
   107ce:	d010      	beq.n	107f2 <bt_att_accept+0x46>
   107d0:	466c      	mov	r4, sp
   107d2:	b088      	sub	sp, #32
   107d4:	466a      	mov	r2, sp
   107d6:	4b2c      	ldr	r3, [pc, #176]	; (10888 <bt_att_accept+0xdc>)
   107d8:	6113      	str	r3, [r2, #16]
   107da:	4b2c      	ldr	r3, [pc, #176]	; (1088c <bt_att_accept+0xe0>)
   107dc:	e9c2 3805 	strd	r3, r8, [r2, #20]
		BT_ERR("No available ATT channel for conn %p", att->conn);
   107e0:	2304      	movs	r3, #4
   107e2:	60fb      	str	r3, [r7, #12]
   107e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   107e8:	f842 3f0c 	str.w	r3, [r2, #12]!
   107ec:	f018 fdef 	bl	293ce <z_log_msg2_static_create.constprop.0>
   107f0:	46a5      	mov	sp, r4
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   107f2:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   107f6:	4620      	mov	r0, r4
   107f8:	3710      	adds	r7, #16
   107fa:	46bd      	mov	sp, r7
   107fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(att, 0, sizeof(*att));
   10800:	4601      	mov	r1, r0
   10802:	222c      	movs	r2, #44	; 0x2c
   10804:	6878      	ldr	r0, [r7, #4]
   10806:	f017 ffde 	bl	287c6 <memset>
	att->conn = conn;
   1080a:	687d      	ldr	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1080c:	4820      	ldr	r0, [pc, #128]	; (10890 <bt_att_accept+0xe4>)
	list->tail = NULL;
   1080e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   10810:	e9c5 8400 	strd	r8, r4, [r5]
	list->tail = NULL;
   10814:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   10818:	2200      	movs	r2, #0
   1081a:	2300      	movs	r3, #0
   1081c:	f107 0108 	add.w	r1, r7, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   10820:	60bc      	str	r4, [r7, #8]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10822:	f013 fe07 	bl	24434 <k_mem_slab_alloc>
   10826:	4604      	mov	r4, r0
   10828:	b168      	cbz	r0, 10846 <bt_att_accept+0x9a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1082a:	4816      	ldr	r0, [pc, #88]	; (10884 <bt_att_accept+0xd8>)
   1082c:	6803      	ldr	r3, [r0, #0]
   1082e:	075b      	lsls	r3, r3, #29
   10830:	d0df      	beq.n	107f2 <bt_att_accept+0x46>
   10832:	466c      	mov	r4, sp
   10834:	b088      	sub	sp, #32
   10836:	466a      	mov	r2, sp
   10838:	4916      	ldr	r1, [pc, #88]	; (10894 <bt_att_accept+0xe8>)
   1083a:	682b      	ldr	r3, [r5, #0]
   1083c:	6111      	str	r1, [r2, #16]
   1083e:	4916      	ldr	r1, [pc, #88]	; (10898 <bt_att_accept+0xec>)
   10840:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10844:	e7cc      	b.n	107e0 <bt_att_accept+0x34>
	(void)memset(chan, 0, sizeof(*chan));
   10846:	4601      	mov	r1, r0
   10848:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1084c:	68b8      	ldr	r0, [r7, #8]
   1084e:	f017 ffba 	bl	287c6 <memset>
	chan->chan.chan.ops = &ops;
   10852:	68b8      	ldr	r0, [r7, #8]
   10854:	4b11      	ldr	r3, [pc, #68]	; (1089c <bt_att_accept+0xf0>)
   10856:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   10858:	30f8      	adds	r0, #248	; 0xf8
   1085a:	f01a fa0c 	bl	2ac76 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1085e:	68bb      	ldr	r3, [r7, #8]
   10860:	f3bf 8f5b 	dmb	ish
   10864:	33f0      	adds	r3, #240	; 0xf0
   10866:	e853 2f00 	ldrex	r2, [r3]
   1086a:	e843 4100 	strex	r1, r4, [r3]
   1086e:	2900      	cmp	r1, #0
   10870:	d1f9      	bne.n	10866 <bt_att_accept+0xba>
   10872:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   10876:	68bb      	ldr	r3, [r7, #8]
   10878:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1087c:	6033      	str	r3, [r6, #0]
	return 0;
   1087e:	e7ba      	b.n	107f6 <bt_att_accept+0x4a>
   10880:	20000a90 	.word	0x20000a90
   10884:	20000924 	.word	0x20000924
   10888:	0003110b 	.word	0x0003110b
   1088c:	000312f3 	.word	0x000312f3
   10890:	20000aac 	.word	0x20000aac
   10894:	00031134 	.word	0x00031134
   10898:	000312e6 	.word	0x000312e6
   1089c:	20000318 	.word	0x20000318

000108a0 <read_group_cb>:
{
   108a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   108a4:	4605      	mov	r5, r0
   108a6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   108a8:	f04f 0800 	mov.w	r8, #0
   108ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   108b0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   108b2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   108b4:	f88d 8008 	strb.w	r8, [sp, #8]
   108b8:	a902      	add	r1, sp, #8
{
   108ba:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   108bc:	f8ad 300a 	strh.w	r3, [sp, #10]
   108c0:	f017 fffc 	bl	288bc <bt_uuid_cmp>
   108c4:	b1a0      	cbz	r0, 108f0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   108c6:	f642 0301 	movw	r3, #10241	; 0x2801
   108ca:	6828      	ldr	r0, [r5, #0]
   108cc:	f88d 800c 	strb.w	r8, [sp, #12]
   108d0:	a903      	add	r1, sp, #12
   108d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   108d6:	f017 fff1 	bl	288bc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   108da:	b148      	cbz	r0, 108f0 <read_group_cb+0x50>
		if (data->group &&
   108dc:	6923      	ldr	r3, [r4, #16]
   108de:	b11b      	cbz	r3, 108e8 <read_group_cb+0x48>
   108e0:	885a      	ldrh	r2, [r3, #2]
   108e2:	42b2      	cmp	r2, r6
   108e4:	d200      	bcs.n	108e8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   108e6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   108e8:	2001      	movs	r0, #1
}
   108ea:	b004      	add	sp, #16
   108ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   108f0:	6861      	ldr	r1, [r4, #4]
   108f2:	6828      	ldr	r0, [r5, #0]
   108f4:	f017 ffe2 	bl	288bc <bt_uuid_cmp>
   108f8:	b110      	cbz	r0, 10900 <read_group_cb+0x60>
		data->group = NULL;
   108fa:	2300      	movs	r3, #0
   108fc:	6123      	str	r3, [r4, #16]
   108fe:	e7f3      	b.n	108e8 <read_group_cb+0x48>
	if (data->rsp->len &&
   10900:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   10902:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   10904:	781a      	ldrb	r2, [r3, #0]
   10906:	b13a      	cbz	r2, 10918 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   10908:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1090c:	8981      	ldrh	r1, [r0, #12]
   1090e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   10910:	4293      	cmp	r3, r2
   10912:	da01      	bge.n	10918 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   10914:	2000      	movs	r0, #0
   10916:	e7e8      	b.n	108ea <read_group_cb+0x4a>
   10918:	2104      	movs	r1, #4
   1091a:	3008      	adds	r0, #8
   1091c:	f019 fad9 	bl	29ed2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10920:	4b09      	ldr	r3, [pc, #36]	; (10948 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   10922:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10924:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   10926:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   10928:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1092a:	4629      	mov	r1, r5
   1092c:	9300      	str	r3, [sp, #0]
   1092e:	9401      	str	r4, [sp, #4]
   10930:	2300      	movs	r3, #0
   10932:	4638      	mov	r0, r7
   10934:	f018 fd4e 	bl	293d4 <att_chan_read>
	if (read < 0) {
   10938:	2800      	cmp	r0, #0
   1093a:	dbeb      	blt.n	10914 <read_group_cb+0x74>
	if (!data->group) {
   1093c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1093e:	3800      	subs	r0, #0
   10940:	bf18      	it	ne
   10942:	2001      	movne	r0, #1
   10944:	e7d1      	b.n	108ea <read_group_cb+0x4a>
   10946:	bf00      	nop
   10948:	00029335 	.word	0x00029335

0001094c <chan_send>:
{
   1094c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   10950:	688b      	ldr	r3, [r1, #8]
   10952:	781b      	ldrb	r3, [r3, #0]
   10954:	2bd2      	cmp	r3, #210	; 0xd2
{
   10956:	b08b      	sub	sp, #44	; 0x2c
   10958:	4606      	mov	r6, r0
   1095a:	460c      	mov	r4, r1
   1095c:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1095e:	d11c      	bne.n	1099a <chan_send+0x4e>
		err = bt_smp_sign(chan->att->conn, buf);
   10960:	6803      	ldr	r3, [r0, #0]
   10962:	6818      	ldr	r0, [r3, #0]
   10964:	f019 fa4d 	bl	29e02 <bt_smp_sign>
		if (err) {
   10968:	4605      	mov	r5, r0
   1096a:	b1b0      	cbz	r0, 1099a <chan_send+0x4e>
			BT_ERR("Error signing data");
   1096c:	4826      	ldr	r0, [pc, #152]	; (10a08 <chan_send+0xbc>)
   1096e:	6803      	ldr	r3, [r0, #0]
   10970:	075b      	lsls	r3, r3, #29
   10972:	d00b      	beq.n	1098c <chan_send+0x40>
   10974:	4b25      	ldr	r3, [pc, #148]	; (10a0c <chan_send+0xc0>)
   10976:	9308      	str	r3, [sp, #32]
   10978:	4b25      	ldr	r3, [pc, #148]	; (10a10 <chan_send+0xc4>)
   1097a:	9309      	str	r3, [sp, #36]	; 0x24
   1097c:	aa07      	add	r2, sp, #28
   1097e:	2303      	movs	r3, #3
   10980:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10984:	9303      	str	r3, [sp, #12]
   10986:	9307      	str	r3, [sp, #28]
   10988:	f018 fd21 	bl	293ce <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
   1098c:	4620      	mov	r0, r4
   1098e:	f00e fcb7 	bl	1f300 <net_buf_unref>
}
   10992:	4628      	mov	r0, r5
   10994:	b00b      	add	sp, #44	; 0x2c
   10996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1099a:	f104 0008 	add.w	r0, r4, #8
   1099e:	f019 fad7 	bl	29f50 <net_buf_simple_headroom>
	state->len = buf->len;
   109a2:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   109a6:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   109a8:	b957      	cbnz	r7, 109c0 <chan_send+0x74>
	switch (att_op_get_type(buf->data[0])) {
   109aa:	68a3      	ldr	r3, [r4, #8]
   109ac:	7818      	ldrb	r0, [r3, #0]
   109ae:	f018 fc07 	bl	291c0 <att_op_get_type>
   109b2:	1e43      	subs	r3, r0, #1
   109b4:	b2db      	uxtb	r3, r3
   109b6:	2b04      	cmp	r3, #4
   109b8:	bf9c      	itt	ls
   109ba:	4a16      	ldrls	r2, [pc, #88]	; (10a14 <chan_send+0xc8>)
   109bc:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   109c0:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   109c2:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   109c6:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   109c8:	4b13      	ldr	r3, [pc, #76]	; (10a18 <chan_send+0xcc>)
   109ca:	429f      	cmp	r7, r3
   109cc:	d018      	beq.n	10a00 <chan_send+0xb4>
	} else if (cb == chan_cfm_sent) {
   109ce:	4b13      	ldr	r3, [pc, #76]	; (10a1c <chan_send+0xd0>)
   109d0:	429f      	cmp	r7, r3
   109d2:	d017      	beq.n	10a04 <chan_send+0xb8>
		return att_sent;
   109d4:	4912      	ldr	r1, [pc, #72]	; (10a20 <chan_send+0xd4>)
   109d6:	4b13      	ldr	r3, [pc, #76]	; (10a24 <chan_send+0xd8>)
   109d8:	4a13      	ldr	r2, [pc, #76]	; (10a28 <chan_send+0xdc>)
   109da:	428f      	cmp	r7, r1
   109dc:	bf18      	it	ne
   109de:	4613      	movne	r3, r2
			       &chan->chan.chan);
   109e0:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   109e2:	9600      	str	r6, [sp, #0]
   109e4:	4622      	mov	r2, r4
   109e6:	2104      	movs	r1, #4
   109e8:	f018 fb72 	bl	290d0 <bt_l2cap_send_cb>
	if (err) {
   109ec:	4605      	mov	r5, r0
   109ee:	2800      	cmp	r0, #0
   109f0:	d0cf      	beq.n	10992 <chan_send+0x46>
	buf->data = buf->__buf + state->offset;
   109f2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   109f4:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   109f8:	fa10 f088 	uxtah	r0, r0, r8
   109fc:	60a0      	str	r0, [r4, #8]
}
   109fe:	e7c8      	b.n	10992 <chan_send+0x46>
		return att_rsp_sent;
   10a00:	4b0a      	ldr	r3, [pc, #40]	; (10a2c <chan_send+0xe0>)
   10a02:	e7ed      	b.n	109e0 <chan_send+0x94>
		return att_cfm_sent;
   10a04:	4b0a      	ldr	r3, [pc, #40]	; (10a30 <chan_send+0xe4>)
   10a06:	e7eb      	b.n	109e0 <chan_send+0x94>
   10a08:	20000924 	.word	0x20000924
   10a0c:	0003115d 	.word	0x0003115d
   10a10:	000312dc 	.word	0x000312dc
   10a14:	0002c6f8 	.word	0x0002c6f8
   10a18:	0002958b 	.word	0x0002958b
   10a1c:	000295a7 	.word	0x000295a7
   10a20:	00029355 	.word	0x00029355
   10a24:	00010545 	.word	0x00010545
   10a28:	00029191 	.word	0x00029191
   10a2c:	00010535 	.word	0x00010535
   10a30:	00010525 	.word	0x00010525

00010a34 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   10a34:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   10a36:	4a07      	ldr	r2, [pc, #28]	; (10a54 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   10a38:	4604      	mov	r4, r0
   10a3a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   10a3c:	f7ff ff86 	bl	1094c <chan_send>
	if (err) {
   10a40:	b130      	cbz	r0, 10a50 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   10a42:	4629      	mov	r1, r5
   10a44:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   10a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   10a4c:	f019 ba02 	b.w	29e54 <net_buf_put>
}
   10a50:	bd38      	pop	{r3, r4, r5, pc}
   10a52:	bf00      	nop
   10a54:	0002958b 	.word	0x0002958b

00010a58 <read_type_cb>:
{
   10a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   10a5c:	f8d2 8000 	ldr.w	r8, [r2]
{
   10a60:	4606      	mov	r6, r0
   10a62:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10a64:	6800      	ldr	r0, [r0, #0]
   10a66:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   10a68:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   10a6c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10a6e:	f017 ff25 	bl	288bc <bt_uuid_cmp>
   10a72:	4607      	mov	r7, r0
   10a74:	2800      	cmp	r0, #0
   10a76:	d13e      	bne.n	10af6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   10a78:	4628      	mov	r0, r5
   10a7a:	2215      	movs	r2, #21
   10a7c:	4631      	mov	r1, r6
   10a7e:	f019 f945 	bl	29d0c <bt_gatt_check_perm>
   10a82:	4605      	mov	r5, r0
   10a84:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   10a86:	b148      	cbz	r0, 10a9c <read_type_cb+0x44>
		if (data->rsp->len) {
   10a88:	68e3      	ldr	r3, [r4, #12]
   10a8a:	781b      	ldrb	r3, [r3, #0]
   10a8c:	b923      	cbnz	r3, 10a98 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   10a8e:	2500      	movs	r5, #0
}
   10a90:	4628      	mov	r0, r5
   10a92:	b003      	add	sp, #12
   10a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   10a98:	7527      	strb	r7, [r4, #20]
   10a9a:	e7f8      	b.n	10a8e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   10a9c:	68a0      	ldr	r0, [r4, #8]
   10a9e:	f019 f9ea 	bl	29e76 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   10aa2:	2102      	movs	r1, #2
   10aa4:	3008      	adds	r0, #8
   10aa6:	f019 fa14 	bl	29ed2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10aaa:	4b14      	ldr	r3, [pc, #80]	; (10afc <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   10aac:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10aae:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   10ab0:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10ab4:	4631      	mov	r1, r6
   10ab6:	9300      	str	r3, [sp, #0]
   10ab8:	9401      	str	r4, [sp, #4]
   10aba:	462b      	mov	r3, r5
   10abc:	4640      	mov	r0, r8
   10abe:	f018 fc89 	bl	293d4 <att_chan_read>
	if (read < 0) {
   10ac2:	2800      	cmp	r0, #0
   10ac4:	da07      	bge.n	10ad6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   10ac6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   10aca:	bf26      	itte	cs
   10acc:	4240      	negcs	r0, r0
   10ace:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   10ad0:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   10ad2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   10ad4:	e7dc      	b.n	10a90 <read_type_cb+0x38>
	if (!data->item) {
   10ad6:	6923      	ldr	r3, [r4, #16]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d0d8      	beq.n	10a8e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   10adc:	68a0      	ldr	r0, [r4, #8]
   10ade:	f018 fb4f 	bl	29180 <net_buf_frags_len>
   10ae2:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   10ae6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   10ae8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   10aea:	7818      	ldrb	r0, [r3, #0]
   10aec:	4285      	cmp	r5, r0
   10aee:	bf94      	ite	ls
   10af0:	2500      	movls	r5, #0
   10af2:	2501      	movhi	r5, #1
   10af4:	e7cc      	b.n	10a90 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   10af6:	2501      	movs	r5, #1
   10af8:	e7ca      	b.n	10a90 <read_type_cb+0x38>
   10afa:	bf00      	nop
   10afc:	0002919d 	.word	0x0002919d

00010b00 <bt_att_connected>:
{
   10b00:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   10b02:	4606      	mov	r6, r0
{
   10b04:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   10b06:	2104      	movs	r1, #4
   10b08:	f856 0908 	ldr.w	r0, [r6], #-8
   10b0c:	f018 fb17 	bl	2913e <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   10b10:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   10b14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10b16:	b91b      	cbnz	r3, 10b20 <bt_att_connected+0x20>
   10b18:	f105 000c 	add.w	r0, r5, #12
   10b1c:	f01a f8ab 	bl	2ac76 <z_impl_k_queue_init>
	parent->next = child;
   10b20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10b22:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   10b26:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   10b28:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   10b2c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   10b2e:	b902      	cbnz	r2, 10b32 <bt_att_connected+0x32>
	list->tail = node;
   10b30:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10b32:	f3bf 8f5b 	dmb	ish
   10b36:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   10b3a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   10b3e:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10b40:	bf58      	it	pl
   10b42:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   10b44:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10b46:	bf5c      	itt	pl
   10b48:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10b4c:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   10b50:	f018 fbba 	bl	292c8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   10b54:	f504 7084 	add.w	r0, r4, #264	; 0x108
   10b58:	4902      	ldr	r1, [pc, #8]	; (10b64 <bt_att_connected+0x64>)
}
   10b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   10b5e:	f01a b98d 	b.w	2ae7c <k_work_init_delayable>
   10b62:	bf00      	nop
   10b64:	00011531 	.word	0x00011531

00010b68 <bt_att_chan_create_pdu>:
{
   10b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b6a:	b083      	sub	sp, #12
   10b6c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10b6e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   10b72:	1c53      	adds	r3, r2, #1
   10b74:	428b      	cmp	r3, r1
{
   10b76:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10b78:	d91c      	bls.n	10bb4 <bt_att_chan_create_pdu+0x4c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   10b7a:	4827      	ldr	r0, [pc, #156]	; (10c18 <bt_att_chan_create_pdu+0xb0>)
   10b7c:	6802      	ldr	r2, [r0, #0]
   10b7e:	f012 0f06 	tst.w	r2, #6
   10b82:	d104      	bne.n	10b8e <bt_att_chan_create_pdu+0x26>
		return NULL;
   10b84:	2400      	movs	r4, #0
}
   10b86:	4620      	mov	r0, r4
   10b88:	370c      	adds	r7, #12
   10b8a:	46bd      	mov	sp, r7
   10b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   10b8e:	466c      	mov	r4, sp
   10b90:	b088      	sub	sp, #32
   10b92:	466a      	mov	r2, sp
   10b94:	4d21      	ldr	r5, [pc, #132]	; (10c1c <bt_att_chan_create_pdu+0xb4>)
   10b96:	6115      	str	r5, [r2, #16]
   10b98:	4d21      	ldr	r5, [pc, #132]	; (10c20 <bt_att_chan_create_pdu+0xb8>)
   10b9a:	61d3      	str	r3, [r2, #28]
   10b9c:	2305      	movs	r3, #5
   10b9e:	e9c2 5105 	strd	r5, r1, [r2, #20]
   10ba2:	f842 3f0c 	str.w	r3, [r2, #12]!
   10ba6:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   10baa:	607b      	str	r3, [r7, #4]
   10bac:	f018 fc0f 	bl	293ce <z_log_msg2_static_create.constprop.0>
   10bb0:	46a5      	mov	sp, r4
   10bb2:	e7e7      	b.n	10b84 <bt_att_chan_create_pdu+0x1c>
	switch (att_op_get_type(op)) {
   10bb4:	4628      	mov	r0, r5
   10bb6:	f018 fb03 	bl	291c0 <att_op_get_type>
   10bba:	2802      	cmp	r0, #2
   10bbc:	d001      	beq.n	10bc2 <bt_att_chan_create_pdu+0x5a>
   10bbe:	2804      	cmp	r0, #4
   10bc0:	d11e      	bne.n	10c00 <bt_att_chan_create_pdu+0x98>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   10bc2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   10bc6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   10bc8:	2100      	movs	r1, #0
   10bca:	4608      	mov	r0, r1
   10bcc:	f018 fa7d 	bl	290ca <bt_l2cap_create_pdu_timeout>
   10bd0:	4604      	mov	r4, r0
	if (!buf) {
   10bd2:	b9d0      	cbnz	r0, 10c0a <bt_att_chan_create_pdu+0xa2>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   10bd4:	4810      	ldr	r0, [pc, #64]	; (10c18 <bt_att_chan_create_pdu+0xb0>)
   10bd6:	6803      	ldr	r3, [r0, #0]
   10bd8:	075b      	lsls	r3, r3, #29
   10bda:	d0d3      	beq.n	10b84 <bt_att_chan_create_pdu+0x1c>
   10bdc:	466e      	mov	r6, sp
   10bde:	b088      	sub	sp, #32
   10be0:	466a      	mov	r2, sp
   10be2:	4b10      	ldr	r3, [pc, #64]	; (10c24 <bt_att_chan_create_pdu+0xbc>)
   10be4:	6113      	str	r3, [r2, #16]
   10be6:	4b0e      	ldr	r3, [pc, #56]	; (10c20 <bt_att_chan_create_pdu+0xb8>)
   10be8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   10bec:	2304      	movs	r3, #4
   10bee:	f842 3f0c 	str.w	r3, [r2, #12]!
   10bf2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10bf6:	607b      	str	r3, [r7, #4]
   10bf8:	f018 fbe9 	bl	293ce <z_log_msg2_static_create.constprop.0>
   10bfc:	46b5      	mov	sp, r6
   10bfe:	e7c2      	b.n	10b86 <bt_att_chan_create_pdu+0x1e>
		buf = bt_l2cap_create_pdu(NULL, 0);
   10c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c08:	e7de      	b.n	10bc8 <bt_att_chan_create_pdu+0x60>
   10c0a:	2101      	movs	r1, #1
   10c0c:	3008      	adds	r0, #8
   10c0e:	f019 f960 	bl	29ed2 <net_buf_simple_add>
	hdr->code = op;
   10c12:	7005      	strb	r5, [r0, #0]
	return buf;
   10c14:	e7b7      	b.n	10b86 <bt_att_chan_create_pdu+0x1e>
   10c16:	bf00      	nop
   10c18:	20000924 	.word	0x20000924
   10c1c:	00031174 	.word	0x00031174
   10c20:	000312aa 	.word	0x000312aa
   10c24:	00030e50 	.word	0x00030e50

00010c28 <bt_att_recv>:
{
   10c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c2c:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   10c2e:	898b      	ldrh	r3, [r1, #12]
{
   10c30:	af00      	add	r7, sp, #0
   10c32:	4604      	mov	r4, r0
   10c34:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   10c36:	b9ab      	cbnz	r3, 10c64 <bt_att_recv+0x3c>
		BT_ERR("Too small ATT PDU received");
   10c38:	4866      	ldr	r0, [pc, #408]	; (10dd4 <bt_att_recv+0x1ac>)
   10c3a:	6803      	ldr	r3, [r0, #0]
   10c3c:	075d      	lsls	r5, r3, #29
   10c3e:	d00c      	beq.n	10c5a <bt_att_recv+0x32>
   10c40:	4b65      	ldr	r3, [pc, #404]	; (10dd8 <bt_att_recv+0x1b0>)
   10c42:	61bb      	str	r3, [r7, #24]
   10c44:	4b65      	ldr	r3, [pc, #404]	; (10ddc <bt_att_recv+0x1b4>)
   10c46:	61fb      	str	r3, [r7, #28]
   10c48:	2303      	movs	r3, #3
   10c4a:	607b      	str	r3, [r7, #4]
   10c4c:	617b      	str	r3, [r7, #20]
   10c4e:	f107 0214 	add.w	r2, r7, #20
   10c52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			BT_WARN("Ignoring unexpected indication");
   10c56:	f018 fbba 	bl	293ce <z_log_msg2_static_create.constprop.0>
}
   10c5a:	2000      	movs	r0, #0
   10c5c:	3724      	adds	r7, #36	; 0x24
   10c5e:	46bd      	mov	sp, r7
   10c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10c64:	2101      	movs	r1, #1
   10c66:	f108 0008 	add.w	r0, r8, #8
   10c6a:	f019 f959 	bl	29f20 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   10c6e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10c72:	4605      	mov	r5, r0
   10c74:	2b00      	cmp	r3, #0
   10c76:	d0f0      	beq.n	10c5a <bt_att_recv+0x32>
		if (hdr->code == handlers[i].op) {
   10c78:	7801      	ldrb	r1, [r0, #0]
   10c7a:	4a59      	ldr	r2, [pc, #356]	; (10de0 <bt_att_recv+0x1b8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   10c7c:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10c80:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   10c82:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   10c86:	4288      	cmp	r0, r1
   10c88:	d128      	bne.n	10cdc <bt_att_recv+0xb4>
		if (handler->type == ATT_REQUEST &&
   10c8a:	00d9      	lsls	r1, r3, #3
   10c8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10c90:	f893 9002 	ldrb.w	r9, [r3, #2]
   10c94:	f1b9 0f01 	cmp.w	r9, #1
   10c98:	d149      	bne.n	10d2e <bt_att_recv+0x106>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10c9a:	f3bf 8f5b 	dmb	ish
   10c9e:	34e8      	adds	r4, #232	; 0xe8
   10ca0:	e854 3f00 	ldrex	r3, [r4]
   10ca4:	f043 0001 	orr.w	r0, r3, #1
   10ca8:	e844 0c00 	strex	ip, r0, [r4]
   10cac:	f1bc 0f00 	cmp.w	ip, #0
   10cb0:	d1f6      	bne.n	10ca0 <bt_att_recv+0x78>
   10cb2:	f3bf 8f5b 	dmb	ish
   10cb6:	07dc      	lsls	r4, r3, #31
   10cb8:	d554      	bpl.n	10d64 <bt_att_recv+0x13c>
			BT_WARN("Ignoring unexpected request");
   10cba:	4846      	ldr	r0, [pc, #280]	; (10dd4 <bt_att_recv+0x1ac>)
   10cbc:	6803      	ldr	r3, [r0, #0]
   10cbe:	f013 0f06 	tst.w	r3, #6
   10cc2:	d0ca      	beq.n	10c5a <bt_att_recv+0x32>
   10cc4:	4b47      	ldr	r3, [pc, #284]	; (10de4 <bt_att_recv+0x1bc>)
			BT_WARN("Ignoring unexpected indication");
   10cc6:	61bb      	str	r3, [r7, #24]
   10cc8:	4b44      	ldr	r3, [pc, #272]	; (10ddc <bt_att_recv+0x1b4>)
   10cca:	61fb      	str	r3, [r7, #28]
   10ccc:	2303      	movs	r3, #3
   10cce:	607b      	str	r3, [r7, #4]
   10cd0:	617b      	str	r3, [r7, #20]
   10cd2:	f107 0214 	add.w	r2, r7, #20
   10cd6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10cda:	e7bc      	b.n	10c56 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10cdc:	3301      	adds	r3, #1
   10cde:	2b0d      	cmp	r3, #13
   10ce0:	d1cf      	bne.n	10c82 <bt_att_recv+0x5a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   10ce2:	483c      	ldr	r0, [pc, #240]	; (10dd4 <bt_att_recv+0x1ac>)
   10ce4:	6803      	ldr	r3, [r0, #0]
   10ce6:	f013 0f06 	tst.w	r3, #6
   10cea:	d010      	beq.n	10d0e <bt_att_recv+0xe6>
   10cec:	466c      	mov	r4, sp
   10cee:	b088      	sub	sp, #32
   10cf0:	466a      	mov	r2, sp
   10cf2:	4b3d      	ldr	r3, [pc, #244]	; (10de8 <bt_att_recv+0x1c0>)
   10cf4:	6113      	str	r3, [r2, #16]
   10cf6:	4b39      	ldr	r3, [pc, #228]	; (10ddc <bt_att_recv+0x1b4>)
   10cf8:	e9c2 3105 	strd	r3, r1, [r2, #20]
   10cfc:	2304      	movs	r3, #4
   10cfe:	f842 3f0c 	str.w	r3, [r2, #12]!
   10d02:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10d06:	60bb      	str	r3, [r7, #8]
   10d08:	f018 fb61 	bl	293ce <z_log_msg2_static_create.constprop.0>
   10d0c:	46a5      	mov	sp, r4
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   10d0e:	7829      	ldrb	r1, [r5, #0]
   10d10:	4608      	mov	r0, r1
   10d12:	f018 fa55 	bl	291c0 <att_op_get_type>
   10d16:	2800      	cmp	r0, #0
   10d18:	d09f      	beq.n	10c5a <bt_att_recv+0x32>
   10d1a:	2805      	cmp	r0, #5
   10d1c:	d09d      	beq.n	10c5a <bt_att_recv+0x32>
	if (!req) {
   10d1e:	2900      	cmp	r1, #0
   10d20:	d09b      	beq.n	10c5a <bt_att_recv+0x32>
   10d22:	2306      	movs	r3, #6
   10d24:	2200      	movs	r2, #0
   10d26:	4630      	mov	r0, r6
   10d28:	f018 fcfe 	bl	29728 <send_err_rsp.part.0>
   10d2c:	e795      	b.n	10c5a <bt_att_recv+0x32>
		} else if (handler->type == ATT_INDICATION &&
   10d2e:	f1b9 0f05 	cmp.w	r9, #5
   10d32:	d117      	bne.n	10d64 <bt_att_recv+0x13c>
   10d34:	f3bf 8f5b 	dmb	ish
   10d38:	34e8      	adds	r4, #232	; 0xe8
   10d3a:	e854 3f00 	ldrex	r3, [r4]
   10d3e:	f043 0002 	orr.w	r0, r3, #2
   10d42:	e844 0c00 	strex	ip, r0, [r4]
   10d46:	f1bc 0f00 	cmp.w	ip, #0
   10d4a:	d1f6      	bne.n	10d3a <bt_att_recv+0x112>
   10d4c:	f3bf 8f5b 	dmb	ish
   10d50:	0798      	lsls	r0, r3, #30
   10d52:	d507      	bpl.n	10d64 <bt_att_recv+0x13c>
			BT_WARN("Ignoring unexpected indication");
   10d54:	481f      	ldr	r0, [pc, #124]	; (10dd4 <bt_att_recv+0x1ac>)
   10d56:	6803      	ldr	r3, [r0, #0]
   10d58:	f013 0f06 	tst.w	r3, #6
   10d5c:	f43f af7d 	beq.w	10c5a <bt_att_recv+0x32>
   10d60:	4b22      	ldr	r3, [pc, #136]	; (10dec <bt_att_recv+0x1c4>)
   10d62:	e7b0      	b.n	10cc6 <bt_att_recv+0x9e>
	if (buf->len < handler->expect_len) {
   10d64:	440a      	add	r2, r1
   10d66:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   10d6a:	7851      	ldrb	r1, [r2, #1]
   10d6c:	4299      	cmp	r1, r3
   10d6e:	d91f      	bls.n	10db0 <bt_att_recv+0x188>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   10d70:	4818      	ldr	r0, [pc, #96]	; (10dd4 <bt_att_recv+0x1ac>)
   10d72:	6802      	ldr	r2, [r0, #0]
   10d74:	0752      	lsls	r2, r2, #29
   10d76:	d015      	beq.n	10da4 <bt_att_recv+0x17c>
   10d78:	466c      	mov	r4, sp
   10d7a:	b088      	sub	sp, #32
   10d7c:	466a      	mov	r2, sp
   10d7e:	f8df c070 	ldr.w	ip, [pc, #112]	; 10df0 <bt_att_recv+0x1c8>
   10d82:	7829      	ldrb	r1, [r5, #0]
   10d84:	f8c2 c010 	str.w	ip, [r2, #16]
   10d88:	f8df c050 	ldr.w	ip, [pc, #80]	; 10ddc <bt_att_recv+0x1b4>
   10d8c:	61d1      	str	r1, [r2, #28]
   10d8e:	e9c2 c305 	strd	ip, r3, [r2, #20]
   10d92:	2305      	movs	r3, #5
   10d94:	f842 3f0c 	str.w	r3, [r2, #12]!
   10d98:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10d9c:	60bb      	str	r3, [r7, #8]
   10d9e:	f018 fb16 	bl	293ce <z_log_msg2_static_create.constprop.0>
   10da2:	46a5      	mov	sp, r4
	if (handler->type == ATT_REQUEST && err) {
   10da4:	f1b9 0f01 	cmp.w	r9, #1
   10da8:	f47f af57 	bne.w	10c5a <bt_att_recv+0x32>
   10dac:	2304      	movs	r3, #4
   10dae:	e00b      	b.n	10dc8 <bt_att_recv+0x1a0>
		err = handler->func(att_chan, buf);
   10db0:	6853      	ldr	r3, [r2, #4]
   10db2:	4641      	mov	r1, r8
   10db4:	4630      	mov	r0, r6
   10db6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   10db8:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   10dbc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   10dbe:	f47f af4c 	bne.w	10c5a <bt_att_recv+0x32>
   10dc2:	2800      	cmp	r0, #0
   10dc4:	f43f af49 	beq.w	10c5a <bt_att_recv+0x32>
		send_err_rsp(att_chan, hdr->code, 0, err);
   10dc8:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   10dca:	2900      	cmp	r1, #0
   10dcc:	f43f af45 	beq.w	10c5a <bt_att_recv+0x32>
   10dd0:	e7a8      	b.n	10d24 <bt_att_recv+0xfc>
   10dd2:	bf00      	nop
   10dd4:	20000924 	.word	0x20000924
   10dd8:	0003119d 	.word	0x0003119d
   10ddc:	000312d0 	.word	0x000312d0
   10de0:	0002c70c 	.word	0x0002c70c
   10de4:	000311da 	.word	0x000311da
   10de8:	000311bc 	.word	0x000311bc
   10dec:	000311fa 	.word	0x000311fa
   10df0:	0003121d 	.word	0x0003121d

00010df4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10df8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10dfa:	6803      	ldr	r3, [r0, #0]
   10dfc:	460e      	mov	r6, r1
   10dfe:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10e00:	b087      	sub	sp, #28
   10e02:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10e04:	bf18      	it	ne
   10e06:	2101      	movne	r1, #1
   10e08:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10e0a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10e0c:	f018 ffa1 	bl	29d52 <bt_gatt_change_aware>
   10e10:	2800      	cmp	r0, #0
   10e12:	d04a      	beq.n	10eaa <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   10e14:	2f00      	cmp	r7, #0
   10e16:	d04a      	beq.n	10eae <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   10e18:	2218      	movs	r2, #24
   10e1a:	2100      	movs	r1, #0
   10e1c:	4668      	mov	r0, sp
   10e1e:	f017 fcd2 	bl	287c6 <memset>
	if (rsp) {
   10e22:	f1b8 0f00 	cmp.w	r8, #0
   10e26:	d122      	bne.n	10e6e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   10e28:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10e2a:	4a22      	ldr	r2, [pc, #136]	; (10eb4 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   10e2c:	681b      	ldr	r3, [r3, #0]
   10e2e:	9300      	str	r3, [sp, #0]
	data.value = value;
   10e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e32:	9303      	str	r3, [sp, #12]
	data.len = len;
   10e34:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   10e38:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   10e3c:	2301      	movs	r3, #1
   10e3e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   10e42:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10e46:	466b      	mov	r3, sp
   10e48:	4639      	mov	r1, r7
   10e4a:	4638      	mov	r0, r7
	data.req = req;
   10e4c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   10e50:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10e54:	f018 f9e1 	bl	2921a <bt_gatt_foreach_attr>
	if (data.err) {
   10e58:	f89d 4014 	ldrb.w	r4, [sp, #20]
   10e5c:	b1f4      	cbz	r4, 10e9c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   10e5e:	f1b8 0f00 	cmp.w	r8, #0
   10e62:	d10e      	bne.n	10e82 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   10e64:	2400      	movs	r4, #0
}
   10e66:	4620      	mov	r0, r4
   10e68:	b007      	add	sp, #28
   10e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   10e6e:	2200      	movs	r2, #0
   10e70:	4641      	mov	r1, r8
   10e72:	4628      	mov	r0, r5
   10e74:	f7ff fe78 	bl	10b68 <bt_att_chan_create_pdu>
   10e78:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   10e7a:	2800      	cmp	r0, #0
   10e7c:	d1d4      	bne.n	10e28 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   10e7e:	240e      	movs	r4, #14
   10e80:	e7f1      	b.n	10e66 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   10e82:	9801      	ldr	r0, [sp, #4]
   10e84:	f00e fa3c 	bl	1f300 <net_buf_unref>
	if (!req) {
   10e88:	2e00      	cmp	r6, #0
   10e8a:	d0eb      	beq.n	10e64 <att_write_rsp.constprop.0+0x70>
   10e8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   10e90:	463a      	mov	r2, r7
   10e92:	4631      	mov	r1, r6
   10e94:	4628      	mov	r0, r5
   10e96:	f018 fc47 	bl	29728 <send_err_rsp.part.0>
   10e9a:	e7e3      	b.n	10e64 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   10e9c:	9901      	ldr	r1, [sp, #4]
   10e9e:	2900      	cmp	r1, #0
   10ea0:	d0e0      	beq.n	10e64 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   10ea2:	4628      	mov	r0, r5
   10ea4:	f7ff fdc6 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
   10ea8:	e7dd      	b.n	10e66 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10eaa:	2412      	movs	r4, #18
   10eac:	e7db      	b.n	10e66 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   10eae:	2401      	movs	r4, #1
   10eb0:	e7d9      	b.n	10e66 <att_write_rsp.constprop.0+0x72>
   10eb2:	bf00      	nop
   10eb4:	0002936b 	.word	0x0002936b

00010eb8 <bt_att_create_pdu>:
{
   10eb8:	b5b0      	push	{r4, r5, r7, lr}
   10eba:	b082      	sub	sp, #8
   10ebc:	af00      	add	r7, sp, #0
   10ebe:	460d      	mov	r5, r1
   10ec0:	4614      	mov	r4, r2
	att = att_get(conn);
   10ec2:	f7ff fc25 	bl	10710 <att_get>
	if (!att) {
   10ec6:	b358      	cbz	r0, 10f20 <bt_att_create_pdu+0x68>
	return list->head;
   10ec8:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10eca:	b15b      	cbz	r3, 10ee4 <bt_att_create_pdu+0x2c>
   10ecc:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   10ed0:	681b      	ldr	r3, [r3, #0]
   10ed2:	b10b      	cbz	r3, 10ed8 <bt_att_create_pdu+0x20>
   10ed4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10ed8:	1c61      	adds	r1, r4, #1
   10eda:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   10ede:	4291      	cmp	r1, r2
   10ee0:	d91a      	bls.n	10f18 <bt_att_create_pdu+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10ee2:	bb03      	cbnz	r3, 10f26 <bt_att_create_pdu+0x6e>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   10ee4:	4815      	ldr	r0, [pc, #84]	; (10f3c <bt_att_create_pdu+0x84>)
   10ee6:	6803      	ldr	r3, [r0, #0]
   10ee8:	f013 0306 	ands.w	r3, r3, #6
   10eec:	d023      	beq.n	10f36 <bt_att_create_pdu+0x7e>
   10eee:	466d      	mov	r5, sp
   10ef0:	b088      	sub	sp, #32
   10ef2:	466b      	mov	r3, sp
   10ef4:	4a12      	ldr	r2, [pc, #72]	; (10f40 <bt_att_create_pdu+0x88>)
   10ef6:	611a      	str	r2, [r3, #16]
   10ef8:	4a12      	ldr	r2, [pc, #72]	; (10f44 <bt_att_create_pdu+0x8c>)
   10efa:	615a      	str	r2, [r3, #20]
   10efc:	461a      	mov	r2, r3
   10efe:	2104      	movs	r1, #4
   10f00:	3401      	adds	r4, #1
   10f02:	619c      	str	r4, [r3, #24]
   10f04:	6079      	str	r1, [r7, #4]
   10f06:	f842 1f0c 	str.w	r1, [r2, #12]!
   10f0a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10f0e:	f018 fa5e 	bl	293ce <z_log_msg2_static_create.constprop.0>
	return NULL;
   10f12:	2000      	movs	r0, #0
   10f14:	46ad      	mov	sp, r5
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   10f16:	e003      	b.n	10f20 <bt_att_create_pdu+0x68>
		return bt_att_chan_create_pdu(chan, op, len);
   10f18:	4622      	mov	r2, r4
   10f1a:	4629      	mov	r1, r5
   10f1c:	f7ff fe24 	bl	10b68 <bt_att_chan_create_pdu>
}
   10f20:	3708      	adds	r7, #8
   10f22:	46bd      	mov	sp, r7
   10f24:	bdb0      	pop	{r4, r5, r7, pc}
   10f26:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10f2a:	b10a      	cbz	r2, 10f30 <bt_att_create_pdu+0x78>
   10f2c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   10f30:	4618      	mov	r0, r3
   10f32:	4613      	mov	r3, r2
   10f34:	e7d1      	b.n	10eda <bt_att_create_pdu+0x22>
		return NULL;
   10f36:	4618      	mov	r0, r3
   10f38:	e7f2      	b.n	10f20 <bt_att_create_pdu+0x68>
   10f3a:	bf00      	nop
   10f3c:	20000924 	.word	0x20000924
   10f40:	00031240 	.word	0x00031240
   10f44:	00031309 	.word	0x00031309

00010f48 <att_read_group_req>:
{
   10f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   10f4c:	898c      	ldrh	r4, [r1, #12]
   10f4e:	3c04      	subs	r4, #4
   10f50:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   10f52:	2c02      	cmp	r4, #2
{
   10f54:	4605      	mov	r5, r0
   10f56:	b08c      	sub	sp, #48	; 0x30
   10f58:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   10f5a:	d001      	beq.n	10f60 <att_read_group_req+0x18>
   10f5c:	2c10      	cmp	r4, #16
   10f5e:	d16e      	bne.n	1103e <att_read_group_req+0xf6>
   10f60:	2104      	movs	r1, #4
   10f62:	3008      	adds	r0, #8
   10f64:	f018 ffdc 	bl	29f20 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10f68:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   10f6c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   10f6e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10f70:	1d01      	adds	r1, r0, #4
   10f72:	4622      	mov	r2, r4
   10f74:	4640      	mov	r0, r8
   10f76:	f017 fccf 	bl	28918 <bt_uuid_create>
   10f7a:	2800      	cmp	r0, #0
   10f7c:	d061      	beq.n	11042 <att_read_group_req+0xfa>
	if (!start || !end) {
   10f7e:	2e00      	cmp	r6, #0
   10f80:	d03a      	beq.n	10ff8 <att_read_group_req+0xb0>
   10f82:	2400      	movs	r4, #0
   10f84:	2f00      	cmp	r7, #0
   10f86:	d036      	beq.n	10ff6 <att_read_group_req+0xae>
	if (start > end) {
   10f88:	42b7      	cmp	r7, r6
   10f8a:	d335      	bcc.n	10ff8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   10f8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10f90:	a901      	add	r1, sp, #4
   10f92:	4640      	mov	r0, r8
   10f94:	f88d 4004 	strb.w	r4, [sp, #4]
   10f98:	f8ad 3006 	strh.w	r3, [sp, #6]
   10f9c:	f017 fc8e 	bl	288bc <bt_uuid_cmp>
   10fa0:	2800      	cmp	r0, #0
   10fa2:	d134      	bne.n	1100e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   10fa4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   10fa6:	2214      	movs	r2, #20
   10fa8:	2100      	movs	r1, #0
   10faa:	a807      	add	r0, sp, #28
   10fac:	f017 fc0b 	bl	287c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   10fb0:	2201      	movs	r2, #1
   10fb2:	2111      	movs	r1, #17
   10fb4:	4620      	mov	r0, r4
   10fb6:	f7ff ff7f 	bl	10eb8 <bt_att_create_pdu>
   10fba:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   10fbc:	2800      	cmp	r0, #0
   10fbe:	d040      	beq.n	11042 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   10fc0:	2101      	movs	r1, #1
   10fc2:	3008      	adds	r0, #8
	data.uuid = uuid;
   10fc4:	e9cd 5807 	strd	r5, r8, [sp, #28]
   10fc8:	f018 ff83 	bl	29ed2 <net_buf_simple_add>
	data.rsp->len = 0U;
   10fcc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   10fd0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10fd2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   10fd4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10fd8:	4a1b      	ldr	r2, [pc, #108]	; (11048 <att_read_group_req+0x100>)
	data.group = NULL;
   10fda:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10fde:	4639      	mov	r1, r7
   10fe0:	4630      	mov	r0, r6
   10fe2:	f018 f91a 	bl	2921a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   10fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10fe8:	781c      	ldrb	r4, [r3, #0]
   10fea:	bb1c      	cbnz	r4, 11034 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   10fec:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fee:	f00e f987 	bl	1f300 <net_buf_unref>
	if (!req) {
   10ff2:	230a      	movs	r3, #10
   10ff4:	e018      	b.n	11028 <att_read_group_req+0xe0>
			*err = 0U;
   10ff6:	463e      	mov	r6, r7
	if (!req) {
   10ff8:	2301      	movs	r3, #1
   10ffa:	4632      	mov	r2, r6
   10ffc:	2110      	movs	r1, #16
   10ffe:	4628      	mov	r0, r5
   11000:	f018 fb92 	bl	29728 <send_err_rsp.part.0>
		return 0;
   11004:	2400      	movs	r4, #0
}
   11006:	4620      	mov	r0, r4
   11008:	b00c      	add	sp, #48	; 0x30
   1100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1100e:	f642 0301 	movw	r3, #10241	; 0x2801
   11012:	a907      	add	r1, sp, #28
   11014:	4640      	mov	r0, r8
   11016:	f88d 401c 	strb.w	r4, [sp, #28]
   1101a:	f8ad 301e 	strh.w	r3, [sp, #30]
   1101e:	f017 fc4d 	bl	288bc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11022:	2800      	cmp	r0, #0
   11024:	d0be      	beq.n	10fa4 <att_read_group_req+0x5c>
	if (!req) {
   11026:	2310      	movs	r3, #16
   11028:	4632      	mov	r2, r6
   1102a:	2110      	movs	r1, #16
   1102c:	4628      	mov	r0, r5
   1102e:	f018 fb7b 	bl	29728 <send_err_rsp.part.0>
		return 0;
   11032:	e7e8      	b.n	11006 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11034:	9909      	ldr	r1, [sp, #36]	; 0x24
   11036:	4628      	mov	r0, r5
   11038:	f7ff fcfc 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1103c:	e7e2      	b.n	11004 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1103e:	2404      	movs	r4, #4
   11040:	e7e1      	b.n	11006 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   11042:	240e      	movs	r4, #14
   11044:	e7df      	b.n	11006 <att_read_group_req+0xbe>
   11046:	bf00      	nop
   11048:	000108a1 	.word	0x000108a1

0001104c <att_read_mult_req>:
{
   1104c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11050:	6886      	ldr	r6, [r0, #8]
{
   11052:	b085      	sub	sp, #20
   11054:	4604      	mov	r4, r0
   11056:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   11058:	4630      	mov	r0, r6
   1105a:	2101      	movs	r1, #1
   1105c:	f018 fe79 	bl	29d52 <bt_gatt_change_aware>
   11060:	b3b8      	cbz	r0, 110d2 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   11062:	2210      	movs	r2, #16
   11064:	2100      	movs	r1, #0
   11066:	4668      	mov	r0, sp
   11068:	f017 fbad 	bl	287c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1106c:	2200      	movs	r2, #0
   1106e:	210f      	movs	r1, #15
   11070:	4630      	mov	r0, r6
   11072:	f7ff ff21 	bl	10eb8 <bt_att_create_pdu>
   11076:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11078:	b368      	cbz	r0, 110d6 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1107a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 110dc <att_read_mult_req+0x90>
	data.chan = chan;
   1107e:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   11080:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11084:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   11088:	89ab      	ldrh	r3, [r5, #12]
   1108a:	2b01      	cmp	r3, #1
   1108c:	d804      	bhi.n	11098 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1108e:	9902      	ldr	r1, [sp, #8]
   11090:	4620      	mov	r0, r4
   11092:	f7ff fccf 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
   11096:	e018      	b.n	110ca <att_read_mult_req+0x7e>
   11098:	4638      	mov	r0, r7
   1109a:	f018 ff51 	bl	29f40 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1109e:	466b      	mov	r3, sp
   110a0:	464a      	mov	r2, r9
   110a2:	4601      	mov	r1, r0
   110a4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   110a6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   110aa:	f018 f8b6 	bl	2921a <bt_gatt_foreach_attr>
		if (data.err) {
   110ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
   110b2:	2b00      	cmp	r3, #0
   110b4:	d0e8      	beq.n	11088 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   110b6:	9802      	ldr	r0, [sp, #8]
   110b8:	f00e f922 	bl	1f300 <net_buf_unref>
	if (!req) {
   110bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   110c0:	4632      	mov	r2, r6
   110c2:	210e      	movs	r1, #14
   110c4:	4620      	mov	r0, r4
   110c6:	f018 fb2f 	bl	29728 <send_err_rsp.part.0>
	return 0;
   110ca:	2000      	movs	r0, #0
}
   110cc:	b005      	add	sp, #20
   110ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   110d2:	2012      	movs	r0, #18
   110d4:	e7fa      	b.n	110cc <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   110d6:	200e      	movs	r0, #14
   110d8:	e7f8      	b.n	110cc <att_read_mult_req+0x80>
   110da:	bf00      	nop
   110dc:	000295c3 	.word	0x000295c3

000110e0 <att_read_rsp>:
{
   110e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   110e4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   110e8:	4605      	mov	r5, r0
   110ea:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   110ec:	4640      	mov	r0, r8
   110ee:	2101      	movs	r1, #1
{
   110f0:	4614      	mov	r4, r2
   110f2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   110f4:	f018 fe2d 	bl	29d52 <bt_gatt_change_aware>
   110f8:	b388      	cbz	r0, 1115e <att_read_rsp+0x7e>
	if (!handle) {
   110fa:	b396      	cbz	r6, 11162 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   110fc:	2210      	movs	r2, #16
   110fe:	2100      	movs	r1, #0
   11100:	4668      	mov	r0, sp
   11102:	f017 fb60 	bl	287c6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   11106:	2200      	movs	r2, #0
   11108:	4621      	mov	r1, r4
   1110a:	4640      	mov	r0, r8
   1110c:	f7ff fed4 	bl	10eb8 <bt_att_create_pdu>
   11110:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11112:	b340      	cbz	r0, 11166 <att_read_rsp+0x86>
	data.offset = offset;
   11114:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11118:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1111c:	2301      	movs	r3, #1
   1111e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11122:	4a12      	ldr	r2, [pc, #72]	; (1116c <att_read_rsp+0x8c>)
	data.chan = chan;
   11124:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11126:	466b      	mov	r3, sp
   11128:	4631      	mov	r1, r6
   1112a:	4630      	mov	r0, r6
   1112c:	f018 f875 	bl	2921a <bt_gatt_foreach_attr>
	if (data.err) {
   11130:	f89d 400c 	ldrb.w	r4, [sp, #12]
   11134:	b174      	cbz	r4, 11154 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   11136:	9802      	ldr	r0, [sp, #8]
   11138:	f00e f8e2 	bl	1f300 <net_buf_unref>
	if (!req) {
   1113c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11140:	4632      	mov	r2, r6
   11142:	4639      	mov	r1, r7
   11144:	4628      	mov	r0, r5
   11146:	f018 faef 	bl	29728 <send_err_rsp.part.0>
		return 0;
   1114a:	2400      	movs	r4, #0
}
   1114c:	4620      	mov	r0, r4
   1114e:	b004      	add	sp, #16
   11150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11154:	9902      	ldr	r1, [sp, #8]
   11156:	4628      	mov	r0, r5
   11158:	f7ff fc6c 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1115c:	e7f6      	b.n	1114c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1115e:	2412      	movs	r4, #18
   11160:	e7f4      	b.n	1114c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11162:	2401      	movs	r4, #1
   11164:	e7f2      	b.n	1114c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   11166:	240e      	movs	r4, #14
   11168:	e7f0      	b.n	1114c <att_read_rsp+0x6c>
   1116a:	bf00      	nop
   1116c:	000295c3 	.word	0x000295c3

00011170 <att_read_type_req>:
{
   11170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11174:	898c      	ldrh	r4, [r1, #12]
   11176:	3c04      	subs	r4, #4
   11178:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1117a:	2c02      	cmp	r4, #2
{
   1117c:	4605      	mov	r5, r0
   1117e:	b08c      	sub	sp, #48	; 0x30
   11180:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   11182:	d001      	beq.n	11188 <att_read_type_req+0x18>
   11184:	2c10      	cmp	r4, #16
   11186:	d14f      	bne.n	11228 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   11188:	2104      	movs	r1, #4
   1118a:	3008      	adds	r0, #8
   1118c:	f018 fec8 	bl	29f20 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11190:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   11194:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11196:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11198:	1d01      	adds	r1, r0, #4
   1119a:	4622      	mov	r2, r4
   1119c:	4640      	mov	r0, r8
   1119e:	f017 fbbb 	bl	28918 <bt_uuid_create>
   111a2:	b188      	cbz	r0, 111c8 <att_read_type_req+0x58>
	if (!start || !end) {
   111a4:	b19e      	cbz	r6, 111ce <att_read_type_req+0x5e>
   111a6:	b18f      	cbz	r7, 111cc <att_read_type_req+0x5c>
	if (start > end) {
   111a8:	42be      	cmp	r6, r7
   111aa:	d810      	bhi.n	111ce <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   111ac:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   111ae:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   111b0:	2100      	movs	r1, #0
   111b2:	eb0d 0002 	add.w	r0, sp, r2
   111b6:	f017 fb06 	bl	287c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   111ba:	2201      	movs	r2, #1
   111bc:	2109      	movs	r1, #9
   111be:	4620      	mov	r0, r4
   111c0:	f7ff fe7a 	bl	10eb8 <bt_att_create_pdu>
   111c4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   111c6:	b968      	cbnz	r0, 111e4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   111c8:	240e      	movs	r4, #14
   111ca:	e007      	b.n	111dc <att_read_type_req+0x6c>
			*err = 0U;
   111cc:	463e      	mov	r6, r7
	if (!req) {
   111ce:	2301      	movs	r3, #1
   111d0:	4632      	mov	r2, r6
   111d2:	2108      	movs	r1, #8
   111d4:	4628      	mov	r0, r5
   111d6:	f018 faa7 	bl	29728 <send_err_rsp.part.0>
		return 0;
   111da:	2400      	movs	r4, #0
}
   111dc:	4620      	mov	r0, r4
   111de:	b00c      	add	sp, #48	; 0x30
   111e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   111e4:	2101      	movs	r1, #1
   111e6:	3008      	adds	r0, #8
	data.uuid = uuid;
   111e8:	e9cd 5806 	strd	r5, r8, [sp, #24]
   111ec:	f018 fe71 	bl	29ed2 <net_buf_simple_add>
	data.rsp->len = 0U;
   111f0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   111f4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   111f6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   111f8:	4a0c      	ldr	r2, [pc, #48]	; (1122c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   111fa:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   111fe:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11200:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11204:	4630      	mov	r0, r6
   11206:	ab06      	add	r3, sp, #24
   11208:	f018 f807 	bl	2921a <bt_gatt_foreach_attr>
	if (data.err) {
   1120c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   11210:	b12c      	cbz	r4, 1121e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   11212:	9808      	ldr	r0, [sp, #32]
   11214:	f00e f874 	bl	1f300 <net_buf_unref>
	if (!req) {
   11218:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1121c:	e7d8      	b.n	111d0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1121e:	9908      	ldr	r1, [sp, #32]
   11220:	4628      	mov	r0, r5
   11222:	f7ff fc07 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   11226:	e7d9      	b.n	111dc <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   11228:	2404      	movs	r4, #4
   1122a:	e7d7      	b.n	111dc <att_read_type_req+0x6c>
   1122c:	00010a59 	.word	0x00010a59

00011230 <att_find_type_req>:
{
   11230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11234:	4688      	mov	r8, r1
   11236:	b086      	sub	sp, #24
   11238:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1123a:	2106      	movs	r1, #6
   1123c:	f108 0008 	add.w	r0, r8, #8
   11240:	f018 fe6e 	bl	29f20 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   11244:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   11246:	b317      	cbz	r7, 1128e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   11248:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1124c:	f1b9 0f00 	cmp.w	r9, #0
   11250:	d01c      	beq.n	1128c <att_find_type_req+0x5c>
	if (start > end) {
   11252:	45b9      	cmp	r9, r7
   11254:	d31b      	bcc.n	1128e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   11256:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   11258:	f8ad 3002 	strh.w	r3, [sp, #2]
   1125c:	2400      	movs	r4, #0
   1125e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11262:	a901      	add	r1, sp, #4
   11264:	4668      	mov	r0, sp
	value = buf->data;
   11266:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1126a:	f88d 4000 	strb.w	r4, [sp]
   1126e:	f88d 4004 	strb.w	r4, [sp, #4]
   11272:	f8ad 3006 	strh.w	r3, [sp, #6]
   11276:	f017 fb21 	bl	288bc <bt_uuid_cmp>
   1127a:	4606      	mov	r6, r0
   1127c:	b190      	cbz	r0, 112a4 <att_find_type_req+0x74>
	if (!req) {
   1127e:	230a      	movs	r3, #10
   11280:	463a      	mov	r2, r7
   11282:	2106      	movs	r1, #6
   11284:	4628      	mov	r0, r5
   11286:	f018 fa4f 	bl	29728 <send_err_rsp.part.0>
		return 0;
   1128a:	e007      	b.n	1129c <att_find_type_req+0x6c>
			*err = 0U;
   1128c:	464f      	mov	r7, r9
	if (!req) {
   1128e:	2301      	movs	r3, #1
   11290:	463a      	mov	r2, r7
   11292:	2106      	movs	r1, #6
   11294:	4628      	mov	r0, r5
   11296:	f018 fa47 	bl	29728 <send_err_rsp.part.0>
		return 0;
   1129a:	2400      	movs	r4, #0
}
   1129c:	4620      	mov	r0, r4
   1129e:	b006      	add	sp, #24
   112a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   112a4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   112a8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   112ac:	4601      	mov	r1, r0
   112ae:	2214      	movs	r2, #20
   112b0:	a801      	add	r0, sp, #4
   112b2:	f017 fa88 	bl	287c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   112b6:	4632      	mov	r2, r6
   112b8:	2107      	movs	r1, #7
   112ba:	4640      	mov	r0, r8
   112bc:	f7ff fdfc 	bl	10eb8 <bt_att_create_pdu>
   112c0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   112c2:	b1d8      	cbz	r0, 112fc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   112c4:	230a      	movs	r3, #10
   112c6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   112ca:	4a0d      	ldr	r2, [pc, #52]	; (11300 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   112cc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   112d0:	ab01      	add	r3, sp, #4
   112d2:	4649      	mov	r1, r9
   112d4:	4638      	mov	r0, r7
	data.value = value;
   112d6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   112da:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   112dc:	f017 ff9d 	bl	2921a <bt_gatt_foreach_attr>
	if (data.err) {
   112e0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   112e4:	b12c      	cbz	r4, 112f2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   112e6:	9802      	ldr	r0, [sp, #8]
   112e8:	f00e f80a 	bl	1f300 <net_buf_unref>
	if (!req) {
   112ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   112f0:	e7ce      	b.n	11290 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   112f2:	9902      	ldr	r1, [sp, #8]
   112f4:	4628      	mov	r0, r5
   112f6:	f7ff fb9d 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   112fa:	e7cf      	b.n	1129c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   112fc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   112fe:	e7cd      	b.n	1129c <att_find_type_req+0x6c>
   11300:	0001056d 	.word	0x0001056d

00011304 <att_find_info_req>:
{
   11304:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   11306:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   11308:	881e      	ldrh	r6, [r3, #0]
{
   1130a:	b085      	sub	sp, #20
   1130c:	4605      	mov	r5, r0
	if (!start || !end) {
   1130e:	b19e      	cbz	r6, 11338 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   11310:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   11312:	b184      	cbz	r4, 11336 <att_find_info_req+0x32>
	if (start > end) {
   11314:	42a6      	cmp	r6, r4
   11316:	d80f      	bhi.n	11338 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   11318:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1131a:	2210      	movs	r2, #16
   1131c:	2100      	movs	r1, #0
   1131e:	4668      	mov	r0, sp
   11320:	f017 fa51 	bl	287c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   11324:	2200      	movs	r2, #0
   11326:	2105      	movs	r1, #5
   11328:	4638      	mov	r0, r7
   1132a:	f7ff fdc5 	bl	10eb8 <bt_att_create_pdu>
   1132e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   11330:	b958      	cbnz	r0, 1134a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   11332:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   11334:	e007      	b.n	11346 <att_find_info_req+0x42>
			*err = 0U;
   11336:	4626      	mov	r6, r4
	if (!req) {
   11338:	2301      	movs	r3, #1
   1133a:	4632      	mov	r2, r6
   1133c:	2104      	movs	r1, #4
   1133e:	4628      	mov	r0, r5
   11340:	f018 f9f2 	bl	29728 <send_err_rsp.part.0>
	return 0;
   11344:	2000      	movs	r0, #0
}
   11346:	b005      	add	sp, #20
   11348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1134a:	4621      	mov	r1, r4
   1134c:	4a08      	ldr	r2, [pc, #32]	; (11370 <att_find_info_req+0x6c>)
	data.chan = chan;
   1134e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11350:	466b      	mov	r3, sp
   11352:	4630      	mov	r0, r6
   11354:	f017 ff61 	bl	2921a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   11358:	9c02      	ldr	r4, [sp, #8]
   1135a:	b924      	cbnz	r4, 11366 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1135c:	9801      	ldr	r0, [sp, #4]
   1135e:	f00d ffcf 	bl	1f300 <net_buf_unref>
	if (!req) {
   11362:	230a      	movs	r3, #10
   11364:	e7e9      	b.n	1133a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11366:	9901      	ldr	r1, [sp, #4]
   11368:	4628      	mov	r0, r5
   1136a:	f7ff fb63 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
   1136e:	e7e9      	b.n	11344 <att_find_info_req+0x40>
   11370:	00029231 	.word	0x00029231

00011374 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   11374:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   11376:	2300      	movs	r3, #0
{
   11378:	4605      	mov	r5, r0
   1137a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1137c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1137e:	f014 f803 	bl	25388 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   11382:	4b0b      	ldr	r3, [pc, #44]	; (113b0 <bt_att_req_alloc+0x3c>)
   11384:	681b      	ldr	r3, [r3, #0]
   11386:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   11388:	bf04      	itt	eq
   1138a:	2500      	moveq	r5, #0
   1138c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1138e:	a901      	add	r1, sp, #4
   11390:	4808      	ldr	r0, [pc, #32]	; (113b4 <bt_att_req_alloc+0x40>)
   11392:	462a      	mov	r2, r5
   11394:	4623      	mov	r3, r4
   11396:	f013 f84d 	bl	24434 <k_mem_slab_alloc>
   1139a:	4601      	mov	r1, r0
   1139c:	b930      	cbnz	r0, 113ac <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1139e:	9801      	ldr	r0, [sp, #4]
   113a0:	2210      	movs	r2, #16
   113a2:	f017 fa10 	bl	287c6 <memset>

	return req;
   113a6:	9801      	ldr	r0, [sp, #4]
}
   113a8:	b003      	add	sp, #12
   113aa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   113ac:	2000      	movs	r0, #0
   113ae:	e7fb      	b.n	113a8 <bt_att_req_alloc+0x34>
   113b0:	20003fc0 	.word	0x20003fc0
   113b4:	20000ae4 	.word	0x20000ae4

000113b8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   113b8:	b507      	push	{r0, r1, r2, lr}
   113ba:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   113bc:	6880      	ldr	r0, [r0, #8]
   113be:	b120      	cbz	r0, 113ca <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   113c0:	f00d ff9e 	bl	1f300 <net_buf_unref>
		req->buf = NULL;
   113c4:	9b01      	ldr	r3, [sp, #4]
   113c6:	2200      	movs	r2, #0
   113c8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   113ca:	4803      	ldr	r0, [pc, #12]	; (113d8 <bt_att_req_free+0x20>)
   113cc:	a901      	add	r1, sp, #4
   113ce:	f019 fb86 	bl	2aade <k_mem_slab_free>
}
   113d2:	b003      	add	sp, #12
   113d4:	f85d fb04 	ldr.w	pc, [sp], #4
   113d8:	20000ae4 	.word	0x20000ae4

000113dc <att_handle_rsp>:
{
   113dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113e0:	4605      	mov	r5, r0
   113e2:	b08b      	sub	sp, #44	; 0x2c
	k_work_cancel_delayable(&chan->timeout_work);
   113e4:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   113e8:	460f      	mov	r7, r1
   113ea:	4690      	mov	r8, r2
   113ec:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   113ee:	f019 fd51 	bl	2ae94 <k_work_cancel_delayable>
	if (!chan->req) {
   113f2:	f8d5 a0f4 	ldr.w	sl, [r5, #244]	; 0xf4
   113f6:	f1ba 0f00 	cmp.w	sl, #0
   113fa:	d121      	bne.n	11440 <att_handle_rsp+0x64>
		BT_WARN("No pending ATT request");
   113fc:	481b      	ldr	r0, [pc, #108]	; (1146c <att_handle_rsp+0x90>)
   113fe:	6804      	ldr	r4, [r0, #0]
   11400:	f014 0406 	ands.w	r4, r4, #6
   11404:	d00c      	beq.n	11420 <att_handle_rsp+0x44>
   11406:	4b1a      	ldr	r3, [pc, #104]	; (11470 <att_handle_rsp+0x94>)
   11408:	9308      	str	r3, [sp, #32]
   1140a:	4b1a      	ldr	r3, [pc, #104]	; (11474 <att_handle_rsp+0x98>)
   1140c:	9309      	str	r3, [sp, #36]	; 0x24
   1140e:	aa07      	add	r2, sp, #28
   11410:	2303      	movs	r3, #3
   11412:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
	bt_att_func_t func = NULL;
   11416:	4654      	mov	r4, sl
		BT_WARN("No pending ATT request");
   11418:	9303      	str	r3, [sp, #12]
   1141a:	9307      	str	r3, [sp, #28]
   1141c:	f017 ffd7 	bl	293ce <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
   11420:	6828      	ldr	r0, [r5, #0]
   11422:	f018 f935 	bl	29690 <att_req_send_process>
	if (func) {
   11426:	b13c      	cbz	r4, 11438 <att_handle_rsp+0x5c>
		func(chan->att->conn, err, pdu, len, params);
   11428:	6828      	ldr	r0, [r5, #0]
   1142a:	f8cd 9000 	str.w	r9, [sp]
   1142e:	6800      	ldr	r0, [r0, #0]
   11430:	4643      	mov	r3, r8
   11432:	463a      	mov	r2, r7
   11434:	4631      	mov	r1, r6
   11436:	47a0      	blx	r4
}
   11438:	2000      	movs	r0, #0
   1143a:	b00b      	add	sp, #44	; 0x2c
   1143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   11440:	4b0d      	ldr	r3, [pc, #52]	; (11478 <att_handle_rsp+0x9c>)
   11442:	459a      	cmp	sl, r3
   11444:	f04f 0b00 	mov.w	fp, #0
   11448:	d103      	bne.n	11452 <att_handle_rsp+0x76>
		chan->req = NULL;
   1144a:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1144e:	465c      	mov	r4, fp
		goto process;
   11450:	e7e6      	b.n	11420 <att_handle_rsp+0x44>
	func = chan->req->func;
   11452:	f8da 4004 	ldr.w	r4, [sl, #4]
	chan->req->func = NULL;
   11456:	f8ca b004 	str.w	fp, [sl, #4]
	bt_att_req_free(chan->req);
   1145a:	4650      	mov	r0, sl
	params = chan->req->user_data;
   1145c:	f8da 900c 	ldr.w	r9, [sl, #12]
	bt_att_req_free(chan->req);
   11460:	f7ff ffaa 	bl	113b8 <bt_att_req_free>
	chan->req = NULL;
   11464:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
   11468:	e7da      	b.n	11420 <att_handle_rsp+0x44>
   1146a:	bf00      	nop
   1146c:	20000924 	.word	0x20000924
   11470:	0003125f 	.word	0x0003125f
   11474:	000312c1 	.word	0x000312c1
   11478:	20004020 	.word	0x20004020

0001147c <bt_att_disconnected>:
{
   1147c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1147e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   11482:	b085      	sub	sp, #20
   11484:	4604      	mov	r4, r0
	if (!att_chan->att) {
   11486:	2d00      	cmp	r5, #0
   11488:	d04d      	beq.n	11526 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1148a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   1148e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   11492:	f018 f860 	bl	29556 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   11496:	f1a4 0608 	sub.w	r6, r4, #8
   1149a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   1149e:	2200      	movs	r2, #0
   114a0:	2300      	movs	r3, #0
   114a2:	4638      	mov	r0, r7
   114a4:	f018 fcb8 	bl	29e18 <net_buf_get>
   114a8:	4602      	mov	r2, r0
   114aa:	bb18      	cbnz	r0, 114f4 <bt_att_disconnected+0x78>
	if (chan->req) {
   114ac:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   114b0:	b123      	cbz	r3, 114bc <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   114b2:	4601      	mov	r1, r0
   114b4:	230e      	movs	r3, #14
   114b6:	4630      	mov	r0, r6
   114b8:	f7ff ff90 	bl	113dc <att_handle_rsp>
	chan->att = NULL;
   114bc:	2300      	movs	r3, #0
   114be:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   114c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   114c4:	2b00      	cmp	r3, #0
   114c6:	d12e      	bne.n	11526 <bt_att_disconnected+0xaa>
	att_reset(att);
   114c8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   114ca:	9803      	ldr	r0, [sp, #12]
   114cc:	2200      	movs	r2, #0
   114ce:	2300      	movs	r3, #0
   114d0:	300c      	adds	r0, #12
   114d2:	f018 fca1 	bl	29e18 <net_buf_get>
   114d6:	b980      	cbnz	r0, 114fa <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   114d8:	9803      	ldr	r0, [sp, #12]
	return list->head;
   114da:	6845      	ldr	r5, [r0, #4]
   114dc:	b985      	cbnz	r5, 11500 <bt_att_disconnected+0x84>
	att->conn = NULL;
   114de:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   114e0:	a903      	add	r1, sp, #12
   114e2:	4812      	ldr	r0, [pc, #72]	; (1152c <bt_att_disconnected+0xb0>)
   114e4:	f019 fafb 	bl	2aade <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   114e8:	6820      	ldr	r0, [r4, #0]
}
   114ea:	b005      	add	sp, #20
   114ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   114f0:	f000 be1a 	b.w	12128 <bt_gatt_disconnected>
		net_buf_unref(buf);
   114f4:	f00d ff04 	bl	1f300 <net_buf_unref>
   114f8:	e7d1      	b.n	1149e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   114fa:	f00d ff01 	bl	1f300 <net_buf_unref>
   114fe:	e7e4      	b.n	114ca <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11500:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   11502:	686e      	ldr	r6, [r5, #4]
	return node->next;
   11504:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   11506:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11508:	4295      	cmp	r5, r2
	list->tail = node;
   1150a:	bf08      	it	eq
   1150c:	6083      	streq	r3, [r0, #8]
   1150e:	b136      	cbz	r6, 1151e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   11510:	68eb      	ldr	r3, [r5, #12]
   11512:	9300      	str	r3, [sp, #0]
   11514:	2300      	movs	r3, #0
   11516:	6800      	ldr	r0, [r0, #0]
   11518:	461a      	mov	r2, r3
   1151a:	210e      	movs	r1, #14
   1151c:	47b0      	blx	r6
		bt_att_req_free(req);
   1151e:	4628      	mov	r0, r5
   11520:	f7ff ff4a 	bl	113b8 <bt_att_req_free>
   11524:	e7d8      	b.n	114d8 <bt_att_disconnected+0x5c>
}
   11526:	b005      	add	sp, #20
   11528:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1152a:	bf00      	nop
   1152c:	20000a90 	.word	0x20000a90

00011530 <att_timeout>:
{
   11530:	b510      	push	{r4, lr}
   11532:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   11534:	480b      	ldr	r0, [pc, #44]	; (11564 <att_timeout+0x34>)
   11536:	6803      	ldr	r3, [r0, #0]
   11538:	075b      	lsls	r3, r3, #29
{
   1153a:	b088      	sub	sp, #32
	BT_ERR("ATT Timeout");
   1153c:	d00b      	beq.n	11556 <att_timeout+0x26>
   1153e:	4b0a      	ldr	r3, [pc, #40]	; (11568 <att_timeout+0x38>)
   11540:	9306      	str	r3, [sp, #24]
   11542:	4b0a      	ldr	r3, [pc, #40]	; (1156c <att_timeout+0x3c>)
   11544:	9307      	str	r3, [sp, #28]
   11546:	aa05      	add	r2, sp, #20
   11548:	2303      	movs	r3, #3
   1154a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1154e:	9301      	str	r3, [sp, #4]
   11550:	9305      	str	r3, [sp, #20]
   11552:	f017 ff3c 	bl	293ce <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   11556:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   1155a:	b008      	add	sp, #32
   1155c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   11560:	f7ff bf8c 	b.w	1147c <bt_att_disconnected>
   11564:	20000924 	.word	0x20000924
   11568:	0003127a 	.word	0x0003127a
   1156c:	00031291 	.word	0x00031291

00011570 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   11570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11572:	4d0d      	ldr	r5, [pc, #52]	; (115a8 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   11574:	4604      	mov	r4, r0
   11576:	b968      	cbnz	r0, 11594 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   11578:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1157a:	2207      	movs	r2, #7
   1157c:	f8cd 0003 	str.w	r0, [sp, #3]
   11580:	4669      	mov	r1, sp
   11582:	1c68      	adds	r0, r5, #1
   11584:	f017 f8eb 	bl	2875e <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   11588:	2800      	cmp	r0, #0
   1158a:	bf08      	it	eq
   1158c:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1158e:	4620      	mov	r0, r4
   11590:	b003      	add	sp, #12
   11592:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11594:	462a      	mov	r2, r5
   11596:	f812 1b01 	ldrb.w	r1, [r2], #1
   1159a:	f017 fd14 	bl	28fc6 <bt_conn_is_peer_addr_le>
	return NULL;
   1159e:	2800      	cmp	r0, #0
   115a0:	bf14      	ite	ne
   115a2:	462c      	movne	r4, r5
   115a4:	2400      	moveq	r4, #0
   115a6:	e7f2      	b.n	1158e <find_cf_cfg+0x1e>
   115a8:	20004038 	.word	0x20004038

000115ac <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   115ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115b0:	b088      	sub	sp, #32
   115b2:	4698      	mov	r8, r3
   115b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   115b8:	2b01      	cmp	r3, #1
{
   115ba:	4606      	mov	r6, r0
   115bc:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   115be:	d845      	bhi.n	1164c <cf_write+0xa0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   115c0:	4443      	add	r3, r8
   115c2:	2b01      	cmp	r3, #1
   115c4:	4645      	mov	r5, r8
   115c6:	dc44      	bgt.n	11652 <cf_write+0xa6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   115c8:	f7ff ffd2 	bl	11570 <find_cf_cfg>
	if (!cfg) {
   115cc:	4604      	mov	r4, r0
   115ce:	b918      	cbnz	r0, 115d8 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   115d0:	f7ff ffce 	bl	11570 <find_cf_cfg>
	}

	if (!cfg) {
   115d4:	4604      	mov	r4, r0
   115d6:	b198      	cbz	r0, 11600 <cf_write+0x54>
{
   115d8:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   115da:	f1b8 0f00 	cmp.w	r8, #0
   115de:	d123      	bne.n	11628 <cf_write+0x7c>

	if (!cf_set_value(cfg, value, len)) {
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   115e0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   115e4:	1c60      	adds	r0, r4, #1
   115e6:	f018 fa05 	bl	299f4 <bt_addr_le_copy>
	cfg->id = conn->id;
   115ea:	4620      	mov	r0, r4
   115ec:	7a33      	ldrb	r3, [r6, #8]
   115ee:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   115f2:	2100      	movs	r1, #0
   115f4:	f018 fa21 	bl	29a3a <atomic_set_bit>

	return len;
}
   115f8:	4628      	mov	r0, r5
   115fa:	b008      	add	sp, #32
   115fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No space to store Client Supported Features");
   11600:	4817      	ldr	r0, [pc, #92]	; (11660 <cf_write+0xb4>)
   11602:	6803      	ldr	r3, [r0, #0]
   11604:	f013 0f06 	tst.w	r3, #6
   11608:	d00b      	beq.n	11622 <cf_write+0x76>
   1160a:	4b16      	ldr	r3, [pc, #88]	; (11664 <cf_write+0xb8>)
   1160c:	9306      	str	r3, [sp, #24]
   1160e:	4b16      	ldr	r3, [pc, #88]	; (11668 <cf_write+0xbc>)
   11610:	9307      	str	r3, [sp, #28]
   11612:	aa05      	add	r2, sp, #20
   11614:	2303      	movs	r3, #3
   11616:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1161a:	9301      	str	r3, [sp, #4]
   1161c:	9305      	str	r3, [sp, #20]
   1161e:	f018 f9ec 	bl	299fa <z_log_msg2_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   11622:	f06f 0510 	mvn.w	r5, #16
   11626:	e7e7      	b.n	115f8 <cf_write+0x4c>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11628:	7a20      	ldrb	r0, [r4, #8]
   1162a:	fa20 f301 	lsr.w	r3, r0, r1
   1162e:	07da      	lsls	r2, r3, #31
   11630:	d503      	bpl.n	1163a <cf_write+0x8e>
		    !(value[i / 8] & BIT(i % 8))) {
   11632:	783b      	ldrb	r3, [r7, #0]
   11634:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11636:	07db      	lsls	r3, r3, #31
   11638:	d50e      	bpl.n	11658 <cf_write+0xac>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1163a:	3101      	adds	r1, #1
   1163c:	2903      	cmp	r1, #3
   1163e:	d1cc      	bne.n	115da <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   11640:	783b      	ldrb	r3, [r7, #0]
   11642:	f003 0307 	and.w	r3, r3, #7
   11646:	4318      	orrs	r0, r3
   11648:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1164a:	e7c9      	b.n	115e0 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1164c:	f06f 0506 	mvn.w	r5, #6
   11650:	e7d2      	b.n	115f8 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11652:	f06f 050c 	mvn.w	r5, #12
   11656:	e7cf      	b.n	115f8 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   11658:	f06f 0512 	mvn.w	r5, #18
   1165c:	e7cc      	b.n	115f8 <cf_write+0x4c>
   1165e:	bf00      	nop
   11660:	20000990 	.word	0x20000990
   11664:	0003131b 	.word	0x0003131b
   11668:	000314d9 	.word	0x000314d9

0001166c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1166c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11670:	b089      	sub	sp, #36	; 0x24
   11672:	461f      	mov	r7, r3
   11674:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   11678:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1167c:	4604      	mov	r4, r0
   1167e:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   11680:	2b00      	cmp	r3, #0
   11682:	d155      	bne.n	11730 <bt_gatt_attr_write_ccc+0xc4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   11684:	1e7b      	subs	r3, r7, #1
   11686:	2b01      	cmp	r3, #1
   11688:	d855      	bhi.n	11736 <bt_gatt_attr_write_ccc+0xca>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
		value = *(uint8_t *)buf;
   1168a:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1168c:	2f01      	cmp	r7, #1
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1168e:	4649      	mov	r1, r9
   11690:	bf14      	ite	ne
   11692:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   11694:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   11696:	f018 fa65 	bl	29b64 <find_ccc_cfg>
	if (!cfg) {
   1169a:	4605      	mov	r5, r0
   1169c:	bb20      	cbnz	r0, 116e8 <bt_gatt_attr_write_ccc+0x7c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
   1169e:	b91e      	cbnz	r6, 116a8 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   116a0:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   116a2:	b009      	add	sp, #36	; 0x24
   116a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   116a8:	4649      	mov	r1, r9
   116aa:	f018 fa5b 	bl	29b64 <find_ccc_cfg>
		if (!cfg) {
   116ae:	4605      	mov	r5, r0
   116b0:	b998      	cbnz	r0, 116da <bt_gatt_attr_write_ccc+0x6e>
			BT_WARN("No space to store CCC cfg");
   116b2:	4822      	ldr	r0, [pc, #136]	; (1173c <bt_gatt_attr_write_ccc+0xd0>)
   116b4:	6803      	ldr	r3, [r0, #0]
   116b6:	f013 0f06 	tst.w	r3, #6
   116ba:	d00b      	beq.n	116d4 <bt_gatt_attr_write_ccc+0x68>
   116bc:	4b20      	ldr	r3, [pc, #128]	; (11740 <bt_gatt_attr_write_ccc+0xd4>)
   116be:	9306      	str	r3, [sp, #24]
   116c0:	4b20      	ldr	r3, [pc, #128]	; (11744 <bt_gatt_attr_write_ccc+0xd8>)
   116c2:	9307      	str	r3, [sp, #28]
   116c4:	aa05      	add	r2, sp, #20
   116c6:	2303      	movs	r3, #3
   116c8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   116cc:	9301      	str	r3, [sp, #4]
   116ce:	9305      	str	r3, [sp, #20]
   116d0:	f018 f993 	bl	299fa <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   116d4:	f06f 0010 	mvn.w	r0, #16
   116d8:	e7e3      	b.n	116a2 <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   116da:	f104 0188 	add.w	r1, r4, #136	; 0x88
   116de:	3001      	adds	r0, #1
   116e0:	f018 f988 	bl	299f4 <bt_addr_le_copy>
		cfg->id = conn->id;
   116e4:	7a23      	ldrb	r3, [r4, #8]
   116e6:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   116e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   116ec:	b9a3      	cbnz	r3, 11718 <bt_gatt_attr_write_ccc+0xac>
	if (cfg->value != ccc->value) {
   116ee:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   116f2:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   116f4:	42b3      	cmp	r3, r6
   116f6:	d003      	beq.n	11700 <bt_gatt_attr_write_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   116f8:	4649      	mov	r1, r9
   116fa:	4640      	mov	r0, r8
   116fc:	f018 f904 	bl	29908 <gatt_ccc_changed>
	if (!value) {
   11700:	2e00      	cmp	r6, #0
   11702:	d1cd      	bne.n	116a0 <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11704:	a902      	add	r1, sp, #8
   11706:	1c68      	adds	r0, r5, #1
   11708:	9602      	str	r6, [sp, #8]
   1170a:	f8cd 600b 	str.w	r6, [sp, #11]
   1170e:	f018 f971 	bl	299f4 <bt_addr_le_copy>
	cfg->id = 0U;
   11712:	702e      	strb	r6, [r5, #0]
	cfg->value = 0U;
   11714:	812e      	strh	r6, [r5, #8]
}
   11716:	e7c3      	b.n	116a0 <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   11718:	4632      	mov	r2, r6
   1171a:	4641      	mov	r1, r8
   1171c:	4620      	mov	r0, r4
   1171e:	4798      	blx	r3
		if (write < 0) {
   11720:	2800      	cmp	r0, #0
   11722:	dbbe      	blt.n	116a2 <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
   11724:	1e44      	subs	r4, r0, #1
   11726:	2c01      	cmp	r4, #1
   11728:	d9e1      	bls.n	116ee <bt_gatt_attr_write_ccc+0x82>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1172a:	f06f 000d 	mvn.w	r0, #13
   1172e:	e7b8      	b.n	116a2 <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11730:	f06f 0006 	mvn.w	r0, #6
   11734:	e7b5      	b.n	116a2 <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11736:	f06f 000c 	mvn.w	r0, #12
   1173a:	e7b2      	b.n	116a2 <bt_gatt_attr_write_ccc+0x36>
   1173c:	20000990 	.word	0x20000990
   11740:	0003134b 	.word	0x0003134b
   11744:	000314ba 	.word	0x000314ba

00011748 <find_sc_cfg>:
{
   11748:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1174a:	4c06      	ldr	r4, [pc, #24]	; (11764 <find_sc_cfg+0x1c>)
   1174c:	7823      	ldrb	r3, [r4, #0]
   1174e:	4283      	cmp	r3, r0
   11750:	d104      	bne.n	1175c <find_sc_cfg+0x14>
   11752:	2207      	movs	r2, #7
   11754:	1c60      	adds	r0, r4, #1
   11756:	f017 f802 	bl	2875e <memcmp>
   1175a:	b108      	cbz	r0, 11760 <find_sc_cfg+0x18>
	return NULL;
   1175c:	2000      	movs	r0, #0
}
   1175e:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   11760:	4620      	mov	r0, r4
   11762:	e7fc      	b.n	1175e <find_sc_cfg+0x16>
   11764:	20005e98 	.word	0x20005e98

00011768 <sc_save>:
{
   11768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1176c:	b08a      	sub	sp, #40	; 0x28
   1176e:	4680      	mov	r8, r0
   11770:	460f      	mov	r7, r1
   11772:	4616      	mov	r6, r2
   11774:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   11776:	f7ff ffe7 	bl	11748 <find_sc_cfg>
	if (!cfg) {
   1177a:	4604      	mov	r4, r0
   1177c:	b9f8      	cbnz	r0, 117be <sc_save+0x56>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1177e:	a902      	add	r1, sp, #8
   11780:	9002      	str	r0, [sp, #8]
   11782:	f8cd 000b 	str.w	r0, [sp, #11]
   11786:	f7ff ffdf 	bl	11748 <find_sc_cfg>
		if (!cfg) {
   1178a:	4604      	mov	r4, r0
   1178c:	b990      	cbnz	r0, 117b4 <sc_save+0x4c>
			BT_ERR("unable to save SC: no cfg left");
   1178e:	4813      	ldr	r0, [pc, #76]	; (117dc <sc_save+0x74>)
   11790:	6803      	ldr	r3, [r0, #0]
   11792:	075b      	lsls	r3, r3, #29
   11794:	d00b      	beq.n	117ae <sc_save+0x46>
   11796:	4b12      	ldr	r3, [pc, #72]	; (117e0 <sc_save+0x78>)
   11798:	9308      	str	r3, [sp, #32]
   1179a:	4b12      	ldr	r3, [pc, #72]	; (117e4 <sc_save+0x7c>)
   1179c:	9309      	str	r3, [sp, #36]	; 0x24
   1179e:	aa07      	add	r2, sp, #28
   117a0:	2303      	movs	r3, #3
   117a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   117a6:	9301      	str	r3, [sp, #4]
   117a8:	9307      	str	r3, [sp, #28]
   117aa:	f018 f926 	bl	299fa <z_log_msg2_static_create.constprop.0>
}
   117ae:	b00a      	add	sp, #40	; 0x28
   117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   117b4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   117b8:	4639      	mov	r1, r7
   117ba:	f018 f91b 	bl	299f4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   117be:	8922      	ldrh	r2, [r4, #8]
   117c0:	8963      	ldrh	r3, [r4, #10]
   117c2:	b91a      	cbnz	r2, 117cc <sc_save+0x64>
   117c4:	b923      	cbnz	r3, 117d0 <sc_save+0x68>
		cfg->data.start = start;
   117c6:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   117c8:	8165      	strh	r5, [r4, #10]
   117ca:	e7f0      	b.n	117ae <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   117cc:	4296      	cmp	r6, r2
   117ce:	d302      	bcc.n	117d6 <sc_save+0x6e>
   117d0:	429d      	cmp	r5, r3
   117d2:	d8f9      	bhi.n	117c8 <sc_save+0x60>
   117d4:	e7eb      	b.n	117ae <sc_save+0x46>
		*start = new_start;
   117d6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   117d8:	e7fa      	b.n	117d0 <sc_save+0x68>
   117da:	bf00      	nop
   117dc:	20000990 	.word	0x20000990
   117e0:	00031369 	.word	0x00031369
   117e4:	000314d1 	.word	0x000314d1

000117e8 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   117e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   117ec:	4b23      	ldr	r3, [pc, #140]	; (1187c <disconnected_cb+0x94>)
{
   117ee:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   117f0:	6882      	ldr	r2, [r0, #8]
   117f2:	429a      	cmp	r2, r3
{
   117f4:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   117f6:	d102      	bne.n	117fe <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   117f8:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   117fa:	8963      	ldrh	r3, [r4, #10]
   117fc:	bb03      	cbnz	r3, 11840 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   117fe:	2001      	movs	r0, #1
   11800:	b002      	add	sp, #8
   11802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   11806:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1180a:	7a28      	ldrb	r0, [r5, #8]
   1180c:	4641      	mov	r1, r8
   1180e:	f017 f99d 	bl	28b4c <bt_addr_le_is_bonded>
   11812:	b980      	cbnz	r0, 11836 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   11814:	4b1a      	ldr	r3, [pc, #104]	; (11880 <disconnected_cb+0x98>)
   11816:	429c      	cmp	r4, r3
   11818:	d102      	bne.n	11820 <disconnected_cb+0x38>
					sc_clear(conn);
   1181a:	4628      	mov	r0, r5
   1181c:	f018 f9dc 	bl	29bd8 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11820:	2500      	movs	r5, #0
   11822:	4669      	mov	r1, sp
   11824:	4630      	mov	r0, r6
   11826:	9500      	str	r5, [sp, #0]
   11828:	f8cd 5003 	str.w	r5, [sp, #3]
   1182c:	f018 f8e2 	bl	299f4 <bt_addr_le_copy>
	cfg->id = 0U;
   11830:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   11832:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   11834:	e019      	b.n	1186a <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11836:	4641      	mov	r1, r8
   11838:	4630      	mov	r0, r6
   1183a:	f018 f8db 	bl	299f4 <bt_addr_le_copy>
	if (!value_used) {
   1183e:	e014      	b.n	1186a <disconnected_cb+0x82>
		if (!cfg->value) {
   11840:	8923      	ldrh	r3, [r4, #8]
   11842:	b193      	cbz	r3, 1186a <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11844:	4626      	mov	r6, r4
   11846:	4628      	mov	r0, r5
   11848:	f816 1b01 	ldrb.w	r1, [r6], #1
   1184c:	4632      	mov	r2, r6
   1184e:	f017 fbba 	bl	28fc6 <bt_conn_is_peer_addr_le>
   11852:	2800      	cmp	r0, #0
   11854:	d1d7      	bne.n	11806 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11856:	7820      	ldrb	r0, [r4, #0]
   11858:	4631      	mov	r1, r6
   1185a:	f7fe faf9 	bl	fe50 <bt_conn_lookup_addr_le>
			if (tmp) {
   1185e:	b120      	cbz	r0, 1186a <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   11860:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   11862:	f017 fba2 	bl	28faa <bt_conn_unref>
	if (!value_used) {
   11866:	2d07      	cmp	r5, #7
   11868:	d0c9      	beq.n	117fe <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1186a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1186c:	2100      	movs	r1, #0
   1186e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   11870:	2b00      	cmp	r3, #0
   11872:	d0c4      	beq.n	117fe <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   11874:	4638      	mov	r0, r7
   11876:	4798      	blx	r3
   11878:	e7c1      	b.n	117fe <disconnected_cb+0x16>
   1187a:	bf00      	nop
   1187c:	0001166d 	.word	0x0001166d
   11880:	20000364 	.word	0x20000364

00011884 <sc_indicate_rsp>:
{
   11884:	b510      	push	{r4, lr}
   11886:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11888:	4814      	ldr	r0, [pc, #80]	; (118dc <sc_indicate_rsp+0x58>)
   1188a:	f3bf 8f5b 	dmb	ish
   1188e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   11892:	e853 2f00 	ldrex	r2, [r3]
   11896:	f022 0202 	bic.w	r2, r2, #2
   1189a:	e843 2100 	strex	r1, r2, [r3]
   1189e:	2900      	cmp	r1, #0
   118a0:	d1f7      	bne.n	11892 <sc_indicate_rsp+0xe>
   118a2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   118a6:	f3bf 8f5b 	dmb	ish
   118aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
   118ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   118b0:	07da      	lsls	r2, r3, #31
   118b2:	d504      	bpl.n	118be <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   118b4:	2200      	movs	r2, #0
   118b6:	2300      	movs	r3, #0
   118b8:	3020      	adds	r0, #32
   118ba:	f013 fa6f 	bl	24d9c <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   118be:	4620      	mov	r0, r4
   118c0:	f7ff fe56 	bl	11570 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   118c4:	b140      	cbz	r0, 118d8 <sc_indicate_rsp+0x54>
   118c6:	7a03      	ldrb	r3, [r0, #8]
   118c8:	07db      	lsls	r3, r3, #31
   118ca:	d505      	bpl.n	118d8 <sc_indicate_rsp+0x54>
}
   118cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   118d0:	2100      	movs	r1, #0
   118d2:	300c      	adds	r0, #12
   118d4:	f018 b8b1 	b.w	29a3a <atomic_set_bit>
}
   118d8:	bd10      	pop	{r4, pc}
   118da:	bf00      	nop
   118dc:	20003150 	.word	0x20003150

000118e0 <bt_gatt_init>:
{
   118e0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   118e2:	4b20      	ldr	r3, [pc, #128]	; (11964 <bt_gatt_init+0x84>)
   118e4:	f3bf 8f5b 	dmb	ish
   118e8:	2201      	movs	r2, #1
   118ea:	e853 1f00 	ldrex	r1, [r3]
   118ee:	2900      	cmp	r1, #0
   118f0:	d103      	bne.n	118fa <bt_gatt_init+0x1a>
   118f2:	e843 2000 	strex	r0, r2, [r3]
   118f6:	2800      	cmp	r0, #0
   118f8:	d1f7      	bne.n	118ea <bt_gatt_init+0xa>
   118fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   118fe:	d130      	bne.n	11962 <bt_gatt_init+0x82>
   11900:	f3bf 8f5b 	dmb	ish
   11904:	4b18      	ldr	r3, [pc, #96]	; (11968 <bt_gatt_init+0x88>)
   11906:	e853 1f00 	ldrex	r1, [r3]
   1190a:	2900      	cmp	r1, #0
   1190c:	d103      	bne.n	11916 <bt_gatt_init+0x36>
   1190e:	e843 2000 	strex	r0, r2, [r3]
   11912:	2800      	cmp	r0, #0
   11914:	d1f7      	bne.n	11906 <bt_gatt_init+0x26>
   11916:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1191a:	d108      	bne.n	1192e <bt_gatt_init+0x4e>
   1191c:	4913      	ldr	r1, [pc, #76]	; (1196c <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1191e:	4a14      	ldr	r2, [pc, #80]	; (11970 <bt_gatt_init+0x90>)
   11920:	880b      	ldrh	r3, [r1, #0]
   11922:	4c14      	ldr	r4, [pc, #80]	; (11974 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   11924:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11926:	42a2      	cmp	r2, r4
   11928:	d315      	bcc.n	11956 <bt_gatt_init+0x76>
   1192a:	b100      	cbz	r0, 1192e <bt_gatt_init+0x4e>
   1192c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1192e:	4b12      	ldr	r3, [pc, #72]	; (11978 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   11930:	4912      	ldr	r1, [pc, #72]	; (1197c <bt_gatt_init+0x9c>)
   11932:	4813      	ldr	r0, [pc, #76]	; (11980 <bt_gatt_init+0xa0>)
   11934:	2200      	movs	r2, #0
	list->tail = NULL;
   11936:	e9c3 2200 	strd	r2, r2, [r3]
   1193a:	f019 fa9f 	bl	2ae7c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1193e:	4810      	ldr	r0, [pc, #64]	; (11980 <bt_gatt_init+0xa0>)
   11940:	f44f 72a4 	mov.w	r2, #328	; 0x148
   11944:	2300      	movs	r3, #0
   11946:	f013 f9f5 	bl	24d34 <k_work_schedule>
}
   1194a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1194e:	490d      	ldr	r1, [pc, #52]	; (11984 <bt_gatt_init+0xa4>)
   11950:	480d      	ldr	r0, [pc, #52]	; (11988 <bt_gatt_init+0xa8>)
   11952:	f019 ba93 	b.w	2ae7c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   11956:	6850      	ldr	r0, [r2, #4]
   11958:	4403      	add	r3, r0
   1195a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1195c:	3208      	adds	r2, #8
   1195e:	2001      	movs	r0, #1
   11960:	e7e1      	b.n	11926 <bt_gatt_init+0x46>
}
   11962:	bd10      	pop	{r4, pc}
   11964:	20004048 	.word	0x20004048
   11968:	20004064 	.word	0x20004064
   1196c:	20005e96 	.word	0x20005e96
   11970:	0002b834 	.word	0x0002b834
   11974:	0002b844 	.word	0x0002b844
   11978:	20004030 	.word	0x20004030
   1197c:	00029d09 	.word	0x00029d09
   11980:	200030f8 	.word	0x200030f8
   11984:	00011d35 	.word	0x00011d35
   11988:	20003170 	.word	0x20003170

0001198c <bt_gatt_attr_get_handle>:
{
   1198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   11990:	4603      	mov	r3, r0
   11992:	b148      	cbz	r0, 119a8 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   11994:	8a00      	ldrh	r0, [r0, #16]
   11996:	b938      	cbnz	r0, 119a8 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11998:	4912      	ldr	r1, [pc, #72]	; (119e4 <bt_gatt_attr_get_handle+0x58>)
   1199a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 119e8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1199e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   119a0:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   119a4:	4571      	cmp	r1, lr
   119a6:	d301      	bcc.n	119ac <bt_gatt_attr_get_handle+0x20>
}
   119a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   119ac:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   119b0:	42bb      	cmp	r3, r7
   119b2:	d304      	bcc.n	119be <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   119b4:	fb0c 7206 	mla	r2, ip, r6, r7
   119b8:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   119ba:	4293      	cmp	r3, r2
   119bc:	d90e      	bls.n	119dc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   119be:	19a2      	adds	r2, r4, r6
   119c0:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   119c2:	3108      	adds	r1, #8
   119c4:	4614      	mov	r4, r2
   119c6:	e7ed      	b.n	119a4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   119c8:	fb0c 7805 	mla	r8, ip, r5, r7
   119cc:	4543      	cmp	r3, r8
   119ce:	d007      	beq.n	119e0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   119d0:	3501      	adds	r5, #1
   119d2:	1962      	adds	r2, r4, r5
   119d4:	42b5      	cmp	r5, r6
   119d6:	b292      	uxth	r2, r2
   119d8:	d1f6      	bne.n	119c8 <bt_gatt_attr_get_handle+0x3c>
   119da:	e7f2      	b.n	119c2 <bt_gatt_attr_get_handle+0x36>
   119dc:	2500      	movs	r5, #0
   119de:	e7f8      	b.n	119d2 <bt_gatt_attr_get_handle+0x46>
   119e0:	4610      	mov	r0, r2
   119e2:	e7e1      	b.n	119a8 <bt_gatt_attr_get_handle+0x1c>
   119e4:	0002b834 	.word	0x0002b834
   119e8:	0002b844 	.word	0x0002b844

000119ec <bt_gatt_foreach_attr_type>:
{
   119ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   119f4:	9100      	str	r1, [sp, #0]
   119f6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   119f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   119fc:	2d00      	cmp	r5, #0
   119fe:	bf08      	it	eq
   11a00:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   11a02:	4b24      	ldr	r3, [pc, #144]	; (11a94 <bt_gatt_foreach_attr_type+0xa8>)
   11a04:	881b      	ldrh	r3, [r3, #0]
   11a06:	4283      	cmp	r3, r0
{
   11a08:	4607      	mov	r7, r0
   11a0a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   11a0c:	d23c      	bcs.n	11a88 <bt_gatt_foreach_attr_type+0x9c>
}
   11a0e:	b003      	add	sp, #12
   11a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   11a14:	6873      	ldr	r3, [r6, #4]
   11a16:	4423      	add	r3, r4
   11a18:	42bb      	cmp	r3, r7
   11a1a:	d232      	bcs.n	11a82 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   11a1c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11a1e:	3608      	adds	r6, #8
   11a20:	4b1d      	ldr	r3, [pc, #116]	; (11a98 <bt_gatt_foreach_attr_type+0xac>)
   11a22:	429e      	cmp	r6, r3
   11a24:	d3f6      	bcc.n	11a14 <bt_gatt_foreach_attr_type+0x28>
   11a26:	e7f2      	b.n	11a0e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   11a28:	5889      	ldr	r1, [r1, r2]
   11a2a:	9301      	str	r3, [sp, #4]
   11a2c:	4640      	mov	r0, r8
   11a2e:	f016 ff45 	bl	288bc <bt_uuid_cmp>
   11a32:	9b01      	ldr	r3, [sp, #4]
   11a34:	b190      	cbz	r0, 11a5c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   11a36:	3401      	adds	r4, #1
   11a38:	f10a 0a01 	add.w	sl, sl, #1
   11a3c:	b2a4      	uxth	r4, r4
   11a3e:	6873      	ldr	r3, [r6, #4]
   11a40:	4553      	cmp	r3, sl
   11a42:	d9ec      	bls.n	11a1e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   11a44:	9b00      	ldr	r3, [sp, #0]
   11a46:	429c      	cmp	r4, r3
   11a48:	d8e1      	bhi.n	11a0e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   11a4a:	42bc      	cmp	r4, r7
   11a4c:	d3f3      	bcc.n	11a36 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11a4e:	6831      	ldr	r1, [r6, #0]
   11a50:	fb0b f20a 	mul.w	r2, fp, sl
   11a54:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   11a56:	f1b8 0f00 	cmp.w	r8, #0
   11a5a:	d1e5      	bne.n	11a28 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   11a5c:	f1b9 0f00 	cmp.w	r9, #0
   11a60:	d10b      	bne.n	11a7a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   11a62:	3d01      	subs	r5, #1
   11a64:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   11a66:	4618      	mov	r0, r3
   11a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11a6c:	4621      	mov	r1, r4
   11a6e:	4798      	blx	r3
	if (!*num_matches) {
   11a70:	2d00      	cmp	r5, #0
   11a72:	d0cc      	beq.n	11a0e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11a74:	2800      	cmp	r0, #0
   11a76:	d1de      	bne.n	11a36 <bt_gatt_foreach_attr_type+0x4a>
   11a78:	e7c9      	b.n	11a0e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   11a7a:	68da      	ldr	r2, [r3, #12]
   11a7c:	4591      	cmp	r9, r2
   11a7e:	d1da      	bne.n	11a36 <bt_gatt_foreach_attr_type+0x4a>
   11a80:	e7ef      	b.n	11a62 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   11a82:	f04f 0a00 	mov.w	sl, #0
   11a86:	e7da      	b.n	11a3e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11a88:	4e04      	ldr	r6, [pc, #16]	; (11a9c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   11a8a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11a8c:	f04f 0b14 	mov.w	fp, #20
   11a90:	e7c6      	b.n	11a20 <bt_gatt_foreach_attr_type+0x34>
   11a92:	bf00      	nop
   11a94:	20005e96 	.word	0x20005e96
   11a98:	0002b844 	.word	0x0002b844
   11a9c:	0002b834 	.word	0x0002b834

00011aa0 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   11aa0:	b510      	push	{r4, lr}
   11aa2:	b0d0      	sub	sp, #320	; 0x140
	uint8_t key[16] = {};
   11aa4:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11aa6:	aa24      	add	r2, sp, #144	; 0x90
   11aa8:	a902      	add	r1, sp, #8
   11aaa:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t key[16] = {};
   11aac:	e9cd 4402 	strd	r4, r4, [sp, #8]
   11ab0:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11ab4:	f016 fbef 	bl	28296 <tc_cmac_setup>
   11ab8:	b988      	cbnz	r0, 11ade <db_hash_gen.constprop.0+0x3e>
		BT_ERR("Unable to setup AES CMAC");
   11aba:	481f      	ldr	r0, [pc, #124]	; (11b38 <db_hash_gen.constprop.0+0x98>)
   11abc:	6803      	ldr	r3, [r0, #0]
   11abe:	075a      	lsls	r2, r3, #29
   11ac0:	d00b      	beq.n	11ada <db_hash_gen.constprop.0+0x3a>
   11ac2:	4b1e      	ldr	r3, [pc, #120]	; (11b3c <db_hash_gen.constprop.0+0x9c>)
		BT_ERR("Unable to calculate hash");
   11ac4:	930a      	str	r3, [sp, #40]	; 0x28
   11ac6:	4b1e      	ldr	r3, [pc, #120]	; (11b40 <db_hash_gen.constprop.0+0xa0>)
   11ac8:	930b      	str	r3, [sp, #44]	; 0x2c
   11aca:	aa09      	add	r2, sp, #36	; 0x24
   11acc:	2303      	movs	r3, #3
   11ace:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11ad2:	9301      	str	r3, [sp, #4]
   11ad4:	9309      	str	r3, [sp, #36]	; 0x24
   11ad6:	f017 ff90 	bl	299fa <z_log_msg2_static_create.constprop.0>
}
   11ada:	b050      	add	sp, #320	; 0x140
   11adc:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   11ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11ae2:	2001      	movs	r0, #1
   11ae4:	4a17      	ldr	r2, [pc, #92]	; (11b44 <db_hash_gen.constprop.0+0xa4>)
   11ae6:	ab0c      	add	r3, sp, #48	; 0x30
   11ae8:	f018 f903 	bl	29cf2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   11aec:	4816      	ldr	r0, [pc, #88]	; (11b48 <db_hash_gen.constprop.0+0xa8>)
   11aee:	a90c      	add	r1, sp, #48	; 0x30
   11af0:	f016 fc67 	bl	283c2 <tc_cmac_final>
   11af4:	b928      	cbnz	r0, 11b02 <db_hash_gen.constprop.0+0x62>
		BT_ERR("Unable to calculate hash");
   11af6:	4810      	ldr	r0, [pc, #64]	; (11b38 <db_hash_gen.constprop.0+0x98>)
   11af8:	6803      	ldr	r3, [r0, #0]
   11afa:	075b      	lsls	r3, r3, #29
   11afc:	d0ed      	beq.n	11ada <db_hash_gen.constprop.0+0x3a>
   11afe:	4b13      	ldr	r3, [pc, #76]	; (11b4c <db_hash_gen.constprop.0+0xac>)
   11b00:	e7e0      	b.n	11ac4 <db_hash_gen.constprop.0+0x24>
   11b02:	4b11      	ldr	r3, [pc, #68]	; (11b48 <db_hash_gen.constprop.0+0xa8>)
   11b04:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   11b08:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   11b0a:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   11b0c:	7810      	ldrb	r0, [r2, #0]
   11b0e:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   11b12:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   11b14:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   11b18:	d1f6      	bne.n	11b08 <db_hash_gen.constprop.0+0x68>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b1a:	f3bf 8f5b 	dmb	ish
   11b1e:	4b0c      	ldr	r3, [pc, #48]	; (11b50 <db_hash_gen.constprop.0+0xb0>)
   11b20:	e853 2f00 	ldrex	r2, [r3]
   11b24:	f042 0204 	orr.w	r2, r2, #4
   11b28:	e843 2100 	strex	r1, r2, [r3]
   11b2c:	2900      	cmp	r1, #0
   11b2e:	d1f7      	bne.n	11b20 <db_hash_gen.constprop.0+0x80>
   11b30:	f3bf 8f5b 	dmb	ish
   11b34:	e7d1      	b.n	11ada <db_hash_gen.constprop.0+0x3a>
   11b36:	bf00      	nop
   11b38:	20000990 	.word	0x20000990
   11b3c:	0003138c 	.word	0x0003138c
   11b40:	000314e2 	.word	0x000314e2
   11b44:	0002994b 	.word	0x0002994b
   11b48:	200030e8 	.word	0x200030e8
   11b4c:	000313a9 	.word	0x000313a9
   11b50:	200031a0 	.word	0x200031a0

00011b54 <gatt_indicate>:
{
   11b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b58:	4615      	mov	r5, r2
   11b5a:	b088      	sub	sp, #32
   11b5c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   11b5e:	2214      	movs	r2, #20
   11b60:	6869      	ldr	r1, [r5, #4]
{
   11b62:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   11b64:	f018 f8d2 	bl	29d0c <bt_gatt_check_perm>
   11b68:	b198      	cbz	r0, 11b92 <gatt_indicate+0x3e>
		BT_WARN("Link is not encrypted");
   11b6a:	4830      	ldr	r0, [pc, #192]	; (11c2c <gatt_indicate+0xd8>)
   11b6c:	6803      	ldr	r3, [r0, #0]
   11b6e:	f013 0f06 	tst.w	r3, #6
   11b72:	d00b      	beq.n	11b8c <gatt_indicate+0x38>
   11b74:	4b2e      	ldr	r3, [pc, #184]	; (11c30 <gatt_indicate+0xdc>)
   11b76:	9306      	str	r3, [sp, #24]
   11b78:	4b2e      	ldr	r3, [pc, #184]	; (11c34 <gatt_indicate+0xe0>)
   11b7a:	9307      	str	r3, [sp, #28]
   11b7c:	aa05      	add	r2, sp, #20
   11b7e:	2303      	movs	r3, #3
   11b80:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11b84:	9301      	str	r3, [sp, #4]
   11b86:	9305      	str	r3, [sp, #20]
   11b88:	f017 ff37 	bl	299fa <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   11b8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11b90:	e00a      	b.n	11ba8 <gatt_indicate+0x54>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11b92:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   11b96:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   11b98:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11b9a:	f7ff fbeb 	bl	11374 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   11b9e:	3602      	adds	r6, #2
	if (!req) {
   11ba0:	4604      	mov	r4, r0
   11ba2:	b928      	cbnz	r0, 11bb0 <gatt_indicate+0x5c>
		return -ENOMEM;
   11ba4:	f06f 050b 	mvn.w	r5, #11
}
   11ba8:	4628      	mov	r0, r5
   11baa:	b008      	add	sp, #32
   11bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   11bb0:	4b21      	ldr	r3, [pc, #132]	; (11c38 <gatt_indicate+0xe4>)
   11bb2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   11bb4:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   11bb6:	4632      	mov	r2, r6
   11bb8:	211d      	movs	r1, #29
   11bba:	4640      	mov	r0, r8
   11bbc:	f7ff f97c 	bl	10eb8 <bt_att_create_pdu>
	if (!buf) {
   11bc0:	4606      	mov	r6, r0
   11bc2:	b9a0      	cbnz	r0, 11bee <gatt_indicate+0x9a>
		BT_WARN("No buffer available to send indication");
   11bc4:	4819      	ldr	r0, [pc, #100]	; (11c2c <gatt_indicate+0xd8>)
   11bc6:	6803      	ldr	r3, [r0, #0]
   11bc8:	f013 0f06 	tst.w	r3, #6
   11bcc:	d00b      	beq.n	11be6 <gatt_indicate+0x92>
   11bce:	4b1b      	ldr	r3, [pc, #108]	; (11c3c <gatt_indicate+0xe8>)
   11bd0:	9306      	str	r3, [sp, #24]
   11bd2:	4b18      	ldr	r3, [pc, #96]	; (11c34 <gatt_indicate+0xe0>)
   11bd4:	9307      	str	r3, [sp, #28]
   11bd6:	aa05      	add	r2, sp, #20
   11bd8:	2303      	movs	r3, #3
   11bda:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11bde:	9301      	str	r3, [sp, #4]
   11be0:	9305      	str	r3, [sp, #20]
   11be2:	f017 ff0a 	bl	299fa <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
   11be6:	4620      	mov	r0, r4
   11be8:	f7ff fbe6 	bl	113b8 <bt_att_req_free>
   11bec:	e7da      	b.n	11ba4 <gatt_indicate+0x50>
	return net_buf_simple_add(&buf->b, len);
   11bee:	f100 0a08 	add.w	sl, r0, #8
   11bf2:	2102      	movs	r1, #2
   11bf4:	4650      	mov	r0, sl
   11bf6:	f018 f96c 	bl	29ed2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   11bfa:	4607      	mov	r7, r0
   11bfc:	8aa9      	ldrh	r1, [r5, #20]
   11bfe:	f827 9b02 	strh.w	r9, [r7], #2
   11c02:	4650      	mov	r0, sl
   11c04:	f018 f965 	bl	29ed2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   11c08:	8aaa      	ldrh	r2, [r5, #20]
   11c0a:	6929      	ldr	r1, [r5, #16]
   11c0c:	4638      	mov	r0, r7
   11c0e:	f016 fdcf 	bl	287b0 <memcpy>
	req->buf = buf;
   11c12:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   11c14:	4621      	mov	r1, r4
   11c16:	4640      	mov	r0, r8
   11c18:	f017 fe61 	bl	298de <bt_att_req_send>
	if (err) {
   11c1c:	4605      	mov	r5, r0
   11c1e:	2800      	cmp	r0, #0
   11c20:	d0c2      	beq.n	11ba8 <gatt_indicate+0x54>
		bt_att_req_free(req);
   11c22:	4620      	mov	r0, r4
   11c24:	f7ff fbc8 	bl	113b8 <bt_att_req_free>
   11c28:	e7be      	b.n	11ba8 <gatt_indicate+0x54>
   11c2a:	bf00      	nop
   11c2c:	20000990 	.word	0x20000990
   11c30:	000313c6 	.word	0x000313c6
   11c34:	000314a2 	.word	0x000314a2
   11c38:	0002991d 	.word	0x0002991d
   11c3c:	000313e0 	.word	0x000313e0

00011c40 <bt_gatt_indicate>:
{
   11c40:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11c42:	4b39      	ldr	r3, [pc, #228]	; (11d28 <bt_gatt_indicate+0xe8>)
   11c44:	f3bf 8f5b 	dmb	ish
   11c48:	681b      	ldr	r3, [r3, #0]
   11c4a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11c4e:	079a      	lsls	r2, r3, #30
{
   11c50:	b08b      	sub	sp, #44	; 0x2c
   11c52:	4604      	mov	r4, r0
   11c54:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11c56:	d561      	bpl.n	11d1c <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   11c58:	b110      	cbz	r0, 11c60 <bt_gatt_indicate+0x20>
   11c5a:	7a83      	ldrb	r3, [r0, #10]
   11c5c:	2b07      	cmp	r3, #7
   11c5e:	d160      	bne.n	11d22 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   11c60:	6868      	ldr	r0, [r5, #4]
   11c62:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11c64:	f7ff fe92 	bl	1198c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   11c68:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11c6a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   11c6e:	b33a      	cbz	r2, 11cc0 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11c70:	a905      	add	r1, sp, #20
   11c72:	9102      	str	r1, [sp, #8]
   11c74:	492d      	ldr	r1, [pc, #180]	; (11d2c <bt_gatt_indicate+0xec>)
   11c76:	9101      	str	r1, [sp, #4]
   11c78:	2101      	movs	r1, #1
	found->attr = NULL;
   11c7a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11c7c:	9100      	str	r1, [sp, #0]
   11c7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   11c82:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11c84:	f7ff feb2 	bl	119ec <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   11c88:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   11c8a:	b91b      	cbnz	r3, 11c94 <bt_gatt_indicate+0x54>
			return -ENOENT;
   11c8c:	f06f 0001 	mvn.w	r0, #1
}
   11c90:	b00b      	add	sp, #44	; 0x2c
   11c92:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   11c94:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   11c96:	9b05      	ldr	r3, [sp, #20]
   11c98:	6818      	ldr	r0, [r3, #0]
   11c9a:	2300      	movs	r3, #0
   11c9c:	f88d 3010 	strb.w	r3, [sp, #16]
   11ca0:	a904      	add	r1, sp, #16
   11ca2:	f642 0303 	movw	r3, #10243	; 0x2803
   11ca6:	f8ad 3012 	strh.w	r3, [sp, #18]
   11caa:	f016 fe07 	bl	288bc <bt_uuid_cmp>
   11cae:	b970      	cbnz	r0, 11cce <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   11cb0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   11cb2:	68c3      	ldr	r3, [r0, #12]
   11cb4:	799b      	ldrb	r3, [r3, #6]
   11cb6:	069b      	lsls	r3, r3, #26
   11cb8:	d405      	bmi.n	11cc6 <bt_gatt_indicate+0x86>
			return -EINVAL;
   11cba:	f06f 0015 	mvn.w	r0, #21
   11cbe:	e7e7      	b.n	11c90 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   11cc0:	2800      	cmp	r0, #0
   11cc2:	d1e8      	bne.n	11c96 <bt_gatt_indicate+0x56>
   11cc4:	e7e2      	b.n	11c8c <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   11cc6:	f017 ffc6 	bl	29c56 <bt_gatt_attr_value_handle>
   11cca:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   11cce:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   11cd2:	b13c      	cbz	r4, 11ce4 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   11cd4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   11cd6:	4601      	mov	r1, r0
		params->_ref = 1;
   11cd8:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   11cda:	462a      	mov	r2, r5
   11cdc:	4620      	mov	r0, r4
   11cde:	f7ff ff39 	bl	11b54 <gatt_indicate>
   11ce2:	e7d5      	b.n	11c90 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   11ce4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   11ce8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   11cea:	2302      	movs	r3, #2
   11cec:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11cf0:	f642 1302 	movw	r3, #10498	; 0x2902
   11cf4:	f8ad 3012 	strh.w	r3, [sp, #18]
   11cf8:	ab05      	add	r3, sp, #20
   11cfa:	9302      	str	r3, [sp, #8]
   11cfc:	4b0c      	ldr	r3, [pc, #48]	; (11d30 <bt_gatt_indicate+0xf0>)
   11cfe:	9301      	str	r3, [sp, #4]
   11d00:	2301      	movs	r3, #1
   11d02:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   11d04:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11d06:	4623      	mov	r3, r4
   11d08:	aa04      	add	r2, sp, #16
   11d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   11d0e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11d10:	f88d 4010 	strb.w	r4, [sp, #16]
   11d14:	f7ff fe6a 	bl	119ec <bt_gatt_foreach_attr_type>
	return data.err;
   11d18:	9807      	ldr	r0, [sp, #28]
   11d1a:	e7b9      	b.n	11c90 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   11d1c:	f06f 000a 	mvn.w	r0, #10
   11d20:	e7b6      	b.n	11c90 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   11d22:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11d26:	e7b3      	b.n	11c90 <bt_gatt_indicate+0x50>
   11d28:	200000cc 	.word	0x200000cc
   11d2c:	00029943 	.word	0x00029943
   11d30:	00011e65 	.word	0x00011e65

00011d34 <sc_process>:
{
   11d34:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   11d36:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   11d3a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   11d3e:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   11d42:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   11d46:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11d48:	f1a0 0120 	sub.w	r1, r0, #32
   11d4c:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d50:	f3bf 8f5b 	dmb	ish
   11d54:	e854 2f00 	ldrex	r2, [r4]
   11d58:	f022 0201 	bic.w	r2, r2, #1
   11d5c:	e844 2000 	strex	r0, r2, [r4]
   11d60:	2800      	cmp	r0, #0
   11d62:	d1f7      	bne.n	11d54 <sc_process+0x20>
   11d64:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   11d68:	4a0c      	ldr	r2, [pc, #48]	; (11d9c <sc_process+0x68>)
   11d6a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   11d6e:	4a0c      	ldr	r2, [pc, #48]	; (11da0 <sc_process+0x6c>)
   11d70:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   11d74:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   11d76:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   11d78:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   11d7c:	2204      	movs	r2, #4
	sc->start = 0U;
   11d7e:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   11d82:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   11d86:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   11d8a:	f7ff ff59 	bl	11c40 <bt_gatt_indicate>
   11d8e:	b918      	cbnz	r0, 11d98 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   11d90:	2101      	movs	r1, #1
   11d92:	4620      	mov	r0, r4
   11d94:	f017 fe51 	bl	29a3a <atomic_set_bit>
}
   11d98:	b002      	add	sp, #8
   11d9a:	bd10      	pop	{r4, pc}
   11d9c:	0002c79c 	.word	0x0002c79c
   11da0:	00011885 	.word	0x00011885

00011da4 <gatt_notify>:
{
   11da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11da8:	4614      	mov	r4, r2
   11daa:	b089      	sub	sp, #36	; 0x24
   11dac:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   11dae:	2214      	movs	r2, #20
   11db0:	6861      	ldr	r1, [r4, #4]
{
   11db2:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   11db4:	f017 ffaa 	bl	29d0c <bt_gatt_check_perm>
   11db8:	b1a8      	cbz	r0, 11de6 <gatt_notify+0x42>
		BT_WARN("Link is not encrypted");
   11dba:	4826      	ldr	r0, [pc, #152]	; (11e54 <gatt_notify+0xb0>)
   11dbc:	6803      	ldr	r3, [r0, #0]
   11dbe:	f013 0f06 	tst.w	r3, #6
   11dc2:	d00b      	beq.n	11ddc <gatt_notify+0x38>
   11dc4:	4b24      	ldr	r3, [pc, #144]	; (11e58 <gatt_notify+0xb4>)
   11dc6:	9306      	str	r3, [sp, #24]
   11dc8:	4b24      	ldr	r3, [pc, #144]	; (11e5c <gatt_notify+0xb8>)
   11dca:	9307      	str	r3, [sp, #28]
   11dcc:	aa05      	add	r2, sp, #20
   11dce:	2303      	movs	r3, #3
   11dd0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11dd4:	9301      	str	r3, [sp, #4]
   11dd6:	9305      	str	r3, [sp, #20]
   11dd8:	f017 fe0f 	bl	299fa <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   11ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11de0:	b009      	add	sp, #36	; 0x24
   11de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
   11de6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   11de8:	211b      	movs	r1, #27
   11dea:	3202      	adds	r2, #2
   11dec:	4638      	mov	r0, r7
   11dee:	f7ff f863 	bl	10eb8 <bt_att_create_pdu>
	if (!buf) {
   11df2:	4605      	mov	r5, r0
   11df4:	b998      	cbnz	r0, 11e1e <gatt_notify+0x7a>
		BT_WARN("No buffer available to send notification");
   11df6:	4817      	ldr	r0, [pc, #92]	; (11e54 <gatt_notify+0xb0>)
   11df8:	6803      	ldr	r3, [r0, #0]
   11dfa:	f013 0f06 	tst.w	r3, #6
   11dfe:	d00b      	beq.n	11e18 <gatt_notify+0x74>
   11e00:	4b17      	ldr	r3, [pc, #92]	; (11e60 <gatt_notify+0xbc>)
   11e02:	9306      	str	r3, [sp, #24]
   11e04:	4b15      	ldr	r3, [pc, #84]	; (11e5c <gatt_notify+0xb8>)
   11e06:	9307      	str	r3, [sp, #28]
   11e08:	aa05      	add	r2, sp, #20
   11e0a:	2303      	movs	r3, #3
   11e0c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11e10:	9301      	str	r3, [sp, #4]
   11e12:	9305      	str	r3, [sp, #20]
   11e14:	f017 fdf1 	bl	299fa <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
   11e18:	f06f 000b 	mvn.w	r0, #11
   11e1c:	e7e0      	b.n	11de0 <gatt_notify+0x3c>
   11e1e:	f100 0908 	add.w	r9, r0, #8
   11e22:	2102      	movs	r1, #2
   11e24:	4648      	mov	r0, r9
   11e26:	f018 f854 	bl	29ed2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   11e2a:	4606      	mov	r6, r0
   11e2c:	89a1      	ldrh	r1, [r4, #12]
   11e2e:	f826 8b02 	strh.w	r8, [r6], #2
   11e32:	4648      	mov	r0, r9
   11e34:	f018 f84d 	bl	29ed2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   11e38:	89a2      	ldrh	r2, [r4, #12]
   11e3a:	68a1      	ldr	r1, [r4, #8]
   11e3c:	4630      	mov	r0, r6
   11e3e:	f016 fcb7 	bl	287b0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   11e42:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   11e46:	4629      	mov	r1, r5
   11e48:	4638      	mov	r0, r7
}
   11e4a:	b009      	add	sp, #36	; 0x24
   11e4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   11e50:	f017 bcfe 	b.w	29850 <bt_att_send>
   11e54:	20000990 	.word	0x20000990
   11e58:	000313c6 	.word	0x000313c6
   11e5c:	00031496 	.word	0x00031496
   11e60:	0003140b 	.word	0x0003140b

00011e64 <notify_cb>:
{
   11e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   11e66:	4b3b      	ldr	r3, [pc, #236]	; (11f54 <notify_cb+0xf0>)
{
   11e68:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   11e6a:	6882      	ldr	r2, [r0, #8]
   11e6c:	429a      	cmp	r2, r3
{
   11e6e:	b089      	sub	sp, #36	; 0x24
   11e70:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11e72:	d12e      	bne.n	11ed2 <notify_cb+0x6e>
	ccc = attr->user_data;
   11e74:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   11e76:	4b38      	ldr	r3, [pc, #224]	; (11f58 <notify_cb+0xf4>)
   11e78:	429f      	cmp	r7, r3
   11e7a:	d11a      	bne.n	11eb2 <notify_cb+0x4e>
   11e7c:	4d37      	ldr	r5, [pc, #220]	; (11f5c <notify_cb+0xf8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   11e7e:	2300      	movs	r3, #0
   11e80:	2207      	movs	r2, #7
   11e82:	a902      	add	r1, sp, #8
   11e84:	1c68      	adds	r0, r5, #1
   11e86:	9302      	str	r3, [sp, #8]
   11e88:	f8cd 300b 	str.w	r3, [sp, #11]
   11e8c:	f016 fc67 	bl	2875e <memcmp>
   11e90:	b178      	cbz	r0, 11eb2 <notify_cb+0x4e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   11e92:	4629      	mov	r1, r5
   11e94:	2207      	movs	r2, #7
   11e96:	f811 0b01 	ldrb.w	r0, [r1], #1
   11e9a:	f7fd fff9 	bl	fe90 <bt_conn_lookup_state_le>
			if (!conn) {
   11e9e:	b9e0      	cbnz	r0, 11eda <notify_cb+0x76>
				sc = (struct sc_data *)data->ind_params->data;
   11ea0:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   11ea2:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   11ea4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   11ea6:	f811 0b01 	ldrb.w	r0, [r1], #1
   11eaa:	8853      	ldrh	r3, [r2, #2]
   11eac:	8812      	ldrh	r2, [r2, #0]
   11eae:	f7ff fc5b 	bl	11768 <sc_save>
		if (cfg->value != data->type) {
   11eb2:	893a      	ldrh	r2, [r7, #8]
   11eb4:	89a3      	ldrh	r3, [r4, #12]
   11eb6:	429a      	cmp	r2, r3
   11eb8:	d10b      	bne.n	11ed2 <notify_cb+0x6e>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11eba:	4639      	mov	r1, r7
   11ebc:	f811 0b01 	ldrb.w	r0, [r1], #1
   11ec0:	f7fd ffc6 	bl	fe50 <bt_conn_lookup_addr_le>
		if (!conn) {
   11ec4:	4605      	mov	r5, r0
   11ec6:	b120      	cbz	r0, 11ed2 <notify_cb+0x6e>
		if (conn->state != BT_CONN_CONNECTED) {
   11ec8:	7a83      	ldrb	r3, [r0, #10]
   11eca:	2b07      	cmp	r3, #7
   11ecc:	d008      	beq.n	11ee0 <notify_cb+0x7c>
			bt_conn_unref(conn);
   11ece:	f017 f86c 	bl	28faa <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   11ed2:	2701      	movs	r7, #1
}
   11ed4:	4638      	mov	r0, r7
   11ed6:	b009      	add	sp, #36	; 0x24
   11ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   11eda:	f017 f866 	bl	28faa <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   11ede:	e7e8      	b.n	11eb2 <notify_cb+0x4e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   11ee0:	697b      	ldr	r3, [r7, #20]
   11ee2:	b123      	cbz	r3, 11eee <notify_cb+0x8a>
   11ee4:	4631      	mov	r1, r6
   11ee6:	4798      	blx	r3
   11ee8:	b908      	cbnz	r0, 11eee <notify_cb+0x8a>
			bt_conn_unref(conn);
   11eea:	4628      	mov	r0, r5
   11eec:	e7ef      	b.n	11ece <notify_cb+0x6a>
		if (bt_gatt_check_perm(conn, attr,
   11eee:	2214      	movs	r2, #20
   11ef0:	4631      	mov	r1, r6
   11ef2:	4628      	mov	r0, r5
   11ef4:	f017 ff0a 	bl	29d0c <bt_gatt_check_perm>
   11ef8:	4607      	mov	r7, r0
   11efa:	b188      	cbz	r0, 11f20 <notify_cb+0xbc>
			BT_WARN("Link is not encrypted");
   11efc:	4818      	ldr	r0, [pc, #96]	; (11f60 <notify_cb+0xfc>)
   11efe:	6803      	ldr	r3, [r0, #0]
   11f00:	f013 0f06 	tst.w	r3, #6
   11f04:	d0e5      	beq.n	11ed2 <notify_cb+0x6e>
   11f06:	4b17      	ldr	r3, [pc, #92]	; (11f64 <notify_cb+0x100>)
   11f08:	9306      	str	r3, [sp, #24]
   11f0a:	4b17      	ldr	r3, [pc, #92]	; (11f68 <notify_cb+0x104>)
   11f0c:	9307      	str	r3, [sp, #28]
   11f0e:	aa05      	add	r2, sp, #20
   11f10:	2303      	movs	r3, #3
   11f12:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11f16:	9301      	str	r3, [sp, #4]
   11f18:	9305      	str	r3, [sp, #20]
   11f1a:	f017 fd6e 	bl	299fa <z_log_msg2_static_create.constprop.0>
   11f1e:	e7d8      	b.n	11ed2 <notify_cb+0x6e>
		if (data->type == BT_GATT_CCC_INDICATE) {
   11f20:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   11f22:	88a1      	ldrh	r1, [r4, #4]
   11f24:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   11f26:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   11f28:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   11f2a:	d10f      	bne.n	11f4c <notify_cb+0xe8>
			err = gatt_indicate(conn, data->handle,
   11f2c:	f7ff fe12 	bl	11b54 <gatt_indicate>
			if (err == 0) {
   11f30:	4606      	mov	r6, r0
   11f32:	b918      	cbnz	r0, 11f3c <notify_cb+0xd8>
				data->ind_params->_ref++;
   11f34:	6922      	ldr	r2, [r4, #16]
   11f36:	7d93      	ldrb	r3, [r2, #22]
   11f38:	3301      	adds	r3, #1
   11f3a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   11f3c:	4628      	mov	r0, r5
   11f3e:	f017 f834 	bl	28faa <bt_conn_unref>
		if (err < 0) {
   11f42:	2e00      	cmp	r6, #0
   11f44:	dbc6      	blt.n	11ed4 <notify_cb+0x70>
		data->err = 0;
   11f46:	2300      	movs	r3, #0
   11f48:	60a3      	str	r3, [r4, #8]
   11f4a:	e7c2      	b.n	11ed2 <notify_cb+0x6e>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   11f4c:	f7ff ff2a 	bl	11da4 <gatt_notify>
   11f50:	4606      	mov	r6, r0
   11f52:	e7f3      	b.n	11f3c <notify_cb+0xd8>
   11f54:	0001166d 	.word	0x0001166d
   11f58:	20000364 	.word	0x20000364
   11f5c:	20005e98 	.word	0x20005e98
   11f60:	20000990 	.word	0x20000990
   11f64:	000313c6 	.word	0x000313c6
   11f68:	000314b0 	.word	0x000314b0

00011f6c <update_ccc>:
{
   11f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f6e:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   11f70:	6881      	ldr	r1, [r0, #8]
   11f72:	4b38      	ldr	r3, [pc, #224]	; (12054 <update_ccc+0xe8>)
   11f74:	4299      	cmp	r1, r3
{
   11f76:	af00      	add	r7, sp, #0
   11f78:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11f7a:	d127      	bne.n	11fcc <update_ccc+0x60>
	ccc = attr->user_data;
   11f7c:	68c6      	ldr	r6, [r0, #12]
	struct bt_conn *conn = data->conn;
   11f7e:	6815      	ldr	r5, [r2, #0]
		if (!cfg->value ||
   11f80:	8933      	ldrh	r3, [r6, #8]
   11f82:	b31b      	cbz	r3, 11fcc <update_ccc+0x60>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11f84:	4632      	mov	r2, r6
   11f86:	4628      	mov	r0, r5
   11f88:	f812 1b01 	ldrb.w	r1, [r2], #1
   11f8c:	f017 f81b 	bl	28fc6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   11f90:	b1e0      	cbz	r0, 11fcc <update_ccc+0x60>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   11f92:	222a      	movs	r2, #42	; 0x2a
   11f94:	4621      	mov	r1, r4
   11f96:	4628      	mov	r0, r5
   11f98:	f017 feb8 	bl	29d0c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   11f9c:	2803      	cmp	r0, #3
   11f9e:	d119      	bne.n	11fd4 <update_ccc+0x68>
				BT_WARN("CCC %p not writable", attr);
   11fa0:	482d      	ldr	r0, [pc, #180]	; (12058 <update_ccc+0xec>)
   11fa2:	6803      	ldr	r3, [r0, #0]
   11fa4:	f013 0f06 	tst.w	r3, #6
   11fa8:	d010      	beq.n	11fcc <update_ccc+0x60>
   11faa:	466d      	mov	r5, sp
   11fac:	b088      	sub	sp, #32
   11fae:	466a      	mov	r2, sp
   11fb0:	4b2a      	ldr	r3, [pc, #168]	; (1205c <update_ccc+0xf0>)
   11fb2:	6113      	str	r3, [r2, #16]
   11fb4:	4b2a      	ldr	r3, [pc, #168]	; (12060 <update_ccc+0xf4>)
   11fb6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11fba:	2304      	movs	r3, #4
   11fbc:	f842 3f0c 	str.w	r3, [r2, #12]!
   11fc0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11fc4:	60bb      	str	r3, [r7, #8]
   11fc6:	f017 fd18 	bl	299fa <z_log_msg2_static_create.constprop.0>
   11fca:	46ad      	mov	sp, r5
}
   11fcc:	2001      	movs	r0, #1
   11fce:	3724      	adds	r7, #36	; 0x24
   11fd0:	46bd      	mov	sp, r7
   11fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   11fd4:	4631      	mov	r1, r6
   11fd6:	4620      	mov	r0, r4
   11fd8:	f017 fc96 	bl	29908 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   11fdc:	4b21      	ldr	r3, [pc, #132]	; (12064 <update_ccc+0xf8>)
   11fde:	429e      	cmp	r6, r3
   11fe0:	d1f4      	bne.n	11fcc <update_ccc+0x60>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   11fe2:	7a28      	ldrb	r0, [r5, #8]
   11fe4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   11fe8:	f7ff fbae 	bl	11748 <find_sc_cfg>
	if (!cfg) {
   11fec:	2800      	cmp	r0, #0
   11fee:	d0ed      	beq.n	11fcc <update_ccc+0x60>
	if (!(cfg->data.start || cfg->data.end)) {
   11ff0:	8902      	ldrh	r2, [r0, #8]
   11ff2:	8943      	ldrh	r3, [r0, #10]
   11ff4:	ea52 0103 	orrs.w	r1, r2, r3
   11ff8:	d0e8      	beq.n	11fcc <update_ccc+0x60>
	index = bt_conn_index(conn);
   11ffa:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   11ffc:	803a      	strh	r2, [r7, #0]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   11ffe:	807b      	strh	r3, [r7, #2]
	index = bt_conn_index(conn);
   12000:	f7fd fe6c 	bl	fcdc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   12004:	4918      	ldr	r1, [pc, #96]	; (12068 <update_ccc+0xfc>)
   12006:	4a19      	ldr	r2, [pc, #100]	; (1206c <update_ccc+0x100>)
   12008:	2318      	movs	r3, #24
   1200a:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1200e:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   12010:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   12012:	4a17      	ldr	r2, [pc, #92]	; (12070 <update_ccc+0x104>)
   12014:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   12016:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
   1201a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1201c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].data = &sc_range[0];
   12020:	611f      	str	r7, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   12022:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   12024:	4628      	mov	r0, r5
   12026:	f7ff fe0b 	bl	11c40 <bt_gatt_indicate>
   1202a:	2800      	cmp	r0, #0
   1202c:	d0ce      	beq.n	11fcc <update_ccc+0x60>
		BT_ERR("SC restore indication failed");
   1202e:	480a      	ldr	r0, [pc, #40]	; (12058 <update_ccc+0xec>)
   12030:	6803      	ldr	r3, [r0, #0]
   12032:	075b      	lsls	r3, r3, #29
   12034:	d0ca      	beq.n	11fcc <update_ccc+0x60>
   12036:	4b0f      	ldr	r3, [pc, #60]	; (12074 <update_ccc+0x108>)
   12038:	61bb      	str	r3, [r7, #24]
   1203a:	4b0f      	ldr	r3, [pc, #60]	; (12078 <update_ccc+0x10c>)
   1203c:	61fb      	str	r3, [r7, #28]
   1203e:	f107 0214 	add.w	r2, r7, #20
   12042:	2303      	movs	r3, #3
   12044:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12048:	607b      	str	r3, [r7, #4]
   1204a:	617b      	str	r3, [r7, #20]
   1204c:	f017 fcd5 	bl	299fa <z_log_msg2_static_create.constprop.0>
   12050:	e7bc      	b.n	11fcc <update_ccc+0x60>
   12052:	bf00      	nop
   12054:	0001166d 	.word	0x0001166d
   12058:	20000990 	.word	0x20000990
   1205c:	00031438 	.word	0x00031438
   12060:	0003148b 	.word	0x0003148b
   12064:	20000364 	.word	0x20000364
   12068:	2000404c 	.word	0x2000404c
   1206c:	0002c79c 	.word	0x0002c79c
   12070:	00029c1f 	.word	0x00029c1f
   12074:	00031450 	.word	0x00031450
   12078:	00031480 	.word	0x00031480

0001207c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1207c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1207e:	4a06      	ldr	r2, [pc, #24]	; (12098 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   12080:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12082:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   12084:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12086:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1208a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1208e:	f017 fe30 	bl	29cf2 <bt_gatt_foreach_attr>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   12092:	b003      	add	sp, #12
   12094:	f85d fb04 	ldr.w	pc, [sp], #4
   12098:	00011f6d 	.word	0x00011f6d

0001209c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1209e:	4b08      	ldr	r3, [pc, #32]	; (120c0 <bt_gatt_att_max_mtu_changed+0x24>)
   120a0:	681c      	ldr	r4, [r3, #0]
   120a2:	4605      	mov	r5, r0
   120a4:	460e      	mov	r6, r1
   120a6:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   120a8:	b14c      	cbz	r4, 120be <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   120aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   120ae:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   120b0:	b11b      	cbz	r3, 120ba <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   120b2:	463a      	mov	r2, r7
   120b4:	4631      	mov	r1, r6
   120b6:	4628      	mov	r0, r5
   120b8:	4798      	blx	r3
	return node->next;
   120ba:	6864      	ldr	r4, [r4, #4]
   120bc:	e7f4      	b.n	120a8 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   120be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120c0:	20004030 	.word	0x20004030

000120c4 <db_hash_read>:
{
   120c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   120c6:	4915      	ldr	r1, [pc, #84]	; (1211c <db_hash_read+0x58>)
{
   120c8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   120cc:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   120ce:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   120d2:	461f      	mov	r7, r3
   120d4:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   120d6:	f018 fef1 	bl	2aebc <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   120da:	f3bf 8f5b 	dmb	ish
   120de:	4b10      	ldr	r3, [pc, #64]	; (12120 <db_hash_read+0x5c>)
   120e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   120e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   120e6:	075b      	lsls	r3, r3, #29
   120e8:	d401      	bmi.n	120ee <db_hash_read+0x2a>
		db_hash_gen(true);
   120ea:	f7ff fcd9 	bl	11aa0 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
   120ee:	2101      	movs	r1, #1
   120f0:	4620      	mov	r0, r4
   120f2:	f017 fe2e 	bl	29d52 <bt_gatt_change_aware>
	if (offset > value_len) {
   120f6:	2e10      	cmp	r6, #16
   120f8:	d80c      	bhi.n	12114 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   120fa:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   120fe:	4909      	ldr	r1, [pc, #36]	; (12124 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   12100:	42bc      	cmp	r4, r7
   12102:	bfa8      	it	ge
   12104:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   12106:	4622      	mov	r2, r4
   12108:	4431      	add	r1, r6
   1210a:	4628      	mov	r0, r5
   1210c:	f016 fb50 	bl	287b0 <memcpy>
}
   12110:	4620      	mov	r0, r4
   12112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12114:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   12118:	e7fa      	b.n	12110 <db_hash_read+0x4c>
   1211a:	bf00      	nop
   1211c:	20003128 	.word	0x20003128
   12120:	20003150 	.word	0x20003150
   12124:	200030e8 	.word	0x200030e8

00012128 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   12128:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1212a:	4603      	mov	r3, r0
   1212c:	4a14      	ldr	r2, [pc, #80]	; (12180 <bt_gatt_disconnected+0x58>)
{
   1212e:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   12130:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12134:	2001      	movs	r0, #1
   12136:	f017 fddc 	bl	29cf2 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1213a:	4628      	mov	r0, r5
   1213c:	f7ff fa18 	bl	11570 <find_cf_cfg>
	if (!cfg) {
   12140:	4604      	mov	r4, r0
   12142:	b1e0      	cbz	r0, 1217e <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12144:	f105 0688 	add.w	r6, r5, #136	; 0x88
   12148:	7a28      	ldrb	r0, [r5, #8]
   1214a:	4631      	mov	r1, r6
   1214c:	f016 fcfe 	bl	28b4c <bt_addr_le_is_bonded>
   12150:	b920      	cbnz	r0, 1215c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   12152:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   12154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   12158:	f017 bc52 	b.w	29a00 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1215c:	1c60      	adds	r0, r4, #1
   1215e:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12160:	340c      	adds	r4, #12
   12162:	f017 fc47 	bl	299f4 <bt_addr_le_copy>
   12166:	f3bf 8f5b 	dmb	ish
   1216a:	e854 3f00 	ldrex	r3, [r4]
   1216e:	f023 0302 	bic.w	r3, r3, #2
   12172:	e844 3200 	strex	r2, r3, [r4]
   12176:	2a00      	cmp	r2, #0
   12178:	d1f7      	bne.n	1216a <bt_gatt_disconnected+0x42>
   1217a:	f3bf 8f5b 	dmb	ish
}
   1217e:	bd70      	pop	{r4, r5, r6, pc}
   12180:	000117e9 	.word	0x000117e9

00012184 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   12184:	b590      	push	{r4, r7, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   12186:	4a12      	ldr	r2, [pc, #72]	; (121d0 <bt_smp_accept+0x4c>)
{
   12188:	b083      	sub	sp, #12
   1218a:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1218c:	6810      	ldr	r0, [r2, #0]
{
   1218e:	af00      	add	r7, sp, #0
		if (smp->chan.conn) {
   12190:	b928      	cbnz	r0, 1219e <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.ops = &ops;
   12192:	4b10      	ldr	r3, [pc, #64]	; (121d4 <bt_smp_accept+0x50>)
   12194:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   12196:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   12198:	370c      	adds	r7, #12
   1219a:	46bd      	mov	sp, r7
   1219c:	bd90      	pop	{r4, r7, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1219e:	480e      	ldr	r0, [pc, #56]	; (121d8 <bt_smp_accept+0x54>)
   121a0:	6802      	ldr	r2, [r0, #0]
   121a2:	0752      	lsls	r2, r2, #29
   121a4:	d011      	beq.n	121ca <bt_smp_accept+0x46>
   121a6:	466c      	mov	r4, sp
   121a8:	b088      	sub	sp, #32
   121aa:	466a      	mov	r2, sp
   121ac:	490b      	ldr	r1, [pc, #44]	; (121dc <bt_smp_accept+0x58>)
   121ae:	6111      	str	r1, [r2, #16]
   121b0:	490b      	ldr	r1, [pc, #44]	; (121e0 <bt_smp_accept+0x5c>)
   121b2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   121b6:	2304      	movs	r3, #4
   121b8:	607b      	str	r3, [r7, #4]
   121ba:	f842 3f0c 	str.w	r3, [r2, #12]!
   121be:	2300      	movs	r3, #0
   121c0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   121c4:	f014 fc90 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   121c8:	46a5      	mov	sp, r4
   121ca:	f06f 000b 	mvn.w	r0, #11
   121ce:	e7e3      	b.n	12198 <bt_smp_accept+0x14>
   121d0:	200031a8 	.word	0x200031a8
   121d4:	0002c878 	.word	0x0002c878
   121d8:	200009a8 	.word	0x200009a8
   121dc:	000314ee 	.word	0x000314ee
   121e0:	0003151e 	.word	0x0003151e

000121e4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   121e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121e8:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   121ea:	1dc2      	adds	r2, r0, #7
   121ec:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   121f0:	1e75      	subs	r5, r6, #1
{
   121f2:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   121f4:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   121f6:	6018      	str	r0, [r3, #0]
{
   121f8:	b082      	sub	sp, #8
   121fa:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   121fc:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   121fe:	2100      	movs	r1, #0
   12200:	2204      	movs	r2, #4
   12202:	fb07 0005 	mla	r0, r7, r5, r0
   12206:	f016 fade 	bl	287c6 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1220a:	b1bd      	cbz	r5, 1223c <mem_init+0x58>
   1220c:	3e02      	subs	r6, #2
   1220e:	b2b6      	uxth	r6, r6
   12210:	fb06 7307 	mla	r3, r6, r7, r7
   12214:	fb06 f807 	mul.w	r8, r6, r7
   12218:	441c      	add	r4, r3
   1221a:	eba8 0803 	sub.w	r8, r8, r3
   1221e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   12220:	2204      	movs	r2, #4
   12222:	eb04 0008 	add.w	r0, r4, r8
   12226:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   1222a:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1222c:	f016 fac0 	bl	287b0 <memcpy>
	while (mem_count--) {
   12230:	42b5      	cmp	r5, r6
   12232:	eba4 0407 	sub.w	r4, r4, r7
   12236:	f105 0501 	add.w	r5, r5, #1
   1223a:	d1f1      	bne.n	12220 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   1223c:	b002      	add	sp, #8
   1223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12242:	bf00      	nop

00012244 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   12244:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   12246:	6805      	ldr	r5, [r0, #0]
{
   12248:	b082      	sub	sp, #8
	if (*mem_head) {
   1224a:	b195      	cbz	r5, 12272 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1224c:	1deb      	adds	r3, r5, #7
   1224e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   12252:	2204      	movs	r2, #4
   12254:	4604      	mov	r4, r0
   12256:	4629      	mov	r1, r5
   12258:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1225c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1225e:	f016 faa7 	bl	287b0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   12262:	9b01      	ldr	r3, [sp, #4]
   12264:	b123      	cbz	r3, 12270 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   12266:	1dda      	adds	r2, r3, #7
   12268:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1226c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1226e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   12270:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   12272:	4628      	mov	r0, r5
   12274:	b002      	add	sp, #8
   12276:	bd70      	pop	{r4, r5, r6, pc}

00012278 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   12278:	680b      	ldr	r3, [r1, #0]
{
   1227a:	b570      	push	{r4, r5, r6, lr}
   1227c:	460c      	mov	r4, r1
   1227e:	4605      	mov	r5, r0
	if (*mem_head) {
   12280:	b183      	cbz	r3, 122a4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   12282:	3307      	adds	r3, #7
   12284:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   12288:	881e      	ldrh	r6, [r3, #0]
   1228a:	3601      	adds	r6, #1
   1228c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   1228e:	2204      	movs	r2, #4
   12290:	4621      	mov	r1, r4
   12292:	4628      	mov	r0, r5
   12294:	f016 fa8c 	bl	287b0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   12298:	1deb      	adds	r3, r5, #7
   1229a:	f023 0303 	bic.w	r3, r3, #3
   1229e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   122a0:	6025      	str	r5, [r4, #0]
}
   122a2:	bd70      	pop	{r4, r5, r6, pc}
   122a4:	2601      	movs	r6, #1
   122a6:	e7f2      	b.n	1228e <mem_release+0x16>

000122a8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   122a8:	fb02 0001 	mla	r0, r2, r1, r0
   122ac:	4770      	bx	lr
   122ae:	bf00      	nop

000122b0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   122b0:	1a40      	subs	r0, r0, r1
   122b2:	b280      	uxth	r0, r0
}
   122b4:	fbb0 f0f2 	udiv	r0, r0, r2
   122b8:	4770      	bx	lr
   122ba:	bf00      	nop

000122bc <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   122bc:	1e53      	subs	r3, r2, #1
	src += len;
   122be:	4411      	add	r1, r2
	while (len--) {
   122c0:	b29b      	uxth	r3, r3
   122c2:	b142      	cbz	r2, 122d6 <mem_rcopy+0x1a>
   122c4:	43db      	mvns	r3, r3
   122c6:	3801      	subs	r0, #1
   122c8:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   122ca:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   122ce:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   122d2:	4291      	cmp	r1, r2
   122d4:	d1f9      	bne.n	122ca <mem_rcopy+0xe>
	}
}
   122d6:	4770      	bx	lr

000122d8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   122d8:	4401      	add	r1, r0
   122da:	e002      	b.n	122e2 <mem_nz+0xa>
		if (*src++) {
   122dc:	f810 3b01 	ldrb.w	r3, [r0], #1
   122e0:	b91b      	cbnz	r3, 122ea <mem_nz+0x12>
	while (len--) {
   122e2:	4288      	cmp	r0, r1
   122e4:	d1fa      	bne.n	122dc <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   122e6:	2000      	movs	r0, #0
   122e8:	4770      	bx	lr
			return 1;
   122ea:	2001      	movs	r0, #1
}
   122ec:	4770      	bx	lr
   122ee:	bf00      	nop

000122f0 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   122f0:	6010      	str	r0, [r2, #0]
   122f2:	6008      	str	r0, [r1, #0]

	return link;
}
   122f4:	4770      	bx	lr
   122f6:	bf00      	nop

000122f8 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   122f8:	680a      	ldr	r2, [r1, #0]
{
   122fa:	4603      	mov	r3, r0
	if (*head != *tail) {
   122fc:	6800      	ldr	r0, [r0, #0]
   122fe:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   12300:	bf05      	ittet	eq
   12302:	2200      	moveq	r2, #0
   12304:	600a      	streq	r2, [r1, #0]
		return NULL;
   12306:	2000      	movne	r0, #0
	*head = *tail = NULL;
   12308:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1230a:	4770      	bx	lr

0001230c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1230c:	f8d2 c000 	ldr.w	ip, [r2]
   12310:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   12314:	f8d2 c000 	ldr.w	ip, [r2]
   12318:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1231c:	6010      	str	r0, [r2, #0]

	return link;
}
   1231e:	4770      	bx	lr

00012320 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   12320:	4288      	cmp	r0, r1
   12322:	d003      	beq.n	1232c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   12324:	b11a      	cbz	r2, 1232e <memq_peek+0xe>
		*mem = head->mem;
   12326:	6843      	ldr	r3, [r0, #4]
   12328:	6013      	str	r3, [r2, #0]
   1232a:	4770      	bx	lr
		return NULL;
   1232c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1232e:	4770      	bx	lr

00012330 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   12330:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   12332:	4283      	cmp	r3, r0
   12334:	d009      	beq.n	1234a <memq_dequeue+0x1a>
	if (mem) {
   12336:	b12a      	cbz	r2, 12344 <memq_dequeue+0x14>
		*mem = head->mem;
   12338:	6858      	ldr	r0, [r3, #4]
   1233a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1233c:	681a      	ldr	r2, [r3, #0]
   1233e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   12340:	4618      	mov	r0, r3
   12342:	4770      	bx	lr
	if (old_head == NULL) {
   12344:	2b00      	cmp	r3, #0
   12346:	d1f9      	bne.n	1233c <memq_dequeue+0xc>
   12348:	e7fa      	b.n	12340 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1234a:	2300      	movs	r3, #0
   1234c:	e7f8      	b.n	12340 <memq_dequeue+0x10>
   1234e:	bf00      	nop

00012350 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   12350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12354:	f8df 8030 	ldr.w	r8, [pc, #48]	; 12388 <mayfly_init+0x38>
   12358:	4e0c      	ldr	r6, [pc, #48]	; (1238c <mayfly_init+0x3c>)
   1235a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   1235c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   12360:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   12362:	1d22      	adds	r2, r4, #4
   12364:	4621      	mov	r1, r4
   12366:	4628      	mov	r0, r5
		while (caller_id--) {
   12368:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1236a:	f7ff ffc1 	bl	122f0 <memq_init>
		while (caller_id--) {
   1236e:	42b4      	cmp	r4, r6
   12370:	f1a5 0508 	sub.w	r5, r5, #8
   12374:	d1f5      	bne.n	12362 <mayfly_init+0x12>
	while (callee_id--) {
   12376:	3f04      	subs	r7, #4
   12378:	1d3b      	adds	r3, r7, #4
   1237a:	f1a8 0820 	sub.w	r8, r8, #32
   1237e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   12382:	d1eb      	bne.n	1235c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   12384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12388:	200040e0 	.word	0x200040e0
   1238c:	20004170 	.word	0x20004170

00012390 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   12390:	b410      	push	{r4}
   12392:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   12394:	4c15      	ldr	r4, [pc, #84]	; (123ec <mayfly_enable+0x5c>)
{
   12396:	468c      	mov	ip, r1
	if (enable) {
   12398:	b192      	cbz	r2, 123c0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1239a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1239e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   123a2:	0100      	lsls	r0, r0, #4
   123a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   123a8:	4421      	add	r1, r4
   123aa:	7a48      	ldrb	r0, [r1, #9]
   123ac:	7a0c      	ldrb	r4, [r1, #8]
   123ae:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   123b0:	bf04      	itt	eq
   123b2:	3001      	addeq	r0, #1
   123b4:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   123b6:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   123b8:	4661      	mov	r1, ip
   123ba:	4618      	mov	r0, r3
   123bc:	f00c bcc4 	b.w	1ed48 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   123c0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   123c4:	0112      	lsls	r2, r2, #4
   123c6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   123ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   123ce:	4423      	add	r3, r4
   123d0:	7a9c      	ldrb	r4, [r3, #10]
   123d2:	7ada      	ldrb	r2, [r3, #11]
   123d4:	42a2      	cmp	r2, r4
   123d6:	d001      	beq.n	123dc <mayfly_enable+0x4c>
}
   123d8:	bc10      	pop	{r4}
   123da:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   123dc:	3201      	adds	r2, #1
   123de:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   123e0:	4b03      	ldr	r3, [pc, #12]	; (123f0 <mayfly_enable+0x60>)
   123e2:	2201      	movs	r2, #1
   123e4:	545a      	strb	r2, [r3, r1]
}
   123e6:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   123e8:	f00c bd04 	b.w	1edf4 <mayfly_pend>
   123ec:	200040ec 	.word	0x200040ec
   123f0:	200040e8 	.word	0x200040e8

000123f4 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   123f4:	b570      	push	{r4, r5, r6, lr}
   123f6:	b082      	sub	sp, #8
   123f8:	4606      	mov	r6, r0
   123fa:	9101      	str	r1, [sp, #4]
   123fc:	461c      	mov	r4, r3
   123fe:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   12400:	b32a      	cbz	r2, 1244e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   12402:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   12404:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   12406:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   12408:	f012 0203 	ands.w	r2, r2, #3
   1240c:	d005      	beq.n	1241a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   1240e:	2a01      	cmp	r2, #1
   12410:	d042      	beq.n	12498 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   12412:	3301      	adds	r3, #1
   12414:	b2db      	uxtb	r3, r3
   12416:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   12418:	e00f      	b.n	1243a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   1241a:	3301      	adds	r3, #1
   1241c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1241e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   12420:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   12422:	2304      	movs	r3, #4
   12424:	fb11 3105 	smlabb	r1, r1, r5, r3
   12428:	4a1c      	ldr	r2, [pc, #112]	; (1249c <mayfly_enqueue+0xa8>)
   1242a:	6860      	ldr	r0, [r4, #4]
   1242c:	230c      	movs	r3, #12
   1242e:	fb13 1306 	smlabb	r3, r3, r6, r1
   12432:	441a      	add	r2, r3
   12434:	4621      	mov	r1, r4
   12436:	f7ff ff69 	bl	1230c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1243a:	4b19      	ldr	r3, [pc, #100]	; (124a0 <mayfly_enqueue+0xac>)
   1243c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1243e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   12440:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   12442:	4629      	mov	r1, r5
   12444:	f00c fcd6 	bl	1edf4 <mayfly_pend>

	return 0;
   12448:	2000      	movs	r0, #0
}
   1244a:	b002      	add	sp, #8
   1244c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1244e:	f00c fcbb 	bl	1edc8 <mayfly_prio_is_equal>
   12452:	2800      	cmp	r0, #0
   12454:	d0d5      	beq.n	12402 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   12456:	4629      	mov	r1, r5
   12458:	4630      	mov	r0, r6
   1245a:	f00c fc95 	bl	1ed88 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1245e:	2800      	cmp	r0, #0
   12460:	d0cf      	beq.n	12402 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   12462:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   12466:	0112      	lsls	r2, r2, #4
   12468:	490c      	ldr	r1, [pc, #48]	; (1249c <mayfly_enqueue+0xa8>)
   1246a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1246e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12472:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   12474:	7a9a      	ldrb	r2, [r3, #10]
   12476:	7adb      	ldrb	r3, [r3, #11]
   12478:	429a      	cmp	r2, r3
   1247a:	d1c2      	bne.n	12402 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   1247c:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1247e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   12480:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   12482:	0792      	lsls	r2, r2, #30
   12484:	d002      	beq.n	1248c <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   12486:	3302      	adds	r3, #2
   12488:	b2db      	uxtb	r3, r3
   1248a:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1248c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   12490:	4798      	blx	r3
		return 0;
   12492:	2000      	movs	r0, #0
}
   12494:	b002      	add	sp, #8
   12496:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   12498:	4610      	mov	r0, r2
   1249a:	e7d6      	b.n	1244a <mayfly_enqueue+0x56>
   1249c:	200040ec 	.word	0x200040ec
   124a0:	200040e8 	.word	0x200040e8

000124a4 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   124a4:	4a50      	ldr	r2, [pc, #320]	; (125e8 <mayfly_run+0x144>)
   124a6:	5c13      	ldrb	r3, [r2, r0]
   124a8:	2b00      	cmp	r3, #0
   124aa:	f000 809b 	beq.w	125e4 <mayfly_run+0x140>
{
   124ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   124b2:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   124b4:	4f4d      	ldr	r7, [pc, #308]	; (125ec <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   124b6:	5413      	strb	r3, [r2, r0]
{
   124b8:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   124ba:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   124bc:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   124c0:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   124c4:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   124c8:	9303      	str	r3, [sp, #12]
   124ca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   124ce:	f10b 0804 	add.w	r8, fp, #4
   124d2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   124d6:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   124da:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   124dc:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   124e0:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   124e2:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   124e4:	f7ff ff1c 	bl	12320 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   124e8:	f107 0624 	add.w	r6, r7, #36	; 0x24
   124ec:	4683      	mov	fp, r0
   124ee:	2800      	cmp	r0, #0
   124f0:	d034      	beq.n	1255c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   124f2:	9c05      	ldr	r4, [sp, #20]
   124f4:	7863      	ldrb	r3, [r4, #1]
   124f6:	7825      	ldrb	r5, [r4, #0]
   124f8:	1aed      	subs	r5, r5, r3
   124fa:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   124fe:	2d01      	cmp	r5, #1
   12500:	d106      	bne.n	12510 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   12502:	3b01      	subs	r3, #1
   12504:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   12506:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   1250a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   1250c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   1250e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   12510:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   12512:	1ac3      	subs	r3, r0, r3
   12514:	f003 0303 	and.w	r3, r3, #3
   12518:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   1251a:	f04f 0200 	mov.w	r2, #0
   1251e:	4631      	mov	r1, r6
	req = m->_req;
   12520:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   12524:	d00f      	beq.n	12546 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   12526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12528:	f7ff ff02 	bl	12330 <memq_dequeue>
		ack = m->_ack;
   1252c:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   12530:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   12532:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   12536:	eba3 030c 	sub.w	r3, r3, ip
   1253a:	f003 0303 	and.w	r3, r3, #3
   1253e:	2b01      	cmp	r3, #1
		m->_ack = req;
   12540:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   12544:	d046      	beq.n	125d4 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   12546:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1254a:	aa05      	add	r2, sp, #20
   1254c:	f7ff fee8 	bl	12320 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   12550:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   12552:	9000      	str	r0, [sp, #0]
   12554:	4683      	mov	fp, r0
			if (state == 1U) {
   12556:	d02b      	beq.n	125b0 <mayfly_run+0x10c>
		while (link) {
   12558:	2800      	cmp	r0, #0
   1255a:	d1ca      	bne.n	124f2 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   1255c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   12560:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   12564:	429a      	cmp	r2, r3
   12566:	d003      	beq.n	12570 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   12568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   1256c:	2301      	movs	r3, #1
   1256e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   12570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   12574:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   12578:	429a      	cmp	r2, r3
   1257a:	d003      	beq.n	12584 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   1257c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   12580:	2301      	movs	r3, #1
   12582:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   12584:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   12588:	fa5f f989 	uxtb.w	r9, r9
   1258c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   12590:	f1a7 070c 	sub.w	r7, r7, #12
   12594:	d1a1      	bne.n	124da <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   12596:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1259a:	b1c3      	cbz	r3, 125ce <mayfly_run+0x12a>
   1259c:	9b03      	ldr	r3, [sp, #12]
   1259e:	b9b3      	cbnz	r3, 125ce <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   125a0:	461a      	mov	r2, r3
   125a2:	4651      	mov	r1, sl
   125a4:	4650      	mov	r0, sl
	}
}
   125a6:	b007      	add	sp, #28
   125a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   125ac:	f00c bbcc 	b.w	1ed48 <mayfly_enable_cb>
				if (caller_id || link) {
   125b0:	f1b9 0f00 	cmp.w	r9, #0
   125b4:	d101      	bne.n	125ba <mayfly_run+0x116>
   125b6:	2800      	cmp	r0, #0
   125b8:	d0d0      	beq.n	1255c <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   125ba:	f8dd a008 	ldr.w	sl, [sp, #8]
   125be:	4a0a      	ldr	r2, [pc, #40]	; (125e8 <mayfly_run+0x144>)
   125c0:	2301      	movs	r3, #1
   125c2:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   125c6:	4651      	mov	r1, sl
   125c8:	4650      	mov	r0, sl
   125ca:	f00c fc13 	bl	1edf4 <mayfly_pend>
}
   125ce:	b007      	add	sp, #28
   125d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   125d4:	4642      	mov	r2, r8
   125d6:	4621      	mov	r1, r4
   125d8:	4658      	mov	r0, fp
			m->_ack = ack;
   125da:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   125de:	f7ff fe95 	bl	1230c <memq_enqueue>
   125e2:	e7b0      	b.n	12546 <mayfly_run+0xa2>
   125e4:	4770      	bx	lr
   125e6:	bf00      	nop
   125e8:	200040e8 	.word	0x200040e8
   125ec:	200040ec 	.word	0x200040ec

000125f0 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   125f0:	1e4b      	subs	r3, r1, #1
   125f2:	b2db      	uxtb	r3, r3
   125f4:	b171      	cbz	r1, 12614 <util_ones_count_get+0x24>
   125f6:	1e41      	subs	r1, r0, #1
   125f8:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   125fc:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   125fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   12602:	b123      	cbz	r3, 1260e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   12604:	1e5a      	subs	r2, r3, #1
			one_count++;
   12606:	3001      	adds	r0, #1
		while (bite) {
   12608:	4013      	ands	r3, r2
			one_count++;
   1260a:	b2c0      	uxtb	r0, r0
		while (bite) {
   1260c:	d1fa      	bne.n	12604 <util_ones_count_get+0x14>
	while (octets_len--) {
   1260e:	4561      	cmp	r1, ip
   12610:	d1f5      	bne.n	125fe <util_ones_count_get+0xe>
   12612:	4770      	bx	lr
	uint8_t one_count = 0U;
   12614:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   12616:	4770      	bx	lr

00012618 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   12618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   1261c:	4d48      	ldr	r5, [pc, #288]	; (12740 <util_aa_le32+0x128>)
{
   1261e:	b083      	sub	sp, #12
   12620:	4607      	mov	r7, r0
   12622:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   12624:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   12626:	2104      	movs	r1, #4
   12628:	4638      	mov	r0, r7
   1262a:	f009 fe4f 	bl	1c2cc <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1262e:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   12630:	231e      	movs	r3, #30
   12632:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   12636:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   1263a:	f04f 0901 	mov.w	r9, #1
   1263e:	e00c      	b.n	1265a <util_aa_le32+0x42>
			transitions++;
   12640:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   12644:	2b1b      	cmp	r3, #27
			transitions++;
   12646:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   12648:	d967      	bls.n	1271a <util_aa_le32+0x102>
				consecutive_cnt = 1U;
   1264a:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   1264e:	2919      	cmp	r1, #25
   12650:	d04e      	beq.n	126f0 <util_aa_le32+0xd8>
   12652:	468e      	mov	lr, r1
   12654:	4694      	mov	ip, r2
	while (bit_idx--) {
   12656:	3b01      	subs	r3, #1
   12658:	d31e      	bcc.n	12698 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   1265a:	fa20 f203 	lsr.w	r2, r0, r3
   1265e:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   12662:	4594      	cmp	ip, r2
   12664:	d1ec      	bne.n	12640 <util_aa_le32+0x28>
			consecutive_cnt++;
   12666:	f109 0801 	add.w	r8, r9, #1
   1266a:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   1266e:	f1b8 0f06 	cmp.w	r8, #6
   12672:	d90d      	bls.n	12690 <util_aa_le32+0x78>
   12674:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
   12676:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
   1267a:	b3a2      	cbz	r2, 126e6 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   1267c:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   12680:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   12684:	4571      	cmp	r1, lr
   12686:	d1e6      	bne.n	12656 <util_aa_le32+0x3e>
				transitions++;
   12688:	3101      	adds	r1, #1
   1268a:	b2c9      	uxtb	r1, r1
   1268c:	4662      	mov	r2, ip
   1268e:	e7dc      	b.n	1264a <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   12690:	d149      	bne.n	12726 <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   12692:	46c1      	mov	r9, r8
	while (bit_idx--) {
   12694:	3b01      	subs	r3, #1
   12696:	d2e0      	bcs.n	1265a <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   12698:	ea80 0305 	eor.w	r3, r0, r5
   1269c:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   1269e:	f10d 0c04 	add.w	ip, sp, #4
   126a2:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   126a6:	2200      	movs	r2, #0
		bite = *octets;
   126a8:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   126ac:	b123      	cbz	r3, 126b8 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   126ae:	1e59      	subs	r1, r3, #1
			one_count++;
   126b0:	3201      	adds	r2, #1
		while (bite) {
   126b2:	400b      	ands	r3, r1
			one_count++;
   126b4:	b2d2      	uxtb	r2, r2
		while (bite) {
   126b6:	d1fa      	bne.n	126ae <util_aa_le32+0x96>
	while (octets_len--) {
   126b8:	45e6      	cmp	lr, ip
   126ba:	d1f5      	bne.n	126a8 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   126bc:	2a01      	cmp	r2, #1
   126be:	d909      	bls.n	126d4 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   126c0:	b283      	uxth	r3, r0
   126c2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   126c6:	ea4f 4210 	mov.w	r2, r0, lsr #16
   126ca:	d11b      	bne.n	12704 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   126cc:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   126ce:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   126d2:	d117      	bne.n	12704 <util_aa_le32+0xec>
	if (!retry) {
   126d4:	3e01      	subs	r6, #1
   126d6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   126da:	d1a4      	bne.n	12626 <util_aa_le32+0xe>
		return -EFAULT;
   126dc:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   126e0:	b003      	add	sp, #12
   126e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   126e6:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   126ea:	f04f 0c01 	mov.w	ip, #1
   126ee:	e7c9      	b.n	12684 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   126f0:	3301      	adds	r3, #1
   126f2:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   126f6:	b112      	cbz	r2, 126fe <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
   126f8:	425b      	negs	r3, r3
   126fa:	4018      	ands	r0, r3
   126fc:	e7cc      	b.n	12698 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   126fe:	3b01      	subs	r3, #1
   12700:	4318      	orrs	r0, r3
   12702:	e7c9      	b.n	12698 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   12704:	f3c0 2107 	ubfx	r1, r0, #8, #8
   12708:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   1270a:	7038      	strb	r0, [r7, #0]
	return 0;
   1270c:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   1270e:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   12710:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   12712:	70fb      	strb	r3, [r7, #3]
}
   12714:	b003      	add	sp, #12
   12716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   1271a:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   1271e:	2901      	cmp	r1, #1
   12720:	d9a9      	bls.n	12676 <util_aa_le32+0x5e>
   12722:	46c1      	mov	r9, r8
   12724:	e793      	b.n	1264e <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   12726:	2b1c      	cmp	r3, #28
   12728:	d904      	bls.n	12734 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1272a:	2b1b      	cmp	r3, #27
   1272c:	d906      	bls.n	1273c <util_aa_le32+0x124>
   1272e:	4694      	mov	ip, r2
   12730:	46c1      	mov	r9, r8
   12732:	e7af      	b.n	12694 <util_aa_le32+0x7c>
   12734:	f1be 0f00 	cmp.w	lr, #0
   12738:	d09c      	beq.n	12674 <util_aa_le32+0x5c>
   1273a:	e7f6      	b.n	1272a <util_aa_le32+0x112>
   1273c:	4671      	mov	r1, lr
   1273e:	e7ee      	b.n	1271e <util_aa_le32+0x106>
   12740:	8e89bed6 	.word	0x8e89bed6

00012744 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   12744:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   12746:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   12748:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   1274a:	2bff      	cmp	r3, #255	; 0xff
   1274c:	d014      	beq.n	12778 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   1274e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   12752:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   12754:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   12758:	d028      	beq.n	127ac <ticker_dequeue+0x68>
	total = 0U;
   1275a:	f04f 0c00 	mov.w	ip, #0
   1275e:	e001      	b.n	12764 <ticker_dequeue+0x20>
		if (current == id) {
   12760:	4299      	cmp	r1, r3
   12762:	d00b      	beq.n	1277c <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   12764:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   12766:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   12768:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   1276a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   1276c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   12770:	44a4      	add	ip, r4
		ticker_current = &node[current];
   12772:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   12776:	d1f3      	bne.n	12760 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   12778:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   1277a:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   1277c:	4571      	cmp	r1, lr
   1277e:	d018      	beq.n	127b2 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   12780:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   12782:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   12784:	fa0f fe8e 	sxth.w	lr, lr
   12788:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1278c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   12790:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   12794:	7813      	ldrb	r3, [r2, #0]
   12796:	2bff      	cmp	r3, #255	; 0xff
   12798:	d006      	beq.n	127a8 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   1279a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1279e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   127a2:	68ab      	ldr	r3, [r5, #8]
   127a4:	4403      	add	r3, r0
   127a6:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   127a8:	4460      	add	r0, ip
}
   127aa:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   127ac:	469e      	mov	lr, r3
	total = 0U;
   127ae:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   127b2:	7813      	ldrb	r3, [r2, #0]
   127b4:	7743      	strb	r3, [r0, #29]
   127b6:	e7e4      	b.n	12782 <ticker_dequeue+0x3e>

000127b8 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   127b8:	eba2 0c01 	sub.w	ip, r2, r1
   127bc:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   127c0:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   127c2:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   127c4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   127c6:	d10a      	bne.n	127de <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   127c8:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   127cc:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   127ce:	42a3      	cmp	r3, r4
   127d0:	d914      	bls.n	127fc <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   127d2:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   127d4:	2100      	movs	r1, #0
}
   127d6:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   127d8:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   127da:	6141      	str	r1, [r0, #20]
}
   127dc:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   127de:	1a89      	subs	r1, r1, r2
   127e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   127e4:	428b      	cmp	r3, r1
   127e6:	d806      	bhi.n	127f6 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   127e8:	4421      	add	r1, r4
   127ea:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   127ec:	2300      	movs	r3, #0
}
   127ee:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   127f0:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   127f2:	6141      	str	r1, [r0, #20]
}
   127f4:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   127f6:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   127f8:	42a3      	cmp	r3, r4
   127fa:	d8ea      	bhi.n	127d2 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   127fc:	1ae1      	subs	r1, r4, r3
   127fe:	e7f5      	b.n	127ec <ticks_to_expire_prep+0x34>

00012800 <ticker_job_list_insert>:
{
   12800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12804:	b087      	sub	sp, #28
   12806:	4603      	mov	r3, r0
	count_user = instance->count_user;
   12808:	7a42      	ldrb	r2, [r0, #9]
{
   1280a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   1280c:	6800      	ldr	r0, [r0, #0]
   1280e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   12810:	6858      	ldr	r0, [r3, #4]
   12812:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   12814:	2a00      	cmp	r2, #0
   12816:	f000 80f4 	beq.w	12a02 <ticker_job_list_insert+0x202>
   1281a:	1e53      	subs	r3, r2, #1
   1281c:	b2db      	uxtb	r3, r3
   1281e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   12822:	460f      	mov	r7, r1
   12824:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   12826:	9b03      	ldr	r3, [sp, #12]
   12828:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   1282a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   1282c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1282e:	2fff      	cmp	r7, #255	; 0xff
   12830:	d05e      	beq.n	128f0 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   12832:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   12836:	9b02      	ldr	r3, [sp, #8]
   12838:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   1283c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   1283e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   12842:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   12846:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   12848:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   1284a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1284e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   12852:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   12856:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   12858:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1285c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   1285e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   12862:	d10f      	bne.n	12884 <ticker_job_list_insert+0x84>
   12864:	e0c8      	b.n	129f8 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   12866:	1a09      	subs	r1, r1, r0
   12868:	d106      	bne.n	12878 <ticker_job_list_insert+0x78>
   1286a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   1286e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   12872:	45e2      	cmp	sl, ip
   12874:	f200 8086 	bhi.w	12984 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   12878:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1287c:	2bff      	cmp	r3, #255	; 0xff
   1287e:	4691      	mov	r9, r2
   12880:	d072      	beq.n	12968 <ticker_job_list_insert+0x168>
   12882:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   12884:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   12888:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   1288c:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   1288e:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   12892:	4288      	cmp	r0, r1
   12894:	d9e7      	bls.n	12866 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   12896:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   1289a:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1289e:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   128a2:	d166      	bne.n	12972 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   128a4:	9b01      	ldr	r3, [sp, #4]
   128a6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   128aa:	2aff      	cmp	r2, #255	; 0xff
   128ac:	d008      	beq.n	128c0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   128ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   128b2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   128b6:	f8de 3008 	ldr.w	r3, [lr, #8]
   128ba:	1a5b      	subs	r3, r3, r1
   128bc:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   128c0:	78a3      	ldrb	r3, [r4, #2]
   128c2:	3301      	adds	r3, #1
   128c4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   128c6:	2d00      	cmp	r5, #0
   128c8:	d0b1      	beq.n	1282e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   128ca:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   128ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   128d0:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   128d2:	2200      	movs	r2, #0
   128d4:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   128d6:	b113      	cbz	r3, 128de <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   128d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   128da:	4610      	mov	r0, r2
   128dc:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   128de:	6863      	ldr	r3, [r4, #4]
   128e0:	2b00      	cmp	r3, #0
   128e2:	d1a4      	bne.n	1282e <ticker_job_list_insert+0x2e>
					ticker->op_context =
   128e4:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   128e8:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   128ea:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   128ee:	d1a0      	bne.n	12832 <ticker_job_list_insert+0x32>
   128f0:	9b03      	ldr	r3, [sp, #12]
   128f2:	7898      	ldrb	r0, [r3, #2]
   128f4:	42b0      	cmp	r0, r6
   128f6:	d02f      	beq.n	12958 <ticker_job_list_insert+0x158>
   128f8:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   128fc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   12900:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   12904:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   12908:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   1290c:	3601      	adds	r6, #1
   1290e:	b2f6      	uxtb	r6, r6
					first = 0U;
   12910:	42b1      	cmp	r1, r6
   12912:	bf08      	it	eq
   12914:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   12916:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   12918:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1291c:	d11a      	bne.n	12954 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   1291e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   12922:	9902      	ldr	r1, [sp, #8]
   12924:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   12928:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   1292c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   12930:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   12932:	7863      	ldrb	r3, [r4, #1]
   12934:	1a5b      	subs	r3, r3, r1
   12936:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1293a:	d025      	beq.n	12988 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1293c:	f04f 0300 	mov.w	r3, #0
   12940:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   12944:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   12946:	2001      	movs	r0, #1
	user_op->status = status;
   12948:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1294a:	b10b      	cbz	r3, 12950 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1294c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1294e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   12950:	f89b 0002 	ldrb.w	r0, [fp, #2]
   12954:	42b0      	cmp	r0, r6
   12956:	d1d1      	bne.n	128fc <ticker_job_list_insert+0xfc>
	while (count_user--) {
   12958:	9a03      	ldr	r2, [sp, #12]
   1295a:	9905      	ldr	r1, [sp, #20]
   1295c:	4291      	cmp	r1, r2
   1295e:	f1a2 0308 	sub.w	r3, r2, #8
   12962:	d04e      	beq.n	12a02 <ticker_job_list_insert+0x202>
   12964:	9303      	str	r3, [sp, #12]
   12966:	e75e      	b.n	12826 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   12968:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1296c:	f88b 3000 	strb.w	r3, [fp]
   12970:	461a      	mov	r2, r3
		node[previous].next = id;
   12972:	fa0f f989 	sxth.w	r9, r9
   12976:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1297a:	ea4f 1909 	mov.w	r9, r9, lsl #4
   1297e:	f80e 8009 	strb.w	r8, [lr, r9]
   12982:	e792      	b.n	128aa <ticker_job_list_insert+0xaa>
   12984:	4601      	mov	r1, r0
   12986:	e786      	b.n	12896 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   12988:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1298a:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   1298c:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   12990:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   12992:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   12996:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   1299a:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   1299c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   129a0:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   129a4:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   129a8:	d024      	beq.n	129f4 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   129aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   129ae:	1ad3      	subs	r3, r2, r3
   129b0:	fab3 f383 	clz	r3, r3
   129b4:	095b      	lsrs	r3, r3, #5
   129b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   129ba:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   129be:	429a      	cmp	r2, r3
   129c0:	bf88      	it	hi
   129c2:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   129c4:	69ab      	ldr	r3, [r5, #24]
   129c6:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   129c8:	69eb      	ldr	r3, [r5, #28]
   129ca:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   129cc:	6a2b      	ldr	r3, [r5, #32]
   129ce:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   129d0:	68ab      	ldr	r3, [r5, #8]
   129d2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   129d4:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   129d6:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   129d8:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   129da:	686a      	ldr	r2, [r5, #4]
   129dc:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   129de:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   129e0:	f7ff feea 	bl	127b8 <ticks_to_expire_prep>
	ticker->force = 1U;
   129e4:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   129e8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   129ec:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   129f0:	70e3      	strb	r3, [r4, #3]
}
   129f2:	e729      	b.n	12848 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   129f4:	461a      	mov	r2, r3
   129f6:	e7e5      	b.n	129c4 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   129f8:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   129fc:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   12a00:	e75e      	b.n	128c0 <ticker_job_list_insert+0xc0>
}
   12a02:	b007      	add	sp, #28
   12a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a08 <ticker_worker>:
{
   12a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   12a0c:	7f82      	ldrb	r2, [r0, #30]
{
   12a0e:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   12a10:	2301      	movs	r3, #1
	if (instance->job_guard) {
   12a12:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   12a14:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   12a16:	2a00      	cmp	r2, #0
   12a18:	d15b      	bne.n	12ad2 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   12a1a:	7f43      	ldrb	r3, [r0, #29]
   12a1c:	2bff      	cmp	r3, #255	; 0xff
   12a1e:	4681      	mov	r9, r0
   12a20:	d056      	beq.n	12ad0 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   12a22:	f00b fcab 	bl	1e37c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12a26:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   12a2a:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   12a2e:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12a32:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   12a34:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12a36:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   12a3a:	f000 813c 	beq.w	12cb6 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   12a3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   12a42:	42bb      	cmp	r3, r7
   12a44:	bf94      	ite	ls
   12a46:	2300      	movls	r3, #0
   12a48:	2301      	movhi	r3, #1
   12a4a:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   12a4c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   12a50:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   12a54:	f000 8145 	beq.w	12ce2 <ticker_worker+0x2da>
	ticks_expired = 0U;
   12a58:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   12a5c:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   12a60:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   12a64:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   12a68:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   12a6c:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   12a6e:	42bb      	cmp	r3, r7
   12a70:	d837      	bhi.n	12ae2 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   12a72:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   12a74:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   12a78:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   12a7a:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   12a7c:	7863      	ldrb	r3, [r4, #1]
   12a7e:	1a5b      	subs	r3, r3, r1
   12a80:	b2db      	uxtb	r3, r3
   12a82:	2b01      	cmp	r3, #1
   12a84:	d12a      	bne.n	12adc <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   12a86:	69a6      	ldr	r6, [r4, #24]
   12a88:	2e00      	cmp	r6, #0
   12a8a:	d054      	beq.n	12b36 <ticker_worker+0x12e>
   12a8c:	9b03      	ldr	r3, [sp, #12]
   12a8e:	2b00      	cmp	r3, #0
   12a90:	d04c      	beq.n	12b2c <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   12a92:	8be3      	ldrh	r3, [r4, #30]
   12a94:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   12a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   12a98:	b13b      	cbz	r3, 12aaa <ticker_worker+0xa2>
   12a9a:	681a      	ldr	r2, [r3, #0]
   12a9c:	b11a      	cbz	r2, 12aa6 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   12a9e:	7a1a      	ldrb	r2, [r3, #8]
   12aa0:	2a00      	cmp	r2, #0
   12aa2:	f000 80ef 	beq.w	12c84 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   12aa6:	2200      	movs	r2, #0
   12aa8:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   12aaa:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   12aac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   12ab0:	3201      	adds	r2, #1
   12ab2:	b292      	uxth	r2, r2
   12ab4:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   12ab6:	b178      	cbz	r0, 12ad8 <ticker_worker+0xd0>
   12ab8:	8ba0      	ldrh	r0, [r4, #28]
   12aba:	4290      	cmp	r0, r2
   12abc:	d20c      	bcs.n	12ad8 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   12abe:	2b00      	cmp	r3, #0
   12ac0:	f000 80fc 	beq.w	12cbc <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   12ac4:	7a1a      	ldrb	r2, [r3, #8]
   12ac6:	2a01      	cmp	r2, #1
   12ac8:	d006      	beq.n	12ad8 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   12aca:	f04f 0c01 	mov.w	ip, #1
   12ace:	e036      	b.n	12b3e <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   12ad0:	77c2      	strb	r2, [r0, #31]
}
   12ad2:	b00f      	add	sp, #60	; 0x3c
   12ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   12ad8:	3901      	subs	r1, #1
   12ada:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   12adc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12ae0:	d1be      	bne.n	12a60 <ticker_worker+0x58>
   12ae2:	f8dd 9010 	ldr.w	r9, [sp, #16]
   12ae6:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   12ae8:	f899 300b 	ldrb.w	r3, [r9, #11]
   12aec:	f899 200a 	ldrb.w	r2, [r9, #10]
   12af0:	429a      	cmp	r2, r3
   12af2:	d10a      	bne.n	12b0a <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   12af4:	3201      	adds	r2, #1
   12af6:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   12af8:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   12afa:	bf1c      	itt	ne
   12afc:	4613      	movne	r3, r2
   12afe:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   12b00:	9a06      	ldr	r2, [sp, #24]
   12b02:	f889 200b 	strb.w	r2, [r9, #11]
   12b06:	bf08      	it	eq
   12b08:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   12b0a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   12b0e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   12b12:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   12b14:	2200      	movs	r2, #0
   12b16:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   12b1a:	464b      	mov	r3, r9
   12b1c:	2201      	movs	r2, #1
   12b1e:	2104      	movs	r1, #4
   12b20:	2003      	movs	r0, #3
   12b22:	46a4      	mov	ip, r4
}
   12b24:	b00f      	add	sp, #60	; 0x3c
   12b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   12b2a:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   12b2c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   12b30:	9307      	str	r3, [sp, #28]
   12b32:	3380      	adds	r3, #128	; 0x80
   12b34:	d141      	bne.n	12bba <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   12b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b38:	b1f3      	cbz	r3, 12b78 <ticker_worker+0x170>
   12b3a:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   12b3e:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   12b40:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   12b42:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   12b44:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   12b46:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   12b48:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   12b4a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   12b4c:	2d00      	cmp	r5, #0
   12b4e:	d0c5      	beq.n	12adc <ticker_worker+0xd4>
					   ticks_expired -
   12b50:	9b04      	ldr	r3, [sp, #16]
   12b52:	6960      	ldr	r0, [r4, #20]
   12b54:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   12b56:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12b58:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   12b5a:	ebaa 0000 	sub.w	r0, sl, r0
   12b5e:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   12b60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   12b64:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   12b66:	f1bc 0f00 	cmp.w	ip, #0
   12b6a:	d016      	beq.n	12b9a <ticker_worker+0x192>
   12b6c:	e9cd 3600 	strd	r3, r6, [sp]
   12b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12b74:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   12b76:	e7b1      	b.n	12adc <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   12b78:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   12b7a:	3901      	subs	r1, #1
   12b7c:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   12b7e:	2d00      	cmp	r5, #0
   12b80:	d0ac      	beq.n	12adc <ticker_worker+0xd4>
			ticks_drift = 0U;
   12b82:	4619      	mov	r1, r3
					   ticks_expired -
   12b84:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   12b86:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12b88:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   12b8a:	ebaa 0003 	sub.w	r0, sl, r3
   12b8e:	9b04      	ldr	r3, [sp, #16]
   12b90:	695b      	ldr	r3, [r3, #20]
   12b92:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   12b94:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   12b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   12b9a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   12b9e:	e9cd 3600 	strd	r3, r6, [sp]
   12ba2:	4663      	mov	r3, ip
   12ba4:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   12ba6:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   12ba8:	2b00      	cmp	r3, #0
   12baa:	9b03      	ldr	r3, [sp, #12]
   12bac:	bf18      	it	ne
   12bae:	2301      	movne	r3, #1
   12bb0:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   12bb2:	2300      	movs	r3, #0
   12bb4:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   12bb6:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   12bb8:	e790      	b.n	12adc <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   12bba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12bbe:	d0ba      	beq.n	12b36 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   12bc0:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   12bc2:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   12bc4:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   12bc6:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   12bc8:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   12bca:	bf28      	it	cs
   12bcc:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   12bce:	fb02 5005 	mla	r0, r2, r5, r5
   12bd2:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   12bd4:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   12bd6:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   12bda:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   12bdc:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   12be0:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   12be2:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   12be4:	46a0      	mov	r8, r4
   12be6:	f04f 0c00 	mov.w	ip, #0
   12bea:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   12bec:	b21b      	sxth	r3, r3
   12bee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12bf2:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   12bf6:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   12bf8:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12bfc:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   12bfe:	4566      	cmp	r6, ip
   12c00:	d339      	bcc.n	12c76 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   12c02:	6991      	ldr	r1, [r2, #24]
   12c04:	b399      	cbz	r1, 12c6e <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   12c06:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   12c08:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   12c0a:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   12c0e:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   12c12:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   12c14:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   12c16:	bf28      	it	cs
   12c18:	1a0d      	subcs	r5, r1, r0
					  0U :
   12c1a:	f1b9 0f00 	cmp.w	r9, #0
   12c1e:	d03e      	beq.n	12c9e <ticker_worker+0x296>
   12c20:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   12c24:	b3bc      	cbz	r4, 12c96 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   12c26:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   12c2a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   12c2e:	45f1      	cmp	r9, lr
   12c30:	bf8c      	ite	hi
   12c32:	f04f 0e01 	movhi.w	lr, #1
   12c36:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   12c3a:	bf34      	ite	cc
   12c3c:	f04f 0901 	movcc.w	r9, #1
   12c40:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   12c44:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   12c46:	f892 a003 	ldrb.w	sl, [r2, #3]
   12c4a:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   12c4e:	d30e      	bcc.n	12c6e <ticker_worker+0x266>
   12c50:	4592      	cmp	sl, r2
   12c52:	d829      	bhi.n	12ca8 <ticker_worker+0x2a0>
			    (next_force ||
   12c54:	f117 0f80 	cmn.w	r7, #128	; 0x80
   12c58:	d026      	beq.n	12ca8 <ticker_worker+0x2a0>
			     next_is_critical ||
   12c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   12c5c:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   12c5e:	4295      	cmp	r5, r2
   12c60:	dd02      	ble.n	12c68 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   12c62:	f1be 0f00 	cmp.w	lr, #0
   12c66:	d01f      	beq.n	12ca8 <ticker_worker+0x2a0>
   12c68:	9a07      	ldr	r2, [sp, #28]
   12c6a:	42ba      	cmp	r2, r7
   12c6c:	d019      	beq.n	12ca2 <ticker_worker+0x29a>
			id_head = ticker_next->next;
   12c6e:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   12c72:	2bff      	cmp	r3, #255	; 0xff
   12c74:	d1ba      	bne.n	12bec <ticker_worker+0x1e4>
   12c76:	4644      	mov	r4, r8
   12c78:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   12c7c:	990a      	ldr	r1, [sp, #40]	; 0x28
   12c7e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   12c82:	e758      	b.n	12b36 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   12c84:	8ba2      	ldrh	r2, [r4, #28]
   12c86:	9805      	ldr	r0, [sp, #20]
   12c88:	4282      	cmp	r2, r0
   12c8a:	f63f af0c 	bhi.w	12aa6 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   12c8e:	f04f 0201 	mov.w	r2, #1
   12c92:	721a      	strb	r2, [r3, #8]
   12c94:	e709      	b.n	12aaa <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   12c96:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   12c9a:	46a1      	mov	r9, r4
   12c9c:	e7d2      	b.n	12c44 <ticker_worker+0x23c>
					  0U :
   12c9e:	46ce      	mov	lr, r9
   12ca0:	e7c0      	b.n	12c24 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   12ca2:	f1b9 0f00 	cmp.w	r9, #0
   12ca6:	d0e2      	beq.n	12c6e <ticker_worker+0x266>
   12ca8:	4644      	mov	r4, r8
   12caa:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   12cae:	990a      	ldr	r1, [sp, #40]	; 0x28
   12cb0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   12cb4:	e6ef      	b.n	12a96 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   12cb6:	9b06      	ldr	r3, [sp, #24]
   12cb8:	9303      	str	r3, [sp, #12]
   12cba:	e6c7      	b.n	12a4c <ticker_worker+0x44>
		if (ticker->timeout_func) {
   12cbc:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   12cbe:	3901      	subs	r1, #1
   12cc0:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   12cc2:	2d00      	cmp	r5, #0
   12cc4:	f43f af0a 	beq.w	12adc <ticker_worker+0xd4>
			ticks_drift = 0U;
   12cc8:	4619      	mov	r1, r3
					   ticks_expired -
   12cca:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   12ccc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12cce:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   12cd0:	ebaa 0003 	sub.w	r0, sl, r3
   12cd4:	9b04      	ldr	r3, [sp, #16]
   12cd6:	695b      	ldr	r3, [r3, #20]
   12cd8:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   12cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   12cde:	78e3      	ldrb	r3, [r4, #3]
   12ce0:	e744      	b.n	12b6c <ticker_worker+0x164>
	ticks_expired = 0U;
   12ce2:	2300      	movs	r3, #0
   12ce4:	4619      	mov	r1, r3
   12ce6:	e6ff      	b.n	12ae8 <ticker_worker+0xe0>

00012ce8 <ticker_job>:
	if (instance->worker_trigger) {
   12ce8:	7fc3      	ldrb	r3, [r0, #31]
   12cea:	2b00      	cmp	r3, #0
   12cec:	f040 8431 	bne.w	13552 <ticker_job+0x86a>
{
   12cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   12cf4:	7f82      	ldrb	r2, [r0, #30]
{
   12cf6:	b08d      	sub	sp, #52	; 0x34
   12cf8:	4683      	mov	fp, r0
	if (instance->job_guard) {
   12cfa:	2a00      	cmp	r2, #0
   12cfc:	f040 808c 	bne.w	12e18 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   12d00:	7a83      	ldrb	r3, [r0, #10]
   12d02:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   12d04:	2001      	movs	r0, #1
   12d06:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   12d0a:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   12d0c:	f8db 0014 	ldr.w	r0, [fp, #20]
   12d10:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   12d12:	f000 8440 	beq.w	13596 <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   12d16:	3301      	adds	r3, #1
   12d18:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   12d1a:	2b02      	cmp	r3, #2
		idx = 0U;
   12d1c:	bf08      	it	eq
   12d1e:	4613      	moveq	r3, r2
		ticks_elapsed =
   12d20:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   12d24:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   12d28:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   12d2c:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   12d2e:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   12d30:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   12d32:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   12d34:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   12d36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   12d3a:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   12d3e:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   12d42:	f8db 3000 	ldr.w	r3, [fp]
   12d46:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   12d48:	f8db 3004 	ldr.w	r3, [fp, #4]
   12d4c:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   12d4e:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   12d50:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   12d52:	b2db      	uxtb	r3, r3
   12d54:	2a00      	cmp	r2, #0
   12d56:	f000 81d5 	beq.w	13104 <ticker_job+0x41c>
		flag_elapsed = 1U;
   12d5a:	2201      	movs	r2, #1
   12d5c:	920b      	str	r2, [sp, #44]	; 0x2c
   12d5e:	9a05      	ldr	r2, [sp, #20]
   12d60:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   12d64:	2300      	movs	r3, #0
   12d66:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   12d68:	23ff      	movs	r3, #255	; 0xff
   12d6a:	9301      	str	r3, [sp, #4]
   12d6c:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   12d6e:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   12d72:	f89a c003 	ldrb.w	ip, [sl, #3]
   12d76:	f89a 7002 	ldrb.w	r7, [sl, #2]
   12d7a:	4567      	cmp	r7, ip
   12d7c:	d044      	beq.n	12e08 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   12d7e:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   12d82:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   12d84:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   12d86:	b2db      	uxtb	r3, r3
				middle = 0U;
   12d88:	429a      	cmp	r2, r3
   12d8a:	bf08      	it	eq
   12d8c:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   12d8e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   12d92:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   12d96:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   12d9a:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   12d9e:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   12da0:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   12da4:	d942      	bls.n	12e2c <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   12da6:	2808      	cmp	r0, #8
   12da8:	d842      	bhi.n	12e30 <ticker_job+0x148>
			ticker = &node[user_op->id];
   12daa:	7861      	ldrb	r1, [r4, #1]
   12dac:	9a00      	ldr	r2, [sp, #0]
   12dae:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   12db2:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   12db6:	786a      	ldrb	r2, [r5, #1]
   12db8:	f895 e002 	ldrb.w	lr, [r5, #2]
   12dbc:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   12dc0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   12dc4:	d034      	beq.n	12e30 <ticker_job+0x148>
			    (state == 0U) ||
   12dc6:	2805      	cmp	r0, #5
   12dc8:	d041      	beq.n	12e4e <ticker_job+0x166>
			if (state == 1U) {
   12dca:	2a01      	cmp	r2, #1
   12dcc:	f040 8118 	bne.w	13000 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   12dd0:	2806      	cmp	r0, #6
   12dd2:	d006      	beq.n	12de2 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   12dd4:	4658      	mov	r0, fp
   12dd6:	f7ff fcb5 	bl	12744 <ticker_dequeue>
			ticker->req = ticker->ack;
   12dda:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   12ddc:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   12dde:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   12de0:	7861      	ldrb	r1, [r4, #1]
   12de2:	f89b 301c 	ldrb.w	r3, [fp, #28]
   12de6:	428b      	cmp	r3, r1
   12de8:	f000 80d9 	beq.w	12f9e <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   12dec:	2000      	movs	r0, #0
   12dee:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   12df2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   12df4:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   12df6:	b10b      	cbz	r3, 12dfc <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   12df8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12dfa:	4798      	blx	r3
		while (user->middle != user->last) {
   12dfc:	f89a c003 	ldrb.w	ip, [sl, #3]
   12e00:	f89a 7002 	ldrb.w	r7, [sl, #2]
   12e04:	4567      	cmp	r7, ip
   12e06:	d1ba      	bne.n	12d7e <ticker_job+0x96>
	while (count_user--) {
   12e08:	9a05      	ldr	r2, [sp, #20]
   12e0a:	4552      	cmp	r2, sl
   12e0c:	f1aa 0308 	sub.w	r3, sl, #8
   12e10:	f000 8107 	beq.w	13022 <ticker_job+0x33a>
   12e14:	469a      	mov	sl, r3
   12e16:	e7aa      	b.n	12d6e <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   12e18:	6a44      	ldr	r4, [r0, #36]	; 0x24
   12e1a:	2104      	movs	r1, #4
   12e1c:	4603      	mov	r3, r0
   12e1e:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   12e20:	2004      	movs	r0, #4
   12e22:	46a4      	mov	ip, r4
}
   12e24:	b00d      	add	sp, #52	; 0x34
   12e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   12e2a:	4760      	bx	ip
   12e2c:	461f      	mov	r7, r3
   12e2e:	e7a4      	b.n	12d7a <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   12e30:	2200      	movs	r2, #0
   12e32:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   12e36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   12e38:	2001      	movs	r0, #1
   12e3a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   12e3c:	2a00      	cmp	r2, #0
   12e3e:	d0f5      	beq.n	12e2c <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   12e40:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12e42:	4790      	blx	r2
		while (user->middle != user->last) {
   12e44:	f89a c003 	ldrb.w	ip, [sl, #3]
   12e48:	f89a 7002 	ldrb.w	r7, [sl, #2]
   12e4c:	e795      	b.n	12d7a <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   12e4e:	6860      	ldr	r0, [r4, #4]
   12e50:	b948      	cbnz	r0, 12e66 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   12e52:	68a0      	ldr	r0, [r4, #8]
   12e54:	b938      	cbnz	r0, 12e66 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   12e56:	68e0      	ldr	r0, [r4, #12]
   12e58:	b928      	cbnz	r0, 12e66 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   12e5a:	6920      	ldr	r0, [r4, #16]
   12e5c:	b918      	cbnz	r0, 12e66 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   12e5e:	6960      	ldr	r0, [r4, #20]
   12e60:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   12e64:	d0e4      	beq.n	12e30 <ticker_job+0x148>
			if (state == 1U) {
   12e66:	2a01      	cmp	r2, #1
   12e68:	f040 80ca 	bne.w	13000 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   12e6c:	4658      	mov	r0, fp
   12e6e:	f7ff fc69 	bl	12744 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   12e72:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   12e76:	60a8      	str	r0, [r5, #8]
   12e78:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   12e7a:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   12e7c:	f00b fa7e 	bl	1e37c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12e80:	9b02      	ldr	r3, [sp, #8]
   12e82:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   12e84:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12e86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   12e8a:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   12e8c:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   12e8e:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   12e90:	f240 80af 	bls.w	12ff2 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   12e94:	696b      	ldr	r3, [r5, #20]
   12e96:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   12e98:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   12e9a:	f8d5 c004 	ldr.w	ip, [r5, #4]
   12e9e:	f1bc 0f00 	cmp.w	ip, #0
   12ea2:	d051      	beq.n	12f48 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   12ea4:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d04e      	beq.n	12f48 <ticker_job+0x260>
		user_op->params.update.lazy--;
   12eaa:	3b01      	subs	r3, #1
   12eac:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   12eae:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12eb0:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   12eb2:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   12eb4:	d223      	bcs.n	12efe <ticker_job+0x216>
   12eb6:	f10c 0e01 	add.w	lr, ip, #1
   12eba:	f8cd 8018 	str.w	r8, [sp, #24]
   12ebe:	940a      	str	r4, [sp, #40]	; 0x28
   12ec0:	e018      	b.n	12ef4 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   12ec2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   12ec4:	f8df 8228 	ldr.w	r8, [pc, #552]	; 130f0 <ticker_job+0x408>
   12ec8:	4c8a      	ldr	r4, [pc, #552]	; (130f4 <ticker_job+0x40c>)
   12eca:	4488      	add	r8, r1
   12ecc:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   12ece:	bf84      	itt	hi
   12ed0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   12ed4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   12ed8:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   12eda:	6a2c      	ldr	r4, [r5, #32]
   12edc:	bf94      	ite	ls
   12ede:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   12ee0:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   12ee4:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   12ee6:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   12ee8:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   12eea:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   12eec:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   12eee:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   12ef0:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   12ef2:	d201      	bcs.n	12ef8 <ticker_job+0x210>
   12ef4:	429f      	cmp	r7, r3
   12ef6:	d3e4      	bcc.n	12ec2 <ticker_job+0x1da>
   12ef8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   12efc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12efe:	42bb      	cmp	r3, r7
   12f00:	d221      	bcs.n	12f46 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   12f02:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   12f06:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   12f0a:	9006      	str	r0, [sp, #24]
   12f0c:	940a      	str	r4, [sp, #40]	; 0x28
   12f0e:	e005      	b.n	12f1c <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12f10:	3301      	adds	r3, #1
   12f12:	b29b      	uxth	r3, r3
   12f14:	4660      	mov	r0, ip
   12f16:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   12f18:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12f1a:	d011      	beq.n	12f40 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   12f1c:	4874      	ldr	r0, [pc, #464]	; (130f0 <ticker_job+0x408>)
   12f1e:	4c75      	ldr	r4, [pc, #468]	; (130f4 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   12f20:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   12f22:	1808      	adds	r0, r1, r0
   12f24:	42a0      	cmp	r0, r4
   12f26:	d8f3      	bhi.n	12f10 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12f28:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   12f2a:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12f2c:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12f30:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12f32:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12f36:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12f38:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   12f3c:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   12f3e:	d1ed      	bne.n	12f1c <ticker_job+0x234>
   12f40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12f42:	6269      	str	r1, [r5, #36]	; 0x24
   12f44:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   12f46:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   12f48:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   12f4a:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   12f4c:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   12f4e:	440a      	add	r2, r1
   12f50:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   12f52:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   12f54:	4403      	add	r3, r0
   12f56:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   12f58:	b11a      	cbz	r2, 12f62 <ticker_job+0x27a>
   12f5a:	6813      	ldr	r3, [r2, #0]
   12f5c:	b10b      	cbz	r3, 12f62 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   12f5e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   12f60:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   12f62:	464a      	mov	r2, r9
   12f64:	9902      	ldr	r1, [sp, #8]
   12f66:	4628      	mov	r0, r5
   12f68:	f7ff fc26 	bl	127b8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   12f6c:	68e2      	ldr	r2, [r4, #12]
   12f6e:	69ab      	ldr	r3, [r5, #24]
   12f70:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   12f72:	6922      	ldr	r2, [r4, #16]
   12f74:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   12f76:	bf8c      	ite	hi
   12f78:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   12f7a:	2300      	movls	r3, #0
   12f7c:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   12f7e:	7da3      	ldrb	r3, [r4, #22]
   12f80:	b103      	cbz	r3, 12f84 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   12f82:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   12f84:	7de3      	ldrb	r3, [r4, #23]
   12f86:	b113      	cbz	r3, 12f8e <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   12f88:	3b01      	subs	r3, #1
   12f8a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   12f8e:	9b01      	ldr	r3, [sp, #4]
   12f90:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   12f92:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   12f94:	7862      	ldrb	r2, [r4, #1]
   12f96:	9201      	str	r2, [sp, #4]
		ticker->req++;
   12f98:	3301      	adds	r3, #1
   12f9a:	706b      	strb	r3, [r5, #1]
   12f9c:	e726      	b.n	12dec <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   12f9e:	23ff      	movs	r3, #255	; 0xff
   12fa0:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   12fa4:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   12fa8:	2b06      	cmp	r3, #6
   12faa:	d013      	beq.n	12fd4 <ticker_job+0x2ec>
   12fac:	2b08      	cmp	r3, #8
   12fae:	d011      	beq.n	12fd4 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   12fb0:	f00b f9e4 	bl	1e37c <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   12fb4:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   12fb8:	1a83      	subs	r3, r0, r2
   12fba:	021d      	lsls	r5, r3, #8
   12fbc:	d410      	bmi.n	12fe0 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   12fbe:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12fc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   12fc4:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   12fc6:	f8db 2018 	ldr.w	r2, [fp, #24]
   12fca:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   12fcc:	bf88      	it	hi
   12fce:	f8cb 3018 	strhi.w	r3, [fp, #24]
   12fd2:	e70b      	b.n	12dec <ticker_job+0x104>
				ticks_at_yield =
   12fd4:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   12fd6:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   12fda:	1a83      	subs	r3, r0, r2
   12fdc:	021d      	lsls	r5, r3, #8
   12fde:	d5ee      	bpl.n	12fbe <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12fe0:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   12fe2:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12fe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   12fe8:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   12fea:	bf34      	ite	cc
   12fec:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   12fee:	2300      	movcs	r3, #0
   12ff0:	e7e9      	b.n	12fc6 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   12ff2:	696b      	ldr	r3, [r5, #20]
   12ff4:	1bda      	subs	r2, r3, r7
   12ff6:	1853      	adds	r3, r2, r1
   12ff8:	9304      	str	r3, [sp, #16]
   12ffa:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   12ffc:	2200      	movs	r2, #0
   12ffe:	e74c      	b.n	12e9a <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   13000:	2104      	movs	r1, #4
   13002:	465b      	mov	r3, fp
   13004:	2201      	movs	r2, #1
   13006:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   1300a:	4608      	mov	r0, r1
   1300c:	47a0      	blx	r4
	while (count_user--) {
   1300e:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   13010:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   13014:	2301      	movs	r3, #1
	while (count_user--) {
   13016:	4552      	cmp	r2, sl
				pending = 1U;
   13018:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   1301a:	f1aa 0308 	sub.w	r3, sl, #8
   1301e:	f47f aef9 	bne.w	12e14 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   13022:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   13026:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13028:	1a9b      	subs	r3, r3, r2
   1302a:	bf18      	it	ne
   1302c:	2301      	movne	r3, #1
   1302e:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   13030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13032:	2b00      	cmp	r3, #0
   13034:	d16a      	bne.n	1310c <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   13036:	9901      	ldr	r1, [sp, #4]
   13038:	4658      	mov	r0, fp
   1303a:	f7ff fbe1 	bl	12800 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1303e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   13042:	9300      	str	r3, [sp, #0]
   13044:	9b00      	ldr	r3, [sp, #0]
   13046:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13048:	4293      	cmp	r3, r2
   1304a:	f000 826c 	beq.w	13526 <ticker_job+0x83e>
	if (!pending) {
   1304e:	9b08      	ldr	r3, [sp, #32]
   13050:	2b00      	cmp	r3, #0
   13052:	f000 81e6 	beq.w	13422 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   13056:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1305a:	9300      	str	r3, [sp, #0]
   1305c:	9b00      	ldr	r3, [sp, #0]
   1305e:	2bff      	cmp	r3, #255	; 0xff
   13060:	f000 82c4 	beq.w	135ec <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   13064:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13066:	2bff      	cmp	r3, #255	; 0xff
   13068:	f000 82cb 	beq.w	13602 <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   1306c:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   1306e:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   13072:	f8df 9084 	ldr.w	r9, [pc, #132]	; 130f8 <ticker_job+0x410>
   13076:	f8df 8084 	ldr.w	r8, [pc, #132]	; 130fc <ticker_job+0x414>
   1307a:	4f21      	ldr	r7, [pc, #132]	; (13100 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   1307c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   13080:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   13084:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   13086:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   13088:	f00b f978 	bl	1e37c <cntr_cnt_get>
		cc = instance->ticks_current;
   1308c:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13090:	1b03      	subs	r3, r0, r4
   13092:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   13096:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   13098:	42b3      	cmp	r3, r6
   1309a:	bf2c      	ite	cs
   1309c:	18e4      	addcs	r4, r4, r3
   1309e:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   130a0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   130a4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   130a8:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   130aa:	4620      	mov	r0, r4
   130ac:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   130ae:	f00b f965 	bl	1e37c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   130b2:	eba0 030a 	sub.w	r3, r0, sl
   130b6:	eba4 040a 	sub.w	r4, r4, sl
   130ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   130be:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   130c0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   130c4:	42a3      	cmp	r3, r4
		i--;
   130c6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   130ca:	f240 8233 	bls.w	13534 <ticker_job+0x84c>
		LL_ASSERT(i);
   130ce:	2d00      	cmp	r5, #0
   130d0:	d1da      	bne.n	13088 <ticker_job+0x3a0>
   130d2:	f640 133e 	movw	r3, #2366	; 0x93e
   130d6:	464a      	mov	r2, r9
   130d8:	4641      	mov	r1, r8
   130da:	4638      	mov	r0, r7
   130dc:	f012 fd12 	bl	25b04 <printk>
   130e0:	4040      	eors	r0, r0
   130e2:	f380 8811 	msr	BASEPRI, r0
   130e6:	f04f 0003 	mov.w	r0, #3
   130ea:	df02      	svc	2
   130ec:	e7cc      	b.n	13088 <ticker_job+0x3a0>
   130ee:	bf00      	nop
   130f0:	ff172b5a 	.word	0xff172b5a
   130f4:	7f172b59 	.word	0x7f172b59
   130f8:	0002c89c 	.word	0x0002c89c
   130fc:	0002c9ac 	.word	0x0002c9ac
   13100:	0002c8dc 	.word	0x0002c8dc
	pending = 0U;
   13104:	9b06      	ldr	r3, [sp, #24]
   13106:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   13108:	23ff      	movs	r3, #255	; 0xff
   1310a:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   1310c:	f00b f936 	bl	1e37c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13110:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   13112:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13116:	1ac3      	subs	r3, r0, r3
   13118:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   1311c:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   1311e:	f8db 3000 	ldr.w	r3, [fp]
   13122:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   13124:	d050      	beq.n	131c8 <ticker_job+0x4e0>
	ticks_expired = 0U;
   13126:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   13128:	f8df 8290 	ldr.w	r8, [pc, #656]	; 133bc <ticker_job+0x6d4>
   1312c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 133c0 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   13130:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   13132:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   13134:	9a00      	ldr	r2, [sp, #0]
   13136:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1313a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   1313e:	011b      	lsls	r3, r3, #4
   13140:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   13142:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   13144:	429f      	cmp	r7, r3
   13146:	f0c0 8243 	bcc.w	135d0 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   1314a:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   1314c:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   13150:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   13154:	441a      	add	r2, r3
   13156:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   13158:	f8db 2018 	ldr.w	r2, [fp, #24]
   1315c:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   1315e:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   13162:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   13166:	bf25      	ittet	cs
   13168:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   1316c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   13170:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   13172:	2300      	movcs	r3, #0
   13174:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   13178:	78a2      	ldrb	r2, [r4, #2]
   1317a:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1317c:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1317e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   13180:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   13182:	1a9b      	subs	r3, r3, r2
   13184:	b2db      	uxtb	r3, r3
   13186:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   13188:	9b00      	ldr	r3, [sp, #0]
   1318a:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1318e:	b118      	cbz	r0, 13198 <ticker_job+0x4b0>
   13190:	9b05      	ldr	r3, [sp, #20]
   13192:	2b02      	cmp	r3, #2
   13194:	f000 8135 	beq.w	13402 <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   13198:	2300      	movs	r3, #0
   1319a:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1319c:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   131a0:	2d00      	cmp	r5, #0
   131a2:	f040 80da 	bne.w	1335a <ticker_job+0x672>
   131a6:	b119      	cbz	r1, 131b0 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   131a8:	7a09      	ldrb	r1, [r1, #8]
   131aa:	2901      	cmp	r1, #1
   131ac:	f000 8111 	beq.w	133d2 <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   131b0:	9b05      	ldr	r3, [sp, #20]
   131b2:	b123      	cbz	r3, 131be <ticker_job+0x4d6>
   131b4:	2b01      	cmp	r3, #1
   131b6:	d045      	beq.n	13244 <ticker_job+0x55c>
   131b8:	f1be 0f00 	cmp.w	lr, #0
   131bc:	d142      	bne.n	13244 <ticker_job+0x55c>
			ticker->req = ticker->ack;
   131be:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   131c0:	f89b 601d 	ldrb.w	r6, [fp, #29]
   131c4:	2eff      	cmp	r6, #255	; 0xff
   131c6:	d1b5      	bne.n	13134 <ticker_job+0x44c>
			flag_compare_update = 1U;
   131c8:	9b06      	ldr	r3, [sp, #24]
   131ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   131cc:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   131ce:	4296      	cmp	r6, r2
   131d0:	bf18      	it	ne
   131d2:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   131d4:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   131d6:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   131d8:	f7ff fb12 	bl	12800 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   131dc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   131e0:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   131e4:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   131e8:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   131ea:	9b00      	ldr	r3, [sp, #0]
   131ec:	2bff      	cmp	r3, #255	; 0xff
   131ee:	d00f      	beq.n	13210 <ticker_job+0x528>
   131f0:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   131f2:	b233      	sxth	r3, r6
   131f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   131f8:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   131fc:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   131fe:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   13200:	b117      	cbz	r7, 13208 <ticker_job+0x520>
   13202:	7a39      	ldrb	r1, [r7, #8]
   13204:	2901      	cmp	r1, #1
   13206:	d025      	beq.n	13254 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   13208:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   1320c:	2eff      	cmp	r6, #255	; 0xff
   1320e:	d1f0      	bne.n	131f2 <ticker_job+0x50a>
	return rescheduled;
   13210:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   13214:	2a00      	cmp	r2, #0
   13216:	f43f af15 	beq.w	13044 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1321a:	9b00      	ldr	r3, [sp, #0]
   1321c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1321e:	428b      	cmp	r3, r1
   13220:	f47f af15 	bne.w	1304e <ticker_job+0x366>
	if (!pending) {
   13224:	9b08      	ldr	r3, [sp, #32]
   13226:	2b00      	cmp	r3, #0
   13228:	f47f af18 	bne.w	1305c <ticker_job+0x374>
	users = &instance->users[0];
   1322c:	f8db 3004 	ldr.w	r3, [fp, #4]
   13230:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   13232:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   13236:	1e5f      	subs	r7, r3, #1
   13238:	b2ff      	uxtb	r7, r7
   1323a:	2b00      	cmp	r3, #0
   1323c:	f43f af0e 	beq.w	1305c <ticker_job+0x374>
			flag_compare_update = 1U;
   13240:	9206      	str	r2, [sp, #24]
   13242:	e0fa      	b.n	1343a <ticker_job+0x752>
			    ticker->fp_op_func) {
   13244:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   13246:	2b00      	cmp	r3, #0
   13248:	d0b9      	beq.n	131be <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1324a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1324c:	2001      	movs	r0, #1
   1324e:	4798      	blx	r3
			ticker->req = ticker->ack;
   13250:	78a2      	ldrb	r2, [r4, #2]
   13252:	e7b4      	b.n	131be <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   13254:	9b01      	ldr	r3, [sp, #4]
   13256:	7f1b      	ldrb	r3, [r3, #28]
   13258:	2bff      	cmp	r3, #255	; 0xff
   1325a:	d04b      	beq.n	132f4 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   1325c:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1325e:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   13260:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   13262:	4293      	cmp	r3, r2
   13264:	d946      	bls.n	132f4 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   13266:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1326a:	687a      	ldr	r2, [r7, #4]
   1326c:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   1326e:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   13272:	1ad3      	subs	r3, r2, r3
   13274:	9302      	str	r3, [sp, #8]
   13276:	683b      	ldr	r3, [r7, #0]
   13278:	429a      	cmp	r2, r3
   1327a:	f080 80bd 	bcs.w	133f8 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   1327e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   13282:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   13286:	f000 80b7 	beq.w	133f8 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   1328a:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   1328e:	45f0      	cmp	r8, lr
   13290:	f04f 0300 	mov.w	r3, #0
   13294:	d331      	bcc.n	132fa <ticker_job+0x612>
   13296:	46f1      	mov	r9, lr
   13298:	465a      	mov	r2, fp
   1329a:	461c      	mov	r4, r3
   1329c:	e01c      	b.n	132d8 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   1329e:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   132a0:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   132a2:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   132a4:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   132a6:	d909      	bls.n	132bc <ticker_job+0x5d4>
				window_end_ticks =
   132a8:	4543      	cmp	r3, r8
   132aa:	bf28      	it	cs
   132ac:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   132ae:	4599      	cmp	r9, r3
   132b0:	d204      	bcs.n	132bc <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   132b2:	ebb3 030e 	subs.w	r3, r3, lr
   132b6:	d001      	beq.n	132bc <ticker_job+0x5d4>
   132b8:	459c      	cmp	ip, r3
   132ba:	d91e      	bls.n	132fa <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   132bc:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   132be:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   132c2:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   132c6:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   132c8:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   132cc:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   132ce:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   132d2:	d012      	beq.n	132fa <ticker_job+0x612>
   132d4:	45c8      	cmp	r8, r9
   132d6:	d310      	bcc.n	132fa <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   132d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   132dc:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   132e0:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   132e2:	6a81      	ldr	r1, [r0, #40]	; 0x28
   132e4:	2900      	cmp	r1, #0
   132e6:	d0da      	beq.n	1329e <ticker_job+0x5b6>
   132e8:	7a09      	ldrb	r1, [r1, #8]
   132ea:	2901      	cmp	r1, #1
   132ec:	d1d7      	bne.n	1329e <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   132ee:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   132f2:	e7eb      	b.n	132cc <ticker_job+0x5e4>
		window_start_ticks = 0U;
   132f4:	f04f 0c00 	mov.w	ip, #0
   132f8:	e7b7      	b.n	1326a <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   132fa:	9a02      	ldr	r2, [sp, #8]
   132fc:	441a      	add	r2, r3
   132fe:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   13300:	465c      	mov	r4, fp
   13302:	60ab      	str	r3, [r5, #8]
   13304:	f04f 0eff 	mov.w	lr, #255	; 0xff
   13308:	e000      	b.n	1330c <ticker_job+0x624>
   1330a:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   1330c:	b221      	sxth	r1, r4
   1330e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   13312:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   13316:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   13318:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1331c:	4298      	cmp	r0, r3
   1331e:	f080 814d 	bcs.w	135bc <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   13322:	1a1b      	subs	r3, r3, r0
   13324:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   13326:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1332a:	2aff      	cmp	r2, #255	; 0xff
   1332c:	46a6      	mov	lr, r4
   1332e:	d1ec      	bne.n	1330a <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   13330:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   13332:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   13336:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1333a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   1333c:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   13340:	f81a 3001 	ldrb.w	r3, [sl, r1]
   13344:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   13346:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   1334a:	8beb      	ldrh	r3, [r5, #30]
   1334c:	3b01      	subs	r3, #1
   1334e:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   13350:	f04f 0302 	mov.w	r3, #2
   13354:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   13356:	2201      	movs	r2, #1
   13358:	e747      	b.n	131ea <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1335a:	b111      	cbz	r1, 13362 <ticker_job+0x67a>
   1335c:	7a0b      	ldrb	r3, [r1, #8]
   1335e:	2b01      	cmp	r3, #1
   13360:	d037      	beq.n	133d2 <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   13362:	f1be 0f00 	cmp.w	lr, #0
   13366:	d159      	bne.n	1341c <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   13368:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   1336c:	4672      	mov	r2, lr
				while (count--) {
   1336e:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   13370:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   13374:	2100      	movs	r1, #0
   13376:	9005      	str	r0, [sp, #20]
   13378:	e004      	b.n	13384 <ticker_job+0x69c>
   1337a:	4628      	mov	r0, r5
				while (count--) {
   1337c:	3a01      	subs	r2, #1
					ticks_to_expire +=
   1337e:	4401      	add	r1, r0
				while (count--) {
   13380:	1c50      	adds	r0, r2, #1
   13382:	d00f      	beq.n	133a4 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   13384:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   13386:	eb03 0008 	add.w	r0, r3, r8
   1338a:	4548      	cmp	r0, r9
   1338c:	d8f5      	bhi.n	1337a <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1338e:	9805      	ldr	r0, [sp, #20]
   13390:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   13394:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13396:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   1339a:	4401      	add	r1, r0
				while (count--) {
   1339c:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1339e:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   133a2:	d1ef      	bne.n	13384 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   133a4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   133a8:	6263      	str	r3, [r4, #36]	; 0x24
   133aa:	2a00      	cmp	r2, #0
   133ac:	f000 80d2 	beq.w	13554 <ticker_job+0x86c>
				lazy = 0U;
   133b0:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   133b2:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   133b4:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   133b6:	83e2      	strh	r2, [r4, #30]
   133b8:	e00d      	b.n	133d6 <ticker_job+0x6ee>
   133ba:	bf00      	nop
   133bc:	ff172b5a 	.word	0xff172b5a
   133c0:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   133c4:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   133c8:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   133cc:	2d00      	cmp	r5, #0
   133ce:	f43f aeeb 	beq.w	131a8 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   133d2:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   133d4:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   133d6:	9b07      	ldr	r3, [sp, #28]
   133d8:	9a02      	ldr	r2, [sp, #8]
   133da:	f8db 1014 	ldr.w	r1, [fp, #20]
   133de:	189a      	adds	r2, r3, r2
   133e0:	4620      	mov	r0, r4
   133e2:	f7ff f9e9 	bl	127b8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   133e6:	9a00      	ldr	r2, [sp, #0]
   133e8:	9904      	ldr	r1, [sp, #16]
   133ea:	9b01      	ldr	r3, [sp, #4]
   133ec:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   133ee:	7863      	ldrb	r3, [r4, #1]
   133f0:	9601      	str	r6, [sp, #4]
   133f2:	3301      	adds	r3, #1
   133f4:	7063      	strb	r3, [r4, #1]
   133f6:	e6e3      	b.n	131c0 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   133f8:	9b02      	ldr	r3, [sp, #8]
   133fa:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   133fc:	2300      	movs	r3, #0
   133fe:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   13400:	e7a3      	b.n	1334a <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   13402:	f1be 0f00 	cmp.w	lr, #0
   13406:	f47f aec7 	bne.w	13198 <ticker_job+0x4b0>
   1340a:	b111      	cbz	r1, 13412 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1340c:	7a0b      	ldrb	r3, [r1, #8]
   1340e:	2b01      	cmp	r3, #1
   13410:	d0d8      	beq.n	133c4 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   13412:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   13416:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1341a:	e6bd      	b.n	13198 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   1341c:	7062      	strb	r2, [r4, #1]
   1341e:	2200      	movs	r2, #0
   13420:	e7a5      	b.n	1336e <ticker_job+0x686>
	count_user = instance->count_user;
   13422:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   13426:	f8db 2004 	ldr.w	r2, [fp, #4]
   1342a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   1342c:	1e5f      	subs	r7, r3, #1
   1342e:	b2ff      	uxtb	r7, r7
   13430:	2b00      	cmp	r3, #0
   13432:	f43f ae10 	beq.w	13056 <ticker_job+0x36e>
		flag_compare_update = 1U;
   13436:	2301      	movs	r3, #1
   13438:	9306      	str	r3, [sp, #24]
   1343a:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   1343c:	2600      	movs	r6, #0
   1343e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   13442:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   13446:	787b      	ldrb	r3, [r7, #1]
   13448:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   1344a:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   1344c:	429a      	cmp	r2, r3
   1344e:	d10c      	bne.n	1346a <ticker_job+0x782>
   13450:	e05b      	b.n	1350a <ticker_job+0x822>
	switch (uop->op) {
   13452:	2b01      	cmp	r3, #1
   13454:	d053      	beq.n	134fe <ticker_job+0x816>
			first = user->first + 1;
   13456:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   13458:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   1345a:	3301      	adds	r3, #1
   1345c:	b2db      	uxtb	r3, r3
				first = 0U;
   1345e:	4299      	cmp	r1, r3
   13460:	bf08      	it	eq
   13462:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   13464:	429a      	cmp	r2, r3
			user->first = first;
   13466:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   13468:	d04f      	beq.n	1350a <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1346a:	b21b      	sxth	r3, r3
   1346c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   13470:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13474:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   13478:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   1347c:	2b02      	cmp	r3, #2
   1347e:	d017      	beq.n	134b0 <ticker_job+0x7c8>
   13480:	2b03      	cmp	r3, #3
   13482:	d1e6      	bne.n	13452 <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   13484:	7843      	ldrb	r3, [r0, #1]
   13486:	f89b 2008 	ldrb.w	r2, [fp, #8]
   1348a:	429a      	cmp	r2, r3
   1348c:	d93a      	bls.n	13504 <ticker_job+0x81c>
			node[uop->id].priority =
   1348e:	f8db 2000 	ldr.w	r2, [fp]
   13492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13496:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1349a:	7902      	ldrb	r2, [r0, #4]
   1349c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   134a0:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   134a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   134a4:	b113      	cbz	r3, 134ac <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   134a6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   134a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   134aa:	4798      	blx	r3
   134ac:	78fa      	ldrb	r2, [r7, #3]
   134ae:	e7d2      	b.n	13456 <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   134b0:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   134b4:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   134b8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   134bc:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   134c0:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   134c4:	2aff      	cmp	r2, #255	; 0xff
   134c6:	d003      	beq.n	134d0 <ticker_job+0x7e8>
   134c8:	f8d1 8000 	ldr.w	r8, [r1]
   134cc:	4598      	cmp	r8, r3
   134ce:	d023      	beq.n	13518 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   134d0:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   134d4:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   134d6:	f04f 0800 	mov.w	r8, #0
   134da:	e00a      	b.n	134f2 <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   134dc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   134e0:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   134e4:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   134e6:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   134ea:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   134ec:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   134ee:	b911      	cbnz	r1, 134f6 <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   134f0:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   134f2:	2aff      	cmp	r2, #255	; 0xff
   134f4:	d1f2      	bne.n	134dc <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   134f6:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   134fa:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   134fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   13500:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   13502:	e7cf      	b.n	134a4 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   13504:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   13508:	e7cb      	b.n	134a2 <ticker_job+0x7ba>
	while (count_user--) {
   1350a:	9a01      	ldr	r2, [sp, #4]
   1350c:	42ba      	cmp	r2, r7
   1350e:	f1a7 0308 	sub.w	r3, r7, #8
   13512:	d00b      	beq.n	1352c <ticker_job+0x844>
   13514:	461f      	mov	r7, r3
   13516:	e796      	b.n	13446 <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   13518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1351c:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1351e:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   13522:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   13524:	e7e5      	b.n	134f2 <ticker_job+0x80a>
	if (!pending) {
   13526:	9b08      	ldr	r3, [sp, #32]
   13528:	2b00      	cmp	r3, #0
   1352a:	d054      	beq.n	135d6 <ticker_job+0x8ee>
	if (flag_compare_update) {
   1352c:	9b06      	ldr	r3, [sp, #24]
   1352e:	2b00      	cmp	r3, #0
   13530:	f47f ad91 	bne.w	13056 <ticker_job+0x36e>
	if (instance->worker_trigger) {
   13534:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   13538:	2200      	movs	r2, #0
   1353a:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   1353e:	b12b      	cbz	r3, 1354c <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   13540:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   13544:	465b      	mov	r3, fp
   13546:	2201      	movs	r2, #1
   13548:	2103      	movs	r1, #3
   1354a:	e469      	b.n	12e20 <ticker_job+0x138>
}
   1354c:	b00d      	add	sp, #52	; 0x34
   1354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13552:	4770      	bx	lr
					while (ticks_to_expire <
   13554:	458a      	cmp	sl, r1
   13556:	f67f af2c 	bls.w	133b2 <ticker_job+0x6ca>
   1355a:	1c68      	adds	r0, r5, #1
   1355c:	9405      	str	r4, [sp, #20]
   1355e:	4604      	mov	r4, r0
   13560:	e005      	b.n	1356e <ticker_job+0x886>
   13562:	4628      	mov	r0, r5
						ticks_to_expire +=
   13564:	4401      	add	r1, r0
						lazy++;
   13566:	3201      	adds	r2, #1
					while (ticks_to_expire <
   13568:	458a      	cmp	sl, r1
						lazy++;
   1356a:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1356c:	d910      	bls.n	13590 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   1356e:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   13570:	eb03 0008 	add.w	r0, r3, r8
   13574:	4548      	cmp	r0, r9
   13576:	d8f4      	bhi.n	13562 <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13578:	4620      	mov	r0, r4
   1357a:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   1357e:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13580:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   13584:	3201      	adds	r2, #1
					while (ticks_to_expire <
   13586:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13588:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   1358c:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1358e:	d8ee      	bhi.n	1356e <ticker_job+0x886>
   13590:	9c05      	ldr	r4, [sp, #20]
   13592:	6263      	str	r3, [r4, #36]	; 0x24
   13594:	e70d      	b.n	133b2 <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   13596:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   1359a:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1359e:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   135a0:	f8db 3000 	ldr.w	r3, [fp]
   135a4:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   135a6:	f8db 3004 	ldr.w	r3, [fp, #4]
   135aa:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   135ac:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   135ae:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   135b0:	b2db      	uxtb	r3, r3
   135b2:	b3a1      	cbz	r1, 1361e <ticker_job+0x936>
		flag_elapsed = 0U;
   135b4:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   135b6:	9203      	str	r2, [sp, #12]
   135b8:	f7ff bbd1 	b.w	12d5e <ticker_job+0x76>
				node->ticks_to_expire -=
   135bc:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   135be:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   135c2:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   135c6:	f43f aec0 	beq.w	1334a <ticker_job+0x662>
   135ca:	fa0f f18e 	sxth.w	r1, lr
   135ce:	e6af      	b.n	13330 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   135d0:	1bdb      	subs	r3, r3, r7
   135d2:	60a3      	str	r3, [r4, #8]
			break;
   135d4:	e5f8      	b.n	131c8 <ticker_job+0x4e0>
	count_user = instance->count_user;
   135d6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   135da:	f8db 2004 	ldr.w	r2, [fp, #4]
   135de:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   135e0:	1e5f      	subs	r7, r3, #1
   135e2:	b2ff      	uxtb	r7, r7
   135e4:	2b00      	cmp	r3, #0
   135e6:	f47f af28 	bne.w	1343a <ticker_job+0x752>
   135ea:	e79f      	b.n	1352c <ticker_job+0x844>
		if (cntr_stop() == 0) {
   135ec:	f00a fea0 	bl	1e330 <cntr_stop>
   135f0:	2800      	cmp	r0, #0
   135f2:	d19f      	bne.n	13534 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   135f4:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   135f8:	f00a fec0 	bl	1e37c <cntr_cnt_get>
   135fc:	f8cb 0014 	str.w	r0, [fp, #20]
   13600:	e798      	b.n	13534 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   13602:	f00a febb 	bl	1e37c <cntr_cnt_get>
   13606:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   13608:	f00a fe82 	bl	1e310 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   1360c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   13610:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   13612:	2800      	cmp	r0, #0
   13614:	f47f ad2a 	bne.w	1306c <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   13618:	f8cb 4014 	str.w	r4, [fp, #20]
   1361c:	e526      	b.n	1306c <ticker_job+0x384>
	insert_head = TICKER_NULL;
   1361e:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   13620:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   13622:	9301      	str	r3, [sp, #4]
   13624:	e507      	b.n	13036 <ticker_job+0x34e>
   13626:	bf00      	nop

00013628 <ticker_init>:
{
   13628:	b4f0      	push	{r4, r5, r6, r7}
   1362a:	9d04      	ldr	r5, [sp, #16]
   1362c:	f89d 7014 	ldrb.w	r7, [sp, #20]
   13630:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   13632:	2800      	cmp	r0, #0
   13634:	d137      	bne.n	136a6 <ticker_init+0x7e>
	instance->count_node = count_node;
   13636:	4e1d      	ldr	r6, [pc, #116]	; (136ac <ticker_init+0x84>)
	while (count_node--) {
   13638:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   1363c:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   1363e:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   13640:	fa5f fc8c 	uxtb.w	ip, ip
   13644:	b149      	cbz	r1, 1365a <ticker_init+0x32>
   13646:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1364a:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   1364e:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   13650:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   13654:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   13658:	d1f9      	bne.n	1364e <ticker_init+0x26>
	while (count_user--) {
   1365a:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   1365c:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   1365e:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   13660:	b2d2      	uxtb	r2, r2
   13662:	b183      	cbz	r3, 13686 <ticker_init+0x5e>
   13664:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   13668:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   1366a:	4610      	mov	r0, r2
   1366c:	f812 3908 	ldrb.w	r3, [r2], #-8
   13670:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   13674:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   13678:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   1367a:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   1367e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   13682:	b2df      	uxtb	r7, r3
	while (count_user--) {
   13684:	d1f0      	bne.n	13668 <ticker_init+0x40>
	if (count_op) {
   13686:	b977      	cbnz	r7, 136a6 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   13688:	9a07      	ldr	r2, [sp, #28]
   1368a:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   1368c:	9a08      	ldr	r2, [sp, #32]
   1368e:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   13690:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   13694:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13696:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   13698:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   1369a:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1369e:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   136a0:	8177      	strh	r7, [r6, #10]
}
   136a2:	bcf0      	pop	{r4, r5, r6, r7}
   136a4:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   136a6:	2001      	movs	r0, #1
}
   136a8:	bcf0      	pop	{r4, r5, r6, r7}
   136aa:	4770      	bx	lr
   136ac:	200041ac 	.word	0x200041ac

000136b0 <ticker_trigger>:
	if (instance->sched_cb) {
   136b0:	4b0a      	ldr	r3, [pc, #40]	; (136dc <ticker_trigger+0x2c>)
   136b2:	222c      	movs	r2, #44	; 0x2c
   136b4:	fb02 3200 	mla	r2, r2, r0, r3
{
   136b8:	b410      	push	{r4}
	if (instance->sched_cb) {
   136ba:	6a54      	ldr	r4, [r2, #36]	; 0x24
   136bc:	b15c      	cbz	r4, 136d6 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   136be:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   136c2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   136c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   136ca:	46a4      	mov	ip, r4
   136cc:	2201      	movs	r2, #1
}
   136ce:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   136d0:	2103      	movs	r1, #3
   136d2:	2002      	movs	r0, #2
   136d4:	4760      	bx	ip
}
   136d6:	bc10      	pop	{r4}
   136d8:	4770      	bx	lr
   136da:	bf00      	nop
   136dc:	200041ac 	.word	0x200041ac

000136e0 <ticker_start_ext>:
{
   136e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   136e4:	4e28      	ldr	r6, [pc, #160]	; (13788 <ticker_start_ext+0xa8>)
{
   136e6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   136ea:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   136ec:	252c      	movs	r5, #44	; 0x2c
   136ee:	fb05 6504 	mla	r5, r5, r4, r6
{
   136f2:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   136f4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   136f8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   136fc:	6869      	ldr	r1, [r5, #4]
   136fe:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   13702:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   13706:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   1370a:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1370e:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   13710:	f10e 0c01 	add.w	ip, lr, #1
   13714:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   13718:	4564      	cmp	r4, ip
   1371a:	bf98      	it	ls
   1371c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   13720:	4561      	cmp	r1, ip
   13722:	d02e      	beq.n	13782 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   13724:	6879      	ldr	r1, [r7, #4]
   13726:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1372a:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1372e:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   13732:	f04f 0904 	mov.w	r9, #4
   13736:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1373a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   1373c:	9b08      	ldr	r3, [sp, #32]
   1373e:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   13740:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13742:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   13744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13746:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   13748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1374a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   1374c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1374e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   13750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13752:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   13754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13756:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   13758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1375a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1375c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1375e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   13760:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   13762:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   13764:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   13766:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   1376a:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1376e:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   13772:	4798      	blx	r3
   13774:	4633      	mov	r3, r6
   13776:	4649      	mov	r1, r9
   13778:	2200      	movs	r2, #0
   1377a:	47a8      	blx	r5
	return user_op->status;
   1377c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1377e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   13782:	2001      	movs	r0, #1
}
   13784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13788:	200041ac 	.word	0x200041ac

0001378c <ticker_start>:
{
   1378c:	b510      	push	{r4, lr}
   1378e:	b08a      	sub	sp, #40	; 0x28
   13790:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   13792:	9400      	str	r4, [sp, #0]
{
   13794:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   13796:	9401      	str	r4, [sp, #4]
{
   13798:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1379a:	9402      	str	r4, [sp, #8]
{
   1379c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   137a0:	9403      	str	r4, [sp, #12]
{
   137a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   137a4:	9404      	str	r4, [sp, #16]
{
   137a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   137a8:	9405      	str	r4, [sp, #20]
{
   137aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   137ac:	9406      	str	r4, [sp, #24]
{
   137ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   137b0:	9407      	str	r4, [sp, #28]
{
   137b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   137b4:	9408      	str	r4, [sp, #32]
   137b6:	2400      	movs	r4, #0
   137b8:	9409      	str	r4, [sp, #36]	; 0x24
   137ba:	f7ff ff91 	bl	136e0 <ticker_start_ext>
}
   137be:	b00a      	add	sp, #40	; 0x28
   137c0:	bd10      	pop	{r4, pc}
   137c2:	bf00      	nop

000137c4 <ticker_update_ext>:
{
   137c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   137c8:	4d28      	ldr	r5, [pc, #160]	; (1386c <ticker_update_ext+0xa8>)
{
   137ca:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   137ce:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   137d2:	4604      	mov	r4, r0
   137d4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   137d6:	212c      	movs	r1, #44	; 0x2c
   137d8:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   137dc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   137e0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   137e4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   137e8:	684c      	ldr	r4, [r1, #4]
   137ea:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   137ee:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   137f2:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   137f6:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   137f8:	f10e 0c01 	add.w	ip, lr, #1
   137fc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   13800:	45e1      	cmp	r9, ip
   13802:	bf98      	it	ls
   13804:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   13808:	4564      	cmp	r4, ip
{
   1380a:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1380e:	d02a      	beq.n	13866 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   13810:	f8d6 a004 	ldr.w	sl, [r6, #4]
   13814:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   13818:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1381c:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   13820:	f04f 0b05 	mov.w	fp, #5
   13824:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   13828:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1382a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1382c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1382e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13830:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   13832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13834:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   13836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13838:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1383a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1383c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1383e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   13840:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   13842:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   13844:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   13846:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   1384a:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   1384e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   13852:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   13856:	4798      	blx	r3
   13858:	462b      	mov	r3, r5
   1385a:	2200      	movs	r2, #0
   1385c:	2104      	movs	r1, #4
   1385e:	47b0      	blx	r6
	return user_op->status;
   13860:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   13862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   13866:	2001      	movs	r0, #1
}
   13868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1386c:	200041ac 	.word	0x200041ac

00013870 <ticker_update>:
{
   13870:	b510      	push	{r4, lr}
   13872:	b088      	sub	sp, #32
   13874:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   13876:	9400      	str	r4, [sp, #0]
{
   13878:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1387a:	9401      	str	r4, [sp, #4]
{
   1387c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1387e:	9402      	str	r4, [sp, #8]
{
   13880:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   13884:	9403      	str	r4, [sp, #12]
{
   13886:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1388a:	9404      	str	r4, [sp, #16]
{
   1388c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1388e:	9405      	str	r4, [sp, #20]
{
   13890:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   13892:	9406      	str	r4, [sp, #24]
   13894:	2400      	movs	r4, #0
   13896:	9407      	str	r4, [sp, #28]
   13898:	f7ff ff94 	bl	137c4 <ticker_update_ext>
}
   1389c:	b008      	add	sp, #32
   1389e:	bd10      	pop	{r4, pc}

000138a0 <ticker_stop>:
{
   138a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   138a4:	4c1e      	ldr	r4, [pc, #120]	; (13920 <ticker_stop+0x80>)
{
   138a6:	4684      	mov	ip, r0
   138a8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   138aa:	212c      	movs	r1, #44	; 0x2c
   138ac:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   138b0:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   138b4:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   138b8:	684d      	ldr	r5, [r1, #4]
   138ba:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   138be:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   138c2:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   138c6:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   138c8:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   138cc:	f10e 0c01 	add.w	ip, lr, #1
   138d0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   138d4:	4567      	cmp	r7, ip
   138d6:	bf98      	it	ls
   138d8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   138dc:	4565      	cmp	r5, ip
   138de:	d01c      	beq.n	1391a <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   138e0:	6877      	ldr	r7, [r6, #4]
   138e2:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   138e6:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   138ea:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   138ee:	f04f 0807 	mov.w	r8, #7
   138f2:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   138f6:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   138f8:	9b06      	ldr	r3, [sp, #24]
   138fa:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   138fc:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   138fe:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   13900:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   13902:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   13906:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1390a:	4798      	blx	r3
   1390c:	4623      	mov	r3, r4
   1390e:	2200      	movs	r2, #0
   13910:	2104      	movs	r1, #4
   13912:	47b0      	blx	r6
	return user_op->status;
   13914:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   13916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1391a:	2001      	movs	r0, #1
}
   1391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13920:	200041ac 	.word	0x200041ac

00013924 <ticker_next_slot_get>:
{
   13924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   13928:	4d20      	ldr	r5, [pc, #128]	; (139ac <ticker_next_slot_get+0x88>)
{
   1392a:	4684      	mov	ip, r0
   1392c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1392e:	212c      	movs	r1, #44	; 0x2c
   13930:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   13934:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   13938:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   1393c:	684c      	ldr	r4, [r1, #4]
   1393e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   13942:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   13946:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1394a:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1394c:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   13950:	f10e 0c01 	add.w	ip, lr, #1
   13954:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   13958:	4567      	cmp	r7, ip
   1395a:	bf98      	it	ls
   1395c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   13960:	4564      	cmp	r4, ip
   13962:	d020      	beq.n	139a6 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   13964:	6877      	ldr	r7, [r6, #4]
   13966:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1396a:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1396e:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   13972:	f64f 7802 	movw	r8, #65282	; 0xff02
   13976:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   1397a:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   1397e:	9b06      	ldr	r3, [sp, #24]
   13980:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   13982:	9b07      	ldr	r3, [sp, #28]
   13984:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   13986:	9b08      	ldr	r3, [sp, #32]
   13988:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1398a:	2302      	movs	r3, #2
   1398c:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   1398e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   13992:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   13996:	4798      	blx	r3
   13998:	462b      	mov	r3, r5
   1399a:	2200      	movs	r2, #0
   1399c:	2104      	movs	r1, #4
   1399e:	47b0      	blx	r6
	return user_op->status;
   139a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   139a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   139a6:	2001      	movs	r0, #1
}
   139a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   139ac:	200041ac 	.word	0x200041ac

000139b0 <ticker_job_sched>:
{
   139b0:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   139b2:	4d0a      	ldr	r5, [pc, #40]	; (139dc <ticker_job_sched+0x2c>)
   139b4:	222c      	movs	r2, #44	; 0x2c
   139b6:	fb02 5200 	mla	r2, r2, r0, r5
   139ba:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   139be:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   139c0:	4608      	mov	r0, r1
   139c2:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   139c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   139c8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   139cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   139d0:	46b4      	mov	ip, r6
   139d2:	2200      	movs	r2, #0
}
   139d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   139d8:	2104      	movs	r1, #4
   139da:	4760      	bx	ip
   139dc:	200041ac 	.word	0x200041ac

000139e0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   139e0:	f00a bccc 	b.w	1e37c <cntr_cnt_get>

000139e4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   139e4:	1a40      	subs	r0, r0, r1
}
   139e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   139ea:	4770      	bx	lr

000139ec <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   139ec:	b570      	push	{r4, r5, r6, lr}
   139ee:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   139f0:	2000      	movs	r0, #0
{
   139f2:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   139f4:	f003 fadc 	bl	16fb0 <ull_adv_is_enabled>
   139f8:	b998      	cbnz	r0, 13a22 <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   139fa:	f003 fceb 	bl	173d4 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   139fe:	f010 0606 	ands.w	r6, r0, #6
   13a02:	d10e      	bne.n	13a22 <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   13a04:	b134      	cbz	r4, 13a14 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   13a06:	2206      	movs	r2, #6
   13a08:	4629      	mov	r1, r5
   13a0a:	4807      	ldr	r0, [pc, #28]	; (13a28 <ll_addr_set+0x3c>)
   13a0c:	f014 fed0 	bl	287b0 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   13a10:	4630      	mov	r0, r6
}
   13a12:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   13a14:	2206      	movs	r2, #6
   13a16:	4629      	mov	r1, r5
   13a18:	4804      	ldr	r0, [pc, #16]	; (13a2c <ll_addr_set+0x40>)
   13a1a:	f014 fec9 	bl	287b0 <memcpy>
	return 0;
   13a1e:	4620      	mov	r0, r4
}
   13a20:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   13a22:	200c      	movs	r0, #12
}
   13a24:	bd70      	pop	{r4, r5, r6, pc}
   13a26:	bf00      	nop
   13a28:	200041e0 	.word	0x200041e0
   13a2c:	200041d8 	.word	0x200041d8

00013a30 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   13a30:	2801      	cmp	r0, #1
{
   13a32:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   13a34:	d805      	bhi.n	13a42 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   13a36:	4a04      	ldr	r2, [pc, #16]	; (13a48 <ll_addr_get+0x18>)
   13a38:	4804      	ldr	r0, [pc, #16]	; (13a4c <ll_addr_get+0x1c>)
   13a3a:	2b00      	cmp	r3, #0
   13a3c:	bf18      	it	ne
   13a3e:	4610      	movne	r0, r2
   13a40:	4770      	bx	lr
		return NULL;
   13a42:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   13a44:	4770      	bx	lr
   13a46:	bf00      	nop
   13a48:	200041e0 	.word	0x200041e0
   13a4c:	200041d8 	.word	0x200041d8

00013a50 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   13a50:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   13a52:	b510      	push	{r4, lr}
   13a54:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   13a56:	d80b      	bhi.n	13a70 <ll_addr_read+0x20>
	if (addr_type) {
   13a58:	4608      	mov	r0, r1
		return rnd_addr;
   13a5a:	4c07      	ldr	r4, [pc, #28]	; (13a78 <ll_addr_read+0x28>)
   13a5c:	4907      	ldr	r1, [pc, #28]	; (13a7c <ll_addr_read+0x2c>)
   13a5e:	2b00      	cmp	r3, #0
   13a60:	bf18      	it	ne
   13a62:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   13a64:	2206      	movs	r2, #6
   13a66:	4621      	mov	r1, r4
   13a68:	f014 fea2 	bl	287b0 <memcpy>
	}

	return addr;
}
   13a6c:	4620      	mov	r0, r4
   13a6e:	bd10      	pop	{r4, pc}
		return NULL;
   13a70:	2400      	movs	r4, #0
}
   13a72:	4620      	mov	r0, r4
   13a74:	bd10      	pop	{r4, pc}
   13a76:	bf00      	nop
   13a78:	200041d8 	.word	0x200041d8
   13a7c:	200041e0 	.word	0x200041e0

00013a80 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   13a80:	2802      	cmp	r0, #2
   13a82:	d001      	beq.n	13a88 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   13a84:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   13a86:	4770      	bx	lr
{
   13a88:	b538      	push	{r3, r4, r5, lr}
   13a8a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   13a8c:	4608      	mov	r0, r1
   13a8e:	461d      	mov	r5, r3
   13a90:	f004 f90e 	bl	17cb0 <ll_connected_get>
			if (!conn) {
   13a94:	b110      	cbz	r0, 13a9c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   13a96:	2000      	movs	r0, #0
   13a98:	7028      	strb	r0, [r5, #0]
}
   13a9a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13a9c:	4620      	mov	r0, r4
}
   13a9e:	bd38      	pop	{r3, r4, r5, pc}

00013aa0 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   13aa0:	2300      	movs	r3, #0
   13aa2:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   13aa4:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   13aa6:	4770      	bx	lr

00013aa8 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   13aa8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   13aaa:	4802      	ldr	r0, [pc, #8]	; (13ab4 <hci_driver_init+0xc>)
   13aac:	f7fa faee 	bl	e08c <bt_hci_driver_register>

	return 0;
}
   13ab0:	2000      	movs	r0, #0
   13ab2:	bd08      	pop	{r3, pc}
   13ab4:	0002c9f8 	.word	0x0002c9f8

00013ab8 <hci_driver_send>:
{
   13ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13aba:	b089      	sub	sp, #36	; 0x24
	if (!buf->len) {
   13abc:	8983      	ldrh	r3, [r0, #12]
{
   13abe:	af00      	add	r7, sp, #0
	if (!buf->len) {
   13ac0:	2b00      	cmp	r3, #0
   13ac2:	d050      	beq.n	13b66 <hci_driver_send+0xae>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13ac4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   13ac6:	4604      	mov	r4, r0
   13ac8:	b1fb      	cbz	r3, 13b0a <hci_driver_send+0x52>
   13aca:	2b02      	cmp	r3, #2
   13acc:	d009      	beq.n	13ae2 <hci_driver_send+0x2a>
		BT_ERR("Unknown HCI type %u", type);
   13ace:	4830      	ldr	r0, [pc, #192]	; (13b90 <hci_driver_send+0xd8>)
   13ad0:	6802      	ldr	r2, [r0, #0]
   13ad2:	0752      	lsls	r2, r2, #29
   13ad4:	d12e      	bne.n	13b34 <hci_driver_send+0x7c>
		return -EINVAL;
   13ad6:	f06f 0515 	mvn.w	r5, #21
}
   13ada:	4628      	mov	r0, r5
   13adc:	3724      	adds	r7, #36	; 0x24
   13ade:	46bd      	mov	sp, r7
   13ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = hci_acl_handle(buf, &evt);
   13ae2:	f107 0108 	add.w	r1, r7, #8
   13ae6:	f001 f85d 	bl	14ba4 <hci_acl_handle>
	if (evt) {
   13aea:	68bb      	ldr	r3, [r7, #8]
	err = hci_acl_handle(buf, &evt);
   13aec:	4605      	mov	r5, r0
	if (evt) {
   13aee:	b113      	cbz	r3, 13af6 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
   13af0:	4618      	mov	r0, r3
   13af2:	f7fa faad 	bl	e050 <bt_recv_prio>
	if (!err) {
   13af6:	2d00      	cmp	r5, #0
   13af8:	d1ef      	bne.n	13ada <hci_driver_send+0x22>
		net_buf_unref(buf);
   13afa:	4620      	mov	r0, r4
   13afc:	f00b fc00 	bl	1f300 <net_buf_unref>
   13b00:	2500      	movs	r5, #0
}
   13b02:	4628      	mov	r0, r5
   13b04:	3724      	adds	r7, #36	; 0x24
   13b06:	46bd      	mov	sp, r7
   13b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   13b0a:	f107 0108 	add.w	r1, r7, #8
	struct node_rx_pdu *node_rx = NULL;
   13b0e:	60bb      	str	r3, [r7, #8]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   13b10:	f000 fb06 	bl	14120 <hci_cmd_handle>
	if (evt) {
   13b14:	2800      	cmp	r0, #0
   13b16:	d0f0      	beq.n	13afa <hci_driver_send+0x42>
		bt_recv_prio(evt);
   13b18:	f7fa fa9a 	bl	e050 <bt_recv_prio>
		if (node_rx) {
   13b1c:	68bd      	ldr	r5, [r7, #8]
   13b1e:	2d00      	cmp	r5, #0
   13b20:	d0eb      	beq.n	13afa <hci_driver_send+0x42>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   13b22:	4628      	mov	r0, r5
   13b24:	f001 fde0 	bl	156e8 <hci_get_class>
   13b28:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   13b2a:	68b9      	ldr	r1, [r7, #8]
   13b2c:	4819      	ldr	r0, [pc, #100]	; (13b94 <hci_driver_send+0xdc>)
   13b2e:	f017 f8ae 	bl	2ac8e <k_queue_append>
	if (!err) {
   13b32:	e7e2      	b.n	13afa <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
   13b34:	466e      	mov	r6, sp
   13b36:	b088      	sub	sp, #32
   13b38:	4669      	mov	r1, sp
   13b3a:	460a      	mov	r2, r1
   13b3c:	2404      	movs	r4, #4
	switch (type) {
   13b3e:	618b      	str	r3, [r1, #24]
		BT_ERR("Unknown HCI type %u", type);
   13b40:	4d15      	ldr	r5, [pc, #84]	; (13b98 <hci_driver_send+0xe0>)
   13b42:	4b16      	ldr	r3, [pc, #88]	; (13b9c <hci_driver_send+0xe4>)
   13b44:	610d      	str	r5, [r1, #16]
   13b46:	614b      	str	r3, [r1, #20]
   13b48:	60bc      	str	r4, [r7, #8]
   13b4a:	f842 4f0c 	str.w	r4, [r2, #12]!
   13b4e:	2300      	movs	r3, #0
   13b50:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13b54:	f012 ffc8 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   13b58:	f06f 0515 	mvn.w	r5, #21
}
   13b5c:	4628      	mov	r0, r5
   13b5e:	46b5      	mov	sp, r6
   13b60:	3724      	adds	r7, #36	; 0x24
   13b62:	46bd      	mov	sp, r7
   13b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Empty HCI packet");
   13b66:	480a      	ldr	r0, [pc, #40]	; (13b90 <hci_driver_send+0xd8>)
   13b68:	6802      	ldr	r2, [r0, #0]
   13b6a:	0751      	lsls	r1, r2, #29
   13b6c:	d0b3      	beq.n	13ad6 <hci_driver_send+0x1e>
   13b6e:	4c0c      	ldr	r4, [pc, #48]	; (13ba0 <hci_driver_send+0xe8>)
   13b70:	490a      	ldr	r1, [pc, #40]	; (13b9c <hci_driver_send+0xe4>)
   13b72:	2203      	movs	r2, #3
   13b74:	e9c7 4106 	strd	r4, r1, [r7, #24]
   13b78:	607a      	str	r2, [r7, #4]
   13b7a:	617a      	str	r2, [r7, #20]
   13b7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13b80:	f107 0214 	add.w	r2, r7, #20
   13b84:	f012 ffb0 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   13b88:	f06f 0515 	mvn.w	r5, #21
		BT_ERR("Empty HCI packet");
   13b8c:	e7a5      	b.n	13ada <hci_driver_send+0x22>
   13b8e:	bf00      	nop
   13b90:	20000948 	.word	0x20000948
   13b94:	20000be8 	.word	0x20000be8
   13b98:	0002c924 	.word	0x0002c924
   13b9c:	0002c9e8 	.word	0x0002c9e8
   13ba0:	0002c90c 	.word	0x0002c90c

00013ba4 <recv_thread>:
{
   13ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   13ba6:	4e41      	ldr	r6, [pc, #260]	; (13cac <recv_thread+0x108>)
		LL_ASSERT(0);
   13ba8:	4f41      	ldr	r7, [pc, #260]	; (13cb0 <recv_thread+0x10c>)
{
   13baa:	b083      	sub	sp, #12
   13bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bb4:	4630      	mov	r0, r6
   13bb6:	f010 feb5 	bl	24924 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   13bba:	2800      	cmp	r0, #0
   13bbc:	d0f6      	beq.n	13bac <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   13bbe:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   13bc0:	9001      	str	r0, [sp, #4]
	switch (class) {
   13bc2:	2b04      	cmp	r3, #4
   13bc4:	d821      	bhi.n	13c0a <recv_thread+0x66>
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d14b      	bne.n	13c62 <recv_thread+0xbe>
		LL_ASSERT(0);
   13bca:	493a      	ldr	r1, [pc, #232]	; (13cb4 <recv_thread+0x110>)
   13bcc:	483a      	ldr	r0, [pc, #232]	; (13cb8 <recv_thread+0x114>)
   13bce:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   13bd2:	463a      	mov	r2, r7
   13bd4:	f011 ff96 	bl	25b04 <printk>
   13bd8:	4040      	eors	r0, r0
   13bda:	f380 8811 	msr	BASEPRI, r0
   13bde:	f04f 0003 	mov.w	r0, #3
   13be2:	df02      	svc	2
	node_rx->hdr.next = NULL;
   13be4:	9b01      	ldr	r3, [sp, #4]
   13be6:	2200      	movs	r2, #0
   13be8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   13bea:	a801      	add	r0, sp, #4
   13bec:	f002 f9d2 	bl	15f94 <ll_rx_mem_release>
   13bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bf8:	4630      	mov	r0, r6
   13bfa:	f010 fe93 	bl	24924 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   13bfe:	2800      	cmp	r0, #0
   13c00:	d0d4      	beq.n	13bac <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   13c02:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   13c04:	9001      	str	r0, [sp, #4]
	switch (class) {
   13c06:	2b04      	cmp	r3, #4
   13c08:	d9dd      	bls.n	13bc6 <recv_thread+0x22>
   13c0a:	2b05      	cmp	r3, #5
   13c0c:	d1dd      	bne.n	13bca <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   13c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c16:	2003      	movs	r0, #3
   13c18:	f7f8 fffc 	bl	cc14 <bt_buf_get_rx>
   13c1c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   13c1e:	4621      	mov	r1, r4
   13c20:	9801      	ldr	r0, [sp, #4]
   13c22:	f001 f8a3 	bl	14d6c <hci_acl_encode>
	node_rx->hdr.next = NULL;
   13c26:	9b01      	ldr	r3, [sp, #4]
   13c28:	2200      	movs	r2, #0
   13c2a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   13c2c:	a801      	add	r0, sp, #4
   13c2e:	f002 f9b1 	bl	15f94 <ll_rx_mem_release>
		while (buf) {
   13c32:	2c00      	cmp	r4, #0
   13c34:	d0ba      	beq.n	13bac <recv_thread+0x8>
			frag = net_buf_ref(buf);
   13c36:	4620      	mov	r0, r4
   13c38:	f016 f919 	bl	29e6e <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   13c3c:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   13c3e:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   13c40:	2000      	movs	r0, #0
   13c42:	f016 f93a 	bl	29eba <net_buf_frag_del>
			if (frag->len) {
   13c46:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   13c48:	4604      	mov	r4, r0
				bt_recv(frag);
   13c4a:	4628      	mov	r0, r5
			if (frag->len) {
   13c4c:	b133      	cbz	r3, 13c5c <recv_thread+0xb8>
				bt_recv(frag);
   13c4e:	f7fa f92d 	bl	deac <bt_recv>
	z_impl_k_yield();
   13c52:	f011 faf7 	bl	25244 <z_impl_k_yield>
		while (buf) {
   13c56:	2c00      	cmp	r4, #0
   13c58:	d1ed      	bne.n	13c36 <recv_thread+0x92>
   13c5a:	e7a7      	b.n	13bac <recv_thread+0x8>
				net_buf_unref(frag);
   13c5c:	f00b fb50 	bl	1f300 <net_buf_unref>
   13c60:	e7f7      	b.n	13c52 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   13c62:	2b02      	cmp	r3, #2
   13c64:	d013      	beq.n	13c8e <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c6e:	2001      	movs	r0, #1
   13c70:	f7f8 ffd0 	bl	cc14 <bt_buf_get_rx>
   13c74:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   13c76:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   13c78:	b19c      	cbz	r4, 13ca2 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   13c7a:	4621      	mov	r1, r4
   13c7c:	f001 f8b0 	bl	14de0 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   13c80:	9b01      	ldr	r3, [sp, #4]
   13c82:	2200      	movs	r2, #0
   13c84:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   13c86:	a801      	add	r0, sp, #4
   13c88:	f002 f984 	bl	15f94 <ll_rx_mem_release>
		while (buf) {
   13c8c:	e7d3      	b.n	13c36 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   13c8e:	2200      	movs	r2, #0
   13c90:	2300      	movs	r3, #0
   13c92:	2101      	movs	r1, #1
   13c94:	2000      	movs	r0, #0
   13c96:	f7f8 ffe7 	bl	cc68 <bt_buf_get_evt>
   13c9a:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   13c9c:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   13c9e:	2c00      	cmp	r4, #0
   13ca0:	d1eb      	bne.n	13c7a <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   13ca2:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   13ca4:	a801      	add	r0, sp, #4
   13ca6:	f002 f975 	bl	15f94 <ll_rx_mem_release>
		while (buf) {
   13caa:	e77f      	b.n	13bac <recv_thread+0x8>
   13cac:	20000be8 	.word	0x20000be8
   13cb0:	0002c93c 	.word	0x0002c93c
   13cb4:	0002c97c 	.word	0x0002c97c
   13cb8:	0002c8dc 	.word	0x0002c8dc

00013cbc <prio_recv_thread>:
{
   13cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   13cc0:	4f2e      	ldr	r7, [pc, #184]	; (13d7c <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   13cc2:	4e2f      	ldr	r6, [pc, #188]	; (13d80 <prio_recv_thread+0xc4>)
{
   13cc4:	b082      	sub	sp, #8
   13cc6:	e00c      	b.n	13ce2 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   13cc8:	f7f8 ffce 	bl	cc68 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   13ccc:	4622      	mov	r2, r4
   13cce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   13cd2:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   13cd4:	f001 fcf0 	bl	156b8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   13cd8:	4620      	mov	r0, r4
   13cda:	f7fa f9b9 	bl	e050 <bt_recv_prio>
	z_impl_k_yield();
   13cde:	f011 fab1 	bl	25244 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   13ce2:	f10d 0102 	add.w	r1, sp, #2
   13ce6:	a801      	add	r0, sp, #4
   13ce8:	f001 fff8 	bl	15cdc <ll_rx_get>
   13cec:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   13cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cf6:	2100      	movs	r1, #0
   13cf8:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   13cfa:	2c00      	cmp	r4, #0
   13cfc:	d1e4      	bne.n	13cc8 <prio_recv_thread+0xc>
		if (node_rx) {
   13cfe:	9b01      	ldr	r3, [sp, #4]
   13d00:	b1b3      	cbz	r3, 13d30 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   13d02:	f002 f8cd 	bl	15ea0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   13d06:	f8dd 8004 	ldr.w	r8, [sp, #4]
   13d0a:	4640      	mov	r0, r8
   13d0c:	f001 fcec 	bl	156e8 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   13d10:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   13d12:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   13d16:	796b      	ldrb	r3, [r5, #5]
   13d18:	2b03      	cmp	r3, #3
   13d1a:	d102      	bne.n	13d22 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   13d1c:	792b      	ldrb	r3, [r5, #4]
   13d1e:	2b17      	cmp	r3, #23
   13d20:	d00e      	beq.n	13d40 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   13d22:	4629      	mov	r1, r5
   13d24:	4630      	mov	r0, r6
   13d26:	f016 ffb2 	bl	2ac8e <k_queue_append>
		if (iso_received || node_rx) {
   13d2a:	9b01      	ldr	r3, [sp, #4]
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	d1d8      	bne.n	13ce2 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   13d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d38:	4638      	mov	r0, r7
   13d3a:	f010 fe4d 	bl	249d8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   13d3e:	e7d0      	b.n	13ce2 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   13d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d44:	4621      	mov	r1, r4
   13d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d4a:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   13d4c:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   13d50:	f7f8 ff8a 	bl	cc68 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   13d54:	4641      	mov	r1, r8
   13d56:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   13d58:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   13d5a:	f105 001c 	add.w	r0, r5, #28
   13d5e:	f000 ffdd 	bl	14d1c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   13d62:	4640      	mov	r0, r8
   13d64:	f000 fffa 	bl	14d5c <hci_disconn_complete_process>
				bt_recv_prio(buf);
   13d68:	4620      	mov	r0, r4
			if (buf) {
   13d6a:	b124      	cbz	r4, 13d76 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   13d6c:	f7fa f970 	bl	e050 <bt_recv_prio>
					net_buf_unref(buf);
   13d70:	4620      	mov	r0, r4
   13d72:	f00b fac5 	bl	1f300 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   13d76:	9d01      	ldr	r5, [sp, #4]
   13d78:	e7d3      	b.n	13d22 <prio_recv_thread+0x66>
   13d7a:	bf00      	nop
   13d7c:	20000bb8 	.word	0x20000bb8
   13d80:	20000be8 	.word	0x20000be8

00013d84 <hci_driver_open>:
{
   13d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   13d88:	b08a      	sub	sp, #40	; 0x28
	err = ll_init(&sem_prio_recv);
   13d8a:	482e      	ldr	r0, [pc, #184]	; (13e44 <hci_driver_open+0xc0>)
{
   13d8c:	af08      	add	r7, sp, #32
	err = ll_init(&sem_prio_recv);
   13d8e:	f002 fd47 	bl	16820 <ll_init>
	if (err) {
   13d92:	4604      	mov	r4, r0
   13d94:	b140      	cbz	r0, 13da8 <hci_driver_open+0x24>
		BT_ERR("LL initialization failed: %d", err);
   13d96:	482c      	ldr	r0, [pc, #176]	; (13e48 <hci_driver_open+0xc4>)
   13d98:	6803      	ldr	r3, [r0, #0]
   13d9a:	075b      	lsls	r3, r3, #29
   13d9c:	d137      	bne.n	13e0e <hci_driver_open+0x8a>
}
   13d9e:	4620      	mov	r0, r4
   13da0:	3708      	adds	r7, #8
   13da2:	46bd      	mov	sp, r7
   13da4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	hci_init(NULL);
   13da8:	f001 fcb4 	bl	15714 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   13dac:	f04f 0800 	mov.w	r8, #0
   13db0:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13db4:	f06f 0209 	mvn.w	r2, #9
   13db8:	e9cd 2403 	strd	r2, r4, [sp, #12]
   13dbc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13dc0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13dc4:	4b21      	ldr	r3, [pc, #132]	; (13e4c <hci_driver_open+0xc8>)
   13dc6:	4922      	ldr	r1, [pc, #136]	; (13e50 <hci_driver_open+0xcc>)
   13dc8:	9400      	str	r4, [sp, #0]
   13dca:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   13dce:	4821      	ldr	r0, [pc, #132]	; (13e54 <hci_driver_open+0xd0>)
   13dd0:	f010 fc48 	bl	24664 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13dd4:	4920      	ldr	r1, [pc, #128]	; (13e58 <hci_driver_open+0xd4>)
   13dd6:	481f      	ldr	r0, [pc, #124]	; (13e54 <hci_driver_open+0xd0>)
   13dd8:	f010 fb92 	bl	24500 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13ddc:	f06f 0207 	mvn.w	r2, #7
   13de0:	e9cd 2403 	strd	r2, r4, [sp, #12]
   13de4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13de8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13dec:	4b1b      	ldr	r3, [pc, #108]	; (13e5c <hci_driver_open+0xd8>)
   13dee:	491c      	ldr	r1, [pc, #112]	; (13e60 <hci_driver_open+0xdc>)
   13df0:	9400      	str	r4, [sp, #0]
   13df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13df6:	481b      	ldr	r0, [pc, #108]	; (13e64 <hci_driver_open+0xe0>)
   13df8:	f010 fc34 	bl	24664 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13dfc:	491a      	ldr	r1, [pc, #104]	; (13e68 <hci_driver_open+0xe4>)
   13dfe:	4819      	ldr	r0, [pc, #100]	; (13e64 <hci_driver_open+0xe0>)
   13e00:	f010 fb7e 	bl	24500 <z_impl_k_thread_name_set>
}
   13e04:	4620      	mov	r0, r4
   13e06:	3708      	adds	r7, #8
   13e08:	46bd      	mov	sp, r7
   13e0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
		BT_ERR("LL initialization failed: %d", err);
   13e0e:	46e8      	mov	r8, sp
   13e10:	4d16      	ldr	r5, [pc, #88]	; (13e6c <hci_driver_open+0xe8>)
   13e12:	f8c8 5010 	str.w	r5, [r8, #16]
   13e16:	4642      	mov	r2, r8
   13e18:	2104      	movs	r1, #4
   13e1a:	4d15      	ldr	r5, [pc, #84]	; (13e70 <hci_driver_open+0xec>)
   13e1c:	f8c8 4018 	str.w	r4, [r8, #24]
   13e20:	f8c8 5014 	str.w	r5, [r8, #20]
   13e24:	b088      	sub	sp, #32
   13e26:	f842 1f0c 	str.w	r1, [r2, #12]!
   13e2a:	6079      	str	r1, [r7, #4]
   13e2c:	2300      	movs	r3, #0
   13e2e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13e32:	f012 fe59 	bl	26ae8 <z_impl_z_log_msg2_static_create>
}
   13e36:	4620      	mov	r0, r4
   13e38:	46c5      	mov	sp, r8
   13e3a:	3708      	adds	r7, #8
   13e3c:	46bd      	mov	sp, r7
   13e3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   13e42:	bf00      	nop
   13e44:	20000bb8 	.word	0x20000bb8
   13e48:	20000948 	.word	0x20000948
   13e4c:	00013cbd 	.word	0x00013cbd
   13e50:	20008420 	.word	0x20008420
   13e54:	20003290 	.word	0x20003290
   13e58:	0002c9a4 	.word	0x0002c9a4
   13e5c:	00013ba5 	.word	0x00013ba5
   13e60:	20008600 	.word	0x20008600
   13e64:	20003348 	.word	0x20003348
   13e68:	0002c9b0 	.word	0x0002c9b0
   13e6c:	0002c980 	.word	0x0002c980
   13e70:	0002c9d8 	.word	0x0002c9d8

00013e74 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   13e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   13e78:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 13f24 <dup_found.part.0+0xb0>
   13e7c:	f8d9 3000 	ldr.w	r3, [r9]
   13e80:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   13e82:	4680      	mov	r8, r0
   13e84:	460f      	mov	r7, r1
   13e86:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   13e88:	dd12      	ble.n	13eb0 <dup_found.part.0+0x3c>
   13e8a:	4c27      	ldr	r4, [pc, #156]	; (13f28 <dup_found.part.0+0xb4>)
   13e8c:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   13e8e:	4621      	mov	r1, r4
   13e90:	2206      	movs	r2, #6
   13e92:	4630      	mov	r0, r6
   13e94:	f014 fc63 	bl	2875e <memcmp>
   13e98:	b918      	cbnz	r0, 13ea2 <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   13e9a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   13e9e:	42bb      	cmp	r3, r7
   13ea0:	d029      	beq.n	13ef6 <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
   13ea2:	f8d9 3000 	ldr.w	r3, [r9]
   13ea6:	3501      	adds	r5, #1
   13ea8:	429d      	cmp	r5, r3
   13eaa:	f104 0408 	add.w	r4, r4, #8
   13eae:	dbee      	blt.n	13e8e <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   13eb0:	4d1e      	ldr	r5, [pc, #120]	; (13f2c <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   13eb2:	4c1f      	ldr	r4, [pc, #124]	; (13f30 <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
   13eb4:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   13eb8:	4631      	mov	r1, r6
   13eba:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   13ebe:	1c70      	adds	r0, r6, #1
   13ec0:	4420      	add	r0, r4
   13ec2:	2206      	movs	r2, #6
   13ec4:	f014 fc74 	bl	287b0 <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   13ec8:	2301      	movs	r3, #1
   13eca:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13ece:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   13ed2:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
   13ed6:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13ed8:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   13eda:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13ede:	dc1c      	bgt.n	13f1a <dup_found.part.0+0xa6>
			dup_count++;
   13ee0:	3301      	adds	r3, #1
			dup_curr = dup_count;
   13ee2:	461a      	mov	r2, r3
			dup_count++;
   13ee4:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   13ee8:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
   13eea:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13eec:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   13eee:	bf08      	it	eq
   13ef0:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
   13ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   13ef6:	4b0e      	ldr	r3, [pc, #56]	; (13f30 <dup_found.part.0+0xbc>)
   13ef8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   13efc:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   13efe:	79ea      	ldrb	r2, [r5, #7]
   13f00:	fa22 f308 	lsr.w	r3, r2, r8
   13f04:	f013 0301 	ands.w	r3, r3, #1
   13f08:	d1f3      	bne.n	13ef2 <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
   13f0a:	fa00 f808 	lsl.w	r8, r0, r8
   13f0e:	ea42 0208 	orr.w	r2, r2, r8
   13f12:	71ea      	strb	r2, [r5, #7]
		return false;
   13f14:	4618      	mov	r0, r3
}
   13f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
   13f1a:	682a      	ldr	r2, [r5, #0]
   13f1c:	3201      	adds	r2, #1
   13f1e:	602a      	str	r2, [r5, #0]
   13f20:	e7e3      	b.n	13eea <dup_found.part.0+0x76>
   13f22:	bf00      	nop
   13f24:	200041ec 	.word	0x200041ec
   13f28:	200041f5 	.word	0x200041f5
   13f2c:	200041f0 	.word	0x200041f0
   13f30:	200041f4 	.word	0x200041f4

00013f34 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   13f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13f36:	4c19      	ldr	r4, [pc, #100]	; (13f9c <le_remote_feat_complete+0x68>)
   13f38:	6864      	ldr	r4, [r4, #4]
   13f3a:	00a4      	lsls	r4, r4, #2
   13f3c:	d504      	bpl.n	13f48 <le_remote_feat_complete+0x14>
   13f3e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   13f40:	4a17      	ldr	r2, [pc, #92]	; (13fa0 <le_remote_feat_complete+0x6c>)
   13f42:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13f44:	0712      	lsls	r2, r2, #28
   13f46:	d400      	bmi.n	13f4a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   13f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f4a:	f103 0408 	add.w	r4, r3, #8
   13f4e:	4607      	mov	r7, r0
   13f50:	460e      	mov	r6, r1
   13f52:	4620      	mov	r0, r4
   13f54:	2102      	movs	r1, #2
   13f56:	f015 ffbc 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   13f5a:	233e      	movs	r3, #62	; 0x3e
   13f5c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13f5e:	230c      	movs	r3, #12
   13f60:	7043      	strb	r3, [r0, #1]
   13f62:	2101      	movs	r1, #1
   13f64:	4620      	mov	r0, r4
   13f66:	f015 ffb4 	bl	29ed2 <net_buf_simple_add>
   13f6a:	4603      	mov	r3, r0
	me->subevent = subevt;
   13f6c:	2204      	movs	r2, #4
   13f6e:	701a      	strb	r2, [r3, #0]
   13f70:	4620      	mov	r0, r4
   13f72:	210b      	movs	r1, #11
   13f74:	f015 ffad 	bl	29ed2 <net_buf_simple_add>
		memcpy(&sep->features[0],
   13f78:	2208      	movs	r2, #8
	sep->status = status;
   13f7a:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   13f7c:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   13f80:	b92f      	cbnz	r7, 13f8e <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   13f82:	1d31      	adds	r1, r6, #4
   13f84:	3003      	adds	r0, #3
}
   13f86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   13f8a:	f014 bc11 	b.w	287b0 <memcpy>
}
   13f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   13f92:	2100      	movs	r1, #0
   13f94:	3003      	adds	r0, #3
   13f96:	f014 bc16 	b.w	287c6 <memset>
   13f9a:	bf00      	nop
   13f9c:	20000150 	.word	0x20000150
   13fa0:	20000158 	.word	0x20000158

00013fa4 <hci_vendor_cmd_handle_common>:
{
   13fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   13fa6:	3801      	subs	r0, #1
{
   13fa8:	b087      	sub	sp, #28
   13faa:	4615      	mov	r5, r2
	switch (ocf) {
   13fac:	2809      	cmp	r0, #9
   13fae:	d806      	bhi.n	13fbe <hci_vendor_cmd_handle_common+0x1a>
   13fb0:	e8df f000 	tbb	[pc, r0]
   13fb4:	05432609 	.word	0x05432609
   13fb8:	6b055705 	.word	0x6b055705
   13fbc:	9d88      	.short	0x9d88
   13fbe:	f06f 0015 	mvn.w	r0, #21
}
   13fc2:	b007      	add	sp, #28
   13fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13fc6:	4b54      	ldr	r3, [pc, #336]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
   13fc8:	210d      	movs	r1, #13
   13fca:	8818      	ldrh	r0, [r3, #0]
   13fcc:	f014 fdd3 	bl	28b76 <bt_hci_cmd_complete_create>
   13fd0:	210d      	movs	r1, #13
   13fd2:	6028      	str	r0, [r5, #0]
   13fd4:	3008      	adds	r0, #8
   13fd6:	f015 ff7c 	bl	29ed2 <net_buf_simple_add>
   13fda:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   13fdc:	2202      	movs	r2, #2
	rp->status = 0x00;
   13fde:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   13fe0:	2103      	movs	r1, #3
	rp->status = 0x00;
   13fe2:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   13fe4:	705a      	strb	r2, [r3, #1]
   13fe6:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   13fe8:	70da      	strb	r2, [r3, #3]
   13fea:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   13fec:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   13fee:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   13ff0:	71d8      	strb	r0, [r3, #7]
   13ff2:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   13ff4:	7258      	strb	r0, [r3, #9]
   13ff6:	7298      	strb	r0, [r3, #10]
   13ff8:	72d8      	strb	r0, [r3, #11]
   13ffa:	7318      	strb	r0, [r3, #12]
}
   13ffc:	b007      	add	sp, #28
   13ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14000:	4b45      	ldr	r3, [pc, #276]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
   14002:	2141      	movs	r1, #65	; 0x41
   14004:	8818      	ldrh	r0, [r3, #0]
   14006:	f014 fdb6 	bl	28b76 <bt_hci_cmd_complete_create>
   1400a:	2141      	movs	r1, #65	; 0x41
   1400c:	6028      	str	r0, [r5, #0]
   1400e:	3008      	adds	r0, #8
   14010:	f015 ff5f 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14014:	2400      	movs	r4, #0
   14016:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   14018:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1401a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1401e:	4621      	mov	r1, r4
   14020:	f014 fbd1 	bl	287c6 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   14024:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   14026:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   14028:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1402c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   14030:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   14032:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   14034:	70ab      	strb	r3, [r5, #2]
}
   14036:	b007      	add	sp, #28
   14038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1403a:	4b37      	ldr	r3, [pc, #220]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
   1403c:	2109      	movs	r1, #9
   1403e:	8818      	ldrh	r0, [r3, #0]
   14040:	f014 fd99 	bl	28b76 <bt_hci_cmd_complete_create>
   14044:	2109      	movs	r1, #9
   14046:	6028      	str	r0, [r5, #0]
   14048:	3008      	adds	r0, #8
   1404a:	f015 ff42 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   1404e:	2400      	movs	r4, #0
   14050:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14054:	2208      	movs	r2, #8
   14056:	4621      	mov	r1, r4
   14058:	f014 fbb5 	bl	287c6 <memset>
	return 0;
   1405c:	4620      	mov	r0, r4
}
   1405e:	b007      	add	sp, #28
   14060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   14062:	6889      	ldr	r1, [r1, #8]
   14064:	2000      	movs	r0, #0
   14066:	f7ff fcc1 	bl	139ec <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1406a:	4b2b      	ldr	r3, [pc, #172]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
   1406c:	2101      	movs	r1, #1
   1406e:	8818      	ldrh	r0, [r3, #0]
   14070:	f014 fd81 	bl	28b76 <bt_hci_cmd_complete_create>
   14074:	2101      	movs	r1, #1
   14076:	4604      	mov	r4, r0
   14078:	3008      	adds	r0, #8
   1407a:	f015 ff2a 	bl	29ed2 <net_buf_simple_add>
   1407e:	4603      	mov	r3, r0
	ccst->status = status;
   14080:	2000      	movs	r0, #0
   14082:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   14084:	602c      	str	r4, [r5, #0]
}
   14086:	b007      	add	sp, #28
   14088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   1408a:	4e24      	ldr	r6, [pc, #144]	; (1411c <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1408c:	4f22      	ldr	r7, [pc, #136]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   1408e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14090:	f10d 0c04 	add.w	ip, sp, #4
   14094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14098:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1409a:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   1409c:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   140a0:	2112      	movs	r1, #18
   140a2:	f014 fd68 	bl	28b76 <bt_hci_cmd_complete_create>
   140a6:	2112      	movs	r1, #18
   140a8:	6028      	str	r0, [r5, #0]
   140aa:	3008      	adds	r0, #8
   140ac:	f015 ff11 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   140b0:	2400      	movs	r4, #0
   140b2:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   140b6:	2211      	movs	r2, #17
   140b8:	a901      	add	r1, sp, #4
   140ba:	f014 fb79 	bl	287b0 <memcpy>
	return 0;
   140be:	4620      	mov	r0, r4
}
   140c0:	b007      	add	sp, #28
   140c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   140c4:	4b14      	ldr	r3, [pc, #80]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
   140c6:	2118      	movs	r1, #24
   140c8:	8818      	ldrh	r0, [r3, #0]
   140ca:	f014 fd54 	bl	28b76 <bt_hci_cmd_complete_create>
   140ce:	2118      	movs	r1, #24
   140d0:	6028      	str	r0, [r5, #0]
   140d2:	3008      	adds	r0, #8
   140d4:	f015 fefd 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   140d8:	2400      	movs	r4, #0
   140da:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   140dc:	2101      	movs	r1, #1
	rp->status = 0x00;
   140de:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   140e2:	f00a ff8d 	bl	1f000 <hci_vendor_read_static_addr>
   140e6:	7068      	strb	r0, [r5, #1]
	return 0;
   140e8:	4620      	mov	r0, r4
}
   140ea:	b007      	add	sp, #28
   140ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   140ee:	4b0a      	ldr	r3, [pc, #40]	; (14118 <hci_vendor_cmd_handle_common+0x174>)
   140f0:	2121      	movs	r1, #33	; 0x21
   140f2:	8818      	ldrh	r0, [r3, #0]
   140f4:	f014 fd3f 	bl	28b76 <bt_hci_cmd_complete_create>
   140f8:	2121      	movs	r1, #33	; 0x21
   140fa:	6028      	str	r0, [r5, #0]
   140fc:	3008      	adds	r0, #8
   140fe:	f015 fee8 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14102:	4601      	mov	r1, r0
   14104:	2400      	movs	r4, #0
   14106:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   1410a:	3001      	adds	r0, #1
   1410c:	f00a ffec 	bl	1f0e8 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   14110:	4620      	mov	r0, r4
}
   14112:	b007      	add	sp, #28
   14114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14116:	bf00      	nop
   14118:	20005ea4 	.word	0x20005ea4
   1411c:	0002ca0c 	.word	0x0002ca0c

00014120 <hci_cmd_handle>:
{
   14120:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   14122:	8983      	ldrh	r3, [r0, #12]
{
   14124:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   14126:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   14128:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1412a:	9508      	str	r5, [sp, #32]
	if (cmd->len < sizeof(*chdr)) {
   1412c:	d935      	bls.n	1419a <hci_cmd_handle+0x7a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1412e:	4604      	mov	r4, r0
   14130:	460e      	mov	r6, r1
   14132:	3008      	adds	r0, #8
   14134:	2103      	movs	r1, #3
   14136:	f015 fef3 	bl	29f20 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1413a:	89a2      	ldrh	r2, [r4, #12]
   1413c:	7883      	ldrb	r3, [r0, #2]
   1413e:	429a      	cmp	r2, r3
   14140:	f0c0 8120 	bcc.w	14384 <hci_cmd_handle+0x264>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   14144:	8802      	ldrh	r2, [r0, #0]
   14146:	4dc6      	ldr	r5, [pc, #792]	; (14460 <hci_cmd_handle+0x340>)
	switch (BT_OGF(_opcode)) {
   14148:	f3c2 2385 	ubfx	r3, r2, #10, #6
   1414c:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1414e:	b290      	uxth	r0, r2
   14150:	802a      	strh	r2, [r5, #0]
	ocf = BT_OCF(_opcode);
   14152:	f3c2 0709 	ubfx	r7, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   14156:	d80d      	bhi.n	14174 <hci_cmd_handle+0x54>
   14158:	b1c3      	cbz	r3, 1418c <hci_cmd_handle+0x6c>
   1415a:	3b01      	subs	r3, #1
   1415c:	2b07      	cmp	r3, #7
   1415e:	d815      	bhi.n	1418c <hci_cmd_handle+0x6c>
   14160:	e8df f013 	tbh	[pc, r3, lsl #1]
   14164:	00140024 	.word	0x00140024
   14168:	00f700d6 	.word	0x00f700d6
   1416c:	00140014 	.word	0x00140014
   14170:	00330014 	.word	0x00330014
   14174:	2b3f      	cmp	r3, #63	; 0x3f
   14176:	d109      	bne.n	1418c <hci_cmd_handle+0x6c>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   14178:	aa08      	add	r2, sp, #32
   1417a:	4621      	mov	r1, r4
   1417c:	4638      	mov	r0, r7
   1417e:	f7ff ff11 	bl	13fa4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   14182:	3016      	adds	r0, #22
	return evt;
   14184:	bf18      	it	ne
   14186:	9d08      	ldrne	r5, [sp, #32]
	if (err == -EINVAL) {
   14188:	d104      	bne.n	14194 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   1418a:	8828      	ldrh	r0, [r5, #0]
   1418c:	2101      	movs	r1, #1
   1418e:	f014 fd04 	bl	28b9a <bt_hci_cmd_status_create>
   14192:	4605      	mov	r5, r0
}
   14194:	4628      	mov	r0, r5
   14196:	b011      	add	sp, #68	; 0x44
   14198:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI Command header");
   1419a:	48b2      	ldr	r0, [pc, #712]	; (14464 <hci_cmd_handle+0x344>)
   1419c:	6803      	ldr	r3, [r0, #0]
   1419e:	075e      	lsls	r6, r3, #29
   141a0:	f040 80f8 	bne.w	14394 <hci_cmd_handle+0x274>
		return NULL;
   141a4:	2500      	movs	r5, #0
}
   141a6:	4628      	mov	r0, r5
   141a8:	b011      	add	sp, #68	; 0x44
   141aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   141ac:	2f06      	cmp	r7, #6
   141ae:	f000 848b 	beq.w	14ac8 <hci_cmd_handle+0x9a8>
   141b2:	2f1d      	cmp	r7, #29
   141b4:	d1ea      	bne.n	1418c <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   141b6:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   141b8:	8818      	ldrh	r0, [r3, #0]
   141ba:	f003 fee1 	bl	17f80 <ll_version_ind_send>
   141be:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   141c0:	8828      	ldrh	r0, [r5, #0]
   141c2:	f014 fcea 	bl	28b9a <bt_hci_cmd_status_create>
   141c6:	4605      	mov	r5, r0
}
   141c8:	e7e4      	b.n	14194 <hci_cmd_handle+0x74>
	switch (ocf) {
   141ca:	1e7a      	subs	r2, r7, #1
   141cc:	2a4d      	cmp	r2, #77	; 0x4d
   141ce:	d8dd      	bhi.n	1418c <hci_cmd_handle+0x6c>
   141d0:	a301      	add	r3, pc, #4	; (adr r3, 141d8 <hci_cmd_handle+0xb8>)
   141d2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   141d6:	bf00      	nop
   141d8:	00014ab3 	.word	0x00014ab3
   141dc:	00014a8d 	.word	0x00014a8d
   141e0:	00014a43 	.word	0x00014a43
   141e4:	0001418d 	.word	0x0001418d
   141e8:	00014a39 	.word	0x00014a39
   141ec:	00014a1d 	.word	0x00014a1d
   141f0:	000149ff 	.word	0x000149ff
   141f4:	000149f3 	.word	0x000149f3
   141f8:	000149e7 	.word	0x000149e7
   141fc:	00014abf 	.word	0x00014abf
   14200:	000149cf 	.word	0x000149cf
   14204:	0001499f 	.word	0x0001499f
   14208:	00014969 	.word	0x00014969
   1420c:	00014961 	.word	0x00014961
   14210:	0001493f 	.word	0x0001493f
   14214:	00014939 	.word	0x00014939
   14218:	00014931 	.word	0x00014931
   1421c:	00014929 	.word	0x00014929
   14220:	00014903 	.word	0x00014903
   14224:	000148fb 	.word	0x000148fb
   14228:	000148d1 	.word	0x000148d1
   1422c:	000148bd 	.word	0x000148bd
   14230:	00014889 	.word	0x00014889
   14234:	00014867 	.word	0x00014867
   14238:	00014849 	.word	0x00014849
   1423c:	0001418d 	.word	0x0001418d
   14240:	0001418d 	.word	0x0001418d
   14244:	00014813 	.word	0x00014813
   14248:	0001418d 	.word	0x0001418d
   1424c:	0001418d 	.word	0x0001418d
   14250:	0001418d 	.word	0x0001418d
   14254:	000147fd 	.word	0x000147fd
   14258:	000147c5 	.word	0x000147c5
   1425c:	000147b5 	.word	0x000147b5
   14260:	00014781 	.word	0x00014781
   14264:	00014775 	.word	0x00014775
   14268:	0001418d 	.word	0x0001418d
   1426c:	0001418d 	.word	0x0001418d
   14270:	00014767 	.word	0x00014767
   14274:	0001475f 	.word	0x0001475f
   14278:	00014759 	.word	0x00014759
   1427c:	00014737 	.word	0x00014737
   14280:	00014709 	.word	0x00014709
   14284:	000146db 	.word	0x000146db
   14288:	000146d1 	.word	0x000146d1
   1428c:	000146c3 	.word	0x000146c3
   14290:	00014679 	.word	0x00014679
   14294:	0001461f 	.word	0x0001461f
   14298:	00014601 	.word	0x00014601
   1429c:	000145a5 	.word	0x000145a5
   142a0:	0001418d 	.word	0x0001418d
   142a4:	0001418d 	.word	0x0001418d
   142a8:	0001418d 	.word	0x0001418d
   142ac:	0001418d 	.word	0x0001418d
   142b0:	0001418d 	.word	0x0001418d
   142b4:	0001418d 	.word	0x0001418d
   142b8:	0001418d 	.word	0x0001418d
   142bc:	0001418d 	.word	0x0001418d
   142c0:	0001418d 	.word	0x0001418d
   142c4:	0001418d 	.word	0x0001418d
   142c8:	0001418d 	.word	0x0001418d
   142cc:	0001418d 	.word	0x0001418d
   142d0:	0001418d 	.word	0x0001418d
   142d4:	0001418d 	.word	0x0001418d
   142d8:	0001418d 	.word	0x0001418d
   142dc:	0001418d 	.word	0x0001418d
   142e0:	0001418d 	.word	0x0001418d
   142e4:	0001418d 	.word	0x0001418d
   142e8:	0001418d 	.word	0x0001418d
   142ec:	0001418d 	.word	0x0001418d
   142f0:	0001418d 	.word	0x0001418d
   142f4:	0001418d 	.word	0x0001418d
   142f8:	0001418d 	.word	0x0001418d
   142fc:	0001418d 	.word	0x0001418d
   14300:	00014581 	.word	0x00014581
   14304:	0001418d 	.word	0x0001418d
   14308:	0001418d 	.word	0x0001418d
   1430c:	00014561 	.word	0x00014561
	switch (ocf) {
   14310:	2f63      	cmp	r7, #99	; 0x63
   14312:	f000 8426 	beq.w	14b62 <hci_cmd_handle+0xa42>
   14316:	d861      	bhi.n	143dc <hci_cmd_handle+0x2bc>
   14318:	2f03      	cmp	r7, #3
   1431a:	f000 83fc 	beq.w	14b16 <hci_cmd_handle+0x9f6>
   1431e:	2f2d      	cmp	r7, #45	; 0x2d
   14320:	d148      	bne.n	143b4 <hci_cmd_handle+0x294>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   14322:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14324:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   14326:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   14328:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1432a:	f014 fc24 	bl	28b76 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   1432e:	2104      	movs	r1, #4
   14330:	9008      	str	r0, [sp, #32]
   14332:	3008      	adds	r0, #8
   14334:	f015 fdcd 	bl	29ed2 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   14338:	b2b5      	uxth	r5, r6
   1433a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   1433c:	1cc3      	adds	r3, r0, #3
   1433e:	4629      	mov	r1, r5
   14340:	463a      	mov	r2, r7
   14342:	2002      	movs	r0, #2
   14344:	f7ff fb9c 	bl	13a80 <ll_tx_pwr_lvl_get>
	rp->status = status;
   14348:	7020      	strb	r0, [r4, #0]
	return evt;
   1434a:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   1434c:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   14350:	e720      	b.n	14194 <hci_cmd_handle+0x74>
	switch (ocf) {
   14352:	1e7a      	subs	r2, r7, #1
   14354:	2a08      	cmp	r2, #8
   14356:	f63f af19 	bhi.w	1418c <hci_cmd_handle+0x6c>
   1435a:	a301      	add	r3, pc, #4	; (adr r3, 14360 <hci_cmd_handle+0x240>)
   1435c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   14360:	0001452b 	.word	0x0001452b
   14364:	00014479 	.word	0x00014479
   14368:	00014437 	.word	0x00014437
   1436c:	0001418d 	.word	0x0001418d
   14370:	0001418d 	.word	0x0001418d
   14374:	0001418d 	.word	0x0001418d
   14378:	0001418d 	.word	0x0001418d
   1437c:	0001418d 	.word	0x0001418d
   14380:	00014415 	.word	0x00014415
		BT_ERR("Invalid HCI CMD packet length");
   14384:	4837      	ldr	r0, [pc, #220]	; (14464 <hci_cmd_handle+0x344>)
   14386:	6803      	ldr	r3, [r0, #0]
   14388:	075c      	lsls	r4, r3, #29
   1438a:	f43f af0b 	beq.w	141a4 <hci_cmd_handle+0x84>
   1438e:	4936      	ldr	r1, [pc, #216]	; (14468 <hci_cmd_handle+0x348>)
   14390:	2303      	movs	r3, #3
   14392:	e001      	b.n	14398 <hci_cmd_handle+0x278>
		BT_ERR("No HCI Command header");
   14394:	4935      	ldr	r1, [pc, #212]	; (1446c <hci_cmd_handle+0x34c>)
   14396:	2303      	movs	r3, #3
		BT_ERR("Invalid HCI CMD packet length");
   14398:	4a35      	ldr	r2, [pc, #212]	; (14470 <hci_cmd_handle+0x350>)
   1439a:	9309      	str	r3, [sp, #36]	; 0x24
   1439c:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
   143a0:	930d      	str	r3, [sp, #52]	; 0x34
   143a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   143a6:	462b      	mov	r3, r5
   143a8:	aa0d      	add	r2, sp, #52	; 0x34
   143aa:	f012 fb9d 	bl	26ae8 <z_impl_z_log_msg2_static_create>
}
   143ae:	4628      	mov	r0, r5
   143b0:	b011      	add	sp, #68	; 0x44
   143b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   143b4:	2f01      	cmp	r7, #1
   143b6:	f47f aee9 	bne.w	1418c <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   143ba:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   143bc:	4b2d      	ldr	r3, [pc, #180]	; (14474 <hci_cmd_handle+0x354>)
   143be:	6811      	ldr	r1, [r2, #0]
   143c0:	6852      	ldr	r2, [r2, #4]
   143c2:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   143c4:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   143c6:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   143c8:	f014 fbd5 	bl	28b76 <bt_hci_cmd_complete_create>
   143cc:	2101      	movs	r1, #1
   143ce:	4605      	mov	r5, r0
   143d0:	3008      	adds	r0, #8
   143d2:	f015 fd7e 	bl	29ed2 <net_buf_simple_add>
	ccst->status = status;
   143d6:	2300      	movs	r3, #0
   143d8:	7003      	strb	r3, [r0, #0]
}
   143da:	e6db      	b.n	14194 <hci_cmd_handle+0x74>
	switch (ocf) {
   143dc:	2f7b      	cmp	r7, #123	; 0x7b
   143de:	f000 837f 	beq.w	14ae0 <hci_cmd_handle+0x9c0>
   143e2:	2f7c      	cmp	r7, #124	; 0x7c
   143e4:	f47f aed2 	bne.w	1418c <hci_cmd_handle+0x6c>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   143e8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   143ea:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   143ec:	8859      	ldrh	r1, [r3, #2]
   143ee:	b2b0      	uxth	r0, r6
   143f0:	f003 fee2 	bl	181b8 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   143f4:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   143f6:	2103      	movs	r1, #3
   143f8:	8828      	ldrh	r0, [r5, #0]
   143fa:	f014 fbbc 	bl	28b76 <bt_hci_cmd_complete_create>
   143fe:	2103      	movs	r1, #3
   14400:	4603      	mov	r3, r0
   14402:	3008      	adds	r0, #8
   14404:	9308      	str	r3, [sp, #32]
   14406:	f015 fd64 	bl	29ed2 <net_buf_simple_add>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1440a:	7004      	strb	r4, [r0, #0]
	return evt;
   1440c:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   1440e:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   14412:	e6bf      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14414:	2107      	movs	r1, #7
   14416:	f014 fbae 	bl	28b76 <bt_hci_cmd_complete_create>
   1441a:	2107      	movs	r1, #7
   1441c:	4603      	mov	r3, r0
   1441e:	3008      	adds	r0, #8
   14420:	9308      	str	r3, [sp, #32]
   14422:	f015 fd56 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14426:	4601      	mov	r1, r0
   14428:	2000      	movs	r0, #0
   1442a:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   1442e:	f7ff fb0f 	bl	13a50 <ll_addr_read>
	return evt;
   14432:	9d08      	ldr	r5, [sp, #32]
}
   14434:	e6ae      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14436:	2109      	movs	r1, #9
   14438:	f014 fb9d 	bl	28b76 <bt_hci_cmd_complete_create>
   1443c:	2109      	movs	r1, #9
   1443e:	4603      	mov	r3, r0
   14440:	3008      	adds	r0, #8
   14442:	9308      	str	r3, [sp, #32]
   14444:	f015 fd45 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14448:	2100      	movs	r1, #0
   1444a:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1444c:	2208      	movs	r2, #8
	rp->status = 0x00;
   1444e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14452:	f014 f9b8 	bl	287c6 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   14456:	2360      	movs	r3, #96	; 0x60
	return evt;
   14458:	9d08      	ldr	r5, [sp, #32]
	rp->features[4] = (1 << 5) | (1 << 6);
   1445a:	7163      	strb	r3, [r4, #5]
}
   1445c:	e69a      	b.n	14194 <hci_cmd_handle+0x74>
   1445e:	bf00      	nop
   14460:	20005ea4 	.word	0x20005ea4
   14464:	20000944 	.word	0x20000944
   14468:	0002ca3c 	.word	0x0002ca3c
   1446c:	0002ca20 	.word	0x0002ca20
   14470:	0002cc94 	.word	0x0002cc94
   14474:	20000150 	.word	0x20000150
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14478:	2141      	movs	r1, #65	; 0x41
   1447a:	f014 fb7c 	bl	28b76 <bt_hci_cmd_complete_create>
   1447e:	2141      	movs	r1, #65	; 0x41
   14480:	4603      	mov	r3, r0
   14482:	3008      	adds	r0, #8
   14484:	9308      	str	r3, [sp, #32]
   14486:	f015 fd24 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   1448a:	2100      	movs	r1, #0
   1448c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1448e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   14490:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   14494:	f014 f997 	bl	287c6 <memset>
	rp->commands[0] |= BIT(5);
   14498:	7861      	ldrb	r1, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
   1449a:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[10] |= BIT(2);
   1449c:	7ae2      	ldrb	r2, [r4, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   1449e:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[0] |= BIT(5);
   144a0:	f041 0120 	orr.w	r1, r1, #32
   144a4:	7061      	strb	r1, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
   144a6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	return evt;
   144aa:	9d08      	ldr	r5, [sp, #32]
	rp->commands[14] |= BIT(3) | BIT(5);
   144ac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
   144b0:	f061 010f 	orn	r1, r1, #15
   144b4:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   144b8:	73e3      	strb	r3, [r4, #15]
	rp->commands[35] |= BIT(3);
   144ba:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[15] |= BIT(1);
   144be:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[10] |= BIT(2);
   144c0:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   144c4:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[15] |= BIT(1);
   144c8:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   144cc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[10] |= BIT(2);
   144d0:	72e2      	strb	r2, [r4, #11]
	rp->commands[39] |= BIT(2);
   144d2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
	rp->commands[22] |= BIT(2);
   144d6:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[15] |= BIT(1);
   144d8:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   144da:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   144dc:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[39] |= BIT(2);
   144e0:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[22] |= BIT(2);
   144e4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   144e8:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   144ec:	71a0      	strb	r0, [r4, #6]
	rp->commands[38] |= BIT(7);
   144ee:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[39] |= BIT(2);
   144f2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
	rp->commands[22] |= BIT(2);
   144f6:	75e2      	strb	r2, [r4, #23]
	rp->commands[28] |= BIT(3);
   144f8:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   144fa:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   144fe:	76a3      	strb	r3, [r4, #26]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   14500:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   14504:	f060 007f 	orn	r0, r0, #127	; 0x7f
   14508:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
   1450c:	f041 0109 	orr.w	r1, r1, #9
	rp->commands[26] |= BIT(4) | BIT(5);
   14510:	20ff      	movs	r0, #255	; 0xff
	rp->commands[32] |= BIT(4) | BIT(5);
   14512:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   14516:	f063 0306 	orn	r3, r3, #6
	rp->commands[28] |= BIT(0);
   1451a:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   1451c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
   14520:	76e0      	strb	r0, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   14522:	7720      	strb	r0, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   14524:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   14528:	e634      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1452a:	2109      	movs	r1, #9
   1452c:	f014 fb23 	bl	28b76 <bt_hci_cmd_complete_create>
   14530:	2109      	movs	r1, #9
   14532:	4603      	mov	r3, r0
   14534:	3008      	adds	r0, #8
   14536:	9308      	str	r3, [sp, #32]
   14538:	f015 fccb 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   1453c:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   1453e:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   14540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   14544:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   14546:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   14548:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   1454c:	7083      	strb	r3, [r0, #2]
   1454e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   14550:	2305      	movs	r3, #5
	return evt;
   14552:	9d08      	ldr	r5, [sp, #32]
	rp->lmp_version = LL_VERSION_NUMBER;
   14554:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   14556:	7144      	strb	r4, [r0, #5]
   14558:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1455a:	71c2      	strb	r2, [r0, #7]
   1455c:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   1455e:	e619      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   14560:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   14562:	79c1      	ldrb	r1, [r0, #7]
   14564:	f006 ff08 	bl	1b378 <ll_priv_mode_set>
   14568:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1456a:	8828      	ldrh	r0, [r5, #0]
   1456c:	2101      	movs	r1, #1
   1456e:	f014 fb02 	bl	28b76 <bt_hci_cmd_complete_create>
   14572:	2101      	movs	r1, #1
   14574:	4605      	mov	r5, r0
   14576:	3008      	adds	r0, #8
   14578:	f015 fcab 	bl	29ed2 <net_buf_simple_add>
	ccst->status = status;
   1457c:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   1457e:	e609      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14580:	2103      	movs	r1, #3
   14582:	f014 faf8 	bl	28b76 <bt_hci_cmd_complete_create>
   14586:	2103      	movs	r1, #3
   14588:	4603      	mov	r3, r0
   1458a:	3008      	adds	r0, #8
   1458c:	9308      	str	r3, [sp, #32]
   1458e:	f015 fca0 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14592:	4601      	mov	r1, r0
   14594:	2300      	movs	r3, #0
   14596:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1459a:	3001      	adds	r0, #1
   1459c:	f7ff fa80 	bl	13aa0 <ll_tx_pwr_get>
	return evt;
   145a0:	9d08      	ldr	r5, [sp, #32]
   145a2:	e5f7      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   145a4:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   145a6:	7896      	ldrb	r6, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   145a8:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   145aa:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   145ac:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   145b0:	07f3      	lsls	r3, r6, #31
		cmd->tx_phys |= mask_phys;
   145b2:	bf48      	it	mi
   145b4:	f041 0103 	orrmi.w	r1, r1, #3
   145b8:	7913      	ldrb	r3, [r2, #4]
   145ba:	bf48      	it	mi
   145bc:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   145be:	07b6      	lsls	r6, r6, #30
		cmd->rx_phys |= mask_phys;
   145c0:	bf44      	itt	mi
   145c2:	f043 0303 	orrmi.w	r3, r3, #3
   145c6:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   145c8:	ea43 0201 	orr.w	r2, r3, r1
   145cc:	f032 0203 	bics.w	r2, r2, #3
   145d0:	f040 82d5 	bne.w	14b7e <hci_cmd_handle+0xa5e>
	if (!(cmd->tx_phys & 0x07) ||
   145d4:	074e      	lsls	r6, r1, #29
   145d6:	f000 82cc 	beq.w	14b72 <hci_cmd_handle+0xa52>
   145da:	075a      	lsls	r2, r3, #29
   145dc:	f000 82c9 	beq.w	14b72 <hci_cmd_handle+0xa52>
	if (phy_opts & 0x03) {
   145e0:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   145e4:	bf1c      	itt	ne
   145e6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   145ea:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   145ee:	4638      	mov	r0, r7
   145f0:	f003 fd76 	bl	180e0 <ll_phy_req_send>
   145f4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   145f6:	8828      	ldrh	r0, [r5, #0]
   145f8:	f014 facf 	bl	28b9a <bt_hci_cmd_status_create>
   145fc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   145fe:	e5c9      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   14600:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   14602:	781a      	ldrb	r2, [r3, #0]
   14604:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   14606:	bf4a      	itet	mi
   14608:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1460a:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   1460c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1460e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   14610:	bf4a      	itet	mi
   14612:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   14614:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   14616:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   14618:	f003 fd58 	bl	180cc <ll_phy_default_set>
   1461c:	e7a4      	b.n	14568 <hci_cmd_handle+0x448>
	handle = sys_le16_to_cpu(cmd->handle);
   1461e:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14620:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   14622:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14624:	f014 faa7 	bl	28b76 <bt_hci_cmd_complete_create>
   14628:	2105      	movs	r1, #5
   1462a:	4603      	mov	r3, r0
   1462c:	3008      	adds	r0, #8
   1462e:	9308      	str	r3, [sp, #32]
   14630:	f015 fc4f 	bl	29ed2 <net_buf_simple_add>
   14634:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   14636:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   14638:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1463a:	1ce1      	adds	r1, r4, #3
   1463c:	f003 fd28 	bl	18090 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   14640:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   14642:	7020      	strb	r0, [r4, #0]
   14644:	2b00      	cmp	r3, #0
   14646:	fa93 f2a3 	rbit	r2, r3
   1464a:	7923      	ldrb	r3, [r4, #4]
   1464c:	fab2 f282 	clz	r2, r2
   14650:	bf08      	it	eq
   14652:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   14656:	2b00      	cmp	r3, #0
   14658:	fa93 f3a3 	rbit	r3, r3
   1465c:	fab3 f383 	clz	r3, r3
   14660:	f102 0201 	add.w	r2, r2, #1
   14664:	bf08      	it	eq
   14666:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1466a:	70e2      	strb	r2, [r4, #3]
   1466c:	3301      	adds	r3, #1
	return evt;
   1466e:	9d08      	ldr	r5, [sp, #32]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   14670:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   14672:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   14676:	e58d      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14678:	2109      	movs	r1, #9
   1467a:	f014 fa7c 	bl	28b76 <bt_hci_cmd_complete_create>
   1467e:	2109      	movs	r1, #9
   14680:	4603      	mov	r3, r0
   14682:	3008      	adds	r0, #8
   14684:	9308      	str	r3, [sp, #32]
   14686:	f015 fc24 	bl	29ed2 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1468a:	ab0a      	add	r3, sp, #40	; 0x28
   1468c:	4604      	mov	r4, r0
   1468e:	aa09      	add	r2, sp, #36	; 0x24
   14690:	f10d 011e 	add.w	r1, sp, #30
   14694:	a807      	add	r0, sp, #28
   14696:	f003 fcef 	bl	18078 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1469a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1469e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   146a2:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   146a6:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   146aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   146ae:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   146b2:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   146b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   146b8:	7022      	strb	r2, [r4, #0]
	return evt;
   146ba:	9d08      	ldr	r5, [sp, #32]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   146bc:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   146c0:	e568      	b.n	14194 <hci_cmd_handle+0x74>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   146c2:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   146c4:	8818      	ldrh	r0, [r3, #0]
   146c6:	f006 fe4d 	bl	1b364 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   146ca:	8828      	ldrh	r0, [r5, #0]
   146cc:	2101      	movs	r1, #1
   146ce:	e67b      	b.n	143c8 <hci_cmd_handle+0x2a8>
	status = ll_rl_enable(cmd->enable);
   146d0:	68a3      	ldr	r3, [r4, #8]
   146d2:	7818      	ldrb	r0, [r3, #0]
   146d4:	f006 fe2a 	bl	1b32c <ll_rl_enable>
   146d8:	e746      	b.n	14568 <hci_cmd_handle+0x448>
	memcpy(dst, src, sizeof(*dst));
   146da:	2207      	movs	r2, #7
   146dc:	68a1      	ldr	r1, [r4, #8]
   146de:	a80a      	add	r0, sp, #40	; 0x28
   146e0:	f014 f866 	bl	287b0 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   146e4:	8828      	ldrh	r0, [r5, #0]
   146e6:	2107      	movs	r1, #7
   146e8:	f014 fa45 	bl	28b76 <bt_hci_cmd_complete_create>
   146ec:	2107      	movs	r1, #7
   146ee:	4603      	mov	r3, r0
   146f0:	3008      	adds	r0, #8
   146f2:	9308      	str	r3, [sp, #32]
   146f4:	f015 fbed 	bl	29ed2 <net_buf_simple_add>
   146f8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   146fa:	1c41      	adds	r1, r0, #1
   146fc:	a80a      	add	r0, sp, #40	; 0x28
   146fe:	f006 fde3 	bl	1b2c8 <ll_rl_lrpa_get>
   14702:	7020      	strb	r0, [r4, #0]
	return evt;
   14704:	9d08      	ldr	r5, [sp, #32]
   14706:	e545      	b.n	14194 <hci_cmd_handle+0x74>
   14708:	2207      	movs	r2, #7
   1470a:	68a1      	ldr	r1, [r4, #8]
   1470c:	a80a      	add	r0, sp, #40	; 0x28
   1470e:	f014 f84f 	bl	287b0 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14712:	8828      	ldrh	r0, [r5, #0]
   14714:	2107      	movs	r1, #7
   14716:	f014 fa2e 	bl	28b76 <bt_hci_cmd_complete_create>
   1471a:	2107      	movs	r1, #7
   1471c:	4603      	mov	r3, r0
   1471e:	3008      	adds	r0, #8
   14720:	9308      	str	r3, [sp, #32]
   14722:	f015 fbd6 	bl	29ed2 <net_buf_simple_add>
   14726:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   14728:	1c41      	adds	r1, r0, #1
   1472a:	a80a      	add	r0, sp, #40	; 0x28
   1472c:	f006 fd92 	bl	1b254 <ll_rl_crpa_get>
   14730:	7020      	strb	r0, [r4, #0]
	return evt;
   14732:	9d08      	ldr	r5, [sp, #32]
   14734:	e52e      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14736:	2102      	movs	r1, #2
   14738:	f014 fa1d 	bl	28b76 <bt_hci_cmd_complete_create>
   1473c:	2102      	movs	r1, #2
   1473e:	4603      	mov	r3, r0
   14740:	3008      	adds	r0, #8
   14742:	9308      	str	r3, [sp, #32]
   14744:	f015 fbc5 	bl	29ed2 <net_buf_simple_add>
   14748:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1474a:	f006 fc3f 	bl	1afcc <ll_rl_size_get>
	rp->status = 0x00;
   1474e:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   14750:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   14752:	7023      	strb	r3, [r4, #0]
	return evt;
   14754:	9d08      	ldr	r5, [sp, #32]
   14756:	e51d      	b.n	14194 <hci_cmd_handle+0x74>
	status = ll_rl_clear();
   14758:	f006 fc3a 	bl	1afd0 <ll_rl_clear>
   1475c:	e704      	b.n	14568 <hci_cmd_handle+0x448>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1475e:	68a0      	ldr	r0, [r4, #8]
   14760:	f006 fc78 	bl	1b054 <ll_rl_remove>
   14764:	e700      	b.n	14568 <hci_cmd_handle+0x448>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   14766:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   14768:	f100 0217 	add.w	r2, r0, #23
   1476c:	1dc1      	adds	r1, r0, #7
   1476e:	f007 f8bb 	bl	1b8e8 <ll_rl_add>
   14772:	e6f9      	b.n	14568 <hci_cmd_handle+0x448>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   14774:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   14776:	8859      	ldrh	r1, [r3, #2]
   14778:	8818      	ldrh	r0, [r3, #0]
   1477a:	f003 fc73 	bl	18064 <ll_length_default_set>
   1477e:	e6f3      	b.n	14568 <hci_cmd_handle+0x448>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14780:	2105      	movs	r1, #5
   14782:	f014 f9f8 	bl	28b76 <bt_hci_cmd_complete_create>
   14786:	2105      	movs	r1, #5
   14788:	4603      	mov	r3, r0
   1478a:	3008      	adds	r0, #8
   1478c:	9308      	str	r3, [sp, #32]
   1478e:	f015 fba0 	bl	29ed2 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   14792:	a90a      	add	r1, sp, #40	; 0x28
   14794:	4604      	mov	r4, r0
   14796:	a809      	add	r0, sp, #36	; 0x24
   14798:	f003 fc58 	bl	1804c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1479c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   147a0:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   147a4:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   147a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   147aa:	7022      	strb	r2, [r4, #0]
	return evt;
   147ac:	9d08      	ldr	r5, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   147ae:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   147b2:	e4ef      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   147b4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   147b6:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   147b8:	889a      	ldrh	r2, [r3, #4]
   147ba:	8859      	ldrh	r1, [r3, #2]
   147bc:	b2b0      	uxth	r0, r6
   147be:	f003 fbfb 	bl	17fb8 <ll_length_req_send>
   147c2:	e617      	b.n	143f4 <hci_cmd_handle+0x2d4>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   147c4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   147c6:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   147c8:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   147ca:	7892      	ldrb	r2, [r2, #2]
   147cc:	9300      	str	r3, [sp, #0]
   147ce:	e9cd 3301 	strd	r3, r3, [sp, #4]
   147d2:	2102      	movs	r1, #2
   147d4:	b2a0      	uxth	r0, r4
   147d6:	f003 facb 	bl	17d70 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   147da:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   147dc:	4603      	mov	r3, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   147de:	8828      	ldrh	r0, [r5, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   147e0:	461d      	mov	r5, r3
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   147e2:	f014 f9c8 	bl	28b76 <bt_hci_cmd_complete_create>
   147e6:	2103      	movs	r1, #3
   147e8:	4603      	mov	r3, r0
   147ea:	3008      	adds	r0, #8
   147ec:	9308      	str	r3, [sp, #32]
   147ee:	f015 fb70 	bl	29ed2 <net_buf_simple_add>
	rp->status = status;
   147f2:	7005      	strb	r5, [r0, #0]
	return evt;
   147f4:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   147f6:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   147fa:	e4cb      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   147fc:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   147fe:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   14800:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   14802:	8853      	ldrh	r3, [r2, #2]
   14804:	9102      	str	r1, [sp, #8]
   14806:	88d1      	ldrh	r1, [r2, #6]
   14808:	9101      	str	r1, [sp, #4]
   1480a:	8891      	ldrh	r1, [r2, #4]
   1480c:	9100      	str	r1, [sp, #0]
   1480e:	2200      	movs	r2, #0
   14810:	e7df      	b.n	147d2 <hci_cmd_handle+0x6b2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14812:	2109      	movs	r1, #9
   14814:	f014 f9af 	bl	28b76 <bt_hci_cmd_complete_create>
   14818:	2109      	movs	r1, #9
   1481a:	4603      	mov	r3, r0
   1481c:	3008      	adds	r0, #8
   1481e:	9308      	str	r3, [sp, #32]
   14820:	f015 fb57 	bl	29ed2 <net_buf_simple_add>
	dst[0] = val;
   14824:	2473      	movs	r4, #115	; 0x73
	rp->status = 0x00;
   14826:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   14828:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
   1482a:	220f      	movs	r2, #15
   1482c:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   1482e:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   14830:	70c2      	strb	r2, [r0, #3]
   14832:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14834:	2413      	movs	r4, #19
	dst[0] = val;
   14836:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
   14838:	2202      	movs	r2, #2
	return evt;
   1483a:	9d08      	ldr	r5, [sp, #32]
   1483c:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   1483e:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   14840:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   14842:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   14844:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   14846:	e4a5      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   14848:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   1484a:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   1484c:	f102 030c 	add.w	r3, r2, #12
   14850:	f831 0b02 	ldrh.w	r0, [r1], #2
   14854:	320a      	adds	r2, #10
   14856:	f005 fe59 	bl	1a50c <ll_enc_req_send>
   1485a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1485c:	8828      	ldrh	r0, [r5, #0]
   1485e:	f014 f99c 	bl	28b9a <bt_hci_cmd_status_create>
   14862:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   14864:	e496      	b.n	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14866:	2109      	movs	r1, #9
   14868:	f014 f985 	bl	28b76 <bt_hci_cmd_complete_create>
   1486c:	2109      	movs	r1, #9
   1486e:	4603      	mov	r3, r0
   14870:	3008      	adds	r0, #8
   14872:	9308      	str	r3, [sp, #32]
   14874:	f015 fb2d 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14878:	2300      	movs	r3, #0
   1487a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1487e:	2108      	movs	r1, #8
   14880:	f007 fd24 	bl	1c2cc <lll_csrand_get>
	return evt;
   14884:	9d08      	ldr	r5, [sp, #32]
   14886:	e485      	b.n	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   14888:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1488a:	aa0a      	add	r2, sp, #40	; 0x28
   1488c:	2300      	movs	r3, #0
   1488e:	f100 0110 	add.w	r1, r0, #16
   14892:	f009 fda9 	bl	1e3e8 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14896:	8828      	ldrh	r0, [r5, #0]
   14898:	2111      	movs	r1, #17
   1489a:	f014 f96c 	bl	28b76 <bt_hci_cmd_complete_create>
   1489e:	2111      	movs	r1, #17
   148a0:	4603      	mov	r3, r0
   148a2:	3008      	adds	r0, #8
   148a4:	9308      	str	r3, [sp, #32]
   148a6:	f015 fb14 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   148aa:	2300      	movs	r3, #0
   148ac:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   148b0:	2210      	movs	r2, #16
   148b2:	a90a      	add	r1, sp, #40	; 0x28
   148b4:	f013 ff7c 	bl	287b0 <memcpy>
	return evt;
   148b8:	9d08      	ldr	r5, [sp, #32]
   148ba:	e46b      	b.n	14194 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   148bc:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   148be:	8818      	ldrh	r0, [r3, #0]
   148c0:	f003 fb42 	bl	17f48 <ll_feature_req_send>
   148c4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   148c6:	8828      	ldrh	r0, [r5, #0]
   148c8:	f014 f967 	bl	28b9a <bt_hci_cmd_status_create>
   148cc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   148ce:	e461      	b.n	14194 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   148d0:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   148d2:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   148d4:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   148d6:	f014 f94e 	bl	28b76 <bt_hci_cmd_complete_create>
   148da:	2108      	movs	r1, #8
   148dc:	4603      	mov	r3, r0
   148de:	4408      	add	r0, r1
   148e0:	9308      	str	r3, [sp, #32]
   148e2:	f015 faf6 	bl	29ed2 <net_buf_simple_add>
   148e6:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   148e8:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   148ea:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   148ec:	f003 faca 	bl	17e84 <ll_chm_get>
	rp->status = status;
   148f0:	7020      	strb	r0, [r4, #0]
	return evt;
   148f2:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_le16_to_cpu(handle);
   148f4:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   148f8:	e44c      	b.n	14194 <hci_cmd_handle+0x74>
	status = ll_chm_update(&cmd->ch_map[0]);
   148fa:	68a0      	ldr	r0, [r4, #8]
   148fc:	f006 f8bc 	bl	1aa78 <ll_chm_update>
   14900:	e632      	b.n	14568 <hci_cmd_handle+0x448>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   14902:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   14904:	890a      	ldrh	r2, [r1, #8]
   14906:	884b      	ldrh	r3, [r1, #2]
   14908:	8808      	ldrh	r0, [r1, #0]
   1490a:	9202      	str	r2, [sp, #8]
   1490c:	88ca      	ldrh	r2, [r1, #6]
   1490e:	9201      	str	r2, [sp, #4]
   14910:	8889      	ldrh	r1, [r1, #4]
   14912:	9100      	str	r1, [sp, #0]
   14914:	2200      	movs	r2, #0
   14916:	4611      	mov	r1, r2
   14918:	f003 fa2a 	bl	17d70 <ll_conn_update>
   1491c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1491e:	8828      	ldrh	r0, [r5, #0]
   14920:	f014 f93b 	bl	28b9a <bt_hci_cmd_status_create>
   14924:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   14926:	e435      	b.n	14194 <hci_cmd_handle+0x74>
	status = ll_fal_remove(&cmd->addr);
   14928:	68a0      	ldr	r0, [r4, #8]
   1492a:	f006 fabb 	bl	1aea4 <ll_fal_remove>
   1492e:	e61b      	b.n	14568 <hci_cmd_handle+0x448>
	status = ll_fal_add(&cmd->addr);
   14930:	68a0      	ldr	r0, [r4, #8]
   14932:	f006 fa1d 	bl	1ad70 <ll_fal_add>
   14936:	e617      	b.n	14568 <hci_cmd_handle+0x448>
	status = ll_fal_clear();
   14938:	f006 f9f0 	bl	1ad1c <ll_fal_clear>
   1493c:	e614      	b.n	14568 <hci_cmd_handle+0x448>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1493e:	2102      	movs	r1, #2
   14940:	f014 f919 	bl	28b76 <bt_hci_cmd_complete_create>
   14944:	2102      	movs	r1, #2
   14946:	4603      	mov	r3, r0
   14948:	3008      	adds	r0, #8
   1494a:	9308      	str	r3, [sp, #32]
   1494c:	f015 fac1 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14950:	2300      	movs	r3, #0
   14952:	7003      	strb	r3, [r0, #0]
   14954:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   14956:	f006 f9df 	bl	1ad18 <ll_fal_size_get>
   1495a:	7060      	strb	r0, [r4, #1]
	return evt;
   1495c:	9d08      	ldr	r5, [sp, #32]
   1495e:	e419      	b.n	14194 <hci_cmd_handle+0x74>
	status = ll_connect_disable(node_rx);
   14960:	4630      	mov	r0, r6
   14962:	f005 fd85 	bl	1a470 <ll_connect_disable>
   14966:	e5ff      	b.n	14568 <hci_cmd_handle+0x448>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   14968:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   1496a:	f8b4 6013 	ldrh.w	r6, [r4, #19]
   1496e:	7963      	ldrb	r3, [r4, #5]
   14970:	7922      	ldrb	r2, [r4, #4]
   14972:	8861      	ldrh	r1, [r4, #2]
   14974:	8820      	ldrh	r0, [r4, #0]
   14976:	9604      	str	r6, [sp, #16]
   14978:	f8b4 6011 	ldrh.w	r6, [r4, #17]
   1497c:	9603      	str	r6, [sp, #12]
   1497e:	f8b4 600f 	ldrh.w	r6, [r4, #15]
   14982:	9602      	str	r6, [sp, #8]
   14984:	7b26      	ldrb	r6, [r4, #12]
   14986:	9601      	str	r6, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   14988:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   1498a:	9400      	str	r4, [sp, #0]
   1498c:	f7ee fedc 	bl	3748 <ll_create_connection>
   14990:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   14992:	8828      	ldrh	r0, [r5, #0]
   14994:	f014 f901 	bl	28b9a <bt_hci_cmd_status_create>
   14998:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1499a:	f7ff bbfb 	b.w	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   1499e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   149a0:	7818      	ldrb	r0, [r3, #0]
   149a2:	2800      	cmp	r0, #0
   149a4:	f000 80e0 	beq.w	14b68 <hci_cmd_handle+0xa48>
   149a8:	785b      	ldrb	r3, [r3, #1]
   149aa:	2b00      	cmp	r3, #0
   149ac:	f000 80dc 	beq.w	14b68 <hci_cmd_handle+0xa48>
			dup_count = 0;
   149b0:	4976      	ldr	r1, [pc, #472]	; (14b8c <hci_cmd_handle+0xa6c>)
			dup_curr = 0U;
   149b2:	4a77      	ldr	r2, [pc, #476]	; (14b90 <hci_cmd_handle+0xa70>)
			dup_count = 0;
   149b4:	2300      	movs	r3, #0
   149b6:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   149b8:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   149ba:	f002 fc5d 	bl	17278 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   149be:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   149c0:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   149c2:	f04f 0101 	mov.w	r1, #1
   149c6:	8828      	ldrh	r0, [r5, #0]
		status = BT_HCI_ERR_SUCCESS;
   149c8:	bf08      	it	eq
   149ca:	2400      	moveq	r4, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   149cc:	e5cf      	b.n	1456e <hci_cmd_handle+0x44e>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   149ce:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   149d0:	7963      	ldrb	r3, [r4, #5]
   149d2:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   149d6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   149da:	7820      	ldrb	r0, [r4, #0]
   149dc:	79a4      	ldrb	r4, [r4, #6]
   149de:	9400      	str	r4, [sp, #0]
   149e0:	f7ed f82a 	bl	1a38 <ll_scan_params_set>
   149e4:	e5c0      	b.n	14568 <hci_cmd_handle+0x448>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   149e6:	68a1      	ldr	r1, [r4, #8]
   149e8:	f811 0b01 	ldrb.w	r0, [r1], #1
   149ec:	f002 fbca 	bl	17184 <ll_adv_scan_rsp_set>
   149f0:	e5ba      	b.n	14568 <hci_cmd_handle+0x448>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   149f2:	68a1      	ldr	r1, [r4, #8]
   149f4:	f811 0b01 	ldrb.w	r0, [r1], #1
   149f8:	f002 fb7a 	bl	170f0 <ll_adv_data_set>
   149fc:	e5b4      	b.n	14568 <hci_cmd_handle+0x448>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   149fe:	2102      	movs	r1, #2
   14a00:	f014 f8b9 	bl	28b76 <bt_hci_cmd_complete_create>
   14a04:	2102      	movs	r1, #2
   14a06:	4603      	mov	r3, r0
   14a08:	3008      	adds	r0, #8
   14a0a:	9308      	str	r3, [sp, #32]
   14a0c:	f015 fa61 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14a10:	2300      	movs	r3, #0
   14a12:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   14a14:	7043      	strb	r3, [r0, #1]
	return evt;
   14a16:	9d08      	ldr	r5, [sp, #32]
   14a18:	f7ff bbbc 	b.w	14194 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   14a1c:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   14a1e:	7ba6      	ldrb	r6, [r4, #14]
   14a20:	79a3      	ldrb	r3, [r4, #6]
   14a22:	7962      	ldrb	r2, [r4, #5]
   14a24:	7921      	ldrb	r1, [r4, #4]
   14a26:	8820      	ldrh	r0, [r4, #0]
   14a28:	9602      	str	r6, [sp, #8]
   14a2a:	7b66      	ldrb	r6, [r4, #13]
   14a2c:	9601      	str	r6, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   14a2e:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   14a30:	9400      	str	r4, [sp, #0]
   14a32:	f002 f9dd 	bl	16df0 <ll_adv_params_set>
   14a36:	e597      	b.n	14568 <hci_cmd_handle+0x448>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   14a38:	68a1      	ldr	r1, [r4, #8]
   14a3a:	2001      	movs	r0, #1
   14a3c:	f7fe ffd6 	bl	139ec <ll_addr_set>
   14a40:	e592      	b.n	14568 <hci_cmd_handle+0x448>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14a42:	2109      	movs	r1, #9
   14a44:	f014 f897 	bl	28b76 <bt_hci_cmd_complete_create>
   14a48:	2109      	movs	r1, #9
   14a4a:	4603      	mov	r3, r0
   14a4c:	3008      	adds	r0, #8
   14a4e:	9308      	str	r3, [sp, #32]
   14a50:	f015 fa3f 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14a54:	2100      	movs	r1, #0
   14a56:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14a58:	2208      	movs	r2, #8
	rp->status = 0x00;
   14a5a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14a5e:	f013 feb2 	bl	287c6 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   14a62:	f000 fe85 	bl	15770 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   14a66:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   14a68:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   14a6c:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   14a6e:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   14a70:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   14a72:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   14a74:	70a5      	strb	r5, [r4, #2]
   14a76:	f3c1 2007 	ubfx	r0, r1, #8, #8
   14a7a:	7123      	strb	r3, [r4, #4]
   14a7c:	0a13      	lsrs	r3, r2, #8
	return evt;
   14a7e:	9d08      	ldr	r5, [sp, #32]
	dst[0] = val;
   14a80:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   14a82:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   14a84:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   14a86:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   14a88:	f7ff bb84 	b.w	14194 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14a8c:	2104      	movs	r1, #4
   14a8e:	f014 f872 	bl	28b76 <bt_hci_cmd_complete_create>
   14a92:	2104      	movs	r1, #4
   14a94:	4603      	mov	r3, r0
   14a96:	3008      	adds	r0, #8
   14a98:	9308      	str	r3, [sp, #32]
   14a9a:	f015 fa1a 	bl	29ed2 <net_buf_simple_add>
	rp->status = 0x00;
   14a9e:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   14aa0:	2103      	movs	r1, #3
	rp->status = 0x00;
   14aa2:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   14aa4:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   14aa6:	70c1      	strb	r1, [r0, #3]
	return evt;
   14aa8:	9d08      	ldr	r5, [sp, #32]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   14aaa:	7042      	strb	r2, [r0, #1]
   14aac:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   14aae:	f7ff bb71 	b.w	14194 <hci_cmd_handle+0x74>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14ab2:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   14ab4:	4b37      	ldr	r3, [pc, #220]	; (14b94 <hci_cmd_handle+0xa74>)
   14ab6:	6811      	ldr	r1, [r2, #0]
   14ab8:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   14aba:	6019      	str	r1, [r3, #0]
   14abc:	e482      	b.n	143c4 <hci_cmd_handle+0x2a4>
	status = ll_adv_enable(cmd->enable);
   14abe:	68a3      	ldr	r3, [r4, #8]
   14ac0:	7818      	ldrb	r0, [r3, #0]
   14ac2:	f7ec fe99 	bl	17f8 <ll_adv_enable>
   14ac6:	e54f      	b.n	14568 <hci_cmd_handle+0x448>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   14ac8:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   14aca:	7899      	ldrb	r1, [r3, #2]
   14acc:	8818      	ldrh	r0, [r3, #0]
   14ace:	f003 f9f9 	bl	17ec4 <ll_terminate_ind_send>
   14ad2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   14ad4:	8828      	ldrh	r0, [r5, #0]
   14ad6:	f014 f860 	bl	28b9a <bt_hci_cmd_status_create>
   14ada:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   14adc:	f7ff bb5a 	b.w	14194 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   14ae0:	68a3      	ldr	r3, [r4, #8]
   14ae2:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   14ae4:	a90a      	add	r1, sp, #40	; 0x28
   14ae6:	b2b0      	uxth	r0, r6
   14ae8:	f003 fb42 	bl	18170 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14aec:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   14aee:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14af0:	8828      	ldrh	r0, [r5, #0]
   14af2:	f014 f840 	bl	28b76 <bt_hci_cmd_complete_create>
   14af6:	2105      	movs	r1, #5
   14af8:	4603      	mov	r3, r0
   14afa:	3008      	adds	r0, #8
   14afc:	9308      	str	r3, [sp, #32]
   14afe:	f015 f9e8 	bl	29ed2 <net_buf_simple_add>
	rp->status = status;
   14b02:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   14b04:	f8a0 6001 	strh.w	r6, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   14b08:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   14b0c:	9d08      	ldr	r5, [sp, #32]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   14b0e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   14b12:	f7ff bb3f 	b.w	14194 <hci_cmd_handle+0x74>
	dup_count = DUP_FILTER_DISABLED;
   14b16:	481d      	ldr	r0, [pc, #116]	; (14b8c <hci_cmd_handle+0xa6c>)
	event_mask = DEFAULT_EVENT_MASK;
   14b18:	491f      	ldr	r1, [pc, #124]	; (14b98 <hci_cmd_handle+0xa78>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   14b1a:	4a20      	ldr	r2, [pc, #128]	; (14b9c <hci_cmd_handle+0xa7c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   14b1c:	4b1d      	ldr	r3, [pc, #116]	; (14b94 <hci_cmd_handle+0xa74>)
	dup_count = DUP_FILTER_DISABLED;
   14b1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	event_mask = DEFAULT_EVENT_MASK;
   14b22:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   14b26:	f641 77ff 	movw	r7, #8191	; 0x1fff
   14b2a:	e9c1 6700 	strd	r6, r7, [r1]
	dup_count = DUP_FILTER_DISABLED;
   14b2e:	6004      	str	r4, [r0, #0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   14b30:	2100      	movs	r1, #0
   14b32:	2000      	movs	r0, #0
   14b34:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   14b38:	201f      	movs	r0, #31
   14b3a:	2100      	movs	r1, #0
   14b3c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   14b40:	f001 fee6 	bl	16910 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   14b44:	8828      	ldrh	r0, [r5, #0]
   14b46:	2101      	movs	r1, #1
   14b48:	f014 f815 	bl	28b76 <bt_hci_cmd_complete_create>
   14b4c:	2101      	movs	r1, #1
   14b4e:	4605      	mov	r5, r0
   14b50:	3008      	adds	r0, #8
   14b52:	f015 f9be 	bl	29ed2 <net_buf_simple_add>
	conn_count = 0U;
   14b56:	4a12      	ldr	r2, [pc, #72]	; (14ba0 <hci_cmd_handle+0xa80>)
	ccst->status = status;
   14b58:	2300      	movs	r3, #0
   14b5a:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   14b5c:	6013      	str	r3, [r2, #0]
}
   14b5e:	f7ff bb19 	b.w	14194 <hci_cmd_handle+0x74>
   14b62:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   14b64:	4b0d      	ldr	r3, [pc, #52]	; (14b9c <hci_cmd_handle+0xa7c>)
   14b66:	e7a6      	b.n	14ab6 <hci_cmd_handle+0x996>
		dup_count = DUP_FILTER_DISABLED;
   14b68:	4b08      	ldr	r3, [pc, #32]	; (14b8c <hci_cmd_handle+0xa6c>)
   14b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14b6e:	601a      	str	r2, [r3, #0]
   14b70:	e723      	b.n	149ba <hci_cmd_handle+0x89a>
	return bt_hci_cmd_status_create(_opcode, status);
   14b72:	2112      	movs	r1, #18
   14b74:	f014 f811 	bl	28b9a <bt_hci_cmd_status_create>
   14b78:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   14b7a:	f7ff bb0b 	b.w	14194 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   14b7e:	2111      	movs	r1, #17
   14b80:	f014 f80b 	bl	28b9a <bt_hci_cmd_status_create>
   14b84:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   14b86:	f7ff bb05 	b.w	14194 <hci_cmd_handle+0x74>
   14b8a:	bf00      	nop
   14b8c:	200041ec 	.word	0x200041ec
   14b90:	200041f0 	.word	0x200041f0
   14b94:	20000158 	.word	0x20000158
   14b98:	20000150 	.word	0x20000150
   14b9c:	20003400 	.word	0x20003400
   14ba0:	200041e8 	.word	0x200041e8

00014ba4 <hci_acl_handle>:
{
   14ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   14ba8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   14baa:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   14bac:	2b03      	cmp	r3, #3
{
   14bae:	b089      	sub	sp, #36	; 0x24
	*evt = NULL;
   14bb0:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   14bb2:	d93d      	bls.n	14c30 <hci_acl_handle+0x8c>
	return net_buf_simple_pull_mem(&buf->b, len);
   14bb4:	4605      	mov	r5, r0
   14bb6:	4688      	mov	r8, r1
   14bb8:	3008      	adds	r0, #8
   14bba:	2104      	movs	r1, #4
   14bbc:	f015 f9b0 	bl	29f20 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   14bc0:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   14bc2:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   14bc4:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   14bc8:	42b3      	cmp	r3, r6
   14bca:	d34c      	bcc.n	14c66 <hci_acl_handle+0xc2>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   14bcc:	2e1b      	cmp	r6, #27
   14bce:	d843      	bhi.n	14c58 <hci_acl_handle+0xb4>
	node_tx = ll_tx_mem_acquire();
   14bd0:	f003 f880 	bl	17cd4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   14bd4:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   14bd8:	4604      	mov	r4, r0
   14bda:	2800      	cmp	r0, #0
   14bdc:	d04a      	beq.n	14c74 <hci_acl_handle+0xd0>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   14bde:	08bb      	lsrs	r3, r7, #2
   14be0:	d102      	bne.n	14be8 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   14be2:	b1ff      	cbz	r7, 14c24 <hci_acl_handle+0x80>
   14be4:	2f01      	cmp	r7, #1
   14be6:	d004      	beq.n	14bf2 <hci_acl_handle+0x4e>
		return -EINVAL;
   14be8:	f06f 0015 	mvn.w	r0, #21
}
   14bec:	b009      	add	sp, #36	; 0x24
   14bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   14bf2:	7903      	ldrb	r3, [r0, #4]
   14bf4:	f367 0301 	bfi	r3, r7, #0, #2
   14bf8:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   14bfa:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   14bfc:	68a9      	ldr	r1, [r5, #8]
   14bfe:	4632      	mov	r2, r6
   14c00:	1de0      	adds	r0, r4, #7
   14c02:	f013 fdd5 	bl	287b0 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   14c06:	4621      	mov	r1, r4
   14c08:	f3c9 000b 	ubfx	r0, r9, #0, #12
   14c0c:	f003 f86e 	bl	17cec <ll_tx_mem_enqueue>
   14c10:	2800      	cmp	r0, #0
   14c12:	d0eb      	beq.n	14bec <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   14c14:	4839      	ldr	r0, [pc, #228]	; (14cfc <hci_acl_handle+0x158>)
   14c16:	6803      	ldr	r3, [r0, #0]
   14c18:	075b      	lsls	r3, r3, #29
   14c1a:	d136      	bne.n	14c8a <hci_acl_handle+0xe6>
		ll_tx_mem_release(node_tx);
   14c1c:	4620      	mov	r0, r4
   14c1e:	f003 f85f 	bl	17ce0 <ll_tx_mem_release>
   14c22:	e7e1      	b.n	14be8 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   14c24:	7903      	ldrb	r3, [r0, #4]
   14c26:	2202      	movs	r2, #2
   14c28:	f362 0301 	bfi	r3, r2, #0, #2
   14c2c:	7103      	strb	r3, [r0, #4]
		break;
   14c2e:	e7e4      	b.n	14bfa <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   14c30:	4832      	ldr	r0, [pc, #200]	; (14cfc <hci_acl_handle+0x158>)
   14c32:	6803      	ldr	r3, [r0, #0]
   14c34:	075f      	lsls	r7, r3, #29
   14c36:	d0d7      	beq.n	14be8 <hci_acl_handle+0x44>
   14c38:	4931      	ldr	r1, [pc, #196]	; (14d00 <hci_acl_handle+0x15c>)
   14c3a:	2303      	movs	r3, #3
		BT_ERR("Invalid HCI ACL packet length");
   14c3c:	4a31      	ldr	r2, [pc, #196]	; (14d04 <hci_acl_handle+0x160>)
   14c3e:	9301      	str	r3, [sp, #4]
   14c40:	e9cd 1206 	strd	r1, r2, [sp, #24]
   14c44:	9305      	str	r3, [sp, #20]
   14c46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c4a:	4623      	mov	r3, r4
   14c4c:	aa05      	add	r2, sp, #20
   14c4e:	f011 ff4b 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   14c52:	f06f 0015 	mvn.w	r0, #21
		BT_ERR("Invalid HCI ACL packet length");
   14c56:	e7c9      	b.n	14bec <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   14c58:	4828      	ldr	r0, [pc, #160]	; (14cfc <hci_acl_handle+0x158>)
   14c5a:	6803      	ldr	r3, [r0, #0]
   14c5c:	075d      	lsls	r5, r3, #29
   14c5e:	d0c3      	beq.n	14be8 <hci_acl_handle+0x44>
   14c60:	4929      	ldr	r1, [pc, #164]	; (14d08 <hci_acl_handle+0x164>)
   14c62:	2303      	movs	r3, #3
   14c64:	e7ea      	b.n	14c3c <hci_acl_handle+0x98>
		BT_ERR("Invalid HCI ACL packet length");
   14c66:	4825      	ldr	r0, [pc, #148]	; (14cfc <hci_acl_handle+0x158>)
   14c68:	6803      	ldr	r3, [r0, #0]
   14c6a:	075e      	lsls	r6, r3, #29
   14c6c:	d0bc      	beq.n	14be8 <hci_acl_handle+0x44>
   14c6e:	4927      	ldr	r1, [pc, #156]	; (14d0c <hci_acl_handle+0x168>)
   14c70:	2303      	movs	r3, #3
   14c72:	e7e3      	b.n	14c3c <hci_acl_handle+0x98>
		BT_ERR("Tx Buffer Overflow");
   14c74:	4821      	ldr	r0, [pc, #132]	; (14cfc <hci_acl_handle+0x158>)
   14c76:	6803      	ldr	r3, [r0, #0]
   14c78:	0759      	lsls	r1, r3, #29
   14c7a:	d130      	bne.n	14cde <hci_acl_handle+0x13a>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   14c7c:	4b24      	ldr	r3, [pc, #144]	; (14d10 <hci_acl_handle+0x16c>)
   14c7e:	681b      	ldr	r3, [r3, #0]
   14c80:	019a      	lsls	r2, r3, #6
   14c82:	d410      	bmi.n	14ca6 <hci_acl_handle+0x102>
		return -ENOBUFS;
   14c84:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14c88:	e7b0      	b.n	14bec <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   14c8a:	4922      	ldr	r1, [pc, #136]	; (14d14 <hci_acl_handle+0x170>)
   14c8c:	4a1d      	ldr	r2, [pc, #116]	; (14d04 <hci_acl_handle+0x160>)
   14c8e:	2303      	movs	r3, #3
   14c90:	e9cd 1206 	strd	r1, r2, [sp, #24]
   14c94:	9301      	str	r3, [sp, #4]
   14c96:	9305      	str	r3, [sp, #20]
   14c98:	2300      	movs	r3, #0
   14c9a:	aa05      	add	r2, sp, #20
   14c9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ca0:	f011 ff22 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   14ca4:	e7ba      	b.n	14c1c <hci_acl_handle+0x78>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   14ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14cae:	2001      	movs	r0, #1
   14cb0:	f7f7 ffb0 	bl	cc14 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   14cb4:	2102      	movs	r1, #2
   14cb6:	f8c8 0000 	str.w	r0, [r8]
   14cba:	3008      	adds	r0, #8
   14cbc:	f015 f909 	bl	29ed2 <net_buf_simple_add>
	hdr->len = len;
   14cc0:	2401      	movs	r4, #1
	hdr->evt = evt;
   14cc2:	231a      	movs	r3, #26
   14cc4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   14cc6:	7044      	strb	r4, [r0, #1]
   14cc8:	f8d8 0000 	ldr.w	r0, [r8]
   14ccc:	4621      	mov	r1, r4
   14cce:	3008      	adds	r0, #8
   14cd0:	f015 f8ff 	bl	29ed2 <net_buf_simple_add>
   14cd4:	4603      	mov	r3, r0
		return -ENOBUFS;
   14cd6:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   14cda:	701c      	strb	r4, [r3, #0]
   14cdc:	e786      	b.n	14bec <hci_acl_handle+0x48>
		BT_ERR("Tx Buffer Overflow");
   14cde:	4a0e      	ldr	r2, [pc, #56]	; (14d18 <hci_acl_handle+0x174>)
   14ce0:	9206      	str	r2, [sp, #24]
   14ce2:	2303      	movs	r3, #3
   14ce4:	4a07      	ldr	r2, [pc, #28]	; (14d04 <hci_acl_handle+0x160>)
   14ce6:	9207      	str	r2, [sp, #28]
   14ce8:	9301      	str	r3, [sp, #4]
   14cea:	9305      	str	r3, [sp, #20]
   14cec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14cf0:	4623      	mov	r3, r4
   14cf2:	aa05      	add	r2, sp, #20
   14cf4:	f011 fef8 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   14cf8:	e7c0      	b.n	14c7c <hci_acl_handle+0xd8>
   14cfa:	bf00      	nop
   14cfc:	20000944 	.word	0x20000944
   14d00:	0002ca60 	.word	0x0002ca60
   14d04:	0002cc84 	.word	0x0002cc84
   14d08:	0002ca9c 	.word	0x0002ca9c
   14d0c:	0002ca78 	.word	0x0002ca78
   14d10:	20000150 	.word	0x20000150
   14d14:	0002cad4 	.word	0x0002cad4
   14d18:	0002cabc 	.word	0x0002cabc

00014d1c <hci_disconn_complete_encode>:
{
   14d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   14d1e:	4b0e      	ldr	r3, [pc, #56]	; (14d58 <hci_disconn_complete_encode+0x3c>)
   14d20:	681b      	ldr	r3, [r3, #0]
   14d22:	06db      	lsls	r3, r3, #27
   14d24:	d400      	bmi.n	14d28 <hci_disconn_complete_encode+0xc>
}
   14d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d28:	f102 0408 	add.w	r4, r2, #8
   14d2c:	4605      	mov	r5, r0
   14d2e:	460e      	mov	r6, r1
   14d30:	4620      	mov	r0, r4
   14d32:	2102      	movs	r1, #2
   14d34:	f015 f8cd 	bl	29ed2 <net_buf_simple_add>
   14d38:	4603      	mov	r3, r0
	hdr->len = len;
   14d3a:	2104      	movs	r1, #4
	hdr->evt = evt;
   14d3c:	2205      	movs	r2, #5
	hdr->len = len;
   14d3e:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   14d40:	701a      	strb	r2, [r3, #0]
   14d42:	4620      	mov	r0, r4
   14d44:	f015 f8c5 	bl	29ed2 <net_buf_simple_add>
   14d48:	2700      	movs	r7, #0
	ep->status = 0x00;
   14d4a:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   14d4c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   14d50:	782b      	ldrb	r3, [r5, #0]
   14d52:	70c3      	strb	r3, [r0, #3]
}
   14d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d56:	bf00      	nop
   14d58:	20000150 	.word	0x20000150

00014d5c <hci_disconn_complete_process>:
	conn_count--;
   14d5c:	4a02      	ldr	r2, [pc, #8]	; (14d68 <hci_disconn_complete_process+0xc>)
   14d5e:	6813      	ldr	r3, [r2, #0]
   14d60:	3b01      	subs	r3, #1
   14d62:	6013      	str	r3, [r2, #0]
}
   14d64:	4770      	bx	lr
   14d66:	bf00      	nop
   14d68:	200041e8 	.word	0x200041e8

00014d6c <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   14d6c:	7f03      	ldrb	r3, [r0, #28]
   14d6e:	f003 0303 	and.w	r3, r3, #3
   14d72:	3b01      	subs	r3, #1
   14d74:	2b01      	cmp	r3, #1
{
   14d76:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   14d78:	d90d      	bls.n	14d96 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   14d7a:	4a16      	ldr	r2, [pc, #88]	; (14dd4 <hci_acl_encode+0x68>)
   14d7c:	4916      	ldr	r1, [pc, #88]	; (14dd8 <hci_acl_encode+0x6c>)
   14d7e:	4817      	ldr	r0, [pc, #92]	; (14ddc <hci_acl_encode+0x70>)
   14d80:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   14d84:	f010 febe 	bl	25b04 <printk>
   14d88:	4040      	eors	r0, r0
   14d8a:	f380 8811 	msr	BASEPRI, r0
   14d8e:	f04f 0003 	mov.w	r0, #3
   14d92:	df02      	svc	2
		break;
	}
}
   14d94:	bd70      	pop	{r4, r5, r6, pc}
   14d96:	4604      	mov	r4, r0
   14d98:	f101 0508 	add.w	r5, r1, #8
   14d9c:	4628      	mov	r0, r5
   14d9e:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   14da0:	88e6      	ldrh	r6, [r4, #6]
   14da2:	f015 f896 	bl	29ed2 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   14da6:	7f23      	ldrb	r3, [r4, #28]
   14da8:	f003 0303 	and.w	r3, r3, #3
   14dac:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   14dae:	bf0c      	ite	eq
   14db0:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   14db4:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   14db8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   14dba:	7f61      	ldrb	r1, [r4, #29]
   14dbc:	8041      	strh	r1, [r0, #2]
   14dbe:	4628      	mov	r0, r5
   14dc0:	f015 f887 	bl	29ed2 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   14dc4:	7f62      	ldrb	r2, [r4, #29]
   14dc6:	f104 011f 	add.w	r1, r4, #31
}
   14dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   14dce:	f013 bcef 	b.w	287b0 <memcpy>
   14dd2:	bf00      	nop
   14dd4:	0002caec 	.word	0x0002caec
   14dd8:	0002c97c 	.word	0x0002c97c
   14ddc:	0002c8dc 	.word	0x0002c8dc

00014de0 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   14de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de4:	b089      	sub	sp, #36	; 0x24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   14de6:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   14dea:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   14dec:	f1bc 0f03 	cmp.w	ip, #3
{
   14df0:	af04      	add	r7, sp, #16
   14df2:	4604      	mov	r4, r0
   14df4:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   14df6:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   14dfa:	d01e      	beq.n	14e3a <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
   14dfc:	f1ac 0c05 	sub.w	ip, ip, #5
   14e00:	f1bc 0f17 	cmp.w	ip, #23
   14e04:	d833      	bhi.n	14e6e <hci_evt_encode+0x8e>
   14e06:	e8df f01c 	tbh	[pc, ip, lsl #1]
   14e0a:	0043      	.short	0x0043
   14e0c:	00320032 	.word	0x00320032
   14e10:	00320032 	.word	0x00320032
   14e14:	00320032 	.word	0x00320032
   14e18:	00320032 	.word	0x00320032
   14e1c:	00320032 	.word	0x00320032
   14e20:	00320032 	.word	0x00320032
   14e24:	00320032 	.word	0x00320032
   14e28:	00320032 	.word	0x00320032
   14e2c:	012200bf 	.word	0x012200bf
   14e30:	01580128 	.word	0x01580128
   14e34:	0182016f 	.word	0x0182016f
   14e38:	01b5      	.short	0x01b5
	switch (pdu_data->llctrl.opcode) {
   14e3a:	7fc3      	ldrb	r3, [r0, #31]
   14e3c:	3b03      	subs	r3, #3
   14e3e:	2b12      	cmp	r3, #18
   14e40:	f200 81ce 	bhi.w	151e0 <hci_evt_encode+0x400>
   14e44:	e8df f013 	tbh	[pc, r3, lsl #1]
   14e48:	01cc0233 	.word	0x01cc0233
   14e4c:	026001cc 	.word	0x026001cc
   14e50:	01cc0279 	.word	0x01cc0279
   14e54:	01cc0298 	.word	0x01cc0298
   14e58:	01cc01cc 	.word	0x01cc01cc
   14e5c:	01cc02da 	.word	0x01cc02da
   14e60:	01cc029f 	.word	0x01cc029f
   14e64:	01cc02c4 	.word	0x01cc02c4
   14e68:	01da01cc 	.word	0x01da01cc
   14e6c:	01da      	.short	0x01da
		LL_ASSERT(0);
   14e6e:	4ab8      	ldr	r2, [pc, #736]	; (15150 <hci_evt_encode+0x370>)
   14e70:	49b8      	ldr	r1, [pc, #736]	; (15154 <hci_evt_encode+0x374>)
   14e72:	48b9      	ldr	r0, [pc, #740]	; (15158 <hci_evt_encode+0x378>)
   14e74:	f641 43af 	movw	r3, #7343	; 0x1caf
   14e78:	f010 fe44 	bl	25b04 <printk>
   14e7c:	4040      	eors	r0, r0
   14e7e:	f380 8811 	msr	BASEPRI, r0
   14e82:	f04f 0003 	mov.w	r0, #3
   14e86:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   14e88:	3714      	adds	r7, #20
   14e8a:	46bd      	mov	sp, r7
   14e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   14e90:	4ab2      	ldr	r2, [pc, #712]	; (1515c <hci_evt_encode+0x37c>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   14e92:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   14e94:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   14e96:	f894 9019 	ldrb.w	r9, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   14e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
   14e9e:	0c0a      	lsrs	r2, r1, #16
   14ea0:	73ba      	strb	r2, [r7, #14]
	if (adv->tx_addr) {
   14ea2:	7f22      	ldrb	r2, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   14ea4:	60b8      	str	r0, [r7, #8]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   14ea6:	425b      	negs	r3, r3
	if (adv->tx_addr) {
   14ea8:	0652      	lsls	r2, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   14eaa:	81b9      	strh	r1, [r7, #12]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   14eac:	fa4f f883 	sxtb.w	r8, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   14eb0:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   14eb4:	f100 82d4 	bmi.w	15460 <hci_evt_encode+0x680>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14eb8:	4ba9      	ldr	r3, [pc, #676]	; (15160 <hci_evt_encode+0x380>)
   14eba:	685b      	ldr	r3, [r3, #4]
   14ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   14ec0:	2e00      	cmp	r6, #0
   14ec2:	f040 8317 	bne.w	154f4 <hci_evt_encode+0x714>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14ec6:	2b00      	cmp	r3, #0
   14ec8:	d0de      	beq.n	14e88 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   14eca:	4ba6      	ldr	r3, [pc, #664]	; (15164 <hci_evt_encode+0x384>)
   14ecc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14ece:	079e      	lsls	r6, r3, #30
   14ed0:	d5da      	bpl.n	14e88 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
   14ed2:	4ba5      	ldr	r3, [pc, #660]	; (15168 <hci_evt_encode+0x388>)
   14ed4:	681b      	ldr	r3, [r3, #0]
   14ed6:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   14ed8:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
   14edc:	db09      	blt.n	14ef2 <hci_evt_encode+0x112>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   14ede:	7f20      	ldrb	r0, [r4, #28]
   14ee0:	465a      	mov	r2, fp
   14ee2:	f3c0 1180 	ubfx	r1, r0, #6, #1
   14ee6:	f000 000f 	and.w	r0, r0, #15
   14eea:	f7fe ffc3 	bl	13e74 <dup_found.part.0>
	if (dup_scan &&
   14eee:	2800      	cmp	r0, #0
   14ef0:	d1ca      	bne.n	14e88 <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   14ef2:	7f23      	ldrb	r3, [r4, #28]
   14ef4:	f003 030f 	and.w	r3, r3, #15
   14ef8:	2b01      	cmp	r3, #1
   14efa:	f000 83c0 	beq.w	1567e <hci_evt_encode+0x89e>
		data_len = (adv->len - BDADDR_SIZE);
   14efe:	7f63      	ldrb	r3, [r4, #29]
   14f00:	1f9e      	subs	r6, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   14f02:	1d9a      	adds	r2, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   14f04:	b2f6      	uxtb	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   14f06:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   14f08:	b2d2      	uxtb	r2, r2
   14f0a:	603a      	str	r2, [r7, #0]
	return net_buf_add(buf, melen);
   14f0c:	b2db      	uxtb	r3, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   14f0e:	46b2      	mov	sl, r6
   14f10:	3508      	adds	r5, #8
   14f12:	2102      	movs	r1, #2
   14f14:	4628      	mov	r0, r5
   14f16:	607b      	str	r3, [r7, #4]
   14f18:	f014 ffdb 	bl	29ed2 <net_buf_simple_add>
	hdr->len = len;
   14f1c:	683b      	ldr	r3, [r7, #0]
   14f1e:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   14f20:	213e      	movs	r1, #62	; 0x3e
   14f22:	7001      	strb	r1, [r0, #0]
   14f24:	2101      	movs	r1, #1
   14f26:	4628      	mov	r0, r5
   14f28:	f014 ffd3 	bl	29ed2 <net_buf_simple_add>
   14f2c:	687b      	ldr	r3, [r7, #4]
   14f2e:	4684      	mov	ip, r0
   14f30:	4619      	mov	r1, r3
	me->subevent = subevt;
   14f32:	2302      	movs	r3, #2
   14f34:	f88c 3000 	strb.w	r3, [ip]
   14f38:	4628      	mov	r0, r5
   14f3a:	f014 ffca 	bl	29ed2 <net_buf_simple_add>
	sep->num_reports = 1U;
   14f3e:	2301      	movs	r3, #1
   14f40:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   14f42:	7f23      	ldrb	r3, [r4, #28]
   14f44:	f107 0210 	add.w	r2, r7, #16
   14f48:	f003 030f 	and.w	r3, r3, #15
   14f4c:	4413      	add	r3, r2
   14f4e:	4605      	mov	r5, r0
   14f50:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   14f54:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   14f56:	f006 f839 	bl	1afcc <ll_rl_size_get>
   14f5a:	4581      	cmp	r9, r0
   14f5c:	f080 8358 	bcs.w	15610 <hci_evt_encode+0x830>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   14f60:	4648      	mov	r0, r9
   14f62:	1cea      	adds	r2, r5, #3
   14f64:	1ca9      	adds	r1, r5, #2
   14f66:	f005 ffeb 	bl	1af40 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   14f6a:	78ab      	ldrb	r3, [r5, #2]
   14f6c:	3302      	adds	r3, #2
   14f6e:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   14f70:	f105 090a 	add.w	r9, r5, #10
	adv_info->length = data_len;
   14f74:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   14f76:	4652      	mov	r2, sl
   14f78:	f104 0124 	add.w	r1, r4, #36	; 0x24
   14f7c:	4648      	mov	r0, r9
   14f7e:	f013 fc17 	bl	287b0 <memcpy>
	*prssi = rssi;
   14f82:	f809 800a 	strb.w	r8, [r9, sl]
   14f86:	e77f      	b.n	14e88 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   14f88:	f018 0f01 	tst.w	r8, #1
   14f8c:	f040 825a 	bne.w	15444 <hci_evt_encode+0x664>
	status = cc->status;
   14f90:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   14f94:	f1b8 0f00 	cmp.w	r8, #0
   14f98:	f000 824b 	beq.w	15432 <hci_evt_encode+0x652>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14f9c:	4b70      	ldr	r3, [pc, #448]	; (15160 <hci_evt_encode+0x380>)
   14f9e:	685b      	ldr	r3, [r3, #4]
   14fa0:	0098      	lsls	r0, r3, #2
   14fa2:	f57f af71 	bpl.w	14e88 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   14fa6:	4b6f      	ldr	r3, [pc, #444]	; (15164 <hci_evt_encode+0x384>)
   14fa8:	681b      	ldr	r3, [r3, #0]
   14faa:	f240 2201 	movw	r2, #513	; 0x201
   14fae:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   14fb0:	f403 7900 	and.w	r9, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   14fb4:	f43f af68 	beq.w	14e88 <hci_evt_encode+0xa8>
   14fb8:	3508      	adds	r5, #8
	if (!status) {
   14fba:	f1b8 0f00 	cmp.w	r8, #0
   14fbe:	f040 827b 	bne.w	154b8 <hci_evt_encode+0x6d8>
		conn_count++;
   14fc2:	4a6a      	ldr	r2, [pc, #424]	; (1516c <hci_evt_encode+0x38c>)
   14fc4:	6813      	ldr	r3, [r2, #0]
   14fc6:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   14fc8:	f104 0a1f 	add.w	sl, r4, #31
		conn_count++;
   14fcc:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   14fce:	f1b9 0f00 	cmp.w	r9, #0
   14fd2:	f000 82ed 	beq.w	155b0 <hci_evt_encode+0x7d0>
   14fd6:	2102      	movs	r1, #2
   14fd8:	4628      	mov	r0, r5
   14fda:	f014 ff7a 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   14fde:	233e      	movs	r3, #62	; 0x3e
   14fe0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   14fe2:	231f      	movs	r3, #31
   14fe4:	7043      	strb	r3, [r0, #1]
   14fe6:	2101      	movs	r1, #1
   14fe8:	4628      	mov	r0, r5
   14fea:	f014 ff72 	bl	29ed2 <net_buf_simple_add>
   14fee:	4603      	mov	r3, r0
	me->subevent = subevt;
   14ff0:	220a      	movs	r2, #10
   14ff2:	701a      	strb	r2, [r3, #0]
   14ff4:	4628      	mov	r0, r5
   14ff6:	211e      	movs	r1, #30
   14ff8:	f014 ff6b 	bl	29ed2 <net_buf_simple_add>
		leecc->status = 0x00;
   14ffc:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   15000:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   15004:	7f63      	ldrb	r3, [r4, #29]
   15006:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   15008:	7fa3      	ldrb	r3, [r4, #30]
   1500a:	7103      	strb	r3, [r0, #4]
   1500c:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   1500e:	2206      	movs	r2, #6
   15010:	4651      	mov	r1, sl
   15012:	3005      	adds	r0, #5
   15014:	f013 fbcc 	bl	287b0 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   15018:	2206      	movs	r2, #6
   1501a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   1501e:	f105 000b 	add.w	r0, r5, #11
   15022:	f013 fbc5 	bl	287b0 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   15026:	2206      	movs	r2, #6
   15028:	f104 0125 	add.w	r1, r4, #37	; 0x25
   1502c:	f105 0011 	add.w	r0, r5, #17
   15030:	f013 fbbe 	bl	287b0 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   15034:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   15036:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   15038:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1503a:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1503e:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   15042:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   15046:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1504a:	776b      	strb	r3, [r5, #29]
		return;
   1504c:	e71c      	b.n	14e88 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1504e:	460a      	mov	r2, r1
   15050:	4640      	mov	r0, r8
   15052:	4631      	mov	r1, r6
   15054:	f7ff fe62 	bl	14d1c <hci_disconn_complete_encode>
		break;
   15058:	e716      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1505a:	4b41      	ldr	r3, [pc, #260]	; (15160 <hci_evt_encode+0x380>)
   1505c:	685b      	ldr	r3, [r3, #4]
   1505e:	0099      	lsls	r1, r3, #2
   15060:	f57f af12 	bpl.w	14e88 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   15064:	4b3f      	ldr	r3, [pc, #252]	; (15164 <hci_evt_encode+0x384>)
   15066:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15068:	075a      	lsls	r2, r3, #29
   1506a:	f57f af0d 	bpl.w	14e88 <hci_evt_encode+0xa8>
   1506e:	3508      	adds	r5, #8
   15070:	2102      	movs	r1, #2
   15072:	4628      	mov	r0, r5
   15074:	f014 ff2d 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   15078:	233e      	movs	r3, #62	; 0x3e
   1507a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1507c:	230a      	movs	r3, #10
   1507e:	7043      	strb	r3, [r0, #1]
   15080:	2101      	movs	r1, #1
   15082:	4628      	mov	r0, r5
   15084:	f014 ff25 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   15088:	2303      	movs	r3, #3
   1508a:	7003      	strb	r3, [r0, #0]
   1508c:	2109      	movs	r1, #9
   1508e:	4628      	mov	r0, r5
   15090:	f014 ff1f 	bl	29ed2 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   15094:	f018 0f01 	tst.w	r8, #1
   15098:	4605      	mov	r5, r0
   1509a:	f040 82db 	bne.w	15654 <hci_evt_encode+0x874>
	sep->status = cu->status;
   1509e:	7f23      	ldrb	r3, [r4, #28]
   150a0:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   150a2:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   150a4:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   150a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   150a8:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   150ac:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   150b0:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   150b4:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   150b8:	e6e6      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   150ba:	4b29      	ldr	r3, [pc, #164]	; (15160 <hci_evt_encode+0x380>)
   150bc:	685b      	ldr	r3, [r3, #4]
   150be:	041b      	lsls	r3, r3, #16
   150c0:	f04f 0400 	mov.w	r4, #0
   150c4:	f57f aee0 	bpl.w	14e88 <hci_evt_encode+0xa8>
   150c8:	3508      	adds	r5, #8
   150ca:	2102      	movs	r1, #2
   150cc:	4628      	mov	r0, r5
   150ce:	f014 ff00 	bl	29ed2 <net_buf_simple_add>
	hdr->len = len;
   150d2:	2103      	movs	r1, #3
	hdr->evt = evt;
   150d4:	2330      	movs	r3, #48	; 0x30
   150d6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   150d8:	7041      	strb	r1, [r0, #1]
   150da:	4628      	mov	r0, r5
   150dc:	f014 fef9 	bl	29ed2 <net_buf_simple_add>
	ep->status = 0x00;
   150e0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   150e2:	f8a0 6001 	strh.w	r6, [r0, #1]
   150e6:	e6cf      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   150e8:	4b21      	ldr	r3, [pc, #132]	; (15170 <hci_evt_encode+0x390>)
   150ea:	681b      	ldr	r3, [r3, #0]
   150ec:	021c      	lsls	r4, r3, #8
   150ee:	f57f aecb 	bpl.w	14e88 <hci_evt_encode+0xa8>
   150f2:	3508      	adds	r5, #8
   150f4:	2102      	movs	r1, #2
   150f6:	4628      	mov	r0, r5
   150f8:	f014 feeb 	bl	29ed2 <net_buf_simple_add>
	hdr->len = len;
   150fc:	2102      	movs	r1, #2
	hdr->evt = evt;
   150fe:	2357      	movs	r3, #87	; 0x57
   15100:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   15102:	7041      	strb	r1, [r0, #1]
   15104:	4628      	mov	r0, r5
   15106:	f014 fee4 	bl	29ed2 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1510a:	8006      	strh	r6, [r0, #0]
   1510c:	e6bc      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1510e:	4b14      	ldr	r3, [pc, #80]	; (15160 <hci_evt_encode+0x380>)
   15110:	685b      	ldr	r3, [r3, #4]
   15112:	0098      	lsls	r0, r3, #2
   15114:	f57f aeb8 	bpl.w	14e88 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   15118:	4b12      	ldr	r3, [pc, #72]	; (15164 <hci_evt_encode+0x384>)
   1511a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1511c:	0319      	lsls	r1, r3, #12
   1511e:	f57f aeb3 	bpl.w	14e88 <hci_evt_encode+0xa8>
   15122:	3508      	adds	r5, #8
   15124:	2102      	movs	r1, #2
   15126:	4628      	mov	r0, r5
   15128:	f014 fed3 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   1512c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1512e:	2304      	movs	r3, #4
	hdr->evt = evt;
   15130:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   15132:	7043      	strb	r3, [r0, #1]
   15134:	2101      	movs	r1, #1
   15136:	4628      	mov	r0, r5
   15138:	f014 fecb 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   1513c:	2314      	movs	r3, #20
   1513e:	7003      	strb	r3, [r0, #0]
   15140:	2103      	movs	r1, #3
   15142:	4628      	mov	r0, r5
   15144:	f014 fec5 	bl	29ed2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   15148:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1514a:	7f23      	ldrb	r3, [r4, #28]
   1514c:	7083      	strb	r3, [r0, #2]
   1514e:	e69b      	b.n	14e88 <hci_evt_encode+0xa8>
   15150:	0002caec 	.word	0x0002caec
   15154:	0002c97c 	.word	0x0002c97c
   15158:	0002c8dc 	.word	0x0002c8dc
   1515c:	0002bb80 	.word	0x0002bb80
   15160:	20000150 	.word	0x20000150
   15164:	20000158 	.word	0x20000158
   15168:	200041ec 	.word	0x200041ec
   1516c:	200041e8 	.word	0x200041e8
   15170:	20003400 	.word	0x20003400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15174:	4bc3      	ldr	r3, [pc, #780]	; (15484 <hci_evt_encode+0x6a4>)
   15176:	685b      	ldr	r3, [r3, #4]
   15178:	009a      	lsls	r2, r3, #2
   1517a:	d566      	bpl.n	1524a <hci_evt_encode+0x46a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1517c:	4bc2      	ldr	r3, [pc, #776]	; (15488 <hci_evt_encode+0x6a8>)
   1517e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15180:	051b      	lsls	r3, r3, #20
   15182:	d562      	bpl.n	1524a <hci_evt_encode+0x46a>
   15184:	3508      	adds	r5, #8
   15186:	2102      	movs	r1, #2
   15188:	4628      	mov	r0, r5
   1518a:	f014 fea2 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   1518e:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   15190:	2306      	movs	r3, #6
	hdr->evt = evt;
   15192:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   15194:	7043      	strb	r3, [r0, #1]
   15196:	2101      	movs	r1, #1
   15198:	4628      	mov	r0, r5
   1519a:	f014 fe9a 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   1519e:	230c      	movs	r3, #12
   151a0:	7003      	strb	r3, [r0, #0]
   151a2:	2105      	movs	r1, #5
   151a4:	4628      	mov	r0, r5
   151a6:	f014 fe94 	bl	29ed2 <net_buf_simple_add>
	sep->status = pu->status;
   151aa:	7f23      	ldrb	r3, [r4, #28]
   151ac:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   151ae:	f8a0 6001 	strh.w	r6, [r0, #1]
   151b2:	7f62      	ldrb	r2, [r4, #29]
   151b4:	2a00      	cmp	r2, #0
   151b6:	fa92 f3a2 	rbit	r3, r2
   151ba:	fab3 f383 	clz	r3, r3
   151be:	bf08      	it	eq
   151c0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   151c4:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   151c6:	70c3      	strb	r3, [r0, #3]
   151c8:	7fa2      	ldrb	r2, [r4, #30]
   151ca:	fa92 f3a2 	rbit	r3, r2
   151ce:	2a00      	cmp	r2, #0
   151d0:	fab3 f383 	clz	r3, r3
   151d4:	bf08      	it	eq
   151d6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   151da:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   151dc:	7103      	strb	r3, [r0, #4]
   151de:	e653      	b.n	14e88 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
   151e0:	4aaa      	ldr	r2, [pc, #680]	; (1548c <hci_evt_encode+0x6ac>)
   151e2:	49ab      	ldr	r1, [pc, #684]	; (15490 <hci_evt_encode+0x6b0>)
   151e4:	48ab      	ldr	r0, [pc, #684]	; (15494 <hci_evt_encode+0x6b4>)
   151e6:	f641 538f 	movw	r3, #7567	; 0x1d8f
   151ea:	f010 fc8b 	bl	25b04 <printk>
   151ee:	4040      	eors	r0, r0
   151f0:	f380 8811 	msr	BASEPRI, r0
   151f4:	f04f 0003 	mov.w	r0, #3
   151f8:	df02      	svc	2
}
   151fa:	e645      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   151fc:	4ba1      	ldr	r3, [pc, #644]	; (15484 <hci_evt_encode+0x6a4>)
   151fe:	685b      	ldr	r3, [r3, #4]
   15200:	009a      	lsls	r2, r3, #2
   15202:	f57f ae41 	bpl.w	14e88 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   15206:	4ba0      	ldr	r3, [pc, #640]	; (15488 <hci_evt_encode+0x6a8>)
   15208:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1520a:	065b      	lsls	r3, r3, #25
   1520c:	f57f ae3c 	bpl.w	14e88 <hci_evt_encode+0xa8>
   15210:	3508      	adds	r5, #8
   15212:	2102      	movs	r1, #2
   15214:	4628      	mov	r0, r5
   15216:	f014 fe5c 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   1521a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1521c:	230b      	movs	r3, #11
	hdr->evt = evt;
   1521e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   15220:	7043      	strb	r3, [r0, #1]
   15222:	2101      	movs	r1, #1
   15224:	4628      	mov	r0, r5
   15226:	f014 fe54 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   1522a:	2307      	movs	r3, #7
   1522c:	7003      	strb	r3, [r0, #0]
   1522e:	210a      	movs	r1, #10
   15230:	4628      	mov	r0, r5
   15232:	f014 fe4e 	bl	29ed2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   15236:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   15238:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1523a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1523c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1523e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   15240:	8c23      	ldrh	r3, [r4, #32]
   15242:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   15244:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   15246:	8103      	strh	r3, [r0, #8]
   15248:	e61e      	b.n	14e88 <hci_evt_encode+0xa8>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1524a:	4893      	ldr	r0, [pc, #588]	; (15498 <hci_evt_encode+0x6b8>)
   1524c:	6803      	ldr	r3, [r0, #0]
   1524e:	f013 0f06 	tst.w	r3, #6
   15252:	f43f ae19 	beq.w	14e88 <hci_evt_encode+0xa8>
   15256:	7f62      	ldrb	r2, [r4, #29]
   15258:	7fa3      	ldrb	r3, [r4, #30]
   1525a:	7f25      	ldrb	r5, [r4, #28]
   1525c:	2a00      	cmp	r2, #0
   1525e:	fa92 f2a2 	rbit	r2, r2
   15262:	fab2 f282 	clz	r2, r2
   15266:	bf08      	it	eq
   15268:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1526c:	2b00      	cmp	r3, #0
   1526e:	fa93 f3a3 	rbit	r3, r3
   15272:	fab3 f383 	clz	r3, r3
   15276:	466c      	mov	r4, sp
   15278:	bf08      	it	eq
   1527a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1527e:	b08a      	sub	sp, #40	; 0x28
   15280:	3301      	adds	r3, #1
   15282:	930d      	str	r3, [sp, #52]	; 0x34
   15284:	3201      	adds	r2, #1
   15286:	ab04      	add	r3, sp, #16
   15288:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
   1528c:	4d83      	ldr	r5, [pc, #524]	; (1549c <hci_evt_encode+0x6bc>)
   1528e:	9508      	str	r5, [sp, #32]
   15290:	461a      	mov	r2, r3
   15292:	2107      	movs	r1, #7
   15294:	4d82      	ldr	r5, [pc, #520]	; (154a0 <hci_evt_encode+0x6c0>)
   15296:	960a      	str	r6, [sp, #40]	; 0x28
   15298:	9509      	str	r5, [sp, #36]	; 0x24
   1529a:	60b9      	str	r1, [r7, #8]
   1529c:	f842 1f0c 	str.w	r1, [r2, #12]!
   152a0:	2300      	movs	r3, #0
   152a2:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   152a6:	f011 fc1f 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   152aa:	46a5      	mov	sp, r4
   152ac:	e5ec      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   152ae:	4b75      	ldr	r3, [pc, #468]	; (15484 <hci_evt_encode+0x6a4>)
   152b0:	685b      	ldr	r3, [r3, #4]
   152b2:	0098      	lsls	r0, r3, #2
   152b4:	f57f ade8 	bpl.w	14e88 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   152b8:	4b73      	ldr	r3, [pc, #460]	; (15488 <hci_evt_encode+0x6a8>)
   152ba:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   152bc:	06d9      	lsls	r1, r3, #27
   152be:	f57f ade3 	bpl.w	14e88 <hci_evt_encode+0xa8>
   152c2:	3508      	adds	r5, #8
   152c4:	2102      	movs	r1, #2
   152c6:	4628      	mov	r0, r5
   152c8:	f014 fe03 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   152cc:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   152ce:	230d      	movs	r3, #13
	hdr->evt = evt;
   152d0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   152d2:	7043      	strb	r3, [r0, #1]
   152d4:	2101      	movs	r1, #1
   152d6:	4628      	mov	r0, r5
   152d8:	f014 fdfb 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   152dc:	2305      	movs	r3, #5
   152de:	7003      	strb	r3, [r0, #0]
   152e0:	210c      	movs	r1, #12
   152e2:	4628      	mov	r0, r5
   152e4:	f014 fdf5 	bl	29ed2 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   152e8:	f104 0120 	add.w	r1, r4, #32
   152ec:	4605      	mov	r5, r0
   152ee:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   152f0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   152f4:	f013 fa5c 	bl	287b0 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   152f8:	2202      	movs	r2, #2
   152fa:	f104 0128 	add.w	r1, r4, #40	; 0x28
   152fe:	f105 000a 	add.w	r0, r5, #10
   15302:	f013 fa55 	bl	287b0 <memcpy>
   15306:	e5bf      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   15308:	4b5e      	ldr	r3, [pc, #376]	; (15484 <hci_evt_encode+0x6a4>)
   1530a:	681b      	ldr	r3, [r3, #0]
   1530c:	061a      	lsls	r2, r3, #24
   1530e:	f04f 0400 	mov.w	r4, #0
   15312:	f57f adb9 	bpl.w	14e88 <hci_evt_encode+0xa8>
   15316:	3508      	adds	r5, #8
   15318:	2102      	movs	r1, #2
   1531a:	4628      	mov	r0, r5
   1531c:	f014 fdd9 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   15320:	2308      	movs	r3, #8
	hdr->len = len;
   15322:	2104      	movs	r1, #4
	hdr->evt = evt;
   15324:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   15326:	7041      	strb	r1, [r0, #1]
   15328:	4628      	mov	r0, r5
   1532a:	f014 fdd2 	bl	29ed2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1532e:	2301      	movs	r3, #1
	ep->status = err;
   15330:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   15332:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   15336:	70c3      	strb	r3, [r0, #3]
   15338:	e5a6      	b.n	14e88 <hci_evt_encode+0xa8>
		le_unknown_rsp(pdu_data, handle, buf);
   1533a:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1533e:	2b0e      	cmp	r3, #14
   15340:	f000 8196 	beq.w	15670 <hci_evt_encode+0x890>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   15344:	4854      	ldr	r0, [pc, #336]	; (15498 <hci_evt_encode+0x6b8>)
   15346:	6802      	ldr	r2, [r0, #0]
   15348:	f012 0f06 	tst.w	r2, #6
   1534c:	f43f ad9c 	beq.w	14e88 <hci_evt_encode+0xa8>
   15350:	466d      	mov	r5, sp
   15352:	b088      	sub	sp, #32
   15354:	a904      	add	r1, sp, #16
   15356:	460a      	mov	r2, r1
   15358:	2404      	movs	r4, #4
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1535a:	930a      	str	r3, [sp, #40]	; 0x28
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1535c:	4e51      	ldr	r6, [pc, #324]	; (154a4 <hci_evt_encode+0x6c4>)
   1535e:	4b52      	ldr	r3, [pc, #328]	; (154a8 <hci_evt_encode+0x6c8>)
   15360:	9608      	str	r6, [sp, #32]
   15362:	9309      	str	r3, [sp, #36]	; 0x24
   15364:	f842 4f0c 	str.w	r4, [r2, #12]!
   15368:	60bc      	str	r4, [r7, #8]
   1536a:	2300      	movs	r3, #0
   1536c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15370:	f011 fbba 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   15374:	46ad      	mov	sp, r5
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   15376:	e587      	b.n	14e88 <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   15378:	460b      	mov	r3, r1
   1537a:	4632      	mov	r2, r6
   1537c:	4641      	mov	r1, r8
   1537e:	2000      	movs	r0, #0
   15380:	f7fe fdd8 	bl	13f34 <le_remote_feat_complete>
		break;
   15384:	e580      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15386:	4b3f      	ldr	r3, [pc, #252]	; (15484 <hci_evt_encode+0x6a4>)
   15388:	685b      	ldr	r3, [r3, #4]
   1538a:	0098      	lsls	r0, r3, #2
   1538c:	d570      	bpl.n	15470 <hci_evt_encode+0x690>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1538e:	4b3e      	ldr	r3, [pc, #248]	; (15488 <hci_evt_encode+0x6a8>)
   15390:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15392:	0699      	lsls	r1, r3, #26
   15394:	d56c      	bpl.n	15470 <hci_evt_encode+0x690>
   15396:	3508      	adds	r5, #8
   15398:	2102      	movs	r1, #2
   1539a:	4628      	mov	r0, r5
   1539c:	f014 fd99 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   153a0:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   153a2:	230b      	movs	r3, #11
	hdr->evt = evt;
   153a4:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   153a6:	7043      	strb	r3, [r0, #1]
   153a8:	2101      	movs	r1, #1
   153aa:	4628      	mov	r0, r5
   153ac:	f014 fd91 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   153b0:	2306      	movs	r3, #6
   153b2:	7003      	strb	r3, [r0, #0]
   153b4:	210a      	movs	r1, #10
   153b6:	4628      	mov	r0, r5
   153b8:	f014 fd8b 	bl	29ed2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   153bc:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   153be:	8c23      	ldrh	r3, [r4, #32]
   153c0:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   153c2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   153c4:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   153c6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   153c8:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   153ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   153cc:	8103      	strh	r3, [r0, #8]
   153ce:	e55b      	b.n	14e88 <hci_evt_encode+0xa8>
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   153d0:	4831      	ldr	r0, [pc, #196]	; (15498 <hci_evt_encode+0x6b8>)
   153d2:	6803      	ldr	r3, [r0, #0]
   153d4:	f013 0f06 	tst.w	r3, #6
   153d8:	f43f ad56 	beq.w	14e88 <hci_evt_encode+0xa8>
   153dc:	466d      	mov	r5, sp
   153de:	b088      	sub	sp, #32
   153e0:	ab04      	add	r3, sp, #16
   153e2:	f894 4020 	ldrb.w	r4, [r4, #32]
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   153e6:	940a      	str	r4, [sp, #40]	; 0x28
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   153e8:	461a      	mov	r2, r3
   153ea:	2104      	movs	r1, #4
   153ec:	4e2f      	ldr	r6, [pc, #188]	; (154ac <hci_evt_encode+0x6cc>)
   153ee:	4c30      	ldr	r4, [pc, #192]	; (154b0 <hci_evt_encode+0x6d0>)
   153f0:	9608      	str	r6, [sp, #32]
   153f2:	9409      	str	r4, [sp, #36]	; 0x24
   153f4:	60b9      	str	r1, [r7, #8]
   153f6:	f842 1f0c 	str.w	r1, [r2, #12]!
   153fa:	e7b6      	b.n	1536a <hci_evt_encode+0x58a>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   153fc:	4b21      	ldr	r3, [pc, #132]	; (15484 <hci_evt_encode+0x6a4>)
   153fe:	681b      	ldr	r3, [r3, #0]
   15400:	061b      	lsls	r3, r3, #24
   15402:	f57f ad41 	bpl.w	14e88 <hci_evt_encode+0xa8>
   15406:	3508      	adds	r5, #8
   15408:	2102      	movs	r1, #2
   1540a:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1540c:	f894 4020 	ldrb.w	r4, [r4, #32]
   15410:	f014 fd5f 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   15414:	2308      	movs	r3, #8
	hdr->len = len;
   15416:	2104      	movs	r1, #4
	hdr->evt = evt;
   15418:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1541a:	7041      	strb	r1, [r0, #1]
   1541c:	4628      	mov	r0, r5
   1541e:	f014 fd58 	bl	29ed2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   15422:	fab4 f384 	clz	r3, r4
   15426:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   15428:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1542a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1542e:	70c3      	strb	r3, [r0, #3]
   15430:	e52a      	b.n	14e88 <hci_evt_encode+0xa8>
		ll_rl_crpa_set(cc->peer_addr_type,
   15432:	7fa0      	ldrb	r0, [r4, #30]
   15434:	f104 0325 	add.w	r3, r4, #37	; 0x25
   15438:	22ff      	movs	r2, #255	; 0xff
   1543a:	f104 011f 	add.w	r1, r4, #31
   1543e:	f005 fec3 	bl	1b1c8 <ll_rl_crpa_set>
   15442:	e5ab      	b.n	14f9c <hci_evt_encode+0x1bc>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   15444:	4a11      	ldr	r2, [pc, #68]	; (1548c <hci_evt_encode+0x6ac>)
   15446:	491b      	ldr	r1, [pc, #108]	; (154b4 <hci_evt_encode+0x6d4>)
   15448:	4812      	ldr	r0, [pc, #72]	; (15494 <hci_evt_encode+0x6b4>)
   1544a:	f641 23f5 	movw	r3, #6901	; 0x1af5
   1544e:	f010 fb59 	bl	25b04 <printk>
   15452:	4040      	eors	r0, r0
   15454:	f380 8811 	msr	BASEPRI, r0
   15458:	f04f 0003 	mov.w	r0, #3
   1545c:	df02      	svc	2
   1545e:	e597      	b.n	14f90 <hci_evt_encode+0x1b0>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   15460:	2100      	movs	r1, #0
   15462:	f104 031e 	add.w	r3, r4, #30
   15466:	464a      	mov	r2, r9
   15468:	4608      	mov	r0, r1
   1546a:	f005 fead 	bl	1b1c8 <ll_rl_crpa_set>
   1546e:	e523      	b.n	14eb8 <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   15470:	2300      	movs	r3, #0
   15472:	e9cd 3301 	strd	r3, r3, [sp, #4]
   15476:	9300      	str	r3, [sp, #0]
   15478:	221a      	movs	r2, #26
   1547a:	2102      	movs	r1, #2
   1547c:	4630      	mov	r0, r6
   1547e:	f002 fc77 	bl	17d70 <ll_conn_update>
		return;
   15482:	e501      	b.n	14e88 <hci_evt_encode+0xa8>
   15484:	20000150 	.word	0x20000150
   15488:	20000158 	.word	0x20000158
   1548c:	0002caec 	.word	0x0002caec
   15490:	0002c97c 	.word	0x0002c97c
   15494:	0002c8dc 	.word	0x0002c8dc
   15498:	20000944 	.word	0x20000944
   1549c:	0002cbc8 	.word	0x0002cbc8
   154a0:	0002cc70 	.word	0x0002cc70
   154a4:	0002cbf8 	.word	0x0002cbf8
   154a8:	0002cc60 	.word	0x0002cc60
   154ac:	0002cc0c 	.word	0x0002cc0c
   154b0:	0002cc4c 	.word	0x0002cc4c
   154b4:	0002cb50 	.word	0x0002cb50
   154b8:	2102      	movs	r1, #2
   154ba:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   154bc:	f1b9 0f00 	cmp.w	r9, #0
   154c0:	f040 80b0 	bne.w	15624 <hci_evt_encode+0x844>
   154c4:	f014 fd05 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   154c8:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   154ca:	2313      	movs	r3, #19
	hdr->evt = evt;
   154cc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   154ce:	7043      	strb	r3, [r0, #1]
   154d0:	2101      	movs	r1, #1
   154d2:	4628      	mov	r0, r5
   154d4:	f014 fcfd 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   154d8:	2301      	movs	r3, #1
   154da:	7003      	strb	r3, [r0, #0]
   154dc:	2112      	movs	r1, #18
   154de:	4628      	mov	r0, r5
   154e0:	f014 fcf7 	bl	29ed2 <net_buf_simple_add>
   154e4:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   154e6:	2212      	movs	r2, #18
   154e8:	4649      	mov	r1, r9
   154ea:	f013 f96c 	bl	287c6 <memset>
		lecc->status = status;
   154ee:	f884 8000 	strb.w	r8, [r4]
		return;
   154f2:	e4c9      	b.n	14e88 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   154f4:	2b00      	cmp	r3, #0
   154f6:	f43f acc7 	beq.w	14e88 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   154fa:	4b69      	ldr	r3, [pc, #420]	; (156a0 <hci_evt_encode+0x8c0>)
   154fc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   154fe:	055b      	lsls	r3, r3, #21
   15500:	f57f acc2 	bpl.w	14e88 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   15504:	7f23      	ldrb	r3, [r4, #28]
   15506:	f003 030f 	and.w	r3, r3, #15
   1550a:	2b01      	cmp	r3, #1
   1550c:	d00c      	beq.n	15528 <hci_evt_encode+0x748>
   1550e:	4a65      	ldr	r2, [pc, #404]	; (156a4 <hci_evt_encode+0x8c4>)
   15510:	4965      	ldr	r1, [pc, #404]	; (156a8 <hci_evt_encode+0x8c8>)
   15512:	4866      	ldr	r0, [pc, #408]	; (156ac <hci_evt_encode+0x8cc>)
   15514:	f241 435a 	movw	r3, #5210	; 0x145a
   15518:	f010 faf4 	bl	25b04 <printk>
   1551c:	4040      	eors	r0, r0
   1551e:	f380 8811 	msr	BASEPRI, r0
   15522:	f04f 0003 	mov.w	r0, #3
   15526:	df02      	svc	2
	if (dup_count >= 0) {
   15528:	4b61      	ldr	r3, [pc, #388]	; (156b0 <hci_evt_encode+0x8d0>)
   1552a:	681b      	ldr	r3, [r3, #0]
   1552c:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   1552e:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   15532:	db0a      	blt.n	1554a <hci_evt_encode+0x76a>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   15534:	7f20      	ldrb	r0, [r4, #28]
   15536:	4632      	mov	r2, r6
   15538:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1553c:	f000 000f 	and.w	r0, r0, #15
   15540:	f7fe fc98 	bl	13e74 <dup_found.part.0>
	if (dup_scan &&
   15544:	2800      	cmp	r0, #0
   15546:	f47f ac9f 	bne.w	14e88 <hci_evt_encode+0xa8>
   1554a:	3508      	adds	r5, #8
   1554c:	2102      	movs	r1, #2
   1554e:	4628      	mov	r0, r5
   15550:	f014 fcbf 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   15554:	233e      	movs	r3, #62	; 0x3e
   15556:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   15558:	2312      	movs	r3, #18
   1555a:	7043      	strb	r3, [r0, #1]
   1555c:	2101      	movs	r1, #1
   1555e:	4628      	mov	r0, r5
   15560:	f014 fcb7 	bl	29ed2 <net_buf_simple_add>
   15564:	4603      	mov	r3, r0
	me->subevent = subevt;
   15566:	220b      	movs	r2, #11
   15568:	701a      	strb	r2, [r3, #0]
   1556a:	4628      	mov	r0, r5
   1556c:	2111      	movs	r1, #17
   1556e:	f014 fcb0 	bl	29ed2 <net_buf_simple_add>
	drp->num_reports = 1U;
   15572:	2301      	movs	r3, #1
   15574:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   15576:	7043      	strb	r3, [r0, #1]
   15578:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   1557a:	f005 fd27 	bl	1afcc <ll_rl_size_get>
   1557e:	4581      	cmp	r9, r0
   15580:	f080 8084 	bcs.w	1568c <hci_evt_encode+0x8ac>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   15584:	1cea      	adds	r2, r5, #3
   15586:	1ca9      	adds	r1, r5, #2
   15588:	4648      	mov	r0, r9
   1558a:	f005 fcd9 	bl	1af40 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   1558e:	78ab      	ldrb	r3, [r5, #2]
   15590:	3302      	adds	r3, #2
   15592:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   15594:	7f23      	ldrb	r3, [r4, #28]
   15596:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   1559a:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   1559c:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   1559e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   155a2:	f105 000a 	add.w	r0, r5, #10
   155a6:	f013 f903 	bl	287b0 <memcpy>
	dir_info->rssi = rssi;
   155aa:	f885 8010 	strb.w	r8, [r5, #16]
   155ae:	e46b      	b.n	14e88 <hci_evt_encode+0xa8>
   155b0:	2102      	movs	r1, #2
   155b2:	4628      	mov	r0, r5
   155b4:	f014 fc8d 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   155b8:	233e      	movs	r3, #62	; 0x3e
   155ba:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   155bc:	2313      	movs	r3, #19
   155be:	7043      	strb	r3, [r0, #1]
   155c0:	2101      	movs	r1, #1
   155c2:	4628      	mov	r0, r5
   155c4:	f014 fc85 	bl	29ed2 <net_buf_simple_add>
   155c8:	4603      	mov	r3, r0
	me->subevent = subevt;
   155ca:	2201      	movs	r2, #1
   155cc:	701a      	strb	r2, [r3, #0]
   155ce:	4628      	mov	r0, r5
   155d0:	2112      	movs	r1, #18
   155d2:	f014 fc7e 	bl	29ed2 <net_buf_simple_add>
	lecc->status = 0x00;
   155d6:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   155da:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   155de:	7f63      	ldrb	r3, [r4, #29]
   155e0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   155e2:	7fa3      	ldrb	r3, [r4, #30]
   155e4:	f003 0301 	and.w	r3, r3, #1
   155e8:	4605      	mov	r5, r0
   155ea:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   155ec:	2206      	movs	r2, #6
   155ee:	4651      	mov	r1, sl
   155f0:	3005      	adds	r0, #5
   155f2:	f013 f8dd 	bl	287b0 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   155f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   155f8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   155fa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   155fc:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   15600:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   15604:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   15608:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1560c:	746b      	strb	r3, [r5, #17]
   1560e:	e43b      	b.n	14e88 <hci_evt_encode+0xa8>
		adv_info->addr.type = adv->tx_addr;
   15610:	7f23      	ldrb	r3, [r4, #28]
   15612:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   15616:	4659      	mov	r1, fp
		adv_info->addr.type = adv->tx_addr;
   15618:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1561a:	2206      	movs	r2, #6
   1561c:	1ce8      	adds	r0, r5, #3
   1561e:	f013 f8c7 	bl	287b0 <memcpy>
   15622:	e4a5      	b.n	14f70 <hci_evt_encode+0x190>
   15624:	f014 fc55 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   15628:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1562a:	231f      	movs	r3, #31
	hdr->evt = evt;
   1562c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1562e:	7043      	strb	r3, [r0, #1]
   15630:	2101      	movs	r1, #1
   15632:	4628      	mov	r0, r5
   15634:	f014 fc4d 	bl	29ed2 <net_buf_simple_add>
	me->subevent = subevt;
   15638:	230a      	movs	r3, #10
   1563a:	7003      	strb	r3, [r0, #0]
   1563c:	211e      	movs	r1, #30
   1563e:	4628      	mov	r0, r5
   15640:	f014 fc47 	bl	29ed2 <net_buf_simple_add>
   15644:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   15646:	221e      	movs	r2, #30
   15648:	2100      	movs	r1, #0
   1564a:	f013 f8bc 	bl	287c6 <memset>
			leecc->status = status;
   1564e:	f884 8000 	strb.w	r8, [r4]
			return;
   15652:	e419      	b.n	14e88 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   15654:	4a13      	ldr	r2, [pc, #76]	; (156a4 <hci_evt_encode+0x8c4>)
   15656:	4917      	ldr	r1, [pc, #92]	; (156b4 <hci_evt_encode+0x8d4>)
   15658:	4814      	ldr	r0, [pc, #80]	; (156ac <hci_evt_encode+0x8cc>)
   1565a:	f641 337a 	movw	r3, #7034	; 0x1b7a
   1565e:	f010 fa51 	bl	25b04 <printk>
   15662:	4040      	eors	r0, r0
   15664:	f380 8811 	msr	BASEPRI, r0
   15668:	f04f 0003 	mov.w	r0, #3
   1566c:	df02      	svc	2
   1566e:	e516      	b.n	1509e <hci_evt_encode+0x2be>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   15670:	460b      	mov	r3, r1
   15672:	4632      	mov	r2, r6
   15674:	2100      	movs	r1, #0
   15676:	201a      	movs	r0, #26
   15678:	f7fe fc5c 	bl	13f34 <le_remote_feat_complete>
		break;
   1567c:	e404      	b.n	14e88 <hci_evt_encode+0xa8>
   1567e:	f04f 0a00 	mov.w	sl, #0
   15682:	220c      	movs	r2, #12
   15684:	230b      	movs	r3, #11
   15686:	603a      	str	r2, [r7, #0]
		data_len = 0U;
   15688:	4656      	mov	r6, sl
   1568a:	e441      	b.n	14f10 <hci_evt_encode+0x130>
		dir_info->addr.type = adv->tx_addr;
   1568c:	7f23      	ldrb	r3, [r4, #28]
   1568e:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   15692:	2206      	movs	r2, #6
		dir_info->addr.type = adv->tx_addr;
   15694:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   15696:	4631      	mov	r1, r6
   15698:	1ce8      	adds	r0, r5, #3
   1569a:	f013 f889 	bl	287b0 <memcpy>
   1569e:	e779      	b.n	15594 <hci_evt_encode+0x7b4>
   156a0:	20000158 	.word	0x20000158
   156a4:	0002caec 	.word	0x0002caec
   156a8:	0002cb28 	.word	0x0002cb28
   156ac:	0002c8dc 	.word	0x0002c8dc
   156b0:	200041ec 	.word	0x200041ec
   156b4:	0002cb8c 	.word	0x0002cb8c

000156b8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   156b8:	b570      	push	{r4, r5, r6, lr}
   156ba:	f100 0408 	add.w	r4, r0, #8
   156be:	460e      	mov	r6, r1
   156c0:	4620      	mov	r0, r4
   156c2:	2102      	movs	r1, #2
   156c4:	4615      	mov	r5, r2
   156c6:	f014 fc04 	bl	29ed2 <net_buf_simple_add>
	hdr->evt = evt;
   156ca:	2313      	movs	r3, #19
	hdr->len = len;
   156cc:	2105      	movs	r1, #5
	hdr->evt = evt;
   156ce:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   156d0:	7041      	strb	r1, [r0, #1]
   156d2:	4620      	mov	r0, r4
   156d4:	f014 fbfd 	bl	29ed2 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   156d8:	2301      	movs	r3, #1
   156da:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   156dc:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   156e0:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   156e4:	bd70      	pop	{r4, r5, r6, pc}
   156e6:	bf00      	nop

000156e8 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   156e8:	7903      	ldrb	r3, [r0, #4]
   156ea:	2b03      	cmp	r3, #3
   156ec:	d008      	beq.n	15700 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   156ee:	3b05      	subs	r3, #5
   156f0:	b2db      	uxtb	r3, r3
   156f2:	2b17      	cmp	r3, #23
   156f4:	d901      	bls.n	156fa <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   156f6:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   156f8:	4770      	bx	lr
   156fa:	4a05      	ldr	r2, [pc, #20]	; (15710 <hci_get_class+0x28>)
   156fc:	5cd0      	ldrb	r0, [r2, r3]
   156fe:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   15700:	7f03      	ldrb	r3, [r0, #28]
   15702:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   15706:	2b03      	cmp	r3, #3
   15708:	bf0c      	ite	eq
   1570a:	2004      	moveq	r0, #4
   1570c:	2005      	movne	r0, #5
   1570e:	4770      	bx	lr
   15710:	0002cc34 	.word	0x0002cc34

00015714 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   15714:	480d      	ldr	r0, [pc, #52]	; (1574c <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   15716:	4a0e      	ldr	r2, [pc, #56]	; (15750 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   15718:	490e      	ldr	r1, [pc, #56]	; (15754 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   1571a:	4b0f      	ldr	r3, [pc, #60]	; (15758 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1571c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   1571e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15722:	f641 75ff 	movw	r5, #8191	; 0x1fff
   15726:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1572a:	2400      	movs	r4, #0
   1572c:	2500      	movs	r5, #0
   1572e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   15732:	4a0a      	ldr	r2, [pc, #40]	; (1575c <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   15734:	241f      	movs	r4, #31
   15736:	2500      	movs	r5, #0
   15738:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1573c:	2100      	movs	r1, #0
   1573e:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   15740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   15744:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   15746:	601a      	str	r2, [r3, #0]
}
   15748:	4770      	bx	lr
   1574a:	bf00      	nop
   1574c:	20000150 	.word	0x20000150
   15750:	20003400 	.word	0x20003400
   15754:	20000158 	.word	0x20000158
   15758:	200041ec 	.word	0x200041ec
   1575c:	200041e8 	.word	0x200041e8

00015760 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   15760:	f006 bdb4 	b.w	1c2cc <lll_csrand_get>

00015764 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   15764:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   15766:	2300      	movs	r3, #0
   15768:	f008 fe3e 	bl	1e3e8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1576c:	2000      	movs	r0, #0
   1576e:	bd08      	pop	{r3, pc}

00015770 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   15770:	4801      	ldr	r0, [pc, #4]	; (15778 <ll_feat_get+0x8>)
   15772:	2100      	movs	r1, #0
   15774:	4770      	bx	lr
   15776:	bf00      	nop
   15778:	000141ff 	.word	0x000141ff

0001577c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1577c:	b510      	push	{r4, lr}
   1577e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   15780:	f006 fdda 	bl	1c338 <lll_reset>
	LL_ASSERT(!err);
   15784:	b970      	cbnz	r0, 157a4 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   15786:	f007 f9ab 	bl	1cae0 <lll_adv_reset>
	LL_ASSERT(!err);
   1578a:	b9e0      	cbnz	r0, 157c6 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   1578c:	f008 f80a 	bl	1d7a4 <lll_scan_reset>
	LL_ASSERT(!err);
   15790:	bb50      	cbnz	r0, 157e8 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   15792:	f008 f921 	bl	1d9d8 <lll_conn_reset>
	LL_ASSERT(!err);
   15796:	2800      	cmp	r0, #0
   15798:	d137      	bne.n	1580a <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   1579a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1579c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   157a0:	f00f b8f4 	b.w	2498c <z_impl_k_sem_give>
	LL_ASSERT(!err);
   157a4:	4a22      	ldr	r2, [pc, #136]	; (15830 <perform_lll_reset+0xb4>)
   157a6:	4923      	ldr	r1, [pc, #140]	; (15834 <perform_lll_reset+0xb8>)
   157a8:	4823      	ldr	r0, [pc, #140]	; (15838 <perform_lll_reset+0xbc>)
   157aa:	f640 0324 	movw	r3, #2084	; 0x824
   157ae:	f010 f9a9 	bl	25b04 <printk>
   157b2:	4040      	eors	r0, r0
   157b4:	f380 8811 	msr	BASEPRI, r0
   157b8:	f04f 0003 	mov.w	r0, #3
   157bc:	df02      	svc	2
	err = lll_adv_reset();
   157be:	f007 f98f 	bl	1cae0 <lll_adv_reset>
	LL_ASSERT(!err);
   157c2:	2800      	cmp	r0, #0
   157c4:	d0e2      	beq.n	1578c <perform_lll_reset+0x10>
   157c6:	4a1a      	ldr	r2, [pc, #104]	; (15830 <perform_lll_reset+0xb4>)
   157c8:	491a      	ldr	r1, [pc, #104]	; (15834 <perform_lll_reset+0xb8>)
   157ca:	481b      	ldr	r0, [pc, #108]	; (15838 <perform_lll_reset+0xbc>)
   157cc:	f640 0329 	movw	r3, #2089	; 0x829
   157d0:	f010 f998 	bl	25b04 <printk>
   157d4:	4040      	eors	r0, r0
   157d6:	f380 8811 	msr	BASEPRI, r0
   157da:	f04f 0003 	mov.w	r0, #3
   157de:	df02      	svc	2
	err = lll_scan_reset();
   157e0:	f007 ffe0 	bl	1d7a4 <lll_scan_reset>
	LL_ASSERT(!err);
   157e4:	2800      	cmp	r0, #0
   157e6:	d0d4      	beq.n	15792 <perform_lll_reset+0x16>
   157e8:	4a11      	ldr	r2, [pc, #68]	; (15830 <perform_lll_reset+0xb4>)
   157ea:	4912      	ldr	r1, [pc, #72]	; (15834 <perform_lll_reset+0xb8>)
   157ec:	4812      	ldr	r0, [pc, #72]	; (15838 <perform_lll_reset+0xbc>)
   157ee:	f640 032f 	movw	r3, #2095	; 0x82f
   157f2:	f010 f987 	bl	25b04 <printk>
   157f6:	4040      	eors	r0, r0
   157f8:	f380 8811 	msr	BASEPRI, r0
   157fc:	f04f 0003 	mov.w	r0, #3
   15800:	df02      	svc	2
	err = lll_conn_reset();
   15802:	f008 f8e9 	bl	1d9d8 <lll_conn_reset>
	LL_ASSERT(!err);
   15806:	2800      	cmp	r0, #0
   15808:	d0c7      	beq.n	1579a <perform_lll_reset+0x1e>
   1580a:	4a09      	ldr	r2, [pc, #36]	; (15830 <perform_lll_reset+0xb4>)
   1580c:	4909      	ldr	r1, [pc, #36]	; (15834 <perform_lll_reset+0xb8>)
   1580e:	480a      	ldr	r0, [pc, #40]	; (15838 <perform_lll_reset+0xbc>)
   15810:	f640 0335 	movw	r3, #2101	; 0x835
   15814:	f010 f976 	bl	25b04 <printk>
   15818:	4040      	eors	r0, r0
   1581a:	f380 8811 	msr	BASEPRI, r0
   1581e:	f04f 0003 	mov.w	r0, #3
   15822:	df02      	svc	2
   15824:	4620      	mov	r0, r4
}
   15826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1582a:	f00f b8af 	b.w	2498c <z_impl_k_sem_give>
   1582e:	bf00      	nop
   15830:	0002ccc4 	.word	0x0002ccc4
   15834:	0002cd00 	.word	0x0002cd00
   15838:	0002c8dc 	.word	0x0002c8dc

0001583c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1583c:	6008      	str	r0, [r1, #0]
   1583e:	4801      	ldr	r0, [pc, #4]	; (15844 <ull_ticker_status_give+0x8>)
   15840:	f00f b8a4 	b.w	2498c <z_impl_k_sem_give>
   15844:	20004568 	.word	0x20004568

00015848 <disabled_cb>:
   15848:	f00f b8a0 	b.w	2498c <z_impl_k_sem_give>

0001584c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1584c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   15850:	4d2c      	ldr	r5, [pc, #176]	; (15904 <tx_cmplt_get+0xb8>)
{
   15852:	460c      	mov	r4, r1
   15854:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   15856:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   15858:	7822      	ldrb	r2, [r4, #0]
   1585a:	782b      	ldrb	r3, [r5, #0]
   1585c:	4291      	cmp	r1, r2
   1585e:	bf9c      	itt	ls
   15860:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   15862:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   15864:	4591      	cmp	r9, r2
{
   15866:	4682      	mov	sl, r0
   15868:	d042      	beq.n	158f0 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1586a:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   1586e:	3201      	adds	r2, #1
   15870:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   15872:	4f25      	ldr	r7, [pc, #148]	; (15908 <tx_cmplt_get+0xbc>)
		i = 0U;
   15874:	4291      	cmp	r1, r2
   15876:	bf08      	it	eq
   15878:	2200      	moveq	r2, #0

	*idx = i;
   1587a:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   1587c:	5afa      	ldrh	r2, [r7, r3]
   1587e:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   15880:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   15882:	443b      	add	r3, r7
   15884:	f04f 0b01 	mov.w	fp, #1
   15888:	f04f 0802 	mov.w	r8, #2
   1588c:	e021      	b.n	158d2 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   1588e:	b362      	cbz	r2, 158ea <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   15890:	7902      	ldrb	r2, [r0, #4]
   15892:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   15896:	3a01      	subs	r2, #1
   15898:	2a01      	cmp	r2, #1
   1589a:	d92d      	bls.n	158f8 <tx_cmplt_get+0xac>
   1589c:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   158a0:	f002 fa1e 	bl	17ce0 <ll_tx_mem_release>
	if (*idx >= count) {
   158a4:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   158a6:	7869      	ldrb	r1, [r5, #1]
   158a8:	7828      	ldrb	r0, [r5, #0]
   158aa:	4299      	cmp	r1, r3
   158ac:	bf9c      	itt	ls
   158ae:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   158b0:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   158b2:	454b      	cmp	r3, r9
   158b4:	d01d      	beq.n	158f2 <tx_cmplt_get+0xa6>
	i = *idx + 1;
   158b6:	1c5a      	adds	r2, r3, #1
   158b8:	b2d2      	uxtb	r2, r2
		i = 0U;
   158ba:	4291      	cmp	r1, r2
   158bc:	bf08      	it	eq
   158be:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   158c0:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   158c4:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   158c6:	5af9      	ldrh	r1, [r7, r3]
   158c8:	f8ba 2000 	ldrh.w	r2, [sl]
   158cc:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   158ce:	443b      	add	r3, r7
   158d0:	d10f      	bne.n	158f2 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   158d2:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   158d4:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   158d6:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   158da:	d8d8      	bhi.n	1588e <tx_cmplt_get+0x42>
			cmplt++;
   158dc:	3601      	adds	r6, #1
   158de:	b2f6      	uxtb	r6, r6
   158e0:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   158e4:	2a00      	cmp	r2, #0
   158e6:	d0dd      	beq.n	158a4 <tx_cmplt_get+0x58>
   158e8:	e7da      	b.n	158a0 <tx_cmplt_get+0x54>
   158ea:	f8c3 8004 	str.w	r8, [r3, #4]
   158ee:	e7d9      	b.n	158a4 <tx_cmplt_get+0x58>
		return 0;
   158f0:	2600      	movs	r6, #0

	return cmplt;
}
   158f2:	4630      	mov	r0, r6
   158f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   158f8:	3601      	adds	r6, #1
   158fa:	f8c3 b004 	str.w	fp, [r3, #4]
   158fe:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   15900:	e7ce      	b.n	158a0 <tx_cmplt_get+0x54>
   15902:	bf00      	nop
   15904:	20000568 	.word	0x20000568
   15908:	2000056c 	.word	0x2000056c

0001590c <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   1590c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15910:	4e3c      	ldr	r6, [pc, #240]	; (15a04 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   15912:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 15a08 <ull_done+0xfc>
   15916:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 15a0c <ull_done+0x100>
{
   1591a:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1591c:	e9d6 0100 	ldrd	r0, r1, [r6]
   15920:	aa01      	add	r2, sp, #4
   15922:	f7fc fcfd 	bl	12320 <memq_peek>
		if (link) {
   15926:	4604      	mov	r4, r0
   15928:	2800      	cmp	r0, #0
   1592a:	d03e      	beq.n	159aa <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   1592c:	6870      	ldr	r0, [r6, #4]
   1592e:	2200      	movs	r2, #0
   15930:	4631      	mov	r1, r6
   15932:	f7fc fcfd 	bl	12330 <memq_dequeue>
			rx_demux_event_done(link, done);
   15936:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   15938:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   1593a:	b135      	cbz	r5, 1594a <ull_done+0x3e>
	return hdr->ref;
   1593c:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   1593e:	2b00      	cmp	r3, #0
   15940:	d052      	beq.n	159e8 <ull_done+0xdc>
	return hdr->ref--;
   15942:	782b      	ldrb	r3, [r5, #0]
   15944:	3b01      	subs	r3, #1
   15946:	b2db      	uxtb	r3, r3
   15948:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1594a:	f897 3020 	ldrb.w	r3, [r7, #32]
   1594e:	b123      	cbz	r3, 1595a <ull_done+0x4e>
   15950:	2b01      	cmp	r3, #1
   15952:	d13b      	bne.n	159cc <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   15954:	4638      	mov	r0, r7
   15956:	f004 f841 	bl	199dc <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   1595a:	4a2d      	ldr	r2, [pc, #180]	; (15a10 <ull_done+0x104>)
	last = last + 1;
   1595c:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   1595e:	f892 c001 	ldrb.w	ip, [r2, #1]
   15962:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   15964:	3301      	adds	r3, #1
	done->extra.type = 0U;
   15966:	2000      	movs	r0, #0
   15968:	b2db      	uxtb	r3, r3
		last = 0U;
   1596a:	459c      	cmp	ip, r3
   1596c:	bf08      	it	eq
   1596e:	4603      	moveq	r3, r0
	if (last == first) {
   15970:	4299      	cmp	r1, r3
   15972:	f887 0020 	strb.w	r0, [r7, #32]
   15976:	d01b      	beq.n	159b0 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   15978:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   1597a:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1597c:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1597e:	fb00 2101 	mla	r1, r0, r1, r2
   15982:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   15984:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   15986:	2d00      	cmp	r5, #0
   15988:	d0c8      	beq.n	1591c <ull_done+0x10>
	return hdr->ref;
   1598a:	782b      	ldrb	r3, [r5, #0]
   1598c:	2b00      	cmp	r3, #0
   1598e:	d1c5      	bne.n	1591c <ull_done+0x10>
   15990:	696b      	ldr	r3, [r5, #20]
   15992:	2b00      	cmp	r3, #0
   15994:	d0c2      	beq.n	1591c <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   15996:	69a8      	ldr	r0, [r5, #24]
   15998:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1599a:	e9d6 0100 	ldrd	r0, r1, [r6]
   1599e:	aa01      	add	r2, sp, #4
   159a0:	f7fc fcbe 	bl	12320 <memq_peek>
		if (link) {
   159a4:	4604      	mov	r4, r0
   159a6:	2800      	cmp	r0, #0
   159a8:	d1c0      	bne.n	1592c <ull_done+0x20>
}
   159aa:	b003      	add	sp, #12
   159ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   159b0:	4918      	ldr	r1, [pc, #96]	; (15a14 <ull_done+0x108>)
   159b2:	4819      	ldr	r0, [pc, #100]	; (15a18 <ull_done+0x10c>)
   159b4:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   159b8:	4642      	mov	r2, r8
   159ba:	f010 f8a3 	bl	25b04 <printk>
   159be:	4040      	eors	r0, r0
   159c0:	f380 8811 	msr	BASEPRI, r0
   159c4:	f04f 0003 	mov.w	r0, #3
   159c8:	df02      	svc	2
   159ca:	e7dc      	b.n	15986 <ull_done+0x7a>
		LL_ASSERT(0);
   159cc:	4913      	ldr	r1, [pc, #76]	; (15a1c <ull_done+0x110>)
   159ce:	4812      	ldr	r0, [pc, #72]	; (15a18 <ull_done+0x10c>)
   159d0:	f640 2369 	movw	r3, #2665	; 0xa69
   159d4:	4642      	mov	r2, r8
   159d6:	f010 f895 	bl	25b04 <printk>
   159da:	4040      	eors	r0, r0
   159dc:	f380 8811 	msr	BASEPRI, r0
   159e0:	f04f 0003 	mov.w	r0, #3
   159e4:	df02      	svc	2
		break;
   159e6:	e7b8      	b.n	1595a <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   159e8:	480b      	ldr	r0, [pc, #44]	; (15a18 <ull_done+0x10c>)
   159ea:	f640 2312 	movw	r3, #2578	; 0xa12
   159ee:	4642      	mov	r2, r8
   159f0:	4649      	mov	r1, r9
   159f2:	f010 f887 	bl	25b04 <printk>
   159f6:	4040      	eors	r0, r0
   159f8:	f380 8811 	msr	BASEPRI, r0
   159fc:	f04f 0003 	mov.w	r0, #3
   15a00:	df02      	svc	2
   15a02:	e79e      	b.n	15942 <ull_done+0x36>
   15a04:	20004554 	.word	0x20004554
   15a08:	0002ccc4 	.word	0x0002ccc4
   15a0c:	0002cd08 	.word	0x0002cd08
   15a10:	20000424 	.word	0x20000424
   15a14:	0002cd20 	.word	0x0002cd20
   15a18:	0002c8dc 	.word	0x0002c8dc
   15a1c:	0002c97c 	.word	0x0002c97c

00015a20 <rx_alloc>:
{
   15a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   15a24:	4f33      	ldr	r7, [pc, #204]	; (15af4 <rx_alloc+0xd4>)
   15a26:	783e      	ldrb	r6, [r7, #0]
   15a28:	4286      	cmp	r6, r0
   15a2a:	bf28      	it	cs
   15a2c:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15a2e:	b34e      	cbz	r6, 15a84 <rx_alloc+0x64>
   15a30:	4d31      	ldr	r5, [pc, #196]	; (15af8 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   15a32:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 15afc <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15a36:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   15a38:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   15a3c:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15a3e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   15a40:	3401      	adds	r4, #1
   15a42:	b2e4      	uxtb	r4, r4
		last = 0U;
   15a44:	42a2      	cmp	r2, r4
   15a46:	bf08      	it	eq
   15a48:	2400      	moveq	r4, #0
	if (last == first) {
   15a4a:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   15a4c:	4640      	mov	r0, r8
   15a4e:	d01b      	beq.n	15a88 <rx_alloc+0x68>
   15a50:	f7fc fbf8 	bl	12244 <mem_acquire>
   15a54:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   15a56:	4648      	mov	r0, r9
		if (!link) {
   15a58:	f1ba 0f00 	cmp.w	sl, #0
   15a5c:	d012      	beq.n	15a84 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   15a5e:	f7fc fbf1 	bl	12244 <mem_acquire>
		if (!rx) {
   15a62:	2800      	cmp	r0, #0
   15a64:	d03f      	beq.n	15ae6 <rx_alloc+0xc6>
		rx->link = link;
   15a66:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   15a6a:	78ea      	ldrb	r2, [r5, #3]
   15a6c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   15a6e:	fb02 5303 	mla	r3, r2, r3, r5
   15a72:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   15a74:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   15a76:	70ec      	strb	r4, [r5, #3]
		max--;
   15a78:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   15a7a:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15a7c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   15a80:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15a82:	d1db      	bne.n	15a3c <rx_alloc+0x1c>
}
   15a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   15a88:	783b      	ldrb	r3, [r7, #0]
   15a8a:	2b00      	cmp	r3, #0
   15a8c:	d0fa      	beq.n	15a84 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   15a8e:	4d1c      	ldr	r5, [pc, #112]	; (15b00 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   15a90:	4e1c      	ldr	r6, [pc, #112]	; (15b04 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   15a92:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   15a94:	f8df 8064 	ldr.w	r8, [pc, #100]	; 15afc <rx_alloc+0xdc>
		link->mem = NULL;
   15a98:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   15a9c:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   15a9e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   15aa0:	3401      	adds	r4, #1
   15aa2:	b2e4      	uxtb	r4, r4
		last = 0U;
   15aa4:	42a2      	cmp	r2, r4
   15aa6:	bf08      	it	eq
   15aa8:	2400      	moveq	r4, #0
	if (last == first) {
   15aaa:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   15aac:	4630      	mov	r0, r6
   15aae:	d0e9      	beq.n	15a84 <rx_alloc+0x64>
   15ab0:	f7fc fbc8 	bl	12244 <mem_acquire>
   15ab4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   15ab6:	4640      	mov	r0, r8
		if (!link) {
   15ab8:	f1ba 0f00 	cmp.w	sl, #0
   15abc:	d0e2      	beq.n	15a84 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   15abe:	f7fc fbc1 	bl	12244 <mem_acquire>
		if (!rx) {
   15ac2:	b180      	cbz	r0, 15ae6 <rx_alloc+0xc6>
		link->mem = NULL;
   15ac4:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   15ac8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   15acc:	78ea      	ldrb	r2, [r5, #3]
   15ace:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   15ad0:	fb02 5303 	mla	r3, r2, r3, r5
   15ad4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   15ad6:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   15ad8:	70ec      	strb	r4, [r5, #3]
   15ada:	3b01      	subs	r3, #1
   15adc:	b2db      	uxtb	r3, r3
   15ade:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   15ae0:	2b00      	cmp	r3, #0
   15ae2:	d1db      	bne.n	15a9c <rx_alloc+0x7c>
   15ae4:	e7ce      	b.n	15a84 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   15ae6:	4650      	mov	r0, sl
   15ae8:	4906      	ldr	r1, [pc, #24]	; (15b04 <rx_alloc+0xe4>)
}
   15aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   15aee:	f7fc bbc3 	b.w	12278 <mem_release>
   15af2:	bf00      	nop
   15af4:	200042d0 	.word	0x200042d0
   15af8:	2000044c 	.word	0x2000044c
   15afc:	20004328 	.word	0x20004328
   15b00:	2000043c 	.word	0x2000043c
   15b04:	200042d4 	.word	0x200042d4

00015b08 <rx_demux>:
{
   15b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 15cbc <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   15b10:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 15cc0 <rx_demux+0x1b8>
		LL_ASSERT(0);
   15b14:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 15cc4 <rx_demux+0x1bc>
   15b18:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 15cc8 <rx_demux+0x1c0>
{
   15b1c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   15b1e:	e9d8 0100 	ldrd	r0, r1, [r8]
   15b22:	aa03      	add	r2, sp, #12
   15b24:	f7fc fbfc 	bl	12320 <memq_peek>
		if (link) {
   15b28:	4605      	mov	r5, r0
   15b2a:	2800      	cmp	r0, #0
   15b2c:	d035      	beq.n	15b9a <rx_demux+0x92>
			LL_ASSERT(rx);
   15b2e:	9b03      	ldr	r3, [sp, #12]
   15b30:	2b00      	cmp	r3, #0
   15b32:	f000 80a6 	beq.w	15c82 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   15b36:	7818      	ldrb	r0, [r3, #0]
   15b38:	aa04      	add	r2, sp, #16
   15b3a:	a902      	add	r1, sp, #8
   15b3c:	f004 f9e0 	bl	19f00 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   15b40:	4604      	mov	r4, r0
   15b42:	2800      	cmp	r0, #0
   15b44:	d055      	beq.n	15bf2 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   15b46:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   15b4a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   15b4e:	780f      	ldrb	r7, [r1, #0]
   15b50:	f8ad 200a 	strh.w	r2, [sp, #10]
   15b54:	ae05      	add	r6, sp, #20
   15b56:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   15b58:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   15b5c:	f004 f9ea 	bl	19f34 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   15b60:	4621      	mov	r1, r4
   15b62:	9a05      	ldr	r2, [sp, #20]
   15b64:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   15b68:	f004 fa2e 	bl	19fc8 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   15b6c:	4620      	mov	r0, r4
   15b6e:	f004 f99f 	bl	19eb0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   15b72:	4632      	mov	r2, r6
   15b74:	4629      	mov	r1, r5
   15b76:	4638      	mov	r0, r7
   15b78:	f004 f9c2 	bl	19f00 <ull_conn_ack_by_last_peek>
	} while (link);
   15b7c:	4604      	mov	r4, r0
   15b7e:	2800      	cmp	r0, #0
   15b80:	d1ec      	bne.n	15b5c <rx_demux+0x54>
	k_sem_give(sem_recv);
   15b82:	f8d9 0000 	ldr.w	r0, [r9]
   15b86:	f00e ff01 	bl	2498c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   15b8a:	e9d8 0100 	ldrd	r0, r1, [r8]
   15b8e:	aa03      	add	r2, sp, #12
   15b90:	f7fc fbc6 	bl	12320 <memq_peek>
		if (link) {
   15b94:	4605      	mov	r5, r0
   15b96:	2800      	cmp	r0, #0
   15b98:	d1c9      	bne.n	15b2e <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   15b9a:	aa04      	add	r2, sp, #16
   15b9c:	a902      	add	r1, sp, #8
   15b9e:	f10d 0007 	add.w	r0, sp, #7
   15ba2:	f004 f991 	bl	19ec8 <ull_conn_ack_peek>
			if (link) {
   15ba6:	4604      	mov	r4, r0
   15ba8:	2800      	cmp	r0, #0
   15baa:	d067      	beq.n	15c7c <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   15bac:	9b04      	ldr	r3, [sp, #16]
   15bae:	9305      	str	r3, [sp, #20]
   15bb0:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   15bb4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   15bb8:	f8ad 300a 	strh.w	r3, [sp, #10]
   15bbc:	ae05      	add	r6, sp, #20
   15bbe:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   15bc2:	f004 f9b7 	bl	19f34 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   15bc6:	4621      	mov	r1, r4
   15bc8:	9a05      	ldr	r2, [sp, #20]
   15bca:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   15bce:	f004 f9fb 	bl	19fc8 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   15bd2:	4620      	mov	r0, r4
   15bd4:	f004 f96c 	bl	19eb0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   15bd8:	4632      	mov	r2, r6
   15bda:	4629      	mov	r1, r5
   15bdc:	4638      	mov	r0, r7
   15bde:	f004 f98f 	bl	19f00 <ull_conn_ack_by_last_peek>
	} while (link);
   15be2:	4604      	mov	r4, r0
   15be4:	2800      	cmp	r0, #0
   15be6:	d1ec      	bne.n	15bc2 <rx_demux+0xba>
	k_sem_give(sem_recv);
   15be8:	f8d9 0000 	ldr.w	r0, [r9]
   15bec:	f00e fece 	bl	2498c <z_impl_k_sem_give>
			if (nack) {
   15bf0:	e7cb      	b.n	15b8a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   15bf2:	9b03      	ldr	r3, [sp, #12]
   15bf4:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   15bf6:	791b      	ldrb	r3, [r3, #4]
   15bf8:	3b01      	subs	r3, #1
   15bfa:	2b16      	cmp	r3, #22
   15bfc:	d80d      	bhi.n	15c1a <rx_demux+0x112>
   15bfe:	e8df f003 	tbb	[pc, r3]
   15c02:	0c1a      	.short	0x0c1a
   15c04:	0c1a0c38 	.word	0x0c1a0c38
   15c08:	0c0c0c0c 	.word	0x0c0c0c0c
   15c0c:	0c0c0c0c 	.word	0x0c0c0c0c
   15c10:	0c0c0c0c 	.word	0x0c0c0c0c
   15c14:	2d0c0c0c 	.word	0x2d0c0c0c
   15c18:	1a          	.byte	0x1a
   15c19:	00          	.byte	0x00
		LL_ASSERT(0);
   15c1a:	482c      	ldr	r0, [pc, #176]	; (15ccc <rx_demux+0x1c4>)
   15c1c:	f640 13ff 	movw	r3, #2559	; 0x9ff
   15c20:	4652      	mov	r2, sl
   15c22:	4659      	mov	r1, fp
   15c24:	f00f ff6e 	bl	25b04 <printk>
   15c28:	4040      	eors	r0, r0
   15c2a:	f380 8811 	msr	BASEPRI, r0
   15c2e:	f04f 0003 	mov.w	r0, #3
   15c32:	df02      	svc	2
			if (nack) {
   15c34:	e773      	b.n	15b1e <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   15c36:	4921      	ldr	r1, [pc, #132]	; (15cbc <rx_demux+0x1b4>)
   15c38:	f8d8 0004 	ldr.w	r0, [r8, #4]
   15c3c:	2200      	movs	r2, #0
   15c3e:	f7fc fb77 	bl	12330 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   15c42:	4b23      	ldr	r3, [pc, #140]	; (15cd0 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   15c44:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   15c46:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   15c48:	4628      	mov	r0, r5
   15c4a:	4a22      	ldr	r2, [pc, #136]	; (15cd4 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   15c4c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   15c4e:	f7fc fb5d 	bl	1230c <memq_enqueue>
	k_sem_give(sem_recv);
   15c52:	f8d9 0000 	ldr.w	r0, [r9]
   15c56:	f00e fe99 	bl	2498c <z_impl_k_sem_give>
			if (nack) {
   15c5a:	e796      	b.n	15b8a <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   15c5c:	4917      	ldr	r1, [pc, #92]	; (15cbc <rx_demux+0x1b4>)
   15c5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   15c62:	2200      	movs	r2, #0
   15c64:	f7fc fb64 	bl	12330 <memq_dequeue>
		ull_conn_setup(link, rx);
   15c68:	9905      	ldr	r1, [sp, #20]
   15c6a:	4628      	mov	r0, r5
   15c6c:	f002 fb20 	bl	182b0 <ull_conn_setup>
			if (nack) {
   15c70:	e755      	b.n	15b1e <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   15c72:	a905      	add	r1, sp, #20
   15c74:	4628      	mov	r0, r5
   15c76:	f002 fb43 	bl	18300 <ull_conn_rx>
		if (nack) {
   15c7a:	b188      	cbz	r0, 15ca0 <rx_demux+0x198>
}
   15c7c:	b007      	add	sp, #28
   15c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   15c82:	4915      	ldr	r1, [pc, #84]	; (15cd8 <rx_demux+0x1d0>)
   15c84:	4811      	ldr	r0, [pc, #68]	; (15ccc <rx_demux+0x1c4>)
   15c86:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   15c8a:	4652      	mov	r2, sl
   15c8c:	f00f ff3a 	bl	25b04 <printk>
   15c90:	4040      	eors	r0, r0
   15c92:	f380 8811 	msr	BASEPRI, r0
   15c96:	f04f 0003 	mov.w	r0, #3
   15c9a:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   15c9c:	9b03      	ldr	r3, [sp, #12]
   15c9e:	e74a      	b.n	15b36 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   15ca0:	4906      	ldr	r1, [pc, #24]	; (15cbc <rx_demux+0x1b4>)
   15ca2:	4602      	mov	r2, r0
   15ca4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   15ca8:	f7fc fb42 	bl	12330 <memq_dequeue>
		if (rx) {
   15cac:	9905      	ldr	r1, [sp, #20]
   15cae:	2900      	cmp	r1, #0
   15cb0:	f43f af35 	beq.w	15b1e <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   15cb4:	4b06      	ldr	r3, [pc, #24]	; (15cd0 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   15cb6:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   15cb8:	78db      	ldrb	r3, [r3, #3]
   15cba:	e7c6      	b.n	15c4a <rx_demux+0x142>
   15cbc:	2000455c 	.word	0x2000455c
   15cc0:	20004564 	.word	0x20004564
   15cc4:	0002ccc4 	.word	0x0002ccc4
   15cc8:	0002c97c 	.word	0x0002c97c
   15ccc:	0002c8dc 	.word	0x0002c8dc
   15cd0:	20000568 	.word	0x20000568
   15cd4:	20004550 	.word	0x20004550
   15cd8:	0002cd30 	.word	0x0002cd30

00015cdc <ll_rx_get>:
{
   15cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce0:	b085      	sub	sp, #20
   15ce2:	e9cd 0100 	strd	r0, r1, [sp]
   15ce6:	4c63      	ldr	r4, [pc, #396]	; (15e74 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   15ce8:	4d63      	ldr	r5, [pc, #396]	; (15e78 <ll_rx_get+0x19c>)
   15cea:	4e64      	ldr	r6, [pc, #400]	; (15e7c <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   15cec:	9a00      	ldr	r2, [sp, #0]
   15cee:	2300      	movs	r3, #0
   15cf0:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   15cf2:	e9d6 0100 	ldrd	r0, r1, [r6]
   15cf6:	aa03      	add	r2, sp, #12
   15cf8:	f7fc fb12 	bl	12320 <memq_peek>
	if (link) {
   15cfc:	4680      	mov	r8, r0
   15cfe:	2800      	cmp	r0, #0
   15d00:	f000 809f 	beq.w	15e42 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   15d04:	9b03      	ldr	r3, [sp, #12]
   15d06:	495e      	ldr	r1, [pc, #376]	; (15e80 <ll_rx_get+0x1a4>)
   15d08:	781a      	ldrb	r2, [r3, #0]
   15d0a:	9801      	ldr	r0, [sp, #4]
   15d0c:	f7ff fd9e 	bl	1584c <tx_cmplt_get>
		if (!cmplt) {
   15d10:	2800      	cmp	r0, #0
   15d12:	f040 809b 	bne.w	15e4c <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   15d16:	78a3      	ldrb	r3, [r4, #2]
   15d18:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   15d1c:	78e2      	ldrb	r2, [r4, #3]
   15d1e:	4607      	mov	r7, r0
   15d20:	f10d 0109 	add.w	r1, sp, #9
   15d24:	f10d 000a 	add.w	r0, sp, #10
   15d28:	f7ff fd90 	bl	1584c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   15d2c:	ea47 0200 	orr.w	r2, r7, r0
   15d30:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   15d34:	d1f2      	bne.n	15d1c <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   15d36:	9b03      	ldr	r3, [sp, #12]
   15d38:	7919      	ldrb	r1, [r3, #4]
   15d3a:	2901      	cmp	r1, #1
   15d3c:	f040 8093 	bne.w	15e66 <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   15d40:	494e      	ldr	r1, [pc, #312]	; (15e7c <ll_rx_get+0x1a0>)
   15d42:	6870      	ldr	r0, [r6, #4]
   15d44:	f7fc faf4 	bl	12330 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   15d48:	494e      	ldr	r1, [pc, #312]	; (15e84 <ll_rx_get+0x1a8>)
   15d4a:	4640      	mov	r0, r8
   15d4c:	f7fc fa94 	bl	12278 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   15d50:	782b      	ldrb	r3, [r5, #0]
   15d52:	2b05      	cmp	r3, #5
   15d54:	d866      	bhi.n	15e24 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   15d56:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   15d58:	494b      	ldr	r1, [pc, #300]	; (15e88 <ll_rx_get+0x1ac>)
   15d5a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   15d5c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   15d5e:	f7fc fa8b 	bl	12278 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15d62:	782b      	ldrb	r3, [r5, #0]
   15d64:	2b00      	cmp	r3, #0
   15d66:	d0c1      	beq.n	15cec <ll_rx_get+0x10>
   15d68:	f8df 8120 	ldr.w	r8, [pc, #288]	; 15e8c <ll_rx_get+0x1b0>
	last = last + 1;
   15d6c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   15d70:	f898 2001 	ldrb.w	r2, [r8, #1]
   15d74:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   15d78:	3701      	adds	r7, #1
   15d7a:	b2ff      	uxtb	r7, r7
		last = 0U;
   15d7c:	42ba      	cmp	r2, r7
   15d7e:	bf08      	it	eq
   15d80:	2700      	moveq	r7, #0
	if (last == first) {
   15d82:	429f      	cmp	r7, r3
   15d84:	d019      	beq.n	15dba <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   15d86:	483f      	ldr	r0, [pc, #252]	; (15e84 <ll_rx_get+0x1a8>)
   15d88:	f7fc fa5c 	bl	12244 <mem_acquire>
		if (!link) {
   15d8c:	4681      	mov	r9, r0
   15d8e:	2800      	cmp	r0, #0
   15d90:	d0ac      	beq.n	15cec <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   15d92:	483d      	ldr	r0, [pc, #244]	; (15e88 <ll_rx_get+0x1ac>)
   15d94:	f7fc fa56 	bl	12244 <mem_acquire>
		if (!rx) {
   15d98:	2800      	cmp	r0, #0
   15d9a:	d05a      	beq.n	15e52 <ll_rx_get+0x176>
		rx->link = link;
   15d9c:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   15da0:	f898 2003 	ldrb.w	r2, [r8, #3]
   15da4:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   15da8:	fb02 8303 	mla	r3, r2, r3, r8
   15dac:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   15dae:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   15db0:	f888 7003 	strb.w	r7, [r8, #3]
   15db4:	3b01      	subs	r3, #1
   15db6:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   15db8:	e798      	b.n	15cec <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   15dba:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 15e90 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   15dbe:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 15e84 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   15dc2:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   15dc6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 15e88 <ll_rx_get+0x1ac>
	if (last == count) {
   15dca:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   15dce:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   15dd2:	3701      	adds	r7, #1
   15dd4:	b2ff      	uxtb	r7, r7
		last = 0U;
   15dd6:	42ba      	cmp	r2, r7
   15dd8:	bf08      	it	eq
   15dda:	2700      	moveq	r7, #0
	if (last == first) {
   15ddc:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   15dde:	4648      	mov	r0, r9
   15de0:	d084      	beq.n	15cec <ll_rx_get+0x10>
   15de2:	f7fc fa2f 	bl	12244 <mem_acquire>
   15de6:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   15de8:	4650      	mov	r0, sl
		if (!link) {
   15dea:	f1bb 0f00 	cmp.w	fp, #0
   15dee:	f43f af7d 	beq.w	15cec <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   15df2:	f7fc fa27 	bl	12244 <mem_acquire>
		if (!rx) {
   15df6:	2800      	cmp	r0, #0
   15df8:	d030      	beq.n	15e5c <ll_rx_get+0x180>
		link->mem = NULL;
   15dfa:	2300      	movs	r3, #0
   15dfc:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   15e00:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   15e04:	f898 2003 	ldrb.w	r2, [r8, #3]
   15e08:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   15e0c:	fb02 8303 	mla	r3, r2, r3, r8
   15e10:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   15e12:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   15e14:	f888 7003 	strb.w	r7, [r8, #3]
   15e18:	3b01      	subs	r3, #1
   15e1a:	b2db      	uxtb	r3, r3
   15e1c:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   15e1e:	2b00      	cmp	r3, #0
   15e20:	d1d3      	bne.n	15dca <ll_rx_get+0xee>
   15e22:	e763      	b.n	15cec <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   15e24:	4a1b      	ldr	r2, [pc, #108]	; (15e94 <ll_rx_get+0x1b8>)
   15e26:	491c      	ldr	r1, [pc, #112]	; (15e98 <ll_rx_get+0x1bc>)
   15e28:	481c      	ldr	r0, [pc, #112]	; (15e9c <ll_rx_get+0x1c0>)
   15e2a:	f240 6306 	movw	r3, #1542	; 0x606
   15e2e:	f00f fe69 	bl	25b04 <printk>
   15e32:	4040      	eors	r0, r0
   15e34:	f380 8811 	msr	BASEPRI, r0
   15e38:	f04f 0003 	mov.w	r0, #3
   15e3c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   15e3e:	782b      	ldrb	r3, [r5, #0]
   15e40:	e789      	b.n	15d56 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   15e42:	78e2      	ldrb	r2, [r4, #3]
   15e44:	490e      	ldr	r1, [pc, #56]	; (15e80 <ll_rx_get+0x1a4>)
   15e46:	9801      	ldr	r0, [sp, #4]
   15e48:	f7ff fd00 	bl	1584c <tx_cmplt_get>
}
   15e4c:	b005      	add	sp, #20
   15e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   15e52:	490c      	ldr	r1, [pc, #48]	; (15e84 <ll_rx_get+0x1a8>)
   15e54:	4648      	mov	r0, r9
   15e56:	f7fc fa0f 	bl	12278 <mem_release>
			return;
   15e5a:	e747      	b.n	15cec <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   15e5c:	4909      	ldr	r1, [pc, #36]	; (15e84 <ll_rx_get+0x1a8>)
   15e5e:	4658      	mov	r0, fp
   15e60:	f7fc fa0a 	bl	12278 <mem_release>
			return;
   15e64:	e742      	b.n	15cec <ll_rx_get+0x10>
			*node_rx = rx;
   15e66:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   15e68:	4610      	mov	r0, r2
			*node_rx = rx;
   15e6a:	600b      	str	r3, [r1, #0]
}
   15e6c:	b005      	add	sp, #20
   15e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e72:	bf00      	nop
   15e74:	20000568 	.word	0x20000568
   15e78:	200042d0 	.word	0x200042d0
   15e7c:	2000454c 	.word	0x2000454c
   15e80:	2000056a 	.word	0x2000056a
   15e84:	200042d4 	.word	0x200042d4
   15e88:	20004328 	.word	0x20004328
   15e8c:	2000044c 	.word	0x2000044c
   15e90:	2000043c 	.word	0x2000043c
   15e94:	0002ccc4 	.word	0x0002ccc4
   15e98:	0002cd34 	.word	0x0002cd34
   15e9c:	0002c8dc 	.word	0x0002c8dc

00015ea0 <ll_rx_dequeue>:
{
   15ea0:	b530      	push	{r4, r5, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   15ea2:	4935      	ldr	r1, [pc, #212]	; (15f78 <ll_rx_dequeue+0xd8>)
{
   15ea4:	b083      	sub	sp, #12
	struct node_rx_hdr *rx = NULL;
   15ea6:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   15ea8:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   15eaa:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   15eac:	aa01      	add	r2, sp, #4
   15eae:	f7fc fa3f 	bl	12330 <memq_dequeue>
	LL_ASSERT(link);
   15eb2:	4604      	mov	r4, r0
   15eb4:	2800      	cmp	r0, #0
   15eb6:	d050      	beq.n	15f5a <ll_rx_dequeue+0xba>
	mem_release(link, &mem_link_rx.free);
   15eb8:	4930      	ldr	r1, [pc, #192]	; (15f7c <ll_rx_dequeue+0xdc>)
   15eba:	4620      	mov	r0, r4
   15ebc:	f7fc f9dc 	bl	12278 <mem_release>
	switch (rx->type) {
   15ec0:	9a01      	ldr	r2, [sp, #4]
   15ec2:	7913      	ldrb	r3, [r2, #4]
   15ec4:	2b1c      	cmp	r3, #28
   15ec6:	d810      	bhi.n	15eea <ll_rx_dequeue+0x4a>
   15ec8:	e8df f003 	tbb	[pc, r3]
   15ecc:	1e0f0f1e 	.word	0x1e0f0f1e
   15ed0:	0f0f1e0f 	.word	0x0f0f1e0f
   15ed4:	0f0f0f0f 	.word	0x0f0f0f0f
   15ed8:	0f0f0f0f 	.word	0x0f0f0f0f
   15edc:	0f0f0f0f 	.word	0x0f0f0f0f
   15ee0:	1e2f0f0f 	.word	0x1e2f0f0f
   15ee4:	1e1e1e1e 	.word	0x1e1e1e1e
   15ee8:	1e          	.byte	0x1e
   15ee9:	00          	.byte	0x00
		LL_ASSERT(0);
   15eea:	4a25      	ldr	r2, [pc, #148]	; (15f80 <ll_rx_dequeue+0xe0>)
   15eec:	4925      	ldr	r1, [pc, #148]	; (15f84 <ll_rx_dequeue+0xe4>)
   15eee:	4826      	ldr	r0, [pc, #152]	; (15f88 <ll_rx_dequeue+0xe8>)
   15ef0:	f240 43c7 	movw	r3, #1223	; 0x4c7
   15ef4:	f00f fe06 	bl	25b04 <printk>
   15ef8:	4040      	eors	r0, r0
   15efa:	f380 8811 	msr	BASEPRI, r0
   15efe:	f04f 0003 	mov.w	r0, #3
   15f02:	df02      	svc	2
}
   15f04:	b003      	add	sp, #12
   15f06:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   15f08:	2b00      	cmp	r3, #0
   15f0a:	d1fb      	bne.n	15f04 <ll_rx_dequeue+0x64>
   15f0c:	4a1c      	ldr	r2, [pc, #112]	; (15f80 <ll_rx_dequeue+0xe0>)
   15f0e:	491f      	ldr	r1, [pc, #124]	; (15f8c <ll_rx_dequeue+0xec>)
   15f10:	481d      	ldr	r0, [pc, #116]	; (15f88 <ll_rx_dequeue+0xe8>)
   15f12:	f240 43c3 	movw	r3, #1219	; 0x4c3
   15f16:	f00f fdf5 	bl	25b04 <printk>
   15f1a:	4040      	eors	r0, r0
   15f1c:	f380 8811 	msr	BASEPRI, r0
   15f20:	f04f 0003 	mov.w	r0, #3
   15f24:	df02      	svc	2
}
   15f26:	b003      	add	sp, #12
   15f28:	bd30      	pop	{r4, r5, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   15f2a:	6893      	ldr	r3, [r2, #8]
   15f2c:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   15f2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
			scan->lll.conn = NULL;
   15f32:	2500      	movs	r5, #0
			scan->is_enabled = 0U;
   15f34:	f365 0200 	bfi	r2, r5, #0, #1
			scan->lll.conn = NULL;
   15f38:	621d      	str	r5, [r3, #32]
			scan->is_enabled = 0U;
   15f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
   15f3e:	4628      	mov	r0, r5
   15f40:	f001 fa48 	bl	173d4 <ull_scan_is_enabled>
   15f44:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   15f46:	4628      	mov	r0, r5
   15f48:	f001 f832 	bl	16fb0 <ull_adv_is_enabled>
			if (!bm) {
   15f4c:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   15f50:	d1d8      	bne.n	15f04 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   15f52:	f005 fad9 	bl	1b508 <ull_filter_adv_scan_state_cb>
}
   15f56:	b003      	add	sp, #12
   15f58:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(link);
   15f5a:	4a09      	ldr	r2, [pc, #36]	; (15f80 <ll_rx_dequeue+0xe0>)
   15f5c:	490c      	ldr	r1, [pc, #48]	; (15f90 <ll_rx_dequeue+0xf0>)
   15f5e:	480a      	ldr	r0, [pc, #40]	; (15f88 <ll_rx_dequeue+0xe8>)
   15f60:	f240 33a1 	movw	r3, #929	; 0x3a1
   15f64:	f00f fdce 	bl	25b04 <printk>
   15f68:	4040      	eors	r0, r0
   15f6a:	f380 8811 	msr	BASEPRI, r0
   15f6e:	f04f 0003 	mov.w	r0, #3
   15f72:	df02      	svc	2
   15f74:	e7a0      	b.n	15eb8 <ll_rx_dequeue+0x18>
   15f76:	bf00      	nop
   15f78:	2000454c 	.word	0x2000454c
   15f7c:	200042d4 	.word	0x200042d4
   15f80:	0002ccc4 	.word	0x0002ccc4
   15f84:	0002c97c 	.word	0x0002c97c
   15f88:	0002c8dc 	.word	0x0002c8dc
   15f8c:	0002cd74 	.word	0x0002cd74
   15f90:	0002d00c 	.word	0x0002d00c

00015f94 <ll_rx_mem_release>:
{
   15f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   15f98:	6804      	ldr	r4, [r0, #0]
{
   15f9a:	4680      	mov	r8, r0
	while (rx) {
   15f9c:	b344      	cbz	r4, 15ff0 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   15f9e:	4f59      	ldr	r7, [pc, #356]	; (16104 <ll_rx_mem_release+0x170>)
   15fa0:	f8df 9164 	ldr.w	r9, [pc, #356]	; 16108 <ll_rx_mem_release+0x174>
   15fa4:	4e59      	ldr	r6, [pc, #356]	; (1610c <ll_rx_mem_release+0x178>)
		rx = rx->next;
   15fa6:	4625      	mov	r5, r4
   15fa8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   15faa:	792b      	ldrb	r3, [r5, #4]
   15fac:	2b1c      	cmp	r3, #28
   15fae:	d810      	bhi.n	15fd2 <ll_rx_mem_release+0x3e>
   15fb0:	e8df f003 	tbb	[pc, r3]
   15fb4:	380f0f38 	.word	0x380f0f38
   15fb8:	0f0f380f 	.word	0x0f0f380f
   15fbc:	0f0f0f0f 	.word	0x0f0f0f0f
   15fc0:	0f0f0f0f 	.word	0x0f0f0f0f
   15fc4:	0f0f0f0f 	.word	0x0f0f0f0f
   15fc8:	56260f0f 	.word	0x56260f0f
   15fcc:	38383838 	.word	0x38383838
   15fd0:	38          	.byte	0x38
   15fd1:	00          	.byte	0x00
			LL_ASSERT(0);
   15fd2:	f240 53fa 	movw	r3, #1530	; 0x5fa
   15fd6:	463a      	mov	r2, r7
   15fd8:	4649      	mov	r1, r9
   15fda:	4630      	mov	r0, r6
   15fdc:	f00f fd92 	bl	25b04 <printk>
   15fe0:	4040      	eors	r0, r0
   15fe2:	f380 8811 	msr	BASEPRI, r0
   15fe6:	f04f 0003 	mov.w	r0, #3
   15fea:	df02      	svc	2
	while (rx) {
   15fec:	2c00      	cmp	r4, #0
   15fee:	d1da      	bne.n	15fa6 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   15ff0:	2300      	movs	r3, #0
   15ff2:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   15ff6:	20ff      	movs	r0, #255	; 0xff
}
   15ff8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   15ffc:	f7ff bd10 	b.w	15a20 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   16000:	7f2b      	ldrb	r3, [r5, #28]
   16002:	2b02      	cmp	r3, #2
   16004:	d062      	beq.n	160cc <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   16006:	b1db      	cbz	r3, 16040 <ll_rx_mem_release+0xac>
   16008:	4941      	ldr	r1, [pc, #260]	; (16110 <ll_rx_mem_release+0x17c>)
   1600a:	f240 532b 	movw	r3, #1323	; 0x52b
   1600e:	463a      	mov	r2, r7
   16010:	4630      	mov	r0, r6
   16012:	f00f fd77 	bl	25b04 <printk>
   16016:	4040      	eors	r0, r0
   16018:	f380 8811 	msr	BASEPRI, r0
   1601c:	f04f 0003 	mov.w	r0, #3
   16020:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   16022:	792b      	ldrb	r3, [r5, #4]
   16024:	b963      	cbnz	r3, 16040 <ll_rx_mem_release+0xac>
   16026:	493b      	ldr	r1, [pc, #236]	; (16114 <ll_rx_mem_release+0x180>)
   16028:	f240 537d 	movw	r3, #1405	; 0x57d
   1602c:	463a      	mov	r2, r7
   1602e:	4630      	mov	r0, r6
   16030:	f00f fd68 	bl	25b04 <printk>
   16034:	4040      	eors	r0, r0
   16036:	f380 8811 	msr	BASEPRI, r0
   1603a:	f04f 0003 	mov.w	r0, #3
   1603e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16040:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 16118 <ll_rx_mem_release+0x184>
   16044:	f89a 3000 	ldrb.w	r3, [sl]
   16048:	2b05      	cmp	r3, #5
   1604a:	d82f      	bhi.n	160ac <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   1604c:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   1604e:	4933      	ldr	r1, [pc, #204]	; (1611c <ll_rx_mem_release+0x188>)
	mem_link_rx.quota_pdu += delta;
   16050:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   16054:	4628      	mov	r0, r5
   16056:	f7fc f90f 	bl	12278 <mem_release>
	while (rx) {
   1605a:	2c00      	cmp	r4, #0
   1605c:	d1a3      	bne.n	15fa6 <ll_rx_mem_release+0x12>
   1605e:	e7c7      	b.n	15ff0 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   16060:	88e8      	ldrh	r0, [r5, #6]
   16062:	2800      	cmp	r0, #0
   16064:	d1c2      	bne.n	15fec <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   16066:	f001 fe1b 	bl	17ca0 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   1606a:	6d83      	ldr	r3, [r0, #88]	; 0x58
				conn = ll_conn_get(rx_free->handle);
   1606c:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   1606e:	b163      	cbz	r3, 1608a <ll_rx_mem_release+0xf6>
   16070:	492b      	ldr	r1, [pc, #172]	; (16120 <ll_rx_mem_release+0x18c>)
   16072:	f240 53ec 	movw	r3, #1516	; 0x5ec
   16076:	463a      	mov	r2, r7
   16078:	4630      	mov	r0, r6
   1607a:	f00f fd43 	bl	25b04 <printk>
   1607e:	4040      	eors	r0, r0
   16080:	f380 8811 	msr	BASEPRI, r0
   16084:	f04f 0003 	mov.w	r0, #3
   16088:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   1608a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   1608e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   16092:	f7fc f931 	bl	122f8 <memq_deinit>
				LL_ASSERT(link);
   16096:	4682      	mov	sl, r0
   16098:	b330      	cbz	r0, 160e8 <ll_rx_mem_release+0x154>
				conn->lll.link_tx_free = link;
   1609a:	f8c5 a058 	str.w	sl, [r5, #88]	; 0x58
				ll_conn_release(conn);
   1609e:	4628      	mov	r0, r5
   160a0:	f001 fdf0 	bl	17c84 <ll_conn_release>
	while (rx) {
   160a4:	2c00      	cmp	r4, #0
   160a6:	f47f af7e 	bne.w	15fa6 <ll_rx_mem_release+0x12>
   160aa:	e7a1      	b.n	15ff0 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   160ac:	491d      	ldr	r1, [pc, #116]	; (16124 <ll_rx_mem_release+0x190>)
   160ae:	f240 6306 	movw	r3, #1542	; 0x606
   160b2:	463a      	mov	r2, r7
   160b4:	4630      	mov	r0, r6
   160b6:	f00f fd25 	bl	25b04 <printk>
   160ba:	4040      	eors	r0, r0
   160bc:	f380 8811 	msr	BASEPRI, r0
   160c0:	f04f 0003 	mov.w	r0, #3
   160c4:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   160c6:	f89a 3000 	ldrb.w	r3, [sl]
   160ca:	e7bf      	b.n	1604c <ll_rx_mem_release+0xb8>
				ull_central_cleanup(rx_free);
   160cc:	4628      	mov	r0, r5
   160ce:	f004 fac3 	bl	1a658 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   160d2:	2000      	movs	r0, #0
   160d4:	f000 ff5e 	bl	16f94 <ull_adv_is_enabled_get>
   160d8:	2800      	cmp	r0, #0
   160da:	d187      	bne.n	15fec <ll_rx_mem_release+0x58>
					ull_filter_adv_scan_state_cb(0);
   160dc:	f005 fa14 	bl	1b508 <ull_filter_adv_scan_state_cb>
	while (rx) {
   160e0:	2c00      	cmp	r4, #0
   160e2:	f47f af60 	bne.w	15fa6 <ll_rx_mem_release+0x12>
   160e6:	e783      	b.n	15ff0 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   160e8:	490f      	ldr	r1, [pc, #60]	; (16128 <ll_rx_mem_release+0x194>)
   160ea:	f240 53ef 	movw	r3, #1519	; 0x5ef
   160ee:	463a      	mov	r2, r7
   160f0:	4630      	mov	r0, r6
   160f2:	f00f fd07 	bl	25b04 <printk>
   160f6:	4040      	eors	r0, r0
   160f8:	f380 8811 	msr	BASEPRI, r0
   160fc:	f04f 0003 	mov.w	r0, #3
   16100:	df02      	svc	2
   16102:	e7ca      	b.n	1609a <ll_rx_mem_release+0x106>
   16104:	0002ccc4 	.word	0x0002ccc4
   16108:	0002c97c 	.word	0x0002c97c
   1610c:	0002c8dc 	.word	0x0002c8dc
   16110:	0002cd94 	.word	0x0002cd94
   16114:	0002cda0 	.word	0x0002cda0
   16118:	200042d0 	.word	0x200042d0
   1611c:	20004328 	.word	0x20004328
   16120:	0002cdc4 	.word	0x0002cdc4
   16124:	0002cd34 	.word	0x0002cd34
   16128:	0002d00c 	.word	0x0002d00c

0001612c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1612c:	4801      	ldr	r0, [pc, #4]	; (16134 <ll_rx_link_alloc+0x8>)
   1612e:	f7fc b889 	b.w	12244 <mem_acquire>
   16132:	bf00      	nop
   16134:	200042d4 	.word	0x200042d4

00016138 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   16138:	4901      	ldr	r1, [pc, #4]	; (16140 <ll_rx_link_release+0x8>)
   1613a:	f7fc b89d 	b.w	12278 <mem_release>
   1613e:	bf00      	nop
   16140:	200042d4 	.word	0x200042d4

00016144 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16144:	4b02      	ldr	r3, [pc, #8]	; (16150 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   16146:	4a03      	ldr	r2, [pc, #12]	; (16154 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16148:	78db      	ldrb	r3, [r3, #3]
   1614a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1614c:	f7fc b8de 	b.w	1230c <memq_enqueue>
   16150:	20000568 	.word	0x20000568
   16154:	20004550 	.word	0x20004550

00016158 <ll_rx_sched>:
	k_sem_give(sem_recv);
   16158:	4b01      	ldr	r3, [pc, #4]	; (16160 <ll_rx_sched+0x8>)
   1615a:	6818      	ldr	r0, [r3, #0]
   1615c:	f00e bc16 	b.w	2498c <z_impl_k_sem_give>
   16160:	20004564 	.word	0x20004564

00016164 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   16164:	4b0d      	ldr	r3, [pc, #52]	; (1619c <ll_pdu_rx_alloc_peek+0x38>)
   16166:	7899      	ldrb	r1, [r3, #2]
   16168:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   1616a:	4291      	cmp	r1, r2
   1616c:	d80a      	bhi.n	16184 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   1616e:	eba2 0c01 	sub.w	ip, r2, r1
   16172:	fa5f fc8c 	uxtb.w	ip, ip
   16176:	4560      	cmp	r0, ip
   16178:	d802      	bhi.n	16180 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1617a:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1617c:	7818      	ldrb	r0, [r3, #0]
   1617e:	d109      	bne.n	16194 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   16180:	2000      	movs	r0, #0
}
   16182:	4770      	bx	lr
		return count - first + last;
   16184:	f893 c001 	ldrb.w	ip, [r3, #1]
   16188:	4462      	add	r2, ip
   1618a:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1618c:	b2d2      	uxtb	r2, r2
   1618e:	4290      	cmp	r0, r2
   16190:	d8f6      	bhi.n	16180 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   16192:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   16194:	fb01 3300 	mla	r3, r1, r0, r3
   16198:	6858      	ldr	r0, [r3, #4]
   1619a:	4770      	bx	lr
   1619c:	2000043c 	.word	0x2000043c

000161a0 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   161a0:	4b09      	ldr	r3, [pc, #36]	; (161c8 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   161a2:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   161a4:	78da      	ldrb	r2, [r3, #3]
   161a6:	7818      	ldrb	r0, [r3, #0]
   161a8:	f893 c001 	ldrb.w	ip, [r3, #1]
   161ac:	428a      	cmp	r2, r1
   161ae:	d009      	beq.n	161c4 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   161b0:	1c4a      	adds	r2, r1, #1
   161b2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   161b4:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   161b8:	4594      	cmp	ip, r2
   161ba:	bf08      	it	eq
   161bc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   161be:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   161c0:	709a      	strb	r2, [r3, #2]

	return mem;
   161c2:	4770      	bx	lr
		return NULL;
   161c4:	2000      	movs	r0, #0
}
   161c6:	4770      	bx	lr
   161c8:	2000043c 	.word	0x2000043c

000161cc <ll_tx_ack_put>:
{
   161cc:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   161ce:	4a15      	ldr	r2, [pc, #84]	; (16224 <ll_tx_ack_put+0x58>)
   161d0:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   161d4:	7854      	ldrb	r4, [r2, #1]
   161d6:	f892 e002 	ldrb.w	lr, [r2, #2]
   161da:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   161dc:	f10c 0301 	add.w	r3, ip, #1
   161e0:	b2db      	uxtb	r3, r3
		last = 0U;
   161e2:	429c      	cmp	r4, r3
   161e4:	bf08      	it	eq
   161e6:	2300      	moveq	r3, #0
	if (last == first) {
   161e8:	459e      	cmp	lr, r3
   161ea:	d00a      	beq.n	16202 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   161ec:	fb1c fc05 	smulbb	ip, ip, r5
   161f0:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   161f4:	f82e 000c 	strh.w	r0, [lr, ip]
   161f8:	44f4      	add	ip, lr
	tx->node = node_tx;
   161fa:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   161fe:	70d3      	strb	r3, [r2, #3]
}
   16200:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   16202:	4a09      	ldr	r2, [pc, #36]	; (16228 <ll_tx_ack_put+0x5c>)
   16204:	4909      	ldr	r1, [pc, #36]	; (1622c <ll_tx_ack_put+0x60>)
   16206:	480a      	ldr	r0, [pc, #40]	; (16230 <ll_tx_ack_put+0x64>)
   16208:	f240 634e 	movw	r3, #1614	; 0x64e
   1620c:	f00f fc7a 	bl	25b04 <printk>
   16210:	4040      	eors	r0, r0
   16212:	f380 8811 	msr	BASEPRI, r0
   16216:	f04f 0003 	mov.w	r0, #3
   1621a:	df02      	svc	2
	tx->handle = handle;
   1621c:	2300      	movs	r3, #0
   1621e:	801b      	strh	r3, [r3, #0]
   16220:	deff      	udf	#255	; 0xff
   16222:	bf00      	nop
   16224:	20000568 	.word	0x20000568
   16228:	0002ccc4 	.word	0x0002ccc4
   1622c:	0002d000 	.word	0x0002d000
   16230:	0002c8dc 	.word	0x0002c8dc

00016234 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16234:	f030 0302 	bics.w	r3, r0, #2
{
   16238:	b510      	push	{r4, lr}
   1623a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1623c:	d002      	beq.n	16244 <ull_ticker_status_take+0x10>
   1623e:	680b      	ldr	r3, [r1, #0]
   16240:	2b02      	cmp	r3, #2
   16242:	d008      	beq.n	16256 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   16244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1624c:	4809      	ldr	r0, [pc, #36]	; (16274 <ull_ticker_status_take+0x40>)
   1624e:	f00e fbc3 	bl	249d8 <z_impl_k_sem_take>
	return *ret_cb;
   16252:	6820      	ldr	r0, [r4, #0]
}
   16254:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16256:	4a08      	ldr	r2, [pc, #32]	; (16278 <ull_ticker_status_take+0x44>)
   16258:	4908      	ldr	r1, [pc, #32]	; (1627c <ull_ticker_status_take+0x48>)
   1625a:	4809      	ldr	r0, [pc, #36]	; (16280 <ull_ticker_status_take+0x4c>)
   1625c:	f240 6382 	movw	r3, #1666	; 0x682
   16260:	f00f fc50 	bl	25b04 <printk>
   16264:	4040      	eors	r0, r0
   16266:	f380 8811 	msr	BASEPRI, r0
   1626a:	f04f 0003 	mov.w	r0, #3
   1626e:	df02      	svc	2
   16270:	e7e8      	b.n	16244 <ull_ticker_status_take+0x10>
   16272:	bf00      	nop
   16274:	20004568 	.word	0x20004568
   16278:	0002ccc4 	.word	0x0002ccc4
   1627c:	0002cde4 	.word	0x0002cde4
   16280:	0002c8dc 	.word	0x0002c8dc

00016284 <ull_disable_mark>:
	if (!*m) {
   16284:	4a03      	ldr	r2, [pc, #12]	; (16294 <ull_disable_mark+0x10>)
{
   16286:	4603      	mov	r3, r0
	if (!*m) {
   16288:	6810      	ldr	r0, [r2, #0]
   1628a:	b100      	cbz	r0, 1628e <ull_disable_mark+0xa>
}
   1628c:	4770      	bx	lr
		*m = param;
   1628e:	6013      	str	r3, [r2, #0]
   16290:	4618      	mov	r0, r3
}
   16292:	4770      	bx	lr
   16294:	2000429c 	.word	0x2000429c

00016298 <ull_disable_unmark>:
	if (*m && *m == param) {
   16298:	4a04      	ldr	r2, [pc, #16]	; (162ac <ull_disable_unmark+0x14>)
   1629a:	6813      	ldr	r3, [r2, #0]
   1629c:	b123      	cbz	r3, 162a8 <ull_disable_unmark+0x10>
   1629e:	4298      	cmp	r0, r3
		*m = NULL;
   162a0:	bf06      	itte	eq
   162a2:	2100      	moveq	r1, #0
   162a4:	6011      	streq	r1, [r2, #0]
	return NULL;
   162a6:	2300      	movne	r3, #0
}
   162a8:	4618      	mov	r0, r3
   162aa:	4770      	bx	lr
   162ac:	2000429c 	.word	0x2000429c

000162b0 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   162b0:	4b01      	ldr	r3, [pc, #4]	; (162b8 <ull_disable_mark_get+0x8>)
}
   162b2:	6818      	ldr	r0, [r3, #0]
   162b4:	4770      	bx	lr
   162b6:	bf00      	nop
   162b8:	2000429c 	.word	0x2000429c

000162bc <ull_update_mark>:
	if (!*m) {
   162bc:	4a03      	ldr	r2, [pc, #12]	; (162cc <ull_update_mark+0x10>)
{
   162be:	4603      	mov	r3, r0
	if (!*m) {
   162c0:	6810      	ldr	r0, [r2, #0]
   162c2:	b100      	cbz	r0, 162c6 <ull_update_mark+0xa>
}
   162c4:	4770      	bx	lr
		*m = param;
   162c6:	6013      	str	r3, [r2, #0]
   162c8:	4618      	mov	r0, r3
}
   162ca:	4770      	bx	lr
   162cc:	200042a0 	.word	0x200042a0

000162d0 <ull_update_unmark>:
	if (*m && *m == param) {
   162d0:	4a04      	ldr	r2, [pc, #16]	; (162e4 <ull_update_unmark+0x14>)
   162d2:	6813      	ldr	r3, [r2, #0]
   162d4:	b123      	cbz	r3, 162e0 <ull_update_unmark+0x10>
   162d6:	4298      	cmp	r0, r3
		*m = NULL;
   162d8:	bf06      	itte	eq
   162da:	2100      	moveq	r1, #0
   162dc:	6011      	streq	r1, [r2, #0]
	return NULL;
   162de:	2300      	movne	r3, #0
}
   162e0:	4618      	mov	r0, r3
   162e2:	4770      	bx	lr
   162e4:	200042a0 	.word	0x200042a0

000162e8 <ull_update_mark_get>:
	return mark_get(mark_update);
   162e8:	4b01      	ldr	r3, [pc, #4]	; (162f0 <ull_update_mark_get+0x8>)
}
   162ea:	6818      	ldr	r0, [r3, #0]
   162ec:	4770      	bx	lr
   162ee:	bf00      	nop
   162f0:	200042a0 	.word	0x200042a0

000162f4 <ull_disable>:
{
   162f4:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   162f6:	6805      	ldr	r5, [r0, #0]
   162f8:	782b      	ldrb	r3, [r5, #0]
{
   162fa:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   162fc:	b353      	cbz	r3, 16354 <ull_disable+0x60>
	compiler_barrier();
   162fe:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   16300:	2201      	movs	r2, #1
   16302:	2100      	movs	r1, #0
   16304:	4668      	mov	r0, sp
   16306:	f014 fd13 	bl	2ad30 <z_impl_k_sem_init>
   1630a:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   1630c:	4a13      	ldr	r2, [pc, #76]	; (1635c <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   1630e:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   16312:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   16314:	b1f3      	cbz	r3, 16354 <ull_disable+0x60>
	mfy.param = lll;
   16316:	4b12      	ldr	r3, [pc, #72]	; (16360 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   16318:	2200      	movs	r2, #0
   1631a:	4611      	mov	r1, r2
   1631c:	2003      	movs	r0, #3
	mfy.param = lll;
   1631e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   16320:	f7fc f868 	bl	123f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   16324:	b940      	cbnz	r0, 16338 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   16326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1632a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1632e:	4668      	mov	r0, sp
   16330:	f00e fb52 	bl	249d8 <z_impl_k_sem_take>
}
   16334:	b007      	add	sp, #28
   16336:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   16338:	4a0a      	ldr	r2, [pc, #40]	; (16364 <ull_disable+0x70>)
   1633a:	490b      	ldr	r1, [pc, #44]	; (16368 <ull_disable+0x74>)
   1633c:	480b      	ldr	r0, [pc, #44]	; (1636c <ull_disable+0x78>)
   1633e:	f240 63ff 	movw	r3, #1791	; 0x6ff
   16342:	f00f fbdf 	bl	25b04 <printk>
   16346:	4040      	eors	r0, r0
   16348:	f380 8811 	msr	BASEPRI, r0
   1634c:	f04f 0003 	mov.w	r0, #3
   16350:	df02      	svc	2
   16352:	e7e8      	b.n	16326 <ull_disable+0x32>
		return -EALREADY;
   16354:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16358:	e7ec      	b.n	16334 <ull_disable+0x40>
   1635a:	bf00      	nop
   1635c:	00015849 	.word	0x00015849
   16360:	200005cc 	.word	0x200005cc
   16364:	0002ccc4 	.word	0x0002ccc4
   16368:	0002cddc 	.word	0x0002cddc
   1636c:	0002c8dc 	.word	0x0002c8dc

00016370 <ull_ticker_stop_with_mark>:
{
   16370:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   16372:	4e20      	ldr	r6, [pc, #128]	; (163f4 <ull_ticker_stop_with_mark+0x84>)
   16374:	6833      	ldr	r3, [r6, #0]
{
   16376:	b085      	sub	sp, #20
   16378:	460c      	mov	r4, r1
   1637a:	4617      	mov	r7, r2
	if (!*m) {
   1637c:	b353      	cbz	r3, 163d4 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   1637e:	4299      	cmp	r1, r3
   16380:	d113      	bne.n	163aa <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   16382:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   16384:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   16386:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   16388:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1638a:	9500      	str	r5, [sp, #0]
   1638c:	4b1a      	ldr	r3, [pc, #104]	; (163f8 <ull_ticker_stop_with_mark+0x88>)
   1638e:	2103      	movs	r1, #3
   16390:	2000      	movs	r0, #0
   16392:	f7fd fa85 	bl	138a0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   16396:	4629      	mov	r1, r5
   16398:	f7ff ff4c 	bl	16234 <ull_ticker_status_take>
	if (ret) {
   1639c:	4605      	mov	r5, r0
   1639e:	b140      	cbz	r0, 163b2 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   163a0:	6833      	ldr	r3, [r6, #0]
   163a2:	b10b      	cbz	r3, 163a8 <ull_ticker_stop_with_mark+0x38>
   163a4:	429c      	cmp	r4, r3
   163a6:	d017      	beq.n	163d8 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   163a8:	b304      	cbz	r4, 163ec <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   163aa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   163ae:	b005      	add	sp, #20
   163b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   163b2:	4638      	mov	r0, r7
   163b4:	f7ff ff9e 	bl	162f4 <ull_disable>
	if (*m && *m == param) {
   163b8:	6833      	ldr	r3, [r6, #0]
   163ba:	b10b      	cbz	r3, 163c0 <ull_ticker_stop_with_mark+0x50>
   163bc:	429c      	cmp	r4, r3
   163be:	d011      	beq.n	163e4 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   163c0:	2c00      	cmp	r4, #0
   163c2:	d1f2      	bne.n	163aa <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   163c4:	2800      	cmp	r0, #0
   163c6:	d0f2      	beq.n	163ae <ull_ticker_stop_with_mark+0x3e>
	return 0;
   163c8:	f110 0f78 	cmn.w	r0, #120	; 0x78
   163cc:	bf08      	it	eq
   163ce:	2000      	moveq	r0, #0
}
   163d0:	b005      	add	sp, #20
   163d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   163d4:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   163d6:	e7d4      	b.n	16382 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   163d8:	2300      	movs	r3, #0
		return -EALREADY;
   163da:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   163de:	6033      	str	r3, [r6, #0]
}
   163e0:	b005      	add	sp, #20
   163e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   163e4:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   163e6:	2800      	cmp	r0, #0
   163e8:	d0e1      	beq.n	163ae <ull_ticker_stop_with_mark+0x3e>
   163ea:	e7ed      	b.n	163c8 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   163ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   163f0:	e7dd      	b.n	163ae <ull_ticker_stop_with_mark+0x3e>
   163f2:	bf00      	nop
   163f4:	2000429c 	.word	0x2000429c
   163f8:	0001583d 	.word	0x0001583d

000163fc <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   163fc:	4b0d      	ldr	r3, [pc, #52]	; (16434 <ull_pdu_rx_alloc_peek+0x38>)
   163fe:	7899      	ldrb	r1, [r3, #2]
   16400:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   16402:	4291      	cmp	r1, r2
   16404:	d80a      	bhi.n	1641c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   16406:	eba2 0c01 	sub.w	ip, r2, r1
   1640a:	fa5f fc8c 	uxtb.w	ip, ip
   1640e:	4560      	cmp	r0, ip
   16410:	d802      	bhi.n	16418 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   16412:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   16414:	7818      	ldrb	r0, [r3, #0]
   16416:	d109      	bne.n	1642c <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   16418:	2000      	movs	r0, #0
}
   1641a:	4770      	bx	lr
		return count - first + last;
   1641c:	f893 c001 	ldrb.w	ip, [r3, #1]
   16420:	4462      	add	r2, ip
   16422:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   16424:	b2d2      	uxtb	r2, r2
   16426:	4290      	cmp	r0, r2
   16428:	d8f6      	bhi.n	16418 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1642a:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   1642c:	fb01 3300 	mla	r3, r1, r0, r3
   16430:	6858      	ldr	r0, [r3, #4]
   16432:	4770      	bx	lr
   16434:	2000044c 	.word	0x2000044c

00016438 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   16438:	4b09      	ldr	r3, [pc, #36]	; (16460 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1643a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1643c:	78da      	ldrb	r2, [r3, #3]
   1643e:	7818      	ldrb	r0, [r3, #0]
   16440:	f893 c001 	ldrb.w	ip, [r3, #1]
   16444:	428a      	cmp	r2, r1
   16446:	d009      	beq.n	1645c <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   16448:	1c4a      	adds	r2, r1, #1
   1644a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1644c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   16450:	4594      	cmp	ip, r2
   16452:	bf08      	it	eq
   16454:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   16456:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   16458:	709a      	strb	r2, [r3, #2]
	return mem;
   1645a:	4770      	bx	lr
		return NULL;
   1645c:	2000      	movs	r0, #0
}
   1645e:	4770      	bx	lr
   16460:	2000044c 	.word	0x2000044c

00016464 <ull_rx_put>:
{
   16464:	b538      	push	{r3, r4, r5, lr}
   16466:	460c      	mov	r4, r1
   16468:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1646a:	f003 fd27 	bl	19ebc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1646e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   16470:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   16472:	4a03      	ldr	r2, [pc, #12]	; (16480 <ull_rx_put+0x1c>)
   16474:	4628      	mov	r0, r5
}
   16476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1647a:	f7fb bf47 	b.w	1230c <memq_enqueue>
   1647e:	bf00      	nop
   16480:	20004560 	.word	0x20004560

00016484 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   16484:	2201      	movs	r2, #1
   16486:	4b02      	ldr	r3, [pc, #8]	; (16490 <ull_rx_sched+0xc>)
   16488:	4611      	mov	r1, r2
   1648a:	2000      	movs	r0, #0
   1648c:	f7fb bfb2 	b.w	123f4 <mayfly_enqueue>
   16490:	200005bc 	.word	0x200005bc

00016494 <ull_prepare_enqueue>:
{
   16494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   16498:	4e15      	ldr	r6, [pc, #84]	; (164f0 <ull_prepare_enqueue+0x5c>)
{
   1649a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1649e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   164a0:	78f3      	ldrb	r3, [r6, #3]
{
   164a2:	460f      	mov	r7, r1
	last = last + 1;
   164a4:	1c5d      	adds	r5, r3, #1
   164a6:	4611      	mov	r1, r2
	if (last == count) {
   164a8:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   164aa:	b2ed      	uxtb	r5, r5
		last = 0U;
   164ac:	42aa      	cmp	r2, r5
   164ae:	bf08      	it	eq
   164b0:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   164b2:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   164b4:	42aa      	cmp	r2, r5
{
   164b6:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   164b8:	7830      	ldrb	r0, [r6, #0]
   164ba:	d015      	beq.n	164e8 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   164bc:	1d34      	adds	r4, r6, #4
   164be:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   164c2:	2210      	movs	r2, #16
   164c4:	4620      	mov	r0, r4
   164c6:	f012 f973 	bl	287b0 <memcpy>
	e->is_resume = is_resume;
   164ca:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   164cc:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   164ce:	f00a 0a01 	and.w	sl, sl, #1
   164d2:	f023 0303 	bic.w	r3, r3, #3
   164d6:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   164da:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   164de:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   164e0:	70f5      	strb	r5, [r6, #3]
}
   164e2:	4620      	mov	r0, r4
   164e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   164e8:	2400      	movs	r4, #0
}
   164ea:	4620      	mov	r0, r4
   164ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   164f0:	20000464 	.word	0x20000464

000164f4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   164f4:	4b05      	ldr	r3, [pc, #20]	; (1650c <ull_prepare_dequeue_get+0x18>)
   164f6:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   164f8:	78da      	ldrb	r2, [r3, #3]
   164fa:	7819      	ldrb	r1, [r3, #0]
   164fc:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   164fe:	bf1a      	itte	ne
   16500:	3304      	addne	r3, #4
   16502:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   16506:	2000      	moveq	r0, #0
}
   16508:	4770      	bx	lr
   1650a:	bf00      	nop
   1650c:	20000464 	.word	0x20000464

00016510 <ull_prepare_dequeue_iter>:
{
   16510:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   16512:	4b0d      	ldr	r3, [pc, #52]	; (16548 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   16514:	7802      	ldrb	r2, [r0, #0]
   16516:	7859      	ldrb	r1, [r3, #1]
   16518:	f893 c003 	ldrb.w	ip, [r3, #3]
   1651c:	f893 e000 	ldrb.w	lr, [r3]
   16520:	4291      	cmp	r1, r2
   16522:	bf9c      	itt	ls
   16524:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   16526:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   16528:	4594      	cmp	ip, r2
   1652a:	d00a      	beq.n	16542 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   1652c:	1c53      	adds	r3, r2, #1
   1652e:	b2db      	uxtb	r3, r3
		i = 0U;
   16530:	4299      	cmp	r1, r3
   16532:	bf08      	it	eq
   16534:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   16536:	4905      	ldr	r1, [pc, #20]	; (1654c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   16538:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1653a:	fb02 100e 	mla	r0, r2, lr, r1
}
   1653e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   16542:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   16544:	e7fb      	b.n	1653e <ull_prepare_dequeue_iter+0x2e>
   16546:	bf00      	nop
   16548:	20000464 	.word	0x20000464
   1654c:	20000468 	.word	0x20000468

00016550 <ull_prepare_dequeue>:
{
   16550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   16554:	4c23      	ldr	r4, [pc, #140]	; (165e4 <ull_prepare_dequeue+0x94>)
   16556:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   16558:	78e1      	ldrb	r1, [r4, #3]
   1655a:	7823      	ldrb	r3, [r4, #0]
   1655c:	4291      	cmp	r1, r2
   1655e:	d027      	beq.n	165b0 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   16560:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   16562:	f8df 9084 	ldr.w	r9, [pc, #132]	; 165e8 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   16566:	f8df b084 	ldr.w	fp, [pc, #132]	; 165ec <ull_prepare_dequeue+0x9c>
   1656a:	f8df a084 	ldr.w	sl, [pc, #132]	; 165f0 <ull_prepare_dequeue+0xa0>
   1656e:	4680      	mov	r8, r0
   16570:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   16574:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   16576:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   16578:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   1657c:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   16580:	d518      	bpl.n	165b4 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   16582:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   16584:	78e1      	ldrb	r1, [r4, #3]
   16586:	7820      	ldrb	r0, [r4, #0]
   16588:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   1658c:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   1658e:	4291      	cmp	r1, r2
	_first += 1U;
   16590:	b2db      	uxtb	r3, r3
	if (_first == last) {
   16592:	d00d      	beq.n	165b0 <ull_prepare_dequeue+0x60>
		_first = 0U;
   16594:	459c      	cmp	ip, r3
   16596:	bf08      	it	eq
   16598:	2300      	moveq	r3, #0
	if (first == last) {
   1659a:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   1659c:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   1659e:	d007      	beq.n	165b0 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   165a0:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   165a4:	2d00      	cmp	r5, #0
   165a6:	d1e5      	bne.n	16574 <ull_prepare_dequeue+0x24>
   165a8:	b116      	cbz	r6, 165b0 <ull_prepare_dequeue+0x60>
   165aa:	7f03      	ldrb	r3, [r0, #28]
   165ac:	07db      	lsls	r3, r3, #31
   165ae:	d5e1      	bpl.n	16574 <ull_prepare_dequeue+0x24>
}
   165b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   165b4:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   165b8:	4b0b      	ldr	r3, [pc, #44]	; (165e8 <ull_prepare_dequeue+0x98>)
   165ba:	462a      	mov	r2, r5
   165bc:	4629      	mov	r1, r5
   165be:	4640      	mov	r0, r8
   165c0:	f7fb ff18 	bl	123f4 <mayfly_enqueue>
			LL_ASSERT(!ret);
   165c4:	2800      	cmp	r0, #0
   165c6:	d0dc      	beq.n	16582 <ull_prepare_dequeue+0x32>
   165c8:	480a      	ldr	r0, [pc, #40]	; (165f4 <ull_prepare_dequeue+0xa4>)
   165ca:	f240 7376 	movw	r3, #1910	; 0x776
   165ce:	465a      	mov	r2, fp
   165d0:	4651      	mov	r1, sl
   165d2:	f00f fa97 	bl	25b04 <printk>
   165d6:	4040      	eors	r0, r0
   165d8:	f380 8811 	msr	BASEPRI, r0
   165dc:	f04f 0003 	mov.w	r0, #3
   165e0:	df02      	svc	2
   165e2:	e7ce      	b.n	16582 <ull_prepare_dequeue+0x32>
   165e4:	20000464 	.word	0x20000464
   165e8:	2000058c 	.word	0x2000058c
   165ec:	0002ccc4 	.word	0x0002ccc4
   165f0:	0002cddc 	.word	0x0002cddc
   165f4:	0002c8dc 	.word	0x0002c8dc

000165f8 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   165f8:	4b06      	ldr	r3, [pc, #24]	; (16614 <ull_event_done_extra_get+0x1c>)
   165fa:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   165fc:	78d9      	ldrb	r1, [r3, #3]
   165fe:	7818      	ldrb	r0, [r3, #0]
   16600:	4291      	cmp	r1, r2
   16602:	d005      	beq.n	16610 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   16604:	fb02 3300 	mla	r3, r2, r0, r3
   16608:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1660a:	b110      	cbz	r0, 16612 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   1660c:	3020      	adds	r0, #32
   1660e:	4770      	bx	lr
		return NULL;
   16610:	2000      	movs	r0, #0
}
   16612:	4770      	bx	lr
   16614:	20000424 	.word	0x20000424

00016618 <ull_event_done>:
{
   16618:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   1661a:	4a13      	ldr	r2, [pc, #76]	; (16668 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   1661c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1661e:	78d4      	ldrb	r4, [r2, #3]
   16620:	7811      	ldrb	r1, [r2, #0]
   16622:	429c      	cmp	r4, r3
{
   16624:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   16626:	7850      	ldrb	r0, [r2, #1]
   16628:	d01b      	beq.n	16662 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   1662a:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1662e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   16630:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   16632:	b2db      	uxtb	r3, r3
		_first = 0U;
   16634:	4298      	cmp	r0, r3
   16636:	bf08      	it	eq
   16638:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1663a:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1663c:	b17c      	cbz	r4, 1665e <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1663e:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   16640:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   16642:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   16644:	4a09      	ldr	r2, [pc, #36]	; (1666c <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   16646:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   16648:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   1664a:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   1664c:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1664e:	f7fb fe5d 	bl	1230c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   16652:	2201      	movs	r2, #1
   16654:	4b06      	ldr	r3, [pc, #24]	; (16670 <ull_event_done+0x58>)
   16656:	4611      	mov	r1, r2
   16658:	4628      	mov	r0, r5
   1665a:	f7fb fecb 	bl	123f4 <mayfly_enqueue>
}
   1665e:	4620      	mov	r0, r4
   16660:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   16662:	2400      	movs	r4, #0
   16664:	e7fb      	b.n	1665e <ull_event_done+0x46>
   16666:	bf00      	nop
   16668:	20000424 	.word	0x20000424
   1666c:	20004558 	.word	0x20004558
   16670:	200005ac 	.word	0x200005ac

00016674 <ull_rxfifo_alloc>:
{
   16674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16678:	b083      	sub	sp, #12
   1667a:	461d      	mov	r5, r3
   1667c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1667e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   16682:	e9cd 0400 	strd	r0, r4, [sp]
   16686:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1668a:	b33b      	cbz	r3, 166dc <ull_rxfifo_alloc+0x68>
   1668c:	1e5c      	subs	r4, r3, #1
   1668e:	f895 b000 	ldrb.w	fp, [r5]
   16692:	4688      	mov	r8, r1
   16694:	4617      	mov	r7, r2
   16696:	b2e4      	uxtb	r4, r4
	last = last + 1;
   16698:	f10b 0301 	add.w	r3, fp, #1
   1669c:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   166a0:	45d8      	cmp	r8, fp
   166a2:	bf08      	it	eq
   166a4:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   166a8:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   166aa:	4648      	mov	r0, r9
   166ac:	d016      	beq.n	166dc <ull_rxfifo_alloc+0x68>
   166ae:	f7fb fdc9 	bl	12244 <mem_acquire>
   166b2:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   166b4:	4650      	mov	r0, sl
		if (!link) {
   166b6:	b18e      	cbz	r6, 166dc <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   166b8:	f7fb fdc4 	bl	12244 <mem_acquire>
		if (!rx) {
   166bc:	b188      	cbz	r0, 166e2 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   166be:	2300      	movs	r3, #0
   166c0:	6073      	str	r3, [r6, #4]
		rx->link = link;
   166c2:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   166c4:	782a      	ldrb	r2, [r5, #0]
   166c6:	9b00      	ldr	r3, [sp, #0]
   166c8:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   166cc:	9b01      	ldr	r3, [sp, #4]
   166ce:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   166d0:	3c01      	subs	r4, #1
   166d2:	b2e4      	uxtb	r4, r4
   166d4:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   166d6:	f885 b000 	strb.w	fp, [r5]
   166da:	d1dd      	bne.n	16698 <ull_rxfifo_alloc+0x24>
}
   166dc:	b003      	add	sp, #12
   166de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   166e2:	4649      	mov	r1, r9
   166e4:	4630      	mov	r0, r6
}
   166e6:	b003      	add	sp, #12
   166e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   166ec:	f7fb bdc4 	b.w	12278 <mem_release>

000166f0 <init_reset>:
{
   166f0:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   166f2:	4c3f      	ldr	r4, [pc, #252]	; (167f0 <init_reset+0x100>)
   166f4:	4d3f      	ldr	r5, [pc, #252]	; (167f4 <init_reset+0x104>)
   166f6:	79a2      	ldrb	r2, [r4, #6]
   166f8:	88a1      	ldrh	r1, [r4, #4]
   166fa:	4e3f      	ldr	r6, [pc, #252]	; (167f8 <init_reset+0x108>)
   166fc:	2000      	movs	r0, #0
{
   166fe:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   16700:	4623      	mov	r3, r4
   16702:	8068      	strh	r0, [r5, #2]
   16704:	f104 0008 	add.w	r0, r4, #8
   16708:	f7fb fd6c 	bl	121e4 <mem_init>
   1670c:	79e3      	ldrb	r3, [r4, #7]
   1670e:	79a2      	ldrb	r2, [r4, #6]
   16710:	1d30      	adds	r0, r6, #4
   16712:	441a      	add	r2, r3
   16714:	2108      	movs	r1, #8
   16716:	4633      	mov	r3, r6
   16718:	f7fb fd64 	bl	121e4 <mem_init>
   1671c:	9602      	str	r6, [sp, #8]
   1671e:	462e      	mov	r6, r5
   16720:	79a3      	ldrb	r3, [r4, #6]
   16722:	f816 0b04 	ldrb.w	r0, [r6], #4
   16726:	78aa      	ldrb	r2, [r5, #2]
   16728:	7869      	ldrb	r1, [r5, #1]
   1672a:	9303      	str	r3, [sp, #12]
   1672c:	e9cd 6400 	strd	r6, r4, [sp]
   16730:	1ceb      	adds	r3, r5, #3
   16732:	f7ff ff9f 	bl	16674 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   16736:	4b31      	ldr	r3, [pc, #196]	; (167fc <init_reset+0x10c>)
   16738:	2208      	movs	r2, #8
   1673a:	1d18      	adds	r0, r3, #4
   1673c:	2144      	movs	r1, #68	; 0x44
   1673e:	f7fb fd51 	bl	121e4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   16742:	4b2f      	ldr	r3, [pc, #188]	; (16800 <init_reset+0x110>)
   16744:	220a      	movs	r2, #10
   16746:	1d18      	adds	r0, r3, #4
   16748:	2108      	movs	r1, #8
   1674a:	f7fb fd4b 	bl	121e4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1674e:	482c      	ldr	r0, [pc, #176]	; (16800 <init_reset+0x110>)
   16750:	f7fb fd78 	bl	12244 <mem_acquire>
	LL_ASSERT(link);
   16754:	4604      	mov	r4, r0
   16756:	b308      	cbz	r0, 1679c <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   16758:	4a2a      	ldr	r2, [pc, #168]	; (16804 <init_reset+0x114>)
   1675a:	4620      	mov	r0, r4
   1675c:	1f11      	subs	r1, r2, #4
   1675e:	f7fb fdc7 	bl	122f0 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   16762:	4825      	ldr	r0, [pc, #148]	; (167f8 <init_reset+0x108>)
   16764:	f7fb fd6e 	bl	12244 <mem_acquire>
	LL_ASSERT(link);
   16768:	4604      	mov	r4, r0
   1676a:	b328      	cbz	r0, 167b8 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   1676c:	4a26      	ldr	r2, [pc, #152]	; (16808 <init_reset+0x118>)
   1676e:	4620      	mov	r0, r4
   16770:	1f11      	subs	r1, r2, #4
   16772:	f7fb fdbd 	bl	122f0 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   16776:	4822      	ldr	r0, [pc, #136]	; (16800 <init_reset+0x110>)
   16778:	f7fb fd64 	bl	12244 <mem_acquire>
	LL_ASSERT(link);
   1677c:	4604      	mov	r4, r0
   1677e:	b348      	cbz	r0, 167d4 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   16780:	4a22      	ldr	r2, [pc, #136]	; (1680c <init_reset+0x11c>)
   16782:	4620      	mov	r0, r4
   16784:	1f11      	subs	r1, r2, #4
   16786:	f7fb fdb3 	bl	122f0 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1678a:	4b21      	ldr	r3, [pc, #132]	; (16810 <init_reset+0x120>)
   1678c:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   1678e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   16790:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   16792:	f7ff f945 	bl	15a20 <rx_alloc>
}
   16796:	2000      	movs	r0, #0
   16798:	b004      	add	sp, #16
   1679a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1679c:	4a1d      	ldr	r2, [pc, #116]	; (16814 <init_reset+0x124>)
   1679e:	491e      	ldr	r1, [pc, #120]	; (16818 <init_reset+0x128>)
   167a0:	481e      	ldr	r0, [pc, #120]	; (1681c <init_reset+0x12c>)
   167a2:	f640 0302 	movw	r3, #2050	; 0x802
   167a6:	f00f f9ad 	bl	25b04 <printk>
   167aa:	4040      	eors	r0, r0
   167ac:	f380 8811 	msr	BASEPRI, r0
   167b0:	f04f 0003 	mov.w	r0, #3
   167b4:	df02      	svc	2
   167b6:	e7cf      	b.n	16758 <init_reset+0x68>
	LL_ASSERT(link);
   167b8:	4a16      	ldr	r2, [pc, #88]	; (16814 <init_reset+0x124>)
   167ba:	4917      	ldr	r1, [pc, #92]	; (16818 <init_reset+0x128>)
   167bc:	4817      	ldr	r0, [pc, #92]	; (1681c <init_reset+0x12c>)
   167be:	f640 030a 	movw	r3, #2058	; 0x80a
   167c2:	f00f f99f 	bl	25b04 <printk>
   167c6:	4040      	eors	r0, r0
   167c8:	f380 8811 	msr	BASEPRI, r0
   167cc:	f04f 0003 	mov.w	r0, #3
   167d0:	df02      	svc	2
   167d2:	e7cb      	b.n	1676c <init_reset+0x7c>
	LL_ASSERT(link);
   167d4:	4a0f      	ldr	r2, [pc, #60]	; (16814 <init_reset+0x124>)
   167d6:	4910      	ldr	r1, [pc, #64]	; (16818 <init_reset+0x128>)
   167d8:	4810      	ldr	r0, [pc, #64]	; (1681c <init_reset+0x12c>)
   167da:	f640 0312 	movw	r3, #2066	; 0x812
   167de:	f00f f991 	bl	25b04 <printk>
   167e2:	4040      	eors	r0, r0
   167e4:	f380 8811 	msr	BASEPRI, r0
   167e8:	f04f 0003 	mov.w	r0, #3
   167ec:	df02      	svc	2
   167ee:	e7c7      	b.n	16780 <init_reset+0x90>
   167f0:	2000037c 	.word	0x2000037c
   167f4:	20000424 	.word	0x20000424
   167f8:	200042a4 	.word	0x200042a4
   167fc:	20004328 	.word	0x20004328
   16800:	200042d4 	.word	0x200042d4
   16804:	20004560 	.word	0x20004560
   16808:	20004558 	.word	0x20004558
   1680c:	20004550 	.word	0x20004550
   16810:	200042d0 	.word	0x200042d0
   16814:	0002ccc4 	.word	0x0002ccc4
   16818:	0002d00c 	.word	0x0002d00c
   1681c:	0002c8dc 	.word	0x0002c8dc

00016820 <ll_init>:
{
   16820:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   16822:	4b30      	ldr	r3, [pc, #192]	; (168e4 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16824:	4d30      	ldr	r5, [pc, #192]	; (168e8 <ll_init+0xc8>)
	sem_recv = sem_rx;
   16826:	6018      	str	r0, [r3, #0]
{
   16828:	b087      	sub	sp, #28
	cntr_init();
   1682a:	f007 fd63 	bl	1e2f4 <cntr_init>
	mayfly_init();
   1682e:	f7fb fd8f 	bl	12350 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16832:	4a2e      	ldr	r2, [pc, #184]	; (168ec <ll_init+0xcc>)
   16834:	4c2e      	ldr	r4, [pc, #184]	; (168f0 <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   16836:	492f      	ldr	r1, [pc, #188]	; (168f4 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16838:	e9cd 2504 	strd	r2, r5, [sp, #16]
   1683c:	4a2e      	ldr	r2, [pc, #184]	; (168f8 <ll_init+0xd8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1683e:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16840:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   16844:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16846:	240c      	movs	r4, #12
   16848:	e9cd 1400 	strd	r1, r4, [sp]
   1684c:	4a2b      	ldr	r2, [pc, #172]	; (168fc <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1684e:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   16850:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   16852:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   16854:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16856:	2000      	movs	r0, #0
   16858:	2106      	movs	r1, #6
   1685a:	f7fc fee5 	bl	13628 <ticker_init>
	LL_ASSERT(!err);
   1685e:	2800      	cmp	r0, #0
   16860:	d132      	bne.n	168c8 <ll_init+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16862:	2201      	movs	r2, #1
   16864:	2100      	movs	r1, #0
   16866:	4826      	ldr	r0, [pc, #152]	; (16900 <ll_init+0xe0>)
   16868:	f014 fa62 	bl	2ad30 <z_impl_k_sem_init>
	err = lll_init();
   1686c:	f005 fcfa 	bl	1c264 <lll_init>
	if (err) {
   16870:	4604      	mov	r4, r0
   16872:	b110      	cbz	r0, 1687a <ll_init+0x5a>
}
   16874:	4620      	mov	r0, r4
   16876:	b007      	add	sp, #28
   16878:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   1687a:	f7ff ff39 	bl	166f0 <init_reset>
	if (err) {
   1687e:	4604      	mov	r4, r0
   16880:	2800      	cmp	r0, #0
   16882:	d1f7      	bne.n	16874 <ll_init+0x54>
	err = lll_adv_init();
   16884:	f006 f914 	bl	1cab0 <lll_adv_init>
	if (err) {
   16888:	4604      	mov	r4, r0
   1688a:	2800      	cmp	r0, #0
   1688c:	d1f2      	bne.n	16874 <ll_init+0x54>
	err = ull_adv_init();
   1688e:	f000 fb45 	bl	16f1c <ull_adv_init>
	if (err) {
   16892:	4604      	mov	r4, r0
   16894:	2800      	cmp	r0, #0
   16896:	d1ed      	bne.n	16874 <ll_init+0x54>
	err = lll_scan_init();
   16898:	f006 ff82 	bl	1d7a0 <lll_scan_init>
	if (err) {
   1689c:	4604      	mov	r4, r0
   1689e:	2800      	cmp	r0, #0
   168a0:	d1e8      	bne.n	16874 <ll_init+0x54>
	err = ull_scan_init();
   168a2:	f000 fcc5 	bl	17230 <ull_scan_init>
	if (err) {
   168a6:	4604      	mov	r4, r0
   168a8:	2800      	cmp	r0, #0
   168aa:	d1e3      	bne.n	16874 <ll_init+0x54>
	err = lll_conn_init();
   168ac:	f007 f888 	bl	1d9c0 <lll_conn_init>
	if (err) {
   168b0:	4604      	mov	r4, r0
   168b2:	2800      	cmp	r0, #0
   168b4:	d1de      	bne.n	16874 <ll_init+0x54>
	err = ull_conn_init();
   168b6:	f001 fca1 	bl	181fc <ull_conn_init>
	if (err) {
   168ba:	4604      	mov	r4, r0
   168bc:	2800      	cmp	r0, #0
   168be:	d1d9      	bne.n	16874 <ll_init+0x54>
		ull_filter_reset(true);
   168c0:	2001      	movs	r0, #1
   168c2:	f004 fda1 	bl	1b408 <ull_filter_reset>
	return  0;
   168c6:	e7d5      	b.n	16874 <ll_init+0x54>
	LL_ASSERT(!err);
   168c8:	4a0e      	ldr	r2, [pc, #56]	; (16904 <ll_init+0xe4>)
   168ca:	490f      	ldr	r1, [pc, #60]	; (16908 <ll_init+0xe8>)
   168cc:	480f      	ldr	r0, [pc, #60]	; (1690c <ll_init+0xec>)
   168ce:	f240 230d 	movw	r3, #525	; 0x20d
   168d2:	f00f f917 	bl	25b04 <printk>
   168d6:	4040      	eors	r0, r0
   168d8:	f380 8811 	msr	BASEPRI, r0
   168dc:	f04f 0003 	mov.w	r0, #3
   168e0:	df02      	svc	2
   168e2:	e7be      	b.n	16862 <ll_init+0x42>
   168e4:	20004564 	.word	0x20004564
   168e8:	0001eff9 	.word	0x0001eff9
   168ec:	0001eea9 	.word	0x0001eea9
   168f0:	0001ee45 	.word	0x0001ee45
   168f4:	20004910 	.word	0x20004910
   168f8:	200046a0 	.word	0x200046a0
   168fc:	20004580 	.word	0x20004580
   16900:	20004568 	.word	0x20004568
   16904:	0002ccc4 	.word	0x0002ccc4
   16908:	0002cd00 	.word	0x0002cd00
   1690c:	0002c8dc 	.word	0x0002c8dc

00016910 <ll_reset>:
{
   16910:	b510      	push	{r4, lr}
   16912:	b086      	sub	sp, #24
	err = ull_adv_reset();
   16914:	f000 fb12 	bl	16f3c <ull_adv_reset>
	LL_ASSERT(!err);
   16918:	2800      	cmp	r0, #0
   1691a:	d133      	bne.n	16984 <ll_reset+0x74>
	err = ull_scan_reset();
   1691c:	f000 fd08 	bl	17330 <ull_scan_reset>
	LL_ASSERT(!err);
   16920:	2800      	cmp	r0, #0
   16922:	d140      	bne.n	169a6 <ll_reset+0x96>
	err = ull_conn_reset();
   16924:	f001 fc6c 	bl	18200 <ull_conn_reset>
	LL_ASSERT(!err);
   16928:	2800      	cmp	r0, #0
   1692a:	d14d      	bne.n	169c8 <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   1692c:	4b43      	ldr	r3, [pc, #268]	; (16a3c <ll_reset+0x12c>)
   1692e:	2400      	movs	r4, #0
   16930:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   16932:	4620      	mov	r0, r4
   16934:	f004 fd68 	bl	1b408 <ull_filter_reset>
	MFIFO_INIT(prep);
   16938:	4941      	ldr	r1, [pc, #260]	; (16a40 <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   1693a:	4a42      	ldr	r2, [pc, #264]	; (16a44 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   1693c:	4b42      	ldr	r3, [pc, #264]	; (16a48 <ll_reset+0x138>)
	MFIFO_INIT(prep);
   1693e:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   16940:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   16942:	805c      	strh	r4, [r3, #2]
   16944:	2201      	movs	r2, #1
   16946:	4621      	mov	r1, r4
   16948:	4668      	mov	r0, sp
   1694a:	f014 f9f1 	bl	2ad30 <z_impl_k_sem_init>
		mfy.param = &sem;
   1694e:	4b3f      	ldr	r3, [pc, #252]	; (16a4c <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   16950:	4622      	mov	r2, r4
   16952:	4621      	mov	r1, r4
   16954:	2003      	movs	r0, #3
		mfy.param = &sem;
   16956:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1695a:	f7fb fd4b 	bl	123f4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1695e:	2800      	cmp	r0, #0
   16960:	d15d      	bne.n	16a1e <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   16962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1696a:	4668      	mov	r0, sp
   1696c:	f00e f834 	bl	249d8 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   16970:	f000 faea 	bl	16f48 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   16974:	2800      	cmp	r0, #0
   16976:	d144      	bne.n	16a02 <ll_reset+0xf2>
	err = init_reset();
   16978:	f7ff feba 	bl	166f0 <init_reset>
	LL_ASSERT(!err);
   1697c:	2800      	cmp	r0, #0
   1697e:	d131      	bne.n	169e4 <ll_reset+0xd4>
}
   16980:	b006      	add	sp, #24
   16982:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   16984:	4a32      	ldr	r2, [pc, #200]	; (16a50 <ll_reset+0x140>)
   16986:	4933      	ldr	r1, [pc, #204]	; (16a54 <ll_reset+0x144>)
   16988:	4833      	ldr	r0, [pc, #204]	; (16a58 <ll_reset+0x148>)
   1698a:	f240 23ad 	movw	r3, #685	; 0x2ad
   1698e:	f00f f8b9 	bl	25b04 <printk>
   16992:	4040      	eors	r0, r0
   16994:	f380 8811 	msr	BASEPRI, r0
   16998:	f04f 0003 	mov.w	r0, #3
   1699c:	df02      	svc	2
	err = ull_scan_reset();
   1699e:	f000 fcc7 	bl	17330 <ull_scan_reset>
	LL_ASSERT(!err);
   169a2:	2800      	cmp	r0, #0
   169a4:	d0be      	beq.n	16924 <ll_reset+0x14>
   169a6:	4a2a      	ldr	r2, [pc, #168]	; (16a50 <ll_reset+0x140>)
   169a8:	492a      	ldr	r1, [pc, #168]	; (16a54 <ll_reset+0x144>)
   169aa:	482b      	ldr	r0, [pc, #172]	; (16a58 <ll_reset+0x148>)
   169ac:	f240 23b3 	movw	r3, #691	; 0x2b3
   169b0:	f00f f8a8 	bl	25b04 <printk>
   169b4:	4040      	eors	r0, r0
   169b6:	f380 8811 	msr	BASEPRI, r0
   169ba:	f04f 0003 	mov.w	r0, #3
   169be:	df02      	svc	2
	err = ull_conn_reset();
   169c0:	f001 fc1e 	bl	18200 <ull_conn_reset>
	LL_ASSERT(!err);
   169c4:	2800      	cmp	r0, #0
   169c6:	d0b1      	beq.n	1692c <ll_reset+0x1c>
   169c8:	4a21      	ldr	r2, [pc, #132]	; (16a50 <ll_reset+0x140>)
   169ca:	4922      	ldr	r1, [pc, #136]	; (16a54 <ll_reset+0x144>)
   169cc:	4822      	ldr	r0, [pc, #136]	; (16a58 <ll_reset+0x148>)
   169ce:	f240 23de 	movw	r3, #734	; 0x2de
   169d2:	f00f f897 	bl	25b04 <printk>
   169d6:	4040      	eors	r0, r0
   169d8:	f380 8811 	msr	BASEPRI, r0
   169dc:	f04f 0003 	mov.w	r0, #3
   169e0:	df02      	svc	2
   169e2:	e7a3      	b.n	1692c <ll_reset+0x1c>
	LL_ASSERT(!err);
   169e4:	4a1a      	ldr	r2, [pc, #104]	; (16a50 <ll_reset+0x140>)
   169e6:	491b      	ldr	r1, [pc, #108]	; (16a54 <ll_reset+0x144>)
   169e8:	481b      	ldr	r0, [pc, #108]	; (16a58 <ll_reset+0x148>)
   169ea:	f240 3327 	movw	r3, #807	; 0x327
   169ee:	f00f f889 	bl	25b04 <printk>
   169f2:	4040      	eors	r0, r0
   169f4:	f380 8811 	msr	BASEPRI, r0
   169f8:	f04f 0003 	mov.w	r0, #3
   169fc:	df02      	svc	2
}
   169fe:	b006      	add	sp, #24
   16a00:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   16a02:	4a13      	ldr	r2, [pc, #76]	; (16a50 <ll_reset+0x140>)
   16a04:	4913      	ldr	r1, [pc, #76]	; (16a54 <ll_reset+0x144>)
   16a06:	4814      	ldr	r0, [pc, #80]	; (16a58 <ll_reset+0x148>)
   16a08:	f240 331a 	movw	r3, #794	; 0x31a
   16a0c:	f00f f87a 	bl	25b04 <printk>
   16a10:	4040      	eors	r0, r0
   16a12:	f380 8811 	msr	BASEPRI, r0
   16a16:	f04f 0003 	mov.w	r0, #3
   16a1a:	df02      	svc	2
   16a1c:	e7ac      	b.n	16978 <ll_reset+0x68>
		LL_ASSERT(!retval);
   16a1e:	4a0c      	ldr	r2, [pc, #48]	; (16a50 <ll_reset+0x140>)
   16a20:	490e      	ldr	r1, [pc, #56]	; (16a5c <ll_reset+0x14c>)
   16a22:	480d      	ldr	r0, [pc, #52]	; (16a58 <ll_reset+0x148>)
   16a24:	f240 330d 	movw	r3, #781	; 0x30d
   16a28:	f00f f86c 	bl	25b04 <printk>
   16a2c:	4040      	eors	r0, r0
   16a2e:	f380 8811 	msr	BASEPRI, r0
   16a32:	f04f 0003 	mov.w	r0, #3
   16a36:	df02      	svc	2
   16a38:	e793      	b.n	16962 <ll_reset+0x52>
   16a3a:	bf00      	nop
   16a3c:	20000568 	.word	0x20000568
   16a40:	20000464 	.word	0x20000464
   16a44:	2000044c 	.word	0x2000044c
   16a48:	2000043c 	.word	0x2000043c
   16a4c:	2000059c 	.word	0x2000059c
   16a50:	0002ccc4 	.word	0x0002ccc4
   16a54:	0002cd00 	.word	0x0002cd00
   16a58:	0002c8dc 	.word	0x0002c8dc
   16a5c:	0002ce04 	.word	0x0002ce04

00016a60 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   16a60:	b510      	push	{r4, lr}
   16a62:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   16a64:	2400      	movs	r4, #0
   16a66:	e9cd 4400 	strd	r4, r4, [sp]
   16a6a:	9b04      	ldr	r3, [sp, #16]
   16a6c:	f005 fe1c 	bl	1c6a8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   16a70:	b002      	add	sp, #8
   16a72:	bd10      	pop	{r4, pc}

00016a74 <lll_resume>:

void lll_resume(void *param)
{
   16a74:	b510      	push	{r4, lr}
   16a76:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   16a78:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   16a7a:	691a      	ldr	r2, [r3, #16]
   16a7c:	6999      	ldr	r1, [r3, #24]
   16a7e:	2401      	movs	r4, #1
{
   16a80:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   16a82:	4020      	ands	r0, r4
   16a84:	e9cd 0400 	strd	r0, r4, [sp]
   16a88:	6958      	ldr	r0, [r3, #20]
   16a8a:	f005 fe0d 	bl	1c6a8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   16a8e:	b108      	cbz	r0, 16a94 <lll_resume+0x20>
   16a90:	3077      	adds	r0, #119	; 0x77
   16a92:	d101      	bne.n	16a98 <lll_resume+0x24>
}
   16a94:	b002      	add	sp, #8
   16a96:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   16a98:	4a06      	ldr	r2, [pc, #24]	; (16ab4 <lll_resume+0x40>)
   16a9a:	4907      	ldr	r1, [pc, #28]	; (16ab8 <lll_resume+0x44>)
   16a9c:	4807      	ldr	r0, [pc, #28]	; (16abc <lll_resume+0x48>)
   16a9e:	234f      	movs	r3, #79	; 0x4f
   16aa0:	f00f f830 	bl	25b04 <printk>
   16aa4:	4040      	eors	r0, r0
   16aa6:	f380 8811 	msr	BASEPRI, r0
   16aaa:	f04f 0003 	mov.w	r0, #3
   16aae:	df02      	svc	2
}
   16ab0:	b002      	add	sp, #8
   16ab2:	bd10      	pop	{r4, pc}
   16ab4:	0002ce18 	.word	0x0002ce18
   16ab8:	0002ce5c 	.word	0x0002ce5c
   16abc:	0002c8dc 	.word	0x0002c8dc

00016ac0 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   16ac0:	b900      	cbnz	r0, 16ac4 <ticker_update_op_cb+0x4>
   16ac2:	4770      	bx	lr
{
   16ac4:	b510      	push	{r4, lr}
   16ac6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   16ac8:	f7ff fbf2 	bl	162b0 <ull_disable_mark_get>
   16acc:	4284      	cmp	r4, r0
   16ace:	d00c      	beq.n	16aea <ticker_update_op_cb+0x2a>
   16ad0:	4a06      	ldr	r2, [pc, #24]	; (16aec <ticker_update_op_cb+0x2c>)
   16ad2:	4907      	ldr	r1, [pc, #28]	; (16af0 <ticker_update_op_cb+0x30>)
   16ad4:	4807      	ldr	r0, [pc, #28]	; (16af4 <ticker_update_op_cb+0x34>)
   16ad6:	f640 03bf 	movw	r3, #2239	; 0x8bf
   16ada:	f00f f813 	bl	25b04 <printk>
   16ade:	4040      	eors	r0, r0
   16ae0:	f380 8811 	msr	BASEPRI, r0
   16ae4:	f04f 0003 	mov.w	r0, #3
   16ae8:	df02      	svc	2
}
   16aea:	bd10      	pop	{r4, pc}
   16aec:	0002ce84 	.word	0x0002ce84
   16af0:	0002cec4 	.word	0x0002cec4
   16af4:	0002c8dc 	.word	0x0002c8dc

00016af8 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   16af8:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   16afa:	4b13      	ldr	r3, [pc, #76]	; (16b48 <init_set.constprop.0+0x50>)
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16afc:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   16b00:	f893 2020 	ldrb.w	r2, [r3, #32]
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   16b04:	f893 c03e 	ldrb.w	ip, [r3, #62]	; 0x3e
   16b08:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   16b0c:	f002 0238 	and.w	r2, r2, #56	; 0x38
   16b10:	6a89      	ldr	r1, [r1, #40]	; 0x28
   16b12:	f042 0207 	orr.w	r2, r2, #7
   16b16:	f883 2020 	strb.w	r2, [r3, #32]
	pdu->len = BDADDR_SIZE;
   16b1a:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   16b1c:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   16b1e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   16b22:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   16b26:	f8a3 e03c 	strh.w	lr, [r3, #60]	; 0x3c
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   16b2a:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
	pdu->len = BDADDR_SIZE;
   16b2e:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   16b30:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   16b32:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
   16b36:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16b3a:	2204      	movs	r2, #4
   16b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	pdu->len = BDADDR_SIZE;
   16b3e:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   16b40:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   16b42:	f85d fb04 	ldr.w	pc, [sp], #4
   16b46:	bf00      	nop
   16b48:	20004938 	.word	0x20004938

00016b4c <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   16b4c:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   16b4e:	4c3d      	ldr	r4, [pc, #244]	; (16c44 <disable.constprop.0+0xf8>)
   16b50:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   16b54:	07db      	lsls	r3, r3, #31
static inline uint8_t disable(uint8_t handle)
   16b56:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   16b58:	d542      	bpl.n	16be0 <disable.constprop.0+0x94>
	mark = ull_disable_mark(adv);
   16b5a:	4620      	mov	r0, r4
   16b5c:	f7ff fb92 	bl	16284 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   16b60:	4284      	cmp	r4, r0
   16b62:	d00c      	beq.n	16b7e <disable.constprop.0+0x32>
   16b64:	4a38      	ldr	r2, [pc, #224]	; (16c48 <disable.constprop.0+0xfc>)
   16b66:	4939      	ldr	r1, [pc, #228]	; (16c4c <disable.constprop.0+0x100>)
   16b68:	4839      	ldr	r0, [pc, #228]	; (16c50 <disable.constprop.0+0x104>)
   16b6a:	f640 13ff 	movw	r3, #2559	; 0x9ff
   16b6e:	f00e ffc9 	bl	25b04 <printk>
   16b72:	4040      	eors	r0, r0
   16b74:	f380 8811 	msr	BASEPRI, r0
   16b78:	f04f 0003 	mov.w	r0, #3
   16b7c:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   16b7e:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   16b80:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   16b82:	2103      	movs	r1, #3
   16b84:	4b33      	ldr	r3, [pc, #204]	; (16c54 <disable.constprop.0+0x108>)
   16b86:	9500      	str	r5, [sp, #0]
   16b88:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   16b8a:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   16b8c:	f7fc fe88 	bl	138a0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   16b90:	4629      	mov	r1, r5
   16b92:	f7ff fb4f 	bl	16234 <ull_ticker_status_take>
	if (ret) {
   16b96:	2800      	cmp	r0, #0
   16b98:	d138      	bne.n	16c0c <disable.constprop.0+0xc0>
	err = ull_disable(&adv->lll);
   16b9a:	482f      	ldr	r0, [pc, #188]	; (16c58 <disable.constprop.0+0x10c>)
   16b9c:	f7ff fbaa 	bl	162f4 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   16ba0:	b108      	cbz	r0, 16ba6 <disable.constprop.0+0x5a>
   16ba2:	3078      	adds	r0, #120	; 0x78
   16ba4:	d11f      	bne.n	16be6 <disable.constprop.0+0x9a>
	mark = ull_disable_unmark(adv);
   16ba6:	4827      	ldr	r0, [pc, #156]	; (16c44 <disable.constprop.0+0xf8>)
   16ba8:	f7ff fb76 	bl	16298 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   16bac:	4284      	cmp	r4, r0
   16bae:	d00c      	beq.n	16bca <disable.constprop.0+0x7e>
   16bb0:	4a25      	ldr	r2, [pc, #148]	; (16c48 <disable.constprop.0+0xfc>)
   16bb2:	4926      	ldr	r1, [pc, #152]	; (16c4c <disable.constprop.0+0x100>)
   16bb4:	4826      	ldr	r0, [pc, #152]	; (16c50 <disable.constprop.0+0x104>)
   16bb6:	f640 2321 	movw	r3, #2593	; 0xa21
   16bba:	f00e ffa3 	bl	25b04 <printk>
   16bbe:	4040      	eors	r0, r0
   16bc0:	f380 8811 	msr	BASEPRI, r0
   16bc4:	f04f 0003 	mov.w	r0, #3
   16bc8:	df02      	svc	2
	adv->is_enabled = 0U;
   16bca:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   16bce:	f36f 0300 	bfc	r3, #0, #1
   16bd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   16bd6:	2000      	movs	r0, #0
   16bd8:	f000 fbe2 	bl	173a0 <ull_scan_is_enabled_get>
   16bdc:	4604      	mov	r4, r0
   16bde:	b348      	cbz	r0, 16c34 <disable.constprop.0+0xe8>
			return 0;
   16be0:	2000      	movs	r0, #0
}
   16be2:	b005      	add	sp, #20
   16be4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   16be6:	4a18      	ldr	r2, [pc, #96]	; (16c48 <disable.constprop.0+0xfc>)
   16be8:	491c      	ldr	r1, [pc, #112]	; (16c5c <disable.constprop.0+0x110>)
   16bea:	4819      	ldr	r0, [pc, #100]	; (16c50 <disable.constprop.0+0x104>)
   16bec:	f640 231e 	movw	r3, #2590	; 0xa1e
   16bf0:	f00e ff88 	bl	25b04 <printk>
   16bf4:	4040      	eors	r0, r0
   16bf6:	f380 8811 	msr	BASEPRI, r0
   16bfa:	f04f 0003 	mov.w	r0, #3
   16bfe:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   16c00:	4810      	ldr	r0, [pc, #64]	; (16c44 <disable.constprop.0+0xf8>)
   16c02:	f7ff fb49 	bl	16298 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   16c06:	4284      	cmp	r4, r0
   16c08:	d1d2      	bne.n	16bb0 <disable.constprop.0+0x64>
   16c0a:	e7de      	b.n	16bca <disable.constprop.0+0x7e>
		mark = ull_disable_unmark(adv);
   16c0c:	480d      	ldr	r0, [pc, #52]	; (16c44 <disable.constprop.0+0xf8>)
   16c0e:	f7ff fb43 	bl	16298 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   16c12:	4284      	cmp	r4, r0
   16c14:	d013      	beq.n	16c3e <disable.constprop.0+0xf2>
   16c16:	4a0c      	ldr	r2, [pc, #48]	; (16c48 <disable.constprop.0+0xfc>)
   16c18:	490c      	ldr	r1, [pc, #48]	; (16c4c <disable.constprop.0+0x100>)
   16c1a:	480d      	ldr	r0, [pc, #52]	; (16c50 <disable.constprop.0+0x104>)
   16c1c:	f640 2318 	movw	r3, #2584	; 0xa18
   16c20:	f00e ff70 	bl	25b04 <printk>
   16c24:	4040      	eors	r0, r0
   16c26:	f380 8811 	msr	BASEPRI, r0
   16c2a:	f04f 0003 	mov.w	r0, #3
   16c2e:	df02      	svc	2
   16c30:	200c      	movs	r0, #12
   16c32:	e7d6      	b.n	16be2 <disable.constprop.0+0x96>
		ull_filter_adv_scan_state_cb(0);
   16c34:	f004 fc68 	bl	1b508 <ull_filter_adv_scan_state_cb>
	return 0;
   16c38:	4620      	mov	r0, r4
}
   16c3a:	b005      	add	sp, #20
   16c3c:	bd30      	pop	{r4, r5, pc}
   16c3e:	200c      	movs	r0, #12
   16c40:	e7cf      	b.n	16be2 <disable.constprop.0+0x96>
   16c42:	bf00      	nop
   16c44:	20004938 	.word	0x20004938
   16c48:	0002ce84 	.word	0x0002ce84
   16c4c:	0002cef4 	.word	0x0002cef4
   16c50:	0002c8dc 	.word	0x0002c8dc
   16c54:	0001583d 	.word	0x0001583d
   16c58:	20004954 	.word	0x20004954
   16c5c:	0002cf00 	.word	0x0002cf00

00016c60 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   16c60:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   16c62:	7804      	ldrb	r4, [r0, #0]
   16c64:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   16c68:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   16c6a:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   16c6c:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   16c70:	d01f      	beq.n	16cb2 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16c72:	2c01      	cmp	r4, #1
   16c74:	d009      	beq.n	16c8a <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   16c76:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   16c78:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   16c7a:	b18c      	cbz	r4, 16ca0 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   16c7c:	2c06      	cmp	r4, #6
   16c7e:	d00f      	beq.n	16ca0 <adv_time_get.constprop.0.isra.0+0x40>
   16c80:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   16c84:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   16c88:	e003      	b.n	16c92 <adv_time_get.constprop.0.isra.0+0x32>
   16c8a:	f44f 6387 	mov.w	r3, #1080	; 0x438
   16c8e:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   16c92:	fb0c 3302 	mla	r3, ip, r2, r3
   16c96:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   16c9a:	4018      	ands	r0, r3
}
   16c9c:	bc10      	pop	{r4}
   16c9e:	4770      	bx	lr
				adv_size += pdu->len;
   16ca0:	7843      	ldrb	r3, [r0, #1]
   16ca2:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   16ca4:	00db      	lsls	r3, r3, #3
   16ca6:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   16caa:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   16cae:	440b      	add	r3, r1
   16cb0:	e7ef      	b.n	16c92 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   16cb2:	7840      	ldrb	r0, [r0, #1]
}
   16cb4:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   16cb6:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   16cba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   16cbe:	3010      	adds	r0, #16
   16cc0:	005b      	lsls	r3, r3, #1
   16cc2:	00c1      	lsls	r1, r0, #3
   16cc4:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   16cc8:	fb01 0002 	mla	r0, r1, r2, r0
   16ccc:	b280      	uxth	r0, r0
}
   16cce:	4770      	bx	lr

00016cd0 <ticker_cb>:
{
   16cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cd4:	461d      	mov	r5, r3
   16cd6:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   16cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16cdc:	429d      	cmp	r5, r3
{
   16cde:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   16ce2:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   16ce4:	d019      	beq.n	16d1a <ticker_cb+0x4a>
	return ++hdr->ref;
   16ce6:	7823      	ldrb	r3, [r4, #0]
   16ce8:	3301      	adds	r3, #1
   16cea:	b2db      	uxtb	r3, r3
   16cec:	4607      	mov	r7, r0
   16cee:	4616      	mov	r6, r2
   16cf0:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   16cf2:	2b00      	cmp	r3, #0
   16cf4:	d058      	beq.n	16da8 <ticker_cb+0xd8>
		p.ticks_at_expire = ticks_at_expire;
   16cf6:	4933      	ldr	r1, [pc, #204]	; (16dc4 <ticker_cb+0xf4>)
		mfy.param = &p;
   16cf8:	4b33      	ldr	r3, [pc, #204]	; (16dc8 <ticker_cb+0xf8>)
		p.lazy = lazy;
   16cfa:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   16cfc:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   16d00:	2200      	movs	r2, #0
		p.param = lll;
   16d02:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   16d04:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   16d08:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   16d0c:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   16d0e:	2001      	movs	r0, #1
   16d10:	4611      	mov	r1, r2
   16d12:	f7fb fb6f 	bl	123f4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   16d16:	2800      	cmp	r0, #0
   16d18:	d138      	bne.n	16d8c <ticker_cb+0xbc>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   16d1a:	2104      	movs	r1, #4
   16d1c:	a809      	add	r0, sp, #36	; 0x24
   16d1e:	f005 faf7 	bl	1c310 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   16d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16d24:	4929      	ldr	r1, [pc, #164]	; (16dcc <ticker_cb+0xfc>)
   16d26:	fba1 2103 	umull	r2, r1, r1, r3
   16d2a:	1a5d      	subs	r5, r3, r1
   16d2c:	eb01 0155 	add.w	r1, r1, r5, lsr #1
   16d30:	f240 1047 	movw	r0, #327	; 0x147
   16d34:	0a09      	lsrs	r1, r1, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   16d36:	4a26      	ldr	r2, [pc, #152]	; (16dd0 <ticker_cb+0x100>)
	random_delay %= ticks_delay_window;
   16d38:	fb00 3311 	mls	r3, r0, r1, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   16d3c:	4925      	ldr	r1, [pc, #148]	; (16dd4 <ticker_cb+0x104>)
   16d3e:	1aa2      	subs	r2, r4, r2
   16d40:	fba1 1202 	umull	r1, r2, r1, r2
   16d44:	0912      	lsrs	r2, r2, #4
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   16d46:	4924      	ldr	r1, [pc, #144]	; (16dd8 <ticker_cb+0x108>)
   16d48:	2000      	movs	r0, #0
   16d4a:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   16d4c:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   16d4e:	e9cd 1405 	strd	r1, r4, [sp, #20]
   16d52:	e9cd 0003 	strd	r0, r0, [sp, #12]
   16d56:	e9cd 0001 	strd	r0, r0, [sp, #4]
   16d5a:	9000      	str	r0, [sp, #0]
   16d5c:	b2d2      	uxtb	r2, r2
   16d5e:	2101      	movs	r1, #1
	random_delay += (ticks_delay_window_offset + 1);
   16d60:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   16d62:	f7fc fd85 	bl	13870 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16d66:	f030 0302 	bics.w	r3, r0, #2
   16d6a:	d00c      	beq.n	16d86 <ticker_cb+0xb6>
   16d6c:	4a1b      	ldr	r2, [pc, #108]	; (16ddc <ticker_cb+0x10c>)
   16d6e:	491c      	ldr	r1, [pc, #112]	; (16de0 <ticker_cb+0x110>)
   16d70:	481c      	ldr	r0, [pc, #112]	; (16de4 <ticker_cb+0x114>)
   16d72:	f240 732c 	movw	r3, #1836	; 0x72c
   16d76:	f00e fec5 	bl	25b04 <printk>
   16d7a:	4040      	eors	r0, r0
   16d7c:	f380 8811 	msr	BASEPRI, r0
   16d80:	f04f 0003 	mov.w	r0, #3
   16d84:	df02      	svc	2
}
   16d86:	b00a      	add	sp, #40	; 0x28
   16d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   16d8c:	4a13      	ldr	r2, [pc, #76]	; (16ddc <ticker_cb+0x10c>)
   16d8e:	4916      	ldr	r1, [pc, #88]	; (16de8 <ticker_cb+0x118>)
   16d90:	4814      	ldr	r0, [pc, #80]	; (16de4 <ticker_cb+0x114>)
   16d92:	f640 0392 	movw	r3, #2194	; 0x892
   16d96:	f00e feb5 	bl	25b04 <printk>
   16d9a:	4040      	eors	r0, r0
   16d9c:	f380 8811 	msr	BASEPRI, r0
   16da0:	f04f 0003 	mov.w	r0, #3
   16da4:	df02      	svc	2
   16da6:	e7b8      	b.n	16d1a <ticker_cb+0x4a>
		LL_ASSERT(ref);
   16da8:	4a0c      	ldr	r2, [pc, #48]	; (16ddc <ticker_cb+0x10c>)
   16daa:	4910      	ldr	r1, [pc, #64]	; (16dec <ticker_cb+0x11c>)
   16dac:	480d      	ldr	r0, [pc, #52]	; (16de4 <ticker_cb+0x114>)
   16dae:	f640 0385 	movw	r3, #2181	; 0x885
   16db2:	f00e fea7 	bl	25b04 <printk>
   16db6:	4040      	eors	r0, r0
   16db8:	f380 8811 	msr	BASEPRI, r0
   16dbc:	f04f 0003 	mov.w	r0, #3
   16dc0:	df02      	svc	2
   16dc2:	e798      	b.n	16cf6 <ticker_cb+0x26>
   16dc4:	2000498c 	.word	0x2000498c
   16dc8:	200005dc 	.word	0x200005dc
   16dcc:	90d4f121 	.word	0x90d4f121
   16dd0:	20004938 	.word	0x20004938
   16dd4:	38e38e39 	.word	0x38e38e39
   16dd8:	00016ac1 	.word	0x00016ac1
   16ddc:	0002ce84 	.word	0x0002ce84
   16de0:	0002cf1c 	.word	0x0002cf1c
   16de4:	0002c8dc 	.word	0x0002c8dc
   16de8:	0002cddc 	.word	0x0002cddc
   16dec:	0002cf18 	.word	0x0002cf18

00016df0 <ll_adv_params_set>:
{
   16df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   16df4:	4c47      	ldr	r4, [pc, #284]	; (16f14 <ll_adv_params_set+0x124>)
{
   16df6:	4698      	mov	r8, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16df8:	4b47      	ldr	r3, [pc, #284]	; (16f18 <ll_adv_params_set+0x128>)
	if (!adv || adv->is_enabled) {
   16dfa:	f894 603e 	ldrb.w	r6, [r4, #62]	; 0x3e
{
   16dfe:	4686      	mov	lr, r0
   16e00:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e02:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   16e06:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   16e08:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e0c:	f88d 1004 	strb.w	r1, [sp, #4]
{
   16e10:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   16e14:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e18:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   16e1a:	d167      	bne.n	16eec <ll_adv_params_set+0xfc>
	pdu->type = pdu_adv_type[adv_type];
   16e1c:	ab02      	add	r3, sp, #8
		adv->interval = 0;
   16e1e:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
   16e22:	449c      	add	ip, r3
	adv->lll.chan_map = chan_map;
   16e24:	f007 0307 	and.w	r3, r7, #7
   16e28:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16e2c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   16e30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   16e34:	4615      	mov	r5, r2
   16e36:	6a8f      	ldr	r7, [r1, #40]	; 0x28
   16e38:	f894 1020 	ldrb.w	r1, [r4, #32]
	pdu->type = pdu_adv_type[adv_type];
   16e3c:	f81c 2c08 	ldrb.w	r2, [ip, #-8]
	adv->lll.chan_map = chan_map;
   16e40:	f001 0138 	and.w	r1, r1, #56	; 0x38
   16e44:	ea43 0301 	orr.w	r3, r3, r1
   16e48:	f884 3020 	strb.w	r3, [r4, #32]
	pdu->type = pdu_adv_type[adv_type];
   16e4c:	783b      	ldrb	r3, [r7, #0]
		adv->interval = 0;
   16e4e:	bf08      	it	eq
   16e50:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   16e54:	f023 031f 	bic.w	r3, r3, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   16e58:	f012 0f0e 	tst.w	r2, #14
	pdu->type = pdu_adv_type[adv_type];
   16e5c:	f002 020f 	and.w	r2, r2, #15
   16e60:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   16e64:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   16e68:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   16e6c:	bf0c      	ite	eq
   16e6e:	2101      	moveq	r1, #1
   16e70:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   16e72:	f365 0242 	bfi	r2, r5, #1, #2
   16e76:	f361 1345 	bfi	r3, r1, #5, #1
   16e7a:	703b      	strb	r3, [r7, #0]
   16e7c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16e80:	b2d3      	uxtb	r3, r2
   16e82:	0752      	lsls	r2, r2, #29
   16e84:	d509      	bpl.n	16e9a <ll_adv_params_set+0xaa>
		adv->peer_addr_type = direct_addr_type;
   16e86:	f368 03c3 	bfi	r3, r8, #3, #1
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   16e8a:	9908      	ldr	r1, [sp, #32]
		adv->peer_addr_type = direct_addr_type;
   16e8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   16e90:	2206      	movs	r2, #6
   16e92:	f104 003f 	add.w	r0, r4, #63	; 0x3f
   16e96:	f011 fc8b 	bl	287b0 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16e9a:	783a      	ldrb	r2, [r7, #0]
   16e9c:	f002 030f 	and.w	r3, r2, #15
   16ea0:	2b01      	cmp	r3, #1
		pdu->tx_addr = own_addr_type & 0x1;
   16ea2:	f005 0101 	and.w	r1, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16ea6:	d026      	beq.n	16ef6 <ll_adv_params_set+0x106>
	} else if (pdu->len == 0) {
   16ea8:	787b      	ldrb	r3, [r7, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   16eaa:	f361 1286 	bfi	r2, r1, #6, #1
	} else if (pdu->len == 0) {
   16eae:	b1bb      	cbz	r3, 16ee0 <ll_adv_params_set+0xf0>
		pdu->rx_addr = 0;
   16eb0:	f36f 12c7 	bfc	r2, #7, #1
   16eb4:	703a      	strb	r2, [r7, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   16eb6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	hdr->parent = parent;
   16eba:	61e4      	str	r4, [r4, #28]
   16ebc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   16ec0:	01ad      	lsls	r5, r5, #6
   16ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16ec4:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   16ec8:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   16eca:	f045 0504 	orr.w	r5, r5, #4
   16ece:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   16ed0:	b912      	cbnz	r2, 16ed8 <ll_adv_params_set+0xe8>
			pdu->len = BDADDR_SIZE;
   16ed2:	2106      	movs	r1, #6
   16ed4:	7059      	strb	r1, [r3, #1]
	return 0;
   16ed6:	4616      	mov	r6, r2
}
   16ed8:	4630      	mov	r0, r6
   16eda:	b002      	add	sp, #8
   16edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   16ee0:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   16ee4:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   16ee6:	703a      	strb	r2, [r7, #0]
		pdu->len = BDADDR_SIZE;
   16ee8:	707b      	strb	r3, [r7, #1]
   16eea:	e7e4      	b.n	16eb6 <ll_adv_params_set+0xc6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16eec:	260c      	movs	r6, #12
}
   16eee:	4630      	mov	r0, r6
   16ef0:	b002      	add	sp, #8
   16ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   16ef6:	f361 1286 	bfi	r2, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
   16efa:	4638      	mov	r0, r7
   16efc:	f368 12c7 	bfi	r2, r8, #7, #1
   16f00:	f800 2b08 	strb.w	r2, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   16f04:	9908      	ldr	r1, [sp, #32]
   16f06:	2206      	movs	r2, #6
   16f08:	f011 fc52 	bl	287b0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   16f0c:	230c      	movs	r3, #12
   16f0e:	707b      	strb	r3, [r7, #1]
   16f10:	e7d1      	b.n	16eb6 <ll_adv_params_set+0xc6>
   16f12:	bf00      	nop
   16f14:	20004938 	.word	0x20004938
   16f18:	0002bb88 	.word	0x0002bb88

00016f1c <ull_adv_init>:
{
   16f1c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   16f1e:	4c06      	ldr	r4, [pc, #24]	; (16f38 <ull_adv_init+0x1c>)
   16f20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   16f24:	f005 fdf4 	bl	1cb10 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   16f28:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16f2c:	f005 fdf0 	bl	1cb10 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   16f30:	f7ff fde2 	bl	16af8 <init_set.constprop.0>
}
   16f34:	2000      	movs	r0, #0
   16f36:	bd10      	pop	{r4, pc}
   16f38:	20004938 	.word	0x20004938

00016f3c <ull_adv_reset>:
{
   16f3c:	b508      	push	{r3, lr}
		(void)disable(handle);
   16f3e:	f7ff fe05 	bl	16b4c <disable.constprop.0>
}
   16f42:	2000      	movs	r0, #0
   16f44:	bd08      	pop	{r3, pc}
   16f46:	bf00      	nop

00016f48 <ull_adv_reset_finalize>:
{
   16f48:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   16f4a:	4c0a      	ldr	r4, [pc, #40]	; (16f74 <ull_adv_reset_finalize+0x2c>)
   16f4c:	f104 0524 	add.w	r5, r4, #36	; 0x24
   16f50:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   16f52:	3430      	adds	r4, #48	; 0x30
		lll_adv_data_reset(&lll->adv_data);
   16f54:	f005 fdec 	bl	1cb30 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   16f58:	4620      	mov	r0, r4
   16f5a:	f005 fde9 	bl	1cb30 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   16f5e:	4628      	mov	r0, r5
   16f60:	f005 fdd6 	bl	1cb10 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   16f64:	4620      	mov	r0, r4
   16f66:	f005 fdd3 	bl	1cb10 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   16f6a:	f7ff fdc5 	bl	16af8 <init_set.constprop.0>
}
   16f6e:	2000      	movs	r0, #0
   16f70:	bd38      	pop	{r3, r4, r5, pc}
   16f72:	bf00      	nop
   16f74:	20004938 	.word	0x20004938

00016f78 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   16f78:	4a04      	ldr	r2, [pc, #16]	; (16f8c <ull_adv_lll_handle_get+0x14>)
   16f7a:	6800      	ldr	r0, [r0, #0]
   16f7c:	4b04      	ldr	r3, [pc, #16]	; (16f90 <ull_adv_lll_handle_get+0x18>)
   16f7e:	1a80      	subs	r0, r0, r2
   16f80:	fba3 3000 	umull	r3, r0, r3, r0
}
   16f84:	f3c0 100f 	ubfx	r0, r0, #4, #16
   16f88:	4770      	bx	lr
   16f8a:	bf00      	nop
   16f8c:	20004938 	.word	0x20004938
   16f90:	38e38e39 	.word	0x38e38e39

00016f94 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   16f94:	b938      	cbnz	r0, 16fa6 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   16f96:	4805      	ldr	r0, [pc, #20]	; (16fac <ull_adv_is_enabled_get+0x18>)
   16f98:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
	return &ll_adv[handle];
   16f9c:	f013 0f01 	tst.w	r3, #1
   16fa0:	bf08      	it	eq
   16fa2:	2000      	moveq	r0, #0
   16fa4:	4770      	bx	lr
		return NULL;
   16fa6:	2000      	movs	r0, #0
}
   16fa8:	4770      	bx	lr
   16faa:	bf00      	nop
   16fac:	20004938 	.word	0x20004938

00016fb0 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   16fb0:	b928      	cbnz	r0, 16fbe <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   16fb2:	4b04      	ldr	r3, [pc, #16]	; (16fc4 <ull_adv_is_enabled+0x14>)
   16fb4:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
   16fb8:	f000 0001 	and.w	r0, r0, #1
   16fbc:	4770      	bx	lr
   16fbe:	2000      	movs	r0, #0
}
   16fc0:	4770      	bx	lr
   16fc2:	bf00      	nop
   16fc4:	20004938 	.word	0x20004938

00016fc8 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   16fc8:	b948      	cbnz	r0, 16fde <ull_adv_filter_pol_get+0x16>
	if (!adv || !adv->is_enabled) {
   16fca:	4b06      	ldr	r3, [pc, #24]	; (16fe4 <ull_adv_filter_pol_get+0x1c>)
   16fcc:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
   16fd0:	f010 0001 	ands.w	r0, r0, #1
   16fd4:	d004      	beq.n	16fe0 <ull_adv_filter_pol_get+0x18>
	return adv->lll.filter_policy;
   16fd6:	f893 0020 	ldrb.w	r0, [r3, #32]
   16fda:	0980      	lsrs	r0, r0, #6
   16fdc:	4770      	bx	lr
		return 0;
   16fde:	2000      	movs	r0, #0
}
   16fe0:	4770      	bx	lr
   16fe2:	bf00      	nop
   16fe4:	20004938 	.word	0x20004938

00016fe8 <ull_adv_pdu_update_addrs>:
{
   16fe8:	b570      	push	{r4, r5, r6, lr}
   16fea:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   16fec:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
{
   16ff0:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   16ff2:	f004 fbf9 	bl	1b7e8 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   16ff6:	b310      	cbz	r0, 1703e <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   16ff8:	7823      	ldrb	r3, [r4, #0]
   16ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16ffe:	4601      	mov	r1, r0
   17000:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   17002:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   17004:	2206      	movs	r2, #6
   17006:	4630      	mov	r0, r6
   17008:	f011 fbd2 	bl	287b0 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1700c:	7823      	ldrb	r3, [r4, #0]
   1700e:	f003 030f 	and.w	r3, r3, #15
   17012:	2b01      	cmp	r3, #1
   17014:	d001      	beq.n	1701a <ull_adv_pdu_update_addrs+0x32>
}
   17016:	4630      	mov	r0, r6
   17018:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   1701a:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
   1701e:	f004 fc11 	bl	1b844 <ull_filter_tgta_get>
	if (rx_addr) {
   17022:	4601      	mov	r1, r0
   17024:	2800      	cmp	r0, #0
   17026:	d0f6      	beq.n	17016 <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   17028:	7823      	ldrb	r3, [r4, #0]
   1702a:	4620      	mov	r0, r4
   1702c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17030:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   17034:	2206      	movs	r2, #6
   17036:	f011 fbbb 	bl	287b0 <memcpy>
}
   1703a:	4630      	mov	r0, r6
   1703c:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   1703e:	7820      	ldrb	r0, [r4, #0]
   17040:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17044:	f7fc fcf4 	bl	13a30 <ll_addr_get>
   17048:	4601      	mov	r1, r0
	if (rpa) {
   1704a:	e7da      	b.n	17002 <ull_adv_pdu_update_addrs+0x1a>

0001704c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1704c:	291f      	cmp	r1, #31
   1704e:	d849      	bhi.n	170e4 <ull_adv_data_set+0x98>
{
   17050:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   17052:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   17056:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1705a:	b083      	sub	sp, #12
   1705c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1705e:	7833      	ldrb	r3, [r6, #0]
   17060:	f003 030f 	and.w	r3, r3, #15
   17064:	2b01      	cmp	r3, #1
   17066:	4604      	mov	r4, r0
   17068:	d03e      	beq.n	170e8 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1706a:	460d      	mov	r5, r1
   1706c:	3024      	adds	r0, #36	; 0x24
   1706e:	f10d 0107 	add.w	r1, sp, #7
   17072:	4617      	mov	r7, r2
   17074:	f005 fddc 	bl	1cc30 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   17078:	4631      	mov	r1, r6
   1707a:	4606      	mov	r6, r0
   1707c:	f811 2b02 	ldrb.w	r2, [r1], #2
   17080:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   17084:	f3c2 0303 	ubfx	r3, r2, #0, #4
   17088:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   1708c:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   17090:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   17094:	f002 0280 	and.w	r2, r2, #128	; 0x80
   17098:	4630      	mov	r0, r6
   1709a:	4313      	orrs	r3, r2
   1709c:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   170a0:	2206      	movs	r2, #6
   170a2:	f011 fb85 	bl	287b0 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   170a6:	462a      	mov	r2, r5
   170a8:	4639      	mov	r1, r7
   170aa:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   170ae:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   170b0:	f011 fb7e 	bl	287b0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   170b4:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   170b6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   170ba:	07db      	lsls	r3, r3, #31
   170bc:	d406      	bmi.n	170cc <ull_adv_data_set+0x80>
	pdu->last = idx;
   170be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	return 0;
   170c6:	2000      	movs	r0, #0
}
   170c8:	b003      	add	sp, #12
   170ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   170cc:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   170d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   170d4:	4631      	mov	r1, r6
   170d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   170d8:	4620      	mov	r0, r4
   170da:	f7ea fc55 	bl	1988 <ull_adv_time_update>
		if (err) {
   170de:	2800      	cmp	r0, #0
   170e0:	d0ed      	beq.n	170be <ull_adv_data_set+0x72>
   170e2:	e7f1      	b.n	170c8 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   170e4:	2012      	movs	r0, #18
}
   170e6:	4770      	bx	lr
		return BT_HCI_ERR_CMD_DISALLOWED;
   170e8:	200c      	movs	r0, #12
}
   170ea:	b003      	add	sp, #12
   170ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170ee:	bf00      	nop

000170f0 <ll_adv_data_set>:
{
   170f0:	4603      	mov	r3, r0
   170f2:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   170f4:	4801      	ldr	r0, [pc, #4]	; (170fc <ll_adv_data_set+0xc>)
   170f6:	4619      	mov	r1, r3
   170f8:	f7ff bfa8 	b.w	1704c <ull_adv_data_set>
   170fc:	20004938 	.word	0x20004938

00017100 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   17100:	b5f0      	push	{r4, r5, r6, r7, lr}
   17102:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   17106:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1710a:	b083      	sub	sp, #12
   1710c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   1710e:	460e      	mov	r6, r1
   17110:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   17112:	f10d 0107 	add.w	r1, sp, #7
   17116:	3030      	adds	r0, #48	; 0x30
   17118:	4617      	mov	r7, r2
   1711a:	f005 fd89 	bl	1cc30 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1711e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   17120:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   17122:	f811 3b02 	ldrb.w	r3, [r1], #2
   17126:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1712a:	019b      	lsls	r3, r3, #6
   1712c:	f043 0304 	orr.w	r3, r3, #4
   17130:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   17132:	1db3      	adds	r3, r6, #6
   17134:	7043      	strb	r3, [r0, #1]
   17136:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   17138:	3002      	adds	r0, #2
   1713a:	f011 fb39 	bl	287b0 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1713e:	4632      	mov	r2, r6
   17140:	4639      	mov	r1, r7
   17142:	f105 0008 	add.w	r0, r5, #8
   17146:	f011 fb33 	bl	287b0 <memcpy>
	if (adv->is_enabled) {
   1714a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   1714e:	07db      	lsls	r3, r3, #31
   17150:	d50a      	bpl.n	17168 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   17152:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17156:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1715a:	6a99      	ldr	r1, [r3, #40]	; 0x28
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   1715c:	780b      	ldrb	r3, [r1, #0]
   1715e:	f013 030f 	ands.w	r3, r3, #15
   17162:	d008      	beq.n	17176 <ull_scan_rsp_set.part.0+0x76>
   17164:	2b06      	cmp	r3, #6
   17166:	d006      	beq.n	17176 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
   17168:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1716c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	return 0;
   17170:	2000      	movs	r0, #0
}
   17172:	b003      	add	sp, #12
   17174:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   17176:	462a      	mov	r2, r5
   17178:	4620      	mov	r0, r4
   1717a:	f7ea fc05 	bl	1988 <ull_adv_time_update>
			if (err) {
   1717e:	2800      	cmp	r0, #0
   17180:	d0f2      	beq.n	17168 <ull_scan_rsp_set.part.0+0x68>
   17182:	e7f6      	b.n	17172 <ull_scan_rsp_set.part.0+0x72>

00017184 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   17184:	281f      	cmp	r0, #31
{
   17186:	4603      	mov	r3, r0
   17188:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1718a:	d803      	bhi.n	17194 <ll_adv_scan_rsp_set+0x10>
   1718c:	4802      	ldr	r0, [pc, #8]	; (17198 <ll_adv_scan_rsp_set+0x14>)
   1718e:	4619      	mov	r1, r3
   17190:	f7ff bfb6 	b.w	17100 <ull_scan_rsp_set.part.0>
}
   17194:	2012      	movs	r0, #18
   17196:	4770      	bx	lr
   17198:	20004938 	.word	0x20004938

0001719c <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   1719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   171a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   171a2:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   171a6:	4625      	mov	r5, r4
{
   171a8:	4680      	mov	r8, r0
   171aa:	f815 1b1c 	ldrb.w	r1, [r5], #28
   171ae:	3101      	adds	r1, #1
   171b0:	b2c9      	uxtb	r1, r1
   171b2:	4617      	mov	r7, r2
   171b4:	461e      	mov	r6, r3
   171b6:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   171b8:	b181      	cbz	r1, 171dc <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   171ba:	4c17      	ldr	r4, [pc, #92]	; (17218 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   171bc:	4b17      	ldr	r3, [pc, #92]	; (1721c <ticker_cb+0x80>)
	p.lazy = lazy;
   171be:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   171c0:	2200      	movs	r2, #0
   171c2:	4611      	mov	r1, r2
   171c4:	2001      	movs	r0, #1
	p.remainder = remainder;
   171c6:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   171ca:	60e5      	str	r5, [r4, #12]
	p.force = force;
   171cc:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   171d0:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   171d2:	f7fb f90f 	bl	123f4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   171d6:	b978      	cbnz	r0, 171f8 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   171d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   171dc:	4a10      	ldr	r2, [pc, #64]	; (17220 <ticker_cb+0x84>)
   171de:	4911      	ldr	r1, [pc, #68]	; (17224 <ticker_cb+0x88>)
   171e0:	4811      	ldr	r0, [pc, #68]	; (17228 <ticker_cb+0x8c>)
   171e2:	f240 23db 	movw	r3, #731	; 0x2db
   171e6:	f00e fc8d 	bl	25b04 <printk>
   171ea:	4040      	eors	r0, r0
   171ec:	f380 8811 	msr	BASEPRI, r0
   171f0:	f04f 0003 	mov.w	r0, #3
   171f4:	df02      	svc	2
   171f6:	e7e0      	b.n	171ba <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   171f8:	4a09      	ldr	r2, [pc, #36]	; (17220 <ticker_cb+0x84>)
   171fa:	490c      	ldr	r1, [pc, #48]	; (1722c <ticker_cb+0x90>)
   171fc:	480a      	ldr	r0, [pc, #40]	; (17228 <ticker_cb+0x8c>)
   171fe:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   17202:	f00e fc7f 	bl	25b04 <printk>
   17206:	4040      	eors	r0, r0
   17208:	f380 8811 	msr	BASEPRI, r0
   1720c:	f04f 0003 	mov.w	r0, #3
   17210:	df02      	svc	2
}
   17212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17216:	bf00      	nop
   17218:	200049ec 	.word	0x200049ec
   1721c:	200005ec 	.word	0x200005ec
   17220:	0002cf48 	.word	0x0002cf48
   17224:	0002cf18 	.word	0x0002cf18
   17228:	0002c8dc 	.word	0x0002c8dc
   1722c:	0002cddc 	.word	0x0002cddc

00017230 <ull_scan_init>:
}
   17230:	2000      	movs	r0, #0
   17232:	4770      	bx	lr

00017234 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   17234:	3004      	adds	r0, #4
{
   17236:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   17238:	f101 021c 	add.w	r2, r1, #28
   1723c:	b2c0      	uxtb	r0, r0
   1723e:	f7ff f897 	bl	16370 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   17242:	b110      	cbz	r0, 1724a <ull_scan_disable+0x16>
   17244:	3078      	adds	r0, #120	; 0x78
   17246:	d101      	bne.n	1724c <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17248:	200c      	movs	r0, #12
}
   1724a:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   1724c:	4a07      	ldr	r2, [pc, #28]	; (1726c <ull_scan_disable+0x38>)
   1724e:	4908      	ldr	r1, [pc, #32]	; (17270 <ull_scan_disable+0x3c>)
   17250:	4808      	ldr	r0, [pc, #32]	; (17274 <ull_scan_disable+0x40>)
   17252:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   17256:	f00e fc55 	bl	25b04 <printk>
   1725a:	4040      	eors	r0, r0
   1725c:	f380 8811 	msr	BASEPRI, r0
   17260:	f04f 0003 	mov.w	r0, #3
   17264:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   17266:	200c      	movs	r0, #12
}
   17268:	bd08      	pop	{r3, pc}
   1726a:	bf00      	nop
   1726c:	0002cf48 	.word	0x0002cf48
   17270:	0002cf88 	.word	0x0002cf88
   17274:	0002c8dc 	.word	0x0002c8dc

00017278 <ll_scan_enable>:
{
   17278:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   1727a:	4c2c      	ldr	r4, [pc, #176]	; (1732c <ll_scan_enable+0xb4>)
   1727c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17280:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   17284:	b358      	cbz	r0, 172de <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   17286:	bb5a      	cbnz	r2, 172e0 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   17288:	079a      	lsls	r2, r3, #30
   1728a:	f3c3 0541 	ubfx	r5, r3, #1, #2
   1728e:	d50b      	bpl.n	172a8 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   17290:	2001      	movs	r0, #1
   17292:	f7fc fbcd 	bl	13a30 <ll_addr_get>
   17296:	2106      	movs	r1, #6
   17298:	f7fb f81e 	bl	122d8 <mem_nz>
   1729c:	2800      	cmp	r0, #0
   1729e:	d042      	beq.n	17326 <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
   172a0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   172a4:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   172a8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   172ac:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   172b0:	f004 f96a 	bl	1b588 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   172b4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   172b8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   172bc:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   172c0:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   172c2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   172c6:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   172c8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   172cc:	d502      	bpl.n	172d4 <ll_scan_enable+0x5c>
   172ce:	3d02      	subs	r5, #2
   172d0:	2d01      	cmp	r5, #1
   172d2:	d91e      	bls.n	17312 <ll_scan_enable+0x9a>
}
   172d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   172d8:	4814      	ldr	r0, [pc, #80]	; (1732c <ll_scan_enable+0xb4>)
   172da:	f7ea bc11 	b.w	1b00 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   172de:	b912      	cbnz	r2, 172e6 <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   172e0:	250c      	movs	r5, #12
}
   172e2:	4628      	mov	r0, r5
   172e4:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   172e6:	6a23      	ldr	r3, [r4, #32]
   172e8:	2b00      	cmp	r3, #0
   172ea:	d1f9      	bne.n	172e0 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   172ec:	4621      	mov	r1, r4
   172ee:	f7ff ffa1 	bl	17234 <ull_scan_disable>
	if (ret) {
   172f2:	4605      	mov	r5, r0
   172f4:	2800      	cmp	r0, #0
   172f6:	d1f4      	bne.n	172e2 <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   172f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   172fc:	f360 0300 	bfi	r3, r0, #0, #1
   17300:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   17304:	f7ff fe46 	bl	16f94 <ull_adv_is_enabled_get>
   17308:	2800      	cmp	r0, #0
   1730a:	d1ea      	bne.n	172e2 <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   1730c:	f004 f8fc 	bl	1b508 <ull_filter_adv_scan_state_cb>
   17310:	e7e7      	b.n	172e2 <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   17312:	2000      	movs	r0, #0
   17314:	f004 f95c 	bl	1b5d0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   17318:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1731c:	f043 0302 	orr.w	r3, r3, #2
   17320:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   17324:	e7d6      	b.n	172d4 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   17326:	2512      	movs	r5, #18
   17328:	e7db      	b.n	172e2 <ll_scan_enable+0x6a>
   1732a:	bf00      	nop
   1732c:	200049a4 	.word	0x200049a4

00017330 <ull_scan_reset>:
{
   17330:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   17332:	4c0d      	ldr	r4, [pc, #52]	; (17368 <ull_scan_reset+0x38>)
   17334:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17338:	07db      	lsls	r3, r3, #31
   1733a:	d501      	bpl.n	17340 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   1733c:	6a20      	ldr	r0, [r4, #32]
   1733e:	b108      	cbz	r0, 17344 <ull_scan_reset+0x14>
}
   17340:	2000      	movs	r0, #0
   17342:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   17344:	4621      	mov	r1, r4
   17346:	f7ff ff75 	bl	17234 <ull_scan_disable>
	if (ret) {
   1734a:	2800      	cmp	r0, #0
   1734c:	d1f8      	bne.n	17340 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   1734e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   17352:	f360 0200 	bfi	r2, r0, #0, #1
   17356:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   1735a:	f7ff fe1b 	bl	16f94 <ull_adv_is_enabled_get>
   1735e:	2800      	cmp	r0, #0
   17360:	d1ee      	bne.n	17340 <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
   17362:	f004 f8d1 	bl	1b508 <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   17366:	e7eb      	b.n	17340 <ull_scan_reset+0x10>
   17368:	200049a4 	.word	0x200049a4

0001736c <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   1736c:	4a03      	ldr	r2, [pc, #12]	; (1737c <ull_scan_handle_get+0x10>)
   1736e:	4b04      	ldr	r3, [pc, #16]	; (17380 <ull_scan_handle_get+0x14>)
   17370:	1a80      	subs	r0, r0, r2
   17372:	fba3 3000 	umull	r3, r0, r3, r0
}
   17376:	f3c0 1007 	ubfx	r0, r0, #4, #8
   1737a:	4770      	bx	lr
   1737c:	200049a4 	.word	0x200049a4
   17380:	38e38e39 	.word	0x38e38e39

00017384 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   17384:	4a04      	ldr	r2, [pc, #16]	; (17398 <ull_scan_lll_handle_get+0x14>)
   17386:	6800      	ldr	r0, [r0, #0]
   17388:	4b04      	ldr	r3, [pc, #16]	; (1739c <ull_scan_lll_handle_get+0x18>)
   1738a:	1a80      	subs	r0, r0, r2
   1738c:	fba3 3000 	umull	r3, r0, r3, r0
}
   17390:	f3c0 1007 	ubfx	r0, r0, #4, #8
   17394:	4770      	bx	lr
   17396:	bf00      	nop
   17398:	200049a4 	.word	0x200049a4
   1739c:	38e38e39 	.word	0x38e38e39

000173a0 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   173a0:	b938      	cbnz	r0, 173b2 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   173a2:	4805      	ldr	r0, [pc, #20]	; (173b8 <ull_scan_is_enabled_get+0x18>)
   173a4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   173a8:	f013 0f01 	tst.w	r3, #1
   173ac:	bf08      	it	eq
   173ae:	2000      	moveq	r0, #0
   173b0:	4770      	bx	lr
		return NULL;
   173b2:	2000      	movs	r0, #0
}
   173b4:	4770      	bx	lr
   173b6:	bf00      	nop
   173b8:	200049a4 	.word	0x200049a4

000173bc <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   173bc:	4a04      	ldr	r2, [pc, #16]	; (173d0 <ull_scan_is_disabled_get+0x14>)
   173be:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   173c2:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   173c6:	4303      	orrs	r3, r0
}
   173c8:	bf0c      	ite	eq
   173ca:	4610      	moveq	r0, r2
   173cc:	2000      	movne	r0, #0
   173ce:	4770      	bx	lr
   173d0:	200049a4 	.word	0x200049a4

000173d4 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   173d4:	b990      	cbnz	r0, 173fc <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   173d6:	4a0a      	ldr	r2, [pc, #40]	; (17400 <ull_scan_is_enabled+0x2c>)
   173d8:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   173dc:	f013 0001 	ands.w	r0, r3, #1
   173e0:	d00d      	beq.n	173fe <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   173e2:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   173e6:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   173e8:	f003 0301 	and.w	r3, r3, #1
   173ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
   173f0:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   173f4:	b11a      	cbz	r2, 173fe <ull_scan_is_enabled+0x2a>
   173f6:	f040 0004 	orr.w	r0, r0, #4
   173fa:	4770      	bx	lr
		return 0U;
   173fc:	2000      	movs	r0, #0
}
   173fe:	4770      	bx	lr
   17400:	200049a4 	.word	0x200049a4

00017404 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17404:	b950      	cbnz	r0, 1741c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   17406:	4b06      	ldr	r3, [pc, #24]	; (17420 <ull_scan_filter_pol_get+0x1c>)
   17408:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   1740c:	f010 0001 	ands.w	r0, r0, #1
   17410:	d005      	beq.n	1741e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   17412:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   17416:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1741a:	4770      	bx	lr
		return 0;
   1741c:	2000      	movs	r0, #0
}
   1741e:	4770      	bx	lr
   17420:	200049a4 	.word	0x200049a4

00017424 <init_reset>:
{
   17424:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   17426:	4b15      	ldr	r3, [pc, #84]	; (1747c <init_reset+0x58>)
   17428:	4815      	ldr	r0, [pc, #84]	; (17480 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1742a:	4c16      	ldr	r4, [pc, #88]	; (17484 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   1742c:	2201      	movs	r2, #1
   1742e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17432:	f7fa fed7 	bl	121e4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   17436:	4b14      	ldr	r3, [pc, #80]	; (17488 <init_reset+0x64>)
   17438:	2203      	movs	r2, #3
   1743a:	1d18      	adds	r0, r3, #4
   1743c:	2124      	movs	r1, #36	; 0x24
   1743e:	f7fa fed1 	bl	121e4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   17442:	4b12      	ldr	r3, [pc, #72]	; (1748c <init_reset+0x68>)
   17444:	2204      	movs	r2, #4
   17446:	1898      	adds	r0, r3, r2
   17448:	212c      	movs	r1, #44	; 0x2c
   1744a:	f7fa fecb 	bl	121e4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1744e:	4b10      	ldr	r3, [pc, #64]	; (17490 <init_reset+0x6c>)
   17450:	2207      	movs	r2, #7
   17452:	1d18      	adds	r0, r3, #4
   17454:	2108      	movs	r1, #8
   17456:	f7fa fec5 	bl	121e4 <mem_init>
	default_phy_tx |= PHY_2M;
   1745a:	490e      	ldr	r1, [pc, #56]	; (17494 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   1745c:	4a0e      	ldr	r2, [pc, #56]	; (17498 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1745e:	480f      	ldr	r0, [pc, #60]	; (1749c <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   17460:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17462:	f04f 0c1b 	mov.w	ip, #27
   17466:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   1746a:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1746c:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   17470:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   17472:	f8a0 c000 	strh.w	ip, [r0]
}
   17476:	2000      	movs	r0, #0
   17478:	bd10      	pop	{r4, pc}
   1747a:	bf00      	nop
   1747c:	200049fc 	.word	0x200049fc
   17480:	20003408 	.word	0x20003408
   17484:	20005ea6 	.word	0x20005ea6
   17488:	20004a24 	.word	0x20004a24
   1748c:	20004a94 	.word	0x20004a94
   17490:	20004b48 	.word	0x20004b48
   17494:	20005fe0 	.word	0x20005fe0
   17498:	20005fdf 	.word	0x20005fdf
   1749c:	20005ea8 	.word	0x20005ea8

000174a0 <ctrl_tx_pause_enqueue>:
{
   174a0:	b538      	push	{r3, r4, r5, lr}
   174a2:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   174a4:	e9d0 3067 	ldrd	r3, r0, [r0, #412]	; 0x19c
{
   174a8:	460d      	mov	r5, r1
	if (
   174aa:	b11b      	cbz	r3, 174b4 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   174ac:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
   174b0:	0789      	lsls	r1, r1, #30
   174b2:	d50c      	bpl.n	174ce <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   174b4:	b340      	cbz	r0, 17508 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   174b6:	2a00      	cmp	r2, #0
   174b8:	d130      	bne.n	1751c <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   174ba:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   174be:	681a      	ldr	r2, [r3, #0]
   174c0:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   174c2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   174c4:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   174c6:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
   174ca:	b1d3      	cbz	r3, 17502 <ctrl_tx_pause_enqueue+0x62>
}
   174cc:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   174ce:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
   174d2:	07c9      	lsls	r1, r1, #31
   174d4:	d4ee      	bmi.n	174b4 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   174d6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   174da:	428b      	cmp	r3, r1
   174dc:	d02c      	beq.n	17538 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   174de:	2800      	cmp	r0, #0
   174e0:	d036      	beq.n	17550 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   174e2:	2a00      	cmp	r2, #0
   174e4:	d0e9      	beq.n	174ba <ctrl_tx_pause_enqueue+0x1a>
   174e6:	4a22      	ldr	r2, [pc, #136]	; (17570 <ctrl_tx_pause_enqueue+0xd0>)
   174e8:	4922      	ldr	r1, [pc, #136]	; (17574 <ctrl_tx_pause_enqueue+0xd4>)
   174ea:	4823      	ldr	r0, [pc, #140]	; (17578 <ctrl_tx_pause_enqueue+0xd8>)
   174ec:	f640 236e 	movw	r3, #2670	; 0xa6e
   174f0:	f00e fb08 	bl	25b04 <printk>
   174f4:	4040      	eors	r0, r0
   174f6:	f380 8811 	msr	BASEPRI, r0
   174fa:	f04f 0003 	mov.w	r0, #3
   174fe:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   17500:	e7db      	b.n	174ba <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   17502:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
   17506:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   17508:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1750a:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
   1750e:	2a00      	cmp	r2, #0
   17510:	d1db      	bne.n	174ca <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   17512:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
   17516:	2b00      	cmp	r3, #0
   17518:	d1d8      	bne.n	174cc <ctrl_tx_pause_enqueue+0x2c>
   1751a:	e7f2      	b.n	17502 <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   1751c:	4a14      	ldr	r2, [pc, #80]	; (17570 <ctrl_tx_pause_enqueue+0xd0>)
   1751e:	4915      	ldr	r1, [pc, #84]	; (17574 <ctrl_tx_pause_enqueue+0xd4>)
   17520:	4815      	ldr	r0, [pc, #84]	; (17578 <ctrl_tx_pause_enqueue+0xd8>)
   17522:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   17526:	f00e faed 	bl	25b04 <printk>
   1752a:	4040      	eors	r0, r0
   1752c:	f380 8811 	msr	BASEPRI, r0
   17530:	f04f 0003 	mov.w	r0, #3
   17534:	df02      	svc	2
   17536:	e7c0      	b.n	174ba <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   17538:	6819      	ldr	r1, [r3, #0]
   1753a:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1753e:	2800      	cmp	r0, #0
   17540:	d1cf      	bne.n	174e2 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   17542:	6819      	ldr	r1, [r3, #0]
   17544:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   17546:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   17548:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   1754a:	2a00      	cmp	r2, #0
   1754c:	d0e1      	beq.n	17512 <ctrl_tx_pause_enqueue+0x72>
   1754e:	e7bc      	b.n	174ca <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17550:	7919      	ldrb	r1, [r3, #4]
   17552:	f001 0103 	and.w	r1, r1, #3
   17556:	2903      	cmp	r1, #3
   17558:	d004      	beq.n	17564 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1755a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
   1755e:	2a00      	cmp	r2, #0
   17560:	d0ab      	beq.n	174ba <ctrl_tx_pause_enqueue+0x1a>
   17562:	e7c0      	b.n	174e6 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   17564:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17566:	2903      	cmp	r1, #3
   17568:	d0eb      	beq.n	17542 <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1756a:	290a      	cmp	r1, #10
   1756c:	d1f5      	bne.n	1755a <ctrl_tx_pause_enqueue+0xba>
   1756e:	e7e8      	b.n	17542 <ctrl_tx_pause_enqueue+0xa2>
   17570:	0002cfb4 	.word	0x0002cfb4
   17574:	0002cff4 	.word	0x0002cff4
   17578:	0002c8dc 	.word	0x0002c8dc

0001757c <tx_lll_flush>:
{
   1757c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   17580:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   17584:	4934      	ldr	r1, [pc, #208]	; (17658 <tx_lll_flush+0xdc>)
{
   17586:	b083      	sub	sp, #12
   17588:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1758a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   1758e:	4640      	mov	r0, r8
   17590:	f7fa fe8e 	bl	122b0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   17594:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
   17598:	4629      	mov	r1, r5
   1759a:	f006 fa1f 	bl	1d9dc <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1759e:	6b28      	ldr	r0, [r5, #48]	; 0x30
   175a0:	aa01      	add	r2, sp, #4
   175a2:	4631      	mov	r1, r6
   175a4:	f7fa fec4 	bl	12330 <memq_dequeue>
	while (link) {
   175a8:	b328      	cbz	r0, 175f6 <tx_lll_flush+0x7a>
   175aa:	4c2c      	ldr	r4, [pc, #176]	; (1765c <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   175ac:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   175b0:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   175b4:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   175b6:	f894 c001 	ldrb.w	ip, [r4, #1]
   175ba:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   175bc:	1c53      	adds	r3, r2, #1
   175be:	b2db      	uxtb	r3, r3
		last = 0U;
   175c0:	459c      	cmp	ip, r3
   175c2:	bf08      	it	eq
   175c4:	2300      	moveq	r3, #0
	if (last == first) {
   175c6:	4299      	cmp	r1, r3
   175c8:	f894 c000 	ldrb.w	ip, [r4]
   175cc:	d033      	beq.n	17636 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   175ce:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   175d0:	fb12 f20c 	smulbb	r2, r2, ip
   175d4:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   175d8:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   175dc:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   175de:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   175e2:	6002      	str	r2, [r0, #0]
		tx->next = link;
   175e4:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   175e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
   175e8:	70e3      	strb	r3, [r4, #3]
   175ea:	aa01      	add	r2, sp, #4
   175ec:	4631      	mov	r1, r6
   175ee:	f7fa fe9f 	bl	12330 <memq_dequeue>
	while (link) {
   175f2:	2800      	cmp	r0, #0
   175f4:	d1de      	bne.n	175b4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   175f6:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
   175fa:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
   175fe:	b150      	cbz	r0, 17616 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   17600:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   17602:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   17604:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
   17608:	f7fe ff2c 	bl	16464 <ull_rx_put>
	ull_rx_sched();
   1760c:	f7fe ff3a 	bl	16484 <ull_rx_sched>
}
   17610:	b003      	add	sp, #12
   17612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   17616:	4a12      	ldr	r2, [pc, #72]	; (17660 <tx_lll_flush+0xe4>)
   17618:	4912      	ldr	r1, [pc, #72]	; (17664 <tx_lll_flush+0xe8>)
   1761a:	4813      	ldr	r0, [pc, #76]	; (17668 <tx_lll_flush+0xec>)
   1761c:	f640 13da 	movw	r3, #2522	; 0x9da
   17620:	f00e fa70 	bl	25b04 <printk>
   17624:	4040      	eors	r0, r0
   17626:	f380 8811 	msr	BASEPRI, r0
   1762a:	f04f 0003 	mov.w	r0, #3
   1762e:	df02      	svc	2
	link = rx->hdr.link;
   17630:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
   17634:	e7e4      	b.n	17600 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   17636:	4a0a      	ldr	r2, [pc, #40]	; (17660 <tx_lll_flush+0xe4>)
   17638:	490c      	ldr	r1, [pc, #48]	; (1766c <tx_lll_flush+0xf0>)
   1763a:	480b      	ldr	r0, [pc, #44]	; (17668 <tx_lll_flush+0xec>)
   1763c:	f640 13c6 	movw	r3, #2502	; 0x9c6
   17640:	f00e fa60 	bl	25b04 <printk>
   17644:	4040      	eors	r0, r0
   17646:	f380 8811 	msr	BASEPRI, r0
   1764a:	f04f 0003 	mov.w	r0, #3
   1764e:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   17650:	2300      	movs	r3, #0
   17652:	801b      	strh	r3, [r3, #0]
   17654:	deff      	udf	#255	; 0xff
   17656:	bf00      	nop
   17658:	20003408 	.word	0x20003408
   1765c:	200005fc 	.word	0x200005fc
   17660:	0002cfb4 	.word	0x0002cfb4
   17664:	0002d004 	.word	0x0002d004
   17668:	0002c8dc 	.word	0x0002c8dc
   1766c:	0002cffc 	.word	0x0002cffc

00017670 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   17670:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
   17674:	f012 0202 	ands.w	r2, r2, #2
   17678:	d00a      	beq.n	17690 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   1767a:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
   1767e:	b1d3      	cbz	r3, 176b6 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   17680:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
   17684:	681a      	ldr	r2, [r3, #0]
   17686:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   17688:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   1768a:	680b      	ldr	r3, [r1, #0]
   1768c:	b1d3      	cbz	r3, 176c4 <ctrl_tx_sec_enqueue+0x54>
   1768e:	4770      	bx	lr
		if (conn->tx_head) {
   17690:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   17694:	b1cb      	cbz	r3, 176ca <ctrl_tx_sec_enqueue+0x5a>
{
   17696:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   17698:	f890 c0bc 	ldrb.w	ip, [r0, #188]	; 0xbc
   1769c:	f890 e0bb 	ldrb.w	lr, [r0, #187]	; 0xbb
   176a0:	45e6      	cmp	lr, ip
   176a2:	d004      	beq.n	176ae <ctrl_tx_sec_enqueue+0x3e>
   176a4:	f890 c0bd 	ldrb.w	ip, [r0, #189]	; 0xbd
   176a8:	f1bc 0f03 	cmp.w	ip, #3
   176ac:	d010      	beq.n	176d0 <ctrl_tx_sec_enqueue+0x60>
}
   176ae:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   176b2:	f7ff bef5 	b.w	174a0 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   176b6:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   176ba:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   176bc:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
		if (!tx->next) {
   176c0:	2b00      	cmp	r3, #0
   176c2:	d1e4      	bne.n	1768e <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   176c4:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
   176c8:	4770      	bx	lr
	bool pause = false;
   176ca:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   176cc:	f7ff bee8 	b.w	174a0 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   176d0:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   176d4:	f00c 0c03 	and.w	ip, ip, #3
   176d8:	f1bc 0f03 	cmp.w	ip, #3
   176dc:	d1e7      	bne.n	176ae <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   176de:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   176e0:	2a03      	cmp	r2, #3
   176e2:	d005      	beq.n	176f0 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   176e4:	f1a2 020a 	sub.w	r2, r2, #10
   176e8:	fab2 f282 	clz	r2, r2
   176ec:	0952      	lsrs	r2, r2, #5
   176ee:	e7de      	b.n	176ae <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   176f0:	2201      	movs	r2, #1
   176f2:	e7dc      	b.n	176ae <ctrl_tx_sec_enqueue+0x3e>

000176f4 <ticker_stop_op_cb>:
{
   176f4:	b510      	push	{r4, lr}
   176f6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   176f8:	b9b0      	cbnz	r0, 17728 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   176fa:	4b12      	ldr	r3, [pc, #72]	; (17744 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   176fc:	2200      	movs	r2, #0
   176fe:	2101      	movs	r1, #1
   17700:	2002      	movs	r0, #2
	mfy.param = param;
   17702:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   17704:	f7fa fe76 	bl	123f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17708:	b900      	cbnz	r0, 1770c <ticker_stop_op_cb+0x18>
}
   1770a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1770c:	4a0e      	ldr	r2, [pc, #56]	; (17748 <ticker_stop_op_cb+0x54>)
   1770e:	490f      	ldr	r1, [pc, #60]	; (1774c <ticker_stop_op_cb+0x58>)
   17710:	480f      	ldr	r0, [pc, #60]	; (17750 <ticker_stop_op_cb+0x5c>)
   17712:	f44f 6318 	mov.w	r3, #2432	; 0x980
   17716:	f00e f9f5 	bl	25b04 <printk>
   1771a:	4040      	eors	r0, r0
   1771c:	f380 8811 	msr	BASEPRI, r0
   17720:	f04f 0003 	mov.w	r0, #3
   17724:	df02      	svc	2
}
   17726:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17728:	4a07      	ldr	r2, [pc, #28]	; (17748 <ticker_stop_op_cb+0x54>)
   1772a:	490a      	ldr	r1, [pc, #40]	; (17754 <ticker_stop_op_cb+0x60>)
   1772c:	4808      	ldr	r0, [pc, #32]	; (17750 <ticker_stop_op_cb+0x5c>)
   1772e:	f640 137a 	movw	r3, #2426	; 0x97a
   17732:	f00e f9e7 	bl	25b04 <printk>
   17736:	4040      	eors	r0, r0
   17738:	f380 8811 	msr	BASEPRI, r0
   1773c:	f04f 0003 	mov.w	r0, #3
   17740:	df02      	svc	2
   17742:	e7da      	b.n	176fa <ticker_stop_op_cb+0x6>
   17744:	20000694 	.word	0x20000694
   17748:	0002cfb4 	.word	0x0002cfb4
   1774c:	0002cddc 	.word	0x0002cddc
   17750:	0002c8dc 	.word	0x0002c8dc
   17754:	0002d014 	.word	0x0002d014

00017758 <disabled_cb>:
{
   17758:	b508      	push	{r3, lr}
	mfy.param = param;
   1775a:	4b0b      	ldr	r3, [pc, #44]	; (17788 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1775c:	2200      	movs	r2, #0
	mfy.param = param;
   1775e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   17760:	4611      	mov	r1, r2
   17762:	2001      	movs	r0, #1
   17764:	f7fa fe46 	bl	123f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17768:	b900      	cbnz	r0, 1776c <disabled_cb+0x14>
}
   1776a:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1776c:	4a07      	ldr	r2, [pc, #28]	; (1778c <disabled_cb+0x34>)
   1776e:	4908      	ldr	r1, [pc, #32]	; (17790 <disabled_cb+0x38>)
   17770:	4808      	ldr	r0, [pc, #32]	; (17794 <disabled_cb+0x3c>)
   17772:	f640 13ac 	movw	r3, #2476	; 0x9ac
   17776:	f00e f9c5 	bl	25b04 <printk>
   1777a:	4040      	eors	r0, r0
   1777c:	f380 8811 	msr	BASEPRI, r0
   17780:	f04f 0003 	mov.w	r0, #3
   17784:	df02      	svc	2
}
   17786:	bd08      	pop	{r3, pc}
   17788:	20000664 	.word	0x20000664
   1778c:	0002cfb4 	.word	0x0002cfb4
   17790:	0002cddc 	.word	0x0002cddc
   17794:	0002c8dc 	.word	0x0002c8dc

00017798 <conn_disable>:
{
   17798:	b538      	push	{r3, r4, r5, lr}
   1779a:	4604      	mov	r4, r0
	return hdr->ref;
   1779c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   177a0:	b353      	cbz	r3, 177f8 <conn_disable+0x60>
		mfy.param = &conn->lll;
   177a2:	4d17      	ldr	r5, [pc, #92]	; (17800 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   177a4:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   177a6:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   177a8:	b16b      	cbz	r3, 177c6 <conn_disable+0x2e>
   177aa:	4a16      	ldr	r2, [pc, #88]	; (17804 <conn_disable+0x6c>)
   177ac:	4916      	ldr	r1, [pc, #88]	; (17808 <conn_disable+0x70>)
   177ae:	4817      	ldr	r0, [pc, #92]	; (1780c <conn_disable+0x74>)
   177b0:	f640 1395 	movw	r3, #2453	; 0x995
   177b4:	f00e f9a6 	bl	25b04 <printk>
   177b8:	4040      	eors	r0, r0
   177ba:	f380 8811 	msr	BASEPRI, r0
   177be:	f04f 0003 	mov.w	r0, #3
   177c2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   177c4:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   177c6:	4912      	ldr	r1, [pc, #72]	; (17810 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   177c8:	4b0d      	ldr	r3, [pc, #52]	; (17800 <conn_disable+0x68>)
   177ca:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   177cc:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   177d0:	4611      	mov	r1, r2
   177d2:	2001      	movs	r0, #1
   177d4:	f7fa fe0e 	bl	123f4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   177d8:	b900      	cbnz	r0, 177dc <conn_disable+0x44>
}
   177da:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   177dc:	4a09      	ldr	r2, [pc, #36]	; (17804 <conn_disable+0x6c>)
   177de:	490d      	ldr	r1, [pc, #52]	; (17814 <conn_disable+0x7c>)
   177e0:	480a      	ldr	r0, [pc, #40]	; (1780c <conn_disable+0x74>)
   177e2:	f640 139c 	movw	r3, #2460	; 0x99c
   177e6:	f00e f98d 	bl	25b04 <printk>
   177ea:	4040      	eors	r0, r0
   177ec:	f380 8811 	msr	BASEPRI, r0
   177f0:	f04f 0003 	mov.w	r0, #3
   177f4:	df02      	svc	2
}
   177f6:	bd38      	pop	{r3, r4, r5, pc}
   177f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   177fc:	f7ff bfac 	b.w	17758 <disabled_cb>
   17800:	20000684 	.word	0x20000684
   17804:	0002cfb4 	.word	0x0002cfb4
   17808:	0002d020 	.word	0x0002d020
   1780c:	0002c8dc 	.word	0x0002c8dc
   17810:	00017759 	.word	0x00017759
   17814:	0002cddc 	.word	0x0002cddc

00017818 <conn_setup_adv_scan_disabled_cb>:
{
   17818:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1781a:	6883      	ldr	r3, [r0, #8]
   1781c:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   1781e:	7f53      	ldrb	r3, [r2, #29]
   17820:	09db      	lsrs	r3, r3, #7
   17822:	d105      	bne.n	17830 <conn_setup_adv_scan_disabled_cb+0x18>
		ull_central_setup(rx, ftr, lll);
   17824:	4601      	mov	r1, r0
}
   17826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
   1782a:	3108      	adds	r1, #8
   1782c:	f7ec b9c4 	b.w	3bb8 <ull_central_setup>
		LL_ASSERT(0);
   17830:	4a06      	ldr	r2, [pc, #24]	; (1784c <conn_setup_adv_scan_disabled_cb+0x34>)
   17832:	4907      	ldr	r1, [pc, #28]	; (17850 <conn_setup_adv_scan_disabled_cb+0x38>)
   17834:	4807      	ldr	r0, [pc, #28]	; (17854 <conn_setup_adv_scan_disabled_cb+0x3c>)
   17836:	f640 03d5 	movw	r3, #2261	; 0x8d5
   1783a:	f00e f963 	bl	25b04 <printk>
   1783e:	4040      	eors	r0, r0
   17840:	f380 8811 	msr	BASEPRI, r0
   17844:	f04f 0003 	mov.w	r0, #3
   17848:	df02      	svc	2
}
   1784a:	bd08      	pop	{r3, pc}
   1784c:	0002cfb4 	.word	0x0002cfb4
   17850:	0002c97c 	.word	0x0002c97c
   17854:	0002c8dc 	.word	0x0002c8dc

00017858 <ticker_start_conn_op_cb>:
{
   17858:	b510      	push	{r4, lr}
   1785a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1785c:	b990      	cbnz	r0, 17884 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1785e:	4620      	mov	r0, r4
   17860:	f7fe fd36 	bl	162d0 <ull_update_unmark>
	LL_ASSERT(p == param);
   17864:	4284      	cmp	r4, r0
   17866:	d00c      	beq.n	17882 <ticker_start_conn_op_cb+0x2a>
   17868:	4a0d      	ldr	r2, [pc, #52]	; (178a0 <ticker_start_conn_op_cb+0x48>)
   1786a:	490e      	ldr	r1, [pc, #56]	; (178a4 <ticker_start_conn_op_cb+0x4c>)
   1786c:	480e      	ldr	r0, [pc, #56]	; (178a8 <ticker_start_conn_op_cb+0x50>)
   1786e:	f640 03b7 	movw	r3, #2231	; 0x8b7
   17872:	f00e f947 	bl	25b04 <printk>
   17876:	4040      	eors	r0, r0
   17878:	f380 8811 	msr	BASEPRI, r0
   1787c:	f04f 0003 	mov.w	r0, #3
   17880:	df02      	svc	2
}
   17882:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17884:	4a06      	ldr	r2, [pc, #24]	; (178a0 <ticker_start_conn_op_cb+0x48>)
   17886:	4909      	ldr	r1, [pc, #36]	; (178ac <ticker_start_conn_op_cb+0x54>)
   17888:	4807      	ldr	r0, [pc, #28]	; (178a8 <ticker_start_conn_op_cb+0x50>)
   1788a:	f640 03b4 	movw	r3, #2228	; 0x8b4
   1788e:	f00e f939 	bl	25b04 <printk>
   17892:	4040      	eors	r0, r0
   17894:	f380 8811 	msr	BASEPRI, r0
   17898:	f04f 0003 	mov.w	r0, #3
   1789c:	df02      	svc	2
   1789e:	e7de      	b.n	1785e <ticker_start_conn_op_cb+0x6>
   178a0:	0002cfb4 	.word	0x0002cfb4
   178a4:	0002d034 	.word	0x0002d034
   178a8:	0002c8dc 	.word	0x0002c8dc
   178ac:	0002d014 	.word	0x0002d014

000178b0 <ticker_stop_conn_op_cb>:
{
   178b0:	b510      	push	{r4, lr}
   178b2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   178b4:	b990      	cbnz	r0, 178dc <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   178b6:	4620      	mov	r0, r4
   178b8:	f7fe fd00 	bl	162bc <ull_update_mark>
	LL_ASSERT(p == param);
   178bc:	4284      	cmp	r4, r0
   178be:	d00c      	beq.n	178da <ticker_stop_conn_op_cb+0x2a>
   178c0:	4a0d      	ldr	r2, [pc, #52]	; (178f8 <ticker_stop_conn_op_cb+0x48>)
   178c2:	490e      	ldr	r1, [pc, #56]	; (178fc <ticker_stop_conn_op_cb+0x4c>)
   178c4:	480e      	ldr	r0, [pc, #56]	; (17900 <ticker_stop_conn_op_cb+0x50>)
   178c6:	f640 03ad 	movw	r3, #2221	; 0x8ad
   178ca:	f00e f91b 	bl	25b04 <printk>
   178ce:	4040      	eors	r0, r0
   178d0:	f380 8811 	msr	BASEPRI, r0
   178d4:	f04f 0003 	mov.w	r0, #3
   178d8:	df02      	svc	2
}
   178da:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   178dc:	4a06      	ldr	r2, [pc, #24]	; (178f8 <ticker_stop_conn_op_cb+0x48>)
   178de:	4909      	ldr	r1, [pc, #36]	; (17904 <ticker_stop_conn_op_cb+0x54>)
   178e0:	4807      	ldr	r0, [pc, #28]	; (17900 <ticker_stop_conn_op_cb+0x50>)
   178e2:	f640 03aa 	movw	r3, #2218	; 0x8aa
   178e6:	f00e f90d 	bl	25b04 <printk>
   178ea:	4040      	eors	r0, r0
   178ec:	f380 8811 	msr	BASEPRI, r0
   178f0:	f04f 0003 	mov.w	r0, #3
   178f4:	df02      	svc	2
   178f6:	e7de      	b.n	178b6 <ticker_stop_conn_op_cb+0x6>
   178f8:	0002cfb4 	.word	0x0002cfb4
   178fc:	0002d034 	.word	0x0002d034
   17900:	0002c8dc 	.word	0x0002c8dc
   17904:	0002d014 	.word	0x0002d014

00017908 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   17908:	b900      	cbnz	r0, 1790c <ticker_update_conn_op_cb+0x4>
   1790a:	4770      	bx	lr
{
   1790c:	b510      	push	{r4, lr}
   1790e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   17910:	f7fe fcea 	bl	162e8 <ull_update_mark_get>
   17914:	4284      	cmp	r4, r0
   17916:	d010      	beq.n	1793a <ticker_update_conn_op_cb+0x32>
   17918:	f7fe fcca 	bl	162b0 <ull_disable_mark_get>
   1791c:	4284      	cmp	r4, r0
   1791e:	d00c      	beq.n	1793a <ticker_update_conn_op_cb+0x32>
   17920:	4a06      	ldr	r2, [pc, #24]	; (1793c <ticker_update_conn_op_cb+0x34>)
   17922:	4907      	ldr	r1, [pc, #28]	; (17940 <ticker_update_conn_op_cb+0x38>)
   17924:	4807      	ldr	r0, [pc, #28]	; (17944 <ticker_update_conn_op_cb+0x3c>)
   17926:	f640 03a1 	movw	r3, #2209	; 0x8a1
   1792a:	f00e f8eb 	bl	25b04 <printk>
   1792e:	4040      	eors	r0, r0
   17930:	f380 8811 	msr	BASEPRI, r0
   17934:	f04f 0003 	mov.w	r0, #3
   17938:	df02      	svc	2
}
   1793a:	bd10      	pop	{r4, pc}
   1793c:	0002cfb4 	.word	0x0002cfb4
   17940:	0002d040 	.word	0x0002d040
   17944:	0002c8dc 	.word	0x0002c8dc

00017948 <tx_ull_dequeue>:
{
   17948:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1794a:	e9d0 2467 	ldrd	r2, r4, [r0, #412]	; 0x19c
{
   1794e:	4603      	mov	r3, r0
   17950:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   17952:	b164      	cbz	r4, 1796e <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   17954:	4294      	cmp	r4, r2
   17956:	d021      	beq.n	1799c <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   17958:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		if (conn->tx_head == conn->tx_data) {
   1795c:	428a      	cmp	r2, r1
   1795e:	d00b      	beq.n	17978 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   17960:	6811      	ldr	r1, [r2, #0]
   17962:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
		tx->next = NULL;
   17966:	2200      	movs	r2, #0
}
   17968:	bc10      	pop	{r4}
		tx->next = NULL;
   1796a:	6002      	str	r2, [r0, #0]
}
   1796c:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1796e:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
   17972:	4291      	cmp	r1, r2
   17974:	d104      	bne.n	17980 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   17976:	b18a      	cbz	r2, 1799c <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   17978:	6809      	ldr	r1, [r1, #0]
   1797a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
   1797e:	e7ef      	b.n	17960 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17980:	7911      	ldrb	r1, [r2, #4]
   17982:	f001 0103 	and.w	r1, r1, #3
   17986:	2903      	cmp	r1, #3
   17988:	d013      	beq.n	179b2 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   1798a:	6812      	ldr	r2, [r2, #0]
   1798c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
   17990:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   17992:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
   17996:	bc10      	pop	{r4}
		tx->next = tx;
   17998:	6000      	str	r0, [r0, #0]
}
   1799a:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1799c:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
   179a0:	6812      	ldr	r2, [r2, #0]
   179a2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   179a6:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   179a8:	bf18      	it	ne
   179aa:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   179ae:	d1f2      	bne.n	17996 <tx_ull_dequeue+0x4e>
   179b0:	e7ee      	b.n	17990 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   179b2:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   179b4:	2903      	cmp	r1, #3
   179b6:	d0d3      	beq.n	17960 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   179b8:	290a      	cmp	r1, #10
   179ba:	d1e6      	bne.n	1798a <tx_ull_dequeue+0x42>
   179bc:	e7d0      	b.n	17960 <tx_ull_dequeue+0x18>
   179be:	bf00      	nop

000179c0 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   179c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   179c2:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   179c4:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
   179c8:	0787      	lsls	r7, r0, #30
{
   179ca:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   179cc:	d433      	bmi.n	17a36 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   179ce:	482e      	ldr	r0, [pc, #184]	; (17a88 <reject_ext_ind_send+0xc8>)
   179d0:	4617      	mov	r7, r2
   179d2:	461e      	mov	r6, r3
   179d4:	f7fa fc36 	bl	12244 <mem_acquire>
	if (!tx) {
   179d8:	2800      	cmp	r0, #0
   179da:	d038      	beq.n	17a4e <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   179dc:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   179e0:	f043 0302 	orr.w	r3, r3, #2
   179e4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   179e8:	2303      	movs	r3, #3
   179ea:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   179ec:	2211      	movs	r2, #17
	    conn->tx_head &&
   179ee:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   179f2:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   179f4:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   179f6:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   179fa:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   179fc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   17a00:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a02:	7102      	strb	r2, [r0, #4]
	if (
   17a04:	b1db      	cbz	r3, 17a3e <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   17a06:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   17a0a:	0796      	lsls	r6, r2, #30
   17a0c:	d417      	bmi.n	17a3e <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   17a0e:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   17a12:	07d2      	lsls	r2, r2, #31
   17a14:	d413      	bmi.n	17a3e <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   17a16:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   17a1a:	4293      	cmp	r3, r2
   17a1c:	d022      	beq.n	17a64 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   17a1e:	b1c9      	cbz	r1, 17a54 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   17a20:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   17a24:	681a      	ldr	r2, [r3, #0]
   17a26:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17a28:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17a2a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   17a2c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   17a30:	b90b      	cbnz	r3, 17a36 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   17a32:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17a36:	2301      	movs	r3, #1
   17a38:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   17a3a:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   17a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   17a3e:	2900      	cmp	r1, #0
   17a40:	d1ee      	bne.n	17a20 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   17a42:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17a44:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   17a48:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   17a4c:	e7f0      	b.n	17a30 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   17a4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17a54:	791a      	ldrb	r2, [r3, #4]
   17a56:	f002 0203 	and.w	r2, r2, #3
   17a5a:	2a03      	cmp	r2, #3
   17a5c:	d00e      	beq.n	17a7c <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17a5e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   17a62:	e7df      	b.n	17a24 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   17a64:	681a      	ldr	r2, [r3, #0]
   17a66:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   17a6a:	2900      	cmp	r1, #0
   17a6c:	d1d8      	bne.n	17a20 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   17a6e:	681a      	ldr	r2, [r3, #0]
   17a70:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17a72:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17a74:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17a76:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   17a7a:	e7d9      	b.n	17a30 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   17a7c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17a7e:	2a03      	cmp	r2, #3
   17a80:	d0f5      	beq.n	17a6e <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17a82:	2a0a      	cmp	r2, #10
   17a84:	d1eb      	bne.n	17a5e <reject_ext_ind_send+0x9e>
   17a86:	e7f2      	b.n	17a6e <reject_ext_ind_send+0xae>
   17a88:	20004a94 	.word	0x20004a94

00017a8c <event_len_prep>:
{
   17a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   17a8e:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   17a92:	f003 0207 	and.w	r2, r3, #7
{
   17a96:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   17a98:	2a06      	cmp	r2, #6
   17a9a:	f200 80d4 	bhi.w	17c46 <event_len_prep+0x1ba>
   17a9e:	e8df f002 	tbb	[pc, r2]
   17aa2:	4704      	.short	0x4704
   17aa4:	48484747 	.word	0x48484747
   17aa8:	47          	.byte	0x47
   17aa9:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17aaa:	486e      	ldr	r0, [pc, #440]	; (17c64 <event_len_prep+0x1d8>)
   17aac:	f7fa fbca 	bl	12244 <mem_acquire>
		if (!tx) {
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d03d      	beq.n	17b30 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   17ab4:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   17ab8:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
   17abc:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   17ac0:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   17ac4:	2301      	movs	r3, #1
   17ac6:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   17aca:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   17ace:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   17ad2:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   17ad4:	72c3      	strb	r3, [r0, #11]
   17ad6:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   17ad8:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   17ada:	2309      	movs	r3, #9
   17adc:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   17ade:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   17ae0:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   17ae2:	2214      	movs	r2, #20
	    conn->tx_head &&
   17ae4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   17ae8:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   17aea:	2100      	movs	r1, #0
   17aec:	221b      	movs	r2, #27
   17aee:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   17af0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   17af4:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17af6:	7902      	ldrb	r2, [r0, #4]
   17af8:	f042 0203 	orr.w	r2, r2, #3
   17afc:	7102      	strb	r2, [r0, #4]
	if (
   17afe:	b13b      	cbz	r3, 17b10 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   17b00:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   17b04:	0795      	lsls	r5, r2, #30
   17b06:	d403      	bmi.n	17b10 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   17b08:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   17b0c:	07d2      	lsls	r2, r2, #31
   17b0e:	d573      	bpl.n	17bf8 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   17b10:	2900      	cmp	r1, #0
   17b12:	d07f      	beq.n	17c14 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   17b14:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   17b18:	681a      	ldr	r2, [r3, #0]
   17b1a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17b1c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17b1e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   17b20:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   17b24:	2b00      	cmp	r3, #0
   17b26:	d056      	beq.n	17bd6 <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   17b28:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   17b2c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
   17b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   17b32:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   17b36:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
   17b3a:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
   17b3e:	f8b0 718a 	ldrh.w	r7, [r0, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
   17b42:	f8b0 618e 	ldrh.w	r6, [r0, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   17b46:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   17b4a:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   17b4c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   17b50:	d024      	beq.n	17b9c <event_len_prep+0x110>
			conn->llcp_length.state =
   17b52:	2206      	movs	r2, #6
   17b54:	f362 0302 	bfi	r3, r2, #0, #3
   17b58:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		rx = conn->llcp_rx;
   17b5c:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
   17b60:	b335      	cbz	r5, 17bb0 <event_len_prep+0x124>
   17b62:	6828      	ldr	r0, [r5, #0]
   17b64:	b320      	cbz	r0, 17bb0 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   17b66:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   17b68:	6842      	ldr	r2, [r0, #4]
   17b6a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   17b6e:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   17b72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   17b74:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   17b76:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   17b78:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   17b7a:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17b7c:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17b7e:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   17b80:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   17b82:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17b86:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   17b88:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   17b8a:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17b8c:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17b8e:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   17b90:	f7fe fad8 	bl	16144 <ll_rx_put>
}
   17b94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   17b98:	f7fe bade 	b.w	16158 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   17b9c:	f8b0 2190 	ldrh.w	r2, [r0, #400]	; 0x190
   17ba0:	b9e2      	cbnz	r2, 17bdc <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   17ba2:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
				conn->procedure_expire = 0U;
   17ba6:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
				conn->llcp_length.ack = conn->llcp_length.req;
   17baa:	f880 3185 	strb.w	r3, [r0, #389]	; 0x185
				conn->procedure_expire = 0U;
   17bae:	e7d5      	b.n	17b5c <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   17bb0:	4a2d      	ldr	r2, [pc, #180]	; (17c68 <event_len_prep+0x1dc>)
   17bb2:	492e      	ldr	r1, [pc, #184]	; (17c6c <event_len_prep+0x1e0>)
   17bb4:	482e      	ldr	r0, [pc, #184]	; (17c70 <event_len_prep+0x1e4>)
   17bb6:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   17bba:	f00d ffa3 	bl	25b04 <printk>
   17bbe:	4040      	eors	r0, r0
   17bc0:	f380 8811 	msr	BASEPRI, r0
   17bc4:	f04f 0003 	mov.w	r0, #3
   17bc8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   17bca:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   17bcc:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   17bd0:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   17bd4:	e7c7      	b.n	17b66 <event_len_prep+0xda>
		conn->tx_data_last = tx;
   17bd6:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
   17bda:	e7a5      	b.n	17b28 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   17bdc:	f8a0 218a 	strh.w	r2, [r0, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   17be0:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17be2:	f362 0302 	bfi	r3, r2, #0, #3
   17be6:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
				conn->llcp_length.tx_time =
   17bea:	f8b0 3192 	ldrh.w	r3, [r0, #402]	; 0x192
				conn->llcp_length.cache.tx_octets = 0;
   17bee:	f8a0 2190 	strh.w	r2, [r0, #400]	; 0x190
				conn->llcp_length.tx_time =
   17bf2:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17bf6:	e7b1      	b.n	17b5c <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   17bf8:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   17bfc:	4293      	cmp	r3, r2
   17bfe:	d00f      	beq.n	17c20 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   17c00:	2900      	cmp	r1, #0
   17c02:	d187      	bne.n	17b14 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17c04:	791a      	ldrb	r2, [r3, #4]
   17c06:	f002 0203 	and.w	r2, r2, #3
   17c0a:	2a03      	cmp	r2, #3
   17c0c:	d015      	beq.n	17c3a <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17c0e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   17c12:	e781      	b.n	17b18 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   17c14:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17c16:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   17c1a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   17c1e:	e781      	b.n	17b24 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   17c20:	681a      	ldr	r2, [r3, #0]
   17c22:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   17c26:	2900      	cmp	r1, #0
   17c28:	f47f af74 	bne.w	17b14 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   17c2c:	681a      	ldr	r2, [r3, #0]
   17c2e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17c30:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17c32:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17c34:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   17c38:	e774      	b.n	17b24 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   17c3a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17c3c:	2a03      	cmp	r2, #3
   17c3e:	d0f5      	beq.n	17c2c <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17c40:	2a0a      	cmp	r2, #10
   17c42:	d1e4      	bne.n	17c0e <event_len_prep+0x182>
   17c44:	e7f2      	b.n	17c2c <event_len_prep+0x1a0>
		LL_ASSERT(0);
   17c46:	4a08      	ldr	r2, [pc, #32]	; (17c68 <event_len_prep+0x1dc>)
   17c48:	490a      	ldr	r1, [pc, #40]	; (17c74 <event_len_prep+0x1e8>)
   17c4a:	4809      	ldr	r0, [pc, #36]	; (17c70 <event_len_prep+0x1e4>)
   17c4c:	f241 03ea 	movw	r3, #4330	; 0x10ea
   17c50:	f00d ff58 	bl	25b04 <printk>
   17c54:	4040      	eors	r0, r0
   17c56:	f380 8811 	msr	BASEPRI, r0
   17c5a:	f04f 0003 	mov.w	r0, #3
   17c5e:	df02      	svc	2
}
   17c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c62:	bf00      	nop
   17c64:	20004a94 	.word	0x20004a94
   17c68:	0002cfb4 	.word	0x0002cfb4
   17c6c:	0002d094 	.word	0x0002d094
   17c70:	0002c8dc 	.word	0x0002c8dc
   17c74:	0002c97c 	.word	0x0002c97c

00017c78 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   17c78:	4801      	ldr	r0, [pc, #4]	; (17c80 <ll_conn_acquire+0x8>)
   17c7a:	f7fa bae3 	b.w	12244 <mem_acquire>
   17c7e:	bf00      	nop
   17c80:	200049fc 	.word	0x200049fc

00017c84 <ll_conn_release>:
	mem_release(conn, &conn_free);
   17c84:	4901      	ldr	r1, [pc, #4]	; (17c8c <ll_conn_release+0x8>)
   17c86:	f7fa baf7 	b.w	12278 <mem_release>
   17c8a:	bf00      	nop
   17c8c:	200049fc 	.word	0x200049fc

00017c90 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   17c90:	4902      	ldr	r1, [pc, #8]	; (17c9c <ll_conn_handle_get+0xc>)
   17c92:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   17c96:	f7fa bb0b 	b.w	122b0 <mem_index_get>
   17c9a:	bf00      	nop
   17c9c:	20003408 	.word	0x20003408

00017ca0 <ll_conn_get>:
{
   17ca0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17ca2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17ca6:	4801      	ldr	r0, [pc, #4]	; (17cac <ll_conn_get+0xc>)
   17ca8:	f7fa bafe 	b.w	122a8 <mem_get>
   17cac:	20003408 	.word	0x20003408

00017cb0 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17cb0:	b958      	cbnz	r0, 17cca <ll_connected_get+0x1a>
{
   17cb2:	b508      	push	{r3, lr}
   17cb4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17cb6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17cba:	4805      	ldr	r0, [pc, #20]	; (17cd0 <ll_connected_get+0x20>)
   17cbc:	f7fa faf4 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17cc0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17cc2:	b903      	cbnz	r3, 17cc6 <ll_connected_get+0x16>
}
   17cc4:	bd08      	pop	{r3, pc}
		return NULL;
   17cc6:	2000      	movs	r0, #0
}
   17cc8:	bd08      	pop	{r3, pc}
		return NULL;
   17cca:	2000      	movs	r0, #0
}
   17ccc:	4770      	bx	lr
   17cce:	bf00      	nop
   17cd0:	20003408 	.word	0x20003408

00017cd4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   17cd4:	4801      	ldr	r0, [pc, #4]	; (17cdc <ll_tx_mem_acquire+0x8>)
   17cd6:	f7fa bab5 	b.w	12244 <mem_acquire>
   17cda:	bf00      	nop
   17cdc:	20004a24 	.word	0x20004a24

00017ce0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   17ce0:	4901      	ldr	r1, [pc, #4]	; (17ce8 <ll_tx_mem_release+0x8>)
   17ce2:	f7fa bac9 	b.w	12278 <mem_release>
   17ce6:	bf00      	nop
   17ce8:	20004a24 	.word	0x20004a24

00017cec <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17cec:	2800      	cmp	r0, #0
   17cee:	d136      	bne.n	17d5e <ll_tx_mem_enqueue+0x72>
{
   17cf0:	b570      	push	{r4, r5, r6, lr}
   17cf2:	4602      	mov	r2, r0
   17cf4:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17cf6:	481b      	ldr	r0, [pc, #108]	; (17d64 <ll_tx_mem_enqueue+0x78>)
   17cf8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17cfc:	f7fa fad4 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17d00:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17d02:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   17d04:	bb2e      	cbnz	r6, 17d52 <ll_tx_mem_enqueue+0x66>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   17d06:	4c18      	ldr	r4, [pc, #96]	; (17d68 <ll_tx_mem_enqueue+0x7c>)
   17d08:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   17d0c:	7862      	ldrb	r2, [r4, #1]
   17d0e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   17d10:	f10c 0301 	add.w	r3, ip, #1
   17d14:	b2db      	uxtb	r3, r3
		last = 0U;
   17d16:	429a      	cmp	r2, r3
   17d18:	bf08      	it	eq
   17d1a:	2300      	moveq	r3, #0
   17d1c:	78a2      	ldrb	r2, [r4, #2]
	if (last == first) {
   17d1e:	429a      	cmp	r2, r3
   17d20:	d01a      	beq.n	17d58 <ll_tx_mem_enqueue+0x6c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17d22:	fb1c fc00 	smulbb	ip, ip, r0
   17d26:	f104 0e04 	add.w	lr, r4, #4
	lll_tx->handle = handle;
   17d2a:	f82e 600c 	strh.w	r6, [lr, ip]
   17d2e:	44f4      	add	ip, lr
	lll_tx->node = tx;
   17d30:	f8cc 5004 	str.w	r5, [ip, #4]
	*last = idx; /* Commit: Update write index */
   17d34:	70e3      	strb	r3, [r4, #3]
   17d36:	780b      	ldrb	r3, [r1, #0]
	if (ull_ref_get(&conn->ull)) {
   17d38:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   17d3c:	b903      	cbnz	r3, 17d40 <ll_tx_mem_enqueue+0x54>
}
   17d3e:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   17d40:	4b0a      	ldr	r3, [pc, #40]	; (17d6c <ll_tx_mem_enqueue+0x80>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   17d42:	4632      	mov	r2, r6
		mfy.param = conn;
   17d44:	6099      	str	r1, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   17d46:	2003      	movs	r0, #3
   17d48:	2101      	movs	r1, #1
   17d4a:	f7fa fb53 	bl	123f4 <mayfly_enqueue>
	return 0;
   17d4e:	4630      	mov	r0, r6
}
   17d50:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   17d52:	f06f 0015 	mvn.w	r0, #21
}
   17d56:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   17d58:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17d5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   17d5e:	f06f 0015 	mvn.w	r0, #21
}
   17d62:	4770      	bx	lr
   17d64:	20003408 	.word	0x20003408
   17d68:	20000640 	.word	0x20000640
   17d6c:	20000674 	.word	0x20000674

00017d70 <ll_conn_update>:
{
   17d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17d74:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   17d78:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   17d7c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   17d80:	2800      	cmp	r0, #0
   17d82:	d151      	bne.n	17e28 <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17d84:	460c      	mov	r4, r1
   17d86:	4615      	mov	r5, r2
   17d88:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17d8c:	4602      	mov	r2, r0
   17d8e:	483c      	ldr	r0, [pc, #240]	; (17e80 <ll_conn_update+0x110>)
   17d90:	461e      	mov	r6, r3
   17d92:	f7fa fa89 	bl	122a8 <mem_get>
   17d96:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   17d98:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   17d9a:	2800      	cmp	r0, #0
   17d9c:	d144      	bne.n	17e28 <ll_conn_update+0xb8>
	if (!cmd) {
   17d9e:	bb1c      	cbnz	r4, 17de8 <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
   17da0:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
   17da4:	0699      	lsls	r1, r3, #26
   17da6:	d446      	bmi.n	17e36 <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
   17da8:	f89c 30ba 	ldrb.w	r3, [ip, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
   17dac:	07da      	lsls	r2, r3, #31
   17dae:	d43e      	bmi.n	17e2e <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
   17db0:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
   17db4:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
   17db8:	4293      	cmp	r3, r2
   17dba:	d132      	bne.n	17e22 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   17dbc:	f8bc 215e 	ldrh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   17dc0:	f8ac 6160 	strh.w	r6, [ip, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
   17dc4:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   17dc8:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   17dca:	f042 0210 	orr.w	r2, r2, #16
   17dce:	f8ac 215e 	strh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.req++;
   17dd2:	f88c 315c 	strb.w	r3, [ip, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
   17dd6:	f8ac 9162 	strh.w	r9, [ip, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
   17dda:	f8ac 8164 	strh.w	r8, [ip, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
   17dde:	f8ac 7166 	strh.w	r7, [ip, #358]	; 0x166
	return 0;
   17de2:	2000      	movs	r0, #0
}
   17de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   17de8:	3c01      	subs	r4, #1
		if (cmd) {
   17dea:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17dee:	d0df      	beq.n	17db0 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   17df0:	f89c 215d 	ldrb.w	r2, [ip, #349]	; 0x15d
   17df4:	f89c 315c 	ldrb.w	r3, [ip, #348]	; 0x15c
   17df8:	429a      	cmp	r2, r3
   17dfa:	d012      	beq.n	17e22 <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
   17dfc:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
   17e00:	f003 020f 	and.w	r2, r3, #15
   17e04:	2a03      	cmp	r2, #3
   17e06:	d10c      	bne.n	17e22 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   17e08:	f004 040f 	and.w	r4, r4, #15
   17e0c:	f023 031f 	bic.w	r3, r3, #31
   17e10:	f044 0410 	orr.w	r4, r4, #16
   17e14:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   17e16:	f88c 515f 	strb.w	r5, [ip, #351]	; 0x15f
			conn->llcp_conn_param.state = cmd;
   17e1a:	f88c 415e 	strb.w	r4, [ip, #350]	; 0x15e
}
   17e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   17e22:	200c      	movs	r0, #12
}
   17e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17e28:	2002      	movs	r0, #2
}
   17e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   17e2e:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
		    (!conn->common.fex_valid ||
   17e32:	079b      	lsls	r3, r3, #30
   17e34:	d4bc      	bmi.n	17db0 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   17e36:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   17e3a:	2b00      	cmp	r3, #0
   17e3c:	db1e      	blt.n	17e7c <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   17e3e:	f89c 20e4 	ldrb.w	r2, [ip, #228]	; 0xe4
   17e42:	f89c 30e5 	ldrb.w	r3, [ip, #229]	; 0xe5
   17e46:	4293      	cmp	r3, r2
   17e48:	d1eb      	bne.n	17e22 <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17e4a:	f89c 20e6 	ldrb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
   17e4e:	f8ac 90e8 	strh.w	r9, [ip, #232]	; 0xe8
		conn->llcp_cu.req++;
   17e52:	3301      	adds	r3, #1
   17e54:	f88c 30e4 	strb.w	r3, [ip, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17e58:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   17e5c:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17e5e:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   17e62:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   17e64:	f88c 30f4 	strb.w	r3, [ip, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
   17e68:	f8ac 80ea 	strh.w	r8, [ip, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
   17e6c:	f8ac 70ec 	strh.w	r7, [ip, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17e70:	f88c 20e6 	strb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   17e74:	f8cc 00f0 	str.w	r0, [ip, #240]	; 0xf0
}
   17e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17e7c:	201a      	movs	r0, #26
   17e7e:	e7d1      	b.n	17e24 <ll_conn_update+0xb4>
   17e80:	20003408 	.word	0x20003408

00017e84 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17e84:	b9d0      	cbnz	r0, 17ebc <ll_chm_get+0x38>
{
   17e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e88:	4602      	mov	r2, r0
   17e8a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17e8c:	480c      	ldr	r0, [pc, #48]	; (17ec0 <ll_chm_get+0x3c>)
   17e8e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17e92:	f7fa fa09 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17e96:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17e98:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   17e9a:	b96e      	cbnz	r6, 17eb8 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   17e9c:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   17ea0:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
   17ea4:	2205      	movs	r2, #5
   17ea6:	4639      	mov	r1, r7
   17ea8:	4628      	mov	r0, r5
   17eaa:	f010 fc81 	bl	287b0 <memcpy>
	} while (conn->chm_updated);
   17eae:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   17eb2:	2800      	cmp	r0, #0
   17eb4:	d1f4      	bne.n	17ea0 <ll_chm_get+0x1c>
}
   17eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17eb8:	2002      	movs	r0, #2
}
   17eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17ebc:	2002      	movs	r0, #2
}
   17ebe:	4770      	bx	lr
   17ec0:	20003408 	.word	0x20003408

00017ec4 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17ec4:	2800      	cmp	r0, #0
   17ec6:	d13a      	bne.n	17f3e <ll_terminate_ind_send+0x7a>
{
   17ec8:	b510      	push	{r4, lr}
   17eca:	4602      	mov	r2, r0
   17ecc:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17ece:	481d      	ldr	r0, [pc, #116]	; (17f44 <ll_terminate_ind_send+0x80>)
   17ed0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17ed4:	f7fa f9e8 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17ed8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17eda:	bb73      	cbnz	r3, 17f3a <ll_terminate_ind_send+0x76>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   17edc:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   17ee0:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   17ee4:	429a      	cmp	r2, r3
   17ee6:	d126      	bne.n	17f36 <ll_terminate_ind_send+0x72>
	switch (reason) {
   17ee8:	2c29      	cmp	r4, #41	; 0x29
   17eea:	d819      	bhi.n	17f20 <ll_terminate_ind_send+0x5c>
   17eec:	2c04      	cmp	r4, #4
   17eee:	d919      	bls.n	17f24 <ll_terminate_ind_send+0x60>
   17ef0:	1f62      	subs	r2, r4, #5
   17ef2:	2a24      	cmp	r2, #36	; 0x24
   17ef4:	d816      	bhi.n	17f24 <ll_terminate_ind_send+0x60>
   17ef6:	e8df f002 	tbb	[pc, r2]
   17efa:	1517      	.short	0x1517
   17efc:	15151515 	.word	0x15151515
   17f00:	15151515 	.word	0x15151515
   17f04:	15151515 	.word	0x15151515
   17f08:	15171717 	.word	0x15171717
   17f0c:	17151515 	.word	0x17151515
   17f10:	15151515 	.word	0x15151515
   17f14:	15151515 	.word	0x15151515
   17f18:	15151515 	.word	0x15151515
   17f1c:	1515      	.short	0x1515
   17f1e:	17          	.byte	0x17
   17f1f:	00          	.byte	0x00
   17f20:	2c3b      	cmp	r4, #59	; 0x3b
   17f22:	d001      	beq.n	17f28 <ll_terminate_ind_send+0x64>
   17f24:	2012      	movs	r0, #18
}
   17f26:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   17f28:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   17f2a:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   17f2e:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   17f32:	2000      	movs	r0, #0
}
   17f34:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17f36:	200c      	movs	r0, #12
}
   17f38:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17f3a:	2002      	movs	r0, #2
}
   17f3c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17f3e:	2002      	movs	r0, #2
}
   17f40:	4770      	bx	lr
   17f42:	bf00      	nop
   17f44:	20003408 	.word	0x20003408

00017f48 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17f48:	b9b0      	cbnz	r0, 17f78 <ll_feature_req_send+0x30>
{
   17f4a:	b508      	push	{r3, lr}
   17f4c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17f4e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17f52:	480a      	ldr	r0, [pc, #40]	; (17f7c <ll_feature_req_send+0x34>)
   17f54:	f7fa f9a8 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17f58:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17f5a:	b95b      	cbnz	r3, 17f74 <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   17f5c:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
   17f60:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
   17f64:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
   17f66:	bf05      	ittet	eq
   17f68:	3201      	addeq	r2, #1
   17f6a:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
   17f6e:	200c      	movne	r0, #12
	return 0;
   17f70:	4618      	moveq	r0, r3
}
   17f72:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17f74:	2002      	movs	r0, #2
}
   17f76:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17f78:	2002      	movs	r0, #2
}
   17f7a:	4770      	bx	lr
   17f7c:	20003408 	.word	0x20003408

00017f80 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17f80:	b9b0      	cbnz	r0, 17fb0 <ll_version_ind_send+0x30>
{
   17f82:	b508      	push	{r3, lr}
   17f84:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17f86:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17f8a:	480a      	ldr	r0, [pc, #40]	; (17fb4 <ll_version_ind_send+0x34>)
   17f8c:	f7fa f98c 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17f90:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17f92:	b95b      	cbnz	r3, 17fac <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   17f94:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
   17f98:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
   17f9c:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
   17f9e:	bf05      	ittet	eq
   17fa0:	3201      	addeq	r2, #1
   17fa2:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
   17fa6:	200c      	movne	r0, #12
	return 0;
   17fa8:	4618      	moveq	r0, r3
}
   17faa:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17fac:	2002      	movs	r0, #2
}
   17fae:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17fb0:	2002      	movs	r0, #2
}
   17fb2:	4770      	bx	lr
   17fb4:	20003408 	.word	0x20003408

00017fb8 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17fb8:	2800      	cmp	r0, #0
   17fba:	d143      	bne.n	18044 <ll_length_req_send+0x8c>
{
   17fbc:	b538      	push	{r3, r4, r5, lr}
   17fbe:	460d      	mov	r5, r1
   17fc0:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17fc2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17fc6:	4602      	mov	r2, r0
   17fc8:	481f      	ldr	r0, [pc, #124]	; (18048 <ll_length_req_send+0x90>)
   17fca:	f7fa f96d 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   17fce:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17fd0:	bba3      	cbnz	r3, 1803c <ll_length_req_send+0x84>
	if (conn->llcp_length.disabled ||
   17fd2:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   17fd6:	071a      	lsls	r2, r3, #28
   17fd8:	d42e      	bmi.n	18038 <ll_length_req_send+0x80>
	    (conn->common.fex_valid &&
   17fda:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
   17fde:	07d1      	lsls	r1, r2, #31
   17fe0:	d503      	bpl.n	17fea <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   17fe2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
	    (conn->common.fex_valid &&
   17fe6:	0692      	lsls	r2, r2, #26
   17fe8:	d526      	bpl.n	18038 <ll_length_req_send+0x80>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   17fea:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
   17fee:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
   17ff2:	428a      	cmp	r2, r1
   17ff4:	d011      	beq.n	1801a <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   17ff6:	f003 0307 	and.w	r3, r3, #7
   17ffa:	2b03      	cmp	r3, #3
   17ffc:	d004      	beq.n	18008 <ll_length_req_send+0x50>
   17ffe:	3303      	adds	r3, #3
   18000:	f003 0307 	and.w	r3, r3, #7
   18004:	2b01      	cmp	r3, #1
   18006:	d81b      	bhi.n	18040 <ll_length_req_send+0x88>
			if (!conn->llcp_length.cache.tx_octets) {
   18008:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
   1800c:	b9c3      	cbnz	r3, 18040 <ll_length_req_send+0x88>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1800e:	f8a0 5190 	strh.w	r5, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
   18012:	f8a0 4192 	strh.w	r4, [r0, #402]	; 0x192
				return 0;
   18016:	4618      	mov	r0, r3
}
   18018:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1801a:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
   1801e:	f8a0 518a 	strh.w	r5, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
   18022:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18024:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   18028:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1802c:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_time = tx_time;
   18030:	f8a0 418e 	strh.w	r4, [r0, #398]	; 0x18e
	return 0;
   18034:	2000      	movs	r0, #0
}
   18036:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18038:	201a      	movs	r0, #26
}
   1803a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1803c:	2002      	movs	r0, #2
}
   1803e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   18040:	200c      	movs	r0, #12
}
   18042:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18044:	2002      	movs	r0, #2
}
   18046:	4770      	bx	lr
   18048:	20003408 	.word	0x20003408

0001804c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1804c:	4a03      	ldr	r2, [pc, #12]	; (1805c <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1804e:	4b04      	ldr	r3, [pc, #16]	; (18060 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   18050:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   18052:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   18054:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   18056:	800b      	strh	r3, [r1, #0]
}
   18058:	4770      	bx	lr
   1805a:	bf00      	nop
   1805c:	20005ea6 	.word	0x20005ea6
   18060:	20005ea8 	.word	0x20005ea8

00018064 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   18064:	4a02      	ldr	r2, [pc, #8]	; (18070 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   18066:	4b03      	ldr	r3, [pc, #12]	; (18074 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   18068:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1806a:	8019      	strh	r1, [r3, #0]
}
   1806c:	2000      	movs	r0, #0
   1806e:	4770      	bx	lr
   18070:	20005ea6 	.word	0x20005ea6
   18074:	20005ea8 	.word	0x20005ea8

00018078 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   18078:	f04f 0c1b 	mov.w	ip, #27
   1807c:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   18080:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   18084:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   18088:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1808a:	8018      	strh	r0, [r3, #0]
}
   1808c:	4770      	bx	lr
   1808e:	bf00      	nop

00018090 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18090:	b9c0      	cbnz	r0, 180c4 <ll_phy_get+0x34>
{
   18092:	b538      	push	{r3, r4, r5, lr}
   18094:	460d      	mov	r5, r1
   18096:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18098:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1809c:	4602      	mov	r2, r0
   1809e:	480a      	ldr	r0, [pc, #40]	; (180c8 <ll_phy_get+0x38>)
   180a0:	f7fa f902 	bl	122a8 <mem_get>
   180a4:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   180a6:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   180a8:	b950      	cbnz	r0, 180c0 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   180aa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   180ae:	f3c2 0202 	ubfx	r2, r2, #0, #3
   180b2:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   180b4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   180b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   180bc:	7023      	strb	r3, [r4, #0]
}
   180be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   180c0:	2002      	movs	r0, #2
}
   180c2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   180c4:	2002      	movs	r0, #2
}
   180c6:	4770      	bx	lr
   180c8:	20003408 	.word	0x20003408

000180cc <ll_phy_default_set>:
	default_phy_tx = tx;
   180cc:	4a02      	ldr	r2, [pc, #8]	; (180d8 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   180ce:	4b03      	ldr	r3, [pc, #12]	; (180dc <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   180d0:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   180d2:	7019      	strb	r1, [r3, #0]
}
   180d4:	2000      	movs	r0, #0
   180d6:	4770      	bx	lr
   180d8:	20005fe0 	.word	0x20005fe0
   180dc:	20005fdf 	.word	0x20005fdf

000180e0 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   180e0:	2800      	cmp	r0, #0
   180e2:	d141      	bne.n	18168 <ll_phy_req_send+0x88>
{
   180e4:	b570      	push	{r4, r5, r6, lr}
   180e6:	460c      	mov	r4, r1
   180e8:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   180ea:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   180ee:	4602      	mov	r2, r0
   180f0:	481e      	ldr	r0, [pc, #120]	; (1816c <ll_phy_req_send+0x8c>)
   180f2:	461e      	mov	r6, r3
   180f4:	f7fa f8d8 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   180f8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   180fa:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   180fc:	bb93      	cbnz	r3, 18164 <ll_phy_req_send+0x84>
	if (conn->llcp_phy.disabled ||
   180fe:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
   18102:	f010 0008 	ands.w	r0, r0, #8
   18106:	d12b      	bne.n	18160 <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
   18108:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
   1810c:	07db      	lsls	r3, r3, #31
   1810e:	d504      	bpl.n	1811a <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   18110:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   18114:	f413 6f10 	tst.w	r3, #2304	; 0x900
   18118:	d022      	beq.n	18160 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1811a:	f891 3194 	ldrb.w	r3, [r1, #404]	; 0x194
   1811e:	f891 c195 	ldrb.w	ip, [r1, #405]	; 0x195
   18122:	459c      	cmp	ip, r3
   18124:	d11a      	bne.n	1815c <ll_phy_req_send+0x7c>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18126:	f004 0407 	and.w	r4, r4, #7
   1812a:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
   1812e:	00a4      	lsls	r4, r4, #2
   18130:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   18134:	f006 0307 	and.w	r3, r6, #7
   18138:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1813c:	f005 0501 	and.w	r5, r5, #1
   18140:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   18144:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
   18148:	f10c 0c01 	add.w	ip, ip, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1814c:	f022 0207 	bic.w	r2, r2, #7
   18150:	4313      	orrs	r3, r2
	conn->llcp_phy.req++;
   18152:	f881 c194 	strb.w	ip, [r1, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18156:	f8a1 3196 	strh.w	r3, [r1, #406]	; 0x196
}
   1815a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1815c:	200c      	movs	r0, #12
}
   1815e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18160:	201a      	movs	r0, #26
}
   18162:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18164:	2002      	movs	r0, #2
}
   18166:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18168:	2002      	movs	r0, #2
}
   1816a:	4770      	bx	lr
   1816c:	20003408 	.word	0x20003408

00018170 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18170:	b9d8      	cbnz	r0, 181aa <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18172:	4602      	mov	r2, r0
{
   18174:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18176:	480e      	ldr	r0, [pc, #56]	; (181b0 <ll_apto_get+0x40>)
   18178:	460c      	mov	r4, r1
   1817a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1817e:	f7fa f893 	bl	122a8 <mem_get>
   18182:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   18184:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   18186:	b970      	cbnz	r0, 181a6 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   18188:	f8b2 30b2 	ldrh.w	r3, [r2, #178]	; 0xb2
   1818c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1818e:	fb02 f303 	mul.w	r3, r2, r3
   18192:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   18196:	4a07      	ldr	r2, [pc, #28]	; (181b4 <ll_apto_get+0x44>)
   18198:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1819c:	fba2 2303 	umull	r2, r3, r2, r3
   181a0:	099b      	lsrs	r3, r3, #6
   181a2:	8023      	strh	r3, [r4, #0]
}
   181a4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   181a6:	2002      	movs	r0, #2
}
   181a8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   181aa:	2002      	movs	r0, #2
}
   181ac:	4770      	bx	lr
   181ae:	bf00      	nop
   181b0:	20003408 	.word	0x20003408
   181b4:	10624dd3 	.word	0x10624dd3

000181b8 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   181b8:	b9e0      	cbnz	r0, 181f4 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   181ba:	4602      	mov	r2, r0
{
   181bc:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   181be:	480e      	ldr	r0, [pc, #56]	; (181f8 <ll_apto_set+0x40>)
   181c0:	460c      	mov	r4, r1
   181c2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   181c6:	f7fa f86f 	bl	122a8 <mem_get>
   181ca:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   181cc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   181ce:	b978      	cbnz	r0, 181f0 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   181d0:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   181d4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   181d8:	fb03 fc0c 	mul.w	ip, r3, ip
   181dc:	f242 7310 	movw	r3, #10000	; 0x2710
   181e0:	fb03 c304 	mla	r3, r3, r4, ip
   181e4:	3b01      	subs	r3, #1
   181e6:	fbb3 f3fc 	udiv	r3, r3, ip
   181ea:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
   181ee:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   181f0:	2002      	movs	r0, #2
}
   181f2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   181f4:	2002      	movs	r0, #2
}
   181f6:	4770      	bx	lr
   181f8:	20003408 	.word	0x20003408

000181fc <ull_conn_init>:
	err = init_reset();
   181fc:	f7ff b912 	b.w	17424 <init_reset>

00018200 <ull_conn_reset>:
{
   18200:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   18202:	f002 f9fb 	bl	1a5fc <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18206:	2200      	movs	r2, #0
   18208:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1820c:	4815      	ldr	r0, [pc, #84]	; (18264 <ull_conn_reset+0x64>)
   1820e:	f7fa f84b 	bl	122a8 <mem_get>
   18212:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   18214:	f100 021c 	add.w	r2, r0, #28
   18218:	4601      	mov	r1, r0
   1821a:	2005      	movs	r0, #5
   1821c:	f7fe f8a8 	bl	16370 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   18220:	b108      	cbz	r0, 18226 <ull_conn_reset+0x26>
   18222:	3078      	adds	r0, #120	; 0x78
   18224:	d10f      	bne.n	18246 <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   18226:	4810      	ldr	r0, [pc, #64]	; (18268 <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   18228:	4910      	ldr	r1, [pc, #64]	; (1826c <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   1822a:	4a11      	ldr	r2, [pc, #68]	; (18270 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   1822c:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   1822e:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   18232:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   18234:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   18236:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   1823a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   18240:	6013      	str	r3, [r2, #0]
	err = init_reset();
   18242:	f7ff b8ef 	b.w	17424 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   18246:	4a0b      	ldr	r2, [pc, #44]	; (18274 <ull_conn_reset+0x74>)
   18248:	490b      	ldr	r1, [pc, #44]	; (18278 <ull_conn_reset+0x78>)
   1824a:	480c      	ldr	r0, [pc, #48]	; (1827c <ull_conn_reset+0x7c>)
   1824c:	f640 03e3 	movw	r3, #2275	; 0x8e3
   18250:	f00d fc58 	bl	25b04 <printk>
   18254:	4040      	eors	r0, r0
   18256:	f380 8811 	msr	BASEPRI, r0
   1825a:	f04f 0003 	mov.w	r0, #3
   1825e:	df02      	svc	2
   18260:	e7e1      	b.n	18226 <ull_conn_reset+0x26>
   18262:	bf00      	nop
   18264:	20003408 	.word	0x20003408
   18268:	20000640 	.word	0x20000640
   1826c:	200005fc 	.word	0x200005fc
   18270:	20004a00 	.word	0x20004a00
   18274:	0002cfb4 	.word	0x0002cfb4
   18278:	0002cf88 	.word	0x0002cf88
   1827c:	0002c8dc 	.word	0x0002c8dc

00018280 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   18280:	4b01      	ldr	r3, [pc, #4]	; (18288 <ull_conn_default_tx_octets_get+0x8>)
}
   18282:	8818      	ldrh	r0, [r3, #0]
   18284:	4770      	bx	lr
   18286:	bf00      	nop
   18288:	20005ea6 	.word	0x20005ea6

0001828c <ull_conn_default_tx_time_get>:
	return default_tx_time;
   1828c:	4b01      	ldr	r3, [pc, #4]	; (18294 <ull_conn_default_tx_time_get+0x8>)
}
   1828e:	8818      	ldrh	r0, [r3, #0]
   18290:	4770      	bx	lr
   18292:	bf00      	nop
   18294:	20005ea8 	.word	0x20005ea8

00018298 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   18298:	4b01      	ldr	r3, [pc, #4]	; (182a0 <ull_conn_default_phy_tx_get+0x8>)
}
   1829a:	7818      	ldrb	r0, [r3, #0]
   1829c:	4770      	bx	lr
   1829e:	bf00      	nop
   182a0:	20005fe0 	.word	0x20005fe0

000182a4 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   182a4:	4b01      	ldr	r3, [pc, #4]	; (182ac <ull_conn_default_phy_rx_get+0x8>)
}
   182a6:	7818      	ldrb	r0, [r3, #0]
   182a8:	4770      	bx	lr
   182aa:	bf00      	nop
   182ac:	20005fdf 	.word	0x20005fdf

000182b0 <ull_conn_setup>:
{
   182b0:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   182b2:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   182b4:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   182b6:	681d      	ldr	r5, [r3, #0]
   182b8:	782b      	ldrb	r3, [r5, #0]
{
   182ba:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   182bc:	b193      	cbz	r3, 182e4 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   182be:	696b      	ldr	r3, [r5, #20]
   182c0:	b163      	cbz	r3, 182dc <ull_conn_setup+0x2c>
   182c2:	4a0b      	ldr	r2, [pc, #44]	; (182f0 <ull_conn_setup+0x40>)
   182c4:	490b      	ldr	r1, [pc, #44]	; (182f4 <ull_conn_setup+0x44>)
   182c6:	480c      	ldr	r0, [pc, #48]	; (182f8 <ull_conn_setup+0x48>)
   182c8:	f240 33ed 	movw	r3, #1005	; 0x3ed
   182cc:	f00d fc1a 	bl	25b04 <printk>
   182d0:	4040      	eors	r0, r0
   182d2:	f380 8811 	msr	BASEPRI, r0
   182d6:	f04f 0003 	mov.w	r0, #3
   182da:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   182dc:	4b07      	ldr	r3, [pc, #28]	; (182fc <ull_conn_setup+0x4c>)
   182de:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   182e2:	bd38      	pop	{r3, r4, r5, pc}
   182e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   182e8:	4608      	mov	r0, r1
   182ea:	f7ff ba95 	b.w	17818 <conn_setup_adv_scan_disabled_cb>
   182ee:	bf00      	nop
   182f0:	0002cfb4 	.word	0x0002cfb4
   182f4:	0002d020 	.word	0x0002d020
   182f8:	0002c8dc 	.word	0x0002c8dc
   182fc:	00017819 	.word	0x00017819

00018300 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   18300:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   18302:	88da      	ldrh	r2, [r3, #6]
   18304:	2a00      	cmp	r2, #0
   18306:	f040 80ce 	bne.w	184a6 <ull_conn_rx+0x1a6>
{
   1830a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1830e:	460e      	mov	r6, r1
   18310:	b083      	sub	sp, #12
   18312:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18314:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18318:	48a4      	ldr	r0, [pc, #656]	; (185ac <ull_conn_rx+0x2ac>)
   1831a:	f7f9 ffc5 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   1831e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18320:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   18322:	2b00      	cmp	r3, #0
   18324:	f040 80b8 	bne.w	18498 <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
   18328:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1832a:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
	switch (pdu_rx->ll_id) {
   1832e:	7f29      	ldrb	r1, [r5, #28]
   18330:	f001 0103 	and.w	r1, r1, #3
   18334:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18336:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   1833a:	d129      	bne.n	18390 <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
   1833c:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   18340:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18344:	b3d0      	cbz	r0, 183bc <ull_conn_rx+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   18346:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1834a:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   1834c:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   18350:	f2c0 80ad 	blt.w	184ae <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
   18354:	2900      	cmp	r1, #0
   18356:	f040 80be 	bne.w	184d6 <ull_conn_rx+0x1d6>
		((!conn->llcp_enc.refresh &&
   1835a:	f1b8 0f02 	cmp.w	r8, #2
   1835e:	f000 80af 	beq.w	184c0 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18362:	f1b8 0f05 	cmp.w	r8, #5
   18366:	f000 8462 	beq.w	18c2e <ull_conn_rx+0x92e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1836a:	f1b8 0f06 	cmp.w	r8, #6
   1836e:	f000 83cd 	beq.w	18b0c <ull_conn_rx+0x80c>
   18372:	f1b8 0f0d 	cmp.w	r8, #13
   18376:	f000 8190 	beq.w	1869a <ull_conn_rx+0x39a>
   1837a:	f1b8 0f11 	cmp.w	r8, #17
   1837e:	f000 823b 	beq.w	187f8 <ull_conn_rx+0x4f8>
		conn->llcp_terminate.reason_final =
   18382:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18384:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   18386:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b

		return 0;
   1838a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1838c:	712b      	strb	r3, [r5, #4]
		return 0;
   1838e:	e007      	b.n	183a0 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   18390:	b949      	cbnz	r1, 183a6 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   18392:	b110      	cbz	r0, 1839a <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
   18394:	233d      	movs	r3, #61	; 0x3d
   18396:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1839a:	2301      	movs	r3, #1
   1839c:	712b      	strb	r3, [r5, #4]
	return 0;
   1839e:	2000      	movs	r0, #0
}
   183a0:	b003      	add	sp, #12
   183a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   183a6:	2800      	cmp	r0, #0
   183a8:	d0f9      	beq.n	1839e <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   183aa:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   183ac:	2201      	movs	r2, #1
	return 0;
   183ae:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
   183b0:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   183b4:	712a      	strb	r2, [r5, #4]
}
   183b6:	b003      	add	sp, #12
   183b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   183bc:	f1a8 0302 	sub.w	r3, r8, #2
   183c0:	2b17      	cmp	r3, #23
   183c2:	d81d      	bhi.n	18400 <ull_conn_rx+0x100>
   183c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   183c8:	001c007c 	.word	0x001c007c
   183cc:	042e0427 	.word	0x042e0427
   183d0:	037203a2 	.word	0x037203a2
   183d4:	01db001c 	.word	0x01db001c
   183d8:	044d001c 	.word	0x044d001c
   183dc:	016901ac 	.word	0x016901ac
   183e0:	02e002f5 	.word	0x02e002f5
   183e4:	0218024e 	.word	0x0218024e
   183e8:	03cd0402 	.word	0x03cd0402
   183ec:	00b900b9 	.word	0x00b900b9
   183f0:	012c03d7 	.word	0x012c03d7
   183f4:	00f6001c 	.word	0x00f6001c
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   183f8:	7f6b      	ldrb	r3, [r5, #29]
   183fa:	2b01      	cmp	r3, #1
   183fc:	f000 843a 	beq.w	18c74 <ull_conn_rx+0x974>
	if (conn->common.txn_lock) {
   18400:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18404:	0798      	lsls	r0, r3, #30
   18406:	d4c8      	bmi.n	1839a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18408:	4869      	ldr	r0, [pc, #420]	; (185b0 <ull_conn_rx+0x2b0>)
   1840a:	f7f9 ff1b 	bl	12244 <mem_acquire>
	if (!tx) {
   1840e:	2800      	cmp	r0, #0
   18410:	f000 851b 	beq.w	18e4a <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   18414:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18418:	f043 0302 	orr.w	r3, r3, #2
   1841c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18420:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   18422:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18426:	f043 0303 	orr.w	r3, r3, #3
   1842a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1842c:	2302      	movs	r3, #2
   1842e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   18430:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   18434:	2307      	movs	r3, #7
   18436:	71c3      	strb	r3, [r0, #7]
	if (
   18438:	b1f2      	cbz	r2, 18478 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   1843a:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1843e:	0799      	lsls	r1, r3, #30
   18440:	d41a      	bmi.n	18478 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   18442:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   18446:	07db      	lsls	r3, r3, #31
   18448:	d416      	bmi.n	18478 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   1844a:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   1844e:	429a      	cmp	r2, r3
   18450:	f000 84ff 	beq.w	18e52 <ull_conn_rx+0xb52>
		} else if (!conn->tx_ctrl) {
   18454:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   18458:	2b00      	cmp	r3, #0
   1845a:	f000 8542 	beq.w	18ee2 <ull_conn_rx+0xbe2>
	tx->next = conn->tx_ctrl_last->next;
   1845e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
   18462:	6813      	ldr	r3, [r2, #0]
   18464:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18466:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   18468:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1846a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1846e:	2a00      	cmp	r2, #0
   18470:	d193      	bne.n	1839a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   18472:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18476:	e790      	b.n	1839a <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   18478:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   1847c:	2b00      	cmp	r3, #0
   1847e:	f000 84da 	beq.w	18e36 <ull_conn_rx+0xb36>
	tx->next = conn->tx_ctrl_last->next;
   18482:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   18486:	681a      	ldr	r2, [r3, #0]
   18488:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1848a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1848c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1848e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   18492:	2a00      	cmp	r2, #0
   18494:	d181      	bne.n	1839a <ull_conn_rx+0x9a>
   18496:	e7ec      	b.n	18472 <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18498:	6833      	ldr	r3, [r6, #0]
   1849a:	2201      	movs	r2, #1
		return 0;
   1849c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1849e:	711a      	strb	r2, [r3, #4]
}
   184a0:	b003      	add	sp, #12
   184a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   184a6:	2201      	movs	r2, #1
   184a8:	711a      	strb	r2, [r3, #4]
		return 0;
   184aa:	2000      	movs	r0, #0
}
   184ac:	4770      	bx	lr
	       (conn->lll.role &&
   184ae:	bbc1      	cbnz	r1, 18522 <ull_conn_rx+0x222>
		((!conn->llcp_enc.refresh &&
   184b0:	f1b8 0f07 	cmp.w	r8, #7
   184b4:	f000 82fa 	beq.w	18aac <ull_conn_rx+0x7ac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   184b8:	f1b8 0f02 	cmp.w	r8, #2
   184bc:	f47f af55 	bne.w	1836a <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   184c0:	7f6b      	ldrb	r3, [r5, #29]
   184c2:	2b02      	cmp	r3, #2
   184c4:	d19c      	bne.n	18400 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
   184c6:	f895 2020 	ldrb.w	r2, [r5, #32]
   184ca:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   184ce:	2301      	movs	r3, #1
	int nack = 0;
   184d0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   184d2:	712b      	strb	r3, [r5, #4]
}
   184d4:	e764      	b.n	183a0 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   184d6:	f1b8 0f02 	cmp.w	r8, #2
   184da:	d0f1      	beq.n	184c0 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   184dc:	f1b8 0f0b 	cmp.w	r8, #11
   184e0:	d08a      	beq.n	183f8 <ull_conn_rx+0xf8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   184e2:	f1b8 0f04 	cmp.w	r8, #4
   184e6:	f47f af3c 	bne.w	18362 <ull_conn_rx+0x62>
		if (conn->lll.role ||
   184ea:	7f6b      	ldrb	r3, [r5, #29]
   184ec:	2b0d      	cmp	r3, #13
   184ee:	d187      	bne.n	18400 <ull_conn_rx+0x100>
		memcpy(&conn->llcp.encryption.skd[8],
   184f0:	2208      	movs	r2, #8
   184f2:	f105 0120 	add.w	r1, r5, #32
   184f6:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
   184fa:	f010 f959 	bl	287b0 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   184fe:	2204      	movs	r2, #4
   18500:	f105 0128 	add.w	r1, r5, #40	; 0x28
   18504:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   18508:	f010 f952 	bl	287b0 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   1850c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18510:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   18512:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18516:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   18518:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	int nack = 0;
   1851c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1851e:	7111      	strb	r1, [r2, #4]
		break;
   18520:	e73e      	b.n	183a0 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   18522:	f1b8 0f02 	cmp.w	r8, #2
   18526:	d0cb      	beq.n	184c0 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   18528:	f1b8 0f0b 	cmp.w	r8, #11
   1852c:	f000 84a4 	beq.w	18e78 <ull_conn_rx+0xb78>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   18530:	f1b8 0f03 	cmp.w	r8, #3
   18534:	f47f af19 	bne.w	1836a <ull_conn_rx+0x6a>
   18538:	e762      	b.n	18400 <ull_conn_rx+0x100>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   1853a:	7f6b      	ldrb	r3, [r5, #29]
   1853c:	2b09      	cmp	r3, #9
   1853e:	f47f af5f 	bne.w	18400 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   18542:	f1b8 0f14 	cmp.w	r8, #20
   18546:	f000 84db 	beq.w	18f00 <ull_conn_rx+0xc00>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1854a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   1854e:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   18552:	4293      	cmp	r3, r2
   18554:	f000 87e2 	beq.w	1951c <ull_conn_rx+0x121c>
	eff_rx_octets = conn->lll.max_rx_octets;
   18558:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   1855c:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   18560:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   18564:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   18568:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	struct node_tx *tx = NULL;
   1856c:	2300      	movs	r3, #0
	       tx) ||
   1856e:	f001 0107 	and.w	r1, r1, #7
   18572:	2902      	cmp	r1, #2
   18574:	f000 84e4 	beq.w	18f40 <ull_conn_rx+0xc40>
   18578:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   1857c:	f1b8 0f15 	cmp.w	r8, #21
   18580:	f43f af0d 	beq.w	1839e <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   18584:	4618      	mov	r0, r3
   18586:	490a      	ldr	r1, [pc, #40]	; (185b0 <ull_conn_rx+0x2b0>)
   18588:	f7f9 fe76 	bl	12278 <mem_release>
			if (conn->llcp_length.state ==
   1858c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->common.txn_lock = 0U;
   18590:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   18594:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   18598:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   1859c:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   1859e:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   185a2:	f47f aefc 	bne.w	1839e <ull_conn_rx+0x9e>
				return -EBUSY;
   185a6:	f06f 000f 	mvn.w	r0, #15
   185aa:	e6f9      	b.n	183a0 <ull_conn_rx+0xa0>
   185ac:	20003408 	.word	0x20003408
   185b0:	20004a94 	.word	0x20004a94
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   185b4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   185b8:	2b00      	cmp	r3, #0
   185ba:	f6ff af21 	blt.w	18400 <ull_conn_rx+0x100>
   185be:	7f6b      	ldrb	r3, [r5, #29]
   185c0:	2b03      	cmp	r3, #3
   185c2:	f47f af1d 	bne.w	18400 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   185c6:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					 conn->lll.phy_rx))) {
   185ca:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
   185ce:	f895 2020 	ldrb.w	r2, [r5, #32]
   185d2:	430b      	orrs	r3, r1
   185d4:	f003 0307 	and.w	r3, r3, #7
   185d8:	4213      	tst	r3, r2
   185da:	f43f aee0 	beq.w	1839e <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   185de:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   185e2:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   185e6:	1a9b      	subs	r3, r3, r2
   185e8:	f003 0303 	and.w	r3, r3, #3
   185ec:	2b02      	cmp	r3, #2
   185ee:	f43f aed6 	beq.w	1839e <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   185f2:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   185f6:	f002 fa55 	bl	1aaa4 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   185fa:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
   185fe:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			conn->llcp_type = LLCP_CHAN_MAP;
   18602:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   18604:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   18606:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   1860a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1860e:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   18610:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18614:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   18616:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	int nack = 0;
   1861a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1861c:	7111      	strb	r1, [r2, #4]

		break;
   1861e:	e6bf      	b.n	183a0 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   18620:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18624:	2b00      	cmp	r3, #0
   18626:	f6ff aeeb 	blt.w	18400 <ull_conn_rx+0x100>
   1862a:	7f6b      	ldrb	r3, [r5, #29]
   1862c:	2b03      	cmp	r3, #3
   1862e:	f47f aee7 	bne.w	18400 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   18632:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   18636:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   1863a:	429a      	cmp	r2, r3
   1863c:	f43f aead 	beq.w	1839a <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   18640:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   18644:	f002 0303 	and.w	r3, r2, #3
   18648:	2b02      	cmp	r3, #2
   1864a:	f47f aea6 	bne.w	1839a <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   1864e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18652:	f3c2 0182 	ubfx	r1, r2, #2, #3
   18656:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   18658:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1865c:	009b      	lsls	r3, r3, #2
   1865e:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   18662:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   18666:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1866a:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1866e:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   18672:	d002      	beq.n	1867a <ull_conn_rx+0x37a>
   18674:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   18678:	d105      	bne.n	18686 <ull_conn_rx+0x386>
				conn->llcp_phy.tx = 0;
   1867a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   1867e:	f003 0303 	and.w	r3, r3, #3
   18682:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
   18686:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   1868a:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   1868c:	f043 0301 	orr.w	r3, r3, #1
   18690:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   18694:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18698:	e67f      	b.n	1839a <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1869a:	7f6b      	ldrb	r3, [r5, #29]
   1869c:	2b02      	cmp	r3, #2
   1869e:	f47f aeaf 	bne.w	18400 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   186a2:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   186a6:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   186aa:	4293      	cmp	r3, r2
   186ac:	d004      	beq.n	186b8 <ull_conn_rx+0x3b8>
   186ae:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   186b2:	2b03      	cmp	r3, #3
   186b4:	f000 86de 	beq.w	19474 <ull_conn_rx+0x1174>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   186b8:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   186bc:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   186c0:	4293      	cmp	r3, r2
   186c2:	f000 852f 	beq.w	19124 <ull_conn_rx+0xe24>
		rej_ext_ind->error_code = rej_ind->error_code;
   186c6:	f895 1020 	ldrb.w	r1, [r5, #32]
   186ca:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   186ce:	2923      	cmp	r1, #35	; 0x23
   186d0:	d012      	beq.n	186f8 <ull_conn_rx+0x3f8>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   186d2:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   186d6:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   186da:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   186de:	f36f 0200 	bfc	r2, #0, #1
   186e2:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   186e6:	2200      	movs	r2, #0
   186e8:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   186ec:	f3c3 0202 	ubfx	r2, r3, #0, #3
   186f0:	f362 1306 	bfi	r3, r2, #4, #3
   186f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   186f8:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   186fc:	0758      	lsls	r0, r3, #29
   186fe:	f57f ae4c 	bpl.w	1839a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   18702:	231c      	movs	r3, #28
   18704:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   18706:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   18708:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1870c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18710:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   18712:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   18716:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1871a:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   1871c:	77ab      	strb	r3, [r5, #30]
	if (err) {
   1871e:	e63f      	b.n	183a0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   18720:	7f6e      	ldrb	r6, [r5, #29]
   18722:	2e06      	cmp	r6, #6
   18724:	f47f ae6c 	bne.w	18400 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
   18728:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   1872c:	07df      	lsls	r7, r3, #31
   1872e:	f140 85dc 	bpl.w	192ea <ull_conn_rx+0xfea>
	} else if (!conn->llcp_version.rx) {
   18732:	f013 0302 	ands.w	r3, r3, #2
   18736:	f47f ae30 	bne.w	1839a <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   1873a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1873e:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
		conn->procedure_expire = 0U;
   18742:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_version.version_number = v->version_number;
   18746:	f895 3020 	ldrb.w	r3, [r5, #32]
   1874a:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1874e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   18752:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   18756:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1875a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1875e:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
   18762:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   18766:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1876a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1876e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   18772:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
	conn->llcp_version.rx = 1U;
   18776:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	return 0;
   1877a:	2000      	movs	r0, #0
   1877c:	e610      	b.n	183a0 <ull_conn_rx+0xa0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   1877e:	7f6b      	ldrb	r3, [r5, #29]
   18780:	2b09      	cmp	r3, #9
   18782:	f47f ae3d 	bne.w	18400 <ull_conn_rx+0x100>
   18786:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   18788:	49dd      	ldr	r1, [pc, #884]	; (18b00 <ull_conn_rx+0x800>)
   1878a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1878c:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1878e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18792:	400a      	ands	r2, r1
   18794:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   18798:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1879c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   187a0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   187a4:	4013      	ands	r3, r2
   187a6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   187aa:	6a2e      	ldr	r6, [r5, #32]
   187ac:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   187ae:	f7fc ffdf 	bl	15770 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   187b2:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   187b6:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   187ba:	4ad1      	ldr	r2, [pc, #836]	; (18b00 <ull_conn_rx+0x800>)
	conn->llcp_feature.features_peer =
   187bc:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   187c0:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   187c4:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   187c6:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   187ca:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   187cc:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_feature.ack = conn->llcp_feature.req;
   187d0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   187d4:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	feat_result &= 0xFF;
   187d8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   187dc:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   187e0:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   187e2:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   187e6:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   187e8:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   187ec:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	conn->procedure_expire = 0U;
   187f0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   187f4:	4618      	mov	r0, r3
}
   187f6:	e5d3      	b.n	183a0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   187f8:	7f6b      	ldrb	r3, [r5, #29]
   187fa:	2b03      	cmp	r3, #3
   187fc:	f47f ae00 	bne.w	18400 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
   18800:	f895 3020 	ldrb.w	r3, [r5, #32]
   18804:	3b03      	subs	r3, #3
   18806:	2b13      	cmp	r3, #19
   18808:	f63f adc7 	bhi.w	1839a <ull_conn_rx+0x9a>
   1880c:	a201      	add	r2, pc, #4	; (adr r2, 18814 <ull_conn_rx+0x514>)
   1880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18812:	bf00      	nop
   18814:	00018df7 	.word	0x00018df7
   18818:	0001839b 	.word	0x0001839b
   1881c:	0001839b 	.word	0x0001839b
   18820:	0001839b 	.word	0x0001839b
   18824:	0001839b 	.word	0x0001839b
   18828:	0001839b 	.word	0x0001839b
   1882c:	0001839b 	.word	0x0001839b
   18830:	0001839b 	.word	0x0001839b
   18834:	0001839b 	.word	0x0001839b
   18838:	0001839b 	.word	0x0001839b
   1883c:	0001839b 	.word	0x0001839b
   18840:	0001839b 	.word	0x0001839b
   18844:	00018d7f 	.word	0x00018d7f
   18848:	0001839b 	.word	0x0001839b
   1884c:	0001839b 	.word	0x0001839b
   18850:	0001839b 	.word	0x0001839b
   18854:	0001839b 	.word	0x0001839b
   18858:	00018cf5 	.word	0x00018cf5
   1885c:	0001839b 	.word	0x0001839b
   18860:	00018d31 	.word	0x00018d31
		if (conn->lll.role ||
   18864:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18868:	2b00      	cmp	r3, #0
   1886a:	f6ff adc9 	blt.w	18400 <ull_conn_rx+0x100>
   1886e:	7f6b      	ldrb	r3, [r5, #29]
   18870:	2b18      	cmp	r3, #24
   18872:	f47f adc5 	bne.w	18400 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   18876:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1887a:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1887e:	429a      	cmp	r2, r3
   18880:	f43f ad8b 	beq.w	1839a <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   18884:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
   18888:	f003 030f 	and.w	r3, r3, #15
   1888c:	2b04      	cmp	r3, #4
   1888e:	f47f ad84 	bne.w	1839a <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   18892:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   18896:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1889a:	2b05      	cmp	r3, #5
   1889c:	f240 85ad 	bls.w	193fa <ull_conn_rx+0x10fa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   188a0:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   188a2:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   188a4:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   188a8:	f200 85a7 	bhi.w	193fa <ull_conn_rx+0x10fa>
			    (interval_max > 3200) ||
   188ac:	428b      	cmp	r3, r1
   188ae:	f200 85a4 	bhi.w	193fa <ull_conn_rx+0x10fa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   188b2:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   188b4:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   188b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   188ba:	f080 859e 	bcs.w	193fa <ull_conn_rx+0x10fa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   188be:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   188c0:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   188c4:	f1ae 020a 	sub.w	r2, lr, #10
   188c8:	f640 4876 	movw	r8, #3190	; 0xc76
   188cc:	b292      	uxth	r2, r2
   188ce:	4542      	cmp	r2, r8
   188d0:	f200 8593 	bhi.w	193fa <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
   188d4:	3301      	adds	r3, #1
   188d6:	b29b      	uxth	r3, r3
   188d8:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   188dc:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   188e0:	f080 858b 	bcs.w	193fa <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
   188e4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   188e8:	4291      	cmp	r1, r2
   188ea:	f0c0 8586 	bcc.w	193fa <ull_conn_rx+0x10fa>
			conn->llcp_conn_param.preferred_periodicity =
   188ee:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   188f2:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   188f6:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   188fa:	2301      	movs	r3, #1
   188fc:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   18900:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   18902:	f8a4 7162 	strh.w	r7, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   18906:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   1890a:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   1890e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   18912:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   18916:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1891a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1891e:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   18922:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   18926:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1892a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   1892e:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   18932:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   18936:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1893a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   1893e:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   18942:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   18946:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1894a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   1894e:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   18952:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   18956:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1895a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   1895e:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   18962:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   18966:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1896a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   1896e:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   18972:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   18976:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1897a:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				sys_le16_to_cpu(cpr->offset5);
   1897e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   18982:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18986:	e508      	b.n	1839a <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   18988:	7f6b      	ldrb	r3, [r5, #29]
   1898a:	2b18      	cmp	r3, #24
   1898c:	f47f ad38 	bne.w	18400 <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
   18990:	485c      	ldr	r0, [pc, #368]	; (18b04 <ull_conn_rx+0x804>)
   18992:	6803      	ldr	r3, [r0, #0]
   18994:	2b00      	cmp	r3, #0
   18996:	f000 827b 	beq.w	18e90 <ull_conn_rx+0xb90>
   1899a:	429c      	cmp	r4, r3
   1899c:	f000 8278 	beq.w	18e90 <ull_conn_rx+0xb90>
			nack = reject_ext_ind_send(conn, *rx,
   189a0:	2320      	movs	r3, #32
   189a2:	220f      	movs	r2, #15
   189a4:	4629      	mov	r1, r5
   189a6:	4620      	mov	r0, r4
}
   189a8:	b003      	add	sp, #12
   189aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   189ae:	f7ff b807 	b.w	179c0 <reject_ext_ind_send>
		if (conn->lll.role ||
   189b2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   189b6:	2b00      	cmp	r3, #0
   189b8:	f6ff ad22 	blt.w	18400 <ull_conn_rx+0x100>
   189bc:	f895 901d 	ldrb.w	r9, [r5, #29]
   189c0:	f1b9 0f09 	cmp.w	r9, #9
   189c4:	f47f ad1c 	bne.w	18400 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   189c8:	f894 00ba 	ldrb.w	r0, [r4, #186]	; 0xba
   189cc:	f010 0602 	ands.w	r6, r0, #2
   189d0:	f47f ace3 	bne.w	1839a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   189d4:	484c      	ldr	r0, [pc, #304]	; (18b08 <ull_conn_rx+0x808>)
   189d6:	f7f9 fc35 	bl	12244 <mem_acquire>
	if (!tx) {
   189da:	4607      	mov	r7, r0
   189dc:	2800      	cmp	r0, #0
   189de:	f000 8234 	beq.w	18e4a <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   189e2:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   189e6:	4946      	ldr	r1, [pc, #280]	; (18b00 <ull_conn_rx+0x800>)
	conn->common.txn_lock = 1U;
   189e8:	f043 0302 	orr.w	r3, r3, #2
   189ec:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
   189f0:	6a2a      	ldr	r2, [r5, #32]
   189f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   189f4:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   189f6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   189fa:	400a      	ands	r2, r1
   189fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   18a00:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   18a04:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   18a08:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   18a0c:	4013      	ands	r3, r2
   18a0e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18a12:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   18a16:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   18a1a:	f7fc fea9 	bl	15770 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   18a1e:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   18a22:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   18a26:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	feat &= LL_FEAT_BIT_MASK;
   18a2a:	4b35      	ldr	r3, [pc, #212]	; (18b00 <ull_conn_rx+0x800>)
   18a2c:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   18a30:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   18a32:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   18a36:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   18a3a:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   18a3e:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   18a42:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   18a46:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	conn->common.fex_valid = 1U;
   18a4a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18a4e:	f043 0301 	orr.w	r3, r3, #1
   18a52:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a56:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   18a58:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a5c:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   18a60:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a62:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   18a64:	18b8      	adds	r0, r7, r2
   18a66:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   18a68:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   18a6c:	f00f feab 	bl	287c6 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   18a70:	f7fc fe7e 	bl	15770 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   18a74:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	dst[0] = val;
   18a78:	7339      	strb	r1, [r7, #12]
   18a7a:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   18a7c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   18a80:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   18a84:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   18a86:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   18a88:	723b      	strb	r3, [r7, #8]
   18a8a:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   18a8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18a90:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   18a92:	4620      	mov	r0, r4
   18a94:	727b      	strb	r3, [r7, #9]
   18a96:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   18a98:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   18a9a:	73fe      	strb	r6, [r7, #15]
   18a9c:	72fa      	strb	r2, [r7, #11]
   18a9e:	4639      	mov	r1, r7
   18aa0:	f7fe fde6 	bl	17670 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18aa4:	2301      	movs	r3, #1
   18aa6:	712b      	strb	r3, [r5, #4]
	return 0;
   18aa8:	4630      	mov	r0, r6
   18aaa:	e479      	b.n	183a0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   18aac:	7f6b      	ldrb	r3, [r5, #29]
   18aae:	2b02      	cmp	r3, #2
   18ab0:	f47f aca6 	bne.w	18400 <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
   18ab4:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
		} else if ((conn->llcp_conn_param.ack !=
   18ab8:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
	return ((uint16_t)src[1] << 8) | src[0];
   18abc:	f895 3020 	ldrb.w	r3, [r5, #32]
   18ac0:	4291      	cmp	r1, r2
   18ac2:	d002      	beq.n	18aca <ull_conn_rx+0x7ca>
			    conn->llcp_conn_param.req) &&
   18ac4:	2b0f      	cmp	r3, #15
   18ac6:	f000 83c5 	beq.w	19254 <ull_conn_rx+0xf54>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   18aca:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   18ace:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   18ad2:	4291      	cmp	r1, r2
   18ad4:	d002      	beq.n	18adc <ull_conn_rx+0x7dc>
   18ad6:	2b14      	cmp	r3, #20
   18ad8:	f000 8439 	beq.w	1934e <ull_conn_rx+0x104e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   18adc:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   18ae0:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   18ae4:	4291      	cmp	r1, r2
   18ae6:	d002      	beq.n	18aee <ull_conn_rx+0x7ee>
   18ae8:	2b16      	cmp	r3, #22
   18aea:	f000 8498 	beq.w	1941e <ull_conn_rx+0x111e>
			switch (llctrl->unknown_rsp.type) {
   18aee:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18af0:	bf04      	itt	eq
   18af2:	2301      	moveq	r3, #1
   18af4:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   18af6:	2300      	movs	r3, #0
   18af8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   18afc:	4618      	mov	r0, r3
		break;
   18afe:	e44f      	b.n	183a0 <ull_conn_rx+0xa0>
   18b00:	087830d0 	.word	0x087830d0
   18b04:	20004a00 	.word	0x20004a00
   18b08:	20004a94 	.word	0x20004a94
		if ((conn->llcp_req == conn->llcp_ack) ||
   18b0c:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   18b10:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   18b14:	4299      	cmp	r1, r3
   18b16:	f43f ac73 	beq.w	18400 <ull_conn_rx+0x100>
   18b1a:	f894 10bd 	ldrb.w	r1, [r4, #189]	; 0xbd
   18b1e:	2903      	cmp	r1, #3
   18b20:	f47f ac6e 	bne.w	18400 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   18b24:	7f69      	ldrb	r1, [r5, #29]
   18b26:	2901      	cmp	r1, #1
   18b28:	f47f ac6a 	bne.w	18400 <ull_conn_rx+0x100>
		if (conn->lll.role) {
   18b2c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   18b30:	2900      	cmp	r1, #0
   18b32:	f2c0 846a 	blt.w	1940a <ull_conn_rx+0x110a>
			conn->llcp_enc.pause_rx = 0U;
   18b36:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
			conn->llcp_ack = conn->llcp_req;
   18b3a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			conn->procedure_expire = 0U;
   18b3e:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   18b40:	f022 0203 	bic.w	r2, r2, #3
   18b44:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			conn->procedure_expire = 0U;
   18b48:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		if (conn->llcp_enc.refresh) {
   18b4c:	0750      	lsls	r0, r2, #29
   18b4e:	f57f ac26 	bpl.w	1839e <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   18b52:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   18b56:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   18b58:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	int nack = 0;
   18b5c:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   18b5e:	712b      	strb	r3, [r5, #4]
   18b60:	e41e      	b.n	183a0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   18b62:	7f6a      	ldrb	r2, [r5, #29]
   18b64:	2a01      	cmp	r2, #1
   18b66:	f47f ac4b 	bne.w	18400 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
   18b6a:	2300      	movs	r3, #0
   18b6c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   18b70:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18b72:	712a      	strb	r2, [r5, #4]
		break;
   18b74:	e414      	b.n	183a0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   18b76:	7f6b      	ldrb	r3, [r5, #29]
   18b78:	2b03      	cmp	r3, #3
   18b7a:	f47f ac41 	bne.w	18400 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
   18b7e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18b82:	2b00      	cmp	r3, #0
   18b84:	f2c0 82e1 	blt.w	1914a <ull_conn_rx+0xe4a>
			if ((conn->llcp_phy.ack !=
   18b88:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
   18b8c:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
   18b90:	4281      	cmp	r1, r0
   18b92:	d007      	beq.n	18ba4 <ull_conn_rx+0x8a4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   18b94:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   18b98:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   18b9c:	3a01      	subs	r2, #1
   18b9e:	2a02      	cmp	r2, #2
   18ba0:	f240 842f 	bls.w	19402 <ull_conn_rx+0x1102>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   18ba4:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   18ba8:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   18bac:	1a9b      	subs	r3, r3, r2
   18bae:	f003 0303 	and.w	r3, r3, #3
   18bb2:	2b02      	cmp	r3, #2
   18bb4:	f000 83c2 	beq.w	1933c <ull_conn_rx+0x103c>
				     LLCP_ENCRYPTION)) ||
   18bb8:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   18bbc:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   18bc0:	429a      	cmp	r2, r3
   18bc2:	f000 83d7 	beq.w	19374 <ull_conn_rx+0x1074>
				nack = reject_ext_ind_send(conn, *rx,
   18bc6:	232a      	movs	r3, #42	; 0x2a
   18bc8:	2216      	movs	r2, #22
   18bca:	e6eb      	b.n	189a4 <ull_conn_rx+0x6a4>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   18bcc:	7f6f      	ldrb	r7, [r5, #29]
   18bce:	2f01      	cmp	r7, #1
   18bd0:	f47f ac16 	bne.w	18400 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   18bd4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18bd8:	f013 0602 	ands.w	r6, r3, #2
   18bdc:	f040 83aa 	bne.w	19334 <ull_conn_rx+0x1034>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18be0:	48c5      	ldr	r0, [pc, #788]	; (18ef8 <ull_conn_rx+0xbf8>)
   18be2:	f7f9 fb2f 	bl	12244 <mem_acquire>
	if (!tx) {
   18be6:	4601      	mov	r1, r0
   18be8:	2800      	cmp	r0, #0
   18bea:	f000 812e 	beq.w	18e4a <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   18bee:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18bf2:	f043 0302 	orr.w	r3, r3, #2
   18bf6:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18bfa:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   18bfc:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18bfe:	f043 0303 	orr.w	r3, r3, #3
   18c02:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   18c04:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   18c06:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   18c08:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   18c0a:	f7fe fd31 	bl	17670 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18c0e:	712f      	strb	r7, [r5, #4]
	return 0;
   18c10:	4630      	mov	r0, r6
   18c12:	f7ff bbc5 	b.w	183a0 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   18c16:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	f6bf ac65 	bge.w	184ea <ull_conn_rx+0x1ea>
   18c20:	f7ff bbee 	b.w	18400 <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   18c24:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18c28:	2b00      	cmp	r3, #0
   18c2a:	f6ff abe9 	blt.w	18400 <ull_conn_rx+0x100>
   18c2e:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   18c32:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   18c36:	429a      	cmp	r2, r3
   18c38:	f43f abe2 	beq.w	18400 <ull_conn_rx+0x100>
   18c3c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   18c40:	2b03      	cmp	r3, #3
   18c42:	f47f abdd 	bne.w	18400 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   18c46:	7f6b      	ldrb	r3, [r5, #29]
   18c48:	2b01      	cmp	r3, #1
   18c4a:	f47f abd9 	bne.w	18400 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18c4e:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   18c52:	f36f 0201 	bfc	r2, #0, #2
   18c56:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
   18c5a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c5c:	712b      	strb	r3, [r5, #4]
		break;
   18c5e:	f7ff bb9f 	b.w	183a0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   18c62:	7f6b      	ldrb	r3, [r5, #29]
   18c64:	2b01      	cmp	r3, #1
   18c66:	f47f abcb 	bne.w	18400 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
   18c6a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18c6e:	2b00      	cmp	r3, #0
   18c70:	f2c0 8106 	blt.w	18e80 <ull_conn_rx+0xb80>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18c74:	48a0      	ldr	r0, [pc, #640]	; (18ef8 <ull_conn_rx+0xbf8>)
   18c76:	f7f9 fae5 	bl	12244 <mem_acquire>
		if (!tx) {
   18c7a:	2800      	cmp	r0, #0
   18c7c:	f000 80e5 	beq.w	18e4a <ull_conn_rx+0xb4a>
	conn->lll.enc_rx = 0;
   18c80:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   18c84:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->lll.enc_rx = 0;
   18c88:	f023 0318 	bic.w	r3, r3, #24
   18c8c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   18c90:	f042 0201 	orr.w	r2, r2, #1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c94:	7903      	ldrb	r3, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   18c96:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18c9a:	2201      	movs	r2, #1
   18c9c:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c9e:	f043 0303 	orr.w	r3, r3, #3
   18ca2:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   18ca4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   18ca8:	220b      	movs	r2, #11
   18caa:	71c2      	strb	r2, [r0, #7]
	if (
   18cac:	2b00      	cmp	r3, #0
   18cae:	f000 819f 	beq.w	18ff0 <ull_conn_rx+0xcf0>
	    !conn->llcp_enc.pause_tx &&
   18cb2:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   18cb6:	0791      	lsls	r1, r2, #30
   18cb8:	f100 819a 	bmi.w	18ff0 <ull_conn_rx+0xcf0>
	    !conn->llcp_phy.pause_tx &&
   18cbc:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   18cc0:	07d2      	lsls	r2, r2, #31
   18cc2:	f100 8195 	bmi.w	18ff0 <ull_conn_rx+0xcf0>
		if (conn->tx_head == conn->tx_data) {
   18cc6:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   18cca:	4293      	cmp	r3, r2
   18ccc:	f000 8506 	beq.w	196dc <ull_conn_rx+0x13dc>
		} else if (!conn->tx_ctrl) {
   18cd0:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   18cd4:	2a00      	cmp	r2, #0
   18cd6:	f000 8545 	beq.w	19764 <ull_conn_rx+0x1464>
	tx->next = conn->tx_ctrl_last->next;
   18cda:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   18cde:	681a      	ldr	r2, [r3, #0]
   18ce0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18ce2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18ce4:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   18ce8:	6803      	ldr	r3, [r0, #0]
   18cea:	2b00      	cmp	r3, #0
   18cec:	f47f ab55 	bne.w	1839a <ull_conn_rx+0x9a>
   18cf0:	f7ff bbbf 	b.w	18472 <ull_conn_rx+0x172>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   18cf4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   18cf8:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   18cfc:	4293      	cmp	r3, r2
   18cfe:	f43f ab4c 	beq.w	1839a <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   18d02:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   18d04:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   18d06:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn->procedure_expire = 0U;
   18d0a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   18d0e:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   18d10:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   18d14:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   18d16:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18d18:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   18d1a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18d1e:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   18d20:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   18d24:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   18d26:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   18d28:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   18d2a:	4618      	mov	r0, r3
   18d2c:	f7ff bb38 	b.w	183a0 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   18d30:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   18d34:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   18d38:	428b      	cmp	r3, r1
   18d3a:	f43f ab2e 	beq.w	1839a <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   18d3e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   18d42:	2a23      	cmp	r2, #35	; 0x23
   18d44:	d012      	beq.n	18d6c <ull_conn_rx+0xa6c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   18d46:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   18d4a:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   18d4e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   18d52:	f36f 0100 	bfc	r1, #0, #1
   18d56:	f884 1197 	strb.w	r1, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   18d5a:	2100      	movs	r1, #0
   18d5c:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   18d60:	f3c3 0102 	ubfx	r1, r3, #0, #3
   18d64:	f361 1306 	bfi	r3, r1, #4, #3
   18d68:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   18d6c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   18d70:	0759      	lsls	r1, r3, #29
   18d72:	f57f ab12 	bpl.w	1839a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   18d76:	231c      	movs	r3, #28
   18d78:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   18d7a:	772a      	strb	r2, [r5, #28]
   18d7c:	e4c4      	b.n	18708 <ull_conn_rx+0x408>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   18d7e:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   18d82:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   18d86:	4293      	cmp	r3, r2
   18d88:	f43f ab07 	beq.w	1839a <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   18d8c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18d90:	2b00      	cmp	r3, #0
   18d92:	db04      	blt.n	18d9e <ull_conn_rx+0xa9e>
   18d94:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18d98:	2b1a      	cmp	r3, #26
   18d9a:	f000 8510 	beq.w	197be <ull_conn_rx+0x14be>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   18d9e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   18da2:	f003 010f 	and.w	r1, r3, #15
   18da6:	2904      	cmp	r1, #4
   18da8:	d106      	bne.n	18db8 <ull_conn_rx+0xab8>
	conn_upd_curr = NULL;
   18daa:	4954      	ldr	r1, [pc, #336]	; (18efc <ull_conn_rx+0xbfc>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18dac:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   18db0:	2200      	movs	r2, #0
   18db2:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   18db4:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	if (!conn->llcp_conn_param.cmd) {
   18db8:	06da      	lsls	r2, r3, #27
   18dba:	f57f aaee 	bpl.w	1839a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   18dbe:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18dc0:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   18dc4:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18dc6:	f040 83ac 	bne.w	19522 <ull_conn_rx+0x1222>
	cu->status = rej_ext_ind->error_code;
   18dca:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18dce:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   18dd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   18dd2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	cu->latency = lll->latency;
   18dd6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   18dd8:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   18dda:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   18ddc:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   18de0:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   18de4:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   18de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18dea:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   18dee:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   18df0:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   18df2:	f7ff bad5 	b.w	183a0 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   18df6:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
   18dfa:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   18dfe:	428b      	cmp	r3, r1
   18e00:	f43f aacb 	beq.w	1839a <ull_conn_rx+0x9a>
   18e04:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   18e08:	2b03      	cmp	r3, #3
   18e0a:	f47f aac6 	bne.w	1839a <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   18e0e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   18e12:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   18e16:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   18e18:	f022 0203 	bic.w	r2, r2, #3
   18e1c:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   18e20:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   18e24:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   18e28:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   18e2c:	210d      	movs	r1, #13
   18e2e:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   18e30:	4618      	mov	r0, r3
   18e32:	f7ff bab5 	b.w	183a0 <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
   18e36:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18e38:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   18e3c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   18e40:	2a00      	cmp	r2, #0
   18e42:	f47f aaaa 	bne.w	1839a <ull_conn_rx+0x9a>
   18e46:	f7ff bb14 	b.w	18472 <ull_conn_rx+0x172>
		*err = -ENOBUFS;
   18e4a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18e4e:	f7ff baa7 	b.w	183a0 <ull_conn_rx+0xa0>
			conn->tx_data = conn->tx_data->next;
   18e52:	6813      	ldr	r3, [r2, #0]
   18e54:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   18e58:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   18e5c:	2b00      	cmp	r3, #0
   18e5e:	f47f aafe 	bne.w	1845e <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   18e62:	6813      	ldr	r3, [r2, #0]
   18e64:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   18e66:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   18e68:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   18e6a:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
   18e6e:	2a00      	cmp	r2, #0
   18e70:	f47f aa93 	bne.w	1839a <ull_conn_rx+0x9a>
   18e74:	f7ff bafd 	b.w	18472 <ull_conn_rx+0x172>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   18e78:	7f6b      	ldrb	r3, [r5, #29]
   18e7a:	2b01      	cmp	r3, #1
   18e7c:	f47f aac0 	bne.w	18400 <ull_conn_rx+0x100>
		conn->lll.enc_tx = 0;
   18e80:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18e84:	f36f 1304 	bfc	r3, #4, #1
   18e88:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
   18e8c:	f7ff ba85 	b.w	1839a <ull_conn_rx+0x9a>
		if (!conn->lll.role) {
   18e90:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   18e94:	f894 615c 	ldrb.w	r6, [r4, #348]	; 0x15c
					conn->llcp_conn_param.ack) &&
   18e98:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
		if (!conn->lll.role) {
   18e9c:	2f00      	cmp	r7, #0
   18e9e:	f2c0 80b2 	blt.w	19006 <ull_conn_rx+0xd06>
			if ((conn->llcp_conn_param.req !=
   18ea2:	42b1      	cmp	r1, r6
   18ea4:	d00a      	beq.n	18ebc <ull_conn_rx+0xbbc>
			    ((conn->llcp_conn_param.state ==
   18ea6:	f894 615e 	ldrb.w	r6, [r4, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
   18eaa:	f016 0f0b 	tst.w	r6, #11
   18eae:	f000 824b 	beq.w	19348 <ull_conn_rx+0x1048>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   18eb2:	f006 060f 	and.w	r6, r6, #15
   18eb6:	2e06      	cmp	r6, #6
   18eb8:	f000 8246 	beq.w	19348 <ull_conn_rx+0x1048>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   18ebc:	f894 60bb 	ldrb.w	r6, [r4, #187]	; 0xbb
   18ec0:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
   18ec4:	1bf6      	subs	r6, r6, r7
   18ec6:	f006 0603 	and.w	r6, r6, #3
   18eca:	2e02      	cmp	r6, #2
   18ecc:	f000 8320 	beq.w	19510 <ull_conn_rx+0x1210>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   18ed0:	f894 7194 	ldrb.w	r7, [r4, #404]	; 0x194
   18ed4:	f894 6195 	ldrb.w	r6, [r4, #405]	; 0x195
   18ed8:	42b7      	cmp	r7, r6
   18eda:	f000 835b 	beq.w	19594 <ull_conn_rx+0x1294>
				nack = reject_ext_ind_send(conn, *rx,
   18ede:	232a      	movs	r3, #42	; 0x2a
   18ee0:	e55f      	b.n	189a2 <ull_conn_rx+0x6a2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18ee2:	7913      	ldrb	r3, [r2, #4]
   18ee4:	f003 0303 	and.w	r3, r3, #3
   18ee8:	2b03      	cmp	r3, #3
   18eea:	f000 82bb 	beq.w	19464 <ull_conn_rx+0x1164>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   18eee:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
   18ef2:	f7ff bab6 	b.w	18462 <ull_conn_rx+0x162>
   18ef6:	bf00      	nop
   18ef8:	20004a94 	.word	0x20004a94
   18efc:	20004a00 	.word	0x20004a00
	if (conn->common.txn_lock) {
   18f00:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18f04:	079b      	lsls	r3, r3, #30
   18f06:	f53f aa48 	bmi.w	1839a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18f0a:	48d1      	ldr	r0, [pc, #836]	; (19250 <ull_conn_rx+0xf50>)
   18f0c:	f7f9 f99a 	bl	12244 <mem_acquire>
	if (!tx) {
   18f10:	4603      	mov	r3, r0
   18f12:	2800      	cmp	r0, #0
   18f14:	d099      	beq.n	18e4a <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   18f16:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   18f1a:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	eff_rx_octets = conn->lll.max_rx_octets;
   18f1e:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   18f22:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   18f26:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   18f2a:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	conn->common.txn_lock = 1U;
   18f2e:	f042 0202 	orr.w	r2, r2, #2
   18f32:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   18f36:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   18f3a:	428a      	cmp	r2, r1
   18f3c:	f040 8431 	bne.w	197a2 <ull_conn_rx+0x14a2>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   18f40:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   18f42:	291a      	cmp	r1, #26
   18f44:	f240 8269 	bls.w	1941a <ull_conn_rx+0x111a>
			eff_tx_octets = MIN(max_rx_octets,
   18f48:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   18f4c:	4281      	cmp	r1, r0
   18f4e:	bf28      	it	cs
   18f50:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   18f52:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   18f54:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   18f58:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   18f5a:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   18f5c:	bf34      	ite	cc
   18f5e:	46c6      	movcc	lr, r8
   18f60:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   18f64:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   18f68:	bf34      	ite	cc
   18f6a:	4658      	movcc	r0, fp
   18f6c:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   18f70:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   18f74:	bf34      	ite	cc
   18f76:	46d4      	movcc	ip, sl
   18f78:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   18f7c:	45c6      	cmp	lr, r8
   18f7e:	f000 8287 	beq.w	19490 <ull_conn_rx+0x1190>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   18f82:	3a01      	subs	r2, #1
   18f84:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
   18f88:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
			conn->llcp_length.tx_octets = eff_tx_octets;
   18f8c:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
   18f90:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
   18f94:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			if (tx) {
   18f98:	2b00      	cmp	r3, #0
   18f9a:	f000 82ae 	beq.w	194fa <ull_conn_rx+0x11fa>
				conn->llcp_length.state =
   18f9e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   18fa2:	2505      	movs	r5, #5
   18fa4:	f365 0202 	bfi	r2, r5, #0, #3
   18fa8:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			link->mem = conn->llcp_rx;
   18fac:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   18fb0:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   18fb2:	6832      	ldr	r2, [r6, #0]
   18fb4:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   18fb6:	6832      	ldr	r2, [r6, #0]
   18fb8:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
			*rx = NULL;
   18fbc:	2200      	movs	r2, #0
   18fbe:	6032      	str	r2, [r6, #0]
	if (tx) {
   18fc0:	2b00      	cmp	r3, #0
   18fc2:	f43f a9ec 	beq.w	1839e <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18fc6:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   18fc8:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18fca:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   18fce:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18fd0:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   18fd2:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18fd4:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   18fd6:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   18fd8:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   18fdc:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   18fe0:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   18fe2:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18fe4:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   18fe6:	f7fe fb43 	bl	17670 <ctrl_tx_sec_enqueue>
	return 0;
   18fea:	2000      	movs	r0, #0
}
   18fec:	f7ff b9d8 	b.w	183a0 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   18ff0:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   18ff4:	2a00      	cmp	r2, #0
   18ff6:	f47f ae70 	bne.w	18cda <ull_conn_rx+0x9da>
			tx->next = conn->tx_head;
   18ffa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18ffc:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   19000:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   19004:	e670      	b.n	18ce8 <ull_conn_rx+0x9e8>
		} else if ((conn->llcp_conn_param.req ==
   19006:	42b1      	cmp	r1, r6
   19008:	d005      	beq.n	19016 <ull_conn_rx+0xd16>
			    conn->llcp_conn_param.ack) ||
   1900a:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1900e:	f012 0f0b 	tst.w	r2, #11
   19012:	f47f a9c2 	bne.w	1839a <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   19016:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1901a:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1901e:	2a05      	cmp	r2, #5
   19020:	f240 8091 	bls.w	19146 <ull_conn_rx+0xe46>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   19024:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   19028:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1902c:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   19030:	f200 8089 	bhi.w	19146 <ull_conn_rx+0xe46>
			    (interval_max > 3200) ||
   19034:	42b2      	cmp	r2, r6
   19036:	f200 8086 	bhi.w	19146 <ull_conn_rx+0xe46>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1903a:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1903e:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   19042:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   19046:	d27e      	bcs.n	19146 <ull_conn_rx+0xe46>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   19048:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1904c:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   19050:	f1a2 070a 	sub.w	r7, r2, #10
   19054:	f640 4b76 	movw	fp, #3190	; 0xc76
   19058:	b2bf      	uxth	r7, r7
   1905a:	455f      	cmp	r7, fp
   1905c:	d873      	bhi.n	19146 <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
   1905e:	f10c 0701 	add.w	r7, ip, #1
   19062:	b2bf      	uxth	r7, r7
   19064:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   19068:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   1906c:	d26b      	bcs.n	19146 <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
   1906e:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   19072:	455e      	cmp	r6, fp
   19074:	d367      	bcc.n	19146 <ull_conn_rx+0xe46>
			conn->llcp_conn_param.interval_min = interval_min;
   19076:	f8a4 a160 	strh.w	sl, [r4, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
   1907a:	f8a4 9162 	strh.w	r9, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   1907e:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   19082:	f8a4 e166 	strh.w	lr, [r4, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
   19086:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1908a:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1908e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   19092:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   19096:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   1909a:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1909e:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   190a2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   190a6:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   190aa:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   190ae:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   190b2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   190b6:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   190ba:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   190be:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   190c2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   190c6:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   190ca:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   190ce:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   190d2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   190d6:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   190da:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   190de:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   190e2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   190e6:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   190ea:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   190ee:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   190f2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   190f6:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
			     lll->interval) ||
   190fa:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   190fc:	42be      	cmp	r6, r7
   190fe:	f000 833a 	beq.w	19776 <ull_conn_rx+0x1476>
				conn->llcp_conn_param.state =
   19102:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   19106:	2503      	movs	r5, #3
   19108:	f365 0203 	bfi	r2, r5, #0, #4
   1910c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
   19110:	3901      	subs	r1, #1
   19112:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
   19116:	2b00      	cmp	r3, #0
   19118:	f47f a941 	bne.w	1839e <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   1911c:	6004      	str	r4, [r0, #0]
	int nack = 0;
   1911e:	4618      	mov	r0, r3
   19120:	f7ff b93e 	b.w	183a0 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   19124:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   19128:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1912c:	4293      	cmp	r3, r2
   1912e:	f43f ade1 	beq.w	18cf4 <ull_conn_rx+0x9f4>
		rej_ext_ind->error_code = rej_ind->error_code;
   19132:	f895 3020 	ldrb.w	r3, [r5, #32]
   19136:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1913a:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1913e:	2900      	cmp	r1, #0
   19140:	f6bf ae2a 	bge.w	18d98 <ull_conn_rx+0xa98>
   19144:	e62b      	b.n	18d9e <ull_conn_rx+0xa9e>
				nack = reject_ext_ind_send(conn, *rx,
   19146:	231e      	movs	r3, #30
   19148:	e42b      	b.n	189a2 <ull_conn_rx+0x6a2>
	if (conn->common.txn_lock) {
   1914a:	f894 70ba 	ldrb.w	r7, [r4, #186]	; 0xba
   1914e:	f017 0702 	ands.w	r7, r7, #2
   19152:	f47f a922 	bne.w	1839a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19156:	483e      	ldr	r0, [pc, #248]	; (19250 <ull_conn_rx+0xf50>)
   19158:	f7f9 f874 	bl	12244 <mem_acquire>
	if (!tx) {
   1915c:	4602      	mov	r2, r0
   1915e:	2800      	cmp	r0, #0
   19160:	f43f ae73 	beq.w	18e4a <ull_conn_rx+0xb4a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19164:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->common.txn_lock = 1U;
   19168:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	if (conn->llcp_phy.ack ==
   1916c:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19170:	2002      	movs	r0, #2
   19172:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   19176:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1917a:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   1917e:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
	conn->common.txn_lock = 1U;
   19182:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
			conn->phy_pref_tx;
   19186:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	if (conn->llcp_phy.ack ==
   1918a:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   1918c:	f3c3 0602 	ubfx	r6, r3, #0, #3
   19190:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   19194:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   19198:	d114      	bne.n	191c4 <ull_conn_rx+0xec4>
		conn->llcp_phy.ack--;
   1919a:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   1919c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		conn->llcp_phy.ack--;
   191a0:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.tx =
   191a4:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
		conn->llcp_phy.cmd = 0U;
   191a8:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   191ac:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   191b0:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   191b4:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->procedure_expire =
   191b8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
		conn->llcp_phy.rx =
   191bc:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		conn->procedure_expire =
   191c0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_phy.rx &= p->tx_phys;
   191c4:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->llcp_phy.tx &= p->rx_phys;
   191c8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   191cc:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   191d0:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   191d4:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   191d8:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   191dc:	009b      	lsls	r3, r3, #2
   191de:	f001 0103 	and.w	r1, r1, #3
   191e2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   191e6:	430b      	orrs	r3, r1
   191e8:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   191ec:	2303      	movs	r3, #3
   191ee:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   191f0:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   191f2:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   191f4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   191f8:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   191fa:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   191fc:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   19200:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   19202:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19206:	7110      	strb	r0, [r2, #4]
	if (
   19208:	2b00      	cmp	r3, #0
   1920a:	f000 80aa 	beq.w	19362 <ull_conn_rx+0x1062>
	    !conn->llcp_enc.pause_tx &&
   1920e:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
   19212:	0787      	lsls	r7, r0, #30
   19214:	f100 80a5 	bmi.w	19362 <ull_conn_rx+0x1062>
	    !conn->llcp_phy.pause_tx &&
   19218:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
   1921c:	07c6      	lsls	r6, r0, #31
   1921e:	f100 80a0 	bmi.w	19362 <ull_conn_rx+0x1062>
		if (conn->tx_head == conn->tx_data) {
   19222:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   19226:	4283      	cmp	r3, r0
   19228:	f000 824c 	beq.w	196c4 <ull_conn_rx+0x13c4>
		} else if (!conn->tx_ctrl) {
   1922c:	2900      	cmp	r1, #0
   1922e:	f000 8291 	beq.w	19754 <ull_conn_rx+0x1454>
	tx->next = conn->tx_ctrl_last->next;
   19232:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   19236:	6819      	ldr	r1, [r3, #0]
   19238:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1923a:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1923c:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
   19240:	6813      	ldr	r3, [r2, #0]
   19242:	2b00      	cmp	r3, #0
   19244:	f47f a8a9 	bne.w	1839a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   19248:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1924c:	f7ff b8a5 	b.w	1839a <ull_conn_rx+0x9a>
   19250:	20004a94 	.word	0x20004a94
			conn->llcp_conn_param.disabled = 1U;
   19254:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   19258:	f043 0320 	orr.w	r3, r3, #32
   1925c:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			if (!conn->lll.role) {
   19260:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19264:	2b00      	cmp	r3, #0
   19266:	f2c0 8139 	blt.w	194dc <ull_conn_rx+0x11dc>
				LL_ASSERT(conn->llcp_cu.req ==
   1926a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1926e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   19272:	429a      	cmp	r2, r3
   19274:	d00e      	beq.n	19294 <ull_conn_rx+0xf94>
   19276:	4ac1      	ldr	r2, [pc, #772]	; (1957c <ull_conn_rx+0x127c>)
   19278:	49c1      	ldr	r1, [pc, #772]	; (19580 <ull_conn_rx+0x1280>)
   1927a:	48c2      	ldr	r0, [pc, #776]	; (19584 <ull_conn_rx+0x1284>)
   1927c:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   19280:	f00c fc40 	bl	25b04 <printk>
   19284:	4040      	eors	r0, r0
   19286:	f380 8811 	msr	BASEPRI, r0
   1928a:	f04f 0003 	mov.w	r0, #3
   1928e:	df02      	svc	2
   19290:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_conn_param.state =
   19294:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   19298:	2106      	movs	r1, #6
   1929a:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   1929e:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   192a0:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   192a2:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
   192a6:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   192aa:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   192ac:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   192b0:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   192b4:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   192b8:	00db      	lsls	r3, r3, #3
   192ba:	f022 020f 	bic.w	r2, r2, #15
   192be:	430b      	orrs	r3, r1
   192c0:	4313      	orrs	r3, r2
   192c2:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_cu.latency =
   192c6:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
				conn->llcp_cu.interval =
   192ca:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
				conn->llcp_cu.latency =
   192ce:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
				conn->llcp_cu.win_offset_us = 0U;
   192d2:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   192d4:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
				conn->llcp_cu.interval =
   192d8:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
				conn->llcp_cu.timeout =
   192dc:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				conn->llcp_cu.win_offset_us = 0U;
   192e0:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   192e4:	7129      	strb	r1, [r5, #4]
				break;
   192e6:	f7ff b85b 	b.w	183a0 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   192ea:	48a7      	ldr	r0, [pc, #668]	; (19588 <ull_conn_rx+0x1288>)
   192ec:	f7f8 ffaa 	bl	12244 <mem_acquire>
		if (!tx) {
   192f0:	4601      	mov	r1, r0
   192f2:	2800      	cmp	r0, #0
   192f4:	f43f ada9 	beq.w	18e4a <ull_conn_rx+0xb4a>
		conn->llcp_version.tx = 1U;
   192f8:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   192fc:	f043 0301 	orr.w	r3, r3, #1
   19300:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19304:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   19306:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   19308:	220c      	movs	r2, #12
   1930a:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1930c:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1930e:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19312:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19316:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19318:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   1931a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1931e:	2205      	movs	r2, #5
		v->sub_version_number =
   19320:	72c3      	strb	r3, [r0, #11]
   19322:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19324:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   19326:	4620      	mov	r0, r4
   19328:	f7fe f9a2 	bl	17670 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1932c:	2301      	movs	r3, #1
   1932e:	712b      	strb	r3, [r5, #4]
   19330:	f7ff ba09 	b.w	18746 <ull_conn_rx+0x446>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19334:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   19336:	2000      	movs	r0, #0
   19338:	f7ff b832 	b.w	183a0 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   1933c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   19340:	2b03      	cmp	r3, #3
   19342:	f47f ac40 	bne.w	18bc6 <ull_conn_rx+0x8c6>
   19346:	e437      	b.n	18bb8 <ull_conn_rx+0x8b8>
				nack = reject_ext_ind_send(conn, *rx,
   19348:	2323      	movs	r3, #35	; 0x23
   1934a:	f7ff bb2a 	b.w	189a2 <ull_conn_rx+0x6a2>
			conn->llcp_length.disabled = 1U;
   1934e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   19352:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
   19356:	f043 0308 	orr.w	r3, r3, #8
   1935a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   1935e:	f7ff bbca 	b.w	18af6 <ull_conn_rx+0x7f6>
		if (!conn->tx_ctrl) {
   19362:	2900      	cmp	r1, #0
   19364:	f47f af65 	bne.w	19232 <ull_conn_rx+0xf32>
			tx->next = conn->tx_head;
   19368:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1936a:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1936e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
   19372:	e765      	b.n	19240 <ull_conn_rx+0xf40>
				conn->llcp_phy.state =
   19374:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   19378:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   1937a:	f043 0303 	orr.w	r3, r3, #3
   1937e:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   19382:	d111      	bne.n	193a8 <ull_conn_rx+0x10a8>
					conn->llcp_phy.tx =
   19384:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
						conn->phy_pref_rx;
   19388:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
					conn->llcp_phy.ack--;
   1938c:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   1938e:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   19392:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.tx =
   19396:	f240 43fc 	movw	r3, #1276	; 0x4fc
   1939a:	f022 0204 	bic.w	r2, r2, #4
   1939e:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   193a2:	4313      	orrs	r3, r2
   193a4:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
   193a8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   193ac:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   193b0:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   193b4:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   193b8:	f003 0203 	and.w	r2, r3, #3
   193bc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   193c0:	4003      	ands	r3, r0
   193c2:	009b      	lsls	r3, r3, #2
   193c4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   193c8:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   193ca:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   193ce:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   193d2:	d002      	beq.n	193da <ull_conn_rx+0x10da>
   193d4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   193d8:	d105      	bne.n	193e6 <ull_conn_rx+0x10e6>
					conn->llcp_phy.tx = 0;
   193da:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   193de:	f003 0303 	and.w	r3, r3, #3
   193e2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
   193e6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   193ea:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   193ec:	4313      	orrs	r3, r2
   193ee:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	int nack = 0;
   193f2:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   193f4:	712a      	strb	r2, [r5, #4]
   193f6:	f7fe bfd3 	b.w	183a0 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   193fa:	231e      	movs	r3, #30
   193fc:	2210      	movs	r2, #16
   193fe:	f7ff bad1 	b.w	189a4 <ull_conn_rx+0x6a4>
				nack = reject_ext_ind_send(conn, *rx,
   19402:	2323      	movs	r3, #35	; 0x23
   19404:	2216      	movs	r2, #22
   19406:	f7ff bacd 	b.w	189a4 <ull_conn_rx+0x6a4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1940a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   1940e:	f36f 0301 	bfc	r3, #0, #2
   19412:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   19416:	f7ff bb99 	b.w	18b4c <ull_conn_rx+0x84c>
   1941a:	4649      	mov	r1, r9
   1941c:	e599      	b.n	18f52 <ull_conn_rx+0xc52>
			lll->phy_tx_time = lll->phy_tx;
   1941e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
   19422:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
   19426:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
   1942a:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1942e:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   19430:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   19434:	f361 1206 	bfi	r2, r1, #4, #3
   19438:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
   1943c:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   19440:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   19444:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   19448:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   1944a:	d078      	beq.n	1953e <ull_conn_rx+0x123e>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1944c:	221c      	movs	r2, #28
   1944e:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   19450:	2300      	movs	r3, #0
   19452:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   19454:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   19456:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   1945a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1945e:	77ab      	strb	r3, [r5, #30]
   19460:	f7ff bb49 	b.w	18af6 <ull_conn_rx+0x7f6>
	    ((pdu_data_tx->llctrl.opcode !=
   19464:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19466:	2b03      	cmp	r3, #3
   19468:	f43f acfb 	beq.w	18e62 <ull_conn_rx+0xb62>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1946c:	2b0a      	cmp	r3, #10
   1946e:	f47f ad3e 	bne.w	18eee <ull_conn_rx+0xbee>
   19472:	e4f6      	b.n	18e62 <ull_conn_rx+0xb62>
	conn->llcp_enc.pause_rx = 0U;
   19474:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   19478:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   1947c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1947e:	f021 0103 	bic.w	r1, r1, #3
   19482:	f884 113e 	strb.w	r1, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   19486:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   1948a:	4618      	mov	r0, r3
   1948c:	f7fe bf88 	b.w	183a0 <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   19490:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   19492:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   19494:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   19498:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1949c:	f000 8108 	beq.w	196b0 <ull_conn_rx+0x13b0>
			conn->lll.max_rx_time = eff_rx_time;
   194a0:	f8a4 c044 	strh.w	ip, [r4, #68]	; 0x44
			if (tx) {
   194a4:	2b00      	cmp	r3, #0
   194a6:	f000 80ff 	beq.w	196a8 <ull_conn_rx+0x13a8>
					(conn->llcp_length.req - 1);
   194aa:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   194ac:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				conn->llcp_length.state =
   194b0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
   194b4:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
				conn->llcp_length.state =
   194b8:	2603      	movs	r6, #3
   194ba:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   194be:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
   194c2:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
   194c6:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_length.state =
   194ca:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   194ce:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   194d2:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   194d4:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   194d8:	84e8      	strh	r0, [r5, #38]	; 0x26
   194da:	e571      	b.n	18fc0 <ull_conn_rx+0xcc0>
	conn_upd_curr = NULL;
   194dc:	4b2b      	ldr	r3, [pc, #172]	; (1958c <ull_conn_rx+0x128c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   194de:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   194e2:	2200      	movs	r2, #0
   194e4:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   194e6:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   194ea:	f013 0310 	ands.w	r3, r3, #16
   194ee:	d12a      	bne.n	19546 <ull_conn_rx+0x1246>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   194f0:	2201      	movs	r2, #1
   194f2:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   194f4:	4618      	mov	r0, r3
				break;
   194f6:	f7fe bf53 	b.w	183a0 <ull_conn_rx+0xa0>
				conn->llcp_length.state =
   194fa:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->lll.max_tx_octets = eff_tx_octets;
   194fe:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->llcp_length.state =
   19500:	2504      	movs	r5, #4
   19502:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   19506:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
				conn->llcp_length.state =
   1950a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   1950e:	e54d      	b.n	18fac <ull_conn_rx+0xcac>
				      0x03) == 0x02) &&
   19510:	f894 60bd 	ldrb.w	r6, [r4, #189]	; 0xbd
   19514:	2e03      	cmp	r6, #3
   19516:	f47f ace2 	bne.w	18ede <ull_conn_rx+0xbde>
   1951a:	e4d9      	b.n	18ed0 <ull_conn_rx+0xbd0>
	struct node_tx *tx = NULL;
   1951c:	2300      	movs	r3, #0
   1951e:	f7ff b82d 	b.w	1857c <ull_conn_rx+0x27c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19522:	4a16      	ldr	r2, [pc, #88]	; (1957c <ull_conn_rx+0x127c>)
   19524:	491a      	ldr	r1, [pc, #104]	; (19590 <ull_conn_rx+0x1290>)
   19526:	4817      	ldr	r0, [pc, #92]	; (19584 <ull_conn_rx+0x1284>)
   19528:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   1952c:	f00c faea 	bl	25b04 <printk>
   19530:	4040      	eors	r0, r0
   19532:	f380 8811 	msr	BASEPRI, r0
   19536:	f04f 0003 	mov.w	r0, #3
   1953a:	df02      	svc	2
   1953c:	e445      	b.n	18dca <ull_conn_rx+0xaca>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1953e:	2201      	movs	r2, #1
   19540:	711a      	strb	r2, [r3, #4]
   19542:	f7ff bad8 	b.w	18af6 <ull_conn_rx+0x7f6>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   19546:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19548:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1954c:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1954e:	f040 80d4 	bne.w	196fa <ull_conn_rx+0x13fa>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   19552:	231a      	movs	r3, #26
   19554:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   19556:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   19558:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			cu->latency = lll->latency;
   1955c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1955e:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   19560:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   19564:	227d      	movs	r2, #125	; 0x7d
   19566:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1956a:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   1956c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19570:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   19574:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   19576:	f7ff babe 	b.w	18af6 <ull_conn_rx+0x7f6>
   1957a:	bf00      	nop
   1957c:	0002cfb4 	.word	0x0002cfb4
   19580:	0002d0a8 	.word	0x0002d0a8
   19584:	0002c8dc 	.word	0x0002c8dc
   19588:	20004a94 	.word	0x20004a94
   1958c:	20004a00 	.word	0x20004a00
   19590:	0002cb8c 	.word	0x0002cb8c
				uint16_t interval_min =
   19594:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   19598:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1959c:	2e05      	cmp	r6, #5
   1959e:	f67f add2 	bls.w	19146 <ull_conn_rx+0xe46>
				uint16_t interval_max =
   195a2:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   195a6:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   195aa:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   195ae:	f63f adca 	bhi.w	19146 <ull_conn_rx+0xe46>
				    (interval_max > 3200) ||
   195b2:	4576      	cmp	r6, lr
   195b4:	f63f adc7 	bhi.w	19146 <ull_conn_rx+0xe46>
				uint16_t latency =
   195b8:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   195ba:	f8ad 6006 	strh.w	r6, [sp, #6]
   195be:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   195c0:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   195c4:	f4bf adbf 	bcs.w	19146 <ull_conn_rx+0xe46>
				uint16_t timeout =
   195c8:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   195ca:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   195ce:	f1ac 0a0a 	sub.w	sl, ip, #10
   195d2:	f640 4b76 	movw	fp, #3190	; 0xc76
   195d6:	fa1f fa8a 	uxth.w	sl, sl
   195da:	45da      	cmp	sl, fp
   195dc:	f63f adb3 	bhi.w	19146 <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
   195e0:	f106 0a01 	add.w	sl, r6, #1
   195e4:	fa1f fa8a 	uxth.w	sl, sl
   195e8:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   195ec:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   195f0:	f4bf ada9 	bcs.w	19146 <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
   195f4:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   195f8:	45de      	cmp	lr, fp
   195fa:	f4ff ada4 	bcc.w	19146 <ull_conn_rx+0xe46>
				conn->llcp_conn_param.interval_max =
   195fe:	f8a4 8162 	strh.w	r8, [r4, #354]	; 0x162
				conn->llcp_conn_param.latency =	latency;
   19602:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   19606:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
				conn->llcp_conn_param.latency =	latency;
   1960a:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
				conn->llcp_conn_param.timeout =	timeout;
   1960e:	f8a4 7166 	strh.w	r7, [r4, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
   19612:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   19616:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   1961a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1961e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   19622:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
   19626:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   1962a:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1962e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   19632:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
   19636:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   1963a:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1963e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   19642:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
   19646:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1964a:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1964e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   19652:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
   19656:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1965a:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1965e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   19662:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
   19666:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1966a:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1966e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   19672:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
   19676:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1967a:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   1967e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   19682:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
				     lll->interval) ||
   19686:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   19688:	45be      	cmp	lr, r7
   1968a:	d044      	beq.n	19716 <ull_conn_rx+0x1416>
					if (conn->llcp_enc.pause_tx) {
   1968c:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   19690:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
   19694:	f43f ad37 	beq.w	19106 <ull_conn_rx+0xe06>
						conn->llcp_conn_param.state =
   19698:	2602      	movs	r6, #2
   1969a:	f366 0203 	bfi	r2, r6, #0, #4
   1969e:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
						(*rx)->hdr.type =
   196a2:	2201      	movs	r2, #1
   196a4:	712a      	strb	r2, [r5, #4]
   196a6:	e533      	b.n	19110 <ull_conn_rx+0xe10>
				conn->lll.max_tx_octets = eff_tx_octets;
   196a8:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
   196aa:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
   196ae:	e70e      	b.n	194ce <ull_conn_rx+0x11ce>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   196b0:	4558      	cmp	r0, fp
   196b2:	f47f aef5 	bne.w	194a0 <ull_conn_rx+0x11a0>
			    eff_rx_time == conn->lll.max_rx_time &&
   196b6:	45d4      	cmp	ip, sl
   196b8:	f47f aef2 	bne.w	194a0 <ull_conn_rx+0x11a0>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   196bc:	6832      	ldr	r2, [r6, #0]
   196be:	2501      	movs	r5, #1
   196c0:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   196c2:	e47d      	b.n	18fc0 <ull_conn_rx+0xcc0>
			conn->tx_data = conn->tx_data->next;
   196c4:	6818      	ldr	r0, [r3, #0]
   196c6:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   196ca:	2900      	cmp	r1, #0
   196cc:	f47f adb1 	bne.w	19232 <ull_conn_rx+0xf32>
			tx->next = conn->tx_head->next;
   196d0:	6819      	ldr	r1, [r3, #0]
   196d2:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   196d4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   196d6:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
   196da:	e5b1      	b.n	19240 <ull_conn_rx+0xf40>
			conn->tx_data = conn->tx_data->next;
   196dc:	681a      	ldr	r2, [r3, #0]
   196de:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   196e2:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   196e6:	2a00      	cmp	r2, #0
   196e8:	f47f aaf7 	bne.w	18cda <ull_conn_rx+0x9da>
			tx->next = conn->tx_head->next;
   196ec:	681a      	ldr	r2, [r3, #0]
   196ee:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   196f0:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   196f2:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   196f6:	f7ff baf7 	b.w	18ce8 <ull_conn_rx+0x9e8>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   196fa:	4a53      	ldr	r2, [pc, #332]	; (19848 <ull_conn_rx+0x1548>)
   196fc:	4953      	ldr	r1, [pc, #332]	; (1984c <ull_conn_rx+0x154c>)
   196fe:	4854      	ldr	r0, [pc, #336]	; (19850 <ull_conn_rx+0x1550>)
   19700:	f641 4322 	movw	r3, #7202	; 0x1c22
   19704:	f00c f9fe 	bl	25b04 <printk>
   19708:	4040      	eors	r0, r0
   1970a:	f380 8811 	msr	BASEPRI, r0
   1970e:	f04f 0003 	mov.w	r0, #3
   19712:	df02      	svc	2
   19714:	e71d      	b.n	19552 <ull_conn_rx+0x1252>
				     lll->interval) ||
   19716:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   1971a:	45b6      	cmp	lr, r6
   1971c:	d1b6      	bne.n	1968c <ull_conn_rx+0x138c>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1971e:	f240 46e2 	movw	r6, #1250	; 0x4e2
   19722:	fb06 f707 	mul.w	r7, r6, r7
   19726:	f242 7610 	movw	r6, #10000	; 0x2710
   1972a:	fb06 760c 	mla	r6, r6, ip, r7
   1972e:	3e01      	subs	r6, #1
   19730:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   19734:	f8b4 70a6 	ldrh.w	r7, [r4, #166]	; 0xa6
   19738:	b2b6      	uxth	r6, r6
   1973a:	42b7      	cmp	r7, r6
   1973c:	d1a6      	bne.n	1968c <ull_conn_rx+0x138c>
				conn->llcp_conn_param.state =
   1973e:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
   19742:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   19746:	f042 0201 	orr.w	r2, r2, #1
   1974a:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1974e:	2201      	movs	r2, #1
   19750:	712a      	strb	r2, [r5, #4]
   19752:	e4dd      	b.n	19110 <ull_conn_rx+0xe10>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19754:	7919      	ldrb	r1, [r3, #4]
   19756:	f001 0103 	and.w	r1, r1, #3
   1975a:	2903      	cmp	r1, #3
   1975c:	d029      	beq.n	197b2 <ull_conn_rx+0x14b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1975e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   19762:	e566      	b.n	19232 <ull_conn_rx+0xf32>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19764:	791a      	ldrb	r2, [r3, #4]
   19766:	f002 0203 	and.w	r2, r2, #3
   1976a:	2a03      	cmp	r2, #3
   1976c:	d065      	beq.n	1983a <ull_conn_rx+0x153a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1976e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   19772:	f7ff bab2 	b.w	18cda <ull_conn_rx+0x9da>
			     lll->interval) ||
   19776:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   19778:	4567      	cmp	r7, ip
   1977a:	f47f acc2 	bne.w	19102 <ull_conn_rx+0xe02>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1977e:	f240 47e2 	movw	r7, #1250	; 0x4e2
   19782:	fb07 f606 	mul.w	r6, r7, r6
   19786:	f242 7710 	movw	r7, #10000	; 0x2710
   1978a:	fb07 6202 	mla	r2, r7, r2, r6
   1978e:	3a01      	subs	r2, #1
   19790:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   19794:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
   19798:	b292      	uxth	r2, r2
   1979a:	4296      	cmp	r6, r2
   1979c:	f47f acb1 	bne.w	19102 <ull_conn_rx+0xe02>
   197a0:	e7cd      	b.n	1973e <ull_conn_rx+0x143e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   197a2:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   197a6:	f011 0f06 	tst.w	r1, #6
   197aa:	f43f abc9 	beq.w	18f40 <ull_conn_rx+0xc40>
   197ae:	f7fe bede 	b.w	1856e <ull_conn_rx+0x26e>
	    ((pdu_data_tx->llctrl.opcode !=
   197b2:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197b4:	2903      	cmp	r1, #3
   197b6:	d08b      	beq.n	196d0 <ull_conn_rx+0x13d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   197b8:	290a      	cmp	r1, #10
   197ba:	d1d0      	bne.n	1975e <ull_conn_rx+0x145e>
   197bc:	e788      	b.n	196d0 <ull_conn_rx+0x13d0>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   197be:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   197c2:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   197c6:	429a      	cmp	r2, r3
   197c8:	d00e      	beq.n	197e8 <ull_conn_rx+0x14e8>
   197ca:	4a1f      	ldr	r2, [pc, #124]	; (19848 <ull_conn_rx+0x1548>)
   197cc:	4921      	ldr	r1, [pc, #132]	; (19854 <ull_conn_rx+0x1554>)
   197ce:	4820      	ldr	r0, [pc, #128]	; (19850 <ull_conn_rx+0x1550>)
   197d0:	f241 43af 	movw	r3, #5295	; 0x14af
   197d4:	f00c f996 	bl	25b04 <printk>
   197d8:	4040      	eors	r0, r0
   197da:	f380 8811 	msr	BASEPRI, r0
   197de:	f04f 0003 	mov.w	r0, #3
   197e2:	df02      	svc	2
   197e4:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   197e8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   197ec:	2106      	movs	r1, #6
   197ee:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   197f2:	3b01      	subs	r3, #1
   197f4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   197f8:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   197fc:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19800:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.win_size = 1U;
   19804:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19806:	00db      	lsls	r3, r3, #3
   19808:	430b      	orrs	r3, r1
   1980a:	f022 020f 	bic.w	r2, r2, #15
   1980e:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   19810:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   19814:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   19818:	f8b4 1162 	ldrh.w	r1, [r4, #354]	; 0x162
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1981c:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   19820:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   19822:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
		conn->llcp_cu.win_offset_us = 0U;
   19826:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1982a:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1982e:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   19832:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	if (err) {
   19836:	f7fe bdb0 	b.w	1839a <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   1983a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1983c:	2a03      	cmp	r2, #3
   1983e:	f43f af55 	beq.w	196ec <ull_conn_rx+0x13ec>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19842:	2a0a      	cmp	r2, #10
   19844:	d193      	bne.n	1976e <ull_conn_rx+0x146e>
   19846:	e751      	b.n	196ec <ull_conn_rx+0x13ec>
   19848:	0002cfb4 	.word	0x0002cfb4
   1984c:	0002cb8c 	.word	0x0002cb8c
   19850:	0002c8dc 	.word	0x0002c8dc
   19854:	0002d0a8 	.word	0x0002d0a8

00019858 <ull_conn_tx_demux>:
{
   19858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1985c:	4c24      	ldr	r4, [pc, #144]	; (198f0 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1985e:	4f25      	ldr	r7, [pc, #148]	; (198f4 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   19860:	78e2      	ldrb	r2, [r4, #3]
{
   19862:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   19864:	1d26      	adds	r6, r4, #4
   19866:	e021      	b.n	198ac <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19868:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1986c:	4638      	mov	r0, r7
   1986e:	f7f8 fd1b 	bl	122a8 <mem_get>
	if (conn->lll.handle != handle) {
   19872:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   19874:	bb2a      	cbnz	r2, 198c2 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   19876:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1987a:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
   1987e:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   19880:	b351      	cbz	r1, 198d8 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   19882:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
   19886:	b102      	cbz	r2, 1988a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   19888:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1988a:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
   1988e:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   19890:	78a3      	ldrb	r3, [r4, #2]
   19892:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   19894:	429a      	cmp	r2, r3
   19896:	d005      	beq.n	198a4 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   19898:	3301      	adds	r3, #1
   1989a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1989c:	4299      	cmp	r1, r3
   1989e:	bf08      	it	eq
   198a0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   198a2:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   198a4:	3d01      	subs	r5, #1
   198a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   198aa:	d01e      	beq.n	198ea <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   198ac:	78a3      	ldrb	r3, [r4, #2]
   198ae:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   198b0:	4293      	cmp	r3, r2
   198b2:	d01a      	beq.n	198ea <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   198b4:	fb13 f301 	smulbb	r3, r3, r1
   198b8:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   198bc:	5af2      	ldrh	r2, [r6, r3]
   198be:	2a00      	cmp	r2, #0
   198c0:	d0d2      	beq.n	19868 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   198c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   198c6:	790b      	ldrb	r3, [r1, #4]
   198c8:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   198cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   198d0:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   198d2:	f7fc fc7b 	bl	161cc <ll_tx_ack_put>
   198d6:	e7da      	b.n	1988e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   198d8:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
   198dc:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
   198e0:	2a00      	cmp	r2, #0
   198e2:	d1ce      	bne.n	19882 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   198e4:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
   198e8:	e7cf      	b.n	1988a <ull_conn_tx_demux+0x32>
}
   198ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198ee:	bf00      	nop
   198f0:	20000640 	.word	0x20000640
   198f4:	20003408 	.word	0x20003408

000198f8 <conn_cleanup_finalize>:
{
   198f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   198fc:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
{
   19900:	b082      	sub	sp, #8
   19902:	4606      	mov	r6, r0
	while (rx) {
   19904:	b144      	cbz	r4, 19918 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   19906:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   19908:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1990a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1990c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1990e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   19910:	f7fc fc18 	bl	16144 <ll_rx_put>
	while (rx) {
   19914:	2c00      	cmp	r4, #0
   19916:	d1f7      	bne.n	19908 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   19918:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1991c:	b381      	cbz	r1, 19980 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1991e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 199c4 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   19922:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 199c8 <conn_cleanup_finalize+0xd0>
   19926:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 199cc <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1992a:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   1992e:	e007      	b.n	19940 <conn_cleanup_finalize+0x48>
   19930:	4629      	mov	r1, r5
   19932:	463a      	mov	r2, r7
   19934:	4620      	mov	r0, r4
   19936:	f7f8 fce9 	bl	1230c <memq_enqueue>
	while (conn->tx_head) {
   1993a:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1993e:	b1f9      	cbz	r1, 19980 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19940:	4630      	mov	r0, r6
   19942:	f7fe f801 	bl	17948 <tx_ull_dequeue>
   19946:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   19948:	4640      	mov	r0, r8
   1994a:	f7f8 fc7b 	bl	12244 <mem_acquire>
		LL_ASSERT(link);
   1994e:	4604      	mov	r4, r0
   19950:	2800      	cmp	r0, #0
   19952:	d1ed      	bne.n	19930 <conn_cleanup_finalize+0x38>
   19954:	481e      	ldr	r0, [pc, #120]	; (199d0 <conn_cleanup_finalize+0xd8>)
   19956:	f640 135e 	movw	r3, #2398	; 0x95e
   1995a:	4652      	mov	r2, sl
   1995c:	4649      	mov	r1, r9
   1995e:	f00c f8d1 	bl	25b04 <printk>
   19962:	4040      	eors	r0, r0
   19964:	f380 8811 	msr	BASEPRI, r0
   19968:	f04f 0003 	mov.w	r0, #3
   1996c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1996e:	4629      	mov	r1, r5
   19970:	463a      	mov	r2, r7
   19972:	4620      	mov	r0, r4
   19974:	f7f8 fcca 	bl	1230c <memq_enqueue>
	while (conn->tx_head) {
   19978:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1997c:	2900      	cmp	r1, #0
   1997e:	d1df      	bne.n	19940 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19980:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   19982:	4b14      	ldr	r3, [pc, #80]	; (199d4 <conn_cleanup_finalize+0xdc>)
   19984:	9600      	str	r6, [sp, #0]
   19986:	3205      	adds	r2, #5
   19988:	b2d2      	uxtb	r2, r2
   1998a:	2101      	movs	r1, #1
   1998c:	2000      	movs	r0, #0
   1998e:	f7f9 ff87 	bl	138a0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19992:	f030 0302 	bics.w	r3, r0, #2
   19996:	d00c      	beq.n	199b2 <conn_cleanup_finalize+0xba>
   19998:	4a0b      	ldr	r2, [pc, #44]	; (199c8 <conn_cleanup_finalize+0xd0>)
   1999a:	490f      	ldr	r1, [pc, #60]	; (199d8 <conn_cleanup_finalize+0xe0>)
   1999c:	480c      	ldr	r0, [pc, #48]	; (199d0 <conn_cleanup_finalize+0xd8>)
   1999e:	f640 1323 	movw	r3, #2339	; 0x923
   199a2:	f00c f8af 	bl	25b04 <printk>
   199a6:	4040      	eors	r0, r0
   199a8:	f380 8811 	msr	BASEPRI, r0
   199ac:	f04f 0003 	mov.w	r0, #3
   199b0:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   199b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   199b6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   199b8:	8533      	strh	r3, [r6, #40]	; 0x28
}
   199ba:	b002      	add	sp, #8
   199bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   199c0:	f7ff bf4a 	b.w	19858 <ull_conn_tx_demux>
   199c4:	20004b48 	.word	0x20004b48
   199c8:	0002cfb4 	.word	0x0002cfb4
   199cc:	0002d00c 	.word	0x0002d00c
   199d0:	0002c8dc 	.word	0x0002c8dc
   199d4:	000176f5 	.word	0x000176f5
   199d8:	0002d0d0 	.word	0x0002d0d0

000199dc <ull_conn_done>:
{
   199dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   199de:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   199e0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   199e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   199e6:	4299      	cmp	r1, r3
{
   199e8:	b089      	sub	sp, #36	; 0x24
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   199ea:	d054      	beq.n	19a96 <ull_conn_done+0xba>
	switch (done->extra.mic_state) {
   199ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   199f0:	2b01      	cmp	r3, #1
   199f2:	f000 80e0 	beq.w	19bb6 <ull_conn_done+0x1da>
   199f6:	2b02      	cmp	r3, #2
   199f8:	d04f      	beq.n	19a9a <ull_conn_done+0xbe>
   199fa:	2b00      	cmp	r3, #0
   199fc:	f000 80c1 	beq.w	19b82 <ull_conn_done+0x1a6>
	reason_final = conn->llcp_terminate.reason_final;
   19a00:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
	if (reason_final && (
   19a04:	2b00      	cmp	r3, #0
   19a06:	d14b      	bne.n	19aa0 <ull_conn_done+0xc4>
	latency_event = lll->latency_event;
   19a08:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   19a0a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   19a0c:	1c77      	adds	r7, r6, #1
   19a0e:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   19a10:	2b00      	cmp	r3, #0
   19a12:	d15d      	bne.n	19ad0 <ull_conn_done+0xf4>
	if (done->extra.crc_valid) {
   19a14:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   19a18:	f013 0301 	ands.w	r3, r3, #1
   19a1c:	f000 80d1 	beq.w	19bc2 <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
   19a20:	2500      	movs	r5, #0
   19a22:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
   19a26:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   19a2a:	b12b      	cbz	r3, 19a38 <ull_conn_done+0x5c>
		if (conn->procedure_expire > elapsed_event) {
   19a2c:	429f      	cmp	r7, r3
   19a2e:	f080 810f 	bcs.w	19c50 <ull_conn_done+0x274>
			conn->procedure_expire -= elapsed_event;
   19a32:	1bdb      	subs	r3, r3, r7
   19a34:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
   19a38:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
   19a3c:	b12b      	cbz	r3, 19a4a <ull_conn_done+0x6e>
		if (conn->apto_expire > elapsed_event) {
   19a3e:	429f      	cmp	r7, r3
   19a40:	f080 80e1 	bcs.w	19c06 <ull_conn_done+0x22a>
			conn->apto_expire -= elapsed_event;
   19a44:	1bdb      	subs	r3, r3, r7
   19a46:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
   19a4a:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
			    (conn->llcp_req == conn->llcp_ack)) {
   19a4e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   19a52:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
	if (conn->appto_expire != 0U) {
   19a56:	b15a      	cbz	r2, 19a70 <ull_conn_done+0x94>
		if (conn->appto_expire > elapsed_event) {
   19a58:	4297      	cmp	r7, r2
   19a5a:	f0c0 80be 	bcc.w	19bda <ull_conn_done+0x1fe>
			if ((conn->procedure_expire == 0U) &&
   19a5e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
   19a62:	2000      	movs	r0, #0
   19a64:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
   19a68:	b912      	cbnz	r2, 19a70 <ull_conn_done+0x94>
   19a6a:	428b      	cmp	r3, r1
   19a6c:	f000 80fd 	beq.w	19c6a <ull_conn_done+0x28e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19a70:	1a5b      	subs	r3, r3, r1
   19a72:	f003 0303 	and.w	r3, r3, #3
   19a76:	2b02      	cmp	r3, #2
   19a78:	f000 80b8 	beq.w	19bec <ull_conn_done+0x210>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   19a7c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   19a80:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   19a84:	429a      	cmp	r2, r3
   19a86:	f000 80cf 	beq.w	19c28 <ull_conn_done+0x24c>
		lll->latency_event = 0U;
   19a8a:	2300      	movs	r3, #0
   19a8c:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   19a8e:	2d00      	cmp	r5, #0
   19a90:	d13d      	bne.n	19b0e <ull_conn_done+0x132>
   19a92:	2e00      	cmp	r6, #0
   19a94:	d13b      	bne.n	19b0e <ull_conn_done+0x132>
}
   19a96:	b009      	add	sp, #36	; 0x24
   19a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   19a9a:	233d      	movs	r3, #61	; 0x3d
   19a9c:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
			       conn->llcp_terminate.ack) & 0xFF) ==
   19aa0:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   19aa4:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
   19aa8:	1b52      	subs	r2, r2, r5
	if (reason_final && (
   19aaa:	b2d2      	uxtb	r2, r2
   19aac:	2a03      	cmp	r2, #3
   19aae:	d055      	beq.n	19b5c <ull_conn_done+0x180>
			     TERM_ACKED) ||
   19ab0:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
   19ab4:	0755      	lsls	r5, r2, #29
   19ab6:	d451      	bmi.n	19b5c <ull_conn_done+0x180>
			    conn->central.terminate_ack ||
   19ab8:	2b3d      	cmp	r3, #61	; 0x3d
   19aba:	d04f      	beq.n	19b5c <ull_conn_done+0x180>
	latency_event = lll->latency_event;
   19abc:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   19abe:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   19ac0:	1c77      	adds	r7, r6, #1
   19ac2:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   19ac4:	2b00      	cmp	r3, #0
   19ac6:	d0a5      	beq.n	19a14 <ull_conn_done+0x38>
			conn->central.terminate_ack = 1;
   19ac8:	f042 0204 	orr.w	r2, r2, #4
   19acc:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
   19ad0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
   19ad4:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   19ad6:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   19ad8:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
   19adc:	d4a0      	bmi.n	19a20 <ull_conn_done+0x44>
		if (!conn->supervision_expire) {
   19ade:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
   19ae2:	b92d      	cbnz	r5, 19af0 <ull_conn_done+0x114>
			conn->supervision_expire = conn->supervision_reload;
   19ae4:	f8b4 50a6 	ldrh.w	r5, [r4, #166]	; 0xa6
   19ae8:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
   19aec:	2d00      	cmp	r5, #0
   19aee:	d09a      	beq.n	19a26 <ull_conn_done+0x4a>
		if (conn->supervision_expire > elapsed_event) {
   19af0:	42bd      	cmp	r5, r7
   19af2:	f240 80a4 	bls.w	19c3e <ull_conn_done+0x262>
			conn->supervision_expire -= elapsed_event;
   19af6:	1bed      	subs	r5, r5, r7
   19af8:	b2ad      	uxth	r5, r5
	force = 0U;
   19afa:	2d06      	cmp	r5, #6
			lll->latency_event = 0U;
   19afc:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
   19b00:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
			lll->latency_event = 0U;
   19b04:	8623      	strh	r3, [r4, #48]	; 0x30
	force = 0U;
   19b06:	bf8c      	ite	hi
   19b08:	2500      	movhi	r5, #0
   19b0a:	2501      	movls	r5, #1
   19b0c:	e78b      	b.n	19a26 <ull_conn_done+0x4a>
		lazy = lll->latency_event + 1U;
   19b0e:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19b10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b12:	4b62      	ldr	r3, [pc, #392]	; (19c9c <ull_conn_done+0x2c0>)
		struct ll_conn *conn = lll->hdr.parent;
   19b14:	69e4      	ldr	r4, [r4, #28]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19b16:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b18:	e9cd 3405 	strd	r3, r4, [sp, #20]
   19b1c:	2300      	movs	r3, #0
   19b1e:	e9cd 1503 	strd	r1, r5, [sp, #12]
   19b22:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19b26:	9300      	str	r3, [sp, #0]
   19b28:	4618      	mov	r0, r3
   19b2a:	b2d2      	uxtb	r2, r2
   19b2c:	2101      	movs	r1, #1
   19b2e:	f7f9 fe9f 	bl	13870 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19b32:	f030 0302 	bics.w	r3, r0, #2
   19b36:	d0ae      	beq.n	19a96 <ull_conn_done+0xba>
   19b38:	f7fc fbba 	bl	162b0 <ull_disable_mark_get>
   19b3c:	4284      	cmp	r4, r0
   19b3e:	d0aa      	beq.n	19a96 <ull_conn_done+0xba>
   19b40:	4a57      	ldr	r2, [pc, #348]	; (19ca0 <ull_conn_done+0x2c4>)
   19b42:	4958      	ldr	r1, [pc, #352]	; (19ca4 <ull_conn_done+0x2c8>)
   19b44:	4858      	ldr	r0, [pc, #352]	; (19ca8 <ull_conn_done+0x2cc>)
   19b46:	f240 63cd 	movw	r3, #1741	; 0x6cd
   19b4a:	f00b ffdb 	bl	25b04 <printk>
   19b4e:	4040      	eors	r0, r0
   19b50:	f380 8811 	msr	BASEPRI, r0
   19b54:	f04f 0003 	mov.w	r0, #3
   19b58:	df02      	svc	2
   19b5a:	e79c      	b.n	19a96 <ull_conn_done+0xba>
	if (conn == conn_upd_curr) {
   19b5c:	4a53      	ldr	r2, [pc, #332]	; (19cac <ull_conn_done+0x2d0>)
   19b5e:	6810      	ldr	r0, [r2, #0]
   19b60:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   19b62:	bf04      	itt	eq
   19b64:	2000      	moveq	r0, #0
   19b66:	6010      	streq	r0, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19b68:	2217      	movs	r2, #23
	conn_cleanup_finalize(conn);
   19b6a:	4620      	mov	r0, r4
	rx->hdr.handle = conn->lll.handle;
   19b6c:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19b70:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	*((uint8_t *)rx->pdu) = reason;
   19b74:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
}
   19b78:	b009      	add	sp, #36	; 0x24
   19b7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   19b7e:	f7ff bebb 	b.w	198f8 <conn_cleanup_finalize>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   19b82:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   19b86:	071f      	lsls	r7, r3, #28
   19b88:	d537      	bpl.n	19bfa <ull_conn_done+0x21e>
					    (lll->latency + 6)) ?
   19b8a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   19b8c:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
   19b90:	1dab      	adds	r3, r5, #6
			appto_reload_new = (conn->apto_reload >
   19b92:	429a      	cmp	r2, r3
   19b94:	bfc4      	itt	gt
   19b96:	1f93      	subgt	r3, r2, #6
   19b98:	1b5b      	subgt	r3, r3, r5
			if (conn->appto_reload != appto_reload_new) {
   19b9a:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
   19b9e:	bfcc      	ite	gt
   19ba0:	b29b      	uxthgt	r3, r3
   19ba2:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   19ba4:	429d      	cmp	r5, r3
   19ba6:	d044      	beq.n	19c32 <ull_conn_done+0x256>
				conn->appto_reload = appto_reload_new;
   19ba8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
   19bac:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
   19bb0:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
   19bb4:	e724      	b.n	19a00 <ull_conn_done+0x24>
		conn->appto_expire = conn->apto_expire = 0U;
   19bb6:	2300      	movs	r3, #0
   19bb8:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   19bbc:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
   19bc0:	e71e      	b.n	19a00 <ull_conn_done+0x24>
	else if (conn->connect_expire) {
   19bc2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19bc6:	2a00      	cmp	r2, #0
   19bc8:	d089      	beq.n	19ade <ull_conn_done+0x102>
		if (conn->connect_expire > elapsed_event) {
   19bca:	42ba      	cmp	r2, r7
   19bcc:	d954      	bls.n	19c78 <ull_conn_done+0x29c>
			conn->connect_expire -= elapsed_event;
   19bce:	1bd2      	subs	r2, r2, r7
	if (conn->supervision_expire) {
   19bd0:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
			conn->connect_expire -= elapsed_event;
   19bd4:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   19bd8:	e788      	b.n	19aec <ull_conn_done+0x110>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19bda:	1a5b      	subs	r3, r3, r1
   19bdc:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   19be0:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19be2:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   19be4:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19be8:	f47f af48 	bne.w	19a7c <ull_conn_done+0xa0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   19bec:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19bf0:	3b01      	subs	r3, #1
   19bf2:	2b01      	cmp	r3, #1
   19bf4:	f63f af42 	bhi.w	19a7c <ull_conn_done+0xa0>
   19bf8:	e747      	b.n	19a8a <ull_conn_done+0xae>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   19bfa:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   19bfe:	07de      	lsls	r6, r3, #31
   19c00:	f57f aefe 	bpl.w	19a00 <ull_conn_done+0x24>
   19c04:	e7c1      	b.n	19b8a <ull_conn_done+0x1ae>
			rx = ll_pdu_rx_alloc();
   19c06:	f7fc facb 	bl	161a0 <ll_pdu_rx_alloc>
			if (rx) {
   19c0a:	4601      	mov	r1, r0
   19c0c:	b348      	cbz	r0, 19c62 <ull_conn_done+0x286>
				rx->handle = lll->handle;
   19c0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   19c10:	2200      	movs	r2, #0
   19c12:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
				rx->handle = lll->handle;
   19c16:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   19c18:	231a      	movs	r3, #26
   19c1a:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   19c1c:	6800      	ldr	r0, [r0, #0]
   19c1e:	f7fc fa91 	bl	16144 <ll_rx_put>
				ll_rx_sched();
   19c22:	f7fc fa99 	bl	16158 <ll_rx_sched>
   19c26:	e710      	b.n	19a4a <ull_conn_done+0x6e>
	if ((force) || (latency_event != lll->latency_event)) {
   19c28:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   19c2a:	b36d      	cbz	r5, 19c88 <ull_conn_done+0x2ac>
		lazy = lll->latency_event + 1U;
   19c2c:	3101      	adds	r1, #1
   19c2e:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19c30:	e76e      	b.n	19b10 <ull_conn_done+0x134>
			if (conn->apto_expire == 0U) {
   19c32:	f8b4 50b4 	ldrh.w	r5, [r4, #180]	; 0xb4
   19c36:	2d00      	cmp	r5, #0
   19c38:	f47f aee2 	bne.w	19a00 <ull_conn_done+0x24>
   19c3c:	e7b6      	b.n	19bac <ull_conn_done+0x1d0>
	if (conn == conn_upd_curr) {
   19c3e:	4b1b      	ldr	r3, [pc, #108]	; (19cac <ull_conn_done+0x2d0>)
   19c40:	681a      	ldr	r2, [r3, #0]
   19c42:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   19c44:	bf04      	itt	eq
   19c46:	2200      	moveq	r2, #0
   19c48:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19c4a:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   19c4c:	2308      	movs	r3, #8
   19c4e:	e78c      	b.n	19b6a <ull_conn_done+0x18e>
	if (conn == conn_upd_curr) {
   19c50:	4b16      	ldr	r3, [pc, #88]	; (19cac <ull_conn_done+0x2d0>)
   19c52:	681a      	ldr	r2, [r3, #0]
   19c54:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   19c56:	bf04      	itt	eq
   19c58:	2200      	moveq	r2, #0
   19c5a:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19c5c:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   19c5e:	2322      	movs	r3, #34	; 0x22
   19c60:	e783      	b.n	19b6a <ull_conn_done+0x18e>
				conn->apto_expire = 1U;
   19c62:	2301      	movs	r3, #1
   19c64:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   19c68:	e6ef      	b.n	19a4a <ull_conn_done+0x6e>
				conn->llcp_type = LLCP_PING;
   19c6a:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   19c6c:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   19c6e:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
				conn->llcp_ack -= 2U;
   19c72:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19c76:	e701      	b.n	19a7c <ull_conn_done+0xa0>
	if (conn == conn_upd_curr) {
   19c78:	4a0c      	ldr	r2, [pc, #48]	; (19cac <ull_conn_done+0x2d0>)
   19c7a:	6810      	ldr	r0, [r2, #0]
   19c7c:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   19c7e:	bf08      	it	eq
   19c80:	6013      	streq	r3, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19c82:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   19c84:	233e      	movs	r3, #62	; 0x3e
   19c86:	e770      	b.n	19b6a <ull_conn_done+0x18e>
	if ((force) || (latency_event != lll->latency_event)) {
   19c88:	42b1      	cmp	r1, r6
   19c8a:	f43f af04 	beq.w	19a96 <ull_conn_done+0xba>
		lazy = lll->latency_event + 1U;
   19c8e:	3101      	adds	r1, #1
   19c90:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19c92:	2900      	cmp	r1, #0
   19c94:	f43f aeff 	beq.w	19a96 <ull_conn_done+0xba>
   19c98:	e73a      	b.n	19b10 <ull_conn_done+0x134>
   19c9a:	bf00      	nop
   19c9c:	00017909 	.word	0x00017909
   19ca0:	0002cfb4 	.word	0x0002cfb4
   19ca4:	0002d100 	.word	0x0002d100
   19ca8:	0002c8dc 	.word	0x0002c8dc
   19cac:	20004a00 	.word	0x20004a00

00019cb0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   19cb0:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   19cb4:	2b00      	cmp	r3, #0
   19cb6:	f000 80e5 	beq.w	19e84 <ull_conn_tx_lll_enqueue+0x1d4>
   19cba:	3901      	subs	r1, #1
{
   19cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   19cc0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 19e88 <ull_conn_tx_lll_enqueue+0x1d8>
		LL_ASSERT(link);
   19cc4:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 19e8c <ull_conn_tx_lll_enqueue+0x1dc>
   19cc8:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 19e90 <ull_conn_tx_lll_enqueue+0x1e0>
   19ccc:	4604      	mov	r4, r0
   19cce:	b2cd      	uxtb	r5, r1
   19cd0:	e012      	b.n	19cf8 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   19cd2:	4640      	mov	r0, r8
   19cd4:	f7f8 fab6 	bl	12244 <mem_acquire>
		LL_ASSERT(link);
   19cd8:	4607      	mov	r7, r0
   19cda:	2800      	cmp	r0, #0
   19cdc:	d064      	beq.n	19da8 <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   19cde:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   19ce2:	4631      	mov	r1, r6
   19ce4:	4638      	mov	r0, r7
   19ce6:	f7f8 fb11 	bl	1230c <memq_enqueue>
	while (conn->tx_head &&
   19cea:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   19cee:	3d01      	subs	r5, #1
   19cf0:	b2ed      	uxtb	r5, r5
   19cf2:	2b00      	cmp	r3, #0
   19cf4:	f000 8080 	beq.w	19df8 <ull_conn_tx_lll_enqueue+0x148>
		 !conn->llcp_phy.pause_tx &&
   19cf8:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
   19cfc:	07d1      	lsls	r1, r2, #31
   19cfe:	d403      	bmi.n	19d08 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   19d00:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
   19d04:	0792      	lsls	r2, r2, #30
   19d06:	d55d      	bpl.n	19dc4 <ull_conn_tx_lll_enqueue+0x114>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   19d08:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   19d0c:	4293      	cmp	r3, r2
   19d0e:	d173      	bne.n	19df8 <ull_conn_tx_lll_enqueue+0x148>
   19d10:	2dff      	cmp	r5, #255	; 0xff
   19d12:	d071      	beq.n	19df8 <ull_conn_tx_lll_enqueue+0x148>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19d14:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   19d18:	4620      	mov	r0, r4
   19d1a:	f7fd fe15 	bl	17948 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19d1e:	7903      	ldrb	r3, [r0, #4]
   19d20:	f003 0303 	and.w	r3, r3, #3
   19d24:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19d26:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19d28:	d1d3      	bne.n	19cd2 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   19d2a:	79c3      	ldrb	r3, [r0, #7]
   19d2c:	3b03      	subs	r3, #3
   19d2e:	2b13      	cmp	r3, #19
   19d30:	d8cf      	bhi.n	19cd2 <ull_conn_tx_lll_enqueue+0x22>
   19d32:	a201      	add	r2, pc, #4	; (adr r2, 19d38 <ull_conn_tx_lll_enqueue+0x88>)
   19d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19d38:	00019d91 	.word	0x00019d91
   19d3c:	00019cd3 	.word	0x00019cd3
   19d40:	00019cd3 	.word	0x00019cd3
   19d44:	00019cd3 	.word	0x00019cd3
   19d48:	00019cd3 	.word	0x00019cd3
   19d4c:	00019cd3 	.word	0x00019cd3
   19d50:	00019cd3 	.word	0x00019cd3
   19d54:	00019d91 	.word	0x00019d91
   19d58:	00019d89 	.word	0x00019d89
   19d5c:	00019cd3 	.word	0x00019cd3
   19d60:	00019cd3 	.word	0x00019cd3
   19d64:	00019cd3 	.word	0x00019cd3
   19d68:	00019cd3 	.word	0x00019cd3
   19d6c:	00019cd3 	.word	0x00019cd3
   19d70:	00019cd3 	.word	0x00019cd3
   19d74:	00019cd3 	.word	0x00019cd3
   19d78:	00019cd3 	.word	0x00019cd3
   19d7c:	00019cd3 	.word	0x00019cd3
   19d80:	00019cd3 	.word	0x00019cd3
   19d84:	00019dfd 	.word	0x00019dfd
		if (!conn->lll.role) {
   19d88:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	daa0      	bge.n	19cd2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   19d90:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   19d94:	f043 0302 	orr.w	r3, r3, #2
   19d98:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
   19d9c:	4640      	mov	r0, r8
   19d9e:	f7f8 fa51 	bl	12244 <mem_acquire>
		LL_ASSERT(link);
   19da2:	4607      	mov	r7, r0
   19da4:	2800      	cmp	r0, #0
   19da6:	d19a      	bne.n	19cde <ull_conn_tx_lll_enqueue+0x2e>
   19da8:	483a      	ldr	r0, [pc, #232]	; (19e94 <ull_conn_tx_lll_enqueue+0x1e4>)
   19daa:	f240 7326 	movw	r3, #1830	; 0x726
   19dae:	4652      	mov	r2, sl
   19db0:	4649      	mov	r1, r9
   19db2:	f00b fea7 	bl	25b04 <printk>
   19db6:	4040      	eors	r0, r0
   19db8:	f380 8811 	msr	BASEPRI, r0
   19dbc:	f04f 0003 	mov.w	r0, #3
   19dc0:	df02      	svc	2
   19dc2:	e78c      	b.n	19cde <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19dc4:	791a      	ldrb	r2, [r3, #4]
   19dc6:	f002 0203 	and.w	r2, r2, #3
   19dca:	2a03      	cmp	r2, #3
   19dcc:	d1a0      	bne.n	19d10 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   19dce:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19dd0:	2a03      	cmp	r2, #3
   19dd2:	d001      	beq.n	19dd8 <ull_conn_tx_lll_enqueue+0x128>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   19dd4:	2a0a      	cmp	r2, #10
   19dd6:	d19b      	bne.n	19d10 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   19dd8:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   19ddc:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   19de0:	428a      	cmp	r2, r1
   19de2:	d012      	beq.n	19e0a <ull_conn_tx_lll_enqueue+0x15a>
   19de4:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
   19de8:	2a03      	cmp	r2, #3
   19dea:	d091      	beq.n	19d10 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   19dec:	681a      	ldr	r2, [r3, #0]
   19dee:	b11a      	cbz	r2, 19df8 <ull_conn_tx_lll_enqueue+0x148>
   19df0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   19df4:	428a      	cmp	r2, r1
   19df6:	d034      	beq.n	19e62 <ull_conn_tx_lll_enqueue+0x1b2>
}
   19df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   19dfc:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   19e00:	f043 0301 	orr.w	r3, r3, #1
   19e04:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
   19e08:	e763      	b.n	19cd2 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   19e0a:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
   19e0e:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   19e12:	4288      	cmp	r0, r1
   19e14:	d1ea      	bne.n	19dec <ull_conn_tx_lll_enqueue+0x13c>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   19e16:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
   19e1a:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
   19e1e:	4288      	cmp	r0, r1
   19e20:	d1e4      	bne.n	19dec <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   19e22:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
   19e26:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
   19e2a:	4288      	cmp	r0, r1
   19e2c:	d1de      	bne.n	19dec <ull_conn_tx_lll_enqueue+0x13c>
		       conn->llcp_conn_param.req) ||
   19e2e:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   19e32:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   19e36:	4288      	cmp	r0, r1
   19e38:	d1d8      	bne.n	19dec <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   19e3a:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   19e3e:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   19e42:	4288      	cmp	r0, r1
   19e44:	d1d2      	bne.n	19dec <ull_conn_tx_lll_enqueue+0x13c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19e46:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_ack -= 2U;
   19e4a:	3a02      	subs	r2, #2
   19e4c:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19e50:	2201      	movs	r2, #1
   19e52:	f362 0301 	bfi	r3, r2, #0, #2
   19e56:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
   19e5a:	2303      	movs	r3, #3
   19e5c:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   19e60:	e756      	b.n	19d10 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   19e62:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
   19e66:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
   19e6a:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				tx->next = conn->tx_ctrl_last->next;
   19e6e:	6810      	ldr	r0, [r2, #0]
   19e70:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   19e72:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   19e74:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
   19e78:	2900      	cmp	r1, #0
   19e7a:	f47f af49 	bne.w	19d10 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   19e7e:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   19e82:	e745      	b.n	19d10 <ull_conn_tx_lll_enqueue+0x60>
   19e84:	4770      	bx	lr
   19e86:	bf00      	nop
   19e88:	20004b48 	.word	0x20004b48
   19e8c:	0002cfb4 	.word	0x0002cfb4
   19e90:	0002d00c 	.word	0x0002d00c
   19e94:	0002c8dc 	.word	0x0002c8dc

00019e98 <tx_demux>:
{
   19e98:	b510      	push	{r4, lr}
   19e9a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   19e9c:	2001      	movs	r0, #1
   19e9e:	f7ff fcdb 	bl	19858 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   19ea2:	4620      	mov	r0, r4
   19ea4:	2101      	movs	r1, #1
}
   19ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   19eaa:	f7ff bf01 	b.w	19cb0 <ull_conn_tx_lll_enqueue>
   19eae:	bf00      	nop

00019eb0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   19eb0:	4901      	ldr	r1, [pc, #4]	; (19eb8 <ull_conn_link_tx_release+0x8>)
   19eb2:	f7f8 b9e1 	b.w	12278 <mem_release>
   19eb6:	bf00      	nop
   19eb8:	20004b48 	.word	0x20004b48

00019ebc <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   19ebc:	4b01      	ldr	r3, [pc, #4]	; (19ec4 <ull_conn_ack_last_idx_get+0x8>)
}
   19ebe:	78d8      	ldrb	r0, [r3, #3]
   19ec0:	4770      	bx	lr
   19ec2:	bf00      	nop
   19ec4:	200005fc 	.word	0x200005fc

00019ec8 <ull_conn_ack_peek>:
{
   19ec8:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   19eca:	4b0c      	ldr	r3, [pc, #48]	; (19efc <ull_conn_ack_peek+0x34>)
   19ecc:	f893 c002 	ldrb.w	ip, [r3, #2]
   19ed0:	f893 e003 	ldrb.w	lr, [r3, #3]
   19ed4:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   19ed6:	45f4      	cmp	ip, lr
   19ed8:	d00d      	beq.n	19ef6 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   19eda:	fb1c fc04 	smulbb	ip, ip, r4
   19ede:	3304      	adds	r3, #4
   19ee0:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   19ee4:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   19ee8:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   19eec:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   19eee:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   19ef0:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19ef2:	6818      	ldr	r0, [r3, #0]
}
   19ef4:	bd10      	pop	{r4, pc}
		return NULL;
   19ef6:	2000      	movs	r0, #0
}
   19ef8:	bd10      	pop	{r4, pc}
   19efa:	bf00      	nop
   19efc:	200005fc 	.word	0x200005fc

00019f00 <ull_conn_ack_by_last_peek>:
{
   19f00:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   19f02:	4b0b      	ldr	r3, [pc, #44]	; (19f30 <ull_conn_ack_by_last_peek+0x30>)
   19f04:	f893 c002 	ldrb.w	ip, [r3, #2]
   19f08:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   19f0c:	4584      	cmp	ip, r0
   19f0e:	d00d      	beq.n	19f2c <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   19f10:	3304      	adds	r3, #4
   19f12:	fb1c fc0e 	smulbb	ip, ip, lr
   19f16:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   19f1a:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   19f1e:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   19f22:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   19f24:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19f26:	6818      	ldr	r0, [r3, #0]
}
   19f28:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   19f2c:	2000      	movs	r0, #0
   19f2e:	e7fb      	b.n	19f28 <ull_conn_ack_by_last_peek+0x28>
   19f30:	200005fc 	.word	0x200005fc

00019f34 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   19f34:	4b09      	ldr	r3, [pc, #36]	; (19f5c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   19f36:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   19f38:	78da      	ldrb	r2, [r3, #3]
   19f3a:	7818      	ldrb	r0, [r3, #0]
   19f3c:	f893 c001 	ldrb.w	ip, [r3, #1]
   19f40:	428a      	cmp	r2, r1
   19f42:	d009      	beq.n	19f58 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   19f44:	1c4a      	adds	r2, r1, #1
   19f46:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   19f48:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   19f4c:	4594      	cmp	ip, r2
   19f4e:	bf08      	it	eq
   19f50:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   19f52:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   19f54:	709a      	strb	r2, [r3, #2]
	return mem;
   19f56:	4770      	bx	lr
		return NULL;
   19f58:	2000      	movs	r0, #0
}
   19f5a:	4770      	bx	lr
   19f5c:	200005fc 	.word	0x200005fc

00019f60 <ull_conn_lll_ack_enqueue>:
{
   19f60:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   19f62:	4a15      	ldr	r2, [pc, #84]	; (19fb8 <ull_conn_lll_ack_enqueue+0x58>)
   19f64:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   19f68:	7854      	ldrb	r4, [r2, #1]
   19f6a:	f892 e002 	ldrb.w	lr, [r2, #2]
   19f6e:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   19f70:	f10c 0301 	add.w	r3, ip, #1
   19f74:	b2db      	uxtb	r3, r3
		last = 0U;
   19f76:	429c      	cmp	r4, r3
   19f78:	bf08      	it	eq
   19f7a:	2300      	moveq	r3, #0
	if (last == first) {
   19f7c:	459e      	cmp	lr, r3
   19f7e:	d00a      	beq.n	19f96 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19f80:	fb1c fc05 	smulbb	ip, ip, r5
   19f84:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   19f88:	f82e 000c 	strh.w	r0, [lr, ip]
   19f8c:	44f4      	add	ip, lr
	lll_tx->node = tx;
   19f8e:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   19f92:	70d3      	strb	r3, [r2, #3]
}
   19f94:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   19f96:	4a09      	ldr	r2, [pc, #36]	; (19fbc <ull_conn_lll_ack_enqueue+0x5c>)
   19f98:	4909      	ldr	r1, [pc, #36]	; (19fc0 <ull_conn_lll_ack_enqueue+0x60>)
   19f9a:	480a      	ldr	r0, [pc, #40]	; (19fc4 <ull_conn_lll_ack_enqueue+0x64>)
   19f9c:	f240 7376 	movw	r3, #1910	; 0x776
   19fa0:	f00b fdb0 	bl	25b04 <printk>
   19fa4:	4040      	eors	r0, r0
   19fa6:	f380 8811 	msr	BASEPRI, r0
   19faa:	f04f 0003 	mov.w	r0, #3
   19fae:	df02      	svc	2
	lll_tx->handle = handle;
   19fb0:	2300      	movs	r3, #0
   19fb2:	801b      	strh	r3, [r3, #0]
   19fb4:	deff      	udf	#255	; 0xff
   19fb6:	bf00      	nop
   19fb8:	200005fc 	.word	0x200005fc
   19fbc:	0002cfb4 	.word	0x0002cfb4
   19fc0:	0002cffc 	.word	0x0002cffc
   19fc4:	0002c8dc 	.word	0x0002c8dc

00019fc8 <ull_conn_tx_ack>:
{
   19fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   19fca:	7953      	ldrb	r3, [r2, #5]
{
   19fcc:	4614      	mov	r4, r2
   19fce:	4605      	mov	r5, r0
   19fd0:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   19fd2:	b36b      	cbz	r3, 1a030 <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19fd4:	7923      	ldrb	r3, [r4, #4]
   19fd6:	f003 0203 	and.w	r2, r3, #3
   19fda:	2a03      	cmp	r2, #3
   19fdc:	d00c      	beq.n	19ff8 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   19fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19fe2:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   19fe4:	bf04      	itt	eq
   19fe6:	f36f 0301 	bfceq	r3, #0, #2
   19fea:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   19fec:	4621      	mov	r1, r4
   19fee:	4628      	mov	r0, r5
}
   19ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   19ff4:	f7fc b8ea 	b.w	161cc <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   19ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19ffc:	429d      	cmp	r5, r3
   19ffe:	d125      	bne.n	1a04c <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
   1a000:	6830      	ldr	r0, [r6, #0]
   1a002:	4284      	cmp	r4, r0
   1a004:	d049      	beq.n	1a09a <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   1a006:	2800      	cmp	r0, #0
   1a008:	d0f0      	beq.n	19fec <ull_conn_tx_ack+0x24>
   1a00a:	4ab3      	ldr	r2, [pc, #716]	; (1a2d8 <ull_conn_tx_ack+0x310>)
   1a00c:	49b3      	ldr	r1, [pc, #716]	; (1a2dc <ull_conn_tx_ack+0x314>)
   1a00e:	48b4      	ldr	r0, [pc, #720]	; (1a2e0 <ull_conn_tx_ack+0x318>)
   1a010:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   1a014:	f00b fd76 	bl	25b04 <printk>
   1a018:	4040      	eors	r0, r0
   1a01a:	f380 8811 	msr	BASEPRI, r0
   1a01e:	f04f 0003 	mov.w	r0, #3
   1a022:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1a024:	4621      	mov	r1, r4
   1a026:	4628      	mov	r0, r5
}
   1a028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1a02c:	f7fc b8ce 	b.w	161cc <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1a030:	4aa9      	ldr	r2, [pc, #676]	; (1a2d8 <ull_conn_tx_ack+0x310>)
   1a032:	49ac      	ldr	r1, [pc, #688]	; (1a2e4 <ull_conn_tx_ack+0x31c>)
   1a034:	48aa      	ldr	r0, [pc, #680]	; (1a2e0 <ull_conn_tx_ack+0x318>)
   1a036:	f240 7383 	movw	r3, #1923	; 0x783
   1a03a:	f00b fd63 	bl	25b04 <printk>
   1a03e:	4040      	eors	r0, r0
   1a040:	f380 8811 	msr	BASEPRI, r0
   1a044:	f04f 0003 	mov.w	r0, #3
   1a048:	df02      	svc	2
   1a04a:	e7c3      	b.n	19fd4 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a04c:	48a6      	ldr	r0, [pc, #664]	; (1a2e8 <ull_conn_tx_ack+0x320>)
   1a04e:	462a      	mov	r2, r5
   1a050:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a054:	f7f8 f928 	bl	122a8 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1a058:	79e3      	ldrb	r3, [r4, #7]
   1a05a:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a05c:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   1a05e:	2b16      	cmp	r3, #22
   1a060:	d820      	bhi.n	1a0a4 <ull_conn_tx_ack+0xdc>
   1a062:	e8df f003 	tbb	[pc, r3]
   1a066:	516d      	.short	0x516d
   1a068:	288b1f1f 	.word	0x288b1f1f
   1a06c:	7984281f 	.word	0x7984281f
   1a070:	1f1f471f 	.word	0x1f1f471f
   1a074:	281f251f 	.word	0x281f251f
   1a078:	1f2f96c3 	.word	0x1f2f96c3
   1a07c:	36          	.byte	0x36
   1a07d:	00          	.byte	0x00
			LL_ASSERT(link->next);
   1a07e:	4a96      	ldr	r2, [pc, #600]	; (1a2d8 <ull_conn_tx_ack+0x310>)
   1a080:	499a      	ldr	r1, [pc, #616]	; (1a2ec <ull_conn_tx_ack+0x324>)
   1a082:	4897      	ldr	r0, [pc, #604]	; (1a2e0 <ull_conn_tx_ack+0x318>)
   1a084:	f240 7392 	movw	r3, #1938	; 0x792
   1a088:	f00b fd3c 	bl	25b04 <printk>
   1a08c:	4040      	eors	r0, r0
   1a08e:	f380 8811 	msr	BASEPRI, r0
   1a092:	f04f 0003 	mov.w	r0, #3
   1a096:	df02      	svc	2
   1a098:	2000      	movs	r0, #0
}
   1a09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1a09e:	4994      	ldr	r1, [pc, #592]	; (1a2f0 <ull_conn_tx_ack+0x328>)
   1a0a0:	f7f8 b8ea 	b.w	12278 <mem_release>
		if (link->next == (void *)tx) {
   1a0a4:	6830      	ldr	r0, [r6, #0]
   1a0a6:	42a0      	cmp	r0, r4
   1a0a8:	d0f7      	beq.n	1a09a <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   1a0aa:	2800      	cmp	r0, #0
   1a0ac:	d1ad      	bne.n	1a00a <ull_conn_tx_ack+0x42>
   1a0ae:	e79d      	b.n	19fec <ull_conn_tx_ack+0x24>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1a0b0:	7a23      	ldrb	r3, [r4, #8]
   1a0b2:	2b03      	cmp	r3, #3
   1a0b4:	d01e      	beq.n	1a0f4 <ull_conn_tx_ack+0x12c>
			conn->common.txn_lock = 0U;
   1a0b6:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
   1a0ba:	f36f 0341 	bfc	r3, #1, #1
   1a0be:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
   1a0c2:	e79d      	b.n	1a000 <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1a0c4:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   1a0c8:	2202      	movs	r2, #2
   1a0ca:	f362 0301 	bfi	r3, r2, #0, #2
   1a0ce:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1a0d2:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
   1a0d6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   1a0da:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1a0de:	f363 1206 	bfi	r2, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1a0e2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1a0e6:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1a0ea:	f36f 0300 	bfc	r3, #0, #1
   1a0ee:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		break;
   1a0f2:	e785      	b.n	1a000 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
   1a0f4:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1a0f8:	f023 0303 	bic.w	r3, r3, #3
   1a0fc:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
   1a100:	2300      	movs	r3, #0
   1a102:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		break;
   1a106:	e77b      	b.n	1a000 <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
   1a108:	2208      	movs	r2, #8
   1a10a:	f104 0112 	add.w	r1, r4, #18
   1a10e:	30ce      	adds	r0, #206	; 0xce
   1a110:	f00e fb4e 	bl	287b0 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1a114:	2204      	movs	r2, #4
   1a116:	f104 011a 	add.w	r1, r4, #26
   1a11a:	f107 0078 	add.w	r0, r7, #120	; 0x78
   1a11e:	f00e fb47 	bl	287b0 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   1a122:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1a126:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   1a12a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
   1a12e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
   1a132:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1a136:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
   1a13a:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		break;
   1a13e:	e75f      	b.n	1a000 <ull_conn_tx_ack+0x38>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1a140:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   1a142:	2b13      	cmp	r3, #19
   1a144:	bf08      	it	eq
   1a146:	2316      	moveq	r3, #22
   1a148:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
		conn->llcp_terminate.ack--;
   1a14c:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   1a150:	3b01      	subs	r3, #1
   1a152:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	break;
   1a156:	e753      	b.n	1a000 <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
   1a158:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a15c:	2b00      	cmp	r3, #0
   1a15e:	da52      	bge.n	1a206 <ull_conn_tx_ack+0x23e>
			conn->llcp_enc.pause_tx = 1U;
   1a160:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1a164:	f043 0302 	orr.w	r3, r3, #2
   1a168:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
   1a16c:	e748      	b.n	1a000 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
   1a16e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1a172:	f023 0306 	bic.w	r3, r3, #6
   1a176:	f043 0306 	orr.w	r3, r3, #6
   1a17a:	e7d6      	b.n	1a12a <ull_conn_tx_ack+0x162>
		if (conn->lll.role) {
   1a17c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a180:	2b00      	cmp	r3, #0
   1a182:	db7d      	blt.n	1a280 <ull_conn_tx_ack+0x2b8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1a184:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
   1a188:	f043 0303 	orr.w	r3, r3, #3
   1a18c:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
   1a190:	e736      	b.n	1a000 <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
   1a192:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1a196:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
		conn->common.txn_lock = 0U;
   1a19a:	f36f 0341 	bfc	r3, #1, #1
   1a19e:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1a1a2:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
   1a1a6:	428b      	cmp	r3, r1
   1a1a8:	f43f af2a 	beq.w	1a000 <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
   1a1ac:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
   1a1b0:	f002 0307 	and.w	r3, r2, #7
   1a1b4:	2b03      	cmp	r3, #3
   1a1b6:	d005      	beq.n	1a1c4 <ull_conn_tx_ack+0x1fc>
   1a1b8:	3303      	adds	r3, #3
   1a1ba:	f003 0307 	and.w	r3, r3, #7
   1a1be:	2b01      	cmp	r3, #1
   1a1c0:	f63f af70 	bhi.w	1a0a4 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   1a1c4:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
   1a1c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
				conn->lll.max_tx_time =
   1a1ca:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
   1a1ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
   1a1d2:	f002 0307 	and.w	r3, r2, #7
   1a1d6:	2b05      	cmp	r3, #5
   1a1d8:	d078      	beq.n	1a2cc <ull_conn_tx_ack+0x304>
				if (!conn->llcp_length.cache.tx_octets) {
   1a1da:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
   1a1de:	2b00      	cmp	r3, #0
   1a1e0:	d166      	bne.n	1a2b0 <ull_conn_tx_ack+0x2e8>
					conn->llcp_length.ack =
   1a1e2:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
   1a1e6:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
   1a1ea:	e709      	b.n	1a000 <ull_conn_tx_ack+0x38>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   1a1ec:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   1a1f0:	f003 0207 	and.w	r2, r3, #7
   1a1f4:	2a01      	cmp	r2, #1
   1a1f6:	f47f af03 	bne.w	1a000 <ull_conn_tx_ack+0x38>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1a1fa:	2202      	movs	r2, #2
   1a1fc:	f362 0302 	bfi	r3, r2, #0, #3
   1a200:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
   1a204:	e6fc      	b.n	1a000 <ull_conn_tx_ack+0x38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a206:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1a208:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a20a:	f043 0303 	orr.w	r3, r3, #3
   1a20e:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1a210:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1a212:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1a214:	2208      	movs	r2, #8
   1a216:	f200 1141 	addw	r1, r0, #321	; 0x141
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1a21a:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1a21c:	18a0      	adds	r0, r4, r2
   1a21e:	f00e fac7 	bl	287b0 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1a222:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
   1a226:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1a228:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
   1a22c:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1a22e:	210c      	movs	r1, #12
   1a230:	f104 0012 	add.w	r0, r4, #18
   1a234:	f002 f858 	bl	1c2e8 <lll_csrand_isr_get>
	    conn->tx_head &&
   1a238:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
   1a23c:	b373      	cbz	r3, 1a29c <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_enc.pause_tx &&
   1a23e:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
	    conn->tx_head &&
   1a242:	0791      	lsls	r1, r2, #30
   1a244:	d42a      	bmi.n	1a29c <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_phy.pause_tx &&
   1a246:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
   1a24a:	07d2      	lsls	r2, r2, #31
   1a24c:	d426      	bmi.n	1a29c <ull_conn_tx_ack+0x2d4>
		if (conn->tx_head == conn->tx_data) {
   1a24e:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1a252:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
   1a256:	428b      	cmp	r3, r1
   1a258:	d04c      	beq.n	1a2f4 <ull_conn_tx_ack+0x32c>
		} else if (!conn->tx_ctrl) {
   1a25a:	2a00      	cmp	r2, #0
   1a25c:	d056      	beq.n	1a30c <ull_conn_tx_ack+0x344>
	tx->next = conn->tx_ctrl_last->next;
   1a25e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
   1a262:	681a      	ldr	r2, [r3, #0]
   1a264:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1a266:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1a268:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   1a26a:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
		if (link->next == (void *)tx) {
   1a26e:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   1a270:	b11b      	cbz	r3, 1a27a <ull_conn_tx_ack+0x2b2>
		if (link->next == (void *)tx) {
   1a272:	2a00      	cmp	r2, #0
   1a274:	f43f af03 	beq.w	1a07e <ull_conn_tx_ack+0xb6>
}
   1a278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conn->tx_data_last = tx;
   1a27a:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
   1a27e:	e7f8      	b.n	1a272 <ull_conn_tx_ack+0x2aa>
			conn->llcp_enc.pause_rx = 0U;
   1a280:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1a284:	f023 0303 	bic.w	r3, r3, #3
   1a288:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
			conn->procedure_expire = 0U;
   1a28c:	2300      	movs	r3, #0
   1a28e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			conn->llcp_ack = conn->llcp_req;
   1a292:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   1a296:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
   1a29a:	e6b1      	b.n	1a000 <ull_conn_tx_ack+0x38>
		if (!conn->tx_ctrl) {
   1a29c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   1a2a0:	2a00      	cmp	r2, #0
   1a2a2:	d1dc      	bne.n	1a25e <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head;
   1a2a4:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1a2a6:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1a2aa:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
   1a2ae:	e7de      	b.n	1a26e <ull_conn_tx_ack+0x2a6>
				conn->llcp_length.tx_octets =
   1a2b0:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   1a2b4:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a2b6:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1a2ba:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
   1a2be:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a2c2:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.tx_time =
   1a2c6:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
   1a2ca:	e699      	b.n	1a000 <ull_conn_tx_ack+0x38>
					conn->llcp_length.state =
   1a2cc:	2304      	movs	r3, #4
   1a2ce:	f363 0202 	bfi	r2, r3, #0, #3
   1a2d2:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
   1a2d6:	e693      	b.n	1a000 <ull_conn_tx_ack+0x38>
   1a2d8:	0002cfb4 	.word	0x0002cfb4
   1a2dc:	0002d168 	.word	0x0002d168
   1a2e0:	0002c8dc 	.word	0x0002c8dc
   1a2e4:	0002d15c 	.word	0x0002d15c
   1a2e8:	20003408 	.word	0x20003408
   1a2ec:	0002d174 	.word	0x0002d174
   1a2f0:	20004a94 	.word	0x20004a94
			conn->tx_data = conn->tx_data->next;
   1a2f4:	6819      	ldr	r1, [r3, #0]
   1a2f6:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1a2fa:	2a00      	cmp	r2, #0
   1a2fc:	d1af      	bne.n	1a25e <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head->next;
   1a2fe:	681a      	ldr	r2, [r3, #0]
   1a300:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1a302:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1a304:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1a306:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
   1a30a:	e7b0      	b.n	1a26e <ull_conn_tx_ack+0x2a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a30c:	791a      	ldrb	r2, [r3, #4]
   1a30e:	f002 0203 	and.w	r2, r2, #3
   1a312:	2a03      	cmp	r2, #3
   1a314:	d002      	beq.n	1a31c <ull_conn_tx_ack+0x354>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a316:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
   1a31a:	e7a0      	b.n	1a25e <ull_conn_tx_ack+0x296>
	    ((pdu_data_tx->llctrl.opcode !=
   1a31c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a31e:	2a03      	cmp	r2, #3
   1a320:	d0ed      	beq.n	1a2fe <ull_conn_tx_ack+0x336>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a322:	2a0a      	cmp	r2, #10
   1a324:	d1f7      	bne.n	1a316 <ull_conn_tx_ack+0x34e>
   1a326:	e7ea      	b.n	1a2fe <ull_conn_tx_ack+0x336>

0001a328 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   1a328:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1a32c:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   1a330:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   1a332:	bf03      	ittte	eq
   1a334:	3301      	addeq	r3, #1
   1a336:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
   1a33a:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a33c:	200c      	movne	r0, #12
}
   1a33e:	4770      	bx	lr

0001a340 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1a340:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1a344:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
	switch (lll->phy_tx_time) {
   1a346:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1a34a:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1a34c:	bf14      	ite	ne
   1a34e:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1a350:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1a352:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	return max_tx_octets;
   1a356:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1a358:	bf14      	ite	ne
   1a35a:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1a35c:	3b0b      	subeq	r3, #11
   1a35e:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1a360:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1a362:	bf44      	itt	mi
   1a364:	3b04      	submi	r3, #4
   1a366:	b29b      	uxthmi	r3, r3
}
   1a368:	4298      	cmp	r0, r3
   1a36a:	bf28      	it	cs
   1a36c:	4618      	movcs	r0, r3
   1a36e:	4770      	bx	lr

0001a370 <ull_pdu_data_init>:
}
   1a370:	4770      	bx	lr
   1a372:	bf00      	nop

0001a374 <ticker_op_stop_scan_cb>:
}
   1a374:	4770      	bx	lr
   1a376:	bf00      	nop

0001a378 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a378:	b900      	cbnz	r0, 1a37c <ticker_op_cb+0x4>
   1a37a:	4770      	bx	lr
{
   1a37c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a37e:	4a07      	ldr	r2, [pc, #28]	; (1a39c <ticker_op_cb+0x24>)
   1a380:	4907      	ldr	r1, [pc, #28]	; (1a3a0 <ticker_op_cb+0x28>)
   1a382:	4808      	ldr	r0, [pc, #32]	; (1a3a4 <ticker_op_cb+0x2c>)
   1a384:	f240 43ad 	movw	r3, #1197	; 0x4ad
   1a388:	f00b fbbc 	bl	25b04 <printk>
   1a38c:	4040      	eors	r0, r0
   1a38e:	f380 8811 	msr	BASEPRI, r0
   1a392:	f04f 0003 	mov.w	r0, #3
   1a396:	df02      	svc	2
}
   1a398:	bd08      	pop	{r3, pc}
   1a39a:	bf00      	nop
   1a39c:	0002d194 	.word	0x0002d194
   1a3a0:	0002d014 	.word	0x0002d014
   1a3a4:	0002c8dc 	.word	0x0002c8dc

0001a3a8 <ull_central_ticker_cb>:
{
   1a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3ac:	9c07      	ldr	r4, [sp, #28]
   1a3ae:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1a3b2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1a3b4:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1a3b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a3ba:	4299      	cmp	r1, r3
   1a3bc:	d02d      	beq.n	1a41a <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1a3be:	4606      	mov	r6, r0
   1a3c0:	4617      	mov	r7, r2
   1a3c2:	4601      	mov	r1, r0
   1a3c4:	462a      	mov	r2, r5
   1a3c6:	4620      	mov	r0, r4
   1a3c8:	f7e7 fc56 	bl	1c78 <ull_conn_llcp>
		if (ret) {
   1a3cc:	bb28      	cbnz	r0, 1a41a <ull_central_ticker_cb+0x72>
	return ++hdr->ref;
   1a3ce:	7823      	ldrb	r3, [r4, #0]
   1a3d0:	3301      	adds	r3, #1
   1a3d2:	b2db      	uxtb	r3, r3
   1a3d4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1a3d6:	b383      	cbz	r3, 1a43a <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   1a3d8:	2002      	movs	r0, #2
   1a3da:	f7ff fa3d 	bl	19858 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   1a3de:	2102      	movs	r1, #2
   1a3e0:	4620      	mov	r0, r4
   1a3e2:	f7ff fc65 	bl	19cb0 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   1a3e6:	491c      	ldr	r1, [pc, #112]	; (1a458 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   1a3e8:	4b1c      	ldr	r3, [pc, #112]	; (1a45c <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   1a3ea:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1a3ec:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a3f0:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1a3f2:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1a3f4:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1a3f8:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1a3fc:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a3fe:	2001      	movs	r0, #1
   1a400:	4611      	mov	r1, r2
   1a402:	f7f7 fff7 	bl	123f4 <mayfly_enqueue>
	LL_ASSERT(!err);
   1a406:	b950      	cbnz	r0, 1a41e <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   1a408:	20ff      	movs	r0, #255	; 0xff
   1a40a:	f7ff fa25 	bl	19858 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1a40e:	4620      	mov	r0, r4
   1a410:	21ff      	movs	r1, #255	; 0xff
}
   1a412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1a416:	f7ff bc4b 	b.w	19cb0 <ull_conn_tx_lll_enqueue>
}
   1a41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1a41e:	4a10      	ldr	r2, [pc, #64]	; (1a460 <ull_central_ticker_cb+0xb8>)
   1a420:	4910      	ldr	r1, [pc, #64]	; (1a464 <ull_central_ticker_cb+0xbc>)
   1a422:	4811      	ldr	r0, [pc, #68]	; (1a468 <ull_central_ticker_cb+0xc0>)
   1a424:	f240 434d 	movw	r3, #1101	; 0x44d
   1a428:	f00b fb6c 	bl	25b04 <printk>
   1a42c:	4040      	eors	r0, r0
   1a42e:	f380 8811 	msr	BASEPRI, r0
   1a432:	f04f 0003 	mov.w	r0, #3
   1a436:	df02      	svc	2
   1a438:	e7e6      	b.n	1a408 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   1a43a:	4a09      	ldr	r2, [pc, #36]	; (1a460 <ull_central_ticker_cb+0xb8>)
   1a43c:	490b      	ldr	r1, [pc, #44]	; (1a46c <ull_central_ticker_cb+0xc4>)
   1a43e:	480a      	ldr	r0, [pc, #40]	; (1a468 <ull_central_ticker_cb+0xc0>)
   1a440:	f240 433a 	movw	r3, #1082	; 0x43a
   1a444:	f00b fb5e 	bl	25b04 <printk>
   1a448:	4040      	eors	r0, r0
   1a44a:	f380 8811 	msr	BASEPRI, r0
   1a44e:	f04f 0003 	mov.w	r0, #3
   1a452:	df02      	svc	2
   1a454:	e7c0      	b.n	1a3d8 <ull_central_ticker_cb+0x30>
   1a456:	bf00      	nop
   1a458:	20004b9c 	.word	0x20004b9c
   1a45c:	200006c4 	.word	0x200006c4
   1a460:	0002d194 	.word	0x0002d194
   1a464:	0002cd00 	.word	0x0002cd00
   1a468:	0002c8dc 	.word	0x0002c8dc
   1a46c:	0002cf18 	.word	0x0002cf18

0001a470 <ll_connect_disable>:
{
   1a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a474:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1a476:	2000      	movs	r0, #0
   1a478:	f7fc ff92 	bl	173a0 <ull_scan_is_enabled_get>
	if (!scan) {
   1a47c:	b368      	cbz	r0, 1a4da <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   1a47e:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   1a480:	4604      	mov	r4, r0
   1a482:	b353      	cbz	r3, 1a4da <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   1a484:	f893 2020 	ldrb.w	r2, [r3, #32]
   1a488:	f042 0202 	orr.w	r2, r2, #2
   1a48c:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   1a490:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   1a492:	b317      	cbz	r7, 1a4da <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   1a494:	4601      	mov	r1, r0
   1a496:	2000      	movs	r0, #0
   1a498:	f7fc fecc 	bl	17234 <ull_scan_disable>
	if (!err) {
   1a49c:	4605      	mov	r5, r0
   1a49e:	b9c8      	cbnz	r0, 1a4d4 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   1a4a0:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   1a4a2:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   1a4a6:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
   1a4aa:	f1b8 0f00 	cmp.w	r8, #0
   1a4ae:	d018      	beq.n	1a4e2 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   1a4b0:	4640      	mov	r0, r8
   1a4b2:	f7fb fe41 	bl	16138 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1a4b6:	2316      	movs	r3, #22
   1a4b8:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
   1a4bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a4c0:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		scan_lll = &scan->lll;
   1a4c4:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a4c6:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   1a4c8:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a4cc:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
   1a4d0:	f8c6 9000 	str.w	r9, [r6]
}
   1a4d4:	4628      	mov	r0, r5
   1a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1a4da:	250c      	movs	r5, #12
}
   1a4dc:	4628      	mov	r0, r5
   1a4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1a4e2:	4a07      	ldr	r2, [pc, #28]	; (1a500 <ll_connect_disable+0x90>)
   1a4e4:	4907      	ldr	r1, [pc, #28]	; (1a504 <ll_connect_disable+0x94>)
   1a4e6:	4808      	ldr	r0, [pc, #32]	; (1a508 <ll_connect_disable+0x98>)
   1a4e8:	f240 235b 	movw	r3, #603	; 0x25b
   1a4ec:	f00b fb0a 	bl	25b04 <printk>
   1a4f0:	4040      	eors	r0, r0
   1a4f2:	f380 8811 	msr	BASEPRI, r0
   1a4f6:	f04f 0003 	mov.w	r0, #3
   1a4fa:	df02      	svc	2
   1a4fc:	e7d8      	b.n	1a4b0 <ll_connect_disable+0x40>
   1a4fe:	bf00      	nop
   1a500:	0002d194 	.word	0x0002d194
   1a504:	0002d00c 	.word	0x0002d00c
   1a508:	0002c8dc 	.word	0x0002c8dc

0001a50c <ll_enc_req_send>:
{
   1a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a510:	4607      	mov	r7, r0
   1a512:	4688      	mov	r8, r1
   1a514:	4691      	mov	r9, r2
   1a516:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1a518:	f7fd fbca 	bl	17cb0 <ll_connected_get>
	if (!conn) {
   1a51c:	2800      	cmp	r0, #0
   1a51e:	d06a      	beq.n	1a5f6 <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   1a520:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
   1a524:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
   1a528:	429a      	cmp	r2, r3
   1a52a:	4604      	mov	r4, r0
   1a52c:	d142      	bne.n	1a5b4 <ll_enc_req_send+0xa8>
   1a52e:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   1a532:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1a536:	429a      	cmp	r2, r3
   1a538:	d003      	beq.n	1a542 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1a53a:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
   1a53e:	2b03      	cmp	r3, #3
   1a540:	d038      	beq.n	1a5b4 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   1a542:	f7fd fbc7 	bl	17cd4 <ll_tx_mem_acquire>
	if (tx) {
   1a546:	4605      	mov	r5, r0
   1a548:	b3a0      	cbz	r0, 1a5b4 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   1a54a:	3004      	adds	r0, #4
   1a54c:	f7ff ff10 	bl	1a370 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   1a550:	4631      	mov	r1, r6
   1a552:	2210      	movs	r2, #16
   1a554:	f204 1049 	addw	r0, r4, #329	; 0x149
   1a558:	f00e f92a 	bl	287b0 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   1a55c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1a560:	f013 0318 	ands.w	r3, r3, #24
   1a564:	d029      	beq.n	1a5ba <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1a566:	2b18      	cmp	r3, #24
   1a568:	d121      	bne.n	1a5ae <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   1a56a:	2208      	movs	r2, #8
   1a56c:	4641      	mov	r1, r8
   1a56e:	f204 1041 	addw	r0, r4, #321	; 0x141
   1a572:	f00e f91d 	bl	287b0 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   1a576:	f899 3000 	ldrb.w	r3, [r9]
   1a57a:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
   1a57e:	f899 3001 	ldrb.w	r3, [r9, #1]
   1a582:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a586:	792b      	ldrb	r3, [r5, #4]
   1a588:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1a58c:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a58e:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1a590:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1a592:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1a594:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   1a596:	4629      	mov	r1, r5
   1a598:	4638      	mov	r0, r7
   1a59a:	f7fd fba7 	bl	17cec <ll_tx_mem_enqueue>
   1a59e:	b930      	cbnz	r0, 1a5ae <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   1a5a0:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
   1a5a4:	3301      	adds	r3, #1
   1a5a6:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
   1a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   1a5ae:	4628      	mov	r0, r5
   1a5b0:	f7fd fb96 	bl	17ce0 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1a5b4:	200c      	movs	r0, #12
}
   1a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a5ba:	792b      	ldrb	r3, [r5, #4]
   1a5bc:	f043 0303 	orr.w	r3, r3, #3
   1a5c0:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1a5c2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1a5c4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1a5c6:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1a5c8:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1a5ca:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   1a5cc:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1a5ce:	18a8      	adds	r0, r5, r2
   1a5d0:	f00e f8ee 	bl	287b0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1a5d4:	f899 3000 	ldrb.w	r3, [r9]
   1a5d8:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1a5da:	f899 3001 	ldrb.w	r3, [r9, #1]
   1a5de:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1a5e0:	2108      	movs	r1, #8
   1a5e2:	f105 0012 	add.w	r0, r5, #18
   1a5e6:	f001 fe71 	bl	1c2cc <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   1a5ea:	2104      	movs	r1, #4
   1a5ec:	f105 001a 	add.w	r0, r5, #26
   1a5f0:	f001 fe6c 	bl	1c2cc <lll_csrand_get>
   1a5f4:	e7cf      	b.n	1a596 <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a5f6:	2002      	movs	r0, #2
}
   1a5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a5fc <ull_central_reset>:
{
   1a5fc:	b530      	push	{r4, r5, lr}
   1a5fe:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   1a600:	a801      	add	r0, sp, #4
   1a602:	f7ff ff35 	bl	1a470 <ll_connect_disable>
	if (!err) {
   1a606:	4604      	mov	r4, r0
   1a608:	b110      	cbz	r0, 1a610 <ull_central_reset+0x14>
}
   1a60a:	4620      	mov	r0, r4
   1a60c:	b003      	add	sp, #12
   1a60e:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1a610:	f7fc fec6 	bl	173a0 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   1a614:	4605      	mov	r5, r0
   1a616:	b150      	cbz	r0, 1a62e <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   1a618:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1a61c:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   1a61e:	f36f 0300 	bfc	r3, #0, #1
}
   1a622:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   1a624:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1a628:	622a      	str	r2, [r5, #32]
}
   1a62a:	b003      	add	sp, #12
   1a62c:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   1a62e:	4a07      	ldr	r2, [pc, #28]	; (1a64c <ull_central_reset+0x50>)
   1a630:	4907      	ldr	r1, [pc, #28]	; (1a650 <ull_central_reset+0x54>)
   1a632:	4808      	ldr	r0, [pc, #32]	; (1a654 <ull_central_reset+0x58>)
   1a634:	f240 23e9 	movw	r3, #745	; 0x2e9
   1a638:	f00b fa64 	bl	25b04 <printk>
   1a63c:	4040      	eors	r0, r0
   1a63e:	f380 8811 	msr	BASEPRI, r0
   1a642:	f04f 0003 	mov.w	r0, #3
   1a646:	df02      	svc	2
   1a648:	e7e6      	b.n	1a618 <ull_central_reset+0x1c>
   1a64a:	bf00      	nop
   1a64c:	0002d194 	.word	0x0002d194
   1a650:	0002d734 	.word	0x0002d734
   1a654:	0002c8dc 	.word	0x0002c8dc

0001a658 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1a658:	6883      	ldr	r3, [r0, #8]
{
   1a65a:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1a65c:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   1a65e:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   1a660:	b31c      	cbz	r4, 1a6aa <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   1a662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
   1a664:	2200      	movs	r2, #0
   1a666:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   1a668:	b163      	cbz	r3, 1a684 <ull_central_cleanup+0x2c>
   1a66a:	4a1e      	ldr	r2, [pc, #120]	; (1a6e4 <ull_central_cleanup+0x8c>)
   1a66c:	491e      	ldr	r1, [pc, #120]	; (1a6e8 <ull_central_cleanup+0x90>)
   1a66e:	481f      	ldr	r0, [pc, #124]	; (1a6ec <ull_central_cleanup+0x94>)
   1a670:	f240 3305 	movw	r3, #773	; 0x305
   1a674:	f00b fa46 	bl	25b04 <printk>
   1a678:	4040      	eors	r0, r0
   1a67a:	f380 8811 	msr	BASEPRI, r0
   1a67e:	f04f 0003 	mov.w	r0, #3
   1a682:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   1a684:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1a688:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a68c:	f7f7 fe34 	bl	122f8 <memq_deinit>
	LL_ASSERT(link);
   1a690:	4606      	mov	r6, r0
   1a692:	b1c0      	cbz	r0, 1a6c6 <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   1a694:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   1a696:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
   1a698:	f7fd faf4 	bl	17c84 <ll_conn_release>
	scan->is_enabled = 0U;
   1a69c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1a6a0:	f36f 0300 	bfc	r3, #0, #1
   1a6a4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   1a6a8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   1a6aa:	4a0e      	ldr	r2, [pc, #56]	; (1a6e4 <ull_central_cleanup+0x8c>)
   1a6ac:	4910      	ldr	r1, [pc, #64]	; (1a6f0 <ull_central_cleanup+0x98>)
   1a6ae:	480f      	ldr	r0, [pc, #60]	; (1a6ec <ull_central_cleanup+0x94>)
   1a6b0:	f240 3302 	movw	r3, #770	; 0x302
   1a6b4:	f00b fa26 	bl	25b04 <printk>
   1a6b8:	4040      	eors	r0, r0
   1a6ba:	f380 8811 	msr	BASEPRI, r0
   1a6be:	f04f 0003 	mov.w	r0, #3
   1a6c2:	df02      	svc	2
   1a6c4:	e7cd      	b.n	1a662 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   1a6c6:	4a07      	ldr	r2, [pc, #28]	; (1a6e4 <ull_central_cleanup+0x8c>)
   1a6c8:	490a      	ldr	r1, [pc, #40]	; (1a6f4 <ull_central_cleanup+0x9c>)
   1a6ca:	4808      	ldr	r0, [pc, #32]	; (1a6ec <ull_central_cleanup+0x94>)
   1a6cc:	f44f 7342 	mov.w	r3, #776	; 0x308
   1a6d0:	f00b fa18 	bl	25b04 <printk>
   1a6d4:	4040      	eors	r0, r0
   1a6d6:	f380 8811 	msr	BASEPRI, r0
   1a6da:	f04f 0003 	mov.w	r0, #3
   1a6de:	df02      	svc	2
   1a6e0:	e7d8      	b.n	1a694 <ull_central_cleanup+0x3c>
   1a6e2:	bf00      	nop
   1a6e4:	0002d194 	.word	0x0002d194
   1a6e8:	0002d1f8 	.word	0x0002d1f8
   1a6ec:	0002c8dc 	.word	0x0002c8dc
   1a6f0:	0002d1ec 	.word	0x0002d1ec
   1a6f4:	0002d00c 	.word	0x0002d00c

0001a6f8 <ull_central_chm_update>:
{
   1a6f8:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   1a6fa:	2000      	movs	r0, #0
   1a6fc:	f7fd fad8 	bl	17cb0 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1a700:	4604      	mov	r4, r0
   1a702:	b1d8      	cbz	r0, 1a73c <ull_central_chm_update+0x44>
   1a704:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a708:	2b00      	cmp	r3, #0
   1a70a:	db17      	blt.n	1a73c <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   1a70c:	f7ff fe0c 	bl	1a328 <ull_conn_llcp_req>
		if (ret) {
   1a710:	4605      	mov	r5, r0
   1a712:	b988      	cbnz	r0, 1a738 <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   1a714:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   1a718:	f000 f9c4 	bl	1aaa4 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   1a71c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
   1a720:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
   1a724:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1a728:	2102      	movs	r1, #2
		conn->llcp_req++;
   1a72a:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   1a72c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_CHAN_MAP;
   1a730:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		conn->llcp_req++;
   1a734:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
}
   1a738:	4628      	mov	r0, r5
   1a73a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1a73c:	2500      	movs	r5, #0
}
   1a73e:	4628      	mov	r0, r5
   1a740:	bd38      	pop	{r3, r4, r5, pc}
   1a742:	bf00      	nop

0001a744 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   1a744:	6008      	str	r0, [r1, #0]
}
   1a746:	4770      	bx	lr

0001a748 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a74c:	b091      	sub	sp, #68	; 0x44
   1a74e:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   1a752:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   1a754:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1a758:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1a75a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1a75c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
   1a760:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   1a762:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1a764:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   1a766:	da02      	bge.n	1a76e <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   1a768:	4613      	mov	r3, r2
   1a76a:	3314      	adds	r3, #20
   1a76c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1a76e:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1a770:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1a774:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   1a778:	f8df b254 	ldr.w	fp, [pc, #596]	; 1a9d0 <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1a77c:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   1a780:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1a782:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   1a786:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   1a788:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1a78a:	4635      	mov	r5, r6
   1a78c:	e044      	b.n	1a818 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   1a78e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1a792:	2bff      	cmp	r3, #255	; 0xff
   1a794:	d064      	beq.n	1a860 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   1a796:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a79a:	d011      	beq.n	1a7c0 <win_offset_calc.constprop.0+0x78>
   1a79c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a79e:	4552      	cmp	r2, sl
   1a7a0:	d00e      	beq.n	1a7c0 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   1a7a2:	498c      	ldr	r1, [pc, #560]	; (1a9d4 <win_offset_calc.constprop.0+0x28c>)
   1a7a4:	488c      	ldr	r0, [pc, #560]	; (1a9d8 <win_offset_calc.constprop.0+0x290>)
   1a7a6:	f240 13c3 	movw	r3, #451	; 0x1c3
   1a7aa:	465a      	mov	r2, fp
   1a7ac:	f00b f9aa 	bl	25b04 <printk>
   1a7b0:	4040      	eors	r0, r0
   1a7b2:	f380 8811 	msr	BASEPRI, r0
   1a7b6:	f04f 0003 	mov.w	r0, #3
   1a7ba:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   1a7bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1a7c0:	1e9a      	subs	r2, r3, #2
   1a7c2:	2a03      	cmp	r2, #3
   1a7c4:	d825      	bhi.n	1a812 <win_offset_calc.constprop.0+0xca>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   1a7c6:	2b05      	cmp	r3, #5
   1a7c8:	d17f      	bne.n	1a8ca <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   1a7ca:	9b05      	ldr	r3, [sp, #20]
   1a7cc:	2bff      	cmp	r3, #255	; 0xff
   1a7ce:	d178      	bne.n	1a8c2 <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   1a7d0:	2000      	movs	r0, #0
   1a7d2:	f7fd fa65 	bl	17ca0 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   1a7d6:	9b07      	ldr	r3, [sp, #28]
   1a7d8:	4283      	cmp	r3, r0
   1a7da:	d01a      	beq.n	1a812 <win_offset_calc.constprop.0+0xca>
   1a7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a7de:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a7e2:	2a00      	cmp	r2, #0
   1a7e4:	f040 808a 	bne.w	1a8fc <win_offset_calc.constprop.0+0x1b4>
   1a7e8:	2b00      	cmp	r3, #0
   1a7ea:	db12      	blt.n	1a812 <win_offset_calc.constprop.0+0xca>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1a7ec:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1a7ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   1a7f2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1a7f6:	3328      	adds	r3, #40	; 0x28
   1a7f8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1a7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7fc:	681b      	ldr	r3, [r3, #0]
   1a7fe:	4543      	cmp	r3, r8
   1a800:	f0c0 808b 	bcc.w	1a91a <win_offset_calc.constprop.0+0x1d2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1a804:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   1a806:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1a80a:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   1a80c:	4645      	mov	r5, r8
   1a80e:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   1a812:	783b      	ldrb	r3, [r7, #0]
   1a814:	42a3      	cmp	r3, r4
   1a816:	d95c      	bls.n	1a8d2 <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1a818:	ab0f      	add	r3, sp, #60	; 0x3c
   1a81a:	9302      	str	r3, [sp, #8]
   1a81c:	4b6f      	ldr	r3, [pc, #444]	; (1a9dc <win_offset_calc.constprop.0+0x294>)
   1a81e:	9301      	str	r3, [sp, #4]
   1a820:	ab0d      	add	r3, sp, #52	; 0x34
   1a822:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   1a824:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1a826:	ab0e      	add	r3, sp, #56	; 0x38
   1a828:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1a82c:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   1a82e:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1a830:	f7f9 f878 	bl	13924 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1a834:	2802      	cmp	r0, #2
   1a836:	d056      	beq.n	1a8e6 <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1a838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1a83a:	2b00      	cmp	r3, #0
   1a83c:	d0a7      	beq.n	1a78e <win_offset_calc.constprop.0+0x46>
   1a83e:	4968      	ldr	r1, [pc, #416]	; (1a9e0 <win_offset_calc.constprop.0+0x298>)
   1a840:	4865      	ldr	r0, [pc, #404]	; (1a9d8 <win_offset_calc.constprop.0+0x290>)
   1a842:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   1a846:	465a      	mov	r2, fp
   1a848:	f00b f95c 	bl	25b04 <printk>
   1a84c:	4040      	eors	r0, r0
   1a84e:	f380 8811 	msr	BASEPRI, r0
   1a852:	f04f 0003 	mov.w	r0, #3
   1a856:	df02      	svc	2
		if (ticker_id == 0xff) {
   1a858:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1a85c:	2bff      	cmp	r3, #255	; 0xff
   1a85e:	d19a      	bne.n	1a796 <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1a860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a862:	681b      	ldr	r3, [r3, #0]
   1a864:	429d      	cmp	r5, r3
   1a866:	bf38      	it	cc
   1a868:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1a86a:	783b      	ldrb	r3, [r7, #0]
   1a86c:	42a3      	cmp	r3, r4
   1a86e:	d926      	bls.n	1a8be <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1a870:	9b04      	ldr	r3, [sp, #16]
   1a872:	495c      	ldr	r1, [pc, #368]	; (1a9e4 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   1a874:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1a876:	442b      	add	r3, r5
   1a878:	fba1 2303 	umull	r2, r3, r1, r3
   1a87c:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   1a880:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1a882:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   1a886:	f240 809a 	bls.w	1a9be <win_offset_calc.constprop.0+0x276>
   1a88a:	9e04      	ldr	r6, [sp, #16]
   1a88c:	f8dd c018 	ldr.w	ip, [sp, #24]
   1a890:	e002      	b.n	1a898 <win_offset_calc.constprop.0+0x150>
   1a892:	4594      	cmp	ip, r2
   1a894:	f240 8093 	bls.w	1a9be <win_offset_calc.constprop.0+0x276>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   1a898:	eb09 0044 	add.w	r0, r9, r4, lsl #1
	dst[0] = val;
   1a89c:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   1a8a0:	0a12      	lsrs	r2, r2, #8
   1a8a2:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   1a8a4:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   1a8a6:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   1a8a8:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   1a8aa:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1a8ac:	1973      	adds	r3, r6, r5
   1a8ae:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   1a8b2:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1a8b4:	f3c3 124f 	ubfx	r2, r3, #5, #16
   1a8b8:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   1a8bc:	d8e9      	bhi.n	1a892 <win_offset_calc.constprop.0+0x14a>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1a8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a8c0:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   1a8c2:	703c      	strb	r4, [r7, #0]
}
   1a8c4:	b011      	add	sp, #68	; 0x44
   1a8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8ca:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
   1a8cc:	783b      	ldrb	r3, [r7, #0]
   1a8ce:	42a3      	cmp	r3, r4
   1a8d0:	d8a2      	bhi.n	1a818 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   1a8d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1a8d6:	2bff      	cmp	r3, #255	; 0xff
   1a8d8:	d1f3      	bne.n	1a8c2 <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1a8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a8dc:	681b      	ldr	r3, [r3, #0]
   1a8de:	429d      	cmp	r5, r3
   1a8e0:	bf38      	it	cc
   1a8e2:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1a8e4:	e7eb      	b.n	1a8be <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1a8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a8e8:	2b02      	cmp	r3, #2
   1a8ea:	d1a5      	bne.n	1a838 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   1a8ec:	2102      	movs	r1, #2
   1a8ee:	2000      	movs	r0, #0
   1a8f0:	f7f9 f85e 	bl	139b0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1a8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a8f6:	2b02      	cmp	r3, #2
   1a8f8:	d0f8      	beq.n	1a8ec <win_offset_calc.constprop.0+0x1a4>
   1a8fa:	e79d      	b.n	1a838 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   1a8fc:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1a8fe:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1a900:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
   1a904:	da4f      	bge.n	1a9a6 <win_offset_calc.constprop.0+0x25e>
				ticks_slot_abs_curr += ticks_slot_margin;
   1a906:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   1a90a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1a90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a90e:	681b      	ldr	r3, [r3, #0]
   1a910:	4543      	cmp	r3, r8
				ticks_slot_margin =
   1a912:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1a916:	f4bf af75 	bcs.w	1a804 <win_offset_calc.constprop.0+0xbc>
				if (ticks_to_expire_prev <
   1a91a:	429d      	cmp	r5, r3
   1a91c:	bf38      	it	cc
   1a91e:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   1a920:	783b      	ldrb	r3, [r7, #0]
   1a922:	42a3      	cmp	r3, r4
   1a924:	d930      	bls.n	1a988 <win_offset_calc.constprop.0+0x240>
					(ticks_slot_abs_prev + ticks_slot_abs +
   1a926:	9b04      	ldr	r3, [sp, #16]
   1a928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a92a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   1a92e:	4413      	add	r3, r2
   1a930:	449a      	add	sl, r3
   1a932:	46b1      	mov	r9, r6
   1a934:	462e      	mov	r6, r5
   1a936:	4655      	mov	r5, sl
   1a938:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   1a93c:	e014      	b.n	1a968 <win_offset_calc.constprop.0+0x220>
					if (offset >= conn_interval) {
   1a93e:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   1a940:	f3c3 194f 	ubfx	r9, r3, #5, #16
					if (offset >= conn_interval) {
   1a944:	4591      	cmp	r9, r2
					ticks_to_expire_prev +=
   1a946:	f106 0628 	add.w	r6, r6, #40	; 0x28
					offset_index++;
   1a94a:	f104 0001 	add.w	r0, r4, #1
						  ticks_slot_abs_prev) /
   1a94e:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   1a952:	d238      	bcs.n	1a9c6 <win_offset_calc.constprop.0+0x27e>
	dst[0] = val;
   1a954:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   1a958:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1a95c:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   1a960:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   1a962:	b2c4      	uxtb	r4, r0
				while ((offset_index < *offset_max) &&
   1a964:	42a3      	cmp	r3, r4
   1a966:	d924      	bls.n	1a9b2 <win_offset_calc.constprop.0+0x26a>
				       (ticker_ticks_diff_get(
   1a968:	4631      	mov	r1, r6
   1a96a:	4640      	mov	r0, r8
   1a96c:	f7f9 f83a 	bl	139e4 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   1a970:	9b04      	ldr	r3, [sp, #16]
   1a972:	4a1c      	ldr	r2, [pc, #112]	; (1a9e4 <win_offset_calc.constprop.0+0x29c>)
   1a974:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   1a976:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1a978:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   1a97c:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   1a980:	d2dd      	bcs.n	1a93e <win_offset_calc.constprop.0+0x1f6>
   1a982:	4635      	mov	r5, r6
   1a984:	464e      	mov	r6, r9
   1a986:	46d1      	mov	r9, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   1a988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a98a:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1a98c:	9b06      	ldr	r3, [sp, #24]
   1a98e:	42b3      	cmp	r3, r6
   1a990:	f63f af38 	bhi.w	1a804 <win_offset_calc.constprop.0+0xbc>
	if (ticker_id == 0xff) {
   1a994:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1a998:	2bff      	cmp	r3, #255	; 0xff
   1a99a:	f43f af61 	beq.w	1a860 <win_offset_calc.constprop.0+0x118>
	*offset_max = offset_index;
   1a99e:	703c      	strb	r4, [r7, #0]
}
   1a9a0:	b011      	add	sp, #68	; 0x44
   1a9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1a9a6:	f101 0328 	add.w	r3, r1, #40	; 0x28
   1a9aa:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   1a9ac:	f04f 0a00 	mov.w	sl, #0
   1a9b0:	e723      	b.n	1a7fa <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1a9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a9b4:	4635      	mov	r5, r6
   1a9b6:	601d      	str	r5, [r3, #0]
   1a9b8:	464e      	mov	r6, r9
   1a9ba:	46d1      	mov	r9, sl
				if (offset >= conn_interval) {
   1a9bc:	e722      	b.n	1a804 <win_offset_calc.constprop.0+0xbc>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1a9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   1a9c0:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1a9c2:	601d      	str	r5, [r3, #0]
   1a9c4:	e77d      	b.n	1a8c2 <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1a9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a9c8:	2500      	movs	r5, #0
   1a9ca:	46d1      	mov	r9, sl
   1a9cc:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1a9ce:	e7e1      	b.n	1a994 <win_offset_calc.constprop.0+0x24c>
   1a9d0:	0002d224 	.word	0x0002d224
   1a9d4:	0002c97c 	.word	0x0002c97c
   1a9d8:	0002c8dc 	.word	0x0002c8dc
   1a9dc:	0001a745 	.word	0x0001a745
   1a9e0:	0002d268 	.word	0x0002d268
   1a9e4:	cccccccd 	.word	0xcccccccd

0001a9e8 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1a9e8:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1a9ea:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   1a9ec:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   1a9ee:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   1a9f0:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   1a9f2:	89c0      	ldrh	r0, [r0, #14]
   1a9f4:	6909      	ldr	r1, [r1, #16]
   1a9f6:	3310      	adds	r3, #16
   1a9f8:	f7e9 bac2 	b.w	3f80 <after_mstr_offset_get>

0001a9fc <ull_sched_mfy_win_offset_use>:
{
   1a9fc:	b510      	push	{r4, lr}
   1a9fe:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   1aa00:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
   1aa04:	6901      	ldr	r1, [r0, #16]
   1aa06:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1aa0a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   1aa0c:	f7e9 fab8 	bl	3f80 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1aa10:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1aa14:	4908      	ldr	r1, [pc, #32]	; (1aa38 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1aa16:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1aa1a:	fba1 1303 	umull	r1, r3, r1, r3
   1aa1e:	0a9b      	lsrs	r3, r3, #10
   1aa20:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   1aa24:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1aa26:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   1aa28:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1aa2c:	2204      	movs	r2, #4
   1aa2e:	f362 0302 	bfi	r3, r2, #0, #3
   1aa32:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
   1aa36:	bd10      	pop	{r4, pc}
   1aa38:	d1b71759 	.word	0xd1b71759

0001aa3c <ull_sched_mfy_free_win_offset_calc>:
{
   1aa3c:	b510      	push	{r4, lr}
   1aa3e:	b084      	sub	sp, #16
   1aa40:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1aa42:	f8d0 c178 	ldr.w	ip, [r0, #376]	; 0x178
   1aa46:	f8cd c004 	str.w	ip, [sp, #4]
   1aa4a:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   1aa4e:	2206      	movs	r2, #6
	uint32_t ticks_to_offset_default = 0U;
   1aa50:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
   1aa52:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1aa56:	9300      	str	r3, [sp, #0]
   1aa58:	aa03      	add	r2, sp, #12
   1aa5a:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
	uint32_t ticks_to_offset_default = 0U;
   1aa5e:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1aa60:	f7ff fe72 	bl	1a748 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   1aa64:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1aa68:	2208      	movs	r2, #8
   1aa6a:	f362 0303 	bfi	r3, r2, #0, #4
   1aa6e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
   1aa72:	b004      	add	sp, #16
   1aa74:	bd10      	pop	{r4, pc}
   1aa76:	bf00      	nop

0001aa78 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   1aa78:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   1aa7a:	4c08      	ldr	r4, [pc, #32]	; (1aa9c <ll_chm_update+0x24>)
   1aa7c:	2205      	movs	r2, #5
{
   1aa7e:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   1aa80:	4620      	mov	r0, r4
   1aa82:	f00d fe95 	bl	287b0 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   1aa86:	2105      	movs	r1, #5
   1aa88:	4620      	mov	r0, r4
   1aa8a:	f7f7 fdb1 	bl	125f0 <util_ones_count_get>
   1aa8e:	4b04      	ldr	r3, [pc, #16]	; (1aaa0 <ll_chm_update+0x28>)
   1aa90:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1aa92:	f7ff fe31 	bl	1a6f8 <ull_central_chm_update>
}
   1aa96:	2000      	movs	r0, #0
   1aa98:	bd10      	pop	{r4, pc}
   1aa9a:	bf00      	nop
   1aa9c:	200006d4 	.word	0x200006d4
   1aaa0:	20000903 	.word	0x20000903

0001aaa4 <ull_chan_map_get>:
{
   1aaa4:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   1aaa6:	4903      	ldr	r1, [pc, #12]	; (1aab4 <ull_chan_map_get+0x10>)
   1aaa8:	2205      	movs	r2, #5
   1aaaa:	f00d fe81 	bl	287b0 <memcpy>
	return count;
   1aaae:	4b02      	ldr	r3, [pc, #8]	; (1aab8 <ull_chan_map_get+0x14>)
}
   1aab0:	7818      	ldrb	r0, [r3, #0]
   1aab2:	bd08      	pop	{r3, pc}
   1aab4:	200006d4 	.word	0x200006d4
   1aab8:	20000903 	.word	0x20000903

0001aabc <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1aabc:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1aabe:	fb02 1c01 	mla	ip, r2, r1, r1
   1aac2:	7802      	ldrb	r2, [r0, #0]
   1aac4:	491c      	ldr	r1, [pc, #112]	; (1ab38 <lll_chan_sel_1+0x7c>)
{
   1aac6:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1aaca:	4494      	add	ip, r2
   1aacc:	fb81 210c 	smull	r2, r1, r1, ip
   1aad0:	4461      	add	r1, ip
   1aad2:	1149      	asrs	r1, r1, #5
   1aad4:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1aad8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1aadc:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1aade:	ebac 0101 	sub.w	r1, ip, r1
   1aae2:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1aae4:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1aae6:	08c4      	lsrs	r4, r0, #3
   1aae8:	f001 0107 	and.w	r1, r1, #7
   1aaec:	f813 c004 	ldrb.w	ip, [r3, r4]
   1aaf0:	fa4c f101 	asr.w	r1, ip, r1
   1aaf4:	f011 0101 	ands.w	r1, r1, #1
   1aaf8:	d11d      	bne.n	1ab36 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1aafa:	fbb0 f2f5 	udiv	r2, r0, r5
   1aafe:	fb05 0212 	mls	r2, r5, r2, r0
   1ab02:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1ab04:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1ab08:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1ab0a:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1ab0c:	f100 0c08 	add.w	ip, r0, #8
   1ab10:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1ab14:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1ab18:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1ab1c:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1ab20:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1ab24:	d002      	beq.n	1ab2c <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1ab26:	b132      	cbz	r2, 1ab36 <lll_chan_sel_1+0x7a>
				chan_index--;
   1ab28:	3a01      	subs	r2, #1
   1ab2a:	b2d2      	uxtb	r2, r2
			chan_next++;
   1ab2c:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1ab2e:	4584      	cmp	ip, r0
   1ab30:	d1f2      	bne.n	1ab18 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1ab32:	45a6      	cmp	lr, r4
   1ab34:	d1ea      	bne.n	1ab0c <lll_chan_sel_1+0x50>
}
   1ab36:	bd30      	pop	{r4, r5, pc}
   1ab38:	dd67c8a7 	.word	0xdd67c8a7

0001ab3c <lll_chan_id>:
	return aa_ms ^ aa_ls;
   1ab3c:	8842      	ldrh	r2, [r0, #2]
   1ab3e:	8800      	ldrh	r0, [r0, #0]
}
   1ab40:	4050      	eors	r0, r2
   1ab42:	4770      	bx	lr

0001ab44 <lll_chan_sel_2>:
{
   1ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1ab46:	4d2f      	ldr	r5, [pc, #188]	; (1ac04 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1ab48:	4c2f      	ldr	r4, [pc, #188]	; (1ac08 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1ab4a:	4048      	eors	r0, r1
   1ab4c:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1ab50:	0a07      	lsrs	r7, r0, #8
   1ab52:	b2c0      	uxtb	r0, r0
   1ab54:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1ab58:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1ab5c:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1ab60:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1ab64:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1ab68:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1ab6c:	433e      	orrs	r6, r7
   1ab6e:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1ab72:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1ab76:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1ab7a:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1ab7e:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1ab82:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1ab84:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1ab88:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1ab8c:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1ab90:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1ab94:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1ab96:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1ab9a:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1ab9c:	d1d8      	bne.n	1ab50 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1ab9e:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1aba0:	481a      	ldr	r0, [pc, #104]	; (1ac0c <lll_chan_sel_2+0xc8>)
   1aba2:	fba0 4001 	umull	r4, r0, r0, r1
   1aba6:	1a0c      	subs	r4, r1, r0
   1aba8:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1abac:	0940      	lsrs	r0, r0, #5
   1abae:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1abb2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1abb6:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1abb8:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1abbc:	f000 0507 	and.w	r5, r0, #7
   1abc0:	5d14      	ldrb	r4, [r2, r4]
   1abc2:	412c      	asrs	r4, r5
   1abc4:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1abc6:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1abc8:	d41a      	bmi.n	1ac00 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1abca:	fb01 f303 	mul.w	r3, r1, r3
   1abce:	1e56      	subs	r6, r2, #1
   1abd0:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1abd4:	3204      	adds	r2, #4
	chan_next = 0U;
   1abd6:	4660      	mov	r0, ip
		bite = *chan_map;
   1abd8:	f100 0508 	add.w	r5, r0, #8
   1abdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1abe0:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1abe2:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1abe6:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1abea:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1abee:	d002      	beq.n	1abf6 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1abf0:	b133      	cbz	r3, 1ac00 <lll_chan_sel_2+0xbc>
				chan_index--;
   1abf2:	3b01      	subs	r3, #1
   1abf4:	b2db      	uxtb	r3, r3
			chan_next++;
   1abf6:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1abf8:	42a8      	cmp	r0, r5
   1abfa:	d1f2      	bne.n	1abe2 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1abfc:	42b2      	cmp	r2, r6
   1abfe:	d1eb      	bne.n	1abd8 <lll_chan_sel_2+0x94>
}
   1ac00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac02:	bf00      	nop
   1ac04:	00022110 	.word	0x00022110
   1ac08:	00088440 	.word	0x00088440
   1ac0c:	bacf914d 	.word	0xbacf914d

0001ac10 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   1ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ac14:	4d18      	ldr	r5, [pc, #96]	; (1ac78 <rl_update+0x68>)
   1ac16:	4e19      	ldr	r6, [pc, #100]	; (1ac7c <rl_update+0x6c>)
   1ac18:	2400      	movs	r4, #0
   1ac1a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1ac1e:	1eaf      	subs	r7, r5, #2
   1ac20:	f04f 0801 	mov.w	r8, #1
   1ac24:	e006      	b.n	1ac34 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ac26:	3401      	adds	r4, #1
   1ac28:	2c08      	cmp	r4, #8
   1ac2a:	f105 0506 	add.w	r5, r5, #6
   1ac2e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ac32:	d01e      	beq.n	1ac72 <rl_update+0x62>
		if (rl[i].taken) {
   1ac34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ac38:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   1ac3c:	07da      	lsls	r2, r3, #31
   1ac3e:	d5f2      	bpl.n	1ac26 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1ac40:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ac42:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1ac44:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1ac48:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ac4c:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1ac4e:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ac52:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1ac54:	4631      	mov	r1, r6
   1ac56:	4628      	mov	r0, r5
   1ac58:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ac5a:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   1ac5c:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ac60:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1ac62:	f00d fda5 	bl	287b0 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ac66:	2c08      	cmp	r4, #8
   1ac68:	f105 0506 	add.w	r5, r5, #6
   1ac6c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ac70:	d1e0      	bne.n	1ac34 <rl_update+0x24>
}
   1ac72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ac76:	bf00      	nop
   1ac78:	20004e1a 	.word	0x20004e1a
   1ac7c:	20004cd9 	.word	0x20004cd9

0001ac80 <fal_update>:
{
   1ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac84:	4e20      	ldr	r6, [pc, #128]	; (1ad08 <fal_update+0x88>)
   1ac86:	4d21      	ldr	r5, [pc, #132]	; (1ad0c <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1ac88:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1ad10 <fal_update+0x90>
   1ac8c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1ad14 <fal_update+0x94>
{
   1ac90:	2400      	movs	r4, #0
   1ac92:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   1ac96:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   1ac98:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1ac9c:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   1aca0:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1aca4:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   1aca6:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1acaa:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   1acac:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1acb0:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   1acb4:	d021      	beq.n	1acfa <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1acb6:	f898 3000 	ldrb.w	r3, [r8]
   1acba:	b163      	cbz	r3, 1acd6 <fal_update+0x56>
		j = fal[i].rl_idx;
   1acbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1acc0:	2b07      	cmp	r3, #7
   1acc2:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   1acc6:	d806      	bhi.n	1acd6 <fal_update+0x56>
   1acc8:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   1accc:	f013 0f04 	tst.w	r3, #4
   1acd0:	d001      	beq.n	1acd6 <fal_update+0x56>
   1acd2:	06db      	lsls	r3, r3, #27
   1acd4:	d511      	bpl.n	1acfa <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1acd6:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1acda:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1acde:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   1ace2:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ace6:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1acea:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1acee:	40a3      	lsls	r3, r4
   1acf0:	ea4e 0303 	orr.w	r3, lr, r3
   1acf4:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1acf6:	f00d fd5b 	bl	287b0 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   1acfa:	3401      	adds	r4, #1
   1acfc:	2c08      	cmp	r4, #8
   1acfe:	f105 0508 	add.w	r5, r5, #8
   1ad02:	d1c9      	bne.n	1ac98 <fal_update+0x18>
}
   1ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ad08:	20004bee 	.word	0x20004bee
   1ad0c:	20004bae 	.word	0x20004bae
   1ad10:	20005fe2 	.word	0x20005fe2
   1ad14:	20004cd8 	.word	0x20004cd8

0001ad18 <ll_fal_size_get>:
}
   1ad18:	2008      	movs	r0, #8
   1ad1a:	4770      	bx	lr

0001ad1c <ll_fal_clear>:
{
   1ad1c:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1ad1e:	2000      	movs	r0, #0
   1ad20:	f7fc f952 	bl	16fc8 <ull_adv_filter_pol_get>
   1ad24:	b9f0      	cbnz	r0, 1ad64 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1ad26:	f7fc fb6d 	bl	17404 <ull_scan_filter_pol_get>
   1ad2a:	f010 0001 	ands.w	r0, r0, #1
   1ad2e:	d119      	bne.n	1ad64 <ll_fal_clear+0x48>
   1ad30:	4a0d      	ldr	r2, [pc, #52]	; (1ad68 <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   1ad32:	4c0e      	ldr	r4, [pc, #56]	; (1ad6c <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   1ad34:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1ad38:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1ad3a:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1ad3c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1ad40:	d805      	bhi.n	1ad4e <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   1ad42:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1ad46:	f36f 1345 	bfc	r3, #5, #1
   1ad4a:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1ad4e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1ad52:	f36f 0300 	bfc	r3, #0, #1
   1ad56:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1ad5a:	3001      	adds	r0, #1
   1ad5c:	2808      	cmp	r0, #8
   1ad5e:	d1e9      	bne.n	1ad34 <ll_fal_clear+0x18>
	return 0;
   1ad60:	2000      	movs	r0, #0
}
   1ad62:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad64:	200c      	movs	r0, #12
}
   1ad66:	bd10      	pop	{r4, pc}
   1ad68:	20004bac 	.word	0x20004bac
   1ad6c:	20004cd8 	.word	0x20004cd8

0001ad70 <ll_fal_add>:
{
   1ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad74:	4607      	mov	r7, r0
   1ad76:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   1ad78:	2000      	movs	r0, #0
   1ad7a:	f7fc f925 	bl	16fc8 <ull_adv_filter_pol_get>
   1ad7e:	2800      	cmp	r0, #0
   1ad80:	d16f      	bne.n	1ae62 <ll_fal_add+0xf2>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1ad82:	f7fc fb3f 	bl	17404 <ull_scan_filter_pol_get>
   1ad86:	f010 0401 	ands.w	r4, r0, #1
   1ad8a:	d16a      	bne.n	1ae62 <ll_fal_add+0xf2>
	if (addr->type == ADDR_TYPE_ANON) {
   1ad8c:	f897 a000 	ldrb.w	sl, [r7]
   1ad90:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1ad94:	d069      	beq.n	1ae6a <ll_fal_add+0xfa>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1ad96:	4e41      	ldr	r6, [pc, #260]	; (1ae9c <ll_fal_add+0x12c>)
   1ad98:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ad9c:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1ada0:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1ada4:	4625      	mov	r5, r4
   1ada6:	f1a6 0802 	sub.w	r8, r6, #2
   1adaa:	e009      	b.n	1adc0 <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   1adac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1adb0:	d101      	bne.n	1adb6 <ll_fal_add+0x46>
			*free_idx = i;
   1adb2:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   1adb6:	3501      	adds	r5, #1
   1adb8:	2d08      	cmp	r5, #8
   1adba:	f106 0608 	add.w	r6, r6, #8
   1adbe:	d017      	beq.n	1adf0 <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1adc0:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1adc4:	07d8      	lsls	r0, r3, #31
   1adc6:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1adca:	d5ef      	bpl.n	1adac <ll_fal_add+0x3c>
   1adcc:	4552      	cmp	r2, sl
   1adce:	d1f2      	bne.n	1adb6 <ll_fal_add+0x46>
   1add0:	2206      	movs	r2, #6
   1add2:	4630      	mov	r0, r6
   1add4:	4659      	mov	r1, fp
   1add6:	f00d fcc2 	bl	2875e <memcmp>
   1adda:	2800      	cmp	r0, #0
   1addc:	d03e      	beq.n	1ae5c <ll_fal_add+0xec>
		} else if (free_idx && !fal[i].taken &&
   1adde:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1ade2:	07d9      	lsls	r1, r3, #31
   1ade4:	d5e2      	bpl.n	1adac <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   1ade6:	3501      	adds	r5, #1
   1ade8:	2d08      	cmp	r5, #8
   1adea:	f106 0608 	add.w	r6, r6, #8
   1adee:	d1e7      	bne.n	1adc0 <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   1adf0:	f1b9 0f07 	cmp.w	r9, #7
   1adf4:	d83d      	bhi.n	1ae72 <ll_fal_add+0x102>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1adf6:	783a      	ldrb	r2, [r7, #0]
   1adf8:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1adfc:	4e28      	ldr	r6, [pc, #160]	; (1aea0 <ll_fal_add+0x130>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1adfe:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   1ae00:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1ae04:	fb15 0009 	smlabb	r0, r5, r9, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   1ae08:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   1ae0c:	4440      	add	r0, r8
   1ae0e:	2206      	movs	r2, #6
   1ae10:	4659      	mov	r1, fp
   1ae12:	f00d fccd 	bl	287b0 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1ae16:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ae18:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ae1a:	f003 0301 	and.w	r3, r3, #1
   1ae1e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1ae22:	fa5f fa84 	uxtb.w	sl, r4
   1ae26:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   1ae2a:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1ae2e:	07d2      	lsls	r2, r2, #31
   1ae30:	f104 0401 	add.w	r4, r4, #1
   1ae34:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ae38:	d501      	bpl.n	1ae3e <ll_fal_add+0xce>
   1ae3a:	4299      	cmp	r1, r3
   1ae3c:	d01b      	beq.n	1ae76 <ll_fal_add+0x106>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ae3e:	2c08      	cmp	r4, #8
   1ae40:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ae44:	d1eb      	bne.n	1ae1e <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1ae46:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1ae4a:	22ff      	movs	r2, #255	; 0xff
   1ae4c:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1ae4e:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1ae52:	f043 0301 	orr.w	r3, r3, #1
   1ae56:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   1ae5a:	2000      	movs	r0, #0
}
   1ae5c:	b003      	add	sp, #12
   1ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ae62:	200c      	movs	r0, #12
}
   1ae64:	b003      	add	sp, #12
   1ae66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   1ae6a:	4620      	mov	r0, r4
}
   1ae6c:	b003      	add	sp, #12
   1ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae72:	2007      	movs	r0, #7
	return fal_add(addr);
   1ae74:	e7f2      	b.n	1ae5c <ll_fal_add+0xec>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ae76:	4630      	mov	r0, r6
   1ae78:	2206      	movs	r2, #6
   1ae7a:	4659      	mov	r1, fp
   1ae7c:	9301      	str	r3, [sp, #4]
   1ae7e:	f00d fc6e 	bl	2875e <memcmp>
   1ae82:	9b01      	ldr	r3, [sp, #4]
   1ae84:	2800      	cmp	r0, #0
   1ae86:	d1da      	bne.n	1ae3e <ll_fal_add+0xce>
		rl[j].fal = 1U;
   1ae88:	5d7b      	ldrb	r3, [r7, r5]
   1ae8a:	f043 0320 	orr.w	r3, r3, #32
   1ae8e:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   1ae90:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1ae94:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1ae98:	e7d9      	b.n	1ae4e <ll_fal_add+0xde>
   1ae9a:	bf00      	nop
   1ae9c:	20004bae 	.word	0x20004bae
   1aea0:	20004cd9 	.word	0x20004cd9

0001aea4 <ll_fal_remove>:
{
   1aea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aea8:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   1aeaa:	2000      	movs	r0, #0
   1aeac:	f7fc f88c 	bl	16fc8 <ull_adv_filter_pol_get>
   1aeb0:	b9f0      	cbnz	r0, 1aef0 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1aeb2:	f7fc faa7 	bl	17404 <ull_scan_filter_pol_get>
   1aeb6:	f010 0401 	ands.w	r4, r0, #1
   1aeba:	d119      	bne.n	1aef0 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   1aebc:	f896 8000 	ldrb.w	r8, [r6]
   1aec0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1aec4:	d035      	beq.n	1af32 <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   1aec6:	4d1c      	ldr	r5, [pc, #112]	; (1af38 <ll_fal_remove+0x94>)
   1aec8:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   1aeca:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1aecc:	f008 0801 	and.w	r8, r8, #1
   1aed0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1aed4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1aed8:	07db      	lsls	r3, r3, #31
   1aeda:	d501      	bpl.n	1aee0 <ll_fal_remove+0x3c>
   1aedc:	4542      	cmp	r2, r8
   1aede:	d00a      	beq.n	1aef6 <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   1aee0:	3401      	adds	r4, #1
   1aee2:	2c08      	cmp	r4, #8
   1aee4:	f105 0508 	add.w	r5, r5, #8
   1aee8:	d1f2      	bne.n	1aed0 <ll_fal_remove+0x2c>
   1aeea:	2002      	movs	r0, #2
}
   1aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aef0:	200c      	movs	r0, #12
}
   1aef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1aef6:	2206      	movs	r2, #6
   1aef8:	4628      	mov	r0, r5
   1aefa:	4631      	mov	r1, r6
   1aefc:	f00d fc2f 	bl	2875e <memcmp>
   1af00:	2800      	cmp	r0, #0
   1af02:	d1ed      	bne.n	1aee0 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   1af04:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1af08:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1af0a:	2b07      	cmp	r3, #7
   1af0c:	d808      	bhi.n	1af20 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   1af0e:	4a0b      	ldr	r2, [pc, #44]	; (1af3c <ll_fal_remove+0x98>)
   1af10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1af14:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1af18:	f360 1145 	bfi	r1, r0, #5, #1
   1af1c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1af20:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1af24:	f36f 0300 	bfc	r3, #0, #1
   1af28:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   1af2c:	2000      	movs	r0, #0
}
   1af2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1af32:	4620      	mov	r0, r4
}
   1af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1af38:	20004bae 	.word	0x20004bae
   1af3c:	20004cd8 	.word	0x20004cd8

0001af40 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1af40:	2807      	cmp	r0, #7
{
   1af42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af46:	4604      	mov	r4, r0
   1af48:	460e      	mov	r6, r1
   1af4a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1af4c:	d817      	bhi.n	1af7e <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1af4e:	4d1a      	ldr	r5, [pc, #104]	; (1afb8 <ll_rl_id_addr_get+0x78>)
   1af50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1af54:	00a7      	lsls	r7, r4, #2
   1af56:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1af5a:	07db      	lsls	r3, r3, #31
   1af5c:	d51d      	bpl.n	1af9a <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1af5e:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1af60:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1af62:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1af66:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1af6a:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1af6e:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1af70:	4640      	mov	r0, r8
   1af72:	2206      	movs	r2, #6
}
   1af74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1af78:	3101      	adds	r1, #1
   1af7a:	f00d bc19 	b.w	287b0 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1af7e:	4a0f      	ldr	r2, [pc, #60]	; (1afbc <ll_rl_id_addr_get+0x7c>)
   1af80:	490f      	ldr	r1, [pc, #60]	; (1afc0 <ll_rl_id_addr_get+0x80>)
   1af82:	4810      	ldr	r0, [pc, #64]	; (1afc4 <ll_rl_id_addr_get+0x84>)
   1af84:	f44f 7389 	mov.w	r3, #274	; 0x112
   1af88:	f00a fdbc 	bl	25b04 <printk>
   1af8c:	4040      	eors	r0, r0
   1af8e:	f380 8811 	msr	BASEPRI, r0
   1af92:	f04f 0003 	mov.w	r0, #3
   1af96:	df02      	svc	2
   1af98:	e7d9      	b.n	1af4e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1af9a:	4a08      	ldr	r2, [pc, #32]	; (1afbc <ll_rl_id_addr_get+0x7c>)
   1af9c:	490a      	ldr	r1, [pc, #40]	; (1afc8 <ll_rl_id_addr_get+0x88>)
   1af9e:	4809      	ldr	r0, [pc, #36]	; (1afc4 <ll_rl_id_addr_get+0x84>)
   1afa0:	f240 1313 	movw	r3, #275	; 0x113
   1afa4:	f00a fdae 	bl	25b04 <printk>
   1afa8:	4040      	eors	r0, r0
   1afaa:	f380 8811 	msr	BASEPRI, r0
   1afae:	f04f 0003 	mov.w	r0, #3
   1afb2:	df02      	svc	2
   1afb4:	e7d3      	b.n	1af5e <ll_rl_id_addr_get+0x1e>
   1afb6:	bf00      	nop
   1afb8:	20004cd8 	.word	0x20004cd8
   1afbc:	0002d298 	.word	0x0002d298
   1afc0:	0002d2dc 	.word	0x0002d2dc
   1afc4:	0002c8dc 	.word	0x0002c8dc
   1afc8:	0002d2e8 	.word	0x0002d2e8

0001afcc <ll_rl_size_get>:
   1afcc:	2008      	movs	r0, #8
   1afce:	4770      	bx	lr

0001afd0 <ll_rl_clear>:
{
   1afd0:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1afd2:	2000      	movs	r0, #0
   1afd4:	f7fb ffec 	bl	16fb0 <ull_adv_is_enabled>
		? 0 : 1;
   1afd8:	b108      	cbz	r0, 1afde <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1afda:	200c      	movs	r0, #12
}
   1afdc:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1afde:	f7fc f9f9 	bl	173d4 <ull_scan_is_enabled>
		? 0 : 1;
   1afe2:	f030 0001 	bics.w	r0, r0, #1
   1afe6:	d1f8      	bne.n	1afda <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   1afe8:	4b18      	ldr	r3, [pc, #96]	; (1b04c <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   1afea:	4c19      	ldr	r4, [pc, #100]	; (1b050 <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   1afec:	7819      	ldrb	r1, [r3, #0]
   1afee:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1aff2:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1aff4:	f360 0100 	bfi	r1, r0, #0, #1
   1aff8:	f360 0200 	bfi	r2, r0, #0, #1
   1affc:	7019      	strb	r1, [r3, #0]
   1affe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1b002:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   1b006:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1b00a:	f360 0100 	bfi	r1, r0, #0, #1
   1b00e:	f360 0200 	bfi	r2, r0, #0, #1
   1b012:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   1b016:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1b01a:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1b01e:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1b022:	f360 0100 	bfi	r1, r0, #0, #1
   1b026:	f360 0200 	bfi	r2, r0, #0, #1
   1b02a:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1b02e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1b032:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1b036:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1b03a:	f360 0100 	bfi	r1, r0, #0, #1
   1b03e:	f360 0200 	bfi	r2, r0, #0, #1
   1b042:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1b046:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1b04a:	bd10      	pop	{r4, pc}
   1b04c:	20004cd8 	.word	0x20004cd8
   1b050:	20005fe1 	.word	0x20005fe1

0001b054 <ll_rl_remove>:
{
   1b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b058:	b083      	sub	sp, #12
   1b05a:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b05c:	2000      	movs	r0, #0
{
   1b05e:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b060:	f7fb ffa6 	bl	16fb0 <ull_adv_is_enabled>
		? 0 : 1;
   1b064:	b118      	cbz	r0, 1b06e <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b066:	200c      	movs	r0, #12
}
   1b068:	b003      	add	sp, #12
   1b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b06e:	f7fc f9b1 	bl	173d4 <ull_scan_is_enabled>
		? 0 : 1;
   1b072:	f030 0b01 	bics.w	fp, r0, #1
   1b076:	d1f6      	bne.n	1b066 <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b078:	9b00      	ldr	r3, [sp, #0]
   1b07a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1b1b0 <ll_rl_remove+0x15c>
   1b07e:	f813 ab01 	ldrb.w	sl, [r3], #1
   1b082:	465c      	mov	r4, fp
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b084:	f00a 0a01 	and.w	sl, sl, #1
   1b088:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1b08c:	461e      	mov	r6, r3
   1b08e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b092:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1b096:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b09a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b09e:	07db      	lsls	r3, r3, #31
   1b0a0:	ea4f 0984 	mov.w	r9, r4, lsl #2
   1b0a4:	d501      	bpl.n	1b0aa <ll_rl_remove+0x56>
   1b0a6:	4552      	cmp	r2, sl
   1b0a8:	d008      	beq.n	1b0bc <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b0aa:	3401      	adds	r4, #1
   1b0ac:	2c08      	cmp	r4, #8
   1b0ae:	f108 0828 	add.w	r8, r8, #40	; 0x28
   1b0b2:	d1ec      	bne.n	1b08e <ll_rl_remove+0x3a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b0b4:	2002      	movs	r0, #2
}
   1b0b6:	b003      	add	sp, #12
   1b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b0bc:	4640      	mov	r0, r8
   1b0be:	2206      	movs	r2, #6
   1b0c0:	4631      	mov	r1, r6
   1b0c2:	f00d fb4c 	bl	2875e <memcmp>
   1b0c6:	2800      	cmp	r0, #0
   1b0c8:	d1ef      	bne.n	1b0aa <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   1b0ca:	782a      	ldrb	r2, [r5, #0]
   1b0cc:	0752      	lsls	r2, r2, #29
   1b0ce:	4633      	mov	r3, r6
   1b0d0:	4606      	mov	r6, r0
   1b0d2:	d535      	bpl.n	1b140 <ll_rl_remove+0xec>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b0d4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1b1b4 <ll_rl_remove+0x160>
   1b0d8:	f89a 8000 	ldrb.w	r8, [sl]
   1b0dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   1b0e0:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   1b0e4:	d02a      	beq.n	1b13c <ll_rl_remove+0xe8>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b0e6:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   1b0e8:	4545      	cmp	r5, r8
   1b0ea:	d027      	beq.n	1b13c <ll_rl_remove+0xe8>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   1b0ec:	4832      	ldr	r0, [pc, #200]	; (1b1b8 <ll_rl_remove+0x164>)
   1b0ee:	9301      	str	r3, [sp, #4]
   1b0f0:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1b0f4:	2210      	movs	r2, #16
   1b0f6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   1b0fa:	f00d fb59 	bl	287b0 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   1b0fe:	482f      	ldr	r0, [pc, #188]	; (1b1bc <ll_rl_remove+0x168>)
   1b100:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   1b102:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   1b106:	fa5f fc8b 	uxtb.w	ip, fp
   1b10a:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   1b10e:	f011 0f01 	tst.w	r1, #1
   1b112:	f10b 0b01 	add.w	fp, fp, #1
   1b116:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   1b11a:	d004      	beq.n	1b126 <ll_rl_remove+0xd2>
   1b11c:	0749      	lsls	r1, r1, #29
   1b11e:	d502      	bpl.n	1b126 <ll_rl_remove+0xd2>
   1b120:	7dc1      	ldrb	r1, [r0, #23]
   1b122:	4541      	cmp	r1, r8
   1b124:	d039      	beq.n	1b19a <ll_rl_remove+0x146>
				for (k = 0U;
   1b126:	f1bb 0f08 	cmp.w	fp, #8
   1b12a:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1b12e:	d1e8      	bne.n	1b102 <ll_rl_remove+0xae>
			peer_irk_count--;
   1b130:	f89a 8000 	ldrb.w	r8, [sl]
   1b134:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b138:	fa5f f888 	uxtb.w	r8, r8
   1b13c:	f88a 8000 	strb.w	r8, [sl]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1b140:	9a00      	ldr	r2, [sp, #0]
   1b142:	4d1f      	ldr	r5, [pc, #124]	; (1b1c0 <ll_rl_remove+0x16c>)
   1b144:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   1b148:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b14c:	f00a 0a01 	and.w	sl, sl, #1
   1b150:	469b      	mov	fp, r3
   1b152:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   1b156:	07d1      	lsls	r1, r2, #31
   1b158:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1b15c:	d501      	bpl.n	1b162 <ll_rl_remove+0x10e>
   1b15e:	4550      	cmp	r0, sl
   1b160:	d00f      	beq.n	1b182 <ll_rl_remove+0x12e>
	for (i = 0; i < FAL_SIZE; i++) {
   1b162:	3601      	adds	r6, #1
   1b164:	2e08      	cmp	r6, #8
   1b166:	f105 0508 	add.w	r5, r5, #8
   1b16a:	d1f2      	bne.n	1b152 <ll_rl_remove+0xfe>
		rl[i].taken = 0U;
   1b16c:	444c      	add	r4, r9
		return 0;
   1b16e:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1b170:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1b174:	f36f 0300 	bfc	r3, #0, #1
   1b178:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   1b17c:	b003      	add	sp, #12
   1b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b182:	2206      	movs	r2, #6
   1b184:	4628      	mov	r0, r5
   1b186:	4659      	mov	r1, fp
   1b188:	f00d fae9 	bl	2875e <memcmp>
   1b18c:	2800      	cmp	r0, #0
   1b18e:	d1e8      	bne.n	1b162 <ll_rl_remove+0x10e>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1b190:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   1b194:	23ff      	movs	r3, #255	; 0xff
   1b196:	7073      	strb	r3, [r6, #1]
   1b198:	e7e8      	b.n	1b16c <ll_rl_remove+0x118>
			peer_irk_count--;
   1b19a:	f89a 8000 	ldrb.w	r8, [sl]
						rl[k].pirk_idx = pi;
   1b19e:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1b1a0:	4a08      	ldr	r2, [pc, #32]	; (1b1c4 <ll_rl_remove+0x170>)
			peer_irk_count--;
   1b1a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   1b1a6:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   1b1aa:	fa5f f888 	uxtb.w	r8, r8
						break;
   1b1ae:	e7c5      	b.n	1b13c <ll_rl_remove+0xe8>
   1b1b0:	20004cd9 	.word	0x20004cd9
   1b1b4:	20005fe1 	.word	0x20005fe1
   1b1b8:	20004c58 	.word	0x20004c58
   1b1bc:	20004cd8 	.word	0x20004cd8
   1b1c0:	20004bae 	.word	0x20004bae
   1b1c4:	20004c50 	.word	0x20004c50

0001b1c8 <ll_rl_crpa_set>:
{
   1b1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1b1cc:	795c      	ldrb	r4, [r3, #5]
   1b1ce:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1b1d2:	2c40      	cmp	r4, #64	; 0x40
   1b1d4:	d001      	beq.n	1b1da <ll_rl_crpa_set+0x12>
}
   1b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1b1da:	461e      	mov	r6, r3
   1b1dc:	460f      	mov	r7, r1
   1b1de:	b301      	cbz	r1, 1b222 <ll_rl_crpa_set+0x5a>
   1b1e0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1b24c <ll_rl_crpa_set+0x84>
   1b1e4:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b1e6:	f000 0a01 	and.w	sl, r0, #1
   1b1ea:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   1b1ee:	e003      	b.n	1b1f8 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b1f0:	2c08      	cmp	r4, #8
   1b1f2:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1b1f6:	d0ee      	beq.n	1b1d6 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b1f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b1fc:	4625      	mov	r5, r4
   1b1fe:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1b202:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1b206:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b208:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b20c:	d5f0      	bpl.n	1b1f0 <ll_rl_crpa_set+0x28>
   1b20e:	4553      	cmp	r3, sl
   1b210:	d1ee      	bne.n	1b1f0 <ll_rl_crpa_set+0x28>
   1b212:	4648      	mov	r0, r9
   1b214:	2206      	movs	r2, #6
   1b216:	4639      	mov	r1, r7
   1b218:	f00d faa1 	bl	2875e <memcmp>
   1b21c:	2800      	cmp	r0, #0
   1b21e:	d1e7      	bne.n	1b1f0 <ll_rl_crpa_set+0x28>
   1b220:	e004      	b.n	1b22c <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1b222:	2a07      	cmp	r2, #7
   1b224:	d8d7      	bhi.n	1b1d6 <ll_rl_crpa_set+0xe>
   1b226:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1b250 <ll_rl_crpa_set+0x88>
   1b22a:	4615      	mov	r5, r2
   1b22c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b230:	00e8      	lsls	r0, r5, #3
   1b232:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1b236:	07db      	lsls	r3, r3, #31
   1b238:	d5cd      	bpl.n	1b1d6 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1b23a:	3018      	adds	r0, #24
   1b23c:	4631      	mov	r1, r6
   1b23e:	4440      	add	r0, r8
   1b240:	2206      	movs	r2, #6
}
   1b242:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1b246:	f00d bab3 	b.w	287b0 <memcpy>
   1b24a:	bf00      	nop
   1b24c:	20004cd9 	.word	0x20004cd9
   1b250:	20004cd8 	.word	0x20004cd8

0001b254 <ll_rl_crpa_get>:
{
   1b254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b258:	4682      	mov	sl, r0
   1b25a:	4e1a      	ldr	r6, [pc, #104]	; (1b2c4 <ll_rl_crpa_get+0x70>)
   1b25c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1b260:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b262:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b264:	f008 0801 	and.w	r8, r8, #1
   1b268:	1e77      	subs	r7, r6, #1
   1b26a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b26e:	00d5      	lsls	r5, r2, #3
   1b270:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b274:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b278:	07db      	lsls	r3, r3, #31
   1b27a:	f104 0401 	add.w	r4, r4, #1
   1b27e:	d501      	bpl.n	1b284 <ll_rl_crpa_get+0x30>
   1b280:	4542      	cmp	r2, r8
   1b282:	d006      	beq.n	1b292 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b284:	2c08      	cmp	r4, #8
   1b286:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b28a:	d1ee      	bne.n	1b26a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b28c:	2002      	movs	r0, #2
}
   1b28e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b292:	4630      	mov	r0, r6
   1b294:	2206      	movs	r2, #6
   1b296:	4651      	mov	r1, sl
   1b298:	f00d fa61 	bl	2875e <memcmp>
   1b29c:	4683      	mov	fp, r0
   1b29e:	2800      	cmp	r0, #0
   1b2a0:	d1f0      	bne.n	1b284 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1b2a2:	f105 0218 	add.w	r2, r5, #24
   1b2a6:	4417      	add	r7, r2
   1b2a8:	2106      	movs	r1, #6
   1b2aa:	4638      	mov	r0, r7
   1b2ac:	f7f7 f814 	bl	122d8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1b2b0:	2800      	cmp	r0, #0
   1b2b2:	d0eb      	beq.n	1b28c <ll_rl_crpa_get+0x38>
   1b2b4:	2206      	movs	r2, #6
   1b2b6:	4639      	mov	r1, r7
   1b2b8:	4648      	mov	r0, r9
   1b2ba:	f00d fa79 	bl	287b0 <memcpy>
		return 0;
   1b2be:	4658      	mov	r0, fp
}
   1b2c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2c4:	20004cd9 	.word	0x20004cd9

0001b2c8 <ll_rl_lrpa_get>:
{
   1b2c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b2cc:	4681      	mov	r9, r0
   1b2ce:	4e16      	ldr	r6, [pc, #88]	; (1b328 <ll_rl_lrpa_get+0x60>)
   1b2d0:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1b2d4:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b2d6:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b2d8:	f008 0801 	and.w	r8, r8, #1
   1b2dc:	1e77      	subs	r7, r6, #1
   1b2de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b2e2:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1b2e6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b2ea:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b2ee:	07db      	lsls	r3, r3, #31
   1b2f0:	f104 0401 	add.w	r4, r4, #1
   1b2f4:	d501      	bpl.n	1b2fa <ll_rl_lrpa_get+0x32>
   1b2f6:	4542      	cmp	r2, r8
   1b2f8:	d006      	beq.n	1b308 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b2fa:	2c08      	cmp	r4, #8
   1b2fc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b300:	d1ed      	bne.n	1b2de <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b302:	2002      	movs	r0, #2
}
   1b304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b308:	4630      	mov	r0, r6
   1b30a:	2206      	movs	r2, #6
   1b30c:	4649      	mov	r1, r9
   1b30e:	f00d fa26 	bl	2875e <memcmp>
   1b312:	4683      	mov	fp, r0
   1b314:	2800      	cmp	r0, #0
   1b316:	d1f0      	bne.n	1b2fa <ll_rl_lrpa_get+0x32>
   1b318:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1b31a:	2206      	movs	r2, #6
   1b31c:	4650      	mov	r0, sl
   1b31e:	f00d fa47 	bl	287b0 <memcpy>
		return 0;
   1b322:	4658      	mov	r0, fp
}
   1b324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b328:	20004cd9 	.word	0x20004cd9

0001b32c <ll_rl_enable>:
{
   1b32c:	b510      	push	{r4, lr}
   1b32e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b330:	2000      	movs	r0, #0
   1b332:	f7fb fe3d 	bl	16fb0 <ull_adv_is_enabled>
		? 0 : 1;
   1b336:	b108      	cbz	r0, 1b33c <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b338:	200c      	movs	r0, #12
}
   1b33a:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b33c:	f7fc f84a 	bl	173d4 <ull_scan_is_enabled>
		? 0 : 1;
   1b340:	f030 0001 	bics.w	r0, r0, #1
   1b344:	d1f8      	bne.n	1b338 <ll_rl_enable+0xc>
	switch (enable) {
   1b346:	b134      	cbz	r4, 1b356 <ll_rl_enable+0x2a>
   1b348:	2c01      	cmp	r4, #1
   1b34a:	d102      	bne.n	1b352 <ll_rl_enable+0x26>
		rl_enable = 1U;
   1b34c:	4b04      	ldr	r3, [pc, #16]	; (1b360 <ll_rl_enable+0x34>)
   1b34e:	701c      	strb	r4, [r3, #0]
}
   1b350:	bd10      	pop	{r4, pc}
	switch (enable) {
   1b352:	2012      	movs	r0, #18
}
   1b354:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1b356:	4b02      	ldr	r3, [pc, #8]	; (1b360 <ll_rl_enable+0x34>)
   1b358:	701c      	strb	r4, [r3, #0]
	return 0;
   1b35a:	4620      	mov	r0, r4
}
   1b35c:	bd10      	pop	{r4, pc}
   1b35e:	bf00      	nop
   1b360:	20005fe2 	.word	0x20005fe2

0001b364 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1b364:	4b03      	ldr	r3, [pc, #12]	; (1b374 <ll_rl_timeout_set+0x10>)
   1b366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b36a:	fb02 f000 	mul.w	r0, r2, r0
   1b36e:	6018      	str	r0, [r3, #0]
}
   1b370:	4770      	bx	lr
   1b372:	bf00      	nop
   1b374:	20004e4c 	.word	0x20004e4c

0001b378 <ll_priv_mode_set>:
{
   1b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b37c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b37e:	2000      	movs	r0, #0
{
   1b380:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b382:	f7fb fe15 	bl	16fb0 <ull_adv_is_enabled>
		? 0 : 1;
   1b386:	b110      	cbz	r0, 1b38e <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b388:	200c      	movs	r0, #12
}
   1b38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b38e:	f7fc f821 	bl	173d4 <ull_scan_is_enabled>
		? 0 : 1;
   1b392:	f030 0401 	bics.w	r4, r0, #1
   1b396:	d1f7      	bne.n	1b388 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b398:	4e1a      	ldr	r6, [pc, #104]	; (1b404 <ll_priv_mode_set+0x8c>)
   1b39a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b39e:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b3a0:	f009 0901 	and.w	r9, r9, #1
   1b3a4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b3a8:	00d5      	lsls	r5, r2, #3
   1b3aa:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b3ae:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b3b2:	07db      	lsls	r3, r3, #31
   1b3b4:	f104 0401 	add.w	r4, r4, #1
   1b3b8:	d501      	bpl.n	1b3be <ll_priv_mode_set+0x46>
   1b3ba:	454a      	cmp	r2, r9
   1b3bc:	d006      	beq.n	1b3cc <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b3be:	2c08      	cmp	r4, #8
   1b3c0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b3c4:	d1ee      	bne.n	1b3a4 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b3c6:	2002      	movs	r0, #2
}
   1b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b3cc:	4630      	mov	r0, r6
   1b3ce:	2206      	movs	r2, #6
   1b3d0:	4651      	mov	r1, sl
   1b3d2:	f00d f9c4 	bl	2875e <memcmp>
   1b3d6:	2800      	cmp	r0, #0
   1b3d8:	d1f1      	bne.n	1b3be <ll_priv_mode_set+0x46>
		switch (mode) {
   1b3da:	f1b8 0f00 	cmp.w	r8, #0
   1b3de:	d00b      	beq.n	1b3f8 <ll_priv_mode_set+0x80>
   1b3e0:	f1b8 0f01 	cmp.w	r8, #1
   1b3e4:	d105      	bne.n	1b3f2 <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   1b3e6:	5d7b      	ldrb	r3, [r7, r5]
   1b3e8:	f043 0310 	orr.w	r3, r3, #16
   1b3ec:	557b      	strb	r3, [r7, r5]
}
   1b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1b3f2:	2012      	movs	r0, #18
}
   1b3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1b3f8:	5d7b      	ldrb	r3, [r7, r5]
   1b3fa:	f368 1304 	bfi	r3, r8, #4, #1
   1b3fe:	557b      	strb	r3, [r7, r5]
	return 0;
   1b400:	4640      	mov	r0, r8
			break;
   1b402:	e7c2      	b.n	1b38a <ll_priv_mode_set+0x12>
   1b404:	20004cd9 	.word	0x20004cd9

0001b408 <ull_filter_reset>:
{
   1b408:	b4d0      	push	{r4, r6, r7}
   1b40a:	4930      	ldr	r1, [pc, #192]	; (1b4cc <ull_filter_reset+0xc4>)
   1b40c:	4c30      	ldr	r4, [pc, #192]	; (1b4d0 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   1b40e:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   1b410:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1b414:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b416:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   1b418:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1b41c:	d805      	bhi.n	1b42a <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   1b41e:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   1b422:	f36f 1245 	bfc	r2, #5, #1
   1b426:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   1b42a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1b42e:	f36f 0200 	bfc	r2, #0, #1
   1b432:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1b436:	3301      	adds	r3, #1
   1b438:	2b08      	cmp	r3, #8
   1b43a:	d1e9      	bne.n	1b410 <ull_filter_reset+0x8>
	rl_enable = 0U;
   1b43c:	4a25      	ldr	r2, [pc, #148]	; (1b4d4 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1b43e:	4c26      	ldr	r4, [pc, #152]	; (1b4d8 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   1b440:	2300      	movs	r3, #0
   1b442:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   1b444:	780a      	ldrb	r2, [r1, #0]
   1b446:	f363 0200 	bfi	r2, r3, #0, #1
   1b44a:	700a      	strb	r2, [r1, #0]
   1b44c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   1b450:	f363 0200 	bfi	r2, r3, #0, #1
   1b454:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1b458:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   1b45c:	f363 0200 	bfi	r2, r3, #0, #1
   1b460:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   1b464:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1b468:	f363 0200 	bfi	r2, r3, #0, #1
   1b46c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1b470:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   1b474:	f363 0200 	bfi	r2, r3, #0, #1
   1b478:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   1b47c:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1b480:	f363 0200 	bfi	r2, r3, #0, #1
   1b484:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1b488:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   1b48c:	f363 0200 	bfi	r2, r3, #0, #1
   1b490:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   1b494:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1b498:	f363 0200 	bfi	r2, r3, #0, #1
   1b49c:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1b4a0:	4a0e      	ldr	r2, [pc, #56]	; (1b4dc <ull_filter_reset+0xd4>)
   1b4a2:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   1b4a4:	4b0e      	ldr	r3, [pc, #56]	; (1b4e0 <ull_filter_reset+0xd8>)
   1b4a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b4aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b4ae:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1b4b2:	4b0c      	ldr	r3, [pc, #48]	; (1b4e4 <ull_filter_reset+0xdc>)
   1b4b4:	6023      	str	r3, [r4, #0]
	if (init) {
   1b4b6:	b120      	cbz	r0, 1b4c2 <ull_filter_reset+0xba>
}
   1b4b8:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   1b4ba:	490b      	ldr	r1, [pc, #44]	; (1b4e8 <ull_filter_reset+0xe0>)
   1b4bc:	480b      	ldr	r0, [pc, #44]	; (1b4ec <ull_filter_reset+0xe4>)
   1b4be:	f00f bcdd 	b.w	2ae7c <k_work_init_delayable>
}
   1b4c2:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   1b4c4:	4809      	ldr	r0, [pc, #36]	; (1b4ec <ull_filter_reset+0xe4>)
   1b4c6:	f00f bce5 	b.w	2ae94 <k_work_cancel_delayable>
   1b4ca:	bf00      	nop
   1b4cc:	20004cd8 	.word	0x20004cd8
   1b4d0:	20004bac 	.word	0x20004bac
   1b4d4:	20005fe2 	.word	0x20005fe2
   1b4d8:	20004e4c 	.word	0x20004e4c
   1b4dc:	20005fe1 	.word	0x20005fe1
   1b4e0:	200035c0 	.word	0x200035c0
   1b4e4:	000dbba0 	.word	0x000dbba0
   1b4e8:	0001b7ad 	.word	0x0001b7ad
   1b4ec:	200035c8 	.word	0x200035c8

0001b4f0 <ull_filter_lll_get>:
		return &fal_filter;
   1b4f0:	4a03      	ldr	r2, [pc, #12]	; (1b500 <ull_filter_lll_get+0x10>)
   1b4f2:	4b04      	ldr	r3, [pc, #16]	; (1b504 <ull_filter_lll_get+0x14>)
}
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	bf0c      	ite	eq
   1b4f8:	4610      	moveq	r0, r2
   1b4fa:	4618      	movne	r0, r3
   1b4fc:	4770      	bx	lr
   1b4fe:	bf00      	nop
   1b500:	20004e18 	.word	0x20004e18
   1b504:	20004bec 	.word	0x20004bec

0001b508 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1b508:	b1a8      	cbz	r0, 1b536 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1b50a:	4a0c      	ldr	r2, [pc, #48]	; (1b53c <ull_filter_adv_scan_state_cb+0x34>)
   1b50c:	6812      	ldr	r2, [r2, #0]
{
   1b50e:	b510      	push	{r4, lr}
   1b510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1b514:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b518:	2100      	movs	r1, #0
   1b51a:	fbe2 0103 	umlal	r0, r1, r2, r3
   1b51e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b522:	2300      	movs	r3, #0
   1b524:	f7e5 fff8 	bl	1518 <__aeabi_uldivmod>
}
   1b528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b52c:	4602      	mov	r2, r0
   1b52e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1b530:	4803      	ldr	r0, [pc, #12]	; (1b540 <ull_filter_adv_scan_state_cb+0x38>)
   1b532:	f009 bbff 	b.w	24d34 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1b536:	4802      	ldr	r0, [pc, #8]	; (1b540 <ull_filter_adv_scan_state_cb+0x38>)
   1b538:	f00f bcac 	b.w	2ae94 <k_work_cancel_delayable>
   1b53c:	20004e4c 	.word	0x20004e4c
   1b540:	200035c8 	.word	0x200035c8

0001b544 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1b544:	4a0d      	ldr	r2, [pc, #52]	; (1b57c <ull_filter_adv_update+0x38>)
{
   1b546:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1b548:	2300      	movs	r3, #0
   1b54a:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   1b54c:	b970      	cbnz	r0, 1b56c <ull_filter_adv_update+0x28>
	if (rl_enable &&
   1b54e:	4b0c      	ldr	r3, [pc, #48]	; (1b580 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   1b550:	4a0c      	ldr	r2, [pc, #48]	; (1b584 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   1b552:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1b554:	2000      	movs	r0, #0
   1b556:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1b558:	b903      	cbnz	r3, 1b55c <ull_filter_adv_update+0x18>
}
   1b55a:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   1b55c:	f7fb ff3a 	bl	173d4 <ull_scan_is_enabled>
	if (rl_enable &&
   1b560:	2800      	cmp	r0, #0
   1b562:	d1fa      	bne.n	1b55a <ull_filter_adv_update+0x16>
}
   1b564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1b568:	f7ff bb52 	b.w	1ac10 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   1b56c:	4618      	mov	r0, r3
   1b56e:	f7fb ff49 	bl	17404 <ull_scan_filter_pol_get>
	if (adv_fp &&
   1b572:	07c3      	lsls	r3, r0, #31
   1b574:	d4eb      	bmi.n	1b54e <ull_filter_adv_update+0xa>
		fal_update();
   1b576:	f7ff fb83 	bl	1ac80 <fal_update>
   1b57a:	e7e8      	b.n	1b54e <ull_filter_adv_update+0xa>
   1b57c:	20004bec 	.word	0x20004bec
   1b580:	20005fe2 	.word	0x20005fe2
   1b584:	20004e18 	.word	0x20004e18

0001b588 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   1b588:	4a0e      	ldr	r2, [pc, #56]	; (1b5c4 <ull_filter_scan_update+0x3c>)
{
   1b58a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1b58c:	2300      	movs	r3, #0
   1b58e:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   1b590:	07c2      	lsls	r2, r0, #31
   1b592:	d40e      	bmi.n	1b5b2 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   1b594:	4b0c      	ldr	r3, [pc, #48]	; (1b5c8 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   1b596:	4a0d      	ldr	r2, [pc, #52]	; (1b5cc <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   1b598:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1b59a:	2000      	movs	r0, #0
   1b59c:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1b59e:	b903      	cbnz	r3, 1b5a2 <ull_filter_scan_update+0x1a>
}
   1b5a0:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   1b5a2:	f7fb fd05 	bl	16fb0 <ull_adv_is_enabled>
	if (rl_enable &&
   1b5a6:	2800      	cmp	r0, #0
   1b5a8:	d1fa      	bne.n	1b5a0 <ull_filter_scan_update+0x18>
}
   1b5aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1b5ae:	f7ff bb2f 	b.w	1ac10 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   1b5b2:	4618      	mov	r0, r3
   1b5b4:	f7fb fd08 	bl	16fc8 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   1b5b8:	2800      	cmp	r0, #0
   1b5ba:	d1eb      	bne.n	1b594 <ull_filter_scan_update+0xc>
		fal_update();
   1b5bc:	f7ff fb60 	bl	1ac80 <fal_update>
   1b5c0:	e7e8      	b.n	1b594 <ull_filter_scan_update+0xc>
   1b5c2:	bf00      	nop
   1b5c4:	20004bec 	.word	0x20004bec
   1b5c8:	20005fe2 	.word	0x20005fe2
   1b5cc:	20004e18 	.word	0x20004e18

0001b5d0 <ull_filter_rpa_update>:
{
   1b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5d4:	4683      	mov	fp, r0
   1b5d6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1b5d8:	f00f fdf2 	bl	2b1c0 <z_impl_k_uptime_ticks>
   1b5dc:	014b      	lsls	r3, r1, #5
   1b5de:	0142      	lsls	r2, r0, #5
   1b5e0:	1a12      	subs	r2, r2, r0
   1b5e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1b5e6:	eb63 0301 	sbc.w	r3, r3, r1
   1b5ea:	009b      	lsls	r3, r3, #2
   1b5ec:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1b5f0:	eb19 0900 	adds.w	r9, r9, r0
   1b5f4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1b5f8:	eb41 0103 	adc.w	r1, r1, r3
   1b5fc:	00cb      	lsls	r3, r1, #3
   1b5fe:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1b602:	0bd9      	lsrs	r1, r3, #15
   1b604:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1b608:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1b60c:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1b60e:	f1bb 0f00 	cmp.w	fp, #0
   1b612:	d117      	bne.n	1b644 <ull_filter_rpa_update+0x74>
   1b614:	4a5d      	ldr	r2, [pc, #372]	; (1b78c <ull_filter_rpa_update+0x1bc>)
   1b616:	e9d2 3200 	ldrd	r3, r2, [r2]
   1b61a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1b61e:	bf08      	it	eq
   1b620:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1b624:	d00e      	beq.n	1b644 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1b626:	ebb9 0303 	subs.w	r3, r9, r3
   1b62a:	eb61 0202 	sbc.w	r2, r1, r2
   1b62e:	4958      	ldr	r1, [pc, #352]	; (1b790 <ull_filter_rpa_update+0x1c0>)
   1b630:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1b632:	428b      	cmp	r3, r1
   1b634:	f172 0300 	sbcs.w	r3, r2, #0
   1b638:	bfac      	ite	ge
   1b63a:	f04f 0a01 	movge.w	sl, #1
   1b63e:	f04f 0a00 	movlt.w	sl, #0
   1b642:	e001      	b.n	1b648 <ull_filter_rpa_update+0x78>
   1b644:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b648:	4e52      	ldr	r6, [pc, #328]	; (1b794 <ull_filter_rpa_update+0x1c4>)
   1b64a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1b798 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1b64e:	2400      	movs	r4, #0
   1b650:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1b654:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b658:	00a5      	lsls	r5, r4, #2
   1b65a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1b65e:	07da      	lsls	r2, r3, #31
   1b660:	d515      	bpl.n	1b68e <ull_filter_rpa_update+0xbe>
   1b662:	f1ba 0f00 	cmp.w	sl, #0
   1b666:	d101      	bne.n	1b66c <ull_filter_rpa_update+0x9c>
   1b668:	0798      	lsls	r0, r3, #30
   1b66a:	d410      	bmi.n	1b68e <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1b66c:	192b      	adds	r3, r5, r4
   1b66e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1b672:	0759      	lsls	r1, r3, #29
   1b674:	d432      	bmi.n	1b6dc <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   1b676:	192b      	adds	r3, r5, r4
   1b678:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1b67c:	071a      	lsls	r2, r3, #28
   1b67e:	d41b      	bmi.n	1b6b8 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   1b680:	4425      	add	r5, r4
   1b682:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1b686:	f043 0302 	orr.w	r3, r3, #2
   1b68a:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b68e:	3401      	adds	r4, #1
   1b690:	2c08      	cmp	r4, #8
   1b692:	f108 0806 	add.w	r8, r8, #6
   1b696:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b69a:	d1db      	bne.n	1b654 <ull_filter_rpa_update+0x84>
	if (all) {
   1b69c:	f1ba 0f00 	cmp.w	sl, #0
   1b6a0:	d004      	beq.n	1b6ac <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1b6a2:	4b3a      	ldr	r3, [pc, #232]	; (1b78c <ull_filter_rpa_update+0x1bc>)
   1b6a4:	9a01      	ldr	r2, [sp, #4]
   1b6a6:	f8c3 9000 	str.w	r9, [r3]
   1b6aa:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1b6ac:	f1bb 0f00 	cmp.w	fp, #0
   1b6b0:	d138      	bne.n	1b724 <ull_filter_rpa_update+0x154>
}
   1b6b2:	b007      	add	sp, #28
   1b6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1b6b8:	a902      	add	r1, sp, #8
   1b6ba:	f1a6 0017 	sub.w	r0, r6, #23
   1b6be:	f00d f8e6 	bl	2888e <bt_rpa_create>
				LL_ASSERT(!err);
   1b6c2:	2800      	cmp	r0, #0
   1b6c4:	d154      	bne.n	1b770 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   1b6c6:	ab02      	add	r3, sp, #8
   1b6c8:	f8c6 3006 	str.w	r3, [r6, #6]
   1b6cc:	4619      	mov	r1, r3
   1b6ce:	2206      	movs	r2, #6
   1b6d0:	4640      	mov	r0, r8
   1b6d2:	f00d f86d 	bl	287b0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1b6d6:	f8c6 8006 	str.w	r8, [r6, #6]
   1b6da:	e7d1      	b.n	1b680 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1b6dc:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1b6e0:	4a2e      	ldr	r2, [pc, #184]	; (1b79c <ull_filter_rpa_update+0x1cc>)
   1b6e2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1b6e6:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1b6e8:	f10d 0307 	add.w	r3, sp, #7
   1b6ec:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1b6f0:	f812 1901 	ldrb.w	r1, [r2], #-1
   1b6f4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1b6f8:	4283      	cmp	r3, r0
   1b6fa:	d1f9      	bne.n	1b6f0 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1b6fc:	4631      	mov	r1, r6
   1b6fe:	a802      	add	r0, sp, #8
   1b700:	f00d f8c5 	bl	2888e <bt_rpa_create>
				LL_ASSERT(!err);
   1b704:	2800      	cmp	r0, #0
   1b706:	d0b6      	beq.n	1b676 <ull_filter_rpa_update+0xa6>
   1b708:	4a25      	ldr	r2, [pc, #148]	; (1b7a0 <ull_filter_rpa_update+0x1d0>)
   1b70a:	4926      	ldr	r1, [pc, #152]	; (1b7a4 <ull_filter_rpa_update+0x1d4>)
   1b70c:	4826      	ldr	r0, [pc, #152]	; (1b7a8 <ull_filter_rpa_update+0x1d8>)
   1b70e:	f240 23eb 	movw	r3, #747	; 0x2eb
   1b712:	f00a f9f7 	bl	25b04 <printk>
   1b716:	4040      	eors	r0, r0
   1b718:	f380 8811 	msr	BASEPRI, r0
   1b71c:	f04f 0003 	mov.w	r0, #3
   1b720:	df02      	svc	2
   1b722:	e7a8      	b.n	1b676 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1b724:	2000      	movs	r0, #0
   1b726:	f7fb fc35 	bl	16f94 <ull_adv_is_enabled_get>
		if (adv) {
   1b72a:	4604      	mov	r4, r0
   1b72c:	2800      	cmp	r0, #0
   1b72e:	d0c0      	beq.n	1b6b2 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1b730:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   1b734:	075b      	lsls	r3, r3, #29
   1b736:	d5bc      	bpl.n	1b6b2 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1b738:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1b73c:	2b07      	cmp	r3, #7
   1b73e:	d8b8      	bhi.n	1b6b2 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1b740:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   1b744:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1b748:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1b74a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1b74c:	3024      	adds	r0, #36	; 0x24
   1b74e:	f001 fa6f 	bl	1cc30 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   1b752:	7872      	ldrb	r2, [r6, #1]
   1b754:	4605      	mov	r5, r0
   1b756:	3202      	adds	r2, #2
   1b758:	4631      	mov	r1, r6
   1b75a:	f00d f829 	bl	287b0 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1b75e:	4629      	mov	r1, r5
   1b760:	4620      	mov	r0, r4
   1b762:	f7fb fc41 	bl	16fe8 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1b766:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b76a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   1b76e:	e7a0      	b.n	1b6b2 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   1b770:	4a0b      	ldr	r2, [pc, #44]	; (1b7a0 <ull_filter_rpa_update+0x1d0>)
   1b772:	490c      	ldr	r1, [pc, #48]	; (1b7a4 <ull_filter_rpa_update+0x1d4>)
   1b774:	480c      	ldr	r0, [pc, #48]	; (1b7a8 <ull_filter_rpa_update+0x1d8>)
   1b776:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1b77a:	f00a f9c3 	bl	25b04 <printk>
   1b77e:	4040      	eors	r0, r0
   1b780:	f380 8811 	msr	BASEPRI, r0
   1b784:	f04f 0003 	mov.w	r0, #3
   1b788:	df02      	svc	2
   1b78a:	e79c      	b.n	1b6c6 <ull_filter_rpa_update+0xf6>
   1b78c:	200035c0 	.word	0x200035c0
   1b790:	20004e4c 	.word	0x20004e4c
   1b794:	20004cf6 	.word	0x20004cf6
   1b798:	20004c20 	.word	0x20004c20
   1b79c:	20004c58 	.word	0x20004c58
   1b7a0:	0002d298 	.word	0x0002d298
   1b7a4:	0002cd00 	.word	0x0002cd00
   1b7a8:	0002c8dc 	.word	0x0002c8dc

0001b7ac <rpa_timeout>:
{
   1b7ac:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1b7ae:	2001      	movs	r0, #1
   1b7b0:	f7ff ff0e 	bl	1b5d0 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1b7b4:	4a0a      	ldr	r2, [pc, #40]	; (1b7e0 <rpa_timeout+0x34>)
   1b7b6:	6812      	ldr	r2, [r2, #0]
   1b7b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1b7bc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b7c0:	2100      	movs	r1, #0
   1b7c2:	fbe2 0103 	umlal	r0, r1, r2, r3
   1b7c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b7ca:	2300      	movs	r3, #0
   1b7cc:	f7e5 fea4 	bl	1518 <__aeabi_uldivmod>
}
   1b7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b7d4:	4602      	mov	r2, r0
   1b7d6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1b7d8:	4802      	ldr	r0, [pc, #8]	; (1b7e4 <rpa_timeout+0x38>)
   1b7da:	f009 baab 	b.w	24d34 <k_work_schedule>
   1b7de:	bf00      	nop
   1b7e0:	20004e4c 	.word	0x20004e4c
   1b7e4:	200035c8 	.word	0x200035c8

0001b7e8 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1b7e8:	2807      	cmp	r0, #7
   1b7ea:	d813      	bhi.n	1b814 <ull_filter_adva_get+0x2c>
{
   1b7ec:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1b7ee:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1b7f2:	4d10      	ldr	r5, [pc, #64]	; (1b834 <ull_filter_adva_get+0x4c>)
   1b7f4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1b7f8:	071a      	lsls	r2, r3, #28
   1b7fa:	4604      	mov	r4, r0
   1b7fc:	ea4f 0680 	mov.w	r6, r0, lsl #2
   1b800:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1b804:	d505      	bpl.n	1b812 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1b806:	079b      	lsls	r3, r3, #30
   1b808:	d506      	bpl.n	1b818 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   1b80a:	4434      	add	r4, r6
   1b80c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1b810:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1b812:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b814:	2000      	movs	r0, #0
}
   1b816:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1b818:	4a07      	ldr	r2, [pc, #28]	; (1b838 <ull_filter_adva_get+0x50>)
   1b81a:	4908      	ldr	r1, [pc, #32]	; (1b83c <ull_filter_adva_get+0x54>)
   1b81c:	4808      	ldr	r0, [pc, #32]	; (1b840 <ull_filter_adva_get+0x58>)
   1b81e:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1b822:	f00a f96f 	bl	25b04 <printk>
   1b826:	4040      	eors	r0, r0
   1b828:	f380 8811 	msr	BASEPRI, r0
   1b82c:	f04f 0003 	mov.w	r0, #3
   1b830:	df02      	svc	2
   1b832:	e7ea      	b.n	1b80a <ull_filter_adva_get+0x22>
   1b834:	20004cd8 	.word	0x20004cd8
   1b838:	0002d298 	.word	0x0002d298
   1b83c:	0002d2fc 	.word	0x0002d2fc
   1b840:	0002c8dc 	.word	0x0002c8dc

0001b844 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   1b844:	2807      	cmp	r0, #7
   1b846:	d80b      	bhi.n	1b860 <ull_filter_tgta_get+0x1c>
   1b848:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1b84c:	4a05      	ldr	r2, [pc, #20]	; (1b864 <ull_filter_tgta_get+0x20>)
   1b84e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1b852:	074b      	lsls	r3, r1, #29
   1b854:	d504      	bpl.n	1b860 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   1b856:	2328      	movs	r3, #40	; 0x28
   1b858:	fb03 2000 	mla	r0, r3, r0, r2
   1b85c:	301e      	adds	r0, #30
   1b85e:	4770      	bx	lr
	return NULL;
   1b860:	2000      	movs	r0, #0
   1b862:	4770      	bx	lr
   1b864:	20004cd8 	.word	0x20004cd8

0001b868 <ull_filter_rl_find>:
{
   1b868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b86c:	468b      	mov	fp, r1
	if (free_idx) {
   1b86e:	4617      	mov	r7, r2
   1b870:	b10a      	cbz	r2, 1b876 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1b872:	23ff      	movs	r3, #255	; 0xff
   1b874:	7013      	strb	r3, [r2, #0]
   1b876:	4d1b      	ldr	r5, [pc, #108]	; (1b8e4 <ull_filter_rl_find+0x7c>)
{
   1b878:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b87a:	f000 0a01 	and.w	sl, r0, #1
   1b87e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1b882:	e006      	b.n	1b892 <ull_filter_rl_find+0x2a>
   1b884:	4552      	cmp	r2, sl
   1b886:	d01f      	beq.n	1b8c8 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b888:	3401      	adds	r4, #1
   1b88a:	2c08      	cmp	r4, #8
   1b88c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1b890:	d015      	beq.n	1b8be <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b892:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1b896:	fa5f f884 	uxtb.w	r8, r4
   1b89a:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1b89e:	07d9      	lsls	r1, r3, #31
   1b8a0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b8a4:	d4ee      	bmi.n	1b884 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1b8a6:	2f00      	cmp	r7, #0
   1b8a8:	d0ee      	beq.n	1b888 <ull_filter_rl_find+0x20>
   1b8aa:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b8ac:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1b8ae:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1b8b0:	bf08      	it	eq
   1b8b2:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b8b6:	2c08      	cmp	r4, #8
   1b8b8:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1b8bc:	d1e9      	bne.n	1b892 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1b8be:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1b8c2:	4640      	mov	r0, r8
   1b8c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b8c8:	4628      	mov	r0, r5
   1b8ca:	2206      	movs	r2, #6
   1b8cc:	4659      	mov	r1, fp
   1b8ce:	f00c ff46 	bl	2875e <memcmp>
   1b8d2:	2800      	cmp	r0, #0
   1b8d4:	d0f5      	beq.n	1b8c2 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1b8d6:	2f00      	cmp	r7, #0
   1b8d8:	d0d6      	beq.n	1b888 <ull_filter_rl_find+0x20>
   1b8da:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1b8de:	07db      	lsls	r3, r3, #31
   1b8e0:	d4d2      	bmi.n	1b888 <ull_filter_rl_find+0x20>
   1b8e2:	e7e2      	b.n	1b8aa <ull_filter_rl_find+0x42>
   1b8e4:	20004cd9 	.word	0x20004cd9

0001b8e8 <ll_rl_add>:
{
   1b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8ec:	4680      	mov	r8, r0
   1b8ee:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b8f0:	2000      	movs	r0, #0
{
   1b8f2:	460e      	mov	r6, r1
   1b8f4:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b8f6:	f7fb fb5b 	bl	16fb0 <ull_adv_is_enabled>
		? 0 : 1;
   1b8fa:	b118      	cbz	r0, 1b904 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b8fc:	200c      	movs	r0, #12
}
   1b8fe:	b005      	add	sp, #20
   1b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   1b904:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b906:	f7fb fd65 	bl	173d4 <ull_scan_is_enabled>
		? 0 : 1;
   1b90a:	f030 0301 	bics.w	r3, r0, #1
   1b90e:	d1f5      	bne.n	1b8fc <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1b910:	46c2      	mov	sl, r8
   1b912:	f10d 020f 	add.w	r2, sp, #15
   1b916:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1b91a:	4651      	mov	r1, sl
   1b91c:	f7ff ffa4 	bl	1b868 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1b920:	2807      	cmp	r0, #7
   1b922:	f240 80b1 	bls.w	1ba88 <ll_rl_add+0x1a0>
	} else if (j >= ARRAY_SIZE(rl)) {
   1b926:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1b92a:	2f07      	cmp	r7, #7
   1b92c:	f200 80a8 	bhi.w	1ba80 <ll_rl_add+0x198>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1b930:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1b934:	4d56      	ldr	r5, [pc, #344]	; (1ba90 <ll_rl_add+0x1a8>)
   1b936:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1b93a:	1c58      	adds	r0, r3, #1
   1b93c:	2206      	movs	r2, #6
   1b93e:	4651      	mov	r1, sl
   1b940:	4428      	add	r0, r5
   1b942:	9300      	str	r3, [sp, #0]
   1b944:	f00c ff34 	bl	287b0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1b948:	f898 3000 	ldrb.w	r3, [r8]
   1b94c:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1b950:	465a      	mov	r2, fp
   1b952:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   1b956:	f363 1186 	bfi	r1, r3, #6, #1
   1b95a:	f805 100b 	strb.w	r1, [r5, fp]
   1b95e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1b962:	2110      	movs	r1, #16
   1b964:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   1b966:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1b968:	f7f6 fcb6 	bl	122d8 <mem_nz>
   1b96c:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1b970:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1b972:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1b976:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1b978:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1b97c:	f7f6 fcac 	bl	122d8 <mem_nz>
   1b980:	f815 200b 	ldrb.w	r2, [r5, fp]
   1b984:	f000 0001 	and.w	r0, r0, #1
   1b988:	f360 02c3 	bfi	r2, r0, #3, #1
   1b98c:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   1b990:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   1b992:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   1b996:	d44b      	bmi.n	1ba30 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   1b998:	2800      	cmp	r0, #0
   1b99a:	d163      	bne.n	1ba64 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1b99c:	9800      	ldr	r0, [sp, #0]
   1b99e:	4e3d      	ldr	r6, [pc, #244]	; (1ba94 <ll_rl_add+0x1ac>)
   1b9a0:	3018      	adds	r0, #24
   1b9a2:	2206      	movs	r2, #6
   1b9a4:	2100      	movs	r1, #0
   1b9a6:	4428      	add	r0, r5
   1b9a8:	f00c ff0d 	bl	287c6 <memset>
	rl[i].dev = 0U;
   1b9ac:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   1b9b0:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1b9b4:	f021 0112 	bic.w	r1, r1, #18
   1b9b8:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1b9bc:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   1b9c0:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b9c4:	f009 0901 	and.w	r9, r9, #1
   1b9c8:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1b9cc:	07d3      	lsls	r3, r2, #31
   1b9ce:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1b9d2:	d501      	bpl.n	1b9d8 <ll_rl_add+0xf0>
   1b9d4:	4549      	cmp	r1, r9
   1b9d6:	d018      	beq.n	1ba0a <ll_rl_add+0x122>
	for (i = 0; i < FAL_SIZE; i++) {
   1b9d8:	3401      	adds	r4, #1
   1b9da:	2c08      	cmp	r4, #8
   1b9dc:	f106 0608 	add.w	r6, r6, #8
   1b9e0:	d1f2      	bne.n	1b9c8 <ll_rl_add+0xe0>
		rl[i].fal = 0U;
   1b9e2:	eb0b 0207 	add.w	r2, fp, r7
   1b9e6:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1b9ea:	f36f 1145 	bfc	r1, #5, #1
   1b9ee:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1b9f2:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1b9f6:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1b9f8:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1b9fc:	f042 0201 	orr.w	r2, r2, #1
   1ba00:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1ba04:	b005      	add	sp, #20
   1ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ba0a:	2206      	movs	r2, #6
   1ba0c:	4630      	mov	r0, r6
   1ba0e:	4651      	mov	r1, sl
   1ba10:	f00c fea5 	bl	2875e <memcmp>
   1ba14:	2800      	cmp	r0, #0
   1ba16:	d1df      	bne.n	1b9d8 <ll_rl_add+0xf0>
		rl[i].fal = 1U;
   1ba18:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   1ba1c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1ba20:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   1ba24:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1ba26:	f041 0120 	orr.w	r1, r1, #32
   1ba2a:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1ba2e:	e7e0      	b.n	1b9f2 <ll_rl_add+0x10a>
		rl[i].pirk_idx = peer_irk_count;
   1ba30:	4b19      	ldr	r3, [pc, #100]	; (1ba98 <ll_rl_add+0x1b0>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1ba32:	4a1a      	ldr	r2, [pc, #104]	; (1ba9c <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   1ba34:	7819      	ldrb	r1, [r3, #0]
   1ba36:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1ba3a:	5457      	strb	r7, [r2, r1]
   1ba3c:	4a18      	ldr	r2, [pc, #96]	; (1baa0 <ll_rl_add+0x1b8>)
		rl[i].pirk_idx = peer_irk_count;
   1ba3e:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1ba42:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1ba46:	3101      	adds	r1, #1
	psrc += length - 1;
   1ba48:	f106 020f 	add.w	r2, r6, #15
   1ba4c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1ba4e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1ba52:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1ba54:	f812 1901 	ldrb.w	r1, [r2], #-1
   1ba58:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1ba5c:	4296      	cmp	r6, r2
   1ba5e:	d1f9      	bne.n	1ba54 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   1ba60:	2800      	cmp	r0, #0
   1ba62:	d09b      	beq.n	1b99c <ll_rl_add+0xb4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1ba64:	9b00      	ldr	r3, [sp, #0]
   1ba66:	1dd8      	adds	r0, r3, #7
   1ba68:	4649      	mov	r1, r9
   1ba6a:	2210      	movs	r2, #16
   1ba6c:	4428      	add	r0, r5
   1ba6e:	f00c fe9f 	bl	287b0 <memcpy>
		rl[i].local_rpa = NULL;
   1ba72:	eb0b 0207 	add.w	r2, fp, r7
   1ba76:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1ba7a:	2100      	movs	r1, #0
   1ba7c:	6251      	str	r1, [r2, #36]	; 0x24
   1ba7e:	e78d      	b.n	1b99c <ll_rl_add+0xb4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1ba80:	2007      	movs	r0, #7
}
   1ba82:	b005      	add	sp, #20
   1ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1ba88:	2012      	movs	r0, #18
}
   1ba8a:	b005      	add	sp, #20
   1ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba90:	20004cd8 	.word	0x20004cd8
   1ba94:	20004bae 	.word	0x20004bae
   1ba98:	20005fe1 	.word	0x20005fe1
   1ba9c:	20004c50 	.word	0x20004c50
   1baa0:	20004c58 	.word	0x20004c58

0001baa4 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1baa4:	2807      	cmp	r0, #7
   1baa6:	d812      	bhi.n	1bace <ull_filter_lll_lrpa_get+0x2a>
   1baa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1baac:	4a09      	ldr	r2, [pc, #36]	; (1bad4 <ull_filter_lll_lrpa_get+0x30>)
   1baae:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1bab2:	f013 0f08 	tst.w	r3, #8
   1bab6:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   1baba:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1babe:	d007      	beq.n	1bad0 <ull_filter_lll_lrpa_get+0x2c>
   1bac0:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1bac4:	079b      	lsls	r3, r3, #30
   1bac6:	d503      	bpl.n	1bad0 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   1bac8:	440a      	add	r2, r1
   1baca:	6a50      	ldr	r0, [r2, #36]	; 0x24
   1bacc:	4770      	bx	lr
		return NULL;
   1bace:	2000      	movs	r0, #0
}
   1bad0:	4770      	bx	lr
   1bad2:	bf00      	nop
   1bad4:	20004cd8 	.word	0x20004cd8

0001bad8 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1bad8:	4b02      	ldr	r3, [pc, #8]	; (1bae4 <ull_filter_lll_irks_get+0xc>)
   1bada:	781b      	ldrb	r3, [r3, #0]
   1badc:	7003      	strb	r3, [r0, #0]
}
   1bade:	4802      	ldr	r0, [pc, #8]	; (1bae8 <ull_filter_lll_irks_get+0x10>)
   1bae0:	4770      	bx	lr
   1bae2:	bf00      	nop
   1bae4:	20005fe1 	.word	0x20005fe1
   1bae8:	20004c58 	.word	0x20004c58

0001baec <ull_filter_lll_rl_idx>:
{
   1baec:	b538      	push	{r3, r4, r5, lr}
   1baee:	460c      	mov	r4, r1
	if (filter) {
   1baf0:	b150      	cbz	r0, 1bb08 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1baf2:	2907      	cmp	r1, #7
   1baf4:	d822      	bhi.n	1bb3c <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   1baf6:	4d2a      	ldr	r5, [pc, #168]	; (1bba0 <ull_filter_lll_rl_idx+0xb4>)
   1baf8:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1bafc:	07da      	lsls	r2, r3, #31
   1bafe:	d52f      	bpl.n	1bb60 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   1bb00:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1bb04:	7860      	ldrb	r0, [r4, #1]
}
   1bb06:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1bb08:	2907      	cmp	r1, #7
   1bb0a:	d83a      	bhi.n	1bb82 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1bb0c:	4b25      	ldr	r3, [pc, #148]	; (1bba4 <ull_filter_lll_rl_idx+0xb8>)
   1bb0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bb12:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1bb16:	07db      	lsls	r3, r3, #31
   1bb18:	d501      	bpl.n	1bb1e <ull_filter_lll_rl_idx+0x32>
   1bb1a:	4620      	mov	r0, r4
}
   1bb1c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1bb1e:	4a22      	ldr	r2, [pc, #136]	; (1bba8 <ull_filter_lll_rl_idx+0xbc>)
   1bb20:	4922      	ldr	r1, [pc, #136]	; (1bbac <ull_filter_lll_rl_idx+0xc0>)
   1bb22:	4823      	ldr	r0, [pc, #140]	; (1bbb0 <ull_filter_lll_rl_idx+0xc4>)
   1bb24:	f240 3363 	movw	r3, #867	; 0x363
   1bb28:	f009 ffec 	bl	25b04 <printk>
   1bb2c:	4040      	eors	r0, r0
   1bb2e:	f380 8811 	msr	BASEPRI, r0
   1bb32:	f04f 0003 	mov.w	r0, #3
   1bb36:	df02      	svc	2
   1bb38:	4620      	mov	r0, r4
}
   1bb3a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1bb3c:	4a1a      	ldr	r2, [pc, #104]	; (1bba8 <ull_filter_lll_rl_idx+0xbc>)
   1bb3e:	491d      	ldr	r1, [pc, #116]	; (1bbb4 <ull_filter_lll_rl_idx+0xc8>)
   1bb40:	481b      	ldr	r0, [pc, #108]	; (1bbb0 <ull_filter_lll_rl_idx+0xc4>)
   1bb42:	f240 335d 	movw	r3, #861	; 0x35d
   1bb46:	f009 ffdd 	bl	25b04 <printk>
   1bb4a:	4040      	eors	r0, r0
   1bb4c:	f380 8811 	msr	BASEPRI, r0
   1bb50:	f04f 0003 	mov.w	r0, #3
   1bb54:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1bb56:	4d12      	ldr	r5, [pc, #72]	; (1bba0 <ull_filter_lll_rl_idx+0xb4>)
   1bb58:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1bb5c:	07da      	lsls	r2, r3, #31
   1bb5e:	d4cf      	bmi.n	1bb00 <ull_filter_lll_rl_idx+0x14>
   1bb60:	4a11      	ldr	r2, [pc, #68]	; (1bba8 <ull_filter_lll_rl_idx+0xbc>)
   1bb62:	4915      	ldr	r1, [pc, #84]	; (1bbb8 <ull_filter_lll_rl_idx+0xcc>)
   1bb64:	4812      	ldr	r0, [pc, #72]	; (1bbb0 <ull_filter_lll_rl_idx+0xc4>)
   1bb66:	f240 335e 	movw	r3, #862	; 0x35e
   1bb6a:	f009 ffcb 	bl	25b04 <printk>
   1bb6e:	4040      	eors	r0, r0
   1bb70:	f380 8811 	msr	BASEPRI, r0
   1bb74:	f04f 0003 	mov.w	r0, #3
   1bb78:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   1bb7a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1bb7e:	7860      	ldrb	r0, [r4, #1]
   1bb80:	e7c1      	b.n	1bb06 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1bb82:	4a09      	ldr	r2, [pc, #36]	; (1bba8 <ull_filter_lll_rl_idx+0xbc>)
   1bb84:	490d      	ldr	r1, [pc, #52]	; (1bbbc <ull_filter_lll_rl_idx+0xd0>)
   1bb86:	480a      	ldr	r0, [pc, #40]	; (1bbb0 <ull_filter_lll_rl_idx+0xc4>)
   1bb88:	f240 3361 	movw	r3, #865	; 0x361
   1bb8c:	f009 ffba 	bl	25b04 <printk>
   1bb90:	4040      	eors	r0, r0
   1bb92:	f380 8811 	msr	BASEPRI, r0
   1bb96:	f04f 0003 	mov.w	r0, #3
   1bb9a:	df02      	svc	2
   1bb9c:	e7b6      	b.n	1bb0c <ull_filter_lll_rl_idx+0x20>
   1bb9e:	bf00      	nop
   1bba0:	20004bac 	.word	0x20004bac
   1bba4:	20004cd8 	.word	0x20004cd8
   1bba8:	0002d298 	.word	0x0002d298
   1bbac:	0002d478 	.word	0x0002d478
   1bbb0:	0002c8dc 	.word	0x0002c8dc
   1bbb4:	0002d314 	.word	0x0002d314
   1bbb8:	0002d3bc 	.word	0x0002d3bc
   1bbbc:	0002d3d4 	.word	0x0002d3d4

0001bbc0 <ull_filter_lll_rl_irk_idx>:
{
   1bbc0:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1bbc2:	4b20      	ldr	r3, [pc, #128]	; (1bc44 <ull_filter_lll_rl_irk_idx+0x84>)
   1bbc4:	781b      	ldrb	r3, [r3, #0]
   1bbc6:	4283      	cmp	r3, r0
{
   1bbc8:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1bbca:	d90c      	bls.n	1bbe6 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1bbcc:	4b1e      	ldr	r3, [pc, #120]	; (1bc48 <ull_filter_lll_rl_irk_idx+0x88>)
   1bbce:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1bbd0:	2c07      	cmp	r4, #7
   1bbd2:	d819      	bhi.n	1bc08 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1bbd4:	4b1d      	ldr	r3, [pc, #116]	; (1bc4c <ull_filter_lll_rl_irk_idx+0x8c>)
   1bbd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bbda:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1bbde:	07db      	lsls	r3, r3, #31
   1bbe0:	d520      	bpl.n	1bc24 <ull_filter_lll_rl_irk_idx+0x64>
}
   1bbe2:	4620      	mov	r0, r4
   1bbe4:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1bbe6:	4a1a      	ldr	r2, [pc, #104]	; (1bc50 <ull_filter_lll_rl_irk_idx+0x90>)
   1bbe8:	491a      	ldr	r1, [pc, #104]	; (1bc54 <ull_filter_lll_rl_irk_idx+0x94>)
   1bbea:	481b      	ldr	r0, [pc, #108]	; (1bc58 <ull_filter_lll_rl_irk_idx+0x98>)
   1bbec:	f240 336d 	movw	r3, #877	; 0x36d
   1bbf0:	f009 ff88 	bl	25b04 <printk>
   1bbf4:	4040      	eors	r0, r0
   1bbf6:	f380 8811 	msr	BASEPRI, r0
   1bbfa:	f04f 0003 	mov.w	r0, #3
   1bbfe:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1bc00:	4b11      	ldr	r3, [pc, #68]	; (1bc48 <ull_filter_lll_rl_irk_idx+0x88>)
   1bc02:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1bc04:	2c07      	cmp	r4, #7
   1bc06:	d9e5      	bls.n	1bbd4 <ull_filter_lll_rl_irk_idx+0x14>
   1bc08:	4a11      	ldr	r2, [pc, #68]	; (1bc50 <ull_filter_lll_rl_irk_idx+0x90>)
   1bc0a:	4914      	ldr	r1, [pc, #80]	; (1bc5c <ull_filter_lll_rl_irk_idx+0x9c>)
   1bc0c:	4812      	ldr	r0, [pc, #72]	; (1bc58 <ull_filter_lll_rl_irk_idx+0x98>)
   1bc0e:	f240 336f 	movw	r3, #879	; 0x36f
   1bc12:	f009 ff77 	bl	25b04 <printk>
   1bc16:	4040      	eors	r0, r0
   1bc18:	f380 8811 	msr	BASEPRI, r0
   1bc1c:	f04f 0003 	mov.w	r0, #3
   1bc20:	df02      	svc	2
   1bc22:	e7d7      	b.n	1bbd4 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1bc24:	4a0a      	ldr	r2, [pc, #40]	; (1bc50 <ull_filter_lll_rl_irk_idx+0x90>)
   1bc26:	490e      	ldr	r1, [pc, #56]	; (1bc60 <ull_filter_lll_rl_irk_idx+0xa0>)
   1bc28:	480b      	ldr	r0, [pc, #44]	; (1bc58 <ull_filter_lll_rl_irk_idx+0x98>)
   1bc2a:	f44f 735c 	mov.w	r3, #880	; 0x370
   1bc2e:	f009 ff69 	bl	25b04 <printk>
   1bc32:	4040      	eors	r0, r0
   1bc34:	f380 8811 	msr	BASEPRI, r0
   1bc38:	f04f 0003 	mov.w	r0, #3
   1bc3c:	df02      	svc	2
}
   1bc3e:	4620      	mov	r0, r4
   1bc40:	bd10      	pop	{r4, pc}
   1bc42:	bf00      	nop
   1bc44:	20005fe1 	.word	0x20005fe1
   1bc48:	20004c50 	.word	0x20004c50
   1bc4c:	20004cd8 	.word	0x20004cd8
   1bc50:	0002d298 	.word	0x0002d298
   1bc54:	0002d484 	.word	0x0002d484
   1bc58:	0002c8dc 	.word	0x0002c8dc
   1bc5c:	0002d4a4 	.word	0x0002d4a4
   1bc60:	0002d478 	.word	0x0002d478

0001bc64 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1bc64:	2807      	cmp	r0, #7
   1bc66:	d823      	bhi.n	1bcb0 <ull_filter_lll_irk_in_fal+0x4c>
{
   1bc68:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1bc6a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1bc6e:	4e11      	ldr	r6, [pc, #68]	; (1bcb4 <ull_filter_lll_irk_in_fal+0x50>)
   1bc70:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1bc74:	07db      	lsls	r3, r3, #31
   1bc76:	4604      	mov	r4, r0
   1bc78:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1bc7c:	d505      	bpl.n	1bc8a <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1bc7e:	442c      	add	r4, r5
   1bc80:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1bc84:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1bc88:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1bc8a:	4a0b      	ldr	r2, [pc, #44]	; (1bcb8 <ull_filter_lll_irk_in_fal+0x54>)
   1bc8c:	490b      	ldr	r1, [pc, #44]	; (1bcbc <ull_filter_lll_irk_in_fal+0x58>)
   1bc8e:	480c      	ldr	r0, [pc, #48]	; (1bcc0 <ull_filter_lll_irk_in_fal+0x5c>)
   1bc90:	f240 337b 	movw	r3, #891	; 0x37b
   1bc94:	f009 ff36 	bl	25b04 <printk>
   1bc98:	4040      	eors	r0, r0
   1bc9a:	f380 8811 	msr	BASEPRI, r0
   1bc9e:	f04f 0003 	mov.w	r0, #3
   1bca2:	df02      	svc	2
	return rl[rl_idx].fal;
   1bca4:	442c      	add	r4, r5
   1bca6:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1bcaa:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1bcae:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1bcb0:	2000      	movs	r0, #0
}
   1bcb2:	4770      	bx	lr
   1bcb4:	20004cd8 	.word	0x20004cd8
   1bcb8:	0002d298 	.word	0x0002d298
   1bcbc:	0002d2e8 	.word	0x0002d2e8
   1bcc0:	0002c8dc 	.word	0x0002c8dc

0001bcc4 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1bcc4:	4b14      	ldr	r3, [pc, #80]	; (1bd18 <ull_filter_lll_rl_idx_allowed+0x54>)
   1bcc6:	781b      	ldrb	r3, [r3, #0]
   1bcc8:	b19b      	cbz	r3, 1bcf2 <ull_filter_lll_rl_idx_allowed+0x2e>
   1bcca:	2907      	cmp	r1, #7
{
   1bccc:	b570      	push	{r4, r5, r6, lr}
   1bcce:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1bcd0:	d80d      	bhi.n	1bcee <ull_filter_lll_rl_idx_allowed+0x2a>
   1bcd2:	b960      	cbnz	r0, 1bcee <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1bcd4:	4e11      	ldr	r6, [pc, #68]	; (1bd1c <ull_filter_lll_rl_idx_allowed+0x58>)
   1bcd6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1bcda:	008d      	lsls	r5, r1, #2
   1bcdc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1bce0:	07da      	lsls	r2, r3, #31
   1bce2:	d50b      	bpl.n	1bcfc <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1bce4:	442c      	add	r4, r5
   1bce6:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1bcea:	0743      	lsls	r3, r0, #29
   1bcec:	d403      	bmi.n	1bcf6 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1bcee:	2001      	movs	r0, #1
}
   1bcf0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1bcf2:	2001      	movs	r0, #1
}
   1bcf4:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1bcf6:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1bcfa:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1bcfc:	4a08      	ldr	r2, [pc, #32]	; (1bd20 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1bcfe:	4909      	ldr	r1, [pc, #36]	; (1bd24 <ull_filter_lll_rl_idx_allowed+0x60>)
   1bd00:	4809      	ldr	r0, [pc, #36]	; (1bd28 <ull_filter_lll_rl_idx_allowed+0x64>)
   1bd02:	f44f 7365 	mov.w	r3, #916	; 0x394
   1bd06:	f009 fefd 	bl	25b04 <printk>
   1bd0a:	4040      	eors	r0, r0
   1bd0c:	f380 8811 	msr	BASEPRI, r0
   1bd10:	f04f 0003 	mov.w	r0, #3
   1bd14:	df02      	svc	2
   1bd16:	e7e5      	b.n	1bce4 <ull_filter_lll_rl_idx_allowed+0x20>
   1bd18:	20005fe2 	.word	0x20005fe2
   1bd1c:	20004cd8 	.word	0x20004cd8
   1bd20:	0002d298 	.word	0x0002d298
   1bd24:	0002d2e8 	.word	0x0002d2e8
   1bd28:	0002c8dc 	.word	0x0002c8dc

0001bd2c <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1bd2c:	7813      	ldrb	r3, [r2, #0]
   1bd2e:	2bff      	cmp	r3, #255	; 0xff
   1bd30:	d11b      	bne.n	1bd6a <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1bd32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd36:	4d19      	ldr	r5, [pc, #100]	; (1bd9c <ull_filter_lll_rl_addr_allowed+0x70>)
   1bd38:	4604      	mov	r4, r0
   1bd3a:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1bd3c:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1bd3e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1bd42:	b2df      	uxtb	r7, r3
   1bd44:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1bd48:	f01c 0001 	ands.w	r0, ip, #1
   1bd4c:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1bd50:	d003      	beq.n	1bd5a <ull_filter_lll_rl_addr_allowed+0x2e>
   1bd52:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1bd56:	45a4      	cmp	ip, r4
   1bd58:	d009      	beq.n	1bd6e <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd5a:	3301      	adds	r3, #1
   1bd5c:	2b08      	cmp	r3, #8
   1bd5e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1bd62:	d1ec      	bne.n	1bd3e <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1bd64:	2001      	movs	r0, #1
}
   1bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1bd6a:	2001      	movs	r0, #1
}
   1bd6c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1bd6e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1bd72:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1bd74:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1bd78:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1bd7c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1bd80:	45ca      	cmp	sl, r9
   1bd82:	d1ea      	bne.n	1bd5a <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1bd84:	45dc      	cmp	ip, fp
   1bd86:	d1f7      	bne.n	1bd78 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1bd88:	4433      	add	r3, r6
				*rl_idx = i;
   1bd8a:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1bd8c:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1bd90:	075a      	lsls	r2, r3, #29
   1bd92:	d5e8      	bpl.n	1bd66 <ull_filter_lll_rl_addr_allowed+0x3a>
   1bd94:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1bd98:	e7e5      	b.n	1bd66 <ull_filter_lll_rl_addr_allowed+0x3a>
   1bd9a:	bf00      	nop
   1bd9c:	20004cd8 	.word	0x20004cd8

0001bda0 <ull_filter_lll_rl_addr_resolve>:
{
   1bda0:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1bda2:	4b0e      	ldr	r3, [pc, #56]	; (1bddc <ull_filter_lll_rl_addr_resolve+0x3c>)
   1bda4:	781c      	ldrb	r4, [r3, #0]
   1bda6:	b17c      	cbz	r4, 1bdc8 <ull_filter_lll_rl_addr_resolve+0x28>
   1bda8:	2a07      	cmp	r2, #7
   1bdaa:	d80d      	bhi.n	1bdc8 <ull_filter_lll_rl_addr_resolve+0x28>
   1bdac:	4c0c      	ldr	r4, [pc, #48]	; (1bde0 <ull_filter_lll_rl_addr_resolve+0x40>)
   1bdae:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1bdb2:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   1bdb6:	f01c 0f08 	tst.w	ip, #8
   1bdba:	d005      	beq.n	1bdc8 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1bdbc:	b120      	cbz	r0, 1bdc8 <ull_filter_lll_rl_addr_resolve+0x28>
   1bdbe:	794b      	ldrb	r3, [r1, #5]
   1bdc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bdc4:	2b40      	cmp	r3, #64	; 0x40
   1bdc6:	d002      	beq.n	1bdce <ull_filter_lll_rl_addr_resolve+0x2e>
}
   1bdc8:	2000      	movs	r0, #0
   1bdca:	bc10      	pop	{r4}
   1bdcc:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1bdce:	2028      	movs	r0, #40	; 0x28
   1bdd0:	fb00 4002 	mla	r0, r0, r2, r4
   1bdd4:	3007      	adds	r0, #7
}
   1bdd6:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1bdd8:	f00c bd46 	b.w	28868 <bt_rpa_irk_matches>
   1bddc:	20005fe2 	.word	0x20005fe2
   1bde0:	20004cd8 	.word	0x20004cd8

0001bde4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1bde4:	4b02      	ldr	r3, [pc, #8]	; (1bdf0 <ull_filter_lll_rl_enabled+0xc>)
   1bde6:	7818      	ldrb	r0, [r3, #0]
}
   1bde8:	3800      	subs	r0, #0
   1bdea:	bf18      	it	ne
   1bdec:	2001      	movne	r0, #1
   1bdee:	4770      	bx	lr
   1bdf0:	20005fe2 	.word	0x20005fe2

0001bdf4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1bdf4:	4668      	mov	r0, sp
   1bdf6:	f020 0107 	bic.w	r1, r0, #7
   1bdfa:	468d      	mov	sp, r1
   1bdfc:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1bdfe:	f002 fb15 	bl	1e42c <isr_radio>

	ISR_DIRECT_PM();
   1be02:	f7ef ffc5 	bl	bd90 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1be06:	f7f0 f8bb 	bl	bf80 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1be0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1be0e:	4685      	mov	sp, r0
   1be10:	4770      	bx	lr
   1be12:	bf00      	nop

0001be14 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1be14:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1be16:	4b09      	ldr	r3, [pc, #36]	; (1be3c <rtc0_nrf5_isr+0x28>)
   1be18:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1be1c:	b93a      	cbnz	r2, 1be2e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1be1e:	2001      	movs	r0, #1
   1be20:	f7f6 fb40 	bl	124a4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1be24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1be28:	2002      	movs	r0, #2
   1be2a:	f7f6 bb3b 	b.w	124a4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1be2e:	2000      	movs	r0, #0
   1be30:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1be34:	f7f7 fc3c 	bl	136b0 <ticker_trigger>
   1be38:	e7f1      	b.n	1be1e <rtc0_nrf5_isr+0xa>
   1be3a:	bf00      	nop
   1be3c:	4000b000 	.word	0x4000b000

0001be40 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1be40:	2000      	movs	r0, #0
   1be42:	f7f6 bb2f 	b.w	124a4 <mayfly_run>
   1be46:	bf00      	nop

0001be48 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1be48:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1be4a:	4b0e      	ldr	r3, [pc, #56]	; (1be84 <ticker_stop_op_cb+0x3c>)
   1be4c:	4c0e      	ldr	r4, [pc, #56]	; (1be88 <ticker_stop_op_cb+0x40>)
   1be4e:	781a      	ldrb	r2, [r3, #0]
   1be50:	7823      	ldrb	r3, [r4, #0]
   1be52:	429a      	cmp	r2, r3
   1be54:	d006      	beq.n	1be64 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1be56:	490d      	ldr	r1, [pc, #52]	; (1be8c <ticker_stop_op_cb+0x44>)
   1be58:	4a0d      	ldr	r2, [pc, #52]	; (1be90 <ticker_stop_op_cb+0x48>)
   1be5a:	7809      	ldrb	r1, [r1, #0]
   1be5c:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1be5e:	3301      	adds	r3, #1
   1be60:	7023      	strb	r3, [r4, #0]
}
   1be62:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1be64:	4a0b      	ldr	r2, [pc, #44]	; (1be94 <ticker_stop_op_cb+0x4c>)
   1be66:	490c      	ldr	r1, [pc, #48]	; (1be98 <ticker_stop_op_cb+0x50>)
   1be68:	480c      	ldr	r0, [pc, #48]	; (1be9c <ticker_stop_op_cb+0x54>)
   1be6a:	f240 3301 	movw	r3, #769	; 0x301
   1be6e:	f009 fe49 	bl	25b04 <printk>
   1be72:	4040      	eors	r0, r0
   1be74:	f380 8811 	msr	BASEPRI, r0
   1be78:	f04f 0003 	mov.w	r0, #3
   1be7c:	df02      	svc	2
	preempt_stop_ack++;
   1be7e:	7823      	ldrb	r3, [r4, #0]
   1be80:	e7e9      	b.n	1be56 <ticker_stop_op_cb+0xe>
   1be82:	bf00      	nop
   1be84:	20005fe8 	.word	0x20005fe8
   1be88:	20005fe7 	.word	0x20005fe7
   1be8c:	20005fe3 	.word	0x20005fe3
   1be90:	20005fe4 	.word	0x20005fe4
   1be94:	0002d4c0 	.word	0x0002d4c0
   1be98:	0002d508 	.word	0x0002d508
   1be9c:	0002c8dc 	.word	0x0002c8dc

0001bea0 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1bea0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1bea2:	b9f8      	cbnz	r0, 1bee4 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1bea4:	4b1e      	ldr	r3, [pc, #120]	; (1bf20 <ticker_start_op_cb+0x80>)
   1bea6:	4d1f      	ldr	r5, [pc, #124]	; (1bf24 <ticker_start_op_cb+0x84>)
   1bea8:	781a      	ldrb	r2, [r3, #0]
   1beaa:	782b      	ldrb	r3, [r5, #0]
   1beac:	429a      	cmp	r2, r3
   1beae:	d027      	beq.n	1bf00 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1beb0:	4a1d      	ldr	r2, [pc, #116]	; (1bf28 <ticker_start_op_cb+0x88>)
   1beb2:	4c1e      	ldr	r4, [pc, #120]	; (1bf2c <ticker_start_op_cb+0x8c>)
   1beb4:	7812      	ldrb	r2, [r2, #0]
   1beb6:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1beb8:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1beba:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1bebc:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1bebe:	b2d3      	uxtb	r3, r2
   1bec0:	d00d      	beq.n	1bede <ticker_start_op_cb+0x3e>
   1bec2:	4a1b      	ldr	r2, [pc, #108]	; (1bf30 <ticker_start_op_cb+0x90>)
   1bec4:	491b      	ldr	r1, [pc, #108]	; (1bf34 <ticker_start_op_cb+0x94>)
   1bec6:	481c      	ldr	r0, [pc, #112]	; (1bf38 <ticker_start_op_cb+0x98>)
   1bec8:	f240 330f 	movw	r3, #783	; 0x30f
   1becc:	f009 fe1a 	bl	25b04 <printk>
   1bed0:	4040      	eors	r0, r0
   1bed2:	f380 8811 	msr	BASEPRI, r0
   1bed6:	f04f 0003 	mov.w	r0, #3
   1beda:	df02      	svc	2
	preempt_req++;
   1bedc:	7823      	ldrb	r3, [r4, #0]
   1bede:	3301      	adds	r3, #1
   1bee0:	7023      	strb	r3, [r4, #0]
}
   1bee2:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1bee4:	4a12      	ldr	r2, [pc, #72]	; (1bf30 <ticker_start_op_cb+0x90>)
   1bee6:	4915      	ldr	r1, [pc, #84]	; (1bf3c <ticker_start_op_cb+0x9c>)
   1bee8:	4813      	ldr	r0, [pc, #76]	; (1bf38 <ticker_start_op_cb+0x98>)
   1beea:	f240 330a 	movw	r3, #778	; 0x30a
   1beee:	f009 fe09 	bl	25b04 <printk>
   1bef2:	4040      	eors	r0, r0
   1bef4:	f380 8811 	msr	BASEPRI, r0
   1bef8:	f04f 0003 	mov.w	r0, #3
   1befc:	df02      	svc	2
   1befe:	e7d1      	b.n	1bea4 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1bf00:	4a0b      	ldr	r2, [pc, #44]	; (1bf30 <ticker_start_op_cb+0x90>)
   1bf02:	490f      	ldr	r1, [pc, #60]	; (1bf40 <ticker_start_op_cb+0xa0>)
   1bf04:	480c      	ldr	r0, [pc, #48]	; (1bf38 <ticker_start_op_cb+0x98>)
   1bf06:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1bf0a:	f009 fdfb 	bl	25b04 <printk>
   1bf0e:	4040      	eors	r0, r0
   1bf10:	f380 8811 	msr	BASEPRI, r0
   1bf14:	f04f 0003 	mov.w	r0, #3
   1bf18:	df02      	svc	2
	preempt_start_ack++;
   1bf1a:	782b      	ldrb	r3, [r5, #0]
   1bf1c:	e7c8      	b.n	1beb0 <ticker_start_op_cb+0x10>
   1bf1e:	bf00      	nop
   1bf20:	20005fe6 	.word	0x20005fe6
   1bf24:	20005fe5 	.word	0x20005fe5
   1bf28:	20005fe3 	.word	0x20005fe3
   1bf2c:	20005fe4 	.word	0x20005fe4
   1bf30:	0002d4c0 	.word	0x0002d4c0
   1bf34:	0002d558 	.word	0x0002d558
   1bf38:	0002c8dc 	.word	0x0002c8dc
   1bf3c:	0002d014 	.word	0x0002d014
   1bf40:	0002d530 	.word	0x0002d530

0001bf44 <isr_race>:
	radio_status_reset();
   1bf44:	f002 bb90 	b.w	1e668 <radio_status_reset>

0001bf48 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1bf48:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1bf4a:	4a18      	ldr	r2, [pc, #96]	; (1bfac <preempt_ticker_cb+0x64>)
   1bf4c:	4c18      	ldr	r4, [pc, #96]	; (1bfb0 <preempt_ticker_cb+0x68>)
   1bf4e:	7812      	ldrb	r2, [r2, #0]
   1bf50:	7823      	ldrb	r3, [r4, #0]
   1bf52:	429a      	cmp	r2, r3
   1bf54:	d01b      	beq.n	1bf8e <preempt_ticker_cb+0x46>
	preempt_ack++;
   1bf56:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1bf58:	4b16      	ldr	r3, [pc, #88]	; (1bfb4 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1bf5a:	3101      	adds	r1, #1
   1bf5c:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bf5e:	2200      	movs	r2, #0
	preempt_ack++;
   1bf60:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1bf62:	9903      	ldr	r1, [sp, #12]
   1bf64:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bf66:	2001      	movs	r0, #1
   1bf68:	4611      	mov	r1, r2
   1bf6a:	f7f6 fa43 	bl	123f4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1bf6e:	b900      	cbnz	r0, 1bf72 <preempt_ticker_cb+0x2a>
}
   1bf70:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1bf72:	4a11      	ldr	r2, [pc, #68]	; (1bfb8 <preempt_ticker_cb+0x70>)
   1bf74:	4911      	ldr	r1, [pc, #68]	; (1bfbc <preempt_ticker_cb+0x74>)
   1bf76:	4812      	ldr	r0, [pc, #72]	; (1bfc0 <preempt_ticker_cb+0x78>)
   1bf78:	f240 3376 	movw	r3, #886	; 0x376
   1bf7c:	f009 fdc2 	bl	25b04 <printk>
   1bf80:	4040      	eors	r0, r0
   1bf82:	f380 8811 	msr	BASEPRI, r0
   1bf86:	f04f 0003 	mov.w	r0, #3
   1bf8a:	df02      	svc	2
}
   1bf8c:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1bf8e:	4a0a      	ldr	r2, [pc, #40]	; (1bfb8 <preempt_ticker_cb+0x70>)
   1bf90:	490c      	ldr	r1, [pc, #48]	; (1bfc4 <preempt_ticker_cb+0x7c>)
   1bf92:	480b      	ldr	r0, [pc, #44]	; (1bfc0 <preempt_ticker_cb+0x78>)
   1bf94:	f44f 735c 	mov.w	r3, #880	; 0x370
   1bf98:	f009 fdb4 	bl	25b04 <printk>
   1bf9c:	4040      	eors	r0, r0
   1bf9e:	f380 8811 	msr	BASEPRI, r0
   1bfa2:	f04f 0003 	mov.w	r0, #3
   1bfa6:	df02      	svc	2
   1bfa8:	e7d5      	b.n	1bf56 <preempt_ticker_cb+0xe>
   1bfaa:	bf00      	nop
   1bfac:	20005fe4 	.word	0x20005fe4
   1bfb0:	20005fe3 	.word	0x20005fe3
   1bfb4:	200006dc 	.word	0x200006dc
   1bfb8:	0002d4c0 	.word	0x0002d4c0
   1bfbc:	0002cddc 	.word	0x0002cddc
   1bfc0:	0002c8dc 	.word	0x0002c8dc
   1bfc4:	0002d574 	.word	0x0002d574

0001bfc8 <preempt_ticker_stop>:
{
   1bfc8:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1bfca:	4917      	ldr	r1, [pc, #92]	; (1c028 <preempt_ticker_stop+0x60>)
   1bfcc:	4a17      	ldr	r2, [pc, #92]	; (1c02c <preempt_ticker_stop+0x64>)
   1bfce:	780b      	ldrb	r3, [r1, #0]
   1bfd0:	7812      	ldrb	r2, [r2, #0]
   1bfd2:	429a      	cmp	r2, r3
{
   1bfd4:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1bfd6:	d122      	bne.n	1c01e <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1bfd8:	4b15      	ldr	r3, [pc, #84]	; (1c030 <preempt_ticker_stop+0x68>)
   1bfda:	4a16      	ldr	r2, [pc, #88]	; (1c034 <preempt_ticker_stop+0x6c>)
   1bfdc:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1bfde:	7812      	ldrb	r2, [r2, #0]
   1bfe0:	429a      	cmp	r2, r3
   1bfe2:	d01c      	beq.n	1c01e <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1bfe4:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1bfe6:	4b14      	ldr	r3, [pc, #80]	; (1c038 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1bfe8:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1bfea:	2200      	movs	r2, #0
	preempt_stop_req++;
   1bfec:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1bfee:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1bff0:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1bff2:	4611      	mov	r1, r2
   1bff4:	4610      	mov	r0, r2
   1bff6:	f7f7 fc53 	bl	138a0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bffa:	4604      	mov	r4, r0
   1bffc:	b178      	cbz	r0, 1c01e <preempt_ticker_stop+0x56>
   1bffe:	2802      	cmp	r0, #2
   1c000:	d00e      	beq.n	1c020 <preempt_ticker_stop+0x58>
   1c002:	4a0e      	ldr	r2, [pc, #56]	; (1c03c <preempt_ticker_stop+0x74>)
   1c004:	490e      	ldr	r1, [pc, #56]	; (1c040 <preempt_ticker_stop+0x78>)
   1c006:	480f      	ldr	r0, [pc, #60]	; (1c044 <preempt_ticker_stop+0x7c>)
   1c008:	f240 3362 	movw	r3, #866	; 0x362
   1c00c:	f009 fd7a 	bl	25b04 <printk>
   1c010:	4040      	eors	r0, r0
   1c012:	f380 8811 	msr	BASEPRI, r0
   1c016:	f04f 0003 	mov.w	r0, #3
   1c01a:	df02      	svc	2
   1c01c:	e000      	b.n	1c020 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1c01e:	2400      	movs	r4, #0
}
   1c020:	4620      	mov	r0, r4
   1c022:	b002      	add	sp, #8
   1c024:	bd10      	pop	{r4, pc}
   1c026:	bf00      	nop
   1c028:	20005fe8 	.word	0x20005fe8
   1c02c:	20005fe7 	.word	0x20005fe7
   1c030:	20005fe3 	.word	0x20005fe3
   1c034:	20005fe4 	.word	0x20005fe4
   1c038:	0001be49 	.word	0x0001be49
   1c03c:	0002d4c0 	.word	0x0002d4c0
   1c040:	0002cf1c 	.word	0x0002cf1c
   1c044:	0002c8dc 	.word	0x0002c8dc

0001c048 <preempt_ticker_start>:
{
   1c048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1c04c:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1c04e:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1c052:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1c054:	4b2a      	ldr	r3, [pc, #168]	; (1c100 <preempt_ticker_start+0xb8>)
   1c056:	4f2b      	ldr	r7, [pc, #172]	; (1c104 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1c058:	68d6      	ldr	r6, [r2, #12]
{
   1c05a:	460d      	mov	r5, r1
   1c05c:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1c05e:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1c060:	6890      	ldr	r0, [r2, #8]
   1c062:	6853      	ldr	r3, [r2, #4]
   1c064:	4298      	cmp	r0, r3
   1c066:	bf2c      	ite	cs
   1c068:	ebc6 0600 	rsbcs	r6, r6, r0
   1c06c:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1c070:	783b      	ldrb	r3, [r7, #0]
   1c072:	4299      	cmp	r1, r3
{
   1c074:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1c076:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1c07a:	d033      	beq.n	1c0e4 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1c07c:	2c00      	cmp	r4, #0
   1c07e:	d03a      	beq.n	1c0f6 <preempt_ticker_start+0xae>
   1c080:	7f23      	ldrb	r3, [r4, #28]
   1c082:	079b      	lsls	r3, r3, #30
   1c084:	d437      	bmi.n	1c0f6 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1c086:	f8df a080 	ldr.w	sl, [pc, #128]	; 1c108 <preempt_ticker_start+0xc0>
   1c08a:	f8da 0000 	ldr.w	r0, [sl]
   1c08e:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1c092:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1c096:	d022      	beq.n	1c0de <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1c098:	f7ff ff96 	bl	1bfc8 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1c09c:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1c09e:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1c0a0:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1c0a4:	f043 0302 	orr.w	r3, r3, #2
   1c0a8:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1c0aa:	4620      	mov	r0, r4
   1c0ac:	69a3      	ldr	r3, [r4, #24]
   1c0ae:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c0b0:	4b16      	ldr	r3, [pc, #88]	; (1c10c <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1c0b2:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c0b4:	9600      	str	r6, [sp, #0]
   1c0b6:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1c0ba:	4b15      	ldr	r3, [pc, #84]	; (1c110 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1c0bc:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c0c0:	2200      	movs	r2, #0
	preempt_start_req++;
   1c0c2:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c0c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1c0c8:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c0ca:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1c0ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1c0d2:	4643      	mov	r3, r8
   1c0d4:	4611      	mov	r1, r2
   1c0d6:	4610      	mov	r0, r2
	preempt_start_req++;
   1c0d8:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c0da:	f7f7 fb57 	bl	1378c <ticker_start>
}
   1c0de:	b00a      	add	sp, #40	; 0x28
   1c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1c0e4:	4b0b      	ldr	r3, [pc, #44]	; (1c114 <preempt_ticker_start+0xcc>)
   1c0e6:	4a0c      	ldr	r2, [pc, #48]	; (1c118 <preempt_ticker_start+0xd0>)
   1c0e8:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1c0ea:	7812      	ldrb	r2, [r2, #0]
   1c0ec:	429a      	cmp	r2, r3
   1c0ee:	d1c5      	bne.n	1c07c <preempt_ticker_start+0x34>
   1c0f0:	f8df a014 	ldr.w	sl, [pc, #20]	; 1c108 <preempt_ticker_start+0xc0>
   1c0f4:	e7dc      	b.n	1c0b0 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1c0f6:	2000      	movs	r0, #0
}
   1c0f8:	b00a      	add	sp, #40	; 0x28
   1c0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c0fe:	bf00      	nop
   1c100:	20005fe5 	.word	0x20005fe5
   1c104:	20005fe6 	.word	0x20005fe6
   1c108:	20004e68 	.word	0x20004e68
   1c10c:	0001bea1 	.word	0x0001bea1
   1c110:	0001bf49 	.word	0x0001bf49
   1c114:	20005fe3 	.word	0x20005fe3
   1c118:	20005fe4 	.word	0x20005fe4

0001c11c <preempt>:

static void preempt(void *param)
{
   1c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1c11e:	4e4b      	ldr	r6, [pc, #300]	; (1c24c <preempt+0x130>)
   1c120:	68b3      	ldr	r3, [r6, #8]
{
   1c122:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1c124:	b1b3      	cbz	r3, 1c154 <preempt+0x38>
   1c126:	6833      	ldr	r3, [r6, #0]
   1c128:	b1a3      	cbz	r3, 1c154 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1c12a:	23ff      	movs	r3, #255	; 0xff
   1c12c:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1c12e:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1c132:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1c136:	f7fa f9eb 	bl	16510 <ull_prepare_dequeue_iter>
	if (!next) {
   1c13a:	4601      	mov	r1, r0
   1c13c:	b150      	cbz	r0, 1c154 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1c13e:	7f0b      	ldrb	r3, [r1, #28]
   1c140:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1c144:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1c148:	d006      	beq.n	1c158 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1c14a:	f7fa f9e1 	bl	16510 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1c14e:	4601      	mov	r1, r0
   1c150:	2800      	cmp	r0, #0
   1c152:	d1f4      	bne.n	1c13e <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1c154:	b009      	add	sp, #36	; 0x24
   1c156:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1c158:	428d      	cmp	r5, r1
   1c15a:	d126      	bne.n	1c1aa <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1c15c:	6873      	ldr	r3, [r6, #4]
   1c15e:	6831      	ldr	r1, [r6, #0]
   1c160:	68e8      	ldr	r0, [r5, #12]
   1c162:	aa03      	add	r2, sp, #12
   1c164:	4798      	blx	r3
	if (!err) {
   1c166:	4607      	mov	r7, r0
   1c168:	b1b0      	cbz	r0, 1c198 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1c16a:	68b3      	ldr	r3, [r6, #8]
   1c16c:	6831      	ldr	r1, [r6, #0]
   1c16e:	4620      	mov	r0, r4
   1c170:	4798      	blx	r3
	if (err == -EAGAIN) {
   1c172:	f117 0f0b 	cmn.w	r7, #11
   1c176:	d02c      	beq.n	1c1d2 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1c178:	378c      	adds	r7, #140	; 0x8c
   1c17a:	d0eb      	beq.n	1c154 <preempt+0x38>
   1c17c:	4a34      	ldr	r2, [pc, #208]	; (1c250 <preempt+0x134>)
   1c17e:	4935      	ldr	r1, [pc, #212]	; (1c254 <preempt+0x138>)
   1c180:	4835      	ldr	r0, [pc, #212]	; (1c258 <preempt+0x13c>)
   1c182:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1c186:	f009 fcbd 	bl	25b04 <printk>
   1c18a:	4040      	eors	r0, r0
   1c18c:	f380 8811 	msr	BASEPRI, r0
   1c190:	f04f 0003 	mov.w	r0, #3
   1c194:	df02      	svc	2
   1c196:	e7dd      	b.n	1c154 <preempt+0x38>
		next->is_aborted = 1;
   1c198:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c19a:	69aa      	ldr	r2, [r5, #24]
   1c19c:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1c19e:	f043 0302 	orr.w	r3, r3, #2
   1c1a2:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c1a4:	4628      	mov	r0, r5
   1c1a6:	4790      	blx	r2
		return;
   1c1a8:	e7d4      	b.n	1c154 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1c1aa:	4620      	mov	r0, r4
   1c1ac:	f7ff ff4c 	bl	1c048 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c1b0:	f030 0302 	bics.w	r3, r0, #2
   1c1b4:	d0ce      	beq.n	1c154 <preempt+0x38>
   1c1b6:	4a26      	ldr	r2, [pc, #152]	; (1c250 <preempt+0x134>)
   1c1b8:	4928      	ldr	r1, [pc, #160]	; (1c25c <preempt+0x140>)
   1c1ba:	4827      	ldr	r0, [pc, #156]	; (1c258 <preempt+0x13c>)
   1c1bc:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1c1c0:	f009 fca0 	bl	25b04 <printk>
   1c1c4:	4040      	eors	r0, r0
   1c1c6:	f380 8811 	msr	BASEPRI, r0
   1c1ca:	f04f 0003 	mov.w	r0, #3
   1c1ce:	df02      	svc	2
   1c1d0:	e7c0      	b.n	1c154 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1c1d2:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1c1d4:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1c1d8:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1c1dc:	f7fa f998 	bl	16510 <ull_prepare_dequeue_iter>
		while (iter) {
   1c1e0:	b928      	cbnz	r0, 1c1ee <preempt+0xd2>
   1c1e2:	e013      	b.n	1c20c <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1c1e4:	f10d 000b 	add.w	r0, sp, #11
   1c1e8:	f7fa f992 	bl	16510 <ull_prepare_dequeue_iter>
		while (iter) {
   1c1ec:	b170      	cbz	r0, 1c20c <preempt+0xf0>
			if (!iter->is_aborted &&
   1c1ee:	7f03      	ldrb	r3, [r0, #28]
   1c1f0:	079a      	lsls	r2, r3, #30
   1c1f2:	d4f7      	bmi.n	1c1e4 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1c1f4:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1c1f6:	6831      	ldr	r1, [r6, #0]
   1c1f8:	4291      	cmp	r1, r2
   1c1fa:	d1f3      	bne.n	1c1e4 <preempt+0xc8>
				iter->is_aborted = 1;
   1c1fc:	f043 0302 	orr.w	r3, r3, #2
   1c200:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1c202:	6983      	ldr	r3, [r0, #24]
   1c204:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1c206:	f88d 400b 	strb.w	r4, [sp, #11]
   1c20a:	e7eb      	b.n	1c1e4 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1c20c:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1c20e:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1c210:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c212:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1c214:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c218:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1c21a:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1c21c:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c21e:	9b03      	ldr	r3, [sp, #12]
   1c220:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1c224:	aa04      	add	r2, sp, #16
   1c226:	f7fa f935 	bl	16494 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1c22a:	2800      	cmp	r0, #0
   1c22c:	d192      	bne.n	1c154 <preempt+0x38>
   1c22e:	4a08      	ldr	r2, [pc, #32]	; (1c250 <preempt+0x134>)
   1c230:	490b      	ldr	r1, [pc, #44]	; (1c260 <preempt+0x144>)
   1c232:	4809      	ldr	r0, [pc, #36]	; (1c258 <preempt+0x13c>)
   1c234:	f240 33ce 	movw	r3, #974	; 0x3ce
   1c238:	f009 fc64 	bl	25b04 <printk>
   1c23c:	4040      	eors	r0, r0
   1c23e:	f380 8811 	msr	BASEPRI, r0
   1c242:	f04f 0003 	mov.w	r0, #3
   1c246:	df02      	svc	2
   1c248:	e784      	b.n	1c154 <preempt+0x38>
   1c24a:	bf00      	nop
   1c24c:	20004e54 	.word	0x20004e54
   1c250:	0002d4c0 	.word	0x0002d4c0
   1c254:	0002d598 	.word	0x0002d598
   1c258:	0002c8dc 	.word	0x0002c8dc
   1c25c:	0002cf1c 	.word	0x0002cf1c
   1c260:	0002d590 	.word	0x0002d590

0001c264 <lll_init>:
{
   1c264:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1c266:	4816      	ldr	r0, [pc, #88]	; (1c2c0 <lll_init+0x5c>)
   1c268:	f007 ff16 	bl	24098 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1c26c:	4b15      	ldr	r3, [pc, #84]	; (1c2c4 <lll_init+0x60>)
   1c26e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1c270:	b310      	cbz	r0, 1c2b8 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1c272:	4b15      	ldr	r3, [pc, #84]	; (1c2c8 <lll_init+0x64>)
   1c274:	2400      	movs	r4, #0
   1c276:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1c278:	f000 fb08 	bl	1c88c <lll_clock_init>
	if (err < 0) {
   1c27c:	2800      	cmp	r0, #0
   1c27e:	db1a      	blt.n	1c2b6 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1c280:	4621      	mov	r1, r4
   1c282:	2001      	movs	r0, #1
   1c284:	4622      	mov	r2, r4
   1c286:	f7ef fd6b 	bl	bd60 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1c28a:	4622      	mov	r2, r4
   1c28c:	200b      	movs	r0, #11
   1c28e:	2101      	movs	r1, #1
   1c290:	f7ef fd66 	bl	bd60 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1c294:	4622      	mov	r2, r4
   1c296:	4621      	mov	r1, r4
   1c298:	2018      	movs	r0, #24
   1c29a:	f7ef fd61 	bl	bd60 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1c29e:	2001      	movs	r0, #1
   1c2a0:	f7ef fd2c 	bl	bcfc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1c2a4:	200b      	movs	r0, #11
   1c2a6:	f7ef fd29 	bl	bcfc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1c2aa:	2018      	movs	r0, #24
   1c2ac:	f7ef fd26 	bl	bcfc <arch_irq_enable>
	radio_setup();
   1c2b0:	f002 f8ec 	bl	1e48c <radio_setup>
	return 0;
   1c2b4:	4620      	mov	r0, r4
}
   1c2b6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1c2b8:	f06f 0012 	mvn.w	r0, #18
}
   1c2bc:	bd10      	pop	{r4, pc}
   1c2be:	bf00      	nop
   1c2c0:	0002d5a4 	.word	0x0002d5a4
   1c2c4:	20004e50 	.word	0x20004e50
   1c2c8:	20004e54 	.word	0x20004e54

0001c2cc <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1c2cc:	4a05      	ldr	r2, [pc, #20]	; (1c2e4 <lll_csrand_get+0x18>)
{
   1c2ce:	b410      	push	{r4}
   1c2d0:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1c2d2:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1c2d4:	6884      	ldr	r4, [r0, #8]
   1c2d6:	6824      	ldr	r4, [r4, #0]
   1c2d8:	b28a      	uxth	r2, r1
   1c2da:	4619      	mov	r1, r3
   1c2dc:	4623      	mov	r3, r4
}
   1c2de:	bc10      	pop	{r4}
   1c2e0:	4718      	bx	r3
   1c2e2:	bf00      	nop
   1c2e4:	20004e50 	.word	0x20004e50

0001c2e8 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1c2e8:	4b08      	ldr	r3, [pc, #32]	; (1c30c <lll_csrand_isr_get+0x24>)
{
   1c2ea:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1c2ec:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1c2ee:	68ab      	ldr	r3, [r5, #8]
   1c2f0:	685c      	ldr	r4, [r3, #4]
   1c2f2:	b13c      	cbz	r4, 1c304 <lll_csrand_isr_get+0x1c>
   1c2f4:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1c2f6:	46a4      	mov	ip, r4
   1c2f8:	4601      	mov	r1, r0
   1c2fa:	b292      	uxth	r2, r2
   1c2fc:	4628      	mov	r0, r5
   1c2fe:	2300      	movs	r3, #0
}
   1c300:	bc30      	pop	{r4, r5}
   1c302:	4760      	bx	ip
   1c304:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c308:	bc30      	pop	{r4, r5}
   1c30a:	4770      	bx	lr
   1c30c:	20004e50 	.word	0x20004e50

0001c310 <lll_rand_isr_get>:
   1c310:	4b08      	ldr	r3, [pc, #32]	; (1c334 <lll_rand_isr_get+0x24>)
   1c312:	b430      	push	{r4, r5}
   1c314:	681d      	ldr	r5, [r3, #0]
   1c316:	68ab      	ldr	r3, [r5, #8]
   1c318:	685c      	ldr	r4, [r3, #4]
   1c31a:	b13c      	cbz	r4, 1c32c <lll_rand_isr_get+0x1c>
   1c31c:	460a      	mov	r2, r1
   1c31e:	46a4      	mov	ip, r4
   1c320:	4601      	mov	r1, r0
   1c322:	b292      	uxth	r2, r2
   1c324:	4628      	mov	r0, r5
   1c326:	2300      	movs	r3, #0
   1c328:	bc30      	pop	{r4, r5}
   1c32a:	4760      	bx	ip
   1c32c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c330:	bc30      	pop	{r4, r5}
   1c332:	4770      	bx	lr
   1c334:	20004e50 	.word	0x20004e50

0001c338 <lll_reset>:
}
   1c338:	2000      	movs	r0, #0
   1c33a:	4770      	bx	lr

0001c33c <lll_disable>:
{
   1c33c:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1c33e:	4604      	mov	r4, r0
{
   1c340:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1c342:	b378      	cbz	r0, 1c3a4 <lll_disable+0x68>
   1c344:	4b23      	ldr	r3, [pc, #140]	; (1c3d4 <lll_disable+0x98>)
   1c346:	681a      	ldr	r2, [r3, #0]
   1c348:	4282      	cmp	r2, r0
   1c34a:	d025      	beq.n	1c398 <lll_disable+0x5c>
		idx = UINT8_MAX;
   1c34c:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1c34e:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1c352:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1c356:	f7fa f8db 	bl	16510 <ull_prepare_dequeue_iter>
		while (next) {
   1c35a:	b938      	cbnz	r0, 1c36c <lll_disable+0x30>
   1c35c:	e01a      	b.n	1c394 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1c35e:	428c      	cmp	r4, r1
   1c360:	d00a      	beq.n	1c378 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1c362:	f10d 0007 	add.w	r0, sp, #7
   1c366:	f7fa f8d3 	bl	16510 <ull_prepare_dequeue_iter>
		while (next) {
   1c36a:	b198      	cbz	r0, 1c394 <lll_disable+0x58>
			if (!next->is_aborted &&
   1c36c:	7f03      	ldrb	r3, [r0, #28]
   1c36e:	079b      	lsls	r3, r3, #30
   1c370:	d4f7      	bmi.n	1c362 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1c372:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1c374:	2c00      	cmp	r4, #0
   1c376:	d1f2      	bne.n	1c35e <lll_disable+0x22>
				next->is_aborted = 1;
   1c378:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1c37a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1c37c:	f043 0302 	orr.w	r3, r3, #2
   1c380:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1c382:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1c384:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1c388:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1c38c:	f7fa f8c0 	bl	16510 <ull_prepare_dequeue_iter>
		while (next) {
   1c390:	2800      	cmp	r0, #0
   1c392:	d1eb      	bne.n	1c36c <lll_disable+0x30>
}
   1c394:	b003      	add	sp, #12
   1c396:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1c398:	689b      	ldr	r3, [r3, #8]
   1c39a:	b16b      	cbz	r3, 1c3b8 <lll_disable+0x7c>
   1c39c:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1c39e:	2000      	movs	r0, #0
   1c3a0:	4798      	blx	r3
   1c3a2:	e7d3      	b.n	1c34c <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1c3a4:	4a0b      	ldr	r2, [pc, #44]	; (1c3d4 <lll_disable+0x98>)
   1c3a6:	6893      	ldr	r3, [r2, #8]
   1c3a8:	2b00      	cmp	r3, #0
   1c3aa:	d0cf      	beq.n	1c34c <lll_disable+0x10>
   1c3ac:	6811      	ldr	r1, [r2, #0]
   1c3ae:	2900      	cmp	r1, #0
   1c3b0:	d0cc      	beq.n	1c34c <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1c3b2:	2000      	movs	r0, #0
   1c3b4:	4798      	blx	r3
   1c3b6:	e7c9      	b.n	1c34c <lll_disable+0x10>
			LL_ASSERT(!param);
   1c3b8:	4a07      	ldr	r2, [pc, #28]	; (1c3d8 <lll_disable+0x9c>)
   1c3ba:	4908      	ldr	r1, [pc, #32]	; (1c3dc <lll_disable+0xa0>)
   1c3bc:	4808      	ldr	r0, [pc, #32]	; (1c3e0 <lll_disable+0xa4>)
   1c3be:	23fd      	movs	r3, #253	; 0xfd
   1c3c0:	f009 fba0 	bl	25b04 <printk>
   1c3c4:	4040      	eors	r0, r0
   1c3c6:	f380 8811 	msr	BASEPRI, r0
   1c3ca:	f04f 0003 	mov.w	r0, #3
   1c3ce:	df02      	svc	2
   1c3d0:	e7bc      	b.n	1c34c <lll_disable+0x10>
   1c3d2:	bf00      	nop
   1c3d4:	20004e54 	.word	0x20004e54
   1c3d8:	0002d4c0 	.word	0x0002d4c0
   1c3dc:	0002d5a8 	.word	0x0002d5a8
   1c3e0:	0002c8dc 	.word	0x0002c8dc

0001c3e4 <lll_prepare_done>:
}
   1c3e4:	2000      	movs	r0, #0
   1c3e6:	4770      	bx	lr

0001c3e8 <lll_done>:
{
   1c3e8:	b538      	push	{r3, r4, r5, lr}
   1c3ea:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1c3ec:	f7fa f882 	bl	164f4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1c3f0:	b154      	cbz	r4, 1c408 <lll_done+0x20>
   1c3f2:	b310      	cbz	r0, 1c43a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1c3f4:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1c3f6:	2000      	movs	r0, #0
   1c3f8:	f7fa f8aa 	bl	16550 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1c3fc:	4620      	mov	r0, r4
   1c3fe:	f7fa f90b 	bl	16618 <ull_event_done>
	LL_ASSERT(evdone);
   1c402:	b158      	cbz	r0, 1c41c <lll_done+0x34>
}
   1c404:	2000      	movs	r0, #0
   1c406:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1c408:	4d1a      	ldr	r5, [pc, #104]	; (1c474 <lll_done+0x8c>)
   1c40a:	68ab      	ldr	r3, [r5, #8]
   1c40c:	b31b      	cbz	r3, 1c456 <lll_done+0x6e>
		param = event.curr.param;
   1c40e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1c410:	2300      	movs	r3, #0
   1c412:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1c414:	602b      	str	r3, [r5, #0]
		if (param) {
   1c416:	2c00      	cmp	r4, #0
   1c418:	d1ec      	bne.n	1c3f4 <lll_done+0xc>
   1c41a:	e7ec      	b.n	1c3f6 <lll_done+0xe>
	LL_ASSERT(evdone);
   1c41c:	4a16      	ldr	r2, [pc, #88]	; (1c478 <lll_done+0x90>)
   1c41e:	4917      	ldr	r1, [pc, #92]	; (1c47c <lll_done+0x94>)
   1c420:	4817      	ldr	r0, [pc, #92]	; (1c480 <lll_done+0x98>)
   1c422:	f240 136d 	movw	r3, #365	; 0x16d
   1c426:	f009 fb6d 	bl	25b04 <printk>
   1c42a:	4040      	eors	r0, r0
   1c42c:	f380 8811 	msr	BASEPRI, r0
   1c430:	f04f 0003 	mov.w	r0, #3
   1c434:	df02      	svc	2
}
   1c436:	2000      	movs	r0, #0
   1c438:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1c43a:	4a0f      	ldr	r2, [pc, #60]	; (1c478 <lll_done+0x90>)
   1c43c:	4911      	ldr	r1, [pc, #68]	; (1c484 <lll_done+0x9c>)
   1c43e:	4810      	ldr	r0, [pc, #64]	; (1c480 <lll_done+0x98>)
   1c440:	f240 1337 	movw	r3, #311	; 0x137
   1c444:	f009 fb5e 	bl	25b04 <printk>
   1c448:	4040      	eors	r0, r0
   1c44a:	f380 8811 	msr	BASEPRI, r0
   1c44e:	f04f 0003 	mov.w	r0, #3
   1c452:	df02      	svc	2
   1c454:	e7ce      	b.n	1c3f4 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1c456:	4a08      	ldr	r2, [pc, #32]	; (1c478 <lll_done+0x90>)
   1c458:	490b      	ldr	r1, [pc, #44]	; (1c488 <lll_done+0xa0>)
   1c45a:	4809      	ldr	r0, [pc, #36]	; (1c480 <lll_done+0x98>)
   1c45c:	f240 133d 	movw	r3, #317	; 0x13d
   1c460:	f009 fb50 	bl	25b04 <printk>
   1c464:	4040      	eors	r0, r0
   1c466:	f380 8811 	msr	BASEPRI, r0
   1c46a:	f04f 0003 	mov.w	r0, #3
   1c46e:	df02      	svc	2
   1c470:	e7cd      	b.n	1c40e <lll_done+0x26>
   1c472:	bf00      	nop
   1c474:	20004e54 	.word	0x20004e54
   1c478:	0002d4c0 	.word	0x0002d4c0
   1c47c:	0002d5d4 	.word	0x0002d5d4
   1c480:	0002c8dc 	.word	0x0002c8dc
   1c484:	0002d5b0 	.word	0x0002d5b0
   1c488:	0002d5c0 	.word	0x0002d5c0

0001c48c <lll_is_done>:
	*is_resume = (param != event.curr.param);
   1c48c:	4a05      	ldr	r2, [pc, #20]	; (1c4a4 <lll_is_done+0x18>)
   1c48e:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   1c490:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   1c492:	1a1b      	subs	r3, r3, r0
   1c494:	bf18      	it	ne
   1c496:	2301      	movne	r3, #1
}
   1c498:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   1c49c:	700b      	strb	r3, [r1, #0]
}
   1c49e:	0940      	lsrs	r0, r0, #5
   1c4a0:	4770      	bx	lr
   1c4a2:	bf00      	nop
   1c4a4:	20004e54 	.word	0x20004e54

0001c4a8 <lll_is_abort_cb>:
}
   1c4a8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c4ac:	4770      	bx	lr
   1c4ae:	bf00      	nop

0001c4b0 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   1c4b0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1c4b4:	2a00      	cmp	r2, #0
   1c4b6:	db04      	blt.n	1c4c2 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   1c4b8:	429a      	cmp	r2, r3
   1c4ba:	bf38      	it	cc
   1c4bc:	461a      	movcc	r2, r3
   1c4be:	4610      	mov	r0, r2
}
   1c4c0:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1c4c2:	68c0      	ldr	r0, [r0, #12]
   1c4c4:	4298      	cmp	r0, r3
   1c4c6:	bf38      	it	cc
   1c4c8:	4618      	movcc	r0, r3
   1c4ca:	4770      	bx	lr

0001c4cc <lll_preempt_calc>:
{
   1c4cc:	b510      	push	{r4, lr}
   1c4ce:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1c4d0:	f7f7 fa86 	bl	139e0 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1c4d4:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1c4d6:	0203      	lsls	r3, r0, #8
   1c4d8:	d405      	bmi.n	1c4e6 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1c4da:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1c4dc:	2809      	cmp	r0, #9
   1c4de:	bf94      	ite	ls
   1c4e0:	2000      	movls	r0, #0
   1c4e2:	2001      	movhi	r0, #1
}
   1c4e4:	bd10      	pop	{r4, pc}
		return 0;
   1c4e6:	2000      	movs	r0, #0
}
   1c4e8:	bd10      	pop	{r4, pc}
   1c4ea:	bf00      	nop

0001c4ec <lll_chan_set>:
	switch (chan) {
   1c4ec:	2826      	cmp	r0, #38	; 0x26
{
   1c4ee:	b510      	push	{r4, lr}
   1c4f0:	4604      	mov	r4, r0
	switch (chan) {
   1c4f2:	d01c      	beq.n	1c52e <lll_chan_set+0x42>
   1c4f4:	2827      	cmp	r0, #39	; 0x27
   1c4f6:	d012      	beq.n	1c51e <lll_chan_set+0x32>
   1c4f8:	2825      	cmp	r0, #37	; 0x25
   1c4fa:	d008      	beq.n	1c50e <lll_chan_set+0x22>
		if (chan < 11) {
   1c4fc:	280a      	cmp	r0, #10
   1c4fe:	d91e      	bls.n	1c53e <lll_chan_set+0x52>
		} else if (chan < 40) {
   1c500:	2827      	cmp	r0, #39	; 0x27
   1c502:	d821      	bhi.n	1c548 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1c504:	3003      	adds	r0, #3
   1c506:	0040      	lsls	r0, r0, #1
   1c508:	f002 f81c 	bl	1e544 <radio_freq_chan_set>
   1c50c:	e002      	b.n	1c514 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1c50e:	2002      	movs	r0, #2
   1c510:	f002 f818 	bl	1e544 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c514:	4620      	mov	r0, r4
}
   1c516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c51a:	f002 b819 	b.w	1e550 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1c51e:	2050      	movs	r0, #80	; 0x50
   1c520:	f002 f810 	bl	1e544 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c524:	4620      	mov	r0, r4
}
   1c526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c52a:	f002 b811 	b.w	1e550 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1c52e:	201a      	movs	r0, #26
   1c530:	f002 f808 	bl	1e544 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c534:	4620      	mov	r0, r4
}
   1c536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c53a:	f002 b809 	b.w	1e550 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1c53e:	3002      	adds	r0, #2
   1c540:	0040      	lsls	r0, r0, #1
   1c542:	f001 ffff 	bl	1e544 <radio_freq_chan_set>
   1c546:	e7e5      	b.n	1c514 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1c548:	4a06      	ldr	r2, [pc, #24]	; (1c564 <lll_chan_set+0x78>)
   1c54a:	4907      	ldr	r1, [pc, #28]	; (1c568 <lll_chan_set+0x7c>)
   1c54c:	4807      	ldr	r0, [pc, #28]	; (1c56c <lll_chan_set+0x80>)
   1c54e:	f240 13df 	movw	r3, #479	; 0x1df
   1c552:	f009 fad7 	bl	25b04 <printk>
   1c556:	4040      	eors	r0, r0
   1c558:	f380 8811 	msr	BASEPRI, r0
   1c55c:	f04f 0003 	mov.w	r0, #3
   1c560:	df02      	svc	2
   1c562:	e7d7      	b.n	1c514 <lll_chan_set+0x28>
   1c564:	0002d4c0 	.word	0x0002d4c0
   1c568:	0002c97c 	.word	0x0002c97c
   1c56c:	0002c8dc 	.word	0x0002c8dc

0001c570 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1c570:	f002 b84c 	b.w	1e60c <radio_tx_ready_delay_get>

0001c574 <lll_isr_tx_status_reset>:
{
   1c574:	b508      	push	{r3, lr}
	radio_status_reset();
   1c576:	f002 f877 	bl	1e668 <radio_status_reset>
}
   1c57a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1c57e:	f002 b9d7 	b.w	1e930 <radio_tmr_status_reset>
   1c582:	bf00      	nop

0001c584 <lll_isr_rx_status_reset>:
{
   1c584:	b508      	push	{r3, lr}
	radio_status_reset();
   1c586:	f002 f86f 	bl	1e668 <radio_status_reset>
	radio_tmr_status_reset();
   1c58a:	f002 f9d1 	bl	1e930 <radio_tmr_status_reset>
}
   1c58e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1c592:	f002 b979 	b.w	1e888 <radio_rssi_status_reset>
   1c596:	bf00      	nop

0001c598 <lll_isr_status_reset>:
{
   1c598:	b508      	push	{r3, lr}
	radio_status_reset();
   1c59a:	f002 f865 	bl	1e668 <radio_status_reset>
	radio_tmr_status_reset();
   1c59e:	f002 f9c7 	bl	1e930 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1c5a2:	f002 f9ad 	bl	1e900 <radio_filter_status_reset>
	radio_ar_status_reset();
   1c5a6:	f002 fba5 	bl	1ecf4 <radio_ar_status_reset>
}
   1c5aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1c5ae:	f002 b96b 	b.w	1e888 <radio_rssi_status_reset>
   1c5b2:	bf00      	nop

0001c5b4 <lll_isr_cleanup>:
{
   1c5b4:	b508      	push	{r3, lr}
   1c5b6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1c5b8:	4815      	ldr	r0, [pc, #84]	; (1c610 <lll_isr_cleanup+0x5c>)
   1c5ba:	f001 ff47 	bl	1e44c <radio_isr_set>
	if (!radio_is_idle()) {
   1c5be:	f002 f873 	bl	1e6a8 <radio_is_idle>
   1c5c2:	b150      	cbz	r0, 1c5da <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1c5c4:	f002 fa8a 	bl	1eadc <radio_tmr_stop>
	err = lll_hfclock_off();
   1c5c8:	f000 f9a4 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1c5cc:	2800      	cmp	r0, #0
   1c5ce:	db0c      	blt.n	1c5ea <lll_isr_cleanup+0x36>
}
   1c5d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1c5d4:	2000      	movs	r0, #0
   1c5d6:	f7ff bf07 	b.w	1c3e8 <lll_done>
		radio_disable();
   1c5da:	f002 f831 	bl	1e640 <radio_disable>
	radio_tmr_stop();
   1c5de:	f002 fa7d 	bl	1eadc <radio_tmr_stop>
	err = lll_hfclock_off();
   1c5e2:	f000 f997 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1c5e6:	2800      	cmp	r0, #0
   1c5e8:	daf2      	bge.n	1c5d0 <lll_isr_cleanup+0x1c>
   1c5ea:	4a0a      	ldr	r2, [pc, #40]	; (1c614 <lll_isr_cleanup+0x60>)
   1c5ec:	490a      	ldr	r1, [pc, #40]	; (1c618 <lll_isr_cleanup+0x64>)
   1c5ee:	480b      	ldr	r0, [pc, #44]	; (1c61c <lll_isr_cleanup+0x68>)
   1c5f0:	f240 2342 	movw	r3, #578	; 0x242
   1c5f4:	f009 fa86 	bl	25b04 <printk>
   1c5f8:	4040      	eors	r0, r0
   1c5fa:	f380 8811 	msr	BASEPRI, r0
   1c5fe:	f04f 0003 	mov.w	r0, #3
   1c602:	df02      	svc	2
	lll_done(NULL);
   1c604:	2000      	movs	r0, #0
}
   1c606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1c60a:	f7ff beed 	b.w	1c3e8 <lll_done>
   1c60e:	bf00      	nop
   1c610:	0001bf45 	.word	0x0001bf45
   1c614:	0002d4c0 	.word	0x0002d4c0
   1c618:	0002d5dc 	.word	0x0002d5dc
   1c61c:	0002c8dc 	.word	0x0002c8dc

0001c620 <lll_isr_abort>:
{
   1c620:	b510      	push	{r4, lr}
   1c622:	4604      	mov	r4, r0
	radio_status_reset();
   1c624:	f002 f820 	bl	1e668 <radio_status_reset>
	radio_tmr_status_reset();
   1c628:	f002 f982 	bl	1e930 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1c62c:	f002 f968 	bl	1e900 <radio_filter_status_reset>
	radio_ar_status_reset();
   1c630:	f002 fb60 	bl	1ecf4 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1c634:	f002 f928 	bl	1e888 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1c638:	4620      	mov	r0, r4
}
   1c63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1c63e:	f7ff bfb9 	b.w	1c5b4 <lll_isr_cleanup>
   1c642:	bf00      	nop

0001c644 <lll_isr_early_abort>:
{
   1c644:	b508      	push	{r3, lr}
   1c646:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1c648:	4813      	ldr	r0, [pc, #76]	; (1c698 <lll_isr_early_abort+0x54>)
   1c64a:	f001 feff 	bl	1e44c <radio_isr_set>
	if (!radio_is_idle()) {
   1c64e:	f002 f82b 	bl	1e6a8 <radio_is_idle>
   1c652:	b140      	cbz	r0, 1c666 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1c654:	f000 f95e 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1c658:	2800      	cmp	r0, #0
   1c65a:	db0a      	blt.n	1c672 <lll_isr_early_abort+0x2e>
}
   1c65c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1c660:	2000      	movs	r0, #0
   1c662:	f7ff bec1 	b.w	1c3e8 <lll_done>
		radio_disable();
   1c666:	f001 ffeb 	bl	1e640 <radio_disable>
	err = lll_hfclock_off();
   1c66a:	f000 f953 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1c66e:	2800      	cmp	r0, #0
   1c670:	daf4      	bge.n	1c65c <lll_isr_early_abort+0x18>
   1c672:	4a0a      	ldr	r2, [pc, #40]	; (1c69c <lll_isr_early_abort+0x58>)
   1c674:	490a      	ldr	r1, [pc, #40]	; (1c6a0 <lll_isr_early_abort+0x5c>)
   1c676:	480b      	ldr	r0, [pc, #44]	; (1c6a4 <lll_isr_early_abort+0x60>)
   1c678:	f240 2351 	movw	r3, #593	; 0x251
   1c67c:	f009 fa42 	bl	25b04 <printk>
   1c680:	4040      	eors	r0, r0
   1c682:	f380 8811 	msr	BASEPRI, r0
   1c686:	f04f 0003 	mov.w	r0, #3
   1c68a:	df02      	svc	2
	lll_done(NULL);
   1c68c:	2000      	movs	r0, #0
}
   1c68e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1c692:	f7ff bea9 	b.w	1c3e8 <lll_done>
   1c696:	bf00      	nop
   1c698:	0001bf45 	.word	0x0001bf45
   1c69c:	0002d4c0 	.word	0x0002d4c0
   1c6a0:	0002d5dc 	.word	0x0002d5dc
   1c6a4:	0002c8dc 	.word	0x0002c8dc

0001c6a8 <lll_prepare_resolve>:
{
   1c6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c6ac:	b084      	sub	sp, #16
   1c6ae:	4606      	mov	r6, r0
   1c6b0:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   1c6b2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1c6b6:	23ff      	movs	r3, #255	; 0xff
{
   1c6b8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1c6bc:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1c6c0:	460f      	mov	r7, r1
   1c6c2:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   1c6c4:	f7f9 ff24 	bl	16510 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1c6c8:	4604      	mov	r4, r0
   1c6ca:	b920      	cbnz	r0, 1c6d6 <lll_prepare_resolve+0x2e>
   1c6cc:	e032      	b.n	1c734 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   1c6ce:	f7f9 ff1f 	bl	16510 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1c6d2:	4604      	mov	r4, r0
   1c6d4:	b370      	cbz	r0, 1c734 <lll_prepare_resolve+0x8c>
   1c6d6:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1c6da:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1c6de:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1c6e2:	d1f4      	bne.n	1c6ce <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1c6e4:	f8df a130 	ldr.w	sl, [pc, #304]	; 1c818 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1c6e8:	f8da 3008 	ldr.w	r3, [sl, #8]
   1c6ec:	bb4b      	cbnz	r3, 1c742 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   1c6ee:	f1b9 0f00 	cmp.w	r9, #0
   1c6f2:	d048      	beq.n	1c786 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1c6f4:	f8cd 9000 	str.w	r9, [sp]
   1c6f8:	4643      	mov	r3, r8
   1c6fa:	462a      	mov	r2, r5
   1c6fc:	4639      	mov	r1, r7
   1c6fe:	4630      	mov	r0, r6
   1c700:	f7f9 fec8 	bl	16494 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1c704:	b980      	cbnz	r0, 1c728 <lll_prepare_resolve+0x80>
   1c706:	4a45      	ldr	r2, [pc, #276]	; (1c81c <lll_prepare_resolve+0x174>)
   1c708:	4945      	ldr	r1, [pc, #276]	; (1c820 <lll_prepare_resolve+0x178>)
   1c70a:	4846      	ldr	r0, [pc, #280]	; (1c824 <lll_prepare_resolve+0x17c>)
   1c70c:	f240 238d 	movw	r3, #653	; 0x28d
   1c710:	f009 f9f8 	bl	25b04 <printk>
   1c714:	4040      	eors	r0, r0
   1c716:	f380 8811 	msr	BASEPRI, r0
   1c71a:	f04f 0003 	mov.w	r0, #3
   1c71e:	df02      	svc	2
   1c720:	2000      	movs	r0, #0
		if (is_resume) {
   1c722:	f1b9 0f00 	cmp.w	r9, #0
   1c726:	d019      	beq.n	1c75c <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1c728:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1c72c:	4620      	mov	r0, r4
   1c72e:	b004      	add	sp, #16
   1c730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   1c734:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1c818 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1c738:	f8da 3008 	ldr.w	r3, [sl, #8]
   1c73c:	2b00      	cmp	r3, #0
   1c73e:	d031      	beq.n	1c7a4 <lll_prepare_resolve+0xfc>
   1c740:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1c742:	f8cd 9000 	str.w	r9, [sp]
   1c746:	4643      	mov	r3, r8
   1c748:	462a      	mov	r2, r5
   1c74a:	4639      	mov	r1, r7
   1c74c:	4630      	mov	r0, r6
   1c74e:	f7f9 fea1 	bl	16494 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1c752:	2800      	cmp	r0, #0
   1c754:	d0d7      	beq.n	1c706 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1c756:	f1b9 0f00 	cmp.w	r9, #0
   1c75a:	d1e5      	bne.n	1c728 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   1c75c:	4601      	mov	r1, r0
   1c75e:	4620      	mov	r0, r4
   1c760:	f7ff fc72 	bl	1c048 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c764:	f030 0302 	bics.w	r3, r0, #2
   1c768:	d0de      	beq.n	1c728 <lll_prepare_resolve+0x80>
   1c76a:	4a2c      	ldr	r2, [pc, #176]	; (1c81c <lll_prepare_resolve+0x174>)
   1c76c:	492e      	ldr	r1, [pc, #184]	; (1c828 <lll_prepare_resolve+0x180>)
   1c76e:	482d      	ldr	r0, [pc, #180]	; (1c824 <lll_prepare_resolve+0x17c>)
   1c770:	f44f 7326 	mov.w	r3, #664	; 0x298
   1c774:	f009 f9c6 	bl	25b04 <printk>
   1c778:	4040      	eors	r0, r0
   1c77a:	f380 8811 	msr	BASEPRI, r0
   1c77e:	f04f 0003 	mov.w	r0, #3
   1c782:	df02      	svc	2
   1c784:	e7d0      	b.n	1c728 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1c786:	42ac      	cmp	r4, r5
   1c788:	d00c      	beq.n	1c7a4 <lll_prepare_resolve+0xfc>
   1c78a:	4a24      	ldr	r2, [pc, #144]	; (1c81c <lll_prepare_resolve+0x174>)
   1c78c:	4927      	ldr	r1, [pc, #156]	; (1c82c <lll_prepare_resolve+0x184>)
   1c78e:	4825      	ldr	r0, [pc, #148]	; (1c824 <lll_prepare_resolve+0x17c>)
   1c790:	f240 23be 	movw	r3, #702	; 0x2be
   1c794:	f009 f9b6 	bl	25b04 <printk>
   1c798:	4040      	eors	r0, r0
   1c79a:	f380 8811 	msr	BASEPRI, r0
   1c79e:	f04f 0003 	mov.w	r0, #3
   1c7a2:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1c7a4:	68eb      	ldr	r3, [r5, #12]
   1c7a6:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   1c7aa:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1c7ae:	4628      	mov	r0, r5
   1c7b0:	47c0      	blx	r8
   1c7b2:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1c7b4:	f7ff fc08 	bl	1bfc8 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c7b8:	f030 0302 	bics.w	r3, r0, #2
   1c7bc:	d11e      	bne.n	1c7fc <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   1c7be:	f10d 000f 	add.w	r0, sp, #15
   1c7c2:	f7f9 fea5 	bl	16510 <ull_prepare_dequeue_iter>
		if (!p) {
   1c7c6:	2800      	cmp	r0, #0
   1c7c8:	d0b0      	beq.n	1c72c <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   1c7ca:	7f03      	ldrb	r3, [r0, #28]
   1c7cc:	f013 0303 	ands.w	r3, r3, #3
   1c7d0:	d1f5      	bne.n	1c7be <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   1c7d2:	4601      	mov	r1, r0
   1c7d4:	4618      	mov	r0, r3
   1c7d6:	f7ff fc37 	bl	1c048 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c7da:	f030 0302 	bics.w	r3, r0, #2
   1c7de:	d0a5      	beq.n	1c72c <lll_prepare_resolve+0x84>
   1c7e0:	4a0e      	ldr	r2, [pc, #56]	; (1c81c <lll_prepare_resolve+0x174>)
   1c7e2:	4911      	ldr	r1, [pc, #68]	; (1c828 <lll_prepare_resolve+0x180>)
   1c7e4:	480f      	ldr	r0, [pc, #60]	; (1c824 <lll_prepare_resolve+0x17c>)
   1c7e6:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1c7ea:	f009 f98b 	bl	25b04 <printk>
   1c7ee:	4040      	eors	r0, r0
   1c7f0:	f380 8811 	msr	BASEPRI, r0
   1c7f4:	f04f 0003 	mov.w	r0, #3
   1c7f8:	df02      	svc	2
   1c7fa:	e797      	b.n	1c72c <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c7fc:	4a07      	ldr	r2, [pc, #28]	; (1c81c <lll_prepare_resolve+0x174>)
   1c7fe:	490a      	ldr	r1, [pc, #40]	; (1c828 <lll_prepare_resolve+0x180>)
   1c800:	4808      	ldr	r0, [pc, #32]	; (1c824 <lll_prepare_resolve+0x17c>)
   1c802:	f240 23cb 	movw	r3, #715	; 0x2cb
   1c806:	f009 f97d 	bl	25b04 <printk>
   1c80a:	4040      	eors	r0, r0
   1c80c:	f380 8811 	msr	BASEPRI, r0
   1c810:	f04f 0003 	mov.w	r0, #3
   1c814:	df02      	svc	2
   1c816:	e7d2      	b.n	1c7be <lll_prepare_resolve+0x116>
   1c818:	20004e54 	.word	0x20004e54
   1c81c:	0002d4c0 	.word	0x0002d4c0
   1c820:	0002d5e8 	.word	0x0002d5e8
   1c824:	0002c8dc 	.word	0x0002c8dc
   1c828:	0002cf1c 	.word	0x0002cf1c
   1c82c:	0002d5f0 	.word	0x0002d5f0

0001c830 <clock_ready>:
	z_impl_k_sem_give(sem);
   1c830:	f101 0010 	add.w	r0, r1, #16
   1c834:	f008 b8aa 	b.w	2498c <z_impl_k_sem_give>

0001c838 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1c838:	b570      	push	{r4, r5, r6, lr}
   1c83a:	4605      	mov	r5, r0
   1c83c:	b08a      	sub	sp, #40	; 0x28
   1c83e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c840:	2201      	movs	r2, #1
   1c842:	2100      	movs	r1, #0
   1c844:	a804      	add	r0, sp, #16
   1c846:	f00e fa73 	bl	2ad30 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1c84a:	4b0f      	ldr	r3, [pc, #60]	; (1c888 <blocking_on+0x50>)
   1c84c:	9301      	str	r3, [sp, #4]
   1c84e:	2600      	movs	r6, #0
   1c850:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1c852:	4669      	mov	r1, sp
   1c854:	4628      	mov	r0, r5
   1c856:	9603      	str	r6, [sp, #12]
   1c858:	9302      	str	r3, [sp, #8]
   1c85a:	f009 f9e9 	bl	25c30 <onoff_request>
	if (err < 0) {
   1c85e:	2800      	cmp	r0, #0
   1c860:	db10      	blt.n	1c884 <blocking_on+0x4c>
   1c862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c866:	4631      	mov	r1, r6
   1c868:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c86c:	fbe4 0103 	umlal	r0, r1, r4, r3
   1c870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c874:	2300      	movs	r3, #0
   1c876:	f7e4 fe4f 	bl	1518 <__aeabi_uldivmod>
   1c87a:	4602      	mov	r2, r0
   1c87c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1c87e:	a804      	add	r0, sp, #16
   1c880:	f008 f8aa 	bl	249d8 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1c884:	b00a      	add	sp, #40	; 0x28
   1c886:	bd70      	pop	{r4, r5, r6, pc}
   1c888:	0001c831 	.word	0x0001c831

0001c88c <lll_clock_init>:

int lll_clock_init(void)
{
   1c88c:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1c88e:	2001      	movs	r0, #1
   1c890:	f003 fed8 	bl	20644 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1c894:	4904      	ldr	r1, [pc, #16]	; (1c8a8 <lll_clock_init+0x1c>)
   1c896:	2300      	movs	r3, #0
   1c898:	2401      	movs	r4, #1
   1c89a:	608c      	str	r4, [r1, #8]
   1c89c:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1c89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8a2:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1c8a4:	f009 b9c4 	b.w	25c30 <onoff_request>
   1c8a8:	20004e70 	.word	0x20004e70

0001c8ac <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1c8ac:	4b0c      	ldr	r3, [pc, #48]	; (1c8e0 <lll_clock_wait+0x34>)
   1c8ae:	781a      	ldrb	r2, [r3, #0]
   1c8b0:	b10a      	cbz	r2, 1c8b6 <lll_clock_wait+0xa>
		return 0;
   1c8b2:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1c8b4:	4770      	bx	lr
{
   1c8b6:	b510      	push	{r4, lr}
	done = true;
   1c8b8:	2001      	movs	r0, #1
   1c8ba:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1c8bc:	f003 fec2 	bl	20644 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1c8c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1c8c4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1c8c6:	f7ff ffb7 	bl	1c838 <blocking_on>
	if (err) {
   1c8ca:	b938      	cbnz	r0, 1c8dc <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1c8cc:	4620      	mov	r0, r4
   1c8ce:	f009 f9f8 	bl	25cc2 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1c8d2:	2802      	cmp	r0, #2
		return 0;
   1c8d4:	bf0c      	ite	eq
   1c8d6:	2000      	moveq	r0, #0
		return -EIO;
   1c8d8:	f06f 0004 	mvnne.w	r0, #4
}
   1c8dc:	bd10      	pop	{r4, pc}
   1c8de:	bf00      	nop
   1c8e0:	20005fe9 	.word	0x20005fe9

0001c8e4 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1c8e4:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c8e6:	4b0a      	ldr	r3, [pc, #40]	; (1c910 <lll_hfclock_on+0x2c>)
   1c8e8:	f3bf 8f5b 	dmb	ish
   1c8ec:	e853 2f00 	ldrex	r2, [r3]
   1c8f0:	1c51      	adds	r1, r2, #1
   1c8f2:	e843 1000 	strex	r0, r1, [r3]
   1c8f6:	2800      	cmp	r0, #0
   1c8f8:	d1f8      	bne.n	1c8ec <lll_hfclock_on+0x8>
   1c8fa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1c8fe:	2a00      	cmp	r2, #0
   1c900:	dd01      	ble.n	1c906 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1c902:	2000      	movs	r0, #0
   1c904:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1c906:	f003 fea5 	bl	20654 <z_nrf_clock_bt_ctlr_hf_request>
}
   1c90a:	2000      	movs	r0, #0
   1c90c:	bd08      	pop	{r3, pc}
   1c90e:	bf00      	nop
   1c910:	20004e6c 	.word	0x20004e6c

0001c914 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1c914:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1c916:	4b0d      	ldr	r3, [pc, #52]	; (1c94c <lll_hfclock_off+0x38>)
   1c918:	681a      	ldr	r2, [r3, #0]
   1c91a:	2a00      	cmp	r2, #0
   1c91c:	dd12      	ble.n	1c944 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c91e:	f3bf 8f5b 	dmb	ish
   1c922:	e853 2f00 	ldrex	r2, [r3]
   1c926:	1e51      	subs	r1, r2, #1
   1c928:	e843 1000 	strex	r0, r1, [r3]
   1c92c:	2800      	cmp	r0, #0
   1c92e:	d1f8      	bne.n	1c922 <lll_hfclock_off+0xe>
   1c930:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1c934:	2a01      	cmp	r2, #1
   1c936:	dd01      	ble.n	1c93c <lll_hfclock_off+0x28>
		return 0;
   1c938:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1c93a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1c93c:	f003 fe9e 	bl	2067c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1c940:	2000      	movs	r0, #0
}
   1c942:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1c944:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1c948:	bd08      	pop	{r3, pc}
   1c94a:	bf00      	nop
   1c94c:	20004e6c 	.word	0x20004e6c

0001c950 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1c950:	2005      	movs	r0, #5
   1c952:	4770      	bx	lr

0001c954 <is_abort_cb>:
		return 0;
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   1c954:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c958:	4770      	bx	lr
   1c95a:	bf00      	nop

0001c95c <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1c95c:	b510      	push	{r4, lr}
   1c95e:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1c960:	f7ff fe1a 	bl	1c598 <lll_isr_status_reset>

	radio_filter_disable();
   1c964:	f001 ffc2 	bl	1e8ec <radio_filter_disable>

	lll_isr_cleanup(param);
   1c968:	4620      	mov	r0, r4
}
   1c96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1c96e:	f7ff be21 	b.w	1c5b4 <lll_isr_cleanup>
   1c972:	bf00      	nop

0001c974 <isr_tx>:
{
   1c974:	b530      	push	{r4, r5, lr}
   1c976:	b083      	sub	sp, #12
   1c978:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1c97a:	f7ff fdfb 	bl	1c574 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c97e:	2096      	movs	r0, #150	; 0x96
   1c980:	f001 ffe6 	bl	1e950 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1c984:	2300      	movs	r3, #0
   1c986:	4618      	mov	r0, r3
   1c988:	461a      	mov	r2, r3
   1c98a:	4619      	mov	r1, r3
   1c98c:	f001 fefc 	bl	1e788 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c990:	2001      	movs	r0, #1
   1c992:	f7f9 fd33 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c996:	4604      	mov	r4, r0
   1c998:	2800      	cmp	r0, #0
   1c99a:	d043      	beq.n	1ca24 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   1c99c:	f104 001c 	add.w	r0, r4, #28
   1c9a0:	f001 fe28 	bl	1e5f4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1c9a4:	f001 fe6c 	bl	1e680 <radio_is_ready>
   1c9a8:	b9e0      	cbnz	r0, 1c9e4 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   1c9aa:	4825      	ldr	r0, [pc, #148]	; (1ca40 <isr_tx+0xcc>)
   1c9ac:	4629      	mov	r1, r5
   1c9ae:	f001 fd4d 	bl	1e44c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1c9b2:	f7ff fa17 	bl	1bde4 <ull_filter_lll_rl_enabled>
   1c9b6:	bb50      	cbnz	r0, 1ca0e <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1c9b8:	f002 f8ca 	bl	1eb50 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1c9bc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1c9be:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1c9c0:	4608      	mov	r0, r1
   1c9c2:	f001 fe2b 	bl	1e61c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1c9c6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1c9c8:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1c9ca:	4608      	mov	r0, r1
   1c9cc:	f001 fe24 	bl	1e618 <radio_tx_chain_delay_get>
   1c9d0:	442c      	add	r4, r5
   1c9d2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1c9d4:	1a20      	subs	r0, r4, r0
   1c9d6:	f002 f88d 	bl	1eaf4 <radio_tmr_hcto_configure>
}
   1c9da:	b003      	add	sp, #12
   1c9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1c9e0:	f002 b8a8 	b.w	1eb34 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1c9e4:	4a17      	ldr	r2, [pc, #92]	; (1ca44 <isr_tx+0xd0>)
   1c9e6:	4918      	ldr	r1, [pc, #96]	; (1ca48 <isr_tx+0xd4>)
   1c9e8:	4818      	ldr	r0, [pc, #96]	; (1ca4c <isr_tx+0xd8>)
   1c9ea:	f240 4345 	movw	r3, #1093	; 0x445
   1c9ee:	f009 f889 	bl	25b04 <printk>
   1c9f2:	4040      	eors	r0, r0
   1c9f4:	f380 8811 	msr	BASEPRI, r0
   1c9f8:	f04f 0003 	mov.w	r0, #3
   1c9fc:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1c9fe:	4810      	ldr	r0, [pc, #64]	; (1ca40 <isr_tx+0xcc>)
   1ca00:	4629      	mov	r1, r5
   1ca02:	f001 fd23 	bl	1e44c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1ca06:	f7ff f9ed 	bl	1bde4 <ull_filter_lll_rl_enabled>
   1ca0a:	2800      	cmp	r0, #0
   1ca0c:	d0d4      	beq.n	1c9b8 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ca0e:	f10d 0007 	add.w	r0, sp, #7
   1ca12:	f7ff f861 	bl	1bad8 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1ca16:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ca18:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1ca1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ca1e:	f002 f92f 	bl	1ec80 <radio_ar_configure>
   1ca22:	e7c9      	b.n	1c9b8 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   1ca24:	4a07      	ldr	r2, [pc, #28]	; (1ca44 <isr_tx+0xd0>)
   1ca26:	490a      	ldr	r1, [pc, #40]	; (1ca50 <isr_tx+0xdc>)
   1ca28:	4808      	ldr	r0, [pc, #32]	; (1ca4c <isr_tx+0xd8>)
   1ca2a:	f240 4341 	movw	r3, #1089	; 0x441
   1ca2e:	f009 f869 	bl	25b04 <printk>
   1ca32:	4040      	eors	r0, r0
   1ca34:	f380 8811 	msr	BASEPRI, r0
   1ca38:	f04f 0003 	mov.w	r0, #3
   1ca3c:	df02      	svc	2
   1ca3e:	e7ad      	b.n	1c99c <isr_tx+0x28>
   1ca40:	0001d01d 	.word	0x0001d01d
   1ca44:	0002d63c 	.word	0x0002d63c
   1ca48:	0002d690 	.word	0x0002d690
   1ca4c:	0002c8dc 	.word	0x0002c8dc
   1ca50:	0002d688 	.word	0x0002d688

0001ca54 <abort_cb>:
{
   1ca54:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1ca56:	b1d8      	cbz	r0, 1ca90 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1ca58:	460c      	mov	r4, r1
   1ca5a:	f7ff ff5b 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1ca5e:	2800      	cmp	r0, #0
   1ca60:	db04      	blt.n	1ca6c <abort_cb+0x18>
	lll_done(param);
   1ca62:	4620      	mov	r0, r4
}
   1ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1ca68:	f7ff bcbe 	b.w	1c3e8 <lll_done>
	LL_ASSERT(err >= 0);
   1ca6c:	4a0c      	ldr	r2, [pc, #48]	; (1caa0 <abort_cb+0x4c>)
   1ca6e:	490d      	ldr	r1, [pc, #52]	; (1caa4 <abort_cb+0x50>)
   1ca70:	480d      	ldr	r0, [pc, #52]	; (1caa8 <abort_cb+0x54>)
   1ca72:	f44f 6384 	mov.w	r3, #1056	; 0x420
   1ca76:	f009 f845 	bl	25b04 <printk>
   1ca7a:	4040      	eors	r0, r0
   1ca7c:	f380 8811 	msr	BASEPRI, r0
   1ca80:	f04f 0003 	mov.w	r0, #3
   1ca84:	df02      	svc	2
	lll_done(param);
   1ca86:	4620      	mov	r0, r4
}
   1ca88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1ca8c:	f7ff bcac 	b.w	1c3e8 <lll_done>
		radio_isr_set(isr_abort, param);
   1ca90:	4806      	ldr	r0, [pc, #24]	; (1caac <abort_cb+0x58>)
   1ca92:	f001 fcdb 	bl	1e44c <radio_isr_set>
}
   1ca96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1ca9a:	f001 bdd1 	b.w	1e640 <radio_disable>
   1ca9e:	bf00      	nop
   1caa0:	0002d63c 	.word	0x0002d63c
   1caa4:	0002d5dc 	.word	0x0002d5dc
   1caa8:	0002c8dc 	.word	0x0002c8dc
   1caac:	0001c95d 	.word	0x0001c95d

0001cab0 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1cab0:	4b08      	ldr	r3, [pc, #32]	; (1cad4 <lll_adv_init+0x24>)
   1cab2:	2204      	movs	r2, #4
{
   1cab4:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1cab6:	1898      	adds	r0, r3, r2
   1cab8:	2128      	movs	r1, #40	; 0x28
   1caba:	f7f5 fb93 	bl	121e4 <mem_init>
	MFIFO_INIT(pdu_free);
   1cabe:	4b06      	ldr	r3, [pc, #24]	; (1cad8 <lll_adv_init+0x28>)
   1cac0:	2400      	movs	r4, #0
   1cac2:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cac4:	2202      	movs	r2, #2
   1cac6:	4621      	mov	r1, r4
   1cac8:	4804      	ldr	r0, [pc, #16]	; (1cadc <lll_adv_init+0x2c>)
   1caca:	f00e f931 	bl	2ad30 <z_impl_k_sem_init>
}
   1cace:	4620      	mov	r0, r4
   1cad0:	bd10      	pop	{r4, pc}
   1cad2:	bf00      	nop
   1cad4:	20004e80 	.word	0x20004e80
   1cad8:	200006ec 	.word	0x200006ec
   1cadc:	20004f24 	.word	0x20004f24

0001cae0 <lll_adv_reset>:
   1cae0:	4b08      	ldr	r3, [pc, #32]	; (1cb04 <lll_adv_reset+0x24>)
   1cae2:	2204      	movs	r2, #4
   1cae4:	b510      	push	{r4, lr}
   1cae6:	1898      	adds	r0, r3, r2
   1cae8:	2128      	movs	r1, #40	; 0x28
   1caea:	f7f5 fb7b 	bl	121e4 <mem_init>
   1caee:	4b06      	ldr	r3, [pc, #24]	; (1cb08 <lll_adv_reset+0x28>)
   1caf0:	2400      	movs	r4, #0
   1caf2:	805c      	strh	r4, [r3, #2]
   1caf4:	2202      	movs	r2, #2
   1caf6:	4621      	mov	r1, r4
   1caf8:	4804      	ldr	r0, [pc, #16]	; (1cb0c <lll_adv_reset+0x2c>)
   1cafa:	f00e f919 	bl	2ad30 <z_impl_k_sem_init>
   1cafe:	4620      	mov	r0, r4
   1cb00:	bd10      	pop	{r4, pc}
   1cb02:	bf00      	nop
   1cb04:	20004e80 	.word	0x20004e80
   1cb08:	200006ec 	.word	0x200006ec
   1cb0c:	20004f24 	.word	0x20004f24

0001cb10 <lll_adv_data_init>:
{
   1cb10:	b510      	push	{r4, lr}
   1cb12:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1cb14:	4805      	ldr	r0, [pc, #20]	; (1cb2c <lll_adv_data_init+0x1c>)
   1cb16:	f7f5 fb95 	bl	12244 <mem_acquire>
	if (!p) {
   1cb1a:	b120      	cbz	r0, 1cb26 <lll_adv_data_init+0x16>
   1cb1c:	4603      	mov	r3, r0
	p->len = 0U;
   1cb1e:	2000      	movs	r0, #0
   1cb20:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1cb22:	6063      	str	r3, [r4, #4]
}
   1cb24:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1cb26:	f06f 000b 	mvn.w	r0, #11
}
   1cb2a:	bd10      	pop	{r4, pc}
   1cb2c:	20004e80 	.word	0x20004e80

0001cb30 <lll_adv_data_reset>:
{
   1cb30:	4603      	mov	r3, r0
	pdu->first = 0U;
   1cb32:	2000      	movs	r0, #0
   1cb34:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1cb36:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1cb38:	6098      	str	r0, [r3, #8]
}
   1cb3a:	4770      	bx	lr

0001cb3c <lll_adv_pdu_alloc_pdu_adv>:
{
   1cb3c:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1cb3e:	4c35      	ldr	r4, [pc, #212]	; (1cc14 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1cb40:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1cb42:	78e1      	ldrb	r1, [r4, #3]
   1cb44:	7823      	ldrb	r3, [r4, #0]
   1cb46:	4291      	cmp	r1, r2
   1cb48:	d003      	beq.n	1cb52 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   1cb4a:	fb02 4303 	mla	r3, r2, r3, r4
   1cb4e:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1cb50:	b935      	cbnz	r5, 1cb60 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   1cb52:	4831      	ldr	r0, [pc, #196]	; (1cc18 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   1cb54:	f7f5 fb76 	bl	12244 <mem_acquire>
	if (p) {
   1cb58:	4605      	mov	r5, r0
   1cb5a:	b1a0      	cbz	r0, 1cb86 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   1cb5c:	4628      	mov	r0, r5
   1cb5e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   1cb60:	482e      	ldr	r0, [pc, #184]	; (1cc1c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1cb62:	2200      	movs	r2, #0
   1cb64:	2300      	movs	r3, #0
   1cb66:	f007 ff37 	bl	249d8 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1cb6a:	bb40      	cbnz	r0, 1cbbe <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   1cb6c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1cb6e:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1cb70:	7861      	ldrb	r1, [r4, #1]
   1cb72:	429a      	cmp	r2, r3
   1cb74:	d0f2      	beq.n	1cb5c <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   1cb76:	3301      	adds	r3, #1
   1cb78:	b2db      	uxtb	r3, r3
		_first = 0U;
   1cb7a:	4299      	cmp	r1, r3
   1cb7c:	bf08      	it	eq
   1cb7e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1cb80:	70a3      	strb	r3, [r4, #2]
}
   1cb82:	4628      	mov	r0, r5
   1cb84:	bd38      	pop	{r3, r4, r5, pc}
   1cb86:	4825      	ldr	r0, [pc, #148]	; (1cc1c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1cb88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cb90:	f007 ff22 	bl	249d8 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1cb94:	2800      	cmp	r0, #0
   1cb96:	d12e      	bne.n	1cbf6 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   1cb98:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1cb9a:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1cb9c:	7822      	ldrb	r2, [r4, #0]
   1cb9e:	7860      	ldrb	r0, [r4, #1]
   1cba0:	4299      	cmp	r1, r3
   1cba2:	d01a      	beq.n	1cbda <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   1cba4:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1cba8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1cbaa:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   1cbac:	b2db      	uxtb	r3, r3
		_first = 0U;
   1cbae:	4298      	cmp	r0, r3
   1cbb0:	bf08      	it	eq
   1cbb2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1cbb4:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   1cbb6:	b182      	cbz	r2, 1cbda <lll_adv_pdu_alloc_pdu_adv+0x9e>
   1cbb8:	4615      	mov	r5, r2
}
   1cbba:	4628      	mov	r0, r5
   1cbbc:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   1cbbe:	4a18      	ldr	r2, [pc, #96]	; (1cc20 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1cbc0:	4918      	ldr	r1, [pc, #96]	; (1cc24 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1cbc2:	4819      	ldr	r0, [pc, #100]	; (1cc28 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1cbc4:	f240 1397 	movw	r3, #407	; 0x197
   1cbc8:	f008 ff9c 	bl	25b04 <printk>
   1cbcc:	4040      	eors	r0, r0
   1cbce:	f380 8811 	msr	BASEPRI, r0
   1cbd2:	f04f 0003 	mov.w	r0, #3
   1cbd6:	df02      	svc	2
   1cbd8:	e7c8      	b.n	1cb6c <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   1cbda:	4a11      	ldr	r2, [pc, #68]	; (1cc20 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1cbdc:	4913      	ldr	r1, [pc, #76]	; (1cc2c <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   1cbde:	4812      	ldr	r0, [pc, #72]	; (1cc28 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1cbe0:	f240 13ad 	movw	r3, #429	; 0x1ad
   1cbe4:	f008 ff8e 	bl	25b04 <printk>
   1cbe8:	4040      	eors	r0, r0
   1cbea:	f380 8811 	msr	BASEPRI, r0
   1cbee:	f04f 0003 	mov.w	r0, #3
   1cbf2:	df02      	svc	2
   1cbf4:	e7b2      	b.n	1cb5c <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   1cbf6:	4a0a      	ldr	r2, [pc, #40]	; (1cc20 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1cbf8:	490a      	ldr	r1, [pc, #40]	; (1cc24 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1cbfa:	480b      	ldr	r0, [pc, #44]	; (1cc28 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1cbfc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1cc00:	f008 ff80 	bl	25b04 <printk>
   1cc04:	4040      	eors	r0, r0
   1cc06:	f380 8811 	msr	BASEPRI, r0
   1cc0a:	f04f 0003 	mov.w	r0, #3
   1cc0e:	df02      	svc	2
   1cc10:	e7c2      	b.n	1cb98 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   1cc12:	bf00      	nop
   1cc14:	200006ec 	.word	0x200006ec
   1cc18:	20004e80 	.word	0x20004e80
   1cc1c:	20004f24 	.word	0x20004f24
   1cc20:	0002d63c 	.word	0x0002d63c
   1cc24:	0002cd00 	.word	0x0002cd00
   1cc28:	0002c8dc 	.word	0x0002c8dc
   1cc2c:	0002d6a4 	.word	0x0002d6a4

0001cc30 <lll_adv_pdu_alloc>:
{
   1cc30:	b510      	push	{r4, lr}
	first = pdu->first;
   1cc32:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1cc34:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1cc36:	429a      	cmp	r2, r3
   1cc38:	d014      	beq.n	1cc64 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   1cc3a:	b2d4      	uxtb	r4, r2
   1cc3c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1cc3e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1cc40:	4294      	cmp	r4, r2
   1cc42:	d004      	beq.n	1cc4e <lll_adv_pdu_alloc+0x1e>
			last++;
   1cc44:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   1cc46:	7043      	strb	r3, [r0, #1]
			last++;
   1cc48:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   1cc4a:	2b02      	cmp	r3, #2
   1cc4c:	d00e      	beq.n	1cc6c <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   1cc4e:	461c      	mov	r4, r3
	*idx = last;
   1cc50:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1cc54:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1cc56:	6860      	ldr	r0, [r4, #4]
	if (p) {
   1cc58:	b100      	cbz	r0, 1cc5c <lll_adv_pdu_alloc+0x2c>
}
   1cc5a:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   1cc5c:	f7ff ff6e 	bl	1cb3c <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   1cc60:	6060      	str	r0, [r4, #4]
}
   1cc62:	bd10      	pop	{r4, pc}
		last++;
   1cc64:	3301      	adds	r3, #1
   1cc66:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1cc68:	2b02      	cmp	r3, #2
   1cc6a:	d1f0      	bne.n	1cc4e <lll_adv_pdu_alloc+0x1e>
{
   1cc6c:	2400      	movs	r4, #0
			last = 0U;
   1cc6e:	4623      	mov	r3, r4
   1cc70:	e7ee      	b.n	1cc50 <lll_adv_pdu_alloc+0x20>
   1cc72:	bf00      	nop

0001cc74 <lll_adv_pdu_latest_get>:
{
   1cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc76:	4604      	mov	r4, r0
	first = pdu->first;
   1cc78:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1cc7a:	7840      	ldrb	r0, [r0, #1]
   1cc7c:	4298      	cmp	r0, r3
   1cc7e:	d028      	beq.n	1ccd2 <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1cc80:	4a16      	ldr	r2, [pc, #88]	; (1ccdc <lll_adv_pdu_latest_get+0x68>)
   1cc82:	460e      	mov	r6, r1
   1cc84:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1cc86:	f892 c001 	ldrb.w	ip, [r2, #1]
   1cc8a:	b2dd      	uxtb	r5, r3
	last = last + 1;
   1cc8c:	1c4b      	adds	r3, r1, #1
   1cc8e:	b2db      	uxtb	r3, r3
		last = 0U;
   1cc90:	459c      	cmp	ip, r3
   1cc92:	bf08      	it	eq
   1cc94:	2300      	moveq	r3, #0
   1cc96:	f892 c002 	ldrb.w	ip, [r2, #2]
   1cc9a:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   1cc9e:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   1cca0:	6878      	ldr	r0, [r7, #4]
   1cca2:	d009      	beq.n	1ccb8 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1cca4:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1cca8:	fb0c 2101 	mla	r1, ip, r1, r2
   1ccac:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1ccae:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   1ccb0:	480b      	ldr	r0, [pc, #44]	; (1cce0 <lll_adv_pdu_latest_get+0x6c>)
   1ccb2:	f007 fe6b 	bl	2498c <z_impl_k_sem_give>
			p = next;
   1ccb6:	2000      	movs	r0, #0
		first += 1U;
   1ccb8:	1c6b      	adds	r3, r5, #1
   1ccba:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1ccbc:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   1ccbe:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   1ccc0:	bf04      	itt	eq
   1ccc2:	2000      	moveq	r0, #0
			first = 0U;
   1ccc4:	4603      	moveq	r3, r0
		*is_modified = 1U;
   1ccc6:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   1ccca:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   1cccc:	bf18      	it	ne
   1ccce:	4618      	movne	r0, r3
		*is_modified = 1U;
   1ccd0:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   1ccd2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   1ccd6:	6860      	ldr	r0, [r4, #4]
   1ccd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ccda:	bf00      	nop
   1ccdc:	200006ec 	.word	0x200006ec
   1cce0:	20004f24 	.word	0x20004f24

0001cce4 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1cce4:	7903      	ldrb	r3, [r0, #4]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1cce6:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1cce8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1ccec:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1ccee:	4604      	mov	r4, r0
   1ccf0:	fa93 f0a3 	rbit	r0, r3
   1ccf4:	fab0 f080 	clz	r0, r0
   1ccf8:	bf08      	it	eq
   1ccfa:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1ccfe:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1cd00:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1cd02:	d043      	beq.n	1cd8c <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1cd04:	7921      	ldrb	r1, [r4, #4]
   1cd06:	1e5a      	subs	r2, r3, #1
   1cd08:	4013      	ands	r3, r2
   1cd0a:	f363 01c5 	bfi	r1, r3, #3, #3

	lll_chan_set(36 + chan);
   1cd0e:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1cd12:	7121      	strb	r1, [r4, #4]
	lll_chan_set(36 + chan);
   1cd14:	f7ff fbea 	bl	1c4ec <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1cd18:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1cd1a:	f10d 0107 	add.w	r1, sp, #7
   1cd1e:	f104 0008 	add.w	r0, r4, #8
   1cd22:	f88d 3007 	strb.w	r3, [sp, #7]
   1cd26:	f7ff ffa5 	bl	1cc74 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   1cd2a:	4605      	mov	r5, r0
   1cd2c:	2800      	cmp	r0, #0
   1cd2e:	d03e      	beq.n	1cdae <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   1cd30:	4628      	mov	r0, r5
   1cd32:	f001 fc65 	bl	1e600 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1cd36:	782b      	ldrb	r3, [r5, #0]
   1cd38:	f003 030f 	and.w	r3, r3, #15
   1cd3c:	2b02      	cmp	r3, #2
   1cd3e:	d01d      	beq.n	1cd7c <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1cd40:	f10d 0107 	add.w	r1, sp, #7
   1cd44:	f104 0014 	add.w	r0, r4, #20
   1cd48:	f7ff ff94 	bl	1cc74 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   1cd4c:	4606      	mov	r6, r0
   1cd4e:	2800      	cmp	r0, #0
   1cd50:	d03b      	beq.n	1cdca <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1cd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cd56:	b95b      	cbnz	r3, 1cd70 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1cd58:	4621      	mov	r1, r4
   1cd5a:	4823      	ldr	r0, [pc, #140]	; (1cde8 <chan_prepare.isra.0+0x104>)
   1cd5c:	f001 fb76 	bl	1e44c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1cd60:	2096      	movs	r0, #150	; 0x96
   1cd62:	f001 fdf5 	bl	1e950 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1cd66:	2000      	movs	r0, #0
   1cd68:	f001 fcc6 	bl	1e6f8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1cd6c:	b002      	add	sp, #8
   1cd6e:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1cd70:	2206      	movs	r2, #6
   1cd72:	1ca9      	adds	r1, r5, #2
   1cd74:	1cb0      	adds	r0, r6, #2
   1cd76:	f00b fd1b 	bl	287b0 <memcpy>
   1cd7a:	e7ed      	b.n	1cd58 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   1cd7c:	481b      	ldr	r0, [pc, #108]	; (1cdec <chan_prepare.isra.0+0x108>)
   1cd7e:	4621      	mov	r1, r4
   1cd80:	f001 fb64 	bl	1e44c <radio_isr_set>
		radio_switch_complete_and_disable();
   1cd84:	f001 fd60 	bl	1e848 <radio_switch_complete_and_disable>
}
   1cd88:	b002      	add	sp, #8
   1cd8a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   1cd8c:	4a18      	ldr	r2, [pc, #96]	; (1cdf0 <chan_prepare.isra.0+0x10c>)
   1cd8e:	4919      	ldr	r1, [pc, #100]	; (1cdf4 <chan_prepare.isra.0+0x110>)
   1cd90:	4819      	ldr	r0, [pc, #100]	; (1cdf8 <chan_prepare.isra.0+0x114>)
   1cd92:	f240 5337 	movw	r3, #1335	; 0x537
   1cd96:	f008 feb5 	bl	25b04 <printk>
   1cd9a:	4040      	eors	r0, r0
   1cd9c:	f380 8811 	msr	BASEPRI, r0
   1cda0:	f04f 0003 	mov.w	r0, #3
   1cda4:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1cda6:	7923      	ldrb	r3, [r4, #4]
   1cda8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1cdac:	e7aa      	b.n	1cd04 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   1cdae:	4a10      	ldr	r2, [pc, #64]	; (1cdf0 <chan_prepare.isra.0+0x10c>)
   1cdb0:	4912      	ldr	r1, [pc, #72]	; (1cdfc <chan_prepare.isra.0+0x118>)
   1cdb2:	4811      	ldr	r0, [pc, #68]	; (1cdf8 <chan_prepare.isra.0+0x114>)
   1cdb4:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   1cdb8:	f008 fea4 	bl	25b04 <printk>
   1cdbc:	4040      	eors	r0, r0
   1cdbe:	f380 8811 	msr	BASEPRI, r0
   1cdc2:	f04f 0003 	mov.w	r0, #3
   1cdc6:	df02      	svc	2
   1cdc8:	e7b2      	b.n	1cd30 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   1cdca:	4a09      	ldr	r2, [pc, #36]	; (1cdf0 <chan_prepare.isra.0+0x10c>)
   1cdcc:	490c      	ldr	r1, [pc, #48]	; (1ce00 <chan_prepare.isra.0+0x11c>)
   1cdce:	480a      	ldr	r0, [pc, #40]	; (1cdf8 <chan_prepare.isra.0+0x114>)
   1cdd0:	f240 534a 	movw	r3, #1354	; 0x54a
   1cdd4:	f008 fe96 	bl	25b04 <printk>
   1cdd8:	4040      	eors	r0, r0
   1cdda:	f380 8811 	msr	BASEPRI, r0
   1cdde:	f04f 0003 	mov.w	r0, #3
   1cde2:	df02      	svc	2
   1cde4:	e7b5      	b.n	1cd52 <chan_prepare.isra.0+0x6e>
   1cde6:	bf00      	nop
   1cde8:	0001c975 	.word	0x0001c975
   1cdec:	0001ce05 	.word	0x0001ce05
   1cdf0:	0002d63c 	.word	0x0002d63c
   1cdf4:	0002d290 	.word	0x0002d290
   1cdf8:	0002c8dc 	.word	0x0002c8dc
   1cdfc:	0002d6a8 	.word	0x0002d6a8
   1ce00:	0002d6ac 	.word	0x0002d6ac

0001ce04 <isr_done>:
{
   1ce04:	b510      	push	{r4, lr}
   1ce06:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1ce08:	f7ff fbc6 	bl	1c598 <lll_isr_status_reset>
	if (lll->chan_map_curr &&
   1ce0c:	7923      	ldrb	r3, [r4, #4]
   1ce0e:	f013 0f38 	tst.w	r3, #56	; 0x38
   1ce12:	d106      	bne.n	1ce22 <isr_done+0x1e>
	radio_filter_disable();
   1ce14:	f001 fd6a 	bl	1e8ec <radio_filter_disable>
	lll_isr_cleanup(param);
   1ce18:	4620      	mov	r0, r4
}
   1ce1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1ce1e:	f7ff bbc9 	b.w	1c5b4 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1ce22:	4620      	mov	r0, r4
   1ce24:	f7ff ff5e 	bl	1cce4 <chan_prepare.isra.0>
		radio_tx_enable();
   1ce28:	f001 fc04 	bl	1e634 <radio_tx_enable>
}
   1ce2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1ce30:	f001 be80 	b.w	1eb34 <radio_tmr_end_capture>

0001ce34 <prepare_cb>:
{
   1ce34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce36:	b083      	sub	sp, #12
	lll = p->param;
   1ce38:	68c4      	ldr	r4, [r0, #12]
{
   1ce3a:	4605      	mov	r5, r0
	radio_reset();
   1ce3c:	f001 fb48 	bl	1e4d0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1ce40:	2000      	movs	r0, #0
   1ce42:	f001 fb79 	bl	1e538 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1ce46:	2100      	movs	r1, #0
   1ce48:	4608      	mov	r0, r1
   1ce4a:	f001 fb65 	bl	1e518 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1ce4e:	2200      	movs	r2, #0
   1ce50:	2125      	movs	r1, #37	; 0x25
   1ce52:	2008      	movs	r0, #8
   1ce54:	f001 fba6 	bl	1e5a4 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1ce58:	4b2f      	ldr	r3, [pc, #188]	; (1cf18 <prepare_cb+0xe4>)
   1ce5a:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1ce5c:	a801      	add	r0, sp, #4
   1ce5e:	f001 fb89 	bl	1e574 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1ce62:	492e      	ldr	r1, [pc, #184]	; (1cf1c <prepare_cb+0xe8>)
   1ce64:	f240 605b 	movw	r0, #1627	; 0x65b
   1ce68:	f001 fc28 	bl	1e6bc <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1ce6c:	7923      	ldrb	r3, [r4, #4]
   1ce6e:	f3c3 0202 	ubfx	r2, r3, #0, #3
   1ce72:	f362 03c5 	bfi	r3, r2, #3, #3
   1ce76:	7123      	strb	r3, [r4, #4]
	pdu = chan_prepare(lll);
   1ce78:	4620      	mov	r0, r4
   1ce7a:	f7ff ff33 	bl	1cce4 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1ce7e:	f7fe ffb1 	bl	1bde4 <ull_filter_lll_rl_enabled>
			ull_filter_lll_get(!!(lll->filter_policy));
   1ce82:	7923      	ldrb	r3, [r4, #4]
	if (ull_filter_lll_rl_enabled()) {
   1ce84:	2800      	cmp	r0, #0
   1ce86:	d141      	bne.n	1cf0c <prepare_cb+0xd8>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1ce88:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   1ce8c:	d135      	bne.n	1cefa <prepare_cb+0xc6>
	ull = HDR_LLL2ULL(lll);
   1ce8e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1ce90:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1ce92:	4638      	mov	r0, r7
   1ce94:	f7ff fb0c 	bl	1c4b0 <lll_event_offset_get>
   1ce98:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1ce9a:	686a      	ldr	r2, [r5, #4]
   1ce9c:	f106 0109 	add.w	r1, r6, #9
   1cea0:	2001      	movs	r0, #1
   1cea2:	f001 fd61 	bl	1e968 <radio_tmr_start>
	radio_tmr_end_capture();
   1cea6:	f001 fe45 	bl	1eb34 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1ceaa:	4620      	mov	r0, r4
   1ceac:	f7fa f864 	bl	16f78 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1ceb0:	1c81      	adds	r1, r0, #2
   1ceb2:	4632      	mov	r2, r6
   1ceb4:	b2c9      	uxtb	r1, r1
   1ceb6:	4638      	mov	r0, r7
   1ceb8:	f7ff fb08 	bl	1c4cc <lll_preempt_calc>
   1cebc:	b140      	cbz	r0, 1ced0 <prepare_cb+0x9c>
		radio_isr_set(isr_abort, lll);
   1cebe:	4818      	ldr	r0, [pc, #96]	; (1cf20 <prepare_cb+0xec>)
   1cec0:	4621      	mov	r1, r4
   1cec2:	f001 fac3 	bl	1e44c <radio_isr_set>
		radio_disable();
   1cec6:	f001 fbbb 	bl	1e640 <radio_disable>
}
   1ceca:	2000      	movs	r0, #0
   1cecc:	b003      	add	sp, #12
   1cece:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
   1ced0:	4620      	mov	r0, r4
   1ced2:	f7ff fa87 	bl	1c3e4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ced6:	2800      	cmp	r0, #0
   1ced8:	d0f7      	beq.n	1ceca <prepare_cb+0x96>
   1ceda:	4a12      	ldr	r2, [pc, #72]	; (1cf24 <prepare_cb+0xf0>)
   1cedc:	4912      	ldr	r1, [pc, #72]	; (1cf28 <prepare_cb+0xf4>)
   1cede:	4813      	ldr	r0, [pc, #76]	; (1cf2c <prepare_cb+0xf8>)
   1cee0:	f240 33d1 	movw	r3, #977	; 0x3d1
   1cee4:	f008 fe0e 	bl	25b04 <printk>
   1cee8:	4040      	eors	r0, r0
   1ceea:	f380 8811 	msr	BASEPRI, r0
   1ceee:	f04f 0003 	mov.w	r0, #3
   1cef2:	df02      	svc	2
}
   1cef4:	2000      	movs	r0, #0
   1cef6:	b003      	add	sp, #12
   1cef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1cefa:	2001      	movs	r0, #1
   1cefc:	f7fe faf8 	bl	1b4f0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1cf00:	7841      	ldrb	r1, [r0, #1]
   1cf02:	1c82      	adds	r2, r0, #2
   1cf04:	7800      	ldrb	r0, [r0, #0]
   1cf06:	f001 fcd1 	bl	1e8ac <radio_filter_configure>
   1cf0a:	e7c0      	b.n	1ce8e <prepare_cb+0x5a>
			ull_filter_lll_get(!!(lll->filter_policy));
   1cf0c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   1cf10:	bf14      	ite	ne
   1cf12:	2001      	movne	r0, #1
   1cf14:	2000      	moveq	r0, #0
   1cf16:	e7f1      	b.n	1cefc <prepare_cb+0xc8>
   1cf18:	8e89bed6 	.word	0x8e89bed6
   1cf1c:	00555555 	.word	0x00555555
   1cf20:	0001c95d 	.word	0x0001c95d
   1cf24:	0002d63c 	.word	0x0002d63c
   1cf28:	0002cddc 	.word	0x0002cddc
   1cf2c:	0002c8dc 	.word	0x0002c8dc

0001cf30 <lll_adv_prepare>:
{
   1cf30:	b510      	push	{r4, lr}
   1cf32:	b082      	sub	sp, #8
   1cf34:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1cf36:	f7ff fcd5 	bl	1c8e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1cf3a:	2800      	cmp	r0, #0
   1cf3c:	db1a      	blt.n	1cf74 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1cf3e:	4a14      	ldr	r2, [pc, #80]	; (1cf90 <lll_adv_prepare+0x60>)
   1cf40:	4914      	ldr	r1, [pc, #80]	; (1cf94 <lll_adv_prepare+0x64>)
   1cf42:	4815      	ldr	r0, [pc, #84]	; (1cf98 <lll_adv_prepare+0x68>)
   1cf44:	9400      	str	r4, [sp, #0]
   1cf46:	2300      	movs	r3, #0
   1cf48:	f7f9 fd8a 	bl	16a60 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cf4c:	b108      	cbz	r0, 1cf52 <lll_adv_prepare+0x22>
   1cf4e:	3077      	adds	r0, #119	; 0x77
   1cf50:	d101      	bne.n	1cf56 <lll_adv_prepare+0x26>
}
   1cf52:	b002      	add	sp, #8
   1cf54:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cf56:	4a11      	ldr	r2, [pc, #68]	; (1cf9c <lll_adv_prepare+0x6c>)
   1cf58:	4911      	ldr	r1, [pc, #68]	; (1cfa0 <lll_adv_prepare+0x70>)
   1cf5a:	4812      	ldr	r0, [pc, #72]	; (1cfa4 <lll_adv_prepare+0x74>)
   1cf5c:	f240 239d 	movw	r3, #669	; 0x29d
   1cf60:	f008 fdd0 	bl	25b04 <printk>
   1cf64:	4040      	eors	r0, r0
   1cf66:	f380 8811 	msr	BASEPRI, r0
   1cf6a:	f04f 0003 	mov.w	r0, #3
   1cf6e:	df02      	svc	2
}
   1cf70:	b002      	add	sp, #8
   1cf72:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1cf74:	4a09      	ldr	r2, [pc, #36]	; (1cf9c <lll_adv_prepare+0x6c>)
   1cf76:	490c      	ldr	r1, [pc, #48]	; (1cfa8 <lll_adv_prepare+0x78>)
   1cf78:	480a      	ldr	r0, [pc, #40]	; (1cfa4 <lll_adv_prepare+0x74>)
   1cf7a:	f240 239a 	movw	r3, #666	; 0x29a
   1cf7e:	f008 fdc1 	bl	25b04 <printk>
   1cf82:	4040      	eors	r0, r0
   1cf84:	f380 8811 	msr	BASEPRI, r0
   1cf88:	f04f 0003 	mov.w	r0, #3
   1cf8c:	df02      	svc	2
   1cf8e:	e7d6      	b.n	1cf3e <lll_adv_prepare+0xe>
   1cf90:	0001ce35 	.word	0x0001ce35
   1cf94:	0001ca55 	.word	0x0001ca55
   1cf98:	0001c955 	.word	0x0001c955
   1cf9c:	0002d63c 	.word	0x0002d63c
   1cfa0:	0002d6b8 	.word	0x0002d6b8
   1cfa4:	0002c8dc 	.word	0x0002c8dc
   1cfa8:	0002d5dc 	.word	0x0002d5dc

0001cfac <lll_adv_scan_req_check>:
{
   1cfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1cfb0:	f890 c004 	ldrb.w	ip, [r0, #4]
{
   1cfb4:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1cfb8:	f01c 0f40 	tst.w	ip, #64	; 0x40
{
   1cfbc:	460f      	mov	r7, r1
   1cfbe:	4616      	mov	r6, r2
   1cfc0:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1cfc2:	d009      	beq.n	1cfd8 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1cfc4:	f1b8 0f00 	cmp.w	r8, #0
   1cfc8:	d016      	beq.n	1cff8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1cfca:	783b      	ldrb	r3, [r7, #0]
   1cfcc:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1cfd0:	d019      	beq.n	1d006 <lll_adv_scan_req_check+0x5a>
{
   1cfd2:	2000      	movs	r0, #0
}
   1cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfd8:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1cfda:	f811 0b02 	ldrb.w	r0, [r1], #2
   1cfde:	9a07      	ldr	r2, [sp, #28]
   1cfe0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1cfe4:	f7fe fea2 	bl	1bd2c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1cfe8:	2800      	cmp	r0, #0
   1cfea:	d1ee      	bne.n	1cfca <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1cfec:	7923      	ldrb	r3, [r4, #4]
						rl_idx)) ||
   1cfee:	065b      	lsls	r3, r3, #25
   1cff0:	d5ef      	bpl.n	1cfd2 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1cff2:	f1b8 0f00 	cmp.w	r8, #0
   1cff6:	d1e8      	bne.n	1cfca <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1cff8:	9b07      	ldr	r3, [sp, #28]
   1cffa:	7818      	ldrb	r0, [r3, #0]
   1cffc:	f7fe fe32 	bl	1bc64 <ull_filter_lll_irk_in_fal>
   1d000:	2800      	cmp	r0, #0
   1d002:	d1e2      	bne.n	1cfca <lll_adv_scan_req_check+0x1e>
   1d004:	e7e5      	b.n	1cfd2 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1d006:	2206      	movs	r2, #6
   1d008:	f107 0108 	add.w	r1, r7, #8
   1d00c:	4628      	mov	r0, r5
   1d00e:	f00b fba6 	bl	2875e <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1d012:	fab0 f080 	clz	r0, r0
   1d016:	0940      	lsrs	r0, r0, #5
}
   1d018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d01c <isr_rx>:
{
   1d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d020:	b084      	sub	sp, #16
   1d022:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1d024:	f001 fb36 	bl	1e694 <radio_is_done>
	if (trx_done) {
   1d028:	b2c0      	uxtb	r0, r0
   1d02a:	b950      	cbnz	r0, 1d042 <isr_rx+0x26>
	lll_isr_status_reset();
   1d02c:	f7ff fab4 	bl	1c598 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1d030:	483e      	ldr	r0, [pc, #248]	; (1d12c <isr_rx+0x110>)
   1d032:	4621      	mov	r1, r4
   1d034:	f001 fa0a 	bl	1e44c <radio_isr_set>
}
   1d038:	b004      	add	sp, #16
   1d03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1d03e:	f001 baff 	b.w	1e640 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1d042:	f001 fb47 	bl	1e6d4 <radio_crc_is_valid>
   1d046:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1d048:	f001 fc62 	bl	1e910 <radio_filter_has_match>
   1d04c:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1d04e:	f001 fc69 	bl	1e924 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1d052:	f001 fe65 	bl	1ed20 <radio_ar_has_match>
   1d056:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1d058:	f001 fe46 	bl	1ece8 <radio_ar_match_get>
	if (crc_ok) {
   1d05c:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1d05e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1d060:	f001 fc1a 	bl	1e898 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1d064:	f7ff fa98 	bl	1c598 <lll_isr_status_reset>
	if (crc_ok) {
   1d068:	2d00      	cmp	r5, #0
   1d06a:	d0e1      	beq.n	1d030 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d06c:	b2f6      	uxtb	r6, r6
   1d06e:	2e00      	cmp	r6, #0
   1d070:	d13a      	bne.n	1d0e8 <isr_rx+0xcc>
   1d072:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d074:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d076:	f88d 300f 	strb.w	r3, [sp, #15]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d07a:	f7f9 f9bf 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d07e:	4605      	mov	r5, r0
   1d080:	2800      	cmp	r0, #0
   1d082:	d045      	beq.n	1d110 <isr_rx+0xf4>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1d084:	7a23      	ldrb	r3, [r4, #8]
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d086:	7f28      	ldrb	r0, [r5, #28]
   1d088:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   1d08c:	f105 011c 	add.w	r1, r5, #28
	addr = pdu_adv->adv_ind.addr;
   1d090:	68db      	ldr	r3, [r3, #12]
	tx_addr = pdu_adv->tx_addr;
   1d092:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1d096:	f002 060f 	and.w	r6, r2, #15
   1d09a:	2e01      	cmp	r6, #1
	tx_addr = pdu_adv->tx_addr;
   1d09c:	f3c2 1280 	ubfx	r2, r2, #6, #1
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1d0a0:	d0c6      	beq.n	1d030 <isr_rx+0x14>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d0a2:	f000 000f 	and.w	r0, r0, #15
   1d0a6:	2803      	cmp	r0, #3
   1d0a8:	d1c2      	bne.n	1d030 <isr_rx+0x14>
   1d0aa:	7f68      	ldrb	r0, [r5, #29]
   1d0ac:	280c      	cmp	r0, #12
   1d0ae:	d1bf      	bne.n	1d030 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1d0b0:	b2ff      	uxtb	r7, r7
   1d0b2:	f10d 050f 	add.w	r5, sp, #15
   1d0b6:	9700      	str	r7, [sp, #0]
   1d0b8:	4620      	mov	r0, r4
   1d0ba:	9501      	str	r5, [sp, #4]
   1d0bc:	f7ff ff76 	bl	1cfac <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	d0b5      	beq.n	1d030 <isr_rx+0x14>
		radio_isr_set(isr_done, lll);
   1d0c4:	4621      	mov	r1, r4
   1d0c6:	4819      	ldr	r0, [pc, #100]	; (1d12c <isr_rx+0x110>)
   1d0c8:	f001 f9c0 	bl	1e44c <radio_isr_set>
		radio_switch_complete_and_disable();
   1d0cc:	f001 fbbc 	bl	1e848 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1d0d0:	7d20      	ldrb	r0, [r4, #20]
   1d0d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1d0d6:	69a0      	ldr	r0, [r4, #24]
   1d0d8:	f001 fa92 	bl	1e600 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1d0dc:	f001 fad0 	bl	1e680 <radio_is_ready>
   1d0e0:	b940      	cbnz	r0, 1d0f4 <isr_rx+0xd8>
}
   1d0e2:	b004      	add	sp, #16
   1d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d0e8:	fa5f f088 	uxtb.w	r0, r8
   1d0ec:	f7fe fd68 	bl	1bbc0 <ull_filter_lll_rl_irk_idx>
   1d0f0:	4603      	mov	r3, r0
   1d0f2:	e7bf      	b.n	1d074 <isr_rx+0x58>
		LL_ASSERT(!radio_is_ready());
   1d0f4:	4a0e      	ldr	r2, [pc, #56]	; (1d130 <isr_rx+0x114>)
   1d0f6:	490f      	ldr	r1, [pc, #60]	; (1d134 <isr_rx+0x118>)
   1d0f8:	480f      	ldr	r0, [pc, #60]	; (1d138 <isr_rx+0x11c>)
   1d0fa:	f240 5393 	movw	r3, #1427	; 0x593
   1d0fe:	f008 fd01 	bl	25b04 <printk>
   1d102:	4040      	eors	r0, r0
   1d104:	f380 8811 	msr	BASEPRI, r0
   1d108:	f04f 0003 	mov.w	r0, #3
   1d10c:	df02      	svc	2
		if (!err) {
   1d10e:	e7e8      	b.n	1d0e2 <isr_rx+0xc6>
	LL_ASSERT(node_rx);
   1d110:	4a07      	ldr	r2, [pc, #28]	; (1d130 <isr_rx+0x114>)
   1d112:	490a      	ldr	r1, [pc, #40]	; (1d13c <isr_rx+0x120>)
   1d114:	4808      	ldr	r0, [pc, #32]	; (1d138 <isr_rx+0x11c>)
   1d116:	f240 537a 	movw	r3, #1402	; 0x57a
   1d11a:	f008 fcf3 	bl	25b04 <printk>
   1d11e:	4040      	eors	r0, r0
   1d120:	f380 8811 	msr	BASEPRI, r0
   1d124:	f04f 0003 	mov.w	r0, #3
   1d128:	df02      	svc	2
   1d12a:	e7ab      	b.n	1d084 <isr_rx+0x68>
   1d12c:	0001ce05 	.word	0x0001ce05
   1d130:	0002d63c 	.word	0x0002d63c
   1d134:	0002d690 	.word	0x0002d690
   1d138:	0002c8dc 	.word	0x0002c8dc
   1d13c:	0002d688 	.word	0x0002d688

0001d140 <common_prepare_cb>:
{
   1d140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1d144:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   1d146:	f994 3016 	ldrsb.w	r3, [r4, #22]
   1d14a:	2b00      	cmp	r3, #0
{
   1d14c:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   1d14e:	f2c0 810e 	blt.w	1d36e <common_prepare_cb+0x22e>
   1d152:	6863      	ldr	r3, [r4, #4]
   1d154:	4605      	mov	r5, r0
   1d156:	460f      	mov	r7, r1
   1d158:	2b00      	cmp	r3, #0
   1d15a:	f040 80fd 	bne.w	1d358 <common_prepare_cb+0x218>
	lll->state = 0U;
   1d15e:	7da3      	ldrb	r3, [r4, #22]
   1d160:	f36f 0300 	bfc	r3, #0, #1
   1d164:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1d166:	f001 f9b3 	bl	1e4d0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d16a:	2000      	movs	r0, #0
   1d16c:	f001 f9e4 	bl	1e538 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d170:	2100      	movs	r1, #0
   1d172:	4608      	mov	r0, r1
   1d174:	f001 f9d0 	bl	1e518 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1d178:	2200      	movs	r2, #0
   1d17a:	2125      	movs	r1, #37	; 0x25
   1d17c:	2008      	movs	r0, #8
   1d17e:	f001 fa11 	bl	1e5a4 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d182:	2001      	movs	r0, #1
   1d184:	f7f9 f93a 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d188:	4606      	mov	r6, r0
   1d18a:	2800      	cmp	r0, #0
   1d18c:	f000 80d6 	beq.w	1d33c <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   1d190:	f106 001c 	add.w	r0, r6, #28
   1d194:	f001 fa2e 	bl	1e5f4 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d198:	4b7a      	ldr	r3, [pc, #488]	; (1d384 <common_prepare_cb+0x244>)
   1d19a:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1d19c:	a80b      	add	r0, sp, #44	; 0x2c
   1d19e:	f001 f9e9 	bl	1e574 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1d1a2:	4979      	ldr	r1, [pc, #484]	; (1d388 <common_prepare_cb+0x248>)
   1d1a4:	f240 605b 	movw	r0, #1627	; 0x65b
   1d1a8:	f001 fa88 	bl	1e6bc <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1d1ac:	7da0      	ldrb	r0, [r4, #22]
   1d1ae:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d1b2:	3025      	adds	r0, #37	; 0x25
   1d1b4:	f7ff f99a 	bl	1c4ec <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1d1b8:	4874      	ldr	r0, [pc, #464]	; (1d38c <common_prepare_cb+0x24c>)
   1d1ba:	4621      	mov	r1, r4
   1d1bc:	f001 f946 	bl	1e44c <radio_isr_set>
	} else if (lll->type ||
   1d1c0:	7da3      	ldrb	r3, [r4, #22]
   1d1c2:	069b      	lsls	r3, r3, #26
   1d1c4:	d403      	bmi.n	1d1ce <common_prepare_cb+0x8e>
		   lll->conn) {
   1d1c6:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1d1c8:	2b00      	cmp	r3, #0
   1d1ca:	f000 8091 	beq.w	1d2f0 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d1ce:	2096      	movs	r0, #150	; 0x96
   1d1d0:	f001 fbbe 	bl	1e950 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1d1d4:	2300      	movs	r3, #0
   1d1d6:	461a      	mov	r2, r3
   1d1d8:	4619      	mov	r1, r3
   1d1da:	4618      	mov	r0, r3
   1d1dc:	f001 fad4 	bl	1e788 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1d1e0:	f7fe fe00 	bl	1bde4 <ull_filter_lll_rl_enabled>
   1d1e4:	2800      	cmp	r0, #0
   1d1e6:	d135      	bne.n	1d254 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1d1e8:	7da3      	ldrb	r3, [r4, #22]
   1d1ea:	f013 0f18 	tst.w	r3, #24
   1d1ee:	d152      	bne.n	1d296 <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   1d1f0:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1d1f4:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1d1f6:	4640      	mov	r0, r8
   1d1f8:	f7ff f95a 	bl	1c4b0 <lll_event_offset_get>
   1d1fc:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d1fe:	686a      	ldr	r2, [r5, #4]
   1d200:	f106 0109 	add.w	r1, r6, #9
   1d204:	2000      	movs	r0, #0
   1d206:	f001 fbaf 	bl	1e968 <radio_tmr_start>
	radio_tmr_end_capture();
   1d20a:	f001 fc93 	bl	1eb34 <radio_tmr_end_capture>
	radio_rssi_measure();
   1d20e:	f001 fb2b 	bl	1e868 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1d212:	4620      	mov	r0, r4
   1d214:	f7fa f8b6 	bl	17384 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1d218:	1d01      	adds	r1, r0, #4
   1d21a:	b2c9      	uxtb	r1, r1
   1d21c:	4640      	mov	r0, r8
   1d21e:	4632      	mov	r2, r6
   1d220:	f7ff f954 	bl	1c4cc <lll_preempt_calc>
   1d224:	bb68      	cbnz	r0, 1d282 <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   1d226:	b917      	cbnz	r7, 1d22e <common_prepare_cb+0xee>
   1d228:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d22a:	2b00      	cmp	r3, #0
   1d22c:	d163      	bne.n	1d2f6 <common_prepare_cb+0x1b6>
		if (lll->conn) {
   1d22e:	6863      	ldr	r3, [r4, #4]
   1d230:	b143      	cbz	r3, 1d244 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   1d232:	4b57      	ldr	r3, [pc, #348]	; (1d390 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1d234:	2201      	movs	r2, #1
   1d236:	2102      	movs	r1, #2
   1d238:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1d23a:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1d23c:	f7f5 f8da 	bl	123f4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1d240:	2800      	cmp	r0, #0
   1d242:	d142      	bne.n	1d2ca <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   1d244:	4620      	mov	r0, r4
   1d246:	f7ff f8cd 	bl	1c3e4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d24a:	bb68      	cbnz	r0, 1d2a8 <common_prepare_cb+0x168>
}
   1d24c:	2000      	movs	r0, #0
   1d24e:	b00c      	add	sp, #48	; 0x30
   1d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   1d254:	7da0      	ldrb	r0, [r4, #22]
   1d256:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1d25a:	f7fe f949 	bl	1b4f0 <ull_filter_lll_get>
   1d25e:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d260:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1d264:	f7fe fc38 	bl	1bad8 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1d268:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d26a:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   1d26c:	1cb2      	adds	r2, r6, #2
   1d26e:	7830      	ldrb	r0, [r6, #0]
   1d270:	f001 fb1c 	bl	1e8ac <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1d274:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1d278:	2200      	movs	r2, #0
   1d27a:	4641      	mov	r1, r8
   1d27c:	f001 fd00 	bl	1ec80 <radio_ar_configure>
   1d280:	e7b6      	b.n	1d1f0 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   1d282:	4844      	ldr	r0, [pc, #272]	; (1d394 <common_prepare_cb+0x254>)
   1d284:	4621      	mov	r1, r4
   1d286:	f001 f8e1 	bl	1e44c <radio_isr_set>
		radio_disable();
   1d28a:	f001 f9d9 	bl	1e640 <radio_disable>
}
   1d28e:	2000      	movs	r0, #0
   1d290:	b00c      	add	sp, #48	; 0x30
   1d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1d296:	2001      	movs	r0, #1
   1d298:	f7fe f92a 	bl	1b4f0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1d29c:	7841      	ldrb	r1, [r0, #1]
   1d29e:	1c82      	adds	r2, r0, #2
   1d2a0:	7800      	ldrb	r0, [r0, #0]
   1d2a2:	f001 fb03 	bl	1e8ac <radio_filter_configure>
   1d2a6:	e7a3      	b.n	1d1f0 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   1d2a8:	4a3b      	ldr	r2, [pc, #236]	; (1d398 <common_prepare_cb+0x258>)
   1d2aa:	493c      	ldr	r1, [pc, #240]	; (1d39c <common_prepare_cb+0x25c>)
   1d2ac:	483c      	ldr	r0, [pc, #240]	; (1d3a0 <common_prepare_cb+0x260>)
   1d2ae:	f44f 7305 	mov.w	r3, #532	; 0x214
   1d2b2:	f008 fc27 	bl	25b04 <printk>
   1d2b6:	4040      	eors	r0, r0
   1d2b8:	f380 8811 	msr	BASEPRI, r0
   1d2bc:	f04f 0003 	mov.w	r0, #3
   1d2c0:	df02      	svc	2
}
   1d2c2:	2000      	movs	r0, #0
   1d2c4:	b00c      	add	sp, #48	; 0x30
   1d2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   1d2ca:	4a33      	ldr	r2, [pc, #204]	; (1d398 <common_prepare_cb+0x258>)
   1d2cc:	4935      	ldr	r1, [pc, #212]	; (1d3a4 <common_prepare_cb+0x264>)
   1d2ce:	4834      	ldr	r0, [pc, #208]	; (1d3a0 <common_prepare_cb+0x260>)
   1d2d0:	f240 230f 	movw	r3, #527	; 0x20f
   1d2d4:	f008 fc16 	bl	25b04 <printk>
   1d2d8:	4040      	eors	r0, r0
   1d2da:	f380 8811 	msr	BASEPRI, r0
   1d2de:	f04f 0003 	mov.w	r0, #3
   1d2e2:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1d2e4:	4620      	mov	r0, r4
   1d2e6:	f7ff f87d 	bl	1c3e4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d2ea:	2800      	cmp	r0, #0
   1d2ec:	d0ae      	beq.n	1d24c <common_prepare_cb+0x10c>
   1d2ee:	e7db      	b.n	1d2a8 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   1d2f0:	f001 faaa 	bl	1e848 <radio_switch_complete_and_disable>
   1d2f4:	e774      	b.n	1d1e0 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d2f6:	4a2c      	ldr	r2, [pc, #176]	; (1d3a8 <common_prepare_cb+0x268>)
   1d2f8:	9207      	str	r2, [sp, #28]
   1d2fa:	4a2c      	ldr	r2, [pc, #176]	; (1d3ac <common_prepare_cb+0x26c>)
   1d2fc:	9205      	str	r2, [sp, #20]
   1d2fe:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1d302:	9300      	str	r3, [sp, #0]
   1d304:	9208      	str	r2, [sp, #32]
   1d306:	4633      	mov	r3, r6
   1d308:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1d30c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1d310:	9406      	str	r4, [sp, #24]
   1d312:	4639      	mov	r1, r7
   1d314:	2203      	movs	r2, #3
   1d316:	f7f6 fa39 	bl	1378c <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d31a:	f030 0302 	bics.w	r3, r0, #2
   1d31e:	d086      	beq.n	1d22e <common_prepare_cb+0xee>
   1d320:	4a1d      	ldr	r2, [pc, #116]	; (1d398 <common_prepare_cb+0x258>)
   1d322:	4923      	ldr	r1, [pc, #140]	; (1d3b0 <common_prepare_cb+0x270>)
   1d324:	481e      	ldr	r0, [pc, #120]	; (1d3a0 <common_prepare_cb+0x260>)
   1d326:	f240 13fb 	movw	r3, #507	; 0x1fb
   1d32a:	f008 fbeb 	bl	25b04 <printk>
   1d32e:	4040      	eors	r0, r0
   1d330:	f380 8811 	msr	BASEPRI, r0
   1d334:	f04f 0003 	mov.w	r0, #3
   1d338:	df02      	svc	2
   1d33a:	e778      	b.n	1d22e <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   1d33c:	4a16      	ldr	r2, [pc, #88]	; (1d398 <common_prepare_cb+0x258>)
   1d33e:	491d      	ldr	r1, [pc, #116]	; (1d3b4 <common_prepare_cb+0x274>)
   1d340:	4817      	ldr	r0, [pc, #92]	; (1d3a0 <common_prepare_cb+0x260>)
   1d342:	f240 138d 	movw	r3, #397	; 0x18d
   1d346:	f008 fbdd 	bl	25b04 <printk>
   1d34a:	4040      	eors	r0, r0
   1d34c:	f380 8811 	msr	BASEPRI, r0
   1d350:	f04f 0003 	mov.w	r0, #3
   1d354:	df02      	svc	2
   1d356:	e71b      	b.n	1d190 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   1d358:	6863      	ldr	r3, [r4, #4]
   1d35a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d35e:	07d9      	lsls	r1, r3, #31
   1d360:	d405      	bmi.n	1d36e <common_prepare_cb+0x22e>
   1d362:	6863      	ldr	r3, [r4, #4]
   1d364:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d368:	079a      	lsls	r2, r3, #30
   1d36a:	f57f aef8 	bpl.w	1d15e <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   1d36e:	4812      	ldr	r0, [pc, #72]	; (1d3b8 <common_prepare_cb+0x278>)
   1d370:	4621      	mov	r1, r4
   1d372:	f001 f86b 	bl	1e44c <radio_isr_set>
		radio_disable();
   1d376:	f001 f963 	bl	1e640 <radio_disable>
}
   1d37a:	2000      	movs	r0, #0
   1d37c:	b00c      	add	sp, #48	; 0x30
   1d37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d382:	bf00      	nop
   1d384:	8e89bed6 	.word	0x8e89bed6
   1d388:	00555555 	.word	0x00555555
   1d38c:	000041f1 	.word	0x000041f1
   1d390:	2000070c 	.word	0x2000070c
   1d394:	0001d465 	.word	0x0001d465
   1d398:	0002d6dc 	.word	0x0002d6dc
   1d39c:	0002cddc 	.word	0x0002cddc
   1d3a0:	0002c8dc 	.word	0x0002c8dc
   1d3a4:	0002ce04 	.word	0x0002ce04
   1d3a8:	0001d589 	.word	0x0001d589
   1d3ac:	0001d631 	.word	0x0001d631
   1d3b0:	0002cf1c 	.word	0x0002cf1c
   1d3b4:	0002d688 	.word	0x0002d688
   1d3b8:	0001c645 	.word	0x0001c645

0001d3bc <prepare_cb>:
	return common_prepare_cb(p, false);
   1d3bc:	2100      	movs	r1, #0
   1d3be:	f7ff bebf 	b.w	1d140 <common_prepare_cb>
   1d3c2:	bf00      	nop

0001d3c4 <isr_common_done>:
{
   1d3c4:	b530      	push	{r4, r5, lr}
   1d3c6:	4604      	mov	r4, r0
   1d3c8:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1d3ca:	f7ff f8e5 	bl	1c598 <lll_isr_status_reset>
	lll->state = 0U;
   1d3ce:	7da3      	ldrb	r3, [r4, #22]
   1d3d0:	f36f 0300 	bfc	r3, #0, #1
   1d3d4:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   1d3d6:	069b      	lsls	r3, r3, #26
   1d3d8:	d401      	bmi.n	1d3de <isr_common_done+0x1a>
		   lll->conn) {
   1d3da:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1d3dc:	b3b3      	cbz	r3, 1d44c <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d3de:	2096      	movs	r0, #150	; 0x96
   1d3e0:	f001 fab6 	bl	1e950 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1d3e4:	2300      	movs	r3, #0
   1d3e6:	461a      	mov	r2, r3
   1d3e8:	4619      	mov	r1, r3
   1d3ea:	4618      	mov	r0, r3
   1d3ec:	f001 f9cc 	bl	1e788 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d3f0:	2001      	movs	r0, #1
   1d3f2:	f7f9 f803 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d3f6:	4605      	mov	r5, r0
   1d3f8:	b1d0      	cbz	r0, 1d430 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   1d3fa:	f105 001c 	add.w	r0, r5, #28
   1d3fe:	f001 f8f9 	bl	1e5f4 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1d402:	f7fe fcef 	bl	1bde4 <ull_filter_lll_rl_enabled>
   1d406:	b940      	cbnz	r0, 1d41a <isr_common_done+0x56>
	radio_rssi_measure();
   1d408:	f001 fa2e 	bl	1e868 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1d40c:	4811      	ldr	r0, [pc, #68]	; (1d454 <isr_common_done+0x90>)
   1d40e:	4621      	mov	r1, r4
}
   1d410:	b003      	add	sp, #12
   1d412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1d416:	f001 b819 	b.w	1e44c <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d41a:	f10d 0007 	add.w	r0, sp, #7
   1d41e:	f7fe fb5b 	bl	1bad8 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1d422:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d424:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1d426:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d42a:	f001 fc29 	bl	1ec80 <radio_ar_configure>
   1d42e:	e7eb      	b.n	1d408 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   1d430:	4a09      	ldr	r2, [pc, #36]	; (1d458 <isr_common_done+0x94>)
   1d432:	490a      	ldr	r1, [pc, #40]	; (1d45c <isr_common_done+0x98>)
   1d434:	480a      	ldr	r0, [pc, #40]	; (1d460 <isr_common_done+0x9c>)
   1d436:	f44f 7352 	mov.w	r3, #840	; 0x348
   1d43a:	f008 fb63 	bl	25b04 <printk>
   1d43e:	4040      	eors	r0, r0
   1d440:	f380 8811 	msr	BASEPRI, r0
   1d444:	f04f 0003 	mov.w	r0, #3
   1d448:	df02      	svc	2
   1d44a:	e7d6      	b.n	1d3fa <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   1d44c:	f001 f9fc 	bl	1e848 <radio_switch_complete_and_disable>
   1d450:	e7ce      	b.n	1d3f0 <isr_common_done+0x2c>
   1d452:	bf00      	nop
   1d454:	000041f1 	.word	0x000041f1
   1d458:	0002d6dc 	.word	0x0002d6dc
   1d45c:	0002d688 	.word	0x0002d688
   1d460:	0002c8dc 	.word	0x0002c8dc

0001d464 <isr_abort>:
{
   1d464:	b510      	push	{r4, lr}
   1d466:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d468:	f7ff f896 	bl	1c598 <lll_isr_status_reset>
	radio_filter_disable();
   1d46c:	f001 fa3e 	bl	1e8ec <radio_filter_disable>
	lll_isr_cleanup(param);
   1d470:	4620      	mov	r0, r4
}
   1d472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d476:	f7ff b89d 	b.w	1c5b4 <lll_isr_cleanup>
   1d47a:	bf00      	nop

0001d47c <isr_done>:
{
   1d47c:	b508      	push	{r3, lr}
	isr_common_done(param);
   1d47e:	f7ff ffa1 	bl	1d3c4 <isr_common_done>
	radio_rx_enable();
   1d482:	f001 f8d1 	bl	1e628 <radio_rx_enable>
}
   1d486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1d48a:	f001 bb53 	b.w	1eb34 <radio_tmr_end_capture>
   1d48e:	bf00      	nop

0001d490 <isr_tx>:
{
   1d490:	b570      	push	{r4, r5, r6, lr}
   1d492:	b082      	sub	sp, #8
   1d494:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1d496:	f7ff f86d 	bl	1c574 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1d49a:	f001 f9d5 	bl	1e848 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d49e:	2001      	movs	r0, #1
   1d4a0:	f7f8 ffac 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d4a4:	4604      	mov	r4, r0
   1d4a6:	2800      	cmp	r0, #0
   1d4a8:	d03f      	beq.n	1d52a <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   1d4aa:	f104 001c 	add.w	r0, r4, #28
   1d4ae:	f001 f8a1 	bl	1e5f4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1d4b2:	f001 f8e5 	bl	1e680 <radio_is_ready>
   1d4b6:	b9e0      	cbnz	r0, 1d4f2 <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   1d4b8:	f7fe fc94 	bl	1bde4 <ull_filter_lll_rl_enabled>
   1d4bc:	bb50      	cbnz	r0, 1d514 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d4be:	f001 fb47 	bl	1eb50 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1d4c2:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d4c4:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d4c6:	4608      	mov	r0, r1
   1d4c8:	f001 f8a8 	bl	1e61c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d4cc:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d4ce:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d4d0:	4608      	mov	r0, r1
   1d4d2:	f001 f8a1 	bl	1e618 <radio_tx_chain_delay_get>
   1d4d6:	4434      	add	r4, r6
   1d4d8:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1d4da:	1a20      	subs	r0, r4, r0
   1d4dc:	f001 fb0a 	bl	1eaf4 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1d4e0:	f001 f9c2 	bl	1e868 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1d4e4:	4818      	ldr	r0, [pc, #96]	; (1d548 <isr_tx+0xb8>)
   1d4e6:	4629      	mov	r1, r5
}
   1d4e8:	b002      	add	sp, #8
   1d4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1d4ee:	f000 bfad 	b.w	1e44c <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1d4f2:	4a16      	ldr	r2, [pc, #88]	; (1d54c <isr_tx+0xbc>)
   1d4f4:	4916      	ldr	r1, [pc, #88]	; (1d550 <isr_tx+0xc0>)
   1d4f6:	4817      	ldr	r0, [pc, #92]	; (1d554 <isr_tx+0xc4>)
   1d4f8:	f240 3306 	movw	r3, #774	; 0x306
   1d4fc:	f008 fb02 	bl	25b04 <printk>
   1d500:	4040      	eors	r0, r0
   1d502:	f380 8811 	msr	BASEPRI, r0
   1d506:	f04f 0003 	mov.w	r0, #3
   1d50a:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1d50c:	f7fe fc6a 	bl	1bde4 <ull_filter_lll_rl_enabled>
   1d510:	2800      	cmp	r0, #0
   1d512:	d0d4      	beq.n	1d4be <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d514:	f10d 0007 	add.w	r0, sp, #7
   1d518:	f7fe fade 	bl	1bad8 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1d51c:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d51e:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1d520:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d524:	f001 fbac 	bl	1ec80 <radio_ar_configure>
   1d528:	e7c9      	b.n	1d4be <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1d52a:	4a08      	ldr	r2, [pc, #32]	; (1d54c <isr_tx+0xbc>)
   1d52c:	490a      	ldr	r1, [pc, #40]	; (1d558 <isr_tx+0xc8>)
   1d52e:	4809      	ldr	r0, [pc, #36]	; (1d554 <isr_tx+0xc4>)
   1d530:	f240 3302 	movw	r3, #770	; 0x302
   1d534:	f008 fae6 	bl	25b04 <printk>
   1d538:	4040      	eors	r0, r0
   1d53a:	f380 8811 	msr	BASEPRI, r0
   1d53e:	f04f 0003 	mov.w	r0, #3
   1d542:	df02      	svc	2
   1d544:	e7b1      	b.n	1d4aa <isr_tx+0x1a>
   1d546:	bf00      	nop
   1d548:	000041f1 	.word	0x000041f1
   1d54c:	0002d6dc 	.word	0x0002d6dc
   1d550:	0002d690 	.word	0x0002d690
   1d554:	0002c8dc 	.word	0x0002c8dc
   1d558:	0002d688 	.word	0x0002d688

0001d55c <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1d55c:	68c3      	ldr	r3, [r0, #12]
{
   1d55e:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1d560:	681e      	ldr	r6, [r3, #0]
{
   1d562:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d564:	f7f6 fa3c 	bl	139e0 <ticker_ticks_now_get>
   1d568:	4605      	mov	r5, r0
   1d56a:	4630      	mov	r0, r6
   1d56c:	f7fe ffa0 	bl	1c4b0 <lll_event_offset_get>
	p->remainder = 0;
   1d570:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d572:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1d574:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1d578:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1d57a:	4620      	mov	r0, r4
   1d57c:	2101      	movs	r1, #1
}
   1d57e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1d582:	f7ff bddd 	b.w	1d140 <common_prepare_cb>
   1d586:	bf00      	nop

0001d588 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d588:	b900      	cbnz	r0, 1d58c <ticker_op_start_cb+0x4>
   1d58a:	4770      	bx	lr
{
   1d58c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d58e:	4a07      	ldr	r2, [pc, #28]	; (1d5ac <ticker_op_start_cb+0x24>)
   1d590:	4907      	ldr	r1, [pc, #28]	; (1d5b0 <ticker_op_start_cb+0x28>)
   1d592:	4808      	ldr	r0, [pc, #32]	; (1d5b4 <ticker_op_start_cb+0x2c>)
   1d594:	f44f 7324 	mov.w	r3, #656	; 0x290
   1d598:	f008 fab4 	bl	25b04 <printk>
   1d59c:	4040      	eors	r0, r0
   1d59e:	f380 8811 	msr	BASEPRI, r0
   1d5a2:	f04f 0003 	mov.w	r0, #3
   1d5a6:	df02      	svc	2
}
   1d5a8:	bd08      	pop	{r3, pc}
   1d5aa:	bf00      	nop
   1d5ac:	0002d6dc 	.word	0x0002d6dc
   1d5b0:	0002d014 	.word	0x0002d014
   1d5b4:	0002c8dc 	.word	0x0002c8dc

0001d5b8 <is_abort_cb>:
	if (next != curr) {
   1d5b8:	4281      	cmp	r1, r0
{
   1d5ba:	b508      	push	{r3, lr}
	if (next != curr) {
   1d5bc:	d00d      	beq.n	1d5da <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   1d5be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1d5c0:	b113      	cbz	r3, 1d5c8 <is_abort_cb+0x10>
			return -ECANCELED;
   1d5c2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1d5c6:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   1d5c8:	4b14      	ldr	r3, [pc, #80]	; (1d61c <is_abort_cb+0x64>)
   1d5ca:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1d5cc:	f7ff f98a 	bl	1c8e4 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1d5d0:	2800      	cmp	r0, #0
   1d5d2:	db12      	blt.n	1d5fa <is_abort_cb+0x42>
   1d5d4:	f06f 000a 	mvn.w	r0, #10
}
   1d5d8:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1d5da:	684b      	ldr	r3, [r1, #4]
   1d5dc:	b123      	cbz	r3, 1d5e8 <is_abort_cb+0x30>
   1d5de:	684b      	ldr	r3, [r1, #4]
   1d5e0:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d5e4:	07db      	lsls	r3, r3, #31
   1d5e6:	d406      	bmi.n	1d5f6 <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1d5e8:	480d      	ldr	r0, [pc, #52]	; (1d620 <is_abort_cb+0x68>)
   1d5ea:	f000 ff2f 	bl	1e44c <radio_isr_set>
	radio_disable();
   1d5ee:	f001 f827 	bl	1e640 <radio_disable>
	return 0;
   1d5f2:	2000      	movs	r0, #0
}
   1d5f4:	bd08      	pop	{r3, pc}
		return 0;
   1d5f6:	2000      	movs	r0, #0
}
   1d5f8:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1d5fa:	4a0a      	ldr	r2, [pc, #40]	; (1d624 <is_abort_cb+0x6c>)
   1d5fc:	490a      	ldr	r1, [pc, #40]	; (1d628 <is_abort_cb+0x70>)
   1d5fe:	480b      	ldr	r0, [pc, #44]	; (1d62c <is_abort_cb+0x74>)
   1d600:	f240 2332 	movw	r3, #562	; 0x232
   1d604:	f008 fa7e 	bl	25b04 <printk>
   1d608:	4040      	eors	r0, r0
   1d60a:	f380 8811 	msr	BASEPRI, r0
   1d60e:	f04f 0003 	mov.w	r0, #3
   1d612:	df02      	svc	2
   1d614:	f06f 000a 	mvn.w	r0, #10
}
   1d618:	bd08      	pop	{r3, pc}
   1d61a:	bf00      	nop
   1d61c:	0001d55d 	.word	0x0001d55d
   1d620:	00004151 	.word	0x00004151
   1d624:	0002d6dc 	.word	0x0002d6dc
   1d628:	0002d5dc 	.word	0x0002d5dc
   1d62c:	0002c8dc 	.word	0x0002c8dc

0001d630 <ticker_stop_cb>:
{
   1d630:	b508      	push	{r3, lr}
	mfy.param = param;
   1d632:	4b0c      	ldr	r3, [pc, #48]	; (1d664 <ticker_stop_cb+0x34>)
{
   1d634:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1d636:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1d638:	2200      	movs	r2, #0
   1d63a:	4611      	mov	r1, r2
   1d63c:	2001      	movs	r0, #1
   1d63e:	f7f4 fed9 	bl	123f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1d642:	b900      	cbnz	r0, 1d646 <ticker_stop_cb+0x16>
}
   1d644:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1d646:	4a08      	ldr	r2, [pc, #32]	; (1d668 <ticker_stop_cb+0x38>)
   1d648:	4908      	ldr	r1, [pc, #32]	; (1d66c <ticker_stop_cb+0x3c>)
   1d64a:	4809      	ldr	r0, [pc, #36]	; (1d670 <ticker_stop_cb+0x40>)
   1d64c:	f240 2389 	movw	r3, #649	; 0x289
   1d650:	f008 fa58 	bl	25b04 <printk>
   1d654:	4040      	eors	r0, r0
   1d656:	f380 8811 	msr	BASEPRI, r0
   1d65a:	f04f 0003 	mov.w	r0, #3
   1d65e:	df02      	svc	2
}
   1d660:	bd08      	pop	{r3, pc}
   1d662:	bf00      	nop
   1d664:	200006fc 	.word	0x200006fc
   1d668:	0002d6dc 	.word	0x0002d6dc
   1d66c:	0002cddc 	.word	0x0002cddc
   1d670:	0002c8dc 	.word	0x0002c8dc

0001d674 <isr_done_cleanup>:
{
   1d674:	b530      	push	{r4, r5, lr}
   1d676:	4604      	mov	r4, r0
   1d678:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1d67a:	f7fe ff8d 	bl	1c598 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1d67e:	f10d 010f 	add.w	r1, sp, #15
   1d682:	4620      	mov	r0, r4
   1d684:	f7fe ff02 	bl	1c48c <lll_is_done>
   1d688:	b9c8      	cbnz	r0, 1d6be <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1d68a:	4605      	mov	r5, r0
   1d68c:	f001 f92e 	bl	1e8ec <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1d690:	7da2      	ldrb	r2, [r4, #22]
   1d692:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1d696:	3301      	adds	r3, #1
   1d698:	f003 0303 	and.w	r3, r3, #3
   1d69c:	2b03      	cmp	r3, #3
   1d69e:	bf14      	ite	ne
   1d6a0:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1d6a4:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1d6a8:	2300      	movs	r3, #0
		lll->chan = 0U;
   1d6aa:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1d6ac:	4619      	mov	r1, r3
   1d6ae:	9300      	str	r3, [sp, #0]
   1d6b0:	2203      	movs	r2, #3
   1d6b2:	4618      	mov	r0, r3
   1d6b4:	f7f6 f8f4 	bl	138a0 <ticker_stop>
	lll_isr_cleanup(param);
   1d6b8:	4620      	mov	r0, r4
   1d6ba:	f7fe ff7b 	bl	1c5b4 <lll_isr_cleanup>
}
   1d6be:	b005      	add	sp, #20
   1d6c0:	bd30      	pop	{r4, r5, pc}
   1d6c2:	bf00      	nop

0001d6c4 <isr_scan_tgta_check>:
{
   1d6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d6c8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1d6cc:	4616      	mov	r6, r2
   1d6ce:	4680      	mov	r8, r0
   1d6d0:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1d6d2:	464a      	mov	r2, r9
   1d6d4:	4619      	mov	r1, r3
   1d6d6:	4630      	mov	r0, r6
{
   1d6d8:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1d6da:	f7fe fb61 	bl	1bda0 <ull_filter_lll_rl_addr_resolve>
   1d6de:	4604      	mov	r4, r0
   1d6e0:	b9a0      	cbnz	r0, 1d70c <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1d6e2:	b11d      	cbz	r5, 1d6ec <isr_scan_tgta_check+0x28>
   1d6e4:	f898 3017 	ldrb.w	r3, [r8, #23]
   1d6e8:	079a      	lsls	r2, r3, #30
   1d6ea:	d41c      	bmi.n	1d726 <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   1d6ec:	f898 5016 	ldrb.w	r5, [r8, #22]
   1d6f0:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1d6f4:	42b3      	cmp	r3, r6
   1d6f6:	d00c      	beq.n	1d712 <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1d6f8:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   1d6fc:	07ab      	lsls	r3, r5, #30
   1d6fe:	d505      	bpl.n	1d70c <isr_scan_tgta_check+0x48>
   1d700:	b126      	cbz	r6, 1d70c <isr_scan_tgta_check+0x48>
   1d702:	797b      	ldrb	r3, [r7, #5]
   1d704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d708:	2b40      	cmp	r3, #64	; 0x40
   1d70a:	d014      	beq.n	1d736 <isr_scan_tgta_check+0x72>
}
   1d70c:	4620      	mov	r0, r4
   1d70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1d712:	2206      	movs	r2, #6
   1d714:	4639      	mov	r1, r7
   1d716:	f108 0019 	add.w	r0, r8, #25
   1d71a:	f00b f820 	bl	2875e <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1d71e:	b140      	cbz	r0, 1d732 <isr_scan_tgta_check+0x6e>
   1d720:	f898 5016 	ldrb.w	r5, [r8, #22]
   1d724:	e7e8      	b.n	1d6f8 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1d726:	4648      	mov	r0, r9
   1d728:	f7fe f9bc 	bl	1baa4 <ull_filter_lll_lrpa_get>
   1d72c:	2800      	cmp	r0, #0
   1d72e:	d1ed      	bne.n	1d70c <isr_scan_tgta_check+0x48>
   1d730:	e7dc      	b.n	1d6ec <isr_scan_tgta_check+0x28>
			*dir_report = true;
   1d732:	2401      	movs	r4, #1
   1d734:	e7ea      	b.n	1d70c <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1d736:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d738:	2b00      	cmp	r3, #0
   1d73a:	d0fa      	beq.n	1d732 <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   1d73c:	2401      	movs	r4, #1
   1d73e:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1d740:	e7e4      	b.n	1d70c <isr_scan_tgta_check+0x48>
   1d742:	bf00      	nop

0001d744 <abort_cb>:
{
   1d744:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1d746:	b1d8      	cbz	r0, 1d780 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1d748:	460c      	mov	r4, r1
   1d74a:	f7ff f8e3 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d74e:	2800      	cmp	r0, #0
   1d750:	db04      	blt.n	1d75c <abort_cb+0x18>
	lll_done(param);
   1d752:	4620      	mov	r0, r4
}
   1d754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d758:	f7fe be46 	b.w	1c3e8 <lll_done>
	LL_ASSERT(err >= 0);
   1d75c:	4a0c      	ldr	r2, [pc, #48]	; (1d790 <abort_cb+0x4c>)
   1d75e:	490d      	ldr	r1, [pc, #52]	; (1d794 <abort_cb+0x50>)
   1d760:	480d      	ldr	r0, [pc, #52]	; (1d798 <abort_cb+0x54>)
   1d762:	f240 2379 	movw	r3, #633	; 0x279
   1d766:	f008 f9cd 	bl	25b04 <printk>
   1d76a:	4040      	eors	r0, r0
   1d76c:	f380 8811 	msr	BASEPRI, r0
   1d770:	f04f 0003 	mov.w	r0, #3
   1d774:	df02      	svc	2
	lll_done(param);
   1d776:	4620      	mov	r0, r4
}
   1d778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d77c:	f7fe be34 	b.w	1c3e8 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   1d780:	4806      	ldr	r0, [pc, #24]	; (1d79c <abort_cb+0x58>)
   1d782:	f000 fe63 	bl	1e44c <radio_isr_set>
}
   1d786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1d78a:	f000 bf59 	b.w	1e640 <radio_disable>
   1d78e:	bf00      	nop
   1d790:	0002d6dc 	.word	0x0002d6dc
   1d794:	0002d5dc 	.word	0x0002d5dc
   1d798:	0002c8dc 	.word	0x0002c8dc
   1d79c:	0001d675 	.word	0x0001d675

0001d7a0 <lll_scan_init>:
}
   1d7a0:	2000      	movs	r0, #0
   1d7a2:	4770      	bx	lr

0001d7a4 <lll_scan_reset>:
   1d7a4:	2000      	movs	r0, #0
   1d7a6:	4770      	bx	lr

0001d7a8 <lll_scan_prepare>:
{
   1d7a8:	b510      	push	{r4, lr}
   1d7aa:	b082      	sub	sp, #8
   1d7ac:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d7ae:	f7ff f899 	bl	1c8e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1d7b2:	2800      	cmp	r0, #0
   1d7b4:	db19      	blt.n	1d7ea <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1d7b6:	4a13      	ldr	r2, [pc, #76]	; (1d804 <lll_scan_prepare+0x5c>)
   1d7b8:	4913      	ldr	r1, [pc, #76]	; (1d808 <lll_scan_prepare+0x60>)
   1d7ba:	4814      	ldr	r0, [pc, #80]	; (1d80c <lll_scan_prepare+0x64>)
   1d7bc:	9400      	str	r4, [sp, #0]
   1d7be:	2300      	movs	r3, #0
   1d7c0:	f7f9 f94e 	bl	16a60 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d7c4:	b108      	cbz	r0, 1d7ca <lll_scan_prepare+0x22>
   1d7c6:	3077      	adds	r0, #119	; 0x77
   1d7c8:	d101      	bne.n	1d7ce <lll_scan_prepare+0x26>
}
   1d7ca:	b002      	add	sp, #8
   1d7cc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d7ce:	4a10      	ldr	r2, [pc, #64]	; (1d810 <lll_scan_prepare+0x68>)
   1d7d0:	4910      	ldr	r1, [pc, #64]	; (1d814 <lll_scan_prepare+0x6c>)
   1d7d2:	4811      	ldr	r0, [pc, #68]	; (1d818 <lll_scan_prepare+0x70>)
   1d7d4:	238b      	movs	r3, #139	; 0x8b
   1d7d6:	f008 f995 	bl	25b04 <printk>
   1d7da:	4040      	eors	r0, r0
   1d7dc:	f380 8811 	msr	BASEPRI, r0
   1d7e0:	f04f 0003 	mov.w	r0, #3
   1d7e4:	df02      	svc	2
}
   1d7e6:	b002      	add	sp, #8
   1d7e8:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1d7ea:	4a09      	ldr	r2, [pc, #36]	; (1d810 <lll_scan_prepare+0x68>)
   1d7ec:	490b      	ldr	r1, [pc, #44]	; (1d81c <lll_scan_prepare+0x74>)
   1d7ee:	480a      	ldr	r0, [pc, #40]	; (1d818 <lll_scan_prepare+0x70>)
   1d7f0:	2388      	movs	r3, #136	; 0x88
   1d7f2:	f008 f987 	bl	25b04 <printk>
   1d7f6:	4040      	eors	r0, r0
   1d7f8:	f380 8811 	msr	BASEPRI, r0
   1d7fc:	f04f 0003 	mov.w	r0, #3
   1d800:	df02      	svc	2
   1d802:	e7d8      	b.n	1d7b6 <lll_scan_prepare+0xe>
   1d804:	0001d3bd 	.word	0x0001d3bd
   1d808:	0001d745 	.word	0x0001d745
   1d80c:	0001d5b9 	.word	0x0001d5b9
   1d810:	0002d6dc 	.word	0x0002d6dc
   1d814:	0002d6b8 	.word	0x0002d6b8
   1d818:	0002c8dc 	.word	0x0002c8dc
   1d81c:	0002d5dc 	.word	0x0002d5dc

0001d820 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1d820:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   1d824:	f01c 0f08 	tst.w	ip, #8
   1d828:	d002      	beq.n	1d830 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1d82a:	b162      	cbz	r2, 1d846 <lll_scan_isr_rx_check+0x26>
{
   1d82c:	2001      	movs	r0, #1
}
   1d82e:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1d830:	2a00      	cmp	r2, #0
   1d832:	d0fb      	beq.n	1d82c <lll_scan_isr_rx_check+0xc>
{
   1d834:	b510      	push	{r4, lr}
   1d836:	4604      	mov	r4, r0
   1d838:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1d83a:	4619      	mov	r1, r3
   1d83c:	f7fe fa42 	bl	1bcc4 <ull_filter_lll_rl_idx_allowed>
   1d840:	b120      	cbz	r0, 1d84c <lll_scan_isr_rx_check+0x2c>
{
   1d842:	2001      	movs	r0, #1
}
   1d844:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1d846:	4618      	mov	r0, r3
   1d848:	f7fe ba0c 	b.w	1bc64 <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1d84c:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   1d84e:	071b      	lsls	r3, r3, #28
   1d850:	d4f7      	bmi.n	1d842 <lll_scan_isr_rx_check+0x22>
}
   1d852:	bd10      	pop	{r4, pc}

0001d854 <lll_scan_prepare_connect_req>:
{
   1d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d858:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   1d85c:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1d85e:	01ad      	lsls	r5, r5, #6
   1d860:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1d864:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   1d868:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   1d86c:	780b      	ldrb	r3, [r1, #0]
   1d86e:	f003 0310 	and.w	r3, r3, #16
{
   1d872:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1d874:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1d876:	2322      	movs	r3, #34	; 0x22
   1d878:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1d87a:	700d      	strb	r5, [r1, #0]
{
   1d87c:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1d87e:	9908      	ldr	r1, [sp, #32]
   1d880:	2206      	movs	r2, #6
{
   1d882:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1d884:	1ca0      	adds	r0, r4, #2
   1d886:	f00a ff93 	bl	287b0 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   1d88a:	9906      	ldr	r1, [sp, #24]
   1d88c:	2206      	movs	r2, #6
   1d88e:	f104 0008 	add.w	r0, r4, #8
   1d892:	f00a ff8d 	bl	287b0 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   1d896:	2204      	movs	r2, #4
   1d898:	18b1      	adds	r1, r6, r2
   1d89a:	f104 000e 	add.w	r0, r4, #14
   1d89e:	f00a ff87 	bl	287b0 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   1d8a2:	2203      	movs	r2, #3
   1d8a4:	f106 0108 	add.w	r1, r6, #8
   1d8a8:	f104 0012 	add.w	r0, r4, #18
   1d8ac:	f00a ff80 	bl	287b0 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   1d8b0:	2301      	movs	r3, #1
   1d8b2:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1d8b4:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1d8b6:	f001 f945 	bl	1eb44 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   1d8ba:	f1b8 0f00 	cmp.w	r8, #0
   1d8be:	d044      	beq.n	1d94a <lll_scan_prepare_connect_req+0xf6>
   1d8c0:	f008 0203 	and.w	r2, r8, #3
   1d8c4:	322b      	adds	r2, #43	; 0x2b
   1d8c6:	00d2      	lsls	r2, r2, #3
   1d8c8:	f3c8 0840 	ubfx	r8, r8, #1, #1
   1d8cc:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   1d8d0:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1d8d2:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1d8d6:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1d8d8:	b393      	cbz	r3, 1d940 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1d8da:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1d8de:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1d8e2:	2b00      	cmp	r3, #0
   1d8e4:	db01      	blt.n	1d8ea <lll_scan_prepare_connect_req+0x96>
   1d8e6:	4293      	cmp	r3, r2
   1d8e8:	d201      	bcs.n	1d8ee <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   1d8ea:	442b      	add	r3, r5
   1d8ec:	e7f9      	b.n	1d8e2 <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   1d8ee:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1d8f0:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   1d8f2:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1d8f4:	4b16      	ldr	r3, [pc, #88]	; (1d950 <lll_scan_prepare_connect_req+0xfc>)
   1d8f6:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1d8fa:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1d8fc:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   1d8fe:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   1d900:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   1d902:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1d904:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1d906:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1d908:	8abb      	ldrh	r3, [r7, #20]
   1d90a:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1d90c:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1d90e:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   1d910:	f106 0118 	add.w	r1, r6, #24
   1d914:	2205      	movs	r2, #5
   1d916:	f104 001e 	add.w	r0, r4, #30
   1d91a:	f00a ff49 	bl	287b0 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   1d91e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d922:	7fb2      	ldrb	r2, [r6, #30]
   1d924:	f362 0304 	bfi	r3, r2, #0, #5
   1d928:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   1d92c:	f7ff f810 	bl	1c950 <lll_clock_sca_local_get>
   1d930:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d934:	f360 1347 	bfi	r3, r0, #5, #3
   1d938:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   1d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   1d940:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d942:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   1d944:	75a3      	strb	r3, [r4, #22]
   1d946:	75e3      	strb	r3, [r4, #23]
   1d948:	e7dc      	b.n	1d904 <lll_scan_prepare_connect_req+0xb0>
   1d94a:	f44f 78b0 	mov.w	r8, #352	; 0x160
   1d94e:	e7bf      	b.n	1d8d0 <lll_scan_prepare_connect_req+0x7c>
   1d950:	d1b71759 	.word	0xd1b71759

0001d954 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1d954:	b538      	push	{r3, r4, r5, lr}
   1d956:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1d958:	f7fe fe1e 	bl	1c598 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1d95c:	f7f8 fe4c 	bl	165f8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1d960:	4604      	mov	r4, r0
   1d962:	b190      	cbz	r0, 1d98a <isr_done+0x36>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1d964:	4910      	ldr	r1, [pc, #64]	; (1d9a8 <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1d966:	4a11      	ldr	r2, [pc, #68]	; (1d9ac <isr_done+0x58>)
	e->crc_valid = crc_valid;
   1d968:	7923      	ldrb	r3, [r4, #4]
   1d96a:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   1d96c:	8812      	ldrh	r2, [r2, #0]
   1d96e:	8062      	strh	r2, [r4, #2]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1d970:	4a0f      	ldr	r2, [pc, #60]	; (1d9b0 <isr_done+0x5c>)
	e->crc_valid = crc_valid;
   1d972:	f360 0300 	bfi	r3, r0, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1d976:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   1d978:	7123      	strb	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1d97a:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1d97c:	7813      	ldrb	r3, [r2, #0]
   1d97e:	7163      	strb	r3, [r4, #5]
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1d980:	4628      	mov	r0, r5
}
   1d982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1d986:	f7fe be15 	b.w	1c5b4 <lll_isr_cleanup>
	LL_ASSERT(e);
   1d98a:	4a0a      	ldr	r2, [pc, #40]	; (1d9b4 <isr_done+0x60>)
   1d98c:	490a      	ldr	r1, [pc, #40]	; (1d9b8 <isr_done+0x64>)
   1d98e:	480b      	ldr	r0, [pc, #44]	; (1d9bc <isr_done+0x68>)
   1d990:	f240 3317 	movw	r3, #791	; 0x317
   1d994:	f008 f8b6 	bl	25b04 <printk>
   1d998:	4040      	eors	r0, r0
   1d99a:	f380 8811 	msr	BASEPRI, r0
   1d99e:	f04f 0003 	mov.w	r0, #3
   1d9a2:	df02      	svc	2
   1d9a4:	e7de      	b.n	1d964 <isr_done+0x10>
   1d9a6:	bf00      	nop
   1d9a8:	20005feb 	.word	0x20005feb
   1d9ac:	20005eaa 	.word	0x20005eaa
   1d9b0:	20005fec 	.word	0x20005fec
   1d9b4:	0002d73c 	.word	0x0002d73c
   1d9b8:	0002d788 	.word	0x0002d788
   1d9bc:	0002c8dc 	.word	0x0002c8dc

0001d9c0 <lll_conn_init>:
{
   1d9c0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1d9c2:	f000 fe91 	bl	1e6e8 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d9c6:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1d9c8:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d9ca:	2101      	movs	r1, #1
   1d9cc:	f361 0201 	bfi	r2, r1, #0, #2
}
   1d9d0:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d9d2:	701a      	strb	r2, [r3, #0]
}
   1d9d4:	bd08      	pop	{r3, pc}
   1d9d6:	bf00      	nop

0001d9d8 <lll_conn_reset>:
}
   1d9d8:	2000      	movs	r0, #0
   1d9da:	4770      	bx	lr

0001d9dc <lll_conn_flush>:
}
   1d9dc:	4770      	bx	lr
   1d9de:	bf00      	nop

0001d9e0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1d9e0:	4805      	ldr	r0, [pc, #20]	; (1d9f8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1d9e2:	4906      	ldr	r1, [pc, #24]	; (1d9fc <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1d9e4:	4a06      	ldr	r2, [pc, #24]	; (1da00 <lll_conn_prepare_reset+0x20>)
{
   1d9e6:	b410      	push	{r4}
	trx_cnt = 0U;
   1d9e8:	2300      	movs	r3, #0
   1d9ea:	4c06      	ldr	r4, [pc, #24]	; (1da04 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1d9ec:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1d9ee:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1d9f0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1d9f2:	8023      	strh	r3, [r4, #0]
}
   1d9f4:	bc10      	pop	{r4}
   1d9f6:	4770      	bx	lr
   1d9f8:	20005feb 	.word	0x20005feb
   1d9fc:	20005fea 	.word	0x20005fea
   1da00:	20005fec 	.word	0x20005fec
   1da04:	20005eaa 	.word	0x20005eaa

0001da08 <lll_conn_abort_cb>:
{
   1da08:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1da0a:	b1e8      	cbz	r0, 1da48 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1da0c:	460d      	mov	r5, r1
   1da0e:	4604      	mov	r4, r0
   1da10:	f7fe ff80 	bl	1c914 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1da14:	2800      	cmp	r0, #0
   1da16:	db0a      	blt.n	1da2e <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1da18:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1da1a:	8923      	ldrh	r3, [r4, #8]
   1da1c:	8a51      	ldrh	r1, [r2, #18]
   1da1e:	3301      	adds	r3, #1
   1da20:	440b      	add	r3, r1
   1da22:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1da24:	4628      	mov	r0, r5
}
   1da26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1da2a:	f7fe bcdd 	b.w	1c3e8 <lll_done>
	LL_ASSERT(err >= 0);
   1da2e:	4a0a      	ldr	r2, [pc, #40]	; (1da58 <lll_conn_abort_cb+0x50>)
   1da30:	490a      	ldr	r1, [pc, #40]	; (1da5c <lll_conn_abort_cb+0x54>)
   1da32:	480b      	ldr	r0, [pc, #44]	; (1da60 <lll_conn_abort_cb+0x58>)
   1da34:	23aa      	movs	r3, #170	; 0xaa
   1da36:	f008 f865 	bl	25b04 <printk>
   1da3a:	4040      	eors	r0, r0
   1da3c:	f380 8811 	msr	BASEPRI, r0
   1da40:	f04f 0003 	mov.w	r0, #3
   1da44:	df02      	svc	2
   1da46:	e7e7      	b.n	1da18 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1da48:	4806      	ldr	r0, [pc, #24]	; (1da64 <lll_conn_abort_cb+0x5c>)
   1da4a:	f000 fcff 	bl	1e44c <radio_isr_set>
}
   1da4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1da52:	f000 bdf5 	b.w	1e640 <radio_disable>
   1da56:	bf00      	nop
   1da58:	0002d73c 	.word	0x0002d73c
   1da5c:	0002d5dc 	.word	0x0002d5dc
   1da60:	0002c8dc 	.word	0x0002c8dc
   1da64:	0001d955 	.word	0x0001d955

0001da68 <lll_conn_rx_pkt_set>:
{
   1da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da6a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1da6c:	2001      	movs	r0, #1
   1da6e:	f7f8 fcc5 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1da72:	4604      	mov	r4, r0
   1da74:	b348      	cbz	r0, 1daca <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1da76:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   1da7a:	8caf      	ldrh	r7, [r5, #36]	; 0x24
	phy = lll->phy_rx;
   1da7c:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1da80:	2100      	movs	r1, #0
   1da82:	4630      	mov	r0, r6
   1da84:	f000 fd48 	bl	1e518 <radio_phy_set>
	} else if (lll->enc_rx) {
   1da88:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1da8c:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   1da8e:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1da90:	b2f9      	uxtb	r1, r7
   1da92:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   1da96:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   1da9a:	d50e      	bpl.n	1daba <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1da9c:	3104      	adds	r1, #4
   1da9e:	b2c9      	uxtb	r1, r1
   1daa0:	2008      	movs	r0, #8
   1daa2:	f000 fd7f 	bl	1e5a4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1daa6:	4622      	mov	r2, r4
   1daa8:	4631      	mov	r1, r6
   1daaa:	f105 0043 	add.w	r0, r5, #67	; 0x43
   1daae:	f001 f855 	bl	1eb5c <radio_ccm_rx_pkt_set>
}
   1dab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1dab6:	f000 bd9d 	b.w	1e5f4 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   1daba:	2008      	movs	r0, #8
   1dabc:	f000 fd72 	bl	1e5a4 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1dac0:	4620      	mov	r0, r4
}
   1dac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1dac6:	f000 bd95 	b.w	1e5f4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1daca:	4a07      	ldr	r2, [pc, #28]	; (1dae8 <lll_conn_rx_pkt_set+0x80>)
   1dacc:	4907      	ldr	r1, [pc, #28]	; (1daec <lll_conn_rx_pkt_set+0x84>)
   1dace:	4808      	ldr	r0, [pc, #32]	; (1daf0 <lll_conn_rx_pkt_set+0x88>)
   1dad0:	f240 235a 	movw	r3, #602	; 0x25a
   1dad4:	f008 f816 	bl	25b04 <printk>
   1dad8:	4040      	eors	r0, r0
   1dada:	f380 8811 	msr	BASEPRI, r0
   1dade:	f04f 0003 	mov.w	r0, #3
   1dae2:	df02      	svc	2
   1dae4:	e7c7      	b.n	1da76 <lll_conn_rx_pkt_set+0xe>
   1dae6:	bf00      	nop
   1dae8:	0002d73c 	.word	0x0002d73c
   1daec:	0002d688 	.word	0x0002d688
   1daf0:	0002c8dc 	.word	0x0002c8dc

0001daf4 <lll_conn_isr_tx>:
{
   1daf4:	b538      	push	{r3, r4, r5, lr}
   1daf6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1daf8:	f7fe fd3c 	bl	1c574 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1dafc:	2096      	movs	r0, #150	; 0x96
   1dafe:	f000 ff27 	bl	1e950 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1db02:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   1db06:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1db0a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1db0e:	f000 0007 	and.w	r0, r0, #7
   1db12:	f002 0207 	and.w	r2, r2, #7
   1db16:	2100      	movs	r1, #0
   1db18:	f000 fe36 	bl	1e788 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1db1c:	4620      	mov	r0, r4
   1db1e:	f7ff ffa3 	bl	1da68 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1db22:	f000 fdad 	bl	1e680 <radio_is_ready>
   1db26:	bb58      	cbnz	r0, 1db80 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1db28:	f001 f812 	bl	1eb50 <radio_tmr_tifs_base_get>
   1db2c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1db2e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1db32:	2101      	movs	r1, #1
   1db34:	f000 0007 	and.w	r0, r0, #7
   1db38:	f000 fd70 	bl	1e61c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1db3c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1db40:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1db44:	4405      	add	r5, r0
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1db46:	2b02      	cmp	r3, #2
   1db48:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1db4c:	d016      	beq.n	1db7c <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1db4e:	2b04      	cmp	r3, #4
   1db50:	bf14      	ite	ne
   1db52:	2328      	movne	r3, #40	; 0x28
   1db54:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1db58:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1db5c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1db60:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1db64:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1db66:	f000 fd57 	bl	1e618 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1db6a:	1a28      	subs	r0, r5, r0
   1db6c:	f000 ffc2 	bl	1eaf4 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1db70:	4621      	mov	r1, r4
   1db72:	480a      	ldr	r0, [pc, #40]	; (1db9c <lll_conn_isr_tx+0xa8>)
}
   1db74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1db78:	f000 bc68 	b.w	1e44c <radio_isr_set>
	switch (phy) {
   1db7c:	2318      	movs	r3, #24
   1db7e:	e7eb      	b.n	1db58 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1db80:	4a07      	ldr	r2, [pc, #28]	; (1dba0 <lll_conn_isr_tx+0xac>)
   1db82:	4908      	ldr	r1, [pc, #32]	; (1dba4 <lll_conn_isr_tx+0xb0>)
   1db84:	4808      	ldr	r0, [pc, #32]	; (1dba8 <lll_conn_isr_tx+0xb4>)
   1db86:	f240 2313 	movw	r3, #531	; 0x213
   1db8a:	f007 ffbb 	bl	25b04 <printk>
   1db8e:	4040      	eors	r0, r0
   1db90:	f380 8811 	msr	BASEPRI, r0
   1db94:	f04f 0003 	mov.w	r0, #3
   1db98:	df02      	svc	2
   1db9a:	e7c5      	b.n	1db28 <lll_conn_isr_tx+0x34>
   1db9c:	0001dce5 	.word	0x0001dce5
   1dba0:	0002d73c 	.word	0x0002d73c
   1dba4:	0002d690 	.word	0x0002d690
   1dba8:	0002c8dc 	.word	0x0002c8dc

0001dbac <lll_conn_tx_pkt_set>:
{
   1dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dbae:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1dbb0:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   1dbb4:	8c46      	ldrh	r6, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   1dbb6:	f001 0407 	and.w	r4, r1, #7
{
   1dbba:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1dbbc:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1dbc0:	4620      	mov	r0, r4
   1dbc2:	f000 fca9 	bl	1e518 <radio_phy_set>
	} else if (lll->enc_tx) {
   1dbc6:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1dbca:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1dbcc:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1dbce:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1dbd2:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   1dbd4:	d50d      	bpl.n	1dbf2 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1dbd6:	3104      	adds	r1, #4
   1dbd8:	b2c9      	uxtb	r1, r1
   1dbda:	2008      	movs	r0, #8
   1dbdc:	f000 fce2 	bl	1e5a4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1dbe0:	4639      	mov	r1, r7
   1dbe2:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1dbe6:	f000 fff7 	bl	1ebd8 <radio_ccm_tx_pkt_set>
}
   1dbea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1dbee:	f000 bd07 	b.w	1e600 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1dbf2:	2008      	movs	r0, #8
   1dbf4:	f000 fcd6 	bl	1e5a4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1dbf8:	4638      	mov	r0, r7
}
   1dbfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1dbfe:	f000 bcff 	b.w	1e600 <radio_pkt_tx_set>
   1dc02:	bf00      	nop

0001dc04 <lll_conn_pdu_tx_prep>:
{
   1dc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dc08:	4604      	mov	r4, r0
   1dc0a:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1dc0c:	aa01      	add	r2, sp, #4
   1dc0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1dc10:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1dc12:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1dc14:	f7f4 fb84 	bl	12320 <memq_peek>
	if (lll->empty || !link) {
   1dc18:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dc1c:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1dc1e:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1dc20:	d432      	bmi.n	1dc88 <lll_conn_pdu_tx_prep+0x84>
   1dc22:	2800      	cmp	r0, #0
   1dc24:	d04e      	beq.n	1dcc4 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1dc26:	9b01      	ldr	r3, [sp, #4]
   1dc28:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
   1dc2c:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1dc30:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1dc34:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1dc38:	b913      	cbnz	r3, 1dc40 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1dc3a:	786b      	ldrb	r3, [r5, #1]
   1dc3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   1dc40:	b137      	cbz	r7, 1dc50 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1dc42:	f818 2007 	ldrb.w	r2, [r8, r7]
   1dc46:	2101      	movs	r1, #1
   1dc48:	f361 0201 	bfi	r2, r1, #0, #2
   1dc4c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1dc50:	1bdb      	subs	r3, r3, r7
   1dc52:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1dc54:	4620      	mov	r0, r4
   1dc56:	f7fc fb73 	bl	1a340 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1dc5a:	786b      	ldrb	r3, [r5, #1]
   1dc5c:	4283      	cmp	r3, r0
   1dc5e:	d924      	bls.n	1dcaa <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1dc60:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1dc62:	f818 3007 	ldrb.w	r3, [r8, r7]
   1dc66:	f043 0310 	orr.w	r3, r3, #16
   1dc6a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1dc6e:	f818 3007 	ldrb.w	r3, [r8, r7]
   1dc72:	f36f 1347 	bfc	r3, #5, #3
   1dc76:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1dc7a:	2300      	movs	r3, #0
   1dc7c:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1dc7e:	f8c9 5000 	str.w	r5, [r9]
}
   1dc82:	b003      	add	sp, #12
   1dc84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1dc88:	f043 0304 	orr.w	r3, r3, #4
   1dc8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1dc90:	f000 fd2a 	bl	1e6e8 <radio_pkt_empty_get>
   1dc94:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1dc96:	b1e6      	cbz	r6, 1dcd2 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1dc98:	7803      	ldrb	r3, [r0, #0]
   1dc9a:	f043 0310 	orr.w	r3, r3, #16
   1dc9e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1dca0:	f8c9 5000 	str.w	r5, [r9]
}
   1dca4:	b003      	add	sp, #12
   1dca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1dcaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dcac:	6832      	ldr	r2, [r6, #0]
   1dcae:	429a      	cmp	r2, r3
			p->md = 1U;
   1dcb0:	f818 3007 	ldrb.w	r3, [r8, r7]
   1dcb4:	bf14      	ite	ne
   1dcb6:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1dcba:	f36f 1304 	bfceq	r3, #4, #1
   1dcbe:	f808 3007 	strb.w	r3, [r8, r7]
   1dcc2:	e7d4      	b.n	1dc6e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1dcc4:	f043 0304 	orr.w	r3, r3, #4
   1dcc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1dccc:	f000 fd0c 	bl	1e6e8 <radio_pkt_empty_get>
   1dcd0:	4605      	mov	r5, r0
			p->md = 0U;
   1dcd2:	782b      	ldrb	r3, [r5, #0]
   1dcd4:	f36f 1304 	bfc	r3, #4, #1
   1dcd8:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1dcda:	f8c9 5000 	str.w	r5, [r9]
}
   1dcde:	b003      	add	sp, #12
   1dce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001dce4 <lll_conn_isr_rx>:
{
   1dce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dce8:	b083      	sub	sp, #12
   1dcea:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1dcec:	f000 fcd2 	bl	1e694 <radio_is_done>
	if (trx_done) {
   1dcf0:	b2c0      	uxtb	r0, r0
   1dcf2:	b950      	cbnz	r0, 1dd0a <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   1dcf4:	f7fe fc46 	bl	1c584 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1dcf8:	48b6      	ldr	r0, [pc, #728]	; (1dfd4 <lll_conn_isr_rx+0x2f0>)
   1dcfa:	4621      	mov	r1, r4
   1dcfc:	f000 fba6 	bl	1e44c <radio_isr_set>
}
   1dd00:	b003      	add	sp, #12
   1dd02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   1dd06:	f000 bc9b 	b.w	1e640 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1dd0a:	f000 fce3 	bl	1e6d4 <radio_crc_is_valid>
   1dd0e:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1dd10:	f000 fdc2 	bl	1e898 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1dd14:	f7fe fc36 	bl	1c584 <lll_isr_rx_status_reset>
	trx_cnt++;
   1dd18:	4aaf      	ldr	r2, [pc, #700]	; (1dfd8 <lll_conn_isr_rx+0x2f4>)
   1dd1a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dd1c:	2001      	movs	r0, #1
	trx_cnt++;
   1dd1e:	4403      	add	r3, r0
   1dd20:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dd22:	f7f8 fb6b 	bl	163fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dd26:	4606      	mov	r6, r0
   1dd28:	2800      	cmp	r0, #0
   1dd2a:	f000 80ce 	beq.w	1deca <lll_conn_isr_rx+0x1e6>
	if (crc_ok) {
   1dd2e:	2d00      	cmp	r5, #0
   1dd30:	d148      	bne.n	1ddc4 <lll_conn_isr_rx+0xe0>
		if (crc_expire == 0U) {
   1dd32:	4baa      	ldr	r3, [pc, #680]	; (1dfdc <lll_conn_isr_rx+0x2f8>)
   1dd34:	781f      	ldrb	r7, [r3, #0]
   1dd36:	2f00      	cmp	r7, #0
   1dd38:	f000 80b1 	beq.w	1de9e <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   1dd3c:	3f01      	subs	r7, #1
   1dd3e:	b2ff      	uxtb	r7, r7
   1dd40:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1dd42:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1dd46:	a901      	add	r1, sp, #4
   1dd48:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1dd4a:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1dd4e:	f7ff ff59 	bl	1dc04 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1dd52:	2f00      	cmp	r7, #0
   1dd54:	f040 813c 	bne.w	1dfd0 <lll_conn_isr_rx+0x2ec>
		radio_isr_set(isr_done, param);
   1dd58:	489e      	ldr	r0, [pc, #632]	; (1dfd4 <lll_conn_isr_rx+0x2f0>)
   1dd5a:	4621      	mov	r1, r4
   1dd5c:	f000 fb76 	bl	1e44c <radio_isr_set>
		} else if (!lll->role) {
   1dd60:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1dd64:	2b00      	cmp	r3, #0
   1dd66:	f280 8104 	bge.w	1df72 <lll_conn_isr_rx+0x28e>
	pdu_data_tx->sn = lll->sn;
   1dd6a:	9901      	ldr	r1, [sp, #4]
   1dd6c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	pdu_data_tx->nesn = lll->nesn;
   1dd70:	780b      	ldrb	r3, [r1, #0]
   1dd72:	f023 000c 	bic.w	r0, r3, #12
   1dd76:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1dd7a:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1dd7c:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1dd80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1dd84:	4303      	orrs	r3, r0
   1dd86:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1dd88:	4620      	mov	r0, r4
   1dd8a:	f7ff ff0f 	bl	1dbac <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1dd8e:	f000 fc77 	bl	1e680 <radio_is_ready>
   1dd92:	2800      	cmp	r0, #0
   1dd94:	f040 80d0 	bne.w	1df38 <lll_conn_isr_rx+0x254>
	if (!radio_tmr_aa_restore()) {
   1dd98:	f000 fec6 	bl	1eb28 <radio_tmr_aa_restore>
   1dd9c:	2800      	cmp	r0, #0
   1dd9e:	d06b      	beq.n	1de78 <lll_conn_isr_rx+0x194>
	if (tx_release) {
   1dda0:	2d00      	cmp	r5, #0
   1dda2:	d06f      	beq.n	1de84 <lll_conn_isr_rx+0x1a0>
		LL_ASSERT(lll->handle != 0xFFFF);
   1dda4:	89a0      	ldrh	r0, [r4, #12]
   1dda6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ddaa:	4298      	cmp	r0, r3
   1ddac:	f000 80d2 	beq.w	1df54 <lll_conn_isr_rx+0x270>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1ddb0:	4629      	mov	r1, r5
   1ddb2:	f7fc f8d5 	bl	19f60 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1ddb6:	2f00      	cmp	r7, #0
   1ddb8:	d166      	bne.n	1de88 <lll_conn_isr_rx+0x1a4>
		ull_rx_sched();
   1ddba:	f7f8 fb63 	bl	16484 <ull_rx_sched>
}
   1ddbe:	b003      	add	sp, #12
   1ddc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   1ddc4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1ddc8:	7f32      	ldrb	r2, [r6, #28]
   1ddca:	f003 0101 	and.w	r1, r3, #1
   1ddce:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1ddd2:	4288      	cmp	r0, r1
   1ddd4:	f000 8089 	beq.w	1deea <lll_conn_isr_rx+0x206>
		lll->sn++;
   1ddd8:	f081 0101 	eor.w	r1, r1, #1
   1dddc:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1dde0:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   1dde4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   1dde8:	b2da      	uxtb	r2, r3
   1ddea:	f040 80cf 	bne.w	1df8c <lll_conn_isr_rx+0x2a8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1ddee:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   1ddf2:	aa01      	add	r2, sp, #4
   1ddf4:	f7f4 fa94 	bl	12320 <memq_peek>
		if (link) {
   1ddf8:	4605      	mov	r5, r0
   1ddfa:	2800      	cmp	r0, #0
   1ddfc:	f000 80dd 	beq.w	1dfba <lll_conn_isr_rx+0x2d6>
			pdu_data_tx = (void *)(tx->pdu +
   1de00:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1de02:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   1de06:	3704      	adds	r7, #4
   1de08:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   1de0c:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1de0e:	b152      	cbz	r2, 1de26 <lll_conn_isr_rx+0x142>
				if (lll->enc_tx) {
   1de10:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1de14:	06d9      	lsls	r1, r3, #27
   1de16:	d506      	bpl.n	1de26 <lll_conn_isr_rx+0x142>
					lll->ccm_tx.counter++;
   1de18:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1de1a:	3301      	adds	r3, #1
   1de1c:	6763      	str	r3, [r4, #116]	; 0x74
   1de1e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1de20:	f143 0300 	adc.w	r3, r3, #0
   1de24:	67a3      	str	r3, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   1de26:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1de2a:	444a      	add	r2, r9
   1de2c:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1de2e:	429a      	cmp	r2, r3
   1de30:	f0c0 80ca 	bcc.w	1dfc8 <lll_conn_isr_rx+0x2e4>
			} else if (offset == lll->packet_tx_head_len) {
   1de34:	f000 810b 	beq.w	1e04e <lll_conn_isr_rx+0x36a>
				LL_ASSERT(0);
   1de38:	4a69      	ldr	r2, [pc, #420]	; (1dfe0 <lll_conn_isr_rx+0x2fc>)
   1de3a:	496a      	ldr	r1, [pc, #424]	; (1dfe4 <lll_conn_isr_rx+0x300>)
   1de3c:	486a      	ldr	r0, [pc, #424]	; (1dfe8 <lll_conn_isr_rx+0x304>)
   1de3e:	f240 33a3 	movw	r3, #931	; 0x3a3
   1de42:	f007 fe5f 	bl	25b04 <printk>
   1de46:	4040      	eors	r0, r0
   1de48:	f380 8811 	msr	BASEPRI, r0
   1de4c:	f04f 0003 	mov.w	r0, #3
   1de50:	df02      	svc	2
	tx_release = NULL;
   1de52:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1de54:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1de58:	2b00      	cmp	r3, #0
   1de5a:	f2c0 80f4 	blt.w	1e046 <lll_conn_isr_rx+0x362>
			    !pdu_data_rx->md) {
   1de5e:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1de60:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1de62:	bf58      	it	pl
   1de64:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   1de68:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1de6c:	bf5c      	itt	pl
   1de6e:	f088 0810 	eorpl.w	r8, r8, #16
   1de72:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1de76:	e03b      	b.n	1def0 <lll_conn_isr_rx+0x20c>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1de78:	f000 fe4a 	bl	1eb10 <radio_tmr_aa_get>
   1de7c:	f000 fe4e 	bl	1eb1c <radio_tmr_aa_save>
	if (tx_release) {
   1de80:	2d00      	cmp	r5, #0
   1de82:	d18f      	bne.n	1dda4 <lll_conn_isr_rx+0xc0>
	if (is_rx_enqueue) {
   1de84:	2f00      	cmp	r7, #0
   1de86:	d09a      	beq.n	1ddbe <lll_conn_isr_rx+0xda>
		ull_pdu_rx_alloc();
   1de88:	f7f8 fad6 	bl	16438 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1de8c:	2303      	movs	r3, #3
   1de8e:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1de90:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1de92:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1de94:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1de96:	4631      	mov	r1, r6
   1de98:	f7f8 fae4 	bl	16464 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   1de9c:	e78d      	b.n	1ddba <lll_conn_isr_rx+0xd6>
		crc_expire--;
   1de9e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1dea0:	a901      	add	r1, sp, #4
   1dea2:	4620      	mov	r0, r4
		crc_expire--;
   1dea4:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1dea6:	f7ff fead 	bl	1dc04 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1deaa:	2096      	movs	r0, #150	; 0x96
   1deac:	f000 fd50 	bl	1e950 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1deb0:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1deb4:	f000 0007 	and.w	r0, r0, #7
   1deb8:	f000 fc1e 	bl	1e6f8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1debc:	484b      	ldr	r0, [pc, #300]	; (1dfec <lll_conn_isr_rx+0x308>)
   1debe:	4621      	mov	r1, r4
   1dec0:	f000 fac4 	bl	1e44c <radio_isr_set>
		radio_tmr_end_capture();
   1dec4:	f000 fe36 	bl	1eb34 <radio_tmr_end_capture>
   1dec8:	e74f      	b.n	1dd6a <lll_conn_isr_rx+0x86>
	LL_ASSERT(node_rx);
   1deca:	4a45      	ldr	r2, [pc, #276]	; (1dfe0 <lll_conn_isr_rx+0x2fc>)
   1decc:	4948      	ldr	r1, [pc, #288]	; (1dff0 <lll_conn_isr_rx+0x30c>)
   1dece:	4846      	ldr	r0, [pc, #280]	; (1dfe8 <lll_conn_isr_rx+0x304>)
   1ded0:	23f2      	movs	r3, #242	; 0xf2
   1ded2:	f007 fe17 	bl	25b04 <printk>
   1ded6:	4040      	eors	r0, r0
   1ded8:	f380 8811 	msr	BASEPRI, r0
   1dedc:	f04f 0003 	mov.w	r0, #3
   1dee0:	df02      	svc	2
	if (crc_ok) {
   1dee2:	2d00      	cmp	r5, #0
   1dee4:	f43f af25 	beq.w	1dd32 <lll_conn_isr_rx+0x4e>
   1dee8:	e76c      	b.n	1ddc4 <lll_conn_isr_rx+0xe0>
	is_done = 0U;
   1deea:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1deee:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1def0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1def4:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1def8:	428a      	cmp	r2, r1
   1defa:	f000 8081 	beq.w	1e000 <lll_conn_isr_rx+0x31c>
	is_rx_enqueue = 0U;
   1defe:	2700      	movs	r7, #0
		crc_expire = 0U;
   1df00:	4a36      	ldr	r2, [pc, #216]	; (1dfdc <lll_conn_isr_rx+0x2f8>)
   1df02:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1df04:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1df08:	4b3a      	ldr	r3, [pc, #232]	; (1dff4 <lll_conn_isr_rx+0x310>)
		crc_expire = 0U;
   1df0a:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1df0c:	4620      	mov	r0, r4
		crc_valid = 1U;
   1df0e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1df10:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1df12:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1df14:	f7ff fe76 	bl	1dc04 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1df18:	f1b8 0f00 	cmp.w	r8, #0
   1df1c:	f47f af1c 	bne.w	1dd58 <lll_conn_isr_rx+0x74>
   1df20:	7f33      	ldrb	r3, [r6, #28]
   1df22:	06d9      	lsls	r1, r3, #27
   1df24:	d4c1      	bmi.n	1deaa <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1df26:	9b01      	ldr	r3, [sp, #4]
   1df28:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1df2a:	06d2      	lsls	r2, r2, #27
   1df2c:	d4bd      	bmi.n	1deaa <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1df2e:	785b      	ldrb	r3, [r3, #1]
   1df30:	2b00      	cmp	r3, #0
   1df32:	f43f af11 	beq.w	1dd58 <lll_conn_isr_rx+0x74>
   1df36:	e7b8      	b.n	1deaa <lll_conn_isr_rx+0x1c6>
	LL_ASSERT(!radio_is_ready());
   1df38:	4a29      	ldr	r2, [pc, #164]	; (1dfe0 <lll_conn_isr_rx+0x2fc>)
   1df3a:	492f      	ldr	r1, [pc, #188]	; (1dff8 <lll_conn_isr_rx+0x314>)
   1df3c:	482a      	ldr	r0, [pc, #168]	; (1dfe8 <lll_conn_isr_rx+0x304>)
   1df3e:	f240 1369 	movw	r3, #361	; 0x169
   1df42:	f007 fddf 	bl	25b04 <printk>
   1df46:	4040      	eors	r0, r0
   1df48:	f380 8811 	msr	BASEPRI, r0
   1df4c:	f04f 0003 	mov.w	r0, #3
   1df50:	df02      	svc	2
   1df52:	e721      	b.n	1dd98 <lll_conn_isr_rx+0xb4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1df54:	4a22      	ldr	r2, [pc, #136]	; (1dfe0 <lll_conn_isr_rx+0x2fc>)
   1df56:	4929      	ldr	r1, [pc, #164]	; (1dffc <lll_conn_isr_rx+0x318>)
   1df58:	4823      	ldr	r0, [pc, #140]	; (1dfe8 <lll_conn_isr_rx+0x304>)
   1df5a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1df5e:	f007 fdd1 	bl	25b04 <printk>
   1df62:	4040      	eors	r0, r0
   1df64:	f380 8811 	msr	BASEPRI, r0
   1df68:	f04f 0003 	mov.w	r0, #3
   1df6c:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1df6e:	89a0      	ldrh	r0, [r4, #12]
   1df70:	e71e      	b.n	1ddb0 <lll_conn_isr_rx+0xcc>
			radio_disable();
   1df72:	f000 fb65 	bl	1e640 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1df76:	f000 fb83 	bl	1e680 <radio_is_ready>
   1df7a:	2800      	cmp	r0, #0
   1df7c:	d155      	bne.n	1e02a <lll_conn_isr_rx+0x346>
			lll->empty = is_empty_pdu_tx_retry;
   1df7e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1df82:	f369 0382 	bfi	r3, r9, #2, #1
   1df86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   1df8a:	e705      	b.n	1dd98 <lll_conn_isr_rx+0xb4>
			lll->empty = 0;
   1df8c:	f36f 0282 	bfc	r2, #2, #1
   1df90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1df94:	f000 fba8 	bl	1e6e8 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1df98:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1df9c:	2b00      	cmp	r3, #0
   1df9e:	db0c      	blt.n	1dfba <lll_conn_isr_rx+0x2d6>
			    !pdu_data_rx->md) {
   1dfa0:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1dfa2:	f012 0510 	ands.w	r5, r2, #16
   1dfa6:	d109      	bne.n	1dfbc <lll_conn_isr_rx+0x2d8>
				*is_done = !pdu_data_tx->md;
   1dfa8:	f890 8000 	ldrb.w	r8, [r0]
   1dfac:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dfb0:	f088 0810 	eor.w	r8, r8, #16
   1dfb4:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1dfb8:	e79a      	b.n	1def0 <lll_conn_isr_rx+0x20c>
   1dfba:	7f32      	ldrb	r2, [r6, #28]
   1dfbc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   1dfc0:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1dfc4:	4645      	mov	r5, r8
   1dfc6:	e793      	b.n	1def0 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_offset = offset;
   1dfc8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   1dfcc:	2500      	movs	r5, #0
   1dfce:	e741      	b.n	1de54 <lll_conn_isr_rx+0x170>
	is_rx_enqueue = 0U;
   1dfd0:	462f      	mov	r7, r5
   1dfd2:	e76a      	b.n	1deaa <lll_conn_isr_rx+0x1c6>
   1dfd4:	0001d955 	.word	0x0001d955
   1dfd8:	20005eaa 	.word	0x20005eaa
   1dfdc:	20005fea 	.word	0x20005fea
   1dfe0:	0002d73c 	.word	0x0002d73c
   1dfe4:	0002c97c 	.word	0x0002c97c
   1dfe8:	0002c8dc 	.word	0x0002c8dc
   1dfec:	0001daf5 	.word	0x0001daf5
   1dff0:	0002d688 	.word	0x0002d688
   1dff4:	20005feb 	.word	0x20005feb
   1dff8:	0002d690 	.word	0x0002d690
   1dffc:	0002d794 	.word	0x0002d794
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1e000:	2003      	movs	r0, #3
   1e002:	f7f8 f9fb 	bl	163fc <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1e006:	b168      	cbz	r0, 1e024 <lll_conn_isr_rx+0x340>
		lll->nesn++;
   1e008:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e00c:	f083 0302 	eor.w	r3, r3, #2
   1e010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   1e014:	7f73      	ldrb	r3, [r6, #29]
   1e016:	b12b      	cbz	r3, 1e024 <lll_conn_isr_rx+0x340>
			if (lll->enc_rx) {
   1e018:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e01c:	0718      	lsls	r0, r3, #28
   1e01e:	d424      	bmi.n	1e06a <lll_conn_isr_rx+0x386>
			*is_rx_enqueue = 1U;
   1e020:	2701      	movs	r7, #1
   1e022:	e76d      	b.n	1df00 <lll_conn_isr_rx+0x21c>
   1e024:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e028:	e769      	b.n	1defe <lll_conn_isr_rx+0x21a>
			LL_ASSERT(!radio_is_ready());
   1e02a:	4a37      	ldr	r2, [pc, #220]	; (1e108 <lll_conn_isr_rx+0x424>)
   1e02c:	4937      	ldr	r1, [pc, #220]	; (1e10c <lll_conn_isr_rx+0x428>)
   1e02e:	4838      	ldr	r0, [pc, #224]	; (1e110 <lll_conn_isr_rx+0x42c>)
   1e030:	f44f 7398 	mov.w	r3, #304	; 0x130
   1e034:	f007 fd66 	bl	25b04 <printk>
   1e038:	4040      	eors	r0, r0
   1e03a:	f380 8811 	msr	BASEPRI, r0
   1e03e:	f04f 0003 	mov.w	r0, #3
   1e042:	df02      	svc	2
   1e044:	e79b      	b.n	1df7e <lll_conn_isr_rx+0x29a>
   1e046:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e04a:	7f32      	ldrb	r2, [r6, #28]
   1e04c:	e750      	b.n	1def0 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_len = 0;
   1e04e:	2200      	movs	r2, #0
   1e050:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   1e054:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1e056:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1e05a:	f7f4 f969 	bl	12330 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1e05e:	9b01      	ldr	r3, [sp, #4]
   1e060:	681a      	ldr	r2, [r3, #0]
   1e062:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1e064:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1e066:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   1e068:	e6f4      	b.n	1de54 <lll_conn_isr_rx+0x170>
				done = radio_ccm_is_done();
   1e06a:	f000 fddd 	bl	1ec28 <radio_ccm_is_done>
				LL_ASSERT(done);
   1e06e:	2800      	cmp	r0, #0
   1e070:	d03b      	beq.n	1e0ea <lll_conn_isr_rx+0x406>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1e072:	f000 fdfb 	bl	1ec6c <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1e076:	bb30      	cbnz	r0, 1e0c6 <lll_conn_isr_rx+0x3e2>
				    lll->ccm_rx.counter == 0 &&
   1e078:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   1e07c:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   1e080:	4313      	orrs	r3, r2
   1e082:	d104      	bne.n	1e08e <lll_conn_isr_rx+0x3aa>
				    (pdu_data_rx->ll_id ==
   1e084:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1e086:	f003 0303 	and.w	r3, r3, #3
   1e08a:	2b03      	cmp	r3, #3
   1e08c:	d004      	beq.n	1e098 <lll_conn_isr_rx+0x3b4>
					mic_state = LLL_CONN_MIC_FAIL;
   1e08e:	4b21      	ldr	r3, [pc, #132]	; (1e114 <lll_conn_isr_rx+0x430>)
   1e090:	2202      	movs	r2, #2
   1e092:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1e094:	2700      	movs	r7, #0
   1e096:	e67f      	b.n	1dd98 <lll_conn_isr_rx+0xb4>
						radio_pkt_scratch_get();
   1e098:	f000 fb2a 	bl	1e6f0 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1e09c:	7843      	ldrb	r3, [r0, #1]
   1e09e:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1e0a0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1e0a2:	d8f4      	bhi.n	1e08e <lll_conn_isr_rx+0x3aa>
						memcpy(pdu_data_rx,
   1e0a4:	3303      	adds	r3, #3
   1e0a6:	b2da      	uxtb	r2, r3
   1e0a8:	f106 001c 	add.w	r0, r6, #28
   1e0ac:	f00a fb80 	bl	287b0 <memcpy>
						lll->ccm_rx.counter--;
   1e0b0:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1e0b4:	3b01      	subs	r3, #1
   1e0b6:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1e0ba:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1e0be:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1e0c2:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   1e0c6:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1e0ca:	3301      	adds	r3, #1
   1e0cc:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1e0d0:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
						lll->ccm_rx.counter--;
   1e0d4:	f104 0253 	add.w	r2, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   1e0d8:	f143 0300 	adc.w	r3, r3, #0
   1e0dc:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1e0de:	4b0d      	ldr	r3, [pc, #52]	; (1e114 <lll_conn_isr_rx+0x430>)
   1e0e0:	2701      	movs	r7, #1
   1e0e2:	701f      	strb	r7, [r3, #0]
		if (err) {
   1e0e4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e0e8:	e70a      	b.n	1df00 <lll_conn_isr_rx+0x21c>
				LL_ASSERT(done);
   1e0ea:	4a07      	ldr	r2, [pc, #28]	; (1e108 <lll_conn_isr_rx+0x424>)
   1e0ec:	490a      	ldr	r1, [pc, #40]	; (1e118 <lll_conn_isr_rx+0x434>)
   1e0ee:	4808      	ldr	r0, [pc, #32]	; (1e110 <lll_conn_isr_rx+0x42c>)
   1e0f0:	f240 33be 	movw	r3, #958	; 0x3be
   1e0f4:	f007 fd06 	bl	25b04 <printk>
   1e0f8:	4040      	eors	r0, r0
   1e0fa:	f380 8811 	msr	BASEPRI, r0
   1e0fe:	f04f 0003 	mov.w	r0, #3
   1e102:	df02      	svc	2
   1e104:	e7b5      	b.n	1e072 <lll_conn_isr_rx+0x38e>
   1e106:	bf00      	nop
   1e108:	0002d73c 	.word	0x0002d73c
   1e10c:	0002d690 	.word	0x0002d690
   1e110:	0002c8dc 	.word	0x0002c8dc
   1e114:	20005fec 	.word	0x20005fec
   1e118:	0002d78c 	.word	0x0002d78c

0001e11c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1e11e:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1e120:	89a2      	ldrh	r2, [r4, #12]
   1e122:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e126:	429a      	cmp	r2, r3
{
   1e128:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1e12a:	f000 8091 	beq.w	1e250 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1e12e:	4605      	mov	r5, r0
   1e130:	f7ff fc56 	bl	1d9e0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e134:	892b      	ldrh	r3, [r5, #8]
   1e136:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1e138:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e13a:	441a      	add	r2, r3
   1e13c:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1e13e:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1e140:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e142:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1e144:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1e146:	1c41      	adds	r1, r0, #1
   1e148:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1e14a:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1e14c:	f04f 0100 	mov.w	r1, #0
   1e150:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1e152:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1e156:	d45f      	bmi.n	1e218 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1e158:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1e15c:	460b      	mov	r3, r1
   1e15e:	7fa1      	ldrb	r1, [r4, #30]
   1e160:	9000      	str	r0, [sp, #0]
   1e162:	f104 001f 	add.w	r0, r4, #31
   1e166:	f7fc fca9 	bl	1aabc <lll_chan_sel_1>
   1e16a:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e16c:	4620      	mov	r0, r4
   1e16e:	a903      	add	r1, sp, #12
   1e170:	f7ff fd48 	bl	1dc04 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1e174:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   1e178:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1e17a:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1e17e:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1e180:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1e184:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1e188:	780a      	ldrb	r2, [r1, #0]
   1e18a:	f022 020c 	bic.w	r2, r2, #12
   1e18e:	4313      	orrs	r3, r2
   1e190:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1e192:	f000 f99d 	bl	1e4d0 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e196:	2000      	movs	r0, #0
   1e198:	f000 f9ce 	bl	1e538 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1e19c:	1d20      	adds	r0, r4, #4
   1e19e:	f000 f9e9 	bl	1e574 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1e1a2:	8923      	ldrh	r3, [r4, #8]
   1e1a4:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1e1a6:	f240 605b 	movw	r0, #1627	; 0x65b
   1e1aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1e1ae:	f000 fa85 	bl	1e6bc <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1e1b2:	4630      	mov	r0, r6
   1e1b4:	f7fe f99a 	bl	1c4ec <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1e1b8:	9903      	ldr	r1, [sp, #12]
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	f7ff fcf6 	bl	1dbac <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1e1c0:	4621      	mov	r1, r4
   1e1c2:	4828      	ldr	r0, [pc, #160]	; (1e264 <prepare_cb+0x148>)
   1e1c4:	f000 f942 	bl	1e44c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1e1c8:	2096      	movs	r0, #150	; 0x96
   1e1ca:	f000 fbc1 	bl	1e950 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1e1ce:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1e1d2:	f000 0007 	and.w	r0, r0, #7
   1e1d6:	f000 fa8f 	bl	1e6f8 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1e1da:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1e1dc:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1e1de:	4638      	mov	r0, r7
   1e1e0:	f7fe f966 	bl	1c4b0 <lll_event_offset_get>
   1e1e4:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1e1e6:	686a      	ldr	r2, [r5, #4]
   1e1e8:	f106 0109 	add.w	r1, r6, #9
   1e1ec:	2001      	movs	r0, #1
   1e1ee:	f000 fbbb 	bl	1e968 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1e1f2:	f000 fc9f 	bl	1eb34 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1e1f6:	89a1      	ldrh	r1, [r4, #12]
   1e1f8:	3105      	adds	r1, #5
   1e1fa:	4632      	mov	r2, r6
   1e1fc:	b2c9      	uxtb	r1, r1
   1e1fe:	4638      	mov	r0, r7
   1e200:	f7fe f964 	bl	1c4cc <lll_preempt_calc>
   1e204:	b180      	cbz	r0, 1e228 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1e206:	4818      	ldr	r0, [pc, #96]	; (1e268 <prepare_cb+0x14c>)
   1e208:	4621      	mov	r1, r4
   1e20a:	f000 f91f 	bl	1e44c <radio_isr_set>
		radio_disable();
   1e20e:	f000 fa17 	bl	1e640 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1e212:	2000      	movs	r0, #0
   1e214:	b005      	add	sp, #20
   1e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1e218:	460a      	mov	r2, r1
   1e21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e21e:	8be1      	ldrh	r1, [r4, #30]
   1e220:	f7fc fc90 	bl	1ab44 <lll_chan_sel_2>
   1e224:	4606      	mov	r6, r0
   1e226:	e7a1      	b.n	1e16c <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   1e228:	4620      	mov	r0, r4
   1e22a:	f7fe f8db 	bl	1c3e4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1e22e:	2800      	cmp	r0, #0
   1e230:	d0ef      	beq.n	1e212 <prepare_cb+0xf6>
   1e232:	4a0e      	ldr	r2, [pc, #56]	; (1e26c <prepare_cb+0x150>)
   1e234:	490e      	ldr	r1, [pc, #56]	; (1e270 <prepare_cb+0x154>)
   1e236:	480f      	ldr	r0, [pc, #60]	; (1e274 <prepare_cb+0x158>)
   1e238:	23fd      	movs	r3, #253	; 0xfd
   1e23a:	f007 fc63 	bl	25b04 <printk>
   1e23e:	4040      	eors	r0, r0
   1e240:	f380 8811 	msr	BASEPRI, r0
   1e244:	f04f 0003 	mov.w	r0, #3
   1e248:	df02      	svc	2
}
   1e24a:	2000      	movs	r0, #0
   1e24c:	b005      	add	sp, #20
   1e24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   1e250:	4809      	ldr	r0, [pc, #36]	; (1e278 <prepare_cb+0x15c>)
   1e252:	4621      	mov	r1, r4
   1e254:	f000 f8fa 	bl	1e44c <radio_isr_set>
		radio_disable();
   1e258:	f000 f9f2 	bl	1e640 <radio_disable>
}
   1e25c:	2000      	movs	r0, #0
   1e25e:	b005      	add	sp, #20
   1e260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e262:	bf00      	nop
   1e264:	0001daf5 	.word	0x0001daf5
   1e268:	0001c621 	.word	0x0001c621
   1e26c:	0002d7c0 	.word	0x0002d7c0
   1e270:	0002cddc 	.word	0x0002cddc
   1e274:	0002c8dc 	.word	0x0002c8dc
   1e278:	0001c645 	.word	0x0001c645

0001e27c <lll_central_prepare>:
{
   1e27c:	b510      	push	{r4, lr}
   1e27e:	b082      	sub	sp, #8
   1e280:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e282:	f7fe fb2f 	bl	1c8e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e286:	2800      	cmp	r0, #0
   1e288:	db19      	blt.n	1e2be <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   1e28a:	4a13      	ldr	r2, [pc, #76]	; (1e2d8 <lll_central_prepare+0x5c>)
   1e28c:	4913      	ldr	r1, [pc, #76]	; (1e2dc <lll_central_prepare+0x60>)
   1e28e:	4814      	ldr	r0, [pc, #80]	; (1e2e0 <lll_central_prepare+0x64>)
   1e290:	9400      	str	r4, [sp, #0]
   1e292:	2300      	movs	r3, #0
   1e294:	f7f8 fbe4 	bl	16a60 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e298:	b108      	cbz	r0, 1e29e <lll_central_prepare+0x22>
   1e29a:	3077      	adds	r0, #119	; 0x77
   1e29c:	d101      	bne.n	1e2a2 <lll_central_prepare+0x26>
}
   1e29e:	b002      	add	sp, #8
   1e2a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e2a2:	4a10      	ldr	r2, [pc, #64]	; (1e2e4 <lll_central_prepare+0x68>)
   1e2a4:	4910      	ldr	r1, [pc, #64]	; (1e2e8 <lll_central_prepare+0x6c>)
   1e2a6:	4811      	ldr	r0, [pc, #68]	; (1e2ec <lll_central_prepare+0x70>)
   1e2a8:	2351      	movs	r3, #81	; 0x51
   1e2aa:	f007 fc2b 	bl	25b04 <printk>
   1e2ae:	4040      	eors	r0, r0
   1e2b0:	f380 8811 	msr	BASEPRI, r0
   1e2b4:	f04f 0003 	mov.w	r0, #3
   1e2b8:	df02      	svc	2
}
   1e2ba:	b002      	add	sp, #8
   1e2bc:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1e2be:	4a09      	ldr	r2, [pc, #36]	; (1e2e4 <lll_central_prepare+0x68>)
   1e2c0:	490b      	ldr	r1, [pc, #44]	; (1e2f0 <lll_central_prepare+0x74>)
   1e2c2:	480a      	ldr	r0, [pc, #40]	; (1e2ec <lll_central_prepare+0x70>)
   1e2c4:	234c      	movs	r3, #76	; 0x4c
   1e2c6:	f007 fc1d 	bl	25b04 <printk>
   1e2ca:	4040      	eors	r0, r0
   1e2cc:	f380 8811 	msr	BASEPRI, r0
   1e2d0:	f04f 0003 	mov.w	r0, #3
   1e2d4:	df02      	svc	2
   1e2d6:	e7d8      	b.n	1e28a <lll_central_prepare+0xe>
   1e2d8:	0001e11d 	.word	0x0001e11d
   1e2dc:	0001da09 	.word	0x0001da09
   1e2e0:	0001c4a9 	.word	0x0001c4a9
   1e2e4:	0002d7c0 	.word	0x0002d7c0
   1e2e8:	0002d6b8 	.word	0x0002d6b8
   1e2ec:	0002c8dc 	.word	0x0002c8dc
   1e2f0:	0002d5dc 	.word	0x0002d5dc

0001e2f4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1e2f4:	4b05      	ldr	r3, [pc, #20]	; (1e30c <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e2f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e2fa:	2100      	movs	r1, #0
   1e2fc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1e300:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1e304:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1e308:	4770      	bx	lr
   1e30a:	bf00      	nop
   1e30c:	4000b000 	.word	0x4000b000

0001e310 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1e310:	4b05      	ldr	r3, [pc, #20]	; (1e328 <cntr_start+0x18>)
   1e312:	7818      	ldrb	r0, [r3, #0]
   1e314:	1c42      	adds	r2, r0, #1
   1e316:	701a      	strb	r2, [r3, #0]
   1e318:	b918      	cbnz	r0, 1e322 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e31a:	4b04      	ldr	r3, [pc, #16]	; (1e32c <cntr_start+0x1c>)
   1e31c:	2201      	movs	r2, #1
   1e31e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1e320:	4770      	bx	lr
		return 1;
   1e322:	2001      	movs	r0, #1
}
   1e324:	4770      	bx	lr
   1e326:	bf00      	nop
   1e328:	20005fed 	.word	0x20005fed
   1e32c:	4000b000 	.word	0x4000b000

0001e330 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1e330:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1e332:	4c0d      	ldr	r4, [pc, #52]	; (1e368 <cntr_stop+0x38>)
   1e334:	7820      	ldrb	r0, [r4, #0]
   1e336:	b148      	cbz	r0, 1e34c <cntr_stop+0x1c>

	if (--_refcount) {
   1e338:	3801      	subs	r0, #1
   1e33a:	b2c0      	uxtb	r0, r0
   1e33c:	7020      	strb	r0, [r4, #0]
   1e33e:	b918      	cbnz	r0, 1e348 <cntr_stop+0x18>
   1e340:	4b0a      	ldr	r3, [pc, #40]	; (1e36c <cntr_stop+0x3c>)
   1e342:	2201      	movs	r2, #1
   1e344:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1e346:	bd10      	pop	{r4, pc}
		return 1;
   1e348:	2001      	movs	r0, #1
}
   1e34a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1e34c:	4a08      	ldr	r2, [pc, #32]	; (1e370 <cntr_stop+0x40>)
   1e34e:	4909      	ldr	r1, [pc, #36]	; (1e374 <cntr_stop+0x44>)
   1e350:	4809      	ldr	r0, [pc, #36]	; (1e378 <cntr_stop+0x48>)
   1e352:	232d      	movs	r3, #45	; 0x2d
   1e354:	f007 fbd6 	bl	25b04 <printk>
   1e358:	4040      	eors	r0, r0
   1e35a:	f380 8811 	msr	BASEPRI, r0
   1e35e:	f04f 0003 	mov.w	r0, #3
   1e362:	df02      	svc	2
	if (--_refcount) {
   1e364:	7820      	ldrb	r0, [r4, #0]
   1e366:	e7e7      	b.n	1e338 <cntr_stop+0x8>
   1e368:	20005fed 	.word	0x20005fed
   1e36c:	4000b000 	.word	0x4000b000
   1e370:	0002d824 	.word	0x0002d824
   1e374:	0002d870 	.word	0x0002d870
   1e378:	0002c8dc 	.word	0x0002c8dc

0001e37c <cntr_cnt_get>:
     return p_reg->COUNTER;
   1e37c:	4b01      	ldr	r3, [pc, #4]	; (1e384 <cntr_cnt_get+0x8>)
   1e37e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1e382:	4770      	bx	lr
   1e384:	4000b000 	.word	0x4000b000

0001e388 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1e388:	4b02      	ldr	r3, [pc, #8]	; (1e394 <cntr_cmp_set+0xc>)
   1e38a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e38e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1e392:	4770      	bx	lr
   1e394:	4000b000 	.word	0x4000b000

0001e398 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e398:	4b12      	ldr	r3, [pc, #72]	; (1e3e4 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1e39a:	b430      	push	{r4, r5}
   1e39c:	2101      	movs	r1, #1
   1e39e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1e3a0:	2000      	movs	r0, #0
   1e3a2:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1e3a4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1e3a8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1e3ac:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1e3b0:	6019      	str	r1, [r3, #0]
}
   1e3b2:	e005      	b.n	1e3c0 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e3b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e3b8:	b932      	cbnz	r2, 1e3c8 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1e3ba:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e3be:	b11a      	cbz	r2, 1e3c8 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e3c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1e3c4:	2a00      	cmp	r2, #0
   1e3c6:	d0f5      	beq.n	1e3b4 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e3c8:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1e3ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e3ce:	2a00      	cmp	r2, #0
   1e3d0:	d1e7      	bne.n	1e3a2 <do_ecb+0xa>
   1e3d2:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1e3d6:	2d00      	cmp	r5, #0
   1e3d8:	d0e3      	beq.n	1e3a2 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1e3da:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1e3dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1e3e0:	4770      	bx	lr
   1e3e2:	bf00      	nop
   1e3e4:	4000e000 	.word	0x4000e000

0001e3e8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1e3e8:	b570      	push	{r4, r5, r6, lr}
   1e3ea:	b08c      	sub	sp, #48	; 0x30
   1e3ec:	460e      	mov	r6, r1
   1e3ee:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1e3f0:	4601      	mov	r1, r0
   1e3f2:	2210      	movs	r2, #16
   1e3f4:	4668      	mov	r0, sp
{
   1e3f6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1e3f8:	f7f3 ff60 	bl	122bc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1e3fc:	2210      	movs	r2, #16
   1e3fe:	eb0d 0002 	add.w	r0, sp, r2
   1e402:	4631      	mov	r1, r6
   1e404:	f7f3 ff5a 	bl	122bc <mem_rcopy>

	do_ecb(&ecb);
   1e408:	4668      	mov	r0, sp
   1e40a:	f7ff ffc5 	bl	1e398 <do_ecb>

	if (cipher_text_le) {
   1e40e:	b125      	cbz	r5, 1e41a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1e410:	2210      	movs	r2, #16
   1e412:	a908      	add	r1, sp, #32
   1e414:	4628      	mov	r0, r5
   1e416:	f7f3 ff51 	bl	122bc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1e41a:	b124      	cbz	r4, 1e426 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1e41c:	2210      	movs	r2, #16
   1e41e:	a908      	add	r1, sp, #32
   1e420:	4620      	mov	r0, r4
   1e422:	f00a f9c5 	bl	287b0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1e426:	b00c      	add	sp, #48	; 0x30
   1e428:	bd70      	pop	{r4, r5, r6, pc}
   1e42a:	bf00      	nop

0001e42c <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1e42c:	4b04      	ldr	r3, [pc, #16]	; (1e440 <isr_radio+0x14>)
   1e42e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1e432:	b123      	cbz	r3, 1e43e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1e434:	4a03      	ldr	r2, [pc, #12]	; (1e444 <isr_radio+0x18>)
   1e436:	4b04      	ldr	r3, [pc, #16]	; (1e448 <isr_radio+0x1c>)
   1e438:	6810      	ldr	r0, [r2, #0]
   1e43a:	681b      	ldr	r3, [r3, #0]
   1e43c:	4718      	bx	r3
}
   1e43e:	4770      	bx	lr
   1e440:	40001000 	.word	0x40001000
   1e444:	20005168 	.word	0x20005168
   1e448:	20005164 	.word	0x20005164

0001e44c <radio_isr_set>:
{
   1e44c:	b538      	push	{r3, r4, r5, lr}
   1e44e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1e450:	2001      	movs	r0, #1
{
   1e452:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1e454:	f7ed fc62 	bl	bd1c <arch_irq_disable>
	isr_cb = cb;
   1e458:	4b08      	ldr	r3, [pc, #32]	; (1e47c <radio_isr_set+0x30>)
	isr_cb_param = param;
   1e45a:	4a09      	ldr	r2, [pc, #36]	; (1e480 <radio_isr_set+0x34>)
	isr_cb = cb;
   1e45c:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e45e:	4909      	ldr	r1, [pc, #36]	; (1e484 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e460:	4b09      	ldr	r3, [pc, #36]	; (1e488 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1e462:	6015      	str	r5, [r2, #0]
   1e464:	2010      	movs	r0, #16
   1e466:	2202      	movs	r2, #2
   1e468:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1e46c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1e470:	2001      	movs	r0, #1
}
   1e472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1e476:	f7ed bc41 	b.w	bcfc <arch_irq_enable>
   1e47a:	bf00      	nop
   1e47c:	20005164 	.word	0x20005164
   1e480:	20005168 	.word	0x20005168
   1e484:	40001000 	.word	0x40001000
   1e488:	e000e100 	.word	0xe000e100

0001e48c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1e48c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1e494:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1e496:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1e49a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1e49e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1e4a2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1e4a6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1e4aa:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1e4ae:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1e4b2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1e4b6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1e4ba:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1e4be:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1e4c2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1e4c6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1e4ca:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1e4ce:	4770      	bx	lr

0001e4d0 <radio_reset>:
{
   1e4d0:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1e4d2:	2001      	movs	r0, #1
   1e4d4:	f7ed fc22 	bl	bd1c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1e4d8:	4a0d      	ldr	r2, [pc, #52]	; (1e510 <radio_reset+0x40>)
   1e4da:	2100      	movs	r1, #0
   1e4dc:	2301      	movs	r3, #1
   1e4de:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1e4e2:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1e4e6:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1e4ea:	490a      	ldr	r1, [pc, #40]	; (1e514 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1e4ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e4f0:	f023 0301 	bic.w	r3, r3, #1
   1e4f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e4f8:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1e4fc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1e500:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1e504:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1e508:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1e50c:	bd10      	pop	{r4, pc}
   1e50e:	bf00      	nop
   1e510:	40001000 	.word	0x40001000
   1e514:	4001f000 	.word	0x4001f000

0001e518 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1e518:	4b06      	ldr	r3, [pc, #24]	; (1e534 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1e51a:	2802      	cmp	r0, #2
   1e51c:	bf14      	ite	ne
   1e51e:	2203      	movne	r2, #3
   1e520:	2204      	moveq	r2, #4
   1e522:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1e526:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e52a:	f042 0201 	orr.w	r2, r2, #1
   1e52e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1e532:	4770      	bx	lr
   1e534:	40001000 	.word	0x40001000

0001e538 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1e538:	4b01      	ldr	r3, [pc, #4]	; (1e540 <radio_tx_power_set+0x8>)
   1e53a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1e53e:	4770      	bx	lr
   1e540:	40001000 	.word	0x40001000

0001e544 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1e544:	4b01      	ldr	r3, [pc, #4]	; (1e54c <radio_freq_chan_set+0x8>)
   1e546:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1e54a:	4770      	bx	lr
   1e54c:	40001000 	.word	0x40001000

0001e550 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1e550:	4b07      	ldr	r3, [pc, #28]	; (1e570 <radio_whiten_iv_set+0x20>)
   1e552:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1e556:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e55a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1e55e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1e562:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e566:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1e56a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1e56e:	4770      	bx	lr
   1e570:	40001000 	.word	0x40001000

0001e574 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1e574:	4a0a      	ldr	r2, [pc, #40]	; (1e5a0 <radio_aa_set+0x2c>)
   1e576:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1e578:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1e57a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1e57e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1e582:	78c3      	ldrb	r3, [r0, #3]
   1e584:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1e588:	7843      	ldrb	r3, [r0, #1]
   1e58a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1e58e:	7801      	ldrb	r1, [r0, #0]
   1e590:	041b      	lsls	r3, r3, #16
   1e592:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1e596:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1e59a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1e59e:	4770      	bx	lr
   1e5a0:	40001000 	.word	0x40001000

0001e5a4 <radio_pkt_configure>:
	switch (phy) {
   1e5a4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1e5a8:	2b02      	cmp	r3, #2
   1e5aa:	bf14      	ite	ne
   1e5ac:	f04f 0c00 	movne.w	ip, #0
   1e5b0:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1e5b4:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1e5b6:	bf48      	it	mi
   1e5b8:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1e5bc:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1e5c0:	4b0a      	ldr	r3, [pc, #40]	; (1e5ec <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1e5c2:	4a0b      	ldr	r2, [pc, #44]	; (1e5f0 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1e5c4:	ea40 000c 	orr.w	r0, r0, ip
   1e5c8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1e5cc:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1e5d0:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1e5d4:	4002      	ands	r2, r0
   1e5d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1e5da:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e5de:	4311      	orrs	r1, r2
   1e5e0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1e5e4:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   1e5e8:	4770      	bx	lr
   1e5ea:	bf00      	nop
   1e5ec:	40001000 	.word	0x40001000
   1e5f0:	fef80000 	.word	0xfef80000

0001e5f4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1e5f4:	4b01      	ldr	r3, [pc, #4]	; (1e5fc <radio_pkt_rx_set+0x8>)
   1e5f6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1e5fa:	4770      	bx	lr
   1e5fc:	40001000 	.word	0x40001000

0001e600 <radio_pkt_tx_set>:
   1e600:	4b01      	ldr	r3, [pc, #4]	; (1e608 <radio_pkt_tx_set+0x8>)
   1e602:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1e606:	4770      	bx	lr
   1e608:	40001000 	.word	0x40001000

0001e60c <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1e60c:	2802      	cmp	r0, #2
}
   1e60e:	bf14      	ite	ne
   1e610:	2029      	movne	r0, #41	; 0x29
   1e612:	2028      	moveq	r0, #40	; 0x28
   1e614:	4770      	bx	lr
   1e616:	bf00      	nop

0001e618 <radio_tx_chain_delay_get>:
}
   1e618:	2001      	movs	r0, #1
   1e61a:	4770      	bx	lr

0001e61c <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1e61c:	2802      	cmp	r0, #2
}
   1e61e:	bf14      	ite	ne
   1e620:	200a      	movne	r0, #10
   1e622:	2005      	moveq	r0, #5
   1e624:	4770      	bx	lr
   1e626:	bf00      	nop

0001e628 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e628:	4b01      	ldr	r3, [pc, #4]	; (1e630 <radio_rx_enable+0x8>)
   1e62a:	2201      	movs	r2, #1
   1e62c:	605a      	str	r2, [r3, #4]
}
   1e62e:	4770      	bx	lr
   1e630:	40001000 	.word	0x40001000

0001e634 <radio_tx_enable>:
   1e634:	4b01      	ldr	r3, [pc, #4]	; (1e63c <radio_tx_enable+0x8>)
   1e636:	2201      	movs	r2, #1
   1e638:	601a      	str	r2, [r3, #0]
}
   1e63a:	4770      	bx	lr
   1e63c:	40001000 	.word	0x40001000

0001e640 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1e640:	4a07      	ldr	r2, [pc, #28]	; (1e660 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1e642:	4908      	ldr	r1, [pc, #32]	; (1e664 <radio_disable+0x24>)
{
   1e644:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1e646:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1e648:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1e64c:	2000      	movs	r0, #0
   1e64e:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1e652:	6053      	str	r3, [r2, #4]
}
   1e654:	bc10      	pop	{r4}
   1e656:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1e658:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1e65c:	610b      	str	r3, [r1, #16]
}
   1e65e:	4770      	bx	lr
   1e660:	4001f000 	.word	0x4001f000
   1e664:	40001000 	.word	0x40001000

0001e668 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1e668:	4b04      	ldr	r3, [pc, #16]	; (1e67c <radio_status_reset+0x14>)
   1e66a:	2200      	movs	r2, #0
   1e66c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1e670:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1e674:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1e678:	4770      	bx	lr
   1e67a:	bf00      	nop
   1e67c:	40001000 	.word	0x40001000

0001e680 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1e680:	4b03      	ldr	r3, [pc, #12]	; (1e690 <radio_is_ready+0x10>)
   1e682:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1e686:	3800      	subs	r0, #0
   1e688:	bf18      	it	ne
   1e68a:	2001      	movne	r0, #1
   1e68c:	4770      	bx	lr
   1e68e:	bf00      	nop
   1e690:	40001000 	.word	0x40001000

0001e694 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1e694:	4b03      	ldr	r3, [pc, #12]	; (1e6a4 <radio_is_done+0x10>)
   1e696:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1e69a:	3800      	subs	r0, #0
   1e69c:	bf18      	it	ne
   1e69e:	2001      	movne	r0, #1
   1e6a0:	4770      	bx	lr
   1e6a2:	bf00      	nop
   1e6a4:	40001000 	.word	0x40001000

0001e6a8 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1e6a8:	4b03      	ldr	r3, [pc, #12]	; (1e6b8 <radio_is_idle+0x10>)
   1e6aa:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1e6ae:	fab0 f080 	clz	r0, r0
   1e6b2:	0940      	lsrs	r0, r0, #5
   1e6b4:	4770      	bx	lr
   1e6b6:	bf00      	nop
   1e6b8:	40001000 	.word	0x40001000

0001e6bc <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1e6bc:	4b04      	ldr	r3, [pc, #16]	; (1e6d0 <radio_crc_configure+0x14>)
   1e6be:	f240 1203 	movw	r2, #259	; 0x103
   1e6c2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1e6c6:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1e6ca:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1e6ce:	4770      	bx	lr
   1e6d0:	40001000 	.word	0x40001000

0001e6d4 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1e6d4:	4b03      	ldr	r3, [pc, #12]	; (1e6e4 <radio_crc_is_valid+0x10>)
   1e6d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1e6da:	3800      	subs	r0, #0
   1e6dc:	bf18      	it	ne
   1e6de:	2001      	movne	r0, #1
   1e6e0:	4770      	bx	lr
   1e6e2:	bf00      	nop
   1e6e4:	40001000 	.word	0x40001000

0001e6e8 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1e6e8:	4800      	ldr	r0, [pc, #0]	; (1e6ec <radio_pkt_empty_get+0x4>)
   1e6ea:	4770      	bx	lr
   1e6ec:	2000505c 	.word	0x2000505c

0001e6f0 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1e6f0:	4800      	ldr	r0, [pc, #0]	; (1e6f4 <radio_pkt_scratch_get+0x4>)
   1e6f2:	4770      	bx	lr
   1e6f4:	20005060 	.word	0x20005060

0001e6f8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e6f8:	4b1d      	ldr	r3, [pc, #116]	; (1e770 <radio_switch_complete_and_rx+0x78>)
{
   1e6fa:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e6fc:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e6fe:	4d1d      	ldr	r5, [pc, #116]	; (1e774 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e700:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e704:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e706:	4e1c      	ldr	r6, [pc, #112]	; (1e778 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e708:	4c1c      	ldr	r4, [pc, #112]	; (1e77c <radio_switch_complete_and_rx+0x84>)
   1e70a:	4f1d      	ldr	r7, [pc, #116]	; (1e780 <radio_switch_complete_and_rx+0x88>)
   1e70c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1e710:	f102 030c 	add.w	r3, r2, #12
   1e714:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e716:	00d0      	lsls	r0, r2, #3
   1e718:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e71a:	0091      	lsls	r1, r2, #2
   1e71c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e720:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1e724:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1e728:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e72c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e730:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1e734:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e738:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e73c:	4811      	ldr	r0, [pc, #68]	; (1e784 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e73e:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e742:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1e746:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1e74a:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1e74c:	bf8a      	itet	hi
   1e74e:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1e752:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1e754:	3b2d      	subhi	r3, #45	; 0x2d
   1e756:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1e75a:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1e75c:	4b06      	ldr	r3, [pc, #24]	; (1e778 <radio_switch_complete_and_rx+0x80>)
   1e75e:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1e762:	f002 0201 	and.w	r2, r2, #1
   1e766:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1e76a:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e76c:	bcf0      	pop	{r4, r5, r6, r7}
   1e76e:	4770      	bx	lr
   1e770:	40001000 	.word	0x40001000
   1e774:	20005fee 	.word	0x20005fee
   1e778:	4001f000 	.word	0x4001f000
   1e77c:	40009140 	.word	0x40009140
   1e780:	4000110c 	.word	0x4000110c
   1e784:	40001004 	.word	0x40001004

0001e788 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1e788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e78c:	4e28      	ldr	r6, [pc, #160]	; (1e830 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e78e:	4c29      	ldr	r4, [pc, #164]	; (1e834 <radio_switch_complete_and_tx+0xac>)
   1e790:	4f29      	ldr	r7, [pc, #164]	; (1e838 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e792:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1e83c <radio_switch_complete_and_tx+0xb4>
   1e796:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1e840 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e79a:	2303      	movs	r3, #3
   1e79c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e7a0:	7821      	ldrb	r1, [r4, #0]
   1e7a2:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1e7a6:	f101 030c 	add.w	r3, r1, #12
   1e7aa:	b2db      	uxtb	r3, r3
   1e7ac:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e7ae:	00cd      	lsls	r5, r1, #3
   1e7b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e7b4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1e7b8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e7bc:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e7c0:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e7c4:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e7c8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1e7cc:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e7d0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1e7d4:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1e7d8:	2a02      	cmp	r2, #2
   1e7da:	bf08      	it	eq
   1e7dc:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e7de:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1e7e2:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1e7e6:	f241 3588 	movw	r5, #5000	; 0x1388
   1e7ea:	2802      	cmp	r0, #2
   1e7ec:	bf08      	it	eq
   1e7ee:	462a      	moveq	r2, r5
   1e7f0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1e7f4:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   1e7f8:	4413      	add	r3, r2
   1e7fa:	4a12      	ldr	r2, [pc, #72]	; (1e844 <radio_switch_complete_and_tx+0xbc>)
   1e7fc:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1e800:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1e804:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1e808:	bf85      	ittet	hi
   1e80a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1e80c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1e810:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1e812:	1a1b      	subhi	r3, r3, r0
   1e814:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1e818:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1e81a:	4b08      	ldr	r3, [pc, #32]	; (1e83c <radio_switch_complete_and_tx+0xb4>)
   1e81c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1e820:	f001 0101 	and.w	r1, r1, #1
   1e824:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1e828:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e82e:	bf00      	nop
   1e830:	40001000 	.word	0x40001000
   1e834:	20005fee 	.word	0x20005fee
   1e838:	40009140 	.word	0x40009140
   1e83c:	4001f000 	.word	0x4001f000
   1e840:	4000110c 	.word	0x4000110c
   1e844:	10624dd3 	.word	0x10624dd3

0001e848 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1e848:	4904      	ldr	r1, [pc, #16]	; (1e85c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1e84a:	4b05      	ldr	r3, [pc, #20]	; (1e860 <radio_switch_complete_and_disable+0x18>)
   1e84c:	2003      	movs	r0, #3
   1e84e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1e852:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1e856:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e85a:	4770      	bx	lr
   1e85c:	40001000 	.word	0x40001000
   1e860:	4001f000 	.word	0x4001f000

0001e864 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   1e864:	2000      	movs	r0, #0
   1e866:	4770      	bx	lr

0001e868 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1e868:	4a03      	ldr	r2, [pc, #12]	; (1e878 <radio_rssi_measure+0x10>)
   1e86a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1e86e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1e872:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1e876:	4770      	bx	lr
   1e878:	40001000 	.word	0x40001000

0001e87c <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1e87c:	4b01      	ldr	r3, [pc, #4]	; (1e884 <radio_rssi_get+0x8>)
   1e87e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1e882:	4770      	bx	lr
   1e884:	40001000 	.word	0x40001000

0001e888 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1e888:	4b02      	ldr	r3, [pc, #8]	; (1e894 <radio_rssi_status_reset+0xc>)
   1e88a:	2200      	movs	r2, #0
   1e88c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1e890:	4770      	bx	lr
   1e892:	bf00      	nop
   1e894:	40001000 	.word	0x40001000

0001e898 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1e898:	4b03      	ldr	r3, [pc, #12]	; (1e8a8 <radio_rssi_is_ready+0x10>)
   1e89a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1e89e:	3800      	subs	r0, #0
   1e8a0:	bf18      	it	ne
   1e8a2:	2001      	movne	r0, #1
   1e8a4:	4770      	bx	lr
   1e8a6:	bf00      	nop
   1e8a8:	40001000 	.word	0x40001000

0001e8ac <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1e8ac:	b410      	push	{r4}
   1e8ae:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1e8b2:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1e8b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1e8be:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1e8c0:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1e8c4:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1e8c8:	8894      	ldrh	r4, [r2, #4]
   1e8ca:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1e8ce:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1e8d2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1e8d6:	d1ec      	bne.n	1e8b2 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1e8d8:	4b03      	ldr	r3, [pc, #12]	; (1e8e8 <radio_filter_configure+0x3c>)
}
   1e8da:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1e8dc:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1e8e0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1e8e4:	4770      	bx	lr
   1e8e6:	bf00      	nop
   1e8e8:	40001000 	.word	0x40001000

0001e8ec <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1e8ec:	4a03      	ldr	r2, [pc, #12]	; (1e8fc <radio_filter_disable+0x10>)
   1e8ee:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1e8f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e8f6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1e8fa:	4770      	bx	lr
   1e8fc:	40001000 	.word	0x40001000

0001e900 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1e900:	4b02      	ldr	r3, [pc, #8]	; (1e90c <radio_filter_status_reset+0xc>)
   1e902:	2200      	movs	r2, #0
   1e904:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1e908:	4770      	bx	lr
   1e90a:	bf00      	nop
   1e90c:	40001000 	.word	0x40001000

0001e910 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1e910:	4b03      	ldr	r3, [pc, #12]	; (1e920 <radio_filter_has_match+0x10>)
   1e912:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1e916:	3800      	subs	r0, #0
   1e918:	bf18      	it	ne
   1e91a:	2001      	movne	r0, #1
   1e91c:	4770      	bx	lr
   1e91e:	bf00      	nop
   1e920:	40001000 	.word	0x40001000

0001e924 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1e924:	4b01      	ldr	r3, [pc, #4]	; (1e92c <radio_filter_match_get+0x8>)
   1e926:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1e92a:	4770      	bx	lr
   1e92c:	40001000 	.word	0x40001000

0001e930 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e930:	4904      	ldr	r1, [pc, #16]	; (1e944 <radio_tmr_status_reset+0x14>)
   1e932:	4b05      	ldr	r3, [pc, #20]	; (1e948 <radio_tmr_status_reset+0x18>)
   1e934:	4a05      	ldr	r2, [pc, #20]	; (1e94c <radio_tmr_status_reset+0x1c>)
   1e936:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1e93a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1e93e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1e942:	4770      	bx	lr
   1e944:	4000b000 	.word	0x4000b000
   1e948:	4001f000 	.word	0x4001f000
   1e94c:	0e7000c0 	.word	0x0e7000c0

0001e950 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1e950:	4b03      	ldr	r3, [pc, #12]	; (1e960 <radio_tmr_tifs_set+0x10>)
   1e952:	4a04      	ldr	r2, [pc, #16]	; (1e964 <radio_tmr_tifs_set+0x14>)
   1e954:	781b      	ldrb	r3, [r3, #0]
   1e956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1e95a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e95e:	4770      	bx	lr
   1e960:	20005fee 	.word	0x20005fee
   1e964:	40009000 	.word	0x40009000

0001e968 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1e968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1e96c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1e970:	4d31      	ldr	r5, [pc, #196]	; (1ea38 <radio_tmr_start+0xd0>)
   1e972:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1e976:	42ab      	cmp	r3, r5
{
   1e978:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1e97a:	d906      	bls.n	1e98a <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1e97c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1e980:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1e984:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1e986:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e98a:	4b2c      	ldr	r3, [pc, #176]	; (1ea3c <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1e98c:	482c      	ldr	r0, [pc, #176]	; (1ea40 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1e98e:	4d2d      	ldr	r5, [pc, #180]	; (1ea44 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e990:	4e2d      	ldr	r6, [pc, #180]	; (1ea48 <radio_tmr_start+0xe0>)
   1e992:	2701      	movs	r7, #1
   1e994:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1e996:	2700      	movs	r7, #0
   1e998:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1e99c:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1e9a0:	2704      	movs	r7, #4
   1e9a2:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1e9a6:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1e9a8:	2702      	movs	r7, #2
   1e9aa:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1e9ae:	4a27      	ldr	r2, [pc, #156]	; (1ea4c <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1e9b0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1e9b4:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1e9b8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1e9bc:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1e9c0:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9c2:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e9c6:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1e9ca:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1e9ce:	bb64      	cbnz	r4, 1ea2a <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1e9d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1e9d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1e9d8:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1e9dc:	4b1b      	ldr	r3, [pc, #108]	; (1ea4c <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9de:	4a1c      	ldr	r2, [pc, #112]	; (1ea50 <radio_tmr_start+0xe8>)
   1e9e0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1e9e4:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1e9e6:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9e8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1ea54 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e9ec:	f8df e068 	ldr.w	lr, [pc, #104]	; 1ea58 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9f0:	f8df c068 	ldr.w	ip, [pc, #104]	; 1ea5c <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e9f4:	4f1a      	ldr	r7, [pc, #104]	; (1ea60 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9f6:	4e1b      	ldr	r6, [pc, #108]	; (1ea64 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e9f8:	4d1b      	ldr	r5, [pc, #108]	; (1ea68 <radio_tmr_start+0x100>)
   1e9fa:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1e9fc:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1ea00:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1ea04:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1ea08:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1ea0c:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ea0e:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ea12:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ea16:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ea1a:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ea1e:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ea22:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1ea26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1ea2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1ea2e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1ea32:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1ea36:	e7d1      	b.n	1e9dc <radio_tmr_start+0x74>
   1ea38:	7ff0bdbf 	.word	0x7ff0bdbf
   1ea3c:	40008000 	.word	0x40008000
   1ea40:	431bde83 	.word	0x431bde83
   1ea44:	4000b000 	.word	0x4000b000
   1ea48:	4000b148 	.word	0x4000b148
   1ea4c:	4001f000 	.word	0x4001f000
   1ea50:	40009000 	.word	0x40009000
   1ea54:	4000110c 	.word	0x4000110c
   1ea58:	4000900c 	.word	0x4000900c
   1ea5c:	40009140 	.word	0x40009140
   1ea60:	4001f004 	.word	0x4001f004
   1ea64:	40009144 	.word	0x40009144
   1ea68:	4001f00c 	.word	0x4001f00c

0001ea6c <radio_tmr_start_tick>:
   1ea6c:	4a15      	ldr	r2, [pc, #84]	; (1eac4 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1ea6e:	b430      	push	{r4, r5}
   1ea70:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   1ea72:	4c15      	ldr	r4, [pc, #84]	; (1eac8 <radio_tmr_start_tick+0x5c>)
   1ea74:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   1ea76:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1ea7a:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   1ea7c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ea80:	4b12      	ldr	r3, [pc, #72]	; (1eacc <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1ea82:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1ea86:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   1ea8a:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ea8c:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1ea90:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ea94:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1ea98:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1ea9c:	b158      	cbz	r0, 1eab6 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1ea9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1eaa2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1eaa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1eaaa:	4a08      	ldr	r2, [pc, #32]	; (1eacc <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1eaac:	2001      	movs	r0, #1
   1eaae:	bc30      	pop	{r4, r5}
   1eab0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1eab4:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1eab6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1eaba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1eabe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1eac2:	e7f2      	b.n	1eaaa <radio_tmr_start_tick+0x3e>
   1eac4:	40008000 	.word	0x40008000
   1eac8:	4000b000 	.word	0x4000b000
   1eacc:	4001f000 	.word	0x4001f000

0001ead0 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1ead0:	4b01      	ldr	r3, [pc, #4]	; (1ead8 <radio_tmr_start_get+0x8>)
   1ead2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1ead6:	4770      	bx	lr
   1ead8:	4000b000 	.word	0x4000b000

0001eadc <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eadc:	4903      	ldr	r1, [pc, #12]	; (1eaec <radio_tmr_stop+0x10>)
   1eade:	4a04      	ldr	r2, [pc, #16]	; (1eaf0 <radio_tmr_stop+0x14>)
   1eae0:	2301      	movs	r3, #1
   1eae2:	604b      	str	r3, [r1, #4]
   1eae4:	610b      	str	r3, [r1, #16]
   1eae6:	6053      	str	r3, [r2, #4]
   1eae8:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1eaea:	4770      	bx	lr
   1eaec:	40008000 	.word	0x40008000
   1eaf0:	40009000 	.word	0x40009000

0001eaf4 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1eaf4:	4904      	ldr	r1, [pc, #16]	; (1eb08 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1eaf6:	4b05      	ldr	r3, [pc, #20]	; (1eb0c <radio_tmr_hcto_configure+0x18>)
   1eaf8:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1eafc:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1eb00:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1eb04:	4770      	bx	lr
   1eb06:	bf00      	nop
   1eb08:	40008000 	.word	0x40008000
   1eb0c:	4001f000 	.word	0x4001f000

0001eb10 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1eb10:	4b01      	ldr	r3, [pc, #4]	; (1eb18 <radio_tmr_aa_get+0x8>)
   1eb12:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1eb16:	4770      	bx	lr
   1eb18:	40008000 	.word	0x40008000

0001eb1c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1eb1c:	4b01      	ldr	r3, [pc, #4]	; (1eb24 <radio_tmr_aa_save+0x8>)
   1eb1e:	6018      	str	r0, [r3, #0]
}
   1eb20:	4770      	bx	lr
   1eb22:	bf00      	nop
   1eb24:	2000516c 	.word	0x2000516c

0001eb28 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1eb28:	4b01      	ldr	r3, [pc, #4]	; (1eb30 <radio_tmr_aa_restore+0x8>)
}
   1eb2a:	6818      	ldr	r0, [r3, #0]
   1eb2c:	4770      	bx	lr
   1eb2e:	bf00      	nop
   1eb30:	2000516c 	.word	0x2000516c

0001eb34 <radio_tmr_end_capture>:
   1eb34:	4b02      	ldr	r3, [pc, #8]	; (1eb40 <radio_tmr_end_capture+0xc>)
   1eb36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1eb3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1eb3e:	4770      	bx	lr
   1eb40:	4001f000 	.word	0x4001f000

0001eb44 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1eb44:	4b01      	ldr	r3, [pc, #4]	; (1eb4c <radio_tmr_end_get+0x8>)
   1eb46:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1eb4a:	4770      	bx	lr
   1eb4c:	40008000 	.word	0x40008000

0001eb50 <radio_tmr_tifs_base_get>:
   1eb50:	4b01      	ldr	r3, [pc, #4]	; (1eb58 <radio_tmr_tifs_base_get+0x8>)
   1eb52:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1eb56:	4770      	bx	lr
   1eb58:	40008000 	.word	0x40008000

0001eb5c <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eb5c:	4b17      	ldr	r3, [pc, #92]	; (1ebbc <radio_ccm_rx_pkt_set+0x60>)
{
   1eb5e:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eb60:	2400      	movs	r4, #0
{
   1eb62:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1eb64:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1eb66:	4816      	ldr	r0, [pc, #88]	; (1ebc0 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eb68:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1eb6c:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1eb70:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1eb74:	4e13      	ldr	r6, [pc, #76]	; (1ebc4 <radio_ccm_rx_pkt_set+0x68>)
   1eb76:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1eb78:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1eb7c:	4812      	ldr	r0, [pc, #72]	; (1ebc8 <radio_ccm_rx_pkt_set+0x6c>)
   1eb7e:	2902      	cmp	r1, #2
   1eb80:	bf08      	it	eq
   1eb82:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1eb84:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1eb88:	4810      	ldr	r0, [pc, #64]	; (1ebcc <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1eb8a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1eb8e:	4910      	ldr	r1, [pc, #64]	; (1ebd0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1eb90:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1eb94:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1eb98:	4a0e      	ldr	r2, [pc, #56]	; (1ebd4 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1eb9a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1eb9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1eba2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1eba6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ebaa:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1ebae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ebb2:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ebb4:	bc70      	pop	{r4, r5, r6}
   1ebb6:	601a      	str	r2, [r3, #0]
   1ebb8:	4770      	bx	lr
   1ebba:	bf00      	nop
   1ebbc:	4000f000 	.word	0x4000f000
   1ebc0:	40001000 	.word	0x40001000
   1ebc4:	01010001 	.word	0x01010001
   1ebc8:	01000001 	.word	0x01000001
   1ebcc:	20005060 	.word	0x20005060
   1ebd0:	20004f50 	.word	0x20004f50
   1ebd4:	4001f000 	.word	0x4001f000

0001ebd8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ebd8:	4b0f      	ldr	r3, [pc, #60]	; (1ec18 <radio_ccm_tx_pkt_set+0x40>)
{
   1ebda:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ebdc:	2200      	movs	r2, #0
{
   1ebde:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ebe0:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ebe2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ebe6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1ebea:	480c      	ldr	r0, [pc, #48]	; (1ec1c <radio_ccm_tx_pkt_set+0x44>)
   1ebec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1ebf0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ebf4:	480a      	ldr	r0, [pc, #40]	; (1ec20 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1ebf6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ebfa:	4c0a      	ldr	r4, [pc, #40]	; (1ec24 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ebfc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ec00:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ec02:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ec06:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ec0a:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1ec0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ec10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1ec14:	6019      	str	r1, [r3, #0]
}
   1ec16:	4770      	bx	lr
   1ec18:	4000f000 	.word	0x4000f000
   1ec1c:	01010000 	.word	0x01010000
   1ec20:	20005060 	.word	0x20005060
   1ec24:	20004f50 	.word	0x20004f50

0001ec28 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ec28:	4a0e      	ldr	r2, [pc, #56]	; (1ec64 <radio_ccm_is_done+0x3c>)
   1ec2a:	2302      	movs	r3, #2
   1ec2c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1ec30:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1ec34:	b933      	cbnz	r3, 1ec44 <radio_ccm_is_done+0x1c>
		__WFE();
   1ec36:	bf20      	wfe
		__SEV();
   1ec38:	bf40      	sev
		__WFE();
   1ec3a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1ec3c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1ec40:	2b00      	cmp	r3, #0
   1ec42:	d0f8      	beq.n	1ec36 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ec44:	4b07      	ldr	r3, [pc, #28]	; (1ec64 <radio_ccm_is_done+0x3c>)
   1ec46:	4a08      	ldr	r2, [pc, #32]	; (1ec68 <radio_ccm_is_done+0x40>)
   1ec48:	2002      	movs	r0, #2
   1ec4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1ec4e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1ec52:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1ec56:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1ec5a:	fab0 f080 	clz	r0, r0
   1ec5e:	0940      	lsrs	r0, r0, #5
   1ec60:	4770      	bx	lr
   1ec62:	bf00      	nop
   1ec64:	4000f000 	.word	0x4000f000
   1ec68:	e000e100 	.word	0xe000e100

0001ec6c <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1ec6c:	4b03      	ldr	r3, [pc, #12]	; (1ec7c <radio_ccm_mic_is_valid+0x10>)
   1ec6e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1ec72:	3800      	subs	r0, #0
   1ec74:	bf18      	it	ne
   1ec76:	2001      	movne	r0, #1
   1ec78:	4770      	bx	lr
   1ec7a:	bf00      	nop
   1ec7c:	4000f000 	.word	0x4000f000

0001ec80 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ec80:	4a15      	ldr	r2, [pc, #84]	; (1ecd8 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ec82:	4b16      	ldr	r3, [pc, #88]	; (1ecdc <radio_ar_configure+0x5c>)
{
   1ec84:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ec86:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1ec8a:	4e15      	ldr	r6, [pc, #84]	; (1ece0 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ec8c:	2703      	movs	r7, #3
   1ec8e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1ec92:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1ec94:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ec98:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1ec9a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1ec9e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1eca0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1eca4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1eca8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1ecac:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1ecb0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1ecb4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1ecb8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1ecbc:	4909      	ldr	r1, [pc, #36]	; (1ece4 <radio_ar_configure+0x64>)
   1ecbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ecc2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1ecc6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1ecca:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1ecce:	bcf0      	pop	{r4, r5, r6, r7}
   1ecd0:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1ecd4:	4770      	bx	lr
   1ecd6:	bf00      	nop
   1ecd8:	40001000 	.word	0x40001000
   1ecdc:	4000f000 	.word	0x4000f000
   1ece0:	20004f4c 	.word	0x20004f4c
   1ece4:	4001f000 	.word	0x4001f000

0001ece8 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1ece8:	4b01      	ldr	r3, [pc, #4]	; (1ecf0 <radio_ar_match_get+0x8>)
   1ecea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1ecee:	4770      	bx	lr
   1ecf0:	4000f000 	.word	0x4000f000

0001ecf4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1ecf4:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1ecf6:	4807      	ldr	r0, [pc, #28]	; (1ed14 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1ecf8:	4c07      	ldr	r4, [pc, #28]	; (1ed18 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1ecfa:	4a08      	ldr	r2, [pc, #32]	; (1ed1c <radio_ar_status_reset+0x28>)
   1ecfc:	2300      	movs	r3, #0
   1ecfe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1ed02:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1ed06:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1ed0a:	bc10      	pop	{r4}
   1ed0c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1ed10:	4770      	bx	lr
   1ed12:	bf00      	nop
   1ed14:	4000f000 	.word	0x4000f000
   1ed18:	40001000 	.word	0x40001000
   1ed1c:	4001f000 	.word	0x4001f000

0001ed20 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1ed20:	4b08      	ldr	r3, [pc, #32]	; (1ed44 <radio_ar_has_match+0x24>)
   1ed22:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1ed26:	b160      	cbz	r0, 1ed42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1ed28:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1ed2c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1ed30:	b138      	cbz	r0, 1ed42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1ed32:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1ed36:	b120      	cbz	r0, 1ed42 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1ed38:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1ed3c:	fab0 f080 	clz	r0, r0
   1ed40:	0940      	lsrs	r0, r0, #5
}
   1ed42:	4770      	bx	lr
   1ed44:	40001000 	.word	0x40001000

0001ed48 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ed48:	2902      	cmp	r1, #2
{
   1ed4a:	b510      	push	{r4, lr}
   1ed4c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ed4e:	d00b      	beq.n	1ed68 <mayfly_enable_cb+0x20>
   1ed50:	4a0a      	ldr	r2, [pc, #40]	; (1ed7c <mayfly_enable_cb+0x34>)
   1ed52:	490b      	ldr	r1, [pc, #44]	; (1ed80 <mayfly_enable_cb+0x38>)
   1ed54:	480b      	ldr	r0, [pc, #44]	; (1ed84 <mayfly_enable_cb+0x3c>)
   1ed56:	231e      	movs	r3, #30
   1ed58:	f006 fed4 	bl	25b04 <printk>
   1ed5c:	4040      	eors	r0, r0
   1ed5e:	f380 8811 	msr	BASEPRI, r0
   1ed62:	f04f 0003 	mov.w	r0, #3
   1ed66:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1ed68:	200b      	movs	r0, #11
	if (enable) {
   1ed6a:	b11c      	cbz	r4, 1ed74 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1ed6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1ed70:	f7ec bfc4 	b.w	bcfc <arch_irq_enable>
}
   1ed74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1ed78:	f7ec bfd0 	b.w	bd1c <arch_irq_disable>
   1ed7c:	0002d8a0 	.word	0x0002d8a0
   1ed80:	0002d8f0 	.word	0x0002d8f0
   1ed84:	0002c8dc 	.word	0x0002c8dc

0001ed88 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1ed88:	b129      	cbz	r1, 1ed96 <mayfly_is_enabled+0xe>
   1ed8a:	3901      	subs	r1, #1
   1ed8c:	2901      	cmp	r1, #1
   1ed8e:	d805      	bhi.n	1ed9c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1ed90:	200b      	movs	r0, #11
   1ed92:	f7ec bfd7 	b.w	bd44 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1ed96:	2018      	movs	r0, #24
   1ed98:	f7ec bfd4 	b.w	bd44 <arch_irq_is_enabled>
{
   1ed9c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1ed9e:	4a07      	ldr	r2, [pc, #28]	; (1edbc <mayfly_is_enabled+0x34>)
   1eda0:	4907      	ldr	r1, [pc, #28]	; (1edc0 <mayfly_is_enabled+0x38>)
   1eda2:	4808      	ldr	r0, [pc, #32]	; (1edc4 <mayfly_is_enabled+0x3c>)
   1eda4:	2336      	movs	r3, #54	; 0x36
   1eda6:	f006 fead 	bl	25b04 <printk>
   1edaa:	4040      	eors	r0, r0
   1edac:	f380 8811 	msr	BASEPRI, r0
   1edb0:	f04f 0003 	mov.w	r0, #3
   1edb4:	df02      	svc	2
		break;
	}

	return 0;
}
   1edb6:	2000      	movs	r0, #0
   1edb8:	bd08      	pop	{r3, pc}
   1edba:	bf00      	nop
   1edbc:	0002d8a0 	.word	0x0002d8a0
   1edc0:	0002c97c 	.word	0x0002c97c
   1edc4:	0002c8dc 	.word	0x0002c8dc

0001edc8 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1edc8:	4288      	cmp	r0, r1
   1edca:	d00b      	beq.n	1ede4 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1edcc:	2801      	cmp	r0, #1
   1edce:	d003      	beq.n	1edd8 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1edd0:	2802      	cmp	r0, #2
   1edd2:	d009      	beq.n	1ede8 <mayfly_prio_is_equal+0x20>
   1edd4:	2000      	movs	r0, #0
#endif
	       0;
}
   1edd6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1edd8:	f1a1 0002 	sub.w	r0, r1, #2
   1eddc:	fab0 f080 	clz	r0, r0
   1ede0:	0940      	lsrs	r0, r0, #5
   1ede2:	4770      	bx	lr
   1ede4:	2001      	movs	r0, #1
   1ede6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1ede8:	f1a1 0001 	sub.w	r0, r1, #1
   1edec:	fab0 f080 	clz	r0, r0
   1edf0:	0940      	lsrs	r0, r0, #5
   1edf2:	4770      	bx	lr

0001edf4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1edf4:	2901      	cmp	r1, #1
{
   1edf6:	b508      	push	{r3, lr}
	switch (callee_id) {
   1edf8:	d00f      	beq.n	1ee1a <mayfly_pend+0x26>
   1edfa:	2902      	cmp	r1, #2
   1edfc:	d00d      	beq.n	1ee1a <mayfly_pend+0x26>
   1edfe:	b191      	cbz	r1, 1ee26 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1ee00:	4a0c      	ldr	r2, [pc, #48]	; (1ee34 <mayfly_pend+0x40>)
   1ee02:	490d      	ldr	r1, [pc, #52]	; (1ee38 <mayfly_pend+0x44>)
   1ee04:	480d      	ldr	r0, [pc, #52]	; (1ee3c <mayfly_pend+0x48>)
   1ee06:	2367      	movs	r3, #103	; 0x67
   1ee08:	f006 fe7c 	bl	25b04 <printk>
   1ee0c:	4040      	eors	r0, r0
   1ee0e:	f380 8811 	msr	BASEPRI, r0
   1ee12:	f04f 0003 	mov.w	r0, #3
   1ee16:	df02      	svc	2
		break;
	}
}
   1ee18:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ee1a:	4b09      	ldr	r3, [pc, #36]	; (1ee40 <mayfly_pend+0x4c>)
   1ee1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ee20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ee24:	bd08      	pop	{r3, pc}
   1ee26:	4b06      	ldr	r3, [pc, #24]	; (1ee40 <mayfly_pend+0x4c>)
   1ee28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ee2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ee30:	bd08      	pop	{r3, pc}
   1ee32:	bf00      	nop
   1ee34:	0002d8a0 	.word	0x0002d8a0
   1ee38:	0002c97c 	.word	0x0002c97c
   1ee3c:	0002c8dc 	.word	0x0002c8dc
   1ee40:	e000e100 	.word	0xe000e100

0001ee44 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ee44:	2803      	cmp	r0, #3
{
   1ee46:	b510      	push	{r4, lr}
   1ee48:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ee4a:	d804      	bhi.n	1ee56 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1ee4c:	4b11      	ldr	r3, [pc, #68]	; (1ee94 <hal_ticker_instance0_caller_id_get+0x50>)
   1ee4e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1ee50:	b18c      	cbz	r4, 1ee76 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1ee52:	4620      	mov	r0, r4
   1ee54:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ee56:	4a10      	ldr	r2, [pc, #64]	; (1ee98 <hal_ticker_instance0_caller_id_get+0x54>)
   1ee58:	4910      	ldr	r1, [pc, #64]	; (1ee9c <hal_ticker_instance0_caller_id_get+0x58>)
   1ee5a:	4811      	ldr	r0, [pc, #68]	; (1eea0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1ee5c:	232b      	movs	r3, #43	; 0x2b
   1ee5e:	f006 fe51 	bl	25b04 <printk>
   1ee62:	4040      	eors	r0, r0
   1ee64:	f380 8811 	msr	BASEPRI, r0
   1ee68:	f04f 0003 	mov.w	r0, #3
   1ee6c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1ee6e:	4b09      	ldr	r3, [pc, #36]	; (1ee94 <hal_ticker_instance0_caller_id_get+0x50>)
   1ee70:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1ee72:	2c00      	cmp	r4, #0
   1ee74:	d1ed      	bne.n	1ee52 <hal_ticker_instance0_caller_id_get+0xe>
   1ee76:	4a08      	ldr	r2, [pc, #32]	; (1ee98 <hal_ticker_instance0_caller_id_get+0x54>)
   1ee78:	490a      	ldr	r1, [pc, #40]	; (1eea4 <hal_ticker_instance0_caller_id_get+0x60>)
   1ee7a:	4809      	ldr	r0, [pc, #36]	; (1eea0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1ee7c:	232e      	movs	r3, #46	; 0x2e
   1ee7e:	f006 fe41 	bl	25b04 <printk>
   1ee82:	4040      	eors	r0, r0
   1ee84:	f380 8811 	msr	BASEPRI, r0
   1ee88:	f04f 0003 	mov.w	r0, #3
   1ee8c:	df02      	svc	2
}
   1ee8e:	4620      	mov	r0, r4
   1ee90:	bd10      	pop	{r4, pc}
   1ee92:	bf00      	nop
   1ee94:	0002d9a8 	.word	0x0002d9a8
   1ee98:	0002d914 	.word	0x0002d914
   1ee9c:	0002d964 	.word	0x0002d964
   1eea0:	0002c8dc 	.word	0x0002c8dc
   1eea4:	0002d984 	.word	0x0002d984

0001eea8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1eea8:	3801      	subs	r0, #1
{
   1eeaa:	b510      	push	{r4, lr}
   1eeac:	461c      	mov	r4, r3
	switch (caller_id) {
   1eeae:	2804      	cmp	r0, #4
   1eeb0:	f200 8082 	bhi.w	1efb8 <hal_ticker_instance0_sched+0x110>
   1eeb4:	e8df f000 	tbb	[pc, r0]
   1eeb8:	3f302112 	.word	0x3f302112
   1eebc:	03          	.byte	0x03
   1eebd:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1eebe:	2904      	cmp	r1, #4
   1eec0:	d04a      	beq.n	1ef58 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1eec2:	4a44      	ldr	r2, [pc, #272]	; (1efd4 <hal_ticker_instance0_sched+0x12c>)
   1eec4:	4944      	ldr	r1, [pc, #272]	; (1efd8 <hal_ticker_instance0_sched+0x130>)
   1eec6:	4845      	ldr	r0, [pc, #276]	; (1efdc <hal_ticker_instance0_sched+0x134>)
   1eec8:	23ba      	movs	r3, #186	; 0xba
   1eeca:	f006 fe1b 	bl	25b04 <printk>
   1eece:	4040      	eors	r0, r0
   1eed0:	f380 8811 	msr	BASEPRI, r0
   1eed4:	f04f 0003 	mov.w	r0, #3
   1eed8:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1eeda:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1eedc:	2904      	cmp	r1, #4
   1eede:	d043      	beq.n	1ef68 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1eee0:	4a3c      	ldr	r2, [pc, #240]	; (1efd4 <hal_ticker_instance0_sched+0x12c>)
   1eee2:	493d      	ldr	r1, [pc, #244]	; (1efd8 <hal_ticker_instance0_sched+0x130>)
   1eee4:	483d      	ldr	r0, [pc, #244]	; (1efdc <hal_ticker_instance0_sched+0x134>)
   1eee6:	234e      	movs	r3, #78	; 0x4e
   1eee8:	f006 fe0c 	bl	25b04 <printk>
   1eeec:	4040      	eors	r0, r0
   1eeee:	f380 8811 	msr	BASEPRI, r0
   1eef2:	f04f 0003 	mov.w	r0, #3
   1eef6:	df02      	svc	2
}
   1eef8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1eefa:	2903      	cmp	r1, #3
   1eefc:	d03c      	beq.n	1ef78 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1eefe:	4a35      	ldr	r2, [pc, #212]	; (1efd4 <hal_ticker_instance0_sched+0x12c>)
   1ef00:	4935      	ldr	r1, [pc, #212]	; (1efd8 <hal_ticker_instance0_sched+0x130>)
   1ef02:	4836      	ldr	r0, [pc, #216]	; (1efdc <hal_ticker_instance0_sched+0x134>)
   1ef04:	2365      	movs	r3, #101	; 0x65
   1ef06:	f006 fdfd 	bl	25b04 <printk>
   1ef0a:	4040      	eors	r0, r0
   1ef0c:	f380 8811 	msr	BASEPRI, r0
   1ef10:	f04f 0003 	mov.w	r0, #3
   1ef14:	df02      	svc	2
}
   1ef16:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ef18:	2904      	cmp	r1, #4
   1ef1a:	d035      	beq.n	1ef88 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1ef1c:	4a2d      	ldr	r2, [pc, #180]	; (1efd4 <hal_ticker_instance0_sched+0x12c>)
   1ef1e:	492e      	ldr	r1, [pc, #184]	; (1efd8 <hal_ticker_instance0_sched+0x130>)
   1ef20:	482e      	ldr	r0, [pc, #184]	; (1efdc <hal_ticker_instance0_sched+0x134>)
   1ef22:	237c      	movs	r3, #124	; 0x7c
   1ef24:	f006 fdee 	bl	25b04 <printk>
   1ef28:	4040      	eors	r0, r0
   1ef2a:	f380 8811 	msr	BASEPRI, r0
   1ef2e:	f04f 0003 	mov.w	r0, #3
   1ef32:	df02      	svc	2
}
   1ef34:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ef36:	2903      	cmp	r1, #3
   1ef38:	d036      	beq.n	1efa8 <hal_ticker_instance0_sched+0x100>
   1ef3a:	2904      	cmp	r1, #4
   1ef3c:	d02c      	beq.n	1ef98 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1ef3e:	4a25      	ldr	r2, [pc, #148]	; (1efd4 <hal_ticker_instance0_sched+0x12c>)
   1ef40:	4925      	ldr	r1, [pc, #148]	; (1efd8 <hal_ticker_instance0_sched+0x130>)
   1ef42:	4826      	ldr	r0, [pc, #152]	; (1efdc <hal_ticker_instance0_sched+0x134>)
   1ef44:	23a2      	movs	r3, #162	; 0xa2
   1ef46:	f006 fddd 	bl	25b04 <printk>
   1ef4a:	4040      	eors	r0, r0
   1ef4c:	f380 8811 	msr	BASEPRI, r0
   1ef50:	f04f 0003 	mov.w	r0, #3
   1ef54:	df02      	svc	2
}
   1ef56:	bd10      	pop	{r4, pc}
			m.param = instance;
   1ef58:	4b21      	ldr	r3, [pc, #132]	; (1efe0 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ef5a:	2102      	movs	r1, #2
			m.param = instance;
   1ef5c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ef5e:	2003      	movs	r0, #3
}
   1ef60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ef64:	f7f3 ba46 	b.w	123f4 <mayfly_enqueue>
			m.param = instance;
   1ef68:	4b1e      	ldr	r3, [pc, #120]	; (1efe4 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ef6a:	2102      	movs	r1, #2
			m.param = instance;
   1ef6c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ef6e:	2000      	movs	r0, #0
}
   1ef70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ef74:	f7f3 ba3e 	b.w	123f4 <mayfly_enqueue>
			m.param = instance;
   1ef78:	4b1b      	ldr	r3, [pc, #108]	; (1efe8 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1ef7a:	2101      	movs	r1, #1
			m.param = instance;
   1ef7c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1ef7e:	4608      	mov	r0, r1
}
   1ef80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1ef84:	f7f3 ba36 	b.w	123f4 <mayfly_enqueue>
			m.param = instance;
   1ef88:	4b18      	ldr	r3, [pc, #96]	; (1efec <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1ef8a:	2102      	movs	r1, #2
			m.param = instance;
   1ef8c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1ef8e:	2001      	movs	r0, #1
}
   1ef90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1ef94:	f7f3 ba2e 	b.w	123f4 <mayfly_enqueue>
			m.param = instance;
   1ef98:	4b15      	ldr	r3, [pc, #84]	; (1eff0 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef9a:	2102      	movs	r1, #2
			m.param = instance;
   1ef9c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef9e:	4608      	mov	r0, r1
}
   1efa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1efa4:	f7f3 ba26 	b.w	123f4 <mayfly_enqueue>
			m.param = instance;
   1efa8:	4b12      	ldr	r3, [pc, #72]	; (1eff4 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1efaa:	2101      	movs	r1, #1
			m.param = instance;
   1efac:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1efae:	2002      	movs	r0, #2
}
   1efb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1efb4:	f7f3 ba1e 	b.w	123f4 <mayfly_enqueue>
		LL_ASSERT(0);
   1efb8:	4a06      	ldr	r2, [pc, #24]	; (1efd4 <hal_ticker_instance0_sched+0x12c>)
   1efba:	4907      	ldr	r1, [pc, #28]	; (1efd8 <hal_ticker_instance0_sched+0x130>)
   1efbc:	4807      	ldr	r0, [pc, #28]	; (1efdc <hal_ticker_instance0_sched+0x134>)
   1efbe:	23c0      	movs	r3, #192	; 0xc0
   1efc0:	f006 fda0 	bl	25b04 <printk>
   1efc4:	4040      	eors	r0, r0
   1efc6:	f380 8811 	msr	BASEPRI, r0
   1efca:	f04f 0003 	mov.w	r0, #3
   1efce:	df02      	svc	2
}
   1efd0:	bd10      	pop	{r4, pc}
   1efd2:	bf00      	nop
   1efd4:	0002d914 	.word	0x0002d914
   1efd8:	0002c97c 	.word	0x0002c97c
   1efdc:	0002c8dc 	.word	0x0002c8dc
   1efe0:	2000073c 	.word	0x2000073c
   1efe4:	2000072c 	.word	0x2000072c
   1efe8:	2000071c 	.word	0x2000071c
   1efec:	2000076c 	.word	0x2000076c
   1eff0:	2000074c 	.word	0x2000074c
   1eff4:	2000075c 	.word	0x2000075c

0001eff8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1eff8:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1effa:	2000      	movs	r0, #0
   1effc:	f7ff b9c4 	b.w	1e388 <cntr_cmp_set>

0001f000 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1f000:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1f002:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f006:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1f00a:	3201      	adds	r2, #1
   1f00c:	d008      	beq.n	1f020 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1f00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f012:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1f016:	f013 0301 	ands.w	r3, r3, #1
   1f01a:	d10a      	bne.n	1f032 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1f01c:	4618      	mov	r0, r3
}
   1f01e:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1f020:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1f024:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f028:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1f02a:	4293      	cmp	r3, r2
   1f02c:	d1ef      	bne.n	1f00e <hci_vendor_read_static_addr+0xe>
	return 0;
   1f02e:	2000      	movs	r0, #0
}
   1f030:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1f032:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1f036:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1f038:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1f03a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1f03e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f042:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1f044:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1f046:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1f04a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1f04e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1f050:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1f054:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f058:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1f05a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1f05e:	3301      	adds	r3, #1
   1f060:	d03b      	beq.n	1f0da <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1f062:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1f066:	3301      	adds	r3, #1
   1f068:	d037      	beq.n	1f0da <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1f06a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1f06e:	3301      	adds	r3, #1
   1f070:	d033      	beq.n	1f0da <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1f072:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1f076:	3301      	adds	r3, #1
   1f078:	d02f      	beq.n	1f0da <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1f07a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1f07e:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1f080:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1f082:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1f086:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1f08a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1f08c:	f880 c009 	strb.w	ip, [r0, #9]
   1f090:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1f092:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1f096:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1f098:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1f09a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1f09e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1f0a2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1f0a4:	f880 c00d 	strb.w	ip, [r0, #13]
   1f0a8:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1f0aa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1f0ae:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1f0b0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1f0b2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1f0b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1f0ba:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1f0bc:	73c3      	strb	r3, [r0, #15]
   1f0be:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1f0c2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1f0c6:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1f0c8:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1f0ca:	0a11      	lsrs	r1, r2, #8
   1f0cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f0d0:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1f0d2:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1f0d4:	7541      	strb	r1, [r0, #21]
		return 1;
   1f0d6:	2001      	movs	r0, #1
}
   1f0d8:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1f0da:	2210      	movs	r2, #16
   1f0dc:	2100      	movs	r1, #0
   1f0de:	3006      	adds	r0, #6
   1f0e0:	f009 fb71 	bl	287c6 <memset>
		return 1;
   1f0e4:	2001      	movs	r0, #1
}
   1f0e6:	bd08      	pop	{r3, pc}

0001f0e8 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1f0e8:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1f0ea:	2210      	movs	r2, #16
{
   1f0ec:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1f0ee:	2100      	movs	r1, #0
   1f0f0:	f009 fb69 	bl	287c6 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1f0f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1f0fc:	3201      	adds	r2, #1
   1f0fe:	d034      	beq.n	1f16a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1f100:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1f104:	3201      	adds	r2, #1
   1f106:	d030      	beq.n	1f16a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1f108:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1f10c:	3201      	adds	r2, #1
   1f10e:	d02c      	beq.n	1f16a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1f110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1f114:	3201      	adds	r2, #1
   1f116:	d028      	beq.n	1f16a <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1f118:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1f11c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1f11e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1f120:	0a08      	lsrs	r0, r1, #8
   1f122:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1f126:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1f128:	70e0      	strb	r0, [r4, #3]
   1f12a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1f12c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1f130:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1f132:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1f134:	0a08      	lsrs	r0, r1, #8
   1f136:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1f13a:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1f13c:	71e0      	strb	r0, [r4, #7]
   1f13e:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1f140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1f144:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1f146:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1f148:	0a08      	lsrs	r0, r1, #8
   1f14a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1f14e:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1f150:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1f152:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1f154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1f158:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1f15a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1f15c:	0a11      	lsrs	r1, r2, #8
   1f15e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f162:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1f164:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1f166:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1f168:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1f16a:	4620      	mov	r0, r4
   1f16c:	2210      	movs	r2, #16
}
   1f16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1f172:	2100      	movs	r1, #0
   1f174:	f009 bb27 	b.w	287c6 <memset>

0001f178 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1f178:	4b02      	ldr	r3, [pc, #8]	; (1f184 <net_buf_pool_get+0xc>)
   1f17a:	222c      	movs	r2, #44	; 0x2c
   1f17c:	fb02 3000 	mla	r0, r2, r0, r3
   1f180:	4770      	bx	lr
   1f182:	bf00      	nop
   1f184:	20000c18 	.word	0x20000c18

0001f188 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f188:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f18a:	4b06      	ldr	r3, [pc, #24]	; (1f1a4 <net_buf_id+0x1c>)
   1f18c:	212c      	movs	r1, #44	; 0x2c
   1f18e:	fb01 3302 	mla	r3, r1, r2, r3
   1f192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f194:	7f1b      	ldrb	r3, [r3, #28]
   1f196:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f198:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f19a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1f19e:	fbb0 f0f3 	udiv	r0, r0, r3
   1f1a2:	4770      	bx	lr
   1f1a4:	20000c18 	.word	0x20000c18

0001f1a8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1f1a8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f1aa:	4b0a      	ldr	r3, [pc, #40]	; (1f1d4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f1ac:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f1ae:	242c      	movs	r4, #44	; 0x2c
   1f1b0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1f1b4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f1b8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1f1ba:	6823      	ldr	r3, [r4, #0]
   1f1bc:	429a      	cmp	r2, r3
   1f1be:	bf94      	ite	ls
   1f1c0:	600a      	strls	r2, [r1, #0]
   1f1c2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1f1c4:	f7ff ffe0 	bl	1f188 <net_buf_id>
   1f1c8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1f1cc:	fb02 3000 	mla	r0, r2, r0, r3
   1f1d0:	bd10      	pop	{r4, pc}
   1f1d2:	bf00      	nop
   1f1d4:	20000c18 	.word	0x20000c18

0001f1d8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1f1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1dc:	4605      	mov	r5, r0
   1f1de:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f1e0:	4610      	mov	r0, r2
   1f1e2:	4619      	mov	r1, r3
{
   1f1e4:	4691      	mov	r9, r2
   1f1e6:	4698      	mov	r8, r3
   1f1e8:	4617      	mov	r7, r2
   1f1ea:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f1ec:	f00b ffee 	bl	2b1cc <sys_clock_timeout_end_calc>
   1f1f0:	4682      	mov	sl, r0
   1f1f2:	468b      	mov	fp, r1
	__asm__ volatile(
   1f1f4:	f04f 0320 	mov.w	r3, #32
   1f1f8:	f3ef 8111 	mrs	r1, BASEPRI
   1f1fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1f200:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1f204:	8b6b      	ldrh	r3, [r5, #26]
   1f206:	2b00      	cmp	r3, #0
   1f208:	d05a      	beq.n	1f2c0 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1f20a:	8b2a      	ldrh	r2, [r5, #24]
   1f20c:	429a      	cmp	r2, r3
   1f20e:	d93e      	bls.n	1f28e <net_buf_alloc_len+0xb6>
   1f210:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1f212:	2200      	movs	r2, #0
   1f214:	2300      	movs	r3, #0
   1f216:	4628      	mov	r0, r5
   1f218:	f005 fb84 	bl	24924 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1f21c:	9900      	ldr	r1, [sp, #0]
   1f21e:	4604      	mov	r4, r0
   1f220:	2800      	cmp	r0, #0
   1f222:	d034      	beq.n	1f28e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1f224:	f381 8811 	msr	BASEPRI, r1
   1f228:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f22c:	9b01      	ldr	r3, [sp, #4]
   1f22e:	2b00      	cmp	r3, #0
   1f230:	d056      	beq.n	1f2e0 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1f232:	ea58 0309 	orrs.w	r3, r8, r9
   1f236:	d00f      	beq.n	1f258 <net_buf_alloc_len+0x80>
   1f238:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1f23c:	bf08      	it	eq
   1f23e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1f242:	d009      	beq.n	1f258 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1f244:	f006 fa58 	bl	256f8 <sys_clock_tick_get>
   1f248:	ebba 0700 	subs.w	r7, sl, r0
   1f24c:	eb6b 0601 	sbc.w	r6, fp, r1
   1f250:	2e00      	cmp	r6, #0
   1f252:	bfbc      	itt	lt
   1f254:	2700      	movlt	r7, #0
   1f256:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f258:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1f25a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1f2f8 <net_buf_alloc_len+0x120>
   1f25e:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1f262:	fb09 8303 	mla	r3, r9, r3, r8
   1f266:	463a      	mov	r2, r7
   1f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f26a:	681b      	ldr	r3, [r3, #0]
   1f26c:	a901      	add	r1, sp, #4
   1f26e:	681d      	ldr	r5, [r3, #0]
   1f270:	4620      	mov	r0, r4
   1f272:	4633      	mov	r3, r6
   1f274:	47a8      	blx	r5
   1f276:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1f278:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1f27a:	2800      	cmp	r0, #0
   1f27c:	d131      	bne.n	1f2e2 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1f27e:	79a0      	ldrb	r0, [r4, #6]
   1f280:	4621      	mov	r1, r4
   1f282:	fb00 8009 	mla	r0, r0, r9, r8
   1f286:	f00b fd0d 	bl	2aca4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1f28a:	462c      	mov	r4, r5
}
   1f28c:	e024      	b.n	1f2d8 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1f28e:	8b68      	ldrh	r0, [r5, #26]
   1f290:	1e43      	subs	r3, r0, #1
   1f292:	836b      	strh	r3, [r5, #26]
   1f294:	f381 8811 	msr	BASEPRI, r1
   1f298:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f29c:	7f2a      	ldrb	r2, [r5, #28]
   1f29e:	f102 0417 	add.w	r4, r2, #23
   1f2a2:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1f2a6:	8b2c      	ldrh	r4, [r5, #24]
   1f2a8:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1f2aa:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1f2ac:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1f2b0:	4811      	ldr	r0, [pc, #68]	; (1f2f8 <net_buf_alloc_len+0x120>)
   1f2b2:	4b12      	ldr	r3, [pc, #72]	; (1f2fc <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1f2b4:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1f2b6:	1a2d      	subs	r5, r5, r0
   1f2b8:	10ad      	asrs	r5, r5, #2
   1f2ba:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1f2bc:	71a5      	strb	r5, [r4, #6]
		goto success;
   1f2be:	e7b5      	b.n	1f22c <net_buf_alloc_len+0x54>
   1f2c0:	f381 8811 	msr	BASEPRI, r1
   1f2c4:	f3bf 8f6f 	isb	sy
   1f2c8:	464a      	mov	r2, r9
   1f2ca:	4643      	mov	r3, r8
   1f2cc:	4628      	mov	r0, r5
   1f2ce:	f005 fb29 	bl	24924 <z_impl_k_queue_get>
	if (!buf) {
   1f2d2:	4604      	mov	r4, r0
   1f2d4:	2800      	cmp	r0, #0
   1f2d6:	d1a9      	bne.n	1f22c <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1f2d8:	4620      	mov	r0, r4
   1f2da:	b003      	add	sp, #12
   1f2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1f2e0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1f2e2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1f2e4:	2201      	movs	r2, #1
	buf->frags = NULL;
   1f2e6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1f2e8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1f2ea:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1f2ec:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1f2ee:	6923      	ldr	r3, [r4, #16]
   1f2f0:	81e2      	strh	r2, [r4, #14]
   1f2f2:	60a3      	str	r3, [r4, #8]
	return buf;
   1f2f4:	e7f0      	b.n	1f2d8 <net_buf_alloc_len+0x100>
   1f2f6:	bf00      	nop
   1f2f8:	20000c18 	.word	0x20000c18
   1f2fc:	ba2e8ba3 	.word	0xba2e8ba3

0001f300 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f304:	4d16      	ldr	r5, [pc, #88]	; (1f360 <net_buf_unref+0x60>)
   1f306:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1f308:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1f30a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1f30c:	b90c      	cbnz	r4, 1f312 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1f30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1f312:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1f314:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1f318:	3b01      	subs	r3, #1
   1f31a:	b2db      	uxtb	r3, r3
   1f31c:	7123      	strb	r3, [r4, #4]
   1f31e:	2b00      	cmp	r3, #0
   1f320:	d1f5      	bne.n	1f30e <net_buf_unref+0xe>
		if (buf->__buf) {
   1f322:	6921      	ldr	r1, [r4, #16]
   1f324:	b159      	cbz	r1, 1f33e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1f326:	7963      	ldrb	r3, [r4, #5]
   1f328:	079b      	lsls	r3, r3, #30
   1f32a:	d407      	bmi.n	1f33c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f32c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1f32e:	fb07 5303 	mla	r3, r7, r3, r5
   1f332:	4620      	mov	r0, r4
   1f334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f336:	681b      	ldr	r3, [r3, #0]
   1f338:	689b      	ldr	r3, [r3, #8]
   1f33a:	4798      	blx	r3
			buf->__buf = NULL;
   1f33c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1f33e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1f340:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1f342:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1f346:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1f348:	6a1b      	ldr	r3, [r3, #32]
   1f34a:	b11b      	cbz	r3, 1f354 <net_buf_unref+0x54>
			pool->destroy(buf);
   1f34c:	4620      	mov	r0, r4
   1f34e:	4798      	blx	r3
{
   1f350:	4644      	mov	r4, r8
   1f352:	e7db      	b.n	1f30c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1f354:	4621      	mov	r1, r4
   1f356:	fb00 5007 	mla	r0, r0, r7, r5
   1f35a:	f00b fca3 	bl	2aca4 <k_queue_prepend>
}
   1f35e:	e7f7      	b.n	1f350 <net_buf_unref+0x50>
   1f360:	20000c18 	.word	0x20000c18

0001f364 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   1f364:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1f368:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1f36a:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1f36c:	d004      	beq.n	1f378 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   1f36e:	f010 0f78 	tst.w	r0, #120	; 0x78
   1f372:	d001      	beq.n	1f378 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   1f374:	2000      	movs	r0, #0
   1f376:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1f378:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   1f37a:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1f37e:	f000 0008 	and.w	r0, r0, #8
   1f382:	da05      	bge.n	1f390 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1f384:	b958      	cbnz	r0, 1f39e <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   1f386:	4808      	ldr	r0, [pc, #32]	; (1f3a8 <endpoint_ctx+0x44>)
   1f388:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1f38c:	304c      	adds	r0, #76	; 0x4c
   1f38e:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1f390:	b938      	cbnz	r0, 1f3a2 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1f392:	4805      	ldr	r0, [pc, #20]	; (1f3a8 <endpoint_ctx+0x44>)
   1f394:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1f398:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   1f39c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   1f39e:	4803      	ldr	r0, [pc, #12]	; (1f3ac <endpoint_ctx+0x48>)
   1f3a0:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   1f3a2:	4803      	ldr	r0, [pc, #12]	; (1f3b0 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   1f3a4:	4770      	bx	lr
   1f3a6:	bf00      	nop
   1f3a8:	200057a0 	.word	0x200057a0
   1f3ac:	200058ec 	.word	0x200058ec
   1f3b0:	20005a0c 	.word	0x20005a0c

0001f3b4 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   1f3b4:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   1f3b6:	4801      	ldr	r0, [pc, #4]	; (1f3bc <usbd_evt_put+0x8>)
   1f3b8:	f00b bc69 	b.w	2ac8e <k_queue_append>
   1f3bc:	20000c00 	.word	0x20000c00

0001f3c0 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1f3c0:	4901      	ldr	r1, [pc, #4]	; (1f3c8 <usbd_work_schedule+0x8>)
   1f3c2:	4802      	ldr	r0, [pc, #8]	; (1f3cc <usbd_work_schedule+0xc>)
   1f3c4:	f00b bd3d 	b.w	2ae42 <k_work_submit_to_queue>
   1f3c8:	200057c8 	.word	0x200057c8
   1f3cc:	200035f8 	.word	0x200035f8

0001f3d0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   1f3d0:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1f3d2:	480b      	ldr	r0, [pc, #44]	; (1f400 <usb_init+0x30>)
   1f3d4:	f003 fab0 	bl	22938 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   1f3d8:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   1f3da:	480a      	ldr	r0, [pc, #40]	; (1f404 <usb_init+0x34>)
   1f3dc:	f003 faf2 	bl	229c4 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   1f3e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f3e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f3e8:	4907      	ldr	r1, [pc, #28]	; (1f408 <usb_init+0x38>)
   1f3ea:	4808      	ldr	r0, [pc, #32]	; (1f40c <usb_init+0x3c>)
   1f3ec:	9400      	str	r4, [sp, #0]
   1f3ee:	f005 fc3f 	bl	24c70 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1f3f2:	4907      	ldr	r1, [pc, #28]	; (1f410 <usb_init+0x40>)
   1f3f4:	4807      	ldr	r0, [pc, #28]	; (1f414 <usb_init+0x44>)
   1f3f6:	f00b fd1b 	bl	2ae30 <k_work_init>

	return 0;
}
   1f3fa:	4620      	mov	r0, r4
   1f3fc:	b002      	add	sp, #8
   1f3fe:	bd10      	pop	{r4, pc}
   1f400:	000318a3 	.word	0x000318a3
   1f404:	0002d9b8 	.word	0x0002d9b8
   1f408:	20008a20 	.word	0x20008a20
   1f40c:	200035f8 	.word	0x200035f8
   1f410:	0001f871 	.word	0x0001f871
   1f414:	200057c8 	.word	0x200057c8

0001f418 <usbd_evt_get>:
   1f418:	4802      	ldr	r0, [pc, #8]	; (1f424 <usbd_evt_get+0xc>)
   1f41a:	2200      	movs	r2, #0
   1f41c:	2300      	movs	r3, #0
   1f41e:	f005 ba81 	b.w	24924 <z_impl_k_queue_get>
   1f422:	bf00      	nop
   1f424:	20000c00 	.word	0x20000c00

0001f428 <usbd_evt_flush>:
{
   1f428:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f42a:	4c05      	ldr	r4, [pc, #20]	; (1f440 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   1f42c:	f7ff fff4 	bl	1f418 <usbd_evt_get>
		if (ev) {
   1f430:	b120      	cbz	r0, 1f43c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f432:	1d01      	adds	r1, r0, #4
   1f434:	4620      	mov	r0, r4
   1f436:	f00b fb52 	bl	2aade <k_mem_slab_free>
	} while (ev != NULL);
   1f43a:	e7f7      	b.n	1f42c <usbd_evt_flush+0x4>
}
   1f43c:	bd10      	pop	{r4, pc}
   1f43e:	bf00      	nop
   1f440:	20000ac8 	.word	0x20000ac8

0001f444 <usbd_evt_alloc>:
{
   1f444:	b510      	push	{r4, lr}
   1f446:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1f448:	4820      	ldr	r0, [pc, #128]	; (1f4cc <usbd_evt_alloc+0x88>)
   1f44a:	2200      	movs	r2, #0
   1f44c:	2300      	movs	r3, #0
   1f44e:	4669      	mov	r1, sp
   1f450:	f004 fff0 	bl	24434 <k_mem_slab_alloc>
   1f454:	2800      	cmp	r0, #0
   1f456:	d034      	beq.n	1f4c2 <usbd_evt_alloc+0x7e>
		LOG_ERR("USBD event allocation failed!");
   1f458:	4c1d      	ldr	r4, [pc, #116]	; (1f4d0 <usbd_evt_alloc+0x8c>)
   1f45a:	6823      	ldr	r3, [r4, #0]
   1f45c:	075a      	lsls	r2, r3, #29
   1f45e:	d00c      	beq.n	1f47a <usbd_evt_alloc+0x36>
   1f460:	4b1c      	ldr	r3, [pc, #112]	; (1f4d4 <usbd_evt_alloc+0x90>)
   1f462:	9306      	str	r3, [sp, #24]
   1f464:	4b1c      	ldr	r3, [pc, #112]	; (1f4d8 <usbd_evt_alloc+0x94>)
   1f466:	9307      	str	r3, [sp, #28]
   1f468:	aa05      	add	r2, sp, #20
   1f46a:	2303      	movs	r3, #3
   1f46c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f470:	4620      	mov	r0, r4
   1f472:	9301      	str	r3, [sp, #4]
   1f474:	9305      	str	r3, [sp, #20]
   1f476:	f00a fd8a 	bl	29f8e <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
   1f47a:	f7ff ffd5 	bl	1f428 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1f47e:	4813      	ldr	r0, [pc, #76]	; (1f4cc <usbd_evt_alloc+0x88>)
   1f480:	2200      	movs	r2, #0
   1f482:	2300      	movs	r3, #0
   1f484:	4669      	mov	r1, sp
   1f486:	f004 ffd5 	bl	24434 <k_mem_slab_alloc>
   1f48a:	b188      	cbz	r0, 1f4b0 <usbd_evt_alloc+0x6c>
			LOG_ERR("USBD event memory corrupted");
   1f48c:	6823      	ldr	r3, [r4, #0]
   1f48e:	075b      	lsls	r3, r3, #29
   1f490:	d00c      	beq.n	1f4ac <usbd_evt_alloc+0x68>
   1f492:	4b12      	ldr	r3, [pc, #72]	; (1f4dc <usbd_evt_alloc+0x98>)
   1f494:	9306      	str	r3, [sp, #24]
   1f496:	4b10      	ldr	r3, [pc, #64]	; (1f4d8 <usbd_evt_alloc+0x94>)
   1f498:	9307      	str	r3, [sp, #28]
   1f49a:	480d      	ldr	r0, [pc, #52]	; (1f4d0 <usbd_evt_alloc+0x8c>)
   1f49c:	2303      	movs	r3, #3
   1f49e:	aa05      	add	r2, sp, #20
   1f4a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f4a4:	9301      	str	r3, [sp, #4]
   1f4a6:	9305      	str	r3, [sp, #20]
   1f4a8:	f00a fd71 	bl	29f8e <z_log_msg2_static_create.constprop.0>
			return NULL;
   1f4ac:	2000      	movs	r0, #0
   1f4ae:	e00a      	b.n	1f4c6 <usbd_evt_alloc+0x82>
		ev = (struct usbd_event *)block.data;
   1f4b0:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
   1f4b2:	2304      	movs	r3, #4
		ev->block = block;
   1f4b4:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1f4b6:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   1f4b8:	f7ff ff7c 	bl	1f3b4 <usbd_evt_put>
		usbd_work_schedule();
   1f4bc:	f7ff ff80 	bl	1f3c0 <usbd_work_schedule>
		return NULL;
   1f4c0:	e7f4      	b.n	1f4ac <usbd_evt_alloc+0x68>
	ev = (struct usbd_event *)block.data;
   1f4c2:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
   1f4c4:	6040      	str	r0, [r0, #4]
}
   1f4c6:	b008      	add	sp, #32
   1f4c8:	bd10      	pop	{r4, pc}
   1f4ca:	bf00      	nop
   1f4cc:	20000ac8 	.word	0x20000ac8
   1f4d0:	200009f8 	.word	0x200009f8
   1f4d4:	00031534 	.word	0x00031534
   1f4d8:	000317ec 	.word	0x000317ec
   1f4dc:	00031556 	.word	0x00031556

0001f4e0 <usbd_event_transfer_data>:
{
   1f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4e2:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
   1f4e4:	7881      	ldrb	r1, [r0, #2]
{
   1f4e6:	4606      	mov	r6, r0
   1f4e8:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1f4ea:	4608      	mov	r0, r1
   1f4ec:	f7ff ff3a 	bl	1f364 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f4f0:	060a      	lsls	r2, r1, #24
		switch (p_event->data.eptransfer.status) {
   1f4f2:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   1f4f4:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f4f6:	d52a      	bpl.n	1f54e <usbd_event_transfer_data+0x6e>
		switch (p_event->data.eptransfer.status) {
   1f4f8:	b1c4      	cbz	r4, 1f52c <usbd_event_transfer_data+0x4c>
   1f4fa:	2c03      	cmp	r4, #3
   1f4fc:	d024      	beq.n	1f548 <usbd_event_transfer_data+0x68>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1f4fe:	482e      	ldr	r0, [pc, #184]	; (1f5b8 <usbd_event_transfer_data+0xd8>)
   1f500:	6803      	ldr	r3, [r0, #0]
   1f502:	075b      	lsls	r3, r3, #29
   1f504:	d020      	beq.n	1f548 <usbd_event_transfer_data+0x68>
   1f506:	466d      	mov	r5, sp
   1f508:	b088      	sub	sp, #32
   1f50a:	466a      	mov	r2, sp
   1f50c:	4b2b      	ldr	r3, [pc, #172]	; (1f5bc <usbd_event_transfer_data+0xdc>)
   1f50e:	6113      	str	r3, [r2, #16]
   1f510:	4b2b      	ldr	r3, [pc, #172]	; (1f5c0 <usbd_event_transfer_data+0xe0>)
   1f512:	61d1      	str	r1, [r2, #28]
   1f514:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f518:	2305      	movs	r3, #5
   1f51a:	607b      	str	r3, [r7, #4]
   1f51c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1f520:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f524:	f00a fd33 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1f528:	46ad      	mov	sp, r5
   1f52a:	e00d      	b.n	1f548 <usbd_event_transfer_data+0x68>
			struct usbd_event *ev = usbd_evt_alloc();
   1f52c:	f7ff ff8a 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   1f530:	4603      	mov	r3, r0
   1f532:	b148      	cbz	r0, 1f548 <usbd_event_transfer_data+0x68>
			ev->evt_type = USBD_EVT_EP;
   1f534:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1f536:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1f538:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1f53a:	2203      	movs	r2, #3
   1f53c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f53e:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   1f540:	f7ff ff38 	bl	1f3b4 <usbd_evt_put>
			usbd_work_schedule();
   1f544:	f7ff ff3c 	bl	1f3c0 <usbd_work_schedule>
}
   1f548:	370c      	adds	r7, #12
   1f54a:	46bd      	mov	sp, r7
   1f54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
   1f54e:	b154      	cbz	r4, 1f566 <usbd_event_transfer_data+0x86>
   1f550:	2c01      	cmp	r4, #1
   1f552:	d1d4      	bne.n	1f4fe <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
   1f554:	f7ff ff76 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   1f558:	4603      	mov	r3, r0
   1f55a:	2800      	cmp	r0, #0
   1f55c:	d0f4      	beq.n	1f548 <usbd_event_transfer_data+0x68>
			ep_ctx->read_pending = true;
   1f55e:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1f560:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1f562:	7304      	strb	r4, [r0, #12]
   1f564:	e7eb      	b.n	1f53e <usbd_event_transfer_data+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
   1f566:	f7ff ff6d 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   1f56a:	2800      	cmp	r0, #0
   1f56c:	d0ec      	beq.n	1f548 <usbd_event_transfer_data+0x68>
				p_event->data.eptransfer.ep);
   1f56e:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   1f570:	4b14      	ldr	r3, [pc, #80]	; (1f5c4 <usbd_event_transfer_data+0xe4>)
   1f572:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f576:	f002 0108 	and.w	r1, r2, #8
   1f57a:	d011      	beq.n	1f5a0 <usbd_event_transfer_data+0xc0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1f57c:	b141      	cbz	r1, 1f590 <usbd_event_transfer_data+0xb0>
        {
            ret = p_reg->ISOIN.AMOUNT;
   1f57e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1f582:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   1f584:	2301      	movs	r3, #1
   1f586:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1f588:	2302      	movs	r3, #2
   1f58a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f58c:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
   1f58e:	e7d7      	b.n	1f540 <usbd_event_transfer_data+0x60>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   1f590:	f002 020f 	and.w	r2, r2, #15
   1f594:	2114      	movs	r1, #20
   1f596:	fb01 3302 	mla	r3, r1, r2, r3
   1f59a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1f59e:	e7f0      	b.n	1f582 <usbd_event_transfer_data+0xa2>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1f5a0:	b111      	cbz	r1, 1f5a8 <usbd_event_transfer_data+0xc8>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1f5a2:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1f5a6:	e7ec      	b.n	1f582 <usbd_event_transfer_data+0xa2>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   1f5a8:	f002 020f 	and.w	r2, r2, #15
   1f5ac:	2114      	movs	r1, #20
   1f5ae:	fb01 3302 	mla	r3, r1, r2, r3
   1f5b2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1f5b6:	e7e4      	b.n	1f582 <usbd_event_transfer_data+0xa2>
   1f5b8:	200009f8 	.word	0x200009f8
   1f5bc:	00031576 	.word	0x00031576
   1f5c0:	000317fb 	.word	0x000317fb
   1f5c4:	40027000 	.word	0x40027000

0001f5c8 <usb_dc_power_event_handler>:
{
   1f5c8:	b590      	push	{r4, r7, lr}
   1f5ca:	2802      	cmp	r0, #2
   1f5cc:	b083      	sub	sp, #12
   1f5ce:	4603      	mov	r3, r0
   1f5d0:	af00      	add	r7, sp, #0
   1f5d2:	d812      	bhi.n	1f5fa <usb_dc_power_event_handler+0x32>
   1f5d4:	4a14      	ldr	r2, [pc, #80]	; (1f628 <usb_dc_power_event_handler+0x60>)
   1f5d6:	5c14      	ldrb	r4, [r2, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   1f5d8:	f7ff ff34 	bl	1f444 <usbd_evt_alloc>
	if (!ev) {
   1f5dc:	b150      	cbz	r0, 1f5f4 <usb_dc_power_event_handler+0x2c>
	ev->evt_type = USBD_EVT_POWER;
   1f5de:	2200      	movs	r2, #0
   1f5e0:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   1f5e2:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   1f5e4:	f7ff fee6 	bl	1f3b4 <usbd_evt_put>
	if (usbd_ctx.attached) {
   1f5e8:	4b10      	ldr	r3, [pc, #64]	; (1f62c <usb_dc_power_event_handler+0x64>)
   1f5ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1f5ee:	b10b      	cbz	r3, 1f5f4 <usb_dc_power_event_handler+0x2c>
		usbd_work_schedule();
   1f5f0:	f7ff fee6 	bl	1f3c0 <usbd_work_schedule>
}
   1f5f4:	370c      	adds	r7, #12
   1f5f6:	46bd      	mov	sp, r7
   1f5f8:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
   1f5fa:	480d      	ldr	r0, [pc, #52]	; (1f630 <usb_dc_power_event_handler+0x68>)
   1f5fc:	6802      	ldr	r2, [r0, #0]
   1f5fe:	0752      	lsls	r2, r2, #29
   1f600:	d0f8      	beq.n	1f5f4 <usb_dc_power_event_handler+0x2c>
   1f602:	466c      	mov	r4, sp
   1f604:	b088      	sub	sp, #32
   1f606:	466a      	mov	r2, sp
   1f608:	490a      	ldr	r1, [pc, #40]	; (1f634 <usb_dc_power_event_handler+0x6c>)
   1f60a:	6111      	str	r1, [r2, #16]
   1f60c:	490a      	ldr	r1, [pc, #40]	; (1f638 <usb_dc_power_event_handler+0x70>)
	switch (event) {
   1f60e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
   1f612:	2304      	movs	r3, #4
   1f614:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f618:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f61c:	607b      	str	r3, [r7, #4]
   1f61e:	f00a fcb6 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1f622:	46a5      	mov	sp, r4
   1f624:	e7e6      	b.n	1f5f4 <usb_dc_power_event_handler+0x2c>
   1f626:	bf00      	nop
   1f628:	00031786 	.word	0x00031786
   1f62c:	200057a0 	.word	0x200057a0
   1f630:	200009f8 	.word	0x200009f8
   1f634:	000315a6 	.word	0x000315a6
   1f638:	000317d1 	.word	0x000317d1

0001f63c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   1f63c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f63e:	490f      	ldr	r1, [pc, #60]	; (1f67c <hfxo_stop.constprop.0.isra.0+0x40>)
   1f640:	f3bf 8f5b 	dmb	ish
   1f644:	f101 0320 	add.w	r3, r1, #32
   1f648:	2200      	movs	r2, #0
   1f64a:	e853 0f00 	ldrex	r0, [r3]
   1f64e:	2801      	cmp	r0, #1
   1f650:	d103      	bne.n	1f65a <hfxo_stop.constprop.0.isra.0+0x1e>
   1f652:	e843 2400 	strex	r4, r2, [r3]
   1f656:	2c00      	cmp	r4, #0
   1f658:	d1f7      	bne.n	1f64a <hfxo_stop.constprop.0.isra.0+0xe>
   1f65a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   1f65e:	d10b      	bne.n	1f678 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1f660:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1f662:	310c      	adds	r1, #12
   1f664:	4620      	mov	r0, r4
   1f666:	f006 fb51 	bl	25d0c <onoff_cancel>

	if (rv == -EALREADY) {
   1f66a:	3078      	adds	r0, #120	; 0x78
   1f66c:	d104      	bne.n	1f678 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   1f66e:	4620      	mov	r0, r4
}
   1f670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f674:	f006 bb25 	b.w	25cc2 <onoff_release>
   1f678:	bd10      	pop	{r4, pc}
   1f67a:	bf00      	nop
   1f67c:	200057a0 	.word	0x200057a0

0001f680 <usbd_event_handler>:
{
   1f680:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f682:	b089      	sub	sp, #36	; 0x24
   1f684:	4606      	mov	r6, r0
   1f686:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
   1f688:	2214      	movs	r2, #20
   1f68a:	2100      	movs	r1, #0
   1f68c:	f107 000c 	add.w	r0, r7, #12
   1f690:	f009 f899 	bl	287c6 <memset>
	switch (p_event->type) {
   1f694:	7833      	ldrb	r3, [r6, #0]
   1f696:	3b01      	subs	r3, #1
   1f698:	2b05      	cmp	r3, #5
   1f69a:	d820      	bhi.n	1f6de <usbd_event_handler+0x5e>
   1f69c:	e8df f003 	tbb	[pc, r3]
   1f6a0:	131303a5 	.word	0x131303a5
   1f6a4:	1596      	.short	0x1596
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   1f6a6:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1f6a8:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
   1f6aa:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   1f6ac:	f7ff feca 	bl	1f444 <usbd_evt_alloc>
		if (!ev) {
   1f6b0:	4603      	mov	r3, r0
   1f6b2:	b1a0      	cbz	r0, 1f6de <usbd_event_handler+0x5e>
		ev->evt_type = evt.evt_type;
   1f6b4:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   1f6b6:	f100 0208 	add.w	r2, r0, #8
   1f6ba:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
   1f6be:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   1f6c2:	4618      	mov	r0, r3
   1f6c4:	e036      	b.n	1f734 <usbd_event_handler+0xb4>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1f6c6:	2304      	movs	r3, #4
   1f6c8:	e7ee      	b.n	1f6a8 <usbd_event_handler+0x28>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1f6ca:	78b1      	ldrb	r1, [r6, #2]
   1f6cc:	4608      	mov	r0, r1
   1f6ce:	f7ff fe49 	bl	1f364 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   1f6d2:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1f6d4:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   1f6d6:	b12b      	cbz	r3, 1f6e4 <usbd_event_handler+0x64>
   1f6d8:	3b01      	subs	r3, #1
   1f6da:	2b02      	cmp	r3, #2
   1f6dc:	d972      	bls.n	1f7c4 <usbd_event_handler+0x144>
}
   1f6de:	3724      	adds	r7, #36	; 0x24
   1f6e0:	46bd      	mov	sp, r7
   1f6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f6e4:	0608      	lsls	r0, r1, #24
		switch (p_event->data.eptransfer.status) {
   1f6e6:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f6e8:	d529      	bpl.n	1f73e <usbd_event_handler+0xbe>
		switch (p_event->data.eptransfer.status) {
   1f6ea:	b1c4      	cbz	r4, 1f71e <usbd_event_handler+0x9e>
   1f6ec:	2c03      	cmp	r4, #3
   1f6ee:	d0f6      	beq.n	1f6de <usbd_event_handler+0x5e>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1f6f0:	483f      	ldr	r0, [pc, #252]	; (1f7f0 <usbd_event_handler+0x170>)
   1f6f2:	6803      	ldr	r3, [r0, #0]
   1f6f4:	075b      	lsls	r3, r3, #29
   1f6f6:	d0f2      	beq.n	1f6de <usbd_event_handler+0x5e>
   1f6f8:	466d      	mov	r5, sp
   1f6fa:	b088      	sub	sp, #32
   1f6fc:	466a      	mov	r2, sp
   1f6fe:	4b3d      	ldr	r3, [pc, #244]	; (1f7f4 <usbd_event_handler+0x174>)
   1f700:	6113      	str	r3, [r2, #16]
   1f702:	4b3d      	ldr	r3, [pc, #244]	; (1f7f8 <usbd_event_handler+0x178>)
   1f704:	61d1      	str	r1, [r2, #28]
   1f706:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f70a:	2305      	movs	r3, #5
   1f70c:	607b      	str	r3, [r7, #4]
   1f70e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1f712:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f716:	f00a fc3a 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1f71a:	46ad      	mov	sp, r5
   1f71c:	e7df      	b.n	1f6de <usbd_event_handler+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
   1f71e:	f7ff fe91 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   1f722:	4603      	mov	r3, r0
   1f724:	2800      	cmp	r0, #0
   1f726:	d0da      	beq.n	1f6de <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
   1f728:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1f72a:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1f72c:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1f72e:	2203      	movs	r2, #3
   1f730:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f732:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   1f734:	f7ff fe3e 	bl	1f3b4 <usbd_evt_put>
		usbd_work_schedule();
   1f738:	f7ff fe42 	bl	1f3c0 <usbd_work_schedule>
   1f73c:	e7cf      	b.n	1f6de <usbd_event_handler+0x5e>
		switch (p_event->data.eptransfer.status) {
   1f73e:	b154      	cbz	r4, 1f756 <usbd_event_handler+0xd6>
   1f740:	2c01      	cmp	r4, #1
   1f742:	d1d5      	bne.n	1f6f0 <usbd_event_handler+0x70>
			struct usbd_event *ev = usbd_evt_alloc();
   1f744:	f7ff fe7e 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   1f748:	4603      	mov	r3, r0
   1f74a:	2800      	cmp	r0, #0
   1f74c:	d0c7      	beq.n	1f6de <usbd_event_handler+0x5e>
			ep_ctx->read_pending = true;
   1f74e:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1f750:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1f752:	7304      	strb	r4, [r0, #12]
   1f754:	e7ed      	b.n	1f732 <usbd_event_handler+0xb2>
			struct usbd_event *ev = usbd_evt_alloc();
   1f756:	f7ff fe75 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   1f75a:	4604      	mov	r4, r0
   1f75c:	2800      	cmp	r0, #0
   1f75e:	d0be      	beq.n	1f6de <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
   1f760:	2301      	movs	r3, #1
   1f762:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1f764:	2302      	movs	r3, #2
   1f766:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f768:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   1f76a:	f105 010c 	add.w	r1, r5, #12
   1f76e:	78b0      	ldrb	r0, [r6, #2]
   1f770:	f00b f8d2 	bl	2a918 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   1f774:	4603      	mov	r3, r0
   1f776:	b1a0      	cbz	r0, 1f7a2 <usbd_event_handler+0x122>
				LOG_ERR("_ep_status_get failed! Code: %d",
   1f778:	481d      	ldr	r0, [pc, #116]	; (1f7f0 <usbd_event_handler+0x170>)
   1f77a:	6802      	ldr	r2, [r0, #0]
   1f77c:	0752      	lsls	r2, r2, #29
   1f77e:	d010      	beq.n	1f7a2 <usbd_event_handler+0x122>
   1f780:	466e      	mov	r6, sp
   1f782:	b088      	sub	sp, #32
   1f784:	466a      	mov	r2, sp
   1f786:	491d      	ldr	r1, [pc, #116]	; (1f7fc <usbd_event_handler+0x17c>)
   1f788:	6111      	str	r1, [r2, #16]
   1f78a:	491b      	ldr	r1, [pc, #108]	; (1f7f8 <usbd_event_handler+0x178>)
   1f78c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f790:	2304      	movs	r3, #4
   1f792:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f796:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f79a:	607b      	str	r3, [r7, #4]
   1f79c:	f00a fbf7 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1f7a0:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   1f7a2:	4a17      	ldr	r2, [pc, #92]	; (1f800 <usbd_event_handler+0x180>)
   1f7a4:	68e9      	ldr	r1, [r5, #12]
   1f7a6:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   1f7aa:	428b      	cmp	r3, r1
   1f7ac:	d906      	bls.n	1f7bc <usbd_event_handler+0x13c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   1f7ae:	1a5b      	subs	r3, r3, r1
   1f7b0:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   1f7b4:	f004 f89e 	bl	238f4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	e7bb      	b.n	1f734 <usbd_event_handler+0xb4>
				ctx->ctrl_read_len = 0U;
   1f7bc:	2300      	movs	r3, #0
   1f7be:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
   1f7c2:	e7f9      	b.n	1f7b8 <usbd_event_handler+0x138>
			usbd_event_transfer_data(p_event);
   1f7c4:	4630      	mov	r0, r6
   1f7c6:	f7ff fe8b 	bl	1f4e0 <usbd_event_transfer_data>
	if (put_evt) {
   1f7ca:	e788      	b.n	1f6de <usbd_event_handler+0x5e>
		nrfx_usbd_setup_get(&drv_setup);
   1f7cc:	1d38      	adds	r0, r7, #4
   1f7ce:	f004 f86b 	bl	238a8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   1f7d2:	797b      	ldrb	r3, [r7, #5]
   1f7d4:	2b05      	cmp	r3, #5
   1f7d6:	d104      	bne.n	1f7e2 <usbd_event_handler+0x162>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   1f7d8:	793b      	ldrb	r3, [r7, #4]
   1f7da:	f013 0f60 	tst.w	r3, #96	; 0x60
   1f7de:	f43f af7e 	beq.w	1f6de <usbd_event_handler+0x5e>
			evt.evt.ep_evt.ep = ep_ctx;
   1f7e2:	4b08      	ldr	r3, [pc, #32]	; (1f804 <usbd_event_handler+0x184>)
   1f7e4:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
   1f7e6:	2401      	movs	r4, #1
   1f7e8:	e760      	b.n	1f6ac <usbd_event_handler+0x2c>
	switch (p_event->type) {
   1f7ea:	2402      	movs	r4, #2
   1f7ec:	e75e      	b.n	1f6ac <usbd_event_handler+0x2c>
   1f7ee:	bf00      	nop
   1f7f0:	200009f8 	.word	0x200009f8
   1f7f4:	00031576 	.word	0x00031576
   1f7f8:	00031814 	.word	0x00031814
   1f7fc:	000315c5 	.word	0x000315c5
   1f800:	200057a0 	.word	0x200057a0
   1f804:	2000590c 	.word	0x2000590c

0001f808 <eps_ctx_init>:
{
   1f808:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1f80a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1f80c:	f064 007f 	orn	r0, r4, #127	; 0x7f
   1f810:	b2c0      	uxtb	r0, r0
   1f812:	f7ff fda7 	bl	1f364 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1f816:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1f818:	f00a fba6 	bl	29f68 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1f81c:	2c08      	cmp	r4, #8
   1f81e:	d1f5      	bne.n	1f80c <eps_ctx_init+0x4>
   1f820:	4d0f      	ldr	r5, [pc, #60]	; (1f860 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1f822:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1f824:	b2e0      	uxtb	r0, r4
   1f826:	f7ff fd9d 	bl	1f364 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1f82a:	6903      	ldr	r3, [r0, #16]
   1f82c:	b903      	cbnz	r3, 1f830 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   1f82e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1f830:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1f832:	f00a fb99 	bl	29f68 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1f836:	2c08      	cmp	r4, #8
   1f838:	f105 0540 	add.w	r5, r5, #64	; 0x40
   1f83c:	d1f2      	bne.n	1f824 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   1f83e:	4c09      	ldr	r4, [pc, #36]	; (1f864 <eps_ctx_init+0x5c>)
   1f840:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   1f844:	f00a fb90 	bl	29f68 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   1f848:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   1f84c:	b913      	cbnz	r3, 1f854 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1f84e:	4b06      	ldr	r3, [pc, #24]	; (1f868 <eps_ctx_init+0x60>)
   1f850:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   1f854:	4805      	ldr	r0, [pc, #20]	; (1f86c <eps_ctx_init+0x64>)
   1f856:	f00a fb87 	bl	29f68 <ep_ctx_reset>
}
   1f85a:	2000      	movs	r0, #0
   1f85c:	bd38      	pop	{r3, r4, r5, pc}
   1f85e:	bf00      	nop
   1f860:	200055a0 	.word	0x200055a0
   1f864:	200057a0 	.word	0x200057a0
   1f868:	200051a0 	.word	0x200051a0
   1f86c:	20005a0c 	.word	0x20005a0c

0001f870 <usbd_work_handler>:
{
   1f870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
   1f874:	4ca6      	ldr	r4, [pc, #664]	; (1fb10 <usbd_work_handler+0x2a0>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f876:	f8df 929c 	ldr.w	r9, [pc, #668]	; 1fb14 <usbd_work_handler+0x2a4>
{
   1f87a:	b088      	sub	sp, #32
   1f87c:	4680      	mov	r8, r0
   1f87e:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
   1f880:	f7ff fdca 	bl	1f418 <usbd_evt_get>
   1f884:	4606      	mov	r6, r0
   1f886:	b918      	cbnz	r0, 1f890 <usbd_work_handler+0x20>
}
   1f888:	3720      	adds	r7, #32
   1f88a:	46bd      	mov	sp, r7
   1f88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
   1f890:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1f894:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f896:	f106 0a04 	add.w	sl, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1f89a:	b93a      	cbnz	r2, 1f8ac <usbd_work_handler+0x3c>
   1f89c:	2b00      	cmp	r3, #0
   1f89e:	f000 80bb 	beq.w	1fa18 <usbd_work_handler+0x1a8>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f8a2:	4651      	mov	r1, sl
   1f8a4:	4648      	mov	r0, r9
   1f8a6:	f00b f91a 	bl	2aade <k_mem_slab_free>
}
   1f8aa:	e7e9      	b.n	1f880 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
   1f8ac:	2b04      	cmp	r3, #4
   1f8ae:	f200 81b5 	bhi.w	1fc1c <usbd_work_handler+0x3ac>
   1f8b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f8b6:	00b1      	.short	0x00b1
   1f8b8:	014f0005 	.word	0x014f0005
   1f8bc:	01920165 	.word	0x01920165
			if (!ctx->attached) {
   1f8c0:	f818 3c04 	ldrb.w	r3, [r8, #-4]
   1f8c4:	b9b3      	cbnz	r3, 1f8f4 <usbd_work_handler+0x84>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   1f8c6:	4894      	ldr	r0, [pc, #592]	; (1fb18 <usbd_work_handler+0x2a8>)
   1f8c8:	6803      	ldr	r3, [r0, #0]
   1f8ca:	075b      	lsls	r3, r3, #29
   1f8cc:	d012      	beq.n	1f8f4 <usbd_work_handler+0x84>
   1f8ce:	466d      	mov	r5, sp
   1f8d0:	b088      	sub	sp, #32
   1f8d2:	466a      	mov	r2, sp
   1f8d4:	4b91      	ldr	r3, [pc, #580]	; (1fb1c <usbd_work_handler+0x2ac>)
   1f8d6:	6113      	str	r3, [r2, #16]
   1f8d8:	4b91      	ldr	r3, [pc, #580]	; (1fb20 <usbd_work_handler+0x2b0>)
   1f8da:	6153      	str	r3, [r2, #20]
   1f8dc:	68b3      	ldr	r3, [r6, #8]
   1f8de:	7a5b      	ldrb	r3, [r3, #9]
   1f8e0:	6193      	str	r3, [r2, #24]
   1f8e2:	2304      	movs	r3, #4
   1f8e4:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f8e8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f8ec:	60bb      	str	r3, [r7, #8]
   1f8ee:	f00a fb4e 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1f8f2:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
   1f8f4:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   1f8f6:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
   1f8f8:	2b03      	cmp	r3, #3
   1f8fa:	d8d2      	bhi.n	1f8a2 <usbd_work_handler+0x32>
   1f8fc:	e8df f003 	tbb	[pc, r3]
   1f900:	79743d02 	.word	0x79743d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   1f904:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   1f906:	2208      	movs	r2, #8
   1f908:	2100      	movs	r1, #0
   1f90a:	4630      	mov	r0, r6
   1f90c:	f008 ff5b 	bl	287c6 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1f910:	4b84      	ldr	r3, [pc, #528]	; (1fb24 <usbd_work_handler+0x2b4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1f912:	4885      	ldr	r0, [pc, #532]	; (1fb28 <usbd_work_handler+0x2b8>)
   1f914:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   1f918:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1f91a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   1f91e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   1f920:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1f924:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1f928:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1f92c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   1f92e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1f932:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1f936:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   1f93a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1f93c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1f940:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1f944:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1f948:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   1f94a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1f94c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1f94e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1f950:	f008 ff2e 	bl	287b0 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1f954:	682b      	ldr	r3, [r5, #0]
   1f956:	7a68      	ldrb	r0, [r5, #9]
   1f958:	2100      	movs	r1, #0
   1f95a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   1f95c:	f996 3000 	ldrsb.w	r3, [r6]
   1f960:	2b00      	cmp	r3, #0
   1f962:	db06      	blt.n	1f972 <usbd_work_handler+0x102>
   1f964:	88f3      	ldrh	r3, [r6, #6]
   1f966:	b123      	cbz	r3, 1f972 <usbd_work_handler+0x102>
		ctx->ctrl_read_len = usbd_setup->wLength;
   1f968:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   1f96c:	f003 ffc2 	bl	238f4 <nrfx_usbd_setup_data_clear>
   1f970:	e797      	b.n	1f8a2 <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
   1f972:	2300      	movs	r3, #0
   1f974:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   1f978:	e793      	b.n	1f8a2 <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
   1f97a:	7f6b      	ldrb	r3, [r5, #29]
   1f97c:	2b00      	cmp	r3, #0
   1f97e:	d090      	beq.n	1f8a2 <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
   1f980:	7f2b      	ldrb	r3, [r5, #28]
   1f982:	2b00      	cmp	r3, #0
   1f984:	d08d      	beq.n	1f8a2 <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
   1f986:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f98c:	4867      	ldr	r0, [pc, #412]	; (1fb2c <usbd_work_handler+0x2bc>)
	ep_ctx->read_pending = false;
   1f98e:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
   1f994:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f996:	f00a fafd 	bl	29f94 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   1f99a:	696b      	ldr	r3, [r5, #20]
   1f99c:	60bb      	str	r3, [r7, #8]
   1f99e:	686b      	ldr	r3, [r5, #4]
   1f9a0:	e9c7 3603 	strd	r3, r6, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1f9a4:	f107 0108 	add.w	r1, r7, #8
   1f9a8:	7a68      	ldrb	r0, [r5, #9]
   1f9aa:	f003 fdad 	bl	23508 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1f9ae:	4a60      	ldr	r2, [pc, #384]	; (1fb30 <usbd_work_handler+0x2c0>)
   1f9b0:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1f9b2:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
   1f9b4:	d014      	beq.n	1f9e0 <usbd_work_handler+0x170>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   1f9b6:	4858      	ldr	r0, [pc, #352]	; (1fb18 <usbd_work_handler+0x2a8>)
   1f9b8:	6802      	ldr	r2, [r0, #0]
   1f9ba:	0756      	lsls	r6, r2, #29
   1f9bc:	d010      	beq.n	1f9e0 <usbd_work_handler+0x170>
   1f9be:	466d      	mov	r5, sp
   1f9c0:	b088      	sub	sp, #32
   1f9c2:	466a      	mov	r2, sp
   1f9c4:	495b      	ldr	r1, [pc, #364]	; (1fb34 <usbd_work_handler+0x2c4>)
   1f9c6:	6111      	str	r1, [r2, #16]
   1f9c8:	495b      	ldr	r1, [pc, #364]	; (1fb38 <usbd_work_handler+0x2c8>)
   1f9ca:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f9ce:	2304      	movs	r3, #4
   1f9d0:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f9d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f9d8:	607b      	str	r3, [r7, #4]
   1f9da:	f00a fad8 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1f9de:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
   1f9e0:	4852      	ldr	r0, [pc, #328]	; (1fb2c <usbd_work_handler+0x2bc>)
   1f9e2:	f00a fad9 	bl	29f98 <k_mutex_unlock.isra.0>
   1f9e6:	e75c      	b.n	1f8a2 <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1f9e8:	682b      	ldr	r3, [r5, #0]
   1f9ea:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1f9ec:	7a68      	ldrb	r0, [r5, #9]
   1f9ee:	4798      	blx	r3
		break;
   1f9f0:	e757      	b.n	1f8a2 <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   1f9f2:	7aab      	ldrb	r3, [r5, #10]
   1f9f4:	b96b      	cbnz	r3, 1fa12 <usbd_work_handler+0x1a2>
   1f9f6:	7feb      	ldrb	r3, [r5, #31]
   1f9f8:	b95b      	cbnz	r3, 1fa12 <usbd_work_handler+0x1a2>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f9fa:	484c      	ldr	r0, [pc, #304]	; (1fb2c <usbd_work_handler+0x2bc>)
   1f9fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fa00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa04:	f00a fac6 	bl	29f94 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   1fa08:	f003 ffa4 	bl	23954 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   1fa0c:	4847      	ldr	r0, [pc, #284]	; (1fb2c <usbd_work_handler+0x2bc>)
   1fa0e:	f00a fac3 	bl	29f98 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1fa12:	682b      	ldr	r3, [r5, #0]
   1fa14:	2102      	movs	r1, #2
   1fa16:	e7e9      	b.n	1f9ec <usbd_work_handler+0x17c>
	switch (pwr_evt->state) {
   1fa18:	7a33      	ldrb	r3, [r6, #8]
   1fa1a:	2b04      	cmp	r3, #4
   1fa1c:	f63f af41 	bhi.w	1f8a2 <usbd_work_handler+0x32>
   1fa20:	e8df f003 	tbb	[pc, r3]
   1fa24:	6925035b 	.word	0x6925035b
   1fa28:	8e          	.byte	0x8e
   1fa29:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   1fa2a:	f003 fd1d 	bl	23468 <nrfx_usbd_is_enabled>
   1fa2e:	4605      	mov	r5, r0
   1fa30:	2800      	cmp	r0, #0
   1fa32:	f47f af36 	bne.w	1f8a2 <usbd_work_handler+0x32>
			nrfx_usbd_enable();
   1fa36:	f003 fc5b 	bl	232f0 <nrfx_usbd_enable>
   1fa3a:	f3bf 8f5b 	dmb	ish
   1fa3e:	493f      	ldr	r1, [pc, #252]	; (1fb3c <usbd_work_handler+0x2cc>)
   1fa40:	2301      	movs	r3, #1
   1fa42:	e851 2f00 	ldrex	r2, [r1]
   1fa46:	2a00      	cmp	r2, #0
   1fa48:	d103      	bne.n	1fa52 <usbd_work_handler+0x1e2>
   1fa4a:	e841 3000 	strex	r0, r3, [r1]
   1fa4e:	2800      	cmp	r0, #0
   1fa50:	d1f7      	bne.n	1fa42 <usbd_work_handler+0x1d2>
   1fa52:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   1fa56:	f47f af24 	bne.w	1f8a2 <usbd_work_handler+0x32>
   1fa5a:	f841 5c10 	str.w	r5, [r1, #-16]
   1fa5e:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1fa62:	69e0      	ldr	r0, [r4, #28]
   1fa64:	6163      	str	r3, [r4, #20]
   1fa66:	3914      	subs	r1, #20
   1fa68:	f006 f8e2 	bl	25c30 <onoff_request>
   1fa6c:	e719      	b.n	1f8a2 <usbd_work_handler+0x32>
	switch (pwr_evt->state) {
   1fa6e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1fa70:	f065 007f 	orn	r0, r5, #127	; 0x7f
   1fa74:	b2c0      	uxtb	r0, r0
   1fa76:	f7ff fc75 	bl	1f364 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1fa7a:	7a03      	ldrb	r3, [r0, #8]
   1fa7c:	b113      	cbz	r3, 1fa84 <usbd_work_handler+0x214>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1fa7e:	7a40      	ldrb	r0, [r0, #9]
   1fa80:	f004 f954 	bl	23d2c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   1fa84:	3501      	adds	r5, #1
   1fa86:	2d08      	cmp	r5, #8
   1fa88:	d1f2      	bne.n	1fa70 <usbd_work_handler+0x200>
		if (ep_ctx->cfg.en) {
   1fa8a:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   1fa8e:	b11b      	cbz	r3, 1fa98 <usbd_work_handler+0x228>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1fa90:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   1fa94:	f004 f94a 	bl	23d2c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   1fa98:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1fa9a:	b2e8      	uxtb	r0, r5
   1fa9c:	f7ff fc62 	bl	1f364 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1faa0:	7a03      	ldrb	r3, [r0, #8]
   1faa2:	b113      	cbz	r3, 1faaa <usbd_work_handler+0x23a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1faa4:	7a40      	ldrb	r0, [r0, #9]
   1faa6:	f004 f941 	bl	23d2c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   1faaa:	3501      	adds	r5, #1
   1faac:	2d08      	cmp	r5, #8
   1faae:	d1f4      	bne.n	1fa9a <usbd_work_handler+0x22a>
		if (ep_ctx->cfg.en) {
   1fab0:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1fab4:	b11b      	cbz	r3, 1fabe <usbd_work_handler+0x24e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1fab6:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   1faba:	f004 f937 	bl	23d2c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   1fabe:	2001      	movs	r0, #1
   1fac0:	f003 fcb4 	bl	2342c <nrfx_usbd_start>
		ctx->ready = true;
   1fac4:	2301      	movs	r3, #1
   1fac6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   1faca:	6823      	ldr	r3, [r4, #0]
   1facc:	2b00      	cmp	r3, #0
   1face:	f43f aee8 	beq.w	1f8a2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   1fad2:	2100      	movs	r1, #0
   1fad4:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
   1fad6:	4798      	blx	r3
   1fad8:	e6e3      	b.n	1f8a2 <usbd_work_handler+0x32>
		ctx->ready = false;
   1fada:	2500      	movs	r5, #0
   1fadc:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   1fae0:	f004 f8b0 	bl	23c44 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   1fae4:	f7ff fdaa 	bl	1f63c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   1fae8:	6823      	ldr	r3, [r4, #0]
   1faea:	2b00      	cmp	r3, #0
   1faec:	f43f aed9 	beq.w	1f8a2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   1faf0:	4629      	mov	r1, r5
   1faf2:	2004      	movs	r0, #4
   1faf4:	e7ef      	b.n	1fad6 <usbd_work_handler+0x266>
		if (dev_ready()) {
   1faf6:	2a00      	cmp	r2, #0
   1faf8:	f43f aed3 	beq.w	1f8a2 <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
   1fafc:	f004 f8ba 	bl	23c74 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   1fb00:	6823      	ldr	r3, [r4, #0]
   1fb02:	2b00      	cmp	r3, #0
   1fb04:	f43f aecd 	beq.w	1f8a2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   1fb08:	2100      	movs	r1, #0
   1fb0a:	2005      	movs	r0, #5
   1fb0c:	e7e3      	b.n	1fad6 <usbd_work_handler+0x266>
   1fb0e:	bf00      	nop
   1fb10:	200057a0 	.word	0x200057a0
   1fb14:	20000ac8 	.word	0x20000ac8
   1fb18:	200009f8 	.word	0x200009f8
   1fb1c:	000315e9 	.word	0x000315e9
   1fb20:	0003182d 	.word	0x0003182d
   1fb24:	40027000 	.word	0x40027000
   1fb28:	200057a4 	.word	0x200057a4
   1fb2c:	200057d8 	.word	0x200057d8
   1fb30:	0bad0000 	.word	0x0bad0000
   1fb34:	00031613 	.word	0x00031613
   1fb38:	000317a3 	.word	0x000317a3
   1fb3c:	200057c0 	.word	0x200057c0
		if (ctx->status_cb && dev_ready()) {
   1fb40:	6823      	ldr	r3, [r4, #0]
   1fb42:	2b00      	cmp	r3, #0
   1fb44:	f43f aead 	beq.w	1f8a2 <usbd_work_handler+0x32>
   1fb48:	2a00      	cmp	r2, #0
   1fb4a:	f43f aeaa 	beq.w	1f8a2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
   1fb4e:	2100      	movs	r1, #0
   1fb50:	2006      	movs	r0, #6
   1fb52:	e7c0      	b.n	1fad6 <usbd_work_handler+0x266>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1fb54:	f108 0510 	add.w	r5, r8, #16
   1fb58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fb60:	4628      	mov	r0, r5
   1fb62:	f00a fa17 	bl	29f94 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   1fb66:	f7ff fe4f 	bl	1f808 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   1fb6a:	4628      	mov	r0, r5
   1fb6c:	f00a fa14 	bl	29f98 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   1fb70:	f858 3c28 	ldr.w	r3, [r8, #-40]
   1fb74:	2b00      	cmp	r3, #0
   1fb76:	f43f ae94 	beq.w	1f8a2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
   1fb7a:	2100      	movs	r1, #0
   1fb7c:	2001      	movs	r0, #1
   1fb7e:	e7aa      	b.n	1fad6 <usbd_work_handler+0x266>
	if (ep_ctx->cfg.en) {
   1fb80:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1fb84:	b1c3      	cbz	r3, 1fbb8 <usbd_work_handler+0x348>
		ep_ctx->read_pending = true;
   1fb86:	2501      	movs	r5, #1
   1fb88:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   1fb8c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   1fb90:	f7ff fc58 	bl	1f444 <usbd_evt_alloc>
		if (!ev) {
   1fb94:	b9c0      	cbnz	r0, 1fbc8 <usbd_work_handler+0x358>
			LOG_ERR("Failed to alloc evt");
   1fb96:	482d      	ldr	r0, [pc, #180]	; (1fc4c <usbd_work_handler+0x3dc>)
   1fb98:	6803      	ldr	r3, [r0, #0]
   1fb9a:	075d      	lsls	r5, r3, #29
   1fb9c:	d00c      	beq.n	1fbb8 <usbd_work_handler+0x348>
   1fb9e:	4b2c      	ldr	r3, [pc, #176]	; (1fc50 <usbd_work_handler+0x3e0>)
   1fba0:	61bb      	str	r3, [r7, #24]
   1fba2:	4b2c      	ldr	r3, [pc, #176]	; (1fc54 <usbd_work_handler+0x3e4>)
   1fba4:	61fb      	str	r3, [r7, #28]
   1fba6:	f107 0214 	add.w	r2, r7, #20
   1fbaa:	2303      	movs	r3, #3
   1fbac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fbb0:	607b      	str	r3, [r7, #4]
   1fbb2:	617b      	str	r3, [r7, #20]
   1fbb4:	f00a f9eb 	bl	29f8e <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
   1fbb8:	f858 3c28 	ldr.w	r3, [r8, #-40]
   1fbbc:	2b00      	cmp	r3, #0
   1fbbe:	f43f ae70 	beq.w	1f8a2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
   1fbc2:	2100      	movs	r1, #0
   1fbc4:	200a      	movs	r0, #10
   1fbc6:	e786      	b.n	1fad6 <usbd_work_handler+0x266>
		ev->evt.ep_evt.ep = ep_ctx;
   1fbc8:	4a23      	ldr	r2, [pc, #140]	; (1fc58 <usbd_work_handler+0x3e8>)
		ev->evt_type = USBD_EVT_EP;
   1fbca:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1fbcc:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   1fbce:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   1fbd0:	f7ff fbf0 	bl	1f3b4 <usbd_evt_put>
		usbd_work_schedule();
   1fbd4:	f7ff fbf4 	bl	1f3c0 <usbd_work_schedule>
   1fbd8:	e7ee      	b.n	1fbb8 <usbd_work_handler+0x348>
				LOG_ERR("USBD event queue full!");
   1fbda:	481c      	ldr	r0, [pc, #112]	; (1fc4c <usbd_work_handler+0x3dc>)
   1fbdc:	6803      	ldr	r3, [r0, #0]
   1fbde:	0759      	lsls	r1, r3, #29
   1fbe0:	d00c      	beq.n	1fbfc <usbd_work_handler+0x38c>
   1fbe2:	4b1e      	ldr	r3, [pc, #120]	; (1fc5c <usbd_work_handler+0x3ec>)
   1fbe4:	61bb      	str	r3, [r7, #24]
   1fbe6:	4b1e      	ldr	r3, [pc, #120]	; (1fc60 <usbd_work_handler+0x3f0>)
   1fbe8:	61fb      	str	r3, [r7, #28]
   1fbea:	f107 0214 	add.w	r2, r7, #20
   1fbee:	2303      	movs	r3, #3
   1fbf0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fbf4:	607b      	str	r3, [r7, #4]
   1fbf6:	617b      	str	r3, [r7, #20]
   1fbf8:	f00a f9c9 	bl	29f8e <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
   1fbfc:	f00a fd50 	bl	2a6a0 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1fc00:	f004 f820 	bl	23c44 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   1fc04:	f003 fb6a 	bl	232dc <nrfx_usbd_uninit>
	usbd_evt_flush();
   1fc08:	f7ff fc0e 	bl	1f428 <usbd_evt_flush>
	ret = eps_ctx_init();
   1fc0c:	f7ff fdfc 	bl	1f808 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1fc10:	f00a fd3f 	bl	2a692 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   1fc14:	4813      	ldr	r0, [pc, #76]	; (1fc64 <usbd_work_handler+0x3f4>)
   1fc16:	f003 fc31 	bl	2347c <nrfx_usbd_init>
}
   1fc1a:	e642      	b.n	1f8a2 <usbd_work_handler+0x32>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1fc1c:	480b      	ldr	r0, [pc, #44]	; (1fc4c <usbd_work_handler+0x3dc>)
   1fc1e:	6802      	ldr	r2, [r0, #0]
   1fc20:	0752      	lsls	r2, r2, #29
   1fc22:	f43f ae3e 	beq.w	1f8a2 <usbd_work_handler+0x32>
   1fc26:	466d      	mov	r5, sp
   1fc28:	b088      	sub	sp, #32
   1fc2a:	466a      	mov	r2, sp
   1fc2c:	490e      	ldr	r1, [pc, #56]	; (1fc68 <usbd_work_handler+0x3f8>)
   1fc2e:	6111      	str	r1, [r2, #16]
   1fc30:	490b      	ldr	r1, [pc, #44]	; (1fc60 <usbd_work_handler+0x3f0>)
		switch (ev->evt_type) {
   1fc32:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1fc36:	2304      	movs	r3, #4
   1fc38:	f842 3f0c 	str.w	r3, [r2, #12]!
   1fc3c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fc40:	60bb      	str	r3, [r7, #8]
   1fc42:	f00a f9a4 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1fc46:	46ad      	mov	sp, r5
   1fc48:	e62b      	b.n	1f8a2 <usbd_work_handler+0x32>
   1fc4a:	bf00      	nop
   1fc4c:	200009f8 	.word	0x200009f8
   1fc50:	0003163d 	.word	0x0003163d
   1fc54:	00031789 	.word	0x00031789
   1fc58:	20005a0c 	.word	0x20005a0c
   1fc5c:	00031655 	.word	0x00031655
   1fc60:	0003182d 	.word	0x0003182d
   1fc64:	0001f681 	.word	0x0001f681
   1fc68:	00031670 	.word	0x00031670

0001fc6c <usb_dc_attach>:
{
   1fc6c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   1fc6e:	4d1a      	ldr	r5, [pc, #104]	; (1fcd8 <usb_dc_attach+0x6c>)
   1fc70:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   1fc74:	bb5c      	cbnz	r4, 1fcce <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   1fc76:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1fc7a:	f00a ff84 	bl	2ab86 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1fc7e:	4620      	mov	r0, r4
   1fc80:	f000 fce0 	bl	20644 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fc84:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   1fc86:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fc88:	2101      	movs	r1, #1
   1fc8a:	2027      	movs	r0, #39	; 0x27
   1fc8c:	f7ec f868 	bl	bd60 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   1fc90:	4812      	ldr	r0, [pc, #72]	; (1fcdc <usb_dc_attach+0x70>)
   1fc92:	f003 fbf3 	bl	2347c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   1fc96:	4b12      	ldr	r3, [pc, #72]	; (1fce0 <usb_dc_attach+0x74>)
   1fc98:	4298      	cmp	r0, r3
   1fc9a:	d11a      	bne.n	1fcd2 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   1fc9c:	f00a fcf9 	bl	2a692 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   1fca0:	f7ff fdb2 	bl	1f808 <eps_ctx_init>
	if (ret == 0) {
   1fca4:	4604      	mov	r4, r0
   1fca6:	b910      	cbnz	r0, 1fcae <usb_dc_attach+0x42>
		ctx->attached = true;
   1fca8:	2301      	movs	r3, #1
   1fcaa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1fcae:	4b0d      	ldr	r3, [pc, #52]	; (1fce4 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   1fcb0:	681b      	ldr	r3, [r3, #0]
   1fcb2:	b10b      	cbz	r3, 1fcb8 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   1fcb4:	f7ff fb84 	bl	1f3c0 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   1fcb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fcbc:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   1fcc0:	07db      	lsls	r3, r3, #31
   1fcc2:	d502      	bpl.n	1fcca <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   1fcc4:	2000      	movs	r0, #0
   1fcc6:	f7ff fc7f 	bl	1f5c8 <usb_dc_power_event_handler>
}
   1fcca:	4620      	mov	r0, r4
   1fccc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1fcce:	2400      	movs	r4, #0
   1fcd0:	e7fb      	b.n	1fcca <usb_dc_attach+0x5e>
		return -EIO;
   1fcd2:	f06f 0404 	mvn.w	r4, #4
   1fcd6:	e7f8      	b.n	1fcca <usb_dc_attach+0x5e>
   1fcd8:	200057a0 	.word	0x200057a0
   1fcdc:	0001f681 	.word	0x0001f681
   1fce0:	0bad0000 	.word	0x0bad0000
   1fce4:	20000c00 	.word	0x20000c00

0001fce8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   1fce8:	4b07      	ldr	r3, [pc, #28]	; (1fd08 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   1fcea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1fcee:	b13a      	cbz	r2, 1fd00 <usb_dc_set_address+0x18>
   1fcf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   1fcf4:	2b00      	cmp	r3, #0
   1fcf6:	bf0c      	ite	eq
   1fcf8:	f06f 0012 	mvneq.w	r0, #18
   1fcfc:	2000      	movne	r0, #0
   1fcfe:	4770      	bx	lr
		return -ENODEV;
   1fd00:	f06f 0012 	mvn.w	r0, #18
}
   1fd04:	4770      	bx	lr
   1fd06:	bf00      	nop
   1fd08:	200057a0 	.word	0x200057a0

0001fd0c <usb_dc_ep_check_cap>:
{
   1fd0c:	b500      	push	{lr}
   1fd0e:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1fd10:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1fd12:	791b      	ldrb	r3, [r3, #4]
{
   1fd14:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1fd16:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1fd1a:	b9a3      	cbnz	r3, 1fd46 <usb_dc_ep_check_cap+0x3a>
   1fd1c:	2800      	cmp	r0, #0
   1fd1e:	d02f      	beq.n	1fd80 <usb_dc_ep_check_cap+0x74>
		LOG_ERR("invalid endpoint configuration");
   1fd20:	4819      	ldr	r0, [pc, #100]	; (1fd88 <usb_dc_ep_check_cap+0x7c>)
   1fd22:	6803      	ldr	r3, [r0, #0]
   1fd24:	0759      	lsls	r1, r3, #29
   1fd26:	d00b      	beq.n	1fd40 <usb_dc_ep_check_cap+0x34>
   1fd28:	4b18      	ldr	r3, [pc, #96]	; (1fd8c <usb_dc_ep_check_cap+0x80>)
		LOG_ERR("invalid endpoint index/address");
   1fd2a:	9306      	str	r3, [sp, #24]
   1fd2c:	4b18      	ldr	r3, [pc, #96]	; (1fd90 <usb_dc_ep_check_cap+0x84>)
   1fd2e:	9307      	str	r3, [sp, #28]
   1fd30:	2303      	movs	r3, #3
   1fd32:	9301      	str	r3, [sp, #4]
   1fd34:	9305      	str	r3, [sp, #20]
   1fd36:	aa05      	add	r2, sp, #20
   1fd38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fd3c:	f00a f927 	bl	29f8e <z_log_msg2_static_create.constprop.0>
		return -1;
   1fd40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fd44:	e01c      	b.n	1fd80 <usb_dc_ep_check_cap+0x74>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   1fd46:	2808      	cmp	r0, #8
   1fd48:	d905      	bls.n	1fd56 <usb_dc_ep_check_cap+0x4a>
		LOG_ERR("invalid endpoint index/address");
   1fd4a:	480f      	ldr	r0, [pc, #60]	; (1fd88 <usb_dc_ep_check_cap+0x7c>)
   1fd4c:	6803      	ldr	r3, [r0, #0]
   1fd4e:	075a      	lsls	r2, r3, #29
   1fd50:	d0f6      	beq.n	1fd40 <usb_dc_ep_check_cap+0x34>
   1fd52:	4b10      	ldr	r3, [pc, #64]	; (1fd94 <usb_dc_ep_check_cap+0x88>)
   1fd54:	e7e9      	b.n	1fd2a <usb_dc_ep_check_cap+0x1e>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   1fd56:	2b01      	cmp	r3, #1
   1fd58:	d111      	bne.n	1fd7e <usb_dc_ep_check_cap+0x72>
   1fd5a:	0713      	lsls	r3, r2, #28
   1fd5c:	d40f      	bmi.n	1fd7e <usb_dc_ep_check_cap+0x72>
		LOG_WRN("invalid endpoint type");
   1fd5e:	480a      	ldr	r0, [pc, #40]	; (1fd88 <usb_dc_ep_check_cap+0x7c>)
   1fd60:	6803      	ldr	r3, [r0, #0]
   1fd62:	f013 0f06 	tst.w	r3, #6
   1fd66:	d0eb      	beq.n	1fd40 <usb_dc_ep_check_cap+0x34>
   1fd68:	4b0b      	ldr	r3, [pc, #44]	; (1fd98 <usb_dc_ep_check_cap+0x8c>)
   1fd6a:	9306      	str	r3, [sp, #24]
   1fd6c:	4b08      	ldr	r3, [pc, #32]	; (1fd90 <usb_dc_ep_check_cap+0x84>)
   1fd6e:	9307      	str	r3, [sp, #28]
   1fd70:	2303      	movs	r3, #3
   1fd72:	9301      	str	r3, [sp, #4]
   1fd74:	9305      	str	r3, [sp, #20]
   1fd76:	aa05      	add	r2, sp, #20
   1fd78:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fd7c:	e7de      	b.n	1fd3c <usb_dc_ep_check_cap+0x30>
	return 0;
   1fd7e:	2000      	movs	r0, #0
}
   1fd80:	b009      	add	sp, #36	; 0x24
   1fd82:	f85d fb04 	ldr.w	pc, [sp], #4
   1fd86:	bf00      	nop
   1fd88:	200009f8 	.word	0x200009f8
   1fd8c:	0003168b 	.word	0x0003168b
   1fd90:	000317bd 	.word	0x000317bd
   1fd94:	000316ae 	.word	0x000316ae
   1fd98:	000316d1 	.word	0x000316d1

0001fd9c <usb_dc_ep_configure>:
{
   1fd9c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   1fd9e:	4b19      	ldr	r3, [pc, #100]	; (1fe04 <usb_dc_ep_configure+0x68>)
	if (!dev_attached()) {
   1fda0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   1fda4:	b088      	sub	sp, #32
   1fda6:	4601      	mov	r1, r0
	if (!dev_attached()) {
   1fda8:	b343      	cbz	r3, 1fdfc <usb_dc_ep_configure+0x60>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   1fdaa:	7804      	ldrb	r4, [r0, #0]
   1fdac:	4620      	mov	r0, r4
   1fdae:	f7ff fad9 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1fdb2:	b918      	cbnz	r0, 1fdbc <usb_dc_ep_configure+0x20>
			return -EINVAL;
   1fdb4:	f06f 0015 	mvn.w	r0, #21
}
   1fdb8:	b008      	add	sp, #32
   1fdba:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   1fdbc:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1fdbe:	790b      	ldrb	r3, [r1, #4]
   1fdc0:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1fdc2:	8849      	ldrh	r1, [r1, #2]
   1fdc4:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   1fdc6:	0722      	lsls	r2, r4, #28
   1fdc8:	d413      	bmi.n	1fdf2 <usb_dc_ep_configure+0x56>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   1fdca:	1e4b      	subs	r3, r1, #1
   1fdcc:	420b      	tst	r3, r1
   1fdce:	d010      	beq.n	1fdf2 <usb_dc_ep_configure+0x56>
			LOG_ERR("EP max packet size must be a power of 2");
   1fdd0:	480d      	ldr	r0, [pc, #52]	; (1fe08 <usb_dc_ep_configure+0x6c>)
   1fdd2:	6803      	ldr	r3, [r0, #0]
   1fdd4:	075b      	lsls	r3, r3, #29
   1fdd6:	d0ed      	beq.n	1fdb4 <usb_dc_ep_configure+0x18>
   1fdd8:	4b0c      	ldr	r3, [pc, #48]	; (1fe0c <usb_dc_ep_configure+0x70>)
   1fdda:	9306      	str	r3, [sp, #24]
   1fddc:	4b0c      	ldr	r3, [pc, #48]	; (1fe10 <usb_dc_ep_configure+0x74>)
   1fdde:	9307      	str	r3, [sp, #28]
   1fde0:	aa05      	add	r2, sp, #20
   1fde2:	2303      	movs	r3, #3
   1fde4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fde8:	9301      	str	r3, [sp, #4]
   1fdea:	9305      	str	r3, [sp, #20]
   1fdec:	f00a f8cf 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   1fdf0:	e7e0      	b.n	1fdb4 <usb_dc_ep_configure+0x18>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1fdf2:	4620      	mov	r0, r4
   1fdf4:	f00a fd8b 	bl	2a90e <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   1fdf8:	2000      	movs	r0, #0
   1fdfa:	e7dd      	b.n	1fdb8 <usb_dc_ep_configure+0x1c>
		return -ENODEV;
   1fdfc:	f06f 0012 	mvn.w	r0, #18
   1fe00:	e7da      	b.n	1fdb8 <usb_dc_ep_configure+0x1c>
   1fe02:	bf00      	nop
   1fe04:	200057a0 	.word	0x200057a0
   1fe08:	200009f8 	.word	0x200009f8
   1fe0c:	000316eb 	.word	0x000316eb
   1fe10:	0003188f 	.word	0x0003188f

0001fe14 <usb_dc_ep_set_stall>:
{
   1fe14:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   1fe16:	4b1b      	ldr	r3, [pc, #108]	; (1fe84 <usb_dc_ep_set_stall+0x70>)
	if (!dev_attached() || !dev_ready()) {
   1fe18:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fe1c:	b088      	sub	sp, #32
   1fe1e:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1fe20:	b36a      	cbz	r2, 1fe7e <usb_dc_ep_set_stall+0x6a>
   1fe22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fe26:	b353      	cbz	r3, 1fe7e <usb_dc_ep_set_stall+0x6a>
	ep_ctx = endpoint_ctx(ep);
   1fe28:	f7ff fa9c 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1fe2c:	4604      	mov	r4, r0
   1fe2e:	b318      	cbz	r0, 1fe78 <usb_dc_ep_set_stall+0x64>
	switch (ep_ctx->cfg.type) {
   1fe30:	7a83      	ldrb	r3, [r0, #10]
   1fe32:	2b01      	cmp	r3, #1
   1fe34:	d010      	beq.n	1fe58 <usb_dc_ep_set_stall+0x44>
   1fe36:	d908      	bls.n	1fe4a <usb_dc_ep_set_stall+0x36>
   1fe38:	3b02      	subs	r3, #2
   1fe3a:	2b01      	cmp	r3, #1
   1fe3c:	d908      	bls.n	1fe50 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1fe3e:	6963      	ldr	r3, [r4, #20]
   1fe40:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   1fe42:	2000      	movs	r0, #0
   1fe44:	60e0      	str	r0, [r4, #12]
}
   1fe46:	b008      	add	sp, #32
   1fe48:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   1fe4a:	f003 fd8b 	bl	23964 <nrfx_usbd_setup_stall>
		break;
   1fe4e:	e7f6      	b.n	1fe3e <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   1fe50:	4608      	mov	r0, r1
   1fe52:	f003 fcfb 	bl	2384c <nrfx_usbd_ep_stall>
		break;
   1fe56:	e7f2      	b.n	1fe3e <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
   1fe58:	480b      	ldr	r0, [pc, #44]	; (1fe88 <usb_dc_ep_set_stall+0x74>)
   1fe5a:	6803      	ldr	r3, [r0, #0]
   1fe5c:	075b      	lsls	r3, r3, #29
   1fe5e:	d00b      	beq.n	1fe78 <usb_dc_ep_set_stall+0x64>
   1fe60:	4b0a      	ldr	r3, [pc, #40]	; (1fe8c <usb_dc_ep_set_stall+0x78>)
   1fe62:	9306      	str	r3, [sp, #24]
   1fe64:	4b0a      	ldr	r3, [pc, #40]	; (1fe90 <usb_dc_ep_set_stall+0x7c>)
   1fe66:	9307      	str	r3, [sp, #28]
   1fe68:	aa05      	add	r2, sp, #20
   1fe6a:	2303      	movs	r3, #3
   1fe6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fe70:	9301      	str	r3, [sp, #4]
   1fe72:	9305      	str	r3, [sp, #20]
   1fe74:	f00a f88b 	bl	29f8e <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1fe78:	f06f 0015 	mvn.w	r0, #21
   1fe7c:	e7e3      	b.n	1fe46 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
   1fe7e:	f06f 0012 	mvn.w	r0, #18
   1fe82:	e7e0      	b.n	1fe46 <usb_dc_ep_set_stall+0x32>
   1fe84:	200057a0 	.word	0x200057a0
   1fe88:	200009f8 	.word	0x200009f8
   1fe8c:	00031717 	.word	0x00031717
   1fe90:	0003187b 	.word	0x0003187b

0001fe94 <usb_dc_ep_clear_stall>:
{
   1fe94:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1fe96:	4b0e      	ldr	r3, [pc, #56]	; (1fed0 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   1fe98:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fe9c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   1fe9e:	b182      	cbz	r2, 1fec2 <usb_dc_ep_clear_stall+0x2e>
   1fea0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fea4:	b16b      	cbz	r3, 1fec2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   1fea6:	f7ff fa5d 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1feaa:	b168      	cbz	r0, 1fec8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   1feac:	f015 0408 	ands.w	r4, r5, #8
   1feb0:	d10a      	bne.n	1fec8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1feb2:	4628      	mov	r0, r5
   1feb4:	f003 fcec 	bl	23890 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1feb8:	4628      	mov	r0, r5
   1feba:	f003 ff89 	bl	23dd0 <nrfx_usbd_ep_stall_clear>
	return 0;
   1febe:	4620      	mov	r0, r4
}
   1fec0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1fec2:	f06f 0012 	mvn.w	r0, #18
   1fec6:	e7fb      	b.n	1fec0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   1fec8:	f06f 0015 	mvn.w	r0, #21
   1fecc:	e7f8      	b.n	1fec0 <usb_dc_ep_clear_stall+0x2c>
   1fece:	bf00      	nop
   1fed0:	200057a0 	.word	0x200057a0

0001fed4 <usb_dc_ep_is_stalled>:
{
   1fed4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1fed6:	4b0c      	ldr	r3, [pc, #48]	; (1ff08 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   1fed8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fedc:	4605      	mov	r5, r0
   1fede:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   1fee0:	b162      	cbz	r2, 1fefc <usb_dc_ep_is_stalled+0x28>
   1fee2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fee6:	b14b      	cbz	r3, 1fefc <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   1fee8:	f7ff fa3c 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1feec:	b148      	cbz	r0, 1ff02 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   1feee:	b141      	cbz	r1, 1ff02 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   1fef0:	4628      	mov	r0, r5
   1fef2:	f003 fcb3 	bl	2385c <nrfx_usbd_ep_stall_check>
   1fef6:	7020      	strb	r0, [r4, #0]
	return 0;
   1fef8:	2000      	movs	r0, #0
}
   1fefa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1fefc:	f06f 0012 	mvn.w	r0, #18
   1ff00:	e7fb      	b.n	1fefa <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   1ff02:	f06f 0015 	mvn.w	r0, #21
   1ff06:	e7f8      	b.n	1fefa <usb_dc_ep_is_stalled+0x26>
   1ff08:	200057a0 	.word	0x200057a0

0001ff0c <usb_dc_ep_enable>:
{
   1ff0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   1ff0e:	4f13      	ldr	r7, [pc, #76]	; (1ff5c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   1ff10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   1ff14:	4604      	mov	r4, r0
	if (!dev_attached()) {
   1ff16:	b1bb      	cbz	r3, 1ff48 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   1ff18:	f7ff fa24 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1ff1c:	4605      	mov	r5, r0
   1ff1e:	b1b0      	cbz	r0, 1ff4e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   1ff20:	0723      	lsls	r3, r4, #28
   1ff22:	d405      	bmi.n	1ff30 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1ff24:	4620      	mov	r0, r4
   1ff26:	f003 fcb3 	bl	23890 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1ff2a:	4620      	mov	r0, r4
   1ff2c:	f003 ff50 	bl	23dd0 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   1ff30:	7a2e      	ldrb	r6, [r5, #8]
   1ff32:	b97e      	cbnz	r6, 1ff54 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   1ff34:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   1ff38:	2301      	movs	r3, #1
   1ff3a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   1ff3c:	b118      	cbz	r0, 1ff46 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   1ff3e:	4620      	mov	r0, r4
   1ff40:	f003 fef4 	bl	23d2c <nrfx_usbd_ep_enable>
	return 0;
   1ff44:	4630      	mov	r0, r6
}
   1ff46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1ff48:	f06f 0012 	mvn.w	r0, #18
   1ff4c:	e7fb      	b.n	1ff46 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   1ff4e:	f06f 0015 	mvn.w	r0, #21
   1ff52:	e7f8      	b.n	1ff46 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   1ff54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ff58:	e7f5      	b.n	1ff46 <usb_dc_ep_enable+0x3a>
   1ff5a:	bf00      	nop
   1ff5c:	200057a0 	.word	0x200057a0

0001ff60 <usb_dc_ep_disable>:
{
   1ff60:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1ff62:	4b11      	ldr	r3, [pc, #68]	; (1ffa8 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   1ff64:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1ff68:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1ff6a:	b19a      	cbz	r2, 1ff94 <usb_dc_ep_disable+0x34>
   1ff6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1ff70:	b183      	cbz	r3, 1ff94 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   1ff72:	f7ff f9f7 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1ff76:	4605      	mov	r5, r0
   1ff78:	b178      	cbz	r0, 1ff9a <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   1ff7a:	7a03      	ldrb	r3, [r0, #8]
   1ff7c:	b183      	cbz	r3, 1ffa0 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1ff7e:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   1ff80:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1ff82:	f003 fea7 	bl	23cd4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   1ff86:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   1ff88:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   1ff8a:	f009 ffed 	bl	29f68 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   1ff8e:	722c      	strb	r4, [r5, #8]
	return 0;
   1ff90:	4620      	mov	r0, r4
}
   1ff92:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1ff94:	f06f 0012 	mvn.w	r0, #18
   1ff98:	e7fb      	b.n	1ff92 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   1ff9a:	f06f 0015 	mvn.w	r0, #21
   1ff9e:	e7f8      	b.n	1ff92 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   1ffa0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ffa4:	e7f5      	b.n	1ff92 <usb_dc_ep_disable+0x32>
   1ffa6:	bf00      	nop
   1ffa8:	200057a0 	.word	0x200057a0

0001ffac <usb_dc_ep_write>:
{
   1ffac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
   1ffb0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 200ec <usb_dc_ep_write+0x140>
{
   1ffb4:	b084      	sub	sp, #16
   1ffb6:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   1ffb8:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
   1ffbc:	af00      	add	r7, sp, #0
   1ffbe:	4680      	mov	r8, r0
   1ffc0:	468a      	mov	sl, r1
   1ffc2:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   1ffc4:	2b00      	cmp	r3, #0
   1ffc6:	f000 808d 	beq.w	200e4 <usb_dc_ep_write+0x138>
   1ffca:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
   1ffce:	2b00      	cmp	r3, #0
   1ffd0:	f000 8088 	beq.w	200e4 <usb_dc_ep_write+0x138>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   1ffd4:	f010 0f80 	tst.w	r0, #128	; 0x80
   1ffd8:	d01a      	beq.n	20010 <usb_dc_ep_write+0x64>
	ep_ctx = endpoint_ctx(ep);
   1ffda:	f7ff f9c3 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   1ffde:	4605      	mov	r5, r0
   1ffe0:	b1b0      	cbz	r0, 20010 <usb_dc_ep_write+0x64>
	if (!ep_ctx->cfg.en) {
   1ffe2:	7a03      	ldrb	r3, [r0, #8]
   1ffe4:	b9bb      	cbnz	r3, 20016 <usb_dc_ep_write+0x6a>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1ffe6:	4842      	ldr	r0, [pc, #264]	; (200f0 <usb_dc_ep_write+0x144>)
   1ffe8:	6803      	ldr	r3, [r0, #0]
   1ffea:	0759      	lsls	r1, r3, #29
   1ffec:	d010      	beq.n	20010 <usb_dc_ep_write+0x64>
   1ffee:	466c      	mov	r4, sp
   1fff0:	b088      	sub	sp, #32
   1fff2:	466a      	mov	r2, sp
   1fff4:	4b3f      	ldr	r3, [pc, #252]	; (200f4 <usb_dc_ep_write+0x148>)
   1fff6:	6113      	str	r3, [r2, #16]
   1fff8:	4b3f      	ldr	r3, [pc, #252]	; (200f8 <usb_dc_ep_write+0x14c>)
   1fffa:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1fffe:	2304      	movs	r3, #4
   20000:	f842 3f0c 	str.w	r3, [r2, #12]!
   20004:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20008:	607b      	str	r3, [r7, #4]
   2000a:	f009 ffc0 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   2000e:	46a5      	mov	sp, r4
		return -EINVAL;
   20010:	f06f 0415 	mvn.w	r4, #21
   20014:	e00f      	b.n	20036 <usb_dc_ep_write+0x8a>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   20016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2001a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2001e:	f109 0038 	add.w	r0, r9, #56	; 0x38
   20022:	f009 ffb7 	bl	29f94 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   20026:	7fab      	ldrb	r3, [r5, #30]
   20028:	b153      	cbz	r3, 20040 <usb_dc_ep_write+0x94>
		k_mutex_unlock(&ctx->drv_lock);
   2002a:	f109 0038 	add.w	r0, r9, #56	; 0x38
   2002e:	f009 ffb3 	bl	29f98 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   20032:	f06f 040a 	mvn.w	r4, #10
}
   20036:	4620      	mov	r0, r4
   20038:	3710      	adds	r7, #16
   2003a:	46bd      	mov	sp, r7
   2003c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   20040:	b916      	cbnz	r6, 20048 <usb_dc_ep_write+0x9c>
   20042:	7feb      	ldrb	r3, [r5, #31]
   20044:	b103      	cbz	r3, 20048 <usb_dc_ep_write+0x9c>
		ep_ctx->trans_zlp = false;
   20046:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   20048:	7aab      	ldrb	r3, [r5, #10]
   2004a:	b9bb      	cbnz	r3, 2007c <usb_dc_ep_write+0xd0>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2004c:	b15e      	cbz	r6, 20066 <usb_dc_ep_write+0xba>
   2004e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   20052:	429e      	cmp	r6, r3
   20054:	d207      	bcs.n	20066 <usb_dc_ep_write+0xba>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   20056:	686a      	ldr	r2, [r5, #4]
   20058:	fbb6 f3f2 	udiv	r3, r6, r2
   2005c:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   20060:	b90b      	cbnz	r3, 20066 <usb_dc_ep_write+0xba>
			ep_ctx->trans_zlp = true;
   20062:	2301      	movs	r3, #1
   20064:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   20066:	f003 fc85 	bl	23974 <nrfx_usbd_last_setup_dir_get>
   2006a:	4580      	cmp	r8, r0
   2006c:	d006      	beq.n	2007c <usb_dc_ep_write+0xd0>
		nrfx_usbd_setup_clear();
   2006e:	f003 fc71 	bl	23954 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   20072:	4822      	ldr	r0, [pc, #136]	; (200fc <usb_dc_ep_write+0x150>)
   20074:	f009 ff90 	bl	29f98 <k_mutex_unlock.isra.0>
		return 0;
   20078:	2400      	movs	r4, #0
   2007a:	e7dc      	b.n	20036 <usb_dc_ep_write+0x8a>
	ep_ctx->write_in_progress = true;
   2007c:	2301      	movs	r3, #1
   2007e:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   20080:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   20084:	1d39      	adds	r1, r7, #4
   20086:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   20088:	e9c7 a601 	strd	sl, r6, [r7, #4]
   2008c:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   20090:	f003 fa3a 	bl	23508 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   20094:	4a1a      	ldr	r2, [pc, #104]	; (20100 <usb_dc_ep_write+0x154>)
   20096:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   20098:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
   2009a:	d01c      	beq.n	200d6 <usb_dc_ep_write+0x12a>
		ep_ctx->write_in_progress = false;
   2009c:	f885 901e 	strb.w	r9, [r5, #30]
		if (ret_bytes) {
   200a0:	b10c      	cbz	r4, 200a6 <usb_dc_ep_write+0xfa>
			*ret_bytes = 0;
   200a2:	f8c4 9000 	str.w	r9, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   200a6:	4812      	ldr	r0, [pc, #72]	; (200f0 <usb_dc_ep_write+0x144>)
   200a8:	6802      	ldr	r2, [r0, #0]
   200aa:	0752      	lsls	r2, r2, #29
   200ac:	d010      	beq.n	200d0 <usb_dc_ep_write+0x124>
   200ae:	466c      	mov	r4, sp
   200b0:	b088      	sub	sp, #32
   200b2:	466a      	mov	r2, sp
   200b4:	4913      	ldr	r1, [pc, #76]	; (20104 <usb_dc_ep_write+0x158>)
   200b6:	6111      	str	r1, [r2, #16]
   200b8:	490f      	ldr	r1, [pc, #60]	; (200f8 <usb_dc_ep_write+0x14c>)
   200ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   200be:	2304      	movs	r3, #4
   200c0:	f842 3f0c 	str.w	r3, [r2, #12]!
   200c4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   200c8:	603b      	str	r3, [r7, #0]
   200ca:	f009 ff60 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   200ce:	46a5      	mov	sp, r4
		result = -EIO;
   200d0:	f06f 0404 	mvn.w	r4, #4
   200d4:	e002      	b.n	200dc <usb_dc_ep_write+0x130>
		if (ret_bytes) {
   200d6:	b10c      	cbz	r4, 200dc <usb_dc_ep_write+0x130>
			*ret_bytes = data_len;
   200d8:	6026      	str	r6, [r4, #0]
	int result = 0;
   200da:	464c      	mov	r4, r9
	k_mutex_unlock(&ctx->drv_lock);
   200dc:	4807      	ldr	r0, [pc, #28]	; (200fc <usb_dc_ep_write+0x150>)
   200de:	f009 ff5b 	bl	29f98 <k_mutex_unlock.isra.0>
	return result;
   200e2:	e7a8      	b.n	20036 <usb_dc_ep_write+0x8a>
		return -ENODEV;
   200e4:	f06f 0412 	mvn.w	r4, #18
   200e8:	e7a5      	b.n	20036 <usb_dc_ep_write+0x8a>
   200ea:	bf00      	nop
   200ec:	200057a0 	.word	0x200057a0
   200f0:	200009f8 	.word	0x200009f8
   200f4:	0003173d 	.word	0x0003173d
   200f8:	0003186b 	.word	0x0003186b
   200fc:	200057d8 	.word	0x200057d8
   20100:	0bad0000 	.word	0x0bad0000
   20104:	00031760 	.word	0x00031760

00020108 <usb_dc_ep_read_wait>:
{
   20108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2010c:	461d      	mov	r5, r3
   2010e:	b083      	sub	sp, #12
	return get_usbd_ctx()->attached;
   20110:	4b30      	ldr	r3, [pc, #192]	; (201d4 <usb_dc_ep_read_wait+0xcc>)
{
   20112:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
   20114:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   20118:	af00      	add	r7, sp, #0
   2011a:	4681      	mov	r9, r0
   2011c:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   2011e:	2a00      	cmp	r2, #0
   20120:	d054      	beq.n	201cc <usb_dc_ep_read_wait+0xc4>
   20122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   20126:	2b00      	cmp	r3, #0
   20128:	d050      	beq.n	201cc <usb_dc_ep_read_wait+0xc4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2012a:	f010 0f80 	tst.w	r0, #128	; 0x80
   2012e:	d11f      	bne.n	20170 <usb_dc_ep_read_wait+0x68>
	if (!data && max_data_len) {
   20130:	b911      	cbnz	r1, 20138 <usb_dc_ep_read_wait+0x30>
   20132:	f1b8 0f00 	cmp.w	r8, #0
   20136:	d11b      	bne.n	20170 <usb_dc_ep_read_wait+0x68>
	ep_ctx = endpoint_ctx(ep);
   20138:	4648      	mov	r0, r9
   2013a:	f7ff f913 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   2013e:	4604      	mov	r4, r0
   20140:	b1b0      	cbz	r0, 20170 <usb_dc_ep_read_wait+0x68>
	if (!ep_ctx->cfg.en) {
   20142:	7a03      	ldrb	r3, [r0, #8]
   20144:	b9bb      	cbnz	r3, 20176 <usb_dc_ep_read_wait+0x6e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   20146:	4824      	ldr	r0, [pc, #144]	; (201d8 <usb_dc_ep_read_wait+0xd0>)
   20148:	6803      	ldr	r3, [r0, #0]
   2014a:	075b      	lsls	r3, r3, #29
   2014c:	d010      	beq.n	20170 <usb_dc_ep_read_wait+0x68>
   2014e:	466c      	mov	r4, sp
   20150:	b088      	sub	sp, #32
   20152:	466a      	mov	r2, sp
   20154:	4b21      	ldr	r3, [pc, #132]	; (201dc <usb_dc_ep_read_wait+0xd4>)
   20156:	6113      	str	r3, [r2, #16]
   20158:	4b21      	ldr	r3, [pc, #132]	; (201e0 <usb_dc_ep_read_wait+0xd8>)
   2015a:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2015e:	2304      	movs	r3, #4
   20160:	f842 3f0c 	str.w	r3, [r2, #12]!
   20164:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20168:	607b      	str	r3, [r7, #4]
   2016a:	f009 ff10 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   2016e:	46a5      	mov	sp, r4
		return -EINVAL;
   20170:	f06f 0015 	mvn.w	r0, #21
   20174:	e015      	b.n	201a2 <usb_dc_ep_read_wait+0x9a>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   20176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2017a:	481a      	ldr	r0, [pc, #104]	; (201e4 <usb_dc_ep_read_wait+0xdc>)
   2017c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20180:	f009 ff08 	bl	29f94 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   20184:	68e3      	ldr	r3, [r4, #12]
   20186:	4543      	cmp	r3, r8
   20188:	4699      	mov	r9, r3
   2018a:	bf28      	it	cs
   2018c:	46c1      	movcs	r9, r8
	if (!data && !max_data_len) {
   2018e:	b966      	cbnz	r6, 201aa <usb_dc_ep_read_wait+0xa2>
   20190:	f1b8 0f00 	cmp.w	r8, #0
   20194:	d109      	bne.n	201aa <usb_dc_ep_read_wait+0xa2>
		if (read_bytes) {
   20196:	b105      	cbz	r5, 2019a <usb_dc_ep_read_wait+0x92>
			*read_bytes = ep_ctx->buf.len;
   20198:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   2019a:	4812      	ldr	r0, [pc, #72]	; (201e4 <usb_dc_ep_read_wait+0xdc>)
   2019c:	f009 fefc 	bl	29f98 <k_mutex_unlock.isra.0>
		return 0;
   201a0:	2000      	movs	r0, #0
}
   201a2:	370c      	adds	r7, #12
   201a4:	46bd      	mov	sp, r7
   201a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   201aa:	69a1      	ldr	r1, [r4, #24]
   201ac:	464a      	mov	r2, r9
   201ae:	4630      	mov	r0, r6
   201b0:	f008 fafe 	bl	287b0 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   201b4:	69a3      	ldr	r3, [r4, #24]
   201b6:	444b      	add	r3, r9
   201b8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   201ba:	68e3      	ldr	r3, [r4, #12]
   201bc:	eba3 0309 	sub.w	r3, r3, r9
   201c0:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   201c2:	2d00      	cmp	r5, #0
   201c4:	d0e9      	beq.n	2019a <usb_dc_ep_read_wait+0x92>
		*read_bytes = bytes_to_copy;
   201c6:	f8c5 9000 	str.w	r9, [r5]
   201ca:	e7e6      	b.n	2019a <usb_dc_ep_read_wait+0x92>
		return -ENODEV;
   201cc:	f06f 0012 	mvn.w	r0, #18
   201d0:	e7e7      	b.n	201a2 <usb_dc_ep_read_wait+0x9a>
   201d2:	bf00      	nop
   201d4:	200057a0 	.word	0x200057a0
   201d8:	200009f8 	.word	0x200009f8
   201dc:	0003173d 	.word	0x0003173d
   201e0:	00031857 	.word	0x00031857
   201e4:	200057d8 	.word	0x200057d8

000201e8 <usb_dc_ep_read_continue>:
{
   201e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   201ea:	4d2b      	ldr	r5, [pc, #172]	; (20298 <usb_dc_ep_read_continue+0xb0>)
{
   201ec:	b083      	sub	sp, #12
	if (!dev_attached() || !dev_ready()) {
   201ee:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
   201f2:	af00      	add	r7, sp, #0
   201f4:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   201f6:	2b00      	cmp	r3, #0
   201f8:	d04b      	beq.n	20292 <usb_dc_ep_read_continue+0xaa>
   201fa:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   201fe:	2b00      	cmp	r3, #0
   20200:	d047      	beq.n	20292 <usb_dc_ep_read_continue+0xaa>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   20202:	0602      	lsls	r2, r0, #24
   20204:	d41a      	bmi.n	2023c <usb_dc_ep_read_continue+0x54>
	ep_ctx = endpoint_ctx(ep);
   20206:	f7ff f8ad 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   2020a:	4604      	mov	r4, r0
   2020c:	b1b0      	cbz	r0, 2023c <usb_dc_ep_read_continue+0x54>
	if (!ep_ctx->cfg.en) {
   2020e:	7a03      	ldrb	r3, [r0, #8]
   20210:	b9bb      	cbnz	r3, 20242 <usb_dc_ep_read_continue+0x5a>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   20212:	4822      	ldr	r0, [pc, #136]	; (2029c <usb_dc_ep_read_continue+0xb4>)
   20214:	6803      	ldr	r3, [r0, #0]
   20216:	075b      	lsls	r3, r3, #29
   20218:	d010      	beq.n	2023c <usb_dc_ep_read_continue+0x54>
   2021a:	466c      	mov	r4, sp
   2021c:	b088      	sub	sp, #32
   2021e:	466a      	mov	r2, sp
   20220:	4b1f      	ldr	r3, [pc, #124]	; (202a0 <usb_dc_ep_read_continue+0xb8>)
   20222:	6113      	str	r3, [r2, #16]
   20224:	4b1f      	ldr	r3, [pc, #124]	; (202a4 <usb_dc_ep_read_continue+0xbc>)
   20226:	e9c2 3105 	strd	r3, r1, [r2, #20]
   2022a:	2304      	movs	r3, #4
   2022c:	f842 3f0c 	str.w	r3, [r2, #12]!
   20230:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20234:	607b      	str	r3, [r7, #4]
   20236:	f009 feaa 	bl	29f8e <z_log_msg2_static_create.constprop.0>
   2023a:	46a5      	mov	sp, r4
		return -EINVAL;
   2023c:	f06f 0015 	mvn.w	r0, #21
   20240:	e018      	b.n	20274 <usb_dc_ep_read_continue+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   20242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2024a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2024e:	f009 fea1 	bl	29f94 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   20252:	68e3      	ldr	r3, [r4, #12]
   20254:	b9c3      	cbnz	r3, 20288 <usb_dc_ep_read_continue+0xa0>
		ep_ctx->read_complete = true;
   20256:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   20258:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   2025a:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2025c:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   2025e:	7f63      	ldrb	r3, [r4, #29]
   20260:	b193      	cbz	r3, 20288 <usb_dc_ep_read_continue+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   20262:	f7ff f8ef 	bl	1f444 <usbd_evt_alloc>
			if (!ev) {
   20266:	b940      	cbnz	r0, 2027a <usb_dc_ep_read_continue+0x92>
				k_mutex_unlock(&ctx->drv_lock);
   20268:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2026c:	f009 fe94 	bl	29f98 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   20270:	f06f 000b 	mvn.w	r0, #11
}
   20274:	370c      	adds	r7, #12
   20276:	46bd      	mov	sp, r7
   20278:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ev->evt_type = USBD_EVT_EP;
   2027a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   2027c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2027e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   20280:	f7ff f898 	bl	1f3b4 <usbd_evt_put>
			usbd_work_schedule();
   20284:	f7ff f89c 	bl	1f3c0 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   20288:	4807      	ldr	r0, [pc, #28]	; (202a8 <usb_dc_ep_read_continue+0xc0>)
   2028a:	f009 fe85 	bl	29f98 <k_mutex_unlock.isra.0>
	return 0;
   2028e:	2000      	movs	r0, #0
   20290:	e7f0      	b.n	20274 <usb_dc_ep_read_continue+0x8c>
		return -ENODEV;
   20292:	f06f 0012 	mvn.w	r0, #18
   20296:	e7ed      	b.n	20274 <usb_dc_ep_read_continue+0x8c>
   20298:	200057a0 	.word	0x200057a0
   2029c:	200009f8 	.word	0x200009f8
   202a0:	0003173d 	.word	0x0003173d
   202a4:	0003183f 	.word	0x0003183f
   202a8:	200057d8 	.word	0x200057d8

000202ac <usb_dc_ep_set_callback>:
{
   202ac:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   202ae:	4b08      	ldr	r3, [pc, #32]	; (202d0 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   202b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   202b4:	b12b      	cbz	r3, 202c2 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   202b6:	f7ff f855 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   202ba:	b128      	cbz	r0, 202c8 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   202bc:	6001      	str	r1, [r0, #0]
	return 0;
   202be:	2000      	movs	r0, #0
}
   202c0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   202c2:	f06f 0012 	mvn.w	r0, #18
   202c6:	e7fb      	b.n	202c0 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   202c8:	f06f 0015 	mvn.w	r0, #21
   202cc:	e7f8      	b.n	202c0 <usb_dc_ep_set_callback+0x14>
   202ce:	bf00      	nop
   202d0:	200057a0 	.word	0x200057a0

000202d4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   202d4:	4b01      	ldr	r3, [pc, #4]	; (202dc <usb_dc_set_status_callback+0x8>)
   202d6:	6018      	str	r0, [r3, #0]
}
   202d8:	4770      	bx	lr
   202da:	bf00      	nop
   202dc:	200057a0 	.word	0x200057a0

000202e0 <usb_dc_ep_mps>:
{
   202e0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   202e2:	4b07      	ldr	r3, [pc, #28]	; (20300 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   202e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   202e8:	b123      	cbz	r3, 202f4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   202ea:	f7ff f83b 	bl	1f364 <endpoint_ctx>
	if (!ep_ctx) {
   202ee:	b120      	cbz	r0, 202fa <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   202f0:	6840      	ldr	r0, [r0, #4]
}
   202f2:	bd08      	pop	{r3, pc}
		return -ENODEV;
   202f4:	f06f 0012 	mvn.w	r0, #18
   202f8:	e7fb      	b.n	202f2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   202fa:	f06f 0015 	mvn.w	r0, #21
   202fe:	e7f8      	b.n	202f2 <usb_dc_ep_mps+0x12>
   20300:	200057a0 	.word	0x200057a0

00020304 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20304:	4b08      	ldr	r3, [pc, #32]	; (20328 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20306:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20308:	1ac3      	subs	r3, r0, r3
{
   2030a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2030c:	4907      	ldr	r1, [pc, #28]	; (2032c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   2030e:	109b      	asrs	r3, r3, #2
{
   20310:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20312:	4359      	muls	r1, r3
   20314:	4806      	ldr	r0, [pc, #24]	; (20330 <onoff_stop+0x2c>)
   20316:	2240      	movs	r2, #64	; 0x40
   20318:	f009 fe6b 	bl	29ff2 <stop>
	notify(mgr, res);
   2031c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2031e:	4601      	mov	r1, r0
	notify(mgr, res);
   20320:	4620      	mov	r0, r4
}
   20322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20326:	4718      	bx	r3
   20328:	20005a40 	.word	0x20005a40
   2032c:	b6db6db7 	.word	0xb6db6db7
   20330:	0002b5e8 	.word	0x0002b5e8

00020334 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20334:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20336:	4c0c      	ldr	r4, [pc, #48]	; (20368 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20338:	4a0c      	ldr	r2, [pc, #48]	; (2036c <onoff_start+0x38>)
   2033a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   2033c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2033e:	9300      	str	r3, [sp, #0]
{
   20340:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20342:	460b      	mov	r3, r1
   20344:	490a      	ldr	r1, [pc, #40]	; (20370 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   20346:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20348:	4361      	muls	r1, r4
{
   2034a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2034c:	4809      	ldr	r0, [pc, #36]	; (20374 <onoff_start+0x40>)
   2034e:	f009 fe7d 	bl	2a04c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20352:	1e01      	subs	r1, r0, #0
   20354:	da05      	bge.n	20362 <onoff_start+0x2e>
		notify(mgr, err);
   20356:	4630      	mov	r0, r6
   20358:	462b      	mov	r3, r5
	}
}
   2035a:	b002      	add	sp, #8
   2035c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   20360:	4718      	bx	r3
}
   20362:	b002      	add	sp, #8
   20364:	bd70      	pop	{r4, r5, r6, pc}
   20366:	bf00      	nop
   20368:	20005a40 	.word	0x20005a40
   2036c:	0002a0bb 	.word	0x0002a0bb
   20370:	b6db6db7 	.word	0xb6db6db7
   20374:	0002b5e8 	.word	0x0002b5e8

00020378 <hfclk_start>:
{
   20378:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2037a:	f00a ff21 	bl	2b1c0 <z_impl_k_uptime_ticks>
   2037e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20382:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
   20386:	4c07      	ldr	r4, [pc, #28]	; (203a4 <hfclk_start+0x2c>)
   20388:	fb02 3101 	mla	r1, r2, r1, r3
   2038c:	0bc0      	lsrs	r0, r0, #15
   2038e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   20392:	0bc9      	lsrs	r1, r1, #15
   20394:	e9c4 0100 	strd	r0, r1, [r4]
}
   20398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2039c:	2001      	movs	r0, #1
   2039e:	f00a b8ea 	b.w	2a576 <nrfx_clock_start>
   203a2:	bf00      	nop
   203a4:	200036d0 	.word	0x200036d0

000203a8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   203a8:	2200      	movs	r2, #0
{
   203aa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   203ac:	2101      	movs	r1, #1
{
   203ae:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   203b0:	4610      	mov	r0, r2
   203b2:	f7eb fcd5 	bl	bd60 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   203b6:	2000      	movs	r0, #0
   203b8:	f7eb fca0 	bl	bcfc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   203bc:	480f      	ldr	r0, [pc, #60]	; (203fc <clk_init+0x54>)
   203be:	f001 fecd 	bl	2215c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   203c2:	4b0f      	ldr	r3, [pc, #60]	; (20400 <clk_init+0x58>)
   203c4:	4298      	cmp	r0, r3
   203c6:	d115      	bne.n	203f4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   203c8:	f001 fed8 	bl	2217c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   203cc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   203ce:	490d      	ldr	r1, [pc, #52]	; (20404 <clk_init+0x5c>)
   203d0:	4630      	mov	r0, r6
   203d2:	f005 fc1a 	bl	25c0a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   203d6:	2800      	cmp	r0, #0
   203d8:	db0b      	blt.n	203f2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   203da:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   203dc:	4909      	ldr	r1, [pc, #36]	; (20404 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   203de:	2501      	movs	r5, #1
   203e0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   203e2:	f104 001c 	add.w	r0, r4, #28
   203e6:	f005 fc10 	bl	25c0a <onoff_manager_init>
		if (err < 0) {
   203ea:	2800      	cmp	r0, #0
   203ec:	db01      	blt.n	203f2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   203ee:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   203f0:	2000      	movs	r0, #0
}
   203f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   203f4:	f06f 0004 	mvn.w	r0, #4
   203f8:	e7fb      	b.n	203f2 <clk_init+0x4a>
   203fa:	bf00      	nop
   203fc:	0002043d 	.word	0x0002043d
   20400:	0bad0000 	.word	0x0bad0000
   20404:	0002da30 	.word	0x0002da30

00020408 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20408:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2040a:	230c      	movs	r3, #12
   2040c:	4809      	ldr	r0, [pc, #36]	; (20434 <clkstarted_handle.constprop.0+0x2c>)
   2040e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   20410:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20412:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   20414:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   20418:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2041a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   2041c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2041e:	4418      	add	r0, r3
   20420:	f009 fdd4 	bl	29fcc <set_on_state>
	if (callback) {
   20424:	b12d      	cbz	r5, 20432 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20426:	4632      	mov	r2, r6
   20428:	462b      	mov	r3, r5
   2042a:	4803      	ldr	r0, [pc, #12]	; (20438 <clkstarted_handle.constprop.0+0x30>)
}
   2042c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20430:	4718      	bx	r3
}
   20432:	bd70      	pop	{r4, r5, r6, pc}
   20434:	20005a40 	.word	0x20005a40
   20438:	0002b5e8 	.word	0x0002b5e8

0002043c <clock_event_handler>:
	switch (event) {
   2043c:	b110      	cbz	r0, 20444 <clock_event_handler+0x8>
   2043e:	2801      	cmp	r0, #1
   20440:	d004      	beq.n	2044c <clock_event_handler+0x10>
   20442:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20444:	4b03      	ldr	r3, [pc, #12]	; (20454 <clock_event_handler+0x18>)
   20446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20448:	075b      	lsls	r3, r3, #29
   2044a:	d101      	bne.n	20450 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2044c:	f7ff bfdc 	b.w	20408 <clkstarted_handle.constprop.0>
}
   20450:	4770      	bx	lr
   20452:	bf00      	nop
   20454:	20005a40 	.word	0x20005a40

00020458 <generic_hfclk_start>:
{
   20458:	b508      	push	{r3, lr}
	__asm__ volatile(
   2045a:	f04f 0320 	mov.w	r3, #32
   2045e:	f3ef 8111 	mrs	r1, BASEPRI
   20462:	f383 8812 	msr	BASEPRI_MAX, r3
   20466:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2046a:	4a11      	ldr	r2, [pc, #68]	; (204b0 <generic_hfclk_start+0x58>)
   2046c:	6813      	ldr	r3, [r2, #0]
   2046e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   20472:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   20476:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20478:	d00c      	beq.n	20494 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2047a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2047e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20482:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20486:	f013 0301 	ands.w	r3, r3, #1
   2048a:	d003      	beq.n	20494 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   2048c:	4809      	ldr	r0, [pc, #36]	; (204b4 <generic_hfclk_start+0x5c>)
   2048e:	f009 fd9d 	bl	29fcc <set_on_state>
			already_started = true;
   20492:	2301      	movs	r3, #1
	__asm__ volatile(
   20494:	f381 8811 	msr	BASEPRI, r1
   20498:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2049c:	b123      	cbz	r3, 204a8 <generic_hfclk_start+0x50>
}
   2049e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   204a2:	2000      	movs	r0, #0
   204a4:	f7ff bfb0 	b.w	20408 <clkstarted_handle.constprop.0>
}
   204a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   204ac:	f7ff bf64 	b.w	20378 <hfclk_start>
   204b0:	20005a90 	.word	0x20005a90
   204b4:	20005a80 	.word	0x20005a80

000204b8 <api_blocking_start>:
{
   204b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   204ba:	2200      	movs	r2, #0
   204bc:	2301      	movs	r3, #1
   204be:	e9cd 2302 	strd	r2, r3, [sp, #8]
   204c2:	ab04      	add	r3, sp, #16
   204c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   204c8:	4a09      	ldr	r2, [pc, #36]	; (204f0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   204ca:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   204ce:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   204d0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   204d4:	f009 fdea 	bl	2a0ac <api_start>
	if (err < 0) {
   204d8:	2800      	cmp	r0, #0
   204da:	db05      	blt.n	204e8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   204dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   204e0:	2300      	movs	r3, #0
   204e2:	4668      	mov	r0, sp
   204e4:	f004 fa78 	bl	249d8 <z_impl_k_sem_take>
}
   204e8:	b007      	add	sp, #28
   204ea:	f85d fb04 	ldr.w	pc, [sp], #4
   204ee:	bf00      	nop
   204f0:	0002a0d9 	.word	0x0002a0d9

000204f4 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   204f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   204f8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   204fc:	4605      	mov	r5, r0
   204fe:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
   20502:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   20506:	f04f 0320 	mov.w	r3, #32
   2050a:	f3ef 8711 	mrs	r7, BASEPRI
   2050e:	f383 8812 	msr	BASEPRI_MAX, r3
   20512:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   20516:	f00a fe53 	bl	2b1c0 <z_impl_k_uptime_ticks>
   2051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2051e:	fba0 4003 	umull	r4, r0, r0, r3
   20522:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20526:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2052a:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   2052e:	4b25      	ldr	r3, [pc, #148]	; (205c4 <cmd_status+0xd0>)
   20530:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   20534:	4b24      	ldr	r3, [pc, #144]	; (205c8 <cmd_status+0xd4>)
   20536:	0be4      	lsrs	r4, r4, #15
   20538:	f8d3 a000 	ldr.w	sl, [r3]
   2053c:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
   20540:	f387 8811 	msr	BASEPRI, r7
   20544:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   20548:	4a20      	ldr	r2, [pc, #128]	; (205cc <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
   2054a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 205d0 <cmd_status+0xdc>
   2054e:	4f21      	ldr	r7, [pc, #132]	; (205d4 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   20550:	4628      	mov	r0, r5
   20552:	2108      	movs	r1, #8
   20554:	f006 fca9 	bl	26eaa <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   20558:	f019 0f01 	tst.w	r9, #1
   2055c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 205d8 <cmd_status+0xe4>
   20560:	4a1e      	ldr	r2, [pc, #120]	; (205dc <cmd_status+0xe8>)
   20562:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   20566:	9300      	str	r3, [sp, #0]
   20568:	4628      	mov	r0, r5
   2056a:	bf14      	ite	ne
   2056c:	4643      	movne	r3, r8
   2056e:	463b      	moveq	r3, r7
   20570:	2108      	movs	r1, #8
   20572:	f006 fc9a 	bl	26eaa <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   20576:	eba4 030b 	sub.w	r3, r4, fp
   2057a:	9300      	str	r3, [sp, #0]
   2057c:	4628      	mov	r0, r5
   2057e:	465b      	mov	r3, fp
   20580:	4a17      	ldr	r2, [pc, #92]	; (205e0 <cmd_status+0xec>)
   20582:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   20584:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   20588:	f006 fc8f 	bl	26eaa <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   2058c:	4653      	mov	r3, sl
   2058e:	4628      	mov	r0, r5
   20590:	4a14      	ldr	r2, [pc, #80]	; (205e4 <cmd_status+0xf0>)
   20592:	9400      	str	r4, [sp, #0]
   20594:	2108      	movs	r1, #8
   20596:	f006 fc88 	bl	26eaa <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   2059a:	4628      	mov	r0, r5
   2059c:	4a12      	ldr	r2, [pc, #72]	; (205e8 <cmd_status+0xf4>)
   2059e:	2108      	movs	r1, #8
   205a0:	f006 fc83 	bl	26eaa <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   205a4:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   205a8:	9300      	str	r3, [sp, #0]
   205aa:	4628      	mov	r0, r5
   205ac:	4a0b      	ldr	r2, [pc, #44]	; (205dc <cmd_status+0xe8>)
   205ae:	2e00      	cmp	r6, #0
   205b0:	bf14      	ite	ne
   205b2:	4643      	movne	r3, r8
   205b4:	463b      	moveq	r3, r7
   205b6:	2108      	movs	r1, #8
   205b8:	f006 fc77 	bl	26eaa <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   205bc:	2000      	movs	r0, #0
   205be:	b003      	add	sp, #12
   205c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205c4:	200036d0 	.word	0x200036d0
   205c8:	200036d8 	.word	0x200036d8
   205cc:	000318a9 	.word	0x000318a9
   205d0:	0002e015 	.word	0x0002e015
   205d4:	000318a4 	.word	0x000318a4
   205d8:	20005a40 	.word	0x20005a40
   205dc:	000318b4 	.word	0x000318b4
   205e0:	000318ce 	.word	0x000318ce
   205e4:	000318f0 	.word	0x000318f0
   205e8:	00031911 	.word	0x00031911

000205ec <hfclk_stop>:
{
   205ec:	b510      	push	{r4, lr}
   205ee:	f00a fde7 	bl	2b1c0 <z_impl_k_uptime_ticks>
   205f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   205f6:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
   205fa:	4c07      	ldr	r4, [pc, #28]	; (20618 <hfclk_stop+0x2c>)
   205fc:	fb02 3101 	mla	r1, r2, r1, r3
   20600:	0bc0      	lsrs	r0, r0, #15
   20602:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   20606:	0bc9      	lsrs	r1, r1, #15
   20608:	e9c4 0100 	strd	r0, r1, [r4]
}
   2060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20610:	2001      	movs	r0, #1
   20612:	f001 bdc1 	b.w	22198 <nrfx_clock_stop>
   20616:	bf00      	nop
   20618:	200036d8 	.word	0x200036d8

0002061c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2061c:	4b08      	ldr	r3, [pc, #32]	; (20640 <generic_hfclk_stop+0x24>)
   2061e:	f3bf 8f5b 	dmb	ish
   20622:	e853 2f00 	ldrex	r2, [r3]
   20626:	f022 0102 	bic.w	r1, r2, #2
   2062a:	e843 1000 	strex	r0, r1, [r3]
   2062e:	2800      	cmp	r0, #0
   20630:	d1f7      	bne.n	20622 <generic_hfclk_stop+0x6>
   20632:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   20636:	07d3      	lsls	r3, r2, #31
   20638:	d401      	bmi.n	2063e <generic_hfclk_stop+0x22>
	hfclk_stop();
   2063a:	f7ff bfd7 	b.w	205ec <hfclk_stop>
}
   2063e:	4770      	bx	lr
   20640:	20005a90 	.word	0x20005a90

00020644 <z_nrf_clock_control_get_onoff>:
}
   20644:	4a02      	ldr	r2, [pc, #8]	; (20650 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   20646:	b2c3      	uxtb	r3, r0
}
   20648:	201c      	movs	r0, #28
   2064a:	fb03 2000 	mla	r0, r3, r0, r2
   2064e:	4770      	bx	lr
   20650:	20005a40 	.word	0x20005a40

00020654 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20654:	4b08      	ldr	r3, [pc, #32]	; (20678 <z_nrf_clock_bt_ctlr_hf_request+0x24>)
   20656:	f3bf 8f5b 	dmb	ish
   2065a:	e853 2f00 	ldrex	r2, [r3]
   2065e:	f042 0101 	orr.w	r1, r2, #1
   20662:	e843 1000 	strex	r0, r1, [r3]
   20666:	2800      	cmp	r0, #0
   20668:	d1f7      	bne.n	2065a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   2066a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   2066e:	0793      	lsls	r3, r2, #30
   20670:	d401      	bmi.n	20676 <z_nrf_clock_bt_ctlr_hf_request+0x22>
	hfclk_start();
   20672:	f7ff be81 	b.w	20378 <hfclk_start>
}
   20676:	4770      	bx	lr
   20678:	20005a90 	.word	0x20005a90

0002067c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2067c:	4b08      	ldr	r3, [pc, #32]	; (206a0 <z_nrf_clock_bt_ctlr_hf_release+0x24>)
   2067e:	f3bf 8f5b 	dmb	ish
   20682:	e853 2f00 	ldrex	r2, [r3]
   20686:	f022 0101 	bic.w	r1, r2, #1
   2068a:	e843 1000 	strex	r0, r1, [r3]
   2068e:	2800      	cmp	r0, #0
   20690:	d1f7      	bne.n	20682 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   20692:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   20696:	0793      	lsls	r3, r2, #30
   20698:	d401      	bmi.n	2069e <z_nrf_clock_bt_ctlr_hf_release+0x22>
	hfclk_stop();
   2069a:	f7ff bfa7 	b.w	205ec <hfclk_stop>
}
   2069e:	4770      	bx	lr
   206a0:	20005a90 	.word	0x20005a90

000206a4 <z_nrf_clock_control_lf_on>:
{
   206a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   206a8:	4939      	ldr	r1, [pc, #228]	; (20790 <z_nrf_clock_control_lf_on+0xec>)
   206aa:	f3bf 8f5b 	dmb	ish
   206ae:	4607      	mov	r7, r0
   206b0:	2201      	movs	r2, #1
   206b2:	e851 3f00 	ldrex	r3, [r1]
   206b6:	e841 2000 	strex	r0, r2, [r1]
   206ba:	2800      	cmp	r0, #0
   206bc:	d1f9      	bne.n	206b2 <z_nrf_clock_control_lf_on+0xe>
   206be:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   206c2:	b933      	cbnz	r3, 206d2 <z_nrf_clock_control_lf_on+0x2e>
   206c4:	4933      	ldr	r1, [pc, #204]	; (20794 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   206c6:	4834      	ldr	r0, [pc, #208]	; (20798 <z_nrf_clock_control_lf_on+0xf4>)
   206c8:	604b      	str	r3, [r1, #4]
   206ca:	60cb      	str	r3, [r1, #12]
   206cc:	608a      	str	r2, [r1, #8]
   206ce:	f005 faaf 	bl	25c30 <onoff_request>
	switch (start_mode) {
   206d2:	1e7b      	subs	r3, r7, #1
   206d4:	2b01      	cmp	r3, #1
   206d6:	d82f      	bhi.n	20738 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   206d8:	2f01      	cmp	r7, #1
   206da:	d107      	bne.n	206ec <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   206dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   206e0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   206e4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   206e8:	2b01      	cmp	r3, #1
   206ea:	d025      	beq.n	20738 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   206ec:	f00a fa21 	bl	2ab32 <k_is_in_isr>
   206f0:	4604      	mov	r4, r0
   206f2:	b918      	cbnz	r0, 206fc <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   206f4:	4b29      	ldr	r3, [pc, #164]	; (2079c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   206f6:	781b      	ldrb	r3, [r3, #0]
   206f8:	2b00      	cmp	r3, #0
   206fa:	d141      	bne.n	20780 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   206fc:	f04f 0320 	mov.w	r3, #32
   20700:	f3ef 8611 	mrs	r6, BASEPRI
   20704:	f383 8812 	msr	BASEPRI_MAX, r3
   20708:	f3bf 8f6f 	isb	sy
   2070c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2070e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 207a0 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20712:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   20716:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2071a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   2071e:	03d2      	lsls	r2, r2, #15
   20720:	d50c      	bpl.n	2073c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   20722:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20726:	2b01      	cmp	r3, #1
   20728:	d001      	beq.n	2072e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2072a:	2f01      	cmp	r7, #1
   2072c:	d106      	bne.n	2073c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   2072e:	b30c      	cbz	r4, 20774 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   20730:	f386 8811 	msr	BASEPRI, r6
   20734:	f3bf 8f6f 	isb	sy
}
   20738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2073c:	b1ac      	cbz	r4, 2076a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2073e:	4630      	mov	r0, r6
   20740:	f7eb fa52 	bl	bbe8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20744:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20748:	2b00      	cmp	r3, #0
   2074a:	d1e4      	bne.n	20716 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2074c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20750:	2a00      	cmp	r2, #0
   20752:	d0e0      	beq.n	20716 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20754:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20758:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2075c:	2301      	movs	r3, #1
   2075e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   20762:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20766:	60ab      	str	r3, [r5, #8]
}
   20768:	e7d5      	b.n	20716 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   2076a:	2100      	movs	r1, #0
   2076c:	2021      	movs	r0, #33	; 0x21
   2076e:	f004 fdf1 	bl	25354 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20772:	e7e7      	b.n	20744 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   20774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20778:	2202      	movs	r2, #2
   2077a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2077e:	e7db      	b.n	20738 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   20780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20784:	2202      	movs	r2, #2
   20786:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2078a:	4606      	mov	r6, r0
}
   2078c:	e7bf      	b.n	2070e <z_nrf_clock_control_lf_on+0x6a>
   2078e:	bf00      	nop
   20790:	20005a94 	.word	0x20005a94
   20794:	20005a30 	.word	0x20005a30
   20798:	20005a5c 	.word	0x20005a5c
   2079c:	20006425 	.word	0x20006425
   207a0:	e000e100 	.word	0xe000e100

000207a4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   207a4:	b530      	push	{r4, r5, lr}
	return port->config;
   207a6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   207a8:	7b04      	ldrb	r4, [r0, #12]
   207aa:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   207ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   207b2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   207b6:	b085      	sub	sp, #20
   207b8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   207bc:	d104      	bne.n	207c8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   207be:	4628      	mov	r0, r5
   207c0:	f001 ff98 	bl	226f4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   207c4:	2000      	movs	r0, #0
   207c6:	e032      	b.n	2082e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   207c8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   207cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   207d0:	d12f      	bne.n	20832 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   207d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   207d6:	bf0c      	ite	eq
   207d8:	2304      	moveq	r3, #4
   207da:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   207dc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   207e0:	6883      	ldr	r3, [r0, #8]
   207e2:	fa23 f101 	lsr.w	r1, r3, r1
   207e6:	07c9      	lsls	r1, r1, #31
   207e8:	d42f      	bmi.n	2084a <gpio_nrfx_pin_interrupt_configure+0xa6>
   207ea:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   207ee:	d12c      	bne.n	2084a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   207f0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   207f2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   207f4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   207f8:	4a1c      	ldr	r2, [pc, #112]	; (2086c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   207fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   207fe:	bf18      	it	ne
   20800:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20808:	07db      	lsls	r3, r3, #31
   2080a:	d41e      	bmi.n	2084a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2080c:	f10d 0407 	add.w	r4, sp, #7
   20810:	4621      	mov	r1, r4
   20812:	4628      	mov	r0, r5
   20814:	f001 fed2 	bl	225bc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20818:	4b15      	ldr	r3, [pc, #84]	; (20870 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   2081a:	4298      	cmp	r0, r3
   2081c:	d114      	bne.n	20848 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   2081e:	4620      	mov	r0, r4
   20820:	f001 ff1a 	bl	22658 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20824:	4b13      	ldr	r3, [pc, #76]	; (20874 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   20826:	4298      	cmp	r0, r3
   20828:	d00e      	beq.n	20848 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   2082a:	f06f 000b 	mvn.w	r0, #11
}
   2082e:	b005      	add	sp, #20
   20830:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20832:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   20836:	d005      	beq.n	20844 <gpio_nrfx_pin_interrupt_configure+0xa0>
   20838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2083c:	bf0c      	ite	eq
   2083e:	2302      	moveq	r3, #2
   20840:	2301      	movne	r3, #1
   20842:	e7cb      	b.n	207dc <gpio_nrfx_pin_interrupt_configure+0x38>
   20844:	2303      	movs	r3, #3
   20846:	e7c9      	b.n	207dc <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   20848:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2084a:	2300      	movs	r3, #0
   2084c:	4619      	mov	r1, r3
   2084e:	aa02      	add	r2, sp, #8
   20850:	4628      	mov	r0, r5
   20852:	f001 fd8d 	bl	22370 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20856:	4b07      	ldr	r3, [pc, #28]	; (20874 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   20858:	4298      	cmp	r0, r3
   2085a:	d104      	bne.n	20866 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2085c:	2101      	movs	r1, #1
   2085e:	4628      	mov	r0, r5
   20860:	f001 ff00 	bl	22664 <nrfx_gpiote_trigger_enable>
   20864:	e7ae      	b.n	207c4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   20866:	f06f 0004 	mvn.w	r0, #4
   2086a:	e7e0      	b.n	2082e <gpio_nrfx_pin_interrupt_configure+0x8a>
   2086c:	50000300 	.word	0x50000300
   20870:	0bad0004 	.word	0x0bad0004
   20874:	0bad0000 	.word	0x0bad0000

00020878 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20878:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2087a:	f001 fedd 	bl	22638 <nrfx_gpiote_is_init>
   2087e:	4604      	mov	r4, r0
   20880:	b968      	cbnz	r0, 2089e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   20882:	f001 feb1 	bl	225e8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20886:	4b08      	ldr	r3, [pc, #32]	; (208a8 <gpio_nrfx_init+0x30>)
   20888:	4298      	cmp	r0, r3
   2088a:	d10a      	bne.n	208a2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2088c:	4807      	ldr	r0, [pc, #28]	; (208ac <gpio_nrfx_init+0x34>)
   2088e:	4621      	mov	r1, r4
   20890:	f001 fe8e 	bl	225b0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20894:	4622      	mov	r2, r4
   20896:	2105      	movs	r1, #5
   20898:	2006      	movs	r0, #6
   2089a:	f7eb fa61 	bl	bd60 <z_arm_irq_priority_set>
		return 0;
   2089e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   208a0:	bd10      	pop	{r4, pc}
		return -EIO;
   208a2:	f06f 0004 	mvn.w	r0, #4
   208a6:	e7fb      	b.n	208a0 <gpio_nrfx_init+0x28>
   208a8:	0bad0000 	.word	0x0bad0000
   208ac:	000208b1 	.word	0x000208b1

000208b0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   208b0:	0942      	lsrs	r2, r0, #5
{
   208b2:	b570      	push	{r4, r5, r6, lr}
   208b4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   208b6:	d002      	beq.n	208be <nrfx_gpio_handler+0xe>
   208b8:	2a01      	cmp	r2, #1
   208ba:	d015      	beq.n	208e8 <nrfx_gpio_handler+0x38>
}
   208bc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   208be:	4e0b      	ldr	r6, [pc, #44]	; (208ec <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   208c0:	6932      	ldr	r2, [r6, #16]
   208c2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   208c4:	2900      	cmp	r1, #0
   208c6:	d0f9      	beq.n	208bc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   208c8:	f003 031f 	and.w	r3, r3, #31
   208cc:	2501      	movs	r5, #1
   208ce:	680c      	ldr	r4, [r1, #0]
   208d0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   208d2:	688a      	ldr	r2, [r1, #8]
   208d4:	402a      	ands	r2, r5
   208d6:	d002      	beq.n	208de <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   208d8:	684b      	ldr	r3, [r1, #4]
   208da:	4630      	mov	r0, r6
   208dc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   208de:	2c00      	cmp	r4, #0
   208e0:	d0ec      	beq.n	208bc <nrfx_gpio_handler+0xc>
   208e2:	4621      	mov	r1, r4
   208e4:	6824      	ldr	r4, [r4, #0]
   208e6:	e7f4      	b.n	208d2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   208e8:	4e01      	ldr	r6, [pc, #4]	; (208f0 <nrfx_gpio_handler+0x40>)
   208ea:	e7e9      	b.n	208c0 <nrfx_gpio_handler+0x10>
   208ec:	0002b600 	.word	0x0002b600
   208f0:	0002b618 	.word	0x0002b618

000208f4 <gpio_nrfx_pin_configure>:
{
   208f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   208f8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   208fa:	7b3b      	ldrb	r3, [r7, #12]
   208fc:	f001 051f 	and.w	r5, r1, #31
{
   20900:	b085      	sub	sp, #20
   20902:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20904:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   20908:	4614      	mov	r4, r2
   2090a:	b9ca      	cbnz	r2, 20940 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   2090c:	a902      	add	r1, sp, #8
   2090e:	4628      	mov	r0, r5
   20910:	f001 fe54 	bl	225bc <nrfx_gpiote_channel_get>
   20914:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   20916:	4628      	mov	r0, r5
   20918:	f001 ff14 	bl	22744 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   2091c:	4b48      	ldr	r3, [pc, #288]	; (20a40 <gpio_nrfx_pin_configure+0x14c>)
   2091e:	4298      	cmp	r0, r3
   20920:	d004      	beq.n	2092c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   20922:	f06f 0004 	mvn.w	r0, #4
}
   20926:	b005      	add	sp, #20
   20928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   2092c:	4284      	cmp	r4, r0
   2092e:	d105      	bne.n	2093c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   20930:	f89d 0008 	ldrb.w	r0, [sp, #8]
   20934:	f001 fe8a 	bl	2264c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   20938:	42a0      	cmp	r0, r4
   2093a:	d1f2      	bne.n	20922 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2093c:	2000      	movs	r0, #0
   2093e:	e7f2      	b.n	20926 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20940:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   20944:	f10d 0103 	add.w	r1, sp, #3
   20948:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   2094a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   2094e:	f001 fe35 	bl	225bc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20952:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   20954:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20956:	aa02      	add	r2, sp, #8
   20958:	4649      	mov	r1, r9
   2095a:	4628      	mov	r0, r5
   2095c:	f001 fd08 	bl	22370 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20960:	4b37      	ldr	r3, [pc, #220]	; (20a40 <gpio_nrfx_pin_configure+0x14c>)
   20962:	4298      	cmp	r0, r3
   20964:	d002      	beq.n	2096c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20966:	f06f 0015 	mvn.w	r0, #21
   2096a:	e7dc      	b.n	20926 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   2096c:	4580      	cmp	r8, r0
   2096e:	d103      	bne.n	20978 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   20970:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20974:	f001 fe6a 	bl	2264c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   20978:	05a3      	lsls	r3, r4, #22
   2097a:	d54e      	bpl.n	20a1a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2097c:	4b31      	ldr	r3, [pc, #196]	; (20a44 <gpio_nrfx_pin_configure+0x150>)
   2097e:	4a32      	ldr	r2, [pc, #200]	; (20a48 <gpio_nrfx_pin_configure+0x154>)
   20980:	4023      	ands	r3, r4
   20982:	4293      	cmp	r3, r2
   20984:	d03a      	beq.n	209fc <gpio_nrfx_pin_configure+0x108>
   20986:	d80c      	bhi.n	209a2 <gpio_nrfx_pin_configure+0xae>
   20988:	2b06      	cmp	r3, #6
   2098a:	d014      	beq.n	209b6 <gpio_nrfx_pin_configure+0xc2>
   2098c:	d804      	bhi.n	20998 <gpio_nrfx_pin_configure+0xa4>
   2098e:	b193      	cbz	r3, 209b6 <gpio_nrfx_pin_configure+0xc2>
   20990:	2b02      	cmp	r3, #2
   20992:	d1e8      	bne.n	20966 <gpio_nrfx_pin_configure+0x72>
   20994:	2304      	movs	r3, #4
   20996:	e00e      	b.n	209b6 <gpio_nrfx_pin_configure+0xc2>
   20998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2099c:	d1e3      	bne.n	20966 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   2099e:	2301      	movs	r3, #1
   209a0:	e009      	b.n	209b6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   209a2:	4a2a      	ldr	r2, [pc, #168]	; (20a4c <gpio_nrfx_pin_configure+0x158>)
   209a4:	4293      	cmp	r3, r2
   209a6:	d02b      	beq.n	20a00 <gpio_nrfx_pin_configure+0x10c>
   209a8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   209ac:	d02a      	beq.n	20a04 <gpio_nrfx_pin_configure+0x110>
   209ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   209b2:	d1d8      	bne.n	20966 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   209b4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   209b6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   209ba:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   209be:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   209c2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   209c4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   209c8:	bf54      	ite	pl
   209ca:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   209ce:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   209d0:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   209d2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   209d6:	d517      	bpl.n	20a08 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   209d8:	687b      	ldr	r3, [r7, #4]
   209da:	2101      	movs	r1, #1
   209dc:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   209e0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   209e4:	2200      	movs	r2, #0
   209e6:	a901      	add	r1, sp, #4
   209e8:	4628      	mov	r0, r5
   209ea:	f001 fd6f 	bl	224cc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   209ee:	4b14      	ldr	r3, [pc, #80]	; (20a40 <gpio_nrfx_pin_configure+0x14c>)
   209f0:	4298      	cmp	r0, r3
   209f2:	bf14      	ite	ne
   209f4:	f06f 0015 	mvnne.w	r0, #21
   209f8:	2000      	moveq	r0, #0
   209fa:	e794      	b.n	20926 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   209fc:	2307      	movs	r3, #7
   209fe:	e7da      	b.n	209b6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   20a00:	2305      	movs	r3, #5
   20a02:	e7d8      	b.n	209b6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   20a04:	2303      	movs	r3, #3
   20a06:	e7d6      	b.n	209b6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20a08:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   20a0a:	bf41      	itttt	mi
   20a0c:	687b      	ldrmi	r3, [r7, #4]
   20a0e:	2101      	movmi	r1, #1
   20a10:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   20a14:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   20a18:	e7e4      	b.n	209e4 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   20a1a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20a1c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   20a20:	bf54      	ite	pl
   20a22:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   20a26:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20a28:	461a      	mov	r2, r3
   20a2a:	a901      	add	r1, sp, #4
   20a2c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   20a2e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20a32:	f001 fc9d 	bl	22370 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20a36:	4b02      	ldr	r3, [pc, #8]	; (20a40 <gpio_nrfx_pin_configure+0x14c>)
   20a38:	4298      	cmp	r0, r3
   20a3a:	f43f af7f 	beq.w	2093c <gpio_nrfx_pin_configure+0x48>
   20a3e:	e792      	b.n	20966 <gpio_nrfx_pin_configure+0x72>
   20a40:	0bad0000 	.word	0x0bad0000
   20a44:	00f00006 	.word	0x00f00006
   20a48:	00100006 	.word	0x00100006
   20a4c:	00400002 	.word	0x00400002

00020a50 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
   20a50:	b510      	push	{r4, lr}
   20a52:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, I2C_DEVICE_PREFIX);
   20a54:	4905      	ldr	r1, [pc, #20]	; (20a6c <device_name_get+0x1c>)
   20a56:	f006 fc56 	bl	27306 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
   20a5a:	b100      	cbz	r0, 20a5e <device_name_get+0xe>
   20a5c:	6800      	ldr	r0, [r0, #0]
   20a5e:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
   20a60:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
   20a62:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
   20a66:	60e3      	str	r3, [r4, #12]
}
   20a68:	bd10      	pop	{r4, pc}
   20a6a:	bf00      	nop
   20a6c:	00031963 	.word	0x00031963

00020a70 <cmd_i2c_write_byte>:
{
   20a70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20a74:	4605      	mov	r5, r0
   20a76:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   20a78:	6850      	ldr	r0, [r2, #4]
   20a7a:	f003 fb0d 	bl	24098 <z_impl_device_get_binding>
	if (!dev) {
   20a7e:	4606      	mov	r6, r0
   20a80:	b950      	cbnz	r0, 20a98 <cmd_i2c_write_byte+0x28>
		shell_error(shell, "I2C: Device driver %s not found.",
   20a82:	4628      	mov	r0, r5
   20a84:	6863      	ldr	r3, [r4, #4]
   20a86:	4a1b      	ldr	r2, [pc, #108]	; (20af4 <cmd_i2c_write_byte+0x84>)
   20a88:	2101      	movs	r1, #1
   20a8a:	f006 fa0e 	bl	26eaa <shell_fprintf>
		return -ENODEV;
   20a8e:	f06f 0012 	mvn.w	r0, #18
}
   20a92:	b004      	add	sp, #16
   20a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
   20a98:	2210      	movs	r2, #16
   20a9a:	2100      	movs	r1, #0
   20a9c:	68a0      	ldr	r0, [r4, #8]
   20a9e:	f007 fcfa 	bl	28496 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
   20aa2:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
   20aa4:	4607      	mov	r7, r0
	reg_addr = strtol(argv[3], NULL, 16);
   20aa6:	2100      	movs	r1, #0
   20aa8:	68e0      	ldr	r0, [r4, #12]
   20aaa:	f007 fcf4 	bl	28496 <strtol>
	out_byte = strtol(argv[4], NULL, 16);
   20aae:	2210      	movs	r2, #16
	reg_addr = strtol(argv[3], NULL, 16);
   20ab0:	4680      	mov	r8, r0
	out_byte = strtol(argv[4], NULL, 16);
   20ab2:	2100      	movs	r1, #0
   20ab4:	6920      	ldr	r0, [r4, #16]
   20ab6:	f007 fcee 	bl	28496 <strtol>
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   20aba:	2302      	movs	r3, #2
	if (i2c_reg_write_byte(dev, dev_addr, reg_addr, out_byte) < 0) {
   20abc:	f88d 0001 	strb.w	r0, [sp, #1]
   20ac0:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20ac2:	f88d 300c 	strb.w	r3, [sp, #12]

	return i2c_transfer(dev, &msg, 1, addr);
   20ac6:	2201      	movs	r2, #1
   20ac8:	b2bb      	uxth	r3, r7
   20aca:	a901      	add	r1, sp, #4
   20acc:	4630      	mov	r0, r6
   20ace:	f88d 8000 	strb.w	r8, [sp]
	msg.buf = (uint8_t *)buf;
   20ad2:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   20ad6:	f009 fb53 	bl	2a180 <i2c_transfer>
   20ada:	2800      	cmp	r0, #0
   20adc:	da08      	bge.n	20af0 <cmd_i2c_write_byte+0x80>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
   20ade:	4628      	mov	r0, r5
   20ae0:	6863      	ldr	r3, [r4, #4]
   20ae2:	4a05      	ldr	r2, [pc, #20]	; (20af8 <cmd_i2c_write_byte+0x88>)
   20ae4:	2101      	movs	r1, #1
   20ae6:	f006 f9e0 	bl	26eaa <shell_fprintf>
		return -EIO;
   20aea:	f06f 0004 	mvn.w	r0, #4
   20aee:	e7d0      	b.n	20a92 <cmd_i2c_write_byte+0x22>
	return 0;
   20af0:	2000      	movs	r0, #0
   20af2:	e7ce      	b.n	20a92 <cmd_i2c_write_byte+0x22>
   20af4:	00031968 	.word	0x00031968
   20af8:	0003198a 	.word	0x0003198a

00020afc <cmd_i2c_read>:
{
   20afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b00:	4606      	mov	r6, r0
   20b02:	b08d      	sub	sp, #52	; 0x34
	dev = device_get_binding(argv[1]);
   20b04:	6850      	ldr	r0, [r2, #4]
{
   20b06:	460f      	mov	r7, r1
   20b08:	4614      	mov	r4, r2
   20b0a:	f003 fac5 	bl	24098 <z_impl_device_get_binding>
	if (!dev) {
   20b0e:	4680      	mov	r8, r0
   20b10:	b950      	cbnz	r0, 20b28 <cmd_i2c_read+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
   20b12:	4630      	mov	r0, r6
   20b14:	6863      	ldr	r3, [r4, #4]
   20b16:	4a27      	ldr	r2, [pc, #156]	; (20bb4 <cmd_i2c_read+0xb8>)
   20b18:	2101      	movs	r1, #1
   20b1a:	f006 f9c6 	bl	26eaa <shell_fprintf>
		return -ENODEV;
   20b1e:	f06f 0012 	mvn.w	r0, #18
}
   20b22:	b00d      	add	sp, #52	; 0x34
   20b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
   20b28:	2210      	movs	r2, #16
   20b2a:	2100      	movs	r1, #0
   20b2c:	68a0      	ldr	r0, [r4, #8]
   20b2e:	f007 fcb2 	bl	28496 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
   20b32:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
   20b34:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
   20b36:	2100      	movs	r1, #0
   20b38:	68e0      	ldr	r0, [r4, #12]
   20b3a:	f007 fcac 	bl	28496 <strtol>
	if (argc > 4) {
   20b3e:	2f04      	cmp	r7, #4
	reg_addr = strtol(argv[3], NULL, 16);
   20b40:	4605      	mov	r5, r0
	if (argc > 4) {
   20b42:	d92d      	bls.n	20ba0 <cmd_i2c_read+0xa4>
		num_bytes = strtol(argv[4], NULL, 16);
   20b44:	6920      	ldr	r0, [r4, #16]
   20b46:	2210      	movs	r2, #16
   20b48:	2100      	movs	r1, #0
   20b4a:	f007 fca4 	bl	28496 <strtol>
		if (num_bytes > MAX_I2C_BYTES)
   20b4e:	2810      	cmp	r0, #16
   20b50:	bfa8      	it	ge
   20b52:	2010      	movge	r0, #16
   20b54:	4607      	mov	r7, r0
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   20b56:	f10d 0307 	add.w	r3, sp, #7
   20b5a:	9306      	str	r3, [sp, #24]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20b5c:	2307      	movs	r3, #7
	if (i2c_burst_read(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
   20b5e:	f88d 5007 	strb.w	r5, [sp, #7]
   20b62:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	msg[0].flags = I2C_MSG_WRITE;
   20b66:	2500      	movs	r5, #0
	msg[0].len = num_write;
   20b68:	f04f 0b01 	mov.w	fp, #1
	msg[1].buf = (uint8_t *)read_buf;
   20b6c:	f10d 0a08 	add.w	sl, sp, #8

	return i2c_transfer(dev, msg, 2, addr);
   20b70:	fa1f f389 	uxth.w	r3, r9
   20b74:	2202      	movs	r2, #2
   20b76:	a906      	add	r1, sp, #24
   20b78:	4640      	mov	r0, r8
	msg[1].len = num_read;
   20b7a:	e9cd a709 	strd	sl, r7, [sp, #36]	; 0x24
	msg[0].len = num_write;
   20b7e:	f8cd b01c 	str.w	fp, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   20b82:	f88d 5020 	strb.w	r5, [sp, #32]
	return i2c_transfer(dev, msg, 2, addr);
   20b86:	f009 fafb 	bl	2a180 <i2c_transfer>
   20b8a:	42a8      	cmp	r0, r5
   20b8c:	da0a      	bge.n	20ba4 <cmd_i2c_read+0xa8>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
   20b8e:	4630      	mov	r0, r6
   20b90:	6863      	ldr	r3, [r4, #4]
   20b92:	4a09      	ldr	r2, [pc, #36]	; (20bb8 <cmd_i2c_read+0xbc>)
   20b94:	4659      	mov	r1, fp
   20b96:	f006 f988 	bl	26eaa <shell_fprintf>
		return -EIO;
   20b9a:	f06f 0004 	mvn.w	r0, #4
   20b9e:	e7c0      	b.n	20b22 <cmd_i2c_read+0x26>
		num_bytes = MAX_I2C_BYTES;
   20ba0:	2710      	movs	r7, #16
   20ba2:	e7d8      	b.n	20b56 <cmd_i2c_read+0x5a>
	shell_hexdump(shell, buf, num_bytes);
   20ba4:	4630      	mov	r0, r6
   20ba6:	463a      	mov	r2, r7
   20ba8:	4651      	mov	r1, sl
   20baa:	f006 f98b 	bl	26ec4 <shell_hexdump>
	return 0;
   20bae:	4628      	mov	r0, r5
   20bb0:	e7b7      	b.n	20b22 <cmd_i2c_read+0x26>
   20bb2:	bf00      	nop
   20bb4:	00031968 	.word	0x00031968
   20bb8:	000319a9 	.word	0x000319a9

00020bbc <cmd_i2c_scan>:
{
   20bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bc0:	4604      	mov	r4, r0
   20bc2:	b087      	sub	sp, #28
	dev = device_get_binding(argv[1]);
   20bc4:	6850      	ldr	r0, [r2, #4]
{
   20bc6:	4617      	mov	r7, r2
   20bc8:	f003 fa66 	bl	24098 <z_impl_device_get_binding>
	if (!dev) {
   20bcc:	4681      	mov	r9, r0
   20bce:	b950      	cbnz	r0, 20be6 <cmd_i2c_scan+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
   20bd0:	4620      	mov	r0, r4
   20bd2:	687b      	ldr	r3, [r7, #4]
   20bd4:	4a2a      	ldr	r2, [pc, #168]	; (20c80 <cmd_i2c_scan+0xc4>)
   20bd6:	2101      	movs	r1, #1
   20bd8:	f006 f967 	bl	26eaa <shell_fprintf>
		return -ENODEV;
   20bdc:	f06f 0012 	mvn.w	r0, #18
}
   20be0:	b007      	add	sp, #28
   20be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell,
   20be6:	4a27      	ldr	r2, [pc, #156]	; (20c84 <cmd_i2c_scan+0xc8>)
   20be8:	2108      	movs	r1, #8
   20bea:	4620      	mov	r0, r4
   20bec:	f006 f95d 	bl	26eaa <shell_fprintf>
   20bf0:	f04f 0800 	mov.w	r8, #0
	uint8_t cnt = 0, first = 0x04, last = 0x77;
   20bf4:	4646      	mov	r6, r8
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
   20bf6:	4a24      	ldr	r2, [pc, #144]	; (20c88 <cmd_i2c_scan+0xcc>)
				shell_fprintf(shell, SHELL_NORMAL,
   20bf8:	f8df a090 	ldr.w	sl, [pc, #144]	; 20c8c <cmd_i2c_scan+0xd0>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
   20bfc:	f8df b090 	ldr.w	fp, [pc, #144]	; 20c90 <cmd_i2c_scan+0xd4>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
   20c00:	4643      	mov	r3, r8
   20c02:	2108      	movs	r1, #8
   20c04:	4620      	mov	r0, r4
   20c06:	f006 f950 	bl	26eaa <shell_fprintf>
   20c0a:	4645      	mov	r5, r8
			if (i + j < first || i + j > last) {
   20c0c:	1f2b      	subs	r3, r5, #4
   20c0e:	2b73      	cmp	r3, #115	; 0x73
   20c10:	d907      	bls.n	20c22 <cmd_i2c_scan+0x66>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
   20c12:	465a      	mov	r2, fp
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
   20c14:	2108      	movs	r1, #8
   20c16:	4620      	mov	r0, r4
   20c18:	f006 f947 	bl	26eaa <shell_fprintf>
   20c1c:	e018      	b.n	20c50 <cmd_i2c_scan+0x94>
   20c1e:	46a8      	mov	r8, r5
   20c20:	e7e9      	b.n	20bf6 <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
   20c22:	f10d 030b 	add.w	r3, sp, #11
   20c26:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
   20c28:	2300      	movs	r3, #0
   20c2a:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20c2c:	2302      	movs	r3, #2
   20c2e:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
   20c32:	2201      	movs	r2, #1
   20c34:	b2ab      	uxth	r3, r5
   20c36:	a903      	add	r1, sp, #12
   20c38:	4648      	mov	r0, r9
   20c3a:	f009 faa1 	bl	2a180 <i2c_transfer>
   20c3e:	b9e8      	cbnz	r0, 20c7c <cmd_i2c_scan+0xc0>
				shell_fprintf(shell, SHELL_NORMAL,
   20c40:	462b      	mov	r3, r5
   20c42:	4652      	mov	r2, sl
   20c44:	2108      	movs	r1, #8
   20c46:	4620      	mov	r0, r4
   20c48:	f006 f92f 	bl	26eaa <shell_fprintf>
				++cnt;
   20c4c:	3601      	adds	r6, #1
   20c4e:	b2f6      	uxtb	r6, r6
		for (uint8_t j = 0; j < 16; j++) {
   20c50:	3501      	adds	r5, #1
   20c52:	f108 0310 	add.w	r3, r8, #16
   20c56:	429d      	cmp	r5, r3
   20c58:	d1d8      	bne.n	20c0c <cmd_i2c_scan+0x50>
		shell_print(shell, "");
   20c5a:	4a0e      	ldr	r2, [pc, #56]	; (20c94 <cmd_i2c_scan+0xd8>)
   20c5c:	2108      	movs	r1, #8
   20c5e:	4620      	mov	r0, r4
   20c60:	f006 f923 	bl	26eaa <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
   20c64:	2d80      	cmp	r5, #128	; 0x80
   20c66:	d1da      	bne.n	20c1e <cmd_i2c_scan+0x62>
	shell_print(shell, "%u devices found on %s",
   20c68:	687b      	ldr	r3, [r7, #4]
   20c6a:	9300      	str	r3, [sp, #0]
   20c6c:	4620      	mov	r0, r4
   20c6e:	4a0a      	ldr	r2, [pc, #40]	; (20c98 <cmd_i2c_scan+0xdc>)
   20c70:	4633      	mov	r3, r6
   20c72:	2108      	movs	r1, #8
   20c74:	f006 f919 	bl	26eaa <shell_fprintf>
	return 0;
   20c78:	2000      	movs	r0, #0
   20c7a:	e7b1      	b.n	20be0 <cmd_i2c_scan+0x24>
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
   20c7c:	4a07      	ldr	r2, [pc, #28]	; (20c9c <cmd_i2c_scan+0xe0>)
   20c7e:	e7c9      	b.n	20c14 <cmd_i2c_scan+0x58>
   20c80:	00031968 	.word	0x00031968
   20c84:	000319c9 	.word	0x000319c9
   20c88:	000319fe 	.word	0x000319fe
   20c8c:	0002e3eb 	.word	0x0002e3eb
   20c90:	0002e3f1 	.word	0x0002e3f1
   20c94:	0002e014 	.word	0x0002e014
   20c98:	00031a09 	.word	0x00031a09
   20c9c:	00031a05 	.word	0x00031a05

00020ca0 <cmd_i2c_recover>:
{
   20ca0:	b538      	push	{r3, r4, r5, lr}
   20ca2:	4605      	mov	r5, r0
   20ca4:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   20ca6:	6850      	ldr	r0, [r2, #4]
   20ca8:	f003 f9f6 	bl	24098 <z_impl_device_get_binding>
	if (!dev) {
   20cac:	b948      	cbnz	r0, 20cc2 <cmd_i2c_recover+0x22>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
   20cae:	6863      	ldr	r3, [r4, #4]
   20cb0:	4a0c      	ldr	r2, [pc, #48]	; (20ce4 <cmd_i2c_recover+0x44>)
   20cb2:	2101      	movs	r1, #1
   20cb4:	4628      	mov	r0, r5
   20cb6:	f006 f8f8 	bl	26eaa <shell_fprintf>
   20cba:	f06f 0412 	mvn.w	r4, #18
}
   20cbe:	4620      	mov	r0, r4
   20cc0:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
   20cc2:	6883      	ldr	r3, [r0, #8]
   20cc4:	695b      	ldr	r3, [r3, #20]
   20cc6:	b153      	cbz	r3, 20cde <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
   20cc8:	4798      	blx	r3
	if (err) {
   20cca:	4604      	mov	r4, r0
   20ccc:	2800      	cmp	r0, #0
   20cce:	d0f6      	beq.n	20cbe <cmd_i2c_recover+0x1e>
		shell_error(shell, "I2C: Bus recovery failed (err %d)", err);
   20cd0:	4a05      	ldr	r2, [pc, #20]	; (20ce8 <cmd_i2c_recover+0x48>)
   20cd2:	4623      	mov	r3, r4
   20cd4:	2101      	movs	r1, #1
   20cd6:	4628      	mov	r0, r5
   20cd8:	f006 f8e7 	bl	26eaa <shell_fprintf>
		return err;
   20cdc:	e7ef      	b.n	20cbe <cmd_i2c_recover+0x1e>
		return -ENOSYS;
   20cde:	f06f 0457 	mvn.w	r4, #87	; 0x57
   20ce2:	e7f5      	b.n	20cd0 <cmd_i2c_recover+0x30>
   20ce4:	00031968 	.word	0x00031968
   20ce8:	00031a21 	.word	0x00031a21

00020cec <cmd_i2c_read_byte>:
{
   20cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20cf0:	4606      	mov	r6, r0
   20cf2:	b089      	sub	sp, #36	; 0x24
	dev = device_get_binding(argv[1]);
   20cf4:	6850      	ldr	r0, [r2, #4]
{
   20cf6:	4614      	mov	r4, r2
   20cf8:	f003 f9ce 	bl	24098 <z_impl_device_get_binding>
	if (!dev) {
   20cfc:	4607      	mov	r7, r0
   20cfe:	b950      	cbnz	r0, 20d16 <cmd_i2c_read_byte+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
   20d00:	4630      	mov	r0, r6
   20d02:	6863      	ldr	r3, [r4, #4]
   20d04:	4a20      	ldr	r2, [pc, #128]	; (20d88 <cmd_i2c_read_byte+0x9c>)
   20d06:	2101      	movs	r1, #1
   20d08:	f006 f8cf 	bl	26eaa <shell_fprintf>
		return -ENODEV;
   20d0c:	f06f 0012 	mvn.w	r0, #18
}
   20d10:	b009      	add	sp, #36	; 0x24
   20d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	dev_addr = strtol(argv[2], NULL, 16);
   20d16:	2210      	movs	r2, #16
   20d18:	2100      	movs	r1, #0
   20d1a:	68a0      	ldr	r0, [r4, #8]
   20d1c:	f007 fbbb 	bl	28496 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
   20d20:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
   20d22:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
   20d24:	2100      	movs	r1, #0
   20d26:	68e0      	ldr	r0, [r4, #12]
   20d28:	f007 fbb5 	bl	28496 <strtol>
	msg[0].buf = (uint8_t *)write_buf;
   20d2c:	f10d 0307 	add.w	r3, sp, #7
   20d30:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   20d32:	f04f 0801 	mov.w	r8, #1
	msg[1].buf = (uint8_t *)read_buf;
   20d36:	f10d 0306 	add.w	r3, sp, #6
	msg[1].len = num_read;
   20d3a:	e9cd 3805 	strd	r3, r8, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20d3e:	2307      	movs	r3, #7
	if (i2c_reg_read_byte(dev, dev_addr, reg_addr, &out) < 0) {
   20d40:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
   20d44:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20d46:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   20d4a:	2202      	movs	r2, #2
   20d4c:	fa1f f389 	uxth.w	r3, r9
   20d50:	a902      	add	r1, sp, #8
   20d52:	4638      	mov	r0, r7
	msg[0].len = num_write;
   20d54:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   20d58:	f88d 5010 	strb.w	r5, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   20d5c:	f009 fa10 	bl	2a180 <i2c_transfer>
   20d60:	42a8      	cmp	r0, r5
   20d62:	da08      	bge.n	20d76 <cmd_i2c_read_byte+0x8a>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
   20d64:	4630      	mov	r0, r6
   20d66:	6863      	ldr	r3, [r4, #4]
   20d68:	4a08      	ldr	r2, [pc, #32]	; (20d8c <cmd_i2c_read_byte+0xa0>)
   20d6a:	4641      	mov	r1, r8
   20d6c:	f006 f89d 	bl	26eaa <shell_fprintf>
		return -EIO;
   20d70:	f06f 0004 	mvn.w	r0, #4
   20d74:	e7cc      	b.n	20d10 <cmd_i2c_read_byte+0x24>
	shell_print(shell, "Output: 0x%x", out);
   20d76:	4630      	mov	r0, r6
   20d78:	f89d 3006 	ldrb.w	r3, [sp, #6]
   20d7c:	4a04      	ldr	r2, [pc, #16]	; (20d90 <cmd_i2c_read_byte+0xa4>)
   20d7e:	2108      	movs	r1, #8
   20d80:	f006 f893 	bl	26eaa <shell_fprintf>
	return 0;
   20d84:	4628      	mov	r0, r5
   20d86:	e7c3      	b.n	20d10 <cmd_i2c_read_byte+0x24>
   20d88:	00031968 	.word	0x00031968
   20d8c:	000319a9 	.word	0x000319a9
   20d90:	00031a44 	.word	0x00031a44

00020d94 <cmd_i2c_write>:
{
   20d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d98:	4606      	mov	r6, r0
   20d9a:	b08f      	sub	sp, #60	; 0x3c
	dev = device_get_binding(argv[1]);
   20d9c:	6850      	ldr	r0, [r2, #4]
{
   20d9e:	460c      	mov	r4, r1
   20da0:	4615      	mov	r5, r2
   20da2:	f003 f979 	bl	24098 <z_impl_device_get_binding>
	if (!dev) {
   20da6:	4607      	mov	r7, r0
   20da8:	b950      	cbnz	r0, 20dc0 <cmd_i2c_write+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
   20daa:	4630      	mov	r0, r6
   20dac:	686b      	ldr	r3, [r5, #4]
   20dae:	4a29      	ldr	r2, [pc, #164]	; (20e54 <cmd_i2c_write+0xc0>)
   20db0:	2101      	movs	r1, #1
   20db2:	f006 f87a 	bl	26eaa <shell_fprintf>
		return -ENODEV;
   20db6:	f06f 0012 	mvn.w	r0, #18
}
   20dba:	b00f      	add	sp, #60	; 0x3c
   20dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
   20dc0:	2210      	movs	r2, #16
   20dc2:	2100      	movs	r1, #0
   20dc4:	68a8      	ldr	r0, [r5, #8]
   20dc6:	f007 fb66 	bl	28496 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
   20dca:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
   20dcc:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
   20dce:	2100      	movs	r1, #0
   20dd0:	68e8      	ldr	r0, [r5, #12]
   20dd2:	f007 fb60 	bl	28496 <strtol>
	if (num_bytes < 0) {
   20dd6:	3c04      	subs	r4, #4
	reg_addr = strtol(argv[3], NULL, 16);
   20dd8:	4681      	mov	r9, r0
	if (num_bytes < 0) {
   20dda:	d501      	bpl.n	20de0 <cmd_i2c_write+0x4c>
		return 0;
   20ddc:	2000      	movs	r0, #0
   20dde:	e7ec      	b.n	20dba <cmd_i2c_write+0x26>
	for (i = 0; i < num_bytes; i++) {
   20de0:	2c10      	cmp	r4, #16
   20de2:	f105 080c 	add.w	r8, r5, #12
   20de6:	bfa8      	it	ge
   20de8:	2410      	movge	r4, #16
   20dea:	f10d 0a10 	add.w	sl, sp, #16
   20dee:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   20df2:	4598      	cmp	r8, r3
   20df4:	d122      	bne.n	20e3c <cmd_i2c_write+0xa8>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
   20df6:	f10d 030f 	add.w	r3, sp, #15
   20dfa:	9308      	str	r3, [sp, #32]
	msg[0].len = 1U;
	msg[0].flags = I2C_MSG_WRITE;
   20dfc:	2300      	movs	r3, #0
   20dfe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28

	msg[1].buf = (uint8_t *)buf;
   20e02:	ab04      	add	r3, sp, #16
	msg[1].len = num_bytes;
   20e04:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20e08:	2202      	movs	r2, #2
	msg[0].len = 1U;
   20e0a:	f04f 0801 	mov.w	r8, #1

	return i2c_transfer(dev, msg, 2, dev_addr);
   20e0e:	fa1f f38b 	uxth.w	r3, fp
   20e12:	a908      	add	r1, sp, #32
   20e14:	4638      	mov	r0, r7
	if (i2c_burst_write(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
   20e16:	f88d 900f 	strb.w	r9, [sp, #15]
	msg[0].len = 1U;
   20e1a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20e1e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	return i2c_transfer(dev, msg, 2, dev_addr);
   20e22:	f009 f9ad 	bl	2a180 <i2c_transfer>
   20e26:	2800      	cmp	r0, #0
   20e28:	dad8      	bge.n	20ddc <cmd_i2c_write+0x48>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
   20e2a:	4630      	mov	r0, r6
   20e2c:	686b      	ldr	r3, [r5, #4]
   20e2e:	4a0a      	ldr	r2, [pc, #40]	; (20e58 <cmd_i2c_write+0xc4>)
   20e30:	4641      	mov	r1, r8
   20e32:	f006 f83a 	bl	26eaa <shell_fprintf>
		return -EIO;
   20e36:	f06f 0004 	mvn.w	r0, #4
   20e3a:	e7be      	b.n	20dba <cmd_i2c_write+0x26>
		buf[i] = (uint8_t)strtol(argv[4 + i], NULL, 16);
   20e3c:	f858 0f04 	ldr.w	r0, [r8, #4]!
   20e40:	9301      	str	r3, [sp, #4]
   20e42:	2210      	movs	r2, #16
   20e44:	2100      	movs	r1, #0
   20e46:	f007 fb26 	bl	28496 <strtol>
   20e4a:	9b01      	ldr	r3, [sp, #4]
   20e4c:	f80a 0b01 	strb.w	r0, [sl], #1
   20e50:	e7cf      	b.n	20df2 <cmd_i2c_write+0x5e>
   20e52:	bf00      	nop
   20e54:	00031968 	.word	0x00031968
   20e58:	0003198a 	.word	0x0003198a

00020e5c <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   20e5c:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
   20e5e:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   20e60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   20e64:	f002 ffd2 	bl	23e0c <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   20e68:	4b03      	ldr	r3, [pc, #12]	; (20e78 <i2c_nrfx_twi_recover_bus+0x1c>)
   20e6a:	4298      	cmp	r0, r3
}
   20e6c:	bf14      	ite	ne
   20e6e:	f06f 000f 	mvnne.w	r0, #15
   20e72:	2000      	moveq	r0, #0
   20e74:	bd08      	pop	{r3, pc}
   20e76:	bf00      	nop
   20e78:	0bad0000 	.word	0x0bad0000

00020e7c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   20e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   20e7e:	ab0a      	add	r3, sp, #40	; 0x28
   20e80:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   20e82:	9302      	str	r3, [sp, #8]
   20e84:	4b05      	ldr	r3, [pc, #20]	; (20e9c <z_log_msg2_runtime_create.constprop.0+0x20>)
   20e86:	9301      	str	r3, [sp, #4]
   20e88:	2300      	movs	r3, #0
   20e8a:	9300      	str	r3, [sp, #0]
   20e8c:	2201      	movs	r2, #1
   20e8e:	4618      	mov	r0, r3
   20e90:	f7e6 fe56 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
   20e94:	b007      	add	sp, #28
   20e96:	f85d fb04 	ldr.w	pc, [sp], #4
   20e9a:	bf00      	nop
   20e9c:	00031b25 	.word	0x00031b25

00020ea0 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   20ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20ea2:	4604      	mov	r4, r0
   20ea4:	2200      	movs	r2, #0
   20ea6:	2101      	movs	r1, #1
   20ea8:	2003      	movs	r0, #3
   20eaa:	f7ea ff59 	bl	bd60 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twi_config *config = dev->config;
   20eae:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   20eb0:	6923      	ldr	r3, [r4, #16]
   20eb2:	4a0f      	ldr	r2, [pc, #60]	; (20ef0 <twi_0_init+0x50>)
   20eb4:	f100 0108 	add.w	r1, r0, #8
   20eb8:	f001 fec4 	bl	22c44 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   20ebc:	4b0d      	ldr	r3, [pc, #52]	; (20ef4 <twi_0_init+0x54>)
   20ebe:	4298      	cmp	r0, r3
   20ec0:	d012      	beq.n	20ee8 <twi_0_init+0x48>
		LOG_ERR("Failed to initialize device: %s",
   20ec2:	490d      	ldr	r1, [pc, #52]	; (20ef8 <twi_0_init+0x58>)
   20ec4:	680b      	ldr	r3, [r1, #0]
   20ec6:	075b      	lsls	r3, r3, #29
   20ec8:	d00b      	beq.n	20ee2 <twi_0_init+0x42>
   20eca:	6823      	ldr	r3, [r4, #0]
   20ecc:	9303      	str	r3, [sp, #12]
   20ece:	4b0b      	ldr	r3, [pc, #44]	; (20efc <twi_0_init+0x5c>)
   20ed0:	9302      	str	r3, [sp, #8]
   20ed2:	4b0b      	ldr	r3, [pc, #44]	; (20f00 <twi_0_init+0x60>)
   20ed4:	9301      	str	r3, [sp, #4]
   20ed6:	2300      	movs	r3, #0
   20ed8:	9300      	str	r3, [sp, #0]
   20eda:	2201      	movs	r2, #1
   20edc:	4618      	mov	r0, r3
   20ede:	f7ff ffcd 	bl	20e7c <z_log_msg2_runtime_create.constprop.0>
		return -EBUSY;
   20ee2:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   20ee6:	e000      	b.n	20eea <twi_0_init+0x4a>
	return 0;
   20ee8:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   20eea:	b004      	add	sp, #16
   20eec:	bd10      	pop	{r4, pc}
   20eee:	bf00      	nop
   20ef0:	00020f05 	.word	0x00020f05
   20ef4:	0bad0000 	.word	0x0bad0000
   20ef8:	200009bc 	.word	0x200009bc
   20efc:	00031bc9 	.word	0x00031bc9
   20f00:	00031b25 	.word	0x00031b25

00020f04 <event_handler>:
	switch (p_event->type) {
   20f04:	7803      	ldrb	r3, [r0, #0]
   20f06:	2b01      	cmp	r3, #1
   20f08:	d008      	beq.n	20f1c <event_handler+0x18>
   20f0a:	2b02      	cmp	r3, #2
   20f0c:	d008      	beq.n	20f20 <event_handler+0x1c>
   20f0e:	b94b      	cbnz	r3, 20f24 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   20f10:	4b05      	ldr	r3, [pc, #20]	; (20f28 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   20f12:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   20f14:	f101 0018 	add.w	r0, r1, #24
   20f18:	f003 bd38 	b.w	2498c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   20f1c:	4b03      	ldr	r3, [pc, #12]	; (20f2c <event_handler+0x28>)
   20f1e:	e7f8      	b.n	20f12 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   20f20:	4b03      	ldr	r3, [pc, #12]	; (20f30 <event_handler+0x2c>)
   20f22:	e7f6      	b.n	20f12 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   20f24:	4b03      	ldr	r3, [pc, #12]	; (20f34 <event_handler+0x30>)
   20f26:	e7f4      	b.n	20f12 <event_handler+0xe>
   20f28:	0bad0000 	.word	0x0bad0000
   20f2c:	0bae0001 	.word	0x0bae0001
   20f30:	0bae0002 	.word	0x0bae0002
   20f34:	0bad0001 	.word	0x0bad0001

00020f38 <i2c_nrfx_twi_configure>:
{
   20f38:	b510      	push	{r4, lr}
	if (I2C_ADDR_10_BITS & dev_config) {
   20f3a:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twi_config *config = dev->config;
   20f3e:	6842      	ldr	r2, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   20f40:	6904      	ldr	r4, [r0, #16]
{
   20f42:	b088      	sub	sp, #32
	if (I2C_ADDR_10_BITS & dev_config) {
   20f44:	d115      	bne.n	20f72 <i2c_nrfx_twi_configure+0x3a>
	switch (I2C_SPEED_GET(dev_config)) {
   20f46:	f3c1 0042 	ubfx	r0, r1, #1, #3
   20f4a:	2801      	cmp	r0, #1
   20f4c:	d014      	beq.n	20f78 <i2c_nrfx_twi_configure+0x40>
   20f4e:	2802      	cmp	r0, #2
   20f50:	d01b      	beq.n	20f8a <i2c_nrfx_twi_configure+0x52>
		LOG_ERR("unsupported speed");
   20f52:	4810      	ldr	r0, [pc, #64]	; (20f94 <i2c_nrfx_twi_configure+0x5c>)
   20f54:	6802      	ldr	r2, [r0, #0]
   20f56:	0752      	lsls	r2, r2, #29
   20f58:	d00b      	beq.n	20f72 <i2c_nrfx_twi_configure+0x3a>
   20f5a:	4a0f      	ldr	r2, [pc, #60]	; (20f98 <i2c_nrfx_twi_configure+0x60>)
   20f5c:	9206      	str	r2, [sp, #24]
   20f5e:	4a0f      	ldr	r2, [pc, #60]	; (20f9c <i2c_nrfx_twi_configure+0x64>)
   20f60:	9207      	str	r2, [sp, #28]
   20f62:	2203      	movs	r2, #3
   20f64:	9201      	str	r2, [sp, #4]
   20f66:	9205      	str	r2, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   20f68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20f6c:	aa05      	add	r2, sp, #20
   20f6e:	f005 fdbb 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   20f72:	f06f 0015 	mvn.w	r0, #21
   20f76:	e006      	b.n	20f86 <i2c_nrfx_twi_configure+0x4e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   20f78:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   20f7a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   20f7e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   20f82:	2000      	movs	r0, #0
	data->dev_config = dev_config;
   20f84:	6361      	str	r1, [r4, #52]	; 0x34
}
   20f86:	b008      	add	sp, #32
   20f88:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   20f8a:	6813      	ldr	r3, [r2, #0]
   20f8c:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   20f90:	e7f5      	b.n	20f7e <i2c_nrfx_twi_configure+0x46>
   20f92:	bf00      	nop
   20f94:	200009bc 	.word	0x200009bc
   20f98:	00031b49 	.word	0x00031b49
   20f9c:	00031bd2 	.word	0x00031bd2

00020fa0 <i2c_nrfx_twi_transfer>:
{
   20fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fa4:	b08b      	sub	sp, #44	; 0x2c
   20fa6:	af00      	add	r7, sp, #0
   20fa8:	460c      	mov	r4, r1
   20faa:	4691      	mov	r9, r2
   20fac:	60fb      	str	r3, [r7, #12]
	const struct i2c_nrfx_twi_config *config = dev->config;
   20fae:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   20fb0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   20fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20fbc:	4640      	mov	r0, r8
   20fbe:	f003 fd0b 	bl	249d8 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   20fc2:	f108 0a18 	add.w	sl, r8, #24
   20fc6:	2200      	movs	r2, #0
   20fc8:	2300      	movs	r3, #0
   20fca:	4650      	mov	r0, sl
   20fcc:	f003 fd04 	bl	249d8 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   20fd0:	4628      	mov	r0, r5
   20fd2:	f001 fe95 	bl	22d00 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
   20fd6:	f8df b124 	ldr.w	fp, [pc, #292]	; 210fc <i2c_nrfx_twi_transfer+0x15c>
	for (size_t i = 0; i < num_msgs; i++) {
   20fda:	2600      	movs	r6, #0
   20fdc:	454e      	cmp	r6, r9
   20fde:	d301      	bcc.n	20fe4 <i2c_nrfx_twi_transfer+0x44>
   20fe0:	2400      	movs	r4, #0
   20fe2:	e02d      	b.n	21040 <i2c_nrfx_twi_transfer+0xa0>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   20fe4:	7a23      	ldrb	r3, [r4, #8]
   20fe6:	607b      	str	r3, [r7, #4]
   20fe8:	f013 0108 	ands.w	r1, r3, #8
   20fec:	d17f      	bne.n	210ee <i2c_nrfx_twi_transfer+0x14e>
		nrfx_twi_xfer_desc_t cur_xfer = {
   20fee:	2214      	movs	r2, #20
   20ff0:	18b8      	adds	r0, r7, r2
   20ff2:	60b9      	str	r1, [r7, #8]
   20ff4:	f007 fbe7 	bl	287c6 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   20ff8:	687b      	ldr	r3, [r7, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   20ffa:	6860      	ldr	r0, [r4, #4]
   20ffc:	68f9      	ldr	r1, [r7, #12]
   20ffe:	61b8      	str	r0, [r7, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   21000:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   21004:	6820      	ldr	r0, [r4, #0]
   21006:	7579      	strb	r1, [r7, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   21008:	f013 0f02 	tst.w	r3, #2
   2100c:	68b9      	ldr	r1, [r7, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
   2100e:	753a      	strb	r2, [r7, #20]
   21010:	6238      	str	r0, [r7, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   21012:	d120      	bne.n	21056 <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
   21014:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   21018:	42b3      	cmp	r3, r6
   2101a:	d902      	bls.n	21022 <i2c_nrfx_twi_transfer+0x82>
   2101c:	7d23      	ldrb	r3, [r4, #20]
   2101e:	0758      	lsls	r0, r3, #29
   21020:	d51b      	bpl.n	2105a <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   21022:	2a00      	cmp	r2, #0
   21024:	d163      	bne.n	210ee <i2c_nrfx_twi_transfer+0x14e>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   21026:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   21028:	f107 0114 	add.w	r1, r7, #20
   2102c:	4628      	mov	r0, r5
   2102e:	f001 fe95 	bl	22d5c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   21032:	4558      	cmp	r0, fp
   21034:	d013      	beq.n	2105e <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
   21036:	4b32      	ldr	r3, [pc, #200]	; (21100 <i2c_nrfx_twi_transfer+0x160>)
   21038:	4298      	cmp	r0, r3
   2103a:	d05b      	beq.n	210f4 <i2c_nrfx_twi_transfer+0x154>
			ret = -EIO;
   2103c:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
   21040:	4628      	mov	r0, r5
   21042:	f001 fe6d 	bl	22d20 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   21046:	4640      	mov	r0, r8
   21048:	f003 fca0 	bl	2498c <z_impl_k_sem_give>
}
   2104c:	4620      	mov	r0, r4
   2104e:	372c      	adds	r7, #44	; 0x2c
   21050:	46bd      	mov	sp, r7
   21052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   21056:	460a      	mov	r2, r1
   21058:	e7e6      	b.n	21028 <i2c_nrfx_twi_transfer+0x88>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   2105a:	2240      	movs	r2, #64	; 0x40
   2105c:	e7e4      	b.n	21028 <i2c_nrfx_twi_transfer+0x88>
	return z_impl_k_sem_take(sem, timeout);
   2105e:	2300      	movs	r3, #0
   21060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21064:	4650      	mov	r0, sl
   21066:	f003 fcb7 	bl	249d8 <z_impl_k_sem_take>
		if (ret != 0) {
   2106a:	4603      	mov	r3, r0
   2106c:	b1e8      	cbz	r0, 210aa <i2c_nrfx_twi_transfer+0x10a>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   2106e:	4825      	ldr	r0, [pc, #148]	; (21104 <i2c_nrfx_twi_transfer+0x164>)
   21070:	6803      	ldr	r3, [r0, #0]
   21072:	0759      	lsls	r1, r3, #29
   21074:	d011      	beq.n	2109a <i2c_nrfx_twi_transfer+0xfa>
   21076:	466c      	mov	r4, sp
   21078:	b088      	sub	sp, #32
   2107a:	466a      	mov	r2, sp
   2107c:	4b22      	ldr	r3, [pc, #136]	; (21108 <i2c_nrfx_twi_transfer+0x168>)
   2107e:	6113      	str	r3, [r2, #16]
   21080:	4b22      	ldr	r3, [pc, #136]	; (2110c <i2c_nrfx_twi_transfer+0x16c>)
   21082:	e9c2 3605 	strd	r3, r6, [r2, #20]
   21086:	2304      	movs	r3, #4
   21088:	613b      	str	r3, [r7, #16]
   2108a:	f842 3f0c 	str.w	r3, [r2, #12]!
   2108e:	2300      	movs	r3, #0
   21090:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21094:	f005 fd28 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   21098:	46a5      	mov	sp, r4
			nrfx_twi_disable(&config->twi);
   2109a:	4628      	mov	r0, r5
   2109c:	f001 fe40 	bl	22d20 <nrfx_twi_disable>
   210a0:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   210a4:	f002 feb2 	bl	23e0c <nrfx_twi_twim_bus_recover>
   210a8:	e7c8      	b.n	2103c <i2c_nrfx_twi_transfer+0x9c>
		res = data->res;
   210aa:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   210ae:	4559      	cmp	r1, fp
   210b0:	f104 040c 	add.w	r4, r4, #12
   210b4:	d019      	beq.n	210ea <i2c_nrfx_twi_transfer+0x14a>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   210b6:	4813      	ldr	r0, [pc, #76]	; (21104 <i2c_nrfx_twi_transfer+0x164>)
   210b8:	6802      	ldr	r2, [r0, #0]
   210ba:	0752      	lsls	r2, r2, #29
   210bc:	d0be      	beq.n	2103c <i2c_nrfx_twi_transfer+0x9c>
   210be:	466c      	mov	r4, sp
   210c0:	b088      	sub	sp, #32
   210c2:	466a      	mov	r2, sp
   210c4:	f8df c048 	ldr.w	ip, [pc, #72]	; 21110 <i2c_nrfx_twi_transfer+0x170>
   210c8:	f8c2 c010 	str.w	ip, [r2, #16]
   210cc:	f8df c03c 	ldr.w	ip, [pc, #60]	; 2110c <i2c_nrfx_twi_transfer+0x16c>
   210d0:	61d6      	str	r6, [r2, #28]
   210d2:	e9c2 c105 	strd	ip, r1, [r2, #20]
   210d6:	2105      	movs	r1, #5
   210d8:	f842 1f0c 	str.w	r1, [r2, #12]!
   210dc:	6139      	str	r1, [r7, #16]
   210de:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   210e2:	f005 fd01 	bl	26ae8 <z_impl_z_log_msg2_static_create>
   210e6:	46a5      	mov	sp, r4
   210e8:	e7a8      	b.n	2103c <i2c_nrfx_twi_transfer+0x9c>
	for (size_t i = 0; i < num_msgs; i++) {
   210ea:	3601      	adds	r6, #1
   210ec:	e776      	b.n	20fdc <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
   210ee:	f06f 0485 	mvn.w	r4, #133	; 0x85
   210f2:	e7a5      	b.n	21040 <i2c_nrfx_twi_transfer+0xa0>
				ret = -EBUSY;
   210f4:	f06f 040f 	mvn.w	r4, #15
   210f8:	e7a2      	b.n	21040 <i2c_nrfx_twi_transfer+0xa0>
   210fa:	bf00      	nop
   210fc:	0bad0000 	.word	0x0bad0000
   21100:	0bad000b 	.word	0x0bad000b
   21104:	200009bc 	.word	0x200009bc
   21108:	00031b5f 	.word	0x00031b5f
   2110c:	00031be9 	.word	0x00031be9
   21110:	00031b8d 	.word	0x00031b8d

00021114 <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
   21114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
   21118:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 211c8 <print_all_reset_causes+0xb4>
		return "security";
   2111c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 211cc <print_all_reset_causes+0xb8>
		return "parity error";
   21120:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 211d0 <print_all_reset_causes+0xbc>
{
   21124:	4607      	mov	r7, r0
   21126:	460d      	mov	r5, r1
   21128:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
   2112a:	2401      	movs	r4, #1
		if (cause & cause_mask) {
   2112c:	ea15 0204 	ands.w	r2, r5, r4
   21130:	d013      	beq.n	2115a <print_all_reset_causes+0x46>
	switch (cause) {
   21132:	2a40      	cmp	r2, #64	; 0x40
   21134:	d03c      	beq.n	211b0 <print_all_reset_causes+0x9c>
   21136:	d81e      	bhi.n	21176 <print_all_reset_causes+0x62>
   21138:	2a08      	cmp	r2, #8
   2113a:	d814      	bhi.n	21166 <print_all_reset_causes+0x52>
   2113c:	3a01      	subs	r2, #1
   2113e:	2a07      	cmp	r2, #7
   21140:	d834      	bhi.n	211ac <print_all_reset_causes+0x98>
   21142:	e8df f002 	tbb	[pc, r2]
   21146:	0437      	.short	0x0437
   21148:	33332f33 	.word	0x33332f33
   2114c:	3133      	.short	0x3133
   2114e:	4b21      	ldr	r3, [pc, #132]	; (211d4 <print_all_reset_causes+0xc0>)
			shell_print(sh, "- %s",
   21150:	4652      	mov	r2, sl
   21152:	2108      	movs	r1, #8
   21154:	4638      	mov	r0, r7
   21156:	f005 fea8 	bl	26eaa <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
   2115a:	3e01      	subs	r6, #1
   2115c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   21160:	d1e4      	bne.n	2112c <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
   21162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
   21166:	2a10      	cmp	r2, #16
   21168:	d026      	beq.n	211b8 <print_all_reset_causes+0xa4>
		return "debug";
   2116a:	4b1b      	ldr	r3, [pc, #108]	; (211d8 <print_all_reset_causes+0xc4>)
   2116c:	491b      	ldr	r1, [pc, #108]	; (211dc <print_all_reset_causes+0xc8>)
   2116e:	2a20      	cmp	r2, #32
   21170:	bf08      	it	eq
   21172:	460b      	moveq	r3, r1
   21174:	e7ec      	b.n	21150 <print_all_reset_causes+0x3c>
	switch (cause) {
   21176:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2117a:	d01f      	beq.n	211bc <print_all_reset_causes+0xa8>
   2117c:	d808      	bhi.n	21190 <print_all_reset_causes+0x7c>
   2117e:	2a80      	cmp	r2, #128	; 0x80
   21180:	d01e      	beq.n	211c0 <print_all_reset_causes+0xac>
		return "CPU lockup";
   21182:	4b15      	ldr	r3, [pc, #84]	; (211d8 <print_all_reset_causes+0xc4>)
   21184:	4916      	ldr	r1, [pc, #88]	; (211e0 <print_all_reset_causes+0xcc>)
   21186:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   2118a:	bf08      	it	eq
   2118c:	460b      	moveq	r3, r1
   2118e:	e7df      	b.n	21150 <print_all_reset_causes+0x3c>
	switch (cause) {
   21190:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   21194:	d016      	beq.n	211c4 <print_all_reset_causes+0xb0>
		return "clock";
   21196:	4b10      	ldr	r3, [pc, #64]	; (211d8 <print_all_reset_causes+0xc4>)
   21198:	4912      	ldr	r1, [pc, #72]	; (211e4 <print_all_reset_causes+0xd0>)
   2119a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2119e:	bf08      	it	eq
   211a0:	460b      	moveq	r3, r1
   211a2:	e7d5      	b.n	21150 <print_all_reset_causes+0x3c>
		return "brownout";
   211a4:	4b10      	ldr	r3, [pc, #64]	; (211e8 <print_all_reset_causes+0xd4>)
   211a6:	e7d3      	b.n	21150 <print_all_reset_causes+0x3c>
		return "power-on reset";
   211a8:	4b10      	ldr	r3, [pc, #64]	; (211ec <print_all_reset_causes+0xd8>)
   211aa:	e7d1      	b.n	21150 <print_all_reset_causes+0x3c>
		return "unknown";
   211ac:	4b0a      	ldr	r3, [pc, #40]	; (211d8 <print_all_reset_causes+0xc4>)
   211ae:	e7cf      	b.n	21150 <print_all_reset_causes+0x3c>
		return "security";
   211b0:	4643      	mov	r3, r8
   211b2:	e7cd      	b.n	21150 <print_all_reset_causes+0x3c>
		return "pin";
   211b4:	4b0e      	ldr	r3, [pc, #56]	; (211f0 <print_all_reset_causes+0xdc>)
   211b6:	e7cb      	b.n	21150 <print_all_reset_causes+0x3c>
		return "watchdog";
   211b8:	4b0e      	ldr	r3, [pc, #56]	; (211f4 <print_all_reset_causes+0xe0>)
   211ba:	e7c9      	b.n	21150 <print_all_reset_causes+0x3c>
		return "parity error";
   211bc:	464b      	mov	r3, r9
   211be:	e7c7      	b.n	21150 <print_all_reset_causes+0x3c>
		return "low power wake-up";
   211c0:	4b0d      	ldr	r3, [pc, #52]	; (211f8 <print_all_reset_causes+0xe4>)
   211c2:	e7c5      	b.n	21150 <print_all_reset_causes+0x3c>
		return "PLL error";
   211c4:	4b0d      	ldr	r3, [pc, #52]	; (211fc <print_all_reset_causes+0xe8>)
   211c6:	e7c3      	b.n	21150 <print_all_reset_causes+0x3c>
   211c8:	0002ea5d 	.word	0x0002ea5d
   211cc:	00031c35 	.word	0x00031c35
   211d0:	00031c3e 	.word	0x00031c3e
   211d4:	00031c23 	.word	0x00031c23
   211d8:	00031bff 	.word	0x00031bff
   211dc:	00031c5d 	.word	0x00031c5d
   211e0:	00031c63 	.word	0x00031c63
   211e4:	00031c78 	.word	0x00031c78
   211e8:	00031c0b 	.word	0x00031c0b
   211ec:	00031c14 	.word	0x00031c14
   211f0:	00031c07 	.word	0x00031c07
   211f4:	00031c2c 	.word	0x00031c2c
   211f8:	00031c4b 	.word	0x00031c4b
   211fc:	00031c6e 	.word	0x00031c6e

00021200 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
   21200:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21202:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&supported, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
   21204:	a801      	add	r0, sp, #4
   21206:	f009 f81d 	bl	2a244 <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
   2120a:	f110 0f86 	cmn.w	r0, #134	; 0x86
   2120e:	4604      	mov	r4, r0
   21210:	d111      	bne.n	21236 <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
   21212:	4a11      	ldr	r2, [pc, #68]	; (21258 <cmd_supported_reset_cause+0x58>)
   21214:	2101      	movs	r1, #1
   21216:	4628      	mov	r0, r5
   21218:	f005 fe47 	bl	26eaa <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
   2121c:	9c01      	ldr	r4, [sp, #4]
   2121e:	b1ac      	cbz	r4, 2124c <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
   21220:	4a0e      	ldr	r2, [pc, #56]	; (2125c <cmd_supported_reset_cause+0x5c>)
   21222:	2108      	movs	r1, #8
   21224:	4628      	mov	r0, r5
   21226:	f005 fe40 	bl	26eaa <shell_fprintf>
		print_all_reset_causes(sh, cause);
   2122a:	9901      	ldr	r1, [sp, #4]
   2122c:	4628      	mov	r0, r5
   2122e:	f7ff ff71 	bl	21114 <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supporte");
	}

	return 0;
   21232:	2400      	movs	r4, #0
   21234:	e007      	b.n	21246 <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
   21236:	2800      	cmp	r0, #0
   21238:	d0f0      	beq.n	2121c <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
   2123a:	4603      	mov	r3, r0
   2123c:	4a08      	ldr	r2, [pc, #32]	; (21260 <cmd_supported_reset_cause+0x60>)
   2123e:	2101      	movs	r1, #1
   21240:	4628      	mov	r0, r5
   21242:	f005 fe32 	bl	26eaa <shell_fprintf>
}
   21246:	4620      	mov	r0, r4
   21248:	b003      	add	sp, #12
   2124a:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supporte");
   2124c:	4a05      	ldr	r2, [pc, #20]	; (21264 <cmd_supported_reset_cause+0x64>)
   2124e:	2108      	movs	r1, #8
   21250:	4628      	mov	r0, r5
   21252:	f005 fe2a 	bl	26eaa <shell_fprintf>
   21256:	e7f6      	b.n	21246 <cmd_supported_reset_cause+0x46>
   21258:	00031c7e 	.word	0x00031c7e
   2125c:	00031cc8 	.word	0x00031cc8
   21260:	00031c99 	.word	0x00031c99
   21264:	00031ce1 	.word	0x00031ce1

00021268 <cmd_show_reset_cause>:
{
   21268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2126a:	4604      	mov	r4, r0
	return z_impl_hwinfo_get_reset_cause(cause);
   2126c:	a801      	add	r0, sp, #4
   2126e:	f008 ffc4 	bl	2a1fa <z_impl_hwinfo_get_reset_cause>
	if (res == -ENOTSUP) {
   21272:	f110 0f86 	cmn.w	r0, #134	; 0x86
   21276:	4605      	mov	r5, r0
   21278:	d105      	bne.n	21286 <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
   2127a:	4a0f      	ldr	r2, [pc, #60]	; (212b8 <cmd_show_reset_cause+0x50>)
   2127c:	2101      	movs	r1, #1
		shell_print(sh, "No reset cause set");
   2127e:	4620      	mov	r0, r4
   21280:	f005 fe13 	bl	26eaa <shell_fprintf>
   21284:	e006      	b.n	21294 <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
   21286:	b140      	cbz	r0, 2129a <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
   21288:	4603      	mov	r3, r0
   2128a:	4a0c      	ldr	r2, [pc, #48]	; (212bc <cmd_show_reset_cause+0x54>)
   2128c:	2101      	movs	r1, #1
   2128e:	4620      	mov	r0, r4
   21290:	f005 fe0b 	bl	26eaa <shell_fprintf>
}
   21294:	4628      	mov	r0, r5
   21296:	b003      	add	sp, #12
   21298:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
   2129a:	9b01      	ldr	r3, [sp, #4]
   2129c:	b14b      	cbz	r3, 212b2 <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
   2129e:	4620      	mov	r0, r4
   212a0:	4a07      	ldr	r2, [pc, #28]	; (212c0 <cmd_show_reset_cause+0x58>)
   212a2:	2108      	movs	r1, #8
   212a4:	f005 fe01 	bl	26eaa <shell_fprintf>
		print_all_reset_causes(sh, cause);
   212a8:	9901      	ldr	r1, [sp, #4]
   212aa:	4620      	mov	r0, r4
   212ac:	f7ff ff32 	bl	21114 <print_all_reset_causes>
   212b0:	e7f0      	b.n	21294 <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
   212b2:	4a04      	ldr	r2, [pc, #16]	; (212c4 <cmd_show_reset_cause+0x5c>)
   212b4:	2108      	movs	r1, #8
   212b6:	e7e2      	b.n	2127e <cmd_show_reset_cause+0x16>
   212b8:	00031c7e 	.word	0x00031c7e
   212bc:	00031cf5 	.word	0x00031cf5
   212c0:	00031d13 	.word	0x00031d13
   212c4:	00031d25 	.word	0x00031d25

000212c8 <cmd_clear_reset_cause>:
{
   212c8:	b538      	push	{r3, r4, r5, lr}
   212ca:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
   212cc:	f008 ffb2 	bl	2a234 <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
   212d0:	f110 0f86 	cmn.w	r0, #134	; 0x86
   212d4:	4604      	mov	r4, r0
   212d6:	d107      	bne.n	212e8 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
   212d8:	4a08      	ldr	r2, [pc, #32]	; (212fc <cmd_clear_reset_cause+0x34>)
   212da:	2101      	movs	r1, #1
   212dc:	4628      	mov	r0, r5
   212de:	f005 fde4 	bl	26eaa <shell_fprintf>
   212e2:	2400      	movs	r4, #0
}
   212e4:	4620      	mov	r0, r4
   212e6:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
   212e8:	2800      	cmp	r0, #0
   212ea:	d0fb      	beq.n	212e4 <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
   212ec:	4603      	mov	r3, r0
   212ee:	4a04      	ldr	r2, [pc, #16]	; (21300 <cmd_clear_reset_cause+0x38>)
   212f0:	2101      	movs	r1, #1
   212f2:	4628      	mov	r0, r5
   212f4:	f005 fdd9 	bl	26eaa <shell_fprintf>
		return res;
   212f8:	e7f4      	b.n	212e4 <cmd_clear_reset_cause+0x1c>
   212fa:	bf00      	nop
   212fc:	00031c7e 	.word	0x00031c7e
   21300:	00031d39 	.word	0x00031d39

00021304 <cmd_get_device_id>:
{
   21304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21308:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
   2130a:	2110      	movs	r1, #16
   2130c:	4668      	mov	r0, sp
   2130e:	f008 ff3d 	bl	2a18c <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
   21312:	f110 0f86 	cmn.w	r0, #134	; 0x86
   21316:	4604      	mov	r4, r0
   21318:	d108      	bne.n	2132c <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
   2131a:	4a19      	ldr	r2, [pc, #100]	; (21380 <cmd_get_device_id+0x7c>)
   2131c:	2101      	movs	r1, #1
   2131e:	4628      	mov	r0, r5
   21320:	f005 fdc3 	bl	26eaa <shell_fprintf>
}
   21324:	4620      	mov	r0, r4
   21326:	b004      	add	sp, #16
   21328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
   2132c:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
   2132e:	4603      	mov	r3, r0
	} else if (length < 0) {
   21330:	da05      	bge.n	2133e <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
   21332:	4a14      	ldr	r2, [pc, #80]	; (21384 <cmd_get_device_id+0x80>)
   21334:	2101      	movs	r1, #1
   21336:	4628      	mov	r0, r5
   21338:	f005 fdb7 	bl	26eaa <shell_fprintf>
		return length;
   2133c:	e7f2      	b.n	21324 <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
   2133e:	4a12      	ldr	r2, [pc, #72]	; (21388 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
   21340:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2138c <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
   21344:	2108      	movs	r1, #8
   21346:	4628      	mov	r0, r5
   21348:	f005 fdaf 	bl	26eaa <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
   2134c:	4a10      	ldr	r2, [pc, #64]	; (21390 <cmd_get_device_id+0x8c>)
   2134e:	2108      	movs	r1, #8
   21350:	4628      	mov	r0, r5
   21352:	f005 fdaa 	bl	26eaa <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
   21356:	466e      	mov	r6, sp
   21358:	2700      	movs	r7, #0
   2135a:	42a7      	cmp	r7, r4
   2135c:	d106      	bne.n	2136c <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
   2135e:	4a0d      	ldr	r2, [pc, #52]	; (21394 <cmd_get_device_id+0x90>)
   21360:	2108      	movs	r1, #8
   21362:	4628      	mov	r0, r5
   21364:	f005 fda1 	bl	26eaa <shell_fprintf>
	return 0;
   21368:	2400      	movs	r4, #0
   2136a:	e7db      	b.n	21324 <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
   2136c:	f816 3b01 	ldrb.w	r3, [r6], #1
   21370:	4642      	mov	r2, r8
   21372:	2108      	movs	r1, #8
   21374:	4628      	mov	r0, r5
   21376:	f005 fd98 	bl	26eaa <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
   2137a:	3701      	adds	r7, #1
   2137c:	e7ed      	b.n	2135a <cmd_get_device_id+0x56>
   2137e:	bf00      	nop
   21380:	00031c7e 	.word	0x00031c7e
   21384:	00031d5f 	.word	0x00031d5f
   21388:	00031d6b 	.word	0x00031d6b
   2138c:	00031638 	.word	0x00031638
   21390:	00031d78 	.word	0x00031d78
   21394:	0002e014 	.word	0x0002e014

00021398 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   21398:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2139a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2139e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   213a0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   213a2:	6002      	str	r2, [r0, #0]
}
   213a4:	4802      	ldr	r0, [pc, #8]	; (213b0 <nrf_gpio_pin_port_decode+0x18>)
   213a6:	bf18      	it	ne
   213a8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   213ac:	4770      	bx	lr
   213ae:	bf00      	nop
   213b0:	50000300 	.word	0x50000300

000213b4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   213b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   213b6:	794b      	ldrb	r3, [r1, #5]
   213b8:	2b01      	cmp	r3, #1
   213ba:	d026      	beq.n	2140a <uarte_nrfx_configure+0x56>
   213bc:	2b03      	cmp	r3, #3
   213be:	d121      	bne.n	21404 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   213c0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   213c2:	798b      	ldrb	r3, [r1, #6]
   213c4:	2b03      	cmp	r3, #3
   213c6:	d11d      	bne.n	21404 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   213c8:	79cc      	ldrb	r4, [r1, #7]
   213ca:	b10c      	cbz	r4, 213d0 <uarte_nrfx_configure+0x1c>
   213cc:	2c01      	cmp	r4, #1
   213ce:	d119      	bne.n	21404 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   213d0:	790a      	ldrb	r2, [r1, #4]
   213d2:	b112      	cbz	r2, 213da <uarte_nrfx_configure+0x26>
   213d4:	2a02      	cmp	r2, #2
   213d6:	d115      	bne.n	21404 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   213d8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   213da:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   213dc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   213de:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   213e2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   213e4:	d065      	beq.n	214b2 <uarte_nrfx_configure+0xfe>
   213e6:	d82d      	bhi.n	21444 <uarte_nrfx_configure+0x90>
   213e8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   213ec:	d064      	beq.n	214b8 <uarte_nrfx_configure+0x104>
   213ee:	d816      	bhi.n	2141e <uarte_nrfx_configure+0x6a>
   213f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   213f4:	d062      	beq.n	214bc <uarte_nrfx_configure+0x108>
   213f6:	d80a      	bhi.n	2140e <uarte_nrfx_configure+0x5a>
   213f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   213fc:	d061      	beq.n	214c2 <uarte_nrfx_configure+0x10e>
   213fe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   21402:	d061      	beq.n	214c8 <uarte_nrfx_configure+0x114>
   21404:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21408:	e052      	b.n	214b0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   2140a:	2600      	movs	r6, #0
   2140c:	e7d9      	b.n	213c2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2140e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   21412:	d05c      	beq.n	214ce <uarte_nrfx_configure+0x11a>
   21414:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   21418:	d1f4      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2141a:	4b37      	ldr	r3, [pc, #220]	; (214f8 <uarte_nrfx_configure+0x144>)
   2141c:	e03c      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2141e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   21422:	d057      	beq.n	214d4 <uarte_nrfx_configure+0x120>
   21424:	d807      	bhi.n	21436 <uarte_nrfx_configure+0x82>
   21426:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2142a:	d055      	beq.n	214d8 <uarte_nrfx_configure+0x124>
   2142c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   21430:	d1e8      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   21432:	4b32      	ldr	r3, [pc, #200]	; (214fc <uarte_nrfx_configure+0x148>)
   21434:	e030      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21436:	f647 2712 	movw	r7, #31250	; 0x7a12
   2143a:	42bb      	cmp	r3, r7
   2143c:	d1e2      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2143e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   21442:	e029      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21444:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   21448:	d048      	beq.n	214dc <uarte_nrfx_configure+0x128>
   2144a:	d813      	bhi.n	21474 <uarte_nrfx_configure+0xc0>
   2144c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   21450:	d047      	beq.n	214e2 <uarte_nrfx_configure+0x12e>
   21452:	d809      	bhi.n	21468 <uarte_nrfx_configure+0xb4>
   21454:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   21458:	42bb      	cmp	r3, r7
   2145a:	d044      	beq.n	214e6 <uarte_nrfx_configure+0x132>
   2145c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   21460:	d1d0      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   21462:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   21466:	e017      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21468:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2146c:	d1ca      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2146e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   21472:	e011      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21474:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   21478:	d038      	beq.n	214ec <uarte_nrfx_configure+0x138>
   2147a:	d808      	bhi.n	2148e <uarte_nrfx_configure+0xda>
   2147c:	4f20      	ldr	r7, [pc, #128]	; (21500 <uarte_nrfx_configure+0x14c>)
   2147e:	42bb      	cmp	r3, r7
   21480:	d037      	beq.n	214f2 <uarte_nrfx_configure+0x13e>
   21482:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   21486:	d1bd      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   21488:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2148c:	e004      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2148e:	4f1d      	ldr	r7, [pc, #116]	; (21504 <uarte_nrfx_configure+0x150>)
   21490:	42bb      	cmp	r3, r7
   21492:	d1b7      	bne.n	21404 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   21494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   21498:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2149a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   2149e:	1d03      	adds	r3, r0, #4
   214a0:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   214a2:	4334      	orrs	r4, r6
   214a4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   214a6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   214aa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   214ae:	2000      	movs	r0, #0
}
   214b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   214b2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   214b6:	e7ef      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   214b8:	4b13      	ldr	r3, [pc, #76]	; (21508 <uarte_nrfx_configure+0x154>)
   214ba:	e7ed      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   214bc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   214c0:	e7ea      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   214c2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   214c6:	e7e7      	b.n	21498 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   214c8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   214cc:	e7e4      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   214ce:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   214d2:	e7e1      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   214d4:	4b0d      	ldr	r3, [pc, #52]	; (2150c <uarte_nrfx_configure+0x158>)
   214d6:	e7df      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   214d8:	4b0d      	ldr	r3, [pc, #52]	; (21510 <uarte_nrfx_configure+0x15c>)
   214da:	e7dd      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   214dc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   214e0:	e7da      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   214e2:	4b0c      	ldr	r3, [pc, #48]	; (21514 <uarte_nrfx_configure+0x160>)
   214e4:	e7d8      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   214e6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   214ea:	e7d5      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   214ec:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   214f0:	e7d2      	b.n	21498 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   214f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   214f6:	e7cf      	b.n	21498 <uarte_nrfx_configure+0xe4>
   214f8:	0013b000 	.word	0x0013b000
   214fc:	004ea000 	.word	0x004ea000
   21500:	0003d090 	.word	0x0003d090
   21504:	000f4240 	.word	0x000f4240
   21508:	00275000 	.word	0x00275000
   2150c:	0075c000 	.word	0x0075c000
   21510:	003af000 	.word	0x003af000
   21514:	013a9000 	.word	0x013a9000

00021518 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   21518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2151a:	6906      	ldr	r6, [r0, #16]
{
   2151c:	4605      	mov	r5, r0
   2151e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21520:	f009 fb07 	bl	2ab32 <k_is_in_isr>
   21524:	b910      	cbnz	r0, 2152c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   21526:	4b20      	ldr	r3, [pc, #128]	; (215a8 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   21528:	781b      	ldrb	r3, [r3, #0]
   2152a:	b983      	cbnz	r3, 2154e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   2152c:	f04f 0320 	mov.w	r3, #32
   21530:	f3ef 8411 	mrs	r4, BASEPRI
   21534:	f383 8812 	msr	BASEPRI_MAX, r3
   21538:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   2153c:	6868      	ldr	r0, [r5, #4]
   2153e:	f008 ff5c 	bl	2a3fa <is_tx_ready.isra.0>
   21542:	bb28      	cbnz	r0, 21590 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   21544:	f384 8811 	msr	BASEPRI, r4
   21548:	f3bf 8f6f 	isb	sy
}
   2154c:	e7ee      	b.n	2152c <uarte_nrfx_poll_out+0x14>
{
   2154e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   21550:	6868      	ldr	r0, [r5, #4]
   21552:	f008 ff52 	bl	2a3fa <is_tx_ready.isra.0>
   21556:	b970      	cbnz	r0, 21576 <uarte_nrfx_poll_out+0x5e>
   21558:	2001      	movs	r0, #1
   2155a:	f009 f80a 	bl	2a572 <nrfx_busy_wait>
   2155e:	3c01      	subs	r4, #1
   21560:	d1f6      	bne.n	21550 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   21562:	2100      	movs	r1, #0
   21564:	2021      	movs	r0, #33	; 0x21
   21566:	f003 fef5 	bl	25354 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2156a:	e7f0      	b.n	2154e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   2156c:	f384 8811 	msr	BASEPRI, r4
   21570:	f3bf 8f6f 	isb	sy
}
   21574:	e7f5      	b.n	21562 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   21576:	f04f 0320 	mov.w	r3, #32
   2157a:	f3ef 8411 	mrs	r4, BASEPRI
   2157e:	f383 8812 	msr	BASEPRI_MAX, r3
   21582:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   21586:	6868      	ldr	r0, [r5, #4]
   21588:	f008 ff37 	bl	2a3fa <is_tx_ready.isra.0>
   2158c:	2800      	cmp	r0, #0
   2158e:	d0ed      	beq.n	2156c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   21590:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   21592:	2201      	movs	r2, #1
	data->char_out = c;
   21594:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   21598:	6868      	ldr	r0, [r5, #4]
   2159a:	f008 ff13 	bl	2a3c4 <tx_start.isra.0>
	__asm__ volatile(
   2159e:	f384 8811 	msr	BASEPRI, r4
   215a2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   215a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   215a8:	20006425 	.word	0x20006425

000215ac <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   215ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215b0:	2200      	movs	r2, #0
   215b2:	4607      	mov	r7, r0
   215b4:	b088      	sub	sp, #32
   215b6:	2101      	movs	r1, #1
   215b8:	2002      	movs	r0, #2
   215ba:	f7ea fbd1 	bl	bd60 <z_arm_irq_priority_set>
   215be:	2002      	movs	r0, #2
   215c0:	f7ea fb9c 	bl	bcfc <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   215c4:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   215c8:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   215ca:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   215ce:	2300      	movs	r3, #0
   215d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   215d4:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   215d6:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   215d8:	68eb      	ldr	r3, [r5, #12]
   215da:	1c5a      	adds	r2, r3, #1
   215dc:	d013      	beq.n	21606 <uarte_0_init+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   215de:	a802      	add	r0, sp, #8
   215e0:	9302      	str	r3, [sp, #8]
   215e2:	f7ff fed9 	bl	21398 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   215e6:	9a02      	ldr	r2, [sp, #8]
   215e8:	2301      	movs	r3, #1
   215ea:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   215ec:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   215f0:	68eb      	ldr	r3, [r5, #12]
   215f2:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   215f4:	a802      	add	r0, sp, #8
   215f6:	f7ff fecf 	bl	21398 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   215fa:	9b02      	ldr	r3, [sp, #8]
   215fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21600:	2203      	movs	r2, #3
   21602:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   21606:	6928      	ldr	r0, [r5, #16]
   21608:	1c43      	adds	r3, r0, #1
   2160a:	d006      	beq.n	2161a <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   2160c:	7f2b      	ldrb	r3, [r5, #28]
   2160e:	2b00      	cmp	r3, #0
   21610:	bf14      	ite	ne
   21612:	2103      	movne	r1, #3
   21614:	2100      	moveq	r1, #0
   21616:	f008 fec7 	bl	2a3a8 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2161a:	696b      	ldr	r3, [r5, #20]
   2161c:	1c5a      	adds	r2, r3, #1
   2161e:	d013      	beq.n	21648 <uarte_0_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21620:	a802      	add	r0, sp, #8
   21622:	9302      	str	r3, [sp, #8]
   21624:	f7ff feb8 	bl	21398 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21628:	9a02      	ldr	r2, [sp, #8]
   2162a:	2301      	movs	r3, #1
   2162c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2162e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   21632:	696b      	ldr	r3, [r5, #20]
   21634:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21636:	a802      	add	r0, sp, #8
   21638:	f7ff feae 	bl	21398 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2163c:	9b02      	ldr	r3, [sp, #8]
   2163e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21642:	2203      	movs	r2, #3
   21644:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   21648:	69a8      	ldr	r0, [r5, #24]
   2164a:	1c43      	adds	r3, r0, #1
   2164c:	d006      	beq.n	2165c <uarte_0_init+0xb0>
			nrf_gpio_cfg_input(cfg->cts_pin,
   2164e:	7f6b      	ldrb	r3, [r5, #29]
   21650:	2b00      	cmp	r3, #0
   21652:	bf14      	ite	ne
   21654:	2103      	movne	r1, #3
   21656:	2100      	moveq	r1, #0
   21658:	f008 fea6 	bl	2a3a8 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   2165c:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   21660:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   21662:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   21666:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   2166a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   2166e:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   21670:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   21674:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   21678:	1d31      	adds	r1, r6, #4
   2167a:	f7ff fe9b 	bl	213b4 <uarte_nrfx_configure>
	if (err) {
   2167e:	4605      	mov	r5, r0
   21680:	2800      	cmp	r0, #0
   21682:	d15a      	bne.n	2173a <uarte_0_init+0x18e>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   21684:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   21688:	0798      	lsls	r0, r3, #30
   2168a:	d52d      	bpl.n	216e8 <uarte_0_init+0x13c>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2168c:	f106 0016 	add.w	r0, r6, #22
   21690:	f001 f9f2 	bl	22a78 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   21694:	4b2b      	ldr	r3, [pc, #172]	; (21744 <uarte_0_init+0x198>)
   21696:	4298      	cmp	r0, r3
   21698:	d013      	beq.n	216c2 <uarte_0_init+0x116>
		LOG_ERR("Failed to allocate PPI Channel");
   2169a:	482b      	ldr	r0, [pc, #172]	; (21748 <uarte_0_init+0x19c>)
   2169c:	6803      	ldr	r3, [r0, #0]
   2169e:	0759      	lsls	r1, r3, #29
   216a0:	d00c      	beq.n	216bc <uarte_0_init+0x110>
   216a2:	4b2a      	ldr	r3, [pc, #168]	; (2174c <uarte_0_init+0x1a0>)
   216a4:	9306      	str	r3, [sp, #24]
   216a6:	4b2a      	ldr	r3, [pc, #168]	; (21750 <uarte_0_init+0x1a4>)
   216a8:	9307      	str	r3, [sp, #28]
   216aa:	2303      	movs	r3, #3
   216ac:	9301      	str	r3, [sp, #4]
   216ae:	9305      	str	r3, [sp, #20]
   216b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   216b4:	462b      	mov	r3, r5
   216b6:	aa05      	add	r2, sp, #20
   216b8:	f005 fa16 	bl	26ae8 <z_impl_z_log_msg2_static_create>
		return -EIO;
   216bc:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   216c0:	e03b      	b.n	2173a <uarte_0_init+0x18e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   216c2:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   216c4:	00c3      	lsls	r3, r0, #3
   216c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   216ca:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   216ce:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   216d2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   216d6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   216da:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   216de:	4a1d      	ldr	r2, [pc, #116]	; (21754 <uarte_0_init+0x1a8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   216e0:	2301      	movs	r3, #1
   216e2:	4083      	lsls	r3, r0
   216e4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   216e8:	2308      	movs	r3, #8
   216ea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   216ee:	f898 3008 	ldrb.w	r3, [r8, #8]
   216f2:	b95b      	cbnz	r3, 2170c <uarte_0_init+0x160>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216f4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   216f8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   216fc:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21700:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21704:	2301      	movs	r3, #1
   21706:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2170a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2170c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21710:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   21712:	bf5c      	itt	pl
   21714:	f44f 7280 	movpl.w	r2, #256	; 0x100
   21718:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2171c:	06db      	lsls	r3, r3, #27
   2171e:	bf44      	itt	mi
   21720:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   21724:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   21728:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   2172a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2172c:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21730:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21734:	2301      	movs	r3, #1
   21736:	60a3      	str	r3, [r4, #8]
   21738:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2173a:	4628      	mov	r0, r5
   2173c:	b008      	add	sp, #32
   2173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21742:	bf00      	nop
   21744:	0bad0000 	.word	0x0bad0000
   21748:	200009e8 	.word	0x200009e8
   2174c:	00031e34 	.word	0x00031e34
   21750:	00031e6e 	.word	0x00031e6e
   21754:	4001f000 	.word	0x4001f000

00021758 <random_byte_get>:
	__asm__ volatile(
   21758:	f04f 0320 	mov.w	r3, #32
   2175c:	f3ef 8211 	mrs	r2, BASEPRI
   21760:	f383 8812 	msr	BASEPRI_MAX, r3
   21764:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21768:	4b09      	ldr	r3, [pc, #36]	; (21790 <random_byte_get+0x38>)
   2176a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2176e:	b161      	cbz	r1, 2178a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21770:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   21772:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21776:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2177a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   2177e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   21780:	f382 8811 	msr	BASEPRI, r2
   21784:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   21788:	4770      	bx	lr
	int retval = -EAGAIN;
   2178a:	f06f 000a 	mvn.w	r0, #10
   2178e:	e7f7      	b.n	21780 <random_byte_get+0x28>
   21790:	4000d000 	.word	0x4000d000

00021794 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   21794:	b5f0      	push	{r4, r5, r6, r7, lr}
   21796:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   21798:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   2179a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   2179c:	f04f 0020 	mov.w	r0, #32
   217a0:	f3ef 8e11 	mrs	lr, BASEPRI
   217a4:	f380 8812 	msr	BASEPRI_MAX, r0
   217a8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   217ac:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   217ae:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   217b2:	1ba4      	subs	r4, r4, r6
   217b4:	403c      	ands	r4, r7
	if (available < len) {
   217b6:	42a2      	cmp	r2, r4
		len = available;
   217b8:	bf88      	it	hi
   217ba:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   217bc:	18b0      	adds	r0, r6, r2
   217be:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   217c0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   217c2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   217c4:	f38e 8811 	msr	BASEPRI, lr
   217c8:	f3bf 8f6f 	isb	sy
   217cc:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   217ce:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   217d0:	4290      	cmp	r0, r2
   217d2:	d119      	bne.n	21808 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   217d4:	4566      	cmp	r6, ip
   217d6:	d10d      	bne.n	217f4 <rng_pool_get+0x60>
	__asm__ volatile(
   217d8:	f04f 0520 	mov.w	r5, #32
   217dc:	f3ef 8011 	mrs	r0, BASEPRI
   217e0:	f385 8812 	msr	BASEPRI_MAX, r5
   217e4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   217e8:	781d      	ldrb	r5, [r3, #0]
   217ea:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   217ec:	f380 8811 	msr	BASEPRI, r0
   217f0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   217f4:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   217f6:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   217f8:	b290      	uxth	r0, r2
	available = available - len;
   217fa:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   217fc:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   217fe:	bf22      	ittt	cs
   21800:	4b06      	ldrcs	r3, [pc, #24]	; (2181c <rng_pool_get+0x88>)
   21802:	2201      	movcs	r2, #1
   21804:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   21806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   21808:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   2180c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2180e:	f89e e005 	ldrb.w	lr, [lr, #5]
   21812:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   21816:	403d      	ands	r5, r7
   21818:	e7da      	b.n	217d0 <rng_pool_get+0x3c>
   2181a:	bf00      	nop
   2181c:	4000d000 	.word	0x4000d000

00021820 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21820:	43db      	mvns	r3, r3
{
   21822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21826:	f013 0501 	ands.w	r5, r3, #1
{
   2182a:	460e      	mov	r6, r1
   2182c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2182e:	d004      	beq.n	2183a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   21830:	4821      	ldr	r0, [pc, #132]	; (218b8 <entropy_nrf5_get_entropy_isr+0x98>)
   21832:	f7ff ffaf 	bl	21794 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   21836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2183a:	b3a2      	cbz	r2, 218a6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   2183c:	f04f 0320 	mov.w	r3, #32
   21840:	f3ef 8811 	mrs	r8, BASEPRI
   21844:	f383 8812 	msr	BASEPRI_MAX, r3
   21848:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2184c:	200d      	movs	r0, #13
   2184e:	f7ea fa79 	bl	bd44 <arch_irq_is_enabled>
   21852:	4607      	mov	r7, r0
		irq_disable(IRQN);
   21854:	200d      	movs	r0, #13
   21856:	f7ea fa61 	bl	bd1c <arch_irq_disable>
	__asm__ volatile(
   2185a:	f388 8811 	msr	BASEPRI, r8
   2185e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21862:	f8df 8058 	ldr.w	r8, [pc, #88]	; 218bc <entropy_nrf5_get_entropy_isr+0x9c>
   21866:	f8df 9058 	ldr.w	r9, [pc, #88]	; 218c0 <entropy_nrf5_get_entropy_isr+0xa0>
   2186a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   2186e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   21872:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21876:	2301      	movs	r3, #1
   21878:	f8c8 3000 	str.w	r3, [r8]
   2187c:	4625      	mov	r5, r4
   2187e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21882:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   21886:	b183      	cbz	r3, 218aa <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   21888:	f7ff ff66 	bl	21758 <random_byte_get>
			if (byte < 0) {
   2188c:	1e03      	subs	r3, r0, #0
   2188e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   21892:	dbf6      	blt.n	21882 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   21894:	3d01      	subs	r5, #1
   21896:	b2ad      	uxth	r5, r5
   21898:	5573      	strb	r3, [r6, r5]
		} while (len);
   2189a:	2d00      	cmp	r5, #0
   2189c:	d1f1      	bne.n	21882 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   2189e:	b117      	cbz	r7, 218a6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   218a0:	200d      	movs	r0, #13
   218a2:	f7ea fa2b 	bl	bcfc <arch_irq_enable>
	return cnt;
   218a6:	4620      	mov	r0, r4
   218a8:	e7c5      	b.n	21836 <entropy_nrf5_get_entropy_isr+0x16>
   218aa:	f3bf 8f4f 	dsb	sy
				__WFE();
   218ae:	bf20      	wfe
				__SEV();
   218b0:	bf40      	sev
				__WFE();
   218b2:	bf20      	wfe
   218b4:	e7e5      	b.n	21882 <entropy_nrf5_get_entropy_isr+0x62>
   218b6:	bf00      	nop
   218b8:	20005ae0 	.word	0x20005ae0
   218bc:	4000d000 	.word	0x4000d000
   218c0:	e000e100 	.word	0xe000e100

000218c4 <entropy_nrf5_get_entropy>:
{
   218c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   218c8:	4f13      	ldr	r7, [pc, #76]	; (21918 <entropy_nrf5_get_entropy+0x54>)
   218ca:	460d      	mov	r5, r1
   218cc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   218ce:	f107 0845 	add.w	r8, r7, #69	; 0x45
   218d2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   218d6:	b914      	cbnz	r4, 218de <entropy_nrf5_get_entropy+0x1a>
}
   218d8:	4620      	mov	r0, r4
   218da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   218de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   218e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   218e6:	4638      	mov	r0, r7
   218e8:	f003 f876 	bl	249d8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   218ec:	4622      	mov	r2, r4
   218ee:	4629      	mov	r1, r5
   218f0:	4640      	mov	r0, r8
   218f2:	f7ff ff4f 	bl	21794 <rng_pool_get>
   218f6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   218f8:	4638      	mov	r0, r7
   218fa:	f003 f847 	bl	2498c <z_impl_k_sem_give>
		if (bytes == 0U) {
   218fe:	b93e      	cbnz	r6, 21910 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   21900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21908:	4648      	mov	r0, r9
   2190a:	f003 f865 	bl	249d8 <z_impl_k_sem_take>
			continue;
   2190e:	e7e2      	b.n	218d6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   21910:	1ba4      	subs	r4, r4, r6
   21912:	b2a4      	uxth	r4, r4
		buf += bytes;
   21914:	4435      	add	r5, r6
   21916:	e7de      	b.n	218d6 <entropy_nrf5_get_entropy+0x12>
   21918:	20005ab0 	.word	0x20005ab0

0002191c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   2191c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2191e:	4c19      	ldr	r4, [pc, #100]	; (21984 <entropy_nrf5_init+0x68>)
   21920:	2201      	movs	r2, #1
   21922:	4611      	mov	r1, r2
   21924:	4620      	mov	r0, r4
   21926:	f009 fa03 	bl	2ad30 <z_impl_k_sem_init>
   2192a:	2201      	movs	r2, #1
   2192c:	2100      	movs	r1, #0
   2192e:	f104 0018 	add.w	r0, r4, #24
   21932:	f009 f9fd 	bl	2ad30 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   21936:	f240 4307 	movw	r3, #1031	; 0x407
   2193a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   2193e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21942:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   21944:	230c      	movs	r3, #12
   21946:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2194a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   2194c:	4b0e      	ldr	r3, [pc, #56]	; (21988 <entropy_nrf5_init+0x6c>)
   2194e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   21952:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   21956:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2195a:	f042 0201 	orr.w	r2, r2, #1
   2195e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   21962:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21964:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   21968:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2196c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21970:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21972:	6019      	str	r1, [r3, #0]
   21974:	200d      	movs	r0, #13
   21976:	f7ea f9f3 	bl	bd60 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2197a:	200d      	movs	r0, #13
   2197c:	f7ea f9be 	bl	bcfc <arch_irq_enable>

	return 0;
}
   21980:	4628      	mov	r0, r5
   21982:	bd38      	pop	{r3, r4, r5, pc}
   21984:	20005ab0 	.word	0x20005ab0
   21988:	4000d000 	.word	0x4000d000

0002198c <isr>:
{
   2198c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2198e:	f7ff fee3 	bl	21758 <random_byte_get>
	if (byte < 0) {
   21992:	2800      	cmp	r0, #0
   21994:	db20      	blt.n	219d8 <isr+0x4c>
	uint8_t last  = rngp->last;
   21996:	4b17      	ldr	r3, [pc, #92]	; (219f4 <isr+0x68>)
   21998:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2199c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   219a0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   219a4:	1a51      	subs	r1, r2, r1
   219a6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   219aa:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   219ac:	d10d      	bne.n	219ca <isr+0x3e>
	uint8_t last  = rngp->last;
   219ae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   219b2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   219b6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   219ba:	1a51      	subs	r1, r2, r1
   219bc:	ea34 0101 	bics.w	r1, r4, r1
   219c0:	d10b      	bne.n	219da <isr+0x4e>
   219c2:	4b0d      	ldr	r3, [pc, #52]	; (219f8 <isr+0x6c>)
   219c4:	2201      	movs	r2, #1
   219c6:	605a      	str	r2, [r3, #4]
}
   219c8:	e00e      	b.n	219e8 <isr+0x5c>
	rngp->buffer[last] = byte;
   219ca:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   219cc:	3201      	adds	r2, #1
   219ce:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   219d0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   219d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   219d8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   219da:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   219dc:	3201      	adds	r2, #1
   219de:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   219e0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   219e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   219e8:	4804      	ldr	r0, [pc, #16]	; (219fc <isr+0x70>)
}
   219ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   219ee:	f002 bfcd 	b.w	2498c <z_impl_k_sem_give>
   219f2:	bf00      	nop
   219f4:	20005ab0 	.word	0x20005ab0
   219f8:	4000d000 	.word	0x4000d000
   219fc:	20005ac8 	.word	0x20005ac8

00021a00 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   21a00:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   21a02:	2301      	movs	r3, #1
   21a04:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21a06:	4a11      	ldr	r2, [pc, #68]	; (21a4c <compare_int_lock+0x4c>)
   21a08:	f3bf 8f5b 	dmb	ish
   21a0c:	43dc      	mvns	r4, r3
   21a0e:	e852 1f00 	ldrex	r1, [r2]
   21a12:	ea01 0c04 	and.w	ip, r1, r4
   21a16:	e842 ce00 	strex	lr, ip, [r2]
   21a1a:	f1be 0f00 	cmp.w	lr, #0
   21a1e:	d1f6      	bne.n	21a0e <compare_int_lock+0xe>
   21a20:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21a28:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   21a2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   21a34:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   21a38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21a3c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   21a40:	420b      	tst	r3, r1
}
   21a42:	bf14      	ite	ne
   21a44:	2001      	movne	r0, #1
   21a46:	2000      	moveq	r0, #0
   21a48:	bd10      	pop	{r4, pc}
   21a4a:	bf00      	nop
   21a4c:	20005b08 	.word	0x20005b08

00021a50 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   21a50:	4919      	ldr	r1, [pc, #100]	; (21ab8 <sys_clock_timeout_handler+0x68>)
{
   21a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a54:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   21a56:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   21a5a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   21a5c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   21a60:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   21a64:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   21a66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   21a6a:	d222      	bcs.n	21ab2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   21a6c:	4b13      	ldr	r3, [pc, #76]	; (21abc <sys_clock_timeout_handler+0x6c>)
   21a6e:	681b      	ldr	r3, [r3, #0]
   21a70:	0a1a      	lsrs	r2, r3, #8
   21a72:	061b      	lsls	r3, r3, #24
   21a74:	195e      	adds	r6, r3, r5
   21a76:	4b12      	ldr	r3, [pc, #72]	; (21ac0 <sys_clock_timeout_handler+0x70>)
   21a78:	f142 0700 	adc.w	r7, r2, #0
   21a7c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   21a80:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   21a82:	f003 fddd 	bl	25640 <sys_clock_announce>
    return p_reg->CC[ch];
   21a86:	00a3      	lsls	r3, r4, #2
   21a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21a8c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   21a90:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   21a94:	42aa      	cmp	r2, r5
   21a96:	d10b      	bne.n	21ab0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   21a98:	b91e      	cbnz	r6, 21aa2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   21a9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21a9e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   21aa2:	4b08      	ldr	r3, [pc, #32]	; (21ac4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21aa4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   21aa8:	fa00 f404 	lsl.w	r4, r0, r4
   21aac:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   21ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   21ab2:	2600      	movs	r6, #0
   21ab4:	e7e5      	b.n	21a82 <sys_clock_timeout_handler+0x32>
   21ab6:	bf00      	nop
   21ab8:	200036f8 	.word	0x200036f8
   21abc:	20005b0c 	.word	0x20005b0c
   21ac0:	200036e0 	.word	0x200036e0
   21ac4:	40011000 	.word	0x40011000

00021ac8 <compare_int_unlock>:
	if (key) {
   21ac8:	b319      	cbz	r1, 21b12 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21aca:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   21ace:	2301      	movs	r3, #1
   21ad0:	4a10      	ldr	r2, [pc, #64]	; (21b14 <compare_int_unlock+0x4c>)
   21ad2:	4083      	lsls	r3, r0
   21ad4:	e852 1f00 	ldrex	r1, [r2]
   21ad8:	4319      	orrs	r1, r3
   21ada:	e842 1c00 	strex	ip, r1, [r2]
   21ade:	f1bc 0f00 	cmp.w	ip, #0
   21ae2:	d1f7      	bne.n	21ad4 <compare_int_unlock+0xc>
   21ae4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   21ae8:	4a0b      	ldr	r2, [pc, #44]	; (21b18 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21aee:	4083      	lsls	r3, r0
   21af0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21af4:	4b09      	ldr	r3, [pc, #36]	; (21b1c <compare_int_unlock+0x54>)
   21af6:	f3bf 8f5b 	dmb	ish
   21afa:	681b      	ldr	r3, [r3, #0]
   21afc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   21b00:	fa23 f000 	lsr.w	r0, r3, r0
   21b04:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21b06:	bf42      	ittt	mi
   21b08:	4b05      	ldrmi	r3, [pc, #20]	; (21b20 <compare_int_unlock+0x58>)
   21b0a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   21b0e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   21b12:	4770      	bx	lr
   21b14:	20005b08 	.word	0x20005b08
   21b18:	40011000 	.word	0x40011000
   21b1c:	20005b04 	.word	0x20005b04
   21b20:	e000e100 	.word	0xe000e100

00021b24 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   21b24:	4b0d      	ldr	r3, [pc, #52]	; (21b5c <z_nrf_rtc_timer_read+0x38>)
   21b26:	6818      	ldr	r0, [r3, #0]
   21b28:	0a01      	lsrs	r1, r0, #8
   21b2a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   21b2c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   21b30:	4b0b      	ldr	r3, [pc, #44]	; (21b60 <z_nrf_rtc_timer_read+0x3c>)
   21b32:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   21b36:	1818      	adds	r0, r3, r0
   21b38:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   21b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   21b40:	d20a      	bcs.n	21b58 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   21b42:	4b08      	ldr	r3, [pc, #32]	; (21b64 <z_nrf_rtc_timer_read+0x40>)
   21b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   21b48:	4290      	cmp	r0, r2
   21b4a:	eb71 0303 	sbcs.w	r3, r1, r3
   21b4e:	d203      	bcs.n	21b58 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   21b50:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21b54:	f141 0100 	adc.w	r1, r1, #0
}
   21b58:	4770      	bx	lr
   21b5a:	bf00      	nop
   21b5c:	20005b0c 	.word	0x20005b0c
   21b60:	40011000 	.word	0x40011000
   21b64:	200036e0 	.word	0x200036e0

00021b68 <compare_set>:
{
   21b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b6c:	b085      	sub	sp, #20
   21b6e:	4616      	mov	r6, r2
   21b70:	4698      	mov	r8, r3
   21b72:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   21b74:	f7ff ff44 	bl	21a00 <compare_int_lock>
   21b78:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21b7a:	f7ff ffd3 	bl	21b24 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21b7e:	42b0      	cmp	r0, r6
   21b80:	eb71 0308 	sbcs.w	r3, r1, r8
   21b84:	d278      	bcs.n	21c78 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   21b86:	4b46      	ldr	r3, [pc, #280]	; (21ca0 <compare_set+0x138>)
   21b88:	1a30      	subs	r0, r6, r0
   21b8a:	eb68 0101 	sbc.w	r1, r8, r1
   21b8e:	4298      	cmp	r0, r3
   21b90:	f171 0300 	sbcs.w	r3, r1, #0
   21b94:	f080 8081 	bcs.w	21c9a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   21b98:	4b42      	ldr	r3, [pc, #264]	; (21ca4 <compare_set+0x13c>)
   21b9a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   21b9e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   21ba2:	45d8      	cmp	r8, fp
   21ba4:	bf08      	it	eq
   21ba6:	4556      	cmpeq	r6, sl
   21ba8:	d051      	beq.n	21c4e <compare_set+0xe6>
   21baa:	ea4f 0985 	mov.w	r9, r5, lsl #2
   21bae:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   21bb2:	f105 0750 	add.w	r7, r5, #80	; 0x50
   21bb6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   21bba:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21bbc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   21bc0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21bc4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   21bc6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   21bca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21bce:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   21bd0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   21bd4:	4b34      	ldr	r3, [pc, #208]	; (21ca8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21bd6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   21bda:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   21bdc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   21be0:	1a40      	subs	r0, r0, r1
   21be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21be6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   21bea:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   21bec:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   21bf0:	d107      	bne.n	21c02 <compare_set+0x9a>
   21bf2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   21bf6:	2013      	movs	r0, #19
   21bf8:	f009 fae4 	bl	2b1c4 <z_impl_k_busy_wait>
   21bfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   21c00:	4b29      	ldr	r3, [pc, #164]	; (21ca8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   21c02:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   21c06:	eba4 000c 	sub.w	r0, r4, ip
   21c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   21c0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21c12:	bf88      	it	hi
   21c14:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21c16:	2000      	movs	r0, #0
   21c18:	6038      	str	r0, [r7, #0]
   21c1a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   21c1c:	9801      	ldr	r0, [sp, #4]
   21c1e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21c22:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   21c26:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   21c2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   21c2e:	4281      	cmp	r1, r0
   21c30:	d006      	beq.n	21c40 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   21c32:	1a20      	subs	r0, r4, r0
   21c34:	3802      	subs	r0, #2
   21c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   21c3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21c3e:	d819      	bhi.n	21c74 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   21c40:	1aa4      	subs	r4, r4, r2
   21c42:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   21c46:	eb14 0a06 	adds.w	sl, r4, r6
   21c4a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   21c4e:	4915      	ldr	r1, [pc, #84]	; (21ca4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   21c50:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   21c52:	012b      	lsls	r3, r5, #4
   21c54:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   21c58:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   21c5c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   21c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21c60:	6053      	str	r3, [r2, #4]
	return ret;
   21c62:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   21c64:	4628      	mov	r0, r5
   21c66:	9900      	ldr	r1, [sp, #0]
   21c68:	f7ff ff2e 	bl	21ac8 <compare_int_unlock>
}
   21c6c:	4620      	mov	r0, r4
   21c6e:	b005      	add	sp, #20
   21c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c74:	4620      	mov	r0, r4
   21c76:	e7b1      	b.n	21bdc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   21c78:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21c7a:	4a0c      	ldr	r2, [pc, #48]	; (21cac <compare_set+0x144>)
   21c7c:	f3bf 8f5b 	dmb	ish
   21c80:	40ab      	lsls	r3, r5
   21c82:	e852 1f00 	ldrex	r1, [r2]
   21c86:	4319      	orrs	r1, r3
   21c88:	e842 1000 	strex	r0, r1, [r2]
   21c8c:	2800      	cmp	r0, #0
   21c8e:	d1f8      	bne.n	21c82 <compare_set+0x11a>
   21c90:	f3bf 8f5b 	dmb	ish
   21c94:	46b2      	mov	sl, r6
   21c96:	46c3      	mov	fp, r8
   21c98:	e7d9      	b.n	21c4e <compare_set+0xe6>
			return -EINVAL;
   21c9a:	f06f 0415 	mvn.w	r4, #21
   21c9e:	e7e1      	b.n	21c64 <compare_set+0xfc>
   21ca0:	01000001 	.word	0x01000001
   21ca4:	200036e8 	.word	0x200036e8
   21ca8:	40011000 	.word	0x40011000
   21cac:	20005b04 	.word	0x20005b04

00021cb0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   21cb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   21cb2:	4b19      	ldr	r3, [pc, #100]	; (21d18 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   21cb4:	4d19      	ldr	r5, [pc, #100]	; (21d1c <sys_clock_driver_init+0x6c>)
   21cb6:	2400      	movs	r4, #0
   21cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21cc0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   21cc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   21cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21ccc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21cd0:	4b13      	ldr	r3, [pc, #76]	; (21d20 <sys_clock_driver_init+0x70>)
   21cd2:	2602      	movs	r6, #2
   21cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   21cd8:	2101      	movs	r1, #1
   21cda:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   21cde:	2011      	movs	r0, #17
   21ce0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21ce4:	4622      	mov	r2, r4
   21ce6:	f7ea f83b 	bl	bd60 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   21cea:	2011      	movs	r0, #17
   21cec:	f7ea f806 	bl	bcfc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   21cf0:	4a0c      	ldr	r2, [pc, #48]	; (21d24 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   21cf2:	2301      	movs	r3, #1
   21cf4:	60ab      	str	r3, [r5, #8]
   21cf6:	602b      	str	r3, [r5, #0]
   21cf8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   21cfa:	4b0b      	ldr	r3, [pc, #44]	; (21d28 <sys_clock_driver_init+0x78>)
   21cfc:	4a0b      	ldr	r2, [pc, #44]	; (21d2c <sys_clock_driver_init+0x7c>)
   21cfe:	9300      	str	r3, [sp, #0]
   21d00:	9401      	str	r4, [sp, #4]
   21d02:	2300      	movs	r3, #0
   21d04:	4620      	mov	r0, r4
   21d06:	f7ff ff2f 	bl	21b68 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   21d0a:	4630      	mov	r0, r6
   21d0c:	f7fe fcca 	bl	206a4 <z_nrf_clock_control_lf_on>

	return 0;
}
   21d10:	4620      	mov	r0, r4
   21d12:	b002      	add	sp, #8
   21d14:	bd70      	pop	{r4, r5, r6, pc}
   21d16:	bf00      	nop
   21d18:	200036e8 	.word	0x200036e8
   21d1c:	40011000 	.word	0x40011000
   21d20:	e000e100 	.word	0xe000e100
   21d24:	20005b08 	.word	0x20005b08
   21d28:	00021a51 	.word	0x00021a51
   21d2c:	007fffff 	.word	0x007fffff

00021d30 <rtc_nrf_isr>:
{
   21d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   21d34:	4c35      	ldr	r4, [pc, #212]	; (21e0c <rtc_nrf_isr+0xdc>)
   21d36:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   21d3a:	079a      	lsls	r2, r3, #30
   21d3c:	d50b      	bpl.n	21d56 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21d3e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   21d42:	b143      	cbz	r3, 21d56 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   21d44:	4a32      	ldr	r2, [pc, #200]	; (21e10 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21d46:	2300      	movs	r3, #0
   21d48:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   21d4c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   21d50:	6813      	ldr	r3, [r2, #0]
   21d52:	3301      	adds	r3, #1
   21d54:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   21d56:	f04f 0320 	mov.w	r3, #32
   21d5a:	f3ef 8211 	mrs	r2, BASEPRI
   21d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   21d62:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   21d66:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21d6a:	03db      	lsls	r3, r3, #15
   21d6c:	d512      	bpl.n	21d94 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21d6e:	f3bf 8f5b 	dmb	ish
   21d72:	4b28      	ldr	r3, [pc, #160]	; (21e14 <rtc_nrf_isr+0xe4>)
   21d74:	e853 1f00 	ldrex	r1, [r3]
   21d78:	f021 0001 	bic.w	r0, r1, #1
   21d7c:	e843 0600 	strex	r6, r0, [r3]
   21d80:	2e00      	cmp	r6, #0
   21d82:	d1f7      	bne.n	21d74 <rtc_nrf_isr+0x44>
   21d84:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21d88:	2900      	cmp	r1, #0
   21d8a:	d136      	bne.n	21dfa <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21d8c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   21d90:	2b00      	cmp	r3, #0
   21d92:	d132      	bne.n	21dfa <rtc_nrf_isr+0xca>
{
   21d94:	2300      	movs	r3, #0
	__asm__ volatile(
   21d96:	f382 8811 	msr	BASEPRI, r2
   21d9a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   21d9e:	b34b      	cbz	r3, 21df4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   21da0:	f7ff fec0 	bl	21b24 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   21da4:	f04f 0320 	mov.w	r3, #32
   21da8:	f3ef 8c11 	mrs	ip, BASEPRI
   21dac:	f383 8812 	msr	BASEPRI_MAX, r3
   21db0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   21db4:	4b18      	ldr	r3, [pc, #96]	; (21e18 <rtc_nrf_isr+0xe8>)
   21db6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   21dba:	42b0      	cmp	r0, r6
   21dbc:	eb71 0207 	sbcs.w	r2, r1, r7
   21dc0:	f04f 0200 	mov.w	r2, #0
   21dc4:	d320      	bcc.n	21e08 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21dc6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21dca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   21dce:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21dd2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   21dd6:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   21dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21ddc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   21de0:	f38c 8811 	msr	BASEPRI, ip
   21de4:	f3bf 8f6f 	isb	sy
		if (handler) {
   21de8:	b121      	cbz	r1, 21df4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   21dea:	9500      	str	r5, [sp, #0]
   21dec:	4632      	mov	r2, r6
   21dee:	463b      	mov	r3, r7
   21df0:	2000      	movs	r0, #0
   21df2:	4788      	blx	r1
}
   21df4:	b003      	add	sp, #12
   21df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21dfa:	2300      	movs	r3, #0
   21dfc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   21e00:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21e04:	2301      	movs	r3, #1
}
   21e06:	e7c6      	b.n	21d96 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   21e08:	4611      	mov	r1, r2
   21e0a:	e7e9      	b.n	21de0 <rtc_nrf_isr+0xb0>
   21e0c:	40011000 	.word	0x40011000
   21e10:	20005b0c 	.word	0x20005b0c
   21e14:	20005b04 	.word	0x20005b04
   21e18:	200036e8 	.word	0x200036e8

00021e1c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   21e1c:	1c43      	adds	r3, r0, #1
{
   21e1e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   21e20:	d021      	beq.n	21e66 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21e22:	2801      	cmp	r0, #1
   21e24:	dd21      	ble.n	21e6a <sys_clock_set_timeout+0x4e>
   21e26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21e2a:	da20      	bge.n	21e6e <sys_clock_set_timeout+0x52>
   21e2c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   21e2e:	f7ff fe79 	bl	21b24 <z_nrf_rtc_timer_read>
   21e32:	4b10      	ldr	r3, [pc, #64]	; (21e74 <sys_clock_set_timeout+0x58>)
   21e34:	e9d3 1300 	ldrd	r1, r3, [r3]
   21e38:	1a40      	subs	r0, r0, r1
		ticks = 0;
   21e3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21e3e:	bf28      	it	cs
   21e40:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   21e42:	3001      	adds	r0, #1
   21e44:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   21e46:	480c      	ldr	r0, [pc, #48]	; (21e78 <sys_clock_set_timeout+0x5c>)
   21e48:	4282      	cmp	r2, r0
   21e4a:	bf28      	it	cs
   21e4c:	4602      	movcs	r2, r0
   21e4e:	1852      	adds	r2, r2, r1
   21e50:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21e54:	4909      	ldr	r1, [pc, #36]	; (21e7c <sys_clock_set_timeout+0x60>)
   21e56:	9001      	str	r0, [sp, #4]
   21e58:	9100      	str	r1, [sp, #0]
   21e5a:	f143 0300 	adc.w	r3, r3, #0
   21e5e:	f7ff fe83 	bl	21b68 <compare_set>
}
   21e62:	b002      	add	sp, #8
   21e64:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   21e66:	4804      	ldr	r0, [pc, #16]	; (21e78 <sys_clock_set_timeout+0x5c>)
   21e68:	e7e0      	b.n	21e2c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21e6a:	2400      	movs	r4, #0
   21e6c:	e7df      	b.n	21e2e <sys_clock_set_timeout+0x12>
   21e6e:	4c02      	ldr	r4, [pc, #8]	; (21e78 <sys_clock_set_timeout+0x5c>)
   21e70:	e7dd      	b.n	21e2e <sys_clock_set_timeout+0x12>
   21e72:	bf00      	nop
   21e74:	200036f8 	.word	0x200036f8
   21e78:	007fffff 	.word	0x007fffff
   21e7c:	00021a51 	.word	0x00021a51

00021e80 <sys_clock_elapsed>:
{
   21e80:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   21e82:	f7ff fe4f 	bl	21b24 <z_nrf_rtc_timer_read>
   21e86:	4b02      	ldr	r3, [pc, #8]	; (21e90 <sys_clock_elapsed+0x10>)
   21e88:	681b      	ldr	r3, [r3, #0]
}
   21e8a:	1ac0      	subs	r0, r0, r3
   21e8c:	bd08      	pop	{r3, pc}
   21e8e:	bf00      	nop
   21e90:	200036f8 	.word	0x200036f8

00021e94 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   21e94:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   21e98:	4905      	ldr	r1, [pc, #20]	; (21eb0 <__NVIC_SystemReset+0x1c>)
   21e9a:	4b06      	ldr	r3, [pc, #24]	; (21eb4 <__NVIC_SystemReset+0x20>)
   21e9c:	68ca      	ldr	r2, [r1, #12]
   21e9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   21ea2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   21ea4:	60cb      	str	r3, [r1, #12]
   21ea6:	f3bf 8f4f 	dsb	sy
    __NOP();
   21eaa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   21eac:	e7fd      	b.n	21eaa <__NVIC_SystemReset+0x16>
   21eae:	bf00      	nop
   21eb0:	e000ed00 	.word	0xe000ed00
   21eb4:	05fa0004 	.word	0x05fa0004

00021eb8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21eb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   21ebc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21ec0:	2a08      	cmp	r2, #8
   21ec2:	d106      	bne.n	21ed2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21ec4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   21ec8:	2b05      	cmp	r3, #5
   21eca:	d802      	bhi.n	21ed2 <nrf52_errata_103+0x1a>
   21ecc:	4a02      	ldr	r2, [pc, #8]	; (21ed8 <nrf52_errata_103+0x20>)
   21ece:	5cd0      	ldrb	r0, [r2, r3]
   21ed0:	4770      	bx	lr
        return false;
   21ed2:	2000      	movs	r0, #0
}
   21ed4:	4770      	bx	lr
   21ed6:	bf00      	nop
   21ed8:	00031e8e 	.word	0x00031e8e

00021edc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21edc:	4a02      	ldr	r2, [pc, #8]	; (21ee8 <nvmc_wait+0xc>)
   21ede:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   21ee2:	2b00      	cmp	r3, #0
   21ee4:	d0fb      	beq.n	21ede <nvmc_wait+0x2>
}
   21ee6:	4770      	bx	lr
   21ee8:	4001e000 	.word	0x4001e000

00021eec <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   21eec:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   21eee:	f008 fb36 	bl	2a55e <nrf52_errata_136>
   21ef2:	b140      	cbz	r0, 21f06 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   21ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21ef8:	2200      	movs	r2, #0
   21efa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   21efe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   21f02:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   21f06:	f008 fb2a 	bl	2a55e <nrf52_errata_136>
   21f0a:	2800      	cmp	r0, #0
   21f0c:	d046      	beq.n	21f9c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   21f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21f12:	4b65      	ldr	r3, [pc, #404]	; (220a8 <SystemInit+0x1bc>)
   21f14:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   21f18:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   21f1c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   21f20:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21f24:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   21f28:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   21f2c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   21f30:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21f34:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   21f38:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   21f3c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21f40:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21f44:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   21f48:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   21f4c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   21f50:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   21f54:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   21f58:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   21f5c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   21f60:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   21f64:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   21f68:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   21f6c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   21f70:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   21f74:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   21f78:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   21f7c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   21f80:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   21f84:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   21f88:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   21f8c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   21f90:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   21f94:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   21f98:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   21f9c:	f7ff ff8c 	bl	21eb8 <nrf52_errata_103>
   21fa0:	b118      	cbz	r0, 21faa <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   21fa2:	4b42      	ldr	r3, [pc, #264]	; (220ac <SystemInit+0x1c0>)
   21fa4:	4a42      	ldr	r2, [pc, #264]	; (220b0 <SystemInit+0x1c4>)
   21fa6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   21faa:	f7ff ff85 	bl	21eb8 <nrf52_errata_103>
   21fae:	b118      	cbz	r0, 21fb8 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   21fb0:	4b40      	ldr	r3, [pc, #256]	; (220b4 <SystemInit+0x1c8>)
   21fb2:	22fb      	movs	r2, #251	; 0xfb
   21fb4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   21fb8:	f7ff ff7e 	bl	21eb8 <nrf52_errata_103>
   21fbc:	b170      	cbz	r0, 21fdc <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   21fbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   21fc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21fc6:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   21fca:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   21fce:	f022 020f 	bic.w	r2, r2, #15
   21fd2:	f003 030f 	and.w	r3, r3, #15
   21fd6:	4313      	orrs	r3, r2
   21fd8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   21fdc:	f7ff ff6c 	bl	21eb8 <nrf52_errata_103>
   21fe0:	b120      	cbz	r0, 21fec <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   21fe2:	4b35      	ldr	r3, [pc, #212]	; (220b8 <SystemInit+0x1cc>)
   21fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
   21fe8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   21fec:	f008 fab7 	bl	2a55e <nrf52_errata_136>
   21ff0:	b148      	cbz	r0, 22006 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   21ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21ff6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   21ffa:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   21ffc:	bf44      	itt	mi
   21ffe:	f06f 0201 	mvnmi.w	r2, #1
   22002:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2200a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2200e:	2a08      	cmp	r2, #8
   22010:	d10e      	bne.n	22030 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22012:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   22016:	2b05      	cmp	r3, #5
   22018:	d802      	bhi.n	22020 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2201a:	4a28      	ldr	r2, [pc, #160]	; (220bc <SystemInit+0x1d0>)
   2201c:	5cd3      	ldrb	r3, [r2, r3]
   2201e:	b13b      	cbz	r3, 22030 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   22020:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22024:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   22028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2202c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   22030:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   22034:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   22038:	07db      	lsls	r3, r3, #31
   2203a:	d514      	bpl.n	22066 <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2203c:	4820      	ldr	r0, [pc, #128]	; (220c0 <SystemInit+0x1d4>)
   2203e:	2301      	movs	r3, #1
   22040:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   22044:	f7ff ff4a 	bl	21edc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   22048:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   2204c:	f023 0301 	bic.w	r3, r3, #1
   22050:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   22054:	f7ff ff42 	bl	21edc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22058:	2300      	movs	r3, #0
   2205a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   2205e:	f7ff ff3d 	bl	21edc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   22062:	f7ff ff17 	bl	21e94 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22066:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   2206a:	2b00      	cmp	r3, #0
   2206c:	db03      	blt.n	22076 <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2206e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22072:	2b00      	cmp	r3, #0
   22074:	da14      	bge.n	220a0 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22076:	4912      	ldr	r1, [pc, #72]	; (220c0 <SystemInit+0x1d4>)
   22078:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2207a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2207e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22082:	2412      	movs	r4, #18
    nvmc_wait();
   22084:	f7ff ff2a 	bl	21edc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22088:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2208c:	f7ff ff26 	bl	21edc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   22090:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   22094:	f7ff ff22 	bl	21edc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22098:	2300      	movs	r3, #0
   2209a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   2209e:	e7de      	b.n	2205e <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   220a0:	4b08      	ldr	r3, [pc, #32]	; (220c4 <SystemInit+0x1d8>)
   220a2:	4a09      	ldr	r2, [pc, #36]	; (220c8 <SystemInit+0x1dc>)
   220a4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   220a6:	bd10      	pop	{r4, pc}
   220a8:	4000c000 	.word	0x4000c000
   220ac:	40005000 	.word	0x40005000
   220b0:	00038148 	.word	0x00038148
   220b4:	4000f000 	.word	0x4000f000
   220b8:	40029000 	.word	0x40029000
   220bc:	00031e88 	.word	0x00031e88
   220c0:	4001e000 	.word	0x4001e000
   220c4:	200007e0 	.word	0x200007e0
   220c8:	03d09000 	.word	0x03d09000

000220cc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   220cc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   220ce:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   220d0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   220d2:	fab2 f382 	clz	r3, r2
   220d6:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   220da:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   220dc:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   220de:	d014      	beq.n	2210a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   220e0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   220e4:	fa05 f303 	lsl.w	r3, r5, r3
   220e8:	ea22 0303 	bic.w	r3, r2, r3
   220ec:	e850 6f00 	ldrex	r6, [r0]
   220f0:	4296      	cmp	r6, r2
   220f2:	d104      	bne.n	220fe <nrfx_flag32_alloc+0x32>
   220f4:	e840 3c00 	strex	ip, r3, [r0]
   220f8:	f1bc 0f00 	cmp.w	ip, #0
   220fc:	d1f6      	bne.n	220ec <nrfx_flag32_alloc+0x20>
   220fe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22102:	d1e5      	bne.n	220d0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   22104:	4802      	ldr	r0, [pc, #8]	; (22110 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   22106:	700c      	strb	r4, [r1, #0]
}
   22108:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   2210a:	4802      	ldr	r0, [pc, #8]	; (22114 <nrfx_flag32_alloc+0x48>)
   2210c:	e7fc      	b.n	22108 <nrfx_flag32_alloc+0x3c>
   2210e:	bf00      	nop
   22110:	0bad0000 	.word	0x0bad0000
   22114:	0bad0002 	.word	0x0bad0002

00022118 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   22118:	6803      	ldr	r3, [r0, #0]
   2211a:	40cb      	lsrs	r3, r1
   2211c:	07db      	lsls	r3, r3, #31
{
   2211e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   22120:	d415      	bmi.n	2214e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   22122:	2301      	movs	r3, #1
   22124:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   22128:	6803      	ldr	r3, [r0, #0]
   2212a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2212e:	ea41 0203 	orr.w	r2, r1, r3
   22132:	e850 4f00 	ldrex	r4, [r0]
   22136:	429c      	cmp	r4, r3
   22138:	d104      	bne.n	22144 <nrfx_flag32_free+0x2c>
   2213a:	e840 2c00 	strex	ip, r2, [r0]
   2213e:	f1bc 0f00 	cmp.w	ip, #0
   22142:	d1f6      	bne.n	22132 <nrfx_flag32_free+0x1a>
   22144:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22148:	d1ee      	bne.n	22128 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   2214a:	4802      	ldr	r0, [pc, #8]	; (22154 <nrfx_flag32_free+0x3c>)
}
   2214c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2214e:	4802      	ldr	r0, [pc, #8]	; (22158 <nrfx_flag32_free+0x40>)
   22150:	e7fc      	b.n	2214c <nrfx_flag32_free+0x34>
   22152:	bf00      	nop
   22154:	0bad0000 	.word	0x0bad0000
   22158:	0bad0004 	.word	0x0bad0004

0002215c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2215c:	4b04      	ldr	r3, [pc, #16]	; (22170 <nrfx_clock_init+0x14>)
   2215e:	791a      	ldrb	r2, [r3, #4]
   22160:	b922      	cbnz	r2, 2216c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   22162:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   22164:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   22166:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   22168:	4802      	ldr	r0, [pc, #8]	; (22174 <nrfx_clock_init+0x18>)
   2216a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2216c:	4802      	ldr	r0, [pc, #8]	; (22178 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2216e:	4770      	bx	lr
   22170:	20005b10 	.word	0x20005b10
   22174:	0bad0000 	.word	0x0bad0000
   22178:	0bad000c 	.word	0x0bad000c

0002217c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2217c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2217e:	2000      	movs	r0, #0
   22180:	f7e9 fde0 	bl	bd44 <arch_irq_is_enabled>
   22184:	b908      	cbnz	r0, 2218a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   22186:	f7e9 fdb9 	bl	bcfc <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   2218a:	4b02      	ldr	r3, [pc, #8]	; (22194 <nrfx_clock_enable+0x18>)
   2218c:	2201      	movs	r2, #1
   2218e:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   22190:	bd08      	pop	{r3, pc}
   22192:	bf00      	nop
   22194:	2000600f 	.word	0x2000600f

00022198 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   22198:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   2219a:	b110      	cbz	r0, 221a2 <nrfx_clock_stop+0xa>
   2219c:	2801      	cmp	r0, #1
   2219e:	d017      	beq.n	221d0 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   221a0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   221a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   221a6:	2302      	movs	r3, #2
   221a8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221ac:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   221b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   221b4:	2301      	movs	r3, #1
   221b6:	60e3      	str	r3, [r4, #12]
   221b8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   221bc:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   221c0:	03db      	lsls	r3, r3, #15
   221c2:	d5ed      	bpl.n	221a0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   221c4:	2001      	movs	r0, #1
   221c6:	f008 f9d4 	bl	2a572 <nrfx_busy_wait>
   221ca:	3d01      	subs	r5, #1
   221cc:	d1f6      	bne.n	221bc <nrfx_clock_stop+0x24>
   221ce:	e7e7      	b.n	221a0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   221d0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221d4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   221d6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   221de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   221e2:	6060      	str	r0, [r4, #4]
   221e4:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   221e8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   221ec:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   221f0:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   221f2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   221f6:	d505      	bpl.n	22204 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   221f8:	b123      	cbz	r3, 22204 <nrfx_clock_stop+0x6c>
   221fa:	2001      	movs	r0, #1
   221fc:	f008 f9b9 	bl	2a572 <nrfx_busy_wait>
   22200:	3d01      	subs	r5, #1
   22202:	d1f1      	bne.n	221e8 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   22204:	4b01      	ldr	r3, [pc, #4]	; (2220c <nrfx_clock_stop+0x74>)
   22206:	2200      	movs	r2, #0
   22208:	715a      	strb	r2, [r3, #5]
   2220a:	e7c9      	b.n	221a0 <nrfx_clock_stop+0x8>
   2220c:	20005b10 	.word	0x20005b10

00022210 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   22214:	b510      	push	{r4, lr}
   22216:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2221a:	b16a      	cbz	r2, 22238 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2221c:	2200      	movs	r2, #0
   2221e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22222:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   22226:	2201      	movs	r2, #1
   22228:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2222c:	4b11      	ldr	r3, [pc, #68]	; (22274 <nrfx_clock_irq_handler+0x64>)
   2222e:	7958      	ldrb	r0, [r3, #5]
   22230:	b910      	cbnz	r0, 22238 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   22232:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22234:	681b      	ldr	r3, [r3, #0]
   22236:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2223c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   22240:	b172      	cbz	r2, 22260 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22242:	2200      	movs	r2, #0
   22244:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   22248:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2224c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   22250:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   22254:	0792      	lsls	r2, r2, #30
   22256:	d104      	bne.n	22262 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22258:	2201      	movs	r2, #1
   2225a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2225e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   22260:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   22262:	2202      	movs	r2, #2
   22264:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   22268:	4b02      	ldr	r3, [pc, #8]	; (22274 <nrfx_clock_irq_handler+0x64>)
}
   2226a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2226e:	681b      	ldr	r3, [r3, #0]
   22270:	2001      	movs	r0, #1
   22272:	4718      	bx	r3
   22274:	20005b10 	.word	0x20005b10

00022278 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   22278:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2227a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2227e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   22280:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   22282:	6002      	str	r2, [r0, #0]
}
   22284:	4802      	ldr	r0, [pc, #8]	; (22290 <nrf_gpio_pin_port_decode+0x18>)
   22286:	bf18      	it	ne
   22288:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2228c:	4770      	bx	lr
   2228e:	bf00      	nop
   22290:	50000300 	.word	0x50000300

00022294 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   22294:	4b03      	ldr	r3, [pc, #12]	; (222a4 <pin_in_use_by_te+0x10>)
   22296:	3008      	adds	r0, #8
   22298:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2229c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   222a0:	4770      	bx	lr
   222a2:	bf00      	nop
   222a4:	200007e4 	.word	0x200007e4

000222a8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   222a8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   222aa:	f100 0308 	add.w	r3, r0, #8
   222ae:	4c0c      	ldr	r4, [pc, #48]	; (222e0 <call_handler+0x38>)
   222b0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   222b4:	05da      	lsls	r2, r3, #23
{
   222b6:	4605      	mov	r5, r0
   222b8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   222ba:	d507      	bpl.n	222cc <call_handler+0x24>
   222bc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   222c0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   222c4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   222c8:	6852      	ldr	r2, [r2, #4]
   222ca:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   222cc:	68a3      	ldr	r3, [r4, #8]
   222ce:	b12b      	cbz	r3, 222dc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   222d0:	68e2      	ldr	r2, [r4, #12]
   222d2:	4631      	mov	r1, r6
   222d4:	4628      	mov	r0, r5
    }
}
   222d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   222da:	4718      	bx	r3
}
   222dc:	bd70      	pop	{r4, r5, r6, pc}
   222de:	bf00      	nop
   222e0:	200007e4 	.word	0x200007e4

000222e4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   222e4:	4a12      	ldr	r2, [pc, #72]	; (22330 <release_handler+0x4c>)
   222e6:	3008      	adds	r0, #8
{
   222e8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   222ea:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   222ee:	05d9      	lsls	r1, r3, #23
   222f0:	d51b      	bpl.n	2232a <release_handler+0x46>
   222f2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   222f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   222fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   222fe:	f102 0410 	add.w	r4, r2, #16
   22302:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22304:	f834 3b02 	ldrh.w	r3, [r4], #2
   22308:	f413 7f80 	tst.w	r3, #256	; 0x100
   2230c:	d003      	beq.n	22316 <release_handler+0x32>
   2230e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   22312:	4299      	cmp	r1, r3
   22314:	d009      	beq.n	2232a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22316:	3001      	adds	r0, #1
   22318:	2830      	cmp	r0, #48	; 0x30
   2231a:	d1f3      	bne.n	22304 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2231c:	2300      	movs	r3, #0
   2231e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22322:	4804      	ldr	r0, [pc, #16]	; (22334 <release_handler+0x50>)
}
   22324:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22326:	f7ff bef7 	b.w	22118 <nrfx_flag32_free>
}
   2232a:	bc10      	pop	{r4}
   2232c:	4770      	bx	lr
   2232e:	bf00      	nop
   22330:	200007e4 	.word	0x200007e4
   22334:	20000858 	.word	0x20000858

00022338 <pin_handler_trigger_uninit>:
{
   22338:	b538      	push	{r3, r4, r5, lr}
   2233a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2233c:	f7ff ffaa 	bl	22294 <pin_in_use_by_te>
   22340:	4c09      	ldr	r4, [pc, #36]	; (22368 <pin_handler_trigger_uninit+0x30>)
   22342:	f102 0508 	add.w	r5, r2, #8
   22346:	b140      	cbz	r0, 2235a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22348:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2234c:	4907      	ldr	r1, [pc, #28]	; (2236c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2234e:	0b5b      	lsrs	r3, r3, #13
   22350:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   22354:	2000      	movs	r0, #0
   22356:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2235a:	4610      	mov	r0, r2
   2235c:	f7ff ffc2 	bl	222e4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   22360:	2300      	movs	r3, #0
   22362:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   22366:	bd38      	pop	{r3, r4, r5, pc}
   22368:	200007e4 	.word	0x200007e4
   2236c:	40006000 	.word	0x40006000

00022370 <nrfx_gpiote_input_configure>:
{
   22370:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   22374:	4604      	mov	r4, r0
   22376:	4617      	mov	r7, r2
   22378:	461d      	mov	r5, r3
    if (p_input_config)
   2237a:	b321      	cbz	r1, 223c6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2237c:	4e4e      	ldr	r6, [pc, #312]	; (224b8 <nrfx_gpiote_input_configure+0x148>)
   2237e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   22382:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   22386:	079b      	lsls	r3, r3, #30
   22388:	d506      	bpl.n	22398 <nrfx_gpiote_input_configure+0x28>
   2238a:	f7ff ff83 	bl	22294 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   2238e:	b118      	cbz	r0, 22398 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   22390:	484a      	ldr	r0, [pc, #296]	; (224bc <nrfx_gpiote_input_configure+0x14c>)
}
   22392:	b004      	add	sp, #16
   22394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22398:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2239a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2239e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   223a2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   223a6:	f10d 020f 	add.w	r2, sp, #15
   223aa:	460b      	mov	r3, r1
   223ac:	4620      	mov	r0, r4
   223ae:	f10d 010e 	add.w	r1, sp, #14
   223b2:	f008 f90c 	bl	2a5ce <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   223b6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   223ba:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   223be:	f043 0301 	orr.w	r3, r3, #1
   223c2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   223c6:	b197      	cbz	r7, 223ee <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   223c8:	4b3b      	ldr	r3, [pc, #236]	; (224b8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   223ca:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   223cc:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   223ce:	f104 0008 	add.w	r0, r4, #8
   223d2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   223d6:	078f      	lsls	r7, r1, #30
   223d8:	d50c      	bpl.n	223f4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   223da:	2a00      	cmp	r2, #0
   223dc:	d1d8      	bne.n	22390 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   223de:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   223e2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   223e6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   223ea:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   223ee:	bbcd      	cbnz	r5, 22464 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   223f0:	4833      	ldr	r0, [pc, #204]	; (224c0 <nrfx_gpiote_input_configure+0x150>)
   223f2:	e7ce      	b.n	22392 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   223f4:	f021 0120 	bic.w	r1, r1, #32
   223f8:	04c9      	lsls	r1, r1, #19
   223fa:	0cc9      	lsrs	r1, r1, #19
   223fc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   22400:	2a00      	cmp	r2, #0
   22402:	d0ec      	beq.n	223de <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   22404:	2e03      	cmp	r6, #3
   22406:	d8c3      	bhi.n	22390 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22408:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2240a:	b92e      	cbnz	r6, 22418 <nrfx_gpiote_input_configure+0xa8>
   2240c:	4a2d      	ldr	r2, [pc, #180]	; (224c4 <nrfx_gpiote_input_configure+0x154>)
   2240e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   22412:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   22416:	e7e2      	b.n	223de <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22418:	00ba      	lsls	r2, r7, #2
   2241a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2241e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22422:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   22426:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2242a:	f02c 0c03 	bic.w	ip, ip, #3
   2242e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22432:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   22436:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2243a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2243e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22442:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   22446:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2244a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   2244e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   22452:	ea4c 0c0e 	orr.w	ip, ip, lr
   22456:	f041 0120 	orr.w	r1, r1, #32
   2245a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2245e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   22462:	e7bc      	b.n	223de <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   22464:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   22468:	4620      	mov	r0, r4
   2246a:	f7ff ff3b 	bl	222e4 <release_handler>
    if (!handler)
   2246e:	2e00      	cmp	r6, #0
   22470:	d0be      	beq.n	223f0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22472:	4d11      	ldr	r5, [pc, #68]	; (224b8 <nrfx_gpiote_input_configure+0x148>)
   22474:	682b      	ldr	r3, [r5, #0]
   22476:	429e      	cmp	r6, r3
   22478:	d104      	bne.n	22484 <nrfx_gpiote_input_configure+0x114>
   2247a:	686b      	ldr	r3, [r5, #4]
   2247c:	429f      	cmp	r7, r3
   2247e:	d101      	bne.n	22484 <nrfx_gpiote_input_configure+0x114>
   22480:	2200      	movs	r2, #0
   22482:	e00a      	b.n	2249a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   22484:	4810      	ldr	r0, [pc, #64]	; (224c8 <nrfx_gpiote_input_configure+0x158>)
   22486:	f10d 010f 	add.w	r1, sp, #15
   2248a:	f7ff fe1f 	bl	220cc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2248e:	4b0c      	ldr	r3, [pc, #48]	; (224c0 <nrfx_gpiote_input_configure+0x150>)
   22490:	4298      	cmp	r0, r3
   22492:	f47f af7e 	bne.w	22392 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   22496:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2249a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2249e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   224a2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   224a4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   224a6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   224aa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   224ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   224b2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   224b6:	e79b      	b.n	223f0 <nrfx_gpiote_input_configure+0x80>
   224b8:	200007e4 	.word	0x200007e4
   224bc:	0bad0004 	.word	0x0bad0004
   224c0:	0bad0000 	.word	0x0bad0000
   224c4:	40006000 	.word	0x40006000
   224c8:	20000858 	.word	0x20000858

000224cc <nrfx_gpiote_output_configure>:
{
   224cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   224ce:	4604      	mov	r4, r0
   224d0:	b085      	sub	sp, #20
   224d2:	4615      	mov	r5, r2
    if (p_config)
   224d4:	b319      	cbz	r1, 2251e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   224d6:	4e33      	ldr	r6, [pc, #204]	; (225a4 <nrfx_gpiote_output_configure+0xd8>)
   224d8:	f100 0708 	add.w	r7, r0, #8
   224dc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   224e0:	0793      	lsls	r3, r2, #30
   224e2:	d403      	bmi.n	224ec <nrfx_gpiote_output_configure+0x20>
   224e4:	f7ff fed6 	bl	22294 <pin_in_use_by_te>
   224e8:	2800      	cmp	r0, #0
   224ea:	d158      	bne.n	2259e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   224ec:	f012 0f1c 	tst.w	r2, #28
   224f0:	d002      	beq.n	224f8 <nrfx_gpiote_output_configure+0x2c>
   224f2:	784b      	ldrb	r3, [r1, #1]
   224f4:	2b01      	cmp	r3, #1
   224f6:	d052      	beq.n	2259e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   224f8:	2301      	movs	r3, #1
   224fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   224fe:	2300      	movs	r3, #0
   22500:	e9cd 1300 	strd	r1, r3, [sp]
   22504:	1c4a      	adds	r2, r1, #1
   22506:	1c8b      	adds	r3, r1, #2
   22508:	4620      	mov	r0, r4
   2250a:	f10d 010f 	add.w	r1, sp, #15
   2250e:	f008 f85e 	bl	2a5ce <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   22512:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   22516:	f043 0303 	orr.w	r3, r3, #3
   2251a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2251e:	b915      	cbnz	r5, 22526 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   22520:	4821      	ldr	r0, [pc, #132]	; (225a8 <nrfx_gpiote_output_configure+0xdc>)
}
   22522:	b005      	add	sp, #20
   22524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22526:	4e1f      	ldr	r6, [pc, #124]	; (225a4 <nrfx_gpiote_output_configure+0xd8>)
   22528:	f104 0708 	add.w	r7, r4, #8
   2252c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   22530:	0783      	lsls	r3, r0, #30
   22532:	d534      	bpl.n	2259e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   22534:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   22538:	4661      	mov	r1, ip
   2253a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2253c:	f020 0020 	bic.w	r0, r0, #32
   22540:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   22544:	04c0      	lsls	r0, r0, #19
   22546:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2254a:	0cc0      	lsrs	r0, r0, #19
   2254c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22550:	2300      	movs	r3, #0
   22552:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   22556:	786a      	ldrb	r2, [r5, #1]
   22558:	2a00      	cmp	r2, #0
   2255a:	d0e1      	beq.n	22520 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2255c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   22560:	78ad      	ldrb	r5, [r5, #2]
   22562:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   22566:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2256a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2256e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   22572:	0223      	lsls	r3, r4, #8
   22574:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22578:	0412      	lsls	r2, r2, #16
   2257a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2257e:	ea43 030e 	orr.w	r3, r3, lr
   22582:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22584:	052a      	lsls	r2, r5, #20
   22586:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2258a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2258e:	4313      	orrs	r3, r2
   22590:	f040 0020 	orr.w	r0, r0, #32
   22594:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22598:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2259c:	e7c0      	b.n	22520 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   2259e:	4803      	ldr	r0, [pc, #12]	; (225ac <nrfx_gpiote_output_configure+0xe0>)
   225a0:	e7bf      	b.n	22522 <nrfx_gpiote_output_configure+0x56>
   225a2:	bf00      	nop
   225a4:	200007e4 	.word	0x200007e4
   225a8:	0bad0000 	.word	0x0bad0000
   225ac:	0bad0004 	.word	0x0bad0004

000225b0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   225b0:	4b01      	ldr	r3, [pc, #4]	; (225b8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   225b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   225b6:	4770      	bx	lr
   225b8:	200007e4 	.word	0x200007e4

000225bc <nrfx_gpiote_channel_get>:
{
   225bc:	b508      	push	{r3, lr}
   225be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   225c0:	f7ff fe68 	bl	22294 <pin_in_use_by_te>
   225c4:	b138      	cbz	r0, 225d6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   225c6:	4b05      	ldr	r3, [pc, #20]	; (225dc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   225c8:	4805      	ldr	r0, [pc, #20]	; (225e0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   225ca:	3208      	adds	r2, #8
   225cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   225d0:	0b5b      	lsrs	r3, r3, #13
   225d2:	700b      	strb	r3, [r1, #0]
}
   225d4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   225d6:	4803      	ldr	r0, [pc, #12]	; (225e4 <nrfx_gpiote_channel_get+0x28>)
   225d8:	e7fc      	b.n	225d4 <nrfx_gpiote_channel_get+0x18>
   225da:	bf00      	nop
   225dc:	200007e4 	.word	0x200007e4
   225e0:	0bad0000 	.word	0x0bad0000
   225e4:	0bad0004 	.word	0x0bad0004

000225e8 <nrfx_gpiote_init>:
{
   225e8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   225ea:	4c0f      	ldr	r4, [pc, #60]	; (22628 <nrfx_gpiote_init+0x40>)
   225ec:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   225f0:	b9bd      	cbnz	r5, 22622 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   225f2:	2260      	movs	r2, #96	; 0x60
   225f4:	4629      	mov	r1, r5
   225f6:	f104 0010 	add.w	r0, r4, #16
   225fa:	f006 f8e4 	bl	287c6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   225fe:	2006      	movs	r0, #6
   22600:	f7e9 fb7c 	bl	bcfc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22604:	4b09      	ldr	r3, [pc, #36]	; (2262c <nrfx_gpiote_init+0x44>)
    return err_code;
   22606:	480a      	ldr	r0, [pc, #40]	; (22630 <nrfx_gpiote_init+0x48>)
   22608:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   2260c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   22610:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22614:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22618:	2301      	movs	r3, #1
   2261a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2261e:	6763      	str	r3, [r4, #116]	; 0x74
}
   22620:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   22622:	4804      	ldr	r0, [pc, #16]	; (22634 <nrfx_gpiote_init+0x4c>)
   22624:	e7fc      	b.n	22620 <nrfx_gpiote_init+0x38>
   22626:	bf00      	nop
   22628:	200007e4 	.word	0x200007e4
   2262c:	40006000 	.word	0x40006000
   22630:	0bad0000 	.word	0x0bad0000
   22634:	0bad0005 	.word	0x0bad0005

00022638 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   22638:	4b03      	ldr	r3, [pc, #12]	; (22648 <nrfx_gpiote_is_init+0x10>)
   2263a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2263e:	3800      	subs	r0, #0
   22640:	bf18      	it	ne
   22642:	2001      	movne	r0, #1
   22644:	4770      	bx	lr
   22646:	bf00      	nop
   22648:	200007e4 	.word	0x200007e4

0002264c <nrfx_gpiote_channel_free>:
{
   2264c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2264e:	4801      	ldr	r0, [pc, #4]	; (22654 <nrfx_gpiote_channel_free+0x8>)
   22650:	f7ff bd62 	b.w	22118 <nrfx_flag32_free>
   22654:	20000854 	.word	0x20000854

00022658 <nrfx_gpiote_channel_alloc>:
{
   22658:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2265a:	4801      	ldr	r0, [pc, #4]	; (22660 <nrfx_gpiote_channel_alloc+0x8>)
   2265c:	f7ff bd36 	b.w	220cc <nrfx_flag32_alloc>
   22660:	20000854 	.word	0x20000854

00022664 <nrfx_gpiote_trigger_enable>:
{
   22664:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22666:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22668:	f7ff fe14 	bl	22294 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2266c:	f104 0208 	add.w	r2, r4, #8
   22670:	4b1e      	ldr	r3, [pc, #120]	; (226ec <nrfx_gpiote_trigger_enable+0x88>)
   22672:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22676:	b1e8      	cbz	r0, 226b4 <nrfx_gpiote_trigger_enable+0x50>
   22678:	f013 0502 	ands.w	r5, r3, #2
   2267c:	d11a      	bne.n	226b4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2267e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   22680:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   22682:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   22686:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2268a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2268e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22692:	6005      	str	r5, [r0, #0]
   22694:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22696:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2269a:	f040 0001 	orr.w	r0, r0, #1
   2269e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   226a2:	b129      	cbz	r1, 226b0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   226a4:	2201      	movs	r2, #1
   226a6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   226aa:	4a11      	ldr	r2, [pc, #68]	; (226f0 <nrfx_gpiote_trigger_enable+0x8c>)
   226ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   226b0:	b003      	add	sp, #12
   226b2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   226b4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   226b8:	2b04      	cmp	r3, #4
   226ba:	d012      	beq.n	226e2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   226bc:	2b05      	cmp	r3, #5
   226be:	d012      	beq.n	226e6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   226c0:	a801      	add	r0, sp, #4
   226c2:	9401      	str	r4, [sp, #4]
   226c4:	f7ff fdd8 	bl	22278 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   226c8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   226ca:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   226ce:	40d9      	lsrs	r1, r3
   226d0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   226d4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   226d6:	4620      	mov	r0, r4
}
   226d8:	b003      	add	sp, #12
   226da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   226de:	f007 bfbd 	b.w	2a65c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   226e2:	2103      	movs	r1, #3
   226e4:	e7f7      	b.n	226d6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   226e6:	2102      	movs	r1, #2
   226e8:	e7f5      	b.n	226d6 <nrfx_gpiote_trigger_enable+0x72>
   226ea:	bf00      	nop
   226ec:	200007e4 	.word	0x200007e4
   226f0:	40006000 	.word	0x40006000

000226f4 <nrfx_gpiote_trigger_disable>:
{
   226f4:	b508      	push	{r3, lr}
   226f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   226f8:	f7ff fdcc 	bl	22294 <pin_in_use_by_te>
   226fc:	b1c0      	cbz	r0, 22730 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   226fe:	f102 0108 	add.w	r1, r2, #8
   22702:	4b0e      	ldr	r3, [pc, #56]	; (2273c <nrfx_gpiote_trigger_disable+0x48>)
   22704:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22708:	0799      	lsls	r1, r3, #30
   2270a:	d411      	bmi.n	22730 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2270c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2270e:	2201      	movs	r2, #1
   22710:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   22712:	009b      	lsls	r3, r3, #2
   22714:	490a      	ldr	r1, [pc, #40]	; (22740 <nrfx_gpiote_trigger_disable+0x4c>)
   22716:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2271a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2271e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22722:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   22726:	f022 0203 	bic.w	r2, r2, #3
   2272a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2272e:	bd08      	pop	{r3, pc}
   22730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22734:	2100      	movs	r1, #0
   22736:	4610      	mov	r0, r2
   22738:	f007 bf90 	b.w	2a65c <nrf_gpio_cfg_sense_set>
   2273c:	200007e4 	.word	0x200007e4
   22740:	40006000 	.word	0x40006000

00022744 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22744:	4b0e      	ldr	r3, [pc, #56]	; (22780 <nrfx_gpiote_pin_uninit+0x3c>)
   22746:	f100 0208 	add.w	r2, r0, #8
{
   2274a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2274c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   22750:	07db      	lsls	r3, r3, #31
{
   22752:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   22754:	d511      	bpl.n	2277a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   22756:	f7ff ffcd 	bl	226f4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2275a:	4620      	mov	r0, r4
   2275c:	f7ff fdec 	bl	22338 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22760:	a801      	add	r0, sp, #4
   22762:	9401      	str	r4, [sp, #4]
   22764:	f7ff fd88 	bl	22278 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22768:	9b01      	ldr	r3, [sp, #4]
   2276a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2276e:	2202      	movs	r2, #2
   22770:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   22774:	4803      	ldr	r0, [pc, #12]	; (22784 <nrfx_gpiote_pin_uninit+0x40>)
}
   22776:	b002      	add	sp, #8
   22778:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2277a:	4803      	ldr	r0, [pc, #12]	; (22788 <nrfx_gpiote_pin_uninit+0x44>)
   2277c:	e7fb      	b.n	22776 <nrfx_gpiote_pin_uninit+0x32>
   2277e:	bf00      	nop
   22780:	200007e4 	.word	0x200007e4
   22784:	0bad0000 	.word	0x0bad0000
   22788:	0bad0004 	.word	0x0bad0004

0002278c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22790:	4b64      	ldr	r3, [pc, #400]	; (22924 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   22792:	4865      	ldr	r0, [pc, #404]	; (22928 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22794:	4965      	ldr	r1, [pc, #404]	; (2292c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   22796:	2600      	movs	r6, #0
{
   22798:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2279a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2279c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2279e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   227a0:	b135      	cbz	r5, 227b0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   227a2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   227a6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   227a8:	bf1e      	ittt	ne
   227aa:	601c      	strne	r4, [r3, #0]
   227ac:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   227ae:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   227b0:	3304      	adds	r3, #4
   227b2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   227b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   227b8:	d1f1      	bne.n	2279e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227ba:	f8df 816c 	ldr.w	r8, [pc, #364]	; 22928 <nrfx_gpiote_irq_handler+0x19c>
   227be:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   227c2:	2b00      	cmp	r3, #0
   227c4:	f000 8091 	beq.w	228ea <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   227c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   227cc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   227d0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   227d2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   227d6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   227da:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   227dc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   227e0:	2700      	movs	r7, #0
            while (latch[i])
   227e2:	f10d 0910 	add.w	r9, sp, #16
   227e6:	017b      	lsls	r3, r7, #5
   227e8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   227ea:	f04f 0a01 	mov.w	sl, #1
   227ee:	e049      	b.n	22884 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   227f0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   227f2:	4a4f      	ldr	r2, [pc, #316]	; (22930 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   227f4:	fa94 f4a4 	rbit	r4, r4
   227f8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   227fc:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   227fe:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   22802:	08e0      	lsrs	r0, r4, #3
   22804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   22808:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   2280a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2280e:	fa0a fc02 	lsl.w	ip, sl, r2
   22812:	f819 2000 	ldrb.w	r2, [r9, r0]
   22816:	ea22 020c 	bic.w	r2, r2, ip
   2281a:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2281e:	a803      	add	r0, sp, #12
   22820:	f3c3 0582 	ubfx	r5, r3, #2, #3
   22824:	0899      	lsrs	r1, r3, #2
   22826:	f7ff fd27 	bl	22278 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2282a:	9a03      	ldr	r2, [sp, #12]
   2282c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   22830:	074b      	lsls	r3, r1, #29
   22832:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22836:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   22838:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   2283c:	d529      	bpl.n	22892 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   2283e:	4620      	mov	r0, r4
   22840:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22842:	b2d5      	uxtb	r5, r2
   22844:	f7ff fd30 	bl	222a8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22848:	a803      	add	r0, sp, #12
   2284a:	9403      	str	r4, [sp, #12]
   2284c:	f7ff fd14 	bl	22278 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22850:	9b03      	ldr	r3, [sp, #12]
   22852:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22856:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2285a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2285e:	429d      	cmp	r5, r3
   22860:	d107      	bne.n	22872 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22862:	2100      	movs	r1, #0
   22864:	4620      	mov	r0, r4
   22866:	f007 fef9 	bl	2a65c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2286a:	4629      	mov	r1, r5
   2286c:	4620      	mov	r0, r4
   2286e:	f007 fef5 	bl	2a65c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22872:	a803      	add	r0, sp, #12
   22874:	9403      	str	r4, [sp, #12]
   22876:	f7ff fcff 	bl	22278 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2287a:	9b03      	ldr	r3, [sp, #12]
   2287c:	fa0a f303 	lsl.w	r3, sl, r3
   22880:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   22884:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   22888:	2c00      	cmp	r4, #0
   2288a:	d1b1      	bne.n	227f0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2288c:	b9cf      	cbnz	r7, 228c2 <nrfx_gpiote_irq_handler+0x136>
   2288e:	2701      	movs	r7, #1
   22890:	e7a9      	b.n	227e6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22892:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22894:	bf0c      	ite	eq
   22896:	2103      	moveq	r1, #3
   22898:	2102      	movne	r1, #2
   2289a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2289c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2289e:	f007 fedd 	bl	2a65c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   228a2:	2d03      	cmp	r5, #3
   228a4:	d004      	beq.n	228b0 <nrfx_gpiote_irq_handler+0x124>
   228a6:	9a01      	ldr	r2, [sp, #4]
   228a8:	2a02      	cmp	r2, #2
   228aa:	d106      	bne.n	228ba <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   228ac:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   228ae:	d1e0      	bne.n	22872 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   228b0:	4659      	mov	r1, fp
   228b2:	4620      	mov	r0, r4
   228b4:	f7ff fcf8 	bl	222a8 <call_handler>
   228b8:	e7db      	b.n	22872 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   228ba:	2a03      	cmp	r2, #3
   228bc:	d1d9      	bne.n	22872 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   228be:	2d02      	cmp	r5, #2
   228c0:	e7f5      	b.n	228ae <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   228c2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   228c6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   228ca:	491a      	ldr	r1, [pc, #104]	; (22934 <nrfx_gpiote_irq_handler+0x1a8>)
   228cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   228d0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   228d4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   228d6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   228da:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   228de:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   228e0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   228e4:	4313      	orrs	r3, r2
   228e6:	f47f af7b 	bne.w	227e0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   228ea:	2401      	movs	r4, #1
    while (mask)
   228ec:	b916      	cbnz	r6, 228f4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   228ee:	b007      	add	sp, #28
   228f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   228f4:	fa96 f3a6 	rbit	r3, r6
   228f8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   228fc:	fa04 f203 	lsl.w	r2, r4, r3
   22900:	009b      	lsls	r3, r3, #2
   22902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22906:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2290a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2290e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   22912:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22916:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2291a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2291e:	f7ff fcc3 	bl	222a8 <call_handler>
   22922:	e7e3      	b.n	228ec <nrfx_gpiote_irq_handler+0x160>
   22924:	40006100 	.word	0x40006100
   22928:	40006000 	.word	0x40006000
   2292c:	40006120 	.word	0x40006120
   22930:	200007e4 	.word	0x200007e4
   22934:	50000300 	.word	0x50000300

00022938 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   22938:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   2293a:	4c18      	ldr	r4, [pc, #96]	; (2299c <nrfx_power_init+0x64>)
   2293c:	7823      	ldrb	r3, [r4, #0]
   2293e:	bb53      	cbnz	r3, 22996 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   22940:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   22942:	0791      	lsls	r1, r2, #30
   22944:	f3c2 0340 	ubfx	r3, r2, #1, #1
   22948:	d511      	bpl.n	2296e <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2294a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2294e:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   22952:	2908      	cmp	r1, #8
   22954:	d11d      	bne.n	22992 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22956:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2295a:	2b05      	cmp	r3, #5
   2295c:	d819      	bhi.n	22992 <nrfx_power_init+0x5a>
   2295e:	4910      	ldr	r1, [pc, #64]	; (229a0 <nrfx_power_init+0x68>)
   22960:	5cc9      	ldrb	r1, [r1, r3]
   22962:	2301      	movs	r3, #1
   22964:	b119      	cbz	r1, 2296e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   22966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2296a:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   2296e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   22972:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   22976:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2297a:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2297c:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   22980:	f7e9 f9e0 	bl	bd44 <arch_irq_is_enabled>
   22984:	b908      	cbnz	r0, 2298a <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   22986:	f7e9 f9b9 	bl	bcfc <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   2298a:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   2298c:	4805      	ldr	r0, [pc, #20]	; (229a4 <nrfx_power_init+0x6c>)
    m_initialized = true;
   2298e:	7023      	strb	r3, [r4, #0]
}
   22990:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   22992:	2301      	movs	r3, #1
   22994:	e7eb      	b.n	2296e <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   22996:	4804      	ldr	r0, [pc, #16]	; (229a8 <nrfx_power_init+0x70>)
   22998:	e7fa      	b.n	22990 <nrfx_power_init+0x58>
   2299a:	bf00      	nop
   2299c:	20006010 	.word	0x20006010
   229a0:	00031e94 	.word	0x00031e94
   229a4:	0bad0000 	.word	0x0bad0000
   229a8:	0bad000c 	.word	0x0bad000c

000229ac <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   229ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   229b0:	f44f 7260 	mov.w	r2, #896	; 0x380
   229b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   229b8:	4b01      	ldr	r3, [pc, #4]	; (229c0 <nrfx_power_usbevt_uninit+0x14>)
   229ba:	2200      	movs	r2, #0
   229bc:	601a      	str	r2, [r3, #0]
}
   229be:	4770      	bx	lr
   229c0:	20005b20 	.word	0x20005b20

000229c4 <nrfx_power_usbevt_init>:
{
   229c4:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   229c6:	f7ff fff1 	bl	229ac <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   229ca:	6803      	ldr	r3, [r0, #0]
   229cc:	b10b      	cbz	r3, 229d2 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   229ce:	4a01      	ldr	r2, [pc, #4]	; (229d4 <nrfx_power_usbevt_init+0x10>)
   229d0:	6013      	str	r3, [r2, #0]
}
   229d2:	bd08      	pop	{r3, pc}
   229d4:	20005b20 	.word	0x20005b20

000229d8 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   229d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   229dc:	b510      	push	{r4, lr}
   229de:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   229e2:	0762      	lsls	r2, r4, #29
   229e4:	d507      	bpl.n	229f6 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   229e6:	f44f 7084 	mov.w	r0, #264	; 0x108
   229ea:	f007 fe46 	bl	2a67a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   229ee:	b110      	cbz	r0, 229f6 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   229f0:	4b1e      	ldr	r3, [pc, #120]	; (22a6c <nrfx_power_irq_handler+0x94>)
   229f2:	681b      	ldr	r3, [r3, #0]
   229f4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   229f6:	06a3      	lsls	r3, r4, #26
   229f8:	d508      	bpl.n	22a0c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   229fa:	f44f 708a 	mov.w	r0, #276	; 0x114
   229fe:	f007 fe3c 	bl	2a67a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   22a02:	b118      	cbz	r0, 22a0c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   22a04:	4b1a      	ldr	r3, [pc, #104]	; (22a70 <nrfx_power_irq_handler+0x98>)
   22a06:	2000      	movs	r0, #0
   22a08:	681b      	ldr	r3, [r3, #0]
   22a0a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   22a0c:	0660      	lsls	r0, r4, #25
   22a0e:	d508      	bpl.n	22a22 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   22a10:	f44f 708c 	mov.w	r0, #280	; 0x118
   22a14:	f007 fe31 	bl	2a67a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   22a18:	b118      	cbz	r0, 22a22 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   22a1a:	4b15      	ldr	r3, [pc, #84]	; (22a70 <nrfx_power_irq_handler+0x98>)
   22a1c:	2001      	movs	r0, #1
   22a1e:	681b      	ldr	r3, [r3, #0]
   22a20:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   22a22:	0621      	lsls	r1, r4, #24
   22a24:	d508      	bpl.n	22a38 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   22a26:	f44f 708e 	mov.w	r0, #284	; 0x11c
   22a2a:	f007 fe26 	bl	2a67a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   22a2e:	b118      	cbz	r0, 22a38 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   22a30:	4b10      	ldr	r3, [pc, #64]	; (22a74 <nrfx_power_irq_handler+0x9c>)
   22a32:	2000      	movs	r0, #0
   22a34:	681b      	ldr	r3, [r3, #0]
   22a36:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   22a38:	05e2      	lsls	r2, r4, #23
   22a3a:	d508      	bpl.n	22a4e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   22a3c:	f44f 7090 	mov.w	r0, #288	; 0x120
   22a40:	f007 fe1b 	bl	2a67a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   22a44:	b118      	cbz	r0, 22a4e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   22a46:	4b0b      	ldr	r3, [pc, #44]	; (22a74 <nrfx_power_irq_handler+0x9c>)
   22a48:	2001      	movs	r0, #1
   22a4a:	681b      	ldr	r3, [r3, #0]
   22a4c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   22a4e:	05a3      	lsls	r3, r4, #22
   22a50:	d50a      	bpl.n	22a68 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   22a52:	f44f 7092 	mov.w	r0, #292	; 0x124
   22a56:	f007 fe10 	bl	2a67a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   22a5a:	b128      	cbz	r0, 22a68 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   22a5c:	4b05      	ldr	r3, [pc, #20]	; (22a74 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   22a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   22a62:	681b      	ldr	r3, [r3, #0]
   22a64:	2002      	movs	r0, #2
   22a66:	4718      	bx	r3
}
   22a68:	bd10      	pop	{r4, pc}
   22a6a:	bf00      	nop
   22a6c:	20005b18 	.word	0x20005b18
   22a70:	20005b1c 	.word	0x20005b1c
   22a74:	20005b20 	.word	0x20005b20

00022a78 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   22a78:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   22a7a:	4801      	ldr	r0, [pc, #4]	; (22a80 <nrfx_ppi_channel_alloc+0x8>)
   22a7c:	f7ff bb26 	b.w	220cc <nrfx_flag32_alloc>
   22a80:	20000860 	.word	0x20000860

00022a84 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   22a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   22a86:	4b30      	ldr	r3, [pc, #192]	; (22b48 <twi_tx_start_transfer+0xc4>)
   22a88:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a8a:	2300      	movs	r3, #0
   22a8c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   22a90:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   22a94:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   22a98:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   22a9c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   22aa0:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   22aa4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   22aa8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   22aac:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   22ab0:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   22ab2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22ab6:	2301      	movs	r3, #1
   22ab8:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   22aba:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   22abe:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   22ac0:	429a      	cmp	r2, r3
   22ac2:	bf18      	it	ne
   22ac4:	6083      	strne	r3, [r0, #8]
{
   22ac6:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   22ac8:	f007 fdf8 	bl	2a6bc <twi_send_byte>

    if (p_cb->handler)
   22acc:	682b      	ldr	r3, [r5, #0]
   22ace:	b183      	cbz	r3, 22af2 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   22ad0:	f240 2386 	movw	r3, #646	; 0x286
   22ad4:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   22ad6:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   22ad8:	481c      	ldr	r0, [pc, #112]	; (22b4c <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   22ada:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   22ade:	b003      	add	sp, #12
   22ae0:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   22ae2:	4629      	mov	r1, r5
   22ae4:	4620      	mov	r0, r4
   22ae6:	f007 fe06 	bl	2a6f6 <twi_transfer>
        while ((hw_timeout > 0) &&
   22aea:	b128      	cbz	r0, 22af8 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   22aec:	9b01      	ldr	r3, [sp, #4]
   22aee:	3b01      	subs	r3, #1
   22af0:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   22af2:	9b01      	ldr	r3, [sp, #4]
   22af4:	2b00      	cmp	r3, #0
   22af6:	dcf4      	bgt.n	22ae2 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   22af8:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   22afc:	b95b      	cbnz	r3, 22b16 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   22afe:	4813      	ldr	r0, [pc, #76]	; (22b4c <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   22b00:	9b01      	ldr	r3, [sp, #4]
   22b02:	2b00      	cmp	r3, #0
   22b04:	dceb      	bgt.n	22ade <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   22b06:	2300      	movs	r3, #0
   22b08:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   22b0c:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   22b0e:	4810      	ldr	r0, [pc, #64]	; (22b50 <twi_tx_start_transfer+0xcc>)
   22b10:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   22b14:	e7e3      	b.n	22ade <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   22b16:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22b1a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   22b1e:	b18b      	cbz	r3, 22b44 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   22b20:	4a0c      	ldr	r2, [pc, #48]	; (22b54 <twi_tx_start_transfer+0xd0>)
   22b22:	480b      	ldr	r0, [pc, #44]	; (22b50 <twi_tx_start_transfer+0xcc>)
   22b24:	f013 0f01 	tst.w	r3, #1
   22b28:	bf18      	it	ne
   22b2a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   22b2c:	f013 0f02 	tst.w	r3, #2
   22b30:	f102 0201 	add.w	r2, r2, #1
   22b34:	bf18      	it	ne
   22b36:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   22b38:	f013 0f04 	tst.w	r3, #4
   22b3c:	4b06      	ldr	r3, [pc, #24]	; (22b58 <twi_tx_start_transfer+0xd4>)
   22b3e:	bf18      	it	ne
   22b40:	4618      	movne	r0, r3
   22b42:	e7dd      	b.n	22b00 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   22b44:	4802      	ldr	r0, [pc, #8]	; (22b50 <twi_tx_start_transfer+0xcc>)
   22b46:	e7db      	b.n	22b00 <twi_tx_start_transfer+0x7c>
   22b48:	000186a0 	.word	0x000186a0
   22b4c:	0bad0000 	.word	0x0bad0000
   22b50:	0bad0001 	.word	0x0bad0001
   22b54:	0bae0000 	.word	0x0bae0000
   22b58:	0bae0002 	.word	0x0bae0002

00022b5c <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   22b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   22b5e:	4b34      	ldr	r3, [pc, #208]	; (22c30 <twi_rx_start_transfer+0xd4>)
   22b60:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22b62:	2300      	movs	r3, #0
   22b64:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   22b68:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   22b6c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   22b70:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   22b74:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   22b78:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   22b7c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   22b80:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   22b84:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   22b86:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22b8a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   22b8c:	2b01      	cmp	r3, #1
{
   22b8e:	4604      	mov	r4, r0
   22b90:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22b92:	d117      	bne.n	22bc4 <twi_rx_start_transfer+0x68>
   22b94:	6a0b      	ldr	r3, [r1, #32]
   22b96:	065b      	lsls	r3, r3, #25
   22b98:	d414      	bmi.n	22bc4 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
   22b9a:	2302      	movs	r3, #2
   22b9c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22ba0:	2301      	movs	r3, #1
   22ba2:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   22ba4:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   22ba8:	2a02      	cmp	r2, #2
   22baa:	bf18      	it	ne
   22bac:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   22bae:	682b      	ldr	r3, [r5, #0]
   22bb0:	b193      	cbz	r3, 22bd8 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   22bb2:	f240 2386 	movw	r3, #646	; 0x286
   22bb6:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   22bb8:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   22bba:	481e      	ldr	r0, [pc, #120]	; (22c34 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   22bbc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   22bc0:	b003      	add	sp, #12
   22bc2:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   22bc4:	2301      	movs	r3, #1
   22bc6:	e7e9      	b.n	22b9c <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   22bc8:	4629      	mov	r1, r5
   22bca:	4620      	mov	r0, r4
   22bcc:	f007 fd93 	bl	2a6f6 <twi_transfer>
        while ((hw_timeout > 0) &&
   22bd0:	b128      	cbz	r0, 22bde <twi_rx_start_transfer+0x82>
               hw_timeout--;
   22bd2:	9b01      	ldr	r3, [sp, #4]
   22bd4:	3b01      	subs	r3, #1
   22bd6:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   22bd8:	9b01      	ldr	r3, [sp, #4]
   22bda:	2b00      	cmp	r3, #0
   22bdc:	dcf4      	bgt.n	22bc8 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   22bde:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   22be2:	b95b      	cbnz	r3, 22bfc <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   22be4:	4813      	ldr	r0, [pc, #76]	; (22c34 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   22be6:	9b01      	ldr	r3, [sp, #4]
   22be8:	2b00      	cmp	r3, #0
   22bea:	dce9      	bgt.n	22bc0 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   22bec:	2300      	movs	r3, #0
   22bee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   22bf2:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   22bf4:	4810      	ldr	r0, [pc, #64]	; (22c38 <twi_rx_start_transfer+0xdc>)
   22bf6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   22bfa:	e7e1      	b.n	22bc0 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   22bfc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22c00:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   22c04:	b18b      	cbz	r3, 22c2a <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   22c06:	4a0d      	ldr	r2, [pc, #52]	; (22c3c <twi_rx_start_transfer+0xe0>)
   22c08:	480b      	ldr	r0, [pc, #44]	; (22c38 <twi_rx_start_transfer+0xdc>)
   22c0a:	f013 0f01 	tst.w	r3, #1
   22c0e:	bf18      	it	ne
   22c10:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   22c12:	f013 0f02 	tst.w	r3, #2
   22c16:	f102 0201 	add.w	r2, r2, #1
   22c1a:	bf18      	it	ne
   22c1c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   22c1e:	f013 0f04 	tst.w	r3, #4
   22c22:	4b07      	ldr	r3, [pc, #28]	; (22c40 <twi_rx_start_transfer+0xe4>)
   22c24:	bf18      	it	ne
   22c26:	4618      	movne	r0, r3
   22c28:	e7dd      	b.n	22be6 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   22c2a:	4803      	ldr	r0, [pc, #12]	; (22c38 <twi_rx_start_transfer+0xdc>)
   22c2c:	e7db      	b.n	22be6 <twi_rx_start_transfer+0x8a>
   22c2e:	bf00      	nop
   22c30:	000186a0 	.word	0x000186a0
   22c34:	0bad0000 	.word	0x0bad0000
   22c38:	0bad0001 	.word	0x0bad0001
   22c3c:	0bae0000 	.word	0x0bae0000
   22c40:	0bae0002 	.word	0x0bae0002

00022c44 <nrfx_twi_init>:
{
   22c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22c46:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22c48:	4d29      	ldr	r5, [pc, #164]	; (22cf0 <nrfx_twi_init+0xac>)
   22c4a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   22c4e:	fb0c fc07 	mul.w	ip, ip, r7
   22c52:	eb05 040c 	add.w	r4, r5, ip
   22c56:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   22c5a:	2e00      	cmp	r6, #0
   22c5c:	d146      	bne.n	22cec <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   22c5e:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   22c60:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   22c62:	7b4b      	ldrb	r3, [r1, #13]
   22c64:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   22c68:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   22c6a:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
   22c6c:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   22c70:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   22c74:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   22c78:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   22c7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   22c80:	b9e3      	cbnz	r3, 22cbc <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
   22c82:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   22c84:	4b1b      	ldr	r3, [pc, #108]	; (22cf4 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
   22c86:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   22c8a:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   22c8c:	2c01      	cmp	r4, #1
   22c8e:	bf18      	it	ne
   22c90:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   22c94:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
   22c98:	bf08      	it	eq
   22c9a:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
   22c9c:	f240 6c0c 	movw	ip, #1548	; 0x60c
   22ca0:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   22ca4:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   22ca6:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   22caa:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   22cac:	2c01      	cmp	r4, #1
   22cae:	bf18      	it	ne
   22cb0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   22cb4:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   22cb8:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   22cbc:	7bcb      	ldrb	r3, [r1, #15]
   22cbe:	b92b      	cbnz	r3, 22ccc <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   22cc0:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   22cc4:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   22cc8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   22ccc:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   22cce:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   22cd2:	b11a      	cbz	r2, 22cdc <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   22cd4:	f340 3007 	sbfx	r0, r0, #12, #8
   22cd8:	f7e9 f810 	bl	bcfc <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22cdc:	233c      	movs	r3, #60	; 0x3c
   22cde:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   22ce2:	4805      	ldr	r0, [pc, #20]	; (22cf8 <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22ce4:	2301      	movs	r3, #1
   22ce6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   22cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   22cec:	4803      	ldr	r0, [pc, #12]	; (22cfc <nrfx_twi_init+0xb8>)
   22cee:	e7fc      	b.n	22cea <nrfx_twi_init+0xa6>
   22cf0:	20005b24 	.word	0x20005b24
   22cf4:	50000300 	.word	0x50000300
   22cf8:	0bad0000 	.word	0x0bad0000
   22cfc:	0bad0005 	.word	0x0bad0005

00022d00 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   22d00:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22d02:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   22d04:	2105      	movs	r1, #5
   22d06:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   22d0a:	4b04      	ldr	r3, [pc, #16]	; (22d1c <nrfx_twi_enable+0x1c>)
   22d0c:	213c      	movs	r1, #60	; 0x3c
   22d0e:	fb01 3302 	mla	r3, r1, r2, r3
   22d12:	2202      	movs	r2, #2
   22d14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   22d18:	4770      	bx	lr
   22d1a:	bf00      	nop
   22d1c:	20005b24 	.word	0x20005b24

00022d20 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   22d20:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   22d22:	4b0c      	ldr	r3, [pc, #48]	; (22d54 <nrfx_twi_disable+0x34>)
{
   22d24:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22d26:	7904      	ldrb	r4, [r0, #4]
   22d28:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   22d2c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22d30:	4b09      	ldr	r3, [pc, #36]	; (22d58 <nrfx_twi_disable+0x38>)
   22d32:	f021 0103 	bic.w	r1, r1, #3
   22d36:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   22d3a:	2100      	movs	r1, #0
   22d3c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   22d40:	223c      	movs	r2, #60	; 0x3c
   22d42:	fb02 3304 	mla	r3, r2, r4, r3
   22d46:	2201      	movs	r2, #1
   22d48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
   22d4c:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
   22d50:	bd10      	pop	{r4, pc}
   22d52:	bf00      	nop
   22d54:	00044286 	.word	0x00044286
   22d58:	20005b24 	.word	0x20005b24

00022d5c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   22d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   22d60:	4f31      	ldr	r7, [pc, #196]	; (22e28 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22d62:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   22d64:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   22d68:	233c      	movs	r3, #60	; 0x3c
   22d6a:	fb03 7304 	mla	r3, r3, r4, r7
{
   22d6e:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   22d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   22d74:	2b01      	cmp	r3, #1
{
   22d76:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   22d78:	d104      	bne.n	22d84 <nrfx_twi_xfer+0x28>
   22d7a:	780b      	ldrb	r3, [r1, #0]
   22d7c:	2b01      	cmp	r3, #1
   22d7e:	d106      	bne.n	22d8e <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   22d80:	482a      	ldr	r0, [pc, #168]	; (22e2c <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22d82:	e011      	b.n	22da8 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   22d84:	2b02      	cmp	r3, #2
   22d86:	d102      	bne.n	22d8e <nrfx_twi_xfer+0x32>
   22d88:	780b      	ldrb	r3, [r1, #0]
   22d8a:	2b01      	cmp	r3, #1
   22d8c:	d1f8      	bne.n	22d80 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   22d8e:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   22d90:	4b27      	ldr	r3, [pc, #156]	; (22e30 <nrfx_twi_xfer+0xd4>)
   22d92:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   22d96:	fb06 7604 	mla	r6, r6, r4, r7
   22d9a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   22d9e:	b12b      	cbz	r3, 22dac <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   22da0:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   22da2:	4824      	ldr	r0, [pc, #144]	; (22e34 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   22da4:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   22da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   22dac:	f08c 0304 	eor.w	r3, ip, #4
   22db0:	f3c3 0380 	ubfx	r3, r3, #2, #1
   22db4:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   22db8:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   22dbc:	46a8      	mov	r8, r5
   22dbe:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   22dc2:	f106 0e0c 	add.w	lr, r6, #12
   22dc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   22dca:	f8d8 3000 	ldr.w	r3, [r8]
   22dce:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   22dd2:	686b      	ldr	r3, [r5, #4]
   22dd4:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   22dd6:	68eb      	ldr	r3, [r5, #12]
   22dd8:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   22dda:	786b      	ldrb	r3, [r5, #1]
   22ddc:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   22de0:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22de2:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   22de6:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22de8:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   22dec:	d017      	beq.n	22e1e <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   22dee:	b99b      	cbnz	r3, 22e18 <nrfx_twi_xfer+0xbc>
   22df0:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   22df4:	233c      	movs	r3, #60	; 0x3c
   22df6:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   22dfa:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   22dfc:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   22e00:	4648      	mov	r0, r9
   22e02:	f7ff fe3f 	bl	22a84 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   22e06:	233c      	movs	r3, #60	; 0x3c
   22e08:	435c      	muls	r4, r3
   22e0a:	193a      	adds	r2, r7, r4
   22e0c:	593b      	ldr	r3, [r7, r4]
   22e0e:	2b00      	cmp	r3, #0
   22e10:	d1ca      	bne.n	22da8 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   22e12:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   22e16:	e7c7      	b.n	22da8 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   22e18:	f04f 0c01 	mov.w	ip, #1
   22e1c:	e7ea      	b.n	22df4 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   22e1e:	4651      	mov	r1, sl
   22e20:	4648      	mov	r0, r9
   22e22:	f7ff fe9b 	bl	22b5c <twi_rx_start_transfer>
   22e26:	e7ee      	b.n	22e06 <nrfx_twi_xfer+0xaa>
   22e28:	20005b24 	.word	0x20005b24
   22e2c:	0bad0005 	.word	0x0bad0005
   22e30:	00044286 	.word	0x00044286
   22e34:	0bad000b 	.word	0x0bad000b

00022e38 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   22e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   22e3a:	4c2b      	ldr	r4, [pc, #172]	; (22ee8 <nrfx_twi_0_irq_handler+0xb0>)
   22e3c:	482b      	ldr	r0, [pc, #172]	; (22eec <nrfx_twi_0_irq_handler+0xb4>)
{
   22e3e:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   22e40:	4621      	mov	r1, r4
   22e42:	f007 fc58 	bl	2a6f6 <twi_transfer>
   22e46:	2800      	cmp	r0, #0
   22e48:	d140      	bne.n	22ecc <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
   22e4a:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   22e4e:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
   22e52:	b9ff      	cbnz	r7, 22e94 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   22e54:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   22e56:	1e9a      	subs	r2, r3, #2
   22e58:	2a01      	cmp	r2, #1
   22e5a:	d81b      	bhi.n	22e94 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   22e5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22e5e:	69a2      	ldr	r2, [r4, #24]
   22e60:	4291      	cmp	r1, r2
   22e62:	d117      	bne.n	22e94 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   22e64:	69e2      	ldr	r2, [r4, #28]
   22e66:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   22e68:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   22e6c:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   22e6e:	481f      	ldr	r0, [pc, #124]	; (22eec <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   22e70:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   22e72:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   22e74:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   22e78:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   22e7c:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   22e7e:	d104      	bne.n	22e8a <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   22e80:	b007      	add	sp, #28
   22e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   22e86:	f7ff bdfd 	b.w	22a84 <twi_tx_start_transfer>
}
   22e8a:	b007      	add	sp, #28
   22e8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   22e90:	f7ff be64 	b.w	22b5c <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   22e94:	4e16      	ldr	r6, [pc, #88]	; (22ef0 <nrfx_twi_0_irq_handler+0xb8>)
   22e96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22e98:	ad01      	add	r5, sp, #4
   22e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22e9c:	6833      	ldr	r3, [r6, #0]
   22e9e:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   22ea0:	b1ff      	cbz	r7, 22ee2 <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   22ea2:	4a12      	ldr	r2, [pc, #72]	; (22eec <nrfx_twi_0_irq_handler+0xb4>)
   22ea4:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22ea8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   22eac:	0799      	lsls	r1, r3, #30
   22eae:	d50f      	bpl.n	22ed0 <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   22eb0:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   22eb2:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   22eb6:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   22eb8:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   22ebc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   22ec0:	d000      	beq.n	22ec4 <nrfx_twi_0_irq_handler+0x8c>
   22ec2:	b11f      	cbz	r7, 22ecc <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
   22ec4:	e9d4 3100 	ldrd	r3, r1, [r4]
   22ec8:	4668      	mov	r0, sp
   22eca:	4798      	blx	r3
}
   22ecc:	b007      	add	sp, #28
   22ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   22ed0:	075a      	lsls	r2, r3, #29
   22ed2:	d501      	bpl.n	22ed8 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   22ed4:	2302      	movs	r3, #2
   22ed6:	e7ec      	b.n	22eb2 <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   22ed8:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   22eda:	bf4c      	ite	mi
   22edc:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   22ede:	2304      	movpl	r3, #4
   22ee0:	e7e7      	b.n	22eb2 <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
   22ee2:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   22ee6:	e7e6      	b.n	22eb6 <nrfx_twi_0_irq_handler+0x7e>
   22ee8:	20005b24 	.word	0x20005b24
   22eec:	40003000 	.word	0x40003000
   22ef0:	20005b30 	.word	0x20005b30

00022ef4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22ef8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22efc:	2a08      	cmp	r2, #8
   22efe:	d106      	bne.n	22f0e <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22f00:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   22f04:	2b05      	cmp	r3, #5
   22f06:	d804      	bhi.n	22f12 <nrf52_errata_187+0x1e>
   22f08:	4a03      	ldr	r2, [pc, #12]	; (22f18 <nrf52_errata_187+0x24>)
   22f0a:	5cd0      	ldrb	r0, [r2, r3]
   22f0c:	4770      	bx	lr
        return false;
   22f0e:	2000      	movs	r0, #0
   22f10:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22f12:	2001      	movs	r0, #1
}
   22f14:	4770      	bx	lr
   22f16:	bf00      	nop
   22f18:	00031e9a 	.word	0x00031e9a

00022f1c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   22f1c:	4b05      	ldr	r3, [pc, #20]	; (22f34 <ep_state_access+0x18>)
   22f1e:	f010 0f80 	tst.w	r0, #128	; 0x80
   22f22:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   22f26:	bf08      	it	eq
   22f28:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   22f2a:	f000 000f 	and.w	r0, r0, #15
}
   22f2e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   22f32:	4770      	bx	lr
   22f34:	20005cd0 	.word	0x20005cd0

00022f38 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   22f38:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   22f3a:	f007 fc68 	bl	2a80e <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   22f3e:	b118      	cbz	r0, 22f48 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   22f40:	4b03      	ldr	r3, [pc, #12]	; (22f50 <usbd_dma_pending_clear+0x18>)
   22f42:	2200      	movs	r2, #0
   22f44:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   22f48:	4b02      	ldr	r3, [pc, #8]	; (22f54 <usbd_dma_pending_clear+0x1c>)
   22f4a:	2200      	movs	r2, #0
   22f4c:	701a      	strb	r2, [r3, #0]
}
   22f4e:	bd08      	pop	{r3, pc}
   22f50:	40027000 	.word	0x40027000
   22f54:	20006012 	.word	0x20006012

00022f58 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   22f58:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   22f5a:	4a09      	ldr	r2, [pc, #36]	; (22f80 <ev_usbreset_handler+0x28>)
   22f5c:	2300      	movs	r3, #0
   22f5e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   22f60:	4a08      	ldr	r2, [pc, #32]	; (22f84 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   22f62:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   22f66:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   22f68:	f88d 3007 	strb.w	r3, [sp, #7]
   22f6c:	2301      	movs	r3, #1
   22f6e:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   22f72:	4b05      	ldr	r3, [pc, #20]	; (22f88 <ev_usbreset_handler+0x30>)
   22f74:	a801      	add	r0, sp, #4
   22f76:	681b      	ldr	r3, [r3, #0]
   22f78:	4798      	blx	r3
}
   22f7a:	b003      	add	sp, #12
   22f7c:	f85d fb04 	ldr.w	pc, [sp], #4
   22f80:	20006011 	.word	0x20006011
   22f84:	20006014 	.word	0x20006014
   22f88:	20005d60 	.word	0x20005d60

00022f8c <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   22f8c:	4b21      	ldr	r3, [pc, #132]	; (23014 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   22f8e:	b513      	push	{r0, r1, r4, lr}
   22f90:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   22f94:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   22f98:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   22f9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   22f9e:	d50e      	bpl.n	22fbe <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   22fa0:	4b1d      	ldr	r3, [pc, #116]	; (23018 <ev_usbevent_handler+0x8c>)
   22fa2:	2201      	movs	r2, #1
   22fa4:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   22fa6:	2300      	movs	r3, #0
   22fa8:	f8ad 3005 	strh.w	r3, [sp, #5]
   22fac:	f88d 3007 	strb.w	r3, [sp, #7]
   22fb0:	2302      	movs	r3, #2
   22fb2:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   22fb6:	4b19      	ldr	r3, [pc, #100]	; (2301c <ev_usbevent_handler+0x90>)
   22fb8:	a801      	add	r0, sp, #4
   22fba:	681b      	ldr	r3, [r3, #0]
   22fbc:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   22fbe:	05a2      	lsls	r2, r4, #22
   22fc0:	d50d      	bpl.n	22fde <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   22fc2:	4a15      	ldr	r2, [pc, #84]	; (23018 <ev_usbevent_handler+0x8c>)
   22fc4:	2300      	movs	r3, #0
   22fc6:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   22fc8:	f8ad 3005 	strh.w	r3, [sp, #5]
   22fcc:	f88d 3007 	strb.w	r3, [sp, #7]
   22fd0:	2303      	movs	r3, #3
   22fd2:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   22fd6:	4b11      	ldr	r3, [pc, #68]	; (2301c <ev_usbevent_handler+0x90>)
   22fd8:	a801      	add	r0, sp, #4
   22fda:	681b      	ldr	r3, [r3, #0]
   22fdc:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   22fde:	0563      	lsls	r3, r4, #21
   22fe0:	d515      	bpl.n	2300e <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   22fe2:	4a0d      	ldr	r2, [pc, #52]	; (23018 <ev_usbevent_handler+0x8c>)
   22fe4:	7813      	ldrb	r3, [r2, #0]
   22fe6:	b193      	cbz	r3, 2300e <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   22fe8:	2300      	movs	r3, #0
   22fea:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   22fec:	4a09      	ldr	r2, [pc, #36]	; (23014 <ev_usbevent_handler+0x88>)
   22fee:	2101      	movs	r1, #1
   22ff0:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   22ff4:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   22ff6:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   22ff8:	f8ad 3005 	strh.w	r3, [sp, #5]
   22ffc:	f88d 3007 	strb.w	r3, [sp, #7]
   23000:	2304      	movs	r3, #4
   23002:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   23006:	4b05      	ldr	r3, [pc, #20]	; (2301c <ev_usbevent_handler+0x90>)
   23008:	a801      	add	r0, sp, #4
   2300a:	681b      	ldr	r3, [r3, #0]
   2300c:	4798      	blx	r3
        }
    }
}
   2300e:	b002      	add	sp, #8
   23010:	bd10      	pop	{r4, pc}
   23012:	bf00      	nop
   23014:	40027000 	.word	0x40027000
   23018:	20006011 	.word	0x20006011
   2301c:	20005d60 	.word	0x20005d60

00023020 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   23020:	f04f 0320 	mov.w	r3, #32
   23024:	f3ef 8011 	mrs	r0, BASEPRI
   23028:	f383 8812 	msr	BASEPRI_MAX, r3
   2302c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   23030:	4b0a      	ldr	r3, [pc, #40]	; (2305c <usbd_errata_187_211_begin+0x3c>)
   23032:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   23036:	2203      	movs	r2, #3
   23038:	b961      	cbnz	r1, 23054 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2303a:	f249 3175 	movw	r1, #37749	; 0x9375
   2303e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   23042:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23046:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2304a:	f380 8811 	msr	BASEPRI, r0
   2304e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   23052:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   23054:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   23058:	e7f7      	b.n	2304a <usbd_errata_187_211_begin+0x2a>
   2305a:	bf00      	nop
   2305c:	4006e000 	.word	0x4006e000

00023060 <usbd_errata_187_211_end>:
	__asm__ volatile(
   23060:	f04f 0320 	mov.w	r3, #32
   23064:	f3ef 8011 	mrs	r0, BASEPRI
   23068:	f383 8812 	msr	BASEPRI_MAX, r3
   2306c:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   23070:	4b0a      	ldr	r3, [pc, #40]	; (2309c <usbd_errata_187_211_end+0x3c>)
   23072:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   23076:	b961      	cbnz	r1, 23092 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23078:	f249 3275 	movw	r2, #37749	; 0x9375
   2307c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   23080:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23084:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   23088:	f380 8811 	msr	BASEPRI, r0
   2308c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   23090:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   23092:	2200      	movs	r2, #0
   23094:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   23098:	e7f6      	b.n	23088 <usbd_errata_187_211_end+0x28>
   2309a:	bf00      	nop
   2309c:	4006e000 	.word	0x4006e000

000230a0 <nrfx_usbd_feeder_flash>:
{
   230a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   230a2:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   230a4:	4f0b      	ldr	r7, [pc, #44]	; (230d4 <nrfx_usbd_feeder_flash+0x34>)
   230a6:	4295      	cmp	r5, r2
   230a8:	bf28      	it	cs
   230aa:	4615      	movcs	r5, r2
{
   230ac:	460c      	mov	r4, r1
   230ae:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   230b0:	462a      	mov	r2, r5
   230b2:	6809      	ldr	r1, [r1, #0]
   230b4:	4638      	mov	r0, r7
   230b6:	f005 fb7b 	bl	287b0 <memcpy>
    p_transfer->size -= tx_size;
   230ba:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   230bc:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   230be:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   230c0:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   230c4:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   230c6:	6060      	str	r0, [r4, #4]
}
   230c8:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   230ca:	6022      	str	r2, [r4, #0]
}
   230cc:	bf18      	it	ne
   230ce:	2001      	movne	r0, #1
   230d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   230d2:	bf00      	nop
   230d4:	20005d64 	.word	0x20005d64

000230d8 <nrfx_usbd_feeder_flash_zlp>:
{
   230d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   230da:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   230dc:	4294      	cmp	r4, r2
   230de:	bf28      	it	cs
   230e0:	4614      	movcs	r4, r2
{
   230e2:	4606      	mov	r6, r0
   230e4:	460d      	mov	r5, r1
    if (tx_size != 0)
   230e6:	b18c      	cbz	r4, 2310c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   230e8:	4f09      	ldr	r7, [pc, #36]	; (23110 <nrfx_usbd_feeder_flash_zlp+0x38>)
   230ea:	6809      	ldr	r1, [r1, #0]
   230ec:	4622      	mov	r2, r4
   230ee:	4638      	mov	r0, r7
   230f0:	f005 fb5e 	bl	287b0 <memcpy>
        p_next->p_data.tx = p_buffer;
   230f4:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   230f6:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   230f8:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   230fa:	1b1b      	subs	r3, r3, r4
   230fc:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   230fe:	682b      	ldr	r3, [r5, #0]
}
   23100:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   23102:	4423      	add	r3, r4
   23104:	602b      	str	r3, [r5, #0]
}
   23106:	bf18      	it	ne
   23108:	2001      	movne	r0, #1
   2310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   2310c:	6004      	str	r4, [r0, #0]
   2310e:	e7f2      	b.n	230f6 <nrfx_usbd_feeder_flash_zlp+0x1e>
   23110:	20005d64 	.word	0x20005d64

00023114 <ev_sof_handler>:
{
   23114:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   23116:	2300      	movs	r3, #0
   23118:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   2311c:	4b0b      	ldr	r3, [pc, #44]	; (2314c <ev_sof_handler+0x38>)
   2311e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   23122:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   23126:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   2312a:	4a09      	ldr	r2, [pc, #36]	; (23150 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   2312c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   2312e:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   23130:	bf0c      	ite	eq
   23132:	f44f 7180 	moveq.w	r1, #256	; 0x100
   23136:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   2313a:	430b      	orrs	r3, r1
   2313c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   2313e:	4b05      	ldr	r3, [pc, #20]	; (23154 <ev_sof_handler+0x40>)
   23140:	a801      	add	r0, sp, #4
   23142:	681b      	ldr	r3, [r3, #0]
   23144:	4798      	blx	r3
}
   23146:	b003      	add	sp, #12
   23148:	f85d fb04 	ldr.w	pc, [sp], #4
   2314c:	40027000 	.word	0x40027000
   23150:	20005c3c 	.word	0x20005c3c
   23154:	20005d60 	.word	0x20005d60

00023158 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23158:	4b06      	ldr	r3, [pc, #24]	; (23174 <atomic_and.constprop.0.isra.0+0x1c>)
   2315a:	f3bf 8f5b 	dmb	ish
   2315e:	e853 2f00 	ldrex	r2, [r3]
   23162:	4002      	ands	r2, r0
   23164:	e843 2100 	strex	r1, r2, [r3]
   23168:	2900      	cmp	r1, #0
   2316a:	d1f8      	bne.n	2315e <atomic_and.constprop.0.isra.0+0x6>
   2316c:	f3bf 8f5b 	dmb	ish
}
   23170:	4770      	bx	lr
   23172:	bf00      	nop
   23174:	20005bcc 	.word	0x20005bcc

00023178 <nrf_usbd_ep0in_dma_handler>:
{
   23178:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2317a:	f7ff fedd 	bl	22f38 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2317e:	4b08      	ldr	r3, [pc, #32]	; (231a0 <nrf_usbd_ep0in_dma_handler+0x28>)
   23180:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   23184:	2a03      	cmp	r2, #3
   23186:	d105      	bne.n	23194 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   23188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2318c:	f06f 0001 	mvn.w	r0, #1
   23190:	f7ff bfe2 	b.w	23158 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   23194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   23198:	2b00      	cmp	r3, #0
   2319a:	d0f5      	beq.n	23188 <nrf_usbd_ep0in_dma_handler+0x10>
}
   2319c:	bd08      	pop	{r3, pc}
   2319e:	bf00      	nop
   231a0:	20005c40 	.word	0x20005c40

000231a4 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   231a4:	2201      	movs	r2, #1
{
   231a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   231a8:	fa02 f501 	lsl.w	r5, r2, r1
   231ac:	491c      	ldr	r1, [pc, #112]	; (23220 <usbd_ep_data_handler+0x7c>)
   231ae:	4e1d      	ldr	r6, [pc, #116]	; (23224 <usbd_ep_data_handler+0x80>)
   231b0:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   231b2:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   231b6:	ea43 0305 	orr.w	r3, r3, r5
{
   231ba:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   231bc:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   231be:	d024      	beq.n	2320a <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   231c0:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   231c4:	4b18      	ldr	r3, [pc, #96]	; (23228 <usbd_ep_data_handler+0x84>)
   231c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   231ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   231ce:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   231d2:	681a      	ldr	r2, [r3, #0]
    if (ret)
   231d4:	b132      	cbz	r2, 231e4 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   231d6:	2200      	movs	r2, #0
   231d8:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   231da:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   231dc:	681b      	ldr	r3, [r3, #0]
   231de:	d011      	beq.n	23204 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   231e0:	f007 fb65 	bl	2a8ae <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   231e4:	6831      	ldr	r1, [r6, #0]
   231e6:	4029      	ands	r1, r5
   231e8:	d10a      	bne.n	23200 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   231ea:	2306      	movs	r3, #6
   231ec:	f88d 3004 	strb.w	r3, [sp, #4]
   231f0:	f88d 4006 	strb.w	r4, [sp, #6]
   231f4:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   231f8:	4b0c      	ldr	r3, [pc, #48]	; (2322c <usbd_ep_data_handler+0x88>)
   231fa:	a801      	add	r0, sp, #4
   231fc:	681b      	ldr	r3, [r3, #0]
   231fe:	4798      	blx	r3
}
   23200:	b002      	add	sp, #8
   23202:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   23204:	f7ff ffb8 	bl	23178 <nrf_usbd_ep0in_dma_handler>
   23208:	e7ec      	b.n	231e4 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2320a:	6833      	ldr	r3, [r6, #0]
   2320c:	421d      	tst	r5, r3
   2320e:	d1f7      	bne.n	23200 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   23210:	2306      	movs	r3, #6
   23212:	f88d 3004 	strb.w	r3, [sp, #4]
   23216:	f88d 0006 	strb.w	r0, [sp, #6]
   2321a:	f88d 2007 	strb.w	r2, [sp, #7]
   2321e:	e7eb      	b.n	231f8 <usbd_ep_data_handler+0x54>
   23220:	20005c3c 	.word	0x20005c3c
   23224:	20005bcc 	.word	0x20005bcc
   23228:	0002dd1c 	.word	0x0002dd1c
   2322c:	20005d60 	.word	0x20005d60

00023230 <ev_setup_data_handler>:
{
   23230:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   23232:	4b05      	ldr	r3, [pc, #20]	; (23248 <ev_setup_data_handler+0x18>)
   23234:	781a      	ldrb	r2, [r3, #0]
   23236:	4610      	mov	r0, r2
   23238:	f007 fb2f 	bl	2a89a <ep2bit>
}
   2323c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   23240:	4601      	mov	r1, r0
   23242:	4610      	mov	r0, r2
   23244:	f7ff bfae 	b.w	231a4 <usbd_ep_data_handler>
   23248:	20006014 	.word	0x20006014

0002324c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2324c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2324e:	f7ff fe73 	bl	22f38 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   23252:	4b0c      	ldr	r3, [pc, #48]	; (23284 <ev_dma_epout8_handler+0x38>)
   23254:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   23258:	2a03      	cmp	r2, #3
   2325a:	d010      	beq.n	2327e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   2325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   23260:	b96b      	cbnz	r3, 2327e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23262:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   23266:	f7ff ff77 	bl	23158 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2326a:	2306      	movs	r3, #6
   2326c:	f88d 3004 	strb.w	r3, [sp, #4]
   23270:	2308      	movs	r3, #8
   23272:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   23276:	4b04      	ldr	r3, [pc, #16]	; (23288 <ev_dma_epout8_handler+0x3c>)
   23278:	a801      	add	r0, sp, #4
   2327a:	681b      	ldr	r3, [r3, #0]
   2327c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2327e:	b003      	add	sp, #12
   23280:	f85d fb04 	ldr.w	pc, [sp], #4
   23284:	20005c40 	.word	0x20005c40
   23288:	20005d60 	.word	0x20005d60

0002328c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2328c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2328e:	f7ff fe53 	bl	22f38 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   23292:	4b10      	ldr	r3, [pc, #64]	; (232d4 <ev_dma_epin8_handler+0x48>)
   23294:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   23298:	2a03      	cmp	r2, #3
   2329a:	d106      	bne.n	232aa <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2329c:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   232a0:	b003      	add	sp, #12
   232a2:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   232a6:	f7ff bf57 	b.w	23158 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   232aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   232ae:	b96b      	cbnz	r3, 232cc <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   232b0:	f46f 7080 	mvn.w	r0, #256	; 0x100
   232b4:	f7ff ff50 	bl	23158 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   232b8:	2306      	movs	r3, #6
   232ba:	f88d 3004 	strb.w	r3, [sp, #4]
   232be:	2388      	movs	r3, #136	; 0x88
   232c0:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   232c4:	4b04      	ldr	r3, [pc, #16]	; (232d8 <ev_dma_epin8_handler+0x4c>)
   232c6:	a801      	add	r0, sp, #4
   232c8:	681b      	ldr	r3, [r3, #0]
   232ca:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   232cc:	b003      	add	sp, #12
   232ce:	f85d fb04 	ldr.w	pc, [sp], #4
   232d2:	bf00      	nop
   232d4:	20005c40 	.word	0x20005c40
   232d8:	20005d60 	.word	0x20005d60

000232dc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   232dc:	4a02      	ldr	r2, [pc, #8]	; (232e8 <nrfx_usbd_uninit+0xc>)
   232de:	2300      	movs	r3, #0
   232e0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   232e2:	4a02      	ldr	r2, [pc, #8]	; (232ec <nrfx_usbd_uninit+0x10>)
   232e4:	7013      	strb	r3, [r2, #0]
    return;
}
   232e6:	4770      	bx	lr
   232e8:	20005d60 	.word	0x20005d60
   232ec:	20006013 	.word	0x20006013

000232f0 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   232f0:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   232f2:	4b48      	ldr	r3, [pc, #288]	; (23414 <nrfx_usbd_enable+0x124>)
   232f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   232f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   232fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   23300:	f7ff fdf8 	bl	22ef4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   23304:	b108      	cbz	r0, 2330a <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   23306:	f7ff fe8b 	bl	23020 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   2330a:	f007 fa80 	bl	2a80e <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   2330e:	b1c8      	cbz	r0, 23344 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   23310:	f04f 0320 	mov.w	r3, #32
   23314:	f3ef 8011 	mrs	r0, BASEPRI
   23318:	f383 8812 	msr	BASEPRI_MAX, r3
   2331c:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   23320:	4b3d      	ldr	r3, [pc, #244]	; (23418 <nrfx_usbd_enable+0x128>)
   23322:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   23326:	22c0      	movs	r2, #192	; 0xc0
   23328:	2900      	cmp	r1, #0
   2332a:	d16a      	bne.n	23402 <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2332c:	f249 3175 	movw	r1, #37749	; 0x9375
   23330:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   23334:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23338:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2333c:	f380 8811 	msr	BASEPRI, r0
   23340:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   23344:	4b33      	ldr	r3, [pc, #204]	; (23414 <nrfx_usbd_enable+0x124>)
   23346:	2201      	movs	r2, #1
   23348:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2334c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   23350:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   23354:	0512      	lsls	r2, r2, #20
   23356:	d5fb      	bpl.n	23350 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   23358:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2335c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   23360:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   23364:	f007 fa53 	bl	2a80e <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   23368:	b1c0      	cbz	r0, 2339c <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   2336a:	f04f 0320 	mov.w	r3, #32
   2336e:	f3ef 8011 	mrs	r0, BASEPRI
   23372:	f383 8812 	msr	BASEPRI_MAX, r3
   23376:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2337a:	4b27      	ldr	r3, [pc, #156]	; (23418 <nrfx_usbd_enable+0x128>)
   2337c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   23380:	2900      	cmp	r1, #0
   23382:	d141      	bne.n	23408 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23384:	f249 3275 	movw	r2, #37749	; 0x9375
   23388:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2338c:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23390:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   23394:	f380 8811 	msr	BASEPRI, r0
   23398:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   2339c:	f7ff fdaa 	bl	22ef4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   233a0:	b130      	cbz	r0, 233b0 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   233a2:	f7ff fe5d 	bl	23060 <usbd_errata_187_211_end>
   233a6:	f7ff fda5 	bl	22ef4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   233aa:	b108      	cbz	r0, 233b0 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   233ac:	f7ff fe38 	bl	23020 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   233b0:	f007 fa2d 	bl	2a80e <nrf52_errata_166>
   233b4:	4b17      	ldr	r3, [pc, #92]	; (23414 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   233b6:	b150      	cbz	r0, 233ce <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   233b8:	f240 72e3 	movw	r2, #2019	; 0x7e3
   233bc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   233c0:	2240      	movs	r2, #64	; 0x40
   233c2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   233c6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   233ca:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   233ce:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   233d0:	2280      	movs	r2, #128	; 0x80
   233d2:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   233d6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   233da:	4b10      	ldr	r3, [pc, #64]	; (2341c <nrfx_usbd_enable+0x12c>)
   233dc:	f240 12ff 	movw	r2, #511	; 0x1ff
   233e0:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   233e2:	4b0f      	ldr	r3, [pc, #60]	; (23420 <nrfx_usbd_enable+0x130>)
   233e4:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   233e6:	f7ff fda7 	bl	22f38 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   233ea:	4b0e      	ldr	r3, [pc, #56]	; (23424 <nrfx_usbd_enable+0x134>)
   233ec:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   233ee:	4b0e      	ldr	r3, [pc, #56]	; (23428 <nrfx_usbd_enable+0x138>)
   233f0:	2202      	movs	r2, #2
   233f2:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   233f4:	f7ff fd7e 	bl	22ef4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   233f8:	b150      	cbz	r0, 23410 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   233fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   233fe:	f7ff be2f 	b.w	23060 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   23402:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   23406:	e799      	b.n	2333c <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   23408:	2200      	movs	r2, #0
   2340a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2340e:	e7c1      	b.n	23394 <nrfx_usbd_enable+0xa4>
}
   23410:	bd08      	pop	{r3, pc}
   23412:	bf00      	nop
   23414:	40027000 	.word	0x40027000
   23418:	4006e000 	.word	0x4006e000
   2341c:	20005c3c 	.word	0x20005c3c
   23420:	20005bcc 	.word	0x20005bcc
   23424:	20006014 	.word	0x20006014
   23428:	20006013 	.word	0x20006013

0002342c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   2342c:	4b0a      	ldr	r3, [pc, #40]	; (23458 <nrfx_usbd_start+0x2c>)
   2342e:	2200      	movs	r2, #0
{
   23430:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   23432:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   23434:	4a09      	ldr	r2, [pc, #36]	; (2345c <nrfx_usbd_start+0x30>)
   23436:	4b0a      	ldr	r3, [pc, #40]	; (23460 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   23438:	4c0a      	ldr	r4, [pc, #40]	; (23464 <nrfx_usbd_start+0x38>)
   2343a:	2800      	cmp	r0, #0
   2343c:	bf18      	it	ne
   2343e:	4613      	movne	r3, r2
   23440:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   23444:	2027      	movs	r0, #39	; 0x27
   23446:	f7e8 fc59 	bl	bcfc <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   2344a:	2301      	movs	r3, #1
   2344c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   23450:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   23454:	bd10      	pop	{r4, pc}
   23456:	bf00      	nop
   23458:	20006011 	.word	0x20006011
   2345c:	01e01407 	.word	0x01e01407
   23460:	01c01407 	.word	0x01c01407
   23464:	40027000 	.word	0x40027000

00023468 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   23468:	4b03      	ldr	r3, [pc, #12]	; (23478 <nrfx_usbd_is_enabled+0x10>)
   2346a:	7818      	ldrb	r0, [r3, #0]
}
   2346c:	2801      	cmp	r0, #1
   2346e:	bf94      	ite	ls
   23470:	2000      	movls	r0, #0
   23472:	2001      	movhi	r0, #1
   23474:	4770      	bx	lr
   23476:	bf00      	nop
   23478:	20006013 	.word	0x20006013

0002347c <nrfx_usbd_init>:
{
   2347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   23480:	4b1d      	ldr	r3, [pc, #116]	; (234f8 <nrfx_usbd_init+0x7c>)
   23482:	781c      	ldrb	r4, [r3, #0]
   23484:	2c00      	cmp	r4, #0
   23486:	d135      	bne.n	234f4 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   23488:	4a1c      	ldr	r2, [pc, #112]	; (234fc <nrfx_usbd_init+0x80>)
   2348a:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2348c:	2201      	movs	r2, #1
   2348e:	701a      	strb	r2, [r3, #0]
   23490:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   23492:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   23496:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   23498:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2349c:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   234a0:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   234a2:	bf14      	ite	ne
   234a4:	4641      	movne	r1, r8
   234a6:	2140      	moveq	r1, #64	; 0x40
   234a8:	4630      	mov	r0, r6
   234aa:	f007 fa30 	bl	2a90e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   234ae:	4630      	mov	r0, r6
   234b0:	f7ff fd34 	bl	22f1c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   234b4:	3501      	adds	r5, #1
   234b6:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   234b8:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   234ba:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   234bc:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   234be:	d1eb      	bne.n	23498 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   234c0:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   234c2:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   234c4:	f240 16ff 	movw	r6, #511	; 0x1ff
   234c8:	4620      	mov	r0, r4
   234ca:	f007 fa20 	bl	2a90e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   234ce:	4620      	mov	r0, r4
   234d0:	f7ff fd24 	bl	22f1c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   234d4:	3401      	adds	r4, #1
   234d6:	b2e4      	uxtb	r4, r4
   234d8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   234da:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   234dc:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   234de:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   234e0:	d102      	bne.n	234e8 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   234e2:	4807      	ldr	r0, [pc, #28]	; (23500 <nrfx_usbd_init+0x84>)
}
   234e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   234e8:	f014 0f08 	tst.w	r4, #8
   234ec:	bf14      	ite	ne
   234ee:	4631      	movne	r1, r6
   234f0:	2140      	moveq	r1, #64	; 0x40
   234f2:	e7e9      	b.n	234c8 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   234f4:	4803      	ldr	r0, [pc, #12]	; (23504 <nrfx_usbd_init+0x88>)
   234f6:	e7f5      	b.n	234e4 <nrfx_usbd_init+0x68>
   234f8:	20006013 	.word	0x20006013
   234fc:	20005d60 	.word	0x20005d60
   23500:	0bad0000 	.word	0x0bad0000
   23504:	0bad0005 	.word	0x0bad0005

00023508 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   23508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2350c:	4605      	mov	r5, r0
	__asm__ volatile(
   2350e:	f04f 0320 	mov.w	r3, #32
   23512:	f3ef 8811 	mrs	r8, BASEPRI
   23516:	f383 8812 	msr	BASEPRI_MAX, r3
   2351a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   2351e:	f010 040f 	ands.w	r4, r0, #15
   23522:	d103      	bne.n	2352c <nrfx_usbd_ep_transfer+0x24>
   23524:	4b27      	ldr	r3, [pc, #156]	; (235c4 <nrfx_usbd_ep_transfer+0xbc>)
   23526:	781b      	ldrb	r3, [r3, #0]
   23528:	4283      	cmp	r3, r0
   2352a:	d146      	bne.n	235ba <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2352c:	4b26      	ldr	r3, [pc, #152]	; (235c8 <nrfx_usbd_ep_transfer+0xc0>)
   2352e:	4f27      	ldr	r7, [pc, #156]	; (235cc <nrfx_usbd_ep_transfer+0xc4>)
   23530:	681a      	ldr	r2, [r3, #0]
   23532:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   23534:	4628      	mov	r0, r5
   23536:	f007 f9b0 	bl	2a89a <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2353a:	43d2      	mvns	r2, r2
   2353c:	b292      	uxth	r2, r2
   2353e:	f04f 0901 	mov.w	r9, #1
   23542:	4332      	orrs	r2, r6
   23544:	fa09 f900 	lsl.w	r9, r9, r0
   23548:	ea12 0f09 	tst.w	r2, r9
   2354c:	d137      	bne.n	235be <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2354e:	4628      	mov	r0, r5
   23550:	f7ff fce4 	bl	22f1c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   23554:	220c      	movs	r2, #12
   23556:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   23558:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2355a:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   2355c:	d529      	bpl.n	235b2 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2355e:	4a1c      	ldr	r2, [pc, #112]	; (235d0 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   23560:	6808      	ldr	r0, [r1, #0]
   23562:	4414      	add	r4, r2
   23564:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   23568:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2356a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2356e:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   23572:	d119      	bne.n	235a8 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   23574:	b9b2      	cbnz	r2, 235a4 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   23576:	4a17      	ldr	r2, [pc, #92]	; (235d4 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   23578:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   2357a:	c907      	ldmia	r1, {r0, r1, r2}
   2357c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   23580:	2200      	movs	r2, #0
   23582:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   23584:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   23586:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23588:	4b13      	ldr	r3, [pc, #76]	; (235d8 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   2358a:	4814      	ldr	r0, [pc, #80]	; (235dc <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2358c:	ea46 0609 	orr.w	r6, r6, r9
   23590:	2280      	movs	r2, #128	; 0x80
   23592:	603e      	str	r6, [r7, #0]
   23594:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   23598:	f388 8811 	msr	BASEPRI, r8
   2359c:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   235a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   235a4:	4a0e      	ldr	r2, [pc, #56]	; (235e0 <nrfx_usbd_ep_transfer+0xd8>)
   235a6:	e7e7      	b.n	23578 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   235a8:	b90a      	cbnz	r2, 235ae <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   235aa:	4a0e      	ldr	r2, [pc, #56]	; (235e4 <nrfx_usbd_ep_transfer+0xdc>)
   235ac:	e7e4      	b.n	23578 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   235ae:	4a0e      	ldr	r2, [pc, #56]	; (235e8 <nrfx_usbd_ep_transfer+0xe0>)
   235b0:	e7e2      	b.n	23578 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   235b2:	4a0e      	ldr	r2, [pc, #56]	; (235ec <nrfx_usbd_ep_transfer+0xe4>)
   235b4:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   235b6:	4a0e      	ldr	r2, [pc, #56]	; (235f0 <nrfx_usbd_ep_transfer+0xe8>)
   235b8:	e7de      	b.n	23578 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   235ba:	480e      	ldr	r0, [pc, #56]	; (235f4 <nrfx_usbd_ep_transfer+0xec>)
   235bc:	e7ec      	b.n	23598 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   235be:	480e      	ldr	r0, [pc, #56]	; (235f8 <nrfx_usbd_ep_transfer+0xf0>)
   235c0:	e7ea      	b.n	23598 <nrfx_usbd_ep_transfer+0x90>
   235c2:	bf00      	nop
   235c4:	20006014 	.word	0x20006014
   235c8:	20005c3c 	.word	0x20005c3c
   235cc:	20005bcc 	.word	0x20005bcc
   235d0:	20005bd0 	.word	0x20005bd0
   235d4:	0002a84f 	.word	0x0002a84f
   235d8:	e000e100 	.word	0xe000e100
   235dc:	0bad0000 	.word	0x0bad0000
   235e0:	0002a871 	.word	0x0002a871
   235e4:	000230a1 	.word	0x000230a1
   235e8:	000230d9 	.word	0x000230d9
   235ec:	20005b60 	.word	0x20005b60
   235f0:	0002a821 	.word	0x0002a821
   235f4:	0bad000a 	.word	0x0bad000a
   235f8:	0bad000b 	.word	0x0bad000b

000235fc <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   235fc:	f010 0f08 	tst.w	r0, #8
   23600:	4b07      	ldr	r3, [pc, #28]	; (23620 <nrfx_usbd_epout_size_get+0x24>)
   23602:	d006      	beq.n	23612 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   23604:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   23608:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   2360c:	bf18      	it	ne
   2360e:	2000      	movne	r0, #0
   23610:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   23612:	f000 000f 	and.w	r0, r0, #15
   23616:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2361a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   2361e:	4770      	bx	lr
   23620:	40027000 	.word	0x40027000

00023624 <usbd_dmareq_process>:
{
   23624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   23628:	f8df 815c 	ldr.w	r8, [pc, #348]	; 23788 <usbd_dmareq_process+0x164>
   2362c:	f898 3000 	ldrb.w	r3, [r8]
{
   23630:	b085      	sub	sp, #20
    if (!m_dma_pending)
   23632:	2b00      	cmp	r3, #0
   23634:	d16b      	bne.n	2370e <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   23636:	f8df 9154 	ldr.w	r9, [pc, #340]	; 2378c <usbd_dmareq_process+0x168>
   2363a:	4e55      	ldr	r6, [pc, #340]	; (23790 <usbd_dmareq_process+0x16c>)
   2363c:	f8d9 1000 	ldr.w	r1, [r9]
   23640:	6833      	ldr	r3, [r6, #0]
   23642:	4019      	ands	r1, r3
   23644:	d063      	beq.n	2370e <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   23646:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   2364a:	bf14      	ite	ne
   2364c:	fa93 f1a3 	rbitne	r1, r3
   23650:	fa91 f1a1 	rbiteq	r1, r1
   23654:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   23658:	290f      	cmp	r1, #15
   2365a:	bf8a      	itet	hi
   2365c:	f1a1 0410 	subhi.w	r4, r1, #16
   23660:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   23664:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   23666:	4620      	mov	r0, r4
   23668:	f7ff fc58 	bl	22f1c <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2366c:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   23670:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   23674:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   23678:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2367c:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2367e:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   23682:	da47      	bge.n	23714 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   23684:	6803      	ldr	r3, [r0, #0]
   23686:	8982      	ldrh	r2, [r0, #12]
   23688:	6841      	ldr	r1, [r0, #4]
   2368a:	a802      	add	r0, sp, #8
   2368c:	4798      	blx	r3
                if (!continue_transfer)
   2368e:	b900      	cbnz	r0, 23692 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   23690:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   23692:	f007 f8bc 	bl	2a80e <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   23696:	b118      	cbz	r0, 236a0 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   23698:	4b3e      	ldr	r3, [pc, #248]	; (23794 <usbd_dmareq_process+0x170>)
   2369a:	2282      	movs	r2, #130	; 0x82
   2369c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   236a0:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   236a2:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   236a4:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   236a6:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   236aa:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   236ac:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   236b0:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   236b2:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   236b6:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   236b8:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   236ba:	f004 0008 	and.w	r0, r4, #8
   236be:	9902      	ldr	r1, [sp, #8]
   236c0:	4b34      	ldr	r3, [pc, #208]	; (23794 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   236c2:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   236c6:	da4f      	bge.n	23768 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   236c8:	2800      	cmp	r0, #0
   236ca:	d045      	beq.n	23758 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   236cc:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   236d0:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   236d4:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   236d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   236da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   236de:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   236e2:	2201      	movs	r2, #1
   236e4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   236e6:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   236e8:	4a2b      	ldr	r2, [pc, #172]	; (23798 <usbd_dmareq_process+0x174>)
   236ea:	4b2c      	ldr	r3, [pc, #176]	; (2379c <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   236ec:	4929      	ldr	r1, [pc, #164]	; (23794 <usbd_dmareq_process+0x170>)
   236ee:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   236f2:	bf38      	it	cc
   236f4:	4613      	movcc	r3, r2
   236f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   236fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   236fe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   23702:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   23704:	b91a      	cbnz	r2, 2370e <usbd_dmareq_process+0xea>
   23706:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   2370a:	2a00      	cmp	r2, #0
   2370c:	d0f9      	beq.n	23702 <usbd_dmareq_process+0xde>
}
   2370e:	b005      	add	sp, #20
   23710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   23714:	4620      	mov	r0, r4
   23716:	f7ff ff71 	bl	235fc <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   2371a:	89aa      	ldrh	r2, [r5, #12]
   2371c:	6869      	ldr	r1, [r5, #4]
   2371e:	f8d5 c000 	ldr.w	ip, [r5]
   23722:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   23724:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   23726:	a802      	add	r0, sp, #8
   23728:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   2372a:	9a02      	ldr	r2, [sp, #8]
   2372c:	2a00      	cmp	r2, #0
   2372e:	d0ae      	beq.n	2368e <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   23730:	9a03      	ldr	r2, [sp, #12]
   23732:	4297      	cmp	r7, r2
   23734:	d9ab      	bls.n	2368e <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   23736:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   23738:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2373a:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2373c:	f7ff fd0c 	bl	23158 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   23740:	2306      	movs	r3, #6
   23742:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   23746:	4b16      	ldr	r3, [pc, #88]	; (237a0 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   23748:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   2374c:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2374e:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   23752:	a801      	add	r0, sp, #4
   23754:	4798      	blx	r3
                    continue;
   23756:	e771      	b.n	2363c <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   23758:	2014      	movs	r0, #20
   2375a:	fb00 3304 	mla	r3, r0, r4, r3
   2375e:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   23762:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   23766:	e7b5      	b.n	236d4 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   23768:	b128      	cbz	r0, 23776 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   2376a:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   2376e:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   23772:	2328      	movs	r3, #40	; 0x28
   23774:	e7af      	b.n	236d6 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   23776:	2014      	movs	r0, #20
   23778:	fb00 3304 	mla	r3, r0, r4, r3
   2377c:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   23780:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   23784:	e7f5      	b.n	23772 <usbd_dmareq_process+0x14e>
   23786:	bf00      	nop
   23788:	20006012 	.word	0x20006012
   2378c:	20005bcc 	.word	0x20005bcc
   23790:	20005c3c 	.word	0x20005c3c
   23794:	40027000 	.word	0x40027000
   23798:	0002dd2e 	.word	0x0002dd2e
   2379c:	0002dd1c 	.word	0x0002dd1c
   237a0:	20005d60 	.word	0x20005d60

000237a4 <ev_epdata_handler>:
{
   237a4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   237a6:	4b0f      	ldr	r3, [pc, #60]	; (237e4 <ev_epdata_handler+0x40>)
   237a8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   237ac:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   237b0:	2501      	movs	r5, #1
    while (dataepstatus)
   237b2:	b91c      	cbnz	r4, 237bc <ev_epdata_handler+0x18>
}
   237b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   237b8:	f7ff bf34 	b.w	23624 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   237bc:	fa94 f3a4 	rbit	r3, r4
   237c0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   237c4:	2b0f      	cmp	r3, #15
   237c6:	bfc8      	it	gt
   237c8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   237cc:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   237ce:	bfd4      	ite	le
   237d0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   237d4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   237d6:	fa05 f303 	lsl.w	r3, r5, r3
   237da:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   237de:	f7ff fce1 	bl	231a4 <usbd_ep_data_handler>
   237e2:	e7e6      	b.n	237b2 <ev_epdata_handler+0xe>
   237e4:	40027000 	.word	0x40027000

000237e8 <nrf_usbd_epout_dma_handler>:
{
   237e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   237ea:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   237ec:	f7ff fba4 	bl	22f38 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   237f0:	4620      	mov	r0, r4
   237f2:	f7ff fb93 	bl	22f1c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   237f6:	7b83      	ldrb	r3, [r0, #14]
   237f8:	2b03      	cmp	r3, #3
   237fa:	d10d      	bne.n	23818 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   237fc:	4620      	mov	r0, r4
   237fe:	f007 f84c 	bl	2a89a <ep2bit>
   23802:	2301      	movs	r3, #1
   23804:	fa03 f000 	lsl.w	r0, r3, r0
   23808:	43c0      	mvns	r0, r0
   2380a:	f7ff fca5 	bl	23158 <atomic_and.constprop.0.isra.0>
}
   2380e:	b003      	add	sp, #12
   23810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   23814:	f7ff bf06 	b.w	23624 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   23818:	6805      	ldr	r5, [r0, #0]
   2381a:	2d00      	cmp	r5, #0
   2381c:	d1f7      	bne.n	2380e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2381e:	4620      	mov	r0, r4
   23820:	f007 f83b 	bl	2a89a <ep2bit>
   23824:	2301      	movs	r3, #1
   23826:	fa03 f000 	lsl.w	r0, r3, r0
   2382a:	43c0      	mvns	r0, r0
   2382c:	f7ff fc94 	bl	23158 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   23830:	2306      	movs	r3, #6
   23832:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   23836:	4b04      	ldr	r3, [pc, #16]	; (23848 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   23838:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   2383c:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2383e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   23842:	a801      	add	r0, sp, #4
   23844:	4798      	blx	r3
   23846:	e7e2      	b.n	2380e <nrf_usbd_epout_dma_handler+0x26>
   23848:	20005d60 	.word	0x20005d60

0002384c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   2384c:	4b02      	ldr	r3, [pc, #8]	; (23858 <nrfx_usbd_ep_stall+0xc>)
   2384e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   23852:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   23856:	4770      	bx	lr
   23858:	40027000 	.word	0x40027000

0002385c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2385c:	0702      	lsls	r2, r0, #28
   2385e:	d413      	bmi.n	23888 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   23860:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   23864:	f010 0f80 	tst.w	r0, #128	; 0x80
   23868:	4a08      	ldr	r2, [pc, #32]	; (2388c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   2386a:	bf0b      	itete	eq
   2386c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   23870:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   23874:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   23878:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   2387c:	bf08      	it	eq
   2387e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   23880:	1e43      	subs	r3, r0, #1
   23882:	4258      	negs	r0, r3
   23884:	4158      	adcs	r0, r3
   23886:	4770      	bx	lr
        return false;
   23888:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   2388a:	4770      	bx	lr
   2388c:	40027000 	.word	0x40027000

00023890 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   23890:	4b04      	ldr	r3, [pc, #16]	; (238a4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   23892:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   23896:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2389a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   2389e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   238a2:	4770      	bx	lr
   238a4:	40027000 	.word	0x40027000

000238a8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   238a8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   238aa:	2208      	movs	r2, #8
   238ac:	2100      	movs	r1, #0
{
   238ae:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   238b0:	f004 ff89 	bl	287c6 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   238b4:	4b0e      	ldr	r3, [pc, #56]	; (238f0 <nrfx_usbd_setup_get+0x48>)
   238b6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   238ba:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   238bc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   238c0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   238c2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   238c6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   238ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   238ce:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   238d0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   238d4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   238d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   238dc:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   238de:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   238e2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   238e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   238ea:	80e3      	strh	r3, [r4, #6]
}
   238ec:	bd10      	pop	{r4, pc}
   238ee:	bf00      	nop
   238f0:	40027000 	.word	0x40027000

000238f4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   238f4:	4b02      	ldr	r3, [pc, #8]	; (23900 <nrfx_usbd_setup_data_clear+0xc>)
   238f6:	2201      	movs	r2, #1
   238f8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   238fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   238fc:	4770      	bx	lr
   238fe:	bf00      	nop
   23900:	40027000 	.word	0x40027000

00023904 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   23904:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   23906:	f7ff fb17 	bl	22f38 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2390a:	4b10      	ldr	r3, [pc, #64]	; (2394c <ev_dma_epout0_handler+0x48>)
   2390c:	7b9a      	ldrb	r2, [r3, #14]
   2390e:	2a03      	cmp	r2, #3
   23910:	d106      	bne.n	23920 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23912:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   23916:	b002      	add	sp, #8
   23918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2391c:	f7ff bc1c 	b.w	23158 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   23920:	681c      	ldr	r4, [r3, #0]
   23922:	b974      	cbnz	r4, 23942 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23924:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   23928:	f7ff fc16 	bl	23158 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2392c:	2306      	movs	r3, #6
   2392e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   23932:	4b07      	ldr	r3, [pc, #28]	; (23950 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   23934:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   23938:	681b      	ldr	r3, [r3, #0]
   2393a:	a801      	add	r0, sp, #4
   2393c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2393e:	b002      	add	sp, #8
   23940:	bd10      	pop	{r4, pc}
   23942:	b002      	add	sp, #8
   23944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   23948:	f7ff bfd4 	b.w	238f4 <nrfx_usbd_setup_data_clear>
   2394c:	20005c40 	.word	0x20005c40
   23950:	20005d60 	.word	0x20005d60

00023954 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   23954:	4b02      	ldr	r3, [pc, #8]	; (23960 <nrfx_usbd_setup_clear+0xc>)
   23956:	2201      	movs	r2, #1
   23958:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   2395c:	4770      	bx	lr
   2395e:	bf00      	nop
   23960:	40027000 	.word	0x40027000

00023964 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   23964:	4b02      	ldr	r3, [pc, #8]	; (23970 <nrfx_usbd_setup_stall+0xc>)
   23966:	2201      	movs	r2, #1
   23968:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   2396c:	4770      	bx	lr
   2396e:	bf00      	nop
   23970:	40027000 	.word	0x40027000

00023974 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   23974:	4b01      	ldr	r3, [pc, #4]	; (2397c <nrfx_usbd_last_setup_dir_get+0x8>)
   23976:	7818      	ldrb	r0, [r3, #0]
   23978:	4770      	bx	lr
   2397a:	bf00      	nop
   2397c:	20006014 	.word	0x20006014

00023980 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   23980:	b510      	push	{r4, lr}
   23982:	4602      	mov	r2, r0
	__asm__ volatile(
   23984:	f04f 0320 	mov.w	r3, #32
   23988:	f3ef 8411 	mrs	r4, BASEPRI
   2398c:	f383 8812 	msr	BASEPRI_MAX, r3
   23990:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   23994:	f006 ff81 	bl	2a89a <ep2bit>
   23998:	490d      	ldr	r1, [pc, #52]	; (239d0 <nrfx_usbd_transfer_out_drop+0x50>)
   2399a:	2301      	movs	r3, #1
   2399c:	fa03 f000 	lsl.w	r0, r3, r0
   239a0:	680b      	ldr	r3, [r1, #0]
   239a2:	ea23 0300 	bic.w	r3, r3, r0
   239a6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   239a8:	f012 0108 	ands.w	r1, r2, #8
   239ac:	d10a      	bne.n	239c4 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   239ae:	f002 030f 	and.w	r3, r2, #15
   239b2:	009b      	lsls	r3, r3, #2
   239b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   239b8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   239bc:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   239c0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   239c4:	f384 8811 	msr	BASEPRI, r4
   239c8:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   239cc:	bd10      	pop	{r4, pc}
   239ce:	bf00      	nop
   239d0:	20005c3c 	.word	0x20005c3c

000239d4 <usbd_ep_abort>:
{
   239d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   239d6:	4601      	mov	r1, r0
	__asm__ volatile(
   239d8:	f04f 0320 	mov.w	r3, #32
   239dc:	f3ef 8511 	mrs	r5, BASEPRI
   239e0:	f383 8812 	msr	BASEPRI_MAX, r3
   239e4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   239e8:	f7ff fa98 	bl	22f1c <ep_state_access>
   239ec:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   239ee:	4608      	mov	r0, r1
   239f0:	f006 ff53 	bl	2a89a <ep2bit>
   239f4:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   239f6:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   239fa:	fa02 f200 	lsl.w	r2, r2, r0
   239fe:	482e      	ldr	r0, [pc, #184]	; (23ab8 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   23a00:	d118      	bne.n	23a34 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   23a02:	6803      	ldr	r3, [r0, #0]
   23a04:	ea32 0403 	bics.w	r4, r2, r3
   23a08:	d00a      	beq.n	23a20 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   23a0a:	4608      	mov	r0, r1
   23a0c:	f7ff ffb8 	bl	23980 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   23a10:	2303      	movs	r3, #3
   23a12:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   23a14:	f385 8811 	msr	BASEPRI, r5
   23a18:	f3bf 8f6f 	isb	sy
}
   23a1c:	b003      	add	sp, #12
   23a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   23a20:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   23a24:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   23a26:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   23a28:	4b24      	ldr	r3, [pc, #144]	; (23abc <usbd_ep_abort+0xe8>)
   23a2a:	6818      	ldr	r0, [r3, #0]
   23a2c:	ea20 0002 	bic.w	r0, r0, r2
   23a30:	6018      	str	r0, [r3, #0]
   23a32:	e7ed      	b.n	23a10 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   23a34:	070b      	lsls	r3, r1, #28
   23a36:	d415      	bmi.n	23a64 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   23a38:	2980      	cmp	r1, #128	; 0x80
   23a3a:	4b21      	ldr	r3, [pc, #132]	; (23ac0 <usbd_ep_abort+0xec>)
   23a3c:	d02f      	beq.n	23a9e <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   23a3e:	f001 040f 	and.w	r4, r1, #15
   23a42:	f204 34da 	addw	r4, r4, #986	; 0x3da
   23a46:	0064      	lsls	r4, r4, #1
   23a48:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   23a4c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   23a50:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   23a54:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   23a56:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   23a5a:	433c      	orrs	r4, r7
   23a5c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   23a60:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   23a64:	4f15      	ldr	r7, [pc, #84]	; (23abc <usbd_ep_abort+0xe8>)
   23a66:	6804      	ldr	r4, [r0, #0]
   23a68:	683b      	ldr	r3, [r7, #0]
   23a6a:	ea64 0c03 	orn	ip, r4, r3
   23a6e:	ea1c 0f02 	tst.w	ip, r2
   23a72:	d0cf      	beq.n	23a14 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   23a74:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   23a76:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   23a7a:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   23a7c:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   23a7e:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   23a80:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   23a82:	2303      	movs	r3, #3
   23a84:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   23a86:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   23a8a:	4b0e      	ldr	r3, [pc, #56]	; (23ac4 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   23a8c:	f88d 1006 	strb.w	r1, [sp, #6]
   23a90:	2206      	movs	r2, #6
            m_event_handler(&evt);
   23a92:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   23a94:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   23a98:	a801      	add	r0, sp, #4
   23a9a:	4798      	blx	r3
   23a9c:	e7ba      	b.n	23a14 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   23a9e:	f240 74b4 	movw	r4, #1972	; 0x7b4
   23aa2:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   23aa6:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   23aaa:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   23aae:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   23ab0:	f044 0404 	orr.w	r4, r4, #4
   23ab4:	e7d1      	b.n	23a5a <usbd_ep_abort+0x86>
   23ab6:	bf00      	nop
   23ab8:	20005bcc 	.word	0x20005bcc
   23abc:	20005c3c 	.word	0x20005c3c
   23ac0:	40027000 	.word	0x40027000
   23ac4:	20005d60 	.word	0x20005d60

00023ac8 <ev_setup_handler>:
{
   23ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   23aca:	4b17      	ldr	r3, [pc, #92]	; (23b28 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   23acc:	4c17      	ldr	r4, [pc, #92]	; (23b2c <ev_setup_handler+0x64>)
   23ace:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   23ad2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   23ad4:	4e16      	ldr	r6, [pc, #88]	; (23b30 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   23ad6:	43da      	mvns	r2, r3
   23ad8:	4b16      	ldr	r3, [pc, #88]	; (23b34 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   23ada:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   23adc:	681b      	ldr	r3, [r3, #0]
   23ade:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   23ae0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   23ae2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   23ae4:	f006 fed9 	bl	2a89a <ep2bit>
   23ae8:	2301      	movs	r3, #1
   23aea:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   23aec:	4213      	tst	r3, r2
   23aee:	d002      	beq.n	23af6 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   23af0:	4608      	mov	r0, r1
   23af2:	f7ff ff6f 	bl	239d4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   23af6:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   23afa:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   23afe:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   23b00:	f7ff fb2a 	bl	23158 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   23b04:	6823      	ldr	r3, [r4, #0]
   23b06:	f043 0301 	orr.w	r3, r3, #1
   23b0a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   23b0c:	2300      	movs	r3, #0
   23b0e:	f8ad 3005 	strh.w	r3, [sp, #5]
   23b12:	f88d 3007 	strb.w	r3, [sp, #7]
   23b16:	2305      	movs	r3, #5
   23b18:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   23b1c:	4b06      	ldr	r3, [pc, #24]	; (23b38 <ev_setup_handler+0x70>)
   23b1e:	a801      	add	r0, sp, #4
   23b20:	681b      	ldr	r3, [r3, #0]
   23b22:	4798      	blx	r3
}
   23b24:	b002      	add	sp, #8
   23b26:	bd70      	pop	{r4, r5, r6, pc}
   23b28:	40027000 	.word	0x40027000
   23b2c:	20005c3c 	.word	0x20005c3c
   23b30:	20006014 	.word	0x20006014
   23b34:	20005bcc 	.word	0x20005bcc
   23b38:	20005d60 	.word	0x20005d60

00023b3c <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   23b3c:	4b1b      	ldr	r3, [pc, #108]	; (23bac <nrfx_usbd_irq_handler+0x70>)
   23b3e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   23b42:	2300      	movs	r3, #0
{
   23b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   23b48:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   23b4a:	461d      	mov	r5, r3
    while (to_process)
   23b4c:	b970      	cbnz	r0, 23b6c <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   23b4e:	4f18      	ldr	r7, [pc, #96]	; (23bb0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   23b50:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   23b54:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   23b58:	f04f 0801 	mov.w	r8, #1
    while (active)
   23b5c:	b9bc      	cbnz	r4, 23b8e <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   23b5e:	f7ff fd61 	bl	23624 <usbd_dmareq_process>
    if (setup_active)
   23b62:	b306      	cbz	r6, 23ba6 <nrfx_usbd_irq_handler+0x6a>
}
   23b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   23b68:	f7ff bfae 	b.w	23ac8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   23b6c:	fa90 f2a0 	rbit	r2, r0
   23b70:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   23b74:	490f      	ldr	r1, [pc, #60]	; (23bb4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   23b76:	0096      	lsls	r6, r2, #2
   23b78:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   23b7a:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   23b7e:	680e      	ldr	r6, [r1, #0]
    if (ret)
   23b80:	b116      	cbz	r6, 23b88 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   23b82:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   23b84:	6809      	ldr	r1, [r1, #0]
   23b86:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   23b88:	ea20 0002 	bic.w	r0, r0, r2
   23b8c:	e7de      	b.n	23b4c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   23b8e:	fa94 f5a4 	rbit	r5, r4
   23b92:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   23b96:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   23b9a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   23b9e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   23ba0:	ea24 0405 	bic.w	r4, r4, r5
   23ba4:	e7da      	b.n	23b5c <nrfx_usbd_irq_handler+0x20>
}
   23ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23baa:	bf00      	nop
   23bac:	40027000 	.word	0x40027000
   23bb0:	0002dc8c 	.word	0x0002dc8c
   23bb4:	40027100 	.word	0x40027100

00023bb8 <usbd_ep_abort_all>:
{
   23bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   23bba:	4e11      	ldr	r6, [pc, #68]	; (23c00 <usbd_ep_abort_all+0x48>)
   23bbc:	4b11      	ldr	r3, [pc, #68]	; (23c04 <usbd_ep_abort_all+0x4c>)
   23bbe:	6834      	ldr	r4, [r6, #0]
   23bc0:	681b      	ldr	r3, [r3, #0]
   23bc2:	0c24      	lsrs	r4, r4, #16
   23bc4:	0424      	lsls	r4, r4, #16
   23bc6:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   23bc8:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   23bca:	b91c      	cbnz	r4, 23bd4 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   23bcc:	f240 13ff 	movw	r3, #511	; 0x1ff
   23bd0:	6033      	str	r3, [r6, #0]
}
   23bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   23bd4:	fa94 f5a4 	rbit	r5, r4
   23bd8:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   23bdc:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   23bde:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   23be0:	bfc6      	itte	gt
   23be2:	f1a5 0010 	subgt.w	r0, r5, #16
   23be6:	b2c0      	uxtbgt	r0, r0
   23be8:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   23bec:	0703      	lsls	r3, r0, #28
   23bee:	d401      	bmi.n	23bf4 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   23bf0:	f7ff fef0 	bl	239d4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   23bf4:	fa07 f505 	lsl.w	r5, r7, r5
   23bf8:	ea24 0405 	bic.w	r4, r4, r5
   23bfc:	e7e5      	b.n	23bca <usbd_ep_abort_all+0x12>
   23bfe:	bf00      	nop
   23c00:	20005c3c 	.word	0x20005c3c
   23c04:	20005bcc 	.word	0x20005bcc

00023c08 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23c08:	4b0c      	ldr	r3, [pc, #48]	; (23c3c <nrfx_usbd_stop+0x34>)
   23c0a:	2280      	movs	r2, #128	; 0x80
{
   23c0c:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   23c0e:	2027      	movs	r0, #39	; 0x27
   23c10:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   23c14:	f7e8 f896 	bl	bd44 <arch_irq_is_enabled>
   23c18:	b170      	cbz	r0, 23c38 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   23c1a:	4c09      	ldr	r4, [pc, #36]	; (23c40 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   23c1c:	f7ff ffcc 	bl	23bb8 <usbd_ep_abort_all>
   23c20:	2300      	movs	r3, #0
   23c22:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   23c26:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   23c28:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   23c2c:	f7e8 f876 	bl	bd1c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   23c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23c34:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   23c38:	bd10      	pop	{r4, pc}
   23c3a:	bf00      	nop
   23c3c:	e000e100 	.word	0xe000e100
   23c40:	40027000 	.word	0x40027000

00023c44 <nrfx_usbd_disable>:
{
   23c44:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   23c46:	f7ff ffdf 	bl	23c08 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   23c4a:	4b08      	ldr	r3, [pc, #32]	; (23c6c <nrfx_usbd_disable+0x28>)
   23c4c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   23c50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   23c54:	2200      	movs	r2, #0
   23c56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   23c5a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   23c5e:	f7ff f96b 	bl	22f38 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   23c62:	4b03      	ldr	r3, [pc, #12]	; (23c70 <nrfx_usbd_disable+0x2c>)
   23c64:	2201      	movs	r2, #1
   23c66:	701a      	strb	r2, [r3, #0]
}
   23c68:	bd08      	pop	{r3, pc}
   23c6a:	bf00      	nop
   23c6c:	40027000 	.word	0x40027000
   23c70:	20006013 	.word	0x20006013

00023c74 <nrfx_usbd_suspend>:
{
   23c74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23c76:	f04f 0320 	mov.w	r3, #32
   23c7a:	f3ef 8511 	mrs	r5, BASEPRI
   23c7e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c82:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   23c86:	4b11      	ldr	r3, [pc, #68]	; (23ccc <nrfx_usbd_suspend+0x58>)
   23c88:	781b      	ldrb	r3, [r3, #0]
   23c8a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   23c8e:	b933      	cbnz	r3, 23c9e <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   23c90:	2400      	movs	r4, #0
	__asm__ volatile(
   23c92:	f385 8811 	msr	BASEPRI, r5
   23c96:	f3bf 8f6f 	isb	sy
}
   23c9a:	4620      	mov	r0, r4
   23c9c:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   23c9e:	f7ff ff8b 	bl	23bb8 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   23ca2:	4b0b      	ldr	r3, [pc, #44]	; (23cd0 <nrfx_usbd_suspend+0x5c>)
   23ca4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   23ca8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   23cac:	d1f0      	bne.n	23c90 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   23cae:	2101      	movs	r1, #1
   23cb0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   23cb4:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   23cb8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   23cbc:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   23cbe:	bf42      	ittt	mi
   23cc0:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   23cc4:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   23cc8:	4614      	movmi	r4, r2
}
   23cca:	e7e2      	b.n	23c92 <nrfx_usbd_suspend+0x1e>
   23ccc:	20006011 	.word	0x20006011
   23cd0:	40027000 	.word	0x40027000

00023cd4 <nrfx_usbd_ep_disable>:
{
   23cd4:	b510      	push	{r4, lr}
   23cd6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   23cd8:	f7ff fe7c 	bl	239d4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   23cdc:	4a10      	ldr	r2, [pc, #64]	; (23d20 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   23cde:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   23ce2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   23ce6:	f04f 0301 	mov.w	r3, #1
   23cea:	bf14      	ite	ne
   23cec:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   23cf0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   23cf4:	fa03 f300 	lsl.w	r3, r3, r0
   23cf8:	ea6f 0303 	mvn.w	r3, r3
   23cfc:	bf15      	itete	ne
   23cfe:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   23d00:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   23d02:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   23d06:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   23d0a:	bf14      	ite	ne
   23d0c:	4b05      	ldrne	r3, [pc, #20]	; (23d24 <nrfx_usbd_ep_disable+0x50>)
   23d0e:	4b06      	ldreq	r3, [pc, #24]	; (23d28 <nrfx_usbd_ep_disable+0x54>)
   23d10:	5c1a      	ldrb	r2, [r3, r0]
   23d12:	2301      	movs	r3, #1
   23d14:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   23d16:	4a02      	ldr	r2, [pc, #8]	; (23d20 <nrfx_usbd_ep_disable+0x4c>)
   23d18:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   23d1c:	bd10      	pop	{r4, pc}
   23d1e:	bf00      	nop
   23d20:	40027000 	.word	0x40027000
   23d24:	00031ea0 	.word	0x00031ea0
   23d28:	00031ea9 	.word	0x00031ea9

00023d2c <nrfx_usbd_ep_enable>:
{
   23d2c:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   23d2e:	b243      	sxtb	r3, r0
   23d30:	2b00      	cmp	r3, #0
   23d32:	4b23      	ldr	r3, [pc, #140]	; (23dc0 <nrfx_usbd_ep_enable+0x94>)
   23d34:	4a23      	ldr	r2, [pc, #140]	; (23dc4 <nrfx_usbd_ep_enable+0x98>)
   23d36:	bfa8      	it	ge
   23d38:	461a      	movge	r2, r3
   23d3a:	f000 030f 	and.w	r3, r0, #15
   23d3e:	f04f 0401 	mov.w	r4, #1
   23d42:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   23d44:	4a20      	ldr	r2, [pc, #128]	; (23dc8 <nrfx_usbd_ep_enable+0x9c>)
   23d46:	fa04 f101 	lsl.w	r1, r4, r1
{
   23d4a:	4605      	mov	r5, r0
   23d4c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   23d50:	da0c      	bge.n	23d6c <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   23d52:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   23d56:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   23d58:	07c8      	lsls	r0, r1, #31
   23d5a:	d406      	bmi.n	23d6a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   23d5c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23d60:	fa04 f303 	lsl.w	r3, r4, r3
   23d64:	4303      	orrs	r3, r0
   23d66:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   23d6a:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   23d6c:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   23d70:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   23d72:	07c9      	lsls	r1, r1, #31
   23d74:	d4f9      	bmi.n	23d6a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   23d76:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   23d7a:	fa04 f103 	lsl.w	r1, r4, r3
   23d7e:	4331      	orrs	r1, r6
   23d80:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   23d84:	2b00      	cmp	r3, #0
   23d86:	d0f0      	beq.n	23d6a <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   23d88:	0703      	lsls	r3, r0, #28
   23d8a:	d4ee      	bmi.n	23d6a <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   23d8c:	f04f 0320 	mov.w	r3, #32
   23d90:	f3ef 8611 	mrs	r6, BASEPRI
   23d94:	f383 8812 	msr	BASEPRI_MAX, r3
   23d98:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   23d9c:	f7ff fdf0 	bl	23980 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   23da0:	4628      	mov	r0, r5
   23da2:	f006 fd7a 	bl	2a89a <ep2bit>
   23da6:	4a09      	ldr	r2, [pc, #36]	; (23dcc <nrfx_usbd_ep_enable+0xa0>)
   23da8:	6813      	ldr	r3, [r2, #0]
   23daa:	fa04 f000 	lsl.w	r0, r4, r0
   23dae:	ea23 0000 	bic.w	r0, r3, r0
   23db2:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   23db4:	f386 8811 	msr	BASEPRI, r6
   23db8:	f3bf 8f6f 	isb	sy
}
   23dbc:	e7d5      	b.n	23d6a <nrfx_usbd_ep_enable+0x3e>
   23dbe:	bf00      	nop
   23dc0:	00031ea9 	.word	0x00031ea9
   23dc4:	00031ea0 	.word	0x00031ea0
   23dc8:	40027000 	.word	0x40027000
   23dcc:	20005bcc 	.word	0x20005bcc

00023dd0 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   23dd0:	0603      	lsls	r3, r0, #24
{
   23dd2:	b510      	push	{r4, lr}
   23dd4:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   23dd6:	d405      	bmi.n	23de4 <nrfx_usbd_ep_stall_clear+0x14>
   23dd8:	f7ff fd40 	bl	2385c <nrfx_usbd_ep_stall_check>
   23ddc:	b110      	cbz	r0, 23de4 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   23dde:	4620      	mov	r0, r4
   23de0:	f7ff fdce 	bl	23980 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   23de4:	4b01      	ldr	r3, [pc, #4]	; (23dec <nrfx_usbd_ep_stall_clear+0x1c>)
   23de6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   23dea:	bd10      	pop	{r4, pc}
   23dec:	40027000 	.word	0x40027000

00023df0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   23df0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   23df2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23df6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   23df8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   23dfa:	6002      	str	r2, [r0, #0]
}
   23dfc:	4802      	ldr	r0, [pc, #8]	; (23e08 <nrf_gpio_pin_port_decode+0x18>)
   23dfe:	bf18      	it	ne
   23e00:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   23e04:	4770      	bx	lr
   23e06:	bf00      	nop
   23e08:	50000300 	.word	0x50000300

00023e0c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   23e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23e0e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   23e10:	f006 fdb0 	bl	2a974 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   23e14:	4608      	mov	r0, r1
   23e16:	f006 fdad 	bl	2a974 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e1a:	a801      	add	r0, sp, #4
   23e1c:	9601      	str	r6, [sp, #4]
   23e1e:	f7ff ffe7 	bl	23df0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23e22:	9b01      	ldr	r3, [sp, #4]
   23e24:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   23e28:	460c      	mov	r4, r1
   23e2a:	f240 610d 	movw	r1, #1549	; 0x60d
   23e2e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e32:	a801      	add	r0, sp, #4
   23e34:	9401      	str	r4, [sp, #4]
   23e36:	f7ff ffdb 	bl	23df0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23e3a:	9b01      	ldr	r3, [sp, #4]
   23e3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   23e40:	2509      	movs	r5, #9
   23e42:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   23e46:	2004      	movs	r0, #4
   23e48:	f006 fb93 	bl	2a572 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23e4c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e4e:	a801      	add	r0, sp, #4
   23e50:	9401      	str	r4, [sp, #4]
   23e52:	f7ff ffcd 	bl	23df0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23e56:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   23e58:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23e5c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   23e5e:	07db      	lsls	r3, r3, #31
   23e60:	d415      	bmi.n	23e8e <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e62:	a801      	add	r0, sp, #4
   23e64:	9601      	str	r6, [sp, #4]
   23e66:	f7ff ffc3 	bl	23df0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23e6a:	9b01      	ldr	r3, [sp, #4]
   23e6c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   23e70:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   23e74:	2004      	movs	r0, #4
   23e76:	f006 fb7c 	bl	2a572 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   23e7a:	4630      	mov	r0, r6
   23e7c:	f006 fd7a 	bl	2a974 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   23e80:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   23e82:	2004      	movs	r0, #4
   23e84:	f006 fb75 	bl	2a572 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   23e88:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   23e8c:	d1df      	bne.n	23e4e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e8e:	a801      	add	r0, sp, #4
   23e90:	9401      	str	r4, [sp, #4]
   23e92:	f7ff ffad 	bl	23df0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23e96:	9a01      	ldr	r2, [sp, #4]
   23e98:	2301      	movs	r3, #1
   23e9a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   23e9c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   23ea0:	2004      	movs	r0, #4
   23ea2:	f006 fb66 	bl	2a572 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   23ea6:	4620      	mov	r0, r4
   23ea8:	f006 fd64 	bl	2a974 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   23eac:	2004      	movs	r0, #4
   23eae:	f006 fb60 	bl	2a572 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23eb2:	a801      	add	r0, sp, #4
   23eb4:	9401      	str	r4, [sp, #4]
   23eb6:	f7ff ff9b 	bl	23df0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23eba:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   23ebc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   23ec0:	4803      	ldr	r0, [pc, #12]	; (23ed0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23ec2:	40d3      	lsrs	r3, r2
   23ec4:	f003 0301 	and.w	r3, r3, #1
   23ec8:	1ac0      	subs	r0, r0, r3
   23eca:	b003      	add	sp, #12
   23ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23ece:	bf00      	nop
   23ed0:	0bad0001 	.word	0x0bad0001

00023ed4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   23ed4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   23ed6:	4c11      	ldr	r4, [pc, #68]	; (23f1c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   23ed8:	4a11      	ldr	r2, [pc, #68]	; (23f20 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   23eda:	4912      	ldr	r1, [pc, #72]	; (23f24 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   23edc:	2303      	movs	r3, #3
   23ede:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   23ee0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   23ee2:	4b11      	ldr	r3, [pc, #68]	; (23f28 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   23ee4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   23ee6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   23ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23eec:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   23eee:	2300      	movs	r3, #0
   23ef0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   23ef2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   23ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   23ef6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   23ef8:	4a0c      	ldr	r2, [pc, #48]	; (23f2c <_DoInit+0x58>)
   23efa:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   23efc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   23efe:	2210      	movs	r2, #16
   23f00:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   23f02:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   23f04:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   23f06:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   23f08:	f004 fbd2 	bl	286b0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   23f0c:	4908      	ldr	r1, [pc, #32]	; (23f30 <_DoInit+0x5c>)
   23f0e:	4620      	mov	r0, r4
   23f10:	f004 fbce 	bl	286b0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   23f14:	2320      	movs	r3, #32
   23f16:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   23f18:	bd10      	pop	{r4, pc}
   23f1a:	bf00      	nop
   23f1c:	20005da4 	.word	0x20005da4
   23f20:	00031eb2 	.word	0x00031eb2
   23f24:	00031ebb 	.word	0x00031ebb
   23f28:	20006025 	.word	0x20006025
   23f2c:	20006015 	.word	0x20006015
   23f30:	00031ebf 	.word	0x00031ebf

00023f34 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   23f38:	4f23      	ldr	r7, [pc, #140]	; (23fc8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   23f3a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23f3e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   23f40:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23f44:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   23f46:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   23f48:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   23f4a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23f4c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   23f4e:	d834      	bhi.n	23fba <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   23f50:	f8d2 a020 	ldr.w	sl, [r2, #32]
   23f54:	ebaa 0905 	sub.w	r9, sl, r5
   23f58:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   23f5c:	4294      	cmp	r4, r2
   23f5e:	d811      	bhi.n	23f84 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23f60:	f04f 0918 	mov.w	r9, #24
   23f64:	fb06 9309 	mla	r3, r6, r9, r9
   23f68:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   23f6a:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23f6c:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   23f6e:	4641      	mov	r1, r8
   23f70:	4428      	add	r0, r5
   23f72:	f004 fc1d 	bl	287b0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   23f76:	fb09 7606 	mla	r6, r9, r6, r7
   23f7a:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   23f7c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   23f7e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   23f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   23f84:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   23f86:	429c      	cmp	r4, r3
   23f88:	d81b      	bhi.n	23fc2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23f8a:	fb00 bb0b 	mla	fp, r0, fp, fp
   23f8e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   23f90:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23f92:	f8db 0004 	ldr.w	r0, [fp, #4]
   23f96:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   23f98:	4428      	add	r0, r5
   23f9a:	f004 fc09 	bl	287b0 <memcpy>
      if (NumBytes) {
   23f9e:	ebb4 040a 	subs.w	r4, r4, sl
   23fa2:	d006      	beq.n	23fb2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   23fa4:	f8db 0004 	ldr.w	r0, [fp, #4]
   23fa8:	4622      	mov	r2, r4
   23faa:	eb08 0109 	add.w	r1, r8, r9
   23fae:	f004 fbff 	bl	287b0 <memcpy>
      pRing->WrOff = NumBytes;
   23fb2:	2018      	movs	r0, #24
   23fb4:	fb00 7606 	mla	r6, r0, r6, r7
   23fb8:	e7e0      	b.n	23f7c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   23fba:	3b01      	subs	r3, #1
   23fbc:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   23fbe:	42a3      	cmp	r3, r4
   23fc0:	d2ce      	bcs.n	23f60 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   23fc2:	2000      	movs	r0, #0
   23fc4:	e7dc      	b.n	23f80 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   23fc6:	bf00      	nop
   23fc8:	20005da4 	.word	0x20005da4

00023fcc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   23fcc:	4b03      	ldr	r3, [pc, #12]	; (23fdc <SEGGER_RTT_HasDataUp+0x10>)
   23fce:	2218      	movs	r2, #24
   23fd0:	fb02 3300 	mla	r3, r2, r0, r3
   23fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   23fd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   23fd8:	1a80      	subs	r0, r0, r2
   23fda:	4770      	bx	lr
   23fdc:	20005da4 	.word	0x20005da4

00023fe0 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   23fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   23fe4:	f8df a048 	ldr.w	sl, [pc, #72]	; 24030 <device_visitor+0x50>
   23fe8:	4d12      	ldr	r5, [pc, #72]	; (24034 <device_visitor+0x54>)
   23fea:	469b      	mov	fp, r3
   23fec:	eba5 050a 	sub.w	r5, r5, sl
   23ff0:	4b11      	ldr	r3, [pc, #68]	; (24038 <device_visitor+0x58>)
   23ff2:	10ed      	asrs	r5, r5, #3
   23ff4:	4680      	mov	r8, r0
   23ff6:	460f      	mov	r7, r1
   23ff8:	4691      	mov	r9, r2
   23ffa:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   23ffc:	2600      	movs	r6, #0
   23ffe:	42be      	cmp	r6, r7
   24000:	d102      	bne.n	24008 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   24002:	4630      	mov	r0, r6
}
   24004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   24008:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   2400c:	2c00      	cmp	r4, #0
   2400e:	dd0d      	ble.n	2402c <device_visitor+0x4c>
   24010:	42a5      	cmp	r5, r4
   24012:	d30b      	bcc.n	2402c <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
   24014:	3c01      	subs	r4, #1
   24016:	b224      	sxth	r4, r4
   24018:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2401c:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
   24020:	4659      	mov	r1, fp
   24022:	47c8      	blx	r9
		if (rc < 0) {
   24024:	2800      	cmp	r0, #0
   24026:	dbed      	blt.n	24004 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
   24028:	3601      	adds	r6, #1
   2402a:	e7e8      	b.n	23ffe <device_visitor+0x1e>
	const struct device *dev = NULL;
   2402c:	2000      	movs	r0, #0
   2402e:	e7f7      	b.n	24020 <device_visitor+0x40>
   24030:	0002b5e8 	.word	0x0002b5e8
   24034:	0002b690 	.word	0x0002b690
   24038:	aaaaaaab 	.word	0xaaaaaaab

0002403c <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2403c:	4b0e      	ldr	r3, [pc, #56]	; (24078 <z_sys_init_run_level+0x3c>)
{
   2403e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24040:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24044:	3001      	adds	r0, #1
   24046:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2404a:	42a6      	cmp	r6, r4
   2404c:	d800      	bhi.n	24050 <z_sys_init_run_level+0x14>
}
   2404e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24050:	e9d4 3500 	ldrd	r3, r5, [r4]
   24054:	4628      	mov	r0, r5
   24056:	4798      	blx	r3
		if (dev != NULL) {
   24058:	b165      	cbz	r5, 24074 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   2405a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   2405c:	b130      	cbz	r0, 2406c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2405e:	2800      	cmp	r0, #0
   24060:	bfb8      	it	lt
   24062:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   24064:	28ff      	cmp	r0, #255	; 0xff
   24066:	bfa8      	it	ge
   24068:	20ff      	movge	r0, #255	; 0xff
   2406a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2406c:	785a      	ldrb	r2, [r3, #1]
   2406e:	f042 0201 	orr.w	r2, r2, #1
   24072:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24074:	3408      	adds	r4, #8
   24076:	e7e8      	b.n	2404a <z_sys_init_run_level+0xe>
   24078:	0002dcf0 	.word	0x0002dcf0

0002407c <z_device_get_all_static>:
	*devices = __device_start;
   2407c:	4a03      	ldr	r2, [pc, #12]	; (2408c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   2407e:	4b04      	ldr	r3, [pc, #16]	; (24090 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   24080:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   24082:	1a9b      	subs	r3, r3, r2
}
   24084:	4803      	ldr	r0, [pc, #12]	; (24094 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   24086:	10db      	asrs	r3, r3, #3
}
   24088:	4358      	muls	r0, r3
   2408a:	4770      	bx	lr
   2408c:	0002b5e8 	.word	0x0002b5e8
   24090:	0002b690 	.word	0x0002b690
   24094:	aaaaaaab 	.word	0xaaaaaaab

00024098 <z_impl_device_get_binding>:
{
   24098:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   2409a:	4605      	mov	r5, r0
   2409c:	b910      	cbnz	r0, 240a4 <z_impl_device_get_binding+0xc>
		return NULL;
   2409e:	2400      	movs	r4, #0
}
   240a0:	4620      	mov	r0, r4
   240a2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   240a4:	7803      	ldrb	r3, [r0, #0]
   240a6:	2b00      	cmp	r3, #0
   240a8:	d0f9      	beq.n	2409e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   240aa:	4c0e      	ldr	r4, [pc, #56]	; (240e4 <z_impl_device_get_binding+0x4c>)
   240ac:	4e0e      	ldr	r6, [pc, #56]	; (240e8 <z_impl_device_get_binding+0x50>)
   240ae:	42b4      	cmp	r4, r6
   240b0:	d108      	bne.n	240c4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   240b2:	4c0c      	ldr	r4, [pc, #48]	; (240e4 <z_impl_device_get_binding+0x4c>)
   240b4:	42b4      	cmp	r4, r6
   240b6:	d0f2      	beq.n	2409e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   240b8:	4620      	mov	r0, r4
   240ba:	f006 fc70 	bl	2a99e <z_device_is_ready>
   240be:	b950      	cbnz	r0, 240d6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   240c0:	3418      	adds	r4, #24
   240c2:	e7f7      	b.n	240b4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   240c4:	4620      	mov	r0, r4
   240c6:	f006 fc6a 	bl	2a99e <z_device_is_ready>
   240ca:	b110      	cbz	r0, 240d2 <z_impl_device_get_binding+0x3a>
   240cc:	6823      	ldr	r3, [r4, #0]
   240ce:	42ab      	cmp	r3, r5
   240d0:	d0e6      	beq.n	240a0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   240d2:	3418      	adds	r4, #24
   240d4:	e7eb      	b.n	240ae <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   240d6:	6821      	ldr	r1, [r4, #0]
   240d8:	4628      	mov	r0, r5
   240da:	f004 fb23 	bl	28724 <strcmp>
   240de:	2800      	cmp	r0, #0
   240e0:	d1ee      	bne.n	240c0 <z_impl_device_get_binding+0x28>
   240e2:	e7dd      	b.n	240a0 <z_impl_device_get_binding+0x8>
   240e4:	0002b5e8 	.word	0x0002b5e8
   240e8:	0002b690 	.word	0x0002b690

000240ec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   240ec:	4b01      	ldr	r3, [pc, #4]	; (240f4 <z_impl_z_errno+0x8>)
   240ee:	6898      	ldr	r0, [r3, #8]
}
   240f0:	3098      	adds	r0, #152	; 0x98
   240f2:	4770      	bx	lr
   240f4:	20005e4c 	.word	0x20005e4c

000240f8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   240f8:	b510      	push	{r4, lr}
   240fa:	4604      	mov	r4, r0
   240fc:	b088      	sub	sp, #32
	z_impl_log_panic();
   240fe:	f7e3 fa3d 	bl	757c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   24102:	480a      	ldr	r0, [pc, #40]	; (2412c <k_sys_fatal_error_handler+0x34>)
   24104:	6803      	ldr	r3, [r0, #0]
   24106:	075b      	lsls	r3, r3, #29
   24108:	d00c      	beq.n	24124 <k_sys_fatal_error_handler+0x2c>
   2410a:	4b09      	ldr	r3, [pc, #36]	; (24130 <k_sys_fatal_error_handler+0x38>)
   2410c:	9306      	str	r3, [sp, #24]
   2410e:	4b09      	ldr	r3, [pc, #36]	; (24134 <k_sys_fatal_error_handler+0x3c>)
   24110:	9307      	str	r3, [sp, #28]
   24112:	2303      	movs	r3, #3
   24114:	9301      	str	r3, [sp, #4]
   24116:	9305      	str	r3, [sp, #20]
   24118:	2300      	movs	r3, #0
   2411a:	aa05      	add	r2, sp, #20
   2411c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24120:	f002 fce2 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   24124:	4620      	mov	r0, r4
   24126:	f006 fc6b 	bl	2aa00 <arch_system_halt>
   2412a:	bf00      	nop
   2412c:	200009d0 	.word	0x200009d0
   24130:	00031ec6 	.word	0x00031ec6
   24134:	00031fac 	.word	0x00031fac

00024138 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2413c:	4605      	mov	r5, r0
   2413e:	b08e      	sub	sp, #56	; 0x38
   24140:	460e      	mov	r6, r1
	__asm__ volatile(
   24142:	f04f 0320 	mov.w	r3, #32
   24146:	f3ef 8811 	mrs	r8, BASEPRI
   2414a:	f383 8812 	msr	BASEPRI_MAX, r3
   2414e:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24152:	4f2e      	ldr	r7, [pc, #184]	; (2420c <z_fatal_error+0xd4>)
	return z_impl_z_current_get();
   24154:	f001 f918 	bl	25388 <z_impl_z_current_get>
   24158:	683b      	ldr	r3, [r7, #0]
   2415a:	0759      	lsls	r1, r3, #29
   2415c:	4604      	mov	r4, r0
   2415e:	d052      	beq.n	24206 <z_fatal_error+0xce>
	switch (reason) {
   24160:	2d04      	cmp	r5, #4
   24162:	bf96      	itet	ls
   24164:	4b2a      	ldrls	r3, [pc, #168]	; (24210 <z_fatal_error+0xd8>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24166:	4a2b      	ldrhi	r2, [pc, #172]	; (24214 <z_fatal_error+0xdc>)
	return 0;
   24168:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2416c:	4927      	ldr	r1, [pc, #156]	; (2420c <z_fatal_error+0xd4>)
   2416e:	9503      	str	r5, [sp, #12]
   24170:	2300      	movs	r3, #0
   24172:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24176:	4a28      	ldr	r2, [pc, #160]	; (24218 <z_fatal_error+0xe0>)
   24178:	9202      	str	r2, [sp, #8]
   2417a:	4a28      	ldr	r2, [pc, #160]	; (2421c <z_fatal_error+0xe4>)
   2417c:	4618      	mov	r0, r3
   2417e:	e9cd 3200 	strd	r3, r2, [sp]
   24182:	2201      	movs	r2, #1
   24184:	f006 fc2d 	bl	2a9e2 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24188:	b1a6      	cbz	r6, 241b4 <z_fatal_error+0x7c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2418a:	69f3      	ldr	r3, [r6, #28]
   2418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24190:	b183      	cbz	r3, 241b4 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
   24192:	683b      	ldr	r3, [r7, #0]
   24194:	075a      	lsls	r2, r3, #29
   24196:	d01f      	beq.n	241d8 <z_fatal_error+0xa0>
   24198:	4b21      	ldr	r3, [pc, #132]	; (24220 <z_fatal_error+0xe8>)
   2419a:	930c      	str	r3, [sp, #48]	; 0x30
   2419c:	4b1e      	ldr	r3, [pc, #120]	; (24218 <z_fatal_error+0xe0>)
   2419e:	930d      	str	r3, [sp, #52]	; 0x34
   241a0:	2303      	movs	r3, #3
   241a2:	9307      	str	r3, [sp, #28]
   241a4:	930b      	str	r3, [sp, #44]	; 0x2c
   241a6:	4819      	ldr	r0, [pc, #100]	; (2420c <z_fatal_error+0xd4>)
   241a8:	2300      	movs	r3, #0
   241aa:	aa0b      	add	r2, sp, #44	; 0x2c
   241ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   241b0:	f002 fc9a 	bl	26ae8 <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   241b4:	683b      	ldr	r3, [r7, #0]
   241b6:	075b      	lsls	r3, r3, #29
   241b8:	d00e      	beq.n	241d8 <z_fatal_error+0xa0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   241ba:	b9dc      	cbnz	r4, 241f4 <z_fatal_error+0xbc>
		thread_name = "unknown";
   241bc:	4819      	ldr	r0, [pc, #100]	; (24224 <z_fatal_error+0xec>)
	LOG_ERR("Current thread: %p (%s)", thread,
   241be:	4b16      	ldr	r3, [pc, #88]	; (24218 <z_fatal_error+0xe0>)
   241c0:	9302      	str	r3, [sp, #8]
   241c2:	4b19      	ldr	r3, [pc, #100]	; (24228 <z_fatal_error+0xf0>)
   241c4:	9301      	str	r3, [sp, #4]
   241c6:	2300      	movs	r3, #0
   241c8:	e9cd 4003 	strd	r4, r0, [sp, #12]
   241cc:	490f      	ldr	r1, [pc, #60]	; (2420c <z_fatal_error+0xd4>)
   241ce:	9300      	str	r3, [sp, #0]
   241d0:	2201      	movs	r2, #1
   241d2:	4618      	mov	r0, r3
   241d4:	f006 fc05 	bl	2a9e2 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   241d8:	4631      	mov	r1, r6
   241da:	4628      	mov	r0, r5
   241dc:	f7ff ff8c 	bl	240f8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   241e0:	f388 8811 	msr	BASEPRI, r8
   241e4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   241e8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   241ea:	b00e      	add	sp, #56	; 0x38
   241ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   241f0:	f7e8 babe 	b.w	c770 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   241f4:	4620      	mov	r0, r4
   241f6:	f006 fca2 	bl	2ab3e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   241fa:	2800      	cmp	r0, #0
   241fc:	d0de      	beq.n	241bc <z_fatal_error+0x84>
   241fe:	7803      	ldrb	r3, [r0, #0]
   24200:	2b00      	cmp	r3, #0
   24202:	d0db      	beq.n	241bc <z_fatal_error+0x84>
   24204:	e7db      	b.n	241be <z_fatal_error+0x86>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24206:	2e00      	cmp	r6, #0
   24208:	d1bf      	bne.n	2418a <z_fatal_error+0x52>
   2420a:	e7e5      	b.n	241d8 <z_fatal_error+0xa0>
   2420c:	200009d0 	.word	0x200009d0
   24210:	0002dd08 	.word	0x0002dd08
   24214:	00031ed9 	.word	0x00031ed9
   24218:	00031f9e 	.word	0x00031f9e
   2421c:	00031ee7 	.word	0x00031ee7
   24220:	00031f13 	.word	0x00031f13
   24224:	00031bff 	.word	0x00031bff
   24228:	00031f38 	.word	0x00031f38

0002422c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   2422c:	b570      	push	{r4, r5, r6, lr}
   2422e:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   24230:	ae06      	add	r6, sp, #24
{
   24232:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
   24234:	4603      	mov	r3, r0
   24236:	4a13      	ldr	r2, [pc, #76]	; (24284 <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
   24238:	4d13      	ldr	r5, [pc, #76]	; (24288 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
   2423a:	2108      	movs	r1, #8
   2423c:	4630      	mov	r0, r6
   2423e:	f001 fc6e 	bl	25b1e <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
   24242:	23b8      	movs	r3, #184	; 0xb8
   24244:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   24248:	2201      	movs	r2, #1
   2424a:	230f      	movs	r3, #15
   2424c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   24250:	2300      	movs	r3, #0
   24252:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24256:	4b0d      	ldr	r3, [pc, #52]	; (2428c <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
   24258:	490d      	ldr	r1, [pc, #52]	; (24290 <init_idle_thread+0x64>)
   2425a:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2425c:	2218      	movs	r2, #24
   2425e:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
   24262:	f44f 70b0 	mov.w	r0, #352	; 0x160
   24266:	9300      	str	r3, [sp, #0]
   24268:	fb00 1104 	mla	r1, r0, r4, r1
   2426c:	4b09      	ldr	r3, [pc, #36]	; (24294 <init_idle_thread+0x68>)
   2426e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   24272:	4628      	mov	r0, r5
   24274:	f000 f98e 	bl	24594 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24278:	7b6b      	ldrb	r3, [r5, #13]
   2427a:	f023 0304 	bic.w	r3, r3, #4
   2427e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   24280:	b008      	add	sp, #32
   24282:	bd70      	pop	{r4, r5, r6, pc}
   24284:	00031fc6 	.word	0x00031fc6
   24288:	20003700 	.word	0x20003700
   2428c:	20005e4c 	.word	0x20005e4c
   24290:	20009260 	.word	0x20009260
   24294:	00024775 	.word	0x00024775

00024298 <bg_thread_main>:
{
   24298:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2429a:	4b0a      	ldr	r3, [pc, #40]	; (242c4 <bg_thread_main+0x2c>)
   2429c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2429e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   242a0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   242a2:	f7ff fecb 	bl	2403c <z_sys_init_run_level>
	boot_banner();
   242a6:	f007 f947 	bl	2b538 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   242aa:	2003      	movs	r0, #3
   242ac:	f7ff fec6 	bl	2403c <z_sys_init_run_level>
	z_init_static_threads();
   242b0:	f000 fa04 	bl	246bc <z_init_static_threads>
	main();
   242b4:	f007 f93e 	bl	2b534 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   242b8:	4a03      	ldr	r2, [pc, #12]	; (242c8 <bg_thread_main+0x30>)
   242ba:	7b13      	ldrb	r3, [r2, #12]
   242bc:	f023 0301 	bic.w	r3, r3, #1
   242c0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   242c2:	bd08      	pop	{r3, pc}
   242c4:	20006425 	.word	0x20006425
   242c8:	200037b8 	.word	0x200037b8

000242cc <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   242cc:	4802      	ldr	r0, [pc, #8]	; (242d8 <z_bss_zero+0xc>)
   242ce:	4a03      	ldr	r2, [pc, #12]	; (242dc <z_bss_zero+0x10>)
   242d0:	2100      	movs	r1, #0
   242d2:	1a12      	subs	r2, r2, r0
   242d4:	f004 ba77 	b.w	287c6 <memset>
   242d8:	20000de8 	.word	0x20000de8
   242dc:	20006428 	.word	0x20006428

000242e0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   242e0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   242e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 243ac <z_cstart+0xcc>
   242e6:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   242e8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   242ec:	4d30      	ldr	r5, [pc, #192]	; (243b0 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   242ee:	4e31      	ldr	r6, [pc, #196]	; (243b4 <z_cstart+0xd4>)
   242f0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   242f2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 243b8 <z_cstart+0xd8>
   242f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   242fa:	2400      	movs	r4, #0
   242fc:	616b      	str	r3, [r5, #20]
   242fe:	23e0      	movs	r3, #224	; 0xe0
   24300:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24304:	77ec      	strb	r4, [r5, #31]
   24306:	762c      	strb	r4, [r5, #24]
   24308:	766c      	strb	r4, [r5, #25]
   2430a:	76ac      	strb	r4, [r5, #26]
   2430c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24310:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   24312:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24316:	626b      	str	r3, [r5, #36]	; 0x24
   24318:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2431c:	f7e8 f9ec 	bl	c6f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24320:	f7e7 fc4e 	bl	bbc0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24328:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2432a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2432c:	f7e8 fb04 	bl	c938 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24330:	f7e8 fa30 	bl	c794 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   24334:	f7e3 f80e 	bl	7354 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24338:	f240 1301 	movw	r3, #257	; 0x101
   2433c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   24340:	ab06      	add	r3, sp, #24
   24342:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   24344:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
   24348:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2434a:	f006 fb27 	bl	2a99c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2434e:	4620      	mov	r0, r4
   24350:	f7ff fe74 	bl	2403c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   24354:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   24356:	4d19      	ldr	r5, [pc, #100]	; (243bc <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   24358:	f7ff fe70 	bl	2403c <z_sys_init_run_level>
	z_sched_init();
   2435c:	f000 ff66 	bl	2522c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24360:	4b17      	ldr	r3, [pc, #92]	; (243c0 <z_cstart+0xe0>)
   24362:	9305      	str	r3, [sp, #20]
   24364:	2301      	movs	r3, #1
   24366:	4917      	ldr	r1, [pc, #92]	; (243c4 <z_cstart+0xe4>)
   24368:	9400      	str	r4, [sp, #0]
   2436a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2436e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24372:	464b      	mov	r3, r9
   24374:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24378:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   2437a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2437c:	f000 f90a 	bl	24594 <z_setup_new_thread>
   24380:	7b6a      	ldrb	r2, [r5, #13]
   24382:	4607      	mov	r7, r0
   24384:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   24388:	4628      	mov	r0, r5
   2438a:	736a      	strb	r2, [r5, #13]
   2438c:	f006 fe1d 	bl	2afca <z_ready_thread>
		init_idle_thread(i);
   24390:	4620      	mov	r0, r4
   24392:	f7ff ff4b 	bl	2422c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   24396:	4b0c      	ldr	r3, [pc, #48]	; (243c8 <z_cstart+0xe8>)
   24398:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2439a:	464a      	mov	r2, r9
   2439c:	4639      	mov	r1, r7
   2439e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   243a0:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   243a2:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   243a6:	f7e7 fdb5 	bl	bf14 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   243aa:	bf00      	nop
   243ac:	20009be0 	.word	0x20009be0
   243b0:	e000ed00 	.word	0xe000ed00
   243b4:	20005e4c 	.word	0x20005e4c
   243b8:	00024299 	.word	0x00024299
   243bc:	200037b8 	.word	0x200037b8
   243c0:	00031fd0 	.word	0x00031fd0
   243c4:	20008e40 	.word	0x20008e40
   243c8:	20003700 	.word	0x20003700

000243cc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   243cc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   243ce:	4c06      	ldr	r4, [pc, #24]	; (243e8 <statics_init+0x1c>)
   243d0:	4d06      	ldr	r5, [pc, #24]	; (243ec <statics_init+0x20>)
   243d2:	42ac      	cmp	r4, r5
   243d4:	d301      	bcc.n	243da <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   243d6:	2000      	movs	r0, #0
   243d8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   243da:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   243de:	4620      	mov	r0, r4
   243e0:	f006 fb17 	bl	2aa12 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   243e4:	3414      	adds	r4, #20
   243e6:	e7f4      	b.n	243d2 <statics_init+0x6>
   243e8:	20000b00 	.word	0x20000b00
   243ec:	20000b00 	.word	0x20000b00

000243f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   243f0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   243f2:	4b0e      	ldr	r3, [pc, #56]	; (2442c <init_mem_slab_module+0x3c>)
   243f4:	4c0e      	ldr	r4, [pc, #56]	; (24430 <init_mem_slab_module+0x40>)
   243f6:	42a3      	cmp	r3, r4
   243f8:	d301      	bcc.n	243fe <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   243fa:	2000      	movs	r0, #0
	return rc;
}
   243fc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   243fe:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   24402:	ea41 0200 	orr.w	r2, r1, r0
   24406:	f012 0203 	ands.w	r2, r2, #3
   2440a:	d10b      	bne.n	24424 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   2440c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2440e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24410:	42aa      	cmp	r2, r5
   24412:	d101      	bne.n	24418 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24414:	331c      	adds	r3, #28
   24416:	e7ee      	b.n	243f6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   24418:	695e      	ldr	r6, [r3, #20]
   2441a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2441c:	3201      	adds	r2, #1
		slab->free_list = p;
   2441e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   24420:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   24422:	e7f5      	b.n	24410 <init_mem_slab_module+0x20>
	return rc;
   24424:	f06f 0015 	mvn.w	r0, #21
   24428:	e7e8      	b.n	243fc <init_mem_slab_module+0xc>
   2442a:	bf00      	nop
   2442c:	20000a90 	.word	0x20000a90
   24430:	20000b00 	.word	0x20000b00

00024434 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24434:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24436:	460c      	mov	r4, r1
	__asm__ volatile(
   24438:	f04f 0520 	mov.w	r5, #32
   2443c:	f3ef 8111 	mrs	r1, BASEPRI
   24440:	f385 8812 	msr	BASEPRI_MAX, r5
   24444:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24448:	6945      	ldr	r5, [r0, #20]
   2444a:	b15d      	cbz	r5, 24464 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2444c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2444e:	682b      	ldr	r3, [r5, #0]
   24450:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   24452:	6983      	ldr	r3, [r0, #24]
   24454:	3301      	adds	r3, #1
   24456:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24458:	2000      	movs	r0, #0
	__asm__ volatile(
   2445a:	f381 8811 	msr	BASEPRI, r1
   2445e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   24462:	e011      	b.n	24488 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24464:	ea52 0c03 	orrs.w	ip, r2, r3
   24468:	d103      	bne.n	24472 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2446a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2446c:	f06f 000b 	mvn.w	r0, #11
   24470:	e7f3      	b.n	2445a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24472:	e9cd 2300 	strd	r2, r3, [sp]
   24476:	4602      	mov	r2, r0
   24478:	3008      	adds	r0, #8
   2447a:	f000 fe2d 	bl	250d8 <z_pend_curr>
		if (result == 0) {
   2447e:	b918      	cbnz	r0, 24488 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   24480:	4b02      	ldr	r3, [pc, #8]	; (2448c <k_mem_slab_alloc+0x58>)
   24482:	689b      	ldr	r3, [r3, #8]
   24484:	695b      	ldr	r3, [r3, #20]
   24486:	6023      	str	r3, [r4, #0]
}
   24488:	b003      	add	sp, #12
   2448a:	bd30      	pop	{r4, r5, pc}
   2448c:	20005e4c 	.word	0x20005e4c

00024490 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   24490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24492:	4605      	mov	r5, r0
   24494:	460e      	mov	r6, r1
	__asm__ volatile(
   24496:	f04f 0320 	mov.w	r3, #32
   2449a:	f3ef 8711 	mrs	r7, BASEPRI
   2449e:	f383 8812 	msr	BASEPRI_MAX, r3
   244a2:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   244a6:	4b06      	ldr	r3, [pc, #24]	; (244c0 <k_thread_foreach+0x30>)
   244a8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   244aa:	b924      	cbnz	r4, 244b6 <k_thread_foreach+0x26>
	__asm__ volatile(
   244ac:	f387 8811 	msr	BASEPRI, r7
   244b0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   244b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   244b6:	4620      	mov	r0, r4
   244b8:	4631      	mov	r1, r6
   244ba:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   244bc:	6f64      	ldr	r4, [r4, #116]	; 0x74
   244be:	e7f4      	b.n	244aa <k_thread_foreach+0x1a>
   244c0:	20005e4c 	.word	0x20005e4c

000244c4 <z_thread_monitor_exit>:
	__asm__ volatile(
   244c4:	f04f 0320 	mov.w	r3, #32
   244c8:	f3ef 8111 	mrs	r1, BASEPRI
   244cc:	f383 8812 	msr	BASEPRI_MAX, r3
   244d0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   244d4:	4a09      	ldr	r2, [pc, #36]	; (244fc <z_thread_monitor_exit+0x38>)
   244d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   244d8:	4283      	cmp	r3, r0
   244da:	d107      	bne.n	244ec <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   244dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   244de:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   244e0:	f381 8811 	msr	BASEPRI, r1
   244e4:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   244e8:	4770      	bx	lr
   244ea:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   244ec:	2b00      	cmp	r3, #0
   244ee:	d0f7      	beq.n	244e0 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   244f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   244f2:	4282      	cmp	r2, r0
   244f4:	d1f9      	bne.n	244ea <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   244f6:	6f42      	ldr	r2, [r0, #116]	; 0x74
   244f8:	675a      	str	r2, [r3, #116]	; 0x74
   244fa:	e7f1      	b.n	244e0 <z_thread_monitor_exit+0x1c>
   244fc:	20005e4c 	.word	0x20005e4c

00024500 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   24500:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   24502:	4604      	mov	r4, r0
   24504:	b908      	cbnz	r0, 2450a <z_impl_k_thread_name_set+0xa>
		thread = _current;
   24506:	4b05      	ldr	r3, [pc, #20]	; (2451c <z_impl_k_thread_name_set+0x1c>)
   24508:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   2450a:	2220      	movs	r2, #32
   2450c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   24510:	f004 f8d8 	bl	286c4 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24514:	2000      	movs	r0, #0
   24516:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   2451a:	bd10      	pop	{r4, pc}
   2451c:	20005e4c 	.word	0x20005e4c

00024520 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   24520:	7b43      	ldrb	r3, [r0, #13]
   24522:	2b10      	cmp	r3, #16
   24524:	d80e      	bhi.n	24544 <k_thread_state_str+0x24>
   24526:	2b10      	cmp	r3, #16
   24528:	d81c      	bhi.n	24564 <k_thread_state_str+0x44>
   2452a:	e8df f003 	tbb	[pc, r3]
   2452e:	091d      	.short	0x091d
   24530:	1b151b13 	.word	0x1b151b13
   24534:	1b171b1b 	.word	0x1b171b1b
   24538:	1b1b1b1b 	.word	0x1b1b1b1b
   2453c:	1b1b      	.short	0x1b1b
   2453e:	19          	.byte	0x19
   2453f:	00          	.byte	0x00
   24540:	480b      	ldr	r0, [pc, #44]	; (24570 <k_thread_state_str+0x50>)
   24542:	4770      	bx	lr
   24544:	2b20      	cmp	r3, #32
   24546:	d011      	beq.n	2456c <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
   24548:	4a0a      	ldr	r2, [pc, #40]	; (24574 <k_thread_state_str+0x54>)
   2454a:	480b      	ldr	r0, [pc, #44]	; (24578 <k_thread_state_str+0x58>)
   2454c:	2b80      	cmp	r3, #128	; 0x80
   2454e:	bf08      	it	eq
   24550:	4610      	moveq	r0, r2
   24552:	4770      	bx	lr
		return "pending";
   24554:	4809      	ldr	r0, [pc, #36]	; (2457c <k_thread_state_str+0x5c>)
   24556:	4770      	bx	lr
		return "prestart";
   24558:	4809      	ldr	r0, [pc, #36]	; (24580 <k_thread_state_str+0x60>)
   2455a:	4770      	bx	lr
		return "dead";
   2455c:	4809      	ldr	r0, [pc, #36]	; (24584 <k_thread_state_str+0x64>)
   2455e:	4770      	bx	lr
		return "suspended";
   24560:	4809      	ldr	r0, [pc, #36]	; (24588 <k_thread_state_str+0x68>)
   24562:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
   24564:	4804      	ldr	r0, [pc, #16]	; (24578 <k_thread_state_str+0x58>)
   24566:	4770      	bx	lr
		return "";
   24568:	4808      	ldr	r0, [pc, #32]	; (2458c <k_thread_state_str+0x6c>)
   2456a:	4770      	bx	lr
		return "aborting";
   2456c:	4808      	ldr	r0, [pc, #32]	; (24590 <k_thread_state_str+0x70>)
}
   2456e:	4770      	bx	lr
   24570:	00031fee 	.word	0x00031fee
   24574:	00031ffd 	.word	0x00031ffd
   24578:	00031bff 	.word	0x00031bff
   2457c:	00031fd8 	.word	0x00031fd8
   24580:	00031fe0 	.word	0x00031fe0
   24584:	00031fe9 	.word	0x00031fe9
   24588:	0002f9db 	.word	0x0002f9db
   2458c:	0002e015 	.word	0x0002e015
   24590:	00031ff4 	.word	0x00031ff4

00024594 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24598:	b085      	sub	sp, #20
   2459a:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2459c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   245a0:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   245a4:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   245a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   245a8:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   245aa:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   245ae:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   245b0:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   245b2:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
   245b6:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   245b8:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
   245bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
   245be:	6085      	str	r5, [r0, #8]
{
   245c0:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   245c2:	e9c0 5506 	strd	r5, r5, [r0, #24]
   245c6:	460e      	mov	r6, r1
	thread_base->prio = priority;
   245c8:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
   245ca:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   245cc:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
   245ce:	4652      	mov	r2, sl
   245d0:	21aa      	movs	r1, #170	; 0xaa
   245d2:	4658      	mov	r0, fp
{
   245d4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   245d8:	f004 f8f5 	bl	287c6 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   245dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   245de:	9302      	str	r3, [sp, #8]
   245e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   245e2:	9301      	str	r3, [sp, #4]
   245e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   245e6:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
   245e8:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   245ec:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
   245ee:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   245f2:	463a      	mov	r2, r7
   245f4:	4631      	mov	r1, r6
   245f6:	4620      	mov	r0, r4
   245f8:	f7e7 fc58 	bl	beac <arch_new_thread>
	new_thread->entry.parameter1 = p1;
   245fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   245fe:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   24600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24602:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   24604:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   24606:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   24608:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
   2460c:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   2460e:	f04f 0220 	mov.w	r2, #32
   24612:	f3ef 8311 	mrs	r3, BASEPRI
   24616:	f382 8812 	msr	BASEPRI_MAX, r2
   2461a:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   2461e:	4e10      	ldr	r6, [pc, #64]	; (24660 <z_setup_new_thread+0xcc>)
   24620:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   24622:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   24624:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
   24626:	f383 8811 	msr	BASEPRI, r3
   2462a:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   2462e:	f1b9 0f00 	cmp.w	r9, #0
   24632:	d011      	beq.n	24658 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
   24634:	221f      	movs	r2, #31
   24636:	4649      	mov	r1, r9
   24638:	f104 0078 	add.w	r0, r4, #120	; 0x78
   2463c:	f004 f842 	bl	286c4 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24640:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   24644:	68b3      	ldr	r3, [r6, #8]
   24646:	b10b      	cbz	r3, 2464c <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
   24648:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
   2464c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   24650:	4638      	mov	r0, r7
   24652:	b005      	add	sp, #20
   24654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   24658:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
   2465c:	e7f2      	b.n	24644 <z_setup_new_thread+0xb0>
   2465e:	bf00      	nop
   24660:	20005e4c 	.word	0x20005e4c

00024664 <z_impl_k_thread_create>:
{
   24664:	b5f0      	push	{r4, r5, r6, r7, lr}
   24666:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24668:	2700      	movs	r7, #0
   2466a:	9705      	str	r7, [sp, #20]
   2466c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2466e:	9704      	str	r7, [sp, #16]
   24670:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   24672:	9703      	str	r7, [sp, #12]
   24674:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   24676:	9702      	str	r7, [sp, #8]
{
   24678:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2467c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2467e:	9701      	str	r7, [sp, #4]
   24680:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   24682:	9700      	str	r7, [sp, #0]
{
   24684:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24686:	f7ff ff85 	bl	24594 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2468a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2468e:	bf08      	it	eq
   24690:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   24694:	d005      	beq.n	246a2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24696:	ea55 0306 	orrs.w	r3, r5, r6
   2469a:	d105      	bne.n	246a8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2469c:	4620      	mov	r0, r4
   2469e:	f000 fcbf 	bl	25020 <z_sched_start>
}
   246a2:	4620      	mov	r0, r4
   246a4:	b007      	add	sp, #28
   246a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   246a8:	4903      	ldr	r1, [pc, #12]	; (246b8 <z_impl_k_thread_create+0x54>)
   246aa:	4632      	mov	r2, r6
   246ac:	462b      	mov	r3, r5
   246ae:	f104 0018 	add.w	r0, r4, #24
   246b2:	f000 ff4b 	bl	2554c <z_add_timeout>
   246b6:	e7f4      	b.n	246a2 <z_impl_k_thread_create+0x3e>
   246b8:	0002afeb 	.word	0x0002afeb

000246bc <z_init_static_threads>:
{
   246bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   246c0:	4c29      	ldr	r4, [pc, #164]	; (24768 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   246c2:	4d2a      	ldr	r5, [pc, #168]	; (2476c <z_init_static_threads+0xb0>)
{
   246c4:	b087      	sub	sp, #28
   246c6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   246c8:	42ae      	cmp	r6, r5
   246ca:	f104 0430 	add.w	r4, r4, #48	; 0x30
   246ce:	d30f      	bcc.n	246f0 <z_init_static_threads+0x34>
	k_sched_lock();
   246d0:	f000 fbc2 	bl	24e58 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   246d4:	4c24      	ldr	r4, [pc, #144]	; (24768 <z_init_static_threads+0xac>)
   246d6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 24770 <z_init_static_threads+0xb4>
   246da:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   246de:	f240 37e7 	movw	r7, #999	; 0x3e7
   246e2:	42ac      	cmp	r4, r5
   246e4:	d320      	bcc.n	24728 <z_init_static_threads+0x6c>
}
   246e6:	b007      	add	sp, #28
   246e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   246ec:	f000 bd82 	b.w	251f4 <k_sched_unlock>
		z_setup_new_thread(
   246f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   246f4:	9305      	str	r3, [sp, #20]
   246f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   246fa:	9304      	str	r3, [sp, #16]
   246fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24700:	9303      	str	r3, [sp, #12]
   24702:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24706:	9302      	str	r3, [sp, #8]
   24708:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2470c:	9301      	str	r3, [sp, #4]
   2470e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24712:	9300      	str	r3, [sp, #0]
   24714:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24718:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2471c:	f7ff ff3a 	bl	24594 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24720:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24724:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24726:	e7ce      	b.n	246c6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24728:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2472a:	1c5a      	adds	r2, r3, #1
   2472c:	d00d      	beq.n	2474a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2472e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24732:	2100      	movs	r1, #0
   24734:	4638      	mov	r0, r7
   24736:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2473a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2473e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24742:	d104      	bne.n	2474e <z_init_static_threads+0x92>
	z_sched_start(thread);
   24744:	4640      	mov	r0, r8
   24746:	f000 fc6b 	bl	25020 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2474a:	3430      	adds	r4, #48	; 0x30
   2474c:	e7c9      	b.n	246e2 <z_init_static_threads+0x26>
   2474e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24752:	2300      	movs	r3, #0
   24754:	f7dc fee0 	bl	1518 <__aeabi_uldivmod>
   24758:	4602      	mov	r2, r0
   2475a:	460b      	mov	r3, r1
   2475c:	f108 0018 	add.w	r0, r8, #24
   24760:	4649      	mov	r1, r9
   24762:	f000 fef3 	bl	2554c <z_add_timeout>
   24766:	e7f0      	b.n	2474a <z_init_static_threads+0x8e>
   24768:	20000a00 	.word	0x20000a00
   2476c:	20000a90 	.word	0x20000a90
   24770:	0002afeb 	.word	0x0002afeb

00024774 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   24774:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   24776:	4c0b      	ldr	r4, [pc, #44]	; (247a4 <idle+0x30>)
	return !z_sys_post_kernel;
   24778:	4d0b      	ldr	r5, [pc, #44]	; (247a8 <idle+0x34>)
	__asm__ volatile(
   2477a:	f04f 0220 	mov.w	r2, #32
   2477e:	f3ef 8311 	mrs	r3, BASEPRI
   24782:	f382 8812 	msr	BASEPRI_MAX, r2
   24786:	f3bf 8f6f 	isb	sy
   2478a:	f006 fceb 	bl	2b164 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2478e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   24790:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24792:	b913      	cbnz	r3, 2479a <idle+0x26>
	arch_cpu_idle();
   24794:	f7e7 fa1a 	bl	bbcc <arch_cpu_idle>
}
   24798:	e7ef      	b.n	2477a <idle+0x6>
   2479a:	f7e7 f8db 	bl	b954 <pm_system_suspend>
   2479e:	2800      	cmp	r0, #0
   247a0:	d1eb      	bne.n	2477a <idle+0x6>
   247a2:	e7f7      	b.n	24794 <idle+0x20>
   247a4:	20005e4c 	.word	0x20005e4c
   247a8:	20006425 	.word	0x20006425

000247ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   247ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   247b0:	4604      	mov	r4, r0
   247b2:	4617      	mov	r7, r2
   247b4:	461e      	mov	r6, r3
   247b6:	f04f 0320 	mov.w	r3, #32
   247ba:	f3ef 8811 	mrs	r8, BASEPRI
   247be:	f383 8812 	msr	BASEPRI_MAX, r3
   247c2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   247c6:	68c3      	ldr	r3, [r0, #12]
   247c8:	4a32      	ldr	r2, [pc, #200]	; (24894 <z_impl_k_mutex_lock+0xe8>)
   247ca:	b16b      	cbz	r3, 247e8 <z_impl_k_mutex_lock+0x3c>
   247cc:	6880      	ldr	r0, [r0, #8]
   247ce:	6891      	ldr	r1, [r2, #8]
   247d0:	4288      	cmp	r0, r1
   247d2:	d019      	beq.n	24808 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   247d4:	ea57 0306 	orrs.w	r3, r7, r6
   247d8:	d118      	bne.n	2480c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   247da:	f388 8811 	msr	BASEPRI, r8
   247de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   247e2:	f06f 000f 	mvn.w	r0, #15
   247e6:	e00c      	b.n	24802 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   247e8:	6891      	ldr	r1, [r2, #8]
   247ea:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   247ee:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   247f0:	3301      	adds	r3, #1
   247f2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   247f4:	6893      	ldr	r3, [r2, #8]
   247f6:	60a3      	str	r3, [r4, #8]
   247f8:	f388 8811 	msr	BASEPRI, r8
   247fc:	f3bf 8f6f 	isb	sy
		return 0;
   24800:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24802:	b002      	add	sp, #8
   24804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   24808:	6921      	ldr	r1, [r4, #16]
   2480a:	e7f0      	b.n	247ee <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2480c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24810:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   24814:	4299      	cmp	r1, r3
   24816:	bfa8      	it	ge
   24818:	4619      	movge	r1, r3
   2481a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2481e:	4291      	cmp	r1, r2
   24820:	bfb8      	it	lt
   24822:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   24824:	428b      	cmp	r3, r1
   24826:	dd2e      	ble.n	24886 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   24828:	f006 f9a5 	bl	2ab76 <adjust_owner_prio.isra.0>
   2482c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2482e:	e9cd 7600 	strd	r7, r6, [sp]
   24832:	4819      	ldr	r0, [pc, #100]	; (24898 <z_impl_k_mutex_lock+0xec>)
   24834:	4622      	mov	r2, r4
   24836:	4641      	mov	r1, r8
   24838:	f000 fc4e 	bl	250d8 <z_pend_curr>
	if (got_mutex == 0) {
   2483c:	2800      	cmp	r0, #0
   2483e:	d0e0      	beq.n	24802 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   24840:	f04f 0320 	mov.w	r3, #32
   24844:	f3ef 8611 	mrs	r6, BASEPRI
   24848:	f383 8812 	msr	BASEPRI_MAX, r3
   2484c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   24850:	6823      	ldr	r3, [r4, #0]
   24852:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24854:	429c      	cmp	r4, r3
   24856:	d00a      	beq.n	2486e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   24858:	b14b      	cbz	r3, 2486e <z_impl_k_mutex_lock+0xc2>
   2485a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2485e:	4299      	cmp	r1, r3
   24860:	bfa8      	it	ge
   24862:	4619      	movge	r1, r3
   24864:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   24868:	4299      	cmp	r1, r3
   2486a:	bfb8      	it	lt
   2486c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2486e:	68a0      	ldr	r0, [r4, #8]
   24870:	f006 f981 	bl	2ab76 <adjust_owner_prio.isra.0>
   24874:	b900      	cbnz	r0, 24878 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   24876:	b145      	cbz	r5, 2488a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   24878:	4807      	ldr	r0, [pc, #28]	; (24898 <z_impl_k_mutex_lock+0xec>)
   2487a:	4631      	mov	r1, r6
   2487c:	f000 fada 	bl	24e34 <z_reschedule>
	return -EAGAIN;
   24880:	f06f 000a 	mvn.w	r0, #10
   24884:	e7bd      	b.n	24802 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   24886:	2500      	movs	r5, #0
   24888:	e7d1      	b.n	2482e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   2488a:	f386 8811 	msr	BASEPRI, r6
   2488e:	f3bf 8f6f 	isb	sy
   24892:	e7f5      	b.n	24880 <z_impl_k_mutex_lock+0xd4>
   24894:	20005e4c 	.word	0x20005e4c
   24898:	20006426 	.word	0x20006426

0002489c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2489c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2489e:	6883      	ldr	r3, [r0, #8]
{
   248a0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   248a2:	2b00      	cmp	r3, #0
   248a4:	d033      	beq.n	2490e <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   248a6:	4a1d      	ldr	r2, [pc, #116]	; (2491c <z_impl_k_mutex_unlock+0x80>)
   248a8:	6892      	ldr	r2, [r2, #8]
   248aa:	4293      	cmp	r3, r2
   248ac:	d132      	bne.n	24914 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   248ae:	7bda      	ldrb	r2, [r3, #15]
   248b0:	3a01      	subs	r2, #1
   248b2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   248b4:	68c3      	ldr	r3, [r0, #12]
   248b6:	2b01      	cmp	r3, #1
   248b8:	d905      	bls.n	248c6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   248ba:	3b01      	subs	r3, #1
   248bc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   248be:	f000 fc99 	bl	251f4 <k_sched_unlock>

	return 0;
   248c2:	2000      	movs	r0, #0
}
   248c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   248c6:	f04f 0320 	mov.w	r3, #32
   248ca:	f3ef 8511 	mrs	r5, BASEPRI
   248ce:	f383 8812 	msr	BASEPRI_MAX, r3
   248d2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   248d6:	6901      	ldr	r1, [r0, #16]
   248d8:	6880      	ldr	r0, [r0, #8]
   248da:	f006 f94c 	bl	2ab76 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   248de:	4620      	mov	r0, r4
   248e0:	f006 fbe4 	bl	2b0ac <z_unpend_first_thread>
	mutex->owner = new_owner;
   248e4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   248e6:	b160      	cbz	r0, 24902 <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   248e8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   248ec:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   248ee:	2200      	movs	r2, #0
   248f0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   248f4:	f006 fb69 	bl	2afca <z_ready_thread>
		z_reschedule(&lock, key);
   248f8:	4809      	ldr	r0, [pc, #36]	; (24920 <z_impl_k_mutex_unlock+0x84>)
   248fa:	4629      	mov	r1, r5
   248fc:	f000 fa9a 	bl	24e34 <z_reschedule>
   24900:	e7dd      	b.n	248be <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   24902:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   24904:	f385 8811 	msr	BASEPRI, r5
   24908:	f3bf 8f6f 	isb	sy
   2490c:	e7d7      	b.n	248be <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2490e:	f06f 0015 	mvn.w	r0, #21
   24912:	e7d7      	b.n	248c4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   24914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24918:	e7d4      	b.n	248c4 <z_impl_k_mutex_unlock+0x28>
   2491a:	bf00      	nop
   2491c:	20005e4c 	.word	0x20005e4c
   24920:	20006426 	.word	0x20006426

00024924 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   24924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24926:	4611      	mov	r1, r2
	__asm__ volatile(
   24928:	f04f 0220 	mov.w	r2, #32
   2492c:	f3ef 8511 	mrs	r5, BASEPRI
   24930:	f382 8812 	msr	BASEPRI_MAX, r2
   24934:	f3bf 8f6f 	isb	sy
   24938:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2493a:	b19c      	cbz	r4, 24964 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2493c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2493e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24940:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24944:	4294      	cmp	r4, r2
	list->head = node;
   24946:	6003      	str	r3, [r0, #0]
	list->tail = node;
   24948:	bf08      	it	eq
   2494a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2494c:	2101      	movs	r1, #1
   2494e:	4620      	mov	r0, r4
   24950:	f006 f985 	bl	2ac5e <z_queue_node_peek>
   24954:	4604      	mov	r4, r0
	__asm__ volatile(
   24956:	f385 8811 	msr	BASEPRI, r5
   2495a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2495e:	4620      	mov	r0, r4
   24960:	b003      	add	sp, #12
   24962:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24964:	ea51 0203 	orrs.w	r2, r1, r3
   24968:	d0f5      	beq.n	24956 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2496a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2496e:	e9cd 1300 	strd	r1, r3, [sp]
   24972:	4610      	mov	r0, r2
   24974:	4629      	mov	r1, r5
   24976:	f000 fbaf 	bl	250d8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2497a:	2800      	cmp	r0, #0
   2497c:	d1ef      	bne.n	2495e <z_impl_k_queue_get+0x3a>
   2497e:	4b02      	ldr	r3, [pc, #8]	; (24988 <z_impl_k_queue_get+0x64>)
   24980:	689b      	ldr	r3, [r3, #8]
   24982:	695c      	ldr	r4, [r3, #20]
   24984:	e7eb      	b.n	2495e <z_impl_k_queue_get+0x3a>
   24986:	bf00      	nop
   24988:	20005e4c 	.word	0x20005e4c

0002498c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2498c:	b538      	push	{r3, r4, r5, lr}
   2498e:	4604      	mov	r4, r0
	__asm__ volatile(
   24990:	f04f 0320 	mov.w	r3, #32
   24994:	f3ef 8511 	mrs	r5, BASEPRI
   24998:	f383 8812 	msr	BASEPRI_MAX, r3
   2499c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   249a0:	f006 fb84 	bl	2b0ac <z_unpend_first_thread>

	if (thread != NULL) {
   249a4:	b150      	cbz	r0, 249bc <z_impl_k_sem_give+0x30>
   249a6:	2200      	movs	r2, #0
   249a8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   249ac:	f006 fb0d 	bl	2afca <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   249b0:	4629      	mov	r1, r5
   249b2:	4808      	ldr	r0, [pc, #32]	; (249d4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   249b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   249b8:	f000 ba3c 	b.w	24e34 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   249bc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   249c0:	429a      	cmp	r2, r3
   249c2:	bf18      	it	ne
   249c4:	3301      	addne	r3, #1
   249c6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   249c8:	2102      	movs	r1, #2
   249ca:	f104 0010 	add.w	r0, r4, #16
   249ce:	f006 fd8f 	bl	2b4f0 <z_handle_obj_poll_events>
}
   249d2:	e7ed      	b.n	249b0 <z_impl_k_sem_give+0x24>
   249d4:	20006426 	.word	0x20006426

000249d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   249d8:	b513      	push	{r0, r1, r4, lr}
   249da:	f04f 0420 	mov.w	r4, #32
   249de:	f3ef 8111 	mrs	r1, BASEPRI
   249e2:	f384 8812 	msr	BASEPRI_MAX, r4
   249e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   249ea:	6884      	ldr	r4, [r0, #8]
   249ec:	b144      	cbz	r4, 24a00 <z_impl_k_sem_take+0x28>
		sem->count--;
   249ee:	3c01      	subs	r4, #1
   249f0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   249f2:	f381 8811 	msr	BASEPRI, r1
   249f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   249fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   249fc:	b002      	add	sp, #8
   249fe:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a00:	ea52 0403 	orrs.w	r4, r2, r3
   24a04:	d106      	bne.n	24a14 <z_impl_k_sem_take+0x3c>
   24a06:	f381 8811 	msr	BASEPRI, r1
   24a0a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   24a0e:	f06f 000f 	mvn.w	r0, #15
   24a12:	e7f3      	b.n	249fc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24a14:	e9cd 2300 	strd	r2, r3, [sp]
   24a18:	4602      	mov	r2, r0
   24a1a:	4802      	ldr	r0, [pc, #8]	; (24a24 <z_impl_k_sem_take+0x4c>)
   24a1c:	f000 fb5c 	bl	250d8 <z_pend_curr>
	return ret;
   24a20:	e7ec      	b.n	249fc <z_impl_k_sem_take+0x24>
   24a22:	bf00      	nop
   24a24:	20006426 	.word	0x20006426

00024a28 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24a2a:	4b09      	ldr	r3, [pc, #36]	; (24a50 <k_sys_work_q_init+0x28>)
   24a2c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24a2e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   24a30:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   24a32:	9300      	str	r3, [sp, #0]
   24a34:	4907      	ldr	r1, [pc, #28]	; (24a54 <k_sys_work_q_init+0x2c>)
   24a36:	4808      	ldr	r0, [pc, #32]	; (24a58 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24a38:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24a44:	f000 f914 	bl	24c70 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24a48:	4620      	mov	r0, r4
   24a4a:	b004      	add	sp, #16
   24a4c:	bd10      	pop	{r4, pc}
   24a4e:	bf00      	nop
   24a50:	00032004 	.word	0x00032004
   24a54:	20009be0 	.word	0x20009be0
   24a58:	20003870 	.word	0x20003870

00024a5c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   24a60:	4e47      	ldr	r6, [pc, #284]	; (24b80 <work_queue_main+0x124>)
   24a62:	b085      	sub	sp, #20
   24a64:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   24a66:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   24a6a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   24a6e:	f04f 0320 	mov.w	r3, #32
   24a72:	f3ef 8711 	mrs	r7, BASEPRI
   24a76:	f383 8812 	msr	BASEPRI_MAX, r3
   24a7a:	f3bf 8f6f 	isb	sy
   24a7e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   24a82:	b98d      	cbnz	r5, 24aa8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   24a84:	2102      	movs	r1, #2
   24a86:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   24a8a:	f006 f961 	bl	2ad50 <flag_test_and_clear>
   24a8e:	2800      	cmp	r0, #0
   24a90:	d135      	bne.n	24afe <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24a92:	2300      	movs	r3, #0
   24a94:	e9cd 8900 	strd	r8, r9, [sp]
   24a98:	9302      	str	r3, [sp, #8]
   24a9a:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   24a9e:	4639      	mov	r1, r7
   24aa0:	4838      	ldr	r0, [pc, #224]	; (24b84 <work_queue_main+0x128>)
   24aa2:	f000 fcdd 	bl	25460 <z_sched_wait>
			continue;
   24aa6:	e7e2      	b.n	24a6e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24aa8:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
   24aac:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   24aae:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24ab2:	4295      	cmp	r5, r2
   24ab4:	d101      	bne.n	24aba <work_queue_main+0x5e>
	list->tail = node;
   24ab6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   24aba:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   24abe:	f043 0302 	orr.w	r3, r3, #2
   24ac2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   24ac6:	68eb      	ldr	r3, [r5, #12]
   24ac8:	f023 0304 	bic.w	r3, r3, #4
   24acc:	f043 0301 	orr.w	r3, r3, #1
   24ad0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   24ad2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   24ad4:	f387 8811 	msr	BASEPRI, r7
   24ad8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   24adc:	4628      	mov	r0, r5
   24ade:	4798      	blx	r3
	__asm__ volatile(
   24ae0:	f04f 0320 	mov.w	r3, #32
   24ae4:	f3ef 8b11 	mrs	fp, BASEPRI
   24ae8:	f383 8812 	msr	BASEPRI_MAX, r3
   24aec:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24af0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24af2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24af4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24af8:	d40b      	bmi.n	24b12 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   24afa:	60ea      	str	r2, [r5, #12]
   24afc:	e00e      	b.n	24b1c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24afe:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24b02:	2200      	movs	r2, #0
   24b04:	2101      	movs	r1, #1
   24b06:	4628      	mov	r0, r5
   24b08:	f006 faf8 	bl	2b0fc <z_sched_wake>
   24b0c:	2800      	cmp	r0, #0
   24b0e:	d1f8      	bne.n	24b02 <work_queue_main+0xa6>
   24b10:	e7bf      	b.n	24a92 <work_queue_main+0x36>
	return list->head;
   24b12:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   24b14:	f023 0303 	bic.w	r3, r3, #3
   24b18:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24b1a:	b970      	cbnz	r0, 24b3a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   24b1c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   24b20:	f023 0302 	bic.w	r3, r3, #2
   24b24:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   24b28:	f38b 8811 	msr	BASEPRI, fp
   24b2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   24b30:	05d8      	lsls	r0, r3, #23
   24b32:	d49c      	bmi.n	24a6e <work_queue_main+0x12>
	z_impl_k_yield();
   24b34:	f000 fb86 	bl	25244 <z_impl_k_yield>
}
   24b38:	e799      	b.n	24a6e <work_queue_main+0x12>
	return node->next;
   24b3a:	2700      	movs	r7, #0
   24b3c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   24b40:	463b      	mov	r3, r7
		if (wc->work == work) {
   24b42:	6842      	ldr	r2, [r0, #4]
   24b44:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   24b46:	4601      	mov	r1, r0
		if (wc->work == work) {
   24b48:	d10c      	bne.n	24b64 <work_queue_main+0x108>
	return node->next;
   24b4a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b4c:	b997      	cbnz	r7, 24b74 <work_queue_main+0x118>
   24b4e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   24b50:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b52:	4282      	cmp	r2, r0
   24b54:	d100      	bne.n	24b58 <work_queue_main+0xfc>
	list->tail = node;
   24b56:	6071      	str	r1, [r6, #4]
	parent->next = child;
   24b58:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   24b5c:	f7ff ff16 	bl	2498c <z_impl_k_sem_give>
}
   24b60:	4639      	mov	r1, r7
   24b62:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24b64:	f1ba 0f00 	cmp.w	sl, #0
   24b68:	d0d8      	beq.n	24b1c <work_queue_main+0xc0>
	return node->next;
   24b6a:	4650      	mov	r0, sl
   24b6c:	460f      	mov	r7, r1
   24b6e:	f8da a000 	ldr.w	sl, [sl]
   24b72:	e7e6      	b.n	24b42 <work_queue_main+0xe6>
	return list->tail;
   24b74:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   24b76:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b78:	4290      	cmp	r0, r2
	list->tail = node;
   24b7a:	bf08      	it	eq
   24b7c:	6077      	streq	r7, [r6, #4]
}
   24b7e:	e7eb      	b.n	24b58 <work_queue_main+0xfc>
   24b80:	20005e78 	.word	0x20005e78
   24b84:	20006426 	.word	0x20006426

00024b88 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   24b88:	68c3      	ldr	r3, [r0, #12]
{
   24b8a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   24b8c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   24b90:	079b      	lsls	r3, r3, #30
{
   24b92:	4605      	mov	r5, r0
   24b94:	460c      	mov	r4, r1
	if (ret) {
   24b96:	d50d      	bpl.n	24bb4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24b98:	2201      	movs	r2, #1
   24b9a:	2100      	movs	r1, #0
   24b9c:	f104 0008 	add.w	r0, r4, #8
   24ba0:	f006 f8c6 	bl	2ad30 <z_impl_k_sem_init>
	parent->next = child;
   24ba4:	2300      	movs	r3, #0
   24ba6:	6023      	str	r3, [r4, #0]
	return list->tail;
   24ba8:	4b05      	ldr	r3, [pc, #20]	; (24bc0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   24baa:	6065      	str	r5, [r4, #4]
   24bac:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   24bae:	b91a      	cbnz	r2, 24bb8 <cancel_sync_locked+0x30>
	list->head = node;
   24bb0:	e9c3 4400 	strd	r4, r4, [r3]
}
   24bb4:	4630      	mov	r0, r6
   24bb6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   24bb8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24bba:	605c      	str	r4, [r3, #4]
}
   24bbc:	e7fa      	b.n	24bb4 <cancel_sync_locked+0x2c>
   24bbe:	bf00      	nop
   24bc0:	20005e78 	.word	0x20005e78

00024bc4 <submit_to_queue_locked>:
{
   24bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   24bc6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24bc8:	079a      	lsls	r2, r3, #30
{
   24bca:	4604      	mov	r4, r0
   24bcc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24bce:	f3c3 0540 	ubfx	r5, r3, #1, #1
   24bd2:	d41f      	bmi.n	24c14 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24bd4:	075f      	lsls	r7, r3, #29
   24bd6:	d41f      	bmi.n	24c18 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   24bd8:	680a      	ldr	r2, [r1, #0]
   24bda:	b90a      	cbnz	r2, 24be0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   24bdc:	6882      	ldr	r2, [r0, #8]
   24bde:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24be0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   24be2:	bf44      	itt	mi
   24be4:	68a3      	ldrmi	r3, [r4, #8]
   24be6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   24be8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   24bea:	bf4c      	ite	mi
   24bec:	2502      	movmi	r5, #2
		ret = 1;
   24bee:	2501      	movpl	r5, #1
	if (queue == NULL) {
   24bf0:	b37f      	cbz	r7, 24c52 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24bf2:	4b1b      	ldr	r3, [pc, #108]	; (24c60 <submit_to_queue_locked+0x9c>)
   24bf4:	689b      	ldr	r3, [r3, #8]
   24bf6:	42bb      	cmp	r3, r7
   24bf8:	d111      	bne.n	24c1e <submit_to_queue_locked+0x5a>
   24bfa:	f005 ff9a 	bl	2ab32 <k_is_in_isr>
   24bfe:	f080 0001 	eor.w	r0, r0, #1
   24c02:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   24c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24c08:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24c0a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24c0e:	d523      	bpl.n	24c58 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   24c10:	b13a      	cbz	r2, 24c22 <submit_to_queue_locked+0x5e>
   24c12:	b940      	cbnz	r0, 24c26 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   24c14:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   24c18:	2300      	movs	r3, #0
   24c1a:	6033      	str	r3, [r6, #0]
	return ret;
   24c1c:	e013      	b.n	24c46 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24c1e:	2000      	movs	r0, #0
   24c20:	e7f0      	b.n	24c04 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   24c22:	071b      	lsls	r3, r3, #28
   24c24:	d4f6      	bmi.n	24c14 <submit_to_queue_locked+0x50>
	parent->next = child;
   24c26:	2300      	movs	r3, #0
   24c28:	6023      	str	r3, [r4, #0]
	return list->tail;
   24c2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   24c2e:	b963      	cbnz	r3, 24c4a <submit_to_queue_locked+0x86>
	list->head = node;
   24c30:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   24c34:	4638      	mov	r0, r7
   24c36:	f006 f8a4 	bl	2ad82 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   24c3a:	68e3      	ldr	r3, [r4, #12]
   24c3c:	f043 0304 	orr.w	r3, r3, #4
   24c40:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   24c42:	6833      	ldr	r3, [r6, #0]
   24c44:	60a3      	str	r3, [r4, #8]
}
   24c46:	4628      	mov	r0, r5
   24c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   24c4a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24c4c:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
   24c50:	e7f0      	b.n	24c34 <submit_to_queue_locked+0x70>
		return -EINVAL;
   24c52:	f06f 0515 	mvn.w	r5, #21
   24c56:	e7df      	b.n	24c18 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   24c58:	f06f 0512 	mvn.w	r5, #18
   24c5c:	e7dc      	b.n	24c18 <submit_to_queue_locked+0x54>
   24c5e:	bf00      	nop
   24c60:	20005e4c 	.word	0x20005e4c

00024c64 <k_work_submit>:
{
   24c64:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   24c66:	4801      	ldr	r0, [pc, #4]	; (24c6c <k_work_submit+0x8>)
   24c68:	f006 b8eb 	b.w	2ae42 <k_work_submit_to_queue>
   24c6c:	20003870 	.word	0x20003870

00024c70 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   24c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c72:	b089      	sub	sp, #36	; 0x24
   24c74:	4604      	mov	r4, r0
	list->head = NULL;
   24c76:	2000      	movs	r0, #0
	list->tail = NULL;
   24c78:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   24c7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24c7e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   24c82:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   24c86:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   24c8a:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   24c8e:	b31d      	cbz	r5, 24cd8 <k_work_queue_start+0x68>
   24c90:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   24c92:	2800      	cmp	r0, #0
   24c94:	f240 1001 	movw	r0, #257	; 0x101
   24c98:	bf08      	it	eq
   24c9a:	2001      	moveq	r0, #1
	*flagp = flags;
   24c9c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24ca0:	2000      	movs	r0, #0
   24ca2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24ca6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24caa:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24cae:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24cb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   24cb6:	4b09      	ldr	r3, [pc, #36]	; (24cdc <k_work_queue_start+0x6c>)
   24cb8:	9400      	str	r4, [sp, #0]
   24cba:	4620      	mov	r0, r4
   24cbc:	f7ff fcd2 	bl	24664 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   24cc0:	b125      	cbz	r5, 24ccc <k_work_queue_start+0x5c>
   24cc2:	6829      	ldr	r1, [r5, #0]
   24cc4:	b111      	cbz	r1, 24ccc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   24cc6:	4620      	mov	r0, r4
   24cc8:	f7ff fc1a 	bl	24500 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24ccc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   24cce:	b009      	add	sp, #36	; 0x24
   24cd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24cd4:	f005 bf35 	b.w	2ab42 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24cd8:	2001      	movs	r0, #1
   24cda:	e7df      	b.n	24c9c <k_work_queue_start+0x2c>
   24cdc:	00024a5d 	.word	0x00024a5d

00024ce0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   24ce0:	b513      	push	{r0, r1, r4, lr}
   24ce2:	9001      	str	r0, [sp, #4]
   24ce4:	4608      	mov	r0, r1
	__asm__ volatile(
   24ce6:	f04f 0120 	mov.w	r1, #32
   24cea:	f3ef 8411 	mrs	r4, BASEPRI
   24cee:	f381 8812 	msr	BASEPRI_MAX, r1
   24cf2:	f3bf 8f6f 	isb	sy
	return *flagp;
   24cf6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   24cf8:	f011 0f0e 	tst.w	r1, #14
   24cfc:	d116      	bne.n	24d2c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24cfe:	ea53 0c02 	orrs.w	ip, r3, r2
   24d02:	d108      	bne.n	24d16 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   24d04:	a901      	add	r1, sp, #4
   24d06:	f7ff ff5d 	bl	24bc4 <submit_to_queue_locked>
	__asm__ volatile(
   24d0a:	f384 8811 	msr	BASEPRI, r4
   24d0e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   24d12:	b002      	add	sp, #8
   24d14:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   24d16:	f041 0108 	orr.w	r1, r1, #8
   24d1a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   24d1c:	9901      	ldr	r1, [sp, #4]
   24d1e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24d20:	3010      	adds	r0, #16
   24d22:	4903      	ldr	r1, [pc, #12]	; (24d30 <k_work_schedule_for_queue+0x50>)
   24d24:	f000 fc12 	bl	2554c <z_add_timeout>
	return ret;
   24d28:	2001      	movs	r0, #1
   24d2a:	e7ee      	b.n	24d0a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   24d2c:	2000      	movs	r0, #0
   24d2e:	e7ec      	b.n	24d0a <k_work_schedule_for_queue+0x2a>
   24d30:	0002adf3 	.word	0x0002adf3

00024d34 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   24d34:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   24d36:	4801      	ldr	r0, [pc, #4]	; (24d3c <k_work_schedule+0x8>)
   24d38:	f7ff bfd2 	b.w	24ce0 <k_work_schedule_for_queue>
   24d3c:	20003870 	.word	0x20003870

00024d40 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   24d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24d42:	460c      	mov	r4, r1
   24d44:	9001      	str	r0, [sp, #4]
   24d46:	4616      	mov	r6, r2
   24d48:	461d      	mov	r5, r3
	__asm__ volatile(
   24d4a:	f04f 0320 	mov.w	r3, #32
   24d4e:	f3ef 8711 	mrs	r7, BASEPRI
   24d52:	f383 8812 	msr	BASEPRI_MAX, r3
   24d56:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   24d5a:	4608      	mov	r0, r1
   24d5c:	f006 f803 	bl	2ad66 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24d60:	ea55 0306 	orrs.w	r3, r5, r6
   24d64:	d109      	bne.n	24d7a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   24d66:	a901      	add	r1, sp, #4
   24d68:	4620      	mov	r0, r4
   24d6a:	f7ff ff2b 	bl	24bc4 <submit_to_queue_locked>
	__asm__ volatile(
   24d6e:	f387 8811 	msr	BASEPRI, r7
   24d72:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   24d76:	b003      	add	sp, #12
   24d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   24d7a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24d7c:	4906      	ldr	r1, [pc, #24]	; (24d98 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   24d7e:	f043 0308 	orr.w	r3, r3, #8
   24d82:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   24d84:	9b01      	ldr	r3, [sp, #4]
   24d86:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24d88:	f104 0010 	add.w	r0, r4, #16
   24d8c:	4632      	mov	r2, r6
   24d8e:	462b      	mov	r3, r5
   24d90:	f000 fbdc 	bl	2554c <z_add_timeout>
	return ret;
   24d94:	2001      	movs	r0, #1
   24d96:	e7ea      	b.n	24d6e <k_work_reschedule_for_queue+0x2e>
   24d98:	0002adf3 	.word	0x0002adf3

00024d9c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   24d9c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   24d9e:	4801      	ldr	r0, [pc, #4]	; (24da4 <k_work_reschedule+0x8>)
   24da0:	f7ff bfce 	b.w	24d40 <k_work_reschedule_for_queue>
   24da4:	20003870 	.word	0x20003870

00024da8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   24da8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   24daa:	4c08      	ldr	r4, [pc, #32]	; (24dcc <z_reset_time_slice+0x24>)
   24dac:	6823      	ldr	r3, [r4, #0]
   24dae:	b15b      	cbz	r3, 24dc8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   24db0:	f7fd f866 	bl	21e80 <sys_clock_elapsed>
   24db4:	4603      	mov	r3, r0
   24db6:	6820      	ldr	r0, [r4, #0]
   24db8:	4a05      	ldr	r2, [pc, #20]	; (24dd0 <z_reset_time_slice+0x28>)
   24dba:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   24dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   24dc0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   24dc2:	2100      	movs	r1, #0
   24dc4:	f006 b9de 	b.w	2b184 <z_set_timeout_expiry>
}
   24dc8:	bd10      	pop	{r4, pc}
   24dca:	bf00      	nop
   24dcc:	20005e88 	.word	0x20005e88
   24dd0:	20005e4c 	.word	0x20005e4c

00024dd4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   24dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24dd6:	4604      	mov	r4, r0
   24dd8:	460d      	mov	r5, r1
	__asm__ volatile(
   24dda:	f04f 0320 	mov.w	r3, #32
   24dde:	f3ef 8611 	mrs	r6, BASEPRI
   24de2:	f383 8812 	msr	BASEPRI_MAX, r3
   24de6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   24dea:	4b0f      	ldr	r3, [pc, #60]	; (24e28 <k_sched_time_slice_set+0x54>)
   24dec:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   24dee:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   24df2:	f240 30e7 	movw	r0, #999	; 0x3e7
   24df6:	6119      	str	r1, [r3, #16]
   24df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24dfc:	2300      	movs	r3, #0
   24dfe:	fbe4 0107 	umlal	r0, r1, r4, r7
   24e02:	f7dc fb89 	bl	1518 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   24e06:	2c00      	cmp	r4, #0
   24e08:	4b08      	ldr	r3, [pc, #32]	; (24e2c <k_sched_time_slice_set+0x58>)
   24e0a:	dc09      	bgt.n	24e20 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   24e0c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   24e0e:	4b08      	ldr	r3, [pc, #32]	; (24e30 <k_sched_time_slice_set+0x5c>)
   24e10:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   24e12:	f7ff ffc9 	bl	24da8 <z_reset_time_slice>
	__asm__ volatile(
   24e16:	f386 8811 	msr	BASEPRI, r6
   24e1a:	f3bf 8f6f 	isb	sy
	}
}
   24e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   24e20:	2802      	cmp	r0, #2
   24e22:	bfb8      	it	lt
   24e24:	2002      	movlt	r0, #2
   24e26:	e7f1      	b.n	24e0c <k_sched_time_slice_set+0x38>
   24e28:	20005e4c 	.word	0x20005e4c
   24e2c:	20005e88 	.word	0x20005e88
   24e30:	20005e84 	.word	0x20005e84

00024e34 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24e34:	b949      	cbnz	r1, 24e4a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24e36:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   24e3a:	b930      	cbnz	r0, 24e4a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   24e3c:	4b05      	ldr	r3, [pc, #20]	; (24e54 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   24e3e:	69da      	ldr	r2, [r3, #28]
   24e40:	689b      	ldr	r3, [r3, #8]
   24e42:	429a      	cmp	r2, r3
   24e44:	d001      	beq.n	24e4a <z_reschedule+0x16>
	ret = arch_swap(key);
   24e46:	f7e6 bfd9 	b.w	bdfc <arch_swap>
   24e4a:	f381 8811 	msr	BASEPRI, r1
   24e4e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   24e52:	4770      	bx	lr
   24e54:	20005e4c 	.word	0x20005e4c

00024e58 <k_sched_lock>:
	__asm__ volatile(
   24e58:	f04f 0320 	mov.w	r3, #32
   24e5c:	f3ef 8111 	mrs	r1, BASEPRI
   24e60:	f383 8812 	msr	BASEPRI_MAX, r3
   24e64:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   24e68:	4b04      	ldr	r3, [pc, #16]	; (24e7c <k_sched_lock+0x24>)
   24e6a:	689a      	ldr	r2, [r3, #8]
   24e6c:	7bd3      	ldrb	r3, [r2, #15]
   24e6e:	3b01      	subs	r3, #1
   24e70:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   24e72:	f381 8811 	msr	BASEPRI, r1
   24e76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   24e7a:	4770      	bx	lr
   24e7c:	20005e4c 	.word	0x20005e4c

00024e80 <update_cache>:
{
   24e80:	b538      	push	{r3, r4, r5, lr}
   24e82:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   24e84:	480c      	ldr	r0, [pc, #48]	; (24eb8 <update_cache+0x38>)
   24e86:	4d0d      	ldr	r5, [pc, #52]	; (24ebc <update_cache+0x3c>)
   24e88:	f006 f899 	bl	2afbe <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   24e8c:	4604      	mov	r4, r0
   24e8e:	b900      	cbnz	r0, 24e92 <update_cache+0x12>
   24e90:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   24e92:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   24e94:	b94a      	cbnz	r2, 24eaa <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   24e96:	7b5a      	ldrb	r2, [r3, #13]
   24e98:	06d2      	lsls	r2, r2, #27
   24e9a:	d106      	bne.n	24eaa <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   24e9c:	69a2      	ldr	r2, [r4, #24]
   24e9e:	b922      	cbnz	r2, 24eaa <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   24ea0:	89da      	ldrh	r2, [r3, #14]
   24ea2:	2a7f      	cmp	r2, #127	; 0x7f
   24ea4:	d901      	bls.n	24eaa <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   24ea6:	61eb      	str	r3, [r5, #28]
}
   24ea8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   24eaa:	429c      	cmp	r4, r3
   24eac:	d001      	beq.n	24eb2 <update_cache+0x32>
			z_reset_time_slice();
   24eae:	f7ff ff7b 	bl	24da8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   24eb2:	61ec      	str	r4, [r5, #28]
}
   24eb4:	e7f8      	b.n	24ea8 <update_cache+0x28>
   24eb6:	bf00      	nop
   24eb8:	20005e6c 	.word	0x20005e6c
   24ebc:	20005e4c 	.word	0x20005e4c

00024ec0 <move_thread_to_end_of_prio_q>:
{
   24ec0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   24ec2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   24ec6:	7b43      	ldrb	r3, [r0, #13]
   24ec8:	2a00      	cmp	r2, #0
{
   24eca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24ecc:	da04      	bge.n	24ed8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24ed2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   24ed4:	f006 f81e 	bl	2af14 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   24ed8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   24eda:	4a15      	ldr	r2, [pc, #84]	; (24f30 <move_thread_to_end_of_prio_q+0x70>)
   24edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24ee0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   24ee2:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ee6:	f102 0520 	add.w	r5, r2, #32
   24eea:	42ab      	cmp	r3, r5
   24eec:	d01b      	beq.n	24f26 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24eee:	b1d3      	cbz	r3, 24f26 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   24ef0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   24ef4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   24ef8:	4286      	cmp	r6, r0
   24efa:	d00f      	beq.n	24f1c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   24efc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   24efe:	2800      	cmp	r0, #0
   24f00:	dd0c      	ble.n	24f1c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   24f02:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   24f04:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   24f08:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   24f0a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   24f0c:	6890      	ldr	r0, [r2, #8]
   24f0e:	1a43      	subs	r3, r0, r1
   24f10:	4258      	negs	r0, r3
}
   24f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   24f16:	4158      	adcs	r0, r3
   24f18:	f7ff bfb2 	b.w	24e80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24f1c:	42a3      	cmp	r3, r4
   24f1e:	d002      	beq.n	24f26 <move_thread_to_end_of_prio_q+0x66>
   24f20:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24f22:	2b00      	cmp	r3, #0
   24f24:	d1e6      	bne.n	24ef4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   24f26:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   24f2a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   24f2c:	6251      	str	r1, [r2, #36]	; 0x24
}
   24f2e:	e7ed      	b.n	24f0c <move_thread_to_end_of_prio_q+0x4c>
   24f30:	20005e4c 	.word	0x20005e4c

00024f34 <z_time_slice>:
{
   24f34:	b538      	push	{r3, r4, r5, lr}
   24f36:	4601      	mov	r1, r0
	__asm__ volatile(
   24f38:	f04f 0320 	mov.w	r3, #32
   24f3c:	f3ef 8411 	mrs	r4, BASEPRI
   24f40:	f383 8812 	msr	BASEPRI_MAX, r3
   24f44:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   24f48:	4b15      	ldr	r3, [pc, #84]	; (24fa0 <z_time_slice+0x6c>)
   24f4a:	4a16      	ldr	r2, [pc, #88]	; (24fa4 <z_time_slice+0x70>)
   24f4c:	6898      	ldr	r0, [r3, #8]
   24f4e:	6815      	ldr	r5, [r2, #0]
   24f50:	42a8      	cmp	r0, r5
   24f52:	d106      	bne.n	24f62 <z_time_slice+0x2e>
			z_reset_time_slice();
   24f54:	f7ff ff28 	bl	24da8 <z_reset_time_slice>
	__asm__ volatile(
   24f58:	f384 8811 	msr	BASEPRI, r4
   24f5c:	f3bf 8f6f 	isb	sy
}
   24f60:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   24f62:	2500      	movs	r5, #0
   24f64:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   24f66:	4a10      	ldr	r2, [pc, #64]	; (24fa8 <z_time_slice+0x74>)
   24f68:	6812      	ldr	r2, [r2, #0]
   24f6a:	b1ba      	cbz	r2, 24f9c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   24f6c:	89c2      	ldrh	r2, [r0, #14]
   24f6e:	2a7f      	cmp	r2, #127	; 0x7f
   24f70:	d814      	bhi.n	24f9c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   24f72:	7b42      	ldrb	r2, [r0, #13]
   24f74:	06d2      	lsls	r2, r2, #27
   24f76:	d111      	bne.n	24f9c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   24f78:	4a0c      	ldr	r2, [pc, #48]	; (24fac <z_time_slice+0x78>)
   24f7a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   24f7e:	6812      	ldr	r2, [r2, #0]
   24f80:	4295      	cmp	r5, r2
   24f82:	db0b      	blt.n	24f9c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   24f84:	4a0a      	ldr	r2, [pc, #40]	; (24fb0 <z_time_slice+0x7c>)
   24f86:	4290      	cmp	r0, r2
   24f88:	d008      	beq.n	24f9c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   24f8a:	691a      	ldr	r2, [r3, #16]
   24f8c:	428a      	cmp	r2, r1
   24f8e:	dc02      	bgt.n	24f96 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   24f90:	f7ff ff96 	bl	24ec0 <move_thread_to_end_of_prio_q>
   24f94:	e7de      	b.n	24f54 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   24f96:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   24f98:	611a      	str	r2, [r3, #16]
   24f9a:	e7dd      	b.n	24f58 <z_time_slice+0x24>
   24f9c:	2200      	movs	r2, #0
   24f9e:	e7fb      	b.n	24f98 <z_time_slice+0x64>
   24fa0:	20005e4c 	.word	0x20005e4c
   24fa4:	20005e80 	.word	0x20005e80
   24fa8:	20005e88 	.word	0x20005e88
   24fac:	20005e84 	.word	0x20005e84
   24fb0:	20003700 	.word	0x20003700

00024fb4 <ready_thread>:
{
   24fb4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24fb6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   24fba:	7b43      	ldrb	r3, [r0, #13]
   24fbc:	2a00      	cmp	r2, #0
   24fbe:	db2a      	blt.n	25016 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24fc0:	06da      	lsls	r2, r3, #27
   24fc2:	d128      	bne.n	25016 <ready_thread+0x62>
   24fc4:	6982      	ldr	r2, [r0, #24]
   24fc6:	bb32      	cbnz	r2, 25016 <ready_thread+0x62>
	return list->head == list;
   24fc8:	4a14      	ldr	r2, [pc, #80]	; (2501c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   24fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24fce:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   24fd0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24fd4:	f102 0520 	add.w	r5, r2, #32
   24fd8:	42ab      	cmp	r3, r5
   24fda:	d017      	beq.n	2500c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24fdc:	b1b3      	cbz	r3, 2500c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   24fde:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24fe2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   24fe6:	428e      	cmp	r6, r1
   24fe8:	d00b      	beq.n	25002 <ready_thread+0x4e>
		return b2 - b1;
   24fea:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   24fec:	2900      	cmp	r1, #0
   24fee:	dd08      	ble.n	25002 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   24ff0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24ff2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   24ff6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   24ff8:	6058      	str	r0, [r3, #4]
}
   24ffa:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   24ffc:	2000      	movs	r0, #0
   24ffe:	f7ff bf3f 	b.w	24e80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25002:	42a3      	cmp	r3, r4
   25004:	d002      	beq.n	2500c <ready_thread+0x58>
   25006:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25008:	2b00      	cmp	r3, #0
   2500a:	d1ea      	bne.n	24fe2 <ready_thread+0x2e>
	node->prev = tail;
   2500c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   25010:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25012:	6250      	str	r0, [r2, #36]	; 0x24
}
   25014:	e7f1      	b.n	24ffa <ready_thread+0x46>
}
   25016:	bc70      	pop	{r4, r5, r6}
   25018:	4770      	bx	lr
   2501a:	bf00      	nop
   2501c:	20005e4c 	.word	0x20005e4c

00025020 <z_sched_start>:
{
   25020:	b510      	push	{r4, lr}
	__asm__ volatile(
   25022:	f04f 0220 	mov.w	r2, #32
   25026:	f3ef 8411 	mrs	r4, BASEPRI
   2502a:	f382 8812 	msr	BASEPRI_MAX, r2
   2502e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25032:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   25034:	0751      	lsls	r1, r2, #29
   25036:	d404      	bmi.n	25042 <z_sched_start+0x22>
	__asm__ volatile(
   25038:	f384 8811 	msr	BASEPRI, r4
   2503c:	f3bf 8f6f 	isb	sy
}
   25040:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25042:	f022 0204 	bic.w	r2, r2, #4
   25046:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   25048:	f7ff ffb4 	bl	24fb4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2504c:	4621      	mov	r1, r4
   2504e:	4802      	ldr	r0, [pc, #8]	; (25058 <z_sched_start+0x38>)
}
   25050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   25054:	f7ff beee 	b.w	24e34 <z_reschedule>
   25058:	20006426 	.word	0x20006426

0002505c <unready_thread>:
{
   2505c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2505e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   25062:	7b43      	ldrb	r3, [r0, #13]
   25064:	2a00      	cmp	r2, #0
{
   25066:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   25068:	da04      	bge.n	25074 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2506a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2506e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25070:	f005 ff50 	bl	2af14 <sys_dlist_remove>
	update_cache(thread == _current);
   25074:	4b04      	ldr	r3, [pc, #16]	; (25088 <unready_thread+0x2c>)
   25076:	6898      	ldr	r0, [r3, #8]
   25078:	1a43      	subs	r3, r0, r1
   2507a:	4258      	negs	r0, r3
   2507c:	4158      	adcs	r0, r3
}
   2507e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   25082:	f7ff befd 	b.w	24e80 <update_cache>
   25086:	bf00      	nop
   25088:	20005e4c 	.word	0x20005e4c

0002508c <pend>:
{
   2508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25090:	4606      	mov	r6, r0
   25092:	4615      	mov	r5, r2
   25094:	461c      	mov	r4, r3
	__asm__ volatile(
   25096:	f04f 0320 	mov.w	r3, #32
   2509a:	f3ef 8711 	mrs	r7, BASEPRI
   2509e:	f383 8812 	msr	BASEPRI_MAX, r3
   250a2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   250a6:	f005 ffc2 	bl	2b02e <add_to_waitq_locked>
	__asm__ volatile(
   250aa:	f387 8811 	msr	BASEPRI, r7
   250ae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   250b2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   250b6:	bf08      	it	eq
   250b8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   250bc:	d008      	beq.n	250d0 <pend+0x44>
   250be:	462a      	mov	r2, r5
   250c0:	4623      	mov	r3, r4
   250c2:	f106 0018 	add.w	r0, r6, #24
   250c6:	4903      	ldr	r1, [pc, #12]	; (250d4 <pend+0x48>)
}
   250c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   250cc:	f000 ba3e 	b.w	2554c <z_add_timeout>
   250d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   250d4:	0002afeb 	.word	0x0002afeb

000250d8 <z_pend_curr>:
{
   250d8:	b510      	push	{r4, lr}
	pending_current = _current;
   250da:	4b07      	ldr	r3, [pc, #28]	; (250f8 <z_pend_curr+0x20>)
   250dc:	6898      	ldr	r0, [r3, #8]
   250de:	4b07      	ldr	r3, [pc, #28]	; (250fc <z_pend_curr+0x24>)
{
   250e0:	460c      	mov	r4, r1
	pending_current = _current;
   250e2:	6018      	str	r0, [r3, #0]
{
   250e4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   250e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   250ea:	f7ff ffcf 	bl	2508c <pend>
   250ee:	4620      	mov	r0, r4
}
   250f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   250f4:	f7e6 be82 	b.w	bdfc <arch_swap>
   250f8:	20005e4c 	.word	0x20005e4c
   250fc:	20005e80 	.word	0x20005e80

00025100 <z_set_prio>:
{
   25100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25102:	4604      	mov	r4, r0
	__asm__ volatile(
   25104:	f04f 0320 	mov.w	r3, #32
   25108:	f3ef 8611 	mrs	r6, BASEPRI
   2510c:	f383 8812 	msr	BASEPRI_MAX, r3
   25110:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   25114:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25116:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   25118:	b249      	sxtb	r1, r1
   2511a:	d133      	bne.n	25184 <z_set_prio+0x84>
		if (need_sched) {
   2511c:	6982      	ldr	r2, [r0, #24]
   2511e:	bb8a      	cbnz	r2, 25184 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25124:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25126:	f005 fef5 	bl	2af14 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2512a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2512c:	4a17      	ldr	r2, [pc, #92]	; (2518c <z_set_prio+0x8c>)
				thread->base.prio = prio;
   2512e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   25130:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25134:	7343      	strb	r3, [r0, #13]
   25136:	4610      	mov	r0, r2
   25138:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2513c:	4283      	cmp	r3, r0
   2513e:	d01b      	beq.n	25178 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25140:	b1d3      	cbz	r3, 25178 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   25142:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   25144:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   25148:	42a9      	cmp	r1, r5
   2514a:	d010      	beq.n	2516e <z_set_prio+0x6e>
		return b2 - b1;
   2514c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2514e:	2d00      	cmp	r5, #0
   25150:	dd0d      	ble.n	2516e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   25152:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25154:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25158:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2515a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2515c:	2001      	movs	r0, #1
   2515e:	f7ff fe8f 	bl	24e80 <update_cache>
   25162:	2001      	movs	r0, #1
	__asm__ volatile(
   25164:	f386 8811 	msr	BASEPRI, r6
   25168:	f3bf 8f6f 	isb	sy
}
   2516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2516e:	42bb      	cmp	r3, r7
   25170:	d002      	beq.n	25178 <z_set_prio+0x78>
   25172:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25174:	2b00      	cmp	r3, #0
   25176:	d1e5      	bne.n	25144 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   25178:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   2517a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   2517e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25180:	6254      	str	r4, [r2, #36]	; 0x24
}
   25182:	e7eb      	b.n	2515c <z_set_prio+0x5c>
			thread->base.prio = prio;
   25184:	73a1      	strb	r1, [r4, #14]
   25186:	2000      	movs	r0, #0
   25188:	e7ec      	b.n	25164 <z_set_prio+0x64>
   2518a:	bf00      	nop
   2518c:	20005e4c 	.word	0x20005e4c

00025190 <z_impl_k_thread_suspend>:
{
   25190:	b570      	push	{r4, r5, r6, lr}
   25192:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25194:	3018      	adds	r0, #24
   25196:	f005 ffcf 	bl	2b138 <z_abort_timeout>
	__asm__ volatile(
   2519a:	f04f 0320 	mov.w	r3, #32
   2519e:	f3ef 8611 	mrs	r6, BASEPRI
   251a2:	f383 8812 	msr	BASEPRI_MAX, r3
   251a6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   251aa:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   251ae:	7b63      	ldrb	r3, [r4, #13]
   251b0:	2a00      	cmp	r2, #0
   251b2:	da05      	bge.n	251c0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   251b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   251b8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   251ba:	4620      	mov	r0, r4
   251bc:	f005 feaa 	bl	2af14 <sys_dlist_remove>
		update_cache(thread == _current);
   251c0:	4d0b      	ldr	r5, [pc, #44]	; (251f0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   251c2:	7b63      	ldrb	r3, [r4, #13]
   251c4:	68a8      	ldr	r0, [r5, #8]
   251c6:	f043 0310 	orr.w	r3, r3, #16
   251ca:	7363      	strb	r3, [r4, #13]
   251cc:	1b03      	subs	r3, r0, r4
   251ce:	4258      	negs	r0, r3
   251d0:	4158      	adcs	r0, r3
   251d2:	f7ff fe55 	bl	24e80 <update_cache>
	__asm__ volatile(
   251d6:	f386 8811 	msr	BASEPRI, r6
   251da:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   251de:	68ab      	ldr	r3, [r5, #8]
   251e0:	42a3      	cmp	r3, r4
   251e2:	d103      	bne.n	251ec <z_impl_k_thread_suspend+0x5c>
}
   251e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   251e8:	f005 bedf 	b.w	2afaa <z_reschedule_unlocked>
}
   251ec:	bd70      	pop	{r4, r5, r6, pc}
   251ee:	bf00      	nop
   251f0:	20005e4c 	.word	0x20005e4c

000251f4 <k_sched_unlock>:
{
   251f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   251f6:	f04f 0320 	mov.w	r3, #32
   251fa:	f3ef 8411 	mrs	r4, BASEPRI
   251fe:	f383 8812 	msr	BASEPRI_MAX, r3
   25202:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   25206:	4b08      	ldr	r3, [pc, #32]	; (25228 <k_sched_unlock+0x34>)
   25208:	689a      	ldr	r2, [r3, #8]
   2520a:	7bd3      	ldrb	r3, [r2, #15]
   2520c:	3301      	adds	r3, #1
   2520e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25210:	2000      	movs	r0, #0
   25212:	f7ff fe35 	bl	24e80 <update_cache>
	__asm__ volatile(
   25216:	f384 8811 	msr	BASEPRI, r4
   2521a:	f3bf 8f6f 	isb	sy
}
   2521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25222:	f005 bec2 	b.w	2afaa <z_reschedule_unlocked>
   25226:	bf00      	nop
   25228:	20005e4c 	.word	0x20005e4c

0002522c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2522c:	4b04      	ldr	r3, [pc, #16]	; (25240 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2522e:	2100      	movs	r1, #0
   25230:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   25234:	e9c3 2208 	strd	r2, r2, [r3, #32]
   25238:	4608      	mov	r0, r1
   2523a:	f7ff bdcb 	b.w	24dd4 <k_sched_time_slice_set>
   2523e:	bf00      	nop
   25240:	20005e4c 	.word	0x20005e4c

00025244 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   25244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   25246:	f04f 0320 	mov.w	r3, #32
   2524a:	f3ef 8511 	mrs	r5, BASEPRI
   2524e:	f383 8812 	msr	BASEPRI_MAX, r3
   25252:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   25256:	491a      	ldr	r1, [pc, #104]	; (252c0 <z_impl_k_yield+0x7c>)
   25258:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2525a:	7b43      	ldrb	r3, [r0, #13]
   2525c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25260:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25262:	f005 fe57 	bl	2af14 <sys_dlist_remove>
	}
	queue_thread(_current);
   25266:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25268:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2526a:	4608      	mov	r0, r1
   2526c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25270:	735a      	strb	r2, [r3, #13]
   25272:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25276:	4282      	cmp	r2, r0
   25278:	d01c      	beq.n	252b4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2527a:	b1da      	cbz	r2, 252b4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   2527c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   2527e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   25282:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   25286:	42a6      	cmp	r6, r4
   25288:	d00f      	beq.n	252aa <z_impl_k_yield+0x66>
		return b2 - b1;
   2528a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2528c:	2c00      	cmp	r4, #0
   2528e:	dd0c      	ble.n	252aa <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   25290:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   25292:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   25296:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   25298:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2529a:	2001      	movs	r0, #1
   2529c:	f7ff fdf0 	bl	24e80 <update_cache>
   252a0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   252a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   252a6:	f7e6 bda9 	b.w	bdfc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   252aa:	42ba      	cmp	r2, r7
   252ac:	d002      	beq.n	252b4 <z_impl_k_yield+0x70>
   252ae:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   252b0:	2a00      	cmp	r2, #0
   252b2:	d1e6      	bne.n	25282 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   252b4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   252b6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   252ba:	6013      	str	r3, [r2, #0]
	list->tail = node;
   252bc:	624b      	str	r3, [r1, #36]	; 0x24
}
   252be:	e7ec      	b.n	2529a <z_impl_k_yield+0x56>
   252c0:	20005e4c 	.word	0x20005e4c

000252c4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   252c4:	ea50 0301 	orrs.w	r3, r0, r1
{
   252c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252cc:	4605      	mov	r5, r0
   252ce:	460e      	mov	r6, r1
	if (ticks == 0) {
   252d0:	d103      	bne.n	252da <z_tick_sleep+0x16>
	z_impl_k_yield();
   252d2:	f7ff ffb7 	bl	25244 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   252d6:	2000      	movs	r0, #0
   252d8:	e033      	b.n	25342 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   252da:	f06f 0401 	mvn.w	r4, #1
   252de:	1a24      	subs	r4, r4, r0
   252e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   252e4:	eb63 0301 	sbc.w	r3, r3, r1
   252e8:	2c01      	cmp	r4, #1
   252ea:	f173 0300 	sbcs.w	r3, r3, #0
   252ee:	da02      	bge.n	252f6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   252f0:	f005 ff62 	bl	2b1b8 <sys_clock_tick_get_32>
   252f4:	1944      	adds	r4, r0, r5
   252f6:	f04f 0320 	mov.w	r3, #32
   252fa:	f3ef 8811 	mrs	r8, BASEPRI
   252fe:	f383 8812 	msr	BASEPRI_MAX, r3
   25302:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   25306:	4f10      	ldr	r7, [pc, #64]	; (25348 <z_tick_sleep+0x84>)
   25308:	4b10      	ldr	r3, [pc, #64]	; (2534c <z_tick_sleep+0x88>)
   2530a:	68b8      	ldr	r0, [r7, #8]
   2530c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2530e:	f7ff fea5 	bl	2505c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25312:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25314:	490e      	ldr	r1, [pc, #56]	; (25350 <z_tick_sleep+0x8c>)
   25316:	462a      	mov	r2, r5
   25318:	4633      	mov	r3, r6
   2531a:	3018      	adds	r0, #24
   2531c:	f000 f916 	bl	2554c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25320:	68ba      	ldr	r2, [r7, #8]
   25322:	7b53      	ldrb	r3, [r2, #13]
   25324:	f043 0310 	orr.w	r3, r3, #16
   25328:	7353      	strb	r3, [r2, #13]
   2532a:	4640      	mov	r0, r8
   2532c:	f7e6 fd66 	bl	bdfc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25330:	f005 ff42 	bl	2b1b8 <sys_clock_tick_get_32>
   25334:	1a20      	subs	r0, r4, r0
   25336:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2533a:	2801      	cmp	r0, #1
   2533c:	f173 0300 	sbcs.w	r3, r3, #0
   25340:	dbc9      	blt.n	252d6 <z_tick_sleep+0x12>
}
   25342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25346:	bf00      	nop
   25348:	20005e4c 	.word	0x20005e4c
   2534c:	20005e80 	.word	0x20005e80
   25350:	0002afeb 	.word	0x0002afeb

00025354 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25354:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   25358:	bf08      	it	eq
   2535a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2535e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25360:	d106      	bne.n	25370 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   25362:	4b08      	ldr	r3, [pc, #32]	; (25384 <z_impl_k_sleep+0x30>)
   25364:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25366:	f7ff ff13 	bl	25190 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2536a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2536e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   25370:	f7ff ffa8 	bl	252c4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   25374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25378:	fb80 0303 	smull	r0, r3, r0, r3
   2537c:	0bc0      	lsrs	r0, r0, #15
   2537e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   25382:	e7f4      	b.n	2536e <z_impl_k_sleep+0x1a>
   25384:	20005e4c 	.word	0x20005e4c

00025388 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   25388:	4b01      	ldr	r3, [pc, #4]	; (25390 <z_impl_z_current_get+0x8>)
   2538a:	6898      	ldr	r0, [r3, #8]
   2538c:	4770      	bx	lr
   2538e:	bf00      	nop
   25390:	20005e4c 	.word	0x20005e4c

00025394 <z_impl_k_is_preempt_thread>:
   25394:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   25398:	b93b      	cbnz	r3, 253aa <z_impl_k_is_preempt_thread+0x16>
   2539a:	4b05      	ldr	r3, [pc, #20]	; (253b0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2539c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   2539e:	89d8      	ldrh	r0, [r3, #14]
   253a0:	287f      	cmp	r0, #127	; 0x7f
   253a2:	bf8c      	ite	hi
   253a4:	2000      	movhi	r0, #0
   253a6:	2001      	movls	r0, #1
   253a8:	4770      	bx	lr
   253aa:	2000      	movs	r0, #0
}
   253ac:	4770      	bx	lr
   253ae:	bf00      	nop
   253b0:	20005e4c 	.word	0x20005e4c

000253b4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   253b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253b8:	4604      	mov	r4, r0
   253ba:	f04f 0320 	mov.w	r3, #32
   253be:	f3ef 8611 	mrs	r6, BASEPRI
   253c2:	f383 8812 	msr	BASEPRI_MAX, r3
   253c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   253ca:	7b43      	ldrb	r3, [r0, #13]
   253cc:	071a      	lsls	r2, r3, #28
   253ce:	d505      	bpl.n	253dc <z_thread_abort+0x28>
	__asm__ volatile(
   253d0:	f386 8811 	msr	BASEPRI, r6
   253d4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   253d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   253dc:	f023 0220 	bic.w	r2, r3, #32
   253e0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   253e4:	09d2      	lsrs	r2, r2, #7
   253e6:	d123      	bne.n	25430 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   253e8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   253ea:	68a3      	ldr	r3, [r4, #8]
   253ec:	b113      	cbz	r3, 253f4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   253ee:	4620      	mov	r0, r4
   253f0:	f005 fd98 	bl	2af24 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   253f4:	f104 0018 	add.w	r0, r4, #24
   253f8:	f005 fe9e 	bl	2b138 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   253fc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   25400:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   25404:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25406:	42bd      	cmp	r5, r7
   25408:	d000      	beq.n	2540c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2540a:	b9cd      	cbnz	r5, 25440 <z_thread_abort+0x8c>
		update_cache(1);
   2540c:	2001      	movs	r0, #1
   2540e:	f7ff fd37 	bl	24e80 <update_cache>
		z_thread_monitor_exit(thread);
   25412:	4620      	mov	r0, r4
   25414:	f7ff f856 	bl	244c4 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   25418:	4b10      	ldr	r3, [pc, #64]	; (2545c <z_thread_abort+0xa8>)
   2541a:	689b      	ldr	r3, [r3, #8]
   2541c:	42a3      	cmp	r3, r4
   2541e:	d1d7      	bne.n	253d0 <z_thread_abort+0x1c>
   25420:	f3ef 8305 	mrs	r3, IPSR
   25424:	2b00      	cmp	r3, #0
   25426:	d1d3      	bne.n	253d0 <z_thread_abort+0x1c>
   25428:	4630      	mov	r0, r6
   2542a:	f7e6 fce7 	bl	bdfc <arch_swap>
	return ret;
   2542e:	e7cf      	b.n	253d0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25430:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25434:	f043 0308 	orr.w	r3, r3, #8
   25438:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2543a:	f005 fd6b 	bl	2af14 <sys_dlist_remove>
}
   2543e:	e7d4      	b.n	253ea <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   25440:	4628      	mov	r0, r5
   25442:	f005 fd6f 	bl	2af24 <unpend_thread_no_timeout>
   25446:	f105 0018 	add.w	r0, r5, #24
   2544a:	f005 fe75 	bl	2b138 <z_abort_timeout>
   2544e:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
   25452:	4628      	mov	r0, r5
   25454:	f7ff fdae 	bl	24fb4 <ready_thread>
   25458:	e7d4      	b.n	25404 <z_thread_abort+0x50>
   2545a:	bf00      	nop
   2545c:	20005e4c 	.word	0x20005e4c

00025460 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25460:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25462:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25466:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25468:	e9cd 6700 	strd	r6, r7, [sp]
   2546c:	f7ff fe34 	bl	250d8 <z_pend_curr>

	if (data != NULL) {
   25470:	b11c      	cbz	r4, 2547a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   25472:	4b03      	ldr	r3, [pc, #12]	; (25480 <z_sched_wait+0x20>)
   25474:	689b      	ldr	r3, [r3, #8]
   25476:	695b      	ldr	r3, [r3, #20]
   25478:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2547a:	b002      	add	sp, #8
   2547c:	bdd0      	pop	{r4, r6, r7, pc}
   2547e:	bf00      	nop
   25480:	20005e4c 	.word	0x20005e4c

00025484 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25484:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   25486:	4806      	ldr	r0, [pc, #24]	; (254a0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   25488:	4a06      	ldr	r2, [pc, #24]	; (254a4 <z_data_copy+0x20>)
   2548a:	4907      	ldr	r1, [pc, #28]	; (254a8 <z_data_copy+0x24>)
   2548c:	1a12      	subs	r2, r2, r0
   2548e:	f003 f98f 	bl	287b0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25496:	4a05      	ldr	r2, [pc, #20]	; (254ac <z_data_copy+0x28>)
   25498:	4905      	ldr	r1, [pc, #20]	; (254b0 <z_data_copy+0x2c>)
   2549a:	4806      	ldr	r0, [pc, #24]	; (254b4 <z_data_copy+0x30>)
   2549c:	f003 b988 	b.w	287b0 <memcpy>
   254a0:	20000000 	.word	0x20000000
   254a4:	20000de4 	.word	0x20000de4
   254a8:	00032010 	.word	0x00032010
   254ac:	00000000 	.word	0x00000000
   254b0:	00032010 	.word	0x00032010
   254b4:	20000000 	.word	0x20000000

000254b8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   254b8:	4b03      	ldr	r3, [pc, #12]	; (254c8 <elapsed+0x10>)
   254ba:	681b      	ldr	r3, [r3, #0]
   254bc:	b90b      	cbnz	r3, 254c2 <elapsed+0xa>
   254be:	f7fc bcdf 	b.w	21e80 <sys_clock_elapsed>
}
   254c2:	2000      	movs	r0, #0
   254c4:	4770      	bx	lr
   254c6:	bf00      	nop
   254c8:	20005e8c 	.word	0x20005e8c

000254cc <next_timeout>:
	return list->head == list;
   254cc:	4b10      	ldr	r3, [pc, #64]	; (25510 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   254ce:	b510      	push	{r4, lr}
   254d0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   254d2:	429c      	cmp	r4, r3
   254d4:	bf08      	it	eq
   254d6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   254d8:	f7ff ffee 	bl	254b8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   254dc:	b1a4      	cbz	r4, 25508 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   254de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   254e2:	1a1b      	subs	r3, r3, r0
   254e4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   254e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   254ec:	f170 0200 	sbcs.w	r2, r0, #0
   254f0:	da0a      	bge.n	25508 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   254f2:	2800      	cmp	r0, #0
   254f4:	bfac      	ite	ge
   254f6:	4618      	movge	r0, r3
   254f8:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   254fa:	4b06      	ldr	r3, [pc, #24]	; (25514 <next_timeout+0x48>)
   254fc:	691b      	ldr	r3, [r3, #16]
   254fe:	b113      	cbz	r3, 25506 <next_timeout+0x3a>
   25500:	4298      	cmp	r0, r3
   25502:	bfa8      	it	ge
   25504:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   25506:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   25508:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2550c:	e7f5      	b.n	254fa <next_timeout+0x2e>
   2550e:	bf00      	nop
   25510:	20000864 	.word	0x20000864
   25514:	20005e4c 	.word	0x20005e4c

00025518 <remove_timeout>:
{
   25518:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2551a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2551c:	b168      	cbz	r0, 2553a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2551e:	4a0a      	ldr	r2, [pc, #40]	; (25548 <remove_timeout+0x30>)
   25520:	6852      	ldr	r2, [r2, #4]
   25522:	4290      	cmp	r0, r2
   25524:	d009      	beq.n	2553a <remove_timeout+0x22>
	if (next(t) != NULL) {
   25526:	b143      	cbz	r3, 2553a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   25528:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2552c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   25530:	1912      	adds	r2, r2, r4
   25532:	eb41 0105 	adc.w	r1, r1, r5
   25536:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2553a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   2553c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2553e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25540:	2300      	movs	r3, #0
	node->prev = NULL;
   25542:	e9c0 3300 	strd	r3, r3, [r0]
}
   25546:	bd30      	pop	{r4, r5, pc}
   25548:	20000864 	.word	0x20000864

0002554c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2554c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25550:	bf08      	it	eq
   25552:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   25556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25558:	4604      	mov	r4, r0
   2555a:	461f      	mov	r7, r3
   2555c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2555e:	d067      	beq.n	25630 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   25560:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   25562:	f04f 0320 	mov.w	r3, #32
   25566:	f3ef 8611 	mrs	r6, BASEPRI
   2556a:	f383 8812 	msr	BASEPRI_MAX, r3
   2556e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   25572:	f06f 0201 	mvn.w	r2, #1
   25576:	1b53      	subs	r3, r2, r5
   25578:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2557c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   25580:	2b00      	cmp	r3, #0
   25582:	db1b      	blt.n	255bc <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   25584:	4b2b      	ldr	r3, [pc, #172]	; (25634 <z_add_timeout+0xe8>)
   25586:	e9d3 1300 	ldrd	r1, r3, [r3]
   2558a:	1a52      	subs	r2, r2, r1
   2558c:	eb6c 0303 	sbc.w	r3, ip, r3
   25590:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   25592:	eb63 0307 	sbc.w	r3, r3, r7
   25596:	2d01      	cmp	r5, #1
   25598:	f173 0200 	sbcs.w	r2, r3, #0
   2559c:	bfbc      	itt	lt
   2559e:	2501      	movlt	r5, #1
   255a0:	2300      	movlt	r3, #0
   255a2:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   255a6:	4824      	ldr	r0, [pc, #144]	; (25638 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   255a8:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   255ac:	4283      	cmp	r3, r0
   255ae:	d118      	bne.n	255e2 <z_add_timeout+0x96>
	node->prev = tail;
   255b0:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   255b4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   255b8:	6044      	str	r4, [r0, #4]
}
   255ba:	e026      	b.n	2560a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   255bc:	f7ff ff7c 	bl	254b8 <elapsed>
   255c0:	3501      	adds	r5, #1
   255c2:	f147 0700 	adc.w	r7, r7, #0
   255c6:	182d      	adds	r5, r5, r0
   255c8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   255cc:	e9c4 5704 	strd	r5, r7, [r4, #16]
   255d0:	e7e9      	b.n	255a6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   255d2:	1a52      	subs	r2, r2, r1
   255d4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   255d8:	459c      	cmp	ip, r3
   255da:	e9c4 2504 	strd	r2, r5, [r4, #16]
   255de:	d0e7      	beq.n	255b0 <z_add_timeout+0x64>
   255e0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   255e2:	2b00      	cmp	r3, #0
   255e4:	d0e4      	beq.n	255b0 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   255e6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   255ea:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   255ee:	428a      	cmp	r2, r1
   255f0:	eb75 0e07 	sbcs.w	lr, r5, r7
   255f4:	daed      	bge.n	255d2 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   255f6:	1a8a      	subs	r2, r1, r2
   255f8:	eb67 0505 	sbc.w	r5, r7, r5
   255fc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   25600:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25602:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25606:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25608:	605c      	str	r4, [r3, #4]
	return list->head == list;
   2560a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2560c:	4283      	cmp	r3, r0
   2560e:	d00b      	beq.n	25628 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   25610:	429c      	cmp	r4, r3
   25612:	d109      	bne.n	25628 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   25614:	f7ff ff5a 	bl	254cc <next_timeout>

			if (next_time == 0 ||
   25618:	b118      	cbz	r0, 25622 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   2561a:	4b08      	ldr	r3, [pc, #32]	; (2563c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   2561c:	691b      	ldr	r3, [r3, #16]
   2561e:	4283      	cmp	r3, r0
   25620:	d002      	beq.n	25628 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   25622:	2100      	movs	r1, #0
   25624:	f7fc fbfa 	bl	21e1c <sys_clock_set_timeout>
	__asm__ volatile(
   25628:	f386 8811 	msr	BASEPRI, r6
   2562c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   25630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25632:	bf00      	nop
   25634:	20003948 	.word	0x20003948
   25638:	20000864 	.word	0x20000864
   2563c:	20005e4c 	.word	0x20005e4c

00025640 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   25640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25644:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   25646:	f7ff fc75 	bl	24f34 <z_time_slice>
	__asm__ volatile(
   2564a:	f04f 0320 	mov.w	r3, #32
   2564e:	f3ef 8411 	mrs	r4, BASEPRI
   25652:	f383 8812 	msr	BASEPRI_MAX, r3
   25656:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2565a:	4e24      	ldr	r6, [pc, #144]	; (256ec <sys_clock_announce+0xac>)
	return list->head == list;
   2565c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 256f0 <sys_clock_announce+0xb0>
   25660:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   25662:	4d24      	ldr	r5, [pc, #144]	; (256f4 <sys_clock_announce+0xb4>)
   25664:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   25668:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2566a:	4540      	cmp	r0, r8
		curr_tick += dt;
   2566c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   25670:	ea4f 77e2 	mov.w	r7, r2, asr #31
   25674:	d00b      	beq.n	2568e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   25676:	b150      	cbz	r0, 2568e <sys_clock_announce+0x4e>
   25678:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   2567c:	429a      	cmp	r2, r3
   2567e:	eb77 090c 	sbcs.w	r9, r7, ip
   25682:	da16      	bge.n	256b2 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   25684:	1a9b      	subs	r3, r3, r2
   25686:	eb6c 0c07 	sbc.w	ip, ip, r7
   2568a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2568e:	1852      	adds	r2, r2, r1
   25690:	eb4e 0707 	adc.w	r7, lr, r7
   25694:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   25698:	2500      	movs	r5, #0
   2569a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2569c:	f7ff ff16 	bl	254cc <next_timeout>
   256a0:	4629      	mov	r1, r5
   256a2:	f7fc fbbb 	bl	21e1c <sys_clock_set_timeout>
	__asm__ volatile(
   256a6:	f384 8811 	msr	BASEPRI, r4
   256aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   256ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   256b2:	1859      	adds	r1, r3, r1
   256b4:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   256b8:	1ad3      	subs	r3, r2, r3
   256ba:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   256bc:	2200      	movs	r2, #0
   256be:	2300      	movs	r3, #0
   256c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   256c4:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   256c8:	f7ff ff26 	bl	25518 <remove_timeout>
   256cc:	f384 8811 	msr	BASEPRI, r4
   256d0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   256d4:	6883      	ldr	r3, [r0, #8]
   256d6:	4798      	blx	r3
	__asm__ volatile(
   256d8:	f04f 0320 	mov.w	r3, #32
   256dc:	f3ef 8411 	mrs	r4, BASEPRI
   256e0:	f383 8812 	msr	BASEPRI_MAX, r3
   256e4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   256e8:	e7bc      	b.n	25664 <sys_clock_announce+0x24>
   256ea:	bf00      	nop
   256ec:	20005e8c 	.word	0x20005e8c
   256f0:	20000864 	.word	0x20000864
   256f4:	20003948 	.word	0x20003948

000256f8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   256f8:	b510      	push	{r4, lr}
   256fa:	f04f 0320 	mov.w	r3, #32
   256fe:	f3ef 8411 	mrs	r4, BASEPRI
   25702:	f383 8812 	msr	BASEPRI_MAX, r3
   25706:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2570a:	f7fc fbb9 	bl	21e80 <sys_clock_elapsed>
   2570e:	4a05      	ldr	r2, [pc, #20]	; (25724 <sys_clock_tick_get+0x2c>)
   25710:	e9d2 3100 	ldrd	r3, r1, [r2]
   25714:	18c0      	adds	r0, r0, r3
   25716:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   2571a:	f384 8811 	msr	BASEPRI, r4
   2571e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25722:	bd10      	pop	{r4, pc}
   25724:	20003948 	.word	0x20003948

00025728 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   25728:	b570      	push	{r4, r5, r6, lr}
   2572a:	4604      	mov	r4, r0
	__asm__ volatile(
   2572c:	f04f 0320 	mov.w	r3, #32
   25730:	f3ef 8511 	mrs	r5, BASEPRI
   25734:	f383 8812 	msr	BASEPRI_MAX, r3
   25738:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2573c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   25740:	3301      	adds	r3, #1
   25742:	f142 0200 	adc.w	r2, r2, #0
   25746:	2b02      	cmp	r3, #2
   25748:	f172 0300 	sbcs.w	r3, r2, #0
   2574c:	d304      	bcc.n	25758 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2574e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   25752:	4918      	ldr	r1, [pc, #96]	; (257b4 <z_timer_expiration_handler+0x8c>)
   25754:	f7ff fefa 	bl	2554c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   25758:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2575a:	3301      	adds	r3, #1
   2575c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2575e:	6a23      	ldr	r3, [r4, #32]
   25760:	b173      	cbz	r3, 25780 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   25762:	f385 8811 	msr	BASEPRI, r5
   25766:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2576a:	6a23      	ldr	r3, [r4, #32]
   2576c:	4620      	mov	r0, r4
   2576e:	4798      	blx	r3
	__asm__ volatile(
   25770:	f04f 0320 	mov.w	r3, #32
   25774:	f3ef 8511 	mrs	r5, BASEPRI
   25778:	f383 8812 	msr	BASEPRI_MAX, r3
   2577c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   25780:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25784:	42a6      	cmp	r6, r4
   25786:	d000      	beq.n	2578a <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   25788:	b926      	cbnz	r6, 25794 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   2578a:	f385 8811 	msr	BASEPRI, r5
   2578e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   25792:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   25794:	4630      	mov	r0, r6
   25796:	f005 fbd8 	bl	2af4a <z_unpend_thread_no_timeout>
   2579a:	2300      	movs	r3, #0
   2579c:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
   257a0:	f385 8811 	msr	BASEPRI, r5
   257a4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   257a8:	4630      	mov	r0, r6
}
   257aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   257ae:	f005 bc0c 	b.w	2afca <z_ready_thread>
   257b2:	bf00      	nop
   257b4:	00025729 	.word	0x00025729

000257b8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   257b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   257bc:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   257be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   257c2:	bf08      	it	eq
   257c4:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   257c8:	4606      	mov	r6, r0
   257ca:	461c      	mov	r4, r3
   257cc:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   257d0:	4689      	mov	r9, r1
   257d2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   257d4:	d03e      	beq.n	25854 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   257d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   257da:	bf08      	it	eq
   257dc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   257e0:	4615      	mov	r5, r2
   257e2:	4607      	mov	r7, r0
   257e4:	d014      	beq.n	25810 <z_impl_k_timer_start+0x58>
   257e6:	ea50 0302 	orrs.w	r3, r0, r2
   257ea:	d011      	beq.n	25810 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   257ec:	f06f 0301 	mvn.w	r3, #1
   257f0:	1a9b      	subs	r3, r3, r2
   257f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   257f6:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   257fa:	2b00      	cmp	r3, #0
   257fc:	da08      	bge.n	25810 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   257fe:	2a02      	cmp	r2, #2
   25800:	f170 0300 	sbcs.w	r3, r0, #0
   25804:	bfbc      	itt	lt
   25806:	2502      	movlt	r5, #2
   25808:	2700      	movlt	r7, #0
   2580a:	3d01      	subs	r5, #1
   2580c:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25810:	f06f 0301 	mvn.w	r3, #1
   25814:	1a5b      	subs	r3, r3, r1
   25816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2581a:	eb63 0304 	sbc.w	r3, r3, r4
   2581e:	2b00      	cmp	r3, #0
   25820:	da09      	bge.n	25836 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   25822:	2901      	cmp	r1, #1
   25824:	f174 0300 	sbcs.w	r3, r4, #0
   25828:	bfbc      	itt	lt
   2582a:	2101      	movlt	r1, #1
   2582c:	2400      	movlt	r4, #0
   2582e:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   25832:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   25836:	4630      	mov	r0, r6
   25838:	f005 fc7e 	bl	2b138 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2583c:	2300      	movs	r3, #0
   2583e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   25840:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25844:	464a      	mov	r2, r9
   25846:	4643      	mov	r3, r8
   25848:	4630      	mov	r0, r6
   2584a:	4903      	ldr	r1, [pc, #12]	; (25858 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   2584c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25850:	f7ff be7c 	b.w	2554c <z_add_timeout>
}
   25854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25858:	00025729 	.word	0x00025729

0002585c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2585c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25860:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   25862:	4b29      	ldr	r3, [pc, #164]	; (25908 <z_impl_k_poll+0xac>)
   25864:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   25866:	2301      	movs	r3, #1
   25868:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2586c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   25870:	ea52 0305 	orrs.w	r3, r2, r5
{
   25874:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   25876:	bf0c      	ite	eq
   25878:	2301      	moveq	r3, #1
   2587a:	2300      	movne	r3, #0
   2587c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   25880:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   25882:	f005 fd26 	bl	2b2d2 <register_events>
   25886:	4681      	mov	r9, r0
	__asm__ volatile(
   25888:	f04f 0320 	mov.w	r3, #32
   2588c:	f3ef 8a11 	mrs	sl, BASEPRI
   25890:	f383 8812 	msr	BASEPRI_MAX, r3
   25894:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   25898:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   2589c:	b964      	cbnz	r4, 258b8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2589e:	4601      	mov	r1, r0
   258a0:	4652      	mov	r2, sl
   258a2:	4640      	mov	r0, r8
   258a4:	f005 fde6 	bl	2b474 <clear_event_registrations>
	__asm__ volatile(
   258a8:	f38a 8811 	msr	BASEPRI, sl
   258ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   258b0:	4620      	mov	r0, r4
   258b2:	b002      	add	sp, #8
   258b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   258b8:	2300      	movs	r3, #0
   258ba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   258be:	ea56 0305 	orrs.w	r3, r6, r5
   258c2:	d106      	bne.n	258d2 <z_impl_k_poll+0x76>
   258c4:	f38a 8811 	msr	BASEPRI, sl
   258c8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   258cc:	f06f 040a 	mvn.w	r4, #10
   258d0:	e7ee      	b.n	258b0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   258d2:	e9cd 6500 	strd	r6, r5, [sp]
   258d6:	4a0d      	ldr	r2, [pc, #52]	; (2590c <z_impl_k_poll+0xb0>)
   258d8:	480d      	ldr	r0, [pc, #52]	; (25910 <z_impl_k_poll+0xb4>)
   258da:	4651      	mov	r1, sl
   258dc:	f7ff fbfc 	bl	250d8 <z_pend_curr>
   258e0:	4604      	mov	r4, r0
	__asm__ volatile(
   258e2:	f04f 0320 	mov.w	r3, #32
   258e6:	f3ef 8511 	mrs	r5, BASEPRI
   258ea:	f383 8812 	msr	BASEPRI_MAX, r3
   258ee:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   258f2:	462a      	mov	r2, r5
   258f4:	4649      	mov	r1, r9
   258f6:	4640      	mov	r0, r8
   258f8:	f005 fdbc 	bl	2b474 <clear_event_registrations>
	__asm__ volatile(
   258fc:	f385 8811 	msr	BASEPRI, r5
   25900:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25904:	e7d4      	b.n	258b0 <z_impl_k_poll+0x54>
   25906:	bf00      	nop
   25908:	20005e4c 	.word	0x20005e4c
   2590c:	2000086c 	.word	0x2000086c
   25910:	20006426 	.word	0x20006426

00025914 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   25914:	b538      	push	{r3, r4, r5, lr}
   25916:	4603      	mov	r3, r0
	__asm__ volatile(
   25918:	f04f 0220 	mov.w	r2, #32
   2591c:	f3ef 8511 	mrs	r5, BASEPRI
   25920:	f382 8812 	msr	BASEPRI_MAX, r2
   25924:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   25928:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2592a:	2101      	movs	r1, #1
   2592c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2592e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25930:	4283      	cmp	r3, r0
   25932:	d106      	bne.n	25942 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   25934:	f385 8811 	msr	BASEPRI, r5
   25938:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2593c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2593e:	4620      	mov	r0, r4
   25940:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   25942:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25946:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25948:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2594a:	2300      	movs	r3, #0
	node->prev = NULL;
   2594c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25950:	f005 fd36 	bl	2b3c0 <signal_poll_event>
	z_reschedule(&lock, key);
   25954:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25956:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25958:	4801      	ldr	r0, [pc, #4]	; (25960 <z_impl_k_poll_signal_raise+0x4c>)
   2595a:	f7ff fa6b 	bl	24e34 <z_reschedule>
	return rc;
   2595e:	e7ee      	b.n	2593e <z_impl_k_poll_signal_raise+0x2a>
   25960:	20006426 	.word	0x20006426

00025964 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   25964:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25966:	4606      	mov	r6, r0
   25968:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2596a:	f005 f8e2 	bl	2ab32 <k_is_in_isr>
   2596e:	b980      	cbnz	r0, 25992 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   25970:	4b0b      	ldr	r3, [pc, #44]	; (259a0 <z_thread_aligned_alloc+0x3c>)
   25972:	689b      	ldr	r3, [r3, #8]
   25974:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   25978:	b17c      	cbz	r4, 2599a <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2597a:	1d2a      	adds	r2, r5, #4
   2597c:	d209      	bcs.n	25992 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2597e:	2000      	movs	r0, #0
   25980:	2100      	movs	r1, #0
   25982:	e9cd 0100 	strd	r0, r1, [sp]
   25986:	f046 0104 	orr.w	r1, r6, #4
   2598a:	4620      	mov	r0, r4
   2598c:	f005 f849 	bl	2aa22 <k_heap_aligned_alloc>
	if (mem == NULL) {
   25990:	b908      	cbnz	r0, 25996 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   25992:	2400      	movs	r4, #0
	}

	return ret;
   25994:	e001      	b.n	2599a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   25996:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   25998:	1d04      	adds	r4, r0, #4
}
   2599a:	4620      	mov	r0, r4
   2599c:	b002      	add	sp, #8
   2599e:	bd70      	pop	{r4, r5, r6, pc}
   259a0:	20005e4c 	.word	0x20005e4c

000259a4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   259a4:	4770      	bx	lr

000259a6 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   259a6:	2301      	movs	r3, #1
   259a8:	fa03 f101 	lsl.w	r1, r3, r1
   259ac:	6903      	ldr	r3, [r0, #16]
   259ae:	681b      	ldr	r3, [r3, #0]
   259b0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   259b2:	bf18      	it	ne
   259b4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   259b8:	b112      	cbz	r2, 259c0 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   259ba:	6883      	ldr	r3, [r0, #8]
   259bc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   259be:	4718      	bx	r3
   259c0:	6883      	ldr	r3, [r0, #8]
   259c2:	691b      	ldr	r3, [r3, #16]
   259c4:	e7fb      	b.n	259be <gpio_pin_set+0x18>

000259c6 <device_get_binding>:
   259c6:	f7fe bb67 	b.w	24098 <z_impl_device_get_binding>

000259ca <z_log_msg2_static_create.constprop.0>:
   259ca:	2300      	movs	r3, #0
   259cc:	f001 b88c 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

000259d0 <gpio_pin_configure.constprop.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   259d0:	b430      	push	{r4, r5}
	struct gpio_driver_data *data =
   259d2:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   259d4:	6885      	ldr	r5, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   259d6:	2301      	movs	r3, #1
   259d8:	fa03 f201 	lsl.w	r2, r3, r1
   259dc:	6823      	ldr	r3, [r4, #0]
   259de:	4313      	orrs	r3, r2
   259e0:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   259e2:	f240 6201 	movw	r2, #1537	; 0x601
   259e6:	682b      	ldr	r3, [r5, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   259e8:	bc30      	pop	{r4, r5}
   259ea:	4718      	bx	r3

000259ec <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   259ec:	f7ff bcb2 	b.w	25354 <z_impl_k_sleep>

000259f0 <hextofloat>:
float hextofloat(char vals[]) {
   259f0:	b082      	sub	sp, #8
   259f2:	1e43      	subs	r3, r0, #1
   259f4:	aa01      	add	r2, sp, #4
   259f6:	3003      	adds	r0, #3
		u.c[i] = vals[i];
   259f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   259fc:	f802 1b01 	strb.w	r1, [r2], #1
	for(int i = 0; i < 4; i++) {
   25a00:	4283      	cmp	r3, r0
   25a02:	d1f9      	bne.n	259f8 <hextofloat+0x8>
}
   25a04:	9801      	ldr	r0, [sp, #4]
   25a06:	b002      	add	sp, #8
   25a08:	4770      	bx	lr

00025a0a <bt_init>:
/**
 * @brief function inits bluetooth
 * 
 */
void bt_init(void) {
	bt_enable(NULL);
   25a0a:	2000      	movs	r0, #0
   25a0c:	f7e8 bd9c 	b.w	e548 <bt_enable>

00025a10 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   25a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25a12:	ab0a      	add	r3, sp, #40	; 0x28
   25a14:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   25a16:	9302      	str	r3, [sp, #8]
   25a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25a1a:	9301      	str	r3, [sp, #4]
   25a1c:	2300      	movs	r3, #0
   25a1e:	9300      	str	r3, [sp, #0]
   25a20:	2201      	movs	r2, #1
   25a22:	4618      	mov	r0, r3
   25a24:	f7e2 f88c 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
   25a28:	b007      	add	sp, #28
   25a2a:	f85d fb04 	ldr.w	pc, [sp], #4

00025a2e <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   25a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25a32:	4607      	mov	r7, r0
   25a34:	460e      	mov	r6, r1
   25a36:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
   25a38:	461d      	mov	r5, r3
   25a3a:	b1fb      	cbz	r3, 25a7c <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
   25a3c:	7818      	ldrb	r0, [r3, #0]
   25a3e:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   25a40:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
   25a44:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   25a48:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   25a4a:	f04f 0900 	mov.w	r9, #0
   25a4e:	45d1      	cmp	r9, sl
   25a50:	d308      	bcc.n	25a64 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
   25a52:	686a      	ldr	r2, [r5, #4]
   25a54:	f105 0308 	add.w	r3, r5, #8
   25a58:	4641      	mov	r1, r8
   25a5a:	4638      	mov	r0, r7
   25a5c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
   25a5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   25a62:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   25a64:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   25a68:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   25a6c:	4620      	mov	r0, r4
   25a6e:	f002 fe49 	bl	28704 <strlen>
   25a72:	3001      	adds	r0, #1
   25a74:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   25a76:	f109 0901 	add.w	r9, r9, #1
   25a7a:	e7e8      	b.n	25a4e <cbpprintf_external+0x20>
}
   25a7c:	f06f 0015 	mvn.w	r0, #21
   25a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025a84 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25a84:	4603      	mov	r3, r0
   25a86:	b140      	cbz	r0, 25a9a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25a88:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25a8a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25a8e:	2a02      	cmp	r2, #2
   25a90:	d006      	beq.n	25aa0 <sys_notify_validate+0x1c>
   25a92:	2a03      	cmp	r2, #3
   25a94:	d004      	beq.n	25aa0 <sys_notify_validate+0x1c>
   25a96:	2a01      	cmp	r2, #1
   25a98:	d005      	beq.n	25aa6 <sys_notify_validate+0x22>
		return -EINVAL;
   25a9a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25a9e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25aa0:	681a      	ldr	r2, [r3, #0]
   25aa2:	2a00      	cmp	r2, #0
   25aa4:	d0f9      	beq.n	25a9a <sys_notify_validate+0x16>
		notify->result = 0;
   25aa6:	2000      	movs	r0, #0
   25aa8:	6098      	str	r0, [r3, #8]
   25aaa:	4770      	bx	lr

00025aac <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25aac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25aae:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25ab2:	2a02      	cmp	r2, #2
{
   25ab4:	b510      	push	{r4, lr}
   25ab6:	4603      	mov	r3, r0
	notify->result = res;
   25ab8:	6081      	str	r1, [r0, #8]
	switch (method) {
   25aba:	d00a      	beq.n	25ad2 <sys_notify_finalize+0x26>
   25abc:	2a03      	cmp	r2, #3
   25abe:	d10b      	bne.n	25ad8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   25ac0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   25ac2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25ac4:	2200      	movs	r2, #0
   25ac6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25ac8:	b108      	cbz	r0, 25ace <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   25aca:	f7ff ff23 	bl	25914 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25ace:	4620      	mov	r0, r4
   25ad0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   25ad2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   25ad4:	2400      	movs	r4, #0
		break;
   25ad6:	e7f5      	b.n	25ac4 <sys_notify_finalize+0x18>
	switch (method) {
   25ad8:	2400      	movs	r4, #0
   25ada:	4620      	mov	r0, r4
   25adc:	e7f2      	b.n	25ac4 <sys_notify_finalize+0x18>

00025ade <str_out>:
{
   25ade:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25ae0:	688a      	ldr	r2, [r1, #8]
   25ae2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   25ae4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25ae6:	b114      	cbz	r4, 25aee <str_out+0x10>
   25ae8:	684b      	ldr	r3, [r1, #4]
   25aea:	4293      	cmp	r3, r2
   25aec:	dc01      	bgt.n	25af2 <str_out+0x14>
		ctx->count++;
   25aee:	608d      	str	r5, [r1, #8]
}
   25af0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25af2:	3b01      	subs	r3, #1
   25af4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25af6:	bf08      	it	eq
   25af8:	2200      	moveq	r2, #0
   25afa:	608d      	str	r5, [r1, #8]
   25afc:	bf0c      	ite	eq
   25afe:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25b00:	54a0      	strbne	r0, [r4, r2]
   25b02:	e7f5      	b.n	25af0 <str_out+0x12>

00025b04 <printk>:
{
   25b04:	b40f      	push	{r0, r1, r2, r3}
   25b06:	b507      	push	{r0, r1, r2, lr}
   25b08:	a904      	add	r1, sp, #16
   25b0a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25b0e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   25b10:	f000 ff72 	bl	269f8 <z_log_vprintk>
}
   25b14:	b003      	add	sp, #12
   25b16:	f85d eb04 	ldr.w	lr, [sp], #4
   25b1a:	b004      	add	sp, #16
   25b1c:	4770      	bx	lr

00025b1e <snprintk>:
{
   25b1e:	b40c      	push	{r2, r3}
   25b20:	b507      	push	{r0, r1, r2, lr}
   25b22:	ab04      	add	r3, sp, #16
   25b24:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25b28:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25b2a:	f7e0 fbdb 	bl	62e4 <vsnprintk>
}
   25b2e:	b003      	add	sp, #12
   25b30:	f85d eb04 	ldr.w	lr, [sp], #4
   25b34:	b002      	add	sp, #8
   25b36:	4770      	bx	lr

00025b38 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25b38:	b510      	push	{r4, lr}
   25b3a:	4603      	mov	r3, r0
	return list->head;
   25b3c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25b3e:	2200      	movs	r2, #0
   25b40:	b158      	cbz	r0, 25b5a <sys_slist_find_and_remove+0x22>
   25b42:	4288      	cmp	r0, r1
   25b44:	d10f      	bne.n	25b66 <sys_slist_find_and_remove+0x2e>
	return node->next;
   25b46:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   25b48:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25b4a:	b93a      	cbnz	r2, 25b5c <sys_slist_find_and_remove+0x24>
   25b4c:	42a1      	cmp	r1, r4
	list->head = node;
   25b4e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   25b50:	d100      	bne.n	25b54 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   25b52:	6058      	str	r0, [r3, #4]
	parent->next = child;
   25b54:	2300      	movs	r3, #0
   25b56:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25b58:	2001      	movs	r0, #1
   25b5a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   25b5c:	42a1      	cmp	r1, r4
	parent->next = child;
   25b5e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   25b60:	bf08      	it	eq
   25b62:	605a      	streq	r2, [r3, #4]
}
   25b64:	e7f6      	b.n	25b54 <sys_slist_find_and_remove+0x1c>
	return node->next;
   25b66:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25b68:	6800      	ldr	r0, [r0, #0]
   25b6a:	e7e9      	b.n	25b40 <sys_slist_find_and_remove+0x8>

00025b6c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25b6c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25b6e:	f013 0307 	ands.w	r3, r3, #7
   25b72:	d105      	bne.n	25b80 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25b74:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25b76:	2b00      	cmp	r3, #0
   25b78:	bf0c      	ite	eq
   25b7a:	2000      	moveq	r0, #0
   25b7c:	2003      	movne	r0, #3
   25b7e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25b80:	2b02      	cmp	r3, #2
   25b82:	d105      	bne.n	25b90 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25b84:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   25b86:	2b00      	cmp	r3, #0
   25b88:	bf14      	ite	ne
   25b8a:	2000      	movne	r0, #0
   25b8c:	2004      	moveq	r0, #4
   25b8e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25b90:	2b01      	cmp	r3, #1
   25b92:	d105      	bne.n	25ba0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25b94:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25b96:	2b00      	cmp	r3, #0
   25b98:	bf0c      	ite	eq
   25b9a:	2000      	moveq	r0, #0
   25b9c:	2005      	movne	r0, #5
   25b9e:	4770      	bx	lr
	int evt = EVT_NOP;
   25ba0:	2000      	movs	r0, #0
}
   25ba2:	4770      	bx	lr

00025ba4 <notify_one>:
{
   25ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ba8:	460d      	mov	r5, r1
   25baa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25bac:	4619      	mov	r1, r3
   25bae:	1d28      	adds	r0, r5, #4
{
   25bb0:	4690      	mov	r8, r2
   25bb2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25bb4:	f7ff ff7a 	bl	25aac <sys_notify_finalize>
	if (cb) {
   25bb8:	4604      	mov	r4, r0
   25bba:	b138      	cbz	r0, 25bcc <notify_one+0x28>
		cb(mgr, cli, state, res);
   25bbc:	4633      	mov	r3, r6
   25bbe:	4642      	mov	r2, r8
   25bc0:	4629      	mov	r1, r5
   25bc2:	4638      	mov	r0, r7
   25bc4:	46a4      	mov	ip, r4
}
   25bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25bca:	4760      	bx	ip
}
   25bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025bd0 <transition_complete>:
{
   25bd0:	b410      	push	{r4}
	__asm__ volatile(
   25bd2:	f04f 0420 	mov.w	r4, #32
   25bd6:	f3ef 8211 	mrs	r2, BASEPRI
   25bda:	f384 8812 	msr	BASEPRI_MAX, r4
   25bde:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25be2:	6141      	str	r1, [r0, #20]
}
   25be4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   25be6:	2101      	movs	r1, #1
   25be8:	f7e0 bb90 	b.w	630c <process_event>

00025bec <validate_args>:
{
   25bec:	b510      	push	{r4, lr}
   25bee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25bf0:	b140      	cbz	r0, 25c04 <validate_args+0x18>
   25bf2:	b139      	cbz	r1, 25c04 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   25bf4:	1d08      	adds	r0, r1, #4
   25bf6:	f7ff ff45 	bl	25a84 <sys_notify_validate>
	if ((rv == 0)
   25bfa:	b928      	cbnz	r0, 25c08 <validate_args+0x1c>
	    && ((cli->notify.flags
   25bfc:	68a3      	ldr	r3, [r4, #8]
   25bfe:	f033 0303 	bics.w	r3, r3, #3
   25c02:	d001      	beq.n	25c08 <validate_args+0x1c>
		rv = -EINVAL;
   25c04:	f06f 0015 	mvn.w	r0, #21
}
   25c08:	bd10      	pop	{r4, pc}

00025c0a <onoff_manager_init>:
{
   25c0a:	b538      	push	{r3, r4, r5, lr}
   25c0c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25c0e:	4605      	mov	r5, r0
   25c10:	b158      	cbz	r0, 25c2a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25c12:	b151      	cbz	r1, 25c2a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25c14:	680b      	ldr	r3, [r1, #0]
   25c16:	b143      	cbz	r3, 25c2a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25c18:	684b      	ldr	r3, [r1, #4]
   25c1a:	b133      	cbz	r3, 25c2a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25c1c:	221c      	movs	r2, #28
   25c1e:	2100      	movs	r1, #0
   25c20:	f002 fdd1 	bl	287c6 <memset>
   25c24:	612c      	str	r4, [r5, #16]
	return 0;
   25c26:	2000      	movs	r0, #0
}
   25c28:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25c2a:	f06f 0015 	mvn.w	r0, #21
   25c2e:	e7fb      	b.n	25c28 <onoff_manager_init+0x1e>

00025c30 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25c30:	b570      	push	{r4, r5, r6, lr}
   25c32:	4604      	mov	r4, r0
   25c34:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25c36:	f7ff ffd9 	bl	25bec <validate_args>

	if (rv < 0) {
   25c3a:	1e05      	subs	r5, r0, #0
   25c3c:	db31      	blt.n	25ca2 <onoff_request+0x72>
   25c3e:	f04f 0320 	mov.w	r3, #32
   25c42:	f3ef 8111 	mrs	r1, BASEPRI
   25c46:	f383 8812 	msr	BASEPRI_MAX, r3
   25c4a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   25c4e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25c50:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   25c52:	f64f 75ff 	movw	r5, #65535	; 0xffff
   25c56:	42ab      	cmp	r3, r5
   25c58:	f000 0207 	and.w	r2, r0, #7
   25c5c:	d02e      	beq.n	25cbc <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   25c5e:	2a02      	cmp	r2, #2
   25c60:	d10e      	bne.n	25c80 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   25c62:	3301      	adds	r3, #1
   25c64:	8363      	strh	r3, [r4, #26]
	rv = state;
   25c66:	4615      	mov	r5, r2
		notify = true;
   25c68:	2301      	movs	r3, #1
	__asm__ volatile(
   25c6a:	f381 8811 	msr	BASEPRI, r1
   25c6e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   25c72:	b1b3      	cbz	r3, 25ca2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   25c74:	2300      	movs	r3, #0
   25c76:	4631      	mov	r1, r6
   25c78:	4620      	mov	r0, r4
   25c7a:	f7ff ff93 	bl	25ba4 <notify_one>
   25c7e:	e010      	b.n	25ca2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   25c80:	0783      	lsls	r3, r0, #30
   25c82:	d001      	beq.n	25c88 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   25c84:	2a06      	cmp	r2, #6
   25c86:	d10e      	bne.n	25ca6 <onoff_request+0x76>
	parent->next = child;
   25c88:	2300      	movs	r3, #0
   25c8a:	6033      	str	r3, [r6, #0]
	return list->tail;
   25c8c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   25c8e:	b993      	cbnz	r3, 25cb6 <onoff_request+0x86>
	list->head = node;
   25c90:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   25c94:	4615      	mov	r5, r2
   25c96:	b962      	cbnz	r2, 25cb2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   25c98:	460a      	mov	r2, r1
   25c9a:	4620      	mov	r0, r4
   25c9c:	2102      	movs	r1, #2
   25c9e:	f7e0 fb35 	bl	630c <process_event>
		}
	}

	return rv;
}
   25ca2:	4628      	mov	r0, r5
   25ca4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   25ca6:	2a05      	cmp	r2, #5
   25ca8:	bf0c      	ite	eq
   25caa:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   25cae:	f06f 0504 	mvnne.w	r5, #4
   25cb2:	2300      	movs	r3, #0
   25cb4:	e7d9      	b.n	25c6a <onoff_request+0x3a>
	parent->next = child;
   25cb6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25cb8:	6066      	str	r6, [r4, #4]
}
   25cba:	e7eb      	b.n	25c94 <onoff_request+0x64>
		rv = -EAGAIN;
   25cbc:	f06f 050a 	mvn.w	r5, #10
   25cc0:	e7f7      	b.n	25cb2 <onoff_request+0x82>

00025cc2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   25cc2:	b510      	push	{r4, lr}
	__asm__ volatile(
   25cc4:	f04f 0320 	mov.w	r3, #32
   25cc8:	f3ef 8211 	mrs	r2, BASEPRI
   25ccc:	f383 8812 	msr	BASEPRI_MAX, r3
   25cd0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25cd4:	8b04      	ldrh	r4, [r0, #24]
   25cd6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   25cda:	2c02      	cmp	r4, #2
   25cdc:	d00a      	beq.n	25cf4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   25cde:	2c01      	cmp	r4, #1
   25ce0:	bf0c      	ite	eq
   25ce2:	f06f 0004 	mvneq.w	r0, #4
   25ce6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   25cea:	f382 8811 	msr	BASEPRI, r2
   25cee:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   25cf2:	e008      	b.n	25d06 <onoff_release+0x44>
	mgr->refs -= 1U;
   25cf4:	8b43      	ldrh	r3, [r0, #26]
   25cf6:	3b01      	subs	r3, #1
   25cf8:	b29b      	uxth	r3, r3
   25cfa:	8343      	strh	r3, [r0, #26]
	if (stop) {
   25cfc:	b923      	cbnz	r3, 25d08 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   25cfe:	4621      	mov	r1, r4
   25d00:	f7e0 fb04 	bl	630c <process_event>
	int rv = state;
   25d04:	4620      	mov	r0, r4
}
   25d06:	bd10      	pop	{r4, pc}
	int rv = state;
   25d08:	4620      	mov	r0, r4
   25d0a:	e7ee      	b.n	25cea <onoff_release+0x28>

00025d0c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   25d0c:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   25d0e:	b1b0      	cbz	r0, 25d3e <onoff_cancel+0x32>
   25d10:	b1a9      	cbz	r1, 25d3e <onoff_cancel+0x32>
	__asm__ volatile(
   25d12:	f04f 0220 	mov.w	r2, #32
   25d16:	f3ef 8511 	mrs	r5, BASEPRI
   25d1a:	f382 8812 	msr	BASEPRI_MAX, r2
   25d1e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25d22:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   25d24:	f7ff ff08 	bl	25b38 <sys_slist_find_and_remove>
   25d28:	b130      	cbz	r0, 25d38 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   25d2a:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   25d2e:	f385 8811 	msr	BASEPRI, r5
   25d32:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   25d36:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   25d38:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25d3c:	e7f7      	b.n	25d2e <onoff_cancel+0x22>
		return -EINVAL;
   25d3e:	f06f 0015 	mvn.w	r0, #21
   25d42:	e7f8      	b.n	25d36 <onoff_cancel+0x2a>

00025d44 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25d44:	4604      	mov	r4, r0
   25d46:	b508      	push	{r3, lr}
   25d48:	4608      	mov	r0, r1
   25d4a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25d4c:	461a      	mov	r2, r3
   25d4e:	47a0      	blx	r4
	return z_impl_z_current_get();
   25d50:	f7ff fb1a 	bl	25388 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25d54:	f7e6 fd0c 	bl	c770 <z_impl_k_thread_abort>

00025d58 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   25d58:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25d5c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   25d5e:	0840      	lsrs	r0, r0, #1
   25d60:	4770      	bx	lr

00025d62 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   25d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d64:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   25d66:	f7ff fff7 	bl	25d58 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   25d6a:	fab0 f080 	clz	r0, r0
   25d6e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25d72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   25d76:	00ca      	lsls	r2, r1, #3
   25d78:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   25d7c:	1d17      	adds	r7, r2, #4
{
   25d7e:	460c      	mov	r4, r1
   25d80:	3206      	adds	r2, #6
   25d82:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   25d84:	b956      	cbnz	r6, 25d9c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   25d86:	2101      	movs	r1, #1
   25d88:	fa01 f000 	lsl.w	r0, r1, r0
   25d8c:	68d9      	ldr	r1, [r3, #12]
   25d8e:	4301      	orrs	r1, r0
   25d90:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25d92:	f8cc 4010 	str.w	r4, [ip, #16]
   25d96:	53dd      	strh	r5, [r3, r7]
   25d98:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   25d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25d9c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25d9e:	3104      	adds	r1, #4
   25da0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25da2:	53d8      	strh	r0, [r3, r7]
   25da4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25da8:	529e      	strh	r6, [r3, r2]
   25daa:	80c5      	strh	r5, [r0, #6]
   25dac:	525d      	strh	r5, [r3, r1]
   25dae:	e7f4      	b.n	25d9a <free_list_add+0x38>

00025db0 <free_list_remove_bidx>:
{
   25db0:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25db2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25db6:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   25db8:	4299      	cmp	r1, r3
   25dba:	f102 0104 	add.w	r1, r2, #4
   25dbe:	d10a      	bne.n	25dd6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25dc0:	2301      	movs	r3, #1
   25dc2:	fa03 f202 	lsl.w	r2, r3, r2
   25dc6:	68c3      	ldr	r3, [r0, #12]
   25dc8:	ea23 0302 	bic.w	r3, r3, r2
   25dcc:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25dce:	2300      	movs	r3, #0
   25dd0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25dd4:	bd10      	pop	{r4, pc}
   25dd6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25dd8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25ddc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25de0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25de4:	80cb      	strh	r3, [r1, #6]
   25de6:	8082      	strh	r2, [r0, #4]
}
   25de8:	e7f4      	b.n	25dd4 <free_list_remove_bidx+0x24>

00025dea <free_list_remove>:
{
   25dea:	b508      	push	{r3, lr}
   25dec:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25dee:	f7ff ffb3 	bl	25d58 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25df2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   25df6:	f1c2 021f 	rsb	r2, r2, #31
   25dfa:	4618      	mov	r0, r3
}
   25dfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25e00:	f7ff bfd6 	b.w	25db0 <free_list_remove_bidx>

00025e04 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   25e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25e08:	fab1 f581 	clz	r5, r1
   25e0c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   25e10:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   25e14:	4603      	mov	r3, r0
	if (b->next) {
   25e16:	693a      	ldr	r2, [r7, #16]
{
   25e18:	460e      	mov	r6, r1
	if (b->next) {
   25e1a:	b1c2      	cbz	r2, 25e4e <alloc_chunk+0x4a>
   25e1c:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   25e20:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   25e22:	4618      	mov	r0, r3
   25e24:	4621      	mov	r1, r4
   25e26:	f7ff ff97 	bl	25d58 <chunk_size>
   25e2a:	42b0      	cmp	r0, r6
   25e2c:	d306      	bcc.n	25e3c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   25e2e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   25e30:	4618      	mov	r0, r3
   25e32:	f7ff ffbd 	bl	25db0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   25e36:	4620      	mov	r0, r4
   25e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   25e3c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   25e40:	f1b8 0801 	subs.w	r8, r8, #1
   25e44:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   25e46:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   25e48:	d001      	beq.n	25e4e <alloc_chunk+0x4a>
   25e4a:	4282      	cmp	r2, r0
   25e4c:	d1e8      	bne.n	25e20 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25e4e:	f1c5 0220 	rsb	r2, r5, #32
   25e52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25e56:	4094      	lsls	r4, r2
   25e58:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   25e5a:	4014      	ands	r4, r2
   25e5c:	d0eb      	beq.n	25e36 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   25e5e:	fa94 f2a4 	rbit	r2, r4
   25e62:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25e66:	1d11      	adds	r1, r2, #4
   25e68:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25e6c:	4621      	mov	r1, r4
   25e6e:	e7df      	b.n	25e30 <alloc_chunk+0x2c>

00025e70 <merge_chunks>:
{
   25e70:	b538      	push	{r3, r4, r5, lr}
   25e72:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25e74:	f7ff ff70 	bl	25d58 <chunk_size>
{
   25e78:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25e7a:	4604      	mov	r4, r0
   25e7c:	4611      	mov	r1, r2
   25e7e:	4618      	mov	r0, r3
   25e80:	f7ff ff6a 	bl	25d58 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   25e84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25e88:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25e8a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25e8c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25e8e:	4618      	mov	r0, r3
   25e90:	f7ff ff62 	bl	25d58 <chunk_size>
	void *cmem = &buf[c];
   25e94:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25e96:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25e9a:	bd38      	pop	{r3, r4, r5, pc}

00025e9c <split_chunks>:
{
   25e9c:	b538      	push	{r3, r4, r5, lr}
   25e9e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25ea0:	f7ff ff5a 	bl	25d58 <chunk_size>
{
   25ea4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   25ea6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   25ea8:	1a51      	subs	r1, r2, r1
   25eaa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   25eae:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25eb0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25eb2:	8060      	strh	r0, [r4, #2]
   25eb4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25eb8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25eba:	8044      	strh	r4, [r0, #2]
   25ebc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25ec0:	4618      	mov	r0, r3
   25ec2:	4611      	mov	r1, r2
   25ec4:	f7ff ff48 	bl	25d58 <chunk_size>
	void *cmem = &buf[c];
   25ec8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25eca:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25ece:	bd38      	pop	{r3, r4, r5, pc}

00025ed0 <free_chunk>:
{
   25ed0:	b538      	push	{r3, r4, r5, lr}
   25ed2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25ed4:	f7ff ff40 	bl	25d58 <chunk_size>
   25ed8:	460c      	mov	r4, r1
   25eda:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25edc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25ee0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25ee2:	07da      	lsls	r2, r3, #31
   25ee4:	d40a      	bmi.n	25efc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25ee6:	4628      	mov	r0, r5
   25ee8:	f7ff ff7f 	bl	25dea <free_list_remove>
	return c + chunk_size(h, c);
   25eec:	4621      	mov	r1, r4
   25eee:	4628      	mov	r0, r5
   25ef0:	f7ff ff32 	bl	25d58 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25ef4:	1822      	adds	r2, r4, r0
   25ef6:	4628      	mov	r0, r5
   25ef8:	f7ff ffba 	bl	25e70 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25efc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25f00:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25f02:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25f06:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25f08:	07db      	lsls	r3, r3, #31
   25f0a:	d40c      	bmi.n	25f26 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25f0c:	4628      	mov	r0, r5
   25f0e:	f7ff ff6c 	bl	25dea <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25f12:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25f16:	4622      	mov	r2, r4
   25f18:	1a61      	subs	r1, r4, r1
   25f1a:	4628      	mov	r0, r5
   25f1c:	f7ff ffa8 	bl	25e70 <merge_chunks>
   25f20:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25f24:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25f26:	4621      	mov	r1, r4
   25f28:	4628      	mov	r0, r5
}
   25f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25f2e:	f7ff bf18 	b.w	25d62 <free_list_add>

00025f32 <sys_heap_free>:
	if (mem == NULL) {
   25f32:	b161      	cbz	r1, 25f4e <sys_heap_free+0x1c>
   25f34:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25f36:	3904      	subs	r1, #4
   25f38:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   25f3a:	f021 0307 	bic.w	r3, r1, #7
   25f3e:	4403      	add	r3, r0
	free_chunk(h, c);
   25f40:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25f42:	885a      	ldrh	r2, [r3, #2]
   25f44:	f022 0201 	bic.w	r2, r2, #1
   25f48:	805a      	strh	r2, [r3, #2]
   25f4a:	f7ff bfc1 	b.w	25ed0 <free_chunk>
}
   25f4e:	4770      	bx	lr

00025f50 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25f50:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25f52:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   25f54:	b909      	cbnz	r1, 25f5a <sys_heap_alloc+0xa>
		return NULL;
   25f56:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   25f58:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25f5a:	68ab      	ldr	r3, [r5, #8]
   25f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25f60:	d9f9      	bls.n	25f56 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25f62:	310b      	adds	r1, #11
   25f64:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25f66:	4621      	mov	r1, r4
   25f68:	4628      	mov	r0, r5
   25f6a:	f7ff ff4b 	bl	25e04 <alloc_chunk>
	if (c == 0U) {
   25f6e:	4606      	mov	r6, r0
   25f70:	2800      	cmp	r0, #0
   25f72:	d0f0      	beq.n	25f56 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   25f74:	4601      	mov	r1, r0
   25f76:	4628      	mov	r0, r5
   25f78:	f7ff feee 	bl	25d58 <chunk_size>
   25f7c:	42a0      	cmp	r0, r4
   25f7e:	d907      	bls.n	25f90 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25f80:	1932      	adds	r2, r6, r4
   25f82:	4628      	mov	r0, r5
   25f84:	f7ff ff8a 	bl	25e9c <split_chunks>
		free_list_add(h, c + chunk_sz);
   25f88:	4611      	mov	r1, r2
   25f8a:	4628      	mov	r0, r5
   25f8c:	f7ff fee9 	bl	25d62 <free_list_add>
	void *cmem = &buf[c];
   25f90:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25f94:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25f96:	8853      	ldrh	r3, [r2, #2]
   25f98:	f043 0301 	orr.w	r3, r3, #1
   25f9c:	8053      	strh	r3, [r2, #2]
   25f9e:	3004      	adds	r0, #4
	return mem;
   25fa0:	e7da      	b.n	25f58 <sys_heap_alloc+0x8>

00025fa2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   25fa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25fa6:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   25fa8:	424a      	negs	r2, r1
   25faa:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   25fae:	ea31 0202 	bics.w	r2, r1, r2
{
   25fb2:	4603      	mov	r3, r0
	if (align != rew) {
   25fb4:	d00a      	beq.n	25fcc <sys_heap_aligned_alloc+0x2a>
		return false;
   25fb6:	2f04      	cmp	r7, #4
   25fb8:	463a      	mov	r2, r7
   25fba:	46b9      	mov	r9, r7
   25fbc:	bf28      	it	cs
   25fbe:	2204      	movcs	r2, #4
		align -= rew;
   25fc0:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   25fc2:	b974      	cbnz	r4, 25fe2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   25fc4:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   25fc6:	4628      	mov	r0, r5
   25fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   25fcc:	2904      	cmp	r1, #4
   25fce:	d804      	bhi.n	25fda <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   25fd0:	4621      	mov	r1, r4
}
   25fd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   25fd6:	f7ff bfbb 	b.w	25f50 <sys_heap_alloc>
		rew = 0;
   25fda:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   25fde:	2204      	movs	r2, #4
   25fe0:	e7ef      	b.n	25fc2 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   25fe2:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   25fe4:	68b3      	ldr	r3, [r6, #8]
   25fe6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   25fea:	d9eb      	bls.n	25fc4 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25fec:	f104 010b 	add.w	r1, r4, #11
   25ff0:	4439      	add	r1, r7
   25ff2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25ff4:	08c9      	lsrs	r1, r1, #3
   25ff6:	4630      	mov	r0, r6
   25ff8:	f7ff ff04 	bl	25e04 <alloc_chunk>
	if (c0 == 0) {
   25ffc:	4680      	mov	r8, r0
   25ffe:	2800      	cmp	r0, #0
   26000:	d0e0      	beq.n	25fc4 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   26002:	f109 0504 	add.w	r5, r9, #4
   26006:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2600a:	1e7b      	subs	r3, r7, #1
   2600c:	4435      	add	r5, r6
   2600e:	441d      	add	r5, r3
   26010:	427f      	negs	r7, r7
   26012:	403d      	ands	r5, r7
   26014:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26018:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2601a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2601c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2601e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26020:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   26024:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   26026:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2602a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2602e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   26032:	d208      	bcs.n	26046 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   26034:	4601      	mov	r1, r0
   26036:	463a      	mov	r2, r7
   26038:	4630      	mov	r0, r6
   2603a:	f7ff ff2f 	bl	25e9c <split_chunks>
		free_list_add(h, c0);
   2603e:	4641      	mov	r1, r8
   26040:	4630      	mov	r0, r6
   26042:	f7ff fe8e 	bl	25d62 <free_list_add>
	return c + chunk_size(h, c);
   26046:	4639      	mov	r1, r7
   26048:	4630      	mov	r0, r6
   2604a:	f7ff fe85 	bl	25d58 <chunk_size>
   2604e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   26050:	4284      	cmp	r4, r0
   26052:	d207      	bcs.n	26064 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   26054:	4630      	mov	r0, r6
   26056:	4622      	mov	r2, r4
   26058:	f7ff ff20 	bl	25e9c <split_chunks>
		free_list_add(h, c_end);
   2605c:	4621      	mov	r1, r4
   2605e:	4630      	mov	r0, r6
   26060:	f7ff fe7f 	bl	25d62 <free_list_add>
	void *cmem = &buf[c];
   26064:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26068:	8873      	ldrh	r3, [r6, #2]
   2606a:	f043 0301 	orr.w	r3, r3, #1
   2606e:	8073      	strh	r3, [r6, #2]
   26070:	e7a9      	b.n	25fc6 <sys_heap_aligned_alloc+0x24>

00026072 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   26072:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26074:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   26076:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26078:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2607c:	f021 0107 	bic.w	r1, r1, #7
{
   26080:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   26082:	1acd      	subs	r5, r1, r3
   26084:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   26086:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   26088:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2608c:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   26090:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26092:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   26094:	2600      	movs	r6, #0
   26096:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   26098:	f1c0 0020 	rsb	r0, r0, #32
   2609c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   260a0:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   260a2:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   260a4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   260a8:	4284      	cmp	r4, r0
   260aa:	d118      	bne.n	260de <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   260ac:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   260ae:	f040 0001 	orr.w	r0, r0, #1
   260b2:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   260b4:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   260b8:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   260ba:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   260bc:	801e      	strh	r6, [r3, #0]
   260be:	8067      	strh	r7, [r4, #2]
   260c0:	195c      	adds	r4, r3, r5
   260c2:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   260c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   260ca:	8066      	strh	r6, [r4, #2]
   260cc:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   260ce:	8850      	ldrh	r0, [r2, #2]
   260d0:	f040 0001 	orr.w	r0, r0, #1
   260d4:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   260d6:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   260d8:	4618      	mov	r0, r3
   260da:	f7ff be42 	b.w	25d62 <free_list_add>
		h->buckets[i].next = 0;
   260de:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   260e2:	e7e1      	b.n	260a8 <sys_heap_init+0x36>

000260e4 <_ldiv5>:
	uint32_t v_lo = *v;
   260e4:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   260e8:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   260ea:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   260ee:	fba2 2403 	umull	r2, r4, r2, r3
   260f2:	18d5      	adds	r5, r2, r3
   260f4:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   260f8:	fba1 1303 	umull	r1, r3, r1, r3
   260fc:	1852      	adds	r2, r2, r1
   260fe:	eb44 0403 	adc.w	r4, r4, r3
   26102:	1952      	adds	r2, r2, r5
   26104:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   26108:	1889      	adds	r1, r1, r2
   2610a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   2610e:	e9c0 1300 	strd	r1, r3, [r0]
}
   26112:	bd30      	pop	{r4, r5, pc}

00026114 <_get_digit>:
	if (*digit_count > 0) {
   26114:	680a      	ldr	r2, [r1, #0]
   26116:	2a00      	cmp	r2, #0
{
   26118:	b510      	push	{r4, lr}
   2611a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   2611c:	dd0f      	ble.n	2613e <_get_digit+0x2a>
		--*digit_count;
   2611e:	3a01      	subs	r2, #1
   26120:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   26122:	681a      	ldr	r2, [r3, #0]
   26124:	6844      	ldr	r4, [r0, #4]
   26126:	200a      	movs	r0, #10
   26128:	fba2 1200 	umull	r1, r2, r2, r0
   2612c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   26130:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   26132:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   26136:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   2613a:	3030      	adds	r0, #48	; 0x30
}
   2613c:	bd10      	pop	{r4, pc}
		rval = '0';
   2613e:	2030      	movs	r0, #48	; 0x30
   26140:	e7fc      	b.n	2613c <_get_digit+0x28>

00026142 <encode_uint>:
{
   26142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26146:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   26148:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2614a:	2b6f      	cmp	r3, #111	; 0x6f
{
   2614c:	4680      	mov	r8, r0
   2614e:	460f      	mov	r7, r1
   26150:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26152:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   26156:	d029      	beq.n	261ac <encode_uint+0x6a>
   26158:	d824      	bhi.n	261a4 <encode_uint+0x62>
		return 16;
   2615a:	2b58      	cmp	r3, #88	; 0x58
   2615c:	bf14      	ite	ne
   2615e:	260a      	movne	r6, #10
   26160:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   26162:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   26166:	4632      	mov	r2, r6
   26168:	2300      	movs	r3, #0
   2616a:	4640      	mov	r0, r8
   2616c:	4639      	mov	r1, r7
   2616e:	f7db f9d3 	bl	1518 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26172:	2a09      	cmp	r2, #9
   26174:	b2d4      	uxtb	r4, r2
   26176:	d81e      	bhi.n	261b6 <encode_uint+0x74>
   26178:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2617a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2617c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2617e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26182:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   26186:	d301      	bcc.n	2618c <encode_uint+0x4a>
   26188:	45d1      	cmp	r9, sl
   2618a:	d811      	bhi.n	261b0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2618c:	782b      	ldrb	r3, [r5, #0]
   2618e:	069b      	lsls	r3, r3, #26
   26190:	d505      	bpl.n	2619e <encode_uint+0x5c>
		if (radix == 8) {
   26192:	2e08      	cmp	r6, #8
   26194:	d115      	bne.n	261c2 <encode_uint+0x80>
			conv->altform_0 = true;
   26196:	78ab      	ldrb	r3, [r5, #2]
   26198:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2619c:	70ab      	strb	r3, [r5, #2]
}
   2619e:	4648      	mov	r0, r9
   261a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   261a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   261a8:	2b70      	cmp	r3, #112	; 0x70
   261aa:	e7d7      	b.n	2615c <encode_uint+0x1a>
	switch (specifier) {
   261ac:	2608      	movs	r6, #8
   261ae:	e7d8      	b.n	26162 <encode_uint+0x20>
		value /= radix;
   261b0:	4680      	mov	r8, r0
   261b2:	460f      	mov	r7, r1
   261b4:	e7d7      	b.n	26166 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   261b6:	f1bb 0f19 	cmp.w	fp, #25
   261ba:	bf94      	ite	ls
   261bc:	3437      	addls	r4, #55	; 0x37
   261be:	3457      	addhi	r4, #87	; 0x57
   261c0:	e7db      	b.n	2617a <encode_uint+0x38>
		} else if (radix == 16) {
   261c2:	2e10      	cmp	r6, #16
   261c4:	d1eb      	bne.n	2619e <encode_uint+0x5c>
			conv->altform_0c = true;
   261c6:	78ab      	ldrb	r3, [r5, #2]
   261c8:	f043 0310 	orr.w	r3, r3, #16
   261cc:	e7e6      	b.n	2619c <encode_uint+0x5a>

000261ce <outs>:
{
   261ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261d2:	4607      	mov	r7, r0
   261d4:	4688      	mov	r8, r1
   261d6:	4615      	mov	r5, r2
   261d8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   261da:	4614      	mov	r4, r2
   261dc:	42b4      	cmp	r4, r6
   261de:	eba4 0005 	sub.w	r0, r4, r5
   261e2:	d302      	bcc.n	261ea <outs+0x1c>
   261e4:	b93e      	cbnz	r6, 261f6 <outs+0x28>
   261e6:	7823      	ldrb	r3, [r4, #0]
   261e8:	b12b      	cbz	r3, 261f6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   261ea:	f814 0b01 	ldrb.w	r0, [r4], #1
   261ee:	4641      	mov	r1, r8
   261f0:	47b8      	blx	r7
		if (rc < 0) {
   261f2:	2800      	cmp	r0, #0
   261f4:	daf2      	bge.n	261dc <outs+0xe>
}
   261f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000261fa <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   261fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   261fe:	4770      	bx	lr

00026200 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
   26200:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
   26202:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
   26206:	42ac      	cmp	r4, r5
   26208:	d207      	bcs.n	2621a <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
   2620a:	6906      	ldr	r6, [r0, #16]
   2620c:	f7ff fff5 	bl	261fa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   26210:	fbb0 f0f6 	udiv	r0, r0, r6
   26214:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
   26216:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   2621a:	1b63      	subs	r3, r4, r5
   2621c:	4258      	negs	r0, r3
   2621e:	4158      	adcs	r0, r3
   26220:	bd70      	pop	{r4, r5, r6, pc}

00026222 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   26222:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
   26226:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
   26228:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
   2622c:	454c      	cmp	r4, r9
{
   2622e:	4605      	mov	r5, r0
   26230:	460e      	mov	r6, r1
   26232:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
   26234:	d907      	bls.n	26246 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   26236:	6907      	ldr	r7, [r0, #16]
   26238:	f7ff ffdf 	bl	261fa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   2623c:	fbb0 f0f7 	udiv	r0, r0, r7
   26240:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   26242:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   26246:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   26248:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2624a:	692f      	ldr	r7, [r5, #16]
   2624c:	b18b      	cbz	r3, 26272 <ring_buf_put_claim+0x50>
   2624e:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
   26250:	443c      	add	r4, r7
   26252:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   26256:	4540      	cmp	r0, r8
   26258:	bf28      	it	cs
   2625a:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
   2625c:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   2625e:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
   26260:	42b8      	cmp	r0, r7
   26262:	bf28      	it	cs
   26264:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   26266:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   26268:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   2626a:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
   2626c:	60a9      	str	r1, [r5, #8]

	return allocated;
}
   2626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   26272:	fbb1 f3f7 	udiv	r3, r1, r7
   26276:	fb07 1313 	mls	r3, r7, r3, r1
   2627a:	e7e9      	b.n	26250 <ring_buf_put_claim+0x2e>

0002627c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   2627c:	b570      	push	{r4, r5, r6, lr}
   2627e:	4605      	mov	r5, r0
   26280:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   26282:	f7ff ffba 	bl	261fa <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   26286:	686e      	ldr	r6, [r5, #4]
   26288:	692a      	ldr	r2, [r5, #16]
   2628a:	682b      	ldr	r3, [r5, #0]
   2628c:	1931      	adds	r1, r6, r4
   2628e:	4413      	add	r3, r2
   26290:	4299      	cmp	r1, r3
   26292:	d80c      	bhi.n	262ae <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   26294:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
   26296:	bf83      	ittte	hi
   26298:	fbb0 f3f2 	udivhi	r3, r0, r2
   2629c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   262a0:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   262a2:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
   262a4:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   262a6:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
   262aa:	2000      	movs	r0, #0
}
   262ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   262ae:	f06f 0015 	mvn.w	r0, #21
   262b2:	e7fb      	b.n	262ac <ring_buf_put_finish+0x30>

000262b4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   262b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   262b8:	4680      	mov	r8, r0
   262ba:	460e      	mov	r6, r1
   262bc:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   262be:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   262c0:	462a      	mov	r2, r5
   262c2:	a901      	add	r1, sp, #4
   262c4:	4640      	mov	r0, r8
   262c6:	f7ff ffac 	bl	26222 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   262ca:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   262cc:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   262ce:	4602      	mov	r2, r0
   262d0:	9801      	ldr	r0, [sp, #4]
   262d2:	f002 fa6d 	bl	287b0 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   262d6:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   262d8:	4427      	add	r7, r4
		data += partial_size;
   262da:	4426      	add	r6, r4
	} while (size && partial_size);
   262dc:	d001      	beq.n	262e2 <ring_buf_put+0x2e>
   262de:	2c00      	cmp	r4, #0
   262e0:	d1ee      	bne.n	262c0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   262e2:	4639      	mov	r1, r7
   262e4:	4640      	mov	r0, r8
   262e6:	f7ff ffc9 	bl	2627c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   262ea:	4638      	mov	r0, r7
   262ec:	b002      	add	sp, #8
   262ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000262f2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   262f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   262f6:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   262f8:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   262fa:	42b3      	cmp	r3, r6
{
   262fc:	4604      	mov	r4, r0
   262fe:	460f      	mov	r7, r1
   26300:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   26302:	d907      	bls.n	26314 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   26304:	6905      	ldr	r5, [r0, #16]
   26306:	f7ff ff78 	bl	261fa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   2630a:	fbb0 f1f5 	udiv	r1, r0, r5
   2630e:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
   26310:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   26314:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   26316:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   26318:	6923      	ldr	r3, [r4, #16]
   2631a:	b185      	cbz	r5, 2633e <ring_buf_get_claim+0x4c>
   2631c:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   2631e:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   26320:	4540      	cmp	r0, r8
   26322:	bf28      	it	cs
   26324:	4640      	movcs	r0, r8
   26326:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   26328:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   2632a:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   2632c:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   2632e:	bf28      	it	cs
   26330:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   26332:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
   26334:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   26336:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   26338:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   2633a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2633e:	fbb1 f5f3 	udiv	r5, r1, r3
   26342:	fb03 1515 	mls	r5, r3, r5, r1
   26346:	e7ea      	b.n	2631e <ring_buf_get_claim+0x2c>

00026348 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   26348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   2634a:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   2634c:	68c3      	ldr	r3, [r0, #12]
   2634e:	42b3      	cmp	r3, r6
{
   26350:	4605      	mov	r5, r0
   26352:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   26354:	d914      	bls.n	26380 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   26356:	6907      	ldr	r7, [r0, #16]
   26358:	f7ff ff4f 	bl	261fa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   2635c:	fbb0 f1f7 	udiv	r1, r0, r7
   26360:	3901      	subs	r1, #1
   26362:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
   26366:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   26368:	6829      	ldr	r1, [r5, #0]
   2636a:	4421      	add	r1, r4
   2636c:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   2636e:	bf9f      	itttt	ls
   26370:	1ac9      	subls	r1, r1, r3
   26372:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   26374:	60e9      	strls	r1, [r5, #12]

	return 0;
   26376:	2000      	movls	r0, #0
		return -EINVAL;
   26378:	bf88      	it	hi
   2637a:	f06f 0015 	mvnhi.w	r0, #21
}
   2637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   26380:	2300      	movs	r3, #0
   26382:	e7f1      	b.n	26368 <ring_buf_get_finish+0x20>

00026384 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   26384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26388:	4680      	mov	r8, r0
   2638a:	460d      	mov	r5, r1
   2638c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2638e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   26390:	4632      	mov	r2, r6
   26392:	a901      	add	r1, sp, #4
   26394:	4640      	mov	r0, r8
   26396:	f7ff ffac 	bl	262f2 <ring_buf_get_claim>
   2639a:	4604      	mov	r4, r0
		if (data) {
   2639c:	b12d      	cbz	r5, 263aa <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   2639e:	4602      	mov	r2, r0
   263a0:	9901      	ldr	r1, [sp, #4]
   263a2:	4628      	mov	r0, r5
   263a4:	f002 fa04 	bl	287b0 <memcpy>
			data += partial_size;
   263a8:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   263aa:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   263ac:	4427      	add	r7, r4
	} while (size && partial_size);
   263ae:	d001      	beq.n	263b4 <ring_buf_get+0x30>
   263b0:	2c00      	cmp	r4, #0
   263b2:	d1ed      	bne.n	26390 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   263b4:	4639      	mov	r1, r7
   263b6:	4640      	mov	r0, r8
   263b8:	f7ff ffc6 	bl	26348 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   263bc:	4638      	mov	r0, r7
   263be:	b002      	add	sp, #8
   263c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000263c4 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   263c4:	4602      	mov	r2, r0
   263c6:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   263c8:	68c0      	ldr	r0, [r0, #12]
   263ca:	6814      	ldr	r4, [r2, #0]
   263cc:	42a0      	cmp	r0, r4
   263ce:	d904      	bls.n	263da <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   263d0:	3801      	subs	r0, #1
   263d2:	1b00      	subs	r0, r0, r4
   263d4:	6008      	str	r0, [r1, #0]

		return false;
   263d6:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   263d8:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   263da:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   263dc:	b918      	cbnz	r0, 263e6 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   263de:	3b01      	subs	r3, #1
   263e0:	1b1b      	subs	r3, r3, r4
   263e2:	600b      	str	r3, [r1, #0]
		return false;
   263e4:	e7f8      	b.n	263d8 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   263e6:	1b1b      	subs	r3, r3, r4
   263e8:	600b      	str	r3, [r1, #0]
	return true;
   263ea:	2001      	movs	r0, #1
   263ec:	e7f4      	b.n	263d8 <free_space+0x14>

000263ee <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   263ee:	b510      	push	{r4, lr}
   263f0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   263f2:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   263f4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   263f6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   263f8:	07d2      	lsls	r2, r2, #31
   263fa:	d502      	bpl.n	26402 <idx_inc+0x14>
		return i & (buffer->size - 1);
   263fc:	3b01      	subs	r3, #1
   263fe:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   26400:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   26402:	4298      	cmp	r0, r3
   26404:	bf28      	it	cs
   26406:	1ac0      	subcs	r0, r0, r3
   26408:	e7fa      	b.n	26400 <idx_inc+0x12>

0002640a <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2640a:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2640c:	69c2      	ldr	r2, [r0, #28]
{
   2640e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   26410:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26412:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   26414:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26418:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2641c:	462a      	mov	r2, r5
   2641e:	6801      	ldr	r1, [r0, #0]
{
   26420:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26422:	f7ff ffe4 	bl	263ee <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26426:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26428:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2642a:	462a      	mov	r2, r5
   2642c:	4620      	mov	r0, r4
   2642e:	f7ff ffde 	bl	263ee <idx_inc>
   26432:	6060      	str	r0, [r4, #4]
}
   26434:	bd38      	pop	{r3, r4, r5, pc}

00026436 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   26436:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2643a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2643e:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   26442:	461f      	mov	r7, r3
	*user_packet = false;
   26444:	2300      	movs	r3, #0
   26446:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   26448:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2644c:	f003 0303 	and.w	r3, r3, #3
   26450:	2b02      	cmp	r3, #2
{
   26452:	4604      	mov	r4, r0
   26454:	468b      	mov	fp, r1
   26456:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26458:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2645c:	d103      	bne.n	26466 <drop_item_locked+0x30>
		return item->skip.len;
   2645e:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   26462:	08ad      	lsrs	r5, r5, #2
   26464:	d12e      	bne.n	264c4 <drop_item_locked+0x8e>
   26466:	69a3      	ldr	r3, [r4, #24]
   26468:	4630      	mov	r0, r6
   2646a:	4798      	blx	r3
   2646c:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   2646e:	f1b8 0f00 	cmp.w	r8, #0
   26472:	d036      	beq.n	264e2 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   26474:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   26478:	079b      	lsls	r3, r3, #30
   2647a:	d52f      	bpl.n	264dc <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   2647c:	f10b 0101 	add.w	r1, fp, #1
   26480:	4620      	mov	r0, r4
   26482:	f7ff ffc2 	bl	2640a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26486:	6861      	ldr	r1, [r4, #4]
   26488:	462a      	mov	r2, r5
   2648a:	4620      	mov	r0, r4
   2648c:	f7ff ffaf 	bl	263ee <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26490:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26492:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26494:	462a      	mov	r2, r5
   26496:	4620      	mov	r0, r4
   26498:	f7ff ffa9 	bl	263ee <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2649c:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2649e:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   264a0:	68e1      	ldr	r1, [r4, #12]
   264a2:	4620      	mov	r0, r4
   264a4:	f7ff ffa3 	bl	263ee <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   264a8:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   264aa:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   264ae:	f002 0203 	and.w	r2, r2, #3
   264b2:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   264b4:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   264b8:	d10c      	bne.n	264d4 <drop_item_locked+0x9e>
		return item->skip.len;
   264ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   264be:	089b      	lsrs	r3, r3, #2
   264c0:	d008      	beq.n	264d4 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   264c2:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   264c4:	68e1      	ldr	r1, [r4, #12]
   264c6:	462a      	mov	r2, r5
   264c8:	4620      	mov	r0, r4
   264ca:	f7ff ff90 	bl	263ee <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   264ce:	e9c4 0002 	strd	r0, r0, [r4, #8]
   264d2:	e007      	b.n	264e4 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   264d4:	69a3      	ldr	r3, [r4, #24]
   264d6:	4630      	mov	r0, r6
   264d8:	4798      	blx	r3
   264da:	4405      	add	r5, r0
			*user_packet = true;
   264dc:	2301      	movs	r3, #1
   264de:	703b      	strb	r3, [r7, #0]
   264e0:	e7f0      	b.n	264c4 <drop_item_locked+0x8e>
		item = NULL;
   264e2:	4646      	mov	r6, r8
	}

	return item;
}
   264e4:	4630      	mov	r0, r6
   264e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000264ea <mpsc_pbuf_init>:
{
   264ea:	b538      	push	{r3, r4, r5, lr}
   264ec:	460d      	mov	r5, r1
   264ee:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   264f0:	221c      	movs	r2, #28
   264f2:	2100      	movs	r1, #0
   264f4:	f002 f967 	bl	287c6 <memset>
	buffer->get_wlen = cfg->get_wlen;
   264f8:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   264fa:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   264fc:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   264fe:	68ab      	ldr	r3, [r5, #8]
   26500:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   26502:	682b      	ldr	r3, [r5, #0]
   26504:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   26506:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   26508:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   2650a:	b122      	cbz	r2, 26516 <mpsc_pbuf_init+0x2c>
   2650c:	1e51      	subs	r1, r2, #1
   2650e:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   26510:	bf08      	it	eq
   26512:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   26516:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26518:	2201      	movs	r2, #1
   2651a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2651e:	2100      	movs	r1, #0
}
   26520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26524:	f004 bc04 	b.w	2ad30 <z_impl_k_sem_init>

00026528 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   26528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2652c:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   2652e:	6a03      	ldr	r3, [r0, #32]
   26530:	3b01      	subs	r3, #1
   26532:	428b      	cmp	r3, r1
{
   26534:	b085      	sub	sp, #20
   26536:	4604      	mov	r4, r0
   26538:	460f      	mov	r7, r1
   2653a:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   2653c:	d364      	bcc.n	26608 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   2653e:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   26540:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   26542:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
   26546:	f04f 0320 	mov.w	r3, #32
   2654a:	f3ef 8611 	mrs	r6, BASEPRI
   2654e:	f383 8812 	msr	BASEPRI_MAX, r3
   26552:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   26556:	a903      	add	r1, sp, #12
   26558:	4620      	mov	r0, r4
   2655a:	f7ff ff33 	bl	263c4 <free_space>
		if (free_wlen >= wlen) {
   2655e:	9903      	ldr	r1, [sp, #12]
   26560:	42b9      	cmp	r1, r7
   26562:	d321      	bcc.n	265a8 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   26564:	6821      	ldr	r1, [r4, #0]
			item =
   26566:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   26568:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   2656c:	f022 0203 	bic.w	r2, r2, #3
   26570:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   26574:	4620      	mov	r0, r4
   26576:	463a      	mov	r2, r7
			item =
   26578:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   2657c:	f7ff ff37 	bl	263ee <idx_inc>
		cont = false;
   26580:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   26582:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   26584:	f386 8811 	msr	BASEPRI, r6
   26588:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   2658c:	2b00      	cmp	r3, #0
   2658e:	d03d      	beq.n	2660c <mpsc_pbuf_alloc+0xe4>
   26590:	2d00      	cmp	r5, #0
   26592:	d0d8      	beq.n	26546 <mpsc_pbuf_alloc+0x1e>
   26594:	f89d 300b 	ldrb.w	r3, [sp, #11]
   26598:	2b00      	cmp	r3, #0
   2659a:	d0d4      	beq.n	26546 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   2659c:	4629      	mov	r1, r5
   2659e:	6963      	ldr	r3, [r4, #20]
   265a0:	4620      	mov	r0, r4
   265a2:	4798      	blx	r3
			dropped_item = NULL;
   265a4:	2500      	movs	r5, #0
   265a6:	e7ce      	b.n	26546 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   265a8:	b128      	cbz	r0, 265b6 <mpsc_pbuf_alloc+0x8e>
   265aa:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   265ac:	4620      	mov	r0, r4
   265ae:	f7ff ff2c 	bl	2640a <add_skip_item>
			cont = true;
   265b2:	9b01      	ldr	r3, [sp, #4]
   265b4:	e7e6      	b.n	26584 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   265b6:	ea58 0309 	orrs.w	r3, r8, r9
   265ba:	d017      	beq.n	265ec <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   265bc:	f004 fab9 	bl	2ab32 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   265c0:	b9a0      	cbnz	r0, 265ec <mpsc_pbuf_alloc+0xc4>
   265c2:	f386 8811 	msr	BASEPRI, r6
   265c6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   265ca:	4642      	mov	r2, r8
   265cc:	464b      	mov	r3, r9
   265ce:	4658      	mov	r0, fp
   265d0:	f7fe fa02 	bl	249d8 <z_impl_k_sem_take>
	__asm__ volatile(
   265d4:	f04f 0320 	mov.w	r3, #32
   265d8:	f3ef 8611 	mrs	r6, BASEPRI
   265dc:	f383 8812 	msr	BASEPRI_MAX, r3
   265e0:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   265e4:	fab0 f380 	clz	r3, r0
   265e8:	095b      	lsrs	r3, r3, #5
   265ea:	e7cb      	b.n	26584 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   265ec:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   265ee:	9903      	ldr	r1, [sp, #12]
   265f0:	f10d 030b 	add.w	r3, sp, #11
   265f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   265f8:	4620      	mov	r0, r4
   265fa:	f7ff ff1c 	bl	26436 <drop_item_locked>
			cont = dropped_item != NULL;
   265fe:	1e03      	subs	r3, r0, #0
   26600:	4605      	mov	r5, r0
   26602:	bf18      	it	ne
   26604:	2301      	movne	r3, #1
   26606:	e7bd      	b.n	26584 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   26608:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2660c:	4650      	mov	r0, sl
   2660e:	b005      	add	sp, #20
   26610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026614 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   26614:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   26616:	6983      	ldr	r3, [r0, #24]
{
   26618:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2661a:	4608      	mov	r0, r1
{
   2661c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2661e:	4798      	blx	r3
   26620:	4602      	mov	r2, r0
   26622:	f04f 0320 	mov.w	r3, #32
   26626:	f3ef 8611 	mrs	r6, BASEPRI
   2662a:	f383 8812 	msr	BASEPRI_MAX, r3
   2662e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   26632:	782b      	ldrb	r3, [r5, #0]
   26634:	f043 0301 	orr.w	r3, r3, #1
   26638:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2663a:	6861      	ldr	r1, [r4, #4]
   2663c:	4620      	mov	r0, r4
   2663e:	f7ff fed6 	bl	263ee <idx_inc>
   26642:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
   26644:	f386 8811 	msr	BASEPRI, r6
   26648:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   2664c:	bd70      	pop	{r4, r5, r6, pc}

0002664e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2664e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26652:	4604      	mov	r4, r0
	__asm__ volatile(
   26654:	f04f 0320 	mov.w	r3, #32
   26658:	f3ef 8611 	mrs	r6, BASEPRI
   2665c:	f383 8812 	msr	BASEPRI_MAX, r3
   26660:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26664:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   26668:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2666a:	bf88      	it	hi
   2666c:	6a23      	ldrhi	r3, [r4, #32]
   2666e:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   26670:	b1f3      	cbz	r3, 266b0 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   26672:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   26674:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   26678:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   2667c:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   26680:	d016      	beq.n	266b0 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   26682:	2b02      	cmp	r3, #2
   26684:	d103      	bne.n	2668e <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   26686:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   2668a:	08ad      	lsrs	r5, r5, #2
   2668c:	d115      	bne.n	266ba <mpsc_pbuf_claim+0x6c>
   2668e:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   26690:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   26692:	d50f      	bpl.n	266b4 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   26694:	f042 0202 	orr.w	r2, r2, #2
   26698:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2669c:	4640      	mov	r0, r8
   2669e:	4798      	blx	r3
   266a0:	4639      	mov	r1, r7
   266a2:	4602      	mov	r2, r0
   266a4:	4620      	mov	r0, r4
   266a6:	f7ff fea2 	bl	263ee <idx_inc>
		cont = false;
   266aa:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   266ac:	60a0      	str	r0, [r4, #8]
   266ae:	e011      	b.n	266d4 <mpsc_pbuf_claim+0x86>
			item = NULL;
   266b0:	4698      	mov	r8, r3
   266b2:	e00f      	b.n	266d4 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   266b4:	4640      	mov	r0, r8
   266b6:	4798      	blx	r3
   266b8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   266ba:	68a1      	ldr	r1, [r4, #8]
   266bc:	462a      	mov	r2, r5
   266be:	4620      	mov	r0, r4
   266c0:	f7ff fe95 	bl	263ee <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   266c4:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   266c6:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   266c8:	462a      	mov	r2, r5
   266ca:	4620      	mov	r0, r4
   266cc:	f7ff fe8f 	bl	263ee <idx_inc>
				cont = true;
   266d0:	2301      	movs	r3, #1
				buffer->rd_idx =
   266d2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   266d4:	f386 8811 	msr	BASEPRI, r6
   266d8:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   266dc:	2b00      	cmp	r3, #0
   266de:	d1b9      	bne.n	26654 <mpsc_pbuf_claim+0x6>

	return item;
}
   266e0:	4640      	mov	r0, r8
   266e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000266e6 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   266e6:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   266e8:	6983      	ldr	r3, [r0, #24]
{
   266ea:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   266ec:	4608      	mov	r0, r1
{
   266ee:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   266f0:	4798      	blx	r3
   266f2:	4602      	mov	r2, r0
	__asm__ volatile(
   266f4:	f04f 0320 	mov.w	r3, #32
   266f8:	f3ef 8611 	mrs	r6, BASEPRI
   266fc:	f383 8812 	msr	BASEPRI_MAX, r3
   26700:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   26704:	782b      	ldrb	r3, [r5, #0]
   26706:	f36f 0300 	bfc	r3, #0, #1
   2670a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2670c:	6923      	ldr	r3, [r4, #16]
   2670e:	079b      	lsls	r3, r3, #30
   26710:	d505      	bpl.n	2671e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   26712:	68e1      	ldr	r1, [r4, #12]
   26714:	69e3      	ldr	r3, [r4, #28]
   26716:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2671a:	429d      	cmp	r5, r3
   2671c:	d112      	bne.n	26744 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2671e:	782b      	ldrb	r3, [r5, #0]
   26720:	f36f 0341 	bfc	r3, #1, #1
   26724:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26726:	68e1      	ldr	r1, [r4, #12]
   26728:	4620      	mov	r0, r4
   2672a:	f7ff fe60 	bl	263ee <idx_inc>
   2672e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26730:	f386 8811 	msr	BASEPRI, r6
   26734:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   26738:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2673c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26740:	f7fe b924 	b.w	2498c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   26744:	682b      	ldr	r3, [r5, #0]
   26746:	f360 039f 	bfi	r3, r0, #2, #30
   2674a:	602b      	str	r3, [r5, #0]
   2674c:	e7f0      	b.n	26730 <mpsc_pbuf_free+0x4a>

0002674e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2674e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   26752:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   26754:	bf8a      	itet	hi
   26756:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   26758:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2675a:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2675c:	1e18      	subs	r0, r3, #0
   2675e:	bf18      	it	ne
   26760:	2001      	movne	r0, #1
   26762:	4770      	bx	lr

00026764 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   26764:	070b      	lsls	r3, r1, #28
   26766:	d504      	bpl.n	26772 <foldcase+0xe>
   26768:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2676c:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   2676e:	bf98      	it	ls
   26770:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   26772:	4770      	bx	lr

00026774 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   26774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26778:	b087      	sub	sp, #28
   2677a:	468a      	mov	sl, r1
   2677c:	4614      	mov	r4, r2
   2677e:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   26780:	4605      	mov	r5, r0
   26782:	b918      	cbnz	r0, 2678c <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   26784:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   26786:	b007      	add	sp, #28
   26788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   2678c:	2900      	cmp	r1, #0
   2678e:	d0f9      	beq.n	26784 <fnmatchx+0x10>
    if (recursion-- == 0)
   26790:	9b02      	ldr	r3, [sp, #8]
   26792:	2b00      	cmp	r3, #0
   26794:	f000 8113 	beq.w	269be <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   26798:	f004 0304 	and.w	r3, r4, #4
   2679c:	460a      	mov	r2, r1
   2679e:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   267a0:	46a9      	mov	r9, r5
   267a2:	4621      	mov	r1, r4
   267a4:	f819 0b01 	ldrb.w	r0, [r9], #1
   267a8:	f7ff ffdc 	bl	26764 <foldcase>
   267ac:	4603      	mov	r3, r0
   267ae:	b2c0      	uxtb	r0, r0
   267b0:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   267b2:	7817      	ldrb	r7, [r2, #0]
   267b4:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
   267b6:	d025      	beq.n	26804 <fnmatchx+0x90>
   267b8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   267bc:	d10b      	bne.n	267d6 <fnmatchx+0x62>
   267be:	b1c8      	cbz	r0, 267f4 <fnmatchx+0x80>
   267c0:	282a      	cmp	r0, #42	; 0x2a
   267c2:	d036      	beq.n	26832 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
   267c4:	4621      	mov	r1, r4
   267c6:	4638      	mov	r0, r7
   267c8:	f7ff ffcc 	bl	26764 <foldcase>
   267cc:	4286      	cmp	r6, r0
   267ce:	f102 0201 	add.w	r2, r2, #1
   267d2:	d01e      	beq.n	26812 <fnmatchx+0x9e>
   267d4:	e7d6      	b.n	26784 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   267d6:	285b      	cmp	r0, #91	; 0x5b
   267d8:	d07b      	beq.n	268d2 <fnmatchx+0x15e>
   267da:	285c      	cmp	r0, #92	; 0x5c
   267dc:	d1f2      	bne.n	267c4 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   267de:	07e0      	lsls	r0, r4, #31
   267e0:	d4f0      	bmi.n	267c4 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   267e2:	7868      	ldrb	r0, [r5, #1]
   267e4:	f7ff ffbe 	bl	26764 <foldcase>
   267e8:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   267ec:	bf18      	it	ne
   267ee:	f105 0902 	addne.w	r9, r5, #2
   267f2:	e7e7      	b.n	267c4 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   267f4:	06e3      	lsls	r3, r4, #27
   267f6:	d501      	bpl.n	267fc <fnmatchx+0x88>
   267f8:	2f2f      	cmp	r7, #47	; 0x2f
   267fa:	d0c4      	beq.n	26786 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   267fc:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   267fe:	bf18      	it	ne
   26800:	2001      	movne	r0, #1
   26802:	e7c0      	b.n	26786 <fnmatchx+0x12>
            if (*string == EOS)
   26804:	2f00      	cmp	r7, #0
   26806:	d0bd      	beq.n	26784 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   26808:	2f2f      	cmp	r7, #47	; 0x2f
   2680a:	d104      	bne.n	26816 <fnmatchx+0xa2>
   2680c:	07a6      	lsls	r6, r4, #30
   2680e:	d4b9      	bmi.n	26784 <fnmatchx+0x10>
            ++string;
   26810:	3201      	adds	r2, #1
            break;
   26812:	464d      	mov	r5, r9
   26814:	e7c4      	b.n	267a0 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   26816:	2f2e      	cmp	r7, #46	; 0x2e
   26818:	d1fa      	bne.n	26810 <fnmatchx+0x9c>
   2681a:	9b04      	ldr	r3, [sp, #16]
   2681c:	2b00      	cmp	r3, #0
   2681e:	d0f7      	beq.n	26810 <fnmatchx+0x9c>
   26820:	4552      	cmp	r2, sl
   26822:	d0af      	beq.n	26784 <fnmatchx+0x10>
                (string == stringstart ||
   26824:	07a5      	lsls	r5, r4, #30
   26826:	d5f3      	bpl.n	26810 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   26828:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   2682c:	2b2f      	cmp	r3, #47	; 0x2f
   2682e:	d1ef      	bne.n	26810 <fnmatchx+0x9c>
   26830:	e7a8      	b.n	26784 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   26832:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   26834:	f7ff ff96 	bl	26764 <foldcase>
   26838:	b2c1      	uxtb	r1, r0
            while (c == '*')
   2683a:	292a      	cmp	r1, #42	; 0x2a
   2683c:	d018      	beq.n	26870 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2683e:	2f2e      	cmp	r7, #46	; 0x2e
   26840:	d109      	bne.n	26856 <fnmatchx+0xe2>
   26842:	9b04      	ldr	r3, [sp, #16]
   26844:	b13b      	cbz	r3, 26856 <fnmatchx+0xe2>
   26846:	4552      	cmp	r2, sl
   26848:	d09c      	beq.n	26784 <fnmatchx+0x10>
                (string == stringstart ||
   2684a:	07a0      	lsls	r0, r4, #30
   2684c:	d503      	bpl.n	26856 <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   2684e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   26852:	2b2f      	cmp	r3, #47	; 0x2f
   26854:	d096      	beq.n	26784 <fnmatchx+0x10>
            if (c == EOS) {
   26856:	b979      	cbnz	r1, 26878 <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
   26858:	f014 0002 	ands.w	r0, r4, #2
   2685c:	d093      	beq.n	26786 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   2685e:	06e3      	lsls	r3, r4, #27
   26860:	f100 80af 	bmi.w	269c2 <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
   26864:	212f      	movs	r1, #47	; 0x2f
   26866:	4610      	mov	r0, r2
   26868:	f001 ff3e 	bl	286e8 <strchr>
                        0 : FNM_NOMATCH;
   2686c:	3800      	subs	r0, #0
   2686e:	e7c6      	b.n	267fe <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
   26870:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   26874:	4621      	mov	r1, r4
   26876:	e7dd      	b.n	26834 <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   26878:	292f      	cmp	r1, #47	; 0x2f
   2687a:	d021      	beq.n	268c0 <fnmatchx+0x14c>
    if (recursion-- == 0)
   2687c:	9b02      	ldr	r3, [sp, #8]
   2687e:	4616      	mov	r6, r2
   26880:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   26882:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   26886:	f004 0a02 	and.w	sl, r4, #2
   2688a:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   2688c:	4621      	mov	r1, r4
   2688e:	f89b 0000 	ldrb.w	r0, [fp]
   26892:	f7ff ff67 	bl	26764 <foldcase>
   26896:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   2689a:	f106 0601 	add.w	r6, r6, #1
   2689e:	f43f af71 	beq.w	26784 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   268a2:	463b      	mov	r3, r7
   268a4:	4642      	mov	r2, r8
   268a6:	4659      	mov	r1, fp
   268a8:	4648      	mov	r0, r9
   268aa:	f7ff ff63 	bl	26774 <fnmatchx>
   268ae:	2801      	cmp	r0, #1
   268b0:	f47f af69 	bne.w	26786 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   268b4:	2d2f      	cmp	r5, #47	; 0x2f
   268b6:	d1e8      	bne.n	2688a <fnmatchx+0x116>
   268b8:	f1ba 0f00 	cmp.w	sl, #0
   268bc:	d0e5      	beq.n	2688a <fnmatchx+0x116>
   268be:	e761      	b.n	26784 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   268c0:	07a7      	lsls	r7, r4, #30
   268c2:	d5db      	bpl.n	2687c <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
   268c4:	4610      	mov	r0, r2
   268c6:	f001 ff0f 	bl	286e8 <strchr>
   268ca:	4602      	mov	r2, r0
   268cc:	2800      	cmp	r0, #0
   268ce:	d1a0      	bne.n	26812 <fnmatchx+0x9e>
   268d0:	e758      	b.n	26784 <fnmatchx+0x10>
            if (*string == EOS)
   268d2:	2f00      	cmp	r7, #0
   268d4:	f43f af56 	beq.w	26784 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   268d8:	2f2f      	cmp	r7, #47	; 0x2f
   268da:	d102      	bne.n	268e2 <fnmatchx+0x16e>
   268dc:	07a6      	lsls	r6, r4, #30
   268de:	f53f af51 	bmi.w	26784 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   268e2:	4621      	mov	r1, r4
   268e4:	4638      	mov	r0, r7
   268e6:	f7ff ff3d 	bl	26764 <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   268ea:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
   268ec:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   268ee:	2b21      	cmp	r3, #33	; 0x21
   268f0:	d001      	beq.n	268f6 <fnmatchx+0x182>
   268f2:	2b5e      	cmp	r3, #94	; 0x5e
   268f4:	d123      	bne.n	2693e <fnmatchx+0x1ca>
        ++pattern;
   268f6:	3502      	adds	r5, #2
   268f8:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   268fa:	9301      	str	r3, [sp, #4]
    need = 1;
   268fc:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   268fe:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   26902:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   26906:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   26908:	462e      	mov	r6, r5
   2690a:	4621      	mov	r1, r4
   2690c:	f816 0b01 	ldrb.w	r0, [r6], #1
   26910:	9305      	str	r3, [sp, #20]
   26912:	f7ff ff27 	bl	26764 <foldcase>
   26916:	fa5f f880 	uxtb.w	r8, r0
   2691a:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   2691e:	9b05      	ldr	r3, [sp, #20]
   26920:	d110      	bne.n	26944 <fnmatchx+0x1d0>
   26922:	bb0b      	cbnz	r3, 26968 <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
   26924:	9b01      	ldr	r3, [sp, #4]
   26926:	455b      	cmp	r3, fp
   26928:	f43f af2c 	beq.w	26784 <fnmatchx+0x10>
            if (r == (void *)-1) {
   2692c:	1c73      	adds	r3, r6, #1
   2692e:	d103      	bne.n	26938 <fnmatchx+0x1c4>
                if (*string != '[')
   26930:	2f5b      	cmp	r7, #91	; 0x5b
   26932:	f47f af27 	bne.w	26784 <fnmatchx+0x10>
   26936:	464e      	mov	r6, r9
            ++string;
   26938:	3201      	adds	r2, #1
            break;
   2693a:	46b1      	mov	r9, r6
   2693c:	e769      	b.n	26812 <fnmatchx+0x9e>
   2693e:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   26940:	2300      	movs	r3, #0
   26942:	e7da      	b.n	268fa <fnmatchx+0x186>
        if (c == '/')
   26944:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
   26948:	d0f2      	beq.n	26930 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   2694a:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
   2694e:	d107      	bne.n	26960 <fnmatchx+0x1ec>
   26950:	9b03      	ldr	r3, [sp, #12]
   26952:	b94b      	cbnz	r3, 26968 <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
   26954:	7868      	ldrb	r0, [r5, #1]
   26956:	f7ff ff05 	bl	26764 <foldcase>
   2695a:	1cae      	adds	r6, r5, #2
   2695c:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
   26960:	f1b8 0f00 	cmp.w	r8, #0
   26964:	f43f af0e 	beq.w	26784 <fnmatchx+0x10>
        if (*pattern == '-' 
   26968:	7833      	ldrb	r3, [r6, #0]
   2696a:	2b2d      	cmp	r3, #45	; 0x2d
   2696c:	d120      	bne.n	269b0 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   2696e:	7870      	ldrb	r0, [r6, #1]
   26970:	4621      	mov	r1, r4
   26972:	f7ff fef7 	bl	26764 <foldcase>
   26976:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   2697a:	d019      	beq.n	269b0 <fnmatchx+0x23c>
   2697c:	285d      	cmp	r0, #93	; 0x5d
   2697e:	d017      	beq.n	269b0 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   26980:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   26982:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   26986:	d10a      	bne.n	2699e <fnmatchx+0x22a>
   26988:	9b03      	ldr	r3, [sp, #12]
   2698a:	b943      	cbnz	r3, 2699e <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
   2698c:	78b0      	ldrb	r0, [r6, #2]
   2698e:	f7ff fee9 	bl	26764 <foldcase>
            if (c2 == EOS)
   26992:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   26996:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   2699a:	f43f aef3 	beq.w	26784 <fnmatchx+0x10>
            if (c <= test && test <= c2)
   2699e:	9b00      	ldr	r3, [sp, #0]
   269a0:	4543      	cmp	r3, r8
   269a2:	db03      	blt.n	269ac <fnmatchx+0x238>
                ok = 1;
   269a4:	4283      	cmp	r3, r0
   269a6:	bfd8      	it	le
   269a8:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   269ac:	2300      	movs	r3, #0
   269ae:	e7ab      	b.n	26908 <fnmatchx+0x194>
        } else if (c == test)
   269b0:	9b00      	ldr	r3, [sp, #0]
   269b2:	4635      	mov	r5, r6
   269b4:	4543      	cmp	r3, r8
   269b6:	bf08      	it	eq
   269b8:	f04f 0b01 	moveq.w	fp, #1
   269bc:	e7f6      	b.n	269ac <fnmatchx+0x238>
        return FNM_NORES;
   269be:	2003      	movs	r0, #3
   269c0:	e6e1      	b.n	26786 <fnmatchx+0x12>
                return 0;
   269c2:	4608      	mov	r0, r1
   269c4:	e6df      	b.n	26786 <fnmatchx+0x12>

000269c6 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   269c6:	2340      	movs	r3, #64	; 0x40
   269c8:	f7ff bed4 	b.w	26774 <fnmatchx>

000269cc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   269cc:	4770      	bx	lr

000269ce <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   269ce:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   269d0:	075b      	lsls	r3, r3, #29
   269d2:	d40b      	bmi.n	269ec <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   269d4:	6803      	ldr	r3, [r0, #0]
   269d6:	8840      	ldrh	r0, [r0, #2]
   269d8:	f3c3 2349 	ubfx	r3, r3, #9, #10
   269dc:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   269e0:	4418      	add	r0, r3
   269e2:	3013      	adds	r0, #19
   269e4:	f020 0007 	bic.w	r0, r0, #7
   269e8:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   269ea:	4770      	bx	lr
	return 0;
   269ec:	2000      	movs	r0, #0
}
   269ee:	4770      	bx	lr

000269f0 <default_get_timestamp>:
   269f0:	f003 bdb1 	b.w	2a556 <sys_clock_cycle_get_32>

000269f4 <dummy_timestamp>:
   269f4:	2000      	movs	r0, #0
   269f6:	4770      	bx	lr

000269f8 <z_log_vprintk>:
{
   269f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   269fa:	2300      	movs	r3, #0
   269fc:	e9cd 0101 	strd	r0, r1, [sp, #4]
   26a00:	9300      	str	r3, [sp, #0]
   26a02:	461a      	mov	r2, r3
   26a04:	4619      	mov	r1, r3
   26a06:	4618      	mov	r0, r3
   26a08:	f7e1 f89a 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
   26a0c:	b005      	add	sp, #20
   26a0e:	f85d fb04 	ldr.w	pc, [sp], #4

00026a12 <notify_drop>:
	z_log_dropped(true);
   26a12:	2001      	movs	r0, #1
   26a14:	f7e0 bc4c 	b.w	72b0 <z_log_dropped>

00026a18 <get_msg>:
{
   26a18:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   26a1a:	f7e0 fcbf 	bl	739c <z_log_msg2_claim>
}
   26a1e:	bd08      	pop	{r3, pc}

00026a20 <z_log_get_tag>:
}
   26a20:	2000      	movs	r0, #0
   26a22:	4770      	bx	lr

00026a24 <log_backend_disable>:
	backend->cb->active = false;
   26a24:	6843      	ldr	r3, [r0, #4]
   26a26:	2100      	movs	r1, #0
   26a28:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   26a2a:	f7e0 be49 	b.w	76c0 <backend_filter_set>

00026a2e <buffer_write>:
{
   26a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a30:	4606      	mov	r6, r0
   26a32:	460d      	mov	r5, r1
   26a34:	4614      	mov	r4, r2
   26a36:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   26a38:	4621      	mov	r1, r4
   26a3a:	4628      	mov	r0, r5
   26a3c:	463a      	mov	r2, r7
   26a3e:	47b0      	blx	r6
	} while (len != 0);
   26a40:	1a24      	subs	r4, r4, r0
		buf += processed;
   26a42:	4405      	add	r5, r0
	} while (len != 0);
   26a44:	d1f8      	bne.n	26a38 <buffer_write+0xa>
}
   26a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026a48 <log_output_flush>:
		     output->control_block->offset,
   26a48:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   26a4a:	6881      	ldr	r1, [r0, #8]
{
   26a4c:	b510      	push	{r4, lr}
   26a4e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   26a50:	e9d2 2300 	ldrd	r2, r3, [r2]
   26a54:	6800      	ldr	r0, [r0, #0]
   26a56:	f7ff ffea 	bl	26a2e <buffer_write>
	output->control_block->offset = 0;
   26a5a:	6863      	ldr	r3, [r4, #4]
   26a5c:	2200      	movs	r2, #0
   26a5e:	601a      	str	r2, [r3, #0]
}
   26a60:	bd10      	pop	{r4, pc}

00026a62 <out_func>:
{
   26a62:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   26a64:	684b      	ldr	r3, [r1, #4]
   26a66:	681a      	ldr	r2, [r3, #0]
   26a68:	68cb      	ldr	r3, [r1, #12]
   26a6a:	429a      	cmp	r2, r3
{
   26a6c:	4605      	mov	r5, r0
   26a6e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26a70:	d102      	bne.n	26a78 <out_func+0x16>
		log_output_flush(out_ctx);
   26a72:	4608      	mov	r0, r1
   26a74:	f7ff ffe8 	bl	26a48 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26a78:	6863      	ldr	r3, [r4, #4]
   26a7a:	f3bf 8f5b 	dmb	ish
   26a7e:	e853 2f00 	ldrex	r2, [r3]
   26a82:	1c51      	adds	r1, r2, #1
   26a84:	e843 1000 	strex	r0, r1, [r3]
   26a88:	2800      	cmp	r0, #0
   26a8a:	d1f8      	bne.n	26a7e <out_func+0x1c>
   26a8c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   26a90:	68a3      	ldr	r3, [r4, #8]
   26a92:	549d      	strb	r5, [r3, r2]
}
   26a94:	2000      	movs	r0, #0
   26a96:	bd38      	pop	{r3, r4, r5, pc}

00026a98 <cr_out_func>:
{
   26a98:	b538      	push	{r3, r4, r5, lr}
   26a9a:	4605      	mov	r5, r0
   26a9c:	460c      	mov	r4, r1
	out_func(c, ctx);
   26a9e:	f7ff ffe0 	bl	26a62 <out_func>
	if (c == '\n') {
   26aa2:	2d0a      	cmp	r5, #10
   26aa4:	d103      	bne.n	26aae <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   26aa6:	4621      	mov	r1, r4
   26aa8:	200d      	movs	r0, #13
   26aaa:	f7ff ffda 	bl	26a62 <out_func>
}
   26aae:	2000      	movs	r0, #0
   26ab0:	bd38      	pop	{r3, r4, r5, pc}

00026ab2 <z_log_msg2_finalize>:
{
   26ab2:	b570      	push	{r4, r5, r6, lr}
   26ab4:	460e      	mov	r6, r1
   26ab6:	4615      	mov	r5, r2
   26ab8:	4619      	mov	r1, r3
	if (!msg) {
   26aba:	4604      	mov	r4, r0
   26abc:	b918      	cbnz	r0, 26ac6 <z_log_msg2_finalize+0x14>
}
   26abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   26ac2:	f7e0 bbf5 	b.w	72b0 <z_log_dropped>
	if (data) {
   26ac6:	b143      	cbz	r3, 26ada <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   26ac8:	f100 030c 	add.w	r3, r0, #12
   26acc:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   26ad0:	4418      	add	r0, r3
   26ad2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   26ad6:	f001 fe6b 	bl	287b0 <memcpy>
	msg->hdr.source = source;
   26ada:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   26ade:	4620      	mov	r0, r4
}
   26ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   26ae4:	f7e0 bd38 	b.w	7558 <z_log_msg2_commit>

00026ae8 <z_impl_z_log_msg2_static_create>:
{
   26ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26aec:	f3c1 2949 	ubfx	r9, r1, #9, #10
   26af0:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   26af4:	444c      	add	r4, r9
   26af6:	3413      	adds	r4, #19
   26af8:	f024 0407 	bic.w	r4, r4, #7
   26afc:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   26afe:	08a0      	lsrs	r0, r4, #2
{
   26b00:	460d      	mov	r5, r1
   26b02:	4690      	mov	r8, r2
   26b04:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   26b06:	f7e0 fc41 	bl	738c <z_log_msg2_alloc>
	if (msg) {
   26b0a:	4604      	mov	r4, r0
   26b0c:	b120      	cbz	r0, 26b18 <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
   26b0e:	464a      	mov	r2, r9
   26b10:	4641      	mov	r1, r8
   26b12:	300c      	adds	r0, #12
   26b14:	f001 fe4c 	bl	287b0 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
   26b18:	463b      	mov	r3, r7
   26b1a:	462a      	mov	r2, r5
   26b1c:	4631      	mov	r1, r6
   26b1e:	4620      	mov	r0, r4
}
   26b20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
   26b24:	f7ff bfc5 	b.w	26ab2 <z_log_msg2_finalize>

00026b28 <log_halt>:
   26b28:	684b      	ldr	r3, [r1, #4]
   26b2a:	2000      	movs	r0, #0
   26b2c:	7158      	strb	r0, [r3, #5]
}
   26b2e:	4770      	bx	lr

00026b30 <log_go>:
	backend->cb->active = true;
   26b30:	684b      	ldr	r3, [r1, #4]
   26b32:	2201      	movs	r2, #1
   26b34:	715a      	strb	r2, [r3, #5]
}
   26b36:	2000      	movs	r0, #0
   26b38:	4770      	bx	lr

00026b3a <cmd_log_self_status>:
{
   26b3a:	b570      	push	{r4, r5, r6, lr}
   26b3c:	4604      	mov	r4, r0
   26b3e:	460d      	mov	r5, r1
   26b40:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   26b42:	f7e1 f98b 	bl	7e5c <shell_state_precheck>
   26b46:	b130      	cbz	r0, 26b56 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   26b48:	69e1      	ldr	r1, [r4, #28]
   26b4a:	4633      	mov	r3, r6
   26b4c:	6809      	ldr	r1, [r1, #0]
   26b4e:	462a      	mov	r2, r5
   26b50:	4620      	mov	r0, r4
   26b52:	f7e1 f8bb 	bl	7ccc <log_status>
}
   26b56:	2000      	movs	r0, #0
   26b58:	bd70      	pop	{r4, r5, r6, pc}

00026b5a <cmd_log_self_enable>:
{
   26b5a:	b570      	push	{r4, r5, r6, lr}
   26b5c:	4604      	mov	r4, r0
   26b5e:	460d      	mov	r5, r1
   26b60:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   26b62:	f7e1 f97b 	bl	7e5c <shell_state_precheck>
   26b66:	b140      	cbz	r0, 26b7a <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   26b68:	69e1      	ldr	r1, [r4, #28]
   26b6a:	4633      	mov	r3, r6
   26b6c:	462a      	mov	r2, r5
   26b6e:	4620      	mov	r0, r4
   26b70:	6809      	ldr	r1, [r1, #0]
}
   26b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   26b76:	f7e1 b9e9 	b.w	7f4c <log_enable>
}
   26b7a:	bd70      	pop	{r4, r5, r6, pc}

00026b7c <log_disable>:
{
   26b7c:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   26b7e:	2400      	movs	r4, #0
   26b80:	9400      	str	r4, [sp, #0]
   26b82:	3304      	adds	r3, #4
   26b84:	3a01      	subs	r2, #1
   26b86:	f7e1 f979 	bl	7e7c <filters_set>
}
   26b8a:	4620      	mov	r0, r4
   26b8c:	b002      	add	sp, #8
   26b8e:	bd10      	pop	{r4, pc}

00026b90 <cmd_log_self_disable>:
{
   26b90:	b570      	push	{r4, r5, r6, lr}
   26b92:	4604      	mov	r4, r0
   26b94:	460d      	mov	r5, r1
   26b96:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   26b98:	f7e1 f960 	bl	7e5c <shell_state_precheck>
   26b9c:	b140      	cbz	r0, 26bb0 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   26b9e:	69e1      	ldr	r1, [r4, #28]
   26ba0:	4633      	mov	r3, r6
   26ba2:	462a      	mov	r2, r5
   26ba4:	4620      	mov	r0, r4
   26ba6:	6809      	ldr	r1, [r1, #0]
}
   26ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   26bac:	f7ff bfe6 	b.w	26b7c <log_disable>
}
   26bb0:	bd70      	pop	{r4, r5, r6, pc}

00026bb2 <cmd_log_self_go>:
{
   26bb2:	b510      	push	{r4, lr}
   26bb4:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   26bb6:	f7e1 f951 	bl	7e5c <shell_state_precheck>
   26bba:	b120      	cbz	r0, 26bc6 <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   26bbc:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   26bbe:	681b      	ldr	r3, [r3, #0]
   26bc0:	685b      	ldr	r3, [r3, #4]
   26bc2:	2201      	movs	r2, #1
   26bc4:	715a      	strb	r2, [r3, #5]
}
   26bc6:	2000      	movs	r0, #0
   26bc8:	bd10      	pop	{r4, pc}

00026bca <cmd_log_self_halt>:
{
   26bca:	b510      	push	{r4, lr}
   26bcc:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   26bce:	f7e1 f945 	bl	7e5c <shell_state_precheck>
   26bd2:	b120      	cbz	r0, 26bde <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   26bd4:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
   26bd6:	681b      	ldr	r3, [r3, #0]
   26bd8:	685b      	ldr	r3, [r3, #4]
   26bda:	2200      	movs	r2, #0
   26bdc:	715a      	strb	r2, [r3, #5]
}
   26bde:	2000      	movs	r0, #0
   26be0:	bd10      	pop	{r4, pc}

00026be2 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26be2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26be4:	075b      	lsls	r3, r3, #29
   26be6:	d40b      	bmi.n	26c00 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26be8:	6803      	ldr	r3, [r0, #0]
   26bea:	8840      	ldrh	r0, [r0, #2]
   26bec:	f3c3 2349 	ubfx	r3, r3, #9, #10
   26bf0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   26bf4:	4418      	add	r0, r3
   26bf6:	3013      	adds	r0, #19
   26bf8:	f020 0007 	bic.w	r0, r0, #7
   26bfc:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   26bfe:	4770      	bx	lr
	return 0;
   26c00:	2000      	movs	r0, #0
}
   26c02:	4770      	bx	lr

00026c04 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   26c04:	6883      	ldr	r3, [r0, #8]
   26c06:	6a1b      	ldr	r3, [r3, #32]
   26c08:	b103      	cbz	r3, 26c0c <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   26c0a:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   26c0c:	4770      	bx	lr

00026c0e <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   26c0e:	6843      	ldr	r3, [r0, #4]
   26c10:	681b      	ldr	r3, [r3, #0]
{
   26c12:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   26c14:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
   26c16:	4620      	mov	r0, r4
   26c18:	f7ff fff4 	bl	26c04 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   26c1c:	68a3      	ldr	r3, [r4, #8]
   26c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26c20:	b10b      	cbz	r3, 26c26 <uninit+0x18>
		api->irq_rx_disable(dev);
   26c22:	4620      	mov	r0, r4
   26c24:	4798      	blx	r3
}
   26c26:	2000      	movs	r0, #0
   26c28:	bd10      	pop	{r4, pc}

00026c2a <enable>:
{
   26c2a:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   26c2c:	6843      	ldr	r3, [r0, #4]
   26c2e:	681b      	ldr	r3, [r3, #0]
   26c30:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   26c32:	b111      	cbz	r1, 26c3a <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   26c34:	6818      	ldr	r0, [r3, #0]
   26c36:	f7ff ffe5 	bl	26c04 <uart_irq_tx_disable>
}
   26c3a:	2000      	movs	r0, #0
   26c3c:	bd08      	pop	{r3, pc}

00026c3e <read>:
{
   26c3e:	b510      	push	{r4, lr}
   26c40:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   26c42:	6843      	ldr	r3, [r0, #4]
   26c44:	68d8      	ldr	r0, [r3, #12]
   26c46:	f7ff fb9d 	bl	26384 <ring_buf_get>
   26c4a:	6020      	str	r0, [r4, #0]
}
   26c4c:	2000      	movs	r0, #0
   26c4e:	bd10      	pop	{r4, pc}

00026c50 <write>:
{
   26c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   26c54:	6845      	ldr	r5, [r0, #4]
{
   26c56:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   26c58:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   26c5a:	7c1b      	ldrb	r3, [r3, #16]
{
   26c5c:	460c      	mov	r4, r1
   26c5e:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   26c60:	b153      	cbz	r3, 26c78 <write+0x28>
   26c62:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   26c66:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   26c68:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
   26c6a:	d120      	bne.n	26cae <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   26c6c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   26c70:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   26c72:	2001      	movs	r0, #1
   26c74:	4790      	blx	r2
   26c76:	e017      	b.n	26ca8 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   26c78:	68a8      	ldr	r0, [r5, #8]
   26c7a:	f7ff fb1b 	bl	262b4 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26c7e:	682b      	ldr	r3, [r5, #0]
   26c80:	6030      	str	r0, [r6, #0]
   26c82:	330c      	adds	r3, #12
   26c84:	2101      	movs	r1, #1
   26c86:	f3bf 8f5b 	dmb	ish
   26c8a:	e853 2f00 	ldrex	r2, [r3]
   26c8e:	e843 1000 	strex	r0, r1, [r3]
   26c92:	2800      	cmp	r0, #0
   26c94:	d1f9      	bne.n	26c8a <write+0x3a>
   26c96:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   26c9a:	b92a      	cbnz	r2, 26ca8 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   26c9c:	682b      	ldr	r3, [r5, #0]
   26c9e:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   26ca0:	6883      	ldr	r3, [r0, #8]
   26ca2:	69db      	ldr	r3, [r3, #28]
   26ca4:	b103      	cbz	r3, 26ca8 <write+0x58>
		api->irq_tx_enable(dev);
   26ca6:	4798      	blx	r3
}
   26ca8:	2000      	movs	r0, #0
   26caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   26cae:	6818      	ldr	r0, [r3, #0]
   26cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   26cb4:	6883      	ldr	r3, [r0, #8]
   26cb6:	685b      	ldr	r3, [r3, #4]
   26cb8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   26cba:	e7d4      	b.n	26c66 <write+0x16>

00026cbc <atomic_or>:
{
   26cbc:	4603      	mov	r3, r0
}
   26cbe:	f3bf 8f5b 	dmb	ish
   26cc2:	e853 0f00 	ldrex	r0, [r3]
   26cc6:	ea40 0201 	orr.w	r2, r0, r1
   26cca:	e843 2c00 	strex	ip, r2, [r3]
   26cce:	f1bc 0f00 	cmp.w	ip, #0
   26cd2:	d1f6      	bne.n	26cc2 <atomic_or+0x6>
   26cd4:	f3bf 8f5b 	dmb	ish
   26cd8:	4770      	bx	lr

00026cda <atomic_and>:
{
   26cda:	4603      	mov	r3, r0
}
   26cdc:	f3bf 8f5b 	dmb	ish
   26ce0:	e853 0f00 	ldrex	r0, [r3]
   26ce4:	ea00 0201 	and.w	r2, r0, r1
   26ce8:	e843 2c00 	strex	ip, r2, [r3]
   26cec:	f1bc 0f00 	cmp.w	ip, #0
   26cf0:	d1f6      	bne.n	26ce0 <atomic_and+0x6>
   26cf2:	f3bf 8f5b 	dmb	ish
   26cf6:	4770      	bx	lr

00026cf8 <shell_signal_handle>:
{
   26cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   26cfa:	6885      	ldr	r5, [r0, #8]
   26cfc:	0109      	lsls	r1, r1, #4
   26cfe:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   26d02:	4604      	mov	r4, r0
   26d04:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   26d06:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   26d08:	aa01      	add	r2, sp, #4
   26d0a:	4669      	mov	r1, sp
   26d0c:	4628      	mov	r0, r5
   26d0e:	f004 fc05 	bl	2b51c <z_impl_k_poll_signal_check>
	if (set) {
   26d12:	9b00      	ldr	r3, [sp, #0]
   26d14:	b123      	cbz	r3, 26d20 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   26d16:	4628      	mov	r0, r5
   26d18:	f004 fbfd 	bl	2b516 <z_impl_k_poll_signal_reset>
		handler(shell);
   26d1c:	4620      	mov	r0, r4
   26d1e:	47b0      	blx	r6
}
   26d20:	b002      	add	sp, #8
   26d22:	bd70      	pop	{r4, r5, r6, pc}

00026d24 <z_shell_strlen>:
{
   26d24:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   26d26:	b110      	cbz	r0, 26d2e <z_shell_strlen+0xa>
   26d28:	f001 fcec 	bl	28704 <strlen>
   26d2c:	b280      	uxth	r0, r0
}
   26d2e:	bd08      	pop	{r3, pc}

00026d30 <z_shell_raw_fprintf>:
{
   26d30:	b40e      	push	{r1, r2, r3}
   26d32:	b503      	push	{r0, r1, lr}
   26d34:	aa03      	add	r2, sp, #12
   26d36:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   26d3a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   26d3c:	f7e2 fcd8 	bl	96f0 <z_shell_fprintf_fmt>
}
   26d40:	b002      	add	sp, #8
   26d42:	f85d eb04 	ldr.w	lr, [sp], #4
   26d46:	b003      	add	sp, #12
   26d48:	4770      	bx	lr

00026d4a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26d4a:	f7fd bd2f 	b.w	247ac <z_impl_k_mutex_lock>

00026d4e <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   26d4e:	688b      	ldr	r3, [r1, #8]
   26d50:	b920      	cbnz	r0, 26d5c <transport_evt_handler+0xe>
   26d52:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   26d56:	2100      	movs	r1, #0
   26d58:	f7fe bddc 	b.w	25914 <z_impl_k_poll_signal_raise>
   26d5c:	f503 7026 	add.w	r0, r3, #664	; 0x298
   26d60:	e7f9      	b.n	26d56 <transport_evt_handler+0x8>

00026d62 <kill_handler>:
{
   26d62:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
   26d64:	6883      	ldr	r3, [r0, #8]
   26d66:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
   26d6a:	07db      	lsls	r3, r3, #31
{
   26d6c:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
   26d6e:	d41d      	bmi.n	26dac <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   26d70:	69c0      	ldr	r0, [r0, #28]
   26d72:	f000 fdbb 	bl	278ec <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   26d76:	6860      	ldr	r0, [r4, #4]
   26d78:	6803      	ldr	r3, [r0, #0]
   26d7a:	685b      	ldr	r3, [r3, #4]
   26d7c:	4798      	blx	r3
	if (err != 0) {
   26d7e:	4605      	mov	r5, r0
   26d80:	b920      	cbnz	r0, 26d8c <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   26d82:	68e0      	ldr	r0, [r4, #12]
   26d84:	f000 ff5b 	bl	27c3e <z_shell_history_purge>
	shell->ctx->state = state;
   26d88:	68a3      	ldr	r3, [r4, #8]
   26d8a:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   26d8c:	68a3      	ldr	r3, [r4, #8]
   26d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26d90:	b113      	cbz	r3, 26d98 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   26d92:	4629      	mov	r1, r5
   26d94:	4620      	mov	r0, r4
   26d96:	4798      	blx	r3
	shell->ctx->tid = NULL;
   26d98:	68a3      	ldr	r3, [r4, #8]
   26d9a:	2200      	movs	r2, #0
   26d9c:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   26da0:	f7fe faf2 	bl	25388 <z_impl_z_current_get>
}
   26da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   26da8:	f7e5 bce2 	b.w	c770 <z_impl_k_thread_abort>
		return -EBUSY;
   26dac:	f06f 050f 	mvn.w	r5, #15
   26db0:	e7ec      	b.n	26d8c <kill_handler+0x2a>

00026db2 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   26db2:	f500 7019 	add.w	r0, r0, #612	; 0x264
   26db6:	b111      	cbz	r1, 26dbe <z_flag_history_exit_set.isra.0+0xc>
   26db8:	2104      	movs	r1, #4
   26dba:	f7ff bf7f 	b.w	26cbc <atomic_or>
   26dbe:	f06f 0104 	mvn.w	r1, #4
   26dc2:	f7ff bf8a 	b.w	26cda <atomic_and>

00026dc6 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   26dc6:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   26dc8:	f500 7018 	add.w	r0, r0, #608	; 0x260
   26dcc:	b129      	cbz	r1, 26dda <z_flag_insert_mode_set.isra.0+0x14>
   26dce:	2101      	movs	r1, #1
   26dd0:	f7ff ff74 	bl	26cbc <atomic_or>
}
   26dd4:	f000 0001 	and.w	r0, r0, #1
   26dd8:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   26dda:	f06f 0101 	mvn.w	r1, #1
   26dde:	f7ff ff7c 	bl	26cda <atomic_and>
   26de2:	e7f7      	b.n	26dd4 <z_flag_insert_mode_set.isra.0+0xe>

00026de4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26de4:	f7fd bd5a 	b.w	2489c <z_impl_k_mutex_unlock>

00026de8 <shell_log_process>:
{
   26de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   26dea:	2300      	movs	r3, #0
{
   26dec:	4604      	mov	r4, r0
	int signaled = 0;
   26dee:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   26df0:	4620      	mov	r0, r4
   26df2:	f000 fbab 	bl	2754c <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   26df6:	69e0      	ldr	r0, [r4, #28]
   26df8:	f000 fdb9 	bl	2796e <z_shell_log_backend_process>
   26dfc:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   26dfe:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   26e00:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   26e02:	f7e2 fdff 	bl	9a04 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   26e06:	68a3      	ldr	r3, [r4, #8]
   26e08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   26e0a:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   26e0e:	b123      	cbz	r3, 26e1a <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   26e10:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   26e14:	2100      	movs	r1, #0
   26e16:	f7fe fa9d 	bl	25354 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   26e1a:	aa01      	add	r2, sp, #4
   26e1c:	4669      	mov	r1, sp
   26e1e:	4630      	mov	r0, r6
   26e20:	f004 fb7c 	bl	2b51c <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   26e24:	b115      	cbz	r5, 26e2c <shell_log_process+0x44>
   26e26:	9b00      	ldr	r3, [sp, #0]
   26e28:	2b00      	cmp	r3, #0
   26e2a:	d0e1      	beq.n	26df0 <shell_log_process+0x8>
}
   26e2c:	b002      	add	sp, #8
   26e2e:	bd70      	pop	{r4, r5, r6, pc}

00026e30 <shell_vfprintf>:
{
   26e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e32:	4604      	mov	r4, r0
	return shell->ctx->state;
   26e34:	6880      	ldr	r0, [r0, #8]
{
   26e36:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   26e38:	7903      	ldrb	r3, [r0, #4]
   26e3a:	2b02      	cmp	r3, #2
{
   26e3c:	460d      	mov	r5, r1
   26e3e:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   26e40:	d007      	beq.n	26e52 <shell_vfprintf+0x22>
}
   26e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   26e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   26e4a:	f500 7019 	add.w	r0, r0, #612	; 0x264
   26e4e:	f7ff bf35 	b.w	26cbc <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   26e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26e5a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   26e5e:	f7ff ff74 	bl	26d4a <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   26e62:	68a3      	ldr	r3, [r4, #8]
   26e64:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   26e68:	0511      	lsls	r1, r2, #20
   26e6a:	d404      	bmi.n	26e76 <shell_vfprintf+0x46>
   26e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   26e6e:	b913      	cbnz	r3, 26e76 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
   26e70:	4620      	mov	r0, r4
   26e72:	f000 fb6b 	bl	2754c <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   26e76:	463b      	mov	r3, r7
   26e78:	4632      	mov	r2, r6
   26e7a:	4629      	mov	r1, r5
   26e7c:	4620      	mov	r0, r4
   26e7e:	f000 fbc6 	bl	2760e <z_shell_vfprintf>
   26e82:	68a3      	ldr	r3, [r4, #8]
   26e84:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   26e88:	0512      	lsls	r2, r2, #20
   26e8a:	d404      	bmi.n	26e96 <shell_vfprintf+0x66>
   26e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   26e8e:	b913      	cbnz	r3, 26e96 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
   26e90:	4620      	mov	r0, r4
   26e92:	f7e2 fdb7 	bl	9a04 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   26e96:	6960      	ldr	r0, [r4, #20]
   26e98:	f000 f82f 	bl	26efa <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   26e9c:	68a0      	ldr	r0, [r4, #8]
}
   26e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   26ea2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   26ea6:	f7ff bf9d 	b.w	26de4 <k_mutex_unlock.isra.0>

00026eaa <shell_fprintf>:
{
   26eaa:	b40c      	push	{r2, r3}
   26eac:	b507      	push	{r0, r1, r2, lr}
   26eae:	ab04      	add	r3, sp, #16
   26eb0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   26eb4:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   26eb6:	f7ff ffbb 	bl	26e30 <shell_vfprintf>
}
   26eba:	b003      	add	sp, #12
   26ebc:	f85d eb04 	ldr.w	lr, [sp], #4
   26ec0:	b002      	add	sp, #8
   26ec2:	4770      	bx	lr

00026ec4 <shell_hexdump>:
{
   26ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ec8:	4607      	mov	r7, r0
   26eca:	460e      	mov	r6, r1
   26ecc:	4614      	mov	r4, r2
	const uint8_t *p = data;
   26ece:	460d      	mov	r5, r1
	while (len) {
   26ed0:	b90c      	cbnz	r4, 26ed6 <shell_hexdump+0x12>
}
   26ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
   26ed6:	2c10      	cmp	r4, #16
   26ed8:	46a0      	mov	r8, r4
   26eda:	bf28      	it	cs
   26edc:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
   26ee0:	462a      	mov	r2, r5
   26ee2:	1ba9      	subs	r1, r5, r6
   26ee4:	4643      	mov	r3, r8
   26ee6:	4638      	mov	r0, r7
   26ee8:	f7e2 fb9a 	bl	9620 <shell_hexdump_line>
		len -= line_len;
   26eec:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
   26ef0:	4445      	add	r5, r8
   26ef2:	e7ed      	b.n	26ed0 <shell_hexdump+0xc>

00026ef4 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   26ef4:	6883      	ldr	r3, [r0, #8]
   26ef6:	6399      	str	r1, [r3, #56]	; 0x38
}
   26ef8:	4770      	bx	lr

00026efa <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   26efa:	6902      	ldr	r2, [r0, #16]
   26efc:	6883      	ldr	r3, [r0, #8]
   26efe:	6812      	ldr	r2, [r2, #0]
   26f00:	6801      	ldr	r1, [r0, #0]
{
   26f02:	b510      	push	{r4, lr}
   26f04:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   26f06:	68c0      	ldr	r0, [r0, #12]
   26f08:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   26f0a:	6923      	ldr	r3, [r4, #16]
   26f0c:	2200      	movs	r2, #0
   26f0e:	601a      	str	r2, [r3, #0]
}
   26f10:	bd10      	pop	{r4, pc}

00026f12 <out_func>:
{
   26f12:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   26f14:	68cb      	ldr	r3, [r1, #12]
   26f16:	7c1b      	ldrb	r3, [r3, #16]
   26f18:	2b02      	cmp	r3, #2
{
   26f1a:	4605      	mov	r5, r0
   26f1c:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   26f1e:	d104      	bne.n	26f2a <out_func+0x18>
   26f20:	280a      	cmp	r0, #10
   26f22:	d102      	bne.n	26f2a <out_func+0x18>
		(void)out_func('\r', ctx);
   26f24:	200d      	movs	r0, #13
   26f26:	f7ff fff4 	bl	26f12 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   26f2a:	6923      	ldr	r3, [r4, #16]
   26f2c:	6822      	ldr	r2, [r4, #0]
   26f2e:	681b      	ldr	r3, [r3, #0]
   26f30:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   26f32:	6922      	ldr	r2, [r4, #16]
   26f34:	6813      	ldr	r3, [r2, #0]
   26f36:	3301      	adds	r3, #1
   26f38:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   26f3a:	6862      	ldr	r2, [r4, #4]
   26f3c:	4293      	cmp	r3, r2
   26f3e:	d102      	bne.n	26f46 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   26f40:	4620      	mov	r0, r4
   26f42:	f7ff ffda 	bl	26efa <z_shell_fprintf_buffer_flush>
}
   26f46:	2000      	movs	r0, #0
   26f48:	bd38      	pop	{r3, r4, r5, pc}

00026f4a <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   26f4a:	2820      	cmp	r0, #32
   26f4c:	d005      	beq.n	26f5a <isspace+0x10>
   26f4e:	3809      	subs	r0, #9
   26f50:	2804      	cmp	r0, #4
   26f52:	bf8c      	ite	hi
   26f54:	2000      	movhi	r0, #0
   26f56:	2001      	movls	r0, #1
   26f58:	4770      	bx	lr
   26f5a:	2001      	movs	r0, #1
}
   26f5c:	4770      	bx	lr

00026f5e <z_shell_strlen>:
{
   26f5e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   26f60:	b110      	cbz	r0, 26f68 <z_shell_strlen+0xa>
   26f62:	f001 fbcf 	bl	28704 <strlen>
   26f66:	b280      	uxth	r0, r0
}
   26f68:	bd08      	pop	{r3, pc}

00026f6a <z_column_span_with_buffer_offsets_get>:
{
   26f6a:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   26f6c:	7b03      	ldrb	r3, [r0, #12]
   26f6e:	8940      	ldrh	r0, [r0, #10]
   26f70:	441a      	add	r2, r3
   26f72:	4419      	add	r1, r3
   26f74:	fbb2 f4f0 	udiv	r4, r2, r0
   26f78:	fbb1 f3f0 	udiv	r3, r1, r0
   26f7c:	fb00 2214 	mls	r2, r0, r4, r2
   26f80:	fb00 1013 	mls	r0, r0, r3, r1
}
   26f84:	1a10      	subs	r0, r2, r0
   26f86:	bd10      	pop	{r4, pc}

00026f88 <z_row_span_with_buffer_offsets_get>:
{
   26f88:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   26f8a:	7b04      	ldrb	r4, [r0, #12]
   26f8c:	8943      	ldrh	r3, [r0, #10]
   26f8e:	4421      	add	r1, r4
   26f90:	1910      	adds	r0, r2, r4
   26f92:	fbb1 f1f3 	udiv	r1, r1, r3
   26f96:	fbb0 f0f3 	udiv	r0, r0, r3
}
   26f9a:	1a40      	subs	r0, r0, r1
   26f9c:	bd10      	pop	{r4, pc}

00026f9e <z_shell_multiline_data_calc>:
{
   26f9e:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   26fa0:	7b05      	ldrb	r5, [r0, #12]
   26fa2:	8943      	ldrh	r3, [r0, #10]
   26fa4:	4429      	add	r1, r5
   26fa6:	fbb1 f4f3 	udiv	r4, r1, r3
   26faa:	fb03 1114 	mls	r1, r3, r4, r1
   26fae:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   26fb0:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   26fb2:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   26fb4:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   26fb6:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   26fba:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   26fbe:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   26fc0:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   26fc2:	1c4c      	adds	r4, r1, #1
   26fc4:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   26fc6:	8042      	strh	r2, [r0, #2]
}
   26fc8:	bd30      	pop	{r4, r5, pc}

00026fca <z_shell_make_argv>:
{
   26fca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   26fce:	2500      	movs	r5, #0
{
   26fd0:	4606      	mov	r6, r0
   26fd2:	460f      	mov	r7, r1
   26fd4:	4614      	mov	r4, r2
   26fd6:	4698      	mov	r8, r3
	*argc = 0;
   26fd8:	6005      	str	r5, [r0, #0]
		c = *cmd;
   26fda:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   26fdc:	2800      	cmp	r0, #0
   26fde:	f000 80b5 	beq.w	2714c <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   26fe2:	f7ff ffb2 	bl	26f4a <isspace>
   26fe6:	b118      	cbz	r0, 26ff0 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
   26fe8:	2300      	movs	r3, #0
   26fea:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   26fee:	e7f4      	b.n	26fda <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   26ff0:	6832      	ldr	r2, [r6, #0]
   26ff2:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   26ff4:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   26ff6:	6033      	str	r3, [r6, #0]
   26ff8:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   26ffc:	f000 80a6 	beq.w	2714c <z_shell_make_argv+0x182>
	char quote = 0;
   27000:	4605      	mov	r5, r0
		c = *cmd;
   27002:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   27006:	f1b9 0f00 	cmp.w	r9, #0
   2700a:	d0e6      	beq.n	26fda <z_shell_make_argv+0x10>
		if (!quote) {
   2700c:	2d00      	cmp	r5, #0
   2700e:	f040 8089 	bne.w	27124 <z_shell_make_argv+0x15a>
			switch (c) {
   27012:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   27016:	d006      	beq.n	27026 <z_shell_make_argv+0x5c>
   27018:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   2701c:	f000 808a 	beq.w	27134 <z_shell_make_argv+0x16a>
   27020:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   27024:	d176      	bne.n	27114 <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
   27026:	4620      	mov	r0, r4
   27028:	f7ff ff99 	bl	26f5e <z_shell_strlen>
				memmove(cmd, cmd + 1,
   2702c:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   2702e:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   27030:	4620      	mov	r0, r4
   27032:	f001 fba5 	bl	28780 <memmove>
				continue;
   27036:	464d      	mov	r5, r9
   27038:	e7e3      	b.n	27002 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   2703a:	4620      	mov	r0, r4
   2703c:	f7ff ff8f 	bl	26f5e <z_shell_strlen>
   27040:	1c61      	adds	r1, r4, #1
   27042:	4602      	mov	r2, r0
   27044:	4620      	mov	r0, r4
   27046:	f001 fb9b 	bl	28780 <memmove>
			quote = 0;
   2704a:	2500      	movs	r5, #0
			continue;
   2704c:	e7d9      	b.n	27002 <z_shell_make_argv+0x38>
			if (t == '0') {
   2704e:	2930      	cmp	r1, #48	; 0x30
   27050:	d126      	bne.n	270a0 <z_shell_make_argv+0xd6>
   27052:	2302      	movs	r3, #2
				uint8_t v = 0U;
   27054:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   27058:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   2705a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2705e:	b2d2      	uxtb	r2, r2
   27060:	2a07      	cmp	r2, #7
   27062:	fa5f f983 	uxtb.w	r9, r3
   27066:	d818      	bhi.n	2709a <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
   27068:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
   2706a:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   2706e:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   27070:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   27074:	d1f0      	bne.n	27058 <z_shell_make_argv+0x8e>
   27076:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
   27078:	4620      	mov	r0, r4
   2707a:	f7ff ff70 	bl	26f5e <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   2707e:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   27082:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   27084:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
   27088:	eba0 0209 	sub.w	r2, r0, r9
   2708c:	4659      	mov	r1, fp
   2708e:	4620      	mov	r0, r4
   27090:	f001 fb76 	bl	28780 <memmove>
					*cmd++ = v;
   27094:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   27098:	e7b3      	b.n	27002 <z_shell_make_argv+0x38>
				if (i > 2) {
   2709a:	f1b9 0f02 	cmp.w	r9, #2
   2709e:	d1eb      	bne.n	27078 <z_shell_make_argv+0xae>
			if (t == 'x') {
   270a0:	2978      	cmp	r1, #120	; 0x78
   270a2:	d13d      	bne.n	27120 <z_shell_make_argv+0x156>
   270a4:	2102      	movs	r1, #2
				uint8_t v = 0U;
   270a6:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   270aa:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
   270ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   270b0:	b2db      	uxtb	r3, r3
   270b2:	2b09      	cmp	r3, #9
   270b4:	b2c8      	uxtb	r0, r1
   270b6:	d81a      	bhi.n	270ee <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   270b8:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   270bc:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
   270be:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   270c2:	d112      	bne.n	270ea <z_shell_make_argv+0x120>
   270c4:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
   270c8:	4620      	mov	r0, r4
   270ca:	f7ff ff48 	bl	26f5e <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   270ce:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   270d2:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   270d4:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
   270d8:	eba0 020a 	sub.w	r2, r0, sl
   270dc:	4659      	mov	r1, fp
   270de:	4620      	mov	r0, r4
   270e0:	f001 fb4e 	bl	28780 <memmove>
					*cmd++ = v;
   270e4:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   270e8:	e78b      	b.n	27002 <z_shell_make_argv+0x38>
   270ea:	2103      	movs	r1, #3
   270ec:	e7dd      	b.n	270aa <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
   270ee:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   270f2:	2b05      	cmp	r3, #5
   270f4:	d803      	bhi.n	270fe <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   270f6:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   270f8:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   270fc:	e7de      	b.n	270bc <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
   270fe:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   27102:	2b05      	cmp	r3, #5
   27104:	d801      	bhi.n	2710a <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   27106:	3a37      	subs	r2, #55	; 0x37
   27108:	e7f6      	b.n	270f8 <z_shell_make_argv+0x12e>
				if (i > 2) {
   2710a:	2802      	cmp	r0, #2
   2710c:	d008      	beq.n	27120 <z_shell_make_argv+0x156>
   2710e:	f04f 0a03 	mov.w	sl, #3
   27112:	e7d9      	b.n	270c8 <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
   27114:	4648      	mov	r0, r9
   27116:	f7ff ff18 	bl	26f4a <isspace>
   2711a:	2800      	cmp	r0, #0
   2711c:	f47f af5d 	bne.w	26fda <z_shell_make_argv+0x10>
		cmd += 1;
   27120:	3401      	adds	r4, #1
   27122:	e76e      	b.n	27002 <z_shell_make_argv+0x38>
		if (quote == c) {
   27124:	45a9      	cmp	r9, r5
   27126:	d088      	beq.n	2703a <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
   27128:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   2712c:	d1f8      	bne.n	27120 <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
   2712e:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   27130:	428d      	cmp	r5, r1
   27132:	d18c      	bne.n	2704e <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
   27134:	4620      	mov	r0, r4
   27136:	f7ff ff12 	bl	26f5e <z_shell_strlen>
				memmove(cmd, cmd + 1,
   2713a:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
   2713e:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   27140:	4649      	mov	r1, r9
   27142:	4620      	mov	r0, r4
   27144:	f001 fb1c 	bl	28780 <memmove>
				cmd += 1;
   27148:	464c      	mov	r4, r9
				continue;
   2714a:	e75a      	b.n	27002 <z_shell_make_argv+0x38>
}
   2714c:	4628      	mov	r0, r5
   2714e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027152 <z_shell_pattern_remove>:
{
   27152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27154:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   27156:	4611      	mov	r1, r2
{
   27158:	4615      	mov	r5, r2
   2715a:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   2715c:	f001 fa88 	bl	28670 <strstr>
   27160:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   27162:	4628      	mov	r0, r5
   27164:	f7ff fefb 	bl	26f5e <z_shell_strlen>
   27168:	4605      	mov	r5, r0
	if (!pattern_addr) {
   2716a:	b1c4      	cbz	r4, 2719e <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   2716c:	42a7      	cmp	r7, r4
   2716e:	d207      	bcs.n	27180 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   27170:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   27174:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   27176:	bf02      	ittt	eq
   27178:	3501      	addeq	r5, #1
   2717a:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   2717c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   27180:	4620      	mov	r0, r4
   27182:	f7ff feec 	bl	26f5e <z_shell_strlen>
	*buff_len -= pattern_len;
   27186:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   27188:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
   2718a:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2718c:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
   2718e:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   27190:	1961      	adds	r1, r4, r5
   27192:	4620      	mov	r0, r4
   27194:	b292      	uxth	r2, r2
}
   27196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   2719a:	f001 baf1 	b.w	28780 <memmove>
}
   2719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000271a0 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   271a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271a4:	4688      	mov	r8, r1
   271a6:	b086      	sub	sp, #24
   271a8:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
   271aa:	4604      	mov	r4, r0
   271ac:	b128      	cbz	r0, 271ba <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   271ae:	4601      	mov	r1, r0
   271b0:	2214      	movs	r2, #20
   271b2:	a801      	add	r0, sp, #4
   271b4:	f001 fafc 	bl	287b0 <memcpy>
		parent = &parent_cpy;
   271b8:	ac01      	add	r4, sp, #4
   271ba:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   271bc:	4631      	mov	r1, r6
   271be:	463a      	mov	r2, r7
   271c0:	4620      	mov	r0, r4
   271c2:	f7e2 faa9 	bl	9718 <z_shell_cmd_get>
   271c6:	3601      	adds	r6, #1
   271c8:	4605      	mov	r5, r0
   271ca:	b128      	cbz	r0, 271d8 <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   271cc:	6829      	ldr	r1, [r5, #0]
   271ce:	4640      	mov	r0, r8
   271d0:	f001 faa8 	bl	28724 <strcmp>
   271d4:	2800      	cmp	r0, #0
   271d6:	d1f1      	bne.n	271bc <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
   271d8:	4628      	mov	r0, r5
   271da:	b006      	add	sp, #24
   271dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000271e0 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   271e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   271e4:	461c      	mov	r4, r3
   271e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   271ea:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   271ee:	2300      	movs	r3, #0
{
   271f0:	460f      	mov	r7, r1
   271f2:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   271f4:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   271f6:	6823      	ldr	r3, [r4, #0]
   271f8:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   271fa:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   271fc:	d21b      	bcs.n	27236 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   271fe:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   27202:	f000 fd9a 	bl	27d3a <z_shell_has_wildcard>
   27206:	6823      	ldr	r3, [r4, #0]
   27208:	4682      	mov	sl, r0
   2720a:	b118      	cbz	r0, 27214 <z_shell_get_last_command+0x34>
				(*match_arg)++;
   2720c:	3301      	adds	r3, #1
   2720e:	6023      	str	r3, [r4, #0]
				continue;
   27210:	4628      	mov	r0, r5
   27212:	e7f0      	b.n	271f6 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   27214:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   27218:	4642      	mov	r2, r8
   2721a:	4628      	mov	r0, r5
   2721c:	f7ff ffc0 	bl	271a0 <z_shell_find_cmd>
		if (entry) {
   27220:	b148      	cbz	r0, 27236 <z_shell_get_last_command+0x56>
			(*match_arg)++;
   27222:	6823      	ldr	r3, [r4, #0]
   27224:	1c5a      	adds	r2, r3, #1
   27226:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   27228:	f1b9 0f00 	cmp.w	r9, #0
   2722c:	d0e3      	beq.n	271f6 <z_shell_get_last_command+0x16>
   2722e:	4580      	cmp	r8, r0
   27230:	d1e1      	bne.n	271f6 <z_shell_get_last_command+0x16>
			(*match_arg)--;
   27232:	6023      	str	r3, [r4, #0]
			return NULL;
   27234:	4655      	mov	r5, sl
		}
	}

	return entry;
}
   27236:	4628      	mov	r0, r5
   27238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002723c <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   2723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27240:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
   27242:	f7ff fe8c 	bl	26f5e <z_shell_strlen>
   27246:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
   27248:	bb47      	cbnz	r7, 2729c <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
   2724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
   2724e:	b14c      	cbz	r4, 27264 <z_shell_spaces_trim+0x28>
						len - j + 1);
   27250:	b292      	uxth	r2, r2
   27252:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
   27254:	1c58      	adds	r0, r3, #1
   27256:	3201      	adds	r2, #1
   27258:	4438      	add	r0, r7
   2725a:	f001 fa91 	bl	28780 <memmove>
					len -= shift;
   2725e:	1b36      	subs	r6, r6, r4
   27260:	b2b6      	uxth	r6, r6
					shift = 0U;
   27262:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
   27264:	1e73      	subs	r3, r6, #1
   27266:	429d      	cmp	r5, r3
   27268:	daef      	bge.n	2724a <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   2726a:	5d78      	ldrb	r0, [r7, r5]
   2726c:	f7ff fe6d 	bl	26f4a <isspace>
   27270:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
   27272:	3501      	adds	r5, #1
   27274:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
   27276:	2800      	cmp	r0, #0
   27278:	d0f4      	beq.n	27264 <z_shell_spaces_trim+0x28>
   2727a:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
   2727c:	b291      	uxth	r1, r2
   2727e:	428e      	cmp	r6, r1
   27280:	d9f0      	bls.n	27264 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   27282:	5cb8      	ldrb	r0, [r7, r2]
   27284:	f7ff fe61 	bl	26f4a <isspace>
   27288:	18b9      	adds	r1, r7, r2
   2728a:	f102 0c01 	add.w	ip, r2, #1
   2728e:	4680      	mov	r8, r0
   27290:	2800      	cmp	r0, #0
   27292:	d0dc      	beq.n	2724e <z_shell_spaces_trim+0x12>
					shift++;
   27294:	3401      	adds	r4, #1
   27296:	b2a4      	uxth	r4, r4
   27298:	4662      	mov	r2, ip
   2729a:	e7ef      	b.n	2727c <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
   2729c:	2500      	movs	r5, #0
	uint16_t shift = 0U;
   2729e:	462c      	mov	r4, r5
   272a0:	e7e0      	b.n	27264 <z_shell_spaces_trim+0x28>

000272a2 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   272a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   272a4:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   272a6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   272aa:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   272ac:	b953      	cbnz	r3, 272c4 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   272ae:	68ab      	ldr	r3, [r5, #8]
   272b0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   272b2:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   272b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   272b6:	3a01      	subs	r2, #1
   272b8:	b292      	uxth	r2, r2
   272ba:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   272bc:	b922      	cbnz	r2, 272c8 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   272be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   272c2:	e7f4      	b.n	272ae <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   272c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
   272c8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   272ca:	18b3      	adds	r3, r6, r2
   272cc:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   272d0:	f7ff fe3b 	bl	26f4a <isspace>
   272d4:	4603      	mov	r3, r0
   272d6:	2800      	cmp	r0, #0
   272d8:	d1ed      	bne.n	272b6 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   272da:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   272dc:	b29f      	uxth	r7, r3
   272de:	fa16 f183 	uxtah	r1, r6, r3
   272e2:	5df0      	ldrb	r0, [r6, r7]
   272e4:	f7ff fe31 	bl	26f4a <isspace>
   272e8:	3301      	adds	r3, #1
   272ea:	2800      	cmp	r0, #0
   272ec:	d1f6      	bne.n	272dc <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
   272ee:	2f00      	cmp	r7, #0
   272f0:	d0dd      	beq.n	272ae <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   272f2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   272f4:	3301      	adds	r3, #1
   272f6:	1bda      	subs	r2, r3, r7
   272f8:	4630      	mov	r0, r6
   272fa:	f001 fa41 	bl	28780 <memmove>
		*buff_len = *buff_len - i;
   272fe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   27300:	1bdb      	subs	r3, r3, r7
   27302:	87a3      	strh	r3, [r4, #60]	; 0x3c
   27304:	e7d3      	b.n	272ae <z_shell_cmd_trim+0xc>

00027306 <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
   27306:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2730a:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
   2730c:	a801      	add	r0, sp, #4
{
   2730e:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
   27310:	f7fc feb4 	bl	2407c <z_device_get_all_static>
	const struct device *dev_end = dev + len;
   27314:	9d01      	ldr	r5, [sp, #4]
   27316:	2318      	movs	r3, #24
   27318:	fb03 5500 	mla	r5, r3, r0, r5
	size_t match_idx = 0;
   2731c:	2600      	movs	r6, #0

	while (dev < dev_end) {
   2731e:	9801      	ldr	r0, [sp, #4]
   27320:	42a8      	cmp	r0, r5
   27322:	d301      	bcc.n	27328 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
   27324:	2000      	movs	r0, #0
   27326:	e00c      	b.n	27342 <shell_device_lookup+0x3c>
	return z_device_is_ready(dev);
   27328:	f003 fb39 	bl	2a99e <z_device_is_ready>
		if (device_is_ready(dev)
   2732c:	b1c8      	cbz	r0, 27362 <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
   2732e:	9b01      	ldr	r3, [sp, #4]
   27330:	6818      	ldr	r0, [r3, #0]
   27332:	b1b0      	cbz	r0, 27362 <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
   27334:	f001 f9e6 	bl	28704 <strlen>
   27338:	b198      	cbz	r0, 27362 <shell_device_lookup+0x5c>
		    && ((prefix == NULL)
   2733a:	b92c      	cbnz	r4, 27348 <shell_device_lookup+0x42>
			if (match_idx == idx) {
   2733c:	42be      	cmp	r6, r7
   2733e:	d114      	bne.n	2736a <shell_device_lookup+0x64>
				return dev;
   27340:	9801      	ldr	r0, [sp, #4]
}
   27342:	b002      	add	sp, #8
   27344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
   27348:	9b01      	ldr	r3, [sp, #4]
   2734a:	4620      	mov	r0, r4
   2734c:	f8d3 8000 	ldr.w	r8, [r3]
   27350:	f001 f9d8 	bl	28704 <strlen>
   27354:	4641      	mov	r1, r8
   27356:	4602      	mov	r2, r0
   27358:	4620      	mov	r0, r4
   2735a:	f001 f9ef 	bl	2873c <strncmp>
   2735e:	2800      	cmp	r0, #0
   27360:	d0ec      	beq.n	2733c <shell_device_lookup+0x36>
		++dev;
   27362:	9b01      	ldr	r3, [sp, #4]
   27364:	3318      	adds	r3, #24
   27366:	9301      	str	r3, [sp, #4]
   27368:	e7d9      	b.n	2731e <shell_device_lookup+0x18>
			++match_idx;
   2736a:	3601      	adds	r6, #1
   2736c:	e7f9      	b.n	27362 <shell_device_lookup+0x5c>

0002736e <z_shell_raw_fprintf>:
{
   2736e:	b40e      	push	{r1, r2, r3}
   27370:	b503      	push	{r0, r1, lr}
   27372:	aa03      	add	r2, sp, #12
   27374:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   27378:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2737a:	f7e2 f9b9 	bl	96f0 <z_shell_fprintf_fmt>
}
   2737e:	b002      	add	sp, #8
   27380:	f85d eb04 	ldr.w	lr, [sp], #4
   27384:	b003      	add	sp, #12
   27386:	4770      	bx	lr

00027388 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   27388:	6882      	ldr	r2, [r0, #8]
{
   2738a:	b538      	push	{r3, r4, r5, lr}
   2738c:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2738e:	6810      	ldr	r0, [r2, #0]
   27390:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   27392:	b110      	cbz	r0, 2739a <full_line_cmd+0x12>
   27394:	f001 f9b6 	bl	28704 <strlen>
   27398:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2739a:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2739c:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2739e:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
   273a0:	fbb3 f2f0 	udiv	r2, r3, r0
   273a4:	fb00 3012 	mls	r0, r0, r2, r3
}
   273a8:	fab0 f080 	clz	r0, r0
   273ac:	0940      	lsrs	r0, r0, #5
   273ae:	bd38      	pop	{r3, r4, r5, pc}

000273b0 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   273b0:	6882      	ldr	r2, [r0, #8]
{
   273b2:	b538      	push	{r3, r4, r5, lr}
   273b4:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   273b6:	6810      	ldr	r0, [r2, #0]
   273b8:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
   273ba:	b110      	cbz	r0, 273c2 <z_shell_cursor_in_empty_line+0x12>
   273bc:	f001 f9a2 	bl	28704 <strlen>
   273c0:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   273c2:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   273c4:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   273c6:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
   273c8:	fbb3 f2f0 	udiv	r2, r3, r0
   273cc:	fb00 3012 	mls	r0, r0, r2, r3
}
   273d0:	fab0 f080 	clz	r0, r0
   273d4:	0940      	lsrs	r0, r0, #5
   273d6:	bd38      	pop	{r3, r4, r5, pc}

000273d8 <z_shell_op_cond_next_line>:
{
   273d8:	b510      	push	{r4, lr}
   273da:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   273dc:	f7ff ffe8 	bl	273b0 <z_shell_cursor_in_empty_line>
   273e0:	b120      	cbz	r0, 273ec <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
   273e2:	6960      	ldr	r0, [r4, #20]
}
   273e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
   273e8:	f7e2 b9c8 	b.w	977c <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   273ec:	4620      	mov	r0, r4
   273ee:	f7ff ffcb 	bl	27388 <full_line_cmd>
   273f2:	2800      	cmp	r0, #0
   273f4:	d1f5      	bne.n	273e2 <z_shell_op_cond_next_line+0xa>
}
   273f6:	bd10      	pop	{r4, pc}

000273f8 <z_shell_op_cursor_position_synchronize>:
{
   273f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   273fa:	6884      	ldr	r4, [r0, #8]
{
   273fc:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   273fe:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   27400:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   27402:	f104 0020 	add.w	r0, r4, #32
   27406:	f7ff fdca 	bl	26f9e <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
   2740a:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
   2740c:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
   2740e:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   27410:	f7ff ffba 	bl	27388 <full_line_cmd>
   27414:	b110      	cbz	r0, 2741c <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
   27416:	6968      	ldr	r0, [r5, #20]
   27418:	f7e2 f9b0 	bl	977c <z_cursor_next_line_move.isra.0>
	if (last_line) {
   2741c:	42b7      	cmp	r7, r6
   2741e:	d107      	bne.n	27430 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   27420:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   27422:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   27424:	4628      	mov	r0, r5
   27426:	1ac9      	subs	r1, r1, r3
}
   27428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   2742c:	f7e2 b9c2 	b.w	97b4 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   27430:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   27432:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   27434:	4628      	mov	r0, r5
   27436:	1ac9      	subs	r1, r1, r3
   27438:	f7e2 f9a6 	bl	9788 <z_shell_op_cursor_vert_move>
   2743c:	e7f0      	b.n	27420 <z_shell_op_cursor_position_synchronize+0x28>

0002743e <z_shell_op_cursor_move>:
{
   2743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27440:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   27442:	6880      	ldr	r0, [r0, #8]
{
   27444:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   27446:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   27448:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2744a:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   2744c:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   2744e:	f7ff fda6 	bl	26f9e <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   27452:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   27454:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   27456:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   27458:	462a      	mov	r2, r5
   2745a:	3020      	adds	r0, #32
   2745c:	f7ff fd94 	bl	26f88 <z_row_span_with_buffer_offsets_get>
   27460:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   27462:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   27464:	462a      	mov	r2, r5
   27466:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   27468:	3020      	adds	r0, #32
   2746a:	f7ff fd7e 	bl	26f6a <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   2746e:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   27470:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   27472:	4620      	mov	r0, r4
   27474:	f7e2 f988 	bl	9788 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   27478:	4631      	mov	r1, r6
   2747a:	4620      	mov	r0, r4
   2747c:	f7e2 f99a 	bl	97b4 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   27480:	68a3      	ldr	r3, [r4, #8]
   27482:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   27484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027486 <z_shell_op_cursor_word_move>:
{
   27486:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   2748a:	1e0c      	subs	r4, r1, #0
{
   2748c:	4606      	mov	r6, r0
	if (val < 0) {
   2748e:	da34      	bge.n	274fa <z_shell_op_cursor_word_move+0x74>
		val = -val;
   27490:	4264      	negs	r4, r4
   27492:	b224      	sxth	r4, r4
		sign = -1;
   27494:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27498:	b2a4      	uxth	r4, r4
   2749a:	b2af      	uxth	r7, r5
   2749c:	e025      	b.n	274ea <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
   2749e:	68b3      	ldr	r3, [r6, #8]
   274a0:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
   274a4:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
   274a8:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
   274ac:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   274ae:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   274b0:	eba3 010e 	sub.w	r1, r3, lr
   274b4:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   274b6:	b90b      	cbnz	r3, 274bc <z_shell_op_cursor_word_move+0x36>
   274b8:	1c6a      	adds	r2, r5, #1
   274ba:	d010      	beq.n	274de <z_shell_op_cursor_word_move+0x58>
   274bc:	4599      	cmp	r9, r3
   274be:	d101      	bne.n	274c4 <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
   274c0:	2d01      	cmp	r5, #1
   274c2:	d00c      	beq.n	274de <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
   274c4:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   274c8:	f042 0c20 	orr.w	ip, r2, #32
   274cc:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   274d0:	f1bc 0f19 	cmp.w	ip, #25
   274d4:	d90d      	bls.n	274f2 <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   274d6:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   274d8:	2a09      	cmp	r2, #9
   274da:	d90a      	bls.n	274f2 <z_shell_op_cursor_word_move+0x6c>
			if (found) {
   274dc:	b150      	cbz	r0, 274f4 <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
   274de:	b209      	sxth	r1, r1
   274e0:	4630      	mov	r0, r6
   274e2:	f7ff ffac 	bl	2743e <z_shell_op_cursor_move>
   274e6:	3c01      	subs	r4, #1
   274e8:	b2a4      	uxth	r4, r4
	while (val--) {
   274ea:	2c00      	cmp	r4, #0
   274ec:	d1d7      	bne.n	2749e <z_shell_op_cursor_word_move+0x18>
}
   274ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   274f2:	2001      	movs	r0, #1
	while (1) {
   274f4:	443b      	add	r3, r7
   274f6:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   274f8:	e7da      	b.n	274b0 <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
   274fa:	2501      	movs	r5, #1
   274fc:	e7cc      	b.n	27498 <z_shell_op_cursor_word_move+0x12>

000274fe <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   274fe:	6883      	ldr	r3, [r0, #8]
   27500:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   27502:	4249      	negs	r1, r1
   27504:	b209      	sxth	r1, r1
   27506:	f7ff bf9a 	b.w	2743e <z_shell_op_cursor_move>

0002750a <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   2750a:	6883      	ldr	r3, [r0, #8]
   2750c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   2750e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   27510:	1ac9      	subs	r1, r1, r3
   27512:	b209      	sxth	r1, r1
   27514:	f7ff bf93 	b.w	2743e <z_shell_op_cursor_move>

00027518 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   27518:	6883      	ldr	r3, [r0, #8]
   2751a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   2751c:	b11b      	cbz	r3, 27526 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   2751e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27522:	f7ff bf8c 	b.w	2743e <z_shell_op_cursor_move>
}
   27526:	4770      	bx	lr

00027528 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   27528:	6883      	ldr	r3, [r0, #8]
   2752a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   2752c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   2752e:	429a      	cmp	r2, r3
   27530:	d202      	bcs.n	27538 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   27532:	2101      	movs	r1, #1
   27534:	f7ff bf83 	b.w	2743e <z_shell_op_cursor_move>
}
   27538:	4770      	bx	lr

0002753a <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   2753a:	6883      	ldr	r3, [r0, #8]
   2753c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   2753e:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   27540:	4413      	add	r3, r2
   27542:	2200      	movs	r2, #0
   27544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   27548:	f7e2 b90c 	b.w	9764 <z_clear_eos>

0002754c <z_shell_cmd_line_erase>:
{
   2754c:	b510      	push	{r4, lr}
   2754e:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   27550:	6880      	ldr	r0, [r0, #8]
   27552:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   27554:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   27556:	3020      	adds	r0, #32
   27558:	f7ff fd21 	bl	26f9e <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   2755c:	68a3      	ldr	r3, [r4, #8]
   2755e:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   27560:	4620      	mov	r0, r4
   27562:	f1c1 0101 	rsb	r1, r1, #1
   27566:	f7e2 f925 	bl	97b4 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   2756a:	68a3      	ldr	r3, [r4, #8]
   2756c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   2756e:	4620      	mov	r0, r4
   27570:	3901      	subs	r1, #1
   27572:	f7e2 f909 	bl	9788 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   27576:	4620      	mov	r0, r4
}
   27578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   2757c:	f7e2 b8f2 	b.w	9764 <z_clear_eos>

00027580 <z_shell_write>:
{
   27580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27584:	4605      	mov	r5, r0
   27586:	b086      	sub	sp, #24
   27588:	460f      	mov	r7, r1
   2758a:	4614      	mov	r4, r2
	size_t offset = 0;
   2758c:	2600      	movs	r6, #0
	while (length) {
   2758e:	b914      	cbnz	r4, 27596 <z_shell_write+0x16>
}
   27590:	b006      	add	sp, #24
   27592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   27596:	6868      	ldr	r0, [r5, #4]
   27598:	6803      	ldr	r3, [r0, #0]
   2759a:	4622      	mov	r2, r4
   2759c:	f8d3 800c 	ldr.w	r8, [r3, #12]
   275a0:	19b9      	adds	r1, r7, r6
   275a2:	466b      	mov	r3, sp
   275a4:	47c0      	blx	r8
		offset += tmp_cnt;
   275a6:	9a00      	ldr	r2, [sp, #0]
   275a8:	4416      	add	r6, r2
		length -= tmp_cnt;
   275aa:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   275ac:	2a00      	cmp	r2, #0
   275ae:	d1ee      	bne.n	2758e <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   275b0:	68ab      	ldr	r3, [r5, #8]
   275b2:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   275b4:	2903      	cmp	r1, #3
   275b6:	d0ea      	beq.n	2758e <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   275b8:	2902      	cmp	r1, #2
   275ba:	d813      	bhi.n	275e4 <z_shell_write+0x64>
		k_poll_event_init(&event,
   275bc:	f503 7326 	add.w	r3, r3, #664	; 0x298
   275c0:	2101      	movs	r1, #1
   275c2:	a801      	add	r0, sp, #4
   275c4:	f003 ff85 	bl	2b4d2 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   275c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   275cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   275d0:	2101      	movs	r1, #1
   275d2:	a801      	add	r0, sp, #4
   275d4:	f7fe f942 	bl	2585c <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   275d8:	68a8      	ldr	r0, [r5, #8]
   275da:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   275de:	f003 ff9a 	bl	2b516 <z_impl_k_poll_signal_reset>
   275e2:	e7d4      	b.n	2758e <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   275e4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   275e8:	0792      	lsls	r2, r2, #30
   275ea:	d5fb      	bpl.n	275e4 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   275ec:	f3bf 8f5b 	dmb	ish
   275f0:	f503 7319 	add.w	r3, r3, #612	; 0x264
   275f4:	e853 2f00 	ldrex	r2, [r3]
   275f8:	f022 0202 	bic.w	r2, r2, #2
   275fc:	e843 2100 	strex	r1, r2, [r3]
   27600:	2900      	cmp	r1, #0
   27602:	d1f7      	bne.n	275f4 <z_shell_write+0x74>
   27604:	f3bf 8f5b 	dmb	ish
	return ret;
   27608:	e7c1      	b.n	2758e <z_shell_write+0xe>

0002760a <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   2760a:	f7ff bfb9 	b.w	27580 <z_shell_write>

0002760e <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   2760e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27610:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   27612:	6881      	ldr	r1, [r0, #8]
   27614:	461e      	mov	r6, r3
   27616:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   2761a:	06db      	lsls	r3, r3, #27
{
   2761c:	4604      	mov	r4, r0
   2761e:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   27620:	d517      	bpl.n	27652 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
   27622:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   27626:	42bb      	cmp	r3, r7
   27628:	d013      	beq.n	27652 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   2762a:	2202      	movs	r2, #2
   2762c:	312e      	adds	r1, #46	; 0x2e
   2762e:	a801      	add	r0, sp, #4
   27630:	f001 f8be 	bl	287b0 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   27634:	4639      	mov	r1, r7
   27636:	4620      	mov	r0, r4
   27638:	f7e2 f8da 	bl	97f0 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   2763c:	6960      	ldr	r0, [r4, #20]
   2763e:	4632      	mov	r2, r6
   27640:	4629      	mov	r1, r5
   27642:	f7e2 f855 	bl	96f0 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   27646:	a901      	add	r1, sp, #4
   27648:	4620      	mov	r0, r4
   2764a:	f7e2 f8f1 	bl	9830 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   2764e:	b003      	add	sp, #12
   27650:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   27652:	6960      	ldr	r0, [r4, #20]
   27654:	4632      	mov	r2, r6
   27656:	4629      	mov	r1, r5
}
   27658:	b003      	add	sp, #12
   2765a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   2765e:	f7e2 b847 	b.w	96f0 <z_shell_fprintf_fmt>

00027662 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   27662:	b40c      	push	{r2, r3}
   27664:	b507      	push	{r0, r1, r2, lr}
   27666:	ab04      	add	r3, sp, #16
   27668:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   2766c:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   2766e:	f7ff ffce 	bl	2760e <z_shell_vfprintf>
	va_end(args);
}
   27672:	b003      	add	sp, #12
   27674:	f85d eb04 	ldr.w	lr, [sp], #4
   27678:	b002      	add	sp, #8
   2767a:	4770      	bx	lr

0002767c <data_insert>:
{
   2767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   27680:	6886      	ldr	r6, [r0, #8]
   27682:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   27684:	18ab      	adds	r3, r5, r2
   27686:	2bff      	cmp	r3, #255	; 0xff
{
   27688:	4607      	mov	r7, r0
   2768a:	4688      	mov	r8, r1
   2768c:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   2768e:	dc1e      	bgt.n	276ce <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   27690:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
   27692:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   27694:	3342      	adds	r3, #66	; 0x42
   27696:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   27698:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   2769a:	462a      	mov	r2, r5
   2769c:	4631      	mov	r1, r6
   2769e:	1930      	adds	r0, r6, r4
   276a0:	f001 f86e 	bl	28780 <memmove>
	memcpy(curr_pos, data, len);
   276a4:	4622      	mov	r2, r4
   276a6:	4641      	mov	r1, r8
   276a8:	4630      	mov	r0, r6
   276aa:	f001 f881 	bl	287b0 <memcpy>
	shell->ctx->cmd_buff_len += len;
   276ae:	68b9      	ldr	r1, [r7, #8]
   276b0:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
   276b2:	4423      	add	r3, r4
   276b4:	b29b      	uxth	r3, r3
   276b6:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   276b8:	440b      	add	r3, r1
   276ba:	2200      	movs	r2, #0
   276bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
   276c0:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
   276c4:	079b      	lsls	r3, r3, #30
   276c6:	d404      	bmi.n	276d2 <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
   276c8:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
   276ca:	4414      	add	r4, r2
   276cc:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
   276ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   276d2:	4629      	mov	r1, r5
   276d4:	4638      	mov	r0, r7
}
   276d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   276da:	f7e2 b923 	b.w	9924 <reprint_from_cursor>

000276de <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   276de:	f7ff bfcd 	b.w	2767c <data_insert>

000276e2 <z_shell_op_char_delete>:
{
   276e2:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   276e4:	6883      	ldr	r3, [r0, #8]
{
   276e6:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   276e8:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   276ea:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   276ec:	1a24      	subs	r4, r4, r0
   276ee:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   276f0:	b18c      	cbz	r4, 27716 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   276f2:	3042      	adds	r0, #66	; 0x42
   276f4:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   276f6:	4622      	mov	r2, r4
   276f8:	1c41      	adds	r1, r0, #1
   276fa:	f001 f841 	bl	28780 <memmove>
	--shell->ctx->cmd_buff_len;
   276fe:	68aa      	ldr	r2, [r5, #8]
   27700:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   27702:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   27704:	3b01      	subs	r3, #1
   27706:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   27708:	4628      	mov	r0, r5
   2770a:	2201      	movs	r2, #1
}
   2770c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   27710:	b289      	uxth	r1, r1
   27712:	f7e2 b907 	b.w	9924 <reprint_from_cursor>
}
   27716:	bd38      	pop	{r3, r4, r5, pc}

00027718 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   27718:	6883      	ldr	r3, [r0, #8]
   2771a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   2771c:	b510      	push	{r4, lr}
   2771e:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   27720:	b152      	cbz	r2, 27738 <z_shell_op_char_backspace+0x20>
   27722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   27724:	b143      	cbz	r3, 27738 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   27726:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2772a:	f7ff fe88 	bl	2743e <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   2772e:	4620      	mov	r0, r4
}
   27730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   27734:	f7ff bfd5 	b.w	276e2 <z_shell_op_char_delete>
}
   27738:	bd10      	pop	{r4, pc}

0002773a <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
   2773a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
   2773c:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   2773e:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
   27740:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
   27742:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
   27744:	4630      	mov	r0, r6
   27746:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
   2774a:	f7fe ff80 	bl	2664e <mpsc_pbuf_claim>
   2774e:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
   27752:	4604      	mov	r4, r0
   27754:	b160      	cbz	r0, 27770 <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
   27756:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
   27758:	4601      	mov	r1, r0
   2775a:	bf0c      	ite	eq
   2775c:	220e      	moveq	r2, #14
   2775e:	220f      	movne	r2, #15
   27760:	4638      	mov	r0, r7
   27762:	f7e0 f945 	bl	79f0 <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
   27766:	4630      	mov	r0, r6
   27768:	4621      	mov	r1, r4
   2776a:	f7fe ffbc 	bl	266e6 <mpsc_pbuf_free>

	return true;
   2776e:	2001      	movs	r0, #1
}
   27770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027772 <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   27772:	6843      	ldr	r3, [r0, #4]
{
   27774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   27778:	681e      	ldr	r6, [r3, #0]
   2777a:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
   2777c:	69f3      	ldr	r3, [r6, #28]
   2777e:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
   27782:	68da      	ldr	r2, [r3, #12]
   27784:	7912      	ldrb	r2, [r2, #4]
   27786:	2a01      	cmp	r2, #1
{
   27788:	460d      	mov	r5, r1
   2778a:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
   2778e:	d003      	beq.n	27798 <log2_process+0x26>
   27790:	2a03      	cmp	r2, #3
   27792:	d042      	beq.n	2781a <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
   27794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   27798:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
   2779a:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
   2779c:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2779e:	0759      	lsls	r1, r3, #29
   277a0:	d439      	bmi.n	27816 <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   277a2:	682b      	ldr	r3, [r5, #0]
   277a4:	f3c3 2449 	ubfx	r4, r3, #9, #10
   277a8:	886b      	ldrh	r3, [r5, #2]
   277aa:	f3c3 03cb 	ubfx	r3, r3, #3, #12
   277ae:	441c      	add	r4, r3
   277b0:	3413      	adds	r4, #19
   277b2:	f024 0407 	bic.w	r4, r4, #7
   277b6:	08a4      	lsrs	r4, r4, #2
   277b8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   277bc:	f240 3ce7 	movw	ip, #999	; 0x3e7
   277c0:	2100      	movs	r1, #0
   277c2:	fbe0 c10e 	umlal	ip, r1, r0, lr
   277c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   277ca:	2300      	movs	r3, #0
   277cc:	4660      	mov	r0, ip
   277ce:	f7d9 fea3 	bl	1518 <__aeabi_uldivmod>
   277d2:	4602      	mov	r2, r0
   277d4:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
   277d6:	4638      	mov	r0, r7
   277d8:	4621      	mov	r1, r4
   277da:	f7fe fea5 	bl	26528 <mpsc_pbuf_alloc>
	if (!dst) {
   277de:	4680      	mov	r8, r0
   277e0:	b188      	cbz	r0, 27806 <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
   277e2:	4629      	mov	r1, r5
   277e4:	6802      	ldr	r2, [r0, #0]
   277e6:	f851 3b04 	ldr.w	r3, [r1], #4
   277ea:	f3c3 039d 	ubfx	r3, r3, #2, #30
   277ee:	f363 029f 	bfi	r2, r3, #2, #30
   277f2:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
   277f6:	1e62      	subs	r2, r4, #1
   277f8:	0092      	lsls	r2, r2, #2
   277fa:	f000 ffd9 	bl	287b0 <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
   277fe:	4641      	mov	r1, r8
   27800:	4638      	mov	r0, r7
   27802:	f7fe ff07 	bl	26614 <mpsc_pbuf_commit>
				signal =
   27806:	68b0      	ldr	r0, [r6, #8]
   27808:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   2780c:	2100      	movs	r1, #0
}
   2780e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27812:	f7fe b87f 	b.w	25914 <z_impl_k_poll_signal_raise>
	return 0;
   27816:	2400      	movs	r4, #0
   27818:	e7ce      	b.n	277b8 <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
   2781a:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
   2781c:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
   2781e:	f7ff fe95 	bl	2754c <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
   27822:	2c00      	cmp	r4, #0
   27824:	bf0c      	ite	eq
   27826:	f04f 080e 	moveq.w	r8, #14
   2782a:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
   2782e:	f04f 0320 	mov.w	r3, #32
   27832:	f3ef 8411 	mrs	r4, BASEPRI
   27836:	f383 8812 	msr	BASEPRI_MAX, r3
   2783a:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   2783e:	68b3      	ldr	r3, [r6, #8]
   27840:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
   27844:	051a      	lsls	r2, r3, #20
   27846:	d402      	bmi.n	2784e <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
   27848:	4630      	mov	r0, r6
   2784a:	f7ff fe7f 	bl	2754c <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
   2784e:	4642      	mov	r2, r8
   27850:	4629      	mov	r1, r5
   27852:	4638      	mov	r0, r7
   27854:	f7e0 f8cc 	bl	79f0 <log_output_msg2_process>
   27858:	68b3      	ldr	r3, [r6, #8]
   2785a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
   2785e:	051b      	lsls	r3, r3, #20
   27860:	d402      	bmi.n	27868 <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
   27862:	4630      	mov	r0, r6
   27864:	f7e2 f8ce 	bl	9a04 <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
   27868:	f384 8811 	msr	BASEPRI, r4
   2786c:	f3bf 8f6f 	isb	sy
}
   27870:	e790      	b.n	27794 <log2_process+0x22>

00027872 <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   27872:	6843      	ldr	r3, [r0, #4]
   27874:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   27876:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   2787a:	f3bf 8f5b 	dmb	ish
   2787e:	e853 0f00 	ldrex	r0, [r3]
   27882:	4408      	add	r0, r1
   27884:	e843 0c00 	strex	ip, r0, [r3]
   27888:	f1bc 0f00 	cmp.w	ip, #0
   2788c:	d1f7      	bne.n	2787e <dropped+0xc>
   2788e:	f3bf 8f5b 	dmb	ish
   27892:	68d3      	ldr	r3, [r2, #12]
   27894:	f3bf 8f5b 	dmb	ish
   27898:	e853 2f00 	ldrex	r2, [r3]
   2789c:	440a      	add	r2, r1
   2789e:	e843 2000 	strex	r0, r2, [r3]
   278a2:	2800      	cmp	r0, #0
   278a4:	d1f8      	bne.n	27898 <dropped+0x26>
   278a6:	f3bf 8f5b 	dmb	ish
}
   278aa:	4770      	bx	lr

000278ac <z_shell_log_backend_output_func>:
{
   278ac:	b510      	push	{r4, lr}
   278ae:	4613      	mov	r3, r2
   278b0:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   278b2:	460a      	mov	r2, r1
   278b4:	4601      	mov	r1, r0
   278b6:	4618      	mov	r0, r3
   278b8:	f7ff fea7 	bl	2760a <z_shell_print_stream>
}
   278bc:	4620      	mov	r0, r4
   278be:	bd10      	pop	{r4, pc}

000278c0 <z_shell_log_backend_enable>:
{
   278c0:	b570      	push	{r4, r5, r6, lr}
   278c2:	4604      	mov	r4, r0
   278c4:	460d      	mov	r5, r1
   278c6:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
   278c8:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
   278cc:	f7fe fe0d 	bl	264ea <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
   278d0:	4632      	mov	r2, r6
   278d2:	6820      	ldr	r0, [r4, #0]
   278d4:	4629      	mov	r1, r5
   278d6:	f7df ff0b 	bl	76f0 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   278da:	68a3      	ldr	r3, [r4, #8]
   278dc:	685b      	ldr	r3, [r3, #4]
   278de:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   278e0:	68e3      	ldr	r3, [r4, #12]
   278e2:	2200      	movs	r2, #0
   278e4:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   278e6:	2201      	movs	r2, #1
   278e8:	711a      	strb	r2, [r3, #4]
}
   278ea:	bd70      	pop	{r4, r5, r6, pc}

000278ec <z_shell_log_backend_disable>:
{
   278ec:	b510      	push	{r4, lr}
   278ee:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   278f0:	6800      	ldr	r0, [r0, #0]
   278f2:	f7ff f897 	bl	26a24 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   278f6:	68e3      	ldr	r3, [r4, #12]
   278f8:	2202      	movs	r2, #2
   278fa:	711a      	strb	r2, [r3, #4]
}
   278fc:	bd10      	pop	{r4, pc}

000278fe <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   278fe:	6843      	ldr	r3, [r0, #4]
{
   27900:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   27902:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   27904:	6860      	ldr	r0, [r4, #4]
   27906:	6803      	ldr	r3, [r0, #0]
   27908:	2101      	movs	r1, #1
   2790a:	689b      	ldr	r3, [r3, #8]
   2790c:	4798      	blx	r3
	if (err == 0) {
   2790e:	bb48      	cbnz	r0, 27964 <panic+0x66>
		shell->log_backend->control_block->state =
   27910:	69e3      	ldr	r3, [r4, #28]
   27912:	68db      	ldr	r3, [r3, #12]
   27914:	2203      	movs	r2, #3
   27916:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27918:	68a3      	ldr	r3, [r4, #8]
   2791a:	f3bf 8f5b 	dmb	ish
   2791e:	f503 7319 	add.w	r3, r3, #612	; 0x264
   27922:	e853 2f00 	ldrex	r2, [r3]
   27926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2792a:	e843 2100 	strex	r1, r2, [r3]
   2792e:	2900      	cmp	r1, #0
   27930:	d1f7      	bne.n	27922 <panic+0x24>
   27932:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   27936:	68a0      	ldr	r0, [r4, #8]
   27938:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2793a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2793c:	3020      	adds	r0, #32
   2793e:	f7ff fb2e 	bl	26f9e <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   27942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27946:	4620      	mov	r0, r4
   27948:	f7e1 ff1e 	bl	9788 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   2794c:	68a3      	ldr	r3, [r4, #8]
   2794e:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   27950:	4620      	mov	r0, r4
   27952:	4249      	negs	r1, r1
   27954:	f7e1 ff2e 	bl	97b4 <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
   27958:	4620      	mov	r0, r4
   2795a:	f7ff feee 	bl	2773a <process_msg2_from_buffer>
   2795e:	2800      	cmp	r0, #0
   27960:	d1fa      	bne.n	27958 <panic+0x5a>
}
   27962:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   27964:	69e0      	ldr	r0, [r4, #28]
}
   27966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   2796a:	f7ff bfbf 	b.w	278ec <z_shell_log_backend_disable>

0002796e <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   2796e:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   27970:	685b      	ldr	r3, [r3, #4]
{
   27972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
   27974:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
   27976:	68a3      	ldr	r3, [r4, #8]
   27978:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2797c:	68c3      	ldr	r3, [r0, #12]
   2797e:	f3bf 8f5b 	dmb	ish
{
   27982:	4605      	mov	r5, r0
   27984:	f3c6 1600 	ubfx	r6, r6, #4, #1
   27988:	2200      	movs	r2, #0
   2798a:	e853 7f00 	ldrex	r7, [r3]
   2798e:	e843 2100 	strex	r1, r2, [r3]
   27992:	2900      	cmp	r1, #0
   27994:	d1f9      	bne.n	2798a <z_shell_log_backend_process+0x1c>
   27996:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   2799a:	b19f      	cbz	r7, 279c4 <z_shell_log_backend_process+0x56>
		if (colors) {
   2799c:	b14e      	cbz	r6, 279b2 <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   2799e:	68a1      	ldr	r1, [r4, #8]
   279a0:	2202      	movs	r2, #2
   279a2:	312e      	adds	r1, #46	; 0x2e
   279a4:	a801      	add	r0, sp, #4
   279a6:	f000 ff03 	bl	287b0 <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   279aa:	2101      	movs	r1, #1
   279ac:	4620      	mov	r0, r4
   279ae:	f7e1 ff1f 	bl	97f0 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   279b2:	68a8      	ldr	r0, [r5, #8]
   279b4:	4639      	mov	r1, r7
   279b6:	f7e0 f87f 	bl	7ab8 <log_output_dropped_process>
		if (colors) {
   279ba:	b11e      	cbz	r6, 279c4 <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
   279bc:	a901      	add	r1, sp, #4
   279be:	4620      	mov	r0, r4
   279c0:	f7e1 ff36 	bl	9830 <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
   279c4:	4620      	mov	r0, r4
}
   279c6:	b003      	add	sp, #12
   279c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
   279cc:	f7ff beb5 	b.w	2773a <process_msg2_from_buffer>

000279d0 <z_shell_raw_fprintf>:
{
   279d0:	b40e      	push	{r1, r2, r3}
   279d2:	b503      	push	{r0, r1, lr}
   279d4:	aa03      	add	r2, sp, #12
   279d6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   279da:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   279dc:	f7e1 fe88 	bl	96f0 <z_shell_fprintf_fmt>
}
   279e0:	b002      	add	sp, #8
   279e2:	f85d eb04 	ldr.w	lr, [sp], #4
   279e6:	b003      	add	sp, #12
   279e8:	4770      	bx	lr

000279ea <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
   279ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   279ee:	4604      	mov	r4, r0
   279f0:	4690      	mov	r8, r2
	if (str == NULL) {
   279f2:	460e      	mov	r6, r1
   279f4:	2900      	cmp	r1, #0
   279f6:	d069      	beq.n	27acc <formatted_text_print.constprop.0+0xe2>
   279f8:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
   279fa:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   279fc:	2b20      	cmp	r3, #32
   279fe:	d023      	beq.n	27a48 <formatted_text_print.constprop.0+0x5e>
   27a00:	3b09      	subs	r3, #9
   27a02:	2b04      	cmp	r3, #4
   27a04:	d920      	bls.n	27a48 <formatted_text_print.constprop.0+0x5e>
   27a06:	4630      	mov	r0, r6
   27a08:	f000 fe7c 	bl	28704 <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   27a0c:	68a3      	ldr	r3, [r4, #8]
   27a0e:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   27a10:	b280      	uxth	r0, r0
   27a12:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   27a14:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   27a18:	4298      	cmp	r0, r3
   27a1a:	eb06 0905 	add.w	r9, r6, r5
   27a1e:	d915      	bls.n	27a4c <formatted_text_print.constprop.0+0x62>
   27a20:	4648      	mov	r0, r9
		size_t idx = 0;
   27a22:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
   27a24:	f810 2b01 	ldrb.w	r2, [r0], #1
   27a28:	2a20      	cmp	r2, #32
   27a2a:	d006      	beq.n	27a3a <formatted_text_print.constprop.0+0x50>
   27a2c:	f1a2 0c09 	sub.w	ip, r2, #9
   27a30:	f1bc 0f04 	cmp.w	ip, #4
   27a34:	d802      	bhi.n	27a3c <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
   27a36:	2a0a      	cmp	r2, #10
   27a38:	d02f      	beq.n	27a9a <formatted_text_print.constprop.0+0xb0>
   27a3a:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
   27a3c:	eb08 0207 	add.w	r2, r8, r7
   27a40:	4291      	cmp	r1, r2
   27a42:	d929      	bls.n	27a98 <formatted_text_print.constprop.0+0xae>
			++idx;
   27a44:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   27a46:	e7ed      	b.n	27a24 <formatted_text_print.constprop.0+0x3a>
		++offset;
   27a48:	3501      	adds	r5, #1
   27a4a:	e7d6      	b.n	279fa <formatted_text_print.constprop.0+0x10>
   27a4c:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
   27a4e:	2700      	movs	r7, #0
   27a50:	42b8      	cmp	r0, r7
   27a52:	d016      	beq.n	27a82 <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
   27a54:	f813 2b01 	ldrb.w	r2, [r3], #1
   27a58:	2a0a      	cmp	r2, #10
   27a5a:	eb05 0a07 	add.w	sl, r5, r7
   27a5e:	d119      	bne.n	27a94 <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   27a60:	6960      	ldr	r0, [r4, #20]
   27a62:	f7ff fa4a 	bl	26efa <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   27a66:	4649      	mov	r1, r9
   27a68:	463a      	mov	r2, r7
   27a6a:	4620      	mov	r0, r4
   27a6c:	f7ff fd88 	bl	27580 <z_shell_write>
					z_cursor_next_line_move(shell);
   27a70:	6960      	ldr	r0, [r4, #20]
   27a72:	f7e1 ffdf 	bl	9a34 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
   27a76:	4641      	mov	r1, r8
   27a78:	4620      	mov	r0, r4
					offset += idx + 1;
   27a7a:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
   27a7e:	f7e1 fe99 	bl	97b4 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   27a82:	6960      	ldr	r0, [r4, #20]
   27a84:	1971      	adds	r1, r6, r5
   27a86:	f7ff ffa3 	bl	279d0 <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
   27a8a:	6960      	ldr	r0, [r4, #20]
}
   27a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
   27a90:	f7e1 bfd0 	b.w	9a34 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
   27a94:	3701      	adds	r7, #1
   27a96:	e7db      	b.n	27a50 <formatted_text_print.constprop.0+0x66>
   27a98:	461f      	mov	r7, r3
   27a9a:	6960      	ldr	r0, [r4, #20]
   27a9c:	f7ff fa2d 	bl	26efa <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   27aa0:	463a      	mov	r2, r7
   27aa2:	4649      	mov	r1, r9
   27aa4:	4620      	mov	r0, r4
   27aa6:	f7ff fd6b 	bl	27580 <z_shell_write>
		offset += length;
   27aaa:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   27aac:	5d73      	ldrb	r3, [r6, r5]
   27aae:	2b20      	cmp	r3, #32
   27ab0:	d00a      	beq.n	27ac8 <formatted_text_print.constprop.0+0xde>
   27ab2:	3b09      	subs	r3, #9
   27ab4:	2b04      	cmp	r3, #4
   27ab6:	d907      	bls.n	27ac8 <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
   27ab8:	6960      	ldr	r0, [r4, #20]
   27aba:	f7e1 ffbb 	bl	9a34 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   27abe:	4641      	mov	r1, r8
   27ac0:	4620      	mov	r0, r4
   27ac2:	f7e1 fe77 	bl	97b4 <z_shell_op_cursor_horiz_move>
	while (true) {
   27ac6:	e79e      	b.n	27a06 <formatted_text_print.constprop.0+0x1c>
			++offset;
   27ac8:	3501      	adds	r5, #1
   27aca:	e7ef      	b.n	27aac <formatted_text_print.constprop.0+0xc2>
}
   27acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027ad0 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   27ad0:	6983      	ldr	r3, [r0, #24]
   27ad2:	2000      	movs	r0, #0
   27ad4:	6018      	str	r0, [r3, #0]
}
   27ad6:	4770      	bx	lr

00027ad8 <z_shell_raw_fprintf>:
{
   27ad8:	b40e      	push	{r1, r2, r3}
   27ada:	b503      	push	{r0, r1, lr}
   27adc:	aa03      	add	r2, sp, #12
   27ade:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   27ae2:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   27ae4:	f7e1 fe04 	bl	96f0 <z_shell_fprintf_fmt>
}
   27ae8:	b002      	add	sp, #8
   27aea:	f85d eb04 	ldr.w	lr, [sp], #4
   27aee:	b003      	add	sp, #12
   27af0:	4770      	bx	lr

00027af2 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27af2:	6883      	ldr	r3, [r0, #8]
   27af4:	f3bf 8f5b 	dmb	ish
   27af8:	f503 7318 	add.w	r3, r3, #608	; 0x260
   27afc:	e853 2f00 	ldrex	r2, [r3]
   27b00:	f022 0208 	bic.w	r2, r2, #8
   27b04:	e843 2100 	strex	r1, r2, [r3]
   27b08:	2900      	cmp	r1, #0
   27b0a:	d1f7      	bne.n	27afc <cmd_bacskpace_mode_backspace+0xa>
   27b0c:	f3bf 8f5b 	dmb	ish
}
   27b10:	2000      	movs	r0, #0
   27b12:	4770      	bx	lr

00027b14 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b14:	6883      	ldr	r3, [r0, #8]
   27b16:	f3bf 8f5b 	dmb	ish
   27b1a:	f503 7318 	add.w	r3, r3, #608	; 0x260
   27b1e:	e853 2f00 	ldrex	r2, [r3]
   27b22:	f042 0208 	orr.w	r2, r2, #8
   27b26:	e843 2100 	strex	r1, r2, [r3]
   27b2a:	2900      	cmp	r1, #0
   27b2c:	d1f7      	bne.n	27b1e <cmd_bacskpace_mode_delete+0xa>
   27b2e:	f3bf 8f5b 	dmb	ish
}
   27b32:	2000      	movs	r0, #0
   27b34:	4770      	bx	lr

00027b36 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27b36:	6883      	ldr	r3, [r0, #8]
   27b38:	f3bf 8f5b 	dmb	ish
   27b3c:	f503 7318 	add.w	r3, r3, #608	; 0x260
   27b40:	e853 2f00 	ldrex	r2, [r3]
   27b44:	f022 0202 	bic.w	r2, r2, #2
   27b48:	e843 2100 	strex	r1, r2, [r3]
   27b4c:	2900      	cmp	r1, #0
   27b4e:	d1f7      	bne.n	27b40 <cmd_echo_off+0xa>
   27b50:	f3bf 8f5b 	dmb	ish
}
   27b54:	2000      	movs	r0, #0
   27b56:	4770      	bx	lr

00027b58 <cmd_colors_off>:
   27b58:	6883      	ldr	r3, [r0, #8]
   27b5a:	f3bf 8f5b 	dmb	ish
   27b5e:	f503 7318 	add.w	r3, r3, #608	; 0x260
   27b62:	e853 2f00 	ldrex	r2, [r3]
   27b66:	f022 0210 	bic.w	r2, r2, #16
   27b6a:	e843 2100 	strex	r1, r2, [r3]
   27b6e:	2900      	cmp	r1, #0
   27b70:	d1f7      	bne.n	27b62 <cmd_colors_off+0xa>
   27b72:	f3bf 8f5b 	dmb	ish
}
   27b76:	2000      	movs	r0, #0
   27b78:	4770      	bx	lr

00027b7a <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b7a:	6883      	ldr	r3, [r0, #8]
   27b7c:	f3bf 8f5b 	dmb	ish
   27b80:	f503 7318 	add.w	r3, r3, #608	; 0x260
   27b84:	e853 2f00 	ldrex	r2, [r3]
   27b88:	f042 0210 	orr.w	r2, r2, #16
   27b8c:	e843 2100 	strex	r1, r2, [r3]
   27b90:	2900      	cmp	r1, #0
   27b92:	d1f7      	bne.n	27b84 <cmd_colors_on+0xa>
   27b94:	f3bf 8f5b 	dmb	ish
}
   27b98:	2000      	movs	r0, #0
   27b9a:	4770      	bx	lr

00027b9c <cmd_echo_on>:
   27b9c:	6883      	ldr	r3, [r0, #8]
   27b9e:	f3bf 8f5b 	dmb	ish
   27ba2:	f503 7318 	add.w	r3, r3, #608	; 0x260
   27ba6:	e853 2f00 	ldrex	r2, [r3]
   27baa:	f042 0202 	orr.w	r2, r2, #2
   27bae:	e843 2100 	strex	r1, r2, [r3]
   27bb2:	2900      	cmp	r1, #0
   27bb4:	d1f7      	bne.n	27ba6 <cmd_echo_on+0xa>
   27bb6:	f3bf 8f5b 	dmb	ish
}
   27bba:	2000      	movs	r0, #0
   27bbc:	4770      	bx	lr

00027bbe <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   27bbe:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27bc0:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   27bc2:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   27bc4:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   27bc8:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   27bca:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   27bcc:	2200      	movs	r2, #0
	node->prev = NULL;
   27bce:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   27bd2:	8919      	ldrh	r1, [r3, #8]
   27bd4:	895b      	ldrh	r3, [r3, #10]
   27bd6:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   27bd8:	310c      	adds	r1, #12
   27bda:	f7fe fbb5 	bl	26348 <ring_buf_get_finish>

	return true;
}
   27bde:	2001      	movs	r0, #1
   27be0:	bd08      	pop	{r3, pc}

00027be2 <z_shell_history_mode_exit>:
	history->current = NULL;
   27be2:	2300      	movs	r3, #0
   27be4:	60c3      	str	r3, [r0, #12]
}
   27be6:	4770      	bx	lr

00027be8 <z_shell_history_get>:
{
   27be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27bea:	461f      	mov	r7, r3
	return list->head == list;
   27bec:	4603      	mov	r3, r0
   27bee:	4616      	mov	r6, r2
   27bf0:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   27bf4:	429c      	cmp	r4, r3
   27bf6:	d102      	bne.n	27bfe <z_shell_history_get+0x16>
		*len = 0U;
   27bf8:	2000      	movs	r0, #0
   27bfa:	8038      	strh	r0, [r7, #0]
}
   27bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
   27bfe:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
   27c00:	b9b1      	cbnz	r1, 27c30 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   27c02:	2d00      	cmp	r5, #0
   27c04:	d0f8      	beq.n	27bf8 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   27c06:	42ac      	cmp	r4, r5
   27c08:	d102      	bne.n	27c10 <z_shell_history_get+0x28>
	history->current = l_item;
   27c0a:	2300      	movs	r3, #0
   27c0c:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   27c0e:	e7f3      	b.n	27bf8 <z_shell_history_get+0x10>
   27c10:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   27c12:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   27c14:	2c00      	cmp	r4, #0
   27c16:	d0ef      	beq.n	27bf8 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   27c18:	8922      	ldrh	r2, [r4, #8]
   27c1a:	f104 010c 	add.w	r1, r4, #12
   27c1e:	4630      	mov	r0, r6
   27c20:	f000 fdc6 	bl	287b0 <memcpy>
		*len = h_item->len;
   27c24:	8923      	ldrh	r3, [r4, #8]
   27c26:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   27c28:	2200      	movs	r2, #0
   27c2a:	54f2      	strb	r2, [r6, r3]
		return true;
   27c2c:	2001      	movs	r0, #1
   27c2e:	e7e5      	b.n	27bfc <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   27c30:	2d00      	cmp	r5, #0
   27c32:	d0ee      	beq.n	27c12 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   27c34:	6883      	ldr	r3, [r0, #8]
   27c36:	42ab      	cmp	r3, r5
   27c38:	d0e7      	beq.n	27c0a <z_shell_history_get+0x22>
   27c3a:	682c      	ldr	r4, [r5, #0]
   27c3c:	e7e9      	b.n	27c12 <z_shell_history_get+0x2a>

00027c3e <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   27c3e:	b538      	push	{r3, r4, r5, lr}
   27c40:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   27c42:	1d05      	adds	r5, r0, #4
   27c44:	6863      	ldr	r3, [r4, #4]
   27c46:	42ab      	cmp	r3, r5
   27c48:	d004      	beq.n	27c54 <z_shell_history_purge+0x16>
   27c4a:	4620      	mov	r0, r4
   27c4c:	f7ff ffb7 	bl	27bbe <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   27c50:	2800      	cmp	r0, #0
   27c52:	d1f7      	bne.n	27c44 <z_shell_history_purge+0x6>
	}
}
   27c54:	bd38      	pop	{r3, r4, r5, pc}

00027c56 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   27c56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
   27c5a:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   27c5c:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   27c60:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   27c64:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   27c66:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   27c6a:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   27c6c:	429d      	cmp	r5, r3
{
   27c6e:	4604      	mov	r4, r0
   27c70:	468a      	mov	sl, r1
   27c72:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   27c74:	d841      	bhi.n	27cfa <z_shell_history_put+0xa4>
	history->current = NULL;
   27c76:	2300      	movs	r3, #0
   27c78:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   27c7a:	2a00      	cmp	r2, #0
   27c7c:	d03d      	beq.n	27cfa <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   27c7e:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   27c82:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27c84:	4581      	cmp	r9, r0
   27c86:	d12d      	bne.n	27ce4 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   27c88:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   27c8a:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   27c8e:	6820      	ldr	r0, [r4, #0]
   27c90:	462a      	mov	r2, r5
   27c92:	a901      	add	r1, sp, #4
   27c94:	f7fe fac5 	bl	26222 <ring_buf_put_claim>
		if (claim_len < total_len) {
   27c98:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   27c9a:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   27c9c:	d930      	bls.n	27d00 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   27c9e:	6820      	ldr	r0, [r4, #0]
   27ca0:	462a      	mov	r2, r5
   27ca2:	a901      	add	r1, sp, #4
   27ca4:	f7fe fabd 	bl	26222 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   27ca8:	4285      	cmp	r5, r0
   27caa:	d12a      	bne.n	27d02 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   27cac:	4631      	mov	r1, r6
   27cae:	6820      	ldr	r0, [r4, #0]
   27cb0:	f7fe fae4 	bl	2627c <ring_buf_put_finish>
				padding += claim_len;
   27cb4:	44b0      	add	r8, r6
   27cb6:	fa1f f888 	uxth.w	r8, r8
   27cba:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
   27cbc:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   27cbe:	4651      	mov	r1, sl
	item->len = len;
   27cc0:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   27cc2:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   27cc6:	463a      	mov	r2, r7
   27cc8:	f105 000c 	add.w	r0, r5, #12
   27ccc:	f000 fd70 	bl	287b0 <memcpy>
	sys_dnode_t *const head = list->head;
   27cd0:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   27cd2:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
   27cd4:	e9c5 3900 	strd	r3, r9, [r5]
   27cd8:	4631      	mov	r1, r6
	head->prev = node;
   27cda:	605d      	str	r5, [r3, #4]
	list->head = node;
   27cdc:	6065      	str	r5, [r4, #4]
   27cde:	f7fe facd 	bl	2627c <ring_buf_put_finish>
			break;
   27ce2:	e00a      	b.n	27cfa <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   27ce4:	9001      	str	r0, [sp, #4]
	if (l_item &&
   27ce6:	2800      	cmp	r0, #0
   27ce8:	d0cf      	beq.n	27c8a <z_shell_history_put+0x34>
	   (h_item->len == len) &&
   27cea:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   27cec:	4293      	cmp	r3, r2
   27cee:	d1cc      	bne.n	27c8a <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   27cf0:	300c      	adds	r0, #12
   27cf2:	f000 fd34 	bl	2875e <memcmp>
	   (h_item->len == len) &&
   27cf6:	2800      	cmp	r0, #0
   27cf8:	d1c7      	bne.n	27c8a <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   27cfa:	b003      	add	sp, #12
   27cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   27d00:	d0dc      	beq.n	27cbc <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   27d02:	6820      	ldr	r0, [r4, #0]
   27d04:	2100      	movs	r1, #0
   27d06:	f7fe fab9 	bl	2627c <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   27d0a:	6863      	ldr	r3, [r4, #4]
   27d0c:	4599      	cmp	r9, r3
   27d0e:	d108      	bne.n	27d22 <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
   27d10:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   27d12:	2208      	movs	r2, #8
	buf->tail = 0;
   27d14:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   27d18:	2100      	movs	r1, #0
   27d1a:	4410      	add	r0, r2
   27d1c:	f000 fd53 	bl	287c6 <memset>
}
   27d20:	e7b5      	b.n	27c8e <z_shell_history_put+0x38>
   27d22:	4620      	mov	r0, r4
   27d24:	f7ff ff4b 	bl	27bbe <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   27d28:	2800      	cmp	r0, #0
   27d2a:	d1b0      	bne.n	27c8e <z_shell_history_put+0x38>
   27d2c:	e7f0      	b.n	27d10 <z_shell_history_put+0xba>

00027d2e <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   27d2e:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   27d30:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   27d34:	2300      	movs	r3, #0
   27d36:	60c3      	str	r3, [r0, #12]
}
   27d38:	4770      	bx	lr

00027d3a <z_shell_has_wildcard>:
{
   27d3a:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   27d3c:	4604      	mov	r4, r0
   27d3e:	b908      	cbnz	r0, 27d44 <z_shell_has_wildcard+0xa>
	return false;
   27d40:	2000      	movs	r0, #0
}
   27d42:	bd10      	pop	{r4, pc}
   27d44:	f000 fcde 	bl	28704 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   27d48:	2300      	movs	r3, #0
   27d4a:	b280      	uxth	r0, r0
   27d4c:	4283      	cmp	r3, r0
   27d4e:	d2f7      	bcs.n	27d40 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   27d50:	5ce2      	ldrb	r2, [r4, r3]
   27d52:	2a3f      	cmp	r2, #63	; 0x3f
   27d54:	d003      	beq.n	27d5e <z_shell_has_wildcard+0x24>
   27d56:	2a2a      	cmp	r2, #42	; 0x2a
   27d58:	d001      	beq.n	27d5e <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   27d5a:	3301      	adds	r3, #1
   27d5c:	e7f6      	b.n	27d4c <z_shell_has_wildcard+0x12>
			return true;
   27d5e:	2001      	movs	r0, #1
   27d60:	e7ef      	b.n	27d42 <z_shell_has_wildcard+0x8>

00027d62 <z_shell_wildcard_prepare>:
{
   27d62:	b510      	push	{r4, lr}
   27d64:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   27d66:	6880      	ldr	r0, [r0, #8]
   27d68:	f44f 7280 	mov.w	r2, #256	; 0x100
   27d6c:	2100      	movs	r1, #0
   27d6e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   27d72:	f000 fd28 	bl	287c6 <memset>
	memcpy(shell->ctx->temp_buff,
   27d76:	68a0      	ldr	r0, [r4, #8]
   27d78:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   27d7a:	f100 0142 	add.w	r1, r0, #66	; 0x42
   27d7e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   27d82:	f000 fd15 	bl	287b0 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   27d86:	68a0      	ldr	r0, [r4, #8]
   27d88:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   27d8c:	f7ff fa56 	bl	2723c <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   27d90:	68a0      	ldr	r0, [r4, #8]
   27d92:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   27d96:	f000 fcb5 	bl	28704 <strlen>
   27d9a:	68a3      	ldr	r3, [r4, #8]
   27d9c:	3001      	adds	r0, #1
   27d9e:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
   27da2:	bd10      	pop	{r4, pc}

00027da4 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   27da4:	b510      	push	{r4, lr}
   27da6:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   27da8:	6880      	ldr	r0, [r0, #8]
   27daa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   27dae:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   27db2:	3042      	adds	r0, #66	; 0x42
   27db4:	f000 fcfc 	bl	287b0 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   27db8:	68a3      	ldr	r3, [r4, #8]
   27dba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   27dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   27dc0:	bd10      	pop	{r4, pc}

00027dc2 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   27dc2:	2300      	movs	r3, #0
   27dc4:	f7fe be90 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00027dc8 <usb_get_dev_data_by_cfg>:
	return list->head;
   27dc8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27dca:	b140      	cbz	r0, 27dde <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   27dcc:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   27dd0:	685b      	ldr	r3, [r3, #4]
   27dd2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27dd4:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   27dd8:	d001      	beq.n	27dde <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   27dda:	6840      	ldr	r0, [r0, #4]
   27ddc:	e7f5      	b.n	27dca <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   27dde:	4770      	bx	lr

00027de0 <usb_get_dev_data_by_iface>:
	return list->head;
   27de0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27de2:	b150      	cbz	r0, 27dfa <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   27de4:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   27de8:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   27dea:	685b      	ldr	r3, [r3, #4]
   27dec:	789b      	ldrb	r3, [r3, #2]
   27dee:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27df0:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   27df4:	d001      	beq.n	27dfa <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   27df6:	6840      	ldr	r0, [r0, #4]
   27df8:	e7f3      	b.n	27de2 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   27dfa:	4770      	bx	lr

00027dfc <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   27dfc:	b530      	push	{r4, r5, lr}
	return list->head;
   27dfe:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27e00:	b188      	cbz	r0, 27e26 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   27e02:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27e06:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   27e08:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   27e0a:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27e0c:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   27e0e:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   27e10:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   27e12:	b2dc      	uxtb	r4, r3
   27e14:	42a5      	cmp	r5, r4
   27e16:	d801      	bhi.n	27e1c <usb_get_dev_data_by_ep+0x20>
	return node->next;
   27e18:	6840      	ldr	r0, [r0, #4]
   27e1a:	e7f1      	b.n	27e00 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   27e1c:	3301      	adds	r3, #1
   27e1e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   27e22:	428c      	cmp	r4, r1
   27e24:	d1f5      	bne.n	27e12 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   27e26:	bd30      	pop	{r4, r5, pc}

00027e28 <usb_transfer_is_busy>:
{
   27e28:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   27e2a:	f7e2 ff6f 	bl	ad0c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   27e2e:	b128      	cbz	r0, 27e3c <usb_transfer_is_busy+0x14>
   27e30:	6840      	ldr	r0, [r0, #4]
   27e32:	f110 0f10 	cmn.w	r0, #16
   27e36:	bf14      	ite	ne
   27e38:	2000      	movne	r0, #0
   27e3a:	2001      	moveq	r0, #1
}
   27e3c:	bd08      	pop	{r3, pc}

00027e3e <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   27e3e:	1c4b      	adds	r3, r1, #1
   27e40:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   27e42:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   27e44:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   27e46:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   27e4a:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   27e4c:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   27e50:	4770      	bx	lr

00027e52 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   27e52:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   27e56:	6f80      	ldr	r0, [r0, #120]	; 0x78
   27e58:	4718      	bx	r3

00027e5a <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   27e5a:	6903      	ldr	r3, [r0, #16]
   27e5c:	2200      	movs	r2, #0
   27e5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   27e62:	4770      	bx	lr

00027e64 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   27e64:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   27e66:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   27e6a:	b108      	cbz	r0, 27e70 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   27e6c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   27e70:	4770      	bx	lr

00027e72 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   27e72:	6903      	ldr	r3, [r0, #16]
   27e74:	2200      	movs	r2, #0
   27e76:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   27e7a:	4770      	bx	lr

00027e7c <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   27e7c:	6903      	ldr	r3, [r0, #16]
}
   27e7e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   27e82:	4770      	bx	lr

00027e84 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   27e84:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   27e86:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   27e8a:	b112      	cbz	r2, 27e92 <cdc_acm_irq_is_pending+0xe>
   27e8c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   27e90:	b92a      	cbnz	r2, 27e9e <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   27e92:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   27e96:	b118      	cbz	r0, 27ea0 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   27e98:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
   27e9c:	4770      	bx	lr
		return 1;
   27e9e:	2001      	movs	r0, #1
}
   27ea0:	4770      	bx	lr

00027ea2 <cdc_acm_irq_update>:
}
   27ea2:	2001      	movs	r0, #1
   27ea4:	4770      	bx	lr

00027ea6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   27ea6:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   27ea8:	e9c3 1200 	strd	r1, r2, [r3]
}
   27eac:	4770      	bx	lr

00027eae <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   27eae:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   27eb0:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   27eb2:	d007      	beq.n	27ec4 <cdc_acm_line_ctrl_get+0x16>
   27eb4:	2904      	cmp	r1, #4
   27eb6:	d00a      	beq.n	27ece <cdc_acm_line_ctrl_get+0x20>
   27eb8:	2901      	cmp	r1, #1
   27eba:	d10d      	bne.n	27ed8 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   27ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
   27ebe:	6013      	str	r3, [r2, #0]
		return 0;
   27ec0:	2000      	movs	r0, #0
   27ec2:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   27ec4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   27ec8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   27ecc:	e7f7      	b.n	27ebe <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   27ece:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   27ed2:	f003 0301 	and.w	r3, r3, #1
   27ed6:	e7f2      	b.n	27ebe <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   27ed8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   27edc:	4770      	bx	lr

00027ede <cdc_acm_fifo_read>:
{
   27ede:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   27ee0:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   27ee2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   27ee4:	f7fe fa4e 	bl	26384 <ring_buf_get>
   27ee8:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   27eea:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   27eec:	f7fe f988 	bl	26200 <ring_buf_is_empty>
   27ef0:	b110      	cbz	r0, 27ef8 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   27ef2:	2300      	movs	r3, #0
   27ef4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   27ef8:	4620      	mov	r0, r4
   27efa:	bd38      	pop	{r3, r4, r5, pc}

00027efc <cdc_acm_poll_in>:
{
   27efc:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   27efe:	2201      	movs	r2, #1
   27f00:	f7ff ffed 	bl	27ede <cdc_acm_fifo_read>
}
   27f04:	3801      	subs	r0, #1
   27f06:	bf18      	it	ne
   27f08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   27f0c:	bd08      	pop	{r3, pc}

00027f0e <z_log_msg2_static_create.constprop.0>:
   27f0e:	2300      	movs	r3, #0
   27f10:	f7fe bdea 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00027f14 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   27f14:	2940      	cmp	r1, #64	; 0x40
{
   27f16:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   27f18:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   27f1a:	d042      	beq.n	27fa2 <cdc_acm_line_ctrl_set+0x8e>
   27f1c:	d813      	bhi.n	27f46 <cdc_acm_line_ctrl_set+0x32>
   27f1e:	2910      	cmp	r1, #16
   27f20:	d032      	beq.n	27f88 <cdc_acm_line_ctrl_set+0x74>
   27f22:	d806      	bhi.n	27f32 <cdc_acm_line_ctrl_set+0x1e>
   27f24:	2901      	cmp	r1, #1
   27f26:	d01e      	beq.n	27f66 <cdc_acm_line_ctrl_set+0x52>
   27f28:	2908      	cmp	r1, #8
   27f2a:	d01f      	beq.n	27f6c <cdc_acm_line_ctrl_set+0x58>
   27f2c:	f06f 0012 	mvn.w	r0, #18
}
   27f30:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   27f32:	2920      	cmp	r1, #32
   27f34:	d1fa      	bne.n	27f2c <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   27f36:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27f3a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   27f3e:	b342      	cbz	r2, 27f92 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   27f40:	f041 0104 	orr.w	r1, r1, #4
   27f44:	e025      	b.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   27f46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   27f4a:	d033      	beq.n	27fb4 <cdc_acm_line_ctrl_set+0xa0>
   27f4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   27f50:	d039      	beq.n	27fc6 <cdc_acm_line_ctrl_set+0xb2>
   27f52:	2980      	cmp	r1, #128	; 0x80
   27f54:	d1ea      	bne.n	27f2c <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   27f56:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27f5a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   27f5e:	b1c2      	cbz	r2, 27f92 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   27f60:	f041 0110 	orr.w	r1, r1, #16
   27f64:	e015      	b.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   27f66:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
   27f68:	2000      	movs	r0, #0
   27f6a:	e7e1      	b.n	27f30 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   27f6c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27f70:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   27f74:	b92a      	cbnz	r2, 27f82 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   27f76:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   27f7a:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   27f7c:	f7e3 fc1c 	bl	b7b8 <cdc_acm_send_notification.isra.0>
   27f80:	e7f2      	b.n	27f68 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   27f82:	f041 0101 	orr.w	r1, r1, #1
   27f86:	e7f6      	b.n	27f76 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   27f88:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27f8c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   27f90:	b922      	cbnz	r2, 27f9c <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   27f92:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   27f96:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27f9a:	e7ef      	b.n	27f7c <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   27f9c:	f041 0102 	orr.w	r1, r1, #2
   27fa0:	e7f7      	b.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   27fa2:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27fa6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   27faa:	2a00      	cmp	r2, #0
   27fac:	d0f1      	beq.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   27fae:	f041 0108 	orr.w	r1, r1, #8
   27fb2:	e7ee      	b.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   27fb4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27fb8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   27fbc:	2a00      	cmp	r2, #0
   27fbe:	d0e8      	beq.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   27fc0:	f041 0120 	orr.w	r1, r1, #32
   27fc4:	e7e5      	b.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   27fc6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27fca:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   27fce:	2a00      	cmp	r2, #0
   27fd0:	d0df      	beq.n	27f92 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   27fd2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   27fd6:	e7dc      	b.n	27f92 <cdc_acm_line_ctrl_set+0x7e>

00027fd8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   27fd8:	b538      	push	{r3, r4, r5, lr}
   27fda:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27fdc:	42ab      	cmp	r3, r5
{
   27fde:	4611      	mov	r1, r2
   27fe0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27fe2:	d804      	bhi.n	27fee <_copy+0x16>
		(void)memcpy(to, from, from_len);
   27fe4:	461a      	mov	r2, r3
   27fe6:	f000 fbe3 	bl	287b0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27fea:	4620      	mov	r0, r4
   27fec:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27fee:	2400      	movs	r4, #0
   27ff0:	e7fb      	b.n	27fea <_copy+0x12>

00027ff2 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   27ff2:	f000 bbe8 	b.w	287c6 <memset>

00027ff6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27ff6:	09c3      	lsrs	r3, r0, #7
   27ff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27ffc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28000:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28004:	b2c0      	uxtb	r0, r0
   28006:	4770      	bx	lr

00028008 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28008:	78cb      	ldrb	r3, [r1, #3]
   2800a:	7802      	ldrb	r2, [r0, #0]
   2800c:	4053      	eors	r3, r2
   2800e:	7003      	strb	r3, [r0, #0]
   28010:	884b      	ldrh	r3, [r1, #2]
   28012:	7842      	ldrb	r2, [r0, #1]
   28014:	4053      	eors	r3, r2
   28016:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28018:	680a      	ldr	r2, [r1, #0]
   2801a:	7883      	ldrb	r3, [r0, #2]
   2801c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28020:	7083      	strb	r3, [r0, #2]
   28022:	680a      	ldr	r2, [r1, #0]
   28024:	78c3      	ldrb	r3, [r0, #3]
   28026:	4053      	eors	r3, r2
   28028:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2802a:	79cb      	ldrb	r3, [r1, #7]
   2802c:	7902      	ldrb	r2, [r0, #4]
   2802e:	4053      	eors	r3, r2
   28030:	7103      	strb	r3, [r0, #4]
   28032:	88cb      	ldrh	r3, [r1, #6]
   28034:	7942      	ldrb	r2, [r0, #5]
   28036:	4053      	eors	r3, r2
   28038:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2803a:	684a      	ldr	r2, [r1, #4]
   2803c:	7983      	ldrb	r3, [r0, #6]
   2803e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28042:	7183      	strb	r3, [r0, #6]
   28044:	684a      	ldr	r2, [r1, #4]
   28046:	79c3      	ldrb	r3, [r0, #7]
   28048:	4053      	eors	r3, r2
   2804a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2804c:	7acb      	ldrb	r3, [r1, #11]
   2804e:	7a02      	ldrb	r2, [r0, #8]
   28050:	4053      	eors	r3, r2
   28052:	7203      	strb	r3, [r0, #8]
   28054:	7a42      	ldrb	r2, [r0, #9]
   28056:	894b      	ldrh	r3, [r1, #10]
   28058:	4053      	eors	r3, r2
   2805a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2805c:	688a      	ldr	r2, [r1, #8]
   2805e:	7a83      	ldrb	r3, [r0, #10]
   28060:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28064:	7283      	strb	r3, [r0, #10]
   28066:	688a      	ldr	r2, [r1, #8]
   28068:	7ac3      	ldrb	r3, [r0, #11]
   2806a:	4053      	eors	r3, r2
   2806c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2806e:	7bcb      	ldrb	r3, [r1, #15]
   28070:	7b02      	ldrb	r2, [r0, #12]
   28072:	4053      	eors	r3, r2
   28074:	7303      	strb	r3, [r0, #12]
   28076:	89cb      	ldrh	r3, [r1, #14]
   28078:	7b42      	ldrb	r2, [r0, #13]
   2807a:	4053      	eors	r3, r2
   2807c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2807e:	68ca      	ldr	r2, [r1, #12]
   28080:	7b83      	ldrb	r3, [r0, #14]
   28082:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28086:	7383      	strb	r3, [r0, #14]
   28088:	68ca      	ldr	r2, [r1, #12]
   2808a:	7bc3      	ldrb	r3, [r0, #15]
   2808c:	4053      	eors	r3, r2
   2808e:	73c3      	strb	r3, [r0, #15]
}
   28090:	4770      	bx	lr

00028092 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   28092:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28094:	7802      	ldrb	r2, [r0, #0]
   28096:	f88d 2000 	strb.w	r2, [sp]
   2809a:	7942      	ldrb	r2, [r0, #5]
   2809c:	f88d 2001 	strb.w	r2, [sp, #1]
   280a0:	7a82      	ldrb	r2, [r0, #10]
   280a2:	f88d 2002 	strb.w	r2, [sp, #2]
   280a6:	7bc2      	ldrb	r2, [r0, #15]
   280a8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   280ac:	7902      	ldrb	r2, [r0, #4]
   280ae:	f88d 2004 	strb.w	r2, [sp, #4]
   280b2:	7a42      	ldrb	r2, [r0, #9]
   280b4:	f88d 2005 	strb.w	r2, [sp, #5]
   280b8:	7b82      	ldrb	r2, [r0, #14]
   280ba:	f88d 2006 	strb.w	r2, [sp, #6]
   280be:	78c2      	ldrb	r2, [r0, #3]
   280c0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   280c4:	7a02      	ldrb	r2, [r0, #8]
   280c6:	f88d 2008 	strb.w	r2, [sp, #8]
   280ca:	7b42      	ldrb	r2, [r0, #13]
   280cc:	f88d 2009 	strb.w	r2, [sp, #9]
   280d0:	7882      	ldrb	r2, [r0, #2]
   280d2:	f88d 200a 	strb.w	r2, [sp, #10]
   280d6:	79c2      	ldrb	r2, [r0, #7]
   280d8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   280dc:	7b02      	ldrb	r2, [r0, #12]
   280de:	f88d 200c 	strb.w	r2, [sp, #12]
   280e2:	7842      	ldrb	r2, [r0, #1]
   280e4:	7ac3      	ldrb	r3, [r0, #11]
   280e6:	f88d 200d 	strb.w	r2, [sp, #13]
   280ea:	7982      	ldrb	r2, [r0, #6]
   280ec:	f88d 200e 	strb.w	r2, [sp, #14]
   280f0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   280f4:	2310      	movs	r3, #16
   280f6:	466a      	mov	r2, sp
   280f8:	4619      	mov	r1, r3
   280fa:	f7ff ff6d 	bl	27fd8 <_copy>
}
   280fe:	b005      	add	sp, #20
   28100:	f85d fb04 	ldr.w	pc, [sp], #4

00028104 <mult_row_column>:
{
   28104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28106:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28108:	7808      	ldrb	r0, [r1, #0]
{
   2810a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2810c:	f7ff ff73 	bl	27ff6 <_double_byte>
   28110:	4605      	mov	r5, r0
   28112:	7860      	ldrb	r0, [r4, #1]
   28114:	f7ff ff6f 	bl	27ff6 <_double_byte>
   28118:	78a2      	ldrb	r2, [r4, #2]
   2811a:	7863      	ldrb	r3, [r4, #1]
   2811c:	4053      	eors	r3, r2
   2811e:	78e2      	ldrb	r2, [r4, #3]
   28120:	4053      	eors	r3, r2
   28122:	405d      	eors	r5, r3
   28124:	4045      	eors	r5, r0
   28126:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28128:	7860      	ldrb	r0, [r4, #1]
   2812a:	7827      	ldrb	r7, [r4, #0]
   2812c:	f7ff ff63 	bl	27ff6 <_double_byte>
   28130:	4605      	mov	r5, r0
   28132:	78a0      	ldrb	r0, [r4, #2]
   28134:	f7ff ff5f 	bl	27ff6 <_double_byte>
   28138:	78a3      	ldrb	r3, [r4, #2]
   2813a:	405f      	eors	r7, r3
   2813c:	78e3      	ldrb	r3, [r4, #3]
   2813e:	405f      	eors	r7, r3
   28140:	407d      	eors	r5, r7
   28142:	4045      	eors	r5, r0
   28144:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28146:	78a0      	ldrb	r0, [r4, #2]
   28148:	7865      	ldrb	r5, [r4, #1]
   2814a:	7827      	ldrb	r7, [r4, #0]
   2814c:	f7ff ff53 	bl	27ff6 <_double_byte>
   28150:	406f      	eors	r7, r5
   28152:	4605      	mov	r5, r0
   28154:	78e0      	ldrb	r0, [r4, #3]
   28156:	f7ff ff4e 	bl	27ff6 <_double_byte>
   2815a:	78e3      	ldrb	r3, [r4, #3]
   2815c:	405f      	eors	r7, r3
   2815e:	407d      	eors	r5, r7
   28160:	4045      	eors	r5, r0
   28162:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   28164:	7820      	ldrb	r0, [r4, #0]
   28166:	f7ff ff46 	bl	27ff6 <_double_byte>
   2816a:	7863      	ldrb	r3, [r4, #1]
   2816c:	7825      	ldrb	r5, [r4, #0]
   2816e:	405d      	eors	r5, r3
   28170:	78a3      	ldrb	r3, [r4, #2]
   28172:	405d      	eors	r5, r3
   28174:	4045      	eors	r5, r0
   28176:	78e0      	ldrb	r0, [r4, #3]
   28178:	f7ff ff3d 	bl	27ff6 <_double_byte>
   2817c:	b2ed      	uxtb	r5, r5
   2817e:	4045      	eors	r5, r0
   28180:	70f5      	strb	r5, [r6, #3]
}
   28182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028184 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   28184:	b570      	push	{r4, r5, r6, lr}
   28186:	4614      	mov	r4, r2
   28188:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2818a:	4605      	mov	r5, r0
   2818c:	2800      	cmp	r0, #0
   2818e:	d049      	beq.n	28224 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   28190:	2900      	cmp	r1, #0
   28192:	d049      	beq.n	28228 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   28194:	2a00      	cmp	r2, #0
   28196:	d049      	beq.n	2822c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   28198:	2310      	movs	r3, #16
   2819a:	460a      	mov	r2, r1
   2819c:	4668      	mov	r0, sp
   2819e:	4619      	mov	r1, r3
   281a0:	f7ff ff1a 	bl	27fd8 <_copy>
	add_round_key(state, s->words);
   281a4:	4621      	mov	r1, r4
   281a6:	4668      	mov	r0, sp
   281a8:	f7ff ff2e 	bl	28008 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   281ac:	3410      	adds	r4, #16
   281ae:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   281b2:	4668      	mov	r0, sp
   281b4:	f7e3 fca6 	bl	bb04 <sub_bytes>
		shift_rows(state);
   281b8:	4668      	mov	r0, sp
   281ba:	f7ff ff6a 	bl	28092 <shift_rows>
	mult_row_column(t, s);
   281be:	4669      	mov	r1, sp
   281c0:	a804      	add	r0, sp, #16
   281c2:	f7ff ff9f 	bl	28104 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   281c6:	a901      	add	r1, sp, #4
   281c8:	a805      	add	r0, sp, #20
   281ca:	f7ff ff9b 	bl	28104 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   281ce:	a902      	add	r1, sp, #8
   281d0:	a806      	add	r0, sp, #24
   281d2:	f7ff ff97 	bl	28104 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   281d6:	a903      	add	r1, sp, #12
   281d8:	a807      	add	r0, sp, #28
   281da:	f7ff ff93 	bl	28104 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   281de:	2310      	movs	r3, #16
   281e0:	4619      	mov	r1, r3
   281e2:	eb0d 0203 	add.w	r2, sp, r3
   281e6:	4668      	mov	r0, sp
   281e8:	f7ff fef6 	bl	27fd8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   281ec:	4621      	mov	r1, r4
   281ee:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   281f0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   281f2:	f7ff ff09 	bl	28008 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   281f6:	42a6      	cmp	r6, r4
   281f8:	d1db      	bne.n	281b2 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   281fa:	f7e3 fc83 	bl	bb04 <sub_bytes>
	shift_rows(state);
   281fe:	4668      	mov	r0, sp
   28200:	f7ff ff47 	bl	28092 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   28204:	4631      	mov	r1, r6
   28206:	4668      	mov	r0, sp
   28208:	f7ff fefe 	bl	28008 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2820c:	2310      	movs	r3, #16
   2820e:	4619      	mov	r1, r3
   28210:	466a      	mov	r2, sp
   28212:	4628      	mov	r0, r5
   28214:	f7ff fee0 	bl	27fd8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   28218:	4668      	mov	r0, sp
   2821a:	2210      	movs	r2, #16
   2821c:	2100      	movs	r1, #0
   2821e:	f7ff fee8 	bl	27ff2 <_set>

	return TC_CRYPTO_SUCCESS;
   28222:	2001      	movs	r0, #1
}
   28224:	b008      	add	sp, #32
   28226:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28228:	4608      	mov	r0, r1
   2822a:	e7fb      	b.n	28224 <tc_aes_encrypt+0xa0>
   2822c:	4610      	mov	r0, r2
   2822e:	e7f9      	b.n	28224 <tc_aes_encrypt+0xa0>

00028230 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   28230:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28232:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   28234:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28236:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2823a:	2b00      	cmp	r3, #0
   2823c:	bfb4      	ite	lt
   2823e:	2387      	movlt	r3, #135	; 0x87
   28240:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   28242:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28246:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2824a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2824c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   28250:	d002      	beq.n	28258 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   28252:	7813      	ldrb	r3, [r2, #0]
   28254:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   28256:	e7f4      	b.n	28242 <gf_double+0x12>
	}
}
   28258:	bd10      	pop	{r4, pc}

0002825a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2825a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2825c:	b120      	cbz	r0, 28268 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2825e:	2258      	movs	r2, #88	; 0x58
   28260:	2100      	movs	r1, #0
   28262:	f7ff fec6 	bl	27ff2 <_set>
   28266:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28268:	bd08      	pop	{r3, pc}

0002826a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2826a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2826c:	4604      	mov	r4, r0
   2826e:	b188      	cbz	r0, 28294 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28270:	2210      	movs	r2, #16
   28272:	2100      	movs	r1, #0
   28274:	f7ff febd 	bl	27ff2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   28278:	2210      	movs	r2, #16
   2827a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2827e:	2100      	movs	r1, #0
   28280:	f7ff feb7 	bl	27ff2 <_set>
	s->leftover_offset = 0;
   28284:	2300      	movs	r3, #0
   28286:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   28288:	2200      	movs	r2, #0
   2828a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2828e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   28292:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28294:	bd10      	pop	{r4, pc}

00028296 <tc_cmac_setup>:
{
   28296:	b570      	push	{r4, r5, r6, lr}
   28298:	460d      	mov	r5, r1
   2829a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2829c:	4604      	mov	r4, r0
   2829e:	b310      	cbz	r0, 282e6 <tc_cmac_setup+0x50>
   282a0:	b311      	cbz	r1, 282e8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   282a2:	2258      	movs	r2, #88	; 0x58
   282a4:	2100      	movs	r1, #0
   282a6:	f7ff fea4 	bl	27ff2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   282aa:	4629      	mov	r1, r5
	s->sched = sched;
   282ac:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   282ae:	4630      	mov	r0, r6
   282b0:	f7e3 fc34 	bl	bb1c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   282b4:	2210      	movs	r2, #16
   282b6:	2100      	movs	r1, #0
   282b8:	4620      	mov	r0, r4
   282ba:	f7ff fe9a 	bl	27ff2 <_set>
	gf_double (s->K1, s->iv);
   282be:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   282c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   282c4:	4621      	mov	r1, r4
   282c6:	4620      	mov	r0, r4
   282c8:	f7ff ff5c 	bl	28184 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   282cc:	4621      	mov	r1, r4
   282ce:	4628      	mov	r0, r5
   282d0:	f7ff ffae 	bl	28230 <gf_double>
	gf_double (s->K2, s->K1);
   282d4:	4629      	mov	r1, r5
   282d6:	f104 0020 	add.w	r0, r4, #32
   282da:	f7ff ffa9 	bl	28230 <gf_double>
	tc_cmac_init(s);
   282de:	4620      	mov	r0, r4
   282e0:	f7ff ffc3 	bl	2826a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   282e4:	2001      	movs	r0, #1
}
   282e6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   282e8:	4608      	mov	r0, r1
   282ea:	e7fc      	b.n	282e6 <tc_cmac_setup+0x50>

000282ec <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   282ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   282f0:	460d      	mov	r5, r1
   282f2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   282f4:	4604      	mov	r4, r0
   282f6:	2800      	cmp	r0, #0
   282f8:	d061      	beq.n	283be <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   282fa:	b912      	cbnz	r2, 28302 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   282fc:	2001      	movs	r0, #1
}
   282fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   28302:	2900      	cmp	r1, #0
   28304:	d05b      	beq.n	283be <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   28306:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2830a:	ea53 0102 	orrs.w	r1, r3, r2
   2830e:	d056      	beq.n	283be <tc_cmac_update+0xd2>
	s->countdown--;
   28310:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   28312:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   28316:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   2831a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2831e:	f1b8 0f00 	cmp.w	r8, #0
   28322:	d02a      	beq.n	2837a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   28324:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28328:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2832c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2832e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   28330:	d208      	bcs.n	28344 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28332:	462a      	mov	r2, r5
   28334:	4633      	mov	r3, r6
   28336:	4631      	mov	r1, r6
   28338:	f7ff fe4e 	bl	27fd8 <_copy>
			s->leftover_offset += data_length;
   2833c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2833e:	4432      	add	r2, r6
   28340:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   28342:	e7db      	b.n	282fc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   28344:	463b      	mov	r3, r7
   28346:	462a      	mov	r2, r5
   28348:	4639      	mov	r1, r7
   2834a:	f7ff fe45 	bl	27fd8 <_copy>
		data_length -= remaining_space;
   2834e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   28350:	2300      	movs	r3, #0
   28352:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   28354:	4446      	add	r6, r8
		data += remaining_space;
   28356:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28358:	1e63      	subs	r3, r4, #1
   2835a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2835e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28362:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28366:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   28368:	ea82 0200 	eor.w	r2, r2, r0
   2836c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2836e:	d1f6      	bne.n	2835e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28370:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28372:	4621      	mov	r1, r4
   28374:	4620      	mov	r0, r4
   28376:	f7ff ff05 	bl	28184 <tc_aes_encrypt>
   2837a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2837e:	2e10      	cmp	r6, #16
   28380:	d80a      	bhi.n	28398 <tc_cmac_update+0xac>
	if (data_length > 0) {
   28382:	2e00      	cmp	r6, #0
   28384:	d0ba      	beq.n	282fc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   28386:	4633      	mov	r3, r6
   28388:	462a      	mov	r2, r5
   2838a:	4631      	mov	r1, r6
   2838c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28390:	f7ff fe22 	bl	27fd8 <_copy>
		s->leftover_offset = data_length;
   28394:	6466      	str	r6, [r4, #68]	; 0x44
   28396:	e7b1      	b.n	282fc <tc_cmac_update+0x10>
   28398:	1e63      	subs	r3, r4, #1
   2839a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2839c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   283a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283a4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   283a6:	ea82 0200 	eor.w	r2, r2, r0
   283aa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283ac:	d1f6      	bne.n	2839c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   283ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   283b0:	4621      	mov	r1, r4
   283b2:	4620      	mov	r0, r4
   283b4:	f7ff fee6 	bl	28184 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   283b8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   283ba:	3e10      	subs	r6, #16
   283bc:	e7df      	b.n	2837e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   283be:	2000      	movs	r0, #0
   283c0:	e79d      	b.n	282fe <tc_cmac_update+0x12>

000283c2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   283c2:	b570      	push	{r4, r5, r6, lr}
   283c4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   283c6:	4605      	mov	r5, r0
   283c8:	b1e8      	cbz	r0, 28406 <tc_cmac_final+0x44>
   283ca:	b369      	cbz	r1, 28428 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   283cc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   283ce:	2a10      	cmp	r2, #16
   283d0:	d11a      	bne.n	28408 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   283d2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283d4:	1e63      	subs	r3, r4, #1
   283d6:	3901      	subs	r1, #1
   283d8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   283dc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   283e0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   283e4:	4072      	eors	r2, r6
   283e6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283ea:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   283ec:	ea82 0206 	eor.w	r2, r2, r6
   283f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283f2:	d1f3      	bne.n	283dc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   283f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   283f6:	4621      	mov	r1, r4
   283f8:	4628      	mov	r0, r5
   283fa:	f7ff fec3 	bl	28184 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   283fe:	4620      	mov	r0, r4
   28400:	f7ff ff2b 	bl	2825a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   28404:	2001      	movs	r0, #1
}
   28406:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   28408:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2840c:	2100      	movs	r1, #0
   2840e:	f1c2 0210 	rsb	r2, r2, #16
   28412:	4420      	add	r0, r4
   28414:	f7ff fded 	bl	27ff2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28418:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2841a:	4423      	add	r3, r4
   2841c:	2280      	movs	r2, #128	; 0x80
   2841e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   28422:	f104 0120 	add.w	r1, r4, #32
   28426:	e7d5      	b.n	283d4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   28428:	4608      	mov	r0, r1
   2842a:	e7ec      	b.n	28406 <tc_cmac_final+0x44>

0002842c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2842c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2842e:	6800      	ldr	r0, [r0, #0]
   28430:	f7e3 bbe4 	b.w	bbfc <z_arm_fatal_error>

00028434 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28434:	2100      	movs	r1, #0
   28436:	2001      	movs	r0, #1
   28438:	f7e3 bbe0 	b.w	bbfc <z_arm_fatal_error>

0002843c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2843c:	b508      	push	{r3, lr}
	handler();
   2843e:	f7e3 fcb5 	bl	bdac <z_SysNmiOnReset>
	z_arm_int_exit();
}
   28442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28446:	f7e3 bd9b 	b.w	bf80 <z_arm_exc_exit>

0002844a <z_log_msg2_static_create.constprop.0>:
   2844a:	2300      	movs	r3, #0
   2844c:	f7fe bb4c 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00028450 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   28450:	b510      	push	{r4, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   28452:	7802      	ldrb	r2, [r0, #0]
   28454:	2a20      	cmp	r2, #32
   28456:	4603      	mov	r3, r0
   28458:	f100 0001 	add.w	r0, r0, #1
   2845c:	d0f9      	beq.n	28452 <atoi+0x2>
   2845e:	f1a2 0109 	sub.w	r1, r2, #9
   28462:	2904      	cmp	r1, #4
   28464:	d9f5      	bls.n	28452 <atoi+0x2>
		s++;
	}
	switch (*s) {
   28466:	2a2b      	cmp	r2, #43	; 0x2b
   28468:	d008      	beq.n	2847c <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   2846a:	2a2d      	cmp	r2, #45	; 0x2d
   2846c:	bf0a      	itet	eq
   2846e:	4603      	moveq	r3, r0
   28470:	2100      	movne	r1, #0
   28472:	2101      	moveq	r1, #1
   28474:	3b01      	subs	r3, #1
	switch (*s) {
   28476:	2000      	movs	r0, #0
		 */
		break;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   28478:	240a      	movs	r4, #10
   2847a:	e004      	b.n	28486 <atoi+0x36>
		s++;
   2847c:	4603      	mov	r3, r0
	int neg = 0;
   2847e:	2100      	movs	r1, #0
   28480:	e7f8      	b.n	28474 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   28482:	4360      	muls	r0, r4
   28484:	1a80      	subs	r0, r0, r2
	while (isdigit(*s)) {
   28486:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2848a:	3a30      	subs	r2, #48	; 0x30
   2848c:	2a09      	cmp	r2, #9
   2848e:	d9f8      	bls.n	28482 <atoi+0x32>
	}
	return neg ? n : -n;
   28490:	b901      	cbnz	r1, 28494 <atoi+0x44>
   28492:	4240      	negs	r0, r0
}
   28494:	bd10      	pop	{r4, pc}

00028496 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   28496:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2849a:	4684      	mov	ip, r0
   2849c:	4688      	mov	r8, r1
	register const char *s = nptr;
   2849e:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   284a0:	4621      	mov	r1, r4
   284a2:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   284a6:	2b20      	cmp	r3, #32
   284a8:	d0fa      	beq.n	284a0 <strtol+0xa>
   284aa:	f1a3 0009 	sub.w	r0, r3, #9
   284ae:	2804      	cmp	r0, #4
   284b0:	d9f6      	bls.n	284a0 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   284b2:	2b2d      	cmp	r3, #45	; 0x2d
   284b4:	d12d      	bne.n	28512 <strtol+0x7c>
		neg = 1;
		c = *s++;
   284b6:	784b      	ldrb	r3, [r1, #1]
   284b8:	1c8c      	adds	r4, r1, #2
		neg = 1;
   284ba:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   284bc:	2a00      	cmp	r2, #0
   284be:	d05a      	beq.n	28576 <strtol+0xe0>
   284c0:	2a10      	cmp	r2, #16
   284c2:	d109      	bne.n	284d8 <strtol+0x42>
   284c4:	2b30      	cmp	r3, #48	; 0x30
   284c6:	d107      	bne.n	284d8 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   284c8:	7823      	ldrb	r3, [r4, #0]
   284ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   284ce:	2b58      	cmp	r3, #88	; 0x58
   284d0:	d14c      	bne.n	2856c <strtol+0xd6>
		c = s[1];
   284d2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   284d4:	2210      	movs	r2, #16
		s += 2;
   284d6:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   284d8:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   284dc:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   284de:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   284e0:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   284e4:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   284e6:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   284ea:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   284ee:	2d09      	cmp	r5, #9
   284f0:	d815      	bhi.n	2851e <strtol+0x88>
			c -= '0';
   284f2:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   284f4:	429a      	cmp	r2, r3
   284f6:	dd22      	ble.n	2853e <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   284f8:	1c75      	adds	r5, r6, #1
   284fa:	d007      	beq.n	2850c <strtol+0x76>
   284fc:	4570      	cmp	r0, lr
   284fe:	d81b      	bhi.n	28538 <strtol+0xa2>
   28500:	d101      	bne.n	28506 <strtol+0x70>
   28502:	454b      	cmp	r3, r9
   28504:	dc18      	bgt.n	28538 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   28506:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2850a:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2850c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   28510:	e7eb      	b.n	284ea <strtol+0x54>
	} else if (c == '+') {
   28512:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   28514:	bf04      	itt	eq
   28516:	784b      	ldrbeq	r3, [r1, #1]
   28518:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2851a:	2100      	movs	r1, #0
   2851c:	e7ce      	b.n	284bc <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2851e:	f043 0520 	orr.w	r5, r3, #32
   28522:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   28524:	2d19      	cmp	r5, #25
   28526:	d80a      	bhi.n	2853e <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28528:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2852c:	2d1a      	cmp	r5, #26
   2852e:	bf34      	ite	cc
   28530:	2537      	movcc	r5, #55	; 0x37
   28532:	2557      	movcs	r5, #87	; 0x57
   28534:	1b5b      	subs	r3, r3, r5
   28536:	e7dd      	b.n	284f4 <strtol+0x5e>
			any = -1;
   28538:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2853c:	e7e6      	b.n	2850c <strtol+0x76>
		}
	}

	if (any < 0) {
   2853e:	1c73      	adds	r3, r6, #1
   28540:	d109      	bne.n	28556 <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   28542:	f7fb fdd3 	bl	240ec <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   28546:	2322      	movs	r3, #34	; 0x22
   28548:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   2854a:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   2854c:	f1b8 0f00 	cmp.w	r8, #0
   28550:	d107      	bne.n	28562 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   28552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   28556:	b101      	cbz	r1, 2855a <strtol+0xc4>
		acc = -acc;
   28558:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2855a:	f1b8 0f00 	cmp.w	r8, #0
   2855e:	d0f8      	beq.n	28552 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   28560:	b10e      	cbz	r6, 28566 <strtol+0xd0>
   28562:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   28566:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   2856a:	e7f2      	b.n	28552 <strtol+0xbc>
	if (base == 0) {
   2856c:	2330      	movs	r3, #48	; 0x30
   2856e:	2a00      	cmp	r2, #0
   28570:	d1b2      	bne.n	284d8 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   28572:	2208      	movs	r2, #8
   28574:	e7b0      	b.n	284d8 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   28576:	2b30      	cmp	r3, #48	; 0x30
   28578:	d0a6      	beq.n	284c8 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   2857a:	220a      	movs	r2, #10
   2857c:	e7ac      	b.n	284d8 <strtol+0x42>

0002857e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2857e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28582:	4607      	mov	r7, r0
   28584:	4688      	mov	r8, r1
	register const char *s = nptr;
   28586:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   28588:	4621      	mov	r1, r4
   2858a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2858e:	2b20      	cmp	r3, #32
   28590:	d0fa      	beq.n	28588 <strtoul+0xa>
   28592:	f1a3 0009 	sub.w	r0, r3, #9
   28596:	2804      	cmp	r0, #4
   28598:	d9f6      	bls.n	28588 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   2859a:	2b2d      	cmp	r3, #45	; 0x2d
   2859c:	d12f      	bne.n	285fe <strtoul+0x80>
		neg = 1;
		c = *s++;
   2859e:	784b      	ldrb	r3, [r1, #1]
   285a0:	1c8c      	adds	r4, r1, #2
		neg = 1;
   285a2:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   285a6:	2a00      	cmp	r2, #0
   285a8:	d05e      	beq.n	28668 <strtoul+0xea>
   285aa:	2a10      	cmp	r2, #16
   285ac:	d109      	bne.n	285c2 <strtoul+0x44>
   285ae:	2b30      	cmp	r3, #48	; 0x30
   285b0:	d107      	bne.n	285c2 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   285b2:	7823      	ldrb	r3, [r4, #0]
   285b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   285b8:	2b58      	cmp	r3, #88	; 0x58
   285ba:	d150      	bne.n	2865e <strtoul+0xe0>
		c = s[1];
   285bc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   285be:	2210      	movs	r2, #16
		s += 2;
   285c0:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   285c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   285c6:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   285c8:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   285cc:	fb02 fe01 	mul.w	lr, r2, r1
   285d0:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   285d4:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   285d6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   285da:	2d09      	cmp	r5, #9
   285dc:	d816      	bhi.n	2860c <strtoul+0x8e>
			c -= '0';
   285de:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   285e0:	429a      	cmp	r2, r3
   285e2:	dd23      	ble.n	2862c <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   285e4:	2e00      	cmp	r6, #0
   285e6:	db1e      	blt.n	28626 <strtoul+0xa8>
   285e8:	4288      	cmp	r0, r1
   285ea:	d81c      	bhi.n	28626 <strtoul+0xa8>
   285ec:	d101      	bne.n	285f2 <strtoul+0x74>
   285ee:	4573      	cmp	r3, lr
   285f0:	dc19      	bgt.n	28626 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   285f2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   285f6:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   285f8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   285fc:	e7eb      	b.n	285d6 <strtoul+0x58>
	} else if (c == '+') {
   285fe:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   28600:	bf04      	itt	eq
   28602:	784b      	ldrbeq	r3, [r1, #1]
   28604:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   28606:	f04f 0c00 	mov.w	ip, #0
   2860a:	e7cc      	b.n	285a6 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2860c:	f043 0520 	orr.w	r5, r3, #32
   28610:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   28612:	2d19      	cmp	r5, #25
   28614:	d80a      	bhi.n	2862c <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28616:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2861a:	2d1a      	cmp	r5, #26
   2861c:	bf34      	ite	cc
   2861e:	2537      	movcc	r5, #55	; 0x37
   28620:	2557      	movcs	r5, #87	; 0x57
   28622:	1b5b      	subs	r3, r3, r5
   28624:	e7dc      	b.n	285e0 <strtoul+0x62>
			any = -1;
   28626:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2862a:	e7e5      	b.n	285f8 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   2862c:	2e00      	cmp	r6, #0
   2862e:	da0a      	bge.n	28646 <strtoul+0xc8>
   28630:	f7fb fd5c 	bl	240ec <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   28634:	2322      	movs	r3, #34	; 0x22
   28636:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   28638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2863c:	f1b8 0f00 	cmp.w	r8, #0
   28640:	d109      	bne.n	28656 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   28642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   28646:	f1bc 0f00 	cmp.w	ip, #0
   2864a:	d000      	beq.n	2864e <strtoul+0xd0>
		acc = -acc;
   2864c:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2864e:	f1b8 0f00 	cmp.w	r8, #0
   28652:	d0f6      	beq.n	28642 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   28654:	b106      	cbz	r6, 28658 <strtoul+0xda>
   28656:	1e67      	subs	r7, r4, #1
   28658:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   2865c:	e7f1      	b.n	28642 <strtoul+0xc4>
	if (base == 0) {
   2865e:	2330      	movs	r3, #48	; 0x30
   28660:	2a00      	cmp	r2, #0
   28662:	d1ae      	bne.n	285c2 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   28664:	2208      	movs	r2, #8
   28666:	e7ac      	b.n	285c2 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   28668:	2b30      	cmp	r3, #48	; 0x30
   2866a:	d0a2      	beq.n	285b2 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   2866c:	220a      	movs	r2, #10
   2866e:	e7a8      	b.n	285c2 <strtoul+0x44>

00028670 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   28670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   28674:	f891 8000 	ldrb.w	r8, [r1]
{
   28678:	4605      	mov	r5, r0
	if (c != 0) {
   2867a:	f1b8 0f00 	cmp.w	r8, #0
   2867e:	d010      	beq.n	286a2 <strstr+0x32>
	c = *find++;
   28680:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   28682:	4620      	mov	r0, r4
   28684:	f000 f83e 	bl	28704 <strlen>
   28688:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   2868a:	462e      	mov	r6, r5
   2868c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   28690:	b163      	cbz	r3, 286ac <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   28692:	4598      	cmp	r8, r3
   28694:	d108      	bne.n	286a8 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   28696:	463a      	mov	r2, r7
   28698:	4621      	mov	r1, r4
   2869a:	4630      	mov	r0, r6
   2869c:	f000 f84e 	bl	2873c <strncmp>
   286a0:	b910      	cbnz	r0, 286a8 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   286a2:	4628      	mov	r0, r5
   286a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   286a8:	4635      	mov	r5, r6
   286aa:	e7ee      	b.n	2868a <strstr+0x1a>
					return NULL;
   286ac:	461d      	mov	r5, r3
   286ae:	e7f8      	b.n	286a2 <strstr+0x32>

000286b0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   286b0:	3901      	subs	r1, #1
   286b2:	4603      	mov	r3, r0
   286b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   286b8:	b90a      	cbnz	r2, 286be <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   286ba:	701a      	strb	r2, [r3, #0]

	return dest;
}
   286bc:	4770      	bx	lr
		*d = *s;
   286be:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   286c2:	e7f7      	b.n	286b4 <strcpy+0x4>

000286c4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   286c4:	b570      	push	{r4, r5, r6, lr}
   286c6:	4605      	mov	r5, r0
   286c8:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   286ca:	b142      	cbz	r2, 286de <strncpy+0x1a>
   286cc:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   286d0:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   286d2:	b92c      	cbnz	r4, 286e0 <strncpy+0x1c>
   286d4:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   286d6:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   286da:	429a      	cmp	r2, r3
   286dc:	d1fb      	bne.n	286d6 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   286de:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   286e0:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   286e4:	4632      	mov	r2, r6
   286e6:	e7ef      	b.n	286c8 <strncpy+0x4>

000286e8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   286e8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   286ea:	4603      	mov	r3, r0
   286ec:	781a      	ldrb	r2, [r3, #0]
   286ee:	428a      	cmp	r2, r1
   286f0:	4618      	mov	r0, r3
   286f2:	f103 0301 	add.w	r3, r3, #1
   286f6:	d004      	beq.n	28702 <strchr+0x1a>
   286f8:	2a00      	cmp	r2, #0
   286fa:	d1f7      	bne.n	286ec <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   286fc:	2900      	cmp	r1, #0
   286fe:	bf18      	it	ne
   28700:	2000      	movne	r0, #0
}
   28702:	4770      	bx	lr

00028704 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   28704:	4603      	mov	r3, r0
	size_t n = 0;
   28706:	2000      	movs	r0, #0

	while (*s != '\0') {
   28708:	5c1a      	ldrb	r2, [r3, r0]
   2870a:	b902      	cbnz	r2, 2870e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2870c:	4770      	bx	lr
		n++;
   2870e:	3001      	adds	r0, #1
   28710:	e7fa      	b.n	28708 <strlen+0x4>

00028712 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   28712:	4603      	mov	r3, r0
	size_t n = 0;
   28714:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   28716:	5c1a      	ldrb	r2, [r3, r0]
   28718:	b10a      	cbz	r2, 2871e <strnlen+0xc>
   2871a:	4288      	cmp	r0, r1
   2871c:	d100      	bne.n	28720 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2871e:	4770      	bx	lr
		n++;
   28720:	3001      	adds	r0, #1
   28722:	e7f8      	b.n	28716 <strnlen+0x4>

00028724 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   28724:	1e43      	subs	r3, r0, #1
   28726:	3901      	subs	r1, #1
   28728:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2872c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   28730:	4282      	cmp	r2, r0
   28732:	d101      	bne.n	28738 <strcmp+0x14>
   28734:	2a00      	cmp	r2, #0
   28736:	d1f7      	bne.n	28728 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   28738:	1a10      	subs	r0, r2, r0
   2873a:	4770      	bx	lr

0002873c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2873c:	b510      	push	{r4, lr}
   2873e:	3901      	subs	r1, #1
   28740:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   28742:	4282      	cmp	r2, r0
   28744:	d009      	beq.n	2875a <strncmp+0x1e>
   28746:	7803      	ldrb	r3, [r0, #0]
   28748:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2874c:	42a3      	cmp	r3, r4
   2874e:	d100      	bne.n	28752 <strncmp+0x16>
   28750:	b90b      	cbnz	r3, 28756 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   28752:	1b18      	subs	r0, r3, r4
   28754:	e002      	b.n	2875c <strncmp+0x20>
		s1++;
   28756:	3001      	adds	r0, #1
		n--;
   28758:	e7f3      	b.n	28742 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   2875a:	2000      	movs	r0, #0
}
   2875c:	bd10      	pop	{r4, pc}

0002875e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2875e:	b510      	push	{r4, lr}
   28760:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   28762:	b15a      	cbz	r2, 2877c <memcmp+0x1e>
   28764:	3901      	subs	r1, #1
   28766:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   28768:	f813 0b01 	ldrb.w	r0, [r3], #1
   2876c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   28770:	42a3      	cmp	r3, r4
   28772:	d001      	beq.n	28778 <memcmp+0x1a>
   28774:	4290      	cmp	r0, r2
   28776:	d0f7      	beq.n	28768 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   28778:	1a80      	subs	r0, r0, r2
}
   2877a:	bd10      	pop	{r4, pc}
		return 0;
   2877c:	4610      	mov	r0, r2
   2877e:	e7fc      	b.n	2877a <memcmp+0x1c>

00028780 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   28780:	1a43      	subs	r3, r0, r1
   28782:	4293      	cmp	r3, r2
{
   28784:	b510      	push	{r4, lr}
   28786:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2878a:	d308      	bcc.n	2879e <memmove+0x1e>
   2878c:	3901      	subs	r1, #1
	char *dest = d;
   2878e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   28790:	429a      	cmp	r2, r3
   28792:	d007      	beq.n	287a4 <memmove+0x24>
			*dest = *src;
   28794:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   28798:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2879c:	e7f8      	b.n	28790 <memmove+0x10>
   2879e:	440a      	add	r2, r1
		while (n > 0) {
   287a0:	428a      	cmp	r2, r1
   287a2:	d100      	bne.n	287a6 <memmove+0x26>
		}
	}

	return d;
}
   287a4:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   287a6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   287aa:	f803 4d01 	strb.w	r4, [r3, #-1]!
   287ae:	e7f7      	b.n	287a0 <memmove+0x20>

000287b0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   287b0:	b510      	push	{r4, lr}
   287b2:	1e43      	subs	r3, r0, #1
   287b4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   287b6:	4291      	cmp	r1, r2
   287b8:	d100      	bne.n	287bc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   287ba:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   287bc:	f811 4b01 	ldrb.w	r4, [r1], #1
   287c0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   287c4:	e7f7      	b.n	287b6 <memcpy+0x6>

000287c6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   287c6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   287c8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   287ca:	4603      	mov	r3, r0
	while (n > 0) {
   287cc:	4293      	cmp	r3, r2
   287ce:	d100      	bne.n	287d2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   287d0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   287d2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   287d6:	e7f9      	b.n	287cc <memset+0x6>

000287d8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   287d8:	684b      	ldr	r3, [r1, #4]
   287da:	2b01      	cmp	r3, #1
   287dc:	dd07      	ble.n	287ee <sprintf_out+0x16>
		*(p->ptr) = c;
   287de:	680b      	ldr	r3, [r1, #0]
   287e0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   287e2:	680b      	ldr	r3, [r1, #0]
   287e4:	3301      	adds	r3, #1
   287e6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   287e8:	684b      	ldr	r3, [r1, #4]
   287ea:	3b01      	subs	r3, #1
   287ec:	604b      	str	r3, [r1, #4]
}
   287ee:	2000      	movs	r0, #0
   287f0:	4770      	bx	lr

000287f2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   287f2:	b084      	sub	sp, #16
   287f4:	ab04      	add	r3, sp, #16
   287f6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   287fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   287fe:	2b06      	cmp	r3, #6
   28800:	d108      	bne.n	28814 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   28802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28806:	2201      	movs	r2, #1
   28808:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2880c:	f3bf 8f4f 	dsb	sy
        __WFE();
   28810:	bf20      	wfe
    while (true)
   28812:	e7fd      	b.n	28810 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   28814:	b004      	add	sp, #16
   28816:	4770      	bx	lr

00028818 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   28818:	b084      	sub	sp, #16
   2881a:	ab04      	add	r3, sp, #16
   2881c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   28820:	2300      	movs	r3, #0
   28822:	f383 8811 	msr	BASEPRI, r3
   28826:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2882a:	b004      	add	sp, #16
   2882c:	4770      	bx	lr

0002882e <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2882e:	b530      	push	{r4, r5, lr}
   28830:	b085      	sub	sp, #20
   28832:	4604      	mov	r4, r0
   28834:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   28836:	4668      	mov	r0, sp
   28838:	2203      	movs	r2, #3
   2883a:	f7ff ffb9 	bl	287b0 <memcpy>
	(void)memset(res + 3, 0, 13);
   2883e:	220d      	movs	r2, #13
   28840:	2100      	movs	r1, #0
   28842:	f10d 0003 	add.w	r0, sp, #3
   28846:	f7ff ffbe 	bl	287c6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2884a:	4620      	mov	r0, r4
   2884c:	466a      	mov	r2, sp
   2884e:	4669      	mov	r1, sp
   28850:	f7ec ff88 	bl	15764 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   28854:	4604      	mov	r4, r0
   28856:	b920      	cbnz	r0, 28862 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   28858:	2203      	movs	r2, #3
   2885a:	4669      	mov	r1, sp
   2885c:	4628      	mov	r0, r5
   2885e:	f7ff ffa7 	bl	287b0 <memcpy>

	return 0;
}
   28862:	4620      	mov	r0, r4
   28864:	b005      	add	sp, #20
   28866:	bd30      	pop	{r4, r5, pc}

00028868 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   28868:	b513      	push	{r0, r1, r4, lr}
   2886a:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2886c:	aa01      	add	r2, sp, #4
   2886e:	3103      	adds	r1, #3
   28870:	f7ff ffdd 	bl	2882e <ah>
	if (err) {
   28874:	b948      	cbnz	r0, 2888a <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   28876:	2203      	movs	r2, #3
   28878:	a901      	add	r1, sp, #4
   2887a:	4620      	mov	r0, r4
   2887c:	f7ff ff6f 	bl	2875e <memcmp>
   28880:	fab0 f080 	clz	r0, r0
   28884:	0940      	lsrs	r0, r0, #5
}
   28886:	b002      	add	sp, #8
   28888:	bd10      	pop	{r4, pc}
		return false;
   2888a:	2000      	movs	r0, #0
   2888c:	e7fb      	b.n	28886 <bt_rpa_irk_matches+0x1e>

0002888e <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2888e:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   28890:	1cce      	adds	r6, r1, #3
{
   28892:	4605      	mov	r5, r0
   28894:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   28896:	4630      	mov	r0, r6
   28898:	2103      	movs	r1, #3
   2889a:	f7ec ff61 	bl	15760 <bt_rand>
	if (err) {
   2889e:	b960      	cbnz	r0, 288ba <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   288a0:	7963      	ldrb	r3, [r4, #5]
   288a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   288a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   288aa:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   288ac:	4622      	mov	r2, r4
   288ae:	4631      	mov	r1, r6
   288b0:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   288b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   288b6:	f7ff bfba 	b.w	2882e <ah>
}
   288ba:	bd70      	pop	{r4, r5, r6, pc}

000288bc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   288bc:	b510      	push	{r4, lr}
   288be:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   288c0:	7801      	ldrb	r1, [r0, #0]
   288c2:	7822      	ldrb	r2, [r4, #0]
   288c4:	428a      	cmp	r2, r1
{
   288c6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   288c8:	d00f      	beq.n	288ea <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   288ca:	4669      	mov	r1, sp
   288cc:	f7e4 f96c 	bl	cba8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   288d0:	a905      	add	r1, sp, #20
   288d2:	4620      	mov	r0, r4
   288d4:	f7e4 f968 	bl	cba8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   288d8:	2210      	movs	r2, #16
   288da:	f10d 0115 	add.w	r1, sp, #21
   288de:	f10d 0001 	add.w	r0, sp, #1
   288e2:	f7ff ff3c 	bl	2875e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   288e6:	b00a      	add	sp, #40	; 0x28
   288e8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   288ea:	2a01      	cmp	r2, #1
   288ec:	d006      	beq.n	288fc <bt_uuid_cmp+0x40>
   288ee:	2a02      	cmp	r2, #2
   288f0:	d007      	beq.n	28902 <bt_uuid_cmp+0x46>
   288f2:	b972      	cbnz	r2, 28912 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   288f4:	8840      	ldrh	r0, [r0, #2]
   288f6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   288f8:	1ac0      	subs	r0, r0, r3
   288fa:	e7f4      	b.n	288e6 <bt_uuid_cmp+0x2a>
   288fc:	6840      	ldr	r0, [r0, #4]
   288fe:	6863      	ldr	r3, [r4, #4]
   28900:	e7fa      	b.n	288f8 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28902:	2210      	movs	r2, #16
   28904:	1c61      	adds	r1, r4, #1
   28906:	3001      	adds	r0, #1
}
   28908:	b00a      	add	sp, #40	; 0x28
   2890a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2890e:	f7ff bf26 	b.w	2875e <memcmp>
	switch (u1->type) {
   28912:	f06f 0015 	mvn.w	r0, #21
   28916:	e7e6      	b.n	288e6 <bt_uuid_cmp+0x2a>

00028918 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   28918:	2a04      	cmp	r2, #4
{
   2891a:	b510      	push	{r4, lr}
	switch (data_len) {
   2891c:	d00a      	beq.n	28934 <bt_uuid_create+0x1c>
   2891e:	2a10      	cmp	r2, #16
   28920:	d00d      	beq.n	2893e <bt_uuid_create+0x26>
   28922:	2a02      	cmp	r2, #2
   28924:	f04f 0300 	mov.w	r3, #0
   28928:	d10f      	bne.n	2894a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2892a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2892c:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2892e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   28930:	2001      	movs	r0, #1
}
   28932:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   28934:	2301      	movs	r3, #1
   28936:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   28938:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2893a:	6042      	str	r2, [r0, #4]
		break;
   2893c:	e7f8      	b.n	28930 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2893e:	2302      	movs	r3, #2
   28940:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   28944:	f7ff ff34 	bl	287b0 <memcpy>
		break;
   28948:	e7f2      	b.n	28930 <bt_uuid_create+0x18>
	switch (data_len) {
   2894a:	4618      	mov	r0, r3
   2894c:	e7f1      	b.n	28932 <bt_uuid_create+0x1a>

0002894e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2894e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   28950:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   28952:	2106      	movs	r1, #6
{
   28954:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   28956:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2895a:	f7ec ff01 	bl	15760 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2895e:	b918      	cbnz	r0, 28968 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   28960:	79a3      	ldrb	r3, [r4, #6]
   28962:	f063 033f 	orn	r3, r3, #63	; 0x3f
   28966:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   28968:	bd10      	pop	{r4, pc}

0002896a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2896a:	280f      	cmp	r0, #15
   2896c:	d806      	bhi.n	2897c <bt_hci_evt_get_flags+0x12>
   2896e:	280d      	cmp	r0, #13
   28970:	d80b      	bhi.n	2898a <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   28972:	2805      	cmp	r0, #5
   28974:	bf14      	ite	ne
   28976:	2002      	movne	r0, #2
   28978:	2003      	moveq	r0, #3
   2897a:	4770      	bx	lr
	switch (evt) {
   2897c:	2813      	cmp	r0, #19
   2897e:	d004      	beq.n	2898a <bt_hci_evt_get_flags+0x20>
   28980:	281a      	cmp	r0, #26
   28982:	bf14      	ite	ne
   28984:	2002      	movne	r0, #2
   28986:	2001      	moveq	r0, #1
   28988:	4770      	bx	lr
   2898a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2898c:	4770      	bx	lr

0002898e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2898e:	2207      	movs	r2, #7
   28990:	f7ff bf0e 	b.w	287b0 <memcpy>

00028994 <atomic_or>:
{
   28994:	4603      	mov	r3, r0
}
   28996:	f3bf 8f5b 	dmb	ish
   2899a:	e853 0f00 	ldrex	r0, [r3]
   2899e:	ea40 0201 	orr.w	r2, r0, r1
   289a2:	e843 2c00 	strex	ip, r2, [r3]
   289a6:	f1bc 0f00 	cmp.w	ip, #0
   289aa:	d1f6      	bne.n	2899a <atomic_or+0x6>
   289ac:	f3bf 8f5b 	dmb	ish
   289b0:	4770      	bx	lr

000289b2 <z_log_msg2_static_create.constprop.0>:
   289b2:	2300      	movs	r3, #0
   289b4:	f7fe b898 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

000289b8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   289b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   289ba:	ab0a      	add	r3, sp, #40	; 0x28
   289bc:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   289be:	9302      	str	r3, [sp, #8]
   289c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   289c2:	9301      	str	r3, [sp, #4]
   289c4:	2300      	movs	r3, #0
   289c6:	9300      	str	r3, [sp, #0]
   289c8:	4618      	mov	r0, r3
   289ca:	f7df f8b9 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
   289ce:	b007      	add	sp, #28
   289d0:	f85d fb04 	ldr.w	pc, [sp], #4

000289d4 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   289d4:	f7e4 bdbe 	b.w	d554 <bt_le_create_conn_legacy>

000289d8 <bt_hci_disconnect>:
{
   289d8:	b570      	push	{r4, r5, r6, lr}
   289da:	4606      	mov	r6, r0
   289dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   289de:	f240 4006 	movw	r0, #1030	; 0x406
   289e2:	2103      	movs	r1, #3
   289e4:	f7e4 fcc4 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
   289e8:	4604      	mov	r4, r0
   289ea:	b168      	cbz	r0, 28a08 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   289ec:	2103      	movs	r1, #3
   289ee:	3008      	adds	r0, #8
   289f0:	f001 fa6f 	bl	29ed2 <net_buf_simple_add>
	disconn->reason = reason;
   289f4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   289f6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   289f8:	4621      	mov	r1, r4
   289fa:	2200      	movs	r2, #0
}
   289fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   28a00:	f240 4006 	movw	r0, #1030	; 0x406
   28a04:	f7e4 bcee 	b.w	d3e4 <bt_hci_cmd_send_sync>
}
   28a08:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a0c:	bd70      	pop	{r4, r5, r6, pc}

00028a0e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   28a0e:	8803      	ldrh	r3, [r0, #0]
   28a10:	8842      	ldrh	r2, [r0, #2]
   28a12:	4293      	cmp	r3, r2
{
   28a14:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   28a16:	d819      	bhi.n	28a4c <bt_le_conn_params_valid+0x3e>
   28a18:	2b05      	cmp	r3, #5
   28a1a:	d917      	bls.n	28a4c <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28a1c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   28a20:	d814      	bhi.n	28a4c <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28a22:	8883      	ldrh	r3, [r0, #4]
   28a24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   28a28:	d210      	bcs.n	28a4c <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28a2a:	88c0      	ldrh	r0, [r0, #6]
   28a2c:	f1a0 010a 	sub.w	r1, r0, #10
   28a30:	b289      	uxth	r1, r1
   28a32:	f640 4476 	movw	r4, #3190	; 0xc76
   28a36:	42a1      	cmp	r1, r4
   28a38:	d808      	bhi.n	28a4c <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   28a3a:	3301      	adds	r3, #1
   28a3c:	b29b      	uxth	r3, r3
   28a3e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   28a40:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   28a44:	bf34      	ite	cc
   28a46:	2001      	movcc	r0, #1
   28a48:	2000      	movcs	r0, #0
}
   28a4a:	bd10      	pop	{r4, pc}
		return false;
   28a4c:	2000      	movs	r0, #0
   28a4e:	e7fc      	b.n	28a4a <bt_le_conn_params_valid+0x3c>

00028a50 <bt_le_set_data_len>:
{
   28a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a52:	4607      	mov	r7, r0
   28a54:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28a56:	f242 0022 	movw	r0, #8226	; 0x2022
   28a5a:	2106      	movs	r1, #6
{
   28a5c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28a5e:	f7e4 fc87 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
   28a62:	4604      	mov	r4, r0
   28a64:	b170      	cbz	r0, 28a84 <bt_le_set_data_len+0x34>
   28a66:	2106      	movs	r1, #6
   28a68:	3008      	adds	r0, #8
   28a6a:	f001 fa32 	bl	29ed2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28a6e:	883b      	ldrh	r3, [r7, #0]
   28a70:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   28a72:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   28a74:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   28a76:	4621      	mov	r1, r4
   28a78:	f242 0022 	movw	r0, #8226	; 0x2022
}
   28a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   28a80:	f7e4 bdc0 	b.w	d604 <bt_hci_cmd_send>
}
   28a84:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028a8a <bt_le_set_phy>:
{
   28a8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a8e:	4680      	mov	r8, r0
   28a90:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28a92:	f242 0032 	movw	r0, #8242	; 0x2032
   28a96:	2107      	movs	r1, #7
{
   28a98:	f89d 9020 	ldrb.w	r9, [sp, #32]
   28a9c:	4616      	mov	r6, r2
   28a9e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28aa0:	f7e4 fc66 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
   28aa4:	4604      	mov	r4, r0
   28aa6:	b190      	cbz	r0, 28ace <bt_le_set_phy+0x44>
   28aa8:	2107      	movs	r1, #7
   28aaa:	3008      	adds	r0, #8
   28aac:	f001 fa11 	bl	29ed2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28ab0:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   28ab4:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   28ab6:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   28ab8:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28aba:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   28abc:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28ac0:	4621      	mov	r1, r4
   28ac2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   28ac6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28aca:	f7e4 bd9b 	b.w	d604 <bt_hci_cmd_send>
}
   28ace:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028ad6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   28ad6:	6880      	ldr	r0, [r0, #8]
   28ad8:	f7e4 be68 	b.w	d7ac <bt_hci_le_enh_conn_complete>

00028adc <le_legacy_conn_complete>:
{
   28adc:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   28ade:	6881      	ldr	r1, [r0, #8]
{
   28ae0:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   28ae2:	780b      	ldrb	r3, [r1, #0]
   28ae4:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   28ae8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   28aec:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   28af0:	78cb      	ldrb	r3, [r1, #3]
   28af2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   28af6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   28afa:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   28afe:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   28b02:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   28b06:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   28b0a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   28b0e:	7c4b      	ldrb	r3, [r1, #17]
   28b10:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   28b14:	a803      	add	r0, sp, #12
   28b16:	3104      	adds	r1, #4
   28b18:	f7ff ff39 	bl	2898e <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   28b1c:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   28b1e:	4669      	mov	r1, sp
   28b20:	2206      	movs	r2, #6
   28b22:	f10d 0013 	add.w	r0, sp, #19
   28b26:	9400      	str	r4, [sp, #0]
   28b28:	f8ad 4004 	strh.w	r4, [sp, #4]
   28b2c:	f7ff fe40 	bl	287b0 <memcpy>
   28b30:	2206      	movs	r2, #6
   28b32:	4669      	mov	r1, sp
   28b34:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   28b38:	9400      	str	r4, [sp, #0]
   28b3a:	f8ad 4004 	strh.w	r4, [sp, #4]
   28b3e:	f7ff fe37 	bl	287b0 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   28b42:	a802      	add	r0, sp, #8
   28b44:	f7e4 fe32 	bl	d7ac <bt_hci_le_enh_conn_complete>
}
   28b48:	b00a      	add	sp, #40	; 0x28
   28b4a:	bd10      	pop	{r4, pc}

00028b4c <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   28b4c:	2000      	movs	r0, #0
   28b4e:	4770      	bx	lr

00028b50 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   28b50:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   28b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   28b56:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   28b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28b5c:	2100      	movs	r1, #0
{
   28b5e:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   28b60:	f7e4 f882 	bl	cc68 <bt_buf_get_evt>
   28b64:	2102      	movs	r1, #2
   28b66:	4604      	mov	r4, r0
   28b68:	3008      	adds	r0, #8
   28b6a:	f001 f9b2 	bl	29ed2 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   28b6e:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   28b70:	7045      	strb	r5, [r0, #1]

	return buf;
}
   28b72:	4620      	mov	r0, r4
   28b74:	bd70      	pop	{r4, r5, r6, pc}

00028b76 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   28b76:	3103      	adds	r1, #3
{
   28b78:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   28b7a:	b2c9      	uxtb	r1, r1
{
   28b7c:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   28b7e:	200e      	movs	r0, #14
   28b80:	f7ff ffe6 	bl	28b50 <bt_hci_evt_create>
   28b84:	2103      	movs	r1, #3
   28b86:	4604      	mov	r4, r0
   28b88:	3008      	adds	r0, #8
   28b8a:	f001 f9a2 	bl	29ed2 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   28b8e:	2301      	movs	r3, #1
   28b90:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   28b92:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   28b96:	4620      	mov	r0, r4
   28b98:	bd38      	pop	{r3, r4, r5, pc}

00028b9a <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   28b9a:	b570      	push	{r4, r5, r6, lr}
   28b9c:	4605      	mov	r5, r0
   28b9e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   28ba0:	200f      	movs	r0, #15
   28ba2:	2104      	movs	r1, #4
   28ba4:	f7ff ffd4 	bl	28b50 <bt_hci_evt_create>
   28ba8:	2104      	movs	r1, #4
   28baa:	4604      	mov	r4, r0
   28bac:	3008      	adds	r0, #8
   28bae:	f001 f990 	bl	29ed2 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   28bb2:	2201      	movs	r2, #1
	cs->status = status;
   28bb4:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   28bb6:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   28bb8:	8045      	strh	r5, [r0, #2]

	return buf;
}
   28bba:	4620      	mov	r0, r4
   28bbc:	bd70      	pop	{r4, r5, r6, pc}

00028bbe <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28bbe:	f3bf 8f5b 	dmb	ish
   28bc2:	6800      	ldr	r0, [r0, #0]
   28bc4:	f3bf 8f5b 	dmb	ish
}
   28bc8:	4770      	bx	lr

00028bca <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   28bca:	2300      	movs	r3, #0
   28bcc:	f7fd bf8c 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00028bd0 <is_adv_using_rand_addr>:
{
   28bd0:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   28bd2:	f7e6 f8e3 	bl	ed9c <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   28bd6:	b120      	cbz	r0, 28be2 <is_adv_using_rand_addr+0x12>
   28bd8:	3010      	adds	r0, #16
   28bda:	f7ff fff0 	bl	28bbe <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28bde:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   28be2:	bd08      	pop	{r3, pc}

00028be4 <bt_lookup_id_addr>:
}
   28be4:	4608      	mov	r0, r1
   28be6:	4770      	bx	lr

00028be8 <bt_id_set_private_addr>:
{
   28be8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   28bea:	2106      	movs	r1, #6
   28bec:	4668      	mov	r0, sp
   28bee:	f7ec fdb7 	bl	15760 <bt_rand>
	if (err) {
   28bf2:	b940      	cbnz	r0, 28c06 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   28bf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   28bf8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   28bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28bfe:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   28c02:	f7e5 fd3b 	bl	e67c <set_random_address>
}
   28c06:	b003      	add	sp, #12
   28c08:	f85d fb04 	ldr.w	pc, [sp], #4

00028c0c <bt_id_set_adv_private_addr>:
{
   28c0c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   28c0e:	2106      	movs	r1, #6
   28c10:	4668      	mov	r0, sp
   28c12:	f7ec fda5 	bl	15760 <bt_rand>
	if (err) {
   28c16:	b940      	cbnz	r0, 28c2a <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   28c18:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   28c1c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   28c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28c22:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   28c26:	f7e5 fd29 	bl	e67c <set_random_address>
}
   28c2a:	b003      	add	sp, #12
   28c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00028c30 <bt_id_scan_random_addr_check>:
{
   28c30:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   28c32:	f7e6 f8b3 	bl	ed9c <bt_le_adv_lookup_legacy>
	if (!adv) {
   28c36:	b110      	cbz	r0, 28c3e <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28c38:	3010      	adds	r0, #16
   28c3a:	f7ff ffc0 	bl	28bbe <atomic_get>
}
   28c3e:	2001      	movs	r0, #1
   28c40:	bd08      	pop	{r3, pc}

00028c42 <get_adv_channel_map>:
{
   28c42:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   28c44:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   28c48:	bf0c      	ite	eq
   28c4a:	2007      	moveq	r0, #7
   28c4c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   28c4e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   28c50:	bf48      	it	mi
   28c52:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   28c56:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   28c58:	bf48      	it	mi
   28c5a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   28c5e:	4770      	bx	lr

00028c60 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28c60:	f3bf 8f5b 	dmb	ish
   28c64:	6800      	ldr	r0, [r0, #0]
   28c66:	f3bf 8f5b 	dmb	ish
}
   28c6a:	4770      	bx	lr

00028c6c <atomic_and>:
{
   28c6c:	4603      	mov	r3, r0
}
   28c6e:	f3bf 8f5b 	dmb	ish
   28c72:	e853 0f00 	ldrex	r0, [r3]
   28c76:	ea00 0201 	and.w	r2, r0, r1
   28c7a:	e843 2c00 	strex	ip, r2, [r3]
   28c7e:	f1bc 0f00 	cmp.w	ip, #0
   28c82:	d1f6      	bne.n	28c72 <atomic_and+0x6>
   28c84:	f3bf 8f5b 	dmb	ish
   28c88:	4770      	bx	lr

00028c8a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28c8a:	2301      	movs	r3, #1
{
   28c8c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28c8e:	fa03 f101 	lsl.w	r1, r3, r1
{
   28c92:	4604      	mov	r4, r0
	if (val) {
   28c94:	b162      	cbz	r2, 28cb0 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28c96:	f3bf 8f5b 	dmb	ish
   28c9a:	e854 3f00 	ldrex	r3, [r4]
   28c9e:	430b      	orrs	r3, r1
   28ca0:	e844 3200 	strex	r2, r3, [r4]
   28ca4:	2a00      	cmp	r2, #0
   28ca6:	d1f8      	bne.n	28c9a <atomic_set_bit_to+0x10>
   28ca8:	f3bf 8f5b 	dmb	ish
	}
}
   28cac:	bc10      	pop	{r4}
   28cae:	4770      	bx	lr
   28cb0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28cb2:	43c9      	mvns	r1, r1
   28cb4:	f7ff bfda 	b.w	28c6c <atomic_and>

00028cb8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   28cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cbc:	b087      	sub	sp, #28
   28cbe:	4605      	mov	r5, r0
   28cc0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   28cc4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   28cc8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   28ccc:	460c      	mov	r4, r1
   28cce:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   28cd0:	2100      	movs	r1, #0
   28cd2:	2210      	movs	r2, #16
   28cd4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   28cd6:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   28cd8:	f7ff fd75 	bl	287c6 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   28cdc:	b186      	cbz	r6, 28d00 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   28cde:	f7e5 fcaf 	bl	e640 <bt_get_name>
   28ce2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   28ce4:	2c00      	cmp	r4, #0
   28ce6:	d139      	bne.n	28d5c <le_adv_update.constprop.0+0xa4>
   28ce8:	2f00      	cmp	r7, #0
   28cea:	d142      	bne.n	28d72 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   28cec:	4658      	mov	r0, fp
   28cee:	f7ff fd09 	bl	28704 <strlen>
   28cf2:	2309      	movs	r3, #9
   28cf4:	f88d 3000 	strb.w	r3, [sp]
   28cf8:	f88d 0001 	strb.w	r0, [sp, #1]
   28cfc:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   28d00:	2e01      	cmp	r6, #1
			d_len = 2;
   28d02:	bf0c      	ite	eq
   28d04:	2202      	moveq	r2, #2
		d_len = 1;
   28d06:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   28d08:	a902      	add	r1, sp, #8
   28d0a:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   28d0e:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   28d12:	bf04      	itt	eq
   28d14:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   28d18:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   28d1a:	f7e5 ffc5 	bl	eca8 <hci_set_ad>
		if (err) {
   28d1e:	4604      	mov	r4, r0
   28d20:	b978      	cbnz	r0, 28d42 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   28d22:	f1ba 0f00 	cmp.w	sl, #0
   28d26:	d126      	bne.n	28d76 <le_adv_update.constprop.0+0xbe>
   28d28:	3510      	adds	r5, #16
   28d2a:	f3bf 8f5b 	dmb	ish
   28d2e:	e855 3f00 	ldrex	r3, [r5]
   28d32:	f043 0304 	orr.w	r3, r3, #4
   28d36:	e845 3200 	strex	r2, r3, [r5]
   28d3a:	2a00      	cmp	r2, #0
   28d3c:	d1f7      	bne.n	28d2e <le_adv_update.constprop.0+0x76>
   28d3e:	f3bf 8f5b 	dmb	ish
}
   28d42:	4620      	mov	r0, r4
   28d44:	b007      	add	sp, #28
   28d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28d4a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   28d4e:	3a08      	subs	r2, #8
   28d50:	2a01      	cmp	r2, #1
   28d52:	d925      	bls.n	28da0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   28d54:	3301      	adds	r3, #1
   28d56:	4598      	cmp	r8, r3
   28d58:	d1f7      	bne.n	28d4a <le_adv_update.constprop.0+0x92>
   28d5a:	e7c5      	b.n	28ce8 <le_adv_update.constprop.0+0x30>
   28d5c:	2300      	movs	r3, #0
   28d5e:	e7fa      	b.n	28d56 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28d60:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   28d64:	3a08      	subs	r2, #8
   28d66:	2a01      	cmp	r2, #1
   28d68:	d91a      	bls.n	28da0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   28d6a:	3301      	adds	r3, #1
   28d6c:	4599      	cmp	r9, r3
   28d6e:	d1f7      	bne.n	28d60 <le_adv_update.constprop.0+0xa8>
   28d70:	e7bc      	b.n	28cec <le_adv_update.constprop.0+0x34>
   28d72:	2300      	movs	r3, #0
   28d74:	e7fa      	b.n	28d6c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   28d76:	2e02      	cmp	r6, #2
   28d78:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   28d7c:	bf08      	it	eq
   28d7e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28d80:	a902      	add	r1, sp, #8
			d_len = 2;
   28d82:	bf08      	it	eq
   28d84:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28d86:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   28d8a:	bf08      	it	eq
   28d8c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   28d90:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28d94:	f7e5 ff88 	bl	eca8 <hci_set_ad>
		if (err) {
   28d98:	2800      	cmp	r0, #0
   28d9a:	d0c5      	beq.n	28d28 <le_adv_update.constprop.0+0x70>
   28d9c:	4604      	mov	r4, r0
   28d9e:	e7d0      	b.n	28d42 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   28da0:	f06f 0415 	mvn.w	r4, #21
   28da4:	e7cd      	b.n	28d42 <le_adv_update.constprop.0+0x8a>

00028da6 <get_adv_name_type>:
{
   28da6:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   28da8:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28dac:	4618      	mov	r0, r3
   28dae:	f7ff ff57 	bl	28c60 <atomic_get>
   28db2:	05c2      	lsls	r2, r0, #23
   28db4:	d405      	bmi.n	28dc2 <get_adv_name_type+0x1c>
   28db6:	4618      	mov	r0, r3
   28db8:	f7ff ff52 	bl	28c60 <atomic_get>
		return ADV_NAME_TYPE_SD;
   28dbc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
   28dc0:	bd08      	pop	{r3, pc}
		return ADV_NAME_TYPE_SD;
   28dc2:	2002      	movs	r0, #2
   28dc4:	e7fc      	b.n	28dc0 <get_adv_name_type+0x1a>

00028dc6 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   28dc6:	6843      	ldr	r3, [r0, #4]
   28dc8:	f013 0008 	ands.w	r0, r3, #8
   28dcc:	d00a      	beq.n	28de4 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   28dce:	035a      	lsls	r2, r3, #13
   28dd0:	d407      	bmi.n	28de2 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   28dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   28dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28dda:	bf0c      	ite	eq
   28ddc:	2001      	moveq	r0, #1
   28dde:	2002      	movne	r0, #2
   28de0:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   28de2:	2001      	movs	r0, #1
}
   28de4:	4770      	bx	lr

00028de6 <bt_le_adv_set_enable_legacy>:
{
   28de6:	b570      	push	{r4, r5, r6, lr}
   28de8:	4606      	mov	r6, r0
   28dea:	b086      	sub	sp, #24
   28dec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   28dee:	f242 000a 	movw	r0, #8202	; 0x200a
   28df2:	2101      	movs	r1, #1
   28df4:	f7e4 fabc 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
   28df8:	4604      	mov	r4, r0
   28dfa:	b1b0      	cbz	r0, 28e2a <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   28dfc:	3008      	adds	r0, #8
	if (enable) {
   28dfe:	b195      	cbz	r5, 28e26 <bt_le_adv_set_enable_legacy+0x40>
   28e00:	2101      	movs	r1, #1
   28e02:	f001 f875 	bl	29ef0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   28e06:	f106 0210 	add.w	r2, r6, #16
   28e0a:	a903      	add	r1, sp, #12
   28e0c:	4620      	mov	r0, r4
   28e0e:	9500      	str	r5, [sp, #0]
   28e10:	2306      	movs	r3, #6
   28e12:	f7e4 fa9b 	bl	d34c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   28e16:	2200      	movs	r2, #0
   28e18:	4621      	mov	r1, r4
   28e1a:	f242 000a 	movw	r0, #8202	; 0x200a
   28e1e:	f7e4 fae1 	bl	d3e4 <bt_hci_cmd_send_sync>
}
   28e22:	b006      	add	sp, #24
   28e24:	bd70      	pop	{r4, r5, r6, pc}
   28e26:	4629      	mov	r1, r5
   28e28:	e7eb      	b.n	28e02 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   28e2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28e2e:	e7f8      	b.n	28e22 <bt_le_adv_set_enable_legacy+0x3c>

00028e30 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   28e30:	3018      	adds	r0, #24
   28e32:	f002 b82f 	b.w	2ae94 <k_work_cancel_delayable>

00028e36 <atomic_and>:
{
   28e36:	4603      	mov	r3, r0
}
   28e38:	f3bf 8f5b 	dmb	ish
   28e3c:	e853 0f00 	ldrex	r0, [r3]
   28e40:	ea00 0201 	and.w	r2, r0, r1
   28e44:	e843 2c00 	strex	ip, r2, [r3]
   28e48:	f1bc 0f00 	cmp.w	ip, #0
   28e4c:	d1f6      	bne.n	28e3c <atomic_and+0x6>
   28e4e:	f3bf 8f5b 	dmb	ish
   28e52:	4770      	bx	lr

00028e54 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   28e54:	f7e6 b96e 	b.w	f134 <bt_le_scan_set_enable_legacy>

00028e58 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28e58:	f3bf 8f5b 	dmb	ish
   28e5c:	6800      	ldr	r0, [r0, #0]
   28e5e:	f3bf 8f5b 	dmb	ish
}
   28e62:	4770      	bx	lr

00028e64 <z_log_msg2_static_create.constprop.0>:
   28e64:	2300      	movs	r3, #0
   28e66:	f7fd be3f 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00028e6a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   28e6a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28e6c:	ab0a      	add	r3, sp, #40	; 0x28
   28e6e:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   28e70:	9302      	str	r3, [sp, #8]
   28e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28e74:	9301      	str	r3, [sp, #4]
   28e76:	2300      	movs	r3, #0
   28e78:	9300      	str	r3, [sp, #0]
   28e7a:	2202      	movs	r2, #2
   28e7c:	4618      	mov	r0, r3
   28e7e:	f7de fe5f 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
   28e82:	b007      	add	sp, #28
   28e84:	f85d fb04 	ldr.w	pc, [sp], #4

00028e88 <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28e88:	f3bf 8f5b 	dmb	ish
   28e8c:	e850 3f00 	ldrex	r3, [r0]
   28e90:	3b01      	subs	r3, #1
   28e92:	e840 3200 	strex	r2, r3, [r0]
   28e96:	2a00      	cmp	r2, #0
   28e98:	d1f8      	bne.n	28e8c <atomic_dec.isra.0+0x4>
   28e9a:	f3bf 8f5b 	dmb	ish
}
   28e9e:	4770      	bx	lr

00028ea0 <tx_notify>:
{
   28ea0:	b570      	push	{r4, r5, r6, lr}
   28ea2:	4604      	mov	r4, r0
	__asm__ volatile(
   28ea4:	f04f 0220 	mov.w	r2, #32
   28ea8:	f3ef 8311 	mrs	r3, BASEPRI
   28eac:	f382 8812 	msr	BASEPRI_MAX, r2
   28eb0:	f3bf 8f6f 	isb	sy
	return list->head;
   28eb4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   28eb6:	b920      	cbnz	r0, 28ec2 <tx_notify+0x22>
	__asm__ volatile(
   28eb8:	f383 8811 	msr	BASEPRI, r3
   28ebc:	f3bf 8f6f 	isb	sy
}
   28ec0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ec2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   28ec4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28ec6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ec8:	4288      	cmp	r0, r1
	list->tail = node;
   28eca:	bf08      	it	eq
   28ecc:	6262      	streq	r2, [r4, #36]	; 0x24
   28ece:	f383 8811 	msr	BASEPRI, r3
   28ed2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   28ed6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   28eda:	f7e6 fb75 	bl	f5c8 <tx_free>
		cb(conn, user_data);
   28ede:	4631      	mov	r1, r6
   28ee0:	4620      	mov	r0, r4
   28ee2:	47a8      	blx	r5
	while (1) {
   28ee4:	e7de      	b.n	28ea4 <tx_notify+0x4>

00028ee6 <bt_conn_reset_rx_state>:
{
   28ee6:	b510      	push	{r4, lr}
   28ee8:	4604      	mov	r4, r0
	if (!conn->rx) {
   28eea:	6900      	ldr	r0, [r0, #16]
   28eec:	b118      	cbz	r0, 28ef6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28eee:	f7f6 fa07 	bl	1f300 <net_buf_unref>
	conn->rx = NULL;
   28ef2:	2300      	movs	r3, #0
   28ef4:	6123      	str	r3, [r4, #16]
}
   28ef6:	bd10      	pop	{r4, pc}

00028ef8 <conn_cleanup>:
{
   28ef8:	b570      	push	{r4, r5, r6, lr}
   28efa:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   28efc:	f100 0638 	add.w	r6, r0, #56	; 0x38
   28f00:	2200      	movs	r2, #0
   28f02:	2300      	movs	r3, #0
   28f04:	4630      	mov	r0, r6
   28f06:	f000 ff87 	bl	29e18 <net_buf_get>
   28f0a:	4605      	mov	r5, r0
   28f0c:	b950      	cbnz	r0, 28f24 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   28f0e:	4620      	mov	r0, r4
   28f10:	f7ff ffe9 	bl	28ee6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   28f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
   28f18:	2200      	movs	r2, #0
}
   28f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   28f1e:	2300      	movs	r3, #0
   28f20:	f7fb bf3c 	b.w	24d9c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   28f24:	6968      	ldr	r0, [r5, #20]
   28f26:	b108      	cbz	r0, 28f2c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   28f28:	f7e6 fb4e 	bl	f5c8 <tx_free>
		net_buf_unref(buf);
   28f2c:	4628      	mov	r0, r5
   28f2e:	f7f6 f9e7 	bl	1f300 <net_buf_unref>
   28f32:	e7e5      	b.n	28f00 <conn_cleanup+0x8>

00028f34 <bt_conn_ref>:
{
   28f34:	b510      	push	{r4, lr}
   28f36:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   28f38:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   28f3c:	4610      	mov	r0, r2
   28f3e:	f7ff ff8b 	bl	28e58 <atomic_get>
		if (!old) {
   28f42:	b180      	cbz	r0, 28f66 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28f44:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   28f48:	1c41      	adds	r1, r0, #1
   28f4a:	e852 4f00 	ldrex	r4, [r2]
   28f4e:	4284      	cmp	r4, r0
   28f50:	d104      	bne.n	28f5c <bt_conn_ref+0x28>
   28f52:	e842 1c00 	strex	ip, r1, [r2]
   28f56:	f1bc 0f00 	cmp.w	ip, #0
   28f5a:	d1f6      	bne.n	28f4a <bt_conn_ref+0x16>
   28f5c:	f3bf 8f5b 	dmb	ish
   28f60:	d1ec      	bne.n	28f3c <bt_conn_ref+0x8>
}
   28f62:	4618      	mov	r0, r3
   28f64:	bd10      	pop	{r4, pc}
			return NULL;
   28f66:	4603      	mov	r3, r0
   28f68:	e7fb      	b.n	28f62 <bt_conn_ref+0x2e>

00028f6a <conn_lookup_handle>:
{
   28f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28f6e:	4606      	mov	r6, r0
   28f70:	460d      	mov	r5, r1
   28f72:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   28f74:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28f76:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   28f7a:	42ac      	cmp	r4, r5
   28f7c:	d102      	bne.n	28f84 <conn_lookup_handle+0x1a>
	return NULL;
   28f7e:	2000      	movs	r0, #0
}
   28f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28f84:	fb08 6004 	mla	r0, r8, r4, r6
   28f88:	f7ff ffd4 	bl	28f34 <bt_conn_ref>
		if (!conn) {
   28f8c:	b158      	cbz	r0, 28fa6 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   28f8e:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28f90:	2b01      	cmp	r3, #1
   28f92:	d002      	beq.n	28f9a <conn_lookup_handle+0x30>
   28f94:	3b07      	subs	r3, #7
   28f96:	2b01      	cmp	r3, #1
   28f98:	d802      	bhi.n	28fa0 <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   28f9a:	8803      	ldrh	r3, [r0, #0]
   28f9c:	42bb      	cmp	r3, r7
   28f9e:	d0ef      	beq.n	28f80 <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   28fa0:	30b8      	adds	r0, #184	; 0xb8
   28fa2:	f7ff ff71 	bl	28e88 <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   28fa6:	3401      	adds	r4, #1
   28fa8:	e7e7      	b.n	28f7a <conn_lookup_handle+0x10>

00028faa <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   28faa:	30b8      	adds	r0, #184	; 0xb8
   28fac:	f7ff bf6c 	b.w	28e88 <atomic_dec.isra.0>

00028fb0 <bt_conn_connected>:
{
   28fb0:	b510      	push	{r4, lr}
   28fb2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28fb4:	f7e7 f8fc 	bl	101b0 <bt_l2cap_connected>
	notify_connected(conn);
   28fb8:	4620      	mov	r0, r4
}
   28fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   28fbe:	f7e6 bb0d 	b.w	f5dc <notify_connected>

00028fc2 <bt_conn_get_security>:
}
   28fc2:	2001      	movs	r0, #1
   28fc4:	4770      	bx	lr

00028fc6 <bt_conn_is_peer_addr_le>:
{
   28fc6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28fc8:	7a03      	ldrb	r3, [r0, #8]
   28fca:	428b      	cmp	r3, r1
{
   28fcc:	4604      	mov	r4, r0
   28fce:	4615      	mov	r5, r2
	if (id != conn->id) {
   28fd0:	d115      	bne.n	28ffe <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   28fd2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28fd6:	2207      	movs	r2, #7
   28fd8:	4628      	mov	r0, r5
   28fda:	f7ff fbc0 	bl	2875e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   28fde:	b180      	cbz	r0, 29002 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28fe0:	78e3      	ldrb	r3, [r4, #3]
   28fe2:	2207      	movs	r2, #7
   28fe4:	b943      	cbnz	r3, 28ff8 <bt_conn_is_peer_addr_le+0x32>
   28fe6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   28fea:	4628      	mov	r0, r5
   28fec:	f7ff fbb7 	bl	2875e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   28ff0:	fab0 f080 	clz	r0, r0
   28ff4:	0940      	lsrs	r0, r0, #5
}
   28ff6:	bd38      	pop	{r3, r4, r5, pc}
   28ff8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   28ffc:	e7f5      	b.n	28fea <bt_conn_is_peer_addr_le+0x24>
		return false;
   28ffe:	2000      	movs	r0, #0
   29000:	e7f9      	b.n	28ff6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   29002:	2001      	movs	r0, #1
   29004:	e7f7      	b.n	28ff6 <bt_conn_is_peer_addr_le+0x30>

00029006 <bt_conn_le_conn_update>:
{
   29006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29008:	4607      	mov	r7, r0
   2900a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2900c:	f242 0013 	movw	r0, #8211	; 0x2013
   29010:	210e      	movs	r1, #14
   29012:	f7e4 f9ad 	bl	d370 <bt_hci_cmd_create>
	if (!buf) {
   29016:	4606      	mov	r6, r0
   29018:	b1d0      	cbz	r0, 29050 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2901a:	210e      	movs	r1, #14
   2901c:	3008      	adds	r0, #8
   2901e:	f000 ff58 	bl	29ed2 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   29022:	220e      	movs	r2, #14
   29024:	4604      	mov	r4, r0
   29026:	2100      	movs	r1, #0
   29028:	f7ff fbcd 	bl	287c6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2902c:	883b      	ldrh	r3, [r7, #0]
   2902e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   29030:	882b      	ldrh	r3, [r5, #0]
   29032:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   29034:	886b      	ldrh	r3, [r5, #2]
   29036:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   29038:	88ab      	ldrh	r3, [r5, #4]
   2903a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2903c:	88eb      	ldrh	r3, [r5, #6]
   2903e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29040:	4631      	mov	r1, r6
   29042:	2200      	movs	r2, #0
}
   29044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29048:	f242 0013 	movw	r0, #8211	; 0x2013
   2904c:	f7e4 b9ca 	b.w	d3e4 <bt_hci_cmd_send_sync>
}
   29050:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029056 <l2cap_connected>:
}
   29056:	4770      	bx	lr

00029058 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   29058:	3010      	adds	r0, #16
   2905a:	f001 bf1b 	b.w	2ae94 <k_work_cancel_delayable>

0002905e <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2905e:	2300      	movs	r3, #0
   29060:	f7fd bd42 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00029064 <bt_l2cap_chan_remove>:
	return list->head;
   29064:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   29066:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29068:	b173      	cbz	r3, 29088 <bt_l2cap_chan_remove+0x24>
   2906a:	3b08      	subs	r3, #8
   2906c:	2500      	movs	r5, #0
	return node->next;
   2906e:	461a      	mov	r2, r3
		if (chan == ch) {
   29070:	4299      	cmp	r1, r3
   29072:	f852 4f08 	ldr.w	r4, [r2, #8]!
   29076:	d10d      	bne.n	29094 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   29078:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2907a:	b935      	cbnz	r5, 2908a <bt_l2cap_chan_remove+0x26>
   2907c:	4291      	cmp	r1, r2
	list->head = node;
   2907e:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   29080:	d100      	bne.n	29084 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   29082:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   29084:	2200      	movs	r2, #0
   29086:	609a      	str	r2, [r3, #8]
}
   29088:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2908a:	4291      	cmp	r1, r2
	parent->next = child;
   2908c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2908e:	bf08      	it	eq
   29090:	6545      	streq	r5, [r0, #84]	; 0x54
}
   29092:	e7f7      	b.n	29084 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29094:	2c00      	cmp	r4, #0
   29096:	d0f7      	beq.n	29088 <bt_l2cap_chan_remove+0x24>
   29098:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2909c:	4615      	mov	r5, r2
   2909e:	e7e6      	b.n	2906e <bt_l2cap_chan_remove+0xa>

000290a0 <bt_l2cap_chan_del>:
{
   290a0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   290a2:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   290a6:	4604      	mov	r4, r0
	if (!chan->conn) {
   290a8:	b123      	cbz	r3, 290b4 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   290aa:	686b      	ldr	r3, [r5, #4]
   290ac:	b103      	cbz	r3, 290b0 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   290ae:	4798      	blx	r3
	chan->conn = NULL;
   290b0:	2300      	movs	r3, #0
   290b2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   290b4:	68e3      	ldr	r3, [r4, #12]
   290b6:	b10b      	cbz	r3, 290bc <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   290b8:	4620      	mov	r0, r4
   290ba:	4798      	blx	r3
	if (ops->released) {
   290bc:	69eb      	ldr	r3, [r5, #28]
   290be:	b11b      	cbz	r3, 290c8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   290c0:	4620      	mov	r0, r4
}
   290c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   290c6:	4718      	bx	r3
}
   290c8:	bd70      	pop	{r4, r5, r6, pc}

000290ca <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   290ca:	3104      	adds	r1, #4
   290cc:	f7e6 be12 	b.w	fcf4 <bt_conn_create_pdu_timeout>

000290d0 <bt_l2cap_send_cb>:
{
   290d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   290d4:	4614      	mov	r4, r2
   290d6:	4605      	mov	r5, r0
   290d8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   290da:	f102 0008 	add.w	r0, r2, #8
   290de:	2104      	movs	r1, #4
   290e0:	461e      	mov	r6, r3
   290e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   290e6:	f000 ff0b 	bl	29f00 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   290ea:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   290ec:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   290ee:	3a04      	subs	r2, #4
   290f0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   290f2:	4643      	mov	r3, r8
   290f4:	4632      	mov	r2, r6
   290f6:	4621      	mov	r1, r4
   290f8:	4628      	mov	r0, r5
}
   290fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   290fe:	f7e6 bbff 	b.w	f900 <bt_conn_send_cb>

00029102 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   29102:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29104:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   29106:	2202      	movs	r2, #2
   29108:	2001      	movs	r0, #1
   2910a:	f7e6 ffbb 	bl	10084 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2910e:	4604      	mov	r4, r0
   29110:	b198      	cbz	r0, 2913a <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   29112:	2102      	movs	r1, #2
   29114:	3008      	adds	r0, #8
   29116:	f000 fedc 	bl	29ed2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2911a:	2300      	movs	r3, #0
   2911c:	7003      	strb	r3, [r0, #0]
   2911e:	7043      	strb	r3, [r0, #1]
   29120:	4622      	mov	r2, r4
   29122:	9300      	str	r3, [sp, #0]
   29124:	2105      	movs	r1, #5
   29126:	4628      	mov	r0, r5
   29128:	f7ff ffd2 	bl	290d0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2912c:	b128      	cbz	r0, 2913a <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2912e:	4620      	mov	r0, r4
}
   29130:	b003      	add	sp, #12
   29132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   29136:	f7f6 b8e3 	b.w	1f300 <net_buf_unref>
}
   2913a:	b003      	add	sp, #12
   2913c:	bd30      	pop	{r4, r5, pc}

0002913e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2913e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29140:	b138      	cbz	r0, 29152 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29142:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   29146:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29148:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2914c:	d001      	beq.n	29152 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   2914e:	6880      	ldr	r0, [r0, #8]
   29150:	e7f6      	b.n	29140 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   29152:	4770      	bx	lr

00029154 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   29154:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29156:	b138      	cbz	r0, 29168 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29158:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   2915c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2915e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29162:	d001      	beq.n	29168 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   29164:	6880      	ldr	r0, [r0, #8]
   29166:	e7f6      	b.n	29156 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   29168:	4770      	bx	lr

0002916a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2916a:	4770      	bx	lr

0002916c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2916c:	4603      	mov	r3, r0
	return list->head;
   2916e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   29170:	b128      	cbz	r0, 2917e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29172:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29174:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29176:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29178:	4288      	cmp	r0, r1
	list->tail = node;
   2917a:	bf08      	it	eq
   2917c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2917e:	4770      	bx	lr

00029180 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   29180:	4603      	mov	r3, r0
	size_t bytes = 0;
   29182:	2000      	movs	r0, #0

	while (buf) {
   29184:	b903      	cbnz	r3, 29188 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   29186:	4770      	bx	lr
		bytes += buf->len;
   29188:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2918a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2918c:	4410      	add	r0, r2
		buf = buf->frags;
   2918e:	e7f9      	b.n	29184 <net_buf_frags_len+0x4>

00029190 <att_sent>:
	if (chan->ops->sent) {
   29190:	684b      	ldr	r3, [r1, #4]
   29192:	695b      	ldr	r3, [r3, #20]
{
   29194:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   29196:	b103      	cbz	r3, 2919a <att_sent+0xa>
		chan->ops->sent(chan);
   29198:	4718      	bx	r3
}
   2919a:	4770      	bx	lr

0002919c <attr_read_type_cb>:
{
   2919c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2919e:	68d4      	ldr	r4, [r2, #12]
   291a0:	7823      	ldrb	r3, [r4, #0]
   291a2:	3102      	adds	r1, #2
   291a4:	b913      	cbnz	r3, 291ac <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   291a6:	7021      	strb	r1, [r4, #0]
	return true;
   291a8:	2001      	movs	r0, #1
   291aa:	e006      	b.n	291ba <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   291ac:	428b      	cmp	r3, r1
   291ae:	d0fb      	beq.n	291a8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   291b0:	8983      	ldrh	r3, [r0, #12]
   291b2:	3b02      	subs	r3, #2
   291b4:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   291b6:	2000      	movs	r0, #0
   291b8:	6110      	str	r0, [r2, #16]
}
   291ba:	bd10      	pop	{r4, pc}

000291bc <att_prepare_write_req>:
}
   291bc:	2006      	movs	r0, #6
   291be:	4770      	bx	lr

000291c0 <att_op_get_type>:
	switch (op) {
   291c0:	281e      	cmp	r0, #30
   291c2:	d816      	bhi.n	291f2 <att_op_get_type+0x32>
   291c4:	b308      	cbz	r0, 2920a <att_op_get_type+0x4a>
   291c6:	1e43      	subs	r3, r0, #1
   291c8:	2b1d      	cmp	r3, #29
   291ca:	d81e      	bhi.n	2920a <att_op_get_type+0x4a>
   291cc:	e8df f003 	tbb	[pc, r3]
   291d0:	23172317 	.word	0x23172317
   291d4:	23172317 	.word	0x23172317
   291d8:	23172317 	.word	0x23172317
   291dc:	23172317 	.word	0x23172317
   291e0:	1d172317 	.word	0x1d172317
   291e4:	2317231d 	.word	0x2317231d
   291e8:	1d191d17 	.word	0x1d191d17
   291ec:	0f1b      	.short	0x0f1b
   291ee:	2004      	movs	r0, #4
   291f0:	4770      	bx	lr
   291f2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   291f6:	2b52      	cmp	r3, #82	; 0x52
   291f8:	d107      	bne.n	2920a <att_op_get_type+0x4a>
		return ATT_COMMAND;
   291fa:	2000      	movs	r0, #0
}
   291fc:	4770      	bx	lr
		return ATT_RESPONSE;
   291fe:	2002      	movs	r0, #2
   29200:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29202:	2003      	movs	r0, #3
   29204:	4770      	bx	lr
		return ATT_INDICATION;
   29206:	2005      	movs	r0, #5
   29208:	4770      	bx	lr
		return ATT_COMMAND;
   2920a:	f010 0f40 	tst.w	r0, #64	; 0x40
   2920e:	bf0c      	ite	eq
   29210:	2006      	moveq	r0, #6
   29212:	2000      	movne	r0, #0
   29214:	4770      	bx	lr
		return ATT_REQUEST;
   29216:	2001      	movs	r0, #1
   29218:	4770      	bx	lr

0002921a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2921a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2921c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29220:	2300      	movs	r3, #0
   29222:	9300      	str	r3, [sp, #0]
   29224:	461a      	mov	r2, r3
   29226:	f7e8 fbe1 	bl	119ec <bt_gatt_foreach_attr_type>
				  user_data);
}
   2922a:	b005      	add	sp, #20
   2922c:	f85d fb04 	ldr.w	pc, [sp], #4

00029230 <find_info_cb>:
{
   29230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29232:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29234:	6817      	ldr	r7, [r2, #0]
{
   29236:	4605      	mov	r5, r0
   29238:	460e      	mov	r6, r1
   2923a:	4614      	mov	r4, r2
	if (!data->rsp) {
   2923c:	b963      	cbnz	r3, 29258 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2923e:	6850      	ldr	r0, [r2, #4]
   29240:	2101      	movs	r1, #1
   29242:	3008      	adds	r0, #8
   29244:	f000 fe45 	bl	29ed2 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29248:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2924a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2924c:	781b      	ldrb	r3, [r3, #0]
   2924e:	2b00      	cmp	r3, #0
   29250:	bf0c      	ite	eq
   29252:	2301      	moveq	r3, #1
   29254:	2302      	movne	r3, #2
   29256:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29258:	68a3      	ldr	r3, [r4, #8]
   2925a:	781b      	ldrb	r3, [r3, #0]
   2925c:	2b01      	cmp	r3, #1
   2925e:	d003      	beq.n	29268 <find_info_cb+0x38>
   29260:	2b02      	cmp	r3, #2
   29262:	d019      	beq.n	29298 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   29264:	2000      	movs	r0, #0
   29266:	e016      	b.n	29296 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29268:	682b      	ldr	r3, [r5, #0]
   2926a:	781b      	ldrb	r3, [r3, #0]
   2926c:	2b00      	cmp	r3, #0
   2926e:	d1f9      	bne.n	29264 <find_info_cb+0x34>
   29270:	6860      	ldr	r0, [r4, #4]
   29272:	2104      	movs	r1, #4
   29274:	3008      	adds	r0, #8
   29276:	f000 fe2c 	bl	29ed2 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2927a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2927c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2927e:	885b      	ldrh	r3, [r3, #2]
   29280:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29282:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   29284:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   29286:	899b      	ldrh	r3, [r3, #12]
   29288:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2928c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2928e:	2804      	cmp	r0, #4
   29290:	bf94      	ite	ls
   29292:	2000      	movls	r0, #0
   29294:	2001      	movhi	r0, #1
}
   29296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   29298:	682b      	ldr	r3, [r5, #0]
   2929a:	781b      	ldrb	r3, [r3, #0]
   2929c:	2b02      	cmp	r3, #2
   2929e:	d1e1      	bne.n	29264 <find_info_cb+0x34>
   292a0:	6860      	ldr	r0, [r4, #4]
   292a2:	2112      	movs	r1, #18
   292a4:	3008      	adds	r0, #8
   292a6:	f000 fe14 	bl	29ed2 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   292aa:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   292ac:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   292ae:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   292b0:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   292b4:	3101      	adds	r1, #1
   292b6:	f7ff fa7b 	bl	287b0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   292ba:	6863      	ldr	r3, [r4, #4]
   292bc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   292c0:	899b      	ldrh	r3, [r3, #12]
   292c2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   292c4:	2812      	cmp	r0, #18
   292c6:	e7e3      	b.n	29290 <find_info_cb+0x60>

000292c8 <att_chan_mtu_updated>:
{
   292c8:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   292ca:	6806      	ldr	r6, [r0, #0]
	return list->head;
   292cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   292ce:	b1e3      	cbz	r3, 2930a <att_chan_mtu_updated+0x42>
	return node->next;
   292d0:	681a      	ldr	r2, [r3, #0]
   292d2:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   292d6:	b10a      	cbz	r2, 292dc <att_chan_mtu_updated+0x14>
   292d8:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   292dc:	2300      	movs	r3, #0
   292de:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   292e0:	42a8      	cmp	r0, r5
   292e2:	d009      	beq.n	292f8 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   292e4:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   292e8:	42a1      	cmp	r1, r4
   292ea:	bf38      	it	cc
   292ec:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   292ee:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   292f2:	42a3      	cmp	r3, r4
   292f4:	bf38      	it	cc
   292f6:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   292f8:	b142      	cbz	r2, 2930c <att_chan_mtu_updated+0x44>
   292fa:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   292fe:	b10c      	cbz	r4, 29304 <att_chan_mtu_updated+0x3c>
   29300:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   29304:	4615      	mov	r5, r2
   29306:	4622      	mov	r2, r4
   29308:	e7ea      	b.n	292e0 <att_chan_mtu_updated+0x18>
   2930a:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2930c:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   29310:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29314:	428c      	cmp	r4, r1
   29316:	d801      	bhi.n	2931c <att_chan_mtu_updated+0x54>
   29318:	429a      	cmp	r2, r3
   2931a:	d909      	bls.n	29330 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2931c:	429a      	cmp	r2, r3
   2931e:	bf38      	it	cc
   29320:	461a      	movcc	r2, r3
   29322:	42a1      	cmp	r1, r4
   29324:	6830      	ldr	r0, [r6, #0]
   29326:	bf38      	it	cc
   29328:	4621      	movcc	r1, r4
}
   2932a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2932c:	f7e8 beb6 	b.w	1209c <bt_gatt_att_max_mtu_changed>
}
   29330:	bc70      	pop	{r4, r5, r6}
   29332:	4770      	bx	lr

00029334 <attr_read_group_cb>:
	if (!data->rsp->len) {
   29334:	68d0      	ldr	r0, [r2, #12]
   29336:	7803      	ldrb	r3, [r0, #0]
   29338:	3104      	adds	r1, #4
   2933a:	b913      	cbnz	r3, 29342 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2933c:	7001      	strb	r1, [r0, #0]
	return true;
   2933e:	2001      	movs	r0, #1
}
   29340:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   29342:	428b      	cmp	r3, r1
   29344:	d0fb      	beq.n	2933e <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   29346:	6891      	ldr	r1, [r2, #8]
   29348:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2934a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2934c:	3b04      	subs	r3, #4
   2934e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   29350:	6110      	str	r0, [r2, #16]
		return false;
   29352:	4770      	bx	lr

00029354 <chan_req_sent>:
	if (chan->req) {
   29354:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   29358:	b133      	cbz	r3, 29368 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2935a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2935e:	2300      	movs	r3, #0
   29360:	f500 7088 	add.w	r0, r0, #272	; 0x110
   29364:	f7fb bd1a 	b.w	24d9c <k_work_reschedule>
}
   29368:	4770      	bx	lr

0002936a <write_cb>:
{
   2936a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2936c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2936e:	4601      	mov	r1, r0
{
   29370:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29372:	222a      	movs	r2, #42	; 0x2a
   29374:	6820      	ldr	r0, [r4, #0]
   29376:	f000 fcc9 	bl	29d0c <bt_gatt_check_perm>
   2937a:	4605      	mov	r5, r0
   2937c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2937e:	bb20      	cbnz	r0, 293ca <write_cb+0x60>
	if (!data->req) {
   29380:	7a23      	ldrb	r3, [r4, #8]
   29382:	b1ab      	cbz	r3, 293b0 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   29384:	2b18      	cmp	r3, #24
   29386:	bf14      	ite	ne
   29388:	2300      	movne	r3, #0
   2938a:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2938c:	9301      	str	r3, [sp, #4]
   2938e:	8a63      	ldrh	r3, [r4, #18]
   29390:	9300      	str	r3, [sp, #0]
   29392:	68b7      	ldr	r7, [r6, #8]
   29394:	8a23      	ldrh	r3, [r4, #16]
   29396:	68e2      	ldr	r2, [r4, #12]
   29398:	6820      	ldr	r0, [r4, #0]
   2939a:	4631      	mov	r1, r6
   2939c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2939e:	1e03      	subs	r3, r0, #0
   293a0:	db08      	blt.n	293b4 <write_cb+0x4a>
   293a2:	8a22      	ldrh	r2, [r4, #16]
   293a4:	4293      	cmp	r3, r2
   293a6:	d10e      	bne.n	293c6 <write_cb+0x5c>
	data->err = 0U;
   293a8:	2300      	movs	r3, #0
   293aa:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   293ac:	2501      	movs	r5, #1
   293ae:	e007      	b.n	293c0 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   293b0:	2302      	movs	r3, #2
   293b2:	e7eb      	b.n	2938c <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   293b4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   293b8:	d305      	bcc.n	293c6 <write_cb+0x5c>
		return -err;
   293ba:	425b      	negs	r3, r3
   293bc:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   293be:	7523      	strb	r3, [r4, #20]
}
   293c0:	4628      	mov	r0, r5
   293c2:	b003      	add	sp, #12
   293c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   293c6:	230e      	movs	r3, #14
   293c8:	e7f9      	b.n	293be <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   293ca:	2500      	movs	r5, #0
   293cc:	e7f8      	b.n	293c0 <write_cb+0x56>

000293ce <z_log_msg2_static_create.constprop.0>:
   293ce:	2300      	movs	r3, #0
   293d0:	f7fd bb8a 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

000293d4 <att_chan_read>:
{
   293d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293d8:	4680      	mov	r8, r0
   293da:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   293dc:	4610      	mov	r0, r2
{
   293de:	4699      	mov	r9, r3
   293e0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   293e2:	f7ff fecd 	bl	29180 <net_buf_frags_len>
   293e6:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   293ea:	4283      	cmp	r3, r0
{
   293ec:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   293ee:	d97a      	bls.n	294e6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   293f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   293f4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   293f6:	4630      	mov	r0, r6
   293f8:	f000 fd3d 	bl	29e76 <net_buf_frag_last>
	size_t len, total = 0;
   293fc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   29400:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29402:	4630      	mov	r0, r6
   29404:	f7ff febc 	bl	29180 <net_buf_frags_len>
   29408:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2940c:	f105 0708 	add.w	r7, r5, #8
   29410:	1a24      	subs	r4, r4, r0
   29412:	4638      	mov	r0, r7
   29414:	f000 fda0 	bl	29f58 <net_buf_simple_tailroom>
   29418:	4284      	cmp	r4, r0
   2941a:	d211      	bcs.n	29440 <att_chan_read+0x6c>
   2941c:	4630      	mov	r0, r6
   2941e:	f7ff feaf 	bl	29180 <net_buf_frags_len>
   29422:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   29426:	1a24      	subs	r4, r4, r0
		if (!len) {
   29428:	bb34      	cbnz	r4, 29478 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2942a:	79b0      	ldrb	r0, [r6, #6]
   2942c:	f7f5 fea4 	bl	1f178 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   29430:	2200      	movs	r2, #0
   29432:	2300      	movs	r3, #0
   29434:	f000 fceb 	bl	29e0e <net_buf_alloc_fixed>
			if (!frag) {
   29438:	4605      	mov	r5, r0
   2943a:	b930      	cbnz	r0, 2944a <att_chan_read+0x76>
	return total;
   2943c:	4657      	mov	r7, sl
   2943e:	e02c      	b.n	2949a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   29440:	4638      	mov	r0, r7
   29442:	f000 fd89 	bl	29f58 <net_buf_simple_tailroom>
   29446:	4604      	mov	r4, r0
   29448:	e7ee      	b.n	29428 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2944a:	4601      	mov	r1, r0
   2944c:	4630      	mov	r0, r6
   2944e:	f000 fd23 	bl	29e98 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29452:	4630      	mov	r0, r6
   29454:	f7ff fe94 	bl	29180 <net_buf_frags_len>
   29458:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2945c:	f105 0708 	add.w	r7, r5, #8
   29460:	1a24      	subs	r4, r4, r0
   29462:	4638      	mov	r0, r7
   29464:	f000 fd78 	bl	29f58 <net_buf_simple_tailroom>
   29468:	4284      	cmp	r4, r0
   2946a:	d21a      	bcs.n	294a2 <att_chan_read+0xce>
   2946c:	4630      	mov	r0, r6
   2946e:	f7ff fe87 	bl	29180 <net_buf_frags_len>
   29472:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   29476:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29478:	68a9      	ldr	r1, [r5, #8]
   2947a:	89aa      	ldrh	r2, [r5, #12]
   2947c:	f8db 7004 	ldr.w	r7, [fp, #4]
   29480:	9803      	ldr	r0, [sp, #12]
   29482:	f8cd 9000 	str.w	r9, [sp]
   29486:	440a      	add	r2, r1
   29488:	b2a3      	uxth	r3, r4
   2948a:	4659      	mov	r1, fp
   2948c:	47b8      	blx	r7
		if (read < 0) {
   2948e:	1e07      	subs	r7, r0, #0
   29490:	da0c      	bge.n	294ac <att_chan_read+0xd8>
				return total;
   29492:	f1ba 0f00 	cmp.w	sl, #0
   29496:	bf18      	it	ne
   29498:	4657      	movne	r7, sl
}
   2949a:	4638      	mov	r0, r7
   2949c:	b005      	add	sp, #20
   2949e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294a2:	4638      	mov	r0, r7
   294a4:	f000 fd58 	bl	29f58 <net_buf_simple_tailroom>
   294a8:	4604      	mov	r4, r0
   294aa:	e7e5      	b.n	29478 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   294ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   294ae:	b993      	cbnz	r3, 294d6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   294b0:	4639      	mov	r1, r7
   294b2:	f105 0008 	add.w	r0, r5, #8
   294b6:	f000 fd0c 	bl	29ed2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   294ba:	4630      	mov	r0, r6
   294bc:	f7ff fe60 	bl	29180 <net_buf_frags_len>
   294c0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   294c4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   294c6:	4283      	cmp	r3, r0
		total += read;
   294c8:	44ba      	add	sl, r7
		offset += read;
   294ca:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   294ce:	d9b5      	bls.n	2943c <att_chan_read+0x68>
   294d0:	42a7      	cmp	r7, r4
   294d2:	d096      	beq.n	29402 <att_chan_read+0x2e>
   294d4:	e7b2      	b.n	2943c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   294d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   294d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   294da:	4639      	mov	r1, r7
   294dc:	4628      	mov	r0, r5
   294de:	4798      	blx	r3
   294e0:	2800      	cmp	r0, #0
   294e2:	d1e5      	bne.n	294b0 <att_chan_read+0xdc>
   294e4:	e7aa      	b.n	2943c <att_chan_read+0x68>
		return 0;
   294e6:	2700      	movs	r7, #0
   294e8:	e7d7      	b.n	2949a <att_chan_read+0xc6>

000294ea <chan_req_send>:
{
   294ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   294ec:	688f      	ldr	r7, [r1, #8]
{
   294ee:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   294f0:	4638      	mov	r0, r7
   294f2:	f7ff fe45 	bl	29180 <net_buf_frags_len>
   294f6:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   294fa:	4283      	cmp	r3, r0
{
   294fc:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   294fe:	d30d      	bcc.n	2951c <chan_req_send+0x32>
	req->buf = NULL;
   29500:	2600      	movs	r6, #0
	chan->req = req;
   29502:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   29506:	4632      	mov	r2, r6
	req->buf = NULL;
   29508:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2950a:	4620      	mov	r0, r4
   2950c:	4639      	mov	r1, r7
   2950e:	f7e7 fa1d 	bl	1094c <chan_send>
	if (err) {
   29512:	b110      	cbz	r0, 2951a <chan_req_send+0x30>
		req->buf = buf;
   29514:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   29516:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2951c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   29520:	e7fb      	b.n	2951a <chan_req_send+0x30>

00029522 <process_queue>:
{
   29522:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   29524:	2200      	movs	r2, #0
{
   29526:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   29528:	2300      	movs	r3, #0
   2952a:	4608      	mov	r0, r1
{
   2952c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2952e:	f000 fc73 	bl	29e18 <net_buf_get>
	if (buf) {
   29532:	4605      	mov	r5, r0
   29534:	b160      	cbz	r0, 29550 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   29536:	4601      	mov	r1, r0
   29538:	2200      	movs	r2, #0
   2953a:	4620      	mov	r0, r4
   2953c:	f7e7 fa06 	bl	1094c <chan_send>
		if (err) {
   29540:	4604      	mov	r4, r0
   29542:	b118      	cbz	r0, 2954c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   29544:	4629      	mov	r1, r5
   29546:	4630      	mov	r0, r6
   29548:	f001 fbac 	bl	2aca4 <k_queue_prepend>
}
   2954c:	4620      	mov	r0, r4
   2954e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   29550:	f06f 0401 	mvn.w	r4, #1
   29554:	e7fa      	b.n	2954c <process_queue+0x2a>

00029556 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29556:	b510      	push	{r4, lr}
	return list->head;
   29558:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2955a:	2200      	movs	r2, #0
   2955c:	b153      	cbz	r3, 29574 <sys_slist_find_and_remove.isra.0+0x1e>
   2955e:	428b      	cmp	r3, r1
   29560:	d10e      	bne.n	29580 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   29562:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   29564:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   29566:	b932      	cbnz	r2, 29576 <sys_slist_find_and_remove.isra.0+0x20>
   29568:	42a1      	cmp	r1, r4
	list->head = node;
   2956a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2956c:	d100      	bne.n	29570 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2956e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   29570:	2300      	movs	r3, #0
   29572:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29574:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   29576:	42a1      	cmp	r1, r4
	parent->next = child;
   29578:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2957a:	bf08      	it	eq
   2957c:	6042      	streq	r2, [r0, #4]
}
   2957e:	e7f7      	b.n	29570 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   29580:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29582:	681b      	ldr	r3, [r3, #0]
   29584:	e7ea      	b.n	2955c <sys_slist_find_and_remove.isra.0+0x6>

00029586 <att_exec_write_req>:
   29586:	2006      	movs	r0, #6
   29588:	4770      	bx	lr

0002958a <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2958a:	30f0      	adds	r0, #240	; 0xf0
   2958c:	f3bf 8f5b 	dmb	ish
   29590:	e850 3f00 	ldrex	r3, [r0]
   29594:	f023 0301 	bic.w	r3, r3, #1
   29598:	e840 3200 	strex	r2, r3, [r0]
   2959c:	2a00      	cmp	r2, #0
   2959e:	d1f7      	bne.n	29590 <chan_rsp_sent+0x6>
   295a0:	f3bf 8f5b 	dmb	ish
}
   295a4:	4770      	bx	lr

000295a6 <chan_cfm_sent>:
   295a6:	30f0      	adds	r0, #240	; 0xf0
   295a8:	f3bf 8f5b 	dmb	ish
   295ac:	e850 3f00 	ldrex	r3, [r0]
   295b0:	f023 0302 	bic.w	r3, r3, #2
   295b4:	e840 3200 	strex	r2, r3, [r0]
   295b8:	2a00      	cmp	r2, #0
   295ba:	d1f7      	bne.n	295ac <chan_cfm_sent+0x6>
   295bc:	f3bf 8f5b 	dmb	ish
}
   295c0:	4770      	bx	lr

000295c2 <read_cb>:
{
   295c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   295c6:	f8d2 8000 	ldr.w	r8, [r2]
{
   295ca:	4606      	mov	r6, r0
	data->err = 0x00;
   295cc:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   295ce:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   295d2:	7317      	strb	r7, [r2, #12]
{
   295d4:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   295d6:	4631      	mov	r1, r6
   295d8:	2215      	movs	r2, #21
   295da:	f000 fb97 	bl	29d0c <bt_gatt_check_perm>
   295de:	4604      	mov	r4, r0
   295e0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   295e2:	b9a0      	cbnz	r0, 2960e <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   295e4:	e9cd 0000 	strd	r0, r0, [sp]
   295e8:	88ab      	ldrh	r3, [r5, #4]
   295ea:	68aa      	ldr	r2, [r5, #8]
   295ec:	4631      	mov	r1, r6
   295ee:	4640      	mov	r0, r8
   295f0:	f7ff fef0 	bl	293d4 <att_chan_read>
	if (ret < 0) {
   295f4:	1e03      	subs	r3, r0, #0
   295f6:	da0c      	bge.n	29612 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   295f8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   295fc:	bf26      	itte	cs
   295fe:	425b      	negcs	r3, r3
   29600:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   29602:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   29604:	732b      	strb	r3, [r5, #12]
}
   29606:	4620      	mov	r0, r4
   29608:	b002      	add	sp, #8
   2960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2960e:	463c      	mov	r4, r7
   29610:	e7f9      	b.n	29606 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   29612:	2401      	movs	r4, #1
   29614:	e7f7      	b.n	29606 <read_cb+0x44>

00029616 <bt_att_sent>:
{
   29616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   29618:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2961c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   29620:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   29622:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   29626:	b10b      	cbz	r3, 2962c <bt_att_sent+0x16>
		chan->sent(chan);
   29628:	4638      	mov	r0, r7
   2962a:	4798      	blx	r3
   2962c:	f3bf 8f5b 	dmb	ish
   29630:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   29634:	e853 2f00 	ldrex	r2, [r3]
   29638:	f022 0210 	bic.w	r2, r2, #16
   2963c:	e843 2100 	strex	r1, r2, [r3]
   29640:	2900      	cmp	r1, #0
   29642:	d1f7      	bne.n	29634 <bt_att_sent+0x1e>
   29644:	f3bf 8f5b 	dmb	ish
	if (!att) {
   29648:	b30c      	cbz	r4, 2968e <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2964a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2964e:	b98b      	cbnz	r3, 29674 <bt_att_sent+0x5e>
   29650:	6863      	ldr	r3, [r4, #4]
   29652:	b17b      	cbz	r3, 29674 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29654:	1d20      	adds	r0, r4, #4
   29656:	f7ff fd89 	bl	2916c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2965a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2965c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2965e:	4638      	mov	r0, r7
   29660:	f7ff ff43 	bl	294ea <chan_req_send>
   29664:	2800      	cmp	r0, #0
   29666:	da12      	bge.n	2968e <bt_att_sent+0x78>
	parent->next = child;
   29668:	6863      	ldr	r3, [r4, #4]
   2966a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2966c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2966e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   29670:	b903      	cbnz	r3, 29674 <bt_att_sent+0x5e>
	list->tail = node;
   29672:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   29674:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   29678:	4638      	mov	r0, r7
   2967a:	f7ff ff52 	bl	29522 <process_queue>
	if (!err) {
   2967e:	b130      	cbz	r0, 2968e <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   29680:	f104 010c 	add.w	r1, r4, #12
   29684:	4638      	mov	r0, r7
}
   29686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2968a:	f7ff bf4a 	b.w	29522 <process_queue>
}
   2968e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029690 <att_req_send_process>:
{
   29690:	b570      	push	{r4, r5, r6, lr}
   29692:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   29694:	3004      	adds	r0, #4
   29696:	f7ff fd69 	bl	2916c <sys_slist_get>
	if (!node) {
   2969a:	4605      	mov	r5, r0
   2969c:	b1b8      	cbz	r0, 296ce <att_req_send_process+0x3e>
	return list->head;
   2969e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   296a0:	b14b      	cbz	r3, 296b6 <att_req_send_process+0x26>
	return node->next;
   296a2:	681e      	ldr	r6, [r3, #0]
   296a4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   296a8:	b10e      	cbz	r6, 296ae <att_req_send_process+0x1e>
   296aa:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   296ae:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   296b2:	b13b      	cbz	r3, 296c4 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   296b4:	b966      	cbnz	r6, 296d0 <att_req_send_process+0x40>
	parent->next = child;
   296b6:	6863      	ldr	r3, [r4, #4]
   296b8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   296ba:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   296bc:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   296be:	b933      	cbnz	r3, 296ce <att_req_send_process+0x3e>
	list->tail = node;
   296c0:	60a5      	str	r5, [r4, #8]
}
   296c2:	e004      	b.n	296ce <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   296c4:	4629      	mov	r1, r5
   296c6:	f7ff ff10 	bl	294ea <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   296ca:	2800      	cmp	r0, #0
   296cc:	dbf2      	blt.n	296b4 <att_req_send_process+0x24>
}
   296ce:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   296d0:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   296d4:	b10b      	cbz	r3, 296da <att_req_send_process+0x4a>
   296d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   296da:	4630      	mov	r0, r6
   296dc:	461e      	mov	r6, r3
   296de:	e7e6      	b.n	296ae <att_req_send_process+0x1e>

000296e0 <bt_att_status>:
{
   296e0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   296e2:	f3bf 8f5b 	dmb	ish
   296e6:	680b      	ldr	r3, [r1, #0]
   296e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   296ec:	07db      	lsls	r3, r3, #31
{
   296ee:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   296f0:	d519      	bpl.n	29726 <bt_att_status+0x46>
	if (!chan->att) {
   296f2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   296f6:	b1b0      	cbz	r0, 29726 <bt_att_status+0x46>
	if (chan->req) {
   296f8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   296fc:	b99b      	cbnz	r3, 29726 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   296fe:	3004      	adds	r0, #4
   29700:	f7ff fd34 	bl	2916c <sys_slist_get>
	if (!node) {
   29704:	4604      	mov	r4, r0
   29706:	b170      	cbz	r0, 29726 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   29708:	4601      	mov	r1, r0
   2970a:	f1a5 0008 	sub.w	r0, r5, #8
   2970e:	f7ff feec 	bl	294ea <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29712:	2800      	cmp	r0, #0
   29714:	da07      	bge.n	29726 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   29716:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   2971a:	685a      	ldr	r2, [r3, #4]
   2971c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2971e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   29720:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29722:	b902      	cbnz	r2, 29726 <bt_att_status+0x46>
	list->tail = node;
   29724:	609c      	str	r4, [r3, #8]
}
   29726:	bd38      	pop	{r3, r4, r5, pc}

00029728 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2972c:	4688      	mov	r8, r1
   2972e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29730:	2101      	movs	r1, #1
   29732:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29734:	4605      	mov	r5, r0
   29736:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29738:	f7e7 fa16 	bl	10b68 <bt_att_chan_create_pdu>
	if (!buf) {
   2973c:	4604      	mov	r4, r0
   2973e:	b170      	cbz	r0, 2975e <send_err_rsp.part.0+0x36>
   29740:	2104      	movs	r1, #4
   29742:	3008      	adds	r0, #8
   29744:	f000 fbc5 	bl	29ed2 <net_buf_simple_add>
	rsp->request = req;
   29748:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2974c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2974e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   29752:	4621      	mov	r1, r4
   29754:	4628      	mov	r0, r5
}
   29756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2975a:	f7e7 b96b 	b.w	10a34 <bt_att_chan_send_rsp.constprop.0>
}
   2975e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029762 <att_write_req>:
{
   29762:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29764:	460c      	mov	r4, r1
   29766:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   29768:	f101 0008 	add.w	r0, r1, #8
   2976c:	f000 fbe8 	bl	29f40 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   29770:	89a2      	ldrh	r2, [r4, #12]
   29772:	9201      	str	r2, [sp, #4]
   29774:	68a2      	ldr	r2, [r4, #8]
   29776:	9200      	str	r2, [sp, #0]
   29778:	4603      	mov	r3, r0
   2977a:	2213      	movs	r2, #19
   2977c:	2112      	movs	r1, #18
   2977e:	4628      	mov	r0, r5
   29780:	f7e7 fb38 	bl	10df4 <att_write_rsp.constprop.0>
}
   29784:	b003      	add	sp, #12
   29786:	bd30      	pop	{r4, r5, pc}

00029788 <att_write_cmd>:
{
   29788:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2978a:	460c      	mov	r4, r1
   2978c:	4605      	mov	r5, r0
   2978e:	f101 0008 	add.w	r0, r1, #8
   29792:	f000 fbd5 	bl	29f40 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   29796:	89a2      	ldrh	r2, [r4, #12]
   29798:	9201      	str	r2, [sp, #4]
   2979a:	68a2      	ldr	r2, [r4, #8]
   2979c:	9200      	str	r2, [sp, #0]
   2979e:	2200      	movs	r2, #0
   297a0:	4603      	mov	r3, r0
   297a2:	4611      	mov	r1, r2
   297a4:	4628      	mov	r0, r5
   297a6:	f7e7 fb25 	bl	10df4 <att_write_rsp.constprop.0>
}
   297aa:	b003      	add	sp, #12
   297ac:	bd30      	pop	{r4, r5, pc}

000297ae <att_read_blob_req>:
{
   297ae:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   297b0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   297b2:	8813      	ldrh	r3, [r2, #0]
   297b4:	8852      	ldrh	r2, [r2, #2]
   297b6:	9200      	str	r2, [sp, #0]
   297b8:	210c      	movs	r1, #12
   297ba:	220d      	movs	r2, #13
   297bc:	f7e7 fc90 	bl	110e0 <att_read_rsp>
}
   297c0:	b003      	add	sp, #12
   297c2:	f85d fb04 	ldr.w	pc, [sp], #4

000297c6 <att_read_req>:
{
   297c6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   297c8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   297ca:	2200      	movs	r2, #0
   297cc:	881b      	ldrh	r3, [r3, #0]
   297ce:	9200      	str	r2, [sp, #0]
   297d0:	210a      	movs	r1, #10
   297d2:	220b      	movs	r2, #11
   297d4:	f7e7 fc84 	bl	110e0 <att_read_rsp>
}
   297d8:	b003      	add	sp, #12
   297da:	f85d fb04 	ldr.w	pc, [sp], #4

000297de <att_mtu_req>:
{
   297de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   297e0:	6803      	ldr	r3, [r0, #0]
{
   297e2:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   297e4:	6818      	ldr	r0, [r3, #0]
   297e6:	f3bf 8f5b 	dmb	ish
   297ea:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   297ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   297f2:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   297f6:	071b      	lsls	r3, r3, #28
   297f8:	d41d      	bmi.n	29836 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   297fa:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   297fc:	881b      	ldrh	r3, [r3, #0]
   297fe:	2b16      	cmp	r3, #22
   29800:	d91b      	bls.n	2983a <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29802:	2202      	movs	r2, #2
   29804:	2103      	movs	r1, #3
   29806:	f7e7 fb57 	bl	10eb8 <bt_att_create_pdu>
	if (!pdu) {
   2980a:	4606      	mov	r6, r0
   2980c:	b1b8      	cbz	r0, 2983e <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   2980e:	2102      	movs	r1, #2
   29810:	3008      	adds	r0, #8
   29812:	f000 fb5e 	bl	29ed2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29816:	2717      	movs	r7, #23
   29818:	7007      	strb	r7, [r0, #0]
   2981a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2981c:	4631      	mov	r1, r6
   2981e:	4620      	mov	r0, r4
   29820:	f7e7 f908 	bl	10a34 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   29824:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29826:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2982a:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2982e:	f7ff fd4b 	bl	292c8 <att_chan_mtu_updated>
	return 0;
   29832:	4628      	mov	r0, r5
}
   29834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   29836:	2006      	movs	r0, #6
   29838:	e7fc      	b.n	29834 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   2983a:	2004      	movs	r0, #4
   2983c:	e7fa      	b.n	29834 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   2983e:	200e      	movs	r0, #14
   29840:	e7f8      	b.n	29834 <att_mtu_req+0x56>

00029842 <bt_att_init>:
	bt_gatt_init();
   29842:	f7e8 b84d 	b.w	118e0 <bt_gatt_init>

00029846 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29846:	898a      	ldrh	r2, [r1, #12]
   29848:	6889      	ldr	r1, [r1, #8]
   2984a:	2300      	movs	r3, #0
   2984c:	f7e7 bdc6 	b.w	113dc <att_handle_rsp>

00029850 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   29850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29854:	4607      	mov	r7, r0
   29856:	460d      	mov	r5, r1
   29858:	4616      	mov	r6, r2
   2985a:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2985c:	f7e6 ff58 	bl	10710 <att_get>
	if (!att) {
   29860:	4604      	mov	r4, r0
   29862:	b938      	cbnz	r0, 29874 <bt_att_send+0x24>
		net_buf_unref(buf);
   29864:	4628      	mov	r0, r5
   29866:	f7f5 fd4b 	bl	1f300 <net_buf_unref>
		return -ENOTCONN;
   2986a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2986e:	b002      	add	sp, #8
   29870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   29874:	b146      	cbz	r6, 29888 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   29876:	f8cd 8000 	str.w	r8, [sp]
   2987a:	4633      	mov	r3, r6
   2987c:	462a      	mov	r2, r5
   2987e:	2104      	movs	r1, #4
   29880:	4638      	mov	r0, r7
   29882:	f7ff fc25 	bl	290d0 <bt_l2cap_send_cb>
   29886:	e7f2      	b.n	2986e <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   29888:	f100 060c 	add.w	r6, r0, #12
   2988c:	4629      	mov	r1, r5
   2988e:	4630      	mov	r0, r6
   29890:	f000 fae0 	bl	29e54 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   29894:	2200      	movs	r2, #0
   29896:	2300      	movs	r3, #0
   29898:	4630      	mov	r0, r6
   2989a:	f000 fabd 	bl	29e18 <net_buf_get>
	if (!buf) {
   2989e:	4605      	mov	r5, r0
   298a0:	b908      	cbnz	r0, 298a6 <bt_att_send+0x56>
	return 0;
   298a2:	2000      	movs	r0, #0
   298a4:	e7e3      	b.n	2986e <bt_att_send+0x1e>
	return list->head;
   298a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   298a8:	b1a3      	cbz	r3, 298d4 <bt_att_send+0x84>
	return node->next;
   298aa:	681c      	ldr	r4, [r3, #0]
   298ac:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   298b0:	b10c      	cbz	r4, 298b6 <bt_att_send+0x66>
   298b2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   298b6:	2200      	movs	r2, #0
   298b8:	4629      	mov	r1, r5
   298ba:	f7e7 f847 	bl	1094c <chan_send>
		if (err >= 0) {
   298be:	2800      	cmp	r0, #0
   298c0:	daef      	bge.n	298a2 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   298c2:	b13c      	cbz	r4, 298d4 <bt_att_send+0x84>
   298c4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   298c8:	b10b      	cbz	r3, 298ce <bt_att_send+0x7e>
   298ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   298ce:	4620      	mov	r0, r4
   298d0:	461c      	mov	r4, r3
   298d2:	e7f0      	b.n	298b6 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   298d4:	4629      	mov	r1, r5
   298d6:	4630      	mov	r0, r6
   298d8:	f001 f9e4 	bl	2aca4 <k_queue_prepend>
   298dc:	e7e1      	b.n	298a2 <bt_att_send+0x52>

000298de <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   298de:	b510      	push	{r4, lr}
   298e0:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   298e2:	f7e6 ff15 	bl	10710 <att_get>
	if (!att) {
   298e6:	b160      	cbz	r0, 29902 <bt_att_req_send+0x24>
	parent->next = child;
   298e8:	2300      	movs	r3, #0
   298ea:	6023      	str	r3, [r4, #0]
	return list->tail;
   298ec:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   298ee:	b92b      	cbnz	r3, 298fc <bt_att_req_send+0x1e>
	list->head = node;
   298f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   298f4:	f7ff fecc 	bl	29690 <att_req_send_process>

	return 0;
   298f8:	2000      	movs	r0, #0
}
   298fa:	bd10      	pop	{r4, pc}
	parent->next = child;
   298fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   298fe:	6084      	str	r4, [r0, #8]
}
   29900:	e7f8      	b.n	298f4 <bt_att_req_send+0x16>
		return -ENOTCONN;
   29902:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29906:	e7f8      	b.n	298fa <bt_att_req_send+0x1c>

00029908 <gatt_ccc_changed>:
{
   29908:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2990a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2990c:	895a      	ldrh	r2, [r3, #10]
   2990e:	428a      	cmp	r2, r1
   29910:	d003      	beq.n	2991a <gatt_ccc_changed+0x12>
		ccc->value = value;
   29912:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   29914:	68db      	ldr	r3, [r3, #12]
   29916:	b103      	cbz	r3, 2991a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   29918:	4718      	bx	r3
}
   2991a:	4770      	bx	lr

0002991c <gatt_indicate_rsp>:
{
   2991c:	b510      	push	{r4, lr}
   2991e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   29920:	68a3      	ldr	r3, [r4, #8]
{
   29922:	460a      	mov	r2, r1
	if (params->func) {
   29924:	b10b      	cbz	r3, 2992a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   29926:	4621      	mov	r1, r4
   29928:	4798      	blx	r3
	params->_ref--;
   2992a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2992c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2992e:	3b01      	subs	r3, #1
   29930:	b2db      	uxtb	r3, r3
   29932:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29934:	b122      	cbz	r2, 29940 <gatt_indicate_rsp+0x24>
   29936:	b91b      	cbnz	r3, 29940 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   29938:	4620      	mov	r0, r4
}
   2993a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2993e:	4710      	bx	r2
}
   29940:	bd10      	pop	{r4, pc}

00029942 <match_uuid>:
	data->attr = attr;
   29942:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29944:	8091      	strh	r1, [r2, #4]
}
   29946:	2000      	movs	r0, #0
   29948:	4770      	bx	lr

0002994a <gen_hash_m>:
{
   2994a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2994c:	6807      	ldr	r7, [r0, #0]
   2994e:	783d      	ldrb	r5, [r7, #0]
{
   29950:	b089      	sub	sp, #36	; 0x24
   29952:	4606      	mov	r6, r0
   29954:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29956:	b10d      	cbz	r5, 2995c <gen_hash_m+0x12>
	switch (u16->val) {
   29958:	2501      	movs	r5, #1
   2995a:	e014      	b.n	29986 <gen_hash_m+0x3c>
   2995c:	887b      	ldrh	r3, [r7, #2]
   2995e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29962:	d004      	beq.n	2996e <gen_hash_m+0x24>
   29964:	d812      	bhi.n	2998c <gen_hash_m+0x42>
   29966:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2996a:	2b03      	cmp	r3, #3
   2996c:	d8f4      	bhi.n	29958 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2996e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29972:	2202      	movs	r2, #2
   29974:	f10d 010a 	add.w	r1, sp, #10
   29978:	4620      	mov	r0, r4
   2997a:	f7fe fcb7 	bl	282ec <tc_cmac_update>
   2997e:	b9e0      	cbnz	r0, 299ba <gen_hash_m+0x70>
			state->err = -EINVAL;
   29980:	f06f 0315 	mvn.w	r3, #21
   29984:	65a3      	str	r3, [r4, #88]	; 0x58
}
   29986:	4628      	mov	r0, r5
   29988:	b009      	add	sp, #36	; 0x24
   2998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2998c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   29990:	33ff      	adds	r3, #255	; 0xff
   29992:	b29b      	uxth	r3, r3
   29994:	2b04      	cmp	r3, #4
   29996:	d8df      	bhi.n	29958 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29998:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2999c:	2202      	movs	r2, #2
   2999e:	f10d 010a 	add.w	r1, sp, #10
   299a2:	4620      	mov	r0, r4
   299a4:	f7fe fca2 	bl	282ec <tc_cmac_update>
   299a8:	2800      	cmp	r0, #0
   299aa:	d0e9      	beq.n	29980 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   299ac:	887b      	ldrh	r3, [r7, #2]
   299ae:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   299b2:	2202      	movs	r2, #2
   299b4:	f10d 010a 	add.w	r1, sp, #10
   299b8:	e016      	b.n	299e8 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   299ba:	887b      	ldrh	r3, [r7, #2]
   299bc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   299c0:	2202      	movs	r2, #2
   299c2:	f10d 010a 	add.w	r1, sp, #10
   299c6:	4620      	mov	r0, r4
   299c8:	f7fe fc90 	bl	282ec <tc_cmac_update>
   299cc:	2800      	cmp	r0, #0
   299ce:	d0d7      	beq.n	29980 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   299d0:	2000      	movs	r0, #0
   299d2:	aa03      	add	r2, sp, #12
   299d4:	6877      	ldr	r7, [r6, #4]
   299d6:	9000      	str	r0, [sp, #0]
   299d8:	2313      	movs	r3, #19
   299da:	4631      	mov	r1, r6
   299dc:	47b8      	blx	r7
		if (len < 0) {
   299de:	1e02      	subs	r2, r0, #0
   299e0:	da01      	bge.n	299e6 <gen_hash_m+0x9c>
			state->err = len;
   299e2:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   299e4:	e7cf      	b.n	29986 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   299e6:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   299e8:	4620      	mov	r0, r4
   299ea:	f7fe fc7f 	bl	282ec <tc_cmac_update>
   299ee:	2800      	cmp	r0, #0
   299f0:	d1b2      	bne.n	29958 <gen_hash_m+0xe>
   299f2:	e7c5      	b.n	29980 <gen_hash_m+0x36>

000299f4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   299f4:	2207      	movs	r2, #7
   299f6:	f7fe bedb 	b.w	287b0 <memcpy>

000299fa <z_log_msg2_static_create.constprop.0>:
   299fa:	2300      	movs	r3, #0
   299fc:	f7fd b874 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00029a00 <clear_cf_cfg>:
{
   29a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29a02:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29a04:	2500      	movs	r5, #0
   29a06:	4669      	mov	r1, sp
   29a08:	3001      	adds	r0, #1
   29a0a:	9500      	str	r5, [sp, #0]
   29a0c:	f8cd 5003 	str.w	r5, [sp, #3]
   29a10:	f7ff fff0 	bl	299f4 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   29a14:	f104 0008 	add.w	r0, r4, #8
   29a18:	2201      	movs	r2, #1
   29a1a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29a1c:	340c      	adds	r4, #12
   29a1e:	f7fe fed2 	bl	287c6 <memset>
   29a22:	f3bf 8f5b 	dmb	ish
   29a26:	e854 3f00 	ldrex	r3, [r4]
   29a2a:	e844 5200 	strex	r2, r5, [r4]
   29a2e:	2a00      	cmp	r2, #0
   29a30:	d1f9      	bne.n	29a26 <clear_cf_cfg+0x26>
   29a32:	f3bf 8f5b 	dmb	ish
}
   29a36:	b003      	add	sp, #12
   29a38:	bd30      	pop	{r4, r5, pc}

00029a3a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29a3a:	2301      	movs	r3, #1
   29a3c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29a3e:	f3bf 8f5b 	dmb	ish
   29a42:	e850 2f00 	ldrex	r2, [r0]
   29a46:	431a      	orrs	r2, r3
   29a48:	e840 2100 	strex	r1, r2, [r0]
   29a4c:	2900      	cmp	r1, #0
   29a4e:	d1f8      	bne.n	29a42 <atomic_set_bit+0x8>
   29a50:	f3bf 8f5b 	dmb	ish
}
   29a54:	4770      	bx	lr

00029a56 <read_appearance>:
{
   29a56:	b513      	push	{r0, r1, r4, lr}
   29a58:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29a5c:	4610      	mov	r0, r2
	if (offset > value_len) {
   29a5e:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29a60:	f04f 0200 	mov.w	r2, #0
   29a64:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   29a68:	d80d      	bhi.n	29a86 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   29a6a:	f1c1 0402 	rsb	r4, r1, #2
   29a6e:	429c      	cmp	r4, r3
   29a70:	bfa8      	it	ge
   29a72:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   29a74:	f10d 0306 	add.w	r3, sp, #6
   29a78:	4622      	mov	r2, r4
   29a7a:	4419      	add	r1, r3
   29a7c:	f7fe fe98 	bl	287b0 <memcpy>
}
   29a80:	4620      	mov	r0, r4
   29a82:	b002      	add	sp, #8
   29a84:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29a86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29a8a:	e7f9      	b.n	29a80 <read_appearance+0x2a>

00029a8c <read_name>:
{
   29a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a90:	4698      	mov	r8, r3
   29a92:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   29a96:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   29a98:	f7e4 fdd2 	bl	e640 <bt_get_name>
   29a9c:	4607      	mov	r7, r0
				 strlen(name));
   29a9e:	f7fe fe31 	bl	28704 <strlen>
	if (offset > value_len) {
   29aa2:	b283      	uxth	r3, r0
   29aa4:	42b3      	cmp	r3, r6
   29aa6:	d30c      	bcc.n	29ac2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   29aa8:	1b9c      	subs	r4, r3, r6
   29aaa:	4544      	cmp	r4, r8
   29aac:	bfa8      	it	ge
   29aae:	4644      	movge	r4, r8
   29ab0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   29ab2:	4622      	mov	r2, r4
   29ab4:	19b9      	adds	r1, r7, r6
   29ab6:	4628      	mov	r0, r5
   29ab8:	f7fe fe7a 	bl	287b0 <memcpy>
}
   29abc:	4620      	mov	r0, r4
   29abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29ac2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29ac6:	e7f9      	b.n	29abc <read_name+0x30>

00029ac8 <cf_read>:
{
   29ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29aca:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   29acc:	2300      	movs	r3, #0
{
   29ace:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   29ad2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   29ad6:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   29ad8:	f7e7 fd4a 	bl	11570 <find_cf_cfg>
	if (cfg) {
   29adc:	b128      	cbz	r0, 29aea <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   29ade:	f100 0108 	add.w	r1, r0, #8
   29ae2:	2201      	movs	r2, #1
   29ae4:	a801      	add	r0, sp, #4
   29ae6:	f7fe fe63 	bl	287b0 <memcpy>
	if (offset > value_len) {
   29aea:	2e01      	cmp	r6, #1
   29aec:	d80d      	bhi.n	29b0a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   29aee:	f1c6 0401 	rsb	r4, r6, #1
   29af2:	42bc      	cmp	r4, r7
   29af4:	bfa8      	it	ge
   29af6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29af8:	ab01      	add	r3, sp, #4
   29afa:	4622      	mov	r2, r4
   29afc:	1999      	adds	r1, r3, r6
   29afe:	4628      	mov	r0, r5
   29b00:	f7fe fe56 	bl	287b0 <memcpy>
}
   29b04:	4620      	mov	r0, r4
   29b06:	b003      	add	sp, #12
   29b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29b0a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29b0e:	e7f9      	b.n	29b04 <cf_read+0x3c>

00029b10 <bt_gatt_attr_read_service>:
{
   29b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   29b12:	68c9      	ldr	r1, [r1, #12]
{
   29b14:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   29b18:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   29b1a:	780b      	ldrb	r3, [r1, #0]
{
   29b1c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   29b1e:	b993      	cbnz	r3, 29b46 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29b20:	884b      	ldrh	r3, [r1, #2]
   29b22:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   29b26:	2d02      	cmp	r5, #2
   29b28:	d819      	bhi.n	29b5e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29b2a:	f1c5 0202 	rsb	r2, r5, #2
   29b2e:	4294      	cmp	r4, r2
   29b30:	bfa8      	it	ge
   29b32:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29b34:	f10d 0306 	add.w	r3, sp, #6
   29b38:	4622      	mov	r2, r4
   29b3a:	1959      	adds	r1, r3, r5
   29b3c:	f7fe fe38 	bl	287b0 <memcpy>
}
   29b40:	4620      	mov	r0, r4
   29b42:	b003      	add	sp, #12
   29b44:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   29b46:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   29b48:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   29b4c:	d807      	bhi.n	29b5e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29b4e:	f1c5 0210 	rsb	r2, r5, #16
   29b52:	4294      	cmp	r4, r2
   29b54:	bfa8      	it	ge
   29b56:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29b58:	4622      	mov	r2, r4
   29b5a:	4429      	add	r1, r5
   29b5c:	e7ee      	b.n	29b3c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29b5e:	f06f 0406 	mvn.w	r4, #6
   29b62:	e7ed      	b.n	29b40 <bt_gatt_attr_read_service+0x30>

00029b64 <find_ccc_cfg>:
{
   29b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29b66:	460c      	mov	r4, r1
						    &cfg->peer)) {
   29b68:	1c4d      	adds	r5, r1, #1
		if (conn) {
   29b6a:	b148      	cbz	r0, 29b80 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   29b6c:	7809      	ldrb	r1, [r1, #0]
   29b6e:	462a      	mov	r2, r5
   29b70:	f7ff fa29 	bl	28fc6 <bt_conn_is_peer_addr_le>
	return NULL;
   29b74:	2800      	cmp	r0, #0
   29b76:	bf08      	it	eq
   29b78:	2400      	moveq	r4, #0
}
   29b7a:	4620      	mov	r0, r4
   29b7c:	b003      	add	sp, #12
   29b7e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   29b80:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   29b82:	2207      	movs	r2, #7
   29b84:	f8cd 0003 	str.w	r0, [sp, #3]
   29b88:	4669      	mov	r1, sp
   29b8a:	4628      	mov	r0, r5
   29b8c:	f7fe fde7 	bl	2875e <memcmp>
	return NULL;
   29b90:	2800      	cmp	r0, #0
   29b92:	bf18      	it	ne
   29b94:	2400      	movne	r4, #0
   29b96:	e7f0      	b.n	29b7a <find_ccc_cfg+0x16>

00029b98 <bt_gatt_attr_read_ccc>:
{
   29b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   29b9a:	68c9      	ldr	r1, [r1, #12]
{
   29b9c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   29ba0:	4615      	mov	r5, r2
   29ba2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   29ba4:	f7ff ffde 	bl	29b64 <find_ccc_cfg>
	if (cfg) {
   29ba8:	b100      	cbz	r0, 29bac <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   29baa:	8900      	ldrh	r0, [r0, #8]
   29bac:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   29bb0:	2e02      	cmp	r6, #2
   29bb2:	d80e      	bhi.n	29bd2 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   29bb4:	f1c6 0402 	rsb	r4, r6, #2
   29bb8:	42bc      	cmp	r4, r7
   29bba:	bfa8      	it	ge
   29bbc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29bbe:	f10d 0306 	add.w	r3, sp, #6
   29bc2:	4622      	mov	r2, r4
   29bc4:	1999      	adds	r1, r3, r6
   29bc6:	4628      	mov	r0, r5
   29bc8:	f7fe fdf2 	bl	287b0 <memcpy>
}
   29bcc:	4620      	mov	r0, r4
   29bce:	b003      	add	sp, #12
   29bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29bd2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   29bd6:	e7f9      	b.n	29bcc <bt_gatt_attr_read_ccc+0x34>

00029bd8 <sc_clear>:
{
   29bd8:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29bda:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   29bde:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29be0:	4631      	mov	r1, r6
   29be2:	7a00      	ldrb	r0, [r0, #8]
   29be4:	f7fe ffb2 	bl	28b4c <bt_addr_le_is_bonded>
   29be8:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   29bea:	4631      	mov	r1, r6
   29bec:	f7e7 fdac 	bl	11748 <find_sc_cfg>
	if (!cfg) {
   29bf0:	b128      	cbz	r0, 29bfe <sc_clear+0x26>
}
   29bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   29bf6:	220c      	movs	r2, #12
   29bf8:	2100      	movs	r1, #0
   29bfa:	f7fe bde4 	b.w	287c6 <memset>
}
   29bfe:	bd70      	pop	{r4, r5, r6, pc}

00029c00 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29c00:	2a02      	cmp	r2, #2
{
   29c02:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29c04:	d108      	bne.n	29c18 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29c06:	2300      	movs	r3, #0
   29c08:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29c0c:	461a      	mov	r2, r3
   29c0e:	7a00      	ldrb	r0, [r0, #8]
   29c10:	f7e7 fdaa 	bl	11768 <sc_save>
}
   29c14:	2002      	movs	r0, #2
   29c16:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29c18:	f7ff ffde 	bl	29bd8 <sc_clear>
   29c1c:	e7fa      	b.n	29c14 <sc_ccc_cfg_write+0x14>

00029c1e <sc_restore_rsp>:
{
   29c1e:	b538      	push	{r3, r4, r5, lr}
   29c20:	4605      	mov	r5, r0
   29c22:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   29c24:	f7e7 fca4 	bl	11570 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   29c28:	b130      	cbz	r0, 29c38 <sc_restore_rsp+0x1a>
   29c2a:	7a03      	ldrb	r3, [r0, #8]
   29c2c:	07db      	lsls	r3, r3, #31
   29c2e:	d503      	bpl.n	29c38 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29c30:	2100      	movs	r1, #0
   29c32:	300c      	adds	r0, #12
   29c34:	f7ff ff01 	bl	29a3a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   29c38:	b964      	cbnz	r4, 29c54 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29c3a:	7a28      	ldrb	r0, [r5, #8]
   29c3c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   29c40:	f7e7 fd82 	bl	11748 <find_sc_cfg>
		if (sc_cfg) {
   29c44:	b130      	cbz	r0, 29c54 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   29c46:	4621      	mov	r1, r4
   29c48:	2204      	movs	r2, #4
}
   29c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   29c4e:	3008      	adds	r0, #8
   29c50:	f7fe bdb9 	b.w	287c6 <memset>
}
   29c54:	bd38      	pop	{r3, r4, r5, pc}

00029c56 <bt_gatt_attr_value_handle>:
{
   29c56:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29c58:	4604      	mov	r4, r0
   29c5a:	b910      	cbnz	r0, 29c62 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29c5c:	2000      	movs	r0, #0
}
   29c5e:	b002      	add	sp, #8
   29c60:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29c62:	2300      	movs	r3, #0
   29c64:	f88d 3004 	strb.w	r3, [sp, #4]
   29c68:	6800      	ldr	r0, [r0, #0]
   29c6a:	f642 0303 	movw	r3, #10243	; 0x2803
   29c6e:	a901      	add	r1, sp, #4
   29c70:	f8ad 3006 	strh.w	r3, [sp, #6]
   29c74:	f7fe fe22 	bl	288bc <bt_uuid_cmp>
   29c78:	2800      	cmp	r0, #0
   29c7a:	d1ef      	bne.n	29c5c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29c7c:	68e3      	ldr	r3, [r4, #12]
   29c7e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29c80:	2800      	cmp	r0, #0
   29c82:	d1ec      	bne.n	29c5e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29c84:	4620      	mov	r0, r4
   29c86:	f7e7 fe81 	bl	1198c <bt_gatt_attr_get_handle>
   29c8a:	3001      	adds	r0, #1
   29c8c:	b280      	uxth	r0, r0
	return handle;
   29c8e:	e7e6      	b.n	29c5e <bt_gatt_attr_value_handle+0x8>

00029c90 <bt_gatt_attr_read_chrc>:
{
   29c90:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   29c92:	68cf      	ldr	r7, [r1, #12]
{
   29c94:	b087      	sub	sp, #28
   29c96:	4608      	mov	r0, r1
   29c98:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   29c9a:	79bb      	ldrb	r3, [r7, #6]
   29c9c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   29ca0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   29ca4:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29ca6:	f7ff ffd6 	bl	29c56 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29caa:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29cac:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29cb0:	780b      	ldrb	r3, [r1, #0]
   29cb2:	b99b      	cbnz	r3, 29cdc <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29cb4:	884b      	ldrh	r3, [r1, #2]
   29cb6:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   29cba:	2105      	movs	r1, #5
	if (offset > value_len) {
   29cbc:	42b1      	cmp	r1, r6
   29cbe:	d315      	bcc.n	29cec <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   29cc0:	1b89      	subs	r1, r1, r6
   29cc2:	42a1      	cmp	r1, r4
   29cc4:	bfa8      	it	ge
   29cc6:	4621      	movge	r1, r4
   29cc8:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   29cca:	ab01      	add	r3, sp, #4
   29ccc:	4622      	mov	r2, r4
   29cce:	1999      	adds	r1, r3, r6
   29cd0:	4628      	mov	r0, r5
   29cd2:	f7fe fd6d 	bl	287b0 <memcpy>
}
   29cd6:	4620      	mov	r0, r4
   29cd8:	b007      	add	sp, #28
   29cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29cdc:	3101      	adds	r1, #1
   29cde:	2210      	movs	r2, #16
   29ce0:	f10d 0007 	add.w	r0, sp, #7
   29ce4:	f7fe fd64 	bl	287b0 <memcpy>
		value_len += 16U;
   29ce8:	2113      	movs	r1, #19
   29cea:	e7e7      	b.n	29cbc <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29cec:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29cf0:	e7f1      	b.n	29cd6 <bt_gatt_attr_read_chrc+0x46>

00029cf2 <bt_gatt_foreach_attr>:
{
   29cf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29cf4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29cf8:	2300      	movs	r3, #0
   29cfa:	9300      	str	r3, [sp, #0]
   29cfc:	461a      	mov	r2, r3
   29cfe:	f7e7 fe75 	bl	119ec <bt_gatt_foreach_attr_type>
}
   29d02:	b005      	add	sp, #20
   29d04:	f85d fb04 	ldr.w	pc, [sp], #4

00029d08 <db_hash_process>:
	db_hash_gen(true);
   29d08:	f7e7 beca 	b.w	11aa0 <db_hash_gen.constprop.0>

00029d0c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   29d0c:	07d3      	lsls	r3, r2, #31
{
   29d0e:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29d10:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29d12:	d504      	bpl.n	29d1e <bt_gatt_check_perm+0x12>
   29d14:	f014 0f15 	tst.w	r4, #21
   29d18:	d017      	beq.n	29d4a <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29d1a:	684b      	ldr	r3, [r1, #4]
   29d1c:	b1ab      	cbz	r3, 29d4a <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29d1e:	0793      	lsls	r3, r2, #30
   29d20:	d504      	bpl.n	29d2c <bt_gatt_check_perm+0x20>
   29d22:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   29d26:	d012      	beq.n	29d4e <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29d28:	688b      	ldr	r3, [r1, #8]
   29d2a:	b183      	cbz	r3, 29d4e <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   29d2c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29d2e:	f014 0f30 	tst.w	r4, #48	; 0x30
   29d32:	d104      	bne.n	29d3e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29d34:	f014 000c 	ands.w	r0, r4, #12
   29d38:	bf18      	it	ne
   29d3a:	200f      	movne	r0, #15
}
   29d3c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29d3e:	f7ff f940 	bl	28fc2 <bt_conn_get_security>
   29d42:	2802      	cmp	r0, #2
   29d44:	d8f6      	bhi.n	29d34 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   29d46:	2005      	movs	r0, #5
   29d48:	e7f8      	b.n	29d3c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29d4a:	2002      	movs	r0, #2
   29d4c:	e7f6      	b.n	29d3c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29d4e:	2003      	movs	r0, #3
   29d50:	e7f4      	b.n	29d3c <bt_gatt_check_perm+0x30>

00029d52 <bt_gatt_change_aware>:
{
   29d52:	b510      	push	{r4, lr}
   29d54:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   29d56:	f7e7 fc0b 	bl	11570 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29d5a:	4603      	mov	r3, r0
   29d5c:	b910      	cbnz	r0, 29d64 <bt_gatt_change_aware+0x12>
		return true;
   29d5e:	2401      	movs	r4, #1
}
   29d60:	4620      	mov	r0, r4
   29d62:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29d64:	7a02      	ldrb	r2, [r0, #8]
   29d66:	07d2      	lsls	r2, r2, #31
   29d68:	d5f9      	bpl.n	29d5e <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29d6a:	f3bf 8f5b 	dmb	ish
   29d6e:	68d9      	ldr	r1, [r3, #12]
   29d70:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   29d74:	f011 0101 	ands.w	r1, r1, #1
   29d78:	f100 000c 	add.w	r0, r0, #12
   29d7c:	d1ef      	bne.n	29d5e <bt_gatt_change_aware+0xc>
	if (!req) {
   29d7e:	2c00      	cmp	r4, #0
   29d80:	d0ee      	beq.n	29d60 <bt_gatt_change_aware+0xe>
   29d82:	f3bf 8f5b 	dmb	ish
   29d86:	68db      	ldr	r3, [r3, #12]
   29d88:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29d8c:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   29d90:	079b      	lsls	r3, r3, #30
   29d92:	d50e      	bpl.n	29db2 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29d94:	f3bf 8f5b 	dmb	ish
   29d98:	e850 3f00 	ldrex	r3, [r0]
   29d9c:	f023 0302 	bic.w	r3, r3, #2
   29da0:	e840 3200 	strex	r2, r3, [r0]
   29da4:	2a00      	cmp	r2, #0
   29da6:	d1f7      	bne.n	29d98 <bt_gatt_change_aware+0x46>
   29da8:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   29dac:	f7ff fe45 	bl	29a3a <atomic_set_bit>
	return false;
   29db0:	e7d6      	b.n	29d60 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   29db2:	2101      	movs	r1, #1
   29db4:	e7fa      	b.n	29dac <bt_gatt_change_aware+0x5a>

00029db6 <bt_smp_recv>:
{
   29db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   29db8:	2100      	movs	r1, #0
   29dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   29dc2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   29dc4:	4608      	mov	r0, r1
   29dc6:	f7ff f980 	bl	290ca <bt_l2cap_create_pdu_timeout>
   29dca:	f100 0608 	add.w	r6, r0, #8
   29dce:	4604      	mov	r4, r0
   29dd0:	2101      	movs	r1, #1
   29dd2:	4630      	mov	r0, r6
   29dd4:	f000 f87d 	bl	29ed2 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   29dd8:	2505      	movs	r5, #5
   29dda:	7005      	strb	r5, [r0, #0]
   29ddc:	2101      	movs	r1, #1
   29dde:	4630      	mov	r0, r6
   29de0:	f000 f877 	bl	29ed2 <net_buf_simple_add>
   29de4:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   29de6:	7005      	strb	r5, [r0, #0]
   29de8:	4622      	mov	r2, r4
   29dea:	9300      	str	r3, [sp, #0]
   29dec:	2106      	movs	r1, #6
   29dee:	4638      	mov	r0, r7
   29df0:	f7ff f96e 	bl	290d0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   29df4:	b110      	cbz	r0, 29dfc <bt_smp_recv+0x46>
		net_buf_unref(buf);
   29df6:	4620      	mov	r0, r4
   29df8:	f7f5 fa82 	bl	1f300 <net_buf_unref>
}
   29dfc:	2000      	movs	r0, #0
   29dfe:	b003      	add	sp, #12
   29e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029e02 <bt_smp_sign>:
   29e02:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29e06:	4770      	bx	lr

00029e08 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   29e08:	2000      	movs	r0, #0
   29e0a:	4770      	bx	lr

00029e0c <fixed_data_unref>:
}
   29e0c:	4770      	bx	lr

00029e0e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29e0e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   29e10:	6849      	ldr	r1, [r1, #4]
   29e12:	6809      	ldr	r1, [r1, #0]
   29e14:	f7f5 b9e0 	b.w	1f1d8 <net_buf_alloc_len>

00029e18 <net_buf_get>:
{
   29e18:	b570      	push	{r4, r5, r6, lr}
   29e1a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   29e1c:	f7fa fd82 	bl	24924 <z_impl_k_queue_get>
	if (!buf) {
   29e20:	4605      	mov	r5, r0
   29e22:	b128      	cbz	r0, 29e30 <net_buf_get+0x18>
   29e24:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29e26:	7963      	ldrb	r3, [r4, #5]
   29e28:	f013 0301 	ands.w	r3, r3, #1
   29e2c:	d102      	bne.n	29e34 <net_buf_get+0x1c>
	frag->frags = NULL;
   29e2e:	6023      	str	r3, [r4, #0]
}
   29e30:	4628      	mov	r0, r5
   29e32:	bd70      	pop	{r4, r5, r6, pc}
   29e34:	2300      	movs	r3, #0
   29e36:	2200      	movs	r2, #0
   29e38:	4630      	mov	r0, r6
   29e3a:	f7fa fd73 	bl	24924 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   29e3e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   29e40:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   29e42:	f023 0301 	bic.w	r3, r3, #1
   29e46:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29e48:	4604      	mov	r4, r0
   29e4a:	e7ec      	b.n	29e26 <net_buf_get+0xe>

00029e4c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   29e4c:	6883      	ldr	r3, [r0, #8]
   29e4e:	440b      	add	r3, r1
   29e50:	6003      	str	r3, [r0, #0]
}
   29e52:	4770      	bx	lr

00029e54 <net_buf_put>:
{
   29e54:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   29e56:	460a      	mov	r2, r1
   29e58:	6814      	ldr	r4, [r2, #0]
   29e5a:	b914      	cbnz	r4, 29e62 <net_buf_put+0xe>
}
   29e5c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   29e5e:	f000 bf2b 	b.w	2acb8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   29e62:	7953      	ldrb	r3, [r2, #5]
   29e64:	f043 0301 	orr.w	r3, r3, #1
   29e68:	7153      	strb	r3, [r2, #5]
   29e6a:	4622      	mov	r2, r4
   29e6c:	e7f4      	b.n	29e58 <net_buf_put+0x4>

00029e6e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29e6e:	7902      	ldrb	r2, [r0, #4]
   29e70:	3201      	adds	r2, #1
   29e72:	7102      	strb	r2, [r0, #4]
	return buf;
}
   29e74:	4770      	bx	lr

00029e76 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   29e76:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   29e78:	4618      	mov	r0, r3
   29e7a:	681b      	ldr	r3, [r3, #0]
   29e7c:	2b00      	cmp	r3, #0
   29e7e:	d1fb      	bne.n	29e78 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   29e80:	4770      	bx	lr

00029e82 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   29e82:	6802      	ldr	r2, [r0, #0]
{
   29e84:	b510      	push	{r4, lr}
	if (parent->frags) {
   29e86:	b12a      	cbz	r2, 29e94 <net_buf_frag_insert+0x12>
   29e88:	460b      	mov	r3, r1
	while (buf->frags) {
   29e8a:	461c      	mov	r4, r3
   29e8c:	681b      	ldr	r3, [r3, #0]
   29e8e:	2b00      	cmp	r3, #0
   29e90:	d1fb      	bne.n	29e8a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   29e92:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   29e94:	6001      	str	r1, [r0, #0]
}
   29e96:	bd10      	pop	{r4, pc}

00029e98 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   29e98:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   29e9a:	4604      	mov	r4, r0
   29e9c:	b920      	cbnz	r0, 29ea8 <net_buf_frag_add+0x10>
	buf->ref++;
   29e9e:	790b      	ldrb	r3, [r1, #4]
   29ea0:	3301      	adds	r3, #1
   29ea2:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   29ea4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   29ea6:	bd10      	pop	{r4, pc}
   29ea8:	4603      	mov	r3, r0
	while (buf->frags) {
   29eaa:	4618      	mov	r0, r3
   29eac:	681b      	ldr	r3, [r3, #0]
   29eae:	2b00      	cmp	r3, #0
   29eb0:	d1fb      	bne.n	29eaa <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   29eb2:	f7ff ffe6 	bl	29e82 <net_buf_frag_insert>
   29eb6:	4620      	mov	r0, r4
   29eb8:	e7f5      	b.n	29ea6 <net_buf_frag_add+0xe>

00029eba <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   29eba:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   29ebc:	b108      	cbz	r0, 29ec2 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   29ebe:	680b      	ldr	r3, [r1, #0]
   29ec0:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   29ec2:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   29ec4:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   29ec6:	4608      	mov	r0, r1
	frag->frags = NULL;
   29ec8:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   29eca:	f7f5 fa19 	bl	1f300 <net_buf_unref>
#endif

	return next_frag;
}
   29ece:	4620      	mov	r0, r4
   29ed0:	bd10      	pop	{r4, pc}

00029ed2 <net_buf_simple_add>:
	return buf->data + buf->len;
   29ed2:	8883      	ldrh	r3, [r0, #4]
   29ed4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   29ed6:	4419      	add	r1, r3
   29ed8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   29eda:	18d0      	adds	r0, r2, r3
   29edc:	4770      	bx	lr

00029ede <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   29ede:	b430      	push	{r4, r5}
   29ee0:	8884      	ldrh	r4, [r0, #4]
   29ee2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   29ee4:	18a3      	adds	r3, r4, r2
   29ee6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29ee8:	1928      	adds	r0, r5, r4
}
   29eea:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29eec:	f7fe bc60 	b.w	287b0 <memcpy>

00029ef0 <net_buf_simple_add_u8>:
   29ef0:	8883      	ldrh	r3, [r0, #4]
   29ef2:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   29ef4:	b510      	push	{r4, lr}
	buf->len += len;
   29ef6:	1c5c      	adds	r4, r3, #1
   29ef8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   29efa:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   29efc:	18d0      	adds	r0, r2, r3
   29efe:	bd10      	pop	{r4, pc}

00029f00 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   29f00:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   29f02:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   29f04:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   29f06:	1a40      	subs	r0, r0, r1
	buf->len += len;
   29f08:	4411      	add	r1, r2
	buf->data -= len;
   29f0a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   29f0c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   29f0e:	4770      	bx	lr

00029f10 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29f10:	8882      	ldrh	r2, [r0, #4]
   29f12:	1a52      	subs	r2, r2, r1
{
   29f14:	4603      	mov	r3, r0
	buf->len -= len;
   29f16:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   29f18:	6800      	ldr	r0, [r0, #0]
   29f1a:	4408      	add	r0, r1
   29f1c:	6018      	str	r0, [r3, #0]
}
   29f1e:	4770      	bx	lr

00029f20 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   29f20:	4603      	mov	r3, r0
	void *data = buf->data;
   29f22:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29f24:	889a      	ldrh	r2, [r3, #4]
   29f26:	1a52      	subs	r2, r2, r1
	buf->data += len;
   29f28:	4401      	add	r1, r0
	buf->len -= len;
   29f2a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   29f2c:	6019      	str	r1, [r3, #0]

	return data;
}
   29f2e:	4770      	bx	lr

00029f30 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   29f30:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   29f32:	6803      	ldr	r3, [r0, #0]
   29f34:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   29f36:	2101      	movs	r1, #1
   29f38:	f7ff ffea 	bl	29f10 <net_buf_simple_pull>

	return val;
}
   29f3c:	4620      	mov	r0, r4
   29f3e:	bd10      	pop	{r4, pc}

00029f40 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   29f40:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   29f42:	6803      	ldr	r3, [r0, #0]
   29f44:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29f46:	2102      	movs	r1, #2
   29f48:	f7ff ffe2 	bl	29f10 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   29f4c:	4620      	mov	r0, r4
   29f4e:	bd10      	pop	{r4, pc}

00029f50 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   29f50:	6802      	ldr	r2, [r0, #0]
   29f52:	6880      	ldr	r0, [r0, #8]
}
   29f54:	1a10      	subs	r0, r2, r0
   29f56:	4770      	bx	lr

00029f58 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29f58:	8883      	ldrh	r3, [r0, #4]
   29f5a:	88c2      	ldrh	r2, [r0, #6]
   29f5c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29f5e:	6803      	ldr	r3, [r0, #0]
   29f60:	6880      	ldr	r0, [r0, #8]
   29f62:	1a18      	subs	r0, r3, r0
}
   29f64:	1a10      	subs	r0, r2, r0
   29f66:	4770      	bx	lr

00029f68 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   29f68:	6903      	ldr	r3, [r0, #16]
{
   29f6a:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   29f6c:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   29f70:	2300      	movs	r3, #0
   29f72:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   29f74:	7f83      	ldrb	r3, [r0, #30]
{
   29f76:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   29f78:	b113      	cbz	r3, 29f80 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   29f7a:	7a40      	ldrb	r0, [r0, #9]
   29f7c:	f000 fcf8 	bl	2a970 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   29f80:	2301      	movs	r3, #1
   29f82:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   29f84:	2300      	movs	r3, #0
   29f86:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   29f88:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   29f8a:	77a3      	strb	r3, [r4, #30]
}
   29f8c:	bd10      	pop	{r4, pc}

00029f8e <z_log_msg2_static_create.constprop.0>:
   29f8e:	2300      	movs	r3, #0
   29f90:	f7fc bdaa 	b.w	26ae8 <z_impl_z_log_msg2_static_create>

00029f94 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   29f94:	f7fa bc0a 	b.w	247ac <z_impl_k_mutex_lock>

00029f98 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   29f98:	f7fa bc80 	b.w	2489c <z_impl_k_mutex_unlock>

00029f9c <usb_dc_ep_read>:
{
   29f9c:	b570      	push	{r4, r5, r6, lr}
   29f9e:	4604      	mov	r4, r0
   29fa0:	460e      	mov	r6, r1
   29fa2:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   29fa4:	f7f6 f8b0 	bl	20108 <usb_dc_ep_read_wait>
	if (ret) {
   29fa8:	b930      	cbnz	r0, 29fb8 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   29faa:	b906      	cbnz	r6, 29fae <usb_dc_ep_read+0x12>
   29fac:	b125      	cbz	r5, 29fb8 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   29fae:	4620      	mov	r0, r4
}
   29fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   29fb4:	f7f6 b918 	b.w	201e8 <usb_dc_ep_read_continue>
}
   29fb8:	bd70      	pop	{r4, r5, r6, pc}

00029fba <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   29fba:	6903      	ldr	r3, [r0, #16]
   29fbc:	b2c9      	uxtb	r1, r1
   29fbe:	220c      	movs	r2, #12
   29fc0:	fb01 3302 	mla	r3, r1, r2, r3
   29fc4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   29fc6:	f000 0007 	and.w	r0, r0, #7
   29fca:	4770      	bx	lr

00029fcc <set_on_state>:
	__asm__ volatile(
   29fcc:	f04f 0320 	mov.w	r3, #32
   29fd0:	f3ef 8211 	mrs	r2, BASEPRI
   29fd4:	f383 8812 	msr	BASEPRI_MAX, r3
   29fd8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29fdc:	6803      	ldr	r3, [r0, #0]
   29fde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29fe2:	f043 0302 	orr.w	r3, r3, #2
   29fe6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29fe8:	f382 8811 	msr	BASEPRI, r2
   29fec:	f3bf 8f6f 	isb	sy
}
   29ff0:	4770      	bx	lr

00029ff2 <stop>:
{
   29ff2:	4603      	mov	r3, r0
   29ff4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   29ff6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   29ff8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29ffa:	f04f 0420 	mov.w	r4, #32
   29ffe:	f3ef 8611 	mrs	r6, BASEPRI
   2a002:	f384 8812 	msr	BASEPRI_MAX, r4
   2a006:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a00a:	250c      	movs	r5, #12
   2a00c:	fb05 0401 	mla	r4, r5, r1, r0
   2a010:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2a012:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2a016:	d001      	beq.n	2a01c <stop+0x2a>
   2a018:	42a2      	cmp	r2, r4
   2a01a:	d111      	bne.n	2a040 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2a01c:	fb05 0001 	mla	r0, r5, r1, r0
   2a020:	2201      	movs	r2, #1
   2a022:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2a024:	2000      	movs	r0, #0
	__asm__ volatile(
   2a026:	f386 8811 	msr	BASEPRI, r6
   2a02a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2a02e:	b930      	cbnz	r0, 2a03e <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2a030:	685b      	ldr	r3, [r3, #4]
   2a032:	220c      	movs	r2, #12
   2a034:	fb02 3101 	mla	r1, r2, r1, r3
   2a038:	684b      	ldr	r3, [r1, #4]
   2a03a:	4798      	blx	r3
	return 0;
   2a03c:	2000      	movs	r0, #0
}
   2a03e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2a040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a044:	e7ef      	b.n	2a026 <stop+0x34>

0002a046 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2a046:	2280      	movs	r2, #128	; 0x80
   2a048:	f7ff bfd3 	b.w	29ff2 <stop>

0002a04c <async_start>:
{
   2a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a04e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2a050:	6904      	ldr	r4, [r0, #16]
{
   2a052:	4605      	mov	r5, r0
   2a054:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2a056:	f04f 0020 	mov.w	r0, #32
   2a05a:	f3ef 8c11 	mrs	ip, BASEPRI
   2a05e:	f380 8812 	msr	BASEPRI_MAX, r0
   2a062:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a066:	260c      	movs	r6, #12
   2a068:	fb06 4601 	mla	r6, r6, r1, r4
   2a06c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2a06e:	f000 0e07 	and.w	lr, r0, #7
   2a072:	f1be 0f01 	cmp.w	lr, #1
   2a076:	d110      	bne.n	2a09a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2a078:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2a07a:	2600      	movs	r6, #0
	__asm__ volatile(
   2a07c:	f38c 8811 	msr	BASEPRI, ip
   2a080:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2a084:	b93e      	cbnz	r6, 2a096 <async_start+0x4a>
	subdata->cb = cb;
   2a086:	200c      	movs	r0, #12
   2a088:	4341      	muls	r1, r0
   2a08a:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2a08c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2a090:	686b      	ldr	r3, [r5, #4]
   2a092:	585b      	ldr	r3, [r3, r1]
   2a094:	4798      	blx	r3
}
   2a096:	4630      	mov	r0, r6
   2a098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2a09a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2a09e:	4287      	cmp	r7, r0
   2a0a0:	bf14      	ite	ne
   2a0a2:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2a0a6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2a0aa:	e7e7      	b.n	2a07c <async_start+0x30>

0002a0ac <api_start>:
{
   2a0ac:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2a0ae:	2480      	movs	r4, #128	; 0x80
   2a0b0:	9400      	str	r4, [sp, #0]
   2a0b2:	f7ff ffcb 	bl	2a04c <async_start>
}
   2a0b6:	b002      	add	sp, #8
   2a0b8:	bd10      	pop	{r4, pc}

0002a0ba <onoff_started_callback>:
	return &data->mgr[type];
   2a0ba:	6900      	ldr	r0, [r0, #16]
{
   2a0bc:	b410      	push	{r4}
	return &data->mgr[type];
   2a0be:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2a0c0:	241c      	movs	r4, #28
   2a0c2:	fb03 0004 	mla	r0, r3, r4, r0
   2a0c6:	2100      	movs	r1, #0
}
   2a0c8:	bc10      	pop	{r4}
	notify(mgr, 0);
   2a0ca:	4710      	bx	r2

0002a0cc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2a0cc:	2000      	movs	r0, #0
   2a0ce:	f000 ba52 	b.w	2a576 <nrfx_clock_start>

0002a0d2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2a0d2:	2000      	movs	r0, #0
   2a0d4:	f7f8 b860 	b.w	22198 <nrfx_clock_stop>

0002a0d8 <blocking_start_callback>:
{
   2a0d8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2a0da:	f7fa bc57 	b.w	2498c <z_impl_k_sem_give>

0002a0de <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a0de:	6843      	ldr	r3, [r0, #4]
   2a0e0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a0e2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2a0e6:	600b      	str	r3, [r1, #0]
}
   2a0e8:	2000      	movs	r0, #0
   2a0ea:	4770      	bx	lr

0002a0ec <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a0ec:	6843      	ldr	r3, [r0, #4]
   2a0ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2a0f0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2a0f4:	4042      	eors	r2, r0
   2a0f6:	400a      	ands	r2, r1
   2a0f8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2a0fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2a0fe:	2000      	movs	r0, #0
   2a100:	4770      	bx	lr

0002a102 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a102:	6843      	ldr	r3, [r0, #4]
   2a104:	685b      	ldr	r3, [r3, #4]
}
   2a106:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2a108:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2a10c:	4770      	bx	lr

0002a10e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a10e:	6843      	ldr	r3, [r0, #4]
   2a110:	685b      	ldr	r3, [r3, #4]
}
   2a112:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a114:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2a118:	4770      	bx	lr

0002a11a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a11a:	6843      	ldr	r3, [r0, #4]
   2a11c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a11e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2a122:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2a124:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2a128:	2000      	movs	r0, #0
   2a12a:	4770      	bx	lr

0002a12c <gpio_nrfx_manage_callback>:
	return port->data;
   2a12c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2a12e:	6858      	ldr	r0, [r3, #4]
{
   2a130:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2a132:	b158      	cbz	r0, 2a14c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a134:	2400      	movs	r4, #0
   2a136:	4281      	cmp	r1, r0
   2a138:	d112      	bne.n	2a160 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2a13a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2a13c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2a13e:	b954      	cbnz	r4, 2a156 <gpio_nrfx_manage_callback+0x2a>
   2a140:	428d      	cmp	r5, r1
	list->head = node;
   2a142:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a144:	d100      	bne.n	2a148 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2a146:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2a148:	2000      	movs	r0, #0
   2a14a:	6008      	str	r0, [r1, #0]
	if (set) {
   2a14c:	b96a      	cbnz	r2, 2a16a <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2a14e:	2000      	movs	r0, #0
}
   2a150:	bd30      	pop	{r4, r5, pc}
   2a152:	4628      	mov	r0, r5
   2a154:	e7ef      	b.n	2a136 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2a156:	428d      	cmp	r5, r1
	parent->next = child;
   2a158:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2a15a:	bf08      	it	eq
   2a15c:	609c      	streq	r4, [r3, #8]
}
   2a15e:	e7f3      	b.n	2a148 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2a160:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a162:	4604      	mov	r4, r0
   2a164:	2d00      	cmp	r5, #0
   2a166:	d1f4      	bne.n	2a152 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2a168:	b13a      	cbz	r2, 2a17a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2a16a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2a16c:	685a      	ldr	r2, [r3, #4]
   2a16e:	600a      	str	r2, [r1, #0]
	list->head = node;
   2a170:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a172:	2800      	cmp	r0, #0
   2a174:	d1eb      	bne.n	2a14e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2a176:	6099      	str	r1, [r3, #8]
}
   2a178:	e7ea      	b.n	2a150 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2a17a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2a17e:	e7e7      	b.n	2a150 <gpio_nrfx_manage_callback+0x24>

0002a180 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   2a180:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2a182:	6884      	ldr	r4, [r0, #8]
   2a184:	68a4      	ldr	r4, [r4, #8]
   2a186:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   2a188:	bc10      	pop	{r4}
   2a18a:	4760      	bx	ip

0002a18c <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2a18c:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2a18e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   2a192:	2908      	cmp	r1, #8
   2a194:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2a196:	6e65      	ldr	r5, [r4, #100]	; 0x64
   2a198:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2a19c:	ea4f 2515 	mov.w	r5, r5, lsr #8
   2a1a0:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2a1a4:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2a1a8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   2a1ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   2a1b0:	ea43 0305 	orr.w	r3, r3, r5
   2a1b4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   2a1b8:	ea43 0302 	orr.w	r3, r3, r2
   2a1bc:	9300      	str	r3, [sp, #0]
   2a1be:	6e26      	ldr	r6, [r4, #96]	; 0x60
   2a1c0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2a1c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2a1c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2a1c6:	ea4f 2415 	mov.w	r4, r5, lsr #8
   2a1ca:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2a1ce:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2a1d2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   2a1d6:	ea43 0304 	orr.w	r3, r3, r4
   2a1da:	ea4f 2402 	mov.w	r4, r2, lsl #8
   2a1de:	bf28      	it	cs
   2a1e0:	2108      	movcs	r1, #8
   2a1e2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   2a1e6:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2a1e8:	460a      	mov	r2, r1
   2a1ea:	460c      	mov	r4, r1
   2a1ec:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2a1ee:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2a1f0:	f7fe fade 	bl	287b0 <memcpy>

	return length;
}
   2a1f4:	4620      	mov	r0, r4
   2a1f6:	b002      	add	sp, #8
   2a1f8:	bd70      	pop	{r4, r5, r6, pc}

0002a1fa <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
   2a1fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a1fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
   2a202:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
   2a206:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
   2a208:	bf48      	it	mi
   2a20a:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
   2a20e:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
   2a210:	bf48      	it	mi
   2a212:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
   2a216:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
   2a218:	bf48      	it	mi
   2a21a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
   2a21e:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
   2a220:	bf48      	it	mi
   2a222:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
   2a226:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
   2a228:	bf48      	it	mi
   2a22a:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
   2a22e:	6003      	str	r3, [r0, #0]

	return 0;
}
   2a230:	2000      	movs	r0, #0
   2a232:	4770      	bx	lr

0002a234 <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
   2a234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a23c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
   2a240:	2000      	movs	r0, #0
   2a242:	4770      	bx	lr

0002a244 <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
   2a244:	f240 13b3 	movw	r3, #435	; 0x1b3
   2a248:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
   2a24a:	2000      	movs	r0, #0
   2a24c:	4770      	bx	lr

0002a24e <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2a24e:	6902      	ldr	r2, [r0, #16]
{
   2a250:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2a252:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2a256:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a25a:	2000      	movs	r0, #0
   2a25c:	4770      	bx	lr

0002a25e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2a25e:	6843      	ldr	r3, [r0, #4]
   2a260:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2a262:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2a266:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2a26a:	4770      	bx	lr

0002a26c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2a26c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2a26e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2a270:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a272:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a276:	b148      	cbz	r0, 2a28c <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2a278:	7d52      	ldrb	r2, [r2, #21]
   2a27a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a27c:	2000      	movs	r0, #0
   2a27e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2a282:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a286:	2201      	movs	r2, #1
   2a288:	601a      	str	r2, [r3, #0]
	return 0;
   2a28a:	4770      	bx	lr
		return -1;
   2a28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2a290:	4770      	bx	lr

0002a292 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a292:	2a00      	cmp	r2, #0
{
   2a294:	b510      	push	{r4, lr}
   2a296:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a298:	dd0f      	ble.n	2a2ba <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2a29a:	6843      	ldr	r3, [r0, #4]
   2a29c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a29e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a2a2:	b148      	cbz	r0, 2a2b8 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   2a2a4:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a2a6:	2000      	movs	r0, #0
   2a2a8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2a2ac:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2a2b0:	7d52      	ldrb	r2, [r2, #21]
   2a2b2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a2b4:	2001      	movs	r0, #1
   2a2b6:	6018      	str	r0, [r3, #0]
}
   2a2b8:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2a2ba:	2000      	movs	r0, #0
   2a2bc:	e7fc      	b.n	2a2b8 <uarte_nrfx_fifo_read+0x26>

0002a2be <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2a2be:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a2c0:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2a2c2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2a2c4:	f04f 0020 	mov.w	r0, #32
   2a2c8:	f3ef 8311 	mrs	r3, BASEPRI
   2a2cc:	f380 8812 	msr	BASEPRI_MAX, r0
   2a2d0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2a2d4:	68c9      	ldr	r1, [r1, #12]
   2a2d6:	2000      	movs	r0, #0
   2a2d8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2a2da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2a2de:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2a2e2:	f383 8811 	msr	BASEPRI, r3
   2a2e6:	f3bf 8f6f 	isb	sy
}
   2a2ea:	4770      	bx	lr

0002a2ec <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2a2ec:	6903      	ldr	r3, [r0, #16]
   2a2ee:	68db      	ldr	r3, [r3, #12]
   2a2f0:	2201      	movs	r2, #1
   2a2f2:	739a      	strb	r2, [r3, #14]
}
   2a2f4:	4770      	bx	lr

0002a2f6 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2a2f6:	6903      	ldr	r3, [r0, #16]
   2a2f8:	68db      	ldr	r3, [r3, #12]
   2a2fa:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2a2fc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2a300:	b962      	cbnz	r2, 2a31c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2a302:	6842      	ldr	r2, [r0, #4]
   2a304:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a306:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2a30a:	b140      	cbz	r0, 2a31e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2a30c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   2a310:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2a314:	d003      	beq.n	2a31e <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2a316:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2a318:	2001      	movs	r0, #1
   2a31a:	4770      	bx	lr
   2a31c:	2000      	movs	r0, #0
}
   2a31e:	4770      	bx	lr

0002a320 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2a320:	6843      	ldr	r3, [r0, #4]
   2a322:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a324:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2a328:	3800      	subs	r0, #0
   2a32a:	bf18      	it	ne
   2a32c:	2001      	movne	r0, #1
   2a32e:	4770      	bx	lr

0002a330 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2a330:	6843      	ldr	r3, [r0, #4]
   2a332:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2a334:	2210      	movs	r2, #16
   2a336:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2a33a:	4770      	bx	lr

0002a33c <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2a33c:	6843      	ldr	r3, [r0, #4]
   2a33e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2a340:	2210      	movs	r2, #16
   2a342:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2a346:	4770      	bx	lr

0002a348 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2a348:	6843      	ldr	r3, [r0, #4]
   2a34a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2a34c:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a350:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2a354:	4770      	bx	lr

0002a356 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2a356:	6843      	ldr	r3, [r0, #4]
   2a358:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2a35a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a35e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2a362:	4770      	bx	lr

0002a364 <uarte_nrfx_irq_update>:
}
   2a364:	2001      	movs	r0, #1
   2a366:	4770      	bx	lr

0002a368 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2a368:	6903      	ldr	r3, [r0, #16]
   2a36a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2a36c:	e9c3 1200 	strd	r1, r2, [r3]
}
   2a370:	4770      	bx	lr

0002a372 <uarte_nrfx_irq_is_pending>:
{
   2a372:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2a374:	6843      	ldr	r3, [r0, #4]
   2a376:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2a378:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2a37c:	025b      	lsls	r3, r3, #9
{
   2a37e:	4604      	mov	r4, r0
		||
   2a380:	d405      	bmi.n	2a38e <uarte_nrfx_irq_is_pending+0x1c>
   2a382:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2a386:	f010 0010 	ands.w	r0, r0, #16
   2a38a:	d106      	bne.n	2a39a <uarte_nrfx_irq_is_pending+0x28>
}
   2a38c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2a38e:	f7ff ffb2 	bl	2a2f6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2a392:	2800      	cmp	r0, #0
   2a394:	d0f5      	beq.n	2a382 <uarte_nrfx_irq_is_pending+0x10>
		||
   2a396:	2001      	movs	r0, #1
   2a398:	e7f8      	b.n	2a38c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2a39a:	4620      	mov	r0, r4
   2a39c:	f7ff ffc0 	bl	2a320 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2a3a0:	3800      	subs	r0, #0
   2a3a2:	bf18      	it	ne
   2a3a4:	2001      	movne	r0, #1
   2a3a6:	e7f1      	b.n	2a38c <uarte_nrfx_irq_is_pending+0x1a>

0002a3a8 <nrf_gpio_cfg_input>:
{
   2a3a8:	b507      	push	{r0, r1, r2, lr}
   2a3aa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a3ac:	a801      	add	r0, sp, #4
   2a3ae:	f7f6 fff3 	bl	21398 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2a3b2:	9b01      	ldr	r3, [sp, #4]
   2a3b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2a3b8:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2a3ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   2a3be:	b003      	add	sp, #12
   2a3c0:	f85d fb04 	ldr.w	pc, [sp], #4

0002a3c4 <tx_start.isra.0>:
	return config->uarte_regs;
   2a3c4:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a3c6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a3ca:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a3ce:	2200      	movs	r2, #0
   2a3d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2a3d4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2a3d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2a3dc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a3e0:	6842      	ldr	r2, [r0, #4]
   2a3e2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a3e4:	bf41      	itttt	mi
   2a3e6:	2208      	movmi	r2, #8
   2a3e8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2a3ec:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   2a3f0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a3f4:	2201      	movs	r2, #1
   2a3f6:	609a      	str	r2, [r3, #8]
}
   2a3f8:	4770      	bx	lr

0002a3fa <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2a3fa:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2a3fc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a3fe:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a402:	b940      	cbnz	r0, 2a416 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2a404:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a406:	079b      	lsls	r3, r3, #30
   2a408:	d406      	bmi.n	2a418 <is_tx_ready.isra.0+0x1e>
   2a40a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2a40e:	3800      	subs	r0, #0
   2a410:	bf18      	it	ne
   2a412:	2001      	movne	r0, #1
   2a414:	4770      	bx	lr
   2a416:	2001      	movs	r0, #1
}
   2a418:	4770      	bx	lr

0002a41a <uarte_nrfx_fifo_fill>:
{
   2a41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2a41c:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2a41e:	68f3      	ldr	r3, [r6, #12]
   2a420:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a422:	f3bf 8f5b 	dmb	ish
   2a426:	4294      	cmp	r4, r2
   2a428:	bfa8      	it	ge
   2a42a:	4614      	movge	r4, r2
{
   2a42c:	4605      	mov	r5, r0
   2a42e:	3310      	adds	r3, #16
   2a430:	2201      	movs	r2, #1
   2a432:	e853 0f00 	ldrex	r0, [r3]
   2a436:	2800      	cmp	r0, #0
   2a438:	d103      	bne.n	2a442 <uarte_nrfx_fifo_fill+0x28>
   2a43a:	e843 2700 	strex	r7, r2, [r3]
   2a43e:	2f00      	cmp	r7, #0
   2a440:	d1f7      	bne.n	2a432 <uarte_nrfx_fifo_fill+0x18>
   2a442:	f3bf 8f5b 	dmb	ish
   2a446:	bf0c      	ite	eq
   2a448:	4613      	moveq	r3, r2
   2a44a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2a44c:	d01d      	beq.n	2a48a <uarte_nrfx_fifo_fill+0x70>
		return 0;
   2a44e:	461c      	mov	r4, r3
}
   2a450:	4620      	mov	r0, r4
   2a452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2a454:	68f2      	ldr	r2, [r6, #12]
   2a456:	5cc8      	ldrb	r0, [r1, r3]
   2a458:	6892      	ldr	r2, [r2, #8]
   2a45a:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   2a45c:	3301      	adds	r3, #1
   2a45e:	42a3      	cmp	r3, r4
   2a460:	dbf8      	blt.n	2a454 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   2a462:	f04f 0320 	mov.w	r3, #32
   2a466:	f3ef 8711 	mrs	r7, BASEPRI
   2a46a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a46e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2a472:	6868      	ldr	r0, [r5, #4]
   2a474:	f7ff ffc1 	bl	2a3fa <is_tx_ready.isra.0>
   2a478:	68f3      	ldr	r3, [r6, #12]
   2a47a:	b940      	cbnz	r0, 2a48e <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   2a47c:	6118      	str	r0, [r3, #16]
		len = 0;
   2a47e:	4604      	mov	r4, r0
	__asm__ volatile(
   2a480:	f387 8811 	msr	BASEPRI, r7
   2a484:	f3bf 8f6f 	isb	sy
	return len;
   2a488:	e7e2      	b.n	2a450 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2a48a:	2300      	movs	r3, #0
   2a48c:	e7e7      	b.n	2a45e <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   2a48e:	6899      	ldr	r1, [r3, #8]
   2a490:	6868      	ldr	r0, [r5, #4]
   2a492:	4622      	mov	r2, r4
   2a494:	f7ff ff96 	bl	2a3c4 <tx_start.isra.0>
   2a498:	e7f2      	b.n	2a480 <uarte_nrfx_fifo_fill+0x66>

0002a49a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2a49a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2a49c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2a49e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2a4a2:	05c9      	lsls	r1, r1, #23
{
   2a4a4:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2a4a6:	d518      	bpl.n	2a4da <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a4a8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2a4ac:	b1a9      	cbz	r1, 2a4da <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2a4ae:	f04f 0420 	mov.w	r4, #32
   2a4b2:	f3ef 8111 	mrs	r1, BASEPRI
   2a4b6:	f384 8812 	msr	BASEPRI_MAX, r4
   2a4ba:	f3bf 8f6f 	isb	sy
   2a4be:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2a4c2:	b134      	cbz	r4, 2a4d2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a4c4:	2400      	movs	r4, #0
   2a4c6:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2a4ca:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a4ce:	2401      	movs	r4, #1
   2a4d0:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2a4d2:	f381 8811 	msr	BASEPRI, r1
   2a4d6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a4da:	6852      	ldr	r2, [r2, #4]
   2a4dc:	06d2      	lsls	r2, r2, #27
   2a4de:	d51a      	bpl.n	2a516 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   2a4e0:	f04f 0220 	mov.w	r2, #32
   2a4e4:	f3ef 8111 	mrs	r1, BASEPRI
   2a4e8:	f382 8812 	msr	BASEPRI_MAX, r2
   2a4ec:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a4f0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2a4f4:	b112      	cbz	r2, 2a4fc <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2a4f6:	2200      	movs	r2, #0
   2a4f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2a4fc:	6902      	ldr	r2, [r0, #16]
   2a4fe:	68d2      	ldr	r2, [r2, #12]
   2a500:	b10a      	cbz	r2, 2a506 <uarte_nrfx_isr_int+0x6c>
   2a502:	6912      	ldr	r2, [r2, #16]
   2a504:	b91a      	cbnz	r2, 2a50e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   2a506:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2a50a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2a50e:	f381 8811 	msr	BASEPRI, r1
   2a512:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2a516:	6902      	ldr	r2, [r0, #16]
   2a518:	68d2      	ldr	r2, [r2, #12]
   2a51a:	b15a      	cbz	r2, 2a534 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a51c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2a520:	b151      	cbz	r1, 2a538 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   2a522:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2a524:	2100      	movs	r1, #0
   2a526:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2a528:	b134      	cbz	r4, 2a538 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   2a52a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2a52e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2a532:	7391      	strb	r1, [r2, #14]
}
   2a534:	bc10      	pop	{r4}
   2a536:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a538:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2a53c:	b121      	cbz	r1, 2a548 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a53e:	2100      	movs	r1, #0
   2a540:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2a544:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2a548:	6813      	ldr	r3, [r2, #0]
   2a54a:	2b00      	cmp	r3, #0
   2a54c:	d0f2      	beq.n	2a534 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2a54e:	6851      	ldr	r1, [r2, #4]
}
   2a550:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2a552:	4718      	bx	r3

0002a554 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2a554:	4770      	bx	lr

0002a556 <sys_clock_cycle_get_32>:
{
   2a556:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2a558:	f7f7 fae4 	bl	21b24 <z_nrf_rtc_timer_read>
}
   2a55c:	bd08      	pop	{r3, pc}

0002a55e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2a55e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2a562:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2a566:	f1a0 0308 	sub.w	r3, r0, #8
   2a56a:	4258      	negs	r0, r3
   2a56c:	4158      	adcs	r0, r3
   2a56e:	4770      	bx	lr

0002a570 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2a570:	4700      	bx	r0

0002a572 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2a572:	f000 be27 	b.w	2b1c4 <z_impl_k_busy_wait>

0002a576 <nrfx_clock_start>:
    switch (domain)
   2a576:	b110      	cbz	r0, 2a57e <nrfx_clock_start+0x8>
   2a578:	2801      	cmp	r0, #1
   2a57a:	d01d      	beq.n	2a5b8 <nrfx_clock_start+0x42>
   2a57c:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2a57e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a582:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2a586:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2a58a:	03c9      	lsls	r1, r1, #15
   2a58c:	d512      	bpl.n	2a5b4 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2a58e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2a592:	2a01      	cmp	r2, #1
   2a594:	d10e      	bne.n	2a5b4 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2a596:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a59a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a59e:	2200      	movs	r2, #0
   2a5a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2a5a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2a5a8:	2202      	movs	r2, #2
   2a5aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a5ae:	2201      	movs	r2, #1
   2a5b0:	609a      	str	r2, [r3, #8]
}
   2a5b2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   2a5b4:	2200      	movs	r2, #0
   2a5b6:	e7ee      	b.n	2a596 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a5b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a5bc:	2200      	movs	r2, #0
   2a5be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2a5c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2a5c6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a5ca:	6018      	str	r0, [r3, #0]
}
   2a5cc:	4770      	bx	lr

0002a5ce <nrf_gpio_reconfigure>:
{
   2a5ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a5d0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a5d2:	a801      	add	r0, sp, #4
{
   2a5d4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2a5d8:	4617      	mov	r7, r2
   2a5da:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a5dc:	f7f7 fe4c 	bl	22278 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a5e0:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2a5e2:	2f00      	cmp	r7, #0
   2a5e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2a5e8:	bf14      	ite	ne
   2a5ea:	2302      	movne	r3, #2
   2a5ec:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a5ee:	2900      	cmp	r1, #0
   2a5f0:	bf18      	it	ne
   2a5f2:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a5f6:	2d00      	cmp	r5, #0
   2a5f8:	bf14      	ite	ne
   2a5fa:	f04f 0c0c 	movne.w	ip, #12
   2a5fe:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2a602:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2a604:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2a608:	bf14      	ite	ne
   2a60a:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2a60e:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2a612:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a614:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a618:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2a61c:	bf14      	ite	ne
   2a61e:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2a622:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a626:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2a62a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2a62e:	b101      	cbz	r1, 2a632 <nrf_gpio_reconfigure+0x64>
   2a630:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2a632:	b10f      	cbz	r7, 2a638 <nrf_gpio_reconfigure+0x6a>
   2a634:	783f      	ldrb	r7, [r7, #0]
   2a636:	007f      	lsls	r7, r7, #1
   2a638:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2a63a:	b10d      	cbz	r5, 2a640 <nrf_gpio_reconfigure+0x72>
   2a63c:	782d      	ldrb	r5, [r5, #0]
   2a63e:	00ad      	lsls	r5, r5, #2
   2a640:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2a642:	b10c      	cbz	r4, 2a648 <nrf_gpio_reconfigure+0x7a>
   2a644:	7822      	ldrb	r2, [r4, #0]
   2a646:	0214      	lsls	r4, r2, #8
   2a648:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2a64a:	b10e      	cbz	r6, 2a650 <nrf_gpio_reconfigure+0x82>
   2a64c:	7836      	ldrb	r6, [r6, #0]
   2a64e:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2a650:	432c      	orrs	r4, r5
   2a652:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2a654:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2a658:	b003      	add	sp, #12
   2a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a65c <nrf_gpio_cfg_sense_set>:
{
   2a65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2a65e:	f10d 030f 	add.w	r3, sp, #15
   2a662:	9301      	str	r3, [sp, #4]
   2a664:	2300      	movs	r3, #0
{
   2a666:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2a66a:	9300      	str	r3, [sp, #0]
   2a66c:	461a      	mov	r2, r3
   2a66e:	4619      	mov	r1, r3
   2a670:	f7ff ffad 	bl	2a5ce <nrf_gpio_reconfigure>
}
   2a674:	b005      	add	sp, #20
   2a676:	f85d fb04 	ldr.w	pc, [sp], #4

0002a67a <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a67a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2a67e:	681a      	ldr	r2, [r3, #0]
   2a680:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a682:	bf1f      	itttt	ne
   2a684:	2200      	movne	r2, #0
   2a686:	601a      	strne	r2, [r3, #0]
   2a688:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a68a:	2001      	movne	r0, #1
   2a68c:	bf08      	it	eq
   2a68e:	2000      	moveq	r0, #0
}
   2a690:	4770      	bx	lr

0002a692 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2a692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a696:	f44f 7260 	mov.w	r2, #896	; 0x380
   2a69a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2a69e:	4770      	bx	lr

0002a6a0 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2a6a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a6a4:	f44f 7260 	mov.w	r2, #896	; 0x380
   2a6a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2a6ac:	4770      	bx	lr

0002a6ae <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2a6ae:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2a6b0:	f7f8 f992 	bl	229d8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   2a6b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2a6b8:	f7f7 bdaa 	b.w	22210 <nrfx_clock_irq_handler>

0002a6bc <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a6bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   2a6be:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a6c0:	6b48      	ldr	r0, [r1, #52]	; 0x34
   2a6c2:	4298      	cmp	r0, r3
{
   2a6c4:	b510      	push	{r4, lr}
   2a6c6:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a6ca:	d205      	bcs.n	2a6d8 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   2a6cc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   2a6ce:	5c09      	ldrb	r1, [r1, r0]
   2a6d0:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   2a6d4:	4618      	mov	r0, r3
}
   2a6d6:	e004      	b.n	2a6e2 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   2a6d8:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   2a6dc:	b110      	cbz	r0, 2a6e4 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a6de:	61d3      	str	r3, [r2, #28]
            return false;
   2a6e0:	2000      	movs	r0, #0
}
   2a6e2:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   2a6e4:	6a0c      	ldr	r4, [r1, #32]
   2a6e6:	0664      	lsls	r4, r4, #25
   2a6e8:	d503      	bpl.n	2a6f2 <twi_send_byte+0x36>
   2a6ea:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   2a6ec:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   2a6f0:	e7f7      	b.n	2a6e2 <twi_send_byte+0x26>
   2a6f2:	6153      	str	r3, [r2, #20]
   2a6f4:	e7ee      	b.n	2a6d4 <twi_send_byte+0x18>

0002a6f6 <twi_transfer>:
{
   2a6f6:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a6f8:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   2a6fc:	4604      	mov	r4, r0
   2a6fe:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   2a700:	b12e      	cbz	r6, 2a70e <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a702:	2300      	movs	r3, #0
   2a704:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   2a708:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   2a70c:	2601      	movs	r6, #1
    if (p_cb->error)
   2a70e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   2a712:	b320      	cbz	r0, 2a75e <twi_transfer+0x68>
   2a714:	2300      	movs	r3, #0
   2a716:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2a71a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   2a71e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   2a722:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   2a726:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2a72a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   2a72e:	2e00      	cmp	r6, #0
   2a730:	d068      	beq.n	2a804 <twi_transfer+0x10e>
        if (!p_cb->error)
   2a732:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   2a736:	2300      	movs	r3, #0
   2a738:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   2a73c:	bb88      	cbnz	r0, 2a7a2 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   2a73e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a740:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2a742:	429a      	cmp	r2, r3
        return false;
   2a744:	bf1c      	itt	ne
   2a746:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2a748:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   2a74a:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2a74e:	bf1c      	itt	ne
   2a750:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2a754:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   2a758:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   2a75c:	e022      	b.n	2a7a4 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a75e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2a762:	b142      	cbz	r2, 2a776 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a764:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   2a768:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a76c:	2301      	movs	r3, #1
   2a76e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   2a770:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   2a774:	e7db      	b.n	2a72e <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a776:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   2a77a:	b1a3      	cbz	r3, 2a7a6 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a77c:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   2a780:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   2a784:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a786:	3301      	adds	r3, #1
   2a788:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a78a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2a78e:	b113      	cbz	r3, 2a796 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a790:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2a794:	e7e8      	b.n	2a768 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   2a796:	4629      	mov	r1, r5
   2a798:	4620      	mov	r0, r4
   2a79a:	f7ff ff8f 	bl	2a6bc <twi_send_byte>
   2a79e:	2800      	cmp	r0, #0
   2a7a0:	d1c5      	bne.n	2a72e <twi_transfer+0x38>
                    return false;
   2a7a2:	2000      	movs	r0, #0
}
   2a7a4:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a7a6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   2a7aa:	2a00      	cmp	r2, #0
   2a7ac:	d0bf      	beq.n	2a72e <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a7ae:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2a7b2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a7b6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2a7ba:	b112      	cbz	r2, 2a7c2 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a7bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2a7c0:	e7d2      	b.n	2a768 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a7c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a7c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2a7c6:	4293      	cmp	r3, r2
   2a7c8:	d2b1      	bcs.n	2a72e <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   2a7ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   2a7cc:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   2a7d0:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   2a7d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a7d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   2a7d6:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a7d8:	1e51      	subs	r1, r2, #1
   2a7da:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   2a7dc:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a7de:	d108      	bne.n	2a7f2 <twi_transfer+0xfc>
   2a7e0:	6a29      	ldr	r1, [r5, #32]
   2a7e2:	0649      	lsls	r1, r1, #25
   2a7e4:	d410      	bmi.n	2a808 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   2a7e6:	2302      	movs	r3, #2
   2a7e8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a7ec:	2301      	movs	r3, #1
   2a7ee:	6223      	str	r3, [r4, #32]
   2a7f0:	e79d      	b.n	2a72e <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a7f2:	4293      	cmp	r3, r2
   2a7f4:	d1fa      	bne.n	2a7ec <twi_transfer+0xf6>
   2a7f6:	6a2b      	ldr	r3, [r5, #32]
   2a7f8:	065b      	lsls	r3, r3, #25
   2a7fa:	d598      	bpl.n	2a72e <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   2a7fc:	2302      	movs	r3, #2
   2a7fe:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   2a802:	e7cf      	b.n	2a7a4 <twi_transfer+0xae>
    return true;
   2a804:	2001      	movs	r0, #1
   2a806:	e7cd      	b.n	2a7a4 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a808:	4293      	cmp	r3, r2
   2a80a:	d1ef      	bne.n	2a7ec <twi_transfer+0xf6>
   2a80c:	e7f6      	b.n	2a7fc <twi_transfer+0x106>

0002a80e <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2a80e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2a812:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2a816:	f1a0 0308 	sub.w	r3, r0, #8
   2a81a:	4258      	negs	r0, r3
   2a81c:	4158      	adcs	r0, r3
   2a81e:	4770      	bx	lr

0002a820 <nrfx_usbd_consumer>:
{
   2a820:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   2a822:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2a824:	680d      	ldr	r5, [r1, #0]
   2a826:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   2a828:	bf97      	itett	ls
   2a82a:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   2a82e:	2100      	movhi	r1, #0
        size -= data_size;
   2a830:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   2a832:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   2a834:	bf8e      	itee	hi
   2a836:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   2a83a:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2a83c:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   2a83e:	429a      	cmp	r2, r3
   2a840:	d103      	bne.n	2a84a <nrfx_usbd_consumer+0x2a>
   2a842:	1e20      	subs	r0, r4, #0
   2a844:	bf18      	it	ne
   2a846:	2001      	movne	r0, #1
}
   2a848:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   2a84a:	2000      	movs	r0, #0
   2a84c:	e7fc      	b.n	2a848 <nrfx_usbd_consumer+0x28>

0002a84e <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   2a84e:	684b      	ldr	r3, [r1, #4]
{
   2a850:	b510      	push	{r4, lr}
   2a852:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   2a854:	680c      	ldr	r4, [r1, #0]
   2a856:	bf28      	it	cs
   2a858:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   2a85a:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   2a85e:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   2a860:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   2a862:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2a864:	441a      	add	r2, r3
}
   2a866:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2a868:	600a      	str	r2, [r1, #0]
}
   2a86a:	bf18      	it	ne
   2a86c:	2001      	movne	r0, #1
   2a86e:	bd10      	pop	{r4, pc}

0002a870 <nrfx_usbd_feeder_ram_zlp>:
{
   2a870:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   2a872:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2a874:	680b      	ldr	r3, [r1, #0]
   2a876:	42a2      	cmp	r2, r4
   2a878:	bf28      	it	cs
   2a87a:	4622      	movcs	r2, r4
   2a87c:	2a00      	cmp	r2, #0
   2a87e:	bf14      	ite	ne
   2a880:	461d      	movne	r5, r3
   2a882:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   2a884:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   2a888:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   2a88c:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   2a88e:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2a890:	600a      	str	r2, [r1, #0]
}
   2a892:	bf14      	ite	ne
   2a894:	2001      	movne	r0, #1
   2a896:	2000      	moveq	r0, #0
   2a898:	bd30      	pop	{r4, r5, pc}

0002a89a <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2a89a:	f010 0f80 	tst.w	r0, #128	; 0x80
   2a89e:	bf14      	ite	ne
   2a8a0:	2300      	movne	r3, #0
   2a8a2:	2310      	moveq	r3, #16
   2a8a4:	f000 000f 	and.w	r0, r0, #15
}
   2a8a8:	4418      	add	r0, r3
   2a8aa:	4770      	bx	lr

0002a8ac <ev_started_handler>:
}
   2a8ac:	4770      	bx	lr

0002a8ae <nrf_usbd_epin_dma_handler>:
{
   2a8ae:	b508      	push	{r3, lr}
   2a8b0:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   2a8b2:	f7f8 fb41 	bl	22f38 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2a8b6:	4608      	mov	r0, r1
   2a8b8:	f7f8 fb30 	bl	22f1c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2a8bc:	7b83      	ldrb	r3, [r0, #14]
   2a8be:	2b03      	cmp	r3, #3
   2a8c0:	d10a      	bne.n	2a8d8 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2a8c2:	4608      	mov	r0, r1
   2a8c4:	f7ff ffe9 	bl	2a89a <ep2bit>
   2a8c8:	2301      	movs	r3, #1
   2a8ca:	fa03 f000 	lsl.w	r0, r3, r0
   2a8ce:	43c0      	mvns	r0, r0
}
   2a8d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2a8d4:	f7f8 bc40 	b.w	23158 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2a8d8:	6803      	ldr	r3, [r0, #0]
   2a8da:	2b00      	cmp	r3, #0
   2a8dc:	d0f1      	beq.n	2a8c2 <nrf_usbd_epin_dma_handler+0x14>
}
   2a8de:	bd08      	pop	{r3, pc}

0002a8e0 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   2a8e0:	2087      	movs	r0, #135	; 0x87
   2a8e2:	f7ff bfe4 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a8e6 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   2a8e6:	2086      	movs	r0, #134	; 0x86
   2a8e8:	f7ff bfe1 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a8ec <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   2a8ec:	2085      	movs	r0, #133	; 0x85
   2a8ee:	f7ff bfde 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a8f2 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   2a8f2:	2084      	movs	r0, #132	; 0x84
   2a8f4:	f7ff bfdb 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a8f8 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2a8f8:	2083      	movs	r0, #131	; 0x83
   2a8fa:	f7ff bfd8 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a8fe <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   2a8fe:	2082      	movs	r0, #130	; 0x82
   2a900:	f7ff bfd5 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a904 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   2a904:	2081      	movs	r0, #129	; 0x81
   2a906:	f7ff bfd2 	b.w	2a8ae <nrf_usbd_epin_dma_handler>

0002a90a <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2a90a:	f7f8 bc35 	b.w	23178 <nrf_usbd_ep0in_dma_handler>

0002a90e <nrfx_usbd_ep_max_packet_size_set>:
{
   2a90e:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2a910:	f7f8 fb04 	bl	22f1c <ep_state_access>
    p_state->max_packet_size = size;
   2a914:	8181      	strh	r1, [r0, #12]
}
   2a916:	bd08      	pop	{r3, pc}

0002a918 <nrfx_usbd_ep_status_get>:
{
   2a918:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2a91a:	f7f8 faff 	bl	22f1c <ep_state_access>
	__asm__ volatile(
   2a91e:	f04f 0220 	mov.w	r2, #32
   2a922:	f3ef 8311 	mrs	r3, BASEPRI
   2a926:	f382 8812 	msr	BASEPRI_MAX, r2
   2a92a:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   2a92e:	6882      	ldr	r2, [r0, #8]
   2a930:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2a932:	6802      	ldr	r2, [r0, #0]
   2a934:	b92a      	cbnz	r2, 2a942 <nrfx_usbd_ep_status_get+0x2a>
   2a936:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2a938:	f383 8811 	msr	BASEPRI, r3
   2a93c:	f3bf 8f6f 	isb	sy
}
   2a940:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2a942:	2004      	movs	r0, #4
   2a944:	e7f8      	b.n	2a938 <nrfx_usbd_ep_status_get+0x20>

0002a946 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2a946:	2007      	movs	r0, #7
   2a948:	f7f8 bf4e 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a94c <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2a94c:	2006      	movs	r0, #6
   2a94e:	f7f8 bf4b 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a952 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   2a952:	2005      	movs	r0, #5
   2a954:	f7f8 bf48 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a958 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2a958:	2004      	movs	r0, #4
   2a95a:	f7f8 bf45 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a95e <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   2a95e:	2003      	movs	r0, #3
   2a960:	f7f8 bf42 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a964 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   2a964:	2002      	movs	r0, #2
   2a966:	f7f8 bf3f 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a96a <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2a96a:	2001      	movs	r0, #1
   2a96c:	f7f8 bf3c 	b.w	237e8 <nrf_usbd_epout_dma_handler>

0002a970 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   2a970:	f7f9 b830 	b.w	239d4 <usbd_ep_abort>

0002a974 <nrf_gpio_pin_set>:
{
   2a974:	b507      	push	{r0, r1, r2, lr}
   2a976:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a978:	a801      	add	r0, sp, #4
   2a97a:	f7f9 fa39 	bl	23df0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a97e:	9a01      	ldr	r2, [sp, #4]
   2a980:	2301      	movs	r3, #1
   2a982:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2a984:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2a988:	b003      	add	sp, #12
   2a98a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a98e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2a98e:	f7f9 baa1 	b.w	23ed4 <_DoInit>

0002a992 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2a992:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2a994:	f7ff fffb 	bl	2a98e <SEGGER_RTT_Init>

	return 0;
}
   2a998:	2000      	movs	r0, #0
   2a99a:	bd08      	pop	{r3, pc}

0002a99c <z_device_state_init>:
}
   2a99c:	4770      	bx	lr

0002a99e <z_device_is_ready>:
	if (dev == NULL) {
   2a99e:	b138      	cbz	r0, 2a9b0 <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
   2a9a0:	68c3      	ldr	r3, [r0, #12]
   2a9a2:	8818      	ldrh	r0, [r3, #0]
   2a9a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2a9a8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2a9ac:	4258      	negs	r0, r3
   2a9ae:	4158      	adcs	r0, r3
}
   2a9b0:	4770      	bx	lr

0002a9b2 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
   2a9b2:	6940      	ldr	r0, [r0, #20]
{
   2a9b4:	b470      	push	{r4, r5, r6}
   2a9b6:	4613      	mov	r3, r2
   2a9b8:	460d      	mov	r5, r1
	if (rv != NULL) {
   2a9ba:	b960      	cbnz	r0, 2a9d6 <device_required_foreach+0x24>
	size_t handle_count = 0;
   2a9bc:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
   2a9be:	462a      	mov	r2, r5
}
   2a9c0:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   2a9c2:	f7f9 bb0d 	b.w	23fe0 <device_visitor>
			++i;
   2a9c6:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2a9c8:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   2a9cc:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2a9ce:	b2a4      	uxth	r4, r4
   2a9d0:	4294      	cmp	r4, r2
   2a9d2:	d9f8      	bls.n	2a9c6 <device_required_foreach+0x14>
   2a9d4:	e7f3      	b.n	2a9be <device_required_foreach+0xc>
		size_t i = 0;
   2a9d6:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2a9d8:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2a9dc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2a9e0:	e7f2      	b.n	2a9c8 <device_required_foreach+0x16>

0002a9e2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2a9e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a9e4:	ab0a      	add	r3, sp, #40	; 0x28
   2a9e6:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2a9e8:	9302      	str	r3, [sp, #8]
   2a9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a9ec:	9301      	str	r3, [sp, #4]
   2a9ee:	2300      	movs	r3, #0
   2a9f0:	9300      	str	r3, [sp, #0]
   2a9f2:	2201      	movs	r2, #1
   2a9f4:	4618      	mov	r0, r3
   2a9f6:	f7dd f8a3 	bl	7b40 <z_impl_z_log_msg2_runtime_vcreate>
}
   2a9fa:	b007      	add	sp, #28
   2a9fc:	f85d fb04 	ldr.w	pc, [sp], #4

0002aa00 <arch_system_halt>:
	__asm__ volatile(
   2aa00:	f04f 0220 	mov.w	r2, #32
   2aa04:	f3ef 8311 	mrs	r3, BASEPRI
   2aa08:	f382 8812 	msr	BASEPRI_MAX, r2
   2aa0c:	f3bf 8f6f 	isb	sy
	for (;;) {
   2aa10:	e7fe      	b.n	2aa10 <arch_system_halt+0x10>

0002aa12 <k_heap_init>:
{
   2aa12:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2aa14:	f100 040c 	add.w	r4, r0, #12
   2aa18:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2aa1c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2aa1e:	f7fb bb28 	b.w	26072 <sys_heap_init>

0002aa22 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2aa22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa26:	b085      	sub	sp, #20
   2aa28:	4606      	mov	r6, r0
   2aa2a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2aa2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2aa30:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2aa32:	f000 fbcb 	bl	2b1cc <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2aa36:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2aa3a:	4605      	mov	r5, r0
   2aa3c:	460f      	mov	r7, r1
   2aa3e:	f04f 0320 	mov.w	r3, #32
   2aa42:	f3ef 8411 	mrs	r4, BASEPRI
   2aa46:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa4a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2aa4e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2aa52:	464a      	mov	r2, r9
   2aa54:	4641      	mov	r1, r8
   2aa56:	4630      	mov	r0, r6
   2aa58:	f7fb faa3 	bl	25fa2 <sys_heap_aligned_alloc>
   2aa5c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2aa5e:	f7fa fe4b 	bl	256f8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2aa62:	9b03      	ldr	r3, [sp, #12]
   2aa64:	b13b      	cbz	r3, 2aa76 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2aa66:	f384 8811 	msr	BASEPRI, r4
   2aa6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2aa6e:	4618      	mov	r0, r3
   2aa70:	b005      	add	sp, #20
   2aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2aa76:	1a28      	subs	r0, r5, r0
   2aa78:	eb67 0101 	sbc.w	r1, r7, r1
   2aa7c:	2801      	cmp	r0, #1
   2aa7e:	f171 0200 	sbcs.w	r2, r1, #0
   2aa82:	dbf0      	blt.n	2aa66 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2aa84:	e9cd 0100 	strd	r0, r1, [sp]
   2aa88:	465a      	mov	r2, fp
   2aa8a:	4621      	mov	r1, r4
   2aa8c:	4650      	mov	r0, sl
   2aa8e:	f7fa fb23 	bl	250d8 <z_pend_curr>
	__asm__ volatile(
   2aa92:	f04f 0320 	mov.w	r3, #32
   2aa96:	f3ef 8411 	mrs	r4, BASEPRI
   2aa9a:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa9e:	f3bf 8f6f 	isb	sy
   2aaa2:	e7d6      	b.n	2aa52 <k_heap_aligned_alloc+0x30>

0002aaa4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2aaa4:	b538      	push	{r3, r4, r5, lr}
   2aaa6:	4604      	mov	r4, r0
   2aaa8:	f04f 0320 	mov.w	r3, #32
   2aaac:	f3ef 8511 	mrs	r5, BASEPRI
   2aab0:	f383 8812 	msr	BASEPRI_MAX, r3
   2aab4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2aab8:	f7fb fa3b 	bl	25f32 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2aabc:	f104 000c 	add.w	r0, r4, #12
   2aac0:	f000 fb0c 	bl	2b0dc <z_unpend_all>
   2aac4:	b130      	cbz	r0, 2aad4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2aac6:	4629      	mov	r1, r5
   2aac8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2aacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2aad0:	f7fa b9b0 	b.w	24e34 <z_reschedule>
	__asm__ volatile(
   2aad4:	f385 8811 	msr	BASEPRI, r5
   2aad8:	f3bf 8f6f 	isb	sy
}
   2aadc:	bd38      	pop	{r3, r4, r5, pc}

0002aade <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2aade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aae0:	4604      	mov	r4, r0
   2aae2:	460d      	mov	r5, r1
	__asm__ volatile(
   2aae4:	f04f 0320 	mov.w	r3, #32
   2aae8:	f3ef 8611 	mrs	r6, BASEPRI
   2aaec:	f383 8812 	msr	BASEPRI_MAX, r3
   2aaf0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2aaf4:	6947      	ldr	r7, [r0, #20]
   2aaf6:	b97f      	cbnz	r7, 2ab18 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2aaf8:	f000 fad8 	bl	2b0ac <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2aafc:	b160      	cbz	r0, 2ab18 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2aafe:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ab00:	6142      	str	r2, [r0, #20]
   2ab02:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
   2ab06:	f000 fa60 	bl	2afca <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2ab0a:	4631      	mov	r1, r6
   2ab0c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2ab10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2ab14:	f7fa b98e 	b.w	24e34 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2ab18:	682b      	ldr	r3, [r5, #0]
   2ab1a:	6962      	ldr	r2, [r4, #20]
   2ab1c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2ab1e:	682b      	ldr	r3, [r5, #0]
   2ab20:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2ab22:	69a3      	ldr	r3, [r4, #24]
   2ab24:	3b01      	subs	r3, #1
   2ab26:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2ab28:	f386 8811 	msr	BASEPRI, r6
   2ab2c:	f3bf 8f6f 	isb	sy
}
   2ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ab32 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ab32:	f3ef 8005 	mrs	r0, IPSR
}
   2ab36:	3800      	subs	r0, #0
   2ab38:	bf18      	it	ne
   2ab3a:	2001      	movne	r0, #1
   2ab3c:	4770      	bx	lr

0002ab3e <k_thread_name_get>:
}
   2ab3e:	3078      	adds	r0, #120	; 0x78
   2ab40:	4770      	bx	lr

0002ab42 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2ab42:	f7fa ba6d 	b.w	25020 <z_sched_start>

0002ab46 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
   2ab46:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
   2ab48:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
   2ab4c:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   2ab4e:	4293      	cmp	r3, r2
   2ab50:	d102      	bne.n	2ab58 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
   2ab52:	600b      	str	r3, [r1, #0]

	return 0;
}
   2ab54:	2000      	movs	r0, #0
   2ab56:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   2ab58:	5ce0      	ldrb	r0, [r4, r3]
   2ab5a:	28aa      	cmp	r0, #170	; 0xaa
   2ab5c:	d1f9      	bne.n	2ab52 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   2ab5e:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   2ab60:	e7f5      	b.n	2ab4e <z_impl_k_thread_stack_space_get+0x8>

0002ab62 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   2ab62:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   2ab66:	4770      	bx	lr

0002ab68 <z_pm_save_idle_exit>:
{
   2ab68:	b508      	push	{r3, lr}
	pm_system_resume();
   2ab6a:	f7e0 feaf 	bl	b8cc <pm_system_resume>
}
   2ab6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2ab72:	f7ff bcef 	b.w	2a554 <sys_clock_idle_exit>

0002ab76 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2ab76:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ab7a:	428b      	cmp	r3, r1
   2ab7c:	d001      	beq.n	2ab82 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2ab7e:	f7fa babf 	b.w	25100 <z_set_prio>
}
   2ab82:	2000      	movs	r0, #0
   2ab84:	4770      	bx	lr

0002ab86 <z_impl_k_mutex_init>:
{
   2ab86:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2ab88:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2ab8a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2ab8e:	e9c3 3300 	strd	r3, r3, [r3]
}
   2ab92:	4770      	bx	lr

0002ab94 <queue_insert>:
{
   2ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ab98:	4699      	mov	r9, r3
   2ab9a:	4604      	mov	r4, r0
   2ab9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2aba0:	460d      	mov	r5, r1
   2aba2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2aba4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2aba8:	f04f 0220 	mov.w	r2, #32
   2abac:	f3ef 8711 	mrs	r7, BASEPRI
   2abb0:	f382 8812 	msr	BASEPRI_MAX, r2
   2abb4:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2abb8:	b103      	cbz	r3, 2abbc <queue_insert+0x28>
	return list->tail;
   2abba:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2abbc:	4630      	mov	r0, r6
   2abbe:	f000 fa75 	bl	2b0ac <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2abc2:	b160      	cbz	r0, 2abde <queue_insert+0x4a>
   2abc4:	2400      	movs	r4, #0
   2abc6:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
   2abca:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2abce:	f000 f9fc 	bl	2afca <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2abd2:	4630      	mov	r0, r6
   2abd4:	4639      	mov	r1, r7
   2abd6:	f7fa f92d 	bl	24e34 <z_reschedule>
	return 0;
   2abda:	2000      	movs	r0, #0
   2abdc:	e00c      	b.n	2abf8 <queue_insert+0x64>
	if (alloc) {
   2abde:	f1b9 0f00 	cmp.w	r9, #0
   2abe2:	d01b      	beq.n	2ac1c <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2abe4:	2108      	movs	r1, #8
   2abe6:	f7fa febd 	bl	25964 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2abea:	b938      	cbnz	r0, 2abfc <queue_insert+0x68>
	__asm__ volatile(
   2abec:	f387 8811 	msr	BASEPRI, r7
   2abf0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2abf4:	f06f 000b 	mvn.w	r0, #11
}
   2abf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2abfc:	2301      	movs	r3, #1
		anode->data = data;
   2abfe:	f8c0 8004 	str.w	r8, [r0, #4]
   2ac02:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ac04:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac06:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2ac0a:	b95d      	cbnz	r5, 2ac24 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac0c:	6823      	ldr	r3, [r4, #0]
   2ac0e:	4313      	orrs	r3, r2
   2ac10:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ac12:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2ac14:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ac16:	b973      	cbnz	r3, 2ac36 <queue_insert+0xa2>
	list->tail = node;
   2ac18:	6060      	str	r0, [r4, #4]
}
   2ac1a:	e00c      	b.n	2ac36 <queue_insert+0xa2>
	node->next_and_flags = flags;
   2ac1c:	f8c8 9000 	str.w	r9, [r8]
}
   2ac20:	4640      	mov	r0, r8
   2ac22:	e7ef      	b.n	2ac04 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ac24:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2ac26:	f033 0303 	bics.w	r3, r3, #3
   2ac2a:	d110      	bne.n	2ac4e <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac2c:	6002      	str	r2, [r0, #0]
	return list->tail;
   2ac2e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2ac30:	b93a      	cbnz	r2, 2ac42 <queue_insert+0xae>
	list->head = node;
   2ac32:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ac36:	2104      	movs	r1, #4
   2ac38:	f104 0010 	add.w	r0, r4, #16
   2ac3c:	f000 fc58 	bl	2b4f0 <z_handle_obj_poll_events>
   2ac40:	e7c7      	b.n	2abd2 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ac42:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac44:	f003 0303 	and.w	r3, r3, #3
   2ac48:	4303      	orrs	r3, r0
   2ac4a:	6013      	str	r3, [r2, #0]
   2ac4c:	e7e4      	b.n	2ac18 <queue_insert+0x84>
   2ac4e:	4313      	orrs	r3, r2
   2ac50:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ac52:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac54:	f003 0303 	and.w	r3, r3, #3
   2ac58:	4303      	orrs	r3, r0
   2ac5a:	602b      	str	r3, [r5, #0]
}
   2ac5c:	e7eb      	b.n	2ac36 <queue_insert+0xa2>

0002ac5e <z_queue_node_peek>:
{
   2ac5e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2ac60:	4604      	mov	r4, r0
   2ac62:	b130      	cbz	r0, 2ac72 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ac64:	6802      	ldr	r2, [r0, #0]
   2ac66:	0793      	lsls	r3, r2, #30
   2ac68:	d003      	beq.n	2ac72 <z_queue_node_peek+0x14>
		ret = anode->data;
   2ac6a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2ac6c:	b109      	cbz	r1, 2ac72 <z_queue_node_peek+0x14>
			k_free(anode);
   2ac6e:	f000 fc5a 	bl	2b526 <k_free>
}
   2ac72:	4620      	mov	r0, r4
   2ac74:	bd10      	pop	{r4, pc}

0002ac76 <z_impl_k_queue_init>:
	list->head = NULL;
   2ac76:	2300      	movs	r3, #0
	list->tail = NULL;
   2ac78:	e9c0 3300 	strd	r3, r3, [r0]
   2ac7c:	f100 0308 	add.w	r3, r0, #8
   2ac80:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2ac84:	f100 0310 	add.w	r3, r0, #16
   2ac88:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2ac8c:	4770      	bx	lr

0002ac8e <k_queue_append>:
{
   2ac8e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2ac90:	2301      	movs	r3, #1
   2ac92:	9300      	str	r3, [sp, #0]
   2ac94:	2300      	movs	r3, #0
{
   2ac96:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ac98:	4619      	mov	r1, r3
   2ac9a:	f7ff ff7b 	bl	2ab94 <queue_insert>
}
   2ac9e:	b003      	add	sp, #12
   2aca0:	f85d fb04 	ldr.w	pc, [sp], #4

0002aca4 <k_queue_prepend>:
{
   2aca4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2aca6:	2300      	movs	r3, #0
{
   2aca8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2acaa:	9300      	str	r3, [sp, #0]
   2acac:	4619      	mov	r1, r3
   2acae:	f7ff ff71 	bl	2ab94 <queue_insert>
}
   2acb2:	b003      	add	sp, #12
   2acb4:	f85d fb04 	ldr.w	pc, [sp], #4

0002acb8 <k_queue_append_list>:
{
   2acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2acbc:	4605      	mov	r5, r0
   2acbe:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2acc0:	460c      	mov	r4, r1
   2acc2:	b391      	cbz	r1, 2ad2a <k_queue_append_list+0x72>
   2acc4:	b38a      	cbz	r2, 2ad2a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2acc6:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2acca:	f04f 0320 	mov.w	r3, #32
   2acce:	f3ef 8811 	mrs	r8, BASEPRI
   2acd2:	f383 8812 	msr	BASEPRI_MAX, r3
   2acd6:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2acda:	4638      	mov	r0, r7
   2acdc:	f000 f9e6 	bl	2b0ac <z_unpend_first_thread>
   2ace0:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2ace4:	b920      	cbnz	r0, 2acf0 <k_queue_append_list+0x38>
	return list->tail;
   2ace6:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2ace8:	b9ca      	cbnz	r2, 2ad1e <k_queue_append_list+0x66>
	list->head = node;
   2acea:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2acec:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2acee:	e00a      	b.n	2ad06 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2acf0:	6144      	str	r4, [r0, #20]
   2acf2:	f8c0 90b0 	str.w	r9, [r0, #176]	; 0xb0
	z_ready_thread(thread);
   2acf6:	f000 f968 	bl	2afca <z_ready_thread>
		head = *(void **)head;
   2acfa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2acfc:	4638      	mov	r0, r7
   2acfe:	f000 f9d5 	bl	2b0ac <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2ad02:	2c00      	cmp	r4, #0
   2ad04:	d1ee      	bne.n	2ace4 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ad06:	2104      	movs	r1, #4
   2ad08:	f105 0010 	add.w	r0, r5, #16
   2ad0c:	f000 fbf0 	bl	2b4f0 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2ad10:	4638      	mov	r0, r7
   2ad12:	4641      	mov	r1, r8
   2ad14:	f7fa f88e 	bl	24e34 <z_reschedule>
	return 0;
   2ad18:	2000      	movs	r0, #0
}
   2ad1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ad1e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ad20:	f003 0303 	and.w	r3, r3, #3
   2ad24:	431c      	orrs	r4, r3
   2ad26:	6014      	str	r4, [r2, #0]
}
   2ad28:	e7e0      	b.n	2acec <k_queue_append_list+0x34>
		return -EINVAL;
   2ad2a:	f06f 0015 	mvn.w	r0, #21
   2ad2e:	e7f4      	b.n	2ad1a <k_queue_append_list+0x62>

0002ad30 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ad30:	b15a      	cbz	r2, 2ad4a <z_impl_k_sem_init+0x1a>
   2ad32:	428a      	cmp	r2, r1
   2ad34:	d309      	bcc.n	2ad4a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ad36:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ad3a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2ad3e:	e9c0 0000 	strd	r0, r0, [r0]
   2ad42:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ad46:	2000      	movs	r0, #0
   2ad48:	4770      	bx	lr
		return -EINVAL;
   2ad4a:	f06f 0015 	mvn.w	r0, #21
}
   2ad4e:	4770      	bx	lr

0002ad50 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2ad50:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2ad52:	2301      	movs	r3, #1
   2ad54:	408b      	lsls	r3, r1
   2ad56:	ea22 0303 	bic.w	r3, r2, r3
   2ad5a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2ad5c:	fa22 f001 	lsr.w	r0, r2, r1
}
   2ad60:	f000 0001 	and.w	r0, r0, #1
   2ad64:	4770      	bx	lr

0002ad66 <unschedule_locked>:
{
   2ad66:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ad68:	2103      	movs	r1, #3
{
   2ad6a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ad6c:	300c      	adds	r0, #12
   2ad6e:	f7ff ffef 	bl	2ad50 <flag_test_and_clear>
   2ad72:	4604      	mov	r4, r0
   2ad74:	b118      	cbz	r0, 2ad7e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2ad76:	f105 0010 	add.w	r0, r5, #16
   2ad7a:	f000 f9dd 	bl	2b138 <z_abort_timeout>
}
   2ad7e:	4620      	mov	r0, r4
   2ad80:	bd38      	pop	{r3, r4, r5, pc}

0002ad82 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2ad82:	b120      	cbz	r0, 2ad8e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2ad84:	2200      	movs	r2, #0
   2ad86:	4611      	mov	r1, r2
   2ad88:	30c0      	adds	r0, #192	; 0xc0
   2ad8a:	f000 b9b7 	b.w	2b0fc <z_sched_wake>
}
   2ad8e:	4770      	bx	lr

0002ad90 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2ad90:	68c3      	ldr	r3, [r0, #12]
{
   2ad92:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ad94:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2ad98:	079b      	lsls	r3, r3, #30
{
   2ad9a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ad9c:	d416      	bmi.n	2adcc <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2ad9e:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ada0:	2102      	movs	r1, #2
   2ada2:	300c      	adds	r0, #12
   2ada4:	f7ff ffd4 	bl	2ad50 <flag_test_and_clear>
   2ada8:	b180      	cbz	r0, 2adcc <cancel_async_locked+0x3c>
	return list->head;
   2adaa:	f8d6 20b8 	ldr.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2adae:	b16a      	cbz	r2, 2adcc <cancel_async_locked+0x3c>
   2adb0:	4294      	cmp	r4, r2
   2adb2:	d11b      	bne.n	2adec <cancel_async_locked+0x5c>
	return node->next;
   2adb4:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2adb6:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2adba:	b98d      	cbnz	r5, 2ade0 <cancel_async_locked+0x50>
   2adbc:	428c      	cmp	r4, r1
	list->head = node;
   2adbe:	f8c6 20b8 	str.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
   2adc2:	d101      	bne.n	2adc8 <cancel_async_locked+0x38>
	list->tail = node;
   2adc4:	f8c6 20bc 	str.w	r2, [r6, #188]	; 0xbc
	parent->next = child;
   2adc8:	2300      	movs	r3, #0
   2adca:	6023      	str	r3, [r4, #0]
	return *flagp;
   2adcc:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2adce:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2add2:	bf1e      	ittt	ne
   2add4:	f043 0302 	orrne.w	r3, r3, #2
   2add8:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2adda:	f003 000f 	andne.w	r0, r3, #15
}
   2adde:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2ade0:	428c      	cmp	r4, r1
	parent->next = child;
   2ade2:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2ade4:	bf08      	it	eq
   2ade6:	f8c6 50bc 	streq.w	r5, [r6, #188]	; 0xbc
}
   2adea:	e7ed      	b.n	2adc8 <cancel_async_locked+0x38>
	return node->next;
   2adec:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2adee:	6812      	ldr	r2, [r2, #0]
   2adf0:	e7dd      	b.n	2adae <cancel_async_locked+0x1e>

0002adf2 <work_timeout>:
{
   2adf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2adf4:	4604      	mov	r4, r0
   2adf6:	f04f 0320 	mov.w	r3, #32
   2adfa:	f3ef 8511 	mrs	r5, BASEPRI
   2adfe:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae02:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2ae06:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2ae08:	f1a0 0610 	sub.w	r6, r0, #16
   2ae0c:	2103      	movs	r1, #3
   2ae0e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2ae10:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2ae12:	f7ff ff9d 	bl	2ad50 <flag_test_and_clear>
   2ae16:	b128      	cbz	r0, 2ae24 <work_timeout+0x32>
		queue = dw->queue;
   2ae18:	69a3      	ldr	r3, [r4, #24]
   2ae1a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2ae1c:	a901      	add	r1, sp, #4
   2ae1e:	4630      	mov	r0, r6
   2ae20:	f7f9 fed0 	bl	24bc4 <submit_to_queue_locked>
	__asm__ volatile(
   2ae24:	f385 8811 	msr	BASEPRI, r5
   2ae28:	f3bf 8f6f 	isb	sy
}
   2ae2c:	b002      	add	sp, #8
   2ae2e:	bd70      	pop	{r4, r5, r6, pc}

0002ae30 <k_work_init>:
{
   2ae30:	b538      	push	{r3, r4, r5, lr}
   2ae32:	4604      	mov	r4, r0
   2ae34:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2ae36:	2210      	movs	r2, #16
   2ae38:	2100      	movs	r1, #0
   2ae3a:	f7fd fcc4 	bl	287c6 <memset>
   2ae3e:	6065      	str	r5, [r4, #4]
}
   2ae40:	bd38      	pop	{r3, r4, r5, pc}

0002ae42 <k_work_submit_to_queue>:
{
   2ae42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ae44:	9001      	str	r0, [sp, #4]
   2ae46:	4608      	mov	r0, r1
	__asm__ volatile(
   2ae48:	f04f 0320 	mov.w	r3, #32
   2ae4c:	f3ef 8511 	mrs	r5, BASEPRI
   2ae50:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae54:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2ae58:	a901      	add	r1, sp, #4
   2ae5a:	f7f9 feb3 	bl	24bc4 <submit_to_queue_locked>
   2ae5e:	4604      	mov	r4, r0
	__asm__ volatile(
   2ae60:	f385 8811 	msr	BASEPRI, r5
   2ae64:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2ae68:	2800      	cmp	r0, #0
   2ae6a:	dd04      	ble.n	2ae76 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2ae6c:	f7fa fa92 	bl	25394 <z_impl_k_is_preempt_thread>
   2ae70:	b108      	cbz	r0, 2ae76 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2ae72:	f7fa f9e7 	bl	25244 <z_impl_k_yield>
}
   2ae76:	4620      	mov	r0, r4
   2ae78:	b003      	add	sp, #12
   2ae7a:	bd30      	pop	{r4, r5, pc}

0002ae7c <k_work_init_delayable>:
{
   2ae7c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2ae7e:	2230      	movs	r2, #48	; 0x30
{
   2ae80:	4604      	mov	r4, r0
   2ae82:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2ae84:	2100      	movs	r1, #0
   2ae86:	f7fd fc9e 	bl	287c6 <memset>
   2ae8a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2ae8e:	6065      	str	r5, [r4, #4]
   2ae90:	60e3      	str	r3, [r4, #12]
}
   2ae92:	bd38      	pop	{r3, r4, r5, pc}

0002ae94 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2ae94:	b538      	push	{r3, r4, r5, lr}
   2ae96:	4604      	mov	r4, r0
	__asm__ volatile(
   2ae98:	f04f 0320 	mov.w	r3, #32
   2ae9c:	f3ef 8511 	mrs	r5, BASEPRI
   2aea0:	f383 8812 	msr	BASEPRI_MAX, r3
   2aea4:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2aea8:	f7ff ff5d 	bl	2ad66 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2aeac:	4620      	mov	r0, r4
   2aeae:	f7ff ff6f 	bl	2ad90 <cancel_async_locked>
	__asm__ volatile(
   2aeb2:	f385 8811 	msr	BASEPRI, r5
   2aeb6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2aeba:	bd38      	pop	{r3, r4, r5, pc}

0002aebc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aebe:	4604      	mov	r4, r0
   2aec0:	460d      	mov	r5, r1
	__asm__ volatile(
   2aec2:	f04f 0320 	mov.w	r3, #32
   2aec6:	f3ef 8711 	mrs	r7, BASEPRI
   2aeca:	f383 8812 	msr	BASEPRI_MAX, r3
   2aece:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2aed2:	68c3      	ldr	r3, [r0, #12]
   2aed4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2aed8:	2b00      	cmp	r3, #0
   2aeda:	bf14      	ite	ne
   2aedc:	2601      	movne	r6, #1
   2aede:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2aee0:	d009      	beq.n	2aef6 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2aee2:	f7ff ff40 	bl	2ad66 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2aee6:	4620      	mov	r0, r4
   2aee8:	f7ff ff52 	bl	2ad90 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2aeec:	4629      	mov	r1, r5
   2aeee:	4620      	mov	r0, r4
   2aef0:	f7f9 fe4a 	bl	24b88 <cancel_sync_locked>
   2aef4:	4603      	mov	r3, r0
	__asm__ volatile(
   2aef6:	f387 8811 	msr	BASEPRI, r7
   2aefa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2aefe:	b13b      	cbz	r3, 2af10 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2af00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2af04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2af08:	f105 0008 	add.w	r0, r5, #8
   2af0c:	f7f9 fd64 	bl	249d8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2af10:	4630      	mov	r0, r6
   2af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002af14 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2af14:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2af18:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2af1a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2af1c:	2300      	movs	r3, #0
	node->prev = NULL;
   2af1e:	e9c0 3300 	strd	r3, r3, [r0]
}
   2af22:	4770      	bx	lr

0002af24 <unpend_thread_no_timeout>:
{
   2af24:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2af26:	f7ff fff5 	bl	2af14 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2af2a:	7b43      	ldrb	r3, [r0, #13]
   2af2c:	f023 0302 	bic.w	r3, r3, #2
   2af30:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2af32:	2300      	movs	r3, #0
   2af34:	6083      	str	r3, [r0, #8]
}
   2af36:	bd08      	pop	{r3, pc}

0002af38 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2af38:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2af3c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2af40:	4283      	cmp	r3, r0
		return b2 - b1;
   2af42:	bf14      	ite	ne
   2af44:	1ac0      	subne	r0, r0, r3
	return 0;
   2af46:	2000      	moveq	r0, #0
}
   2af48:	4770      	bx	lr

0002af4a <z_unpend_thread_no_timeout>:
{
   2af4a:	b508      	push	{r3, lr}
	__asm__ volatile(
   2af4c:	f04f 0320 	mov.w	r3, #32
   2af50:	f3ef 8111 	mrs	r1, BASEPRI
   2af54:	f383 8812 	msr	BASEPRI_MAX, r3
   2af58:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2af5c:	f7ff ffe2 	bl	2af24 <unpend_thread_no_timeout>
	__asm__ volatile(
   2af60:	f381 8811 	msr	BASEPRI, r1
   2af64:	f3bf 8f6f 	isb	sy
}
   2af68:	bd08      	pop	{r3, pc}

0002af6a <z_unpend_thread>:
{
   2af6a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2af6c:	f04f 0320 	mov.w	r3, #32
   2af70:	f3ef 8411 	mrs	r4, BASEPRI
   2af74:	f383 8812 	msr	BASEPRI_MAX, r3
   2af78:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2af7c:	f7ff ffd2 	bl	2af24 <unpend_thread_no_timeout>
	__asm__ volatile(
   2af80:	f384 8811 	msr	BASEPRI, r4
   2af84:	f3bf 8f6f 	isb	sy
}
   2af88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2af8c:	3018      	adds	r0, #24
   2af8e:	f000 b8d3 	b.w	2b138 <z_abort_timeout>

0002af92 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2af92:	4603      	mov	r3, r0
   2af94:	b920      	cbnz	r0, 2afa0 <z_reschedule_irqlock+0xe>
   2af96:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2af9a:	b90a      	cbnz	r2, 2afa0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2af9c:	f7e0 bf2e 	b.w	bdfc <arch_swap>
   2afa0:	f383 8811 	msr	BASEPRI, r3
   2afa4:	f3bf 8f6f 	isb	sy
}
   2afa8:	4770      	bx	lr

0002afaa <z_reschedule_unlocked>:
	__asm__ volatile(
   2afaa:	f04f 0320 	mov.w	r3, #32
   2afae:	f3ef 8011 	mrs	r0, BASEPRI
   2afb2:	f383 8812 	msr	BASEPRI_MAX, r3
   2afb6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2afba:	f7ff bfea 	b.w	2af92 <z_reschedule_irqlock>

0002afbe <z_priq_dumb_best>:
{
   2afbe:	4603      	mov	r3, r0
	return list->head == list;
   2afc0:	6800      	ldr	r0, [r0, #0]
}
   2afc2:	4283      	cmp	r3, r0
   2afc4:	bf08      	it	eq
   2afc6:	2000      	moveq	r0, #0
   2afc8:	4770      	bx	lr

0002afca <z_ready_thread>:
{
   2afca:	b510      	push	{r4, lr}
   2afcc:	f04f 0320 	mov.w	r3, #32
   2afd0:	f3ef 8411 	mrs	r4, BASEPRI
   2afd4:	f383 8812 	msr	BASEPRI_MAX, r3
   2afd8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2afdc:	f7f9 ffea 	bl	24fb4 <ready_thread>
	__asm__ volatile(
   2afe0:	f384 8811 	msr	BASEPRI, r4
   2afe4:	f3bf 8f6f 	isb	sy
}
   2afe8:	bd10      	pop	{r4, pc}

0002afea <z_thread_timeout>:
{
   2afea:	b510      	push	{r4, lr}
   2afec:	4601      	mov	r1, r0
	__asm__ volatile(
   2afee:	f04f 0320 	mov.w	r3, #32
   2aff2:	f3ef 8411 	mrs	r4, BASEPRI
   2aff6:	f383 8812 	msr	BASEPRI_MAX, r3
   2affa:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2affe:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2b002:	f013 0f28 	tst.w	r3, #40	; 0x28
   2b006:	d10d      	bne.n	2b024 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2b008:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2b00c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2b00e:	b10b      	cbz	r3, 2b014 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2b010:	f7ff ff88 	bl	2af24 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b014:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2b018:	f023 0314 	bic.w	r3, r3, #20
   2b01c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2b020:	f7f9 ffc8 	bl	24fb4 <ready_thread>
	__asm__ volatile(
   2b024:	f384 8811 	msr	BASEPRI, r4
   2b028:	f3bf 8f6f 	isb	sy
}
   2b02c:	bd10      	pop	{r4, pc}

0002b02e <add_to_waitq_locked>:
{
   2b02e:	b538      	push	{r3, r4, r5, lr}
   2b030:	4604      	mov	r4, r0
   2b032:	460d      	mov	r5, r1
	unready_thread(thread);
   2b034:	f7fa f812 	bl	2505c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2b038:	7b63      	ldrb	r3, [r4, #13]
   2b03a:	f043 0302 	orr.w	r3, r3, #2
   2b03e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2b040:	b195      	cbz	r5, 2b068 <add_to_waitq_locked+0x3a>
   2b042:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2b044:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b046:	429d      	cmp	r5, r3
   2b048:	d015      	beq.n	2b076 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b04a:	b1a3      	cbz	r3, 2b076 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2b04c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2b050:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2b054:	4291      	cmp	r1, r2
   2b056:	d008      	beq.n	2b06a <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2b058:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2b05a:	2a00      	cmp	r2, #0
   2b05c:	dd05      	ble.n	2b06a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2b05e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b060:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2b064:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b066:	605c      	str	r4, [r3, #4]
}
   2b068:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2b06a:	686a      	ldr	r2, [r5, #4]
   2b06c:	4293      	cmp	r3, r2
   2b06e:	d002      	beq.n	2b076 <add_to_waitq_locked+0x48>
   2b070:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b072:	2b00      	cmp	r3, #0
   2b074:	d1ec      	bne.n	2b050 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2b076:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2b078:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2b07c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b07e:	606c      	str	r4, [r5, #4]
}
   2b080:	e7f2      	b.n	2b068 <add_to_waitq_locked+0x3a>

0002b082 <z_unpend1_no_timeout>:
{
   2b082:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b084:	f04f 0320 	mov.w	r3, #32
   2b088:	f3ef 8411 	mrs	r4, BASEPRI
   2b08c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b090:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2b094:	f7ff ff93 	bl	2afbe <z_priq_dumb_best>
		if (thread != NULL) {
   2b098:	4601      	mov	r1, r0
   2b09a:	b108      	cbz	r0, 2b0a0 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2b09c:	f7ff ff42 	bl	2af24 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b0a0:	f384 8811 	msr	BASEPRI, r4
   2b0a4:	f3bf 8f6f 	isb	sy
}
   2b0a8:	4608      	mov	r0, r1
   2b0aa:	bd10      	pop	{r4, pc}

0002b0ac <z_unpend_first_thread>:
{
   2b0ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b0ae:	f04f 0320 	mov.w	r3, #32
   2b0b2:	f3ef 8511 	mrs	r5, BASEPRI
   2b0b6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b0ba:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2b0be:	f7ff ff7e 	bl	2afbe <z_priq_dumb_best>
		if (thread != NULL) {
   2b0c2:	4604      	mov	r4, r0
   2b0c4:	b120      	cbz	r0, 2b0d0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2b0c6:	f7ff ff2d 	bl	2af24 <unpend_thread_no_timeout>
   2b0ca:	3018      	adds	r0, #24
   2b0cc:	f000 f834 	bl	2b138 <z_abort_timeout>
	__asm__ volatile(
   2b0d0:	f385 8811 	msr	BASEPRI, r5
   2b0d4:	f3bf 8f6f 	isb	sy
}
   2b0d8:	4620      	mov	r0, r4
   2b0da:	bd38      	pop	{r3, r4, r5, pc}

0002b0dc <z_unpend_all>:
{
   2b0dc:	b538      	push	{r3, r4, r5, lr}
   2b0de:	4605      	mov	r5, r0
	int need_sched = 0;
   2b0e0:	2000      	movs	r0, #0
	return list->head == list;
   2b0e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b0e4:	42a5      	cmp	r5, r4
   2b0e6:	d000      	beq.n	2b0ea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b0e8:	b904      	cbnz	r4, 2b0ec <z_unpend_all+0x10>
}
   2b0ea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2b0ec:	4620      	mov	r0, r4
   2b0ee:	f7ff ff3c 	bl	2af6a <z_unpend_thread>
		z_ready_thread(thread);
   2b0f2:	4620      	mov	r0, r4
   2b0f4:	f7ff ff69 	bl	2afca <z_ready_thread>
		need_sched = 1;
   2b0f8:	2001      	movs	r0, #1
   2b0fa:	e7f2      	b.n	2b0e2 <z_unpend_all+0x6>

0002b0fc <z_sched_wake>:
{
   2b0fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b0fe:	f04f 0320 	mov.w	r3, #32
   2b102:	f3ef 8511 	mrs	r5, BASEPRI
   2b106:	f383 8812 	msr	BASEPRI_MAX, r3
   2b10a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2b10e:	f7ff ff56 	bl	2afbe <z_priq_dumb_best>
		if (thread != NULL) {
   2b112:	4604      	mov	r4, r0
   2b114:	b158      	cbz	r0, 2b12e <z_sched_wake+0x32>
   2b116:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
   2b11a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2b11c:	f7ff ff02 	bl	2af24 <unpend_thread_no_timeout>
   2b120:	3018      	adds	r0, #24
   2b122:	f000 f809 	bl	2b138 <z_abort_timeout>
			ready_thread(thread);
   2b126:	4620      	mov	r0, r4
   2b128:	f7f9 ff44 	bl	24fb4 <ready_thread>
			ret = true;
   2b12c:	2001      	movs	r0, #1
	__asm__ volatile(
   2b12e:	f385 8811 	msr	BASEPRI, r5
   2b132:	f3bf 8f6f 	isb	sy
}
   2b136:	bd38      	pop	{r3, r4, r5, pc}

0002b138 <z_abort_timeout>:
{
   2b138:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b13a:	f04f 0220 	mov.w	r2, #32
   2b13e:	f3ef 8411 	mrs	r4, BASEPRI
   2b142:	f382 8812 	msr	BASEPRI_MAX, r2
   2b146:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2b14a:	6803      	ldr	r3, [r0, #0]
   2b14c:	b13b      	cbz	r3, 2b15e <z_abort_timeout+0x26>
			remove_timeout(to);
   2b14e:	f7fa f9e3 	bl	25518 <remove_timeout>
			ret = 0;
   2b152:	2000      	movs	r0, #0
	__asm__ volatile(
   2b154:	f384 8811 	msr	BASEPRI, r4
   2b158:	f3bf 8f6f 	isb	sy
}
   2b15c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b15e:	f06f 0015 	mvn.w	r0, #21
   2b162:	e7f7      	b.n	2b154 <z_abort_timeout+0x1c>

0002b164 <z_get_next_timeout_expiry>:
{
   2b164:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b166:	f04f 0320 	mov.w	r3, #32
   2b16a:	f3ef 8411 	mrs	r4, BASEPRI
   2b16e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b172:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2b176:	f7fa f9a9 	bl	254cc <next_timeout>
	__asm__ volatile(
   2b17a:	f384 8811 	msr	BASEPRI, r4
   2b17e:	f3bf 8f6f 	isb	sy
}
   2b182:	bd10      	pop	{r4, pc}

0002b184 <z_set_timeout_expiry>:
{
   2b184:	b570      	push	{r4, r5, r6, lr}
   2b186:	4604      	mov	r4, r0
   2b188:	460d      	mov	r5, r1
	__asm__ volatile(
   2b18a:	f04f 0320 	mov.w	r3, #32
   2b18e:	f3ef 8611 	mrs	r6, BASEPRI
   2b192:	f383 8812 	msr	BASEPRI_MAX, r3
   2b196:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2b19a:	f7fa f997 	bl	254cc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2b19e:	2801      	cmp	r0, #1
   2b1a0:	dd05      	ble.n	2b1ae <z_set_timeout_expiry+0x2a>
   2b1a2:	42a0      	cmp	r0, r4
   2b1a4:	db03      	blt.n	2b1ae <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2b1a6:	4629      	mov	r1, r5
   2b1a8:	4620      	mov	r0, r4
   2b1aa:	f7f6 fe37 	bl	21e1c <sys_clock_set_timeout>
	__asm__ volatile(
   2b1ae:	f386 8811 	msr	BASEPRI, r6
   2b1b2:	f3bf 8f6f 	isb	sy
}
   2b1b6:	bd70      	pop	{r4, r5, r6, pc}

0002b1b8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2b1b8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2b1ba:	f7fa fa9d 	bl	256f8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2b1be:	bd08      	pop	{r3, pc}

0002b1c0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2b1c0:	f7fa ba9a 	b.w	256f8 <sys_clock_tick_get>

0002b1c4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2b1c4:	b108      	cbz	r0, 2b1ca <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2b1c6:	f7e1 bc47 	b.w	ca58 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2b1ca:	4770      	bx	lr

0002b1cc <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b1cc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b1d0:	bf08      	it	eq
   2b1d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2b1d6:	b538      	push	{r3, r4, r5, lr}
   2b1d8:	4605      	mov	r5, r0
   2b1da:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b1dc:	d01d      	beq.n	2b21a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b1de:	ea51 0300 	orrs.w	r3, r1, r0
   2b1e2:	d103      	bne.n	2b1ec <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2b1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2b1e8:	f7fa ba86 	b.w	256f8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2b1ec:	f06f 0301 	mvn.w	r3, #1
   2b1f0:	1a18      	subs	r0, r3, r0
   2b1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b1f6:	eb63 0101 	sbc.w	r1, r3, r1
   2b1fa:	2900      	cmp	r1, #0
   2b1fc:	da0c      	bge.n	2b218 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2b1fe:	f7fa fa7b 	bl	256f8 <sys_clock_tick_get>
   2b202:	2d01      	cmp	r5, #1
   2b204:	4622      	mov	r2, r4
   2b206:	f174 0400 	sbcs.w	r4, r4, #0
   2b20a:	462b      	mov	r3, r5
   2b20c:	bfbc      	itt	lt
   2b20e:	2301      	movlt	r3, #1
   2b210:	2200      	movlt	r2, #0
   2b212:	1818      	adds	r0, r3, r0
   2b214:	eb41 0102 	adc.w	r1, r1, r2
}
   2b218:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2b21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b21e:	4601      	mov	r1, r0
   2b220:	e7fa      	b.n	2b218 <sys_clock_timeout_end_calc+0x4c>

0002b222 <k_timer_init>:
	timer->status = 0U;
   2b222:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2b224:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2b228:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2b22c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2b230:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2b234:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2b236:	6343      	str	r3, [r0, #52]	; 0x34
}
   2b238:	4770      	bx	lr

0002b23a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2b23a:	b510      	push	{r4, lr}
   2b23c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2b23e:	f7ff ff7b 	bl	2b138 <z_abort_timeout>

	if (inactive) {
   2b242:	b9b0      	cbnz	r0, 2b272 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2b244:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b246:	b10b      	cbz	r3, 2b24c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2b248:	4620      	mov	r0, r4
   2b24a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2b24c:	f104 0018 	add.w	r0, r4, #24
   2b250:	f7ff ff17 	bl	2b082 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2b254:	b168      	cbz	r0, 2b272 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2b256:	f7ff feb8 	bl	2afca <z_ready_thread>
	__asm__ volatile(
   2b25a:	f04f 0320 	mov.w	r3, #32
   2b25e:	f3ef 8011 	mrs	r0, BASEPRI
   2b262:	f383 8812 	msr	BASEPRI_MAX, r3
   2b266:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2b26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b26e:	f7ff be90 	b.w	2af92 <z_reschedule_irqlock>
   2b272:	bd10      	pop	{r4, pc}

0002b274 <add_event>:
{
   2b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b276:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2b278:	e9d0 1300 	ldrd	r1, r3, [r0]
   2b27c:	4288      	cmp	r0, r1
   2b27e:	4604      	mov	r4, r0
   2b280:	d00d      	beq.n	2b29e <add_event+0x2a>
	if ((pending == NULL) ||
   2b282:	b163      	cbz	r3, 2b29e <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2b284:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b286:	b100      	cbz	r0, 2b28a <add_event+0x16>
   2b288:	3860      	subs	r0, #96	; 0x60
   2b28a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2b28e:	4639      	mov	r1, r7
   2b290:	f7ff fe52 	bl	2af38 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2b294:	2800      	cmp	r0, #0
   2b296:	dc02      	bgt.n	2b29e <add_event+0x2a>
	return list->head == list;
   2b298:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b29a:	42b4      	cmp	r4, r6
   2b29c:	d109      	bne.n	2b2b2 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2b29e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2b2a0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2b2a4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b2a6:	6065      	str	r5, [r4, #4]
}
   2b2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2b2aa:	6863      	ldr	r3, [r4, #4]
   2b2ac:	42b3      	cmp	r3, r6
   2b2ae:	d0f6      	beq.n	2b29e <add_event+0x2a>
   2b2b0:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2b2b2:	2e00      	cmp	r6, #0
   2b2b4:	d0f3      	beq.n	2b29e <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2b2b6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b2b8:	b101      	cbz	r1, 2b2bc <add_event+0x48>
   2b2ba:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2b2bc:	4638      	mov	r0, r7
   2b2be:	f7ff fe3b 	bl	2af38 <z_sched_prio_cmp>
   2b2c2:	2800      	cmp	r0, #0
   2b2c4:	ddf1      	ble.n	2b2aa <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2b2c6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b2c8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2b2cc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2b2ce:	6075      	str	r5, [r6, #4]
			return;
   2b2d0:	e7ea      	b.n	2b2a8 <add_event+0x34>

0002b2d2 <register_events>:
{
   2b2d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2b2d6:	2500      	movs	r5, #0
{
   2b2d8:	468b      	mov	fp, r1
   2b2da:	4614      	mov	r4, r2
   2b2dc:	461f      	mov	r7, r3
   2b2de:	4682      	mov	sl, r0
	int events_registered = 0;
   2b2e0:	462e      	mov	r6, r5
	event->poller = NULL;
   2b2e2:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2b2e4:	455d      	cmp	r5, fp
   2b2e6:	db02      	blt.n	2b2ee <register_events+0x1c>
}
   2b2e8:	4630      	mov	r0, r6
   2b2ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2ee:	f04f 0320 	mov.w	r3, #32
   2b2f2:	f3ef 8911 	mrs	r9, BASEPRI
   2b2f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b2fa:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2b2fe:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2b302:	f003 031f 	and.w	r3, r3, #31
   2b306:	3b01      	subs	r3, #1
   2b308:	2b07      	cmp	r3, #7
   2b30a:	d80f      	bhi.n	2b32c <register_events+0x5a>
   2b30c:	e8df f003 	tbb	[pc, r3]
   2b310:	0a0e041e 	.word	0x0a0e041e
   2b314:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2b318:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b31c:	689b      	ldr	r3, [r3, #8]
   2b31e:	b12b      	cbz	r3, 2b32c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2b320:	2302      	movs	r3, #2
   2b322:	e020      	b.n	2b366 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2b324:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b328:	681b      	ldr	r3, [r3, #0]
   2b32a:	bb8b      	cbnz	r3, 2b390 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2b32c:	bb47      	cbnz	r7, 2b380 <register_events+0xae>
   2b32e:	7823      	ldrb	r3, [r4, #0]
   2b330:	b333      	cbz	r3, 2b380 <register_events+0xae>
	switch (event->type) {
   2b332:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2b336:	f003 031f 	and.w	r3, r3, #31
   2b33a:	3b01      	subs	r3, #1
   2b33c:	2b07      	cmp	r3, #7
   2b33e:	d830      	bhi.n	2b3a2 <register_events+0xd0>
   2b340:	e8df f003 	tbb	[pc, r3]
   2b344:	282f2833 	.word	0x282f2833
   2b348:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2b34c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b350:	689b      	ldr	r3, [r3, #8]
   2b352:	2b00      	cmp	r3, #0
   2b354:	d0ea      	beq.n	2b32c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2b356:	2301      	movs	r3, #1
   2b358:	e005      	b.n	2b366 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2b35a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b35e:	6a1b      	ldr	r3, [r3, #32]
   2b360:	2b00      	cmp	r3, #0
   2b362:	d0e3      	beq.n	2b32c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2b364:	2310      	movs	r3, #16
	event->state |= state;
   2b366:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2b36a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2b36e:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2b372:	430b      	orrs	r3, r1
   2b374:	f363 3252 	bfi	r2, r3, #13, #6
   2b378:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2b37c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2b380:	f389 8811 	msr	BASEPRI, r9
   2b384:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b388:	3501      	adds	r5, #1
   2b38a:	f10a 0a14 	add.w	sl, sl, #20
   2b38e:	e7a9      	b.n	2b2e4 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2b390:	2304      	movs	r3, #4
   2b392:	e7e8      	b.n	2b366 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2b394:	f8da 0010 	ldr.w	r0, [sl, #16]
   2b398:	4622      	mov	r2, r4
   2b39a:	4651      	mov	r1, sl
   2b39c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2b39e:	f7ff ff69 	bl	2b274 <add_event>
	event->poller = poller;
   2b3a2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2b3a6:	3601      	adds	r6, #1
   2b3a8:	e7ea      	b.n	2b380 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2b3aa:	f8da 0010 	ldr.w	r0, [sl, #16]
   2b3ae:	4622      	mov	r2, r4
   2b3b0:	4651      	mov	r1, sl
   2b3b2:	e7f4      	b.n	2b39e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2b3b4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2b3b8:	4622      	mov	r2, r4
   2b3ba:	4651      	mov	r1, sl
   2b3bc:	3024      	adds	r0, #36	; 0x24
   2b3be:	e7ee      	b.n	2b39e <register_events+0xcc>

0002b3c0 <signal_poll_event>:
{
   2b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2b3c4:	6884      	ldr	r4, [r0, #8]
{
   2b3c6:	4605      	mov	r5, r0
   2b3c8:	460e      	mov	r6, r1
	if (poller != NULL) {
   2b3ca:	b144      	cbz	r4, 2b3de <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2b3cc:	7863      	ldrb	r3, [r4, #1]
   2b3ce:	2b01      	cmp	r3, #1
   2b3d0:	d136      	bne.n	2b440 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2b3d2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b3d6:	f013 0302 	ands.w	r3, r3, #2
   2b3da:	d10a      	bne.n	2b3f2 <signal_poll_event+0x32>
		poller->is_polling = false;
   2b3dc:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2b3de:	68eb      	ldr	r3, [r5, #12]
   2b3e0:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2b3e4:	430e      	orrs	r6, r1
	event->poller = NULL;
   2b3e6:	2000      	movs	r0, #0
	event->state |= state;
   2b3e8:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2b3ec:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2b3ee:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b3f0:	e00b      	b.n	2b40a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2b3f2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b3fa:	bf08      	it	eq
   2b3fc:	f112 0f02 	cmneq.w	r2, #2
   2b400:	d105      	bne.n	2b40e <signal_poll_event+0x4e>
		poller->is_polling = false;
   2b402:	2300      	movs	r3, #0
   2b404:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2b406:	f06f 000a 	mvn.w	r0, #10
}
   2b40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b40e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2b412:	4640      	mov	r0, r8
   2b414:	f7ff fda9 	bl	2af6a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b418:	2e08      	cmp	r6, #8
   2b41a:	bf0c      	ite	eq
   2b41c:	f06f 0303 	mvneq.w	r3, #3
   2b420:	2300      	movne	r3, #0
   2b422:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b424:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b428:	06db      	lsls	r3, r3, #27
   2b42a:	d102      	bne.n	2b432 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2b42c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2b430:	b10f      	cbz	r7, 2b436 <signal_poll_event+0x76>
		poller->is_polling = false;
   2b432:	2300      	movs	r3, #0
   2b434:	e7d2      	b.n	2b3dc <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2b436:	4640      	mov	r0, r8
   2b438:	f7ff fdc7 	bl	2afca <z_ready_thread>
		poller->is_polling = false;
   2b43c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2b43e:	e7ce      	b.n	2b3de <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2b440:	2b02      	cmp	r3, #2
   2b442:	d1f6      	bne.n	2b432 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2b444:	7823      	ldrb	r3, [r4, #0]
   2b446:	2b00      	cmp	r3, #0
   2b448:	d0c9      	beq.n	2b3de <signal_poll_event+0x1e>
   2b44a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2b44e:	2f00      	cmp	r7, #0
   2b450:	d0f4      	beq.n	2b43c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2b452:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2b456:	f1a4 0914 	sub.w	r9, r4, #20
   2b45a:	f104 0014 	add.w	r0, r4, #20
   2b45e:	f7ff fe6b 	bl	2b138 <z_abort_timeout>
		twork->poll_result = 0;
   2b462:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2b466:	4649      	mov	r1, r9
   2b468:	4638      	mov	r0, r7
   2b46a:	f7ff fcea 	bl	2ae42 <k_work_submit_to_queue>
		poller->is_polling = false;
   2b46e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b472:	e7b4      	b.n	2b3de <signal_poll_event+0x1e>

0002b474 <clear_event_registrations>:
	while (num_events--) {
   2b474:	2314      	movs	r3, #20
{
   2b476:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b478:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2b47c:	2400      	movs	r4, #0
   2b47e:	2601      	movs	r6, #1
	while (num_events--) {
   2b480:	b901      	cbnz	r1, 2b484 <clear_event_registrations+0x10>
}
   2b482:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2b484:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2b488:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2b48c:	f003 031f 	and.w	r3, r3, #31
   2b490:	2b08      	cmp	r3, #8
   2b492:	f1a0 0714 	sub.w	r7, r0, #20
   2b496:	d80d      	bhi.n	2b4b4 <clear_event_registrations+0x40>
   2b498:	fa06 f303 	lsl.w	r3, r6, r3
   2b49c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2b4a0:	d008      	beq.n	2b4b4 <clear_event_registrations+0x40>
	return node->next != NULL;
   2b4a2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2b4a6:	b12b      	cbz	r3, 2b4b4 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2b4a8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2b4ac:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2b4ae:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b4b0:	e940 4405 	strd	r4, r4, [r0, #-20]
   2b4b4:	f382 8811 	msr	BASEPRI, r2
   2b4b8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b4bc:	f04f 0320 	mov.w	r3, #32
   2b4c0:	f3ef 8211 	mrs	r2, BASEPRI
   2b4c4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b4c8:	f3bf 8f6f 	isb	sy
   2b4cc:	3901      	subs	r1, #1
   2b4ce:	4638      	mov	r0, r7
   2b4d0:	e7d6      	b.n	2b480 <clear_event_registrations+0xc>

0002b4d2 <k_poll_event_init>:
{
   2b4d2:	b510      	push	{r4, lr}
	event->type = type;
   2b4d4:	04d2      	lsls	r2, r2, #19
   2b4d6:	0209      	lsls	r1, r1, #8
   2b4d8:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2b4dc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2b4e0:	430a      	orrs	r2, r1
   2b4e2:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2b4e4:	2400      	movs	r4, #0
	event->type = type;
   2b4e6:	430a      	orrs	r2, r1
	event->obj = obj;
   2b4e8:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2b4ec:	6084      	str	r4, [r0, #8]
}
   2b4ee:	bd10      	pop	{r4, pc}

0002b4f0 <z_handle_obj_poll_events>:
{
   2b4f0:	4603      	mov	r3, r0
	return list->head == list;
   2b4f2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b4f4:	4283      	cmp	r3, r0
   2b4f6:	d008      	beq.n	2b50a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2b4f8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b4fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b4fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b500:	2300      	movs	r3, #0
	node->prev = NULL;
   2b502:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b506:	f7ff bf5b 	b.w	2b3c0 <signal_poll_event>
}
   2b50a:	4770      	bx	lr

0002b50c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2b50c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2b50e:	e9c0 0000 	strd	r0, r0, [r0]
   2b512:	6083      	str	r3, [r0, #8]
}
   2b514:	4770      	bx	lr

0002b516 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2b516:	2300      	movs	r3, #0
   2b518:	6083      	str	r3, [r0, #8]
}
   2b51a:	4770      	bx	lr

0002b51c <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2b51c:	6883      	ldr	r3, [r0, #8]
   2b51e:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2b520:	68c3      	ldr	r3, [r0, #12]
   2b522:	6013      	str	r3, [r2, #0]
}
   2b524:	4770      	bx	lr

0002b526 <k_free>:
	if (ptr != NULL) {
   2b526:	b120      	cbz	r0, 2b532 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b528:	1f01      	subs	r1, r0, #4
   2b52a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b52e:	f7ff bab9 	b.w	2aaa4 <k_heap_free>
}
   2b532:	4770      	bx	lr

0002b534 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   2b534:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
   2b536:	4770      	bx	lr

0002b538 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2b538:	4770      	bx	lr
	...

0002b53c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2b53c:	f7f6 bcd6 	b.w	21eec <SystemInit>
