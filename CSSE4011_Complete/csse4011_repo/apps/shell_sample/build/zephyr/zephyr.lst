
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	80 39 00 20 95 71 00 00 57 ed 00 00 69 71 00 00     .9. .q..W...iq..
    1010:	69 71 00 00 69 71 00 00 69 71 00 00 00 00 00 00     iq..iq..iq......
	...
    102c:	d5 69 00 00 69 71 00 00 00 00 00 00 7d 69 00 00     .i..iq......}i..
    103c:	69 71 00 00                                         iq..

00001040 <_irq_vector_table>:
    1040:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    1050:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    1060:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    1070:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    1080:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    1090:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    10a0:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    10b0:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    10c0:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    10d0:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    10e0:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..
    10f0:	89 6a 00 00 89 6a 00 00 89 6a 00 00 89 6a 00 00     .j...j...j...j..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1138:	4607      	mov	r7, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    1140:	4615      	mov	r5, r2
    1142:	463c      	mov	r4, r7
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c6 	bne.w	12d8 <__udivmoddi4+0x1a4>
    114c:	4282      	cmp	r2, r0
    114e:	fab2 f782 	clz	r7, r2
    1152:	d946      	bls.n	11e2 <__udivmoddi4+0xae>
    1154:	b14f      	cbz	r7, 116a <__udivmoddi4+0x36>
    1156:	f1c7 0e20 	rsb	lr, r7, #32
    115a:	fa24 fe0e 	lsr.w	lr, r4, lr
    115e:	fa00 f307 	lsl.w	r3, r0, r7
    1162:	40bd      	lsls	r5, r7
    1164:	ea4e 0c03 	orr.w	ip, lr, r3
    1168:	40bc      	lsls	r4, r7
    116a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    116e:	fa1f fe85 	uxth.w	lr, r5
    1172:	fbbc f9f8 	udiv	r9, ip, r8
    1176:	0c22      	lsrs	r2, r4, #16
    1178:	fb08 c319 	mls	r3, r8, r9, ip
    117c:	fb09 fa0e 	mul.w	sl, r9, lr
    1180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1184:	459a      	cmp	sl, r3
    1186:	d928      	bls.n	11da <__udivmoddi4+0xa6>
    1188:	18eb      	adds	r3, r5, r3
    118a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    118e:	d204      	bcs.n	119a <__udivmoddi4+0x66>
    1190:	459a      	cmp	sl, r3
    1192:	d902      	bls.n	119a <__udivmoddi4+0x66>
    1194:	f1a9 0002 	sub.w	r0, r9, #2
    1198:	442b      	add	r3, r5
    119a:	eba3 030a 	sub.w	r3, r3, sl
    119e:	b2a4      	uxth	r4, r4
    11a0:	fbb3 f2f8 	udiv	r2, r3, r8
    11a4:	fb08 3312 	mls	r3, r8, r2, r3
    11a8:	fb02 fe0e 	mul.w	lr, r2, lr
    11ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11b0:	45a6      	cmp	lr, r4
    11b2:	d914      	bls.n	11de <__udivmoddi4+0xaa>
    11b4:	192c      	adds	r4, r5, r4
    11b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    11ba:	d203      	bcs.n	11c4 <__udivmoddi4+0x90>
    11bc:	45a6      	cmp	lr, r4
    11be:	d901      	bls.n	11c4 <__udivmoddi4+0x90>
    11c0:	1e93      	subs	r3, r2, #2
    11c2:	442c      	add	r4, r5
    11c4:	eba4 040e 	sub.w	r4, r4, lr
    11c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    11cc:	b11e      	cbz	r6, 11d6 <__udivmoddi4+0xa2>
    11ce:	40fc      	lsrs	r4, r7
    11d0:	2300      	movs	r3, #0
    11d2:	6034      	str	r4, [r6, #0]
    11d4:	6073      	str	r3, [r6, #4]
    11d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11da:	4648      	mov	r0, r9
    11dc:	e7dd      	b.n	119a <__udivmoddi4+0x66>
    11de:	4613      	mov	r3, r2
    11e0:	e7f0      	b.n	11c4 <__udivmoddi4+0x90>
    11e2:	b902      	cbnz	r2, 11e6 <__udivmoddi4+0xb2>
    11e4:	deff      	udf	#255	; 0xff
    11e6:	bb87      	cbnz	r7, 124a <__udivmoddi4+0x116>
    11e8:	1a83      	subs	r3, r0, r2
    11ea:	2101      	movs	r1, #1
    11ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11f0:	b2aa      	uxth	r2, r5
    11f2:	fbb3 fcfe 	udiv	ip, r3, lr
    11f6:	0c20      	lsrs	r0, r4, #16
    11f8:	fb0e 331c 	mls	r3, lr, ip, r3
    11fc:	fb0c f802 	mul.w	r8, ip, r2
    1200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    1204:	4598      	cmp	r8, r3
    1206:	d963      	bls.n	12d0 <__udivmoddi4+0x19c>
    1208:	18eb      	adds	r3, r5, r3
    120a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    120e:	d204      	bcs.n	121a <__udivmoddi4+0xe6>
    1210:	4598      	cmp	r8, r3
    1212:	d902      	bls.n	121a <__udivmoddi4+0xe6>
    1214:	f1ac 0002 	sub.w	r0, ip, #2
    1218:	442b      	add	r3, r5
    121a:	eba3 0308 	sub.w	r3, r3, r8
    121e:	b2a4      	uxth	r4, r4
    1220:	fbb3 fcfe 	udiv	ip, r3, lr
    1224:	fb0e 331c 	mls	r3, lr, ip, r3
    1228:	fb0c f202 	mul.w	r2, ip, r2
    122c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1230:	42a2      	cmp	r2, r4
    1232:	d94f      	bls.n	12d4 <__udivmoddi4+0x1a0>
    1234:	192c      	adds	r4, r5, r4
    1236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    123a:	d204      	bcs.n	1246 <__udivmoddi4+0x112>
    123c:	42a2      	cmp	r2, r4
    123e:	d902      	bls.n	1246 <__udivmoddi4+0x112>
    1240:	f1ac 0302 	sub.w	r3, ip, #2
    1244:	442c      	add	r4, r5
    1246:	1aa4      	subs	r4, r4, r2
    1248:	e7be      	b.n	11c8 <__udivmoddi4+0x94>
    124a:	f1c7 0c20 	rsb	ip, r7, #32
    124e:	fa20 f80c 	lsr.w	r8, r0, ip
    1252:	fa00 f307 	lsl.w	r3, r0, r7
    1256:	fa24 fc0c 	lsr.w	ip, r4, ip
    125a:	40bd      	lsls	r5, r7
    125c:	ea4c 0203 	orr.w	r2, ip, r3
    1260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1264:	b2ab      	uxth	r3, r5
    1266:	fbb8 fcfe 	udiv	ip, r8, lr
    126a:	0c11      	lsrs	r1, r2, #16
    126c:	fb0e 801c 	mls	r0, lr, ip, r8
    1270:	fb0c f903 	mul.w	r9, ip, r3
    1274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    1278:	4581      	cmp	r9, r0
    127a:	fa04 f407 	lsl.w	r4, r4, r7
    127e:	d923      	bls.n	12c8 <__udivmoddi4+0x194>
    1280:	1828      	adds	r0, r5, r0
    1282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    1286:	d204      	bcs.n	1292 <__udivmoddi4+0x15e>
    1288:	4581      	cmp	r9, r0
    128a:	d902      	bls.n	1292 <__udivmoddi4+0x15e>
    128c:	f1ac 0102 	sub.w	r1, ip, #2
    1290:	4428      	add	r0, r5
    1292:	eba0 0009 	sub.w	r0, r0, r9
    1296:	b292      	uxth	r2, r2
    1298:	fbb0 fcfe 	udiv	ip, r0, lr
    129c:	fb0e 001c 	mls	r0, lr, ip, r0
    12a0:	fb0c f803 	mul.w	r8, ip, r3
    12a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    12a8:	4598      	cmp	r8, r3
    12aa:	d90f      	bls.n	12cc <__udivmoddi4+0x198>
    12ac:	18eb      	adds	r3, r5, r3
    12ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    12b2:	d204      	bcs.n	12be <__udivmoddi4+0x18a>
    12b4:	4598      	cmp	r8, r3
    12b6:	d902      	bls.n	12be <__udivmoddi4+0x18a>
    12b8:	f1ac 0202 	sub.w	r2, ip, #2
    12bc:	442b      	add	r3, r5
    12be:	eba3 0308 	sub.w	r3, r3, r8
    12c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    12c6:	e791      	b.n	11ec <__udivmoddi4+0xb8>
    12c8:	4661      	mov	r1, ip
    12ca:	e7e2      	b.n	1292 <__udivmoddi4+0x15e>
    12cc:	4662      	mov	r2, ip
    12ce:	e7f6      	b.n	12be <__udivmoddi4+0x18a>
    12d0:	4660      	mov	r0, ip
    12d2:	e7a2      	b.n	121a <__udivmoddi4+0xe6>
    12d4:	4663      	mov	r3, ip
    12d6:	e7b6      	b.n	1246 <__udivmoddi4+0x112>
    12d8:	4283      	cmp	r3, r0
    12da:	d905      	bls.n	12e8 <__udivmoddi4+0x1b4>
    12dc:	b10e      	cbz	r6, 12e2 <__udivmoddi4+0x1ae>
    12de:	e9c6 7000 	strd	r7, r0, [r6]
    12e2:	2100      	movs	r1, #0
    12e4:	4608      	mov	r0, r1
    12e6:	e776      	b.n	11d6 <__udivmoddi4+0xa2>
    12e8:	fab3 f183 	clz	r1, r3
    12ec:	b981      	cbnz	r1, 1310 <__udivmoddi4+0x1dc>
    12ee:	4283      	cmp	r3, r0
    12f0:	d301      	bcc.n	12f6 <__udivmoddi4+0x1c2>
    12f2:	42ba      	cmp	r2, r7
    12f4:	d80a      	bhi.n	130c <__udivmoddi4+0x1d8>
    12f6:	1abc      	subs	r4, r7, r2
    12f8:	eb60 0303 	sbc.w	r3, r0, r3
    12fc:	2001      	movs	r0, #1
    12fe:	469c      	mov	ip, r3
    1300:	2e00      	cmp	r6, #0
    1302:	d068      	beq.n	13d6 <__udivmoddi4+0x2a2>
    1304:	e9c6 4c00 	strd	r4, ip, [r6]
    1308:	2100      	movs	r1, #0
    130a:	e764      	b.n	11d6 <__udivmoddi4+0xa2>
    130c:	4608      	mov	r0, r1
    130e:	e7f7      	b.n	1300 <__udivmoddi4+0x1cc>
    1310:	f1c1 0c20 	rsb	ip, r1, #32
    1314:	408b      	lsls	r3, r1
    1316:	fa22 f40c 	lsr.w	r4, r2, ip
    131a:	431c      	orrs	r4, r3
    131c:	fa02 f501 	lsl.w	r5, r2, r1
    1320:	fa00 f301 	lsl.w	r3, r0, r1
    1324:	fa27 f20c 	lsr.w	r2, r7, ip
    1328:	fa20 fb0c 	lsr.w	fp, r0, ip
    132c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1330:	4313      	orrs	r3, r2
    1332:	fbbb f8f9 	udiv	r8, fp, r9
    1336:	fa1f fe84 	uxth.w	lr, r4
    133a:	fb09 bb18 	mls	fp, r9, r8, fp
    133e:	0c1a      	lsrs	r2, r3, #16
    1340:	fb08 fa0e 	mul.w	sl, r8, lr
    1344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    1348:	4592      	cmp	sl, r2
    134a:	fa07 f701 	lsl.w	r7, r7, r1
    134e:	d93e      	bls.n	13ce <__udivmoddi4+0x29a>
    1350:	18a2      	adds	r2, r4, r2
    1352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1356:	d204      	bcs.n	1362 <__udivmoddi4+0x22e>
    1358:	4592      	cmp	sl, r2
    135a:	d902      	bls.n	1362 <__udivmoddi4+0x22e>
    135c:	f1a8 0002 	sub.w	r0, r8, #2
    1360:	4422      	add	r2, r4
    1362:	eba2 020a 	sub.w	r2, r2, sl
    1366:	b29b      	uxth	r3, r3
    1368:	fbb2 f8f9 	udiv	r8, r2, r9
    136c:	fb09 2218 	mls	r2, r9, r8, r2
    1370:	fb08 fe0e 	mul.w	lr, r8, lr
    1374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1378:	4596      	cmp	lr, r2
    137a:	d92a      	bls.n	13d2 <__udivmoddi4+0x29e>
    137c:	18a2      	adds	r2, r4, r2
    137e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1382:	d204      	bcs.n	138e <__udivmoddi4+0x25a>
    1384:	4596      	cmp	lr, r2
    1386:	d902      	bls.n	138e <__udivmoddi4+0x25a>
    1388:	f1a8 0302 	sub.w	r3, r8, #2
    138c:	4422      	add	r2, r4
    138e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1392:	fba0 9305 	umull	r9, r3, r0, r5
    1396:	eba2 020e 	sub.w	r2, r2, lr
    139a:	429a      	cmp	r2, r3
    139c:	46ce      	mov	lr, r9
    139e:	4698      	mov	r8, r3
    13a0:	d302      	bcc.n	13a8 <__udivmoddi4+0x274>
    13a2:	d106      	bne.n	13b2 <__udivmoddi4+0x27e>
    13a4:	454f      	cmp	r7, r9
    13a6:	d204      	bcs.n	13b2 <__udivmoddi4+0x27e>
    13a8:	ebb9 0e05 	subs.w	lr, r9, r5
    13ac:	eb63 0804 	sbc.w	r8, r3, r4
    13b0:	3801      	subs	r0, #1
    13b2:	b186      	cbz	r6, 13d6 <__udivmoddi4+0x2a2>
    13b4:	ebb7 030e 	subs.w	r3, r7, lr
    13b8:	eb62 0708 	sbc.w	r7, r2, r8
    13bc:	fa07 fc0c 	lsl.w	ip, r7, ip
    13c0:	40cb      	lsrs	r3, r1
    13c2:	ea4c 0303 	orr.w	r3, ip, r3
    13c6:	40cf      	lsrs	r7, r1
    13c8:	e9c6 3700 	strd	r3, r7, [r6]
    13cc:	e79c      	b.n	1308 <__udivmoddi4+0x1d4>
    13ce:	4640      	mov	r0, r8
    13d0:	e7c7      	b.n	1362 <__udivmoddi4+0x22e>
    13d2:	4643      	mov	r3, r8
    13d4:	e7db      	b.n	138e <__udivmoddi4+0x25a>
    13d6:	4631      	mov	r1, r6
    13d8:	e6fd      	b.n	11d6 <__udivmoddi4+0xa2>
	...

000013dc <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
    13dc:	b513      	push	{r0, r1, r4, lr}
	// 	}
	// 	k_msleep(SLEEP_TIME_MS);
	// }
	 /* Setup DTR */
    const struct device *shell_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_shell_uart));
    uint32_t dtr = 0;
    13de:	2000      	movs	r0, #0
    13e0:	9001      	str	r0, [sp, #4]

    /* Enable the USB Driver */
    if (usb_enable(NULL))   
    13e2:	f004 f913 	bl	560c <usb_enable>
    13e6:	b9c8      	cbnz	r0, 141c <main+0x40>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    13e8:	4c0d      	ldr	r4, [pc, #52]	; (1420 <main+0x44>)

   /* Wait on DTR - 'Data Terminal Ready'
    * Will wait here until a terminal has been attached to the device
    * This is not necessary, however, can be useful for printing boot info etc..
    */
    while (!dtr) {
    13ea:	9b01      	ldr	r3, [sp, #4]
    13ec:	b14b      	cbz	r3, 1402 <main+0x26>
        k_sleep(K_MSEC(100));
    }

    while(1)
    {
        printk("Hello World\n");  //This will get routed to the shell also (optional)
    13ee:	4c0d      	ldr	r4, [pc, #52]	; (1424 <main+0x48>)
    13f0:	4620      	mov	r0, r4
    13f2:	f00b fab9 	bl	c968 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    13f6:	2100      	movs	r1, #0
    13f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    13fc:	f00a fef4 	bl	c1e8 <z_impl_k_sleep>
    while(1)
    1400:	e7f6      	b.n	13f0 <main+0x14>
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    1402:	68a3      	ldr	r3, [r4, #8]
    1404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1406:	b11b      	cbz	r3, 1410 <main+0x34>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    1408:	aa01      	add	r2, sp, #4
    140a:	2104      	movs	r1, #4
    140c:	4620      	mov	r0, r4
    140e:	4798      	blx	r3
    1410:	2100      	movs	r1, #0
    1412:	f640 40cd 	movw	r0, #3277	; 0xccd
    1416:	f00a fee7 	bl	c1e8 <z_impl_k_sleep>
    141a:	e7e6      	b.n	13ea <main+0xe>
        k_sleep(K_MSEC(500));
    }
}
    141c:	b002      	add	sp, #8
    141e:	bd10      	pop	{r4, pc}
    1420:	00010428 	.word	0x00010428
    1424:	00011048 	.word	0x00011048

00001428 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    142c:	4605      	mov	r5, r0
    142e:	b08b      	sub	sp, #44	; 0x2c
    1430:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1432:	f015 0303 	ands.w	r3, r5, #3
    1436:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    143a:	9203      	str	r2, [sp, #12]
    143c:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    143e:	9301      	str	r3, [sp, #4]
    1440:	f040 81f5 	bne.w	182e <cbvprintf_package+0x406>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    1444:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1446:	2d00      	cmp	r5, #0
    1448:	f040 81f4 	bne.w	1834 <cbvprintf_package+0x40c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    144c:	f001 0607 	and.w	r6, r1, #7
    1450:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1452:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1456:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    145a:	2704      	movs	r7, #4
	s = fmt--;
    145c:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    145e:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1462:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    1466:	4652      	mov	r2, sl
	size = sizeof(char *);
    1468:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    146a:	b105      	cbz	r5, 146e <cbvprintf_package+0x46>
				*(const char **)buf = s;
    146c:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    146e:	9b03      	ldr	r3, [sp, #12]
    1470:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    1474:	4bce      	ldr	r3, [pc, #824]	; (17b0 <cbvprintf_package+0x388>)
    1476:	4298      	cmp	r0, r3
    1478:	f0c0 812a 	bcc.w	16d0 <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    147c:	4bcd      	ldr	r3, [pc, #820]	; (17b4 <cbvprintf_package+0x38c>)
    147e:	4298      	cmp	r0, r3
    1480:	f080 8126 	bcs.w	16d0 <cbvprintf_package+0x2a8>
    1484:	f1be 0f00 	cmp.w	lr, #0
    1488:	f000 813c 	beq.w	1704 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
    148c:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1490:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    1494:	f1be 0f00 	cmp.w	lr, #0
    1498:	f000 811d 	beq.w	16d6 <cbvprintf_package+0x2ae>
    149c:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    14a0:	f0c0 8119 	bcc.w	16d6 <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    14a4:	f06f 0015 	mvn.w	r0, #21
    14a8:	e0f5      	b.n	1696 <cbvprintf_package+0x26e>
		if (!parsing) {
    14aa:	b932      	cbnz	r2, 14ba <cbvprintf_package+0x92>
			if (*fmt == '%') {
    14ac:	2b25      	cmp	r3, #37	; 0x25
    14ae:	f040 812c 	bne.w	170a <cbvprintf_package+0x2e2>
				parsing = true;
    14b2:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    14b4:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    14b6:	46b9      	mov	r9, r7
    14b8:	e127      	b.n	170a <cbvprintf_package+0x2e2>
		switch (*fmt) {
    14ba:	2b2b      	cmp	r3, #43	; 0x2b
    14bc:	d824      	bhi.n	1508 <cbvprintf_package+0xe0>
    14be:	2b1f      	cmp	r3, #31
    14c0:	d801      	bhi.n	14c6 <cbvprintf_package+0x9e>
			parsing = false;
    14c2:	2200      	movs	r2, #0
    14c4:	e121      	b.n	170a <cbvprintf_package+0x2e2>
		switch (*fmt) {
    14c6:	f1a3 0020 	sub.w	r0, r3, #32
    14ca:	280b      	cmp	r0, #11
    14cc:	d8f9      	bhi.n	14c2 <cbvprintf_package+0x9a>
    14ce:	f20f 0c08 	addw	ip, pc, #8
    14d2:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    14d6:	bf00      	nop
    14d8:	0000170b 	.word	0x0000170b
    14dc:	000014c3 	.word	0x000014c3
    14e0:	000014c3 	.word	0x000014c3
    14e4:	0000170b 	.word	0x0000170b
    14e8:	000014c3 	.word	0x000014c3
    14ec:	000014c3 	.word	0x000014c3
    14f0:	000014c3 	.word	0x000014c3
    14f4:	000014c3 	.word	0x000014c3
    14f8:	000014c3 	.word	0x000014c3
    14fc:	000014c3 	.word	0x000014c3
    1500:	000016af 	.word	0x000016af
    1504:	0000170b 	.word	0x0000170b
    1508:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    150c:	fa5f fc80 	uxtb.w	ip, r0
    1510:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    1514:	d8d5      	bhi.n	14c2 <cbvprintf_package+0x9a>
    1516:	284d      	cmp	r0, #77	; 0x4d
    1518:	d8d3      	bhi.n	14c2 <cbvprintf_package+0x9a>
    151a:	f20f 0c08 	addw	ip, pc, #8
    151e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    1522:	bf00      	nop
    1524:	0000170b 	.word	0x0000170b
    1528:	0000170b 	.word	0x0000170b
    152c:	000014c3 	.word	0x000014c3
    1530:	0000170b 	.word	0x0000170b
    1534:	0000170b 	.word	0x0000170b
    1538:	0000170b 	.word	0x0000170b
    153c:	0000170b 	.word	0x0000170b
    1540:	0000170b 	.word	0x0000170b
    1544:	0000170b 	.word	0x0000170b
    1548:	0000170b 	.word	0x0000170b
    154c:	0000170b 	.word	0x0000170b
    1550:	0000170b 	.word	0x0000170b
    1554:	0000170b 	.word	0x0000170b
    1558:	000014c3 	.word	0x000014c3
    155c:	000014c3 	.word	0x000014c3
    1560:	000014c3 	.word	0x000014c3
    1564:	000014c3 	.word	0x000014c3
    1568:	000014c3 	.word	0x000014c3
    156c:	000014c3 	.word	0x000014c3
    1570:	000014c3 	.word	0x000014c3
    1574:	00001677 	.word	0x00001677
    1578:	000014c3 	.word	0x000014c3
    157c:	000014c3 	.word	0x000014c3
    1580:	000014c3 	.word	0x000014c3
    1584:	00001677 	.word	0x00001677
    1588:	00001677 	.word	0x00001677
    158c:	00001677 	.word	0x00001677
    1590:	000014c3 	.word	0x000014c3
    1594:	000014c3 	.word	0x000014c3
    1598:	000014c3 	.word	0x000014c3
    159c:	000014c3 	.word	0x000014c3
    15a0:	0000170b 	.word	0x0000170b
    15a4:	000014c3 	.word	0x000014c3
    15a8:	000014c3 	.word	0x000014c3
    15ac:	000014c3 	.word	0x000014c3
    15b0:	000014c3 	.word	0x000014c3
    15b4:	000014c3 	.word	0x000014c3
    15b8:	000014c3 	.word	0x000014c3
    15bc:	000014c3 	.word	0x000014c3
    15c0:	000014c3 	.word	0x000014c3
    15c4:	000014c3 	.word	0x000014c3
    15c8:	000014c3 	.word	0x000014c3
    15cc:	000014c3 	.word	0x000014c3
    15d0:	0000165d 	.word	0x0000165d
    15d4:	000014c3 	.word	0x000014c3
    15d8:	000014c3 	.word	0x000014c3
    15dc:	000014c3 	.word	0x000014c3
    15e0:	000014c3 	.word	0x000014c3
    15e4:	000014c3 	.word	0x000014c3
    15e8:	000014c3 	.word	0x000014c3
    15ec:	000014c3 	.word	0x000014c3
    15f0:	000014c3 	.word	0x000014c3
    15f4:	00001677 	.word	0x00001677
    15f8:	000014c3 	.word	0x000014c3
    15fc:	0000165d 	.word	0x0000165d
    1600:	0000165d 	.word	0x0000165d
    1604:	00001677 	.word	0x00001677
    1608:	00001677 	.word	0x00001677
    160c:	00001677 	.word	0x00001677
    1610:	0000170b 	.word	0x0000170b
    1614:	0000165d 	.word	0x0000165d
    1618:	000016a5 	.word	0x000016a5
    161c:	000014c3 	.word	0x000014c3
    1620:	0000170b 	.word	0x0000170b
    1624:	000014c3 	.word	0x000014c3
    1628:	000016a9 	.word	0x000016a9
    162c:	0000165d 	.word	0x0000165d
    1630:	000016a9 	.word	0x000016a9
    1634:	000014c3 	.word	0x000014c3
    1638:	000014c3 	.word	0x000014c3
    163c:	000016a9 	.word	0x000016a9
    1640:	000014b5 	.word	0x000014b5
    1644:	0000165d 	.word	0x0000165d
    1648:	000014c3 	.word	0x000014c3
    164c:	000014c3 	.word	0x000014c3
    1650:	0000165d 	.word	0x0000165d
    1654:	000014c3 	.word	0x000014c3
    1658:	000014b5 	.word	0x000014b5
			if (fmt[-1] == 'l') {
    165c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    1660:	2a6c      	cmp	r2, #108	; 0x6c
    1662:	d123      	bne.n	16ac <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    1664:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    1668:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    166a:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    166e:	d02d      	beq.n	16cc <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    1670:	2704      	movs	r7, #4
					size = sizeof(long long);
    1672:	46b9      	mov	r9, r7
    1674:	e01b      	b.n	16ae <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    1676:	f108 0807 	add.w	r8, r8, #7
    167a:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    167e:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    1680:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    1684:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    1688:	b155      	cbz	r5, 16a0 <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    168a:	eb0e 0004 	add.w	r0, lr, r4
    168e:	42b0      	cmp	r0, r6
    1690:	d904      	bls.n	169c <cbvprintf_package+0x274>
					return -ENOSPC;
    1692:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1696:	b00b      	add	sp, #44	; 0x2c
    1698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    169c:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    16a0:	3408      	adds	r4, #8
			parsing = false;
    16a2:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    16a4:	2708      	movs	r7, #8
    16a6:	e706      	b.n	14b6 <cbvprintf_package+0x8e>
			parsing = false;
    16a8:	2200      	movs	r2, #0
    16aa:	e7e1      	b.n	1670 <cbvprintf_package+0x248>
			parsing = false;
    16ac:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    16ae:	3c01      	subs	r4, #1
    16b0:	443c      	add	r4, r7
    16b2:	4278      	negs	r0, r7
    16b4:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    16b6:	b125      	cbz	r5, 16c2 <cbvprintf_package+0x29a>
    16b8:	eba9 0005 	sub.w	r0, r9, r5
    16bc:	4420      	add	r0, r4
    16be:	42b0      	cmp	r0, r6
    16c0:	d8e7      	bhi.n	1692 <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    16c2:	2b73      	cmp	r3, #115	; 0x73
    16c4:	d143      	bne.n	174e <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
    16c6:	f858 0b04 	ldr.w	r0, [r8], #4
    16ca:	e6ce      	b.n	146a <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    16cc:	2708      	movs	r7, #8
    16ce:	e7d0      	b.n	1672 <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    16d0:	f04f 0c00 	mov.w	ip, #0
    16d4:	e6dc      	b.n	1490 <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    16d6:	9b00      	ldr	r3, [sp, #0]
    16d8:	2b0f      	cmp	r3, #15
    16da:	f63f aee3 	bhi.w	14a4 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    16de:	b345      	cbz	r5, 1732 <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    16e0:	f8dd e000 	ldr.w	lr, [sp]
    16e4:	a80a      	add	r0, sp, #40	; 0x28
    16e6:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    16ea:	4470      	add	r0, lr
    16ec:	f1bc 0f00 	cmp.w	ip, #0
    16f0:	d019      	beq.n	1726 <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    16f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    16f6:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    16fa:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    16fe:	9b00      	ldr	r3, [sp, #0]
    1700:	3301      	adds	r3, #1
    1702:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    1704:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1706:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    170a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    170e:	2b00      	cmp	r3, #0
    1710:	f47f aecb 	bne.w	14aa <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1714:	1b60      	subs	r0, r4, r5
    1716:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    171a:	f4bf aec3 	bcs.w	14a4 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    171e:	bb9d      	cbnz	r5, 1788 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1720:	3e08      	subs	r6, #8
    1722:	4430      	add	r0, r6
    1724:	e7b7      	b.n	1696 <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1726:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    172a:	9b02      	ldr	r3, [sp, #8]
    172c:	3301      	adds	r3, #1
    172e:	9302      	str	r3, [sp, #8]
    1730:	e7e5      	b.n	16fe <cbvprintf_package+0x2d6>
				} else if (is_ro) {
    1732:	f1bc 0f00 	cmp.w	ip, #0
    1736:	d001      	beq.n	173c <cbvprintf_package+0x314>
					len += 1;
    1738:	3601      	adds	r6, #1
    173a:	e7e0      	b.n	16fe <cbvprintf_package+0x2d6>
    173c:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    1740:	f00d fc4a 	bl	efd8 <strlen>
    1744:	3602      	adds	r6, #2
    1746:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    174a:	4406      	add	r6, r0
    174c:	e7d7      	b.n	16fe <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
    174e:	f1b9 0f04 	cmp.w	r9, #4
    1752:	d108      	bne.n	1766 <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
    1754:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    1758:	b115      	cbz	r5, 1760 <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
    175a:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    175e:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    1760:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    1762:	4680      	mov	r8, r0
    1764:	e7d1      	b.n	170a <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
    1766:	f1b9 0f08 	cmp.w	r9, #8
    176a:	f47f ae9b 	bne.w	14a4 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    176e:	f108 0307 	add.w	r3, r8, #7
    1772:	f023 0307 	bic.w	r3, r3, #7
    1776:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    177a:	b11d      	cbz	r5, 1784 <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
    177c:	e9d3 bc00 	ldrd	fp, ip, [r3]
    1780:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    1784:	3408      	adds	r4, #8
    1786:	e7c0      	b.n	170a <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
    1788:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    178a:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    178c:	0880      	lsrs	r0, r0, #2
    178e:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    1790:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    1792:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    1796:	f1ba 0f00 	cmp.w	sl, #0
    179a:	d005      	beq.n	17a8 <cbvprintf_package+0x380>
    179c:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    179e:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    17a2:	9a00      	ldr	r2, [sp, #0]
    17a4:	429a      	cmp	r2, r3
    17a6:	d107      	bne.n	17b8 <cbvprintf_package+0x390>
		if (BUF_OFFSET + 1 + size > len) {
    17a8:	f1c5 0901 	rsb	r9, r5, #1
    17ac:	e039      	b.n	1822 <cbvprintf_package+0x3fa>
    17ae:	bf00      	nop
    17b0:	00010360 	.word	0x00010360
    17b4:	00013038 	.word	0x00013038
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    17b8:	f811 2b01 	ldrb.w	r2, [r1], #1
    17bc:	0617      	lsls	r7, r2, #24
    17be:	d507      	bpl.n	17d0 <cbvprintf_package+0x3a8>
			if (BUF_OFFSET + 1 > len) {
    17c0:	1827      	adds	r7, r4, r0
    17c2:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    17c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    17c8:	f63f af63 	bhi.w	1692 <cbvprintf_package+0x26a>
			*buf++ = pos;
    17cc:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    17d0:	3301      	adds	r3, #1
    17d2:	e7e6      	b.n	17a2 <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    17d4:	9b01      	ldr	r3, [sp, #4]
    17d6:	aa06      	add	r2, sp, #24
    17d8:	f812 8003 	ldrb.w	r8, [r2, r3]
    17dc:	f1ba 0f00 	cmp.w	sl, #0
    17e0:	d002      	beq.n	17e8 <cbvprintf_package+0x3c0>
    17e2:	f018 0f80 	tst.w	r8, #128	; 0x80
    17e6:	d119      	bne.n	181c <cbvprintf_package+0x3f4>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    17e8:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    17ec:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    17ee:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    17f2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    17f6:	4608      	mov	r0, r1
    17f8:	9102      	str	r1, [sp, #8]
    17fa:	f00d fbed 	bl	efd8 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    17fe:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    1802:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    1804:	443a      	add	r2, r7
    1806:	42b2      	cmp	r2, r6
    1808:	f63f af43 	bhi.w	1692 <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    180c:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
    1810:	9902      	ldr	r1, [sp, #8]
    1812:	4620      	mov	r0, r4
    1814:	463a      	mov	r2, r7
    1816:	f00d fc35 	bl	f084 <memcpy>
		buf += size;
    181a:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    181c:	9b01      	ldr	r3, [sp, #4]
    181e:	3301      	adds	r3, #1
    1820:	9301      	str	r3, [sp, #4]
    1822:	e9dd 2300 	ldrd	r2, r3, [sp]
    1826:	429a      	cmp	r2, r3
    1828:	d1d4      	bne.n	17d4 <cbvprintf_package+0x3ac>
	return BUF_OFFSET;
    182a:	1b60      	subs	r0, r4, r5
    182c:	e733      	b.n	1696 <cbvprintf_package+0x26e>
		return -EFAULT;
    182e:	f06f 000d 	mvn.w	r0, #13
    1832:	e730      	b.n	1696 <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1834:	2907      	cmp	r1, #7
    1836:	f63f ae0e 	bhi.w	1456 <cbvprintf_package+0x2e>
    183a:	e72a      	b.n	1692 <cbvprintf_package+0x26a>

0000183c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    183c:	b530      	push	{r4, r5, lr}
    183e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1840:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1844:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1846:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1848:	a901      	add	r1, sp, #4
    184a:	4805      	ldr	r0, [pc, #20]	; (1860 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    184c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    184e:	f000 f8e9 	bl	1a24 <cbvprintf>

	if (ctx.count < ctx.max) {
    1852:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1856:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1858:	bfb8      	it	lt
    185a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    185c:	b005      	add	sp, #20
    185e:	bd30      	pop	{r4, r5, pc}
    1860:	0000c943 	.word	0x0000c943

00001864 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1868:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    186c:	f019 0808 	ands.w	r8, r9, #8
{
    1870:	4604      	mov	r4, r0
    1872:	4693      	mov	fp, r2
	if (processing) {
    1874:	d00d      	beq.n	1892 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1876:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1878:	bf0c      	ite	eq
    187a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    187e:	f049 0920 	orrne.w	r9, r9, #32
    1882:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1886:	f38b 8811 	msr	BASEPRI, fp
    188a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    188e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1892:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1896:	2902      	cmp	r1, #2
    1898:	d107      	bne.n	18aa <process_event+0x46>
			evt = process_recheck(mgr);
    189a:	4620      	mov	r0, r4
    189c:	f00b f898 	bl	c9d0 <process_recheck>
		if (evt == EVT_NOP) {
    18a0:	2800      	cmp	r0, #0
    18a2:	d0f0      	beq.n	1886 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    18a4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18a6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    18a8:	d14e      	bne.n	1948 <process_event+0xe4>
			res = mgr->last_res;
    18aa:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18ac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    18ae:	2f00      	cmp	r7, #0
    18b0:	da15      	bge.n	18de <process_event+0x7a>
		*clients = mgr->clients;
    18b2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18b4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    18b8:	e9c4 8800 	strd	r8, r8, [r4]
    18bc:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    18c0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    18c2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    18c4:	8b21      	ldrh	r1, [r4, #24]
    18c6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    18ca:	45ca      	cmp	sl, r9
    18cc:	d002      	beq.n	18d4 <process_event+0x70>
		if (do_monitors
    18ce:	68a3      	ldr	r3, [r4, #8]
    18d0:	2b00      	cmp	r3, #0
    18d2:	d15a      	bne.n	198a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    18d4:	b90d      	cbnz	r5, 18da <process_event+0x76>
		    || (transit != NULL)) {
    18d6:	2e00      	cmp	r6, #0
    18d8:	d071      	beq.n	19be <process_event+0x15a>
    18da:	2300      	movs	r3, #0
    18dc:	e056      	b.n	198c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18de:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    18e2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    18e4:	2a01      	cmp	r2, #1
    18e6:	d81e      	bhi.n	1926 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18e8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    18ec:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    18ee:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18f0:	b289      	uxth	r1, r1
    18f2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    18f6:	d10a      	bne.n	190e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    18f8:	b13d      	cbz	r5, 190a <process_event+0xa6>
    18fa:	8b63      	ldrh	r3, [r4, #26]
    18fc:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    18fe:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1900:	3301      	adds	r3, #1
    1902:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1904:	2a00      	cmp	r2, #0
    1906:	d1fa      	bne.n	18fe <process_event+0x9a>
    1908:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    190a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    190e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1910:	4620      	mov	r0, r4
    1912:	f00b f85d 	bl	c9d0 <process_recheck>
    1916:	4606      	mov	r6, r0
    1918:	2800      	cmp	r0, #0
    191a:	d0d3      	beq.n	18c4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    191c:	8b23      	ldrh	r3, [r4, #24]
    191e:	f043 0320 	orr.w	r3, r3, #32
    1922:	8323      	strh	r3, [r4, #24]
    1924:	e7cd      	b.n	18c2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1926:	2b04      	cmp	r3, #4
    1928:	d10c      	bne.n	1944 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    192a:	f021 0107 	bic.w	r1, r1, #7
    192e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1930:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1932:	4620      	mov	r0, r4
    1934:	f00b f84c 	bl	c9d0 <process_recheck>
    1938:	4605      	mov	r5, r0
    193a:	2800      	cmp	r0, #0
    193c:	d0c1      	beq.n	18c2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    193e:	f041 0120 	orr.w	r1, r1, #32
    1942:	8321      	strh	r1, [r4, #24]
    1944:	2500      	movs	r5, #0
    1946:	e7bc      	b.n	18c2 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1948:	2803      	cmp	r0, #3
    194a:	d109      	bne.n	1960 <process_event+0xfc>
			transit = mgr->transitions->start;
    194c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    194e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1952:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1954:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1958:	8323      	strh	r3, [r4, #24]
}
    195a:	2500      	movs	r5, #0
		res = 0;
    195c:	462f      	mov	r7, r5
    195e:	e7b1      	b.n	18c4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1960:	2804      	cmp	r0, #4
    1962:	d106      	bne.n	1972 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1964:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1966:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    196a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    196c:	f043 0304 	orr.w	r3, r3, #4
    1970:	e7f2      	b.n	1958 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1972:	2805      	cmp	r0, #5
    1974:	d106      	bne.n	1984 <process_event+0x120>
			transit = mgr->transitions->reset;
    1976:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1978:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    197c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    197e:	f043 0305 	orr.w	r3, r3, #5
    1982:	e7e9      	b.n	1958 <process_event+0xf4>
    1984:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1986:	462e      	mov	r6, r5
    1988:	e7e8      	b.n	195c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    198a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    198c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1990:	8321      	strh	r1, [r4, #24]
    1992:	f38b 8811 	msr	BASEPRI, fp
    1996:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    199a:	b9fb      	cbnz	r3, 19dc <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    199c:	bb85      	cbnz	r5, 1a00 <process_event+0x19c>
			if (transit != NULL) {
    199e:	b116      	cbz	r6, 19a6 <process_event+0x142>
				transit(mgr, transition_complete);
    19a0:	491f      	ldr	r1, [pc, #124]	; (1a20 <process_event+0x1bc>)
    19a2:	4620      	mov	r0, r4
    19a4:	47b0      	blx	r6
	__asm__ volatile(
    19a6:	f04f 0320 	mov.w	r3, #32
    19aa:	f3ef 8b11 	mrs	fp, BASEPRI
    19ae:	f383 8812 	msr	BASEPRI_MAX, r3
    19b2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    19b6:	8b23      	ldrh	r3, [r4, #24]
    19b8:	f023 0308 	bic.w	r3, r3, #8
    19bc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    19be:	8b23      	ldrh	r3, [r4, #24]
    19c0:	06da      	lsls	r2, r3, #27
    19c2:	d525      	bpl.n	1a10 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    19c4:	f023 0310 	bic.w	r3, r3, #16
    19c8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    19ca:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    19cc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    19d0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    19d4:	2900      	cmp	r1, #0
    19d6:	f47f af5e 	bne.w	1896 <process_event+0x32>
out:
    19da:	e754      	b.n	1886 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    19dc:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    19de:	2900      	cmp	r1, #0
    19e0:	d0dc      	beq.n	199c <process_event+0x138>
	return node->next;
    19e2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    19e6:	f8d1 b004 	ldr.w	fp, [r1, #4]
    19ea:	463b      	mov	r3, r7
    19ec:	4652      	mov	r2, sl
    19ee:	4620      	mov	r0, r4
    19f0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    19f2:	f1b9 0f00 	cmp.w	r9, #0
    19f6:	d0d1      	beq.n	199c <process_event+0x138>
    19f8:	4649      	mov	r1, r9
    19fa:	f8d9 9000 	ldr.w	r9, [r9]
    19fe:	e7f2      	b.n	19e6 <process_event+0x182>
    1a00:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1a02:	463b      	mov	r3, r7
    1a04:	4652      	mov	r2, sl
    1a06:	4620      	mov	r0, r4
    1a08:	682d      	ldr	r5, [r5, #0]
    1a0a:	f00a fffd 	bl	ca08 <notify_one>
    1a0e:	e7c5      	b.n	199c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1a10:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1a14:	bf1e      	ittt	ne
    1a16:	f023 0320 	bicne.w	r3, r3, #32
    1a1a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1a1c:	2102      	movne	r1, #2
    1a1e:	e7d5      	b.n	19cc <process_event+0x168>
    1a20:	0000ca35 	.word	0x0000ca35

00001a24 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a28:	b091      	sub	sp, #68	; 0x44
    1a2a:	468b      	mov	fp, r1
    1a2c:	9002      	str	r0, [sp, #8]
    1a2e:	4692      	mov	sl, r2
    1a30:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1a32:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1a34:	f89a 0000 	ldrb.w	r0, [sl]
    1a38:	b908      	cbnz	r0, 1a3e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1a3a:	4628      	mov	r0, r5
    1a3c:	e35f      	b.n	20fe <cbvprintf+0x6da>
		if (*fp != '%') {
    1a3e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1a40:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1a44:	d007      	beq.n	1a56 <cbvprintf+0x32>
			OUTC('%');
    1a46:	9b02      	ldr	r3, [sp, #8]
    1a48:	4659      	mov	r1, fp
    1a4a:	4798      	blx	r3
    1a4c:	2800      	cmp	r0, #0
    1a4e:	f2c0 8356 	blt.w	20fe <cbvprintf+0x6da>
    1a52:	3501      	adds	r5, #1
			break;
    1a54:	e212      	b.n	1e7c <cbvprintf+0x458>
		} state = {
    1a56:	2218      	movs	r2, #24
    1a58:	2100      	movs	r1, #0
    1a5a:	a80a      	add	r0, sp, #40	; 0x28
    1a5c:	f00d fb1d 	bl	f09a <memset>
	if (*sp == '%') {
    1a60:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1a64:	2b25      	cmp	r3, #37	; 0x25
    1a66:	d078      	beq.n	1b5a <cbvprintf+0x136>
    1a68:	2200      	movs	r2, #0
    1a6a:	4610      	mov	r0, r2
    1a6c:	4696      	mov	lr, r2
    1a6e:	4694      	mov	ip, r2
    1a70:	4616      	mov	r6, r2
    1a72:	4639      	mov	r1, r7
		switch (*sp) {
    1a74:	f817 3b01 	ldrb.w	r3, [r7], #1
    1a78:	2b2b      	cmp	r3, #43	; 0x2b
    1a7a:	f000 809d 	beq.w	1bb8 <cbvprintf+0x194>
    1a7e:	f200 8094 	bhi.w	1baa <cbvprintf+0x186>
    1a82:	2b20      	cmp	r3, #32
    1a84:	f000 809b 	beq.w	1bbe <cbvprintf+0x19a>
    1a88:	2b23      	cmp	r3, #35	; 0x23
    1a8a:	f000 809b 	beq.w	1bc4 <cbvprintf+0x1a0>
    1a8e:	b12e      	cbz	r6, 1a9c <cbvprintf+0x78>
    1a90:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1a94:	f046 0604 	orr.w	r6, r6, #4
    1a98:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1a9c:	f1bc 0f00 	cmp.w	ip, #0
    1aa0:	d005      	beq.n	1aae <cbvprintf+0x8a>
    1aa2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1aa6:	f046 0608 	orr.w	r6, r6, #8
    1aaa:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1aae:	f1be 0f00 	cmp.w	lr, #0
    1ab2:	d005      	beq.n	1ac0 <cbvprintf+0x9c>
    1ab4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1ab8:	f046 0610 	orr.w	r6, r6, #16
    1abc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1ac0:	b128      	cbz	r0, 1ace <cbvprintf+0xaa>
    1ac2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1ac6:	f040 0020 	orr.w	r0, r0, #32
    1aca:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1ace:	b12a      	cbz	r2, 1adc <cbvprintf+0xb8>
    1ad0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1ad8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1adc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1ae0:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1ae4:	2844      	cmp	r0, #68	; 0x44
    1ae6:	d103      	bne.n	1af0 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1ae8:	f36f 1286 	bfc	r2, #6, #1
    1aec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1af0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1af4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1afa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1afe:	d17b      	bne.n	1bf8 <cbvprintf+0x1d4>
		conv->width_star = true;
    1b00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b04:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1b08:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1b0a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1b0e:	781a      	ldrb	r2, [r3, #0]
    1b10:	2a2e      	cmp	r2, #46	; 0x2e
    1b12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b16:	bf0c      	ite	eq
    1b18:	2101      	moveq	r1, #1
    1b1a:	2100      	movne	r1, #0
    1b1c:	f361 0241 	bfi	r2, r1, #1, #1
    1b20:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1b24:	d174      	bne.n	1c10 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1b26:	785a      	ldrb	r2, [r3, #1]
    1b28:	2a2a      	cmp	r2, #42	; 0x2a
    1b2a:	d06a      	beq.n	1c02 <cbvprintf+0x1de>
	++sp;
    1b2c:	3301      	adds	r3, #1
	size_t val = 0;
    1b2e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1b30:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1b32:	4618      	mov	r0, r3
    1b34:	f810 2b01 	ldrb.w	r2, [r0], #1
    1b38:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1b3c:	2f09      	cmp	r7, #9
    1b3e:	f240 808e 	bls.w	1c5e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1b42:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1b46:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1b48:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1b4c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1b50:	f361 0241 	bfi	r2, r1, #1, #1
    1b54:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1b58:	e05a      	b.n	1c10 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1b5a:	f10a 0702 	add.w	r7, sl, #2
    1b5e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1b62:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b66:	07d9      	lsls	r1, r3, #31
    1b68:	f140 8149 	bpl.w	1dfe <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1b6c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1b70:	f1b9 0f00 	cmp.w	r9, #0
    1b74:	da07      	bge.n	1b86 <cbvprintf+0x162>
				conv->flag_dash = true;
    1b76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1b7a:	f042 0204 	orr.w	r2, r2, #4
    1b7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1b82:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1b86:	075a      	lsls	r2, r3, #29
    1b88:	f140 8142 	bpl.w	1e10 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1b8c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1b90:	f1b8 0f00 	cmp.w	r8, #0
    1b94:	f280 8141 	bge.w	1e1a <cbvprintf+0x3f6>
				conv->prec_present = false;
    1b98:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b9c:	f36f 0341 	bfc	r3, #1, #1
    1ba0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1ba4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1ba8:	e137      	b.n	1e1a <cbvprintf+0x3f6>
		switch (*sp) {
    1baa:	2b2d      	cmp	r3, #45	; 0x2d
    1bac:	d00c      	beq.n	1bc8 <cbvprintf+0x1a4>
    1bae:	2b30      	cmp	r3, #48	; 0x30
    1bb0:	f47f af6d 	bne.w	1a8e <cbvprintf+0x6a>
			conv->flag_zero = true;
    1bb4:	2201      	movs	r2, #1
	} while (loop);
    1bb6:	e75c      	b.n	1a72 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1bb8:	f04f 0c01 	mov.w	ip, #1
    1bbc:	e759      	b.n	1a72 <cbvprintf+0x4e>
			conv->flag_space = true;
    1bbe:	f04f 0e01 	mov.w	lr, #1
    1bc2:	e756      	b.n	1a72 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1bc4:	2001      	movs	r0, #1
    1bc6:	e754      	b.n	1a72 <cbvprintf+0x4e>
		switch (*sp) {
    1bc8:	2601      	movs	r6, #1
    1bca:	e752      	b.n	1a72 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1bcc:	fb0c 0202 	mla	r2, ip, r2, r0
    1bd0:	3a30      	subs	r2, #48	; 0x30
    1bd2:	4633      	mov	r3, r6
    1bd4:	461e      	mov	r6, r3
    1bd6:	f816 0b01 	ldrb.w	r0, [r6], #1
    1bda:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1bde:	2f09      	cmp	r7, #9
    1be0:	d9f4      	bls.n	1bcc <cbvprintf+0x1a8>
	if (sp != wp) {
    1be2:	4299      	cmp	r1, r3
    1be4:	d093      	beq.n	1b0e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1be6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1bea:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1bec:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1bee:	f362 0141 	bfi	r1, r2, #1, #1
    1bf2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1bf6:	e78a      	b.n	1b0e <cbvprintf+0xea>
    1bf8:	460b      	mov	r3, r1
	size_t val = 0;
    1bfa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1bfc:	f04f 0c0a 	mov.w	ip, #10
    1c00:	e7e8      	b.n	1bd4 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1c02:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1c06:	f042 0204 	orr.w	r2, r2, #4
    1c0a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1c0e:	3302      	adds	r3, #2
	switch (*sp) {
    1c10:	461f      	mov	r7, r3
    1c12:	f817 2b01 	ldrb.w	r2, [r7], #1
    1c16:	2a6c      	cmp	r2, #108	; 0x6c
    1c18:	d041      	beq.n	1c9e <cbvprintf+0x27a>
    1c1a:	d825      	bhi.n	1c68 <cbvprintf+0x244>
    1c1c:	2a68      	cmp	r2, #104	; 0x68
    1c1e:	d02b      	beq.n	1c78 <cbvprintf+0x254>
    1c20:	2a6a      	cmp	r2, #106	; 0x6a
    1c22:	d046      	beq.n	1cb2 <cbvprintf+0x28e>
    1c24:	2a4c      	cmp	r2, #76	; 0x4c
    1c26:	d04c      	beq.n	1cc2 <cbvprintf+0x29e>
    1c28:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1c2a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c2e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1c32:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1c36:	2a78      	cmp	r2, #120	; 0x78
    1c38:	f200 80d9 	bhi.w	1dee <cbvprintf+0x3ca>
    1c3c:	2a57      	cmp	r2, #87	; 0x57
    1c3e:	d84d      	bhi.n	1cdc <cbvprintf+0x2b8>
    1c40:	2a41      	cmp	r2, #65	; 0x41
    1c42:	d003      	beq.n	1c4c <cbvprintf+0x228>
    1c44:	3a45      	subs	r2, #69	; 0x45
    1c46:	2a02      	cmp	r2, #2
    1c48:	f200 80d1 	bhi.w	1dee <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1c4c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c50:	2204      	movs	r2, #4
    1c52:	f362 0302 	bfi	r3, r2, #0, #3
    1c56:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1c5a:	2301      	movs	r3, #1
			break;
    1c5c:	e09e      	b.n	1d9c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1c5e:	fb06 2101 	mla	r1, r6, r1, r2
    1c62:	3930      	subs	r1, #48	; 0x30
    1c64:	4603      	mov	r3, r0
    1c66:	e764      	b.n	1b32 <cbvprintf+0x10e>
	switch (*sp) {
    1c68:	2a74      	cmp	r2, #116	; 0x74
    1c6a:	d026      	beq.n	1cba <cbvprintf+0x296>
    1c6c:	2a7a      	cmp	r2, #122	; 0x7a
    1c6e:	d1db      	bne.n	1c28 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1c70:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1c74:	2206      	movs	r2, #6
    1c76:	e00d      	b.n	1c94 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1c78:	785a      	ldrb	r2, [r3, #1]
    1c7a:	2a68      	cmp	r2, #104	; 0x68
    1c7c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1c80:	d106      	bne.n	1c90 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1c82:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1c84:	f361 02c6 	bfi	r2, r1, #3, #4
    1c88:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1c8c:	1c9f      	adds	r7, r3, #2
    1c8e:	e7cc      	b.n	1c2a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1c90:	4613      	mov	r3, r2
    1c92:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1c94:	f362 03c6 	bfi	r3, r2, #3, #4
    1c98:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1c9c:	e7c5      	b.n	1c2a <cbvprintf+0x206>
		if (*++sp == 'l') {
    1c9e:	785a      	ldrb	r2, [r3, #1]
    1ca0:	2a6c      	cmp	r2, #108	; 0x6c
    1ca2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1ca6:	d101      	bne.n	1cac <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1ca8:	2104      	movs	r1, #4
    1caa:	e7eb      	b.n	1c84 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1cac:	4613      	mov	r3, r2
    1cae:	2203      	movs	r2, #3
    1cb0:	e7f0      	b.n	1c94 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1cb2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1cb6:	2205      	movs	r2, #5
    1cb8:	e7ec      	b.n	1c94 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1cba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1cbe:	2207      	movs	r2, #7
    1cc0:	e7e8      	b.n	1c94 <cbvprintf+0x270>
		conv->unsupported = true;
    1cc2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1cc6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1cca:	f023 0302 	bic.w	r3, r3, #2
    1cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1cd2:	f043 0302 	orr.w	r3, r3, #2
    1cd6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1cda:	e7a6      	b.n	1c2a <cbvprintf+0x206>
	switch (conv->specifier) {
    1cdc:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1ce0:	2920      	cmp	r1, #32
    1ce2:	f200 8084 	bhi.w	1dee <cbvprintf+0x3ca>
    1ce6:	a001      	add	r0, pc, #4	; (adr r0, 1cec <cbvprintf+0x2c8>)
    1ce8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1cec:	00001db1 	.word	0x00001db1
    1cf0:	00001def 	.word	0x00001def
    1cf4:	00001def 	.word	0x00001def
    1cf8:	00001def 	.word	0x00001def
    1cfc:	00001def 	.word	0x00001def
    1d00:	00001def 	.word	0x00001def
    1d04:	00001def 	.word	0x00001def
    1d08:	00001def 	.word	0x00001def
    1d0c:	00001def 	.word	0x00001def
    1d10:	00001c4d 	.word	0x00001c4d
    1d14:	00001def 	.word	0x00001def
    1d18:	00001db1 	.word	0x00001db1
    1d1c:	00001d71 	.word	0x00001d71
    1d20:	00001c4d 	.word	0x00001c4d
    1d24:	00001c4d 	.word	0x00001c4d
    1d28:	00001c4d 	.word	0x00001c4d
    1d2c:	00001def 	.word	0x00001def
    1d30:	00001d71 	.word	0x00001d71
    1d34:	00001def 	.word	0x00001def
    1d38:	00001def 	.word	0x00001def
    1d3c:	00001def 	.word	0x00001def
    1d40:	00001def 	.word	0x00001def
    1d44:	00001db9 	.word	0x00001db9
    1d48:	00001db1 	.word	0x00001db1
    1d4c:	00001dd5 	.word	0x00001dd5
    1d50:	00001def 	.word	0x00001def
    1d54:	00001def 	.word	0x00001def
    1d58:	00001dd5 	.word	0x00001dd5
    1d5c:	00001def 	.word	0x00001def
    1d60:	00001db1 	.word	0x00001db1
    1d64:	00001def 	.word	0x00001def
    1d68:	00001def 	.word	0x00001def
    1d6c:	00001db1 	.word	0x00001db1
		conv->specifier_cat = SPECIFIER_SINT;
    1d70:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1d74:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d76:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1d7a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d7e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1d80:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1d84:	bf02      	ittt	eq
    1d86:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1d8a:	f041 0101 	orreq.w	r1, r1, #1
    1d8e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1d92:	2a63      	cmp	r2, #99	; 0x63
    1d94:	d131      	bne.n	1dfa <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1d96:	3b00      	subs	r3, #0
    1d98:	bf18      	it	ne
    1d9a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1d9c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1da0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1da4:	430b      	orrs	r3, r1
    1da6:	f363 0241 	bfi	r2, r3, #1, #1
    1daa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1dae:	e6d8      	b.n	1b62 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1db0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1db4:	2002      	movs	r0, #2
    1db6:	e7de      	b.n	1d76 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1db8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dbc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1dc0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1dc4:	2103      	movs	r1, #3
    1dc6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dca:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1dcc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dd0:	4143      	adcs	r3, r0
    1dd2:	e7e3      	b.n	1d9c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1dd4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1dd8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1dda:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1dde:	f361 0202 	bfi	r2, r1, #0, #3
    1de2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1de6:	bf14      	ite	ne
    1de8:	2301      	movne	r3, #1
    1dea:	2300      	moveq	r3, #0
    1dec:	e7d6      	b.n	1d9c <cbvprintf+0x378>
		conv->invalid = true;
    1dee:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1df2:	f043 0301 	orr.w	r3, r3, #1
    1df6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1dfa:	2300      	movs	r3, #0
    1dfc:	e7ce      	b.n	1d9c <cbvprintf+0x378>
		} else if (conv->width_present) {
    1dfe:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1e02:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1e04:	bfb4      	ite	lt
    1e06:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1e0a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1e0e:	e6ba      	b.n	1b86 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1e10:	079b      	lsls	r3, r3, #30
    1e12:	f57f aec7 	bpl.w	1ba4 <cbvprintf+0x180>
			precision = conv->prec_value;
    1e16:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1e1a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1e1e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1e20:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1e24:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1e28:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1e2c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1e2e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1e32:	d138      	bne.n	1ea6 <cbvprintf+0x482>
			switch (length_mod) {
    1e34:	1ecb      	subs	r3, r1, #3
    1e36:	2b04      	cmp	r3, #4
    1e38:	d822      	bhi.n	1e80 <cbvprintf+0x45c>
    1e3a:	e8df f003 	tbb	[pc, r3]
    1e3e:	0903      	.short	0x0903
    1e40:	2109      	.short	0x2109
    1e42:	21          	.byte	0x21
    1e43:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1e44:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1e48:	17da      	asrs	r2, r3, #31
    1e4a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    1e4e:	e006      	b.n	1e5e <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    1e50:	3407      	adds	r4, #7
    1e52:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1e56:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1e5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1e5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1e62:	f013 0603 	ands.w	r6, r3, #3
    1e66:	d056      	beq.n	1f16 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    1e68:	9802      	ldr	r0, [sp, #8]
    1e6a:	463b      	mov	r3, r7
    1e6c:	4652      	mov	r2, sl
    1e6e:	4659      	mov	r1, fp
    1e70:	f00b f8b0 	bl	cfd4 <outs>
    1e74:	2800      	cmp	r0, #0
    1e76:	f2c0 8142 	blt.w	20fe <cbvprintf+0x6da>
    1e7a:	4405      	add	r5, r0
			continue;
    1e7c:	46ba      	mov	sl, r7
    1e7e:	e5d9      	b.n	1a34 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1e80:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1e84:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1e86:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1e8a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1e8e:	d105      	bne.n	1e9c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    1e90:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1e94:	930a      	str	r3, [sp, #40]	; 0x28
    1e96:	2300      	movs	r3, #0
    1e98:	930b      	str	r3, [sp, #44]	; 0x2c
    1e9a:	e7e0      	b.n	1e5e <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1e9c:	2902      	cmp	r1, #2
    1e9e:	d1de      	bne.n	1e5e <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1ea0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1ea4:	e7d0      	b.n	1e48 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1ea6:	2b02      	cmp	r3, #2
    1ea8:	d123      	bne.n	1ef2 <cbvprintf+0x4ce>
			switch (length_mod) {
    1eaa:	1ecb      	subs	r3, r1, #3
    1eac:	2b04      	cmp	r3, #4
    1eae:	d813      	bhi.n	1ed8 <cbvprintf+0x4b4>
    1eb0:	e8df f003 	tbb	[pc, r3]
    1eb4:	120a0a03 	.word	0x120a0a03
    1eb8:	12          	.byte	0x12
    1eb9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1eba:	6822      	ldr	r2, [r4, #0]
    1ebc:	920a      	str	r2, [sp, #40]	; 0x28
    1ebe:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1ec0:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1ec2:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1ec4:	4604      	mov	r4, r0
    1ec6:	e7ca      	b.n	1e5e <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    1ec8:	1de0      	adds	r0, r4, #7
    1eca:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1ece:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1ed2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1ed6:	e7f5      	b.n	1ec4 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    1ed8:	f854 3b04 	ldr.w	r3, [r4], #4
    1edc:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1ede:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1ee0:	f04f 0300 	mov.w	r3, #0
    1ee4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1ee6:	d0d3      	beq.n	1e90 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    1ee8:	2902      	cmp	r1, #2
    1eea:	d1b8      	bne.n	1e5e <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1eec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1ef0:	e7d0      	b.n	1e94 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    1ef2:	2b04      	cmp	r3, #4
    1ef4:	d109      	bne.n	1f0a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    1ef6:	1de3      	adds	r3, r4, #7
    1ef8:	f023 0307 	bic.w	r3, r3, #7
    1efc:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1f00:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1f08:	e7a9      	b.n	1e5e <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1f0a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1f0c:	bf04      	itt	eq
    1f0e:	f854 3b04 	ldreq.w	r3, [r4], #4
    1f12:	930a      	streq	r3, [sp, #40]	; 0x28
    1f14:	e7a3      	b.n	1e5e <cbvprintf+0x43a>
		switch (conv->specifier) {
    1f16:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1f1a:	2878      	cmp	r0, #120	; 0x78
    1f1c:	d8ae      	bhi.n	1e7c <cbvprintf+0x458>
    1f1e:	2862      	cmp	r0, #98	; 0x62
    1f20:	d822      	bhi.n	1f68 <cbvprintf+0x544>
    1f22:	2825      	cmp	r0, #37	; 0x25
    1f24:	f43f ad8f 	beq.w	1a46 <cbvprintf+0x22>
    1f28:	2858      	cmp	r0, #88	; 0x58
    1f2a:	d1a7      	bne.n	1e7c <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1f2c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1f30:	9300      	str	r3, [sp, #0]
    1f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1f36:	ab04      	add	r3, sp, #16
    1f38:	aa0c      	add	r2, sp, #48	; 0x30
    1f3a:	f00b f805 	bl	cf48 <encode_uint>
    1f3e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1f40:	f1b8 0f00 	cmp.w	r8, #0
    1f44:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1f48:	db0c      	blt.n	1f64 <cbvprintf+0x540>
				conv->flag_zero = false;
    1f4a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1f4e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1f52:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1f56:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1f58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1f5c:	d902      	bls.n	1f64 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    1f5e:	eba8 0303 	sub.w	r3, r8, r3
    1f62:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1f64:	4680      	mov	r8, r0
    1f66:	e03d      	b.n	1fe4 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    1f68:	3863      	subs	r0, #99	; 0x63
    1f6a:	2815      	cmp	r0, #21
    1f6c:	d886      	bhi.n	1e7c <cbvprintf+0x458>
    1f6e:	a201      	add	r2, pc, #4	; (adr r2, 1f74 <cbvprintf+0x550>)
    1f70:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1f74:	00001ff5 	.word	0x00001ff5
    1f78:	00002059 	.word	0x00002059
    1f7c:	00001e7d 	.word	0x00001e7d
    1f80:	00001e7d 	.word	0x00001e7d
    1f84:	00001e7d 	.word	0x00001e7d
    1f88:	00001e7d 	.word	0x00001e7d
    1f8c:	00002059 	.word	0x00002059
    1f90:	00001e7d 	.word	0x00001e7d
    1f94:	00001e7d 	.word	0x00001e7d
    1f98:	00001e7d 	.word	0x00001e7d
    1f9c:	00001e7d 	.word	0x00001e7d
    1fa0:	000020b3 	.word	0x000020b3
    1fa4:	00002081 	.word	0x00002081
    1fa8:	00002085 	.word	0x00002085
    1fac:	00001e7d 	.word	0x00001e7d
    1fb0:	00001e7d 	.word	0x00001e7d
    1fb4:	00001fcd 	.word	0x00001fcd
    1fb8:	00001e7d 	.word	0x00001e7d
    1fbc:	00002081 	.word	0x00002081
    1fc0:	00001e7d 	.word	0x00001e7d
    1fc4:	00001e7d 	.word	0x00001e7d
    1fc8:	00002081 	.word	0x00002081
			if (precision >= 0) {
    1fcc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1fd4:	db0a      	blt.n	1fec <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    1fd6:	4641      	mov	r1, r8
    1fd8:	4650      	mov	r0, sl
    1fda:	f00d f804 	bl	efe6 <strnlen>
			bpe = bps + len;
    1fde:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1fe2:	2600      	movs	r6, #0
		if (bps == NULL) {
    1fe4:	f1ba 0f00 	cmp.w	sl, #0
    1fe8:	d10c      	bne.n	2004 <cbvprintf+0x5e0>
    1fea:	e747      	b.n	1e7c <cbvprintf+0x458>
				len = strlen(bps);
    1fec:	4650      	mov	r0, sl
    1fee:	f00c fff3 	bl	efd8 <strlen>
    1ff2:	e7f4      	b.n	1fde <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ff6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1ffa:	2600      	movs	r6, #0
			bps = buf;
    1ffc:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    2000:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    2004:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    2008:	b106      	cbz	r6, 200c <cbvprintf+0x5e8>
			nj_len += 1U;
    200a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    200c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2010:	06d0      	lsls	r0, r2, #27
    2012:	d568      	bpl.n	20e6 <cbvprintf+0x6c2>
			nj_len += 2U;
    2014:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    2016:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    2018:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    201a:	bf48      	it	mi
    201c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    201e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2020:	bf48      	it	mi
    2022:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2024:	f1b9 0f00 	cmp.w	r9, #0
    2028:	dd76      	ble.n	2118 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    202a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    202e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    2032:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2036:	9303      	str	r3, [sp, #12]
    2038:	0753      	lsls	r3, r2, #29
    203a:	d46d      	bmi.n	2118 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    203c:	0650      	lsls	r0, r2, #25
    203e:	d561      	bpl.n	2104 <cbvprintf+0x6e0>
					if (sign != 0) {
    2040:	b146      	cbz	r6, 2054 <cbvprintf+0x630>
						OUTC(sign);
    2042:	9b02      	ldr	r3, [sp, #8]
    2044:	4659      	mov	r1, fp
    2046:	4630      	mov	r0, r6
    2048:	4798      	blx	r3
    204a:	2800      	cmp	r0, #0
    204c:	db57      	blt.n	20fe <cbvprintf+0x6da>
						sign = 0;
    204e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    2050:	3501      	adds	r5, #1
						sign = 0;
    2052:	461e      	mov	r6, r3
					pad = '0';
    2054:	2330      	movs	r3, #48	; 0x30
    2056:	e056      	b.n	2106 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    2058:	071e      	lsls	r6, r3, #28
    205a:	d40f      	bmi.n	207c <cbvprintf+0x658>
				sign = ' ';
    205c:	f013 0610 	ands.w	r6, r3, #16
    2060:	bf18      	it	ne
    2062:	2620      	movne	r6, #32
			sint = value->sint;
    2064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    2068:	2b00      	cmp	r3, #0
    206a:	f6bf af5f 	bge.w	1f2c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    206e:	4252      	negs	r2, r2
    2070:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2074:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    2078:	262d      	movs	r6, #45	; 0x2d
    207a:	e757      	b.n	1f2c <cbvprintf+0x508>
				sign = '+';
    207c:	262b      	movs	r6, #43	; 0x2b
    207e:	e7f1      	b.n	2064 <cbvprintf+0x640>
		switch (conv->specifier) {
    2080:	2600      	movs	r6, #0
    2082:	e753      	b.n	1f2c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    2084:	980a      	ldr	r0, [sp, #40]	; 0x28
    2086:	b340      	cbz	r0, 20da <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2088:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    208c:	9300      	str	r3, [sp, #0]
    208e:	aa0c      	add	r2, sp, #48	; 0x30
    2090:	ab04      	add	r3, sp, #16
    2092:	2100      	movs	r1, #0
    2094:	f00a ff58 	bl	cf48 <encode_uint>
				conv->altform_0c = true;
    2098:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    209c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    20a0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    20a4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    20a8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    20aa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    20ae:	2600      	movs	r6, #0
				goto prec_int_pad0;
    20b0:	e746      	b.n	1f40 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    20b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    20b4:	2907      	cmp	r1, #7
    20b6:	f63f aee1 	bhi.w	1e7c <cbvprintf+0x458>
    20ba:	e8df f001 	tbb	[pc, r1]
    20be:	040c      	.short	0x040c
    20c0:	08080c06 	.word	0x08080c06
    20c4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    20c6:	701d      	strb	r5, [r3, #0]
		break;
    20c8:	e6d8      	b.n	1e7c <cbvprintf+0x458>
		*(short *)dp = (short)count;
    20ca:	801d      	strh	r5, [r3, #0]
		break;
    20cc:	e6d6      	b.n	1e7c <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    20ce:	17ea      	asrs	r2, r5, #31
    20d0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    20d4:	e6d2      	b.n	1e7c <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    20d6:	601d      	str	r5, [r3, #0]
		break;
    20d8:	e6d0      	b.n	1e7c <cbvprintf+0x458>
			bps = "(nil)";
    20da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 21a4 <cbvprintf+0x780>
    20de:	4606      	mov	r6, r0
			bpe = bps + 5;
    20e0:	f10a 0805 	add.w	r8, sl, #5
    20e4:	e78e      	b.n	2004 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    20e6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    20e8:	bf48      	it	mi
    20ea:	3301      	addmi	r3, #1
    20ec:	e793      	b.n	2016 <cbvprintf+0x5f2>
					OUTC(pad);
    20ee:	4618      	mov	r0, r3
    20f0:	9303      	str	r3, [sp, #12]
    20f2:	4659      	mov	r1, fp
    20f4:	9b02      	ldr	r3, [sp, #8]
    20f6:	4798      	blx	r3
    20f8:	2800      	cmp	r0, #0
    20fa:	9b03      	ldr	r3, [sp, #12]
    20fc:	da04      	bge.n	2108 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    20fe:	b011      	add	sp, #68	; 0x44
    2100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2104:	2320      	movs	r3, #32
    2106:	444d      	add	r5, r9
    2108:	464a      	mov	r2, r9
				while (width-- > 0) {
    210a:	2a00      	cmp	r2, #0
    210c:	eba5 0109 	sub.w	r1, r5, r9
    2110:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2114:	dceb      	bgt.n	20ee <cbvprintf+0x6ca>
    2116:	460d      	mov	r5, r1
		if (sign != 0) {
    2118:	b136      	cbz	r6, 2128 <cbvprintf+0x704>
			OUTC(sign);
    211a:	9b02      	ldr	r3, [sp, #8]
    211c:	4659      	mov	r1, fp
    211e:	4630      	mov	r0, r6
    2120:	4798      	blx	r3
    2122:	2800      	cmp	r0, #0
    2124:	dbeb      	blt.n	20fe <cbvprintf+0x6da>
    2126:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2128:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    212c:	06d9      	lsls	r1, r3, #27
    212e:	d401      	bmi.n	2134 <cbvprintf+0x710>
    2130:	071a      	lsls	r2, r3, #28
    2132:	d506      	bpl.n	2142 <cbvprintf+0x71e>
				OUTC('0');
    2134:	9b02      	ldr	r3, [sp, #8]
    2136:	4659      	mov	r1, fp
    2138:	2030      	movs	r0, #48	; 0x30
    213a:	4798      	blx	r3
    213c:	2800      	cmp	r0, #0
    213e:	dbde      	blt.n	20fe <cbvprintf+0x6da>
    2140:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2142:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2146:	06db      	lsls	r3, r3, #27
    2148:	d507      	bpl.n	215a <cbvprintf+0x736>
				OUTC(conv->specifier);
    214a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    214e:	9b02      	ldr	r3, [sp, #8]
    2150:	4659      	mov	r1, fp
    2152:	4798      	blx	r3
    2154:	2800      	cmp	r0, #0
    2156:	dbd2      	blt.n	20fe <cbvprintf+0x6da>
    2158:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    215a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    215c:	442e      	add	r6, r5
    215e:	1b73      	subs	r3, r6, r5
    2160:	2b00      	cmp	r3, #0
    2162:	dc16      	bgt.n	2192 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    2164:	9802      	ldr	r0, [sp, #8]
    2166:	4643      	mov	r3, r8
    2168:	4652      	mov	r2, sl
    216a:	4659      	mov	r1, fp
    216c:	f00a ff32 	bl	cfd4 <outs>
    2170:	2800      	cmp	r0, #0
    2172:	dbc4      	blt.n	20fe <cbvprintf+0x6da>
    2174:	4405      	add	r5, r0
		while (width > 0) {
    2176:	44a9      	add	r9, r5
    2178:	eba9 0305 	sub.w	r3, r9, r5
    217c:	2b00      	cmp	r3, #0
    217e:	f77f ae7d 	ble.w	1e7c <cbvprintf+0x458>
			OUTC(' ');
    2182:	9b02      	ldr	r3, [sp, #8]
    2184:	4659      	mov	r1, fp
    2186:	2020      	movs	r0, #32
    2188:	4798      	blx	r3
    218a:	2800      	cmp	r0, #0
    218c:	dbb7      	blt.n	20fe <cbvprintf+0x6da>
    218e:	3501      	adds	r5, #1
			--width;
    2190:	e7f2      	b.n	2178 <cbvprintf+0x754>
				OUTC('0');
    2192:	9b02      	ldr	r3, [sp, #8]
    2194:	4659      	mov	r1, fp
    2196:	2030      	movs	r0, #48	; 0x30
    2198:	4798      	blx	r3
    219a:	2800      	cmp	r0, #0
    219c:	dbaf      	blt.n	20fe <cbvprintf+0x6da>
    219e:	3501      	adds	r5, #1
    21a0:	e7dd      	b.n	215e <cbvprintf+0x73a>
    21a2:	bf00      	nop
    21a4:	00011055 	.word	0x00011055

000021a8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    21a8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    21aa:	4910      	ldr	r1, [pc, #64]	; (21ec <enable_logger+0x44>)
    21ac:	4810      	ldr	r0, [pc, #64]	; (21f0 <enable_logger+0x48>)
{
    21ae:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    21b0:	2200      	movs	r2, #0
    21b2:	f00d fede 	bl	ff72 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    21b6:	4d0f      	ldr	r5, [pc, #60]	; (21f4 <enable_logger+0x4c>)
    21b8:	490f      	ldr	r1, [pc, #60]	; (21f8 <enable_logger+0x50>)
    21ba:	2200      	movs	r2, #0
    21bc:	2300      	movs	r3, #0
    21be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    21c2:	2400      	movs	r4, #0
    21c4:	230e      	movs	r3, #14
    21c6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    21ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
    21ce:	4b0b      	ldr	r3, [pc, #44]	; (21fc <enable_logger+0x54>)
    21d0:	9400      	str	r4, [sp, #0]
    21d2:	f44f 7240 	mov.w	r2, #768	; 0x300
    21d6:	4628      	mov	r0, r5
    21d8:	f009 fa30 	bl	b63c <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    21dc:	4908      	ldr	r1, [pc, #32]	; (2200 <enable_logger+0x58>)
    21de:	4628      	mov	r0, r5
    21e0:	f009 f97a 	bl	b4d8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    21e4:	4620      	mov	r0, r4
    21e6:	b009      	add	sp, #36	; 0x24
    21e8:	bd30      	pop	{r4, r5, pc}
    21ea:	bf00      	nop
    21ec:	00002205 	.word	0x00002205
    21f0:	200007d0 	.word	0x200007d0
    21f4:	20000808 	.word	0x20000808
    21f8:	20002200 	.word	0x20002200
    21fc:	00002459 	.word	0x00002459
    2200:	000113d4 	.word	0x000113d4

00002204 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2204:	4801      	ldr	r0, [pc, #4]	; (220c <log_process_thread_timer_expiry_fn+0x8>)
    2206:	f009 bbad 	b.w	b964 <z_impl_k_sem_give>
    220a:	bf00      	nop
    220c:	200002bc 	.word	0x200002bc

00002210 <log_init>:
{
    2210:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2212:	4b12      	ldr	r3, [pc, #72]	; (225c <log_init+0x4c>)
    2214:	f3bf 8f5b 	dmb	ish
    2218:	e853 5f00 	ldrex	r5, [r3]
    221c:	1c6a      	adds	r2, r5, #1
    221e:	e843 2100 	strex	r1, r2, [r3]
    2222:	2900      	cmp	r1, #0
    2224:	d1f8      	bne.n	2218 <log_init+0x8>
    2226:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    222a:	b92d      	cbnz	r5, 2238 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    222c:	4c0c      	ldr	r4, [pc, #48]	; (2260 <log_init+0x50>)
    222e:	4e0d      	ldr	r6, [pc, #52]	; (2264 <log_init+0x54>)
    2230:	1b36      	subs	r6, r6, r4
    2232:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2234:	42b5      	cmp	r5, r6
    2236:	db00      	blt.n	223a <log_init+0x2a>
}
    2238:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    223a:	7b23      	ldrb	r3, [r4, #12]
    223c:	b153      	cbz	r3, 2254 <log_init+0x44>
			if (backend->api->init != NULL) {
    223e:	6823      	ldr	r3, [r4, #0]
    2240:	699b      	ldr	r3, [r3, #24]
    2242:	b10b      	cbz	r3, 2248 <log_init+0x38>
				backend->api->init(backend);
    2244:	4620      	mov	r0, r4
    2246:	4798      	blx	r3
			log_backend_enable(backend,
    2248:	6863      	ldr	r3, [r4, #4]
    224a:	2204      	movs	r2, #4
    224c:	6819      	ldr	r1, [r3, #0]
    224e:	4620      	mov	r0, r4
    2250:	f000 fa38 	bl	26c4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2254:	3501      	adds	r5, #1
    2256:	3410      	adds	r4, #16
    2258:	e7ec      	b.n	2234 <log_init+0x24>
    225a:	bf00      	nop
    225c:	20000fb0 	.word	0x20000fb0
    2260:	00010648 	.word	0x00010648
    2264:	00010658 	.word	0x00010658

00002268 <z_log_notify_backend_enabled>:
{
    2268:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    226a:	4c04      	ldr	r4, [pc, #16]	; (227c <z_log_notify_backend_enabled+0x14>)
    226c:	7823      	ldrb	r3, [r4, #0]
    226e:	b913      	cbnz	r3, 2276 <z_log_notify_backend_enabled+0xe>
    2270:	4803      	ldr	r0, [pc, #12]	; (2280 <z_log_notify_backend_enabled+0x18>)
    2272:	f009 fb77 	bl	b964 <z_impl_k_sem_give>
	backend_attached = true;
    2276:	2301      	movs	r3, #1
    2278:	7023      	strb	r3, [r4, #0]
}
    227a:	bd10      	pop	{r4, pc}
    227c:	20002190 	.word	0x20002190
    2280:	200002bc 	.word	0x200002bc

00002284 <z_log_dropped>:
    2284:	4b0c      	ldr	r3, [pc, #48]	; (22b8 <z_log_dropped+0x34>)
    2286:	f3bf 8f5b 	dmb	ish
    228a:	e853 2f00 	ldrex	r2, [r3]
    228e:	3201      	adds	r2, #1
    2290:	e843 2100 	strex	r1, r2, [r3]
    2294:	2900      	cmp	r1, #0
    2296:	d1f8      	bne.n	228a <z_log_dropped+0x6>
    2298:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    229c:	b158      	cbz	r0, 22b6 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    229e:	f3bf 8f5b 	dmb	ish
    22a2:	4b06      	ldr	r3, [pc, #24]	; (22bc <z_log_dropped+0x38>)
    22a4:	e853 2f00 	ldrex	r2, [r3]
    22a8:	3a01      	subs	r2, #1
    22aa:	e843 2100 	strex	r1, r2, [r3]
    22ae:	2900      	cmp	r1, #0
    22b0:	d1f8      	bne.n	22a4 <z_log_dropped+0x20>
    22b2:	f3bf 8f5b 	dmb	ish
}
    22b6:	4770      	bx	lr
    22b8:	20000fac 	.word	0x20000fac
    22bc:	20000fa8 	.word	0x20000fa8

000022c0 <z_log_dropped_read_and_clear>:
}
    22c0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22c2:	4b06      	ldr	r3, [pc, #24]	; (22dc <z_log_dropped_read_and_clear+0x1c>)
    22c4:	f3bf 8f5b 	dmb	ish
    22c8:	4602      	mov	r2, r0
    22ca:	e853 0f00 	ldrex	r0, [r3]
    22ce:	e843 2100 	strex	r1, r2, [r3]
    22d2:	2900      	cmp	r1, #0
    22d4:	d1f9      	bne.n	22ca <z_log_dropped_read_and_clear+0xa>
    22d6:	f3bf 8f5b 	dmb	ish
    22da:	4770      	bx	lr
    22dc:	20000fac 	.word	0x20000fac

000022e0 <dropped_notify>:
{
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    22e2:	f7ff ffed 	bl	22c0 <z_log_dropped_read_and_clear>
    22e6:	4c0a      	ldr	r4, [pc, #40]	; (2310 <dropped_notify+0x30>)
    22e8:	4d0a      	ldr	r5, [pc, #40]	; (2314 <dropped_notify+0x34>)
    22ea:	1b2d      	subs	r5, r5, r4
    22ec:	4607      	mov	r7, r0
    22ee:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    22f0:	2600      	movs	r6, #0
    22f2:	42ae      	cmp	r6, r5
    22f4:	db00      	blt.n	22f8 <dropped_notify+0x18>
}
    22f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    22f8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    22fa:	795b      	ldrb	r3, [r3, #5]
    22fc:	b12b      	cbz	r3, 230a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    22fe:	6823      	ldr	r3, [r4, #0]
    2300:	691b      	ldr	r3, [r3, #16]
    2302:	b113      	cbz	r3, 230a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    2304:	4639      	mov	r1, r7
    2306:	4620      	mov	r0, r4
    2308:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    230a:	3601      	adds	r6, #1
    230c:	3410      	adds	r4, #16
    230e:	e7f0      	b.n	22f2 <dropped_notify+0x12>
    2310:	00010648 	.word	0x00010648
    2314:	00010658 	.word	0x00010658

00002318 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2318:	4901      	ldr	r1, [pc, #4]	; (2320 <z_log_msg2_init+0x8>)
    231a:	4802      	ldr	r0, [pc, #8]	; (2324 <z_log_msg2_init+0xc>)
    231c:	f00a bfe8 	b.w	d2f0 <mpsc_pbuf_init>
    2320:	00010758 	.word	0x00010758
    2324:	20000fb4 	.word	0x20000fb4

00002328 <log_core_init>:
	panic_mode = false;
    2328:	4a09      	ldr	r2, [pc, #36]	; (2350 <log_core_init+0x28>)
{
    232a:	b508      	push	{r3, lr}
	panic_mode = false;
    232c:	2300      	movs	r3, #0
    232e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2330:	4a08      	ldr	r2, [pc, #32]	; (2354 <log_core_init+0x2c>)
    2332:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    2334:	4b08      	ldr	r3, [pc, #32]	; (2358 <log_core_init+0x30>)
    2336:	4a09      	ldr	r2, [pc, #36]	; (235c <log_core_init+0x34>)
    2338:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    233a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    233e:	f000 fbd1 	bl	2ae4 <log_output_timestamp_freq_set>
		z_log_msg2_init();
    2342:	f7ff ffe9 	bl	2318 <z_log_msg2_init>
}
    2346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    234a:	f000 b925 	b.w	2598 <z_log_runtime_filters_init>
    234e:	bf00      	nop
    2350:	20002191 	.word	0x20002191
    2354:	20000fac 	.word	0x20000fac
    2358:	20000000 	.word	0x20000000
    235c:	0000d7f7 	.word	0x0000d7f7

00002360 <z_log_msg2_alloc>:
{
    2360:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    2362:	2200      	movs	r2, #0
    2364:	4801      	ldr	r0, [pc, #4]	; (236c <z_log_msg2_alloc+0xc>)
    2366:	2300      	movs	r3, #0
    2368:	f00a bfe1 	b.w	d32e <mpsc_pbuf_alloc>
    236c:	20000fb4 	.word	0x20000fb4

00002370 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    2370:	4801      	ldr	r0, [pc, #4]	; (2378 <z_log_msg2_claim+0x8>)
    2372:	f00b b86f 	b.w	d454 <mpsc_pbuf_claim>
    2376:	bf00      	nop
    2378:	20000fb4 	.word	0x20000fb4

0000237c <z_log_msg2_free>:
{
    237c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    237e:	4801      	ldr	r0, [pc, #4]	; (2384 <z_log_msg2_free+0x8>)
    2380:	f00b b8b4 	b.w	d4ec <mpsc_pbuf_free>
    2384:	20000fb4 	.word	0x20000fb4

00002388 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    2388:	4801      	ldr	r0, [pc, #4]	; (2390 <z_log_msg2_pending+0x8>)
    238a:	f00b b8e3 	b.w	d554 <mpsc_pbuf_is_pending>
    238e:	bf00      	nop
    2390:	20000fb4 	.word	0x20000fb4

00002394 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    2394:	4b2a      	ldr	r3, [pc, #168]	; (2440 <z_impl_log_process+0xac>)
    2396:	781b      	ldrb	r3, [r3, #0]
{
    2398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    239c:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    239e:	b90b      	cbnz	r3, 23a4 <z_impl_log_process+0x10>
    23a0:	2800      	cmp	r0, #0
    23a2:	d04b      	beq.n	243c <z_impl_log_process+0xa8>
	msg = get_msg();
    23a4:	f00b fa3b 	bl	d81e <get_msg>
	if (msg.msg) {
    23a8:	4605      	mov	r5, r0
    23aa:	b118      	cbz	r0, 23b4 <z_impl_log_process+0x20>
		if (!bypass) {
    23ac:	b16e      	cbz	r6, 23ca <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    23ae:	4628      	mov	r0, r5
    23b0:	f7ff ffe4 	bl	237c <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    23b4:	b92e      	cbnz	r6, 23c2 <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    23b6:	4b23      	ldr	r3, [pc, #140]	; (2444 <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    23b8:	681b      	ldr	r3, [r3, #0]
    23ba:	2b00      	cmp	r3, #0
    23bc:	dd01      	ble.n	23c2 <z_impl_log_process+0x2e>
		dropped_notify();
    23be:	f7ff ff8f 	bl	22e0 <dropped_notify>
}
    23c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    23c6:	f7ff bfdf 	b.w	2388 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    23ca:	4b1f      	ldr	r3, [pc, #124]	; (2448 <z_impl_log_process+0xb4>)
    23cc:	f3bf 8f5b 	dmb	ish
    23d0:	e853 2f00 	ldrex	r2, [r3]
    23d4:	3a01      	subs	r2, #1
    23d6:	e843 2100 	strex	r1, r2, [r3]
    23da:	2900      	cmp	r1, #0
    23dc:	d1f8      	bne.n	23d0 <z_impl_log_process+0x3c>
    23de:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    23e2:	4c1a      	ldr	r4, [pc, #104]	; (244c <z_impl_log_process+0xb8>)
    23e4:	4f1a      	ldr	r7, [pc, #104]	; (2450 <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    23e6:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2454 <z_impl_log_process+0xc0>
    23ea:	1b3f      	subs	r7, r7, r4
    23ec:	113f      	asrs	r7, r7, #4
    23ee:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    23f0:	45b8      	cmp	r8, r7
    23f2:	dadc      	bge.n	23ae <z_impl_log_process+0x1a>
	return backend->cb->active;
    23f4:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    23f6:	795b      	ldrb	r3, [r3, #5]
    23f8:	b1cb      	cbz	r3, 242e <z_impl_log_process+0x9a>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    23fa:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    23fc:	074b      	lsls	r3, r1, #29
    23fe:	d411      	bmi.n	2424 <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    2400:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    2404:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    2406:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    240a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    240e:	b192      	cbz	r2, 2436 <z_impl_log_process+0xa2>
    2410:	eba2 020a 	sub.w	r2, r2, sl
    2414:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    2418:	2301      	movs	r3, #1
    241a:	4620      	mov	r0, r4
    241c:	f000 f968 	bl	26f0 <log_filter_get>
			if (log_backend_is_active(backend) &&
    2420:	4548      	cmp	r0, r9
    2422:	d304      	bcc.n	242e <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    2424:	6823      	ldr	r3, [r4, #0]
    2426:	4629      	mov	r1, r5
    2428:	681b      	ldr	r3, [r3, #0]
    242a:	4620      	mov	r0, r4
    242c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    242e:	f108 0801 	add.w	r8, r8, #1
    2432:	3410      	adds	r4, #16
    2434:	e7dc      	b.n	23f0 <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    2436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    243a:	e7ed      	b.n	2418 <z_impl_log_process+0x84>
}
    243c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2440:	20002190 	.word	0x20002190
    2444:	20000fac 	.word	0x20000fac
    2448:	20000fa8 	.word	0x20000fa8
    244c:	00010648 	.word	0x00010648
    2450:	00010658 	.word	0x00010658
    2454:	20000224 	.word	0x20000224

00002458 <log_process_thread_func>:
{
    2458:	b510      	push	{r4, lr}
	log_init();
    245a:	f7ff fed9 	bl	2210 <log_init>
	return z_impl_z_current_get();
    245e:	f009 fedd 	bl	c21c <z_impl_z_current_get>
	proc_tid = process_tid;
    2462:	4b0c      	ldr	r3, [pc, #48]	; (2494 <log_process_thread_func+0x3c>)
    2464:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2466:	b130      	cbz	r0, 2476 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2468:	4b0b      	ldr	r3, [pc, #44]	; (2498 <log_process_thread_func+0x40>)
	    process_tid &&
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	2b09      	cmp	r3, #9
    246e:	dd02      	ble.n	2476 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    2470:	480a      	ldr	r0, [pc, #40]	; (249c <log_process_thread_func+0x44>)
    2472:	f009 fa77 	bl	b964 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2476:	4c09      	ldr	r4, [pc, #36]	; (249c <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2478:	2000      	movs	r0, #0
    247a:	f7ff ff8b 	bl	2394 <z_impl_log_process>
		if (log_process(false) == false) {
    247e:	2800      	cmp	r0, #0
    2480:	d1fa      	bne.n	2478 <log_process_thread_func+0x20>
    2482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    248a:	4620      	mov	r0, r4
    248c:	f009 fa90 	bl	b9b0 <z_impl_k_sem_take>
    2490:	e7f2      	b.n	2478 <log_process_thread_func+0x20>
    2492:	bf00      	nop
    2494:	20000ff0 	.word	0x20000ff0
    2498:	20000fa8 	.word	0x20000fa8
    249c:	200002bc 	.word	0x200002bc

000024a0 <z_log_msg_post_finalize>:
{
    24a0:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    24a2:	4b1d      	ldr	r3, [pc, #116]	; (2518 <z_log_msg_post_finalize+0x78>)
    24a4:	f3bf 8f5b 	dmb	ish
    24a8:	e853 2f00 	ldrex	r2, [r3]
    24ac:	1c51      	adds	r1, r2, #1
    24ae:	e843 1000 	strex	r0, r1, [r3]
    24b2:	2800      	cmp	r0, #0
    24b4:	d1f8      	bne.n	24a8 <z_log_msg_post_finalize+0x8>
    24b6:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    24ba:	4b18      	ldr	r3, [pc, #96]	; (251c <z_log_msg_post_finalize+0x7c>)
    24bc:	781b      	ldrb	r3, [r3, #0]
    24be:	b183      	cbz	r3, 24e2 <z_log_msg_post_finalize+0x42>
    24c0:	f04f 0320 	mov.w	r3, #32
    24c4:	f3ef 8411 	mrs	r4, BASEPRI
    24c8:	f383 8812 	msr	BASEPRI_MAX, r3
    24cc:	f3bf 8f6f 	isb	sy
    24d0:	2000      	movs	r0, #0
    24d2:	f7ff ff5f 	bl	2394 <z_impl_log_process>
	__asm__ volatile(
    24d6:	f384 8811 	msr	BASEPRI, r4
    24da:	f3bf 8f6f 	isb	sy
}
    24de:	b002      	add	sp, #8
    24e0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    24e2:	4b0f      	ldr	r3, [pc, #60]	; (2520 <z_log_msg_post_finalize+0x80>)
    24e4:	681b      	ldr	r3, [r3, #0]
    24e6:	2b00      	cmp	r3, #0
    24e8:	d0f9      	beq.n	24de <z_log_msg_post_finalize+0x3e>
    24ea:	b952      	cbnz	r2, 2502 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    24ec:	2200      	movs	r2, #0
    24ee:	2300      	movs	r3, #0
    24f0:	e9cd 2300 	strd	r2, r3, [sp]
    24f4:	480b      	ldr	r0, [pc, #44]	; (2524 <z_log_msg_post_finalize+0x84>)
    24f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    24fa:	2300      	movs	r3, #0
    24fc:	f00a f8a6 	bl	c64c <z_impl_k_timer_start>
    2500:	e7ed      	b.n	24de <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2502:	2a0a      	cmp	r2, #10
    2504:	d1eb      	bne.n	24de <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    2506:	4807      	ldr	r0, [pc, #28]	; (2524 <z_log_msg_post_finalize+0x84>)
    2508:	f00d fd3f 	bl	ff8a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    250c:	4806      	ldr	r0, [pc, #24]	; (2528 <z_log_msg_post_finalize+0x88>)
}
    250e:	b002      	add	sp, #8
    2510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2514:	f009 ba26 	b.w	b964 <z_impl_k_sem_give>
    2518:	20000fa8 	.word	0x20000fa8
    251c:	20002191 	.word	0x20002191
    2520:	20000ff0 	.word	0x20000ff0
    2524:	200007d0 	.word	0x200007d0
    2528:	200002bc 	.word	0x200002bc

0000252c <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    252c:	4b06      	ldr	r3, [pc, #24]	; (2548 <z_log_msg2_commit+0x1c>)
{
    252e:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2530:	681b      	ldr	r3, [r3, #0]
{
    2532:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2534:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    2536:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    2538:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    253a:	4804      	ldr	r0, [pc, #16]	; (254c <z_log_msg2_commit+0x20>)
    253c:	f00a ff6d 	bl	d41a <mpsc_pbuf_commit>
}
    2540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    2544:	f7ff bfac 	b.w	24a0 <z_log_msg_post_finalize>
    2548:	20000000 	.word	0x20000000
    254c:	20000fb4 	.word	0x20000fb4

00002550 <z_impl_log_panic>:
{
    2550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2552:	4f0e      	ldr	r7, [pc, #56]	; (258c <z_impl_log_panic+0x3c>)
    2554:	783d      	ldrb	r5, [r7, #0]
    2556:	b975      	cbnz	r5, 2576 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2558:	4c0d      	ldr	r4, [pc, #52]	; (2590 <z_impl_log_panic+0x40>)
    255a:	4e0e      	ldr	r6, [pc, #56]	; (2594 <z_impl_log_panic+0x44>)
	log_init();
    255c:	f7ff fe58 	bl	2210 <log_init>
    2560:	1b36      	subs	r6, r6, r4
    2562:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2564:	42b5      	cmp	r5, r6
    2566:	db07      	blt.n	2578 <z_impl_log_panic+0x28>
    2568:	2000      	movs	r0, #0
    256a:	f7ff ff13 	bl	2394 <z_impl_log_process>
		while (log_process(false) == true) {
    256e:	2800      	cmp	r0, #0
    2570:	d1fa      	bne.n	2568 <z_impl_log_panic+0x18>
	panic_mode = true;
    2572:	2301      	movs	r3, #1
    2574:	703b      	strb	r3, [r7, #0]
}
    2576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2578:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    257a:	795b      	ldrb	r3, [r3, #5]
    257c:	b11b      	cbz	r3, 2586 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    257e:	6823      	ldr	r3, [r4, #0]
    2580:	4620      	mov	r0, r4
    2582:	695b      	ldr	r3, [r3, #20]
    2584:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2586:	3501      	adds	r5, #1
    2588:	3410      	adds	r4, #16
    258a:	e7eb      	b.n	2564 <z_impl_log_panic+0x14>
    258c:	20002191 	.word	0x20002191
    2590:	00010648 	.word	0x00010648
    2594:	00010658 	.word	0x00010658

00002598 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2598:	480b      	ldr	r0, [pc, #44]	; (25c8 <z_log_runtime_filters_init+0x30>)
    259a:	4b0c      	ldr	r3, [pc, #48]	; (25cc <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    259c:	b530      	push	{r4, r5, lr}
    259e:	1a1b      	subs	r3, r3, r0
    25a0:	4c0b      	ldr	r4, [pc, #44]	; (25d0 <z_log_runtime_filters_init+0x38>)
    25a2:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    25a4:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    25a6:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    25a8:	4299      	cmp	r1, r3
    25aa:	d100      	bne.n	25ae <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    25ac:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    25ae:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    25b2:	6825      	ldr	r5, [r4, #0]
    25b4:	f002 0207 	and.w	r2, r2, #7
    25b8:	f025 0507 	bic.w	r5, r5, #7
    25bc:	432a      	orrs	r2, r5
    25be:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    25c2:	3101      	adds	r1, #1
    25c4:	e7f0      	b.n	25a8 <z_log_runtime_filters_init+0x10>
    25c6:	bf00      	nop
    25c8:	000105d8 	.word	0x000105d8
    25cc:	00010648 	.word	0x00010648
    25d0:	20000224 	.word	0x20000224

000025d4 <log_source_name_get>:
    25d4:	4a04      	ldr	r2, [pc, #16]	; (25e8 <log_source_name_get+0x14>)
    25d6:	4b05      	ldr	r3, [pc, #20]	; (25ec <log_source_name_get+0x18>)
    25d8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    25da:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    25de:	bf34      	ite	cc
    25e0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    25e4:	2000      	movcs	r0, #0
}
    25e6:	4770      	bx	lr
    25e8:	000105d8 	.word	0x000105d8
    25ec:	00010648 	.word	0x00010648

000025f0 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    25f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25f4:	4689      	mov	r9, r1
    25f6:	4616      	mov	r6, r2
    25f8:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    25fa:	4604      	mov	r4, r0
    25fc:	b9b8      	cbnz	r0, 262e <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    25fe:	f8df a084 	ldr.w	sl, [pc, #132]	; 2684 <z_impl_log_filter_set+0x94>
    2602:	4f21      	ldr	r7, [pc, #132]	; (2688 <z_impl_log_filter_set+0x98>)
    2604:	eba7 070a 	sub.w	r7, r7, sl
    2608:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    260a:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    260c:	42bc      	cmp	r4, r7
    260e:	db02      	blt.n	2616 <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    2610:	4628      	mov	r0, r5
    2612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    2616:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    261a:	4643      	mov	r3, r8
    261c:	4632      	mov	r2, r6
    261e:	4649      	mov	r1, r9
    2620:	f7ff ffe6 	bl	25f0 <z_impl_log_filter_set>
				max = MAX(current, max);
    2624:	4285      	cmp	r5, r0
    2626:	bf38      	it	cc
    2628:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    262a:	3401      	adds	r4, #1
    262c:	e7ee      	b.n	260c <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    262e:	4b17      	ldr	r3, [pc, #92]	; (268c <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    2630:	4c17      	ldr	r4, [pc, #92]	; (2690 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    2632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    2636:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    2638:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    263a:	791a      	ldrb	r2, [r3, #4]
    263c:	2307      	movs	r3, #7
    263e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2642:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    2646:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    2648:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    264c:	bf28      	it	cs
    264e:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    2650:	ea23 0301 	bic.w	r3, r3, r1
    2654:	f005 0107 	and.w	r1, r5, #7
    2658:	fa01 f202 	lsl.w	r2, r1, r2
    265c:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    265e:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    2660:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    2662:	fa23 f002 	lsr.w	r0, r3, r2
    2666:	f000 0007 	and.w	r0, r0, #7
    266a:	4281      	cmp	r1, r0
    266c:	f102 0203 	add.w	r2, r2, #3
    2670:	bf38      	it	cc
    2672:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    2674:	2a1e      	cmp	r2, #30
    2676:	d1f4      	bne.n	2662 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    2678:	f023 0307 	bic.w	r3, r3, #7
    267c:	430b      	orrs	r3, r1
    267e:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    2682:	e7c5      	b.n	2610 <z_impl_log_filter_set+0x20>
    2684:	00010648 	.word	0x00010648
    2688:	00010658 	.word	0x00010658
    268c:	000105d8 	.word	0x000105d8
    2690:	20000224 	.word	0x20000224

00002694 <backend_filter_set>:
{
    2694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2696:	4c09      	ldr	r4, [pc, #36]	; (26bc <backend_filter_set+0x28>)
    2698:	4b09      	ldr	r3, [pc, #36]	; (26c0 <backend_filter_set+0x2c>)
    269a:	1ae4      	subs	r4, r4, r3
    269c:	4606      	mov	r6, r0
    269e:	460f      	mov	r7, r1
    26a0:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    26a2:	2500      	movs	r5, #0
    26a4:	42a5      	cmp	r5, r4
    26a6:	d100      	bne.n	26aa <backend_filter_set+0x16>
}
    26a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26aa:	2100      	movs	r1, #0
    26ac:	b22a      	sxth	r2, r5
    26ae:	463b      	mov	r3, r7
    26b0:	4630      	mov	r0, r6
    26b2:	f7ff ff9d 	bl	25f0 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    26b6:	3501      	adds	r5, #1
    26b8:	e7f4      	b.n	26a4 <backend_filter_set+0x10>
    26ba:	bf00      	nop
    26bc:	00010648 	.word	0x00010648
    26c0:	000105d8 	.word	0x000105d8

000026c4 <log_backend_enable>:
	id += backend - log_backend_get(0);
    26c4:	4b09      	ldr	r3, [pc, #36]	; (26ec <log_backend_enable+0x28>)
    26c6:	1ac3      	subs	r3, r0, r3
{
    26c8:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    26ca:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    26cc:	6846      	ldr	r6, [r0, #4]
{
    26ce:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    26d0:	3301      	adds	r3, #1
{
    26d2:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    26d4:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    26d6:	4611      	mov	r1, r2
    26d8:	f7ff ffdc 	bl	2694 <backend_filter_set>
	backend->cb->ctx = ctx;
    26dc:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    26de:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    26e0:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    26e2:	715a      	strb	r2, [r3, #5]
}
    26e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    26e8:	f7ff bdbe 	b.w	2268 <z_log_notify_backend_enabled>
    26ec:	00010648 	.word	0x00010648

000026f0 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    26f0:	b163      	cbz	r3, 270c <log_filter_get+0x1c>
		if (source_id < 0) {
    26f2:	2a00      	cmp	r2, #0
    26f4:	db0f      	blt.n	2716 <log_filter_get+0x26>
	return backend->cb->id;
    26f6:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    26f8:	4908      	ldr	r1, [pc, #32]	; (271c <log_filter_get+0x2c>)
    26fa:	7918      	ldrb	r0, [r3, #4]
    26fc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2700:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2704:	40d8      	lsrs	r0, r3
    2706:	f000 0007 	and.w	r0, r0, #7
    270a:	4770      	bx	lr
	return __log_const_start[source_id].level;
    270c:	4b04      	ldr	r3, [pc, #16]	; (2720 <log_filter_get+0x30>)
    270e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    2712:	7910      	ldrb	r0, [r2, #4]
    2714:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    2716:	2004      	movs	r0, #4
}
    2718:	4770      	bx	lr
    271a:	bf00      	nop
    271c:	20000224 	.word	0x20000224
    2720:	000105d8 	.word	0x000105d8

00002724 <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    2724:	4b02      	ldr	r3, [pc, #8]	; (2730 <log_msg_mem_get_free+0xc>)
    2726:	6898      	ldr	r0, [r3, #8]
    2728:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    272a:	1ac0      	subs	r0, r0, r3
    272c:	4770      	bx	lr
    272e:	bf00      	nop
    2730:	20000ff4 	.word	0x20000ff4

00002734 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    2734:	4b01      	ldr	r3, [pc, #4]	; (273c <log_msg_mem_get_used+0x8>)
    2736:	6998      	ldr	r0, [r3, #24]
    2738:	4770      	bx	lr
    273a:	bf00      	nop
    273c:	20000ff4 	.word	0x20000ff4

00002740 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2740:	b40e      	push	{r1, r2, r3}
    2742:	b503      	push	{r0, r1, lr}
    2744:	ab03      	add	r3, sp, #12
    2746:	4601      	mov	r1, r0
    2748:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    274c:	4804      	ldr	r0, [pc, #16]	; (2760 <print_formatted+0x20>)
	va_start(args, fmt);
    274e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2750:	f7ff f968 	bl	1a24 <cbvprintf>
	va_end(args);

	return length;
}
    2754:	b002      	add	sp, #8
    2756:	f85d eb04 	ldr.w	lr, [sp], #4
    275a:	b003      	add	sp, #12
    275c:	4770      	bx	lr
    275e:	bf00      	nop
    2760:	0000d869 	.word	0x0000d869

00002764 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2768:	461d      	mov	r5, r3
    276a:	9b08      	ldr	r3, [sp, #32]
    276c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    276e:	06da      	lsls	r2, r3, #27
{
    2770:	4604      	mov	r4, r0
    2772:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2774:	d405      	bmi.n	2782 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2776:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2778:	bf4c      	ite	mi
    277a:	492a      	ldrmi	r1, [pc, #168]	; (2824 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    277c:	492a      	ldrpl	r1, [pc, #168]	; (2828 <hexdump_line_print+0xc4>)
    277e:	f7ff ffdf 	bl	2740 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    2782:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 282c <hexdump_line_print+0xc8>
{
    2786:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    278a:	45a8      	cmp	r8, r5
    278c:	db2a      	blt.n	27e4 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    278e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2830 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    2792:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2834 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    2796:	f8df a094 	ldr.w	sl, [pc, #148]	; 282c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    279a:	2500      	movs	r5, #0
		if (i < length) {
    279c:	42bd      	cmp	r5, r7
    279e:	d22f      	bcs.n	2800 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    27a0:	5d72      	ldrb	r2, [r6, r5]
    27a2:	4649      	mov	r1, r9
    27a4:	4620      	mov	r0, r4
    27a6:	f7ff ffcb 	bl	2740 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27aa:	3501      	adds	r5, #1
    27ac:	2d10      	cmp	r5, #16
    27ae:	d120      	bne.n	27f2 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    27b0:	4921      	ldr	r1, [pc, #132]	; (2838 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    27b2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 282c <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    27b6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 283c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    27ba:	4620      	mov	r0, r4
    27bc:	f7ff ffc0 	bl	2740 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27c0:	2500      	movs	r5, #0
		if (i < length) {
    27c2:	42af      	cmp	r7, r5
    27c4:	d928      	bls.n	2818 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    27c6:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    27c8:	f1a2 0320 	sub.w	r3, r2, #32
    27cc:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    27ce:	bf28      	it	cs
    27d0:	222e      	movcs	r2, #46	; 0x2e
    27d2:	4649      	mov	r1, r9
    27d4:	4620      	mov	r0, r4
    27d6:	f7ff ffb3 	bl	2740 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27da:	3501      	adds	r5, #1
    27dc:	2d10      	cmp	r5, #16
    27de:	d114      	bne.n	280a <hexdump_line_print+0xa6>
		}
	}
}
    27e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    27e4:	4649      	mov	r1, r9
    27e6:	4620      	mov	r0, r4
    27e8:	f7ff ffaa 	bl	2740 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    27ec:	f108 0801 	add.w	r8, r8, #1
    27f0:	e7cb      	b.n	278a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    27f2:	076a      	lsls	r2, r5, #29
    27f4:	d1d2      	bne.n	279c <hexdump_line_print+0x38>
			print_formatted(output, " ");
    27f6:	4651      	mov	r1, sl
    27f8:	4620      	mov	r0, r4
    27fa:	f7ff ffa1 	bl	2740 <print_formatted>
    27fe:	e7cd      	b.n	279c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    2800:	4641      	mov	r1, r8
    2802:	4620      	mov	r0, r4
    2804:	f7ff ff9c 	bl	2740 <print_formatted>
    2808:	e7cf      	b.n	27aa <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    280a:	076b      	lsls	r3, r5, #29
    280c:	d1d9      	bne.n	27c2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    280e:	4641      	mov	r1, r8
    2810:	4620      	mov	r0, r4
    2812:	f7ff ff95 	bl	2740 <print_formatted>
    2816:	e7d4      	b.n	27c2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2818:	4641      	mov	r1, r8
    281a:	4620      	mov	r0, r4
    281c:	f7ff ff90 	bl	2740 <print_formatted>
    2820:	e7db      	b.n	27da <hexdump_line_print+0x76>
    2822:	bf00      	nop
    2824:	00011585 	.word	0x00011585
    2828:	00011171 	.word	0x00011171
    282c:	00011067 	.word	0x00011067
    2830:	00011065 	.word	0x00011065
    2834:	0001105f 	.word	0x0001105f
    2838:	00011069 	.word	0x00011069
    283c:	00011be2 	.word	0x00011be2

00002840 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2844:	b087      	sub	sp, #28
    2846:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2848:	f001 0301 	and.w	r3, r1, #1
{
    284c:	9205      	str	r2, [sp, #20]
    284e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    2852:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2856:	9304      	str	r3, [sp, #16]
{
    2858:	4607      	mov	r7, r0
    285a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    285c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2860:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    2864:	f00a ffdf 	bl	d826 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    2868:	4602      	mov	r2, r0
    286a:	2800      	cmp	r0, #0
    286c:	d044      	beq.n	28f8 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    286e:	493a      	ldr	r1, [pc, #232]	; (2958 <prefix_print+0x118>)
    2870:	4638      	mov	r0, r7
    2872:	f7ff ff65 	bl	2740 <print_formatted>
    2876:	4605      	mov	r5, r0
	}

	if (stamp) {
    2878:	f1bb 0f00 	cmp.w	fp, #0
    287c:	d008      	beq.n	2890 <prefix_print+0x50>
	if (!format) {
    287e:	f018 0f44 	tst.w	r8, #68	; 0x44
    2882:	d13b      	bne.n	28fc <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2884:	4935      	ldr	r1, [pc, #212]	; (295c <prefix_print+0x11c>)
    2886:	4622      	mov	r2, r4
    2888:	4638      	mov	r0, r7
    288a:	f7ff ff59 	bl	2740 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    288e:	4405      	add	r5, r0
	if (color) {
    2890:	9b04      	ldr	r3, [sp, #16]
    2892:	b153      	cbz	r3, 28aa <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    2894:	4b32      	ldr	r3, [pc, #200]	; (2960 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    2896:	4933      	ldr	r1, [pc, #204]	; (2964 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    2898:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    289c:	4b32      	ldr	r3, [pc, #200]	; (2968 <prefix_print+0x128>)
    289e:	4638      	mov	r0, r7
    28a0:	2a00      	cmp	r2, #0
    28a2:	bf08      	it	eq
    28a4:	461a      	moveq	r2, r3
    28a6:	f7ff ff4b 	bl	2740 <print_formatted>
	if (level_on) {
    28aa:	b13e      	cbz	r6, 28bc <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    28ac:	4b2f      	ldr	r3, [pc, #188]	; (296c <prefix_print+0x12c>)
    28ae:	4930      	ldr	r1, [pc, #192]	; (2970 <prefix_print+0x130>)
    28b0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    28b4:	4638      	mov	r0, r7
    28b6:	f7ff ff43 	bl	2740 <print_formatted>
    28ba:	4606      	mov	r6, r0
	if (source_id >= 0) {
    28bc:	f1ba 0f00 	cmp.w	sl, #0
    28c0:	db16      	blt.n	28f0 <prefix_print+0xb0>
		total += print_formatted(output,
    28c2:	9b05      	ldr	r3, [sp, #20]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d045      	beq.n	2954 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    28c8:	2301      	movs	r3, #1
    28ca:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    28ce:	4b29      	ldr	r3, [pc, #164]	; (2974 <prefix_print+0x134>)
    28d0:	4c29      	ldr	r4, [pc, #164]	; (2978 <prefix_print+0x138>)
    28d2:	f019 0f10 	tst.w	r9, #16
    28d6:	bf18      	it	ne
    28d8:	461c      	movne	r4, r3
    28da:	4651      	mov	r1, sl
    28dc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    28e0:	f7ff fe78 	bl	25d4 <log_source_name_get>
    28e4:	4621      	mov	r1, r4
    28e6:	4602      	mov	r2, r0
    28e8:	4638      	mov	r0, r7
    28ea:	f7ff ff29 	bl	2740 <print_formatted>
    28ee:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    28f0:	1970      	adds	r0, r6, r5
    28f2:	b007      	add	sp, #28
    28f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    28f8:	4605      	mov	r5, r0
    28fa:	e7bd      	b.n	2878 <prefix_print+0x38>
	} else if (freq != 0U) {
    28fc:	4b1f      	ldr	r3, [pc, #124]	; (297c <prefix_print+0x13c>)
    28fe:	6818      	ldr	r0, [r3, #0]
    2900:	2800      	cmp	r0, #0
    2902:	d0c4      	beq.n	288e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    2904:	4b1e      	ldr	r3, [pc, #120]	; (2980 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    2906:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    290a:	681b      	ldr	r3, [r3, #0]
    290c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    2910:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2914:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    2918:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    291c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    2920:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    2924:	fbb3 f2f1 	udiv	r2, r3, r1
    2928:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    292c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    2930:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2934:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    2938:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    293c:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    2940:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2942:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    2946:	490f      	ldr	r1, [pc, #60]	; (2984 <prefix_print+0x144>)
    2948:	e9cd e001 	strd	lr, r0, [sp, #4]
    294c:	4638      	mov	r0, r7
    294e:	f7ff fef7 	bl	2740 <print_formatted>
    2952:	e79c      	b.n	288e <prefix_print+0x4e>
		total += print_formatted(output,
    2954:	4c08      	ldr	r4, [pc, #32]	; (2978 <prefix_print+0x138>)
    2956:	e7c0      	b.n	28da <prefix_print+0x9a>
    2958:	00011079 	.word	0x00011079
    295c:	0001107d 	.word	0x0001107d
    2960:	0001076c 	.word	0x0001076c
    2964:	000116a4 	.word	0x000116a4
    2968:	0001106b 	.word	0x0001106b
    296c:	00010780 	.word	0x00010780
    2970:	000110a2 	.word	0x000110a2
    2974:	00011075 	.word	0x00011075
    2978:	00011070 	.word	0x00011070
    297c:	20001010 	.word	0x20001010
    2980:	20001014 	.word	0x20001014
    2984:	00011086 	.word	0x00011086

00002988 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    2988:	b538      	push	{r3, r4, r5, lr}
    298a:	460c      	mov	r4, r1
	if (color) {
    298c:	07e1      	lsls	r1, r4, #31
{
    298e:	4605      	mov	r5, r0
	if (color) {
    2990:	d503      	bpl.n	299a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2992:	4a08      	ldr	r2, [pc, #32]	; (29b4 <postfix_print+0x2c>)
    2994:	4908      	ldr	r1, [pc, #32]	; (29b8 <postfix_print+0x30>)
    2996:	f7ff fed3 	bl	2740 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    299a:	06e2      	lsls	r2, r4, #27
    299c:	d408      	bmi.n	29b0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    299e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    29a0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    29a2:	bf4c      	ite	mi
    29a4:	4905      	ldrmi	r1, [pc, #20]	; (29bc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    29a6:	4906      	ldrpl	r1, [pc, #24]	; (29c0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    29a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    29ac:	f7ff bec8 	b.w	2740 <print_formatted>
}
    29b0:	bd38      	pop	{r3, r4, r5, pc}
    29b2:	bf00      	nop
    29b4:	0001106b 	.word	0x0001106b
    29b8:	000116a4 	.word	0x000116a4
    29bc:	00011585 	.word	0x00011585
    29c0:	00011171 	.word	0x00011171

000029c4 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    29c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    29c8:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    29ca:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    29ce:	4606      	mov	r6, r0
    29d0:	460c      	mov	r4, r1
    29d2:	4690      	mov	r8, r2
    29d4:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    29d8:	d04d      	beq.n	2a76 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    29da:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    29dc:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    29de:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    29e2:	2b00      	cmp	r3, #0
    29e4:	d044      	beq.n	2a70 <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    29e6:	4925      	ldr	r1, [pc, #148]	; (2a7c <log_output_msg2_process+0xb8>)
    29e8:	1a5b      	subs	r3, r3, r1
    29ea:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    29ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
    29f2:	f8cd 9000 	str.w	r9, [sp]
    29f6:	68a3      	ldr	r3, [r4, #8]
    29f8:	2200      	movs	r2, #0
    29fa:	4641      	mov	r1, r8
    29fc:	4630      	mov	r0, r6
    29fe:	f7ff ff1f 	bl	2840 <prefix_print>
    2a02:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    2a04:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    2a06:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2a0a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    2a0e:	b153      	cbz	r3, 2a26 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2a10:	4f1b      	ldr	r7, [pc, #108]	; (2a80 <log_output_msg2_process+0xbc>)
    2a12:	481c      	ldr	r0, [pc, #112]	; (2a84 <log_output_msg2_process+0xc0>)
    2a14:	491c      	ldr	r1, [pc, #112]	; (2a88 <log_output_msg2_process+0xc4>)
    2a16:	462b      	mov	r3, r5
    2a18:	4632      	mov	r2, r6
    2a1a:	f1b9 0f00 	cmp.w	r9, #0
    2a1e:	bf08      	it	eq
    2a20:	4638      	moveq	r0, r7
    2a22:	f009 ff36 	bl	c892 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    2a26:	8867      	ldrh	r7, [r4, #2]
    2a28:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    2a2c:	b197      	cbz	r7, 2a54 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    2a2e:	6823      	ldr	r3, [r4, #0]
    2a30:	f3c3 2349 	ubfx	r3, r3, #9, #10
    2a34:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2a36:	2f10      	cmp	r7, #16
    2a38:	463c      	mov	r4, r7
    2a3a:	bf28      	it	cs
    2a3c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    2a3e:	4629      	mov	r1, r5
    2a40:	f8cd 8000 	str.w	r8, [sp]
    2a44:	4653      	mov	r3, sl
    2a46:	4622      	mov	r2, r4
    2a48:	4630      	mov	r0, r6
    2a4a:	f7ff fe8b 	bl	2764 <hexdump_line_print>
	} while (len);
    2a4e:	1b3f      	subs	r7, r7, r4
		data += length;
    2a50:	4425      	add	r5, r4
	} while (len);
    2a52:	d1f0      	bne.n	2a36 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    2a54:	f1b9 0f00 	cmp.w	r9, #0
    2a58:	d004      	beq.n	2a64 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    2a5a:	464a      	mov	r2, r9
    2a5c:	4641      	mov	r1, r8
    2a5e:	4630      	mov	r0, r6
    2a60:	f7ff ff92 	bl	2988 <postfix_print>
	}

	log_output_flush(output);
    2a64:	4630      	mov	r0, r6
}
    2a66:	b004      	add	sp, #16
    2a68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    2a6c:	f00a beef 	b.w	d84e <log_output_flush>
		int16_t source_id = source ?
    2a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a74:	e7bb      	b.n	29ee <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    2a76:	46ca      	mov	sl, r9
    2a78:	e7c4      	b.n	2a04 <log_output_msg2_process+0x40>
    2a7a:	bf00      	nop
    2a7c:	20000224 	.word	0x20000224
    2a80:	0000d89f 	.word	0x0000d89f
    2a84:	0000d869 	.word	0x0000d869
    2a88:	00001a25 	.word	0x00001a25

00002a8c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2a8e:	f242 730f 	movw	r3, #9999	; 0x270f
    2a92:	428b      	cmp	r3, r1
    2a94:	bf28      	it	cs
    2a96:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2a98:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2a9a:	4a0f      	ldr	r2, [pc, #60]	; (2ad8 <log_output_dropped_process+0x4c>)
{
    2a9c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2a9e:	2105      	movs	r1, #5
    2aa0:	4668      	mov	r0, sp
    2aa2:	f009 ff6e 	bl	c982 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2aa6:	6863      	ldr	r3, [r4, #4]
    2aa8:	490c      	ldr	r1, [pc, #48]	; (2adc <log_output_dropped_process+0x50>)
    2aaa:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2aac:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2aae:	2204      	movs	r2, #4
    2ab0:	4628      	mov	r0, r5
    2ab2:	f00a febf 	bl	d834 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2ab6:	6863      	ldr	r3, [r4, #4]
    2ab8:	4632      	mov	r2, r6
    2aba:	4669      	mov	r1, sp
    2abc:	4628      	mov	r0, r5
    2abe:	685b      	ldr	r3, [r3, #4]
    2ac0:	f00a feb8 	bl	d834 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2ac4:	6863      	ldr	r3, [r4, #4]
    2ac6:	4906      	ldr	r1, [pc, #24]	; (2ae0 <log_output_dropped_process+0x54>)
    2ac8:	685b      	ldr	r3, [r3, #4]
    2aca:	2217      	movs	r2, #23
    2acc:	4628      	mov	r0, r5
    2ace:	f00a feb1 	bl	d834 <buffer_write>
		     output->control_block->ctx);
}
    2ad2:	b002      	add	sp, #8
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
    2ad6:	bf00      	nop
    2ad8:	00012a4a 	.word	0x00012a4a
    2adc:	000110e0 	.word	0x000110e0
    2ae0:	000110c8 	.word	0x000110c8

00002ae4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2ae4:	4a08      	ldr	r2, [pc, #32]	; (2b08 <log_output_timestamp_freq_set+0x24>)
{
    2ae6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2ae8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2aea:	4c08      	ldr	r4, [pc, #32]	; (2b0c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2aec:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2aee:	2100      	movs	r1, #0
    2af0:	42a0      	cmp	r0, r4
    2af2:	d804      	bhi.n	2afe <log_output_timestamp_freq_set+0x1a>
    2af4:	b101      	cbz	r1, 2af8 <log_output_timestamp_freq_set+0x14>
    2af6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2af8:	4b05      	ldr	r3, [pc, #20]	; (2b10 <log_output_timestamp_freq_set+0x2c>)
    2afa:	6018      	str	r0, [r3, #0]
}
    2afc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2afe:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2b00:	005b      	lsls	r3, r3, #1
    2b02:	2101      	movs	r1, #1
    2b04:	e7f4      	b.n	2af0 <log_output_timestamp_freq_set+0xc>
    2b06:	bf00      	nop
    2b08:	20001014 	.word	0x20001014
    2b0c:	000f4240 	.word	0x000f4240
    2b10:	20001010 	.word	0x20001010

00002b14 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    2b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b18:	b085      	sub	sp, #20
    2b1a:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    2b1e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    2b22:	4605      	mov	r5, r0
    2b24:	4688      	mov	r8, r1
    2b26:	4614      	mov	r4, r2
    2b28:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    2b2a:	f1bb 0f00 	cmp.w	fp, #0
    2b2e:	d037      	beq.n	2ba0 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    2b30:	2200      	movs	r2, #0
    2b32:	f8cd a000 	str.w	sl, [sp]
    2b36:	465b      	mov	r3, fp
    2b38:	210c      	movs	r1, #12
    2b3a:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    2b3c:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    2b40:	f7fe fc72 	bl	1428 <cbvprintf_package>
    2b44:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    2b46:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2b4a:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    2b4e:	f005 0407 	and.w	r4, r5, #7
    2b52:	4d14      	ldr	r5, [pc, #80]	; (2ba4 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    2b54:	4b14      	ldr	r3, [pc, #80]	; (2ba8 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    2b56:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2b58:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    2b5a:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    2b5e:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2b62:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    2b66:	432c      	orrs	r4, r5
    2b68:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    2b6c:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    2b6e:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    2b70:	f7ff fbf6 	bl	2360 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    2b74:	4605      	mov	r5, r0
    2b76:	b150      	cbz	r0, 2b8e <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    2b78:	f1bb 0f00 	cmp.w	fp, #0
    2b7c:	d007      	beq.n	2b8e <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    2b7e:	f8cd a000 	str.w	sl, [sp]
    2b82:	465b      	mov	r3, fp
    2b84:	2200      	movs	r2, #0
    2b86:	4639      	mov	r1, r7
    2b88:	300c      	adds	r0, #12
    2b8a:	f7fe fc4d 	bl	1428 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    2b8e:	464b      	mov	r3, r9
    2b90:	4622      	mov	r2, r4
    2b92:	4641      	mov	r1, r8
    2b94:	4628      	mov	r0, r5
}
    2b96:	b005      	add	sp, #20
    2b98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    2b9c:	f00a be8c 	b.w	d8b8 <z_log_msg2_finalize>
		plen = 0;
    2ba0:	465f      	mov	r7, fp
    2ba2:	e7d0      	b.n	2b46 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    2ba4:	0007fe00 	.word	0x0007fe00
    2ba8:	7ff80000 	.word	0x7ff80000

00002bac <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    2bac:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    2bae:	2804      	cmp	r0, #4
	entry->handler = NULL;
    2bb0:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    2bb2:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    2bb4:	bf98      	it	ls
    2bb6:	4b04      	ldrls	r3, [pc, #16]	; (2bc8 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    2bb8:	4a04      	ldr	r2, [pc, #16]	; (2bcc <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    2bba:	bf98      	it	ls
    2bbc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    2bc0:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    2bc2:	600b      	str	r3, [r1, #0]
}
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop
    2bc8:	000107d4 	.word	0x000107d4
    2bcc:	000107b0 	.word	0x000107b0

00002bd0 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    2bd0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    2bd2:	4a08      	ldr	r2, [pc, #32]	; (2bf4 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    2bd4:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    2bd6:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    2bd8:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    2bda:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    2bdc:	4b06      	ldr	r3, [pc, #24]	; (2bf8 <backend_name_get+0x28>)
    2bde:	4a07      	ldr	r2, [pc, #28]	; (2bfc <backend_name_get+0x2c>)
    2be0:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    2be2:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    2be6:	bf3e      	ittt	cc
    2be8:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    2bec:	689b      	ldrcc	r3, [r3, #8]
    2bee:	600b      	strcc	r3, [r1, #0]
	}
}
    2bf0:	4770      	bx	lr
    2bf2:	bf00      	nop
    2bf4:	00010928 	.word	0x00010928
    2bf8:	00010648 	.word	0x00010648
    2bfc:	00010658 	.word	0x00010658

00002c00 <cmd_log_memory_slabs>:
{
    2c00:	b538      	push	{r3, r4, r5, lr}
    2c02:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    2c04:	f7ff fd8e 	bl	2724 <log_msg_mem_get_free>
    2c08:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    2c0a:	f7ff fd93 	bl	2734 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    2c0e:	4a09      	ldr	r2, [pc, #36]	; (2c34 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    2c10:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    2c12:	2108      	movs	r1, #8
    2c14:	4620      	mov	r0, r4
    2c16:	f00b f84b 	bl	dcb0 <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    2c1a:	462b      	mov	r3, r5
    2c1c:	4620      	mov	r0, r4
    2c1e:	4a06      	ldr	r2, [pc, #24]	; (2c38 <cmd_log_memory_slabs+0x38>)
    2c20:	2108      	movs	r1, #8
    2c22:	f00b f845 	bl	dcb0 <shell_fprintf>
		shell_print(
    2c26:	4620      	mov	r0, r4
    2c28:	4a04      	ldr	r2, [pc, #16]	; (2c3c <cmd_log_memory_slabs+0x3c>)
    2c2a:	2108      	movs	r1, #8
    2c2c:	f00b f840 	bl	dcb0 <shell_fprintf>
}
    2c30:	2000      	movs	r0, #0
    2c32:	bd38      	pop	{r3, r4, r5, pc}
    2c34:	000110e5 	.word	0x000110e5
    2c38:	000110f6 	.word	0x000110f6
    2c3c:	00011107 	.word	0x00011107

00002c40 <cmd_log_backends_list>:
{
    2c40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    2c44:	4b11      	ldr	r3, [pc, #68]	; (2c8c <cmd_log_backends_list+0x4c>)
    2c46:	4c12      	ldr	r4, [pc, #72]	; (2c90 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    2c48:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2c94 <cmd_log_backends_list+0x54>
    2c4c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2c98 <cmd_log_backends_list+0x58>
    2c50:	f8df a048 	ldr.w	sl, [pc, #72]	; 2c9c <cmd_log_backends_list+0x5c>
    2c54:	1b1b      	subs	r3, r3, r4
{
    2c56:	4607      	mov	r7, r0
    2c58:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    2c5a:	2500      	movs	r5, #0
    2c5c:	42b5      	cmp	r5, r6
    2c5e:	db03      	blt.n	2c68 <cmd_log_backends_list+0x28>
}
    2c60:	2000      	movs	r0, #0
    2c62:	b002      	add	sp, #8
    2c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    2c68:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    2c6a:	7959      	ldrb	r1, [r3, #5]
    2c6c:	791b      	ldrb	r3, [r3, #4]
    2c6e:	2900      	cmp	r1, #0
    2c70:	bf14      	ite	ne
    2c72:	4642      	movne	r2, r8
    2c74:	464a      	moveq	r2, r9
    2c76:	e9cd 2300 	strd	r2, r3, [sp]
    2c7a:	2108      	movs	r1, #8
    2c7c:	68a3      	ldr	r3, [r4, #8]
    2c7e:	4652      	mov	r2, sl
    2c80:	4638      	mov	r0, r7
    2c82:	f00b f815 	bl	dcb0 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    2c86:	3501      	adds	r5, #1
    2c88:	3410      	adds	r4, #16
    2c8a:	e7e7      	b.n	2c5c <cmd_log_backends_list+0x1c>
    2c8c:	00010658 	.word	0x00010658
    2c90:	00010648 	.word	0x00010648
    2c94:	00012b90 	.word	0x00012b90
    2c98:	00012176 	.word	0x00012176
    2c9c:	00011153 	.word	0x00011153

00002ca0 <log_status>:
{
    2ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2ca4:	4b24      	ldr	r3, [pc, #144]	; (2d38 <log_status+0x98>)
    2ca6:	4c25      	ldr	r4, [pc, #148]	; (2d3c <log_status+0x9c>)
    2ca8:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    2caa:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    2cac:	795b      	ldrb	r3, [r3, #5]
{
    2cae:	b085      	sub	sp, #20
    2cb0:	4605      	mov	r5, r0
    2cb2:	460e      	mov	r6, r1
    2cb4:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    2cb6:	b91b      	cbnz	r3, 2cc0 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    2cb8:	4a21      	ldr	r2, [pc, #132]	; (2d40 <log_status+0xa0>)
    2cba:	2103      	movs	r1, #3
    2cbc:	f00a fff8 	bl	dcb0 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    2cc0:	4b20      	ldr	r3, [pc, #128]	; (2d44 <log_status+0xa4>)
    2cc2:	4a21      	ldr	r2, [pc, #132]	; (2d48 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2cc4:	f8df a084 	ldr.w	sl, [pc, #132]	; 2d4c <log_status+0xac>
    2cc8:	f8df b084 	ldr.w	fp, [pc, #132]	; 2d50 <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    2ccc:	2108      	movs	r1, #8
    2cce:	4628      	mov	r0, r5
    2cd0:	f00a ffee 	bl	dcb0 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    2cd4:	4a1f      	ldr	r2, [pc, #124]	; (2d54 <log_status+0xb4>)
    2cd6:	2108      	movs	r1, #8
    2cd8:	4628      	mov	r0, r5
    2cda:	f00a ffe9 	bl	dcb0 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    2cde:	f04f 0800 	mov.w	r8, #0
    2ce2:	fa0f f788 	sxth.w	r7, r8
    2ce6:	42a7      	cmp	r7, r4
    2ce8:	f108 0801 	add.w	r8, r8, #1
    2cec:	d303      	bcc.n	2cf6 <log_status+0x56>
}
    2cee:	2000      	movs	r0, #0
    2cf0:	b005      	add	sp, #20
    2cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2cf6:	463a      	mov	r2, r7
    2cf8:	2301      	movs	r3, #1
    2cfa:	2100      	movs	r1, #0
    2cfc:	4630      	mov	r0, r6
    2cfe:	f7ff fcf7 	bl	26f0 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2d02:	2300      	movs	r3, #0
    2d04:	463a      	mov	r2, r7
    2d06:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2d08:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2d0a:	4630      	mov	r0, r6
    2d0c:	f7ff fcf0 	bl	26f0 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2d10:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2d12:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2d14:	2000      	movs	r0, #0
    2d16:	f7ff fc5d 	bl	25d4 <log_source_name_get>
    2d1a:	9a03      	ldr	r2, [sp, #12]
    2d1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    2d20:	9201      	str	r2, [sp, #4]
    2d22:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    2d26:	9200      	str	r2, [sp, #0]
    2d28:	4603      	mov	r3, r0
    2d2a:	465a      	mov	r2, fp
    2d2c:	2108      	movs	r1, #8
    2d2e:	4628      	mov	r0, r5
    2d30:	f00a ffbe 	bl	dcb0 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    2d34:	e7d5      	b.n	2ce2 <log_status+0x42>
    2d36:	bf00      	nop
    2d38:	000105d8 	.word	0x000105d8
    2d3c:	00010648 	.word	0x00010648
    2d40:	00011174 	.word	0x00011174
    2d44:	00011186 	.word	0x00011186
    2d48:	00011192 	.word	0x00011192
    2d4c:	000107c0 	.word	0x000107c0
    2d50:	000111ed 	.word	0x000111ed
    2d54:	000111b0 	.word	0x000111b0

00002d58 <module_name_get>:
{
    2d58:	b510      	push	{r4, lr}
	entry->handler = NULL;
    2d5a:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    2d5c:	4a05      	ldr	r2, [pc, #20]	; (2d74 <module_name_get+0x1c>)
	entry->handler = NULL;
    2d5e:	60cb      	str	r3, [r1, #12]
{
    2d60:	460c      	mov	r4, r1
	entry->help  = NULL;
    2d62:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    2d64:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    2d66:	4601      	mov	r1, r0
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fc33 	bl	25d4 <log_source_name_get>
    2d6e:	6020      	str	r0, [r4, #0]
}
    2d70:	bd10      	pop	{r4, pc}
    2d72:	bf00      	nop
    2d74:	000107b0 	.word	0x000107b0

00002d78 <shell_backend_cmd_execute>:
{
    2d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    2d7c:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    2d80:	4c18      	ldr	r4, [pc, #96]	; (2de4 <shell_backend_cmd_execute+0x6c>)
{
    2d82:	b085      	sub	sp, #20
    2d84:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    2d86:	4650      	mov	r0, sl
{
    2d88:	4689      	mov	r9, r1
    2d8a:	4690      	mov	r8, r2
    2d8c:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    2d8e:	f00c f923 	bl	efd8 <strlen>
    2d92:	4915      	ldr	r1, [pc, #84]	; (2de8 <shell_backend_cmd_execute+0x70>)
    2d94:	1b09      	subs	r1, r1, r4
    2d96:	110b      	asrs	r3, r1, #4
    2d98:	4602      	mov	r2, r0
    2d9a:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    2d9c:	2700      	movs	r7, #0
    2d9e:	46a3      	mov	fp, r4
    2da0:	9b01      	ldr	r3, [sp, #4]
    2da2:	429f      	cmp	r7, r3
    2da4:	db08      	blt.n	2db8 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    2da6:	4a11      	ldr	r2, [pc, #68]	; (2dec <shell_backend_cmd_execute+0x74>)
    2da8:	4653      	mov	r3, sl
    2daa:	2101      	movs	r1, #1
    2dac:	4630      	mov	r0, r6
    2dae:	f00a ff7f 	bl	dcb0 <shell_fprintf>
		return -ENOEXEC;
    2db2:	f06f 0507 	mvn.w	r5, #7
    2db6:	e00f      	b.n	2dd8 <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    2db8:	68a1      	ldr	r1, [r4, #8]
    2dba:	9203      	str	r2, [sp, #12]
    2dbc:	4650      	mov	r0, sl
    2dbe:	f00c f927 	bl	f010 <strncmp>
    2dc2:	3410      	adds	r4, #16
    2dc4:	9a03      	ldr	r2, [sp, #12]
    2dc6:	4605      	mov	r5, r0
    2dc8:	b950      	cbnz	r0, 2de0 <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    2dca:	9c02      	ldr	r4, [sp, #8]
    2dcc:	4643      	mov	r3, r8
    2dce:	464a      	mov	r2, r9
    2dd0:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    2dd4:	4630      	mov	r0, r6
    2dd6:	47a0      	blx	r4
}
    2dd8:	4628      	mov	r0, r5
    2dda:	b005      	add	sp, #20
    2ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    2de0:	3701      	adds	r7, #1
    2de2:	e7dd      	b.n	2da0 <shell_backend_cmd_execute+0x28>
    2de4:	00010648 	.word	0x00010648
    2de8:	00010658 	.word	0x00010658
    2dec:	00011201 	.word	0x00011201

00002df0 <cmd_log_backend_status>:
{
    2df0:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    2df2:	4b02      	ldr	r3, [pc, #8]	; (2dfc <cmd_log_backend_status+0xc>)
    2df4:	f7ff ffc0 	bl	2d78 <shell_backend_cmd_execute>
}
    2df8:	2000      	movs	r0, #0
    2dfa:	bd08      	pop	{r3, pc}
    2dfc:	00002ca1 	.word	0x00002ca1

00002e00 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    2e00:	4b01      	ldr	r3, [pc, #4]	; (2e08 <cmd_log_backend_halt+0x8>)
    2e02:	f7ff bfb9 	b.w	2d78 <shell_backend_cmd_execute>
    2e06:	bf00      	nop
    2e08:	0000d92f 	.word	0x0000d92f

00002e0c <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    2e0c:	4b01      	ldr	r3, [pc, #4]	; (2e14 <cmd_log_backend_go+0x8>)
    2e0e:	f7ff bfb3 	b.w	2d78 <shell_backend_cmd_execute>
    2e12:	bf00      	nop
    2e14:	0000d937 	.word	0x0000d937

00002e18 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    2e18:	4b01      	ldr	r3, [pc, #4]	; (2e20 <cmd_log_backend_enable+0x8>)
    2e1a:	f7ff bfad 	b.w	2d78 <shell_backend_cmd_execute>
    2e1e:	bf00      	nop
    2e20:	00002f21 	.word	0x00002f21

00002e24 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    2e24:	4b01      	ldr	r3, [pc, #4]	; (2e2c <cmd_log_backend_disable+0x8>)
    2e26:	f7ff bfa7 	b.w	2d78 <shell_backend_cmd_execute>
    2e2a:	bf00      	nop
    2e2c:	0000d983 	.word	0x0000d983

00002e30 <shell_state_precheck>:
{
    2e30:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    2e32:	69c3      	ldr	r3, [r0, #28]
    2e34:	68db      	ldr	r3, [r3, #12]
    2e36:	791c      	ldrb	r4, [r3, #4]
    2e38:	b92c      	cbnz	r4, 2e46 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    2e3a:	4a04      	ldr	r2, [pc, #16]	; (2e4c <shell_state_precheck+0x1c>)
    2e3c:	2101      	movs	r1, #1
    2e3e:	f00a ff37 	bl	dcb0 <shell_fprintf>
    2e42:	4620      	mov	r0, r4
}
    2e44:	bd10      	pop	{r4, pc}
	return true;
    2e46:	2001      	movs	r0, #1
    2e48:	e7fc      	b.n	2e44 <shell_state_precheck+0x14>
    2e4a:	bf00      	nop
    2e4c:	00011216 	.word	0x00011216

00002e50 <filters_set>:
{
    2e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e54:	4e2c      	ldr	r6, [pc, #176]	; (2f08 <filters_set+0xb8>)
    2e56:	461f      	mov	r7, r3
    2e58:	4b2c      	ldr	r3, [pc, #176]	; (2f0c <filters_set+0xbc>)
    2e5a:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    2e5c:	1e15      	subs	r5, r2, #0
{
    2e5e:	b085      	sub	sp, #20
    2e60:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    2e64:	bf14      	ite	ne
    2e66:	462b      	movne	r3, r5
    2e68:	4633      	moveq	r3, r6
    2e6a:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    2e6c:	684b      	ldr	r3, [r1, #4]
    2e6e:	795b      	ldrb	r3, [r3, #5]
{
    2e70:	4680      	mov	r8, r0
    2e72:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    2e74:	b91b      	cbnz	r3, 2e7e <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    2e76:	4a26      	ldr	r2, [pc, #152]	; (2f10 <filters_set+0xc0>)
    2e78:	2103      	movs	r1, #3
    2e7a:	f00a ff19 	bl	dcb0 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    2e7e:	f8df a094 	ldr.w	sl, [pc, #148]	; 2f14 <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    2e82:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    2e84:	9b02      	ldr	r3, [sp, #8]
    2e86:	429c      	cmp	r4, r3
    2e88:	db02      	blt.n	2e90 <filters_set+0x40>
}
    2e8a:	b005      	add	sp, #20
    2e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    2e90:	b3bd      	cbz	r5, 2f02 <filters_set+0xb2>
    2e92:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    2e96:	2300      	movs	r3, #0
    2e98:	429e      	cmp	r6, r3
    2e9a:	d107      	bne.n	2eac <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    2e9c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2ea0:	4a1d      	ldr	r2, [pc, #116]	; (2f18 <filters_set+0xc8>)
    2ea2:	2101      	movs	r1, #1
    2ea4:	4640      	mov	r0, r8
    2ea6:	f00a ff03 	bl	dcb0 <shell_fprintf>
    2eaa:	e023      	b.n	2ef4 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    2eac:	4619      	mov	r1, r3
    2eae:	2000      	movs	r0, #0
    2eb0:	9303      	str	r3, [sp, #12]
    2eb2:	f7ff fb8f 	bl	25d4 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    2eb6:	2240      	movs	r2, #64	; 0x40
    2eb8:	4659      	mov	r1, fp
    2eba:	f00c f8a9 	bl	f010 <strncmp>
    2ebe:	9b03      	ldr	r3, [sp, #12]
    2ec0:	b9d0      	cbnz	r0, 2ef8 <filters_set+0xa8>
			return i;
    2ec2:	461a      	mov	r2, r3
    2ec4:	2100      	movs	r1, #0
    2ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2ec8:	b212      	sxth	r2, r2
    2eca:	4648      	mov	r0, r9
    2ecc:	f7ff fb90 	bl	25f0 <z_impl_log_filter_set>
			if (set_lvl != level) {
    2ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2ed2:	4283      	cmp	r3, r0
    2ed4:	4683      	mov	fp, r0
    2ed6:	d00d      	beq.n	2ef4 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    2ed8:	b985      	cbnz	r5, 2efc <filters_set+0xac>
					log_source_name_get(
    2eda:	4621      	mov	r1, r4
    2edc:	4628      	mov	r0, r5
    2ede:	f7ff fb79 	bl	25d4 <log_source_name_get>
    2ee2:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    2ee4:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    2ee8:	9200      	str	r2, [sp, #0]
    2eea:	2103      	movs	r1, #3
    2eec:	4a0b      	ldr	r2, [pc, #44]	; (2f1c <filters_set+0xcc>)
    2eee:	4640      	mov	r0, r8
    2ef0:	f00a fede 	bl	dcb0 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    2ef4:	3401      	adds	r4, #1
    2ef6:	e7c5      	b.n	2e84 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    2ef8:	3301      	adds	r3, #1
    2efa:	e7cd      	b.n	2e98 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    2efc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2f00:	e7f0      	b.n	2ee4 <filters_set+0x94>
    2f02:	4622      	mov	r2, r4
    2f04:	e7de      	b.n	2ec4 <filters_set+0x74>
    2f06:	bf00      	nop
    2f08:	00010648 	.word	0x00010648
    2f0c:	000105d8 	.word	0x000105d8
    2f10:	0001123a 	.word	0x0001123a
    2f14:	000107c0 	.word	0x000107c0
    2f18:	00011265 	.word	0x00011265
    2f1c:	0001124f 	.word	0x0001124f

00002f20 <log_enable>:
{
    2f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    2f24:	f8d3 b004 	ldr.w	fp, [r3, #4]
    2f28:	f8df a04c 	ldr.w	sl, [pc, #76]	; 2f78 <log_enable+0x58>
{
    2f2c:	4606      	mov	r6, r0
    2f2e:	4688      	mov	r8, r1
    2f30:	4691      	mov	r9, r2
    2f32:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2f34:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    2f36:	f85a 1b04 	ldr.w	r1, [sl], #4
    2f3a:	2204      	movs	r2, #4
    2f3c:	4658      	mov	r0, fp
    2f3e:	f00c f867 	bl	f010 <strncmp>
    2f42:	4604      	mov	r4, r0
    2f44:	b170      	cbz	r0, 2f64 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2f46:	3701      	adds	r7, #1
    2f48:	2f05      	cmp	r7, #5
    2f4a:	d1f4      	bne.n	2f36 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    2f4c:	686b      	ldr	r3, [r5, #4]
    2f4e:	4a0b      	ldr	r2, [pc, #44]	; (2f7c <log_enable+0x5c>)
    2f50:	2101      	movs	r1, #1
    2f52:	4630      	mov	r0, r6
    2f54:	f00a feac 	bl	dcb0 <shell_fprintf>
    2f58:	f06f 0407 	mvn.w	r4, #7
}
    2f5c:	4620      	mov	r0, r4
    2f5e:	b003      	add	sp, #12
    2f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    2f64:	9700      	str	r7, [sp, #0]
    2f66:	f105 0308 	add.w	r3, r5, #8
    2f6a:	f1a9 0202 	sub.w	r2, r9, #2
    2f6e:	4641      	mov	r1, r8
    2f70:	4630      	mov	r0, r6
    2f72:	f7ff ff6d 	bl	2e50 <filters_set>
	return 0;
    2f76:	e7f1      	b.n	2f5c <log_enable+0x3c>
    2f78:	000107c0 	.word	0x000107c0
    2f7c:	0001127f 	.word	0x0001127f

00002f80 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    2f80:	b513      	push	{r0, r1, r4, lr}
    2f82:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    2f84:	f00c fd91 	bl	faaa <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    2f88:	f3c0 2307 	ubfx	r3, r0, #8, #8
    2f8c:	9301      	str	r3, [sp, #4]
    2f8e:	f3c0 4307 	ubfx	r3, r0, #16, #8
    2f92:	9300      	str	r3, [sp, #0]
    2f94:	4a04      	ldr	r2, [pc, #16]	; (2fa8 <cmd_kernel_version+0x28>)
    2f96:	0e03      	lsrs	r3, r0, #24
    2f98:	2108      	movs	r1, #8
    2f9a:	4620      	mov	r0, r4
    2f9c:	f00a fe88 	bl	dcb0 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    2fa0:	2000      	movs	r0, #0
    2fa2:	b002      	add	sp, #8
    2fa4:	bd10      	pop	{r4, pc}
    2fa6:	bf00      	nop
    2fa8:	0001143a 	.word	0x0001143a

00002fac <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    2fac:	b510      	push	{r4, lr}
    2fae:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    2fb0:	f00c ffae 	bl	ff10 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2fb8:	fba0 2003 	umull	r2, r0, r0, r3
    2fbc:	fb03 0301 	mla	r3, r3, r1, r0
    2fc0:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    2fc2:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    2fc6:	4620      	mov	r0, r4
    2fc8:	4a02      	ldr	r2, [pc, #8]	; (2fd4 <cmd_kernel_uptime+0x28>)
    2fca:	2108      	movs	r1, #8
    2fcc:	f00a fe70 	bl	dcb0 <shell_fprintf>
	return 0;
}
    2fd0:	2000      	movs	r0, #0
    2fd2:	bd10      	pop	{r4, pc}
    2fd4:	00011453 	.word	0x00011453

00002fd8 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    2fd8:	b510      	push	{r4, lr}
    2fda:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    2fdc:	f006 fab4 	bl	9548 <sys_clock_elapsed>
    2fe0:	4a08      	ldr	r2, [pc, #32]	; (3004 <cmd_kernel_threads+0x2c>)
    2fe2:	4603      	mov	r3, r0
    2fe4:	2108      	movs	r1, #8
    2fe6:	4620      	mov	r0, r4
    2fe8:	f00a fe62 	bl	dcb0 <shell_fprintf>
	shell_print(shell, "Threads:");
    2fec:	4a06      	ldr	r2, [pc, #24]	; (3008 <cmd_kernel_threads+0x30>)
    2fee:	4620      	mov	r0, r4
    2ff0:	2108      	movs	r1, #8
    2ff2:	f00a fe5d 	bl	dcb0 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    2ff6:	4805      	ldr	r0, [pc, #20]	; (300c <cmd_kernel_threads+0x34>)
    2ff8:	4621      	mov	r1, r4
    2ffa:	f008 fa35 	bl	b468 <k_thread_foreach>
	return 0;
}
    2ffe:	2000      	movs	r0, #0
    3000:	bd10      	pop	{r4, pc}
    3002:	bf00      	nop
    3004:	00011462 	.word	0x00011462
    3008:	00011481 	.word	0x00011481
    300c:	00003071 	.word	0x00003071

00003010 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    3010:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    3012:	4601      	mov	r1, r0
{
    3014:	b087      	sub	sp, #28
    3016:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    3018:	4811      	ldr	r0, [pc, #68]	; (3060 <cmd_kernel_stacks+0x50>)
    301a:	f008 fa25 	bl	b468 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    301e:	4a11      	ldr	r2, [pc, #68]	; (3064 <cmd_kernel_stacks+0x54>)
		unused = 0;
    3020:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    3022:	f812 1b01 	ldrb.w	r1, [r2], #1
    3026:	29aa      	cmp	r1, #170	; 0xaa
    3028:	d103      	bne.n	3032 <cmd_kernel_stacks+0x22>
				unused++;
    302a:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    302c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3030:	d1f7      	bne.n	3022 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    3032:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    3036:	2264      	movs	r2, #100	; 0x64
    3038:	434a      	muls	r2, r1
    303a:	0ad2      	lsrs	r2, r2, #11
    303c:	9205      	str	r2, [sp, #20]
    303e:	2500      	movs	r5, #0
    3040:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3044:	e9cd 1203 	strd	r1, r2, [sp, #12]
    3048:	e9cd 2301 	strd	r2, r3, [sp, #4]
    304c:	4620      	mov	r0, r4
    304e:	4b06      	ldr	r3, [pc, #24]	; (3068 <cmd_kernel_stacks+0x58>)
    3050:	4a06      	ldr	r2, [pc, #24]	; (306c <cmd_kernel_stacks+0x5c>)
    3052:	9500      	str	r5, [sp, #0]
    3054:	2108      	movs	r1, #8
    3056:	f00a fe2b 	bl	dcb0 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    305a:	4628      	mov	r0, r5
    305c:	b007      	add	sp, #28
    305e:	bd30      	pop	{r4, r5, pc}
    3060:	00003151 	.word	0x00003151
    3064:	20003b20 	.word	0x20003b20
    3068:	20003b00 	.word	0x20003b00
    306c:	0001148b 	.word	0x0001148b

00003070 <shell_tdata_dump>:
{
    3070:	b5f0      	push	{r4, r5, r6, r7, lr}
    3072:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    3074:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    3078:	4604      	mov	r4, r0
    307a:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    307c:	f00c fd03 	bl	fa86 <k_thread_name_get>
    3080:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    3082:	f009 f8cb 	bl	c21c <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    3086:	4b23      	ldr	r3, [pc, #140]	; (3114 <shell_tdata_dump+0xa4>)
    3088:	4a23      	ldr	r2, [pc, #140]	; (3118 <shell_tdata_dump+0xa8>)
    308a:	2e00      	cmp	r6, #0
    308c:	bf08      	it	eq
    308e:	461e      	moveq	r6, r3
    3090:	4b22      	ldr	r3, [pc, #136]	; (311c <shell_tdata_dump+0xac>)
    3092:	e9cd 4600 	strd	r4, r6, [sp]
    3096:	4284      	cmp	r4, r0
    3098:	bf18      	it	ne
    309a:	4613      	movne	r3, r2
    309c:	2108      	movs	r1, #8
    309e:	4628      	mov	r0, r5
    30a0:	4a1f      	ldr	r2, [pc, #124]	; (3120 <shell_tdata_dump+0xb0>)
    30a2:	f00a fe05 	bl	dcb0 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    30a6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    30aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    30ae:	f994 300e 	ldrsb.w	r3, [r4, #14]
    30b2:	4a1c      	ldr	r2, [pc, #112]	; (3124 <shell_tdata_dump+0xb4>)
    30b4:	9300      	str	r3, [sp, #0]
    30b6:	2108      	movs	r1, #8
    30b8:	7b23      	ldrb	r3, [r4, #12]
    30ba:	4628      	mov	r0, r5
    30bc:	f00a fdf8 	bl	dcb0 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    30c0:	4620      	mov	r0, r4
    30c2:	f008 fa19 	bl	b4f8 <k_thread_state_str>
    30c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    30c8:	9200      	str	r2, [sp, #0]
    30ca:	4603      	mov	r3, r0
    30cc:	4a16      	ldr	r2, [pc, #88]	; (3128 <shell_tdata_dump+0xb8>)
    30ce:	2108      	movs	r1, #8
    30d0:	4628      	mov	r0, r5
    30d2:	f00a fded 	bl	dcb0 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    30d6:	a905      	add	r1, sp, #20
    30d8:	4620      	mov	r0, r4
    30da:	f00c fcd8 	bl	fa8e <z_impl_k_thread_stack_space_get>
	if (ret) {
    30de:	4603      	mov	r3, r0
    30e0:	b130      	cbz	r0, 30f0 <shell_tdata_dump+0x80>
		shell_print(shell,
    30e2:	4a12      	ldr	r2, [pc, #72]	; (312c <shell_tdata_dump+0xbc>)
    30e4:	2108      	movs	r1, #8
    30e6:	4628      	mov	r0, r5
    30e8:	f00a fde2 	bl	dcb0 <shell_fprintf>
}
    30ec:	b007      	add	sp, #28
    30ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    30f0:	9a05      	ldr	r2, [sp, #20]
    30f2:	2364      	movs	r3, #100	; 0x64
    30f4:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    30f6:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    30fa:	434b      	muls	r3, r1
		shell_print(shell,
    30fc:	4a0c      	ldr	r2, [pc, #48]	; (3130 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    30fe:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    3102:	2108      	movs	r1, #8
    3104:	e9cd 7302 	strd	r7, r3, [sp, #8]
    3108:	4628      	mov	r0, r5
    310a:	463b      	mov	r3, r7
    310c:	f00a fdd0 	bl	dcb0 <shell_fprintf>
}
    3110:	e7ec      	b.n	30ec <shell_tdata_dump+0x7c>
    3112:	bf00      	nop
    3114:	000114d1 	.word	0x000114d1
    3118:	00011067 	.word	0x00011067
    311c:	00012846 	.word	0x00012846
    3120:	000114d4 	.word	0x000114d4
    3124:	000114e0 	.word	0x000114e0
    3128:	0001150c 	.word	0x0001150c
    312c:	00011523 	.word	0x00011523
    3130:	00011550 	.word	0x00011550

00003134 <cmd_kernel_cycles>:
{
    3134:	b510      	push	{r4, lr}
    3136:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    3138:	f00c fad4 	bl	f6e4 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    313c:	4a03      	ldr	r2, [pc, #12]	; (314c <cmd_kernel_cycles+0x18>)
    313e:	4603      	mov	r3, r0
    3140:	2108      	movs	r1, #8
    3142:	4620      	mov	r0, r4
    3144:	f00a fdb4 	bl	dcb0 <shell_fprintf>
}
    3148:	2000      	movs	r0, #0
    314a:	bd10      	pop	{r4, pc}
    314c:	00011587 	.word	0x00011587

00003150 <shell_stack_dump>:
{
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    3152:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    3156:	b089      	sub	sp, #36	; 0x24
    3158:	4604      	mov	r4, r0
    315a:	460d      	mov	r5, r1
    315c:	a907      	add	r1, sp, #28
    315e:	f00c fc96 	bl	fa8e <z_impl_k_thread_stack_space_get>
	if (ret) {
    3162:	4603      	mov	r3, r0
    3164:	b130      	cbz	r0, 3174 <shell_stack_dump+0x24>
		shell_print(shell,
    3166:	4a10      	ldr	r2, [pc, #64]	; (31a8 <shell_stack_dump+0x58>)
    3168:	2108      	movs	r1, #8
    316a:	4628      	mov	r0, r5
    316c:	f00a fda0 	bl	dcb0 <shell_fprintf>
}
    3170:	b009      	add	sp, #36	; 0x24
    3172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    3174:	4620      	mov	r0, r4
    3176:	f00c fc86 	bl	fa86 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    317a:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    317c:	4a0b      	ldr	r2, [pc, #44]	; (31ac <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    317e:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    3180:	2800      	cmp	r0, #0
    3182:	bf18      	it	ne
    3184:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    3186:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    3188:	e9cd 1702 	strd	r1, r7, [sp, #8]
    318c:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    3190:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    3192:	4a07      	ldr	r2, [pc, #28]	; (31b0 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    3194:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    3198:	2108      	movs	r1, #8
    319a:	e9cd 6304 	strd	r6, r3, [sp, #16]
    319e:	4628      	mov	r0, r5
    31a0:	4623      	mov	r3, r4
    31a2:	f00a fd85 	bl	dcb0 <shell_fprintf>
    31a6:	e7e3      	b.n	3170 <shell_stack_dump+0x20>
    31a8:	00011523 	.word	0x00011523
    31ac:	000114d1 	.word	0x000114d1
    31b0:	0001159d 	.word	0x0001159d

000031b4 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    31b4:	4603      	mov	r3, r0
	const char *name = dev->name;
    31b6:	6800      	ldr	r0, [r0, #0]
{
    31b8:	b510      	push	{r4, lr}
    31ba:	460c      	mov	r4, r1
    31bc:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    31be:	b108      	cbz	r0, 31c4 <get_device_name+0x10>
    31c0:	7802      	ldrb	r2, [r0, #0]
    31c2:	b922      	cbnz	r2, 31ce <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    31c4:	4a02      	ldr	r2, [pc, #8]	; (31d0 <get_device_name+0x1c>)
    31c6:	4620      	mov	r0, r4
    31c8:	f004 f8fe 	bl	73c8 <snprintf>
		name = buf;
    31cc:	4620      	mov	r0, r4
	}

	return name;
}
    31ce:	bd10      	pop	{r4, pc}
    31d0:	00011674 	.word	0x00011674

000031d4 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    31d4:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    31d6:	680c      	ldr	r4, [r1, #0]
    31d8:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    31dc:	f7ff ffea 	bl	31b4 <get_device_name>
    31e0:	4a03      	ldr	r2, [pc, #12]	; (31f0 <cmd_device_list_visitor+0x1c>)
    31e2:	4603      	mov	r3, r0
    31e4:	2108      	movs	r1, #8
    31e6:	4620      	mov	r0, r4
    31e8:	f00a fd62 	bl	dcb0 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    31ec:	2000      	movs	r0, #0
    31ee:	bd10      	pop	{r4, pc}
    31f0:	00011679 	.word	0x00011679

000031f4 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    31f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31f8:	b08a      	sub	sp, #40	; 0x28
    31fa:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    31fc:	a801      	add	r0, sp, #4
    31fe:	f007 ff71 	bl	b0e4 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    3202:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    3204:	4a1b      	ldr	r2, [pc, #108]	; (3274 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    3206:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3278 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    320a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 327c <cmd_device_list+0x88>
    320e:	f8df a070 	ldr.w	sl, [pc, #112]	; 3280 <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    3212:	2318      	movs	r3, #24
    3214:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    3218:	2108      	movs	r1, #8
    321a:	4628      	mov	r0, r5
    321c:	f00a fd48 	bl	dcb0 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    3220:	9c01      	ldr	r4, [sp, #4]
    3222:	42b4      	cmp	r4, r6
    3224:	d303      	bcc.n	322e <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    3226:	2000      	movs	r0, #0
    3228:	b00a      	add	sp, #40	; 0x28
    322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    322e:	af05      	add	r7, sp, #20
    3230:	4639      	mov	r1, r7
    3232:	2214      	movs	r2, #20
    3234:	4620      	mov	r0, r4
    3236:	f7ff ffbd 	bl	31b4 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    323a:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    323c:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    323e:	2108      	movs	r1, #8
    3240:	4628      	mov	r0, r5
    3242:	f00a fd35 	bl	dcb0 <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3246:	4620      	mov	r0, r4
    3248:	f00c fbb3 	bl	f9b2 <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    324c:	4a0d      	ldr	r2, [pc, #52]	; (3284 <cmd_device_list+0x90>)
    324e:	2800      	cmp	r0, #0
    3250:	bf14      	ite	ne
    3252:	464b      	movne	r3, r9
    3254:	4653      	moveq	r3, sl
    3256:	2108      	movs	r1, #8
    3258:	4628      	mov	r0, r5
    325a:	f00a fd29 	bl	dcb0 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    325e:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    3260:	4620      	mov	r0, r4
    3262:	4909      	ldr	r1, [pc, #36]	; (3288 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    3264:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    3266:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    3268:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    326c:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    326e:	f00c fbaa 	bl	f9c6 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    3272:	e7d6      	b.n	3222 <cmd_device_list+0x2e>
    3274:	00011698 	.word	0x00011698
    3278:	000116a2 	.word	0x000116a2
    327c:	00011689 	.word	0x00011689
    3280:	0001168f 	.word	0x0001168f
    3284:	000116a7 	.word	0x000116a7
    3288:	000031d5 	.word	0x000031d5

0000328c <device_get_config_level>:
{
    328c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    3290:	4b11      	ldr	r3, [pc, #68]	; (32d8 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    3292:	f8df 9048 	ldr.w	r9, [pc, #72]	; 32dc <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    3296:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    329a:	3101      	adds	r1, #1
{
    329c:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    329e:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    32a2:	4606      	mov	r6, r0
	bool devices = false;
    32a4:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    32a6:	45a0      	cmp	r8, r4
    32a8:	d803      	bhi.n	32b2 <device_get_config_level+0x26>
}
    32aa:	4638      	mov	r0, r7
    32ac:	b007      	add	sp, #28
    32ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    32b2:	4620      	mov	r0, r4
    32b4:	f00c fb7d 	bl	f9b2 <z_device_is_ready>
		if (device_is_ready(dev)) {
    32b8:	4605      	mov	r5, r0
    32ba:	b158      	cbz	r0, 32d4 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    32bc:	2214      	movs	r2, #20
    32be:	a901      	add	r1, sp, #4
    32c0:	4620      	mov	r0, r4
    32c2:	f7ff ff77 	bl	31b4 <get_device_name>
    32c6:	464a      	mov	r2, r9
    32c8:	4603      	mov	r3, r0
    32ca:	2108      	movs	r1, #8
    32cc:	4630      	mov	r0, r6
    32ce:	f00a fcef 	bl	dcb0 <shell_fprintf>
			devices = true;
    32d2:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    32d4:	3418      	adds	r4, #24
    32d6:	e7e6      	b.n	32a6 <device_get_config_level+0x1a>
    32d8:	000109e0 	.word	0x000109e0
    32dc:	000116ae 	.word	0x000116ae

000032e0 <cmd_device_levels>:
{
    32e0:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    32e2:	2108      	movs	r1, #8
{
    32e4:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    32e6:	4a1e      	ldr	r2, [pc, #120]	; (3360 <cmd_device_levels+0x80>)
    32e8:	f00a fce2 	bl	dcb0 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    32ec:	2100      	movs	r1, #0
    32ee:	4620      	mov	r0, r4
    32f0:	f7ff ffcc 	bl	328c <device_get_config_level>
	if (ret == false) {
    32f4:	b920      	cbnz	r0, 3300 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    32f6:	4a1b      	ldr	r2, [pc, #108]	; (3364 <cmd_device_levels+0x84>)
    32f8:	2108      	movs	r1, #8
    32fa:	4620      	mov	r0, r4
    32fc:	f00a fcd8 	bl	dcb0 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    3300:	2108      	movs	r1, #8
    3302:	4620      	mov	r0, r4
    3304:	4a18      	ldr	r2, [pc, #96]	; (3368 <cmd_device_levels+0x88>)
    3306:	f00a fcd3 	bl	dcb0 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    330a:	2101      	movs	r1, #1
    330c:	4620      	mov	r0, r4
    330e:	f7ff ffbd 	bl	328c <device_get_config_level>
	if (ret == false) {
    3312:	b920      	cbnz	r0, 331e <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    3314:	4a13      	ldr	r2, [pc, #76]	; (3364 <cmd_device_levels+0x84>)
    3316:	2108      	movs	r1, #8
    3318:	4620      	mov	r0, r4
    331a:	f00a fcc9 	bl	dcb0 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    331e:	2108      	movs	r1, #8
    3320:	4620      	mov	r0, r4
    3322:	4a12      	ldr	r2, [pc, #72]	; (336c <cmd_device_levels+0x8c>)
    3324:	f00a fcc4 	bl	dcb0 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    3328:	2102      	movs	r1, #2
    332a:	4620      	mov	r0, r4
    332c:	f7ff ffae 	bl	328c <device_get_config_level>
	if (ret == false) {
    3330:	b920      	cbnz	r0, 333c <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    3332:	4a0c      	ldr	r2, [pc, #48]	; (3364 <cmd_device_levels+0x84>)
    3334:	2108      	movs	r1, #8
    3336:	4620      	mov	r0, r4
    3338:	f00a fcba 	bl	dcb0 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    333c:	2108      	movs	r1, #8
    333e:	4620      	mov	r0, r4
    3340:	4a0b      	ldr	r2, [pc, #44]	; (3370 <cmd_device_levels+0x90>)
    3342:	f00a fcb5 	bl	dcb0 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    3346:	2103      	movs	r1, #3
    3348:	4620      	mov	r0, r4
    334a:	f7ff ff9f 	bl	328c <device_get_config_level>
	if (ret == false) {
    334e:	b920      	cbnz	r0, 335a <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    3350:	4a04      	ldr	r2, [pc, #16]	; (3364 <cmd_device_levels+0x84>)
    3352:	2108      	movs	r1, #8
    3354:	4620      	mov	r0, r4
    3356:	f00a fcab 	bl	dcb0 <shell_fprintf>
}
    335a:	2000      	movs	r0, #0
    335c:	bd10      	pop	{r4, pc}
    335e:	bf00      	nop
    3360:	000116b4 	.word	0x000116b4
    3364:	000116c3 	.word	0x000116c3
    3368:	000116cb 	.word	0x000116cb
    336c:	000116da 	.word	0x000116da
    3370:	000116e8 	.word	0x000116e8

00003374 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    3374:	1e8b      	subs	r3, r1, #2
    3376:	2b02      	cmp	r3, #2
{
    3378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    337c:	4607      	mov	r7, r0
    337e:	4688      	mov	r8, r1
    3380:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    3382:	d833      	bhi.n	33ec <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    3384:	6860      	ldr	r0, [r4, #4]
    3386:	2210      	movs	r2, #16
    3388:	2100      	movs	r1, #0
    338a:	f00b fd62 	bl	ee52 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    338e:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    3392:	4606      	mov	r6, r0
	if (argc < 3) {
    3394:	d01e      	beq.n	33d4 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    3396:	68a0      	ldr	r0, [r4, #8]
    3398:	220a      	movs	r2, #10
    339a:	2100      	movs	r1, #0
    339c:	f00b fd59 	bl	ee52 <strtoul>
    33a0:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    33a2:	4a21      	ldr	r2, [pc, #132]	; (3428 <cmd_devmem+0xb4>)
    33a4:	462b      	mov	r3, r5
    33a6:	2108      	movs	r1, #8
    33a8:	4638      	mov	r0, r7
    33aa:	f00a fc81 	bl	dcb0 <shell_fprintf>

	if (argc <= 3) {
    33ae:	f1b8 0f04 	cmp.w	r8, #4
    33b2:	d01e      	beq.n	33f2 <cmd_devmem+0x7e>
	switch (width) {
    33b4:	2d10      	cmp	r5, #16
    33b6:	d00f      	beq.n	33d8 <cmd_devmem+0x64>
    33b8:	2d20      	cmp	r5, #32
    33ba:	d010      	beq.n	33de <cmd_devmem+0x6a>
    33bc:	2d08      	cmp	r5, #8
    33be:	d110      	bne.n	33e2 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    33c0:	7833      	ldrb	r3, [r6, #0]
    33c2:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    33c4:	4a19      	ldr	r2, [pc, #100]	; (342c <cmd_devmem+0xb8>)
    33c6:	2108      	movs	r1, #8
    33c8:	4638      	mov	r0, r7
    33ca:	f00a fc71 	bl	dcb0 <shell_fprintf>
	int err = 0;
    33ce:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    33d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    33d4:	2520      	movs	r5, #32
    33d6:	e7e4      	b.n	33a2 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    33d8:	8833      	ldrh	r3, [r6, #0]
    33da:	b29b      	uxth	r3, r3
	if (err == 0) {
    33dc:	e7f2      	b.n	33c4 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    33de:	6833      	ldr	r3, [r6, #0]
    33e0:	e7f0      	b.n	33c4 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    33e2:	4a13      	ldr	r2, [pc, #76]	; (3430 <cmd_devmem+0xbc>)
    33e4:	2108      	movs	r1, #8
    33e6:	4638      	mov	r0, r7
    33e8:	f00a fc62 	bl	dcb0 <shell_fprintf>
		return -EINVAL;
    33ec:	f06f 0015 	mvn.w	r0, #21
    33f0:	e7ee      	b.n	33d0 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    33f2:	68e0      	ldr	r0, [r4, #12]
    33f4:	2210      	movs	r2, #16
    33f6:	2100      	movs	r1, #0
    33f8:	f00b fd2b 	bl	ee52 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    33fc:	4a0d      	ldr	r2, [pc, #52]	; (3434 <cmd_devmem+0xc0>)
    33fe:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    3400:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    3402:	2108      	movs	r1, #8
    3404:	4638      	mov	r0, r7
    3406:	f00a fc53 	bl	dcb0 <shell_fprintf>
	switch (width) {
    340a:	2d10      	cmp	r5, #16
    340c:	d006      	beq.n	341c <cmd_devmem+0xa8>
    340e:	2d20      	cmp	r5, #32
    3410:	d007      	beq.n	3422 <cmd_devmem+0xae>
    3412:	2d08      	cmp	r5, #8
    3414:	d1e5      	bne.n	33e2 <cmd_devmem+0x6e>
		sys_write8(value, addr);
    3416:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    3418:	7034      	strb	r4, [r6, #0]
    341a:	e7d8      	b.n	33ce <cmd_devmem+0x5a>
		sys_write16(value, addr);
    341c:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    341e:	8034      	strh	r4, [r6, #0]
    3420:	e7d5      	b.n	33ce <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    3422:	6034      	str	r4, [r6, #0]
    3424:	e7d3      	b.n	33ce <cmd_devmem+0x5a>
    3426:	bf00      	nop
    3428:	00011745 	.word	0x00011745
    342c:	00011770 	.word	0x00011770
    3430:	0001175a 	.word	0x0001175a
    3434:	00011781 	.word	0x00011781

00003438 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    3438:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    343a:	4e0e      	ldr	r6, [pc, #56]	; (3474 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    343c:	4604      	mov	r4, r0
	if (bypass && in_use) {
    343e:	7833      	ldrb	r3, [r6, #0]
    3440:	460d      	mov	r5, r1
    3442:	b131      	cbz	r1, 3452 <set_bypass.isra.0+0x1a>
    3444:	b12b      	cbz	r3, 3452 <set_bypass.isra.0+0x1a>
}
    3446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    344a:	4a0b      	ldr	r2, [pc, #44]	; (3478 <set_bypass.isra.0+0x40>)
    344c:	2101      	movs	r1, #1
    344e:	f00a bc2f 	b.w	dcb0 <shell_fprintf>
	in_use = !in_use;
    3452:	f083 0301 	eor.w	r3, r3, #1
    3456:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    3458:	b133      	cbz	r3, 3468 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    345a:	4a08      	ldr	r2, [pc, #32]	; (347c <set_bypass.isra.0+0x44>)
    345c:	2108      	movs	r1, #8
    345e:	4620      	mov	r0, r4
    3460:	f00a fc26 	bl	dcb0 <shell_fprintf>
		in_use = true;
    3464:	2301      	movs	r3, #1
    3466:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    3468:	4629      	mov	r1, r5
    346a:	4620      	mov	r0, r4
}
    346c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    3470:	f00a bc2b 	b.w	dcca <shell_set_bypass>
    3474:	20002194 	.word	0x20002194
    3478:	00011795 	.word	0x00011795
    347c:	000117d0 	.word	0x000117d0

00003480 <bypass_cb>:
{
    3480:	b570      	push	{r4, r5, r6, lr}
    3482:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    3484:	483c      	ldr	r0, [pc, #240]	; (3578 <bypass_cb+0xf8>)
    3486:	7803      	ldrb	r3, [r0, #0]
    3488:	2b18      	cmp	r3, #24
    348a:	d102      	bne.n	3492 <bypass_cb+0x12>
    348c:	780b      	ldrb	r3, [r1, #0]
    348e:	2b11      	cmp	r3, #17
    3490:	d031      	beq.n	34f6 <bypass_cb+0x76>
    3492:	3a01      	subs	r2, #1
    3494:	460b      	mov	r3, r1
    3496:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    3498:	429d      	cmp	r5, r3
    349a:	d125      	bne.n	34e8 <bypass_cb+0x68>
	tail = recv[len - 1];
    349c:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    349e:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    34a0:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    34a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    34a6:	2b09      	cmp	r3, #9
    34a8:	4c34      	ldr	r4, [pc, #208]	; (357c <bypass_cb+0xfc>)
    34aa:	d904      	bls.n	34b6 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    34ac:	f022 0320 	bic.w	r3, r2, #32
    34b0:	3b41      	subs	r3, #65	; 0x41
    34b2:	2b05      	cmp	r3, #5
    34b4:	d804      	bhi.n	34c0 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    34b6:	6823      	ldr	r3, [r4, #0]
    34b8:	4931      	ldr	r1, [pc, #196]	; (3580 <bypass_cb+0x100>)
    34ba:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    34bc:	3301      	adds	r3, #1
    34be:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    34c0:	6823      	ldr	r3, [r4, #0]
    34c2:	2b02      	cmp	r3, #2
    34c4:	d134      	bne.n	3530 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    34c6:	2210      	movs	r2, #16
    34c8:	482d      	ldr	r0, [pc, #180]	; (3580 <bypass_cb+0x100>)
    34ca:	2100      	movs	r1, #0
    34cc:	f00b fcc1 	bl	ee52 <strtoul>
		*bytes = byte;
    34d0:	4a2c      	ldr	r2, [pc, #176]	; (3584 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    34d2:	6813      	ldr	r3, [r2, #0]
    34d4:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    34d8:	6013      	str	r3, [r2, #0]
		sum++;
    34da:	4a2b      	ldr	r2, [pc, #172]	; (3588 <bypass_cb+0x108>)
    34dc:	6813      	ldr	r3, [r2, #0]
    34de:	3301      	adds	r3, #1
    34e0:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    34e2:	2300      	movs	r3, #0
    34e4:	6023      	str	r3, [r4, #0]
    34e6:	e023      	b.n	3530 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    34e8:	f813 6b01 	ldrb.w	r6, [r3], #1
    34ec:	2e18      	cmp	r6, #24
    34ee:	d1d3      	bne.n	3498 <bypass_cb+0x18>
    34f0:	781e      	ldrb	r6, [r3, #0]
    34f2:	2e11      	cmp	r6, #17
    34f4:	d1d0      	bne.n	3498 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    34f6:	4d24      	ldr	r5, [pc, #144]	; (3588 <bypass_cb+0x108>)
    34f8:	4a24      	ldr	r2, [pc, #144]	; (358c <bypass_cb+0x10c>)
    34fa:	682b      	ldr	r3, [r5, #0]
    34fc:	2108      	movs	r1, #8
    34fe:	4620      	mov	r0, r4
    3500:	f00a fbd6 	bl	dcb0 <shell_fprintf>
		set_bypass(sh, NULL);
    3504:	4620      	mov	r0, r4
    3506:	2100      	movs	r1, #0
    3508:	f7ff ff96 	bl	3438 <set_bypass.isra.0>
		if (!littleendian) {
    350c:	4b20      	ldr	r3, [pc, #128]	; (3590 <bypass_cb+0x110>)
    350e:	7818      	ldrb	r0, [r3, #0]
    3510:	b970      	cbnz	r0, 3530 <bypass_cb+0xb0>
    3512:	4a20      	ldr	r2, [pc, #128]	; (3594 <bypass_cb+0x114>)
    3514:	682b      	ldr	r3, [r5, #0]
    3516:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    3518:	2b04      	cmp	r3, #4
    351a:	dc0a      	bgt.n	3532 <bypass_cb+0xb2>
    351c:	b108      	cbz	r0, 3522 <bypass_cb+0xa2>
    351e:	6011      	str	r1, [r2, #0]
    3520:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    3522:	f013 0103 	ands.w	r1, r3, #3
    3526:	d10b      	bne.n	3540 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    3528:	6812      	ldr	r2, [r2, #0]
    352a:	6813      	ldr	r3, [r2, #0]
    352c:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    352e:	6013      	str	r3, [r2, #0]
}
    3530:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    3532:	6808      	ldr	r0, [r1, #0]
    3534:	ba00      	rev	r0, r0
    3536:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    353a:	3b04      	subs	r3, #4
				data++;
    353c:	2001      	movs	r0, #1
    353e:	e7eb      	b.n	3518 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    3540:	425b      	negs	r3, r3
    3542:	f003 0303 	and.w	r3, r3, #3
    3546:	bf58      	it	pl
    3548:	4259      	negpl	r1, r3
    354a:	2902      	cmp	r1, #2
    354c:	d104      	bne.n	3558 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    354e:	6812      	ldr	r2, [r2, #0]
    3550:	8813      	ldrh	r3, [r2, #0]
    3552:	ba5b      	rev16	r3, r3
    3554:	b29b      	uxth	r3, r3
    3556:	e7ea      	b.n	352e <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    3558:	2903      	cmp	r1, #3
    355a:	d1e9      	bne.n	3530 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    355c:	6810      	ldr	r0, [r2, #0]
    355e:	6802      	ldr	r2, [r0, #0]
    3560:	0411      	lsls	r1, r2, #16
    3562:	f3c2 4307 	ubfx	r3, r2, #16, #8
    3566:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    356a:	430b      	orrs	r3, r1
    356c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    3570:	4313      	orrs	r3, r2
    3572:	6003      	str	r3, [r0, #0]
    3574:	e7dc      	b.n	3530 <bypass_cb+0xb0>
    3576:	bf00      	nop
    3578:	20002196 	.word	0x20002196
    357c:	2000101c 	.word	0x2000101c
    3580:	20002192 	.word	0x20002192
    3584:	20001018 	.word	0x20001018
    3588:	20001024 	.word	0x20001024
    358c:	000117fa 	.word	0x000117fa
    3590:	20002195 	.word	0x20002195
    3594:	20001020 	.word	0x20001020

00003598 <cmd_load>:
{
    3598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    359c:	460d      	mov	r5, r1
	chunk_element = 0;
    359e:	492d      	ldr	r1, [pc, #180]	; (3654 <cmd_load+0xbc>)
	littleendian = false;
    35a0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3658 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    35a4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 365c <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    35a8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 3660 <cmd_load+0xc8>
	littleendian = false;
    35ac:	2300      	movs	r3, #0
	chunk_element = 0;
    35ae:	600b      	str	r3, [r1, #0]
	sum = 0;
    35b0:	492c      	ldr	r1, [pc, #176]	; (3664 <cmd_load+0xcc>)
	littleendian = false;
    35b2:	f888 3000 	strb.w	r3, [r8]
{
    35b6:	4606      	mov	r6, r0
	sum = 0;
    35b8:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    35ba:	4614      	mov	r4, r2
    35bc:	2d01      	cmp	r5, #1
    35be:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    35c0:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    35c4:	d921      	bls.n	360a <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    35c6:	4618      	mov	r0, r3
    35c8:	2202      	movs	r2, #2
    35ca:	4649      	mov	r1, r9
    35cc:	9301      	str	r3, [sp, #4]
    35ce:	f00b fd1f 	bl	f010 <strncmp>
    35d2:	9b01      	ldr	r3, [sp, #4]
    35d4:	b988      	cbnz	r0, 35fa <cmd_load+0x62>
    35d6:	6822      	ldr	r2, [r4, #0]
    35d8:	7892      	ldrb	r2, [r2, #2]
    35da:	3a00      	subs	r2, #0
    35dc:	bf18      	it	ne
    35de:	2201      	movne	r2, #1
    35e0:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    35e4:	4920      	ldr	r1, [pc, #128]	; (3668 <cmd_load+0xd0>)
    35e6:	2202      	movs	r2, #2
    35e8:	4650      	mov	r0, sl
    35ea:	f00b fd11 	bl	f010 <strncmp>
    35ee:	b930      	cbnz	r0, 35fe <cmd_load+0x66>
			littleendian = true;
    35f0:	2301      	movs	r3, #1
    35f2:	f888 3000 	strb.w	r3, [r8]
		argc--;
    35f6:	3d01      	subs	r5, #1
    35f8:	e7e0      	b.n	35bc <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    35fa:	2200      	movs	r2, #0
    35fc:	e7f0      	b.n	35e0 <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    35fe:	4649      	mov	r1, r9
    3600:	4650      	mov	r0, sl
    3602:	f00b fcf9 	bl	eff8 <strcmp>
    3606:	b9b0      	cbnz	r0, 3636 <cmd_load+0x9e>
			argv++;
    3608:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    360a:	2200      	movs	r2, #0
    360c:	4611      	mov	r1, r2
    360e:	6878      	ldr	r0, [r7, #4]
    3610:	f00b fbab 	bl	ed6a <strtol>
    3614:	4b15      	ldr	r3, [pc, #84]	; (366c <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    3616:	2200      	movs	r2, #0
    3618:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    361a:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    361c:	6878      	ldr	r0, [r7, #4]
    361e:	f00b fba4 	bl	ed6a <strtol>
    3622:	4b13      	ldr	r3, [pc, #76]	; (3670 <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    3624:	4913      	ldr	r1, [pc, #76]	; (3674 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    3626:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    3628:	4630      	mov	r0, r6
    362a:	f7ff ff05 	bl	3438 <set_bypass.isra.0>
}
    362e:	2000      	movs	r0, #0
    3630:	b003      	add	sp, #12
    3632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    3636:	f89a 2000 	ldrb.w	r2, [sl]
    363a:	2a2d      	cmp	r2, #45	; 0x2d
    363c:	d1e5      	bne.n	360a <cmd_load+0x72>
    363e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3642:	2a00      	cmp	r2, #0
    3644:	d0e1      	beq.n	360a <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    3646:	4653      	mov	r3, sl
    3648:	465a      	mov	r2, fp
    364a:	2108      	movs	r1, #8
    364c:	4630      	mov	r0, r6
    364e:	f00a fb2f 	bl	dcb0 <shell_fprintf>
    3652:	e7d0      	b.n	35f6 <cmd_load+0x5e>
    3654:	2000101c 	.word	0x2000101c
    3658:	20002195 	.word	0x20002195
    365c:	00011814 	.word	0x00011814
    3660:	0001181a 	.word	0x0001181a
    3664:	20001024 	.word	0x20001024
    3668:	00011817 	.word	0x00011817
    366c:	20001018 	.word	0x20001018
    3670:	20001020 	.word	0x20001020
    3674:	00003481 	.word	0x00003481

00003678 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    3678:	b507      	push	{r0, r1, r2, lr}
    367a:	480a      	ldr	r0, [pc, #40]	; (36a4 <enable_shell_uart+0x2c>)
    367c:	f00c f999 	bl	f9b2 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    3680:	b160      	cbz	r0, 369c <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    3682:	4a09      	ldr	r2, [pc, #36]	; (36a8 <enable_shell_uart+0x30>)
    3684:	4907      	ldr	r1, [pc, #28]	; (36a4 <enable_shell_uart+0x2c>)
    3686:	6812      	ldr	r2, [r2, #0]
    3688:	4808      	ldr	r0, [pc, #32]	; (36ac <enable_shell_uart+0x34>)
    368a:	2304      	movs	r3, #4
    368c:	9300      	str	r3, [sp, #0]
    368e:	2301      	movs	r3, #1
    3690:	f000 fe0a 	bl	42a8 <shell_init>

	return 0;
    3694:	2000      	movs	r0, #0
}
    3696:	b003      	add	sp, #12
    3698:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    369c:	f06f 0012 	mvn.w	r0, #18
    36a0:	e7f9      	b.n	3696 <enable_shell_uart+0x1e>
    36a2:	bf00      	nop
    36a4:	00010428 	.word	0x00010428
    36a8:	00010a7c 	.word	0x00010a7c
    36ac:	00010658 	.word	0x00010658

000036b0 <init>:
{
    36b0:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    36b2:	6846      	ldr	r6, [r0, #4]
{
    36b4:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    36b6:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    36b8:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    36ba:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    36bc:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    36be:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    36c2:	2208      	movs	r2, #8
	buf->tail = 0;
    36c4:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    36c8:	4629      	mov	r1, r5
    36ca:	4410      	add	r0, r2
    36cc:	f00b fce5 	bl	f09a <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    36d0:	68f0      	ldr	r0, [r6, #12]
    36d2:	2208      	movs	r2, #8
	buf->tail = 0;
    36d4:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    36d8:	4629      	mov	r1, r5
    36da:	4410      	add	r0, r2
    36dc:	f00b fcdd 	bl	f09a <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    36e0:	6833      	ldr	r3, [r6, #0]
    36e2:	60dd      	str	r5, [r3, #12]
	const struct uart_driver_api *api =
    36e4:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    36e6:	b12b      	cbz	r3, 36f4 <init+0x44>
    36e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    36ea:	b11b      	cbz	r3, 36f4 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    36ec:	4905      	ldr	r1, [pc, #20]	; (3704 <init+0x54>)
    36ee:	4632      	mov	r2, r6
    36f0:	4620      	mov	r0, r4
    36f2:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    36f4:	68a3      	ldr	r3, [r4, #8]
    36f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36f8:	b10b      	cbz	r3, 36fe <init+0x4e>
		api->irq_rx_enable(dev);
    36fa:	4620      	mov	r0, r4
    36fc:	4798      	blx	r3
}
    36fe:	2000      	movs	r0, #0
    3700:	bd70      	pop	{r4, r5, r6, pc}
    3702:	bf00      	nop
    3704:	00003709 	.word	0x00003709

00003708 <uart_callback>:
{
    3708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    370c:	4604      	mov	r4, r0
    370e:	b088      	sub	sp, #32
    3710:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    3712:	6883      	ldr	r3, [r0, #8]
    3714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3716:	b103      	cbz	r3, 371a <uart_callback+0x12>
	return api->irq_update(dev);
    3718:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    371a:	68a3      	ldr	r3, [r4, #8]
    371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    371e:	bb4b      	cbnz	r3, 3774 <uart_callback+0x6c>
			LOG_WRN("RX ring buffer full.");
    3720:	f8df 911c 	ldr.w	r9, [pc, #284]	; 3840 <uart_callback+0x138>
    3724:	f8df a11c 	ldr.w	sl, [pc, #284]	; 3844 <uart_callback+0x13c>
{
    3728:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    372c:	68f0      	ldr	r0, [r6, #12]
    372e:	4669      	mov	r1, sp
    3730:	6902      	ldr	r2, [r0, #16]
    3732:	f009 fc79 	bl	d028 <ring_buf_put_claim>
		if (len > 0) {
    3736:	4607      	mov	r7, r0
    3738:	2800      	cmp	r0, #0
    373a:	d043      	beq.n	37c4 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
    373c:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    373e:	9900      	ldr	r1, [sp, #0]
    3740:	699b      	ldr	r3, [r3, #24]
    3742:	2b00      	cmp	r3, #0
    3744:	d03b      	beq.n	37be <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
    3746:	4602      	mov	r2, r0
    3748:	4620      	mov	r0, r4
    374a:	4798      	blx	r3
				new_data = true;
    374c:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    374e:	4629      	mov	r1, r5
    3750:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    3752:	bf18      	it	ne
    3754:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    3758:	f009 fc93 	bl	d082 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    375c:	b10d      	cbz	r5, 3762 <uart_callback+0x5a>
    375e:	42af      	cmp	r7, r5
    3760:	d0e4      	beq.n	372c <uart_callback+0x24>
	if (new_data) {
    3762:	f1b8 0f00 	cmp.w	r8, #0
    3766:	d009      	beq.n	377c <uart_callback+0x74>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    3768:	6833      	ldr	r3, [r6, #0]
    376a:	2000      	movs	r0, #0
    376c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    3770:	4790      	blx	r2
}
    3772:	e003      	b.n	377c <uart_callback+0x74>
	return api->irq_rx_ready(dev);
    3774:	4620      	mov	r0, r4
    3776:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    3778:	2800      	cmp	r0, #0
    377a:	d1d1      	bne.n	3720 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    377c:	68a3      	ldr	r3, [r4, #8]
    377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3780:	2b00      	cmp	r3, #0
    3782:	d13c      	bne.n	37fe <uart_callback+0xf6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    3784:	68b0      	ldr	r0, [r6, #8]
    3786:	a901      	add	r1, sp, #4
    3788:	6902      	ldr	r2, [r0, #16]
    378a:	f009 fcb5 	bl	d0f8 <ring_buf_get_claim>
	if (len) {
    378e:	4605      	mov	r5, r0
    3790:	2800      	cmp	r0, #0
    3792:	d04f      	beq.n	3834 <uart_callback+0x12c>
	if (api->line_ctrl_get == NULL) {
    3794:	68a3      	ldr	r3, [r4, #8]
    3796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3798:	2b00      	cmp	r3, #0
    379a:	d037      	beq.n	380c <uart_callback+0x104>
	return api->line_ctrl_get(dev, ctrl, val);
    379c:	aa02      	add	r2, sp, #8
    379e:	2104      	movs	r1, #4
    37a0:	4620      	mov	r0, r4
    37a2:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    37a4:	f110 0f58 	cmn.w	r0, #88	; 0x58
    37a8:	d030      	beq.n	380c <uart_callback+0x104>
    37aa:	3086      	adds	r0, #134	; 0x86
    37ac:	d02e      	beq.n	380c <uart_callback+0x104>
			if (dtr) {
    37ae:	9b02      	ldr	r3, [sp, #8]
    37b0:	bb63      	cbnz	r3, 380c <uart_callback+0x104>
	return z_impl_k_sleep(timeout);
    37b2:	2100      	movs	r1, #0
    37b4:	f640 40cd 	movw	r0, #3277	; 0xccd
    37b8:	f008 fd16 	bl	c1e8 <z_impl_k_sleep>
		while (true) {
    37bc:	e7ea      	b.n	3794 <uart_callback+0x8c>
		return -ENOSYS;
    37be:	f06f 0057 	mvn.w	r0, #87	; 0x57
    37c2:	e7c3      	b.n	374c <uart_callback+0x44>
			LOG_WRN("RX ring buffer full.");
    37c4:	f8d9 3000 	ldr.w	r3, [r9]
    37c8:	f013 0f06 	tst.w	r3, #6
    37cc:	d00b      	beq.n	37e6 <uart_callback+0xde>
    37ce:	2302      	movs	r3, #2
    37d0:	f8cd a018 	str.w	sl, [sp, #24]
    37d4:	9301      	str	r3, [sp, #4]
    37d6:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    37d8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    37dc:	4603      	mov	r3, r0
    37de:	aa05      	add	r2, sp, #20
    37e0:	4648      	mov	r0, r9
    37e2:	f00a f884 	bl	d8ee <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    37e6:	68a3      	ldr	r3, [r4, #8]
    37e8:	699b      	ldr	r3, [r3, #24]
    37ea:	b12b      	cbz	r3, 37f8 <uart_callback+0xf0>
	return api->fifo_read(dev, rx_data, size);
    37ec:	2201      	movs	r2, #1
    37ee:	a902      	add	r1, sp, #8
    37f0:	4620      	mov	r0, r4
    37f2:	4798      	blx	r3
    37f4:	4605      	mov	r5, r0
    37f6:	e7b1      	b.n	375c <uart_callback+0x54>
		return -ENOSYS;
    37f8:	f06f 0557 	mvn.w	r5, #87	; 0x57
    37fc:	e7ae      	b.n	375c <uart_callback+0x54>
	return api->irq_tx_ready(dev);
    37fe:	4620      	mov	r0, r4
    3800:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    3802:	2800      	cmp	r0, #0
    3804:	d1be      	bne.n	3784 <uart_callback+0x7c>
}
    3806:	b008      	add	sp, #32
    3808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (api->fifo_fill == NULL) {
    380c:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    380e:	9901      	ldr	r1, [sp, #4]
    3810:	695b      	ldr	r3, [r3, #20]
    3812:	b163      	cbz	r3, 382e <uart_callback+0x126>
	return api->fifo_fill(dev, tx_data, size);
    3814:	462a      	mov	r2, r5
    3816:	4620      	mov	r0, r4
    3818:	4798      	blx	r3
    381a:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    381c:	68b0      	ldr	r0, [r6, #8]
    381e:	f009 fc96 	bl	d14e <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    3822:	6833      	ldr	r3, [r6, #0]
    3824:	2001      	movs	r0, #1
    3826:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    382a:	4790      	blx	r2
}
    382c:	e7eb      	b.n	3806 <uart_callback+0xfe>
		return -ENOSYS;
    382e:	f06f 0157 	mvn.w	r1, #87	; 0x57
    3832:	e7f3      	b.n	381c <uart_callback+0x114>
		uart_irq_tx_disable(dev);
    3834:	4620      	mov	r0, r4
    3836:	f00a f8e8 	bl	da0a <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    383a:	6833      	ldr	r3, [r6, #0]
    383c:	60dd      	str	r5, [r3, #12]
    383e:	e7f0      	b.n	3822 <uart_callback+0x11a>
    3840:	2000023c 	.word	0x2000023c
    3844:	000118bc 	.word	0x000118bc

00003848 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    3848:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    384a:	6881      	ldr	r1, [r0, #8]
{
    384c:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    384e:	3108      	adds	r1, #8
    3850:	f001 f852 	bl	48f8 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    3854:	68a1      	ldr	r1, [r4, #8]
    3856:	4a03      	ldr	r2, [pc, #12]	; (3864 <shell_internal_help_print+0x1c>)
    3858:	4620      	mov	r0, r4
    385a:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    3860:	f000 bff2 	b.w	4848 <z_shell_help_subcmd_print>
    3864:	00011901 	.word	0x00011901

00003868 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3868:	4901      	ldr	r1, [pc, #4]	; (3870 <z_cursor_next_line_move.isra.0+0x8>)
    386a:	f00a b964 	b.w	db36 <z_shell_raw_fprintf>
    386e:	bf00      	nop
    3870:	00011585 	.word	0x00011585

00003874 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    3874:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3876:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    3878:	6880      	ldr	r0, [r0, #8]
    387a:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    387e:	075a      	lsls	r2, r3, #29
{
    3880:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    3882:	d505      	bpl.n	3890 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    3884:	2100      	movs	r1, #0
    3886:	f00a f997 	bl	dbb8 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    388a:	68e0      	ldr	r0, [r4, #12]
    388c:	f00b f860 	bl	e950 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    3890:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    3892:	68db      	ldr	r3, [r3, #12]
    3894:	b96b      	cbnz	r3, 38b2 <history_handle+0x3e>
		if (up) {
    3896:	2d00      	cmp	r5, #0
    3898:	d037      	beq.n	390a <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    389a:	68a0      	ldr	r0, [r4, #8]
    389c:	3042      	adds	r0, #66	; 0x42
    389e:	f00a f944 	bl	db2a <z_shell_strlen>

			if (cmd_len) {
    38a2:	68a3      	ldr	r3, [r4, #8]
    38a4:	b398      	cbz	r0, 390e <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    38a6:	f103 0142 	add.w	r1, r3, #66	; 0x42
    38aa:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    38ae:	f00b fb69 	bl	ef84 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    38b2:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    38b4:	68e0      	ldr	r0, [r4, #12]
    38b6:	f10d 0306 	add.w	r3, sp, #6
    38ba:	3242      	adds	r2, #66	; 0x42
    38bc:	4629      	mov	r1, r5
    38be:	f00b f84a 	bl	e956 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    38c2:	b958      	cbnz	r0, 38dc <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    38c4:	68a0      	ldr	r0, [r4, #8]
    38c6:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    38ca:	3042      	adds	r0, #66	; 0x42
    38cc:	f00b fb5a 	bl	ef84 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    38d0:	68a0      	ldr	r0, [r4, #8]
    38d2:	3042      	adds	r0, #66	; 0x42
    38d4:	f00a f929 	bl	db2a <z_shell_strlen>
    38d8:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    38dc:	4620      	mov	r0, r4
    38de:	f00a fcc5 	bl	e26c <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    38e2:	68a3      	ldr	r3, [r4, #8]
    38e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    38e8:	069b      	lsls	r3, r3, #26
    38ea:	d503      	bpl.n	38f4 <history_handle+0x80>
    38ec:	4909      	ldr	r1, [pc, #36]	; (3914 <history_handle+0xa0>)
    38ee:	6960      	ldr	r0, [r4, #20]
    38f0:	f00a f921 	bl	db36 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    38f4:	4620      	mov	r0, r4
    38f6:	f000 fe77 	bl	45e8 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    38fa:	68a3      	ldr	r3, [r4, #8]
    38fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3900:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    3902:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    3904:	4620      	mov	r0, r4
    3906:	f00a fc1e 	bl	e146 <z_shell_op_cond_next_line>
}
    390a:	b003      	add	sp, #12
    390c:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    390e:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    3912:	e7ce      	b.n	38b2 <history_handle+0x3e>
    3914:	00010700 	.word	0x00010700

00003918 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    3918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    391c:	2300      	movs	r3, #0
{
    391e:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    3920:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    3924:	6883      	ldr	r3, [r0, #8]
{
    3926:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    3928:	3342      	adds	r3, #66	; 0x42
    392a:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    392c:	f00a fca4 	bl	e278 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    3930:	4620      	mov	r0, r4
    3932:	f00a fbf4 	bl	e11e <z_shell_cursor_in_empty_line>
    3936:	b910      	cbnz	r0, 393e <execute+0x26>
		z_cursor_next_line_move(shell);
    3938:	6960      	ldr	r0, [r4, #20]
    393a:	f7ff ff95 	bl	3868 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    393e:	68a0      	ldr	r0, [r4, #8]
    3940:	2214      	movs	r2, #20
    3942:	2100      	movs	r1, #0
    3944:	3008      	adds	r0, #8
    3946:	f00b fba8 	bl	f09a <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    394a:	4620      	mov	r0, r4
    394c:	f00a fb94 	bl	e078 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    3950:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    3952:	68e0      	ldr	r0, [r4, #12]
    3954:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    3956:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    3958:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    395a:	f00b f833 	bl	e9c4 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    395e:	4620      	mov	r0, r4
    3960:	f00b f8b6 	bl	ead0 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    3964:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    3968:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    396a:	46b2      	mov	sl, r6
    396c:	af11      	add	r7, sp, #68	; 0x44
    396e:	9602      	str	r6, [sp, #8]
    3970:	4635      	mov	r5, r6
    3972:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    3974:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3978:	2a01      	cmp	r2, #1
    397a:	f000 80d6 	beq.w	3b2a <execute+0x212>
    397e:	2b0b      	cmp	r3, #11
    3980:	f240 80ae 	bls.w	3ae0 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    3984:	9b06      	ldr	r3, [sp, #24]
    3986:	2b02      	cmp	r3, #2
    3988:	f040 80ae 	bne.w	3ae8 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    398c:	4b89      	ldr	r3, [pc, #548]	; (3bb4 <execute+0x29c>)
    398e:	4a8a      	ldr	r2, [pc, #552]	; (3bb8 <execute+0x2a0>)
    3990:	2101      	movs	r1, #1
    3992:	e014      	b.n	39be <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    3994:	9a03      	ldr	r2, [sp, #12]
    3996:	2302      	movs	r3, #2
    3998:	4639      	mov	r1, r7
    399a:	a806      	add	r0, sp, #24
    399c:	f00a fa00 	bl	dda0 <z_shell_make_argv>
		if (argc == 0) {
    39a0:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    39a2:	687a      	ldr	r2, [r7, #4]
    39a4:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    39a6:	4603      	mov	r3, r0
		if (argc == 0) {
    39a8:	b929      	cbnz	r1, 39b6 <execute+0x9e>
			return -ENOEXEC;
    39aa:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    39ae:	4628      	mov	r0, r5
    39b0:	b01f      	add	sp, #124	; 0x7c
    39b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    39b6:	2901      	cmp	r1, #1
    39b8:	d105      	bne.n	39c6 <execute+0xae>
    39ba:	b120      	cbz	r0, 39c6 <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    39bc:	4a7f      	ldr	r2, [pc, #508]	; (3bbc <execute+0x2a4>)
    39be:	4620      	mov	r0, r4
    39c0:	f00a fd06 	bl	e3d0 <z_shell_fprintf>
    39c4:	e7f1      	b.n	39aa <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    39c6:	9b05      	ldr	r3, [sp, #20]
    39c8:	b34b      	cbz	r3, 3a1e <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    39ca:	6838      	ldr	r0, [r7, #0]
    39cc:	f000 ffb8 	bl	4940 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    39d0:	b198      	cbz	r0, 39fa <execute+0xe2>
			if (help_entry.help) {
    39d2:	b166      	cbz	r6, 39ee <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    39d4:	68a5      	ldr	r5, [r4, #8]
    39d6:	960d      	str	r6, [sp, #52]	; 0x34
    39d8:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    39da:	ae0c      	add	r6, sp, #48	; 0x30
    39dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    39de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    39e0:	6833      	ldr	r3, [r6, #0]
    39e2:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    39e4:	4620      	mov	r0, r4
    39e6:	f7ff ff2f 	bl	3848 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    39ea:	2501      	movs	r5, #1
    39ec:	e7df      	b.n	39ae <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    39ee:	4a74      	ldr	r2, [pc, #464]	; (3bc0 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    39f0:	2101      	movs	r1, #1
    39f2:	4620      	mov	r0, r4
    39f4:	f00a fcec 	bl	e3d0 <z_shell_fprintf>
		return false;
    39f8:	e7d7      	b.n	39aa <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    39fa:	9b05      	ldr	r3, [sp, #20]
    39fc:	b17b      	cbz	r3, 3a1e <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    39fe:	683a      	ldr	r2, [r7, #0]
    3a00:	4629      	mov	r1, r5
    3a02:	4620      	mov	r0, r4
    3a04:	f001 f900 	bl	4c08 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    3a08:	2802      	cmp	r0, #2
    3a0a:	f000 808e 	beq.w	3b2a <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    3a0e:	2803      	cmp	r0, #3
    3a10:	d005      	beq.n	3a1e <execute+0x106>
				++cmd_lvl;
    3a12:	9b05      	ldr	r3, [sp, #20]
    3a14:	3301      	adds	r3, #1
    3a16:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    3a18:	2301      	movs	r3, #1
    3a1a:	9302      	str	r3, [sp, #8]
				continue;
    3a1c:	e7aa      	b.n	3974 <execute+0x5c>
		if (has_last_handler == false) {
    3a1e:	f1ba 0f00 	cmp.w	sl, #0
    3a22:	d105      	bne.n	3a30 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    3a24:	6839      	ldr	r1, [r7, #0]
    3a26:	aa07      	add	r2, sp, #28
    3a28:	4658      	mov	r0, fp
    3a2a:	f00a faa4 	bl	df76 <z_shell_find_cmd>
    3a2e:	4605      	mov	r5, r0
		argvp++;
    3a30:	3704      	adds	r7, #4
		args_left--;
    3a32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    3a36:	2d00      	cmp	r5, #0
    3a38:	d040      	beq.n	3abc <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    3a3a:	9a02      	ldr	r2, [sp, #8]
    3a3c:	68eb      	ldr	r3, [r5, #12]
    3a3e:	b142      	cbz	r2, 3a52 <execute+0x13a>
    3a40:	b313      	cbz	r3, 3a88 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    3a42:	4620      	mov	r0, r4
    3a44:	f00a fc18 	bl	e278 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    3a48:	4620      	mov	r0, r4
    3a4a:	f00a fb7c 	bl	e146 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    3a4e:	4a5d      	ldr	r2, [pc, #372]	; (3bc4 <execute+0x2ac>)
    3a50:	e7ce      	b.n	39f0 <execute+0xd8>
	if (entry->handler) {
    3a52:	b1cb      	cbz	r3, 3a88 <execute+0x170>
		*active_cmd = *entry;
    3a54:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    3a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    3a5a:	46ae      	mov	lr, r5
    3a5c:	f103 0c08 	add.w	ip, r3, #8
    3a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3a68:	f8de 3000 	ldr.w	r3, [lr]
    3a6c:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    3a70:	68ab      	ldr	r3, [r5, #8]
    3a72:	b94b      	cbnz	r3, 3a88 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    3a74:	7c6b      	ldrb	r3, [r5, #17]
    3a76:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    3a78:	bf01      	itttt	eq
    3a7a:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    3a7e:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    3a82:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    3a86:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    3a88:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3a8c:	f1bc 0f00 	cmp.w	ip, #0
    3a90:	d008      	beq.n	3aa4 <execute+0x18c>
		*help_entry = *entry;
    3a92:	46ae      	mov	lr, r5
    3a94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3a98:	ae0c      	add	r6, sp, #48	; 0x30
    3a9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3a9c:	f8de 3000 	ldr.w	r3, [lr]
    3aa0:	6033      	str	r3, [r6, #0]
    3aa2:	4666      	mov	r6, ip
    3aa4:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    3aa6:	f1b8 0f00 	cmp.w	r8, #0
    3aaa:	d103      	bne.n	3ab4 <execute+0x19c>
    3aac:	9b06      	ldr	r3, [sp, #24]
    3aae:	2b02      	cmp	r3, #2
    3ab0:	f47f af60 	bne.w	3974 <execute+0x5c>
			cmd_lvl++;
    3ab4:	9b05      	ldr	r3, [sp, #20]
    3ab6:	3301      	adds	r3, #1
    3ab8:	9305      	str	r3, [sp, #20]
    3aba:	e75b      	b.n	3974 <execute+0x5c>
			if (cmd_lvl == 0 &&
    3abc:	9b05      	ldr	r3, [sp, #20]
    3abe:	b963      	cbnz	r3, 3ada <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    3ac0:	68a3      	ldr	r3, [r4, #8]
    3ac2:	69db      	ldr	r3, [r3, #28]
    3ac4:	b10b      	cbz	r3, 3aca <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    3ac6:	68db      	ldr	r3, [r3, #12]
    3ac8:	b93b      	cbnz	r3, 3ada <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    3aca:	4b3f      	ldr	r3, [pc, #252]	; (3bc8 <execute+0x2b0>)
    3acc:	9300      	str	r3, [sp, #0]
    3ace:	4a3f      	ldr	r2, [pc, #252]	; (3bcc <execute+0x2b4>)
    3ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3ad2:	2101      	movs	r1, #1
    3ad4:	4620      	mov	r0, r4
    3ad6:	f00a fc7b 	bl	e3d0 <z_shell_fprintf>
			has_last_handler = true;
    3ada:	f04f 0a01 	mov.w	sl, #1
    3ade:	e7e2      	b.n	3aa6 <execute+0x18e>
		&& args_left > 0) {
    3ae0:	f1b8 0f00 	cmp.w	r8, #0
    3ae4:	f47f af56 	bne.w	3994 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    3ae8:	9b02      	ldr	r3, [sp, #8]
    3aea:	b14b      	cbz	r3, 3b00 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    3aec:	4620      	mov	r0, r4
    3aee:	f00b f810 	bl	eb12 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    3af2:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    3af4:	230c      	movs	r3, #12
    3af6:	3242      	adds	r2, #66	; 0x42
    3af8:	a911      	add	r1, sp, #68	; 0x44
    3afa:	a805      	add	r0, sp, #20
    3afc:	f00a f950 	bl	dda0 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    3b00:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    3b02:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    3b04:	ab1e      	add	r3, sp, #120	; 0x78
    3b06:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3b0a:	2200      	movs	r2, #0
    3b0c:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    3b10:	6943      	ldr	r3, [r0, #20]
    3b12:	b973      	cbnz	r3, 3b32 <execute+0x21a>
			if (help_entry->help == NULL) {
    3b14:	2e00      	cmp	r6, #0
    3b16:	f43f af48 	beq.w	39aa <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    3b1a:	68c3      	ldr	r3, [r0, #12]
    3b1c:	42b3      	cmp	r3, r6
    3b1e:	f43f af61 	beq.w	39e4 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    3b22:	960d      	str	r6, [sp, #52]	; 0x34
    3b24:	f100 0508 	add.w	r5, r0, #8
    3b28:	e757      	b.n	39da <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    3b2a:	9b05      	ldr	r3, [sp, #20]
    3b2c:	2b0b      	cmp	r3, #11
    3b2e:	d9db      	bls.n	3ae8 <execute+0x1d0>
    3b30:	e728      	b.n	3984 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    3b32:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    3b34:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    3b38:	b1b3      	cbz	r3, 3b68 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    3b3a:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    3b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3b40:	29ff      	cmp	r1, #255	; 0xff
    3b42:	bf18      	it	ne
    3b44:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    3b46:	429d      	cmp	r5, r3
    3b48:	d302      	bcc.n	3b50 <execute+0x238>
    3b4a:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    3b4c:	429d      	cmp	r5, r3
    3b4e:	d90b      	bls.n	3b68 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    3b50:	6883      	ldr	r3, [r0, #8]
    3b52:	4a1f      	ldr	r2, [pc, #124]	; (3bd0 <execute+0x2b8>)
    3b54:	2101      	movs	r1, #1
    3b56:	4620      	mov	r0, r4
    3b58:	f00a fc3a 	bl	e3d0 <z_shell_fprintf>
			shell_internal_help_print(shell);
    3b5c:	4620      	mov	r0, r4
    3b5e:	f7ff fe73 	bl	3848 <shell_internal_help_print>
		return -EINVAL;
    3b62:	f06f 0515 	mvn.w	r5, #21
    3b66:	e722      	b.n	39ae <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    3b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3b6c:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3b70:	f009 ffa7 	bl	dac2 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    3b74:	68a0      	ldr	r0, [r4, #8]
    3b76:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3b7a:	f00a f836 	bl	dbea <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    3b7e:	68a3      	ldr	r3, [r4, #8]
    3b80:	aa11      	add	r2, sp, #68	; 0x44
    3b82:	4629      	mov	r1, r5
    3b84:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    3b88:	695b      	ldr	r3, [r3, #20]
    3b8a:	4620      	mov	r0, r4
    3b8c:	4798      	blx	r3
    3b8e:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3b90:	68a0      	ldr	r0, [r4, #8]
    3b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b9a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3b9e:	f009 ffd7 	bl	db50 <k_mutex_lock.constprop.0.isra.0>
    3ba2:	68a0      	ldr	r0, [r4, #8]
    3ba4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3ba8:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3bac:	f009 ff98 	bl	dae0 <atomic_and>
	return ret;
    3bb0:	e6fd      	b.n	39ae <execute+0x96>
    3bb2:	bf00      	nop
    3bb4:	00011984 	.word	0x00011984
    3bb8:	000116b0 	.word	0x000116b0
    3bbc:	0001190f 	.word	0x0001190f
    3bc0:	00011923 	.word	0x00011923
    3bc4:	00011941 	.word	0x00011941
    3bc8:	00011970 	.word	0x00011970
    3bcc:	00011c33 	.word	0x00011c33
    3bd0:	000119a8 	.word	0x000119a8

00003bd4 <state_set.constprop.0>:
	shell->ctx->state = state;
    3bd4:	6883      	ldr	r3, [r0, #8]
    3bd6:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    3bd8:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    3bda:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    3bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    3bde:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    3be0:	b9ba      	cbnz	r2, 3c12 <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    3be6:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    3be8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    3bec:	04db      	lsls	r3, r3, #19
    3bee:	d50b      	bpl.n	3c08 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    3bf0:	2103      	movs	r1, #3
    3bf2:	4b08      	ldr	r3, [pc, #32]	; (3c14 <state_set.constprop.0+0x40>)
    3bf4:	4a08      	ldr	r2, [pc, #32]	; (3c18 <state_set.constprop.0+0x44>)
    3bf6:	f00a fbeb 	bl	e3d0 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    3bfa:	68a0      	ldr	r0, [r4, #8]
    3bfc:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    3c00:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3c04:	f009 ff6c 	bl	dae0 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    3c08:	4620      	mov	r0, r4
}
    3c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    3c0e:	f000 bdfd 	b.w	480c <z_shell_print_prompt_and_cmd>
}
    3c12:	bd10      	pop	{r4, pc}
    3c14:	000119c3 	.word	0x000119c3
    3c18:	000116a4 	.word	0x000116a4

00003c1c <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    3c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c20:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    3c22:	6880      	ldr	r0, [r0, #8]
    3c24:	b0ab      	sub	sp, #172	; 0xac
    3c26:	2101      	movs	r1, #1
    3c28:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3c2c:	f009 ff49 	bl	dac2 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    3c30:	68a3      	ldr	r3, [r4, #8]
    3c32:	791b      	ldrb	r3, [r3, #4]
    3c34:	2b02      	cmp	r3, #2
    3c36:	d117      	bne.n	3c68 <shell_process+0x4c>
	size_t count = 0;
    3c38:	2300      	movs	r3, #0
    3c3a:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    3c3c:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    3c3e:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    3c40:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    3c42:	6803      	ldr	r3, [r0, #0]
    3c44:	691d      	ldr	r5, [r3, #16]
    3c46:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    3c48:	b1c6      	cbz	r6, 3c7c <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    3c4a:	2210      	movs	r2, #16
    3c4c:	a91d      	add	r1, sp, #116	; 0x74
    3c4e:	47a8      	blx	r5
			if (count) {
    3c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3c52:	b14a      	cbz	r2, 3c68 <shell_process+0x4c>
				bypass(shell, buf, count);
    3c54:	a91d      	add	r1, sp, #116	; 0x74
    3c56:	4620      	mov	r0, r4
    3c58:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    3c5a:	68a3      	ldr	r3, [r4, #8]
    3c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d1ec      	bne.n	3c3c <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    3c62:	4620      	mov	r0, r4
    3c64:	f7ff ffb6 	bl	3bd4 <state_set.constprop.0>
    3c68:	68a0      	ldr	r0, [r4, #8]
    3c6a:	f06f 0101 	mvn.w	r1, #1
    3c6e:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    3c72:	b02b      	add	sp, #172	; 0xac
    3c74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c78:	f009 bf32 	b.w	dae0 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    3c7c:	2201      	movs	r2, #1
    3c7e:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    3c82:	47a8      	blx	r5
		if (count == 0) {
    3c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3c86:	2b00      	cmp	r3, #0
    3c88:	d0ee      	beq.n	3c68 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    3c8a:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    3c8e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    3c92:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    3c94:	2a00      	cmp	r2, #0
    3c96:	dbd1      	blt.n	3c3c <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    3c98:	7942      	ldrb	r2, [r0, #5]
    3c9a:	2a03      	cmp	r2, #3
    3c9c:	f200 82fd 	bhi.w	429a <CONFIG_USB_DEVICE_PID+0x289>
    3ca0:	e8df f012 	tbh	[pc, r2, lsl #1]
    3ca4:	02750004 	.word	0x02750004
    3ca8:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    3cac:	2b0d      	cmp	r3, #13
    3cae:	d01a      	beq.n	3ce6 <shell_process+0xca>
    3cb0:	2b0a      	cmp	r3, #10
    3cb2:	d018      	beq.n	3ce6 <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    3cb4:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    3cb8:	f36f 02ca 	bfc	r2, #3, #8
    3cbc:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    3cc0:	2b09      	cmp	r3, #9
    3cc2:	d04c      	beq.n	3d5e <shell_process+0x142>
    3cc4:	d832      	bhi.n	3d2c <shell_process+0x110>
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d0b8      	beq.n	3c3c <shell_process+0x20>
    3cca:	2b08      	cmp	r3, #8
    3ccc:	f000 81c4 	beq.w	4058 <CONFIG_USB_DEVICE_PID+0x47>
    3cd0:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    3cd4:	2a5e      	cmp	r2, #94	; 0x5e
    3cd6:	f200 81cb 	bhi.w	4070 <CONFIG_USB_DEVICE_PID+0x5f>
					z_flag_history_exit_set(shell, true);
    3cda:	2101      	movs	r1, #1
    3cdc:	f009 ff6c 	bl	dbb8 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    3ce0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    3ce4:	e0e8      	b.n	3eb8 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    3ce6:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    3cea:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    3cee:	b12a      	cbz	r2, 3cfc <shell_process+0xe0>
    3cf0:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    3cf4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    3cf8:	4293      	cmp	r3, r2
    3cfa:	d1e1      	bne.n	3cc0 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    3cfc:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    3d00:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    3d02:	f363 02ca 	bfi	r2, r3, #3, #8
    3d06:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    3d0a:	b959      	cbnz	r1, 3d24 <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    3d0c:	f009 ff54 	bl	dbb8 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    3d10:	68e0      	ldr	r0, [r4, #12]
    3d12:	f00a fe1d 	bl	e950 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    3d16:	6960      	ldr	r0, [r4, #20]
    3d18:	f7ff fda6 	bl	3868 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    3d1c:	4620      	mov	r0, r4
    3d1e:	f7ff ff59 	bl	3bd4 <state_set.constprop.0>
		break;
    3d22:	e78b      	b.n	3c3c <shell_process+0x20>
					(void)execute(shell);
    3d24:	4620      	mov	r0, r4
    3d26:	f7ff fdf7 	bl	3918 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    3d2a:	e7f7      	b.n	3d1c <shell_process+0x100>
    3d2c:	2b1b      	cmp	r3, #27
    3d2e:	d013      	beq.n	3d58 <shell_process+0x13c>
    3d30:	2b7f      	cmp	r3, #127	; 0x7f
    3d32:	d1cd      	bne.n	3cd0 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    3d34:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    3d38:	079a      	lsls	r2, r3, #30
    3d3a:	f57f af7f 	bpl.w	3c3c <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    3d3e:	2101      	movs	r1, #1
    3d40:	f009 ff3a 	bl	dbb8 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    3d44:	68a3      	ldr	r3, [r4, #8]
    3d46:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    3d4a:	071b      	lsls	r3, r3, #28
    3d4c:	f100 818c 	bmi.w	4068 <CONFIG_USB_DEVICE_PID+0x57>
		z_shell_op_char_delete(shell);
    3d50:	4620      	mov	r0, r4
    3d52:	f00a fb7d 	bl	e450 <z_shell_op_char_delete>
		break;
    3d56:	e771      	b.n	3c3c <shell_process+0x20>
	shell->ctx->receive_state = state;
    3d58:	2301      	movs	r3, #1
    3d5a:	7143      	strb	r3, [r0, #5]
}
    3d5c:	e76e      	b.n	3c3c <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    3d5e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    3d62:	079e      	lsls	r6, r3, #30
    3d64:	f57f af6a 	bpl.w	3c3c <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    3d68:	2101      	movs	r1, #1
    3d6a:	f009 ff25 	bl	dbb8 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    3d6e:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    3d70:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    3d72:	2bff      	cmp	r3, #255	; 0xff
    3d74:	f43f af62 	beq.w	3c3c <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    3d78:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    3d7a:	f100 0142 	add.w	r1, r0, #66	; 0x42
    3d7e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3d82:	f00b f97f 	bl	f084 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    3d86:	68a2      	ldr	r2, [r4, #8]
    3d88:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    3d8a:	4413      	add	r3, r2
    3d8c:	2500      	movs	r5, #0
    3d8e:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    3d92:	a91d      	add	r1, sp, #116	; 0x74
    3d94:	230c      	movs	r3, #12
    3d96:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    3d9a:	a80d      	add	r0, sp, #52	; 0x34
    3d9c:	f00a f800 	bl	dda0 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    3da0:	990d      	ldr	r1, [sp, #52]	; 0x34
    3da2:	290c      	cmp	r1, #12
    3da4:	f63f af4a 	bhi.w	3c3c <shell_process+0x20>
	(*argv)[*argc] = NULL;
    3da8:	ab2a      	add	r3, sp, #168	; 0xa8
    3daa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3dae:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    3db2:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    3db4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    3db6:	4413      	add	r3, r2
    3db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    3dbc:	2b20      	cmp	r3, #32
    3dbe:	f000 826e 	beq.w	429e <CONFIG_USB_DEVICE_PID+0x28d>
    3dc2:	3b09      	subs	r3, #9
    3dc4:	2b04      	cmp	r3, #4
    3dc6:	f240 826a 	bls.w	429e <CONFIG_USB_DEVICE_PID+0x28d>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    3dca:	2901      	cmp	r1, #1
    3dcc:	d84f      	bhi.n	3e6e <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    3dce:	2500      	movs	r5, #0
    3dd0:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    3dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3dd4:	aa2a      	add	r2, sp, #168	; 0xa8
    3dd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    3dda:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    3ddc:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    3de0:	4650      	mov	r0, sl
    3de2:	f009 fea2 	bl	db2a <z_shell_strlen>
	size_t first = 0;
    3de6:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    3de8:	4681      	mov	r9, r0
	*longest = 0U;
    3dea:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    3dec:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    3dee:	aa18      	add	r2, sp, #96	; 0x60
    3df0:	4639      	mov	r1, r7
    3df2:	4628      	mov	r0, r5
    3df4:	f000 fb94 	bl	4520 <z_shell_cmd_get>
    3df8:	4683      	mov	fp, r0
    3dfa:	2800      	cmp	r0, #0
    3dfc:	d144      	bne.n	3e88 <shell_process+0x26c>
	if (cnt == 1) {
    3dfe:	2e01      	cmp	r6, #1
    3e00:	d163      	bne.n	3eca <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    3e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3e04:	aa2a      	add	r2, sp, #168	; 0xa8
    3e06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    3e0a:	f853 0c34 	ldr.w	r0, [r3, #-52]
    3e0e:	f009 fe8c 	bl	db2a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    3e12:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    3e14:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    3e16:	3208      	adds	r2, #8
    3e18:	4641      	mov	r1, r8
    3e1a:	4628      	mov	r0, r5
    3e1c:	f000 fb80 	bl	4520 <z_shell_cmd_get>
    3e20:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    3e22:	6800      	ldr	r0, [r0, #0]
    3e24:	f009 fe81 	bl	db2a <z_shell_strlen>
	if (cmd_len != arg_len) {
    3e28:	4286      	cmp	r6, r0
    3e2a:	d006      	beq.n	3e3a <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    3e2c:	6829      	ldr	r1, [r5, #0]
    3e2e:	1b82      	subs	r2, r0, r6
    3e30:	b292      	uxth	r2, r2
    3e32:	4431      	add	r1, r6
    3e34:	4620      	mov	r0, r4
    3e36:	f00a fb09 	bl	e44c <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    3e3a:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    3e3c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    3e3e:	4403      	add	r3, r0
    3e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    3e44:	2b20      	cmp	r3, #32
    3e46:	d03b      	beq.n	3ec0 <shell_process+0x2a4>
    3e48:	3b09      	subs	r3, #9
    3e4a:	2b04      	cmp	r3, #4
    3e4c:	d938      	bls.n	3ec0 <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    3e4e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    3e52:	07dd      	lsls	r5, r3, #31
    3e54:	d52f      	bpl.n	3eb6 <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    3e56:	2100      	movs	r1, #0
    3e58:	f009 feb8 	bl	dbcc <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    3e5c:	2120      	movs	r1, #32
    3e5e:	4620      	mov	r0, r4
    3e60:	f000 fca0 	bl	47a4 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    3e64:	68a0      	ldr	r0, [r4, #8]
    3e66:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    3e68:	f009 feb0 	bl	dbcc <z_flag_insert_mode_set.isra.0>
				break;
    3e6c:	e6e6      	b.n	3c3c <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    3e6e:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    3e70:	2000      	movs	r0, #0
    3e72:	ab0e      	add	r3, sp, #56	; 0x38
    3e74:	9300      	str	r3, [sp, #0]
    3e76:	9001      	str	r0, [sp, #4]
    3e78:	ab0c      	add	r3, sp, #48	; 0x30
    3e7a:	aa1d      	add	r2, sp, #116	; 0x74
    3e7c:	f00a f89b 	bl	dfb6 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    3e80:	4605      	mov	r5, r0
    3e82:	2800      	cmp	r0, #0
    3e84:	d1a5      	bne.n	3dd2 <shell_process+0x1b6>
    3e86:	e6d9      	b.n	3c3c <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3e88:	f8db 0000 	ldr.w	r0, [fp]
    3e8c:	464a      	mov	r2, r9
    3e8e:	4651      	mov	r1, sl
    3e90:	f00b f8be 	bl	f010 <strncmp>
		if (is_candidate) {
    3e94:	b968      	cbnz	r0, 3eb2 <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    3e96:	f8db 0000 	ldr.w	r0, [fp]
    3e9a:	f00b f89d 	bl	efd8 <strlen>
    3e9e:	9b04      	ldr	r3, [sp, #16]
    3ea0:	4283      	cmp	r3, r0
    3ea2:	bf38      	it	cc
    3ea4:	4603      	movcc	r3, r0
    3ea6:	b29b      	uxth	r3, r3
				*first_idx = idx;
    3ea8:	2e00      	cmp	r6, #0
    3eaa:	bf08      	it	eq
    3eac:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    3eae:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    3eb0:	3601      	adds	r6, #1
		idx++;
    3eb2:	3701      	adds	r7, #1
    3eb4:	e79b      	b.n	3dee <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    3eb6:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    3eb8:	4620      	mov	r0, r4
    3eba:	f000 fc73 	bl	47a4 <z_shell_op_char_insert>
    3ebe:	e6bd      	b.n	3c3c <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    3ec0:	2101      	movs	r1, #1
    3ec2:	4620      	mov	r0, r4
    3ec4:	f00a f972 	bl	e1ac <z_shell_op_cursor_move>
    3ec8:	e6b8      	b.n	3c3c <shell_process+0x20>
	} else if (cnt > 1) {
    3eca:	f67f aeb7 	bls.w	3c3c <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    3ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3ed0:	aa2a      	add	r2, sp, #168	; 0xa8
    3ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ed6:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    3eda:	4650      	mov	r0, sl
    3edc:	f009 fe25 	bl	db2a <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3ee0:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    3ee2:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3ee4:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    3ee8:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 41bc <CONFIG_USB_DEVICE_PID+0x1ab>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3eec:	9605      	str	r6, [sp, #20]
    3eee:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3ef2:	68a2      	ldr	r2, [r4, #8]
    3ef4:	9903      	ldr	r1, [sp, #12]
    3ef6:	3208      	adds	r2, #8
    3ef8:	4628      	mov	r0, r5
    3efa:	f000 fb11 	bl	4520 <z_shell_cmd_get>
		idx++;
    3efe:	9b03      	ldr	r3, [sp, #12]
    3f00:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3f02:	4607      	mov	r7, r0
		idx++;
    3f04:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    3f06:	f1ba 0f00 	cmp.w	sl, #0
    3f0a:	d152      	bne.n	3fb2 <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    3f0c:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    3f0e:	2f00      	cmp	r7, #0
    3f10:	d159      	bne.n	3fc6 <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3f12:	68a2      	ldr	r2, [r4, #8]
    3f14:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    3f16:	9b05      	ldr	r3, [sp, #20]
    3f18:	3b01      	subs	r3, #1
    3f1a:	9305      	str	r3, [sp, #20]
    3f1c:	d1e9      	bne.n	3ef2 <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    3f1e:	6960      	ldr	r0, [r4, #20]
    3f20:	f7ff fca2 	bl	3868 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    3f24:	4620      	mov	r0, r4
    3f26:	f000 fc71 	bl	480c <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    3f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f2c:	aa2a      	add	r2, sp, #168	; 0xa8
    3f2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    3f32:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    3f36:	f853 0c34 	ldr.w	r0, [r3, #-52]
    3f3a:	f009 fdf6 	bl	db2a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3f3e:	4641      	mov	r1, r8
    3f40:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    3f42:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3f44:	4628      	mov	r0, r5
    3f46:	f000 faeb 	bl	4520 <z_shell_cmd_get>
    3f4a:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    3f4c:	68a0      	ldr	r0, [r4, #8]
    3f4e:	f8d8 1000 	ldr.w	r1, [r8]
    3f52:	22ff      	movs	r2, #255	; 0xff
    3f54:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3f58:	f00b f81e 	bl	ef98 <strncpy>
	*str = match->syntax;
    3f5c:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    3f60:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3f64:	aa18      	add	r2, sp, #96	; 0x60
    3f66:	4649      	mov	r1, r9
    3f68:	4628      	mov	r0, r5
    3f6a:	f109 0b01 	add.w	fp, r9, #1
    3f6e:	f000 fad7 	bl	4520 <z_shell_cmd_get>
		if (match2 == NULL) {
    3f72:	2800      	cmp	r0, #0
    3f74:	d063      	beq.n	403e <CONFIG_USB_DEVICE_PID+0x2d>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    3f76:	68a3      	ldr	r3, [r4, #8]
    3f78:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3f7a:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    3f7e:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3f80:	f813 cb01 	ldrb.w	ip, [r3], #1
    3f84:	5c81      	ldrb	r1, [r0, r2]
    3f86:	4561      	cmp	r1, ip
    3f88:	d105      	bne.n	3f96 <shell_process+0x37a>
    3f8a:	b121      	cbz	r1, 3f96 <shell_process+0x37a>
		common++;
    3f8c:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3f92:	428a      	cmp	r2, r1
    3f94:	d1f4      	bne.n	3f80 <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    3f96:	b10f      	cbz	r7, 3f9c <shell_process+0x380>
    3f98:	42ba      	cmp	r2, r7
    3f9a:	db08      	blt.n	3fae <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    3f9c:	4542      	cmp	r2, r8
			--cnt;
    3f9e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    3fa2:	bfa8      	it	ge
    3fa4:	4642      	movge	r2, r8
	while (cnt > 1) {
    3fa6:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    3fa8:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    3fac:	d047      	beq.n	403e <CONFIG_USB_DEVICE_PID+0x2d>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3fae:	46d9      	mov	r9, fp
    3fb0:	e7d8      	b.n	3f64 <shell_process+0x348>
		if (str && match->syntax &&
    3fb2:	6800      	ldr	r0, [r0, #0]
    3fb4:	2800      	cmp	r0, #0
    3fb6:	d0a9      	beq.n	3f0c <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3fb8:	9a06      	ldr	r2, [sp, #24]
    3fba:	4651      	mov	r1, sl
    3fbc:	f00b f828 	bl	f010 <strncmp>
		if (str && match->syntax &&
    3fc0:	2800      	cmp	r0, #0
    3fc2:	d0a3      	beq.n	3f0c <shell_process+0x2f0>
    3fc4:	e795      	b.n	3ef2 <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    3fc6:	4658      	mov	r0, fp
    3fc8:	f009 fdaf 	bl	db2a <z_shell_strlen>
    3fcc:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3fce:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    3fd0:	18c2      	adds	r2, r0, r3
    3fd2:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3fd4:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    3fd6:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    3fd8:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3fda:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    3fdc:	f009 fda5 	bl	db2a <z_shell_strlen>
    3fe0:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    3fe2:	4638      	mov	r0, r7
    3fe4:	f009 fda1 	bl	db2a <z_shell_strlen>
    3fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    3fea:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    3fee:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3ff2:	68a0      	ldr	r0, [r4, #8]
    3ff4:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    3ff8:	1a59      	subs	r1, r3, r1
    3ffa:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3ffe:	b292      	uxth	r2, r2
    4000:	fbbc f1f2 	udiv	r1, ip, r2
    4004:	fb02 c211 	mls	r2, r2, r1, ip
    4008:	f10c 0e01 	add.w	lr, ip, #1
    400c:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    400e:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    4012:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    4016:	b95a      	cbnz	r2, 4030 <CONFIG_USB_DEVICE_PID+0x1f>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    4018:	4a69      	ldr	r2, [pc, #420]	; (41c0 <CONFIG_USB_DEVICE_PID+0x1af>)
    401a:	9700      	str	r7, [sp, #0]
    401c:	465b      	mov	r3, fp
    401e:	2106      	movs	r1, #6
    4020:	4620      	mov	r0, r4
    4022:	f00a f9d5 	bl	e3d0 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    4026:	4649      	mov	r1, r9
    4028:	4620      	mov	r0, r4
    402a:	f000 fac7 	bl	45bc <z_shell_op_cursor_horiz_move>
    402e:	e772      	b.n	3f16 <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    4030:	4a64      	ldr	r2, [pc, #400]	; (41c4 <CONFIG_USB_DEVICE_PID+0x1b3>)
    4032:	463b      	mov	r3, r7
    4034:	2106      	movs	r1, #6
    4036:	4620      	mov	r0, r4
    4038:	f00a f9ca 	bl	e3d0 <z_shell_fprintf>
    403c:	e7f3      	b.n	4026 <CONFIG_USB_DEVICE_PID+0x15>
	if (common) {
    403e:	f1b8 0f00 	cmp.w	r8, #0
    4042:	f43f adfb 	beq.w	3c3c <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    4046:	eba8 0207 	sub.w	r2, r8, r7
    404a:	b292      	uxth	r2, r2
    404c:	eb0a 0107 	add.w	r1, sl, r7
    4050:	4620      	mov	r0, r4
    4052:	f00a f9fb 	bl	e44c <z_shell_op_completion_insert>
    4056:	e5f1      	b.n	3c3c <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    4058:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    405c:	0799      	lsls	r1, r3, #30
    405e:	f57f aded 	bpl.w	3c3c <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    4062:	2101      	movs	r1, #1
    4064:	f009 fda8 	bl	dbb8 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    4068:	4620      	mov	r0, r4
    406a:	f00a fa0c 	bl	e486 <z_shell_op_char_backspace>
    406e:	e5e5      	b.n	3c3c <shell_process+0x20>
    4070:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    4074:	0797      	lsls	r7, r2, #30
    4076:	f57f ade1 	bpl.w	3c3c <shell_process+0x20>
	switch (data) {
    407a:	3b01      	subs	r3, #1
    407c:	2b16      	cmp	r3, #22
    407e:	f63f addd 	bhi.w	3c3c <shell_process+0x20>
    4082:	a201      	add	r2, pc, #4	; (adr r2, 4088 <CONFIG_USB_DEVICE_PID+0x77>)
    4084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4088:	00004271 	.word	0x00004271
    408c:	000040e5 	.word	0x000040e5
    4090:	000040ed 	.word	0x000040ed
    4094:	00003d51 	.word	0x00003d51
    4098:	00004265 	.word	0x00004265
    409c:	0000410b 	.word	0x0000410b
    40a0:	00003c3d 	.word	0x00003c3d
    40a4:	00003c3d 	.word	0x00003c3d
    40a8:	00003c3d 	.word	0x00003c3d
    40ac:	00003c3d 	.word	0x00003c3d
    40b0:	00004113 	.word	0x00004113
    40b4:	0000411b 	.word	0x0000411b
    40b8:	00003c3d 	.word	0x00003c3d
    40bc:	00004145 	.word	0x00004145
    40c0:	00003c3d 	.word	0x00003c3d
    40c4:	0000414f 	.word	0x0000414f
    40c8:	00003c3d 	.word	0x00003c3d
    40cc:	00003c3d 	.word	0x00003c3d
    40d0:	00003c3d 	.word	0x00003c3d
    40d4:	00003c3d 	.word	0x00003c3d
    40d8:	00004153 	.word	0x00004153
    40dc:	00003c3d 	.word	0x00003c3d
    40e0:	0000417f 	.word	0x0000417f
		z_shell_op_left_arrow(shell);
    40e4:	4620      	mov	r0, r4
    40e6:	f00a f8ce 	bl	e286 <z_shell_op_left_arrow>
		break;
    40ea:	e5a7      	b.n	3c3c <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    40ec:	4620      	mov	r0, r4
    40ee:	f00a f8c3 	bl	e278 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    40f2:	4620      	mov	r0, r4
    40f4:	f00a f813 	bl	e11e <z_shell_cursor_in_empty_line>
    40f8:	b910      	cbnz	r0, 4100 <CONFIG_USB_DEVICE_PID+0xef>
			z_cursor_next_line_move(shell);
    40fa:	6960      	ldr	r0, [r4, #20]
    40fc:	f7ff fbb4 	bl	3868 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    4100:	68a0      	ldr	r0, [r4, #8]
    4102:	2101      	movs	r1, #1
    4104:	f009 fd58 	bl	dbb8 <z_flag_history_exit_set.isra.0>
    4108:	e608      	b.n	3d1c <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    410a:	4620      	mov	r0, r4
    410c:	f00a f8c3 	bl	e296 <z_shell_op_right_arrow>
		break;
    4110:	e594      	b.n	3c3c <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    4112:	4620      	mov	r0, r4
    4114:	f00a f8c8 	bl	e2a8 <z_shell_op_delete_from_cursor>
		break;
    4118:	e590      	b.n	3c3c <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    411a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    411e:	069e      	lsls	r6, r3, #26
    4120:	d503      	bpl.n	412a <CONFIG_USB_DEVICE_PID+0x119>
    4122:	4929      	ldr	r1, [pc, #164]	; (41c8 <CONFIG_USB_DEVICE_PID+0x1b7>)
    4124:	6960      	ldr	r0, [r4, #20]
    4126:	f009 fd06 	bl	db36 <z_shell_raw_fprintf>
    412a:	68a3      	ldr	r3, [r4, #8]
    412c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    4130:	069d      	lsls	r5, r3, #26
    4132:	d503      	bpl.n	413c <CONFIG_USB_DEVICE_PID+0x12b>
    4134:	4925      	ldr	r1, [pc, #148]	; (41cc <CONFIG_USB_DEVICE_PID+0x1bb>)
    4136:	6960      	ldr	r0, [r4, #20]
    4138:	f009 fcfd 	bl	db36 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    413c:	4620      	mov	r0, r4
    413e:	f000 fb65 	bl	480c <z_shell_print_prompt_and_cmd>
		break;
    4142:	e57b      	b.n	3c3c <shell_process+0x20>
		history_handle(shell, false);
    4144:	2100      	movs	r1, #0
		history_handle(shell, true);
    4146:	4620      	mov	r0, r4
    4148:	f7ff fb94 	bl	3874 <history_handle>
		break;
    414c:	e576      	b.n	3c3c <shell_process+0x20>
		history_handle(shell, true);
    414e:	2101      	movs	r1, #1
    4150:	e7f9      	b.n	4146 <CONFIG_USB_DEVICE_PID+0x135>
		z_shell_op_cursor_home_move(shell);
    4152:	4620      	mov	r0, r4
    4154:	f00a f88a 	bl	e26c <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    4158:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    415a:	2300      	movs	r3, #0
    415c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    4160:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    4162:	2101      	movs	r1, #1
    4164:	f009 fd28 	bl	dbb8 <z_flag_history_exit_set.isra.0>
    4168:	68a3      	ldr	r3, [r4, #8]
    416a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    416e:	0698      	lsls	r0, r3, #26
    4170:	f57f ad64 	bpl.w	3c3c <shell_process+0x20>
    4174:	4916      	ldr	r1, [pc, #88]	; (41d0 <CONFIG_USB_DEVICE_PID+0x1bf>)
    4176:	6960      	ldr	r0, [r4, #20]
    4178:	f009 fcdd 	bl	db36 <z_shell_raw_fprintf>
    417c:	e55e      	b.n	3c3c <shell_process+0x20>
		z_shell_op_word_remove(shell);
    417e:	4620      	mov	r0, r4
    4180:	f000 fa78 	bl	4674 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    4184:	68a0      	ldr	r0, [r4, #8]
    4186:	2101      	movs	r1, #1
    4188:	f009 fd16 	bl	dbb8 <z_flag_history_exit_set.isra.0>
		break;
    418c:	e556      	b.n	3c3c <shell_process+0x20>
			if (data == '[') {
    418e:	2b5b      	cmp	r3, #91	; 0x5b
    4190:	d101      	bne.n	4196 <CONFIG_USB_DEVICE_PID+0x185>
	shell->ctx->receive_state = state;
    4192:	2302      	movs	r3, #2
    4194:	e5e1      	b.n	3d5a <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    4196:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    419a:	0791      	lsls	r1, r2, #30
    419c:	d506      	bpl.n	41ac <CONFIG_USB_DEVICE_PID+0x19b>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    419e:	2b62      	cmp	r3, #98	; 0x62
    41a0:	d108      	bne.n	41b4 <CONFIG_USB_DEVICE_PID+0x1a3>
		z_shell_op_cursor_word_move(shell, -1);
    41a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    41a6:	4620      	mov	r0, r4
    41a8:	f00a f824 	bl	e1f4 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    41ac:	68a3      	ldr	r3, [r4, #8]
    41ae:	2200      	movs	r2, #0
    41b0:	715a      	strb	r2, [r3, #5]
}
    41b2:	e543      	b.n	3c3c <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    41b4:	2b66      	cmp	r3, #102	; 0x66
    41b6:	d1f9      	bne.n	41ac <CONFIG_USB_DEVICE_PID+0x19b>
		z_shell_op_cursor_word_move(shell, 1);
    41b8:	2101      	movs	r1, #1
    41ba:	e7f4      	b.n	41a6 <CONFIG_USB_DEVICE_PID+0x195>
    41bc:	00011066 	.word	0x00011066
    41c0:	00011a07 	.word	0x00011a07
    41c4:	000116a4 	.word	0x000116a4
    41c8:	00010705 	.word	0x00010705
    41cc:	0001070a 	.word	0x0001070a
    41d0:	00010700 	.word	0x00010700
	shell->ctx->receive_state = state;
    41d4:	2200      	movs	r2, #0
    41d6:	7142      	strb	r2, [r0, #5]
    41d8:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    41dc:	0792      	lsls	r2, r2, #30
    41de:	f57f ad2d 	bpl.w	3c3c <shell_process+0x20>
			switch (data) {
    41e2:	3b31      	subs	r3, #49	; 0x31
    41e4:	2b1b      	cmp	r3, #27
    41e6:	f63f ad29 	bhi.w	3c3c <shell_process+0x20>
    41ea:	a201      	add	r2, pc, #4	; (adr r2, 41f0 <CONFIG_USB_DEVICE_PID+0x1df>)
    41ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41f0:	0000426d 	.word	0x0000426d
    41f4:	00004279 	.word	0x00004279
    41f8:	0000428b 	.word	0x0000428b
    41fc:	00004261 	.word	0x00004261
    4200:	00003c3d 	.word	0x00003c3d
    4204:	00003c3d 	.word	0x00003c3d
    4208:	00003c3d 	.word	0x00003c3d
    420c:	00003c3d 	.word	0x00003c3d
    4210:	00003c3d 	.word	0x00003c3d
    4214:	00003c3d 	.word	0x00003c3d
    4218:	00003c3d 	.word	0x00003c3d
    421c:	00003c3d 	.word	0x00003c3d
    4220:	00003c3d 	.word	0x00003c3d
    4224:	00003c3d 	.word	0x00003c3d
    4228:	00003c3d 	.word	0x00003c3d
    422c:	00003c3d 	.word	0x00003c3d
    4230:	0000414f 	.word	0x0000414f
    4234:	00004145 	.word	0x00004145
    4238:	0000410b 	.word	0x0000410b
    423c:	000040e5 	.word	0x000040e5
    4240:	00003c3d 	.word	0x00003c3d
    4244:	00004265 	.word	0x00004265
    4248:	00003c3d 	.word	0x00003c3d
    424c:	00004271 	.word	0x00004271
    4250:	00003c3d 	.word	0x00003c3d
    4254:	00003c3d 	.word	0x00003c3d
    4258:	00003c3d 	.word	0x00003c3d
    425c:	0000427d 	.word	0x0000427d
	shell->ctx->receive_state = state;
    4260:	2303      	movs	r3, #3
    4262:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    4264:	4620      	mov	r0, r4
    4266:	f00a f807 	bl	e278 <z_shell_op_cursor_end_move>
		break;
    426a:	e4e7      	b.n	3c3c <shell_process+0x20>
	shell->ctx->receive_state = state;
    426c:	2303      	movs	r3, #3
    426e:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    4270:	4620      	mov	r0, r4
    4272:	f009 fffb 	bl	e26c <z_shell_op_cursor_home_move>
		break;
    4276:	e4e1      	b.n	3c3c <shell_process+0x20>
	shell->ctx->receive_state = state;
    4278:	2303      	movs	r3, #3
    427a:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    427c:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    4280:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    4284:	f081 0101 	eor.w	r1, r1, #1
    4288:	e5ee      	b.n	3e68 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    428a:	2303      	movs	r3, #3
    428c:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    428e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    4292:	079b      	lsls	r3, r3, #30
    4294:	f57f acd2 	bpl.w	3c3c <shell_process+0x20>
    4298:	e55a      	b.n	3d50 <shell_process+0x134>
	shell->ctx->receive_state = state;
    429a:	2300      	movs	r3, #0
    429c:	e55d      	b.n	3d5a <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    429e:	2900      	cmp	r1, #0
    42a0:	f43f ad95 	beq.w	3dce <shell_process+0x1b2>
    42a4:	e5e4      	b.n	3e70 <shell_process+0x254>
    42a6:	bf00      	nop

000042a8 <shell_init>:
{
    42a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    42ac:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    42ae:	6880      	ldr	r0, [r0, #8]
{
    42b0:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    42b2:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    42b6:	b089      	sub	sp, #36	; 0x24
    42b8:	4615      	mov	r5, r2
    42ba:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    42bc:	2900      	cmp	r1, #0
    42be:	d161      	bne.n	4384 <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    42c0:	f44f 7244 	mov.w	r2, #784	; 0x310
    42c4:	f00a fee9 	bl	f09a <memset>
	sh->ctx->prompt = sh->default_prompt;
    42c8:	68a3      	ldr	r3, [r4, #8]
    42ca:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    42cc:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    42ce:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    42d0:	f00a fbe4 	bl	ea9c <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    42d4:	68a0      	ldr	r0, [r4, #8]
    42d6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    42da:	f00b fbf8 	bl	face <z_impl_k_mutex_init>
    42de:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    42e2:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    42e6:	68a0      	ldr	r0, [r4, #8]
    42e8:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    42ea:	f00b ffb7 	bl	1025c <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    42ee:	68a0      	ldr	r0, [r4, #8]
    42f0:	2200      	movs	r2, #0
    42f2:	1983      	adds	r3, r0, r6
    42f4:	2101      	movs	r1, #1
    42f6:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    42f8:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    42fa:	f00b ff92 	bl	10222 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    42fe:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    4302:	f109 0914 	add.w	r9, r9, #20
    4306:	d1ee      	bne.n	42e6 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    4308:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    430a:	68a0      	ldr	r0, [r4, #8]
    430c:	2600      	movs	r6, #0
    430e:	2102      	movs	r1, #2
    4310:	601e      	str	r6, [r3, #0]
    4312:	f500 7019 	add.w	r0, r0, #612	; 0x264
    4316:	f009 fbd4 	bl	dac2 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    431a:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    431c:	4a1b      	ldr	r2, [pc, #108]	; (438c <shell_init+0xe4>)
    431e:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    4320:	6818      	ldr	r0, [r3, #0]
    4322:	f009 fc02 	bl	db2a <z_shell_strlen>
    4326:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    4328:	4a19      	ldr	r2, [pc, #100]	; (4390 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    432a:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    432e:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    4330:	f366 0582 	bfi	r5, r6, #2, #1
    4334:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    4338:	6803      	ldr	r3, [r0, #0]
    433a:	4641      	mov	r1, r8
    433c:	681d      	ldr	r5, [r3, #0]
    433e:	4623      	mov	r3, r4
    4340:	47a8      	blx	r5
	if (ret == 0) {
    4342:	4605      	mov	r5, r0
    4344:	b9d0      	cbnz	r0, 437c <shell_init+0xd4>
	shell->ctx->state = state;
    4346:	68a3      	ldr	r3, [r4, #8]
    4348:	2201      	movs	r2, #1
    434a:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    434c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4350:	2200      	movs	r2, #0
    4352:	2300      	movs	r3, #0
    4354:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4358:	230e      	movs	r3, #14
    435a:	9303      	str	r3, [sp, #12]
    435c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    435e:	9504      	str	r5, [sp, #16]
    4360:	e9cd 7301 	strd	r7, r3, [sp, #4]
    4364:	9400      	str	r4, [sp, #0]
    4366:	4b0b      	ldr	r3, [pc, #44]	; (4394 <shell_init+0xec>)
    4368:	f44f 6200 	mov.w	r2, #2048	; 0x800
    436c:	f007 f966 	bl	b63c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    4370:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    4372:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    4374:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    4378:	f007 f8ae 	bl	b4d8 <z_impl_k_thread_name_set>
}
    437c:	4628      	mov	r0, r5
    437e:	b009      	add	sp, #36	; 0x24
    4380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    4384:	f06f 0577 	mvn.w	r5, #119	; 0x77
    4388:	e7f8      	b.n	437c <shell_init+0xd4>
    438a:	bf00      	nop
    438c:	00500018 	.word	0x00500018
    4390:	0000db55 	.word	0x0000db55
    4394:	000043e5 	.word	0x000043e5

00004398 <shell_start>:
{
    4398:	b510      	push	{r4, lr}
    439a:	4604      	mov	r4, r0
	return shell->ctx->state;
    439c:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    439e:	7903      	ldrb	r3, [r0, #4]
    43a0:	2b01      	cmp	r3, #1
    43a2:	d119      	bne.n	43d8 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    43a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43ac:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    43b0:	f009 fbce 	bl	db50 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    43b4:	2108      	movs	r1, #8
    43b6:	4620      	mov	r0, r4
    43b8:	f000 f91e 	bl	45f8 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    43bc:	4908      	ldr	r1, [pc, #32]	; (43e0 <shell_start+0x48>)
    43be:	6960      	ldr	r0, [r4, #20]
    43c0:	f009 fbb9 	bl	db36 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    43c4:	4620      	mov	r0, r4
    43c6:	f7ff fc05 	bl	3bd4 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    43ca:	68a0      	ldr	r0, [r4, #8]
    43cc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    43d0:	f009 fc0b 	bl	dbea <k_mutex_unlock.isra.0>
	return 0;
    43d4:	2000      	movs	r0, #0
}
    43d6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    43d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    43dc:	e7fb      	b.n	43d6 <shell_start+0x3e>
    43de:	bf00      	nop
    43e0:	00011584 	.word	0x00011584

000043e4 <shell_thread>:
{
    43e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43e8:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    43ea:	6840      	ldr	r0, [r0, #4]
    43ec:	6803      	ldr	r3, [r0, #0]
{
    43ee:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    43f0:	689b      	ldr	r3, [r3, #8]
    43f2:	2100      	movs	r1, #0
{
    43f4:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    43f6:	4798      	blx	r3
	if (err != 0) {
    43f8:	2800      	cmp	r0, #0
    43fa:	d14c      	bne.n	4496 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    43fc:	b126      	cbz	r6, 4408 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    43fe:	69e0      	ldr	r0, [r4, #28]
    4400:	462a      	mov	r2, r5
    4402:	4621      	mov	r1, r4
    4404:	f00a f913 	bl	e62e <z_shell_log_backend_enable>
	err = shell_start(shell);
    4408:	4620      	mov	r0, r4
    440a:	f7ff ffc5 	bl	4398 <shell_start>
	if (err != 0) {
    440e:	2800      	cmp	r0, #0
    4410:	d141      	bne.n	4496 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    4412:	f8df 8088 	ldr.w	r8, [pc, #136]	; 449c <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    4416:	4f22      	ldr	r7, [pc, #136]	; (44a0 <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    4418:	4e22      	ldr	r6, [pc, #136]	; (44a4 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    441a:	68a0      	ldr	r0, [r4, #8]
    441c:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    4420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4428:	2103      	movs	r1, #3
    442a:	f008 f961 	bl	c6f0 <z_impl_k_poll>
		if (err != 0) {
    442e:	4605      	mov	r5, r0
    4430:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    4432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    443a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    443e:	b175      	cbz	r5, 445e <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    4440:	f009 fb86 	bl	db50 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    4444:	4620      	mov	r0, r4
    4446:	462b      	mov	r3, r5
    4448:	4a17      	ldr	r2, [pc, #92]	; (44a8 <shell_thread+0xc4>)
    444a:	2101      	movs	r1, #1
    444c:	f009 ffc0 	bl	e3d0 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    4450:	68a0      	ldr	r0, [r4, #8]
}
    4452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    4456:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    445a:	f009 bbc6 	b.w	dbea <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    445e:	f009 fb77 	bl	db50 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    4462:	6860      	ldr	r0, [r4, #4]
    4464:	6803      	ldr	r3, [r0, #0]
    4466:	695b      	ldr	r3, [r3, #20]
    4468:	b103      	cbz	r3, 446c <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    446a:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    446c:	4642      	mov	r2, r8
    446e:	4620      	mov	r0, r4
    4470:	2102      	movs	r1, #2
    4472:	f009 fb44 	bl	dafe <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    4476:	463a      	mov	r2, r7
    4478:	4620      	mov	r0, r4
    447a:	2100      	movs	r1, #0
    447c:	f009 fb3f 	bl	dafe <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    4480:	4620      	mov	r0, r4
    4482:	4632      	mov	r2, r6
    4484:	2101      	movs	r1, #1
    4486:	f009 fb3a 	bl	dafe <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    448a:	68a0      	ldr	r0, [r4, #8]
    448c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    4490:	f009 fbab 	bl	dbea <k_mutex_unlock.isra.0>
    4494:	e7c1      	b.n	441a <shell_thread+0x36>
}
    4496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    449a:	bf00      	nop
    449c:	0000db69 	.word	0x0000db69
    44a0:	00003c1d 	.word	0x00003c1d
    44a4:	0000dbef 	.word	0x0000dbef
    44a8:	00011a0d 	.word	0x00011a0d

000044ac <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    44ac:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    44ae:	4a0d      	ldr	r2, [pc, #52]	; (44e4 <cmd_help+0x38>)
{
    44b0:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    44b2:	2108      	movs	r1, #8
    44b4:	f009 fbfc 	bl	dcb0 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    44b8:	4620      	mov	r0, r4
    44ba:	4a0b      	ldr	r2, [pc, #44]	; (44e8 <cmd_help+0x3c>)
    44bc:	2108      	movs	r1, #8
    44be:	f009 fbf7 	bl	dcb0 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    44c2:	4620      	mov	r0, r4
    44c4:	4a09      	ldr	r2, [pc, #36]	; (44ec <cmd_help+0x40>)
    44c6:	2108      	movs	r1, #8
    44c8:	f009 fbf2 	bl	dcb0 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    44cc:	4620      	mov	r0, r4
    44ce:	4a08      	ldr	r2, [pc, #32]	; (44f0 <cmd_help+0x44>)
    44d0:	2108      	movs	r1, #8
    44d2:	f009 fbed 	bl	dcb0 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    44d6:	4620      	mov	r0, r4
    44d8:	4a06      	ldr	r2, [pc, #24]	; (44f4 <cmd_help+0x48>)
    44da:	2100      	movs	r1, #0
    44dc:	f000 f9b4 	bl	4848 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    44e0:	2000      	movs	r0, #0
    44e2:	bd10      	pop	{r4, pc}
    44e4:	00011a24 	.word	0x00011a24
    44e8:	00011a62 	.word	0x00011a62
    44ec:	00011ac1 	.word	0x00011ac1
    44f0:	00011b15 	.word	0x00011b15
    44f4:	00011baf 	.word	0x00011baf

000044f8 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    44f8:	b510      	push	{r4, lr}
    44fa:	4604      	mov	r4, r0
    44fc:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    44fe:	460a      	mov	r2, r1
    4500:	4601      	mov	r1, r0
    4502:	4806      	ldr	r0, [pc, #24]	; (451c <z_shell_fprintf_fmt+0x24>)
    4504:	f7fd fa8e 	bl	1a24 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    4508:	6923      	ldr	r3, [r4, #16]
    450a:	791b      	ldrb	r3, [r3, #4]
    450c:	b123      	cbz	r3, 4518 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    450e:	4620      	mov	r0, r4
	}
}
    4510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    4514:	f009 bbdc 	b.w	dcd0 <z_shell_fprintf_buffer_flush>
}
    4518:	bd10      	pop	{r4, pc}
    451a:	bf00      	nop
    451c:	0000dce9 	.word	0x0000dce9

00004520 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    4520:	b510      	push	{r4, lr}
    4522:	460b      	mov	r3, r1
    4524:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    4526:	b950      	cbnz	r0, 453e <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    4528:	490e      	ldr	r1, [pc, #56]	; (4564 <z_shell_cmd_get+0x44>)
    452a:	4a0f      	ldr	r2, [pc, #60]	; (4568 <z_shell_cmd_get+0x48>)
    452c:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    452e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    4532:	d20f      	bcs.n	4554 <z_shell_cmd_get+0x34>
    4534:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4538:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    453a:	4620      	mov	r0, r4
    453c:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    453e:	6881      	ldr	r1, [r0, #8]
    4540:	b141      	cbz	r1, 4554 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    4542:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    4544:	7809      	ldrb	r1, [r1, #0]
    4546:	b139      	cbz	r1, 4558 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    4548:	4618      	mov	r0, r3
    454a:	4621      	mov	r1, r4
    454c:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    454e:	6823      	ldr	r3, [r4, #0]
    4550:	2b00      	cmp	r3, #0
    4552:	d1f2      	bne.n	453a <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    4554:	2400      	movs	r4, #0
    4556:	e7f0      	b.n	453a <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    4558:	2014      	movs	r0, #20
    455a:	4343      	muls	r3, r0
    455c:	18d4      	adds	r4, r2, r3
    455e:	58d3      	ldr	r3, [r2, r3]
    4560:	e7f6      	b.n	4550 <z_shell_cmd_get+0x30>
    4562:	bf00      	nop
    4564:	00010688 	.word	0x00010688
    4568:	000106e0 	.word	0x000106e0

0000456c <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    456c:	6883      	ldr	r3, [r0, #8]
    456e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    4572:	069b      	lsls	r3, r3, #26
    4574:	d503      	bpl.n	457e <z_clear_eos+0x12>
    4576:	4902      	ldr	r1, [pc, #8]	; (4580 <z_clear_eos+0x14>)
    4578:	6940      	ldr	r0, [r0, #20]
    457a:	f009 bdaf 	b.w	e0dc <z_shell_raw_fprintf>
}
    457e:	4770      	bx	lr
    4580:	00010710 	.word	0x00010710

00004584 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    4584:	4901      	ldr	r1, [pc, #4]	; (458c <z_cursor_next_line_move.isra.0+0x8>)
    4586:	f009 bda9 	b.w	e0dc <z_shell_raw_fprintf>
    458a:	bf00      	nop
    458c:	00011585 	.word	0x00011585

00004590 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    4590:	1e0a      	subs	r2, r1, #0
    4592:	dc0d      	bgt.n	45b0 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    4594:	d00e      	beq.n	45b4 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    4596:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4598:	6881      	ldr	r1, [r0, #8]
    459a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    459e:	0689      	lsls	r1, r1, #26
    45a0:	d508      	bpl.n	45b4 <z_shell_op_cursor_vert_move+0x24>
    45a2:	2a00      	cmp	r2, #0
    45a4:	4904      	ldr	r1, [pc, #16]	; (45b8 <z_shell_op_cursor_vert_move+0x28>)
    45a6:	6940      	ldr	r0, [r0, #20]
    45a8:	bfb8      	it	lt
    45aa:	4252      	neglt	r2, r2
    45ac:	f009 bd96 	b.w	e0dc <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    45b0:	2341      	movs	r3, #65	; 0x41
    45b2:	e7f1      	b.n	4598 <z_shell_op_cursor_vert_move+0x8>
}
    45b4:	4770      	bx	lr
    45b6:	bf00      	nop
    45b8:	00011bde 	.word	0x00011bde

000045bc <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    45bc:	1e0a      	subs	r2, r1, #0
    45be:	dc0d      	bgt.n	45dc <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    45c0:	d00e      	beq.n	45e0 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    45c2:	2344      	movs	r3, #68	; 0x44
    45c4:	6881      	ldr	r1, [r0, #8]
    45c6:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    45ca:	0689      	lsls	r1, r1, #26
    45cc:	d508      	bpl.n	45e0 <z_shell_op_cursor_horiz_move+0x24>
    45ce:	2a00      	cmp	r2, #0
    45d0:	4904      	ldr	r1, [pc, #16]	; (45e4 <z_shell_op_cursor_horiz_move+0x28>)
    45d2:	6940      	ldr	r0, [r0, #20]
    45d4:	bfb8      	it	lt
    45d6:	4252      	neglt	r2, r2
    45d8:	f009 bd80 	b.w	e0dc <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    45dc:	2343      	movs	r3, #67	; 0x43
    45de:	e7f1      	b.n	45c4 <z_shell_op_cursor_horiz_move+0x8>
}
    45e0:	4770      	bx	lr
    45e2:	bf00      	nop
    45e4:	00011bde 	.word	0x00011bde

000045e8 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    45e8:	6882      	ldr	r2, [r0, #8]
    45ea:	4902      	ldr	r1, [pc, #8]	; (45f4 <z_shell_print_cmd+0xc>)
    45ec:	6940      	ldr	r0, [r0, #20]
    45ee:	3242      	adds	r2, #66	; 0x42
    45f0:	f009 bd74 	b.w	e0dc <z_shell_raw_fprintf>
    45f4:	000116a4 	.word	0x000116a4

000045f8 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    45f8:	2908      	cmp	r1, #8
{
    45fa:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    45fc:	d816      	bhi.n	462c <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    45fe:	6883      	ldr	r3, [r0, #8]
    4600:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    4604:	4291      	cmp	r1, r2
    4606:	d011      	beq.n	462c <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    4608:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    460a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    460e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    4612:	d005      	beq.n	4620 <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    4614:	0699      	lsls	r1, r3, #26
    4616:	d509      	bpl.n	462c <z_shell_vt100_color_set+0x34>
    4618:	4905      	ldr	r1, [pc, #20]	; (4630 <z_shell_vt100_color_set+0x38>)
    461a:	6940      	ldr	r0, [r0, #20]
    461c:	f009 bd5e 	b.w	e0dc <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    4620:	069b      	lsls	r3, r3, #26
    4622:	d503      	bpl.n	462c <z_shell_vt100_color_set+0x34>
    4624:	4903      	ldr	r1, [pc, #12]	; (4634 <z_shell_vt100_color_set+0x3c>)
    4626:	6940      	ldr	r0, [r0, #20]
    4628:	f009 bd58 	b.w	e0dc <z_shell_raw_fprintf>
	}
}
    462c:	4770      	bx	lr
    462e:	bf00      	nop
    4630:	00011be5 	.word	0x00011be5
    4634:	00010715 	.word	0x00010715

00004638 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    4638:	b538      	push	{r3, r4, r5, lr}
    463a:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    463c:	7809      	ldrb	r1, [r1, #0]
{
    463e:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    4640:	f7ff ffda 	bl	45f8 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    4644:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    4646:	2a07      	cmp	r2, #7
    4648:	d810      	bhi.n	466c <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    464a:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    464c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    4650:	4291      	cmp	r1, r2
    4652:	d00b      	beq.n	466c <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    4654:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    4658:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    465c:	069b      	lsls	r3, r3, #26
    465e:	d505      	bpl.n	466c <z_shell_vt100_colors_restore+0x34>
    4660:	6960      	ldr	r0, [r4, #20]
    4662:	4903      	ldr	r1, [pc, #12]	; (4670 <z_shell_vt100_colors_restore+0x38>)
}
    4664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    4668:	f009 bd38 	b.w	e0dc <z_shell_raw_fprintf>
}
    466c:	bd38      	pop	{r3, r4, r5, pc}
    466e:	bf00      	nop
    4670:	00011bee 	.word	0x00011bee

00004674 <z_shell_op_word_remove>:
{
    4674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    4676:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    4678:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    467a:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    467c:	2a00      	cmp	r2, #0
    467e:	d04e      	beq.n	471e <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    4680:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    4682:	2800      	cmp	r0, #0
    4684:	d04b      	beq.n	471e <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    4686:	3041      	adds	r0, #65	; 0x41
    4688:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    468a:	f103 0642 	add.w	r6, r3, #66	; 0x42
    468e:	4603      	mov	r3, r0
    4690:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    4692:	42b3      	cmp	r3, r6
    4694:	b2a4      	uxth	r4, r4
    4696:	4619      	mov	r1, r3
    4698:	d30d      	bcc.n	46b6 <z_shell_op_word_remove+0x42>
    469a:	f811 7901 	ldrb.w	r7, [r1], #-1
    469e:	2f20      	cmp	r7, #32
    46a0:	d03b      	beq.n	471a <z_shell_op_word_remove+0xa6>
    46a2:	4619      	mov	r1, r3
    46a4:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    46a6:	7808      	ldrb	r0, [r1, #0]
    46a8:	2820      	cmp	r0, #32
    46aa:	d004      	beq.n	46b6 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    46ac:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    46ae:	429e      	cmp	r6, r3
		++chars_to_delete;
    46b0:	b2a4      	uxth	r4, r4
		--str;
    46b2:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    46b4:	d9f5      	bls.n	46a2 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    46b6:	1c63      	adds	r3, r4, #1
    46b8:	1c4e      	adds	r6, r1, #1
    46ba:	1b12      	subs	r2, r2, r4
    46bc:	4419      	add	r1, r3
    46be:	4630      	mov	r0, r6
    46c0:	f00a fcc8 	bl	f054 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    46c4:	68a9      	ldr	r1, [r5, #8]
    46c6:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    46c8:	1b12      	subs	r2, r2, r4
    46ca:	b292      	uxth	r2, r2
    46cc:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    46ce:	440a      	add	r2, r1
    46d0:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    46d2:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    46d4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    46d8:	b209      	sxth	r1, r1
    46da:	4628      	mov	r0, r5
    46dc:	f009 fd66 	bl	e1ac <z_shell_op_cursor_move>
    46e0:	68ab      	ldr	r3, [r5, #8]
    46e2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    46e6:	069a      	lsls	r2, r3, #26
    46e8:	d503      	bpl.n	46f2 <z_shell_op_word_remove+0x7e>
    46ea:	490d      	ldr	r1, [pc, #52]	; (4720 <z_shell_op_word_remove+0xac>)
    46ec:	6968      	ldr	r0, [r5, #20]
    46ee:	f009 fcf5 	bl	e0dc <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    46f2:	4633      	mov	r3, r6
    46f4:	4a0b      	ldr	r2, [pc, #44]	; (4724 <z_shell_op_word_remove+0xb0>)
    46f6:	2108      	movs	r1, #8
    46f8:	4628      	mov	r0, r5
    46fa:	f009 fe69 	bl	e3d0 <z_shell_fprintf>
	z_clear_eos(shell);
    46fe:	4628      	mov	r0, r5
    4700:	f7ff ff34 	bl	456c <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4704:	68ab      	ldr	r3, [r5, #8]
    4706:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    470a:	069b      	lsls	r3, r3, #26
    470c:	d507      	bpl.n	471e <z_shell_op_word_remove+0xaa>
    470e:	6968      	ldr	r0, [r5, #20]
    4710:	4905      	ldr	r1, [pc, #20]	; (4728 <z_shell_op_word_remove+0xb4>)
}
    4712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4716:	f009 bce1 	b.w	e0dc <z_shell_raw_fprintf>
    471a:	460b      	mov	r3, r1
    471c:	e7b8      	b.n	4690 <z_shell_op_word_remove+0x1c>
    471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4720:	0001071a 	.word	0x0001071a
    4724:	000116a4 	.word	0x000116a4
    4728:	0001071e 	.word	0x0001071e

0000472c <reprint_from_cursor>:
{
    472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4730:	4604      	mov	r4, r0
    4732:	460d      	mov	r5, r1
	if (data_removed) {
    4734:	4617      	mov	r7, r2
    4736:	b10a      	cbz	r2, 473c <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    4738:	f7ff ff18 	bl	456c <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    473c:	68a3      	ldr	r3, [r4, #8]
    473e:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    4742:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    4744:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    4746:	f100 0042 	add.w	r0, r0, #66	; 0x42
    474a:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    474c:	d51f      	bpl.n	478e <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    474e:	4618      	mov	r0, r3
    4750:	f00a fc42 	bl	efd8 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    4754:	f8df 8044 	ldr.w	r8, [pc, #68]	; 479c <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    4758:	4606      	mov	r6, r0
		while (len--) {
    475a:	b996      	cbnz	r6, 4782 <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    475c:	68a3      	ldr	r3, [r4, #8]
    475e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    4760:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    4762:	4620      	mov	r0, r4
    4764:	f009 fcc7 	bl	e0f6 <full_line_cmd>
    4768:	b120      	cbz	r0, 4774 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    476a:	b107      	cbz	r7, 476e <reprint_from_cursor+0x42>
    476c:	b115      	cbz	r5, 4774 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    476e:	6960      	ldr	r0, [r4, #20]
    4770:	f7ff ff08 	bl	4584 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    4774:	4269      	negs	r1, r5
    4776:	4620      	mov	r0, r4
    4778:	b209      	sxth	r1, r1
}
    477a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    477e:	f009 bd15 	b.w	e1ac <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    4782:	6960      	ldr	r0, [r4, #20]
    4784:	4641      	mov	r1, r8
    4786:	f009 fca9 	bl	e0dc <z_shell_raw_fprintf>
    478a:	3e01      	subs	r6, #1
    478c:	e7e5      	b.n	475a <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    478e:	4a04      	ldr	r2, [pc, #16]	; (47a0 <reprint_from_cursor+0x74>)
    4790:	2108      	movs	r1, #8
    4792:	4620      	mov	r0, r4
    4794:	f009 fe1c 	bl	e3d0 <z_shell_fprintf>
    4798:	e7e0      	b.n	475c <reprint_from_cursor+0x30>
    479a:	bf00      	nop
    479c:	00012846 	.word	0x00012846
    47a0:	000116a4 	.word	0x000116a4

000047a4 <z_shell_op_char_insert>:
{
    47a4:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    47a6:	6883      	ldr	r3, [r0, #8]
    47a8:	f88d 1007 	strb.w	r1, [sp, #7]
    47ac:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    47b0:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    47b2:	07d0      	lsls	r0, r2, #31
    47b4:	d521      	bpl.n	47fa <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    47b6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    47b8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    47ba:	428a      	cmp	r2, r1
    47bc:	d01d      	beq.n	47fa <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    47be:	1c48      	adds	r0, r1, #1
    47c0:	4419      	add	r1, r3
		char_replace(shell, data);
    47c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    47c6:	87d8      	strh	r0, [r3, #62]	; 0x3e
    47c8:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    47cc:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    47d0:	0789      	lsls	r1, r1, #30
    47d2:	d510      	bpl.n	47f6 <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    47d4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    47d8:	6960      	ldr	r0, [r4, #20]
    47da:	490b      	ldr	r1, [pc, #44]	; (4808 <z_shell_op_char_insert+0x64>)
		data = '*';
    47dc:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    47e0:	bf18      	it	ne
    47e2:	222a      	movne	r2, #42	; 0x2a
    47e4:	f009 fc7a 	bl	e0dc <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    47e8:	4620      	mov	r0, r4
    47ea:	f009 fc98 	bl	e11e <z_shell_cursor_in_empty_line>
    47ee:	b110      	cbz	r0, 47f6 <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    47f0:	6960      	ldr	r0, [r4, #20]
    47f2:	f7ff fec7 	bl	4584 <z_cursor_next_line_move.isra.0>
}
    47f6:	b002      	add	sp, #8
    47f8:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    47fa:	2201      	movs	r2, #1
    47fc:	f10d 0107 	add.w	r1, sp, #7
    4800:	4620      	mov	r0, r4
    4802:	f009 fdf2 	bl	e3ea <data_insert>
}
    4806:	e7f6      	b.n	47f6 <z_shell_op_char_insert+0x52>
    4808:	00011be2 	.word	0x00011be2

0000480c <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    480c:	6883      	ldr	r3, [r0, #8]
    480e:	4a0a      	ldr	r2, [pc, #40]	; (4838 <z_shell_print_prompt_and_cmd+0x2c>)
    4810:	681b      	ldr	r3, [r3, #0]
{
    4812:	b510      	push	{r4, lr}
    4814:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    4816:	2102      	movs	r1, #2
    4818:	f009 fdda 	bl	e3d0 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    481c:	68a3      	ldr	r3, [r4, #8]
    481e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    4822:	079b      	lsls	r3, r3, #30
    4824:	d507      	bpl.n	4836 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    4826:	4620      	mov	r0, r4
    4828:	f7ff fede 	bl	45e8 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    482c:	4620      	mov	r0, r4
}
    482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    4832:	f009 bc98 	b.w	e166 <z_shell_op_cursor_position_synchronize>
}
    4836:	bd10      	pop	{r4, pc}
    4838:	000116a4 	.word	0x000116a4

0000483c <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    483c:	4901      	ldr	r1, [pc, #4]	; (4844 <z_cursor_next_line_move.isra.0+0x8>)
    483e:	f009 bf7e 	b.w	e73e <z_shell_raw_fprintf>
    4842:	bf00      	nop
    4844:	00011585 	.word	0x00011585

00004848 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    4848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    484c:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    484e:	2100      	movs	r1, #0
{
    4850:	b08d      	sub	sp, #52	; 0x34
    4852:	4604      	mov	r4, r0
    4854:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    4856:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    4858:	aa07      	add	r2, sp, #28
    485a:	4630      	mov	r0, r6
    485c:	f101 0801 	add.w	r8, r1, #1
    4860:	f7ff fe5e 	bl	4520 <z_shell_cmd_get>
    4864:	b9a0      	cbnz	r0, 4890 <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    4866:	b185      	cbz	r5, 488a <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    4868:	b127      	cbz	r7, 4874 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    486a:	463a      	mov	r2, r7
    486c:	2108      	movs	r1, #8
    486e:	4620      	mov	r0, r4
    4870:	f009 fdae 	bl	e3d0 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    4874:	4f1e      	ldr	r7, [pc, #120]	; (48f0 <z_shell_help_subcmd_print+0xa8>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    4876:	f8df 907c 	ldr.w	r9, [pc, #124]	; 48f4 <z_shell_help_subcmd_print+0xac>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    487a:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    487c:	aa07      	add	r2, sp, #28
    487e:	4630      	mov	r0, r6
    4880:	f101 0801 	add.w	r8, r1, #1
    4884:	f7ff fe4c 	bl	4520 <z_shell_cmd_get>
    4888:	b960      	cbnz	r0, 48a4 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    488a:	b00d      	add	sp, #52	; 0x34
    488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    4890:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    4892:	b110      	cbz	r0, 489a <z_shell_help_subcmd_print+0x52>
    4894:	f00a fba0 	bl	efd8 <strlen>
    4898:	b280      	uxth	r0, r0
    489a:	4285      	cmp	r5, r0
    489c:	bf38      	it	cc
    489e:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    48a0:	4641      	mov	r1, r8
    48a2:	e7d9      	b.n	4858 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    48a4:	6803      	ldr	r3, [r0, #0]
    48a6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    48aa:	4811      	ldr	r0, [pc, #68]	; (48f0 <z_shell_help_subcmd_print+0xa8>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    48ac:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    48ae:	f00a fb93 	bl	efd8 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    48b2:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    48b4:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    48b6:	b183      	cbz	r3, 48da <z_shell_help_subcmd_print+0x92>
    48b8:	781a      	ldrb	r2, [r3, #0]
    48ba:	b172      	cbz	r2, 48da <z_shell_help_subcmd_print+0x92>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    48bc:	e9cd 3701 	strd	r3, r7, [sp, #4]
    48c0:	9500      	str	r5, [sp, #0]
    48c2:	463b      	mov	r3, r7
    48c4:	464a      	mov	r2, r9
    48c6:	2108      	movs	r1, #8
    48c8:	4620      	mov	r0, r4
    48ca:	f009 fd81 	bl	e3d0 <z_shell_fprintf>
	if (item_help == NULL) {
    48ce:	f1ba 0f00 	cmp.w	sl, #0
    48d2:	d104      	bne.n	48de <z_shell_help_subcmd_print+0x96>
		z_cursor_next_line_move(shell);
    48d4:	6960      	ldr	r0, [r4, #20]
    48d6:	f7ff ffb1 	bl	483c <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    48da:	4641      	mov	r1, r8
    48dc:	e7ce      	b.n	487c <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    48de:	1c6a      	adds	r2, r5, #1
    48e0:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    48e4:	b292      	uxth	r2, r2
    48e6:	4651      	mov	r1, sl
    48e8:	4620      	mov	r0, r4
    48ea:	f009 ff35 	bl	e758 <formatted_text_print.constprop.0>
    48ee:	e7f4      	b.n	48da <z_shell_help_subcmd_print+0x92>
    48f0:	00011c0f 	.word	0x00011c0f
    48f4:	00011bf7 	.word	0x00011bf7

000048f8 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    48f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    48fa:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    48fc:	6808      	ldr	r0, [r1, #0]
{
    48fe:	460d      	mov	r5, r1
    4900:	b1b8      	cbz	r0, 4932 <z_shell_help_cmd_print+0x3a>
    4902:	f00a fb69 	bl	efd8 <strlen>
    4906:	b284      	uxth	r4, r0
    4908:	4f0b      	ldr	r7, [pc, #44]	; (4938 <z_shell_help_cmd_print+0x40>)
    490a:	4638      	mov	r0, r7
    490c:	f00a fb64 	bl	efd8 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    4910:	682b      	ldr	r3, [r5, #0]
    4912:	4a0a      	ldr	r2, [pc, #40]	; (493c <z_shell_help_cmd_print+0x44>)
    4914:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    4916:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    4918:	2108      	movs	r1, #8
    491a:	4630      	mov	r0, r6
    491c:	f009 fd58 	bl	e3d0 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    4920:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    4922:	6869      	ldr	r1, [r5, #4]
    4924:	4622      	mov	r2, r4
    4926:	4630      	mov	r0, r6
}
    4928:	b003      	add	sp, #12
    492a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    492e:	f009 bf13 	b.w	e758 <formatted_text_print.constprop.0>
    4932:	4604      	mov	r4, r0
    4934:	e7e8      	b.n	4908 <z_shell_help_cmd_print+0x10>
    4936:	bf00      	nop
    4938:	00011c0b 	.word	0x00011c0b
    493c:	00011a08 	.word	0x00011a08

00004940 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    4940:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    4942:	4907      	ldr	r1, [pc, #28]	; (4960 <z_shell_help_request+0x20>)
{
    4944:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    4946:	f00a fb57 	bl	eff8 <strcmp>
    494a:	b138      	cbz	r0, 495c <z_shell_help_request+0x1c>
    494c:	4905      	ldr	r1, [pc, #20]	; (4964 <z_shell_help_request+0x24>)
    494e:	4620      	mov	r0, r4
    4950:	f00a fb52 	bl	eff8 <strcmp>
    4954:	fab0 f080 	clz	r0, r0
    4958:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    495a:	bd10      	pop	{r4, pc}
		return true;
    495c:	2001      	movs	r0, #1
    495e:	e7fc      	b.n	495a <z_shell_help_request+0x1a>
    4960:	00011c01 	.word	0x00011c01
    4964:	00011c04 	.word	0x00011c04

00004968 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    4968:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    496a:	6883      	ldr	r3, [r0, #8]
    496c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    4970:	069b      	lsls	r3, r3, #26
{
    4972:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    4974:	d503      	bpl.n	497e <cmd_resize_default+0x16>
    4976:	4904      	ldr	r1, [pc, #16]	; (4988 <cmd_resize_default+0x20>)
    4978:	6940      	ldr	r0, [r0, #20]
    497a:	f009 ff64 	bl	e846 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    497e:	68a3      	ldr	r3, [r4, #8]
    4980:	4a02      	ldr	r2, [pc, #8]	; (498c <cmd_resize_default+0x24>)
    4982:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    4984:	2000      	movs	r0, #0
    4986:	bd10      	pop	{r4, pc}
    4988:	00010722 	.word	0x00010722
    498c:	00500018 	.word	0x00500018

00004990 <cmd_shell_stats_show>:
{
    4990:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    4992:	6983      	ldr	r3, [r0, #24]
    4994:	4a03      	ldr	r2, [pc, #12]	; (49a4 <cmd_shell_stats_show+0x14>)
    4996:	681b      	ldr	r3, [r3, #0]
    4998:	2108      	movs	r1, #8
    499a:	f009 f989 	bl	dcb0 <shell_fprintf>
}
    499e:	2000      	movs	r0, #0
    49a0:	bd08      	pop	{r3, pc}
    49a2:	bf00      	nop
    49a4:	00011c12 	.word	0x00011c12

000049a8 <cmd_history>:
{
    49a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    49aa:	4e0f      	ldr	r6, [pc, #60]	; (49e8 <cmd_history+0x40>)
{
    49ac:	4604      	mov	r4, r0
    49ae:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    49b0:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    49b2:	68e0      	ldr	r0, [r4, #12]
    49b4:	f10d 030e 	add.w	r3, sp, #14
    49b8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    49bc:	2101      	movs	r1, #1
    49be:	f009 ffca 	bl	e956 <z_shell_history_get>
		if (len) {
    49c2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    49c6:	68a3      	ldr	r3, [r4, #8]
    49c8:	b150      	cbz	r0, 49e0 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    49ca:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    49ce:	9300      	str	r3, [sp, #0]
    49d0:	4632      	mov	r2, r6
    49d2:	462b      	mov	r3, r5
    49d4:	2108      	movs	r1, #8
    49d6:	4620      	mov	r0, r4
    49d8:	f009 f96a 	bl	dcb0 <shell_fprintf>
	while (1) {
    49dc:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    49de:	e7e7      	b.n	49b0 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    49e0:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    49e4:	b004      	add	sp, #16
    49e6:	bd70      	pop	{r4, r5, r6, pc}
    49e8:	00011c22 	.word	0x00011c22

000049ec <cmd_echo>:
	if (argc == 2) {
    49ec:	2902      	cmp	r1, #2
{
    49ee:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    49f0:	d10d      	bne.n	4a0e <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    49f2:	6853      	ldr	r3, [r2, #4]
    49f4:	9301      	str	r3, [sp, #4]
    49f6:	4b0e      	ldr	r3, [pc, #56]	; (4a30 <cmd_echo+0x44>)
    49f8:	9300      	str	r3, [sp, #0]
    49fa:	6813      	ldr	r3, [r2, #0]
    49fc:	4a0d      	ldr	r2, [pc, #52]	; (4a34 <cmd_echo+0x48>)
    49fe:	2101      	movs	r1, #1
    4a00:	f009 f956 	bl	dcb0 <shell_fprintf>
    4a04:	f06f 0015 	mvn.w	r0, #21
}
    4a08:	b003      	add	sp, #12
    4a0a:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    4a0e:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    4a10:	4a09      	ldr	r2, [pc, #36]	; (4a38 <cmd_echo+0x4c>)
    4a12:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    4a16:	f013 0f02 	tst.w	r3, #2
    4a1a:	f04f 0108 	mov.w	r1, #8
    4a1e:	4b07      	ldr	r3, [pc, #28]	; (4a3c <cmd_echo+0x50>)
    4a20:	bf18      	it	ne
    4a22:	4613      	movne	r3, r2
    4a24:	4a06      	ldr	r2, [pc, #24]	; (4a40 <cmd_echo+0x54>)
    4a26:	f009 f943 	bl	dcb0 <shell_fprintf>
	return 0;
    4a2a:	2000      	movs	r0, #0
    4a2c:	e7ec      	b.n	4a08 <cmd_echo+0x1c>
    4a2e:	bf00      	nop
    4a30:	00011c39 	.word	0x00011c39
    4a34:	00011c30 	.word	0x00011c30
    4a38:	00011661 	.word	0x00011661
    4a3c:	00011c2c 	.word	0x00011c2c
    4a40:	00011c4e 	.word	0x00011c4e

00004a44 <cmd_clear>:
{
    4a44:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4a46:	6883      	ldr	r3, [r0, #8]
    4a48:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    4a4c:	069a      	lsls	r2, r3, #26
{
    4a4e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    4a50:	d503      	bpl.n	4a5a <cmd_clear+0x16>
    4a52:	4907      	ldr	r1, [pc, #28]	; (4a70 <cmd_clear+0x2c>)
    4a54:	6940      	ldr	r0, [r0, #20]
    4a56:	f009 fef6 	bl	e846 <z_shell_raw_fprintf>
    4a5a:	68a3      	ldr	r3, [r4, #8]
    4a5c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    4a60:	069b      	lsls	r3, r3, #26
    4a62:	d503      	bpl.n	4a6c <cmd_clear+0x28>
    4a64:	4903      	ldr	r1, [pc, #12]	; (4a74 <cmd_clear+0x30>)
    4a66:	6960      	ldr	r0, [r4, #20]
    4a68:	f009 feed 	bl	e846 <z_shell_raw_fprintf>
}
    4a6c:	2000      	movs	r0, #0
    4a6e:	bd10      	pop	{r4, pc}
    4a70:	00010729 	.word	0x00010729
    4a74:	0001072e 	.word	0x0001072e

00004a78 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    4a78:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    4a7a:	2901      	cmp	r1, #1
{
    4a7c:	b085      	sub	sp, #20
    4a7e:	4604      	mov	r4, r0
	if (argc != 1) {
    4a80:	d00d      	beq.n	4a9e <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    4a82:	6853      	ldr	r3, [r2, #4]
    4a84:	9301      	str	r3, [sp, #4]
    4a86:	4b59      	ldr	r3, [pc, #356]	; (4bec <cmd_resize+0x174>)
    4a88:	9300      	str	r3, [sp, #0]
    4a8a:	6813      	ldr	r3, [r2, #0]
    4a8c:	4a58      	ldr	r2, [pc, #352]	; (4bf0 <cmd_resize+0x178>)
    4a8e:	2101      	movs	r1, #1
    4a90:	f009 f90e 	bl	dcb0 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    4a94:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    4a98:	4628      	mov	r0, r5
    4a9a:	b005      	add	sp, #20
    4a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a9e:	6883      	ldr	r3, [r0, #8]
    4aa0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    4aa4:	069a      	lsls	r2, r3, #26
    4aa6:	d503      	bpl.n	4ab0 <cmd_resize+0x38>
    4aa8:	4952      	ldr	r1, [pc, #328]	; (4bf4 <cmd_resize+0x17c>)
    4aaa:	6940      	ldr	r0, [r0, #20]
    4aac:	f009 fecb 	bl	e846 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    4ab0:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    4ab4:	4620      	mov	r0, r4
    4ab6:	f7ff fd6b 	bl	4590 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    4aba:	21fa      	movs	r1, #250	; 0xfa
    4abc:	4620      	mov	r0, r4
    4abe:	f7ff fd7d 	bl	45bc <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    4ac2:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    4ac4:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    4ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
    4aca:	4629      	mov	r1, r5
    4acc:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    4ad0:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    4ad4:	f00a fae1 	bl	f09a <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    4ad8:	4947      	ldr	r1, [pc, #284]	; (4bf8 <cmd_resize+0x180>)
    4ada:	6960      	ldr	r0, [r4, #20]
    4adc:	f009 feb3 	bl	e846 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    4ae0:	6960      	ldr	r0, [r4, #20]
    4ae2:	f009 f8f5 	bl	dcd0 <z_shell_fprintf_buffer_flush>
    4ae6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    4aea:	6860      	ldr	r0, [r4, #4]
    4aec:	6803      	ldr	r3, [r0, #0]
    4aee:	2201      	movs	r2, #1
    4af0:	691f      	ldr	r7, [r3, #16]
    4af2:	f10d 010b 	add.w	r1, sp, #11
    4af6:	ab03      	add	r3, sp, #12
    4af8:	47b8      	blx	r7
			if (cnt == 0) {
    4afa:	9b03      	ldr	r3, [sp, #12]
    4afc:	b953      	cbnz	r3, 4b14 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    4afe:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    4b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4b04:	b2b6      	uxth	r6, r6
    4b06:	f00b fa05 	bl	ff14 <z_impl_k_busy_wait>
    4b0a:	2e00      	cmp	r6, #0
    4b0c:	d1ed      	bne.n	4aea <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    4b0e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    4b12:	e034      	b.n	4b7e <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    4b14:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    4b18:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    4b1a:	2b1b      	cmp	r3, #27
    4b1c:	d05a      	beq.n	4bd4 <cmd_resize+0x15c>
    4b1e:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    4b22:	2a1b      	cmp	r2, #27
    4b24:	d1e1      	bne.n	4aea <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    4b26:	2b52      	cmp	r3, #82	; 0x52
    4b28:	d154      	bne.n	4bd4 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    4b2a:	440d      	add	r5, r1
    4b2c:	2300      	movs	r3, #0
    4b2e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    4b32:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    4b36:	2a5b      	cmp	r2, #91	; 0x5b
    4b38:	d154      	bne.n	4be4 <cmd_resize+0x16c>
    4b3a:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    4b3e:	461f      	mov	r7, r3
				buff_idx = 2U;
    4b40:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    4b42:	f815 0b01 	ldrb.w	r0, [r5], #1
    4b46:	4632      	mov	r2, r6
    4b48:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    4b4a:	f106 0601 	add.w	r6, r6, #1
    4b4e:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    4b50:	d12b      	bne.n	4baa <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    4b52:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    4b56:	d0da      	beq.n	4b0e <cmd_resize+0x96>
    4b58:	f202 1243 	addw	r2, r2, #323	; 0x143
    4b5c:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    4b60:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    4b62:	f812 5b01 	ldrb.w	r5, [r2], #1
    4b66:	bb55      	cbnz	r5, 4bbe <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    4b68:	2bfa      	cmp	r3, #250	; 0xfa
    4b6a:	bf28      	it	cs
    4b6c:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4b6e:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    4b70:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4b72:	463b      	mov	r3, r7
    4b74:	bf28      	it	cs
    4b76:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    4b78:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4b7c:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4b7e:	68a3      	ldr	r3, [r4, #8]
    4b80:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    4b84:	069b      	lsls	r3, r3, #26
    4b86:	d503      	bpl.n	4b90 <cmd_resize+0x118>
    4b88:	491c      	ldr	r1, [pc, #112]	; (4bfc <cmd_resize+0x184>)
    4b8a:	6960      	ldr	r0, [r4, #20]
    4b8c:	f009 fe5b 	bl	e846 <z_shell_raw_fprintf>
	if (err != 0) {
    4b90:	2d00      	cmp	r5, #0
    4b92:	d081      	beq.n	4a98 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    4b94:	68a3      	ldr	r3, [r4, #8]
    4b96:	4a1a      	ldr	r2, [pc, #104]	; (4c00 <cmd_resize+0x188>)
    4b98:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    4b9a:	2103      	movs	r1, #3
    4b9c:	4a19      	ldr	r2, [pc, #100]	; (4c04 <cmd_resize+0x18c>)
    4b9e:	4620      	mov	r0, r4
    4ba0:	f009 f886 	bl	dcb0 <shell_fprintf>
    4ba4:	f06f 0507 	mvn.w	r5, #7
    4ba8:	e776      	b.n	4a98 <cmd_resize+0x20>
					*y = *y * 10U +
    4baa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    4bae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    4bb2:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    4bb4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    4bb8:	b29f      	uxth	r7, r3
					if (buff_idx >=
    4bba:	d1c2      	bne.n	4b42 <cmd_resize+0xca>
    4bbc:	e7a7      	b.n	4b0e <cmd_resize+0x96>
					*x = *x * 10U +
    4bbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    4bc2:	3601      	adds	r6, #1
					*x = *x * 10U +
    4bc4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    4bc8:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    4bca:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    4bcc:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    4bce:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    4bd0:	d9c7      	bls.n	4b62 <cmd_resize+0xea>
    4bd2:	e79c      	b.n	4b0e <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    4bd4:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    4bd6:	3501      	adds	r5, #1
    4bd8:	b2ad      	uxth	r5, r5
    4bda:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    4bdc:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    4be0:	d983      	bls.n	4aea <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    4be2:	2300      	movs	r3, #0
    4be4:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    4be8:	e791      	b.n	4b0e <cmd_resize+0x96>
    4bea:	bf00      	nop
    4bec:	00011c39 	.word	0x00011c39
    4bf0:	00011c30 	.word	0x00011c30
    4bf4:	00010734 	.word	0x00010734
    4bf8:	00012057 	.word	0x00012057
    4bfc:	00010738 	.word	0x00010738
    4c00:	00500018 	.word	0x00500018
    4c04:	00011c5f 	.word	0x00011c5f

00004c08 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    4c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c0c:	4607      	mov	r7, r0
    4c0e:	b089      	sub	sp, #36	; 0x24
    4c10:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    4c12:	4689      	mov	r9, r1
    4c14:	b921      	cbnz	r1, 4c20 <z_shell_wildcard_process+0x18>
		return ret_val;
    4c16:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    4c18:	4620      	mov	r0, r4
    4c1a:	b009      	add	sp, #36	; 0x24
    4c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    4c20:	4610      	mov	r0, r2
    4c22:	f009 ff41 	bl	eaa8 <z_shell_has_wildcard>
    4c26:	2800      	cmp	r0, #0
    4c28:	d0f5      	beq.n	4c16 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    4c2a:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    4c2e:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    4c30:	2402      	movs	r4, #2
    4c32:	e024      	b.n	4c7e <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    4c34:	465c      	mov	r4, fp
    4c36:	e03c      	b.n	4cb2 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    4c38:	4629      	mov	r1, r5
    4c3a:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    4c3e:	f00a f981 	bl	ef44 <strstr>
	if (!completion_addr) {
    4c42:	4606      	mov	r6, r0
    4c44:	2800      	cmp	r0, #0
    4c46:	d04c      	beq.n	4ce2 <z_shell_wildcard_process+0xda>
    4c48:	f00a f9c6 	bl	efd8 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    4c4c:	b282      	uxth	r2, r0
    4c4e:	1c60      	adds	r0, r4, #1
    4c50:	3201      	adds	r2, #1
    4c52:	4631      	mov	r1, r6
    4c54:	4430      	add	r0, r6
    4c56:	f00a f9fd 	bl	f054 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    4c5a:	4622      	mov	r2, r4
    4c5c:	4659      	mov	r1, fp
    4c5e:	4630      	mov	r0, r6
    4c60:	f00a fa10 	bl	f084 <memcpy>
	completion_addr[cmd_len] = ' ';
    4c64:	f04f 0320 	mov.w	r3, #32
    4c68:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    4c6a:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    4c6e:	3001      	adds	r0, #1
    4c70:	4404      	add	r4, r0
    4c72:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    4c76:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    4c7a:	2400      	movs	r4, #0
    4c7c:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    4c7e:	1c4b      	adds	r3, r1, #1
    4c80:	aa03      	add	r2, sp, #12
    4c82:	4648      	mov	r0, r9
    4c84:	9301      	str	r3, [sp, #4]
    4c86:	f7ff fc4b 	bl	4520 <z_shell_cmd_get>
    4c8a:	4606      	mov	r6, r0
    4c8c:	b1e8      	cbz	r0, 4cca <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    4c8e:	6831      	ldr	r1, [r6, #0]
    4c90:	2200      	movs	r2, #0
    4c92:	4628      	mov	r0, r5
    4c94:	f008 fd9a 	bl	d7cc <fnmatch>
    4c98:	2800      	cmp	r0, #0
    4c9a:	d1ef      	bne.n	4c7c <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    4c9c:	f8d6 b000 	ldr.w	fp, [r6]
    4ca0:	f8d7 a008 	ldr.w	sl, [r7, #8]
    4ca4:	f1bb 0f00 	cmp.w	fp, #0
    4ca8:	d0c4      	beq.n	4c34 <z_shell_wildcard_process+0x2c>
    4caa:	4658      	mov	r0, fp
    4cac:	f00a f994 	bl	efd8 <strlen>
    4cb0:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    4cb2:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    4cb6:	4422      	add	r2, r4
    4cb8:	2aff      	cmp	r2, #255	; 0xff
    4cba:	ddbd      	ble.n	4c38 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    4cbc:	4a0a      	ldr	r2, [pc, #40]	; (4ce8 <z_shell_wildcard_process+0xe0>)
    4cbe:	462b      	mov	r3, r5
    4cc0:	2103      	movs	r1, #3
    4cc2:	4638      	mov	r0, r7
    4cc4:	f009 fb84 	bl	e3d0 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    4cc8:	2401      	movs	r4, #1
	if (cnt > 0) {
    4cca:	f1b8 0f00 	cmp.w	r8, #0
    4cce:	d0a3      	beq.n	4c18 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    4cd0:	68b8      	ldr	r0, [r7, #8]
    4cd2:	462a      	mov	r2, r5
    4cd4:	f100 0140 	add.w	r1, r0, #64	; 0x40
    4cd8:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    4cdc:	f009 f924 	bl	df28 <z_shell_pattern_remove>
	return ret_val;
    4ce0:	e79a      	b.n	4c18 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    4ce2:	2402      	movs	r4, #2
    4ce4:	e7f1      	b.n	4cca <z_shell_wildcard_process+0xc2>
    4ce6:	bf00      	nop
    4ce8:	0001205c 	.word	0x0001205c

00004cec <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4cec:	4b0c      	ldr	r3, [pc, #48]	; (4d20 <class_handler+0x34>)
{
    4cee:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4cf0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4cf2:	4e0c      	ldr	r6, [pc, #48]	; (4d24 <class_handler+0x38>)
    4cf4:	4b0c      	ldr	r3, [pc, #48]	; (4d28 <class_handler+0x3c>)
    4cf6:	42b3      	cmp	r3, r6
    4cf8:	d303      	bcc.n	4d02 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    4cfa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4cfe:	bcf0      	pop	{r4, r5, r6, r7}
    4d00:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    4d02:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4d04:	42bd      	cmp	r5, r7
    4d06:	d309      	bcc.n	4d1c <class_handler+0x30>
		if (iface->class_handler &&
    4d08:	691c      	ldr	r4, [r3, #16]
    4d0a:	b13c      	cbz	r4, 4d1c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    4d0c:	f895 c002 	ldrb.w	ip, [r5, #2]
    4d10:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    4d12:	45ac      	cmp	ip, r5
    4d14:	d102      	bne.n	4d1c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    4d16:	4623      	mov	r3, r4
}
    4d18:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    4d1a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4d1c:	3324      	adds	r3, #36	; 0x24
    4d1e:	e7ea      	b.n	4cf6 <class_handler+0xa>
    4d20:	200013a8 	.word	0x200013a8
    4d24:	200003d0 	.word	0x200003d0
    4d28:	200003ac 	.word	0x200003ac

00004d2c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    4d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4d30:	4c13      	ldr	r4, [pc, #76]	; (4d80 <custom_handler+0x54>)
    4d32:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4d84 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4d36:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4d88 <custom_handler+0x5c>
{
    4d3a:	4605      	mov	r5, r0
    4d3c:	460e      	mov	r6, r1
    4d3e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4d40:	4544      	cmp	r4, r8
    4d42:	d303      	bcc.n	4d4c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    4d44:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    4d4c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4d4e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    4d52:	429a      	cmp	r2, r3
    4d54:	d312      	bcc.n	4d7c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    4d56:	69a3      	ldr	r3, [r4, #24]
    4d58:	b183      	cbz	r3, 4d7c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    4d5a:	7890      	ldrb	r0, [r2, #2]
    4d5c:	7929      	ldrb	r1, [r5, #4]
    4d5e:	4288      	cmp	r0, r1
    4d60:	d105      	bne.n	4d6e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    4d62:	463a      	mov	r2, r7
    4d64:	4631      	mov	r1, r6
    4d66:	4628      	mov	r0, r5
}
    4d68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    4d6c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    4d6e:	7952      	ldrb	r2, [r2, #5]
    4d70:	2a01      	cmp	r2, #1
    4d72:	d103      	bne.n	4d7c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    4d74:	463a      	mov	r2, r7
    4d76:	4631      	mov	r1, r6
    4d78:	4628      	mov	r0, r5
    4d7a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4d7c:	3424      	adds	r4, #36	; 0x24
    4d7e:	e7df      	b.n	4d40 <custom_handler+0x14>
    4d80:	200003ac 	.word	0x200003ac
    4d84:	200003d0 	.word	0x200003d0
    4d88:	200013a8 	.word	0x200013a8

00004d8c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    4d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4d90:	4c0b      	ldr	r4, [pc, #44]	; (4dc0 <vendor_handler+0x34>)
    4d92:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4dc4 <vendor_handler+0x38>
{
    4d96:	4605      	mov	r5, r0
    4d98:	460e      	mov	r6, r1
    4d9a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4d9c:	4544      	cmp	r4, r8
    4d9e:	d302      	bcc.n	4da6 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    4da0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4da4:	e009      	b.n	4dba <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    4da6:	6963      	ldr	r3, [r4, #20]
    4da8:	b90b      	cbnz	r3, 4dae <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4daa:	3424      	adds	r4, #36	; 0x24
    4dac:	e7f6      	b.n	4d9c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    4dae:	463a      	mov	r2, r7
    4db0:	4631      	mov	r1, r6
    4db2:	4628      	mov	r0, r5
    4db4:	4798      	blx	r3
    4db6:	2800      	cmp	r0, #0
    4db8:	d1f7      	bne.n	4daa <vendor_handler+0x1e>
}
    4dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dbe:	bf00      	nop
    4dc0:	200003ac 	.word	0x200003ac
    4dc4:	200003d0 	.word	0x200003d0

00004dc8 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    4dc8:	4802      	ldr	r0, [pc, #8]	; (4dd4 <usb_reset_alt_setting+0xc>)
    4dca:	2208      	movs	r2, #8
    4dcc:	2100      	movs	r1, #0
    4dce:	f00a b964 	b.w	f09a <memset>
    4dd2:	bf00      	nop
    4dd4:	20001463 	.word	0x20001463

00004dd8 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    4dd8:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4dda:	4b0b      	ldr	r3, [pc, #44]	; (4e08 <is_ep_valid.part.0+0x30>)
    4ddc:	4c0b      	ldr	r4, [pc, #44]	; (4e0c <is_ep_valid.part.0+0x34>)
    4dde:	42a3      	cmp	r3, r4
    4de0:	d301      	bcc.n	4de6 <is_ep_valid.part.0+0xe>
	return false;
    4de2:	2000      	movs	r0, #0
}
    4de4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    4de6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4de8:	7f1e      	ldrb	r6, [r3, #28]
    4dea:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    4dec:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4dee:	b2d5      	uxtb	r5, r2
    4df0:	42ae      	cmp	r6, r5
    4df2:	d801      	bhi.n	4df8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4df4:	3324      	adds	r3, #36	; 0x24
    4df6:	e7f2      	b.n	4dde <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    4df8:	3201      	adds	r2, #1
    4dfa:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    4dfe:	4285      	cmp	r5, r0
    4e00:	d1f5      	bne.n	4dee <is_ep_valid.part.0+0x16>
				return true;
    4e02:	2001      	movs	r0, #1
    4e04:	e7ee      	b.n	4de4 <is_ep_valid.part.0+0xc>
    4e06:	bf00      	nop
    4e08:	200003ac 	.word	0x200003ac
    4e0c:	200003d0 	.word	0x200003d0

00004e10 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    4e10:	4809      	ldr	r0, [pc, #36]	; (4e38 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    4e12:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    4e14:	7803      	ldrb	r3, [r0, #0]
    4e16:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    4e1a:	330a      	adds	r3, #10
    4e1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    4e20:	b13b      	cbz	r3, 4e32 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    4e22:	f100 0208 	add.w	r2, r0, #8
    4e26:	f100 0110 	add.w	r1, r0, #16
    4e2a:	4798      	blx	r3
    4e2c:	43c0      	mvns	r0, r0
    4e2e:	0fc0      	lsrs	r0, r0, #31
}
    4e30:	bd08      	pop	{r3, pc}
		return false;
    4e32:	4618      	mov	r0, r3
    4e34:	e7fc      	b.n	4e30 <usb_handle_request.constprop.0+0x20>
    4e36:	bf00      	nop
    4e38:	200013a8 	.word	0x200013a8

00004e3c <set_endpoint>:
{
    4e3c:	b500      	push	{lr}
    4e3e:	b08b      	sub	sp, #44	; 0x2c
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    4e40:	7883      	ldrb	r3, [r0, #2]
    4e42:	f88d 3008 	strb.w	r3, [sp, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    4e46:	7903      	ldrb	r3, [r0, #4]
    4e48:	7942      	ldrb	r2, [r0, #5]
    4e4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4e4e:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    4e52:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    4e54:	a802      	add	r0, sp, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    4e56:	f003 0303 	and.w	r3, r3, #3
    4e5a:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    4e5e:	f003 f817 	bl	7e90 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    4e62:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4e66:	d12f      	bne.n	4ec8 <set_endpoint+0x8c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    4e68:	4828      	ldr	r0, [pc, #160]	; (4f0c <set_endpoint+0xd0>)
    4e6a:	6803      	ldr	r3, [r0, #0]
    4e6c:	f013 0f06 	tst.w	r3, #6
    4e70:	d00c      	beq.n	4e8c <set_endpoint+0x50>
    4e72:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4e76:	4a26      	ldr	r2, [pc, #152]	; (4f10 <set_endpoint+0xd4>)
    4e78:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4e7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    4e80:	2303      	movs	r3, #3
    4e82:	aa07      	add	r2, sp, #28
    4e84:	9301      	str	r3, [sp, #4]
    4e86:	9307      	str	r3, [sp, #28]
    4e88:	f009 fe52 	bl	eb30 <z_log_msg2_static_create.constprop.0>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    4e8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4e90:	f003 f8ae 	bl	7ff0 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    4e94:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4e98:	d12e      	bne.n	4ef8 <set_endpoint+0xbc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    4e9a:	481c      	ldr	r0, [pc, #112]	; (4f0c <set_endpoint+0xd0>)
    4e9c:	6803      	ldr	r3, [r0, #0]
    4e9e:	f013 0f06 	tst.w	r3, #6
    4ea2:	d00c      	beq.n	4ebe <set_endpoint+0x82>
    4ea4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4ea8:	4a1a      	ldr	r2, [pc, #104]	; (4f14 <set_endpoint+0xd8>)
    4eaa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    4eb2:	2303      	movs	r3, #3
    4eb4:	aa07      	add	r2, sp, #28
    4eb6:	9301      	str	r3, [sp, #4]
    4eb8:	9307      	str	r3, [sp, #28]
    4eba:	f009 fe39 	bl	eb30 <z_log_msg2_static_create.constprop.0>
	usb_dev.configured = true;
    4ebe:	4b16      	ldr	r3, [pc, #88]	; (4f18 <set_endpoint+0xdc>)
    4ec0:	2001      	movs	r0, #1
    4ec2:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    4ec6:	e006      	b.n	4ed6 <set_endpoint+0x9a>
	} else if (ret) {
    4ec8:	2800      	cmp	r0, #0
    4eca:	d0df      	beq.n	4e8c <set_endpoint+0x50>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    4ecc:	480f      	ldr	r0, [pc, #60]	; (4f0c <set_endpoint+0xd0>)
    4ece:	6803      	ldr	r3, [r0, #0]
    4ed0:	075a      	lsls	r2, r3, #29
    4ed2:	d103      	bne.n	4edc <set_endpoint+0xa0>
		return false;
    4ed4:	2000      	movs	r0, #0
}
    4ed6:	b00b      	add	sp, #44	; 0x2c
    4ed8:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    4edc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4ee0:	4a0e      	ldr	r2, [pc, #56]	; (4f1c <set_endpoint+0xe0>)
    4ee2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    4ee6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4eea:	2303      	movs	r3, #3
    4eec:	aa07      	add	r2, sp, #28
    4eee:	9301      	str	r3, [sp, #4]
    4ef0:	9307      	str	r3, [sp, #28]
    4ef2:	f009 fe1d 	bl	eb30 <z_log_msg2_static_create.constprop.0>
    4ef6:	e7ed      	b.n	4ed4 <set_endpoint+0x98>
	} else if (ret) {
    4ef8:	2800      	cmp	r0, #0
    4efa:	d0e0      	beq.n	4ebe <set_endpoint+0x82>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    4efc:	4803      	ldr	r0, [pc, #12]	; (4f0c <set_endpoint+0xd0>)
    4efe:	6803      	ldr	r3, [r0, #0]
    4f00:	075b      	lsls	r3, r3, #29
    4f02:	d0e7      	beq.n	4ed4 <set_endpoint+0x98>
    4f04:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4f08:	4a05      	ldr	r2, [pc, #20]	; (4f20 <set_endpoint+0xe4>)
    4f0a:	e7ea      	b.n	4ee2 <set_endpoint+0xa6>
    4f0c:	20000250 	.word	0x20000250
    4f10:	000120ae 	.word	0x000120ae
    4f14:	000120f5 	.word	0x000120f5
    4f18:	200013a8 	.word	0x200013a8
    4f1c:	000120d1 	.word	0x000120d1
    4f20:	00012115 	.word	0x00012115

00004f24 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    4f24:	2804      	cmp	r0, #4
{
    4f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f2a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4fb4 <forward_status_cb+0x90>
    4f2e:	4604      	mov	r4, r0
    4f30:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    4f32:	d10e      	bne.n	4f52 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    4f34:	f7ff ff48 	bl	4dc8 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    4f38:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4fb8 <forward_status_cb+0x94>
    4f3c:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    4f40:	b15b      	cbz	r3, 4f5a <forward_status_cb+0x36>
			usb_cancel_transfers();
    4f42:	f000 ff4d 	bl	5de0 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    4f46:	2c04      	cmp	r4, #4
    4f48:	d001      	beq.n	4f4e <forward_status_cb+0x2a>
    4f4a:	2c01      	cmp	r4, #1
    4f4c:	d105      	bne.n	4f5a <forward_status_cb+0x36>
    4f4e:	4d1b      	ldr	r5, [pc, #108]	; (4fbc <forward_status_cb+0x98>)
    4f50:	e016      	b.n	4f80 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    4f52:	2805      	cmp	r0, #5
    4f54:	d0f0      	beq.n	4f38 <forward_status_cb+0x14>
    4f56:	2801      	cmp	r0, #1
    4f58:	d0ee      	beq.n	4f38 <forward_status_cb+0x14>
    4f5a:	4d18      	ldr	r5, [pc, #96]	; (4fbc <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4f5c:	4545      	cmp	r5, r8
    4f5e:	d31e      	bcc.n	4f9e <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    4f60:	4b15      	ldr	r3, [pc, #84]	; (4fb8 <forward_status_cb+0x94>)
    4f62:	6a1b      	ldr	r3, [r3, #32]
    4f64:	b31b      	cbz	r3, 4fae <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    4f66:	4631      	mov	r1, r6
    4f68:	4620      	mov	r0, r4
}
    4f6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    4f6e:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    4f70:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4f74:	2700      	movs	r7, #0
    4f76:	7f2a      	ldrb	r2, [r5, #28]
    4f78:	b2fb      	uxtb	r3, r7
    4f7a:	429a      	cmp	r2, r3
    4f7c:	d803      	bhi.n	4f86 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4f7e:	3524      	adds	r5, #36	; 0x24
    4f80:	4545      	cmp	r5, r8
    4f82:	d3f5      	bcc.n	4f70 <forward_status_cb+0x4c>
    4f84:	e007      	b.n	4f96 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    4f86:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    4f8a:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    4f8c:	7918      	ldrb	r0, [r3, #4]
    4f8e:	f003 f859 	bl	8044 <usb_dc_ep_disable>
			if (ret < 0) {
    4f92:	2800      	cmp	r0, #0
    4f94:	daef      	bge.n	4f76 <forward_status_cb+0x52>
				usb_dev.configured = false;
    4f96:	2300      	movs	r3, #0
    4f98:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    4f9c:	e7dd      	b.n	4f5a <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    4f9e:	68eb      	ldr	r3, [r5, #12]
    4fa0:	b11b      	cbz	r3, 4faa <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    4fa2:	4632      	mov	r2, r6
    4fa4:	4621      	mov	r1, r4
    4fa6:	4628      	mov	r0, r5
    4fa8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4faa:	3524      	adds	r5, #36	; 0x24
    4fac:	e7d6      	b.n	4f5c <forward_status_cb+0x38>
}
    4fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fb2:	bf00      	nop
    4fb4:	200003d0 	.word	0x200003d0
    4fb8:	200013a8 	.word	0x200013a8
    4fbc:	200003ac 	.word	0x200003ac

00004fc0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4fc0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    4fc2:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4fc4:	b088      	sub	sp, #32
	if (USB_EP_GET_IDX(ep) == 0) {
    4fc6:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4fc8:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    4fca:	f88d 4003 	strb.w	r4, [sp, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    4fce:	d007      	beq.n	4fe0 <usb_halt_endpoint_req.isra.0+0x20>
    4fd0:	4620      	mov	r0, r4
    4fd2:	f7ff ff01 	bl	4dd8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    4fd6:	b318      	cbz	r0, 5020 <usb_halt_endpoint_req.isra.0+0x60>
	return (usb_dev.configuration != 0);
    4fd8:	4b1f      	ldr	r3, [pc, #124]	; (5058 <usb_halt_endpoint_req.isra.0+0x98>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4fda:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    4fde:	b1f8      	cbz	r0, 5020 <usb_halt_endpoint_req.isra.0+0x60>
			LOG_INF("Set halt ep 0x%02x", ep);
    4fe0:	481e      	ldr	r0, [pc, #120]	; (505c <usb_halt_endpoint_req.isra.0+0x9c>)
    4fe2:	4e1d      	ldr	r6, [pc, #116]	; (5058 <usb_halt_endpoint_req.isra.0+0x98>)
    4fe4:	6803      	ldr	r3, [r0, #0]
    4fe6:	f003 0307 	and.w	r3, r3, #7
		if (halt) {
    4fea:	b1dd      	cbz	r5, 5024 <usb_halt_endpoint_req.isra.0+0x64>
			LOG_INF("Set halt ep 0x%02x", ep);
    4fec:	2b02      	cmp	r3, #2
    4fee:	d90a      	bls.n	5006 <usb_halt_endpoint_req.isra.0+0x46>
    4ff0:	4b1b      	ldr	r3, [pc, #108]	; (5060 <usb_halt_endpoint_req.isra.0+0xa0>)
    4ff2:	aa05      	add	r2, sp, #20
    4ff4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    4ff8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4ffc:	2303      	movs	r3, #3
    4ffe:	9301      	str	r3, [sp, #4]
    5000:	9305      	str	r3, [sp, #20]
    5002:	f009 fd95 	bl	eb30 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_set_stall(ep);
    5006:	f89d 0003 	ldrb.w	r0, [sp, #3]
    500a:	f002 ff79 	bl	7f00 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    500e:	69f3      	ldr	r3, [r6, #28]
    5010:	b90b      	cbnz	r3, 5016 <usb_halt_endpoint_req.isra.0+0x56>
		return true;
    5012:	2001      	movs	r0, #1
    5014:	e004      	b.n	5020 <usb_halt_endpoint_req.isra.0+0x60>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    5016:	2008      	movs	r0, #8
    5018:	f10d 0103 	add.w	r1, sp, #3
    501c:	4798      	blx	r3
		return true;
    501e:	4628      	mov	r0, r5
}
    5020:	b008      	add	sp, #32
    5022:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    5024:	2b02      	cmp	r3, #2
    5026:	d90a      	bls.n	503e <usb_halt_endpoint_req.isra.0+0x7e>
    5028:	4b0e      	ldr	r3, [pc, #56]	; (5064 <usb_halt_endpoint_req.isra.0+0xa4>)
    502a:	aa05      	add	r2, sp, #20
    502c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    5030:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5034:	2303      	movs	r3, #3
    5036:	9301      	str	r3, [sp, #4]
    5038:	9305      	str	r3, [sp, #20]
    503a:	f009 fd79 	bl	eb30 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_clear_stall(ep);
    503e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5042:	f002 ff99 	bl	7f78 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    5046:	69f3      	ldr	r3, [r6, #28]
    5048:	2b00      	cmp	r3, #0
    504a:	d0e2      	beq.n	5012 <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    504c:	f10d 0103 	add.w	r1, sp, #3
    5050:	2009      	movs	r0, #9
    5052:	4798      	blx	r3
    5054:	e7dd      	b.n	5012 <usb_halt_endpoint_req.isra.0+0x52>
    5056:	bf00      	nop
    5058:	200013a8 	.word	0x200013a8
    505c:	20000250 	.word	0x20000250
    5060:	00012136 	.word	0x00012136
    5064:	00012149 	.word	0x00012149

00005068 <usb_handle_standard_request>:
{
    5068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    506c:	4ea1      	ldr	r6, [pc, #644]	; (52f4 <usb_handle_standard_request+0x28c>)
    506e:	69b3      	ldr	r3, [r6, #24]
{
    5070:	b08b      	sub	sp, #44	; 0x2c
    5072:	4605      	mov	r5, r0
    5074:	460f      	mov	r7, r1
    5076:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    5078:	b963      	cbnz	r3, 5094 <usb_handle_standard_request+0x2c>
	switch (setup->RequestType.recipient) {
    507a:	7828      	ldrb	r0, [r5, #0]
    507c:	f000 001f 	and.w	r0, r0, #31
    5080:	2801      	cmp	r0, #1
    5082:	f000 80a6 	beq.w	51d2 <usb_handle_standard_request+0x16a>
    5086:	2802      	cmp	r0, #2
    5088:	f000 813e 	beq.w	5308 <usb_handle_standard_request+0x2a0>
    508c:	b138      	cbz	r0, 509e <usb_handle_standard_request+0x36>
		switch (setup->bRequest) {
    508e:	f06f 0015 	mvn.w	r0, #21
    5092:	e094      	b.n	51be <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    5094:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    5096:	2800      	cmp	r0, #0
    5098:	d1ef      	bne.n	507a <usb_handle_standard_request+0x12>
	int rc = 0;
    509a:	2000      	movs	r0, #0
    509c:	e08f      	b.n	51be <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    509e:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    50a2:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    50a4:	2a00      	cmp	r2, #0
    50a6:	da31      	bge.n	510c <usb_handle_standard_request+0xa4>
		switch (setup->bRequest) {
    50a8:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    50aa:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    50ae:	d010      	beq.n	50d2 <usb_handle_standard_request+0x6a>
    50b0:	2b08      	cmp	r3, #8
    50b2:	d025      	beq.n	5100 <usb_handle_standard_request+0x98>
    50b4:	2b00      	cmp	r3, #0
    50b6:	d1ea      	bne.n	508e <usb_handle_standard_request+0x26>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    50b8:	2101      	movs	r1, #1
	data[1] = 0U;
    50ba:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    50bc:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    50be:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    50c2:	2900      	cmp	r1, #0
    50c4:	bf18      	it	ne
    50c6:	2302      	movne	r3, #2
    50c8:	f043 0301 	orr.w	r3, r3, #1
    50cc:	7013      	strb	r3, [r2, #0]
		*len = 2;
    50ce:	2302      	movs	r3, #2
    50d0:	e01a      	b.n	5108 <usb_handle_standard_request+0xa0>
			return usb_get_descriptor(setup, len, data_buf);
    50d2:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    50d4:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    50d6:	1f11      	subs	r1, r2, #4
    50d8:	2901      	cmp	r1, #1
    50da:	d9d8      	bls.n	508e <usb_handle_standard_request+0x26>
    50dc:	2a07      	cmp	r2, #7
    50de:	d8d6      	bhi.n	508e <usb_handle_standard_request+0x26>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    50e0:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    50e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    50e4:	781c      	ldrb	r4, [r3, #0]
    50e6:	2c00      	cmp	r4, #0
    50e8:	d0d1      	beq.n	508e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    50ea:	785d      	ldrb	r5, [r3, #1]
    50ec:	4295      	cmp	r5, r2
    50ee:	d103      	bne.n	50f8 <usb_handle_standard_request+0x90>
			if (cur_index == index) {
    50f0:	4281      	cmp	r1, r0
    50f2:	f000 813e 	beq.w	5372 <usb_handle_standard_request+0x30a>
			cur_index++;
    50f6:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    50f8:	4423      	add	r3, r4
    50fa:	e7f3      	b.n	50e4 <usb_handle_standard_request+0x7c>
			*len = p[DESC_bLength];
    50fc:	781b      	ldrb	r3, [r3, #0]
    50fe:	e13e      	b.n	537e <usb_handle_standard_request+0x316>
			data[0] = usb_dev.configuration;
    5100:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    5104:	7013      	strb	r3, [r2, #0]
			*len = 1;
    5106:	2301      	movs	r3, #1
		*len = 2;
    5108:	603b      	str	r3, [r7, #0]
		return true;
    510a:	e058      	b.n	51be <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    510c:	3b01      	subs	r3, #1
    510e:	2b08      	cmp	r3, #8
    5110:	d8bd      	bhi.n	508e <usb_handle_standard_request+0x26>
    5112:	a201      	add	r2, pc, #4	; (adr r2, 5118 <usb_handle_standard_request+0xb0>)
    5114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5118:	000051b1 	.word	0x000051b1
    511c:	0000508f 	.word	0x0000508f
    5120:	000051c5 	.word	0x000051c5
    5124:	0000508f 	.word	0x0000508f
    5128:	0000513d 	.word	0x0000513d
    512c:	0000508f 	.word	0x0000508f
    5130:	0000508f 	.word	0x0000508f
    5134:	0000508f 	.word	0x0000508f
    5138:	00005149 	.word	0x00005149
			return !usb_dc_set_address(setup->wValue);
    513c:	78a8      	ldrb	r0, [r5, #2]
    513e:	f002 fe55 	bl	7dec <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    5142:	2800      	cmp	r0, #0
    5144:	d0a9      	beq.n	509a <usb_handle_standard_request+0x32>
    5146:	e7a2      	b.n	508e <usb_handle_standard_request+0x26>
	if (setup->wValue == 0U) {
    5148:	886c      	ldrh	r4, [r5, #2]
    514a:	b144      	cbz	r4, 515e <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    514c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    5150:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    5152:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    5154:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    5156:	783c      	ldrb	r4, [r7, #0]
    5158:	b96c      	cbnz	r4, 5176 <usb_handle_standard_request+0x10e>
	if (found) {
    515a:	2800      	cmp	r0, #0
    515c:	d097      	beq.n	508e <usb_handle_standard_request+0x26>
		usb_reset_alt_setting();
    515e:	f7ff fe33 	bl	4dc8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    5162:	886b      	ldrh	r3, [r5, #2]
    5164:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    5168:	69f3      	ldr	r3, [r6, #28]
    516a:	2b00      	cmp	r3, #0
    516c:	d095      	beq.n	509a <usb_handle_standard_request+0x32>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    516e:	4962      	ldr	r1, [pc, #392]	; (52f8 <usb_handle_standard_request+0x290>)
    5170:	2003      	movs	r0, #3
    5172:	4798      	blx	r3
    5174:	e791      	b.n	509a <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    5176:	787b      	ldrb	r3, [r7, #1]
    5178:	2b04      	cmp	r3, #4
    517a:	d00c      	beq.n	5196 <usb_handle_standard_request+0x12e>
    517c:	2b05      	cmp	r3, #5
    517e:	d00d      	beq.n	519c <usb_handle_standard_request+0x134>
    5180:	2b02      	cmp	r3, #2
    5182:	d105      	bne.n	5190 <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    5184:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    5188:	886a      	ldrh	r2, [r5, #2]
				found = true;
    518a:	4542      	cmp	r2, r8
    518c:	bf08      	it	eq
    518e:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    5190:	783b      	ldrb	r3, [r7, #0]
    5192:	441f      	add	r7, r3
    5194:	e7df      	b.n	5156 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    5196:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    519a:	e7f9      	b.n	5190 <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    519c:	886b      	ldrh	r3, [r5, #2]
    519e:	4543      	cmp	r3, r8
    51a0:	d1f6      	bne.n	5190 <usb_handle_standard_request+0x128>
    51a2:	f1b9 0f00 	cmp.w	r9, #0
    51a6:	d1f3      	bne.n	5190 <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    51a8:	4638      	mov	r0, r7
    51aa:	f7ff fe47 	bl	4e3c <set_endpoint>
			break;
    51ae:	e7ef      	b.n	5190 <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    51b0:	886b      	ldrh	r3, [r5, #2]
    51b2:	2b01      	cmp	r3, #1
    51b4:	f47f af6b 	bne.w	508e <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = false;
    51b8:	2000      	movs	r0, #0
    51ba:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    51be:	b00b      	add	sp, #44	; 0x2c
    51c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    51c4:	886b      	ldrh	r3, [r5, #2]
    51c6:	2b01      	cmp	r3, #1
    51c8:	f47f af61 	bne.w	508e <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = true;
    51cc:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    51d0:	e763      	b.n	509a <usb_handle_standard_request+0x32>
	if (!is_device_configured() ||
    51d2:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    51d6:	2b00      	cmp	r3, #0
    51d8:	f43f af59 	beq.w	508e <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    51dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    51de:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    51e2:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    51e4:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    51e6:	781a      	ldrb	r2, [r3, #0]
    51e8:	2a00      	cmp	r2, #0
    51ea:	f43f af50 	beq.w	508e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    51ee:	7859      	ldrb	r1, [r3, #1]
    51f0:	2902      	cmp	r1, #2
    51f2:	d104      	bne.n	51fe <usb_handle_standard_request+0x196>
			if (interface < cfg_descr->bNumInterfaces) {
    51f4:	f893 e004 	ldrb.w	lr, [r3, #4]
    51f8:	4586      	cmp	lr, r0
    51fa:	f200 80c2 	bhi.w	5382 <usb_handle_standard_request+0x31a>
		p += p[DESC_bLength];
    51fe:	4413      	add	r3, r2
    5200:	e7f1      	b.n	51e6 <usb_handle_standard_request+0x17e>
			data[0] = 0U;
    5202:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    5204:	7050      	strb	r0, [r2, #1]
			*len = 2;
    5206:	6039      	str	r1, [r7, #0]
			return true;
    5208:	e7d9      	b.n	51be <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    520a:	440c      	add	r4, r1
    520c:	e0c7      	b.n	539e <usb_handle_standard_request+0x336>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    520e:	280b      	cmp	r0, #11
    5210:	f47f af3d 	bne.w	508e <usb_handle_standard_request+0x26>
	bool ret = false;
    5214:	2200      	movs	r2, #0
	uint8_t cur_iface = 0xFF;
    5216:	f04f 09ff 	mov.w	r9, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    521a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 52fc <usb_handle_standard_request+0x294>
	uint8_t cur_alt_setting = 0xFF;
    521e:	464f      	mov	r7, r9
	const uint8_t *if_desc = NULL;
    5220:	4690      	mov	r8, r2
    5222:	e006      	b.n	5232 <usb_handle_standard_request+0x1ca>
		switch (p[DESC_bDescriptorType]) {
    5224:	7861      	ldrb	r1, [r4, #1]
    5226:	2904      	cmp	r1, #4
    5228:	d011      	beq.n	524e <usb_handle_standard_request+0x1e6>
    522a:	2905      	cmp	r1, #5
    522c:	d023      	beq.n	5276 <usb_handle_standard_request+0x20e>
		p += p[DESC_bLength];
    522e:	7821      	ldrb	r1, [r4, #0]
    5230:	440c      	add	r4, r1
	while (p[DESC_bLength] != 0U) {
    5232:	7821      	ldrb	r1, [r4, #0]
    5234:	2900      	cmp	r1, #0
    5236:	d1f5      	bne.n	5224 <usb_handle_standard_request+0x1bc>
	if (usb_dev.status_callback) {
    5238:	69f3      	ldr	r3, [r6, #28]
    523a:	b123      	cbz	r3, 5246 <usb_handle_standard_request+0x1de>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    523c:	4641      	mov	r1, r8
    523e:	2007      	movs	r0, #7
    5240:	9201      	str	r2, [sp, #4]
    5242:	4798      	blx	r3
    5244:	9a01      	ldr	r2, [sp, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    5246:	2a00      	cmp	r2, #0
    5248:	f47f af27 	bne.w	509a <usb_handle_standard_request+0x32>
    524c:	e71f      	b.n	508e <usb_handle_standard_request+0x26>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    524e:	f894 9002 	ldrb.w	r9, [r4, #2]
			if (cur_iface == setup->wIndex &&
    5252:	88a8      	ldrh	r0, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    5254:	78e7      	ldrb	r7, [r4, #3]
			if (cur_iface == setup->wIndex &&
    5256:	4581      	cmp	r9, r0
    5258:	4649      	mov	r1, r9
    525a:	d1e8      	bne.n	522e <usb_handle_standard_request+0x1c6>
			    cur_alt_setting == setup->wValue) {
    525c:	f8b5 c002 	ldrh.w	ip, [r5, #2]
			if (cur_iface == setup->wIndex &&
    5260:	4567      	cmp	r7, ip
    5262:	b2b8      	uxth	r0, r7
    5264:	d1e3      	bne.n	522e <usb_handle_standard_request+0x1c6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    5266:	2907      	cmp	r1, #7
    5268:	d842      	bhi.n	52f0 <usb_handle_standard_request+0x288>
		usb_dev.alt_setting[iface] = alt_setting;
    526a:	4431      	add	r1, r6
		return true;
    526c:	46a0      	mov	r8, r4
				ret = usb_set_alt_setting(setup->wIndex,
    526e:	f881 00bb 	strb.w	r0, [r1, #187]	; 0xbb
	return true;
    5272:	2201      	movs	r2, #1
    5274:	e7db      	b.n	522e <usb_handle_standard_request+0x1c6>
			if (cur_iface == setup->wIndex) {
    5276:	88a9      	ldrh	r1, [r5, #4]
    5278:	4549      	cmp	r1, r9
    527a:	d1d8      	bne.n	522e <usb_handle_standard_request+0x1c6>
	if (cur_alt_setting != alt_setting) {
    527c:	78aa      	ldrb	r2, [r5, #2]
    527e:	42ba      	cmp	r2, r7
    5280:	d031      	beq.n	52e6 <usb_handle_standard_request+0x27e>
		ret = reset_endpoint(ep_desc);
    5282:	f894 b002 	ldrb.w	fp, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    5286:	4658      	mov	r0, fp
    5288:	f000 fd8c 	bl	5da4 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    528c:	4658      	mov	r0, fp
    528e:	f002 fed9 	bl	8044 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    5292:	f110 0f78 	cmn.w	r0, #120	; 0x78
    5296:	d111      	bne.n	52bc <usb_handle_standard_request+0x254>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    5298:	f8da 2000 	ldr.w	r2, [sl]
    529c:	f012 0f06 	tst.w	r2, #6
    52a0:	d0e7      	beq.n	5272 <usb_handle_standard_request+0x20a>
    52a2:	2203      	movs	r2, #3
    52a4:	4b16      	ldr	r3, [pc, #88]	; (5300 <usb_handle_standard_request+0x298>)
    52a6:	9203      	str	r2, [sp, #12]
    52a8:	9207      	str	r2, [sp, #28]
    52aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    52ae:	aa07      	add	r2, sp, #28
    52b0:	4650      	mov	r0, sl
    52b2:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    52b6:	f009 fc3b 	bl	eb30 <z_log_msg2_static_create.constprop.0>
    52ba:	e7da      	b.n	5272 <usb_handle_standard_request+0x20a>
	} else if (ret) {
    52bc:	2800      	cmp	r0, #0
    52be:	d0d8      	beq.n	5272 <usb_handle_standard_request+0x20a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    52c0:	f8da 2000 	ldr.w	r2, [sl]
    52c4:	f012 0207 	ands.w	r2, r2, #7
    52c8:	d0b1      	beq.n	522e <usb_handle_standard_request+0x1c6>
    52ca:	2203      	movs	r2, #3
    52cc:	4b0d      	ldr	r3, [pc, #52]	; (5304 <usb_handle_standard_request+0x29c>)
    52ce:	9203      	str	r2, [sp, #12]
    52d0:	9207      	str	r2, [sp, #28]
    52d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    52d6:	aa07      	add	r2, sp, #28
    52d8:	4650      	mov	r0, sl
    52da:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    52de:	f009 fc27 	bl	eb30 <z_log_msg2_static_create.constprop.0>
	return false;
    52e2:	2200      	movs	r2, #0
    52e4:	e7a3      	b.n	522e <usb_handle_standard_request+0x1c6>
		ret = set_endpoint(ep_desc);
    52e6:	4620      	mov	r0, r4
    52e8:	f7ff fda8 	bl	4e3c <set_endpoint>
    52ec:	4602      	mov	r2, r0
    52ee:	e79e      	b.n	522e <usb_handle_standard_request+0x1c6>
    52f0:	46a0      	mov	r8, r4
    52f2:	e7f6      	b.n	52e2 <usb_handle_standard_request+0x27a>
    52f4:	200013a8 	.word	0x200013a8
    52f8:	20001462 	.word	0x20001462
    52fc:	20000250 	.word	0x20000250
    5300:	0001215e 	.word	0x0001215e
    5304:	0001217f 	.word	0x0001217f
	if (usb_reqtype_is_to_host(setup)) {
    5308:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    530c:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    530e:	2a00      	cmp	r2, #0
    5310:	da19      	bge.n	5346 <usb_handle_standard_request+0x2de>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    5312:	2b00      	cmp	r3, #0
    5314:	f47f aebb 	bne.w	508e <usb_handle_standard_request+0x26>
	uint8_t ep = setup->wIndex;
    5318:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    531a:	0663      	lsls	r3, r4, #25
    531c:	d00a      	beq.n	5334 <usb_handle_standard_request+0x2cc>
    531e:	4620      	mov	r0, r4
    5320:	f7ff fd5a 	bl	4dd8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    5324:	2800      	cmp	r0, #0
    5326:	f43f aeb2 	beq.w	508e <usb_handle_standard_request+0x26>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    532a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    532e:	2b00      	cmp	r3, #0
    5330:	f43f aead 	beq.w	508e <usb_handle_standard_request+0x26>
    5334:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    5338:	4620      	mov	r0, r4
    533a:	4629      	mov	r1, r5
    533c:	f002 fe3c 	bl	7fb8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    5340:	2000      	movs	r0, #0
    5342:	7068      	strb	r0, [r5, #1]
    5344:	e6c3      	b.n	50ce <usb_handle_standard_request+0x66>
		switch (setup->bRequest) {
    5346:	2b01      	cmp	r3, #1
    5348:	d008      	beq.n	535c <usb_handle_standard_request+0x2f4>
    534a:	2b03      	cmp	r3, #3
    534c:	f47f ae9f 	bne.w	508e <usb_handle_standard_request+0x26>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    5350:	886b      	ldrh	r3, [r5, #2]
    5352:	2b00      	cmp	r3, #0
    5354:	f47f ae9b 	bne.w	508e <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    5358:	2101      	movs	r1, #1
    535a:	e003      	b.n	5364 <usb_handle_standard_request+0x2fc>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    535c:	8869      	ldrh	r1, [r5, #2]
    535e:	2900      	cmp	r1, #0
    5360:	f47f ae95 	bne.w	508e <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    5364:	88a8      	ldrh	r0, [r5, #4]
    5366:	f7ff fe2b 	bl	4fc0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    536a:	2800      	cmp	r0, #0
    536c:	f47f ae95 	bne.w	509a <usb_handle_standard_request+0x32>
    5370:	e68d      	b.n	508e <usb_handle_standard_request+0x26>
		if (type == USB_DESC_CONFIGURATION) {
    5372:	2a02      	cmp	r2, #2
		*data = p;
    5374:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    5378:	f47f aec0 	bne.w	50fc <usb_handle_standard_request+0x94>
			*len = (p[CONF_DESC_wTotalLength]) |
    537c:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    537e:	603b      	str	r3, [r7, #0]
    5380:	e68b      	b.n	509a <usb_handle_standard_request+0x32>
	if (usb_reqtype_is_to_host(setup)) {
    5382:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    5386:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    5388:	2b00      	cmp	r3, #0
    538a:	f6bf af40 	bge.w	520e <usb_handle_standard_request+0x1a6>
    538e:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    5392:	2800      	cmp	r0, #0
    5394:	f43f af35 	beq.w	5202 <usb_handle_standard_request+0x19a>
    5398:	280a      	cmp	r0, #10
    539a:	f47f ae78 	bne.w	508e <usb_handle_standard_request+0x26>
	while (p[DESC_bLength] != 0U) {
    539e:	7821      	ldrb	r1, [r4, #0]
    53a0:	2900      	cmp	r1, #0
    53a2:	f43f ae74 	beq.w	508e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    53a6:	7863      	ldrb	r3, [r4, #1]
    53a8:	2b04      	cmp	r3, #4
    53aa:	f47f af2e 	bne.w	520a <usb_handle_standard_request+0x1a2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    53ae:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    53b0:	459c      	cmp	ip, r3
    53b2:	f47f af2a 	bne.w	520a <usb_handle_standard_request+0x1a2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    53b6:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    53b8:	bf96      	itet	ls
    53ba:	199b      	addls	r3, r3, r6
	return 0;
    53bc:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    53be:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    53c2:	7013      	strb	r3, [r2, #0]
				*len = 1;
    53c4:	2301      	movs	r3, #1
    53c6:	e7da      	b.n	537e <usb_handle_standard_request+0x316>

000053c8 <usb_write>:
{
    53c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    53cc:	f8df a058 	ldr.w	sl, [pc, #88]	; 5428 <usb_write+0x60>
{
    53d0:	b089      	sub	sp, #36	; 0x24
    53d2:	4605      	mov	r5, r0
    53d4:	460f      	mov	r7, r1
    53d6:	4690      	mov	r8, r2
    53d8:	4699      	mov	r9, r3
    53da:	2604      	movs	r6, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    53dc:	f04f 0b03 	mov.w	fp, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    53e0:	464b      	mov	r3, r9
    53e2:	4642      	mov	r2, r8
    53e4:	4639      	mov	r1, r7
    53e6:	4628      	mov	r0, r5
    53e8:	f002 fe52 	bl	8090 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    53ec:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    53f0:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    53f2:	d115      	bne.n	5420 <usb_write+0x58>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    53f4:	f8da 3000 	ldr.w	r3, [sl]
    53f8:	f013 0f06 	tst.w	r3, #6
    53fc:	d00c      	beq.n	5418 <usb_write+0x50>
    53fe:	4b0b      	ldr	r3, [pc, #44]	; (542c <usb_write+0x64>)
    5400:	f8cd b004 	str.w	fp, [sp, #4]
    5404:	aa05      	add	r2, sp, #20
    5406:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    540a:	4650      	mov	r0, sl
    540c:	e9cd 3506 	strd	r3, r5, [sp, #24]
    5410:	f8cd b014 	str.w	fp, [sp, #20]
    5414:	f009 fb8c 	bl	eb30 <z_log_msg2_static_create.constprop.0>
	z_impl_k_yield();
    5418:	f006 fe5e 	bl	c0d8 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    541c:	3e01      	subs	r6, #1
    541e:	d1df      	bne.n	53e0 <usb_write+0x18>
}
    5420:	4620      	mov	r0, r4
    5422:	b009      	add	sp, #36	; 0x24
    5424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5428:	20000250 	.word	0x20000250
    542c:	000121a1 	.word	0x000121a1

00005430 <usb_data_to_host>:
{
    5430:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    5432:	4c13      	ldr	r4, [pc, #76]	; (5480 <usb_data_to_host+0x50>)
    5434:	7d23      	ldrb	r3, [r4, #20]
    5436:	b9cb      	cbnz	r3, 546c <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    5438:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    543a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    543c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    543e:	ab01      	add	r3, sp, #4
    5440:	2080      	movs	r0, #128	; 0x80
    5442:	f7ff ffc1 	bl	53c8 <usb_write>
		usb_dev.data_buf += chunk;
    5446:	9a01      	ldr	r2, [sp, #4]
    5448:	68a3      	ldr	r3, [r4, #8]
    544a:	4413      	add	r3, r2
    544c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    544e:	68e3      	ldr	r3, [r4, #12]
    5450:	1a9b      	subs	r3, r3, r2
    5452:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    5454:	b943      	cbnz	r3, 5468 <usb_data_to_host+0x38>
    5456:	b13a      	cbz	r2, 5468 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    5458:	6923      	ldr	r3, [r4, #16]
    545a:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    545c:	429a      	cmp	r2, r3
    545e:	dd03      	ble.n	5468 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    5460:	069b      	lsls	r3, r3, #26
    5462:	d101      	bne.n	5468 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    5464:	2301      	movs	r3, #1
    5466:	7523      	strb	r3, [r4, #20]
}
    5468:	b002      	add	sp, #8
    546a:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    546c:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    546e:	461a      	mov	r2, r3
    5470:	4619      	mov	r1, r3
    5472:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    5474:	7523      	strb	r3, [r4, #20]
}
    5476:	b002      	add	sp, #8
    5478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    547c:	f002 be08 	b.w	8090 <usb_dc_ep_write>
    5480:	200013a8 	.word	0x200013a8

00005484 <usb_handle_control_transfer>:
{
    5484:	b530      	push	{r4, r5, lr}
    5486:	b08b      	sub	sp, #44	; 0x2c
	uint32_t chunk = 0U;
    5488:	2300      	movs	r3, #0
{
    548a:	4602      	mov	r2, r0
    548c:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    548e:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    5490:	2800      	cmp	r0, #0
    5492:	d16d      	bne.n	5570 <usb_handle_control_transfer+0xec>
    5494:	2900      	cmp	r1, #0
    5496:	d14a      	bne.n	552e <usb_handle_control_transfer+0xaa>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    5498:	2208      	movs	r2, #8
    549a:	460b      	mov	r3, r1
    549c:	eb0d 0102 	add.w	r1, sp, r2
    54a0:	f009 fe49 	bl	f136 <usb_dc_ep_read>
    54a4:	2800      	cmp	r0, #0
    54a6:	da04      	bge.n	54b2 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    54a8:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    54aa:	f002 fd29 	bl	7f00 <usb_dc_ep_set_stall>
}
    54ae:	b00b      	add	sp, #44	; 0x2c
    54b0:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    54b2:	4c34      	ldr	r4, [pc, #208]	; (5584 <usb_handle_control_transfer+0x100>)
		setup->bRequest = setup_raw.bRequest;
    54b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    54b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    54bc:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    54be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    54c2:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    54c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    54c8:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    54ca:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    54cc:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    54d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    54d4:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    54d6:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    54d8:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    54dc:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    54de:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    54e0:	d418      	bmi.n	5514 <usb_handle_control_transfer+0x90>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    54e2:	2b80      	cmp	r3, #128	; 0x80
    54e4:	d912      	bls.n	550c <usb_handle_control_transfer+0x88>
				LOG_ERR("Request buffer too small");
    54e6:	4828      	ldr	r0, [pc, #160]	; (5588 <usb_handle_control_transfer+0x104>)
    54e8:	6803      	ldr	r3, [r0, #0]
    54ea:	075b      	lsls	r3, r3, #29
    54ec:	d009      	beq.n	5502 <usb_handle_control_transfer+0x7e>
    54ee:	4b27      	ldr	r3, [pc, #156]	; (558c <usb_handle_control_transfer+0x108>)
    54f0:	9308      	str	r3, [sp, #32]
    54f2:	aa07      	add	r2, sp, #28
    54f4:	2302      	movs	r3, #2
    54f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    54fa:	9301      	str	r3, [sp, #4]
    54fc:	9307      	str	r3, [sp, #28]
    54fe:	f009 fb17 	bl	eb30 <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    5502:	2080      	movs	r0, #128	; 0x80
    5504:	f002 fcfc 	bl	7f00 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    5508:	2000      	movs	r0, #0
    550a:	e7ce      	b.n	54aa <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    550c:	b113      	cbz	r3, 5514 <usb_handle_control_transfer+0x90>
				usb_dev.data_buf_residue = setup->wLength;
    550e:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    5512:	e7cc      	b.n	54ae <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    5514:	f7ff fc7c 	bl	4e10 <usb_handle_request.constprop.0>
    5518:	2800      	cmp	r0, #0
    551a:	d0c5      	beq.n	54a8 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    551c:	88e2      	ldrh	r2, [r4, #6]
    551e:	6923      	ldr	r3, [r4, #16]
    5520:	429a      	cmp	r2, r3
    5522:	bfd4      	ite	le
    5524:	60e2      	strle	r2, [r4, #12]
    5526:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    5528:	f7ff ff82 	bl	5430 <usb_data_to_host>
    552c:	e7bf      	b.n	54ae <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    552e:	4c15      	ldr	r4, [pc, #84]	; (5584 <usb_handle_control_transfer+0x100>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    5530:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    5534:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    5536:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    5538:	dc04      	bgt.n	5544 <usb_handle_control_transfer+0xc0>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    553a:	f009 fdfc 	bl	f136 <usb_dc_ep_read>
    553e:	2800      	cmp	r0, #0
    5540:	dab5      	bge.n	54ae <usb_handle_control_transfer+0x2a>
    5542:	e7b1      	b.n	54a8 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    5544:	462a      	mov	r2, r5
    5546:	f009 fdf6 	bl	f136 <usb_dc_ep_read>
    554a:	2800      	cmp	r0, #0
    554c:	dbd9      	blt.n	5502 <usb_handle_control_transfer+0x7e>
		usb_dev.data_buf += chunk;
    554e:	9900      	ldr	r1, [sp, #0]
    5550:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    5552:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    5554:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    5556:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    5558:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    555a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    555c:	2b00      	cmp	r3, #0
    555e:	d1a6      	bne.n	54ae <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    5560:	f104 0338 	add.w	r3, r4, #56	; 0x38
    5564:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    5566:	f7ff fc53 	bl	4e10 <usb_handle_request.constprop.0>
    556a:	2800      	cmp	r0, #0
    556c:	d1dc      	bne.n	5528 <usb_handle_control_transfer+0xa4>
    556e:	e79b      	b.n	54a8 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    5570:	2880      	cmp	r0, #128	; 0x80
    5572:	d19c      	bne.n	54ae <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    5574:	4b03      	ldr	r3, [pc, #12]	; (5584 <usb_handle_control_transfer+0x100>)
    5576:	68da      	ldr	r2, [r3, #12]
    5578:	2a00      	cmp	r2, #0
    557a:	d1d5      	bne.n	5528 <usb_handle_control_transfer+0xa4>
    557c:	7d1b      	ldrb	r3, [r3, #20]
    557e:	2b00      	cmp	r3, #0
    5580:	d1d2      	bne.n	5528 <usb_handle_control_transfer+0xa4>
    5582:	e794      	b.n	54ae <usb_handle_control_transfer+0x2a>
    5584:	200013a8 	.word	0x200013a8
    5588:	20000250 	.word	0x20000250
    558c:	000121c8 	.word	0x000121c8

00005590 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    5590:	4b05      	ldr	r3, [pc, #20]	; (55a8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    5592:	4a06      	ldr	r2, [pc, #24]	; (55ac <usb_set_config+0x1c>)
    5594:	629a      	str	r2, [r3, #40]	; 0x28
    5596:	4a06      	ldr	r2, [pc, #24]	; (55b0 <usb_set_config+0x20>)
    5598:	62da      	str	r2, [r3, #44]	; 0x2c
    559a:	4a06      	ldr	r2, [pc, #24]	; (55b4 <usb_set_config+0x24>)
    559c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    559e:	4a06      	ldr	r2, [pc, #24]	; (55b8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    55a0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    55a2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    55a4:	2000      	movs	r0, #0
    55a6:	4770      	bx	lr
    55a8:	200013a8 	.word	0x200013a8
    55ac:	00005069 	.word	0x00005069
    55b0:	00004ced 	.word	0x00004ced
    55b4:	00004d8d 	.word	0x00004d8d
    55b8:	00004d2d 	.word	0x00004d2d

000055bc <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    55bc:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    55be:	4b10      	ldr	r3, [pc, #64]	; (5600 <usb_device_init+0x44>)
    55c0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    55c4:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    55c6:	b9c4      	cbnz	r4, 55fa <usb_device_init+0x3e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    55c8:	f000 fa12 	bl	59f0 <usb_get_device_descriptor>
	if (!device_descriptor) {
    55cc:	b980      	cbnz	r0, 55f0 <usb_device_init+0x34>
		LOG_ERR("Failed to configure USB device stack");
    55ce:	480d      	ldr	r0, [pc, #52]	; (5604 <usb_device_init+0x48>)
    55d0:	6803      	ldr	r3, [r0, #0]
    55d2:	075b      	lsls	r3, r3, #29
    55d4:	d009      	beq.n	55ea <usb_device_init+0x2e>
    55d6:	4b0c      	ldr	r3, [pc, #48]	; (5608 <usb_device_init+0x4c>)
    55d8:	9306      	str	r3, [sp, #24]
    55da:	aa05      	add	r2, sp, #20
    55dc:	2302      	movs	r3, #2
    55de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    55e2:	9301      	str	r3, [sp, #4]
    55e4:	9305      	str	r3, [sp, #20]
    55e6:	f009 faa3 	bl	eb30 <z_log_msg2_static_create.constprop.0>
    55ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55ee:	e002      	b.n	55f6 <usb_device_init+0x3a>
		return -1;
	}

	usb_set_config(device_descriptor);
    55f0:	f7ff ffce 	bl	5590 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    55f4:	4620      	mov	r0, r4
}
    55f6:	b008      	add	sp, #32
    55f8:	bd10      	pop	{r4, pc}
		return -EALREADY;
    55fa:	f06f 0077 	mvn.w	r0, #119	; 0x77
    55fe:	e7fa      	b.n	55f6 <usb_device_init+0x3a>
    5600:	200013a8 	.word	0x200013a8
    5604:	20000250 	.word	0x20000250
    5608:	000121e1 	.word	0x000121e1

0000560c <usb_enable>:
{
    560c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5610:	4604      	mov	r4, r0
    5612:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    5614:	4d3c      	ldr	r5, [pc, #240]	; (5708 <usb_enable+0xfc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    5616:	483d      	ldr	r0, [pc, #244]	; (570c <usb_enable+0x100>)
    5618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    561c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5620:	f006 f8b0 	bl	b784 <z_impl_k_mutex_lock>
    5624:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    5628:	b18e      	cbz	r6, 564e <usb_enable+0x42>
		LOG_WRN("USB device support already enabled");
    562a:	4839      	ldr	r0, [pc, #228]	; (5710 <usb_enable+0x104>)
    562c:	6803      	ldr	r3, [r0, #0]
    562e:	f013 0f06 	tst.w	r3, #6
    5632:	d009      	beq.n	5648 <usb_enable+0x3c>
    5634:	4b37      	ldr	r3, [pc, #220]	; (5714 <usb_enable+0x108>)
    5636:	9306      	str	r3, [sp, #24]
    5638:	aa05      	add	r2, sp, #20
    563a:	2302      	movs	r3, #2
    563c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    5640:	9301      	str	r3, [sp, #4]
    5642:	9305      	str	r3, [sp, #20]
    5644:	f009 fa74 	bl	eb30 <z_log_msg2_static_create.constprop.0>
		ret = -EALREADY;
    5648:	f06f 0477 	mvn.w	r4, #119	; 0x77
    564c:	e03f      	b.n	56ce <usb_enable+0xc2>
	usb_dev.status_callback = cb;
    564e:	4832      	ldr	r0, [pc, #200]	; (5718 <usb_enable+0x10c>)
	usb_dev.user_status_callback = status_cb;
    5650:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    5652:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    5654:	f002 fe84 	bl	8360 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    5658:	f002 fb8a 	bl	7d70 <usb_dc_attach>
	if (ret < 0) {
    565c:	1e04      	subs	r4, r0, #0
    565e:	db36      	blt.n	56ce <usb_enable+0xc2>
	ret = usb_transfer_init();
    5660:	f000 fbe6 	bl	5e30 <usb_transfer_init>
	if (ret < 0) {
    5664:	1e04      	subs	r4, r0, #0
    5666:	db32      	blt.n	56ce <usb_enable+0xc2>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    5668:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    566a:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    566c:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    5670:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    5674:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    5678:	f002 fc0a 	bl	7e90 <usb_dc_ep_configure>
	if (ret < 0) {
    567c:	1e04      	subs	r4, r0, #0
    567e:	db26      	blt.n	56ce <usb_enable+0xc2>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    5680:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    5682:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    5684:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    5688:	f002 fc02 	bl	7e90 <usb_dc_ep_configure>
	if (ret < 0) {
    568c:	1e04      	subs	r4, r0, #0
    568e:	db1e      	blt.n	56ce <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    5690:	4922      	ldr	r1, [pc, #136]	; (571c <usb_enable+0x110>)
    5692:	4630      	mov	r0, r6
    5694:	f002 fe50 	bl	8338 <usb_dc_ep_set_callback>
	if (ret < 0) {
    5698:	1e04      	subs	r4, r0, #0
    569a:	db18      	blt.n	56ce <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    569c:	491f      	ldr	r1, [pc, #124]	; (571c <usb_enable+0x110>)
    569e:	4638      	mov	r0, r7
    56a0:	f002 fe4a 	bl	8338 <usb_dc_ep_set_callback>
	if (ret < 0) {
    56a4:	1e04      	subs	r4, r0, #0
    56a6:	db12      	blt.n	56ce <usb_enable+0xc2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    56a8:	4c1d      	ldr	r4, [pc, #116]	; (5720 <usb_enable+0x114>)
    56aa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5724 <usb_enable+0x118>
    56ae:	4544      	cmp	r4, r8
    56b0:	d314      	bcc.n	56dc <usb_enable+0xd0>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    56b2:	2000      	movs	r0, #0
    56b4:	f002 fc9c 	bl	7ff0 <usb_dc_ep_enable>
	if (ret < 0) {
    56b8:	1e04      	subs	r4, r0, #0
    56ba:	db08      	blt.n	56ce <usb_enable+0xc2>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    56bc:	2080      	movs	r0, #128	; 0x80
    56be:	f002 fc97 	bl	7ff0 <usb_dc_ep_enable>
	if (ret < 0) {
    56c2:	1e04      	subs	r4, r0, #0
    56c4:	db03      	blt.n	56ce <usb_enable+0xc2>
	usb_dev.enabled = true;
    56c6:	2301      	movs	r3, #1
    56c8:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    56cc:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    56ce:	480f      	ldr	r0, [pc, #60]	; (570c <usb_enable+0x100>)
    56d0:	f006 f8d0 	bl	b874 <z_impl_k_mutex_unlock>
}
    56d4:	4620      	mov	r0, r4
    56d6:	b008      	add	sp, #32
    56d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    56dc:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    56de:	2600      	movs	r6, #0
    56e0:	7f22      	ldrb	r2, [r4, #28]
    56e2:	b2f3      	uxtb	r3, r6
    56e4:	429a      	cmp	r2, r3
    56e6:	d801      	bhi.n	56ec <usb_enable+0xe0>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    56e8:	3424      	adds	r4, #36	; 0x24
    56ea:	e7e0      	b.n	56ae <usb_enable+0xa2>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    56ec:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    56f0:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    56f4:	7910      	ldrb	r0, [r2, #4]
    56f6:	f002 fe1f 	bl	8338 <usb_dc_ep_set_callback>
    56fa:	3601      	adds	r6, #1
    56fc:	2800      	cmp	r0, #0
    56fe:	d0ef      	beq.n	56e0 <usb_enable+0xd4>
    5700:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5704:	e7e3      	b.n	56ce <usb_enable+0xc2>
    5706:	bf00      	nop
    5708:	200013a8 	.word	0x200013a8
    570c:	20000278 	.word	0x20000278
    5710:	20000250 	.word	0x20000250
    5714:	00012206 	.word	0x00012206
    5718:	00004f25 	.word	0x00004f25
    571c:	00005485 	.word	0x00005485
    5720:	200003ac 	.word	0x200003ac
    5724:	200003d0 	.word	0x200003d0

00005728 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    5728:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    572a:	4b1f      	ldr	r3, [pc, #124]	; (57a8 <usb_update_sn_string_descriptor+0x80>)
{
    572c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    572e:	aa05      	add	r2, sp, #20
    5730:	f103 0510 	add.w	r5, r3, #16
    5734:	6818      	ldr	r0, [r3, #0]
    5736:	6859      	ldr	r1, [r3, #4]
    5738:	4614      	mov	r4, r2
    573a:	c403      	stmia	r4!, {r0, r1}
    573c:	3308      	adds	r3, #8
    573e:	42ab      	cmp	r3, r5
    5740:	4622      	mov	r2, r4
    5742:	d1f7      	bne.n	5734 <usb_update_sn_string_descriptor+0xc>
    5744:	781b      	ldrb	r3, [r3, #0]
    5746:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    5748:	2210      	movs	r2, #16
    574a:	2100      	movs	r1, #0
    574c:	a801      	add	r0, sp, #4
    574e:	f009 fca4 	bl	f09a <memset>
	memset(sn, 0, sizeof(sn));
    5752:	2212      	movs	r2, #18
    5754:	2100      	movs	r1, #0
    5756:	4815      	ldr	r0, [pc, #84]	; (57ac <usb_update_sn_string_descriptor+0x84>)
    5758:	f009 fc9f 	bl	f09a <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    575c:	2110      	movs	r1, #16
    575e:	a801      	add	r0, sp, #4
    5760:	f009 fddb 	bl	f31a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    5764:	2800      	cmp	r0, #0
    5766:	dd1b      	ble.n	57a0 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    5768:	2808      	cmp	r0, #8
    576a:	bfb8      	it	lt
    576c:	2008      	movlt	r0, #8
    576e:	3808      	subs	r0, #8
    5770:	ab01      	add	r3, sp, #4
    5772:	4a0e      	ldr	r2, [pc, #56]	; (57ac <usb_update_sn_string_descriptor+0x84>)
    5774:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    5776:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    5778:	f810 3b01 	ldrb.w	r3, [r0], #1
    577c:	ac0a      	add	r4, sp, #40	; 0x28
    577e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    5782:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    5786:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    578a:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    578c:	ac0a      	add	r4, sp, #40	; 0x28
    578e:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    5790:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    5792:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    5796:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    5798:	2908      	cmp	r1, #8
    579a:	f102 0202 	add.w	r2, r2, #2
    579e:	d1eb      	bne.n	5778 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    57a0:	4802      	ldr	r0, [pc, #8]	; (57ac <usb_update_sn_string_descriptor+0x84>)
    57a2:	b00b      	add	sp, #44	; 0x2c
    57a4:	bd30      	pop	{r4, r5, pc}
    57a6:	bf00      	nop
    57a8:	00012234 	.word	0x00012234
    57ac:	200021b5 	.word	0x200021b5

000057b0 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    57b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57b4:	4604      	mov	r4, r0
    57b6:	b08b      	sub	sp, #44	; 0x2c
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    57b8:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    57ba:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    57be:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    57c0:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    57c2:	4637      	mov	r7, r6

	while (head->bLength != 0U) {
    57c4:	7820      	ldrb	r0, [r4, #0]
    57c6:	b920      	cbnz	r0, 57d2 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    57c8:	4b7f      	ldr	r3, [pc, #508]	; (59c8 <usb_fix_descriptor+0x218>)
    57ca:	3402      	adds	r4, #2
    57cc:	429c      	cmp	r4, r3
    57ce:	d039      	beq.n	5844 <usb_fix_descriptor+0x94>
    57d0:	e7f2      	b.n	57b8 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    57d2:	7863      	ldrb	r3, [r4, #1]
    57d4:	2b05      	cmp	r3, #5
    57d6:	d805      	bhi.n	57e4 <usb_fix_descriptor+0x34>
    57d8:	e8df f003 	tbb	[pc, r3]
    57dc:	a30304a3 	.word	0xa30304a3
    57e0:	2c07      	.short	0x2c07
    57e2:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    57e4:	7823      	ldrb	r3, [r4, #0]
    57e6:	441c      	add	r4, r3
    57e8:	e7ec      	b.n	57c4 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    57ea:	78e3      	ldrb	r3, [r4, #3]
    57ec:	2b00      	cmp	r3, #0
    57ee:	d1f9      	bne.n	57e4 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    57f0:	78a3      	ldrb	r3, [r4, #2]
    57f2:	b1e3      	cbz	r3, 582e <usb_fix_descriptor+0x7e>
			numof_ifaces++;
    57f4:	f10a 0a01 	add.w	sl, sl, #1
    57f8:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    57fc:	e7f2      	b.n	57e4 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    57fe:	686a      	ldr	r2, [r5, #4]
    5800:	4294      	cmp	r4, r2
    5802:	f000 80d9 	beq.w	59b8 <usb_fix_descriptor+0x208>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    5806:	3524      	adds	r5, #36	; 0x24
    5808:	429d      	cmp	r5, r3
    580a:	d3f8      	bcc.n	57fe <usb_fix_descriptor+0x4e>
					LOG_ERR("There is no usb_cfg_data "
    580c:	486f      	ldr	r0, [pc, #444]	; (59cc <usb_fix_descriptor+0x21c>)
    580e:	6803      	ldr	r3, [r0, #0]
    5810:	075b      	lsls	r3, r3, #29
    5812:	d015      	beq.n	5840 <usb_fix_descriptor+0x90>
    5814:	4b6e      	ldr	r3, [pc, #440]	; (59d0 <usb_fix_descriptor+0x220>)
    5816:	e9cd 3408 	strd	r3, r4, [sp, #32]
    581a:	2303      	movs	r3, #3
    581c:	9303      	str	r3, [sp, #12]
    581e:	9307      	str	r3, [sp, #28]
    5820:	2300      	movs	r3, #0
    5822:	aa07      	add	r2, sp, #28
    5824:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5828:	f008 f861 	bl	d8ee <z_impl_z_log_msg2_static_create>
    582c:	e008      	b.n	5840 <usb_fix_descriptor+0x90>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    582e:	4d69      	ldr	r5, [pc, #420]	; (59d4 <usb_fix_descriptor+0x224>)
    5830:	4b69      	ldr	r3, [pc, #420]	; (59d8 <usb_fix_descriptor+0x228>)
    5832:	e7e9      	b.n	5808 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    5834:	2d00      	cmp	r5, #0
    5836:	d171      	bne.n	591c <usb_fix_descriptor+0x16c>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    5838:	4864      	ldr	r0, [pc, #400]	; (59cc <usb_fix_descriptor+0x21c>)
    583a:	6803      	ldr	r3, [r0, #0]
    583c:	075d      	lsls	r5, r3, #29
    583e:	d104      	bne.n	584a <usb_fix_descriptor+0x9a>
				return -1;
    5840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    5844:	b00b      	add	sp, #44	; 0x2c
    5846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    584a:	4b64      	ldr	r3, [pc, #400]	; (59dc <usb_fix_descriptor+0x22c>)
				LOG_ERR("Failed to validate endpoints");
    584c:	9308      	str	r3, [sp, #32]
    584e:	2302      	movs	r3, #2
    5850:	9303      	str	r3, [sp, #12]
    5852:	9307      	str	r3, [sp, #28]
    5854:	2300      	movs	r3, #0
    5856:	aa07      	add	r2, sp, #28
    5858:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    585c:	e7e4      	b.n	5828 <usb_fix_descriptor+0x78>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    585e:	6a2a      	ldr	r2, [r5, #32]
    5860:	f894 c002 	ldrb.w	ip, [r4, #2]
    5864:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5868:	7910      	ldrb	r0, [r2, #4]
    586a:	4584      	cmp	ip, r0
    586c:	d009      	beq.n	5882 <usb_fix_descriptor+0xd2>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    586e:	3301      	adds	r3, #1
    5870:	7f2a      	ldrb	r2, [r5, #28]
    5872:	4293      	cmp	r3, r2
    5874:	d3f3      	bcc.n	585e <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    5876:	4855      	ldr	r0, [pc, #340]	; (59cc <usb_fix_descriptor+0x21c>)
    5878:	6803      	ldr	r3, [r0, #0]
    587a:	075c      	lsls	r4, r3, #29
    587c:	d0e0      	beq.n	5840 <usb_fix_descriptor+0x90>
    587e:	4b58      	ldr	r3, [pc, #352]	; (59e0 <usb_fix_descriptor+0x230>)
    5880:	e7e4      	b.n	584c <usb_fix_descriptor+0x9c>
    5882:	f04f 0801 	mov.w	r8, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    5886:	78e0      	ldrb	r0, [r4, #3]
    5888:	f000 0003 	and.w	r0, r0, #3
    588c:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    5890:	7920      	ldrb	r0, [r4, #4]
    5892:	f894 c005 	ldrb.w	ip, [r4, #5]
    5896:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    589a:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    589e:	f994 0002 	ldrsb.w	r0, [r4, #2]
    58a2:	2800      	cmp	r0, #0
    58a4:	fa5f f988 	uxtb.w	r9, r8
    58a8:	da2a      	bge.n	5900 <usb_fix_descriptor+0x150>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    58aa:	f108 0010 	add.w	r0, r8, #16
    58ae:	fa01 f000 	lsl.w	r0, r1, r0
    58b2:	ea10 0f0b 	tst.w	r0, fp
    58b6:	d12b      	bne.n	5910 <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    58b8:	f069 007f 	orn	r0, r9, #127	; 0x7f
    58bc:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    58c0:	a804      	add	r0, sp, #16
    58c2:	e9cd 3200 	strd	r3, r2, [sp]
    58c6:	f002 faa3 	bl	7e10 <usb_dc_ep_check_cap>
    58ca:	e9dd 3200 	ldrd	r3, r2, [sp]
    58ce:	2101      	movs	r1, #1
    58d0:	b9f0      	cbnz	r0, 5910 <usb_fix_descriptor+0x160>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    58d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    58d6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    58d8:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    58dc:	bf1c      	itt	ne
    58de:	f109 0910 	addne.w	r9, r9, #16
    58e2:	fa5f f989 	uxtbne.w	r9, r9
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    58e6:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    58e8:	bf18      	it	ne
    58ea:	fa01 f909 	lslne.w	r9, r1, r9
    58ee:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    58f0:	bf0a      	itet	eq
    58f2:	fa01 f308 	lsleq.w	r3, r1, r8
					*requested_ep |= (1U << (idx + 16U));
    58f6:	ea4b 0b09 	orrne.w	fp, fp, r9
					*requested_ep |= (1U << idx);
    58fa:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    58fe:	e771      	b.n	57e4 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    5900:	fa01 f008 	lsl.w	r0, r1, r8
    5904:	ea10 0f0b 	tst.w	r0, fp
    5908:	d102      	bne.n	5910 <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = idx;
    590a:	f88d 9010 	strb.w	r9, [sp, #16]
    590e:	e7d7      	b.n	58c0 <usb_fix_descriptor+0x110>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    5910:	f108 0801 	add.w	r8, r8, #1
    5914:	f1b8 0f10 	cmp.w	r8, #16
    5918:	d1b5      	bne.n	5886 <usb_fix_descriptor+0xd6>
    591a:	e7a8      	b.n	586e <usb_fix_descriptor+0xbe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    591c:	2300      	movs	r3, #0
    591e:	2101      	movs	r1, #1
    5920:	e7a6      	b.n	5870 <usb_fix_descriptor+0xc0>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    5922:	2e03      	cmp	r6, #3
    5924:	d12d      	bne.n	5982 <usb_fix_descriptor+0x1d2>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    5926:	f7ff feff 	bl	5728 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    592a:	4680      	mov	r8, r0
    592c:	b1b8      	cbz	r0, 595e <usb_fix_descriptor+0x1ae>
	runtime_sn_len = strlen(runtime_sn);
    592e:	f009 fb53 	bl	efd8 <strlen>
	if (!runtime_sn_len) {
    5932:	4681      	mov	r9, r0
    5934:	b198      	cbz	r0, 595e <usb_fix_descriptor+0x1ae>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    5936:	482b      	ldr	r0, [pc, #172]	; (59e4 <usb_fix_descriptor+0x234>)
    5938:	f009 fb4e 	bl	efd8 <strlen>
	if (runtime_sn_len != default_sn_len) {
    593c:	4581      	cmp	r9, r0
    593e:	d01a      	beq.n	5976 <usb_fix_descriptor+0x1c6>
		LOG_ERR("the new SN descriptor doesn't have the same "
    5940:	4822      	ldr	r0, [pc, #136]	; (59cc <usb_fix_descriptor+0x21c>)
    5942:	6803      	ldr	r3, [r0, #0]
    5944:	0759      	lsls	r1, r3, #29
    5946:	d00a      	beq.n	595e <usb_fix_descriptor+0x1ae>
    5948:	4b27      	ldr	r3, [pc, #156]	; (59e8 <usb_fix_descriptor+0x238>)
    594a:	9308      	str	r3, [sp, #32]
    594c:	2302      	movs	r3, #2
    594e:	9303      	str	r3, [sp, #12]
    5950:	9307      	str	r3, [sp, #28]
    5952:	2300      	movs	r3, #0
    5954:	aa07      	add	r2, sp, #28
    5956:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    595a:	f007 ffc8 	bl	d8ee <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    595e:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    5960:	f06f 0102 	mvn.w	r1, #2
    5964:	18e2      	adds	r2, r4, r3
    5966:	1b09      	subs	r1, r1, r4
    5968:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    596c:	42d1      	cmn	r1, r2
    596e:	d512      	bpl.n	5996 <usb_fix_descriptor+0x1e6>
			str_descr_idx += 1U;
    5970:	3601      	adds	r6, #1
    5972:	b2f6      	uxtb	r6, r6
			break;
    5974:	e736      	b.n	57e4 <usb_fix_descriptor+0x34>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    5976:	464a      	mov	r2, r9
    5978:	4641      	mov	r1, r8
    597a:	1ca0      	adds	r0, r4, #2
    597c:	f009 fb82 	bl	f084 <memcpy>
    5980:	e7ed      	b.n	595e <usb_fix_descriptor+0x1ae>
			if (str_descr_idx) {
    5982:	2e00      	cmp	r6, #0
    5984:	d1eb      	bne.n	595e <usb_fix_descriptor+0x1ae>
				if (!cfg_descr) {
    5986:	b97f      	cbnz	r7, 59a8 <usb_fix_descriptor+0x1f8>
					LOG_ERR("Incomplete device descriptor");
    5988:	4810      	ldr	r0, [pc, #64]	; (59cc <usb_fix_descriptor+0x21c>)
    598a:	6803      	ldr	r3, [r0, #0]
    598c:	075a      	lsls	r2, r3, #29
    598e:	f43f af57 	beq.w	5840 <usb_fix_descriptor+0x90>
    5992:	4b16      	ldr	r3, [pc, #88]	; (59ec <usb_fix_descriptor+0x23c>)
    5994:	e75a      	b.n	584c <usb_fix_descriptor+0x9c>
		buf[i] = 0U;
    5996:	f04f 0000 	mov.w	r0, #0
    599a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    599e:	f813 0901 	ldrb.w	r0, [r3], #-1
    59a2:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    59a6:	e7e1      	b.n	596c <usb_fix_descriptor+0x1bc>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    59a8:	1be3      	subs	r3, r4, r7
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    59aa:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    59ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    59b0:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    59b2:	f887 a004 	strb.w	sl, [r7, #4]
    59b6:	e7db      	b.n	5970 <usb_fix_descriptor+0x1c0>
				if (cfg_data->interface_config) {
    59b8:	68ab      	ldr	r3, [r5, #8]
    59ba:	2b00      	cmp	r3, #0
    59bc:	f43f af1a 	beq.w	57f4 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    59c0:	4651      	mov	r1, sl
    59c2:	4620      	mov	r0, r4
    59c4:	4798      	blx	r3
    59c6:	e715      	b.n	57f4 <usb_fix_descriptor+0x44>
    59c8:	200003ab 	.word	0x200003ab
    59cc:	2000024c 	.word	0x2000024c
    59d0:	00012245 	.word	0x00012245
    59d4:	200003ac 	.word	0x200003ac
    59d8:	200003d0 	.word	0x200003d0
    59dc:	00012265 	.word	0x00012265
    59e0:	000122a6 	.word	0x000122a6
    59e4:	00012234 	.word	0x00012234
    59e8:	000122c3 	.word	0x000122c3
    59ec:	0001230e 	.word	0x0001230e

000059f0 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    59f0:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    59f2:	480e      	ldr	r0, [pc, #56]	; (5a2c <usb_get_device_descriptor+0x3c>)
{
    59f4:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    59f6:	f7ff fedb 	bl	57b0 <usb_fix_descriptor>
    59fa:	b198      	cbz	r0, 5a24 <usb_get_device_descriptor+0x34>
		LOG_ERR("Failed to fixup USB descriptor");
    59fc:	480c      	ldr	r0, [pc, #48]	; (5a30 <usb_get_device_descriptor+0x40>)
    59fe:	6803      	ldr	r3, [r0, #0]
    5a00:	f013 0307 	ands.w	r3, r3, #7
    5a04:	d010      	beq.n	5a28 <usb_get_device_descriptor+0x38>
    5a06:	4b0b      	ldr	r3, [pc, #44]	; (5a34 <usb_get_device_descriptor+0x44>)
    5a08:	9306      	str	r3, [sp, #24]
    5a0a:	2302      	movs	r3, #2
    5a0c:	9301      	str	r3, [sp, #4]
    5a0e:	9305      	str	r3, [sp, #20]
    5a10:	2300      	movs	r3, #0
    5a12:	aa05      	add	r2, sp, #20
    5a14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5a18:	f007 ff69 	bl	d8ee <z_impl_z_log_msg2_static_create>
		return NULL;
    5a1c:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    5a1e:	b009      	add	sp, #36	; 0x24
    5a20:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    5a24:	4801      	ldr	r0, [pc, #4]	; (5a2c <usb_get_device_descriptor+0x3c>)
    5a26:	e7fa      	b.n	5a1e <usb_get_device_descriptor+0x2e>
		return NULL;
    5a28:	4618      	mov	r0, r3
    5a2a:	e7f8      	b.n	5a1e <usb_get_device_descriptor+0x2e>
    5a2c:	200002ec 	.word	0x200002ec
    5a30:	2000024c 	.word	0x2000024c
    5a34:	0001232b 	.word	0x0001232b

00005a38 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    5a38:	b510      	push	{r4, lr}
    5a3a:	4b09      	ldr	r3, [pc, #36]	; (5a60 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5a3c:	2100      	movs	r1, #0
    5a3e:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    5a40:	781c      	ldrb	r4, [r3, #0]
    5a42:	4284      	cmp	r4, r0
    5a44:	d105      	bne.n	5a52 <usb_ep_get_transfer+0x1a>
    5a46:	685c      	ldr	r4, [r3, #4]
    5a48:	b11c      	cbz	r4, 5a52 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    5a4a:	2048      	movs	r0, #72	; 0x48
    5a4c:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    5a50:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5a52:	3101      	adds	r1, #1
    5a54:	2904      	cmp	r1, #4
    5a56:	f103 0348 	add.w	r3, r3, #72	; 0x48
    5a5a:	d1f1      	bne.n	5a40 <usb_ep_get_transfer+0x8>
	return NULL;
    5a5c:	2000      	movs	r0, #0
    5a5e:	e7f7      	b.n	5a50 <usb_ep_get_transfer+0x18>
    5a60:	2000146c 	.word	0x2000146c

00005a64 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    5a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5a68:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    5a6a:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    5a6e:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    5a72:	3310      	adds	r3, #16
{
    5a74:	af00      	add	r7, sp, #0
    5a76:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    5a78:	d111      	bne.n	5a9e <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    5a7a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    5a7c:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    5a80:	f013 0602 	ands.w	r6, r3, #2
    5a84:	d053      	beq.n	5b2e <usb_transfer_work+0xca>
		if (!trans->bsize) {
    5a86:	bb0a      	cbnz	r2, 5acc <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    5a88:	f013 0304 	ands.w	r3, r3, #4
    5a8c:	d104      	bne.n	5a98 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    5a8e:	461a      	mov	r2, r3
    5a90:	4619      	mov	r1, r3
    5a92:	4628      	mov	r0, r5
    5a94:	f7ff fc98 	bl	53c8 <usb_write>
			}
			trans->status = 0;
    5a98:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    5a9a:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    5a9e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5aa2:	3310      	adds	r3, #16
    5aa4:	d00e      	beq.n	5ac4 <usb_transfer_work+0x60>
    5aa6:	f854 6c20 	ldr.w	r6, [r4, #-32]
    5aaa:	b15e      	cbz	r6, 5ac4 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    5aac:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    5ab0:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    5ab4:	f009 ffe1 	bl	fa7a <k_is_in_isr>
    5ab8:	2800      	cmp	r0, #0
    5aba:	d07b      	beq.n	5bb4 <usb_transfer_work+0x150>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5abc:	4845      	ldr	r0, [pc, #276]	; (5bd4 <usb_transfer_work+0x170>)
    5abe:	4621      	mov	r1, r4
    5ac0:	f00a f8b3 	bl	fc2a <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    5ac4:	370c      	adds	r7, #12
    5ac6:	46bd      	mov	sp, r7
    5ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    5acc:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    5ad0:	463b      	mov	r3, r7
    5ad2:	4628      	mov	r0, r5
    5ad4:	f7ff fc78 	bl	53c8 <usb_write>
		if (ret) {
    5ad8:	4603      	mov	r3, r0
    5ada:	b1b8      	cbz	r0, 5b0c <usb_transfer_work+0xa8>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    5adc:	483e      	ldr	r0, [pc, #248]	; (5bd8 <usb_transfer_work+0x174>)
    5ade:	6802      	ldr	r2, [r0, #0]
    5ae0:	0751      	lsls	r1, r2, #29
    5ae2:	d010      	beq.n	5b06 <usb_transfer_work+0xa2>
    5ae4:	493d      	ldr	r1, [pc, #244]	; (5bdc <usb_transfer_work+0x178>)
    5ae6:	466e      	mov	r6, sp
    5ae8:	b088      	sub	sp, #32
    5aea:	466a      	mov	r2, sp
    5aec:	e9c2 1304 	strd	r1, r3, [r2, #16]
    5af0:	2304      	movs	r3, #4
    5af2:	6195      	str	r5, [r2, #24]
    5af4:	607b      	str	r3, [r7, #4]
    5af6:	f842 3f0c 	str.w	r3, [r2, #12]!
    5afa:	2300      	movs	r3, #0
    5afc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5b00:	f007 fef5 	bl	d8ee <z_impl_z_log_msg2_static_create>
    5b04:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    5b06:	f06f 0315 	mvn.w	r3, #21
    5b0a:	e7c6      	b.n	5a9a <usb_transfer_work+0x36>
		trans->buffer += bytes;
    5b0c:	683a      	ldr	r2, [r7, #0]
    5b0e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5b12:	4413      	add	r3, r2
    5b14:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    5b18:	f854 3c28 	ldr.w	r3, [r4, #-40]
    5b1c:	1a9b      	subs	r3, r3, r2
    5b1e:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    5b22:	f854 3c24 	ldr.w	r3, [r4, #-36]
    5b26:	4413      	add	r3, r2
    5b28:	f844 3c24 	str.w	r3, [r4, #-36]
    5b2c:	e7b7      	b.n	5a9e <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    5b2e:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    5b32:	463b      	mov	r3, r7
    5b34:	4628      	mov	r0, r5
    5b36:	f002 fb45 	bl	81c4 <usb_dc_ep_read_wait>
		if (ret) {
    5b3a:	4603      	mov	r3, r0
    5b3c:	b1a8      	cbz	r0, 5b6a <usb_transfer_work+0x106>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    5b3e:	4826      	ldr	r0, [pc, #152]	; (5bd8 <usb_transfer_work+0x174>)
    5b40:	6802      	ldr	r2, [r0, #0]
    5b42:	0752      	lsls	r2, r2, #29
    5b44:	d0df      	beq.n	5b06 <usb_transfer_work+0xa2>
    5b46:	4925      	ldr	r1, [pc, #148]	; (5bdc <usb_transfer_work+0x178>)
    5b48:	46e8      	mov	r8, sp
    5b4a:	b088      	sub	sp, #32
    5b4c:	466a      	mov	r2, sp
    5b4e:	e9c2 1304 	strd	r1, r3, [r2, #16]
    5b52:	2304      	movs	r3, #4
    5b54:	6195      	str	r5, [r2, #24]
    5b56:	607b      	str	r3, [r7, #4]
    5b58:	f842 3f0c 	str.w	r3, [r2, #12]!
    5b5c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5b60:	4633      	mov	r3, r6
    5b62:	f007 fec4 	bl	d8ee <z_impl_z_log_msg2_static_create>
    5b66:	46c5      	mov	sp, r8
    5b68:	e7cd      	b.n	5b06 <usb_transfer_work+0xa2>
		trans->buffer += bytes;
    5b6a:	683e      	ldr	r6, [r7, #0]
    5b6c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5b70:	4433      	add	r3, r6
    5b72:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    5b76:	f854 3c28 	ldr.w	r3, [r4, #-40]
    5b7a:	1b9b      	subs	r3, r3, r6
    5b7c:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    5b80:	f854 3c24 	ldr.w	r3, [r4, #-36]
    5b84:	4433      	add	r3, r6
    5b86:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    5b8a:	2e00      	cmp	r6, #0
    5b8c:	d084      	beq.n	5a98 <usb_transfer_work+0x34>
    5b8e:	4628      	mov	r0, r5
    5b90:	f002 fbec 	bl	836c <usb_dc_ep_mps>
    5b94:	fbb6 f3f0 	udiv	r3, r6, r0
    5b98:	fb03 6610 	mls	r6, r3, r0, r6
    5b9c:	2e00      	cmp	r6, #0
    5b9e:	f47f af7b 	bne.w	5a98 <usb_transfer_work+0x34>
    5ba2:	f854 3c28 	ldr.w	r3, [r4, #-40]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	f43f af76 	beq.w	5a98 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    5bac:	4628      	mov	r0, r5
    5bae:	f002 fb6b 	bl	8288 <usb_dc_ep_read_continue>
    5bb2:	e774      	b.n	5a9e <usb_transfer_work+0x3a>
		trans->cb = NULL;
    5bb4:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    5bb8:	f1a4 0018 	sub.w	r0, r4, #24
    5bbc:	f005 fed2 	bl	b964 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    5bc0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5bc4:	338c      	adds	r3, #140	; 0x8c
    5bc6:	f43f af7d 	beq.w	5ac4 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    5bca:	464a      	mov	r2, r9
    5bcc:	4641      	mov	r1, r8
    5bce:	4628      	mov	r0, r5
    5bd0:	47b0      	blx	r6
    5bd2:	e777      	b.n	5ac4 <usb_transfer_work+0x60>
    5bd4:	20000b78 	.word	0x20000b78
    5bd8:	20000258 	.word	0x20000258
    5bdc:	00012359 	.word	0x00012359

00005be0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    5be0:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    5be2:	1e4b      	subs	r3, r1, #1
    5be4:	2b01      	cmp	r3, #1
{
    5be6:	b088      	sub	sp, #32
    5be8:	4606      	mov	r6, r0
    5bea:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    5bec:	d81c      	bhi.n	5c28 <usb_transfer_ep_callback+0x48>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    5bee:	f7ff ff23 	bl	5a38 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    5bf2:	4604      	mov	r4, r0
    5bf4:	b9d0      	cbnz	r0, 5c2c <usb_transfer_ep_callback+0x4c>
		if (status == USB_DC_EP_DATA_OUT) {
    5bf6:	2d01      	cmp	r5, #1
    5bf8:	d116      	bne.n	5c28 <usb_transfer_ep_callback+0x48>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    5bfa:	466b      	mov	r3, sp
    5bfc:	2201      	movs	r2, #1
    5bfe:	a902      	add	r1, sp, #8
    5c00:	4630      	mov	r0, r6
    5c02:	f002 fadf 	bl	81c4 <usb_dc_ep_read_wait>
			} while (bytes);
    5c06:	9b00      	ldr	r3, [sp, #0]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d1f6      	bne.n	5bfa <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    5c0c:	4811      	ldr	r0, [pc, #68]	; (5c54 <usb_transfer_ep_callback+0x74>)
    5c0e:	6802      	ldr	r2, [r0, #0]
    5c10:	0752      	lsls	r2, r2, #29
    5c12:	d009      	beq.n	5c28 <usb_transfer_ep_callback+0x48>
    5c14:	4a10      	ldr	r2, [pc, #64]	; (5c58 <usb_transfer_ep_callback+0x78>)
    5c16:	9206      	str	r2, [sp, #24]
    5c18:	2202      	movs	r2, #2
    5c1a:	9201      	str	r2, [sp, #4]
    5c1c:	9205      	str	r2, [sp, #20]
    5c1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c22:	aa05      	add	r2, sp, #20
    5c24:	f007 fe63 	bl	d8ee <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    5c28:	b008      	add	sp, #32
    5c2a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    5c2c:	f009 ff25 	bl	fa7a <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5c30:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    5c34:	b108      	cbz	r0, 5c3a <usb_transfer_ep_callback+0x5a>
    5c36:	2d01      	cmp	r5, #1
    5c38:	d105      	bne.n	5c46 <usb_transfer_ep_callback+0x66>
		usb_transfer_work(&trans->work);
    5c3a:	4608      	mov	r0, r1
}
    5c3c:	b008      	add	sp, #32
    5c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    5c42:	f7ff bf0f 	b.w	5a64 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5c46:	4805      	ldr	r0, [pc, #20]	; (5c5c <usb_transfer_ep_callback+0x7c>)
}
    5c48:	b008      	add	sp, #32
    5c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5c4e:	f009 bfec 	b.w	fc2a <k_work_submit_to_queue>
    5c52:	bf00      	nop
    5c54:	20000258 	.word	0x20000258
    5c58:	00012376 	.word	0x00012376
    5c5c:	20000b78 	.word	0x20000b78

00005c60 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    5c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c64:	b08b      	sub	sp, #44	; 0x2c
    5c66:	4605      	mov	r5, r0
    5c68:	9100      	str	r1, [sp, #0]
    5c6a:	4616      	mov	r6, r2
    5c6c:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    5c6e:	f008 ff92 	bl	eb96 <usb_transfer_is_busy>
    5c72:	4604      	mov	r4, r0
    5c74:	2800      	cmp	r0, #0
    5c76:	f040 8086 	bne.w	5d86 <usb_transfer+0x126>
	__asm__ volatile(
    5c7a:	f04f 0320 	mov.w	r3, #32
    5c7e:	f3ef 8211 	mrs	r2, BASEPRI
    5c82:	f383 8812 	msr	BASEPRI_MAX, r3
    5c86:	f3bf 8f6f 	isb	sy
    5c8a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 5d8c <usb_transfer+0x12c>
    5c8e:	9201      	str	r2, [sp, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5c90:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    5c94:	fb0a f704 	mul.w	r7, sl, r4
	return z_impl_k_sem_take(sem, timeout);
    5c98:	2300      	movs	r3, #0
    5c9a:	2200      	movs	r2, #0
    5c9c:	4648      	mov	r0, r9
    5c9e:	f005 fe87 	bl	b9b0 <z_impl_k_sem_take>
    5ca2:	4603      	mov	r3, r0
    5ca4:	bb18      	cbnz	r0, 5cee <usb_transfer+0x8e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    5ca6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 5d90 <usb_transfer+0x130>
    5caa:	eb0a 0b07 	add.w	fp, sl, r7
    5cae:	f8db 4004 	ldr.w	r4, [fp, #4]
    5cb2:	f114 0f10 	cmn.w	r4, #16
    5cb6:	d131      	bne.n	5d1c <usb_transfer+0xbc>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    5cb8:	4836      	ldr	r0, [pc, #216]	; (5d94 <usb_transfer+0x134>)
    5cba:	6802      	ldr	r2, [r0, #0]
    5cbc:	0752      	lsls	r2, r2, #29
    5cbe:	d00a      	beq.n	5cd6 <usb_transfer+0x76>
    5cc0:	4a35      	ldr	r2, [pc, #212]	; (5d98 <usb_transfer+0x138>)
    5cc2:	e9cd 2508 	strd	r2, r5, [sp, #32]
    5cc6:	2203      	movs	r2, #3
    5cc8:	9203      	str	r2, [sp, #12]
    5cca:	9207      	str	r2, [sp, #28]
    5ccc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5cd0:	aa07      	add	r2, sp, #28
    5cd2:	f007 fe0c 	bl	d8ee <z_impl_z_log_msg2_static_create>
	z_impl_k_sem_give(sem);
    5cd6:	4648      	mov	r0, r9
    5cd8:	f005 fe44 	bl	b964 <z_impl_k_sem_give>
	__asm__ volatile(
    5cdc:	9b01      	ldr	r3, [sp, #4]
    5cde:	f383 8811 	msr	BASEPRI, r3
    5ce2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    5ce6:	4620      	mov	r0, r4
    5ce8:	b00b      	add	sp, #44	; 0x2c
    5cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5cee:	3401      	adds	r4, #1
    5cf0:	2c04      	cmp	r4, #4
    5cf2:	f109 0948 	add.w	r9, r9, #72	; 0x48
    5cf6:	d1cd      	bne.n	5c94 <usb_transfer+0x34>
		LOG_ERR("No transfer slot available");
    5cf8:	4826      	ldr	r0, [pc, #152]	; (5d94 <usb_transfer+0x134>)
    5cfa:	6803      	ldr	r3, [r0, #0]
    5cfc:	075b      	lsls	r3, r3, #29
    5cfe:	d00a      	beq.n	5d16 <usb_transfer+0xb6>
    5d00:	4b26      	ldr	r3, [pc, #152]	; (5d9c <usb_transfer+0x13c>)
    5d02:	9308      	str	r3, [sp, #32]
    5d04:	2302      	movs	r3, #2
    5d06:	9303      	str	r3, [sp, #12]
    5d08:	9307      	str	r3, [sp, #28]
    5d0a:	2300      	movs	r3, #0
    5d0c:	aa07      	add	r2, sp, #28
    5d0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d12:	f007 fdec 	bl	d8ee <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    5d16:	f06f 040b 	mvn.w	r4, #11
    5d1a:	e7df      	b.n	5cdc <usb_transfer+0x7c>
	trans->cb = cb;
    5d1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
	trans->buffer = data;
    5d1e:	9a00      	ldr	r2, [sp, #0]
	trans->cb = cb;
    5d20:	f8cb 3014 	str.w	r3, [fp, #20]
	trans->priv = cb_data;
    5d24:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5d26:	f8cb 3018 	str.w	r3, [fp, #24]
	trans->status = -EBUSY;
    5d2a:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    5d2e:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    5d32:	e9cb 2602 	strd	r2, r6, [fp, #8]
	trans->ep = ep;
    5d36:	f80a 5007 	strb.w	r5, [sl, r7]
	trans->flags = flags;
    5d3a:	f8cb 8044 	str.w	r8, [fp, #68]	; 0x44
	trans->status = -EBUSY;
    5d3e:	f8cb 3004 	str.w	r3, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    5d42:	4628      	mov	r0, r5
    5d44:	f002 fb12 	bl	836c <usb_dc_ep_mps>
    5d48:	b168      	cbz	r0, 5d66 <usb_transfer+0x106>
    5d4a:	4628      	mov	r0, r5
    5d4c:	f002 fb0e 	bl	836c <usb_dc_ep_mps>
    5d50:	fbb6 f3f0 	udiv	r3, r6, r0
    5d54:	fb03 6610 	mls	r6, r3, r0, r6
    5d58:	b12e      	cbz	r6, 5d66 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    5d5a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    5d5e:	f043 0304 	orr.w	r3, r3, #4
    5d62:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    5d66:	f018 0f02 	tst.w	r8, #2
    5d6a:	d007      	beq.n	5d7c <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5d6c:	3734      	adds	r7, #52	; 0x34
    5d6e:	480c      	ldr	r0, [pc, #48]	; (5da0 <usb_transfer+0x140>)
    5d70:	eb0a 0107 	add.w	r1, sl, r7
    5d74:	f009 ff59 	bl	fc2a <k_work_submit_to_queue>
	int i, key, ret = 0;
    5d78:	2400      	movs	r4, #0
    5d7a:	e7af      	b.n	5cdc <usb_transfer+0x7c>
		ret = usb_dc_ep_read_continue(ep);
    5d7c:	4628      	mov	r0, r5
    5d7e:	f002 fa83 	bl	8288 <usb_dc_ep_read_continue>
    5d82:	4604      	mov	r4, r0
    5d84:	e7aa      	b.n	5cdc <usb_transfer+0x7c>
		return -EBUSY;
    5d86:	f06f 040f 	mvn.w	r4, #15
    5d8a:	e7ac      	b.n	5ce6 <usb_transfer+0x86>
    5d8c:	20001488 	.word	0x20001488
    5d90:	2000146c 	.word	0x2000146c
    5d94:	20000258 	.word	0x20000258
    5d98:	000123ab 	.word	0x000123ab
    5d9c:	00012390 	.word	0x00012390
    5da0:	20000b78 	.word	0x20000b78

00005da4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    5da4:	b510      	push	{r4, lr}
	__asm__ volatile(
    5da6:	f04f 0320 	mov.w	r3, #32
    5daa:	f3ef 8411 	mrs	r4, BASEPRI
    5dae:	f383 8812 	msr	BASEPRI_MAX, r3
    5db2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    5db6:	f7ff fe3f 	bl	5a38 <usb_ep_get_transfer>
	if (!trans) {
    5dba:	b150      	cbz	r0, 5dd2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    5dbc:	6843      	ldr	r3, [r0, #4]
    5dbe:	3310      	adds	r3, #16
    5dc0:	d107      	bne.n	5dd2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    5dc2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    5dc6:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5dc8:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5dcc:	4803      	ldr	r0, [pc, #12]	; (5ddc <usb_cancel_transfer+0x38>)
    5dce:	f009 ff2c 	bl	fc2a <k_work_submit_to_queue>
	__asm__ volatile(
    5dd2:	f384 8811 	msr	BASEPRI, r4
    5dd6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    5dda:	bd10      	pop	{r4, pc}
    5ddc:	20000b78 	.word	0x20000b78

00005de0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    5de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5de4:	4c10      	ldr	r4, [pc, #64]	; (5e28 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5de6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 5e2c <usb_cancel_transfers+0x4c>
{
    5dea:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    5dec:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    5df0:	f04f 0320 	mov.w	r3, #32
    5df4:	f3ef 8611 	mrs	r6, BASEPRI
    5df8:	f383 8812 	msr	BASEPRI_MAX, r3
    5dfc:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    5e00:	6863      	ldr	r3, [r4, #4]
    5e02:	3310      	adds	r3, #16
    5e04:	d105      	bne.n	5e12 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5e06:	f104 0134 	add.w	r1, r4, #52	; 0x34
    5e0a:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    5e0c:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5e0e:	f009 ff0c 	bl	fc2a <k_work_submit_to_queue>
	__asm__ volatile(
    5e12:	f386 8811 	msr	BASEPRI, r6
    5e16:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5e1a:	3d01      	subs	r5, #1
    5e1c:	f104 0448 	add.w	r4, r4, #72	; 0x48
    5e20:	d1e6      	bne.n	5df0 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    5e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e26:	bf00      	nop
    5e28:	2000146c 	.word	0x2000146c
    5e2c:	20000b78 	.word	0x20000b78

00005e30 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    5e30:	b570      	push	{r4, r5, r6, lr}
    5e32:	4c0a      	ldr	r4, [pc, #40]	; (5e5c <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    5e34:	4e0a      	ldr	r6, [pc, #40]	; (5e60 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5e36:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    5e38:	4631      	mov	r1, r6
    5e3a:	4620      	mov	r0, r4
    5e3c:	f009 feec 	bl	fc18 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5e40:	2201      	movs	r2, #1
    5e42:	f1a4 0018 	sub.w	r0, r4, #24
    5e46:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5e48:	3501      	adds	r5, #1
    5e4a:	f009 fec3 	bl	fbd4 <z_impl_k_sem_init>
    5e4e:	2d04      	cmp	r5, #4
    5e50:	f104 0448 	add.w	r4, r4, #72	; 0x48
    5e54:	d1f0      	bne.n	5e38 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    5e56:	2000      	movs	r0, #0
    5e58:	bd70      	pop	{r4, r5, r6, pc}
    5e5a:	bf00      	nop
    5e5c:	200014a0 	.word	0x200014a0
    5e60:	00005a65 	.word	0x00005a65

00005e64 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5e64:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    5e66:	2301      	movs	r3, #1
    5e68:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    5e6c:	680b      	ldr	r3, [r1, #0]
    5e6e:	b133      	cbz	r3, 5e7e <cdc_acm_irq_rx_enable+0x1a>
    5e70:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    5e74:	b11b      	cbz	r3, 5e7e <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5e76:	4802      	ldr	r0, [pc, #8]	; (5e80 <cdc_acm_irq_rx_enable+0x1c>)
    5e78:	3108      	adds	r1, #8
    5e7a:	f009 bed6 	b.w	fc2a <k_work_submit_to_queue>
	}
}
    5e7e:	4770      	bx	lr
    5e80:	20000b78 	.word	0x20000b78

00005e84 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5e84:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    5e86:	2301      	movs	r3, #1
    5e88:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    5e8c:	680b      	ldr	r3, [r1, #0]
    5e8e:	b133      	cbz	r3, 5e9e <cdc_acm_irq_tx_enable+0x1a>
    5e90:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    5e94:	b11b      	cbz	r3, 5e9e <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5e96:	4802      	ldr	r0, [pc, #8]	; (5ea0 <cdc_acm_irq_tx_enable+0x1c>)
    5e98:	3108      	adds	r1, #8
    5e9a:	f009 bec6 	b.w	fc2a <k_work_submit_to_queue>
}
    5e9e:	4770      	bx	lr
    5ea0:	20000b78 	.word	0x20000b78

00005ea4 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    5ea4:	4a0b      	ldr	r2, [pc, #44]	; (5ed4 <cdc_acm_reset_port+0x30>)
{
    5ea6:	4603      	mov	r3, r0
	dev_data->configured = false;
    5ea8:	2100      	movs	r1, #0
    5eaa:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    5eae:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    5eb0:	6810      	ldr	r0, [r2, #0]
    5eb2:	6758      	str	r0, [r3, #116]	; 0x74
    5eb4:	8890      	ldrh	r0, [r2, #4]
    5eb6:	7992      	ldrb	r2, [r2, #6]
    5eb8:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    5ebc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    5ec0:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    5ec4:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    5ec8:	2240      	movs	r2, #64	; 0x40
    5eca:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    5ece:	f009 b8e4 	b.w	f09a <memset>
    5ed2:	bf00      	nop
    5ed4:	0001073c 	.word	0x0001073c

00005ed8 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    5ed8:	2301      	movs	r3, #1
    5eda:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    5ede:	6813      	ldr	r3, [r2, #0]
{
    5ee0:	b510      	push	{r4, lr}
    5ee2:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    5ee4:	b13b      	cbz	r3, 5ef6 <cdc_acm_write_cb+0x1e>
    5ee6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    5eea:	b123      	cbz	r3, 5ef6 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5eec:	4808      	ldr	r0, [pc, #32]	; (5f10 <cdc_acm_write_cb+0x38>)
    5eee:	f102 0108 	add.w	r1, r2, #8
    5ef2:	f009 fe9a 	bl	fc2a <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    5ef6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5ef8:	f007 f885 	bl	d006 <ring_buf_is_empty>
    5efc:	b930      	cbnz	r0, 5f0c <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5efe:	f104 0118 	add.w	r1, r4, #24
    5f02:	4803      	ldr	r0, [pc, #12]	; (5f10 <cdc_acm_write_cb+0x38>)
}
    5f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5f08:	f009 be8f 	b.w	fc2a <k_work_submit_to_queue>
}
    5f0c:	bd10      	pop	{r4, pc}
    5f0e:	bf00      	nop
    5f10:	20000b78 	.word	0x20000b78

00005f14 <tx_work_handler>:
{
    5f14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    5f16:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    5f18:	685b      	ldr	r3, [r3, #4]
    5f1a:	6a1b      	ldr	r3, [r3, #32]
    5f1c:	7d1e      	ldrb	r6, [r3, #20]
{
    5f1e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    5f20:	4630      	mov	r0, r6
    5f22:	f008 fe38 	bl	eb96 <usb_transfer_is_busy>
    5f26:	b9d0      	cbnz	r0, 5f5e <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    5f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5f2e:	a903      	add	r1, sp, #12
    5f30:	f007 f8e2 	bl	d0f8 <ring_buf_get_claim>
	if (!len) {
    5f34:	4604      	mov	r4, r0
    5f36:	b190      	cbz	r0, 5f5e <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    5f38:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    5f3a:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    5f3e:	bf08      	it	eq
    5f40:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    5f44:	9301      	str	r3, [sp, #4]
    5f46:	4b07      	ldr	r3, [pc, #28]	; (5f64 <tx_work_handler+0x50>)
    5f48:	9903      	ldr	r1, [sp, #12]
    5f4a:	9300      	str	r3, [sp, #0]
    5f4c:	4622      	mov	r2, r4
    5f4e:	2302      	movs	r3, #2
    5f50:	4630      	mov	r0, r6
    5f52:	f7ff fe85 	bl	5c60 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    5f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5f58:	4621      	mov	r1, r4
    5f5a:	f007 f8f8 	bl	d14e <ring_buf_get_finish>
}
    5f5e:	b004      	add	sp, #16
    5f60:	bd70      	pop	{r4, r5, r6, pc}
    5f62:	bf00      	nop
    5f64:	00005ed9 	.word	0x00005ed9

00005f68 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    5f68:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5f6a:	6904      	ldr	r4, [r0, #16]
{
    5f6c:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    5f6e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    5f72:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    5f76:	b113      	cbz	r3, 5f7e <cdc_acm_poll_out+0x16>
    5f78:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    5f7c:	b18b      	cbz	r3, 5fa2 <cdc_acm_poll_out+0x3a>
		LOG_INF("USB device not ready, drop data");
    5f7e:	4826      	ldr	r0, [pc, #152]	; (6018 <cdc_acm_poll_out+0xb0>)
    5f80:	6803      	ldr	r3, [r0, #0]
    5f82:	f003 0307 	and.w	r3, r3, #7
    5f86:	2b02      	cmp	r3, #2
    5f88:	d909      	bls.n	5f9e <cdc_acm_poll_out+0x36>
    5f8a:	4b24      	ldr	r3, [pc, #144]	; (601c <cdc_acm_poll_out+0xb4>)
    5f8c:	9308      	str	r3, [sp, #32]
    5f8e:	2302      	movs	r3, #2
    5f90:	9303      	str	r3, [sp, #12]
    5f92:	9307      	str	r3, [sp, #28]
    5f94:	aa07      	add	r2, sp, #28
    5f96:	f44f 5186 	mov.w	r1, #4288	; 0x10c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    5f9a:	f008 fe6f 	bl	ec7c <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    5f9e:	b00b      	add	sp, #44	; 0x2c
    5fa0:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    5fa2:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    5fa4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    5fa8:	2201      	movs	r2, #1
    5faa:	f10d 0107 	add.w	r1, sp, #7
    5fae:	f007 f884 	bl	d0ba <ring_buf_put>
    5fb2:	bb58      	cbnz	r0, 600c <cdc_acm_poll_out+0xa4>
		LOG_INF("Ring buffer full, drain buffer");
    5fb4:	4d18      	ldr	r5, [pc, #96]	; (6018 <cdc_acm_poll_out+0xb0>)
    5fb6:	682b      	ldr	r3, [r5, #0]
    5fb8:	f003 0307 	and.w	r3, r3, #7
    5fbc:	2b02      	cmp	r3, #2
    5fbe:	d90a      	bls.n	5fd6 <cdc_acm_poll_out+0x6e>
    5fc0:	4b17      	ldr	r3, [pc, #92]	; (6020 <cdc_acm_poll_out+0xb8>)
    5fc2:	9308      	str	r3, [sp, #32]
    5fc4:	aa07      	add	r2, sp, #28
    5fc6:	2302      	movs	r3, #2
    5fc8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5fcc:	4628      	mov	r0, r5
    5fce:	9303      	str	r3, [sp, #12]
    5fd0:	9307      	str	r3, [sp, #28]
    5fd2:	f008 fe53 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    5fd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5fd8:	2201      	movs	r2, #1
    5fda:	2100      	movs	r1, #0
    5fdc:	f007 f8d5 	bl	d18a <ring_buf_get>
    5fe0:	b960      	cbnz	r0, 5ffc <cdc_acm_poll_out+0x94>
			LOG_ERR("Failed to drain buffer");
    5fe2:	682b      	ldr	r3, [r5, #0]
    5fe4:	075b      	lsls	r3, r3, #29
    5fe6:	d0da      	beq.n	5f9e <cdc_acm_poll_out+0x36>
    5fe8:	4b0e      	ldr	r3, [pc, #56]	; (6024 <cdc_acm_poll_out+0xbc>)
    5fea:	9308      	str	r3, [sp, #32]
    5fec:	2302      	movs	r3, #2
    5fee:	480a      	ldr	r0, [pc, #40]	; (6018 <cdc_acm_poll_out+0xb0>)
    5ff0:	9303      	str	r3, [sp, #12]
    5ff2:	9307      	str	r3, [sp, #28]
    5ff4:	aa07      	add	r2, sp, #28
    5ff6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ffa:	e7ce      	b.n	5f9a <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    5ffc:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5ffe:	2201      	movs	r2, #1
    6000:	f10d 0107 	add.w	r1, sp, #7
    6004:	f007 f859 	bl	d0ba <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    6008:	2800      	cmp	r0, #0
    600a:	d0ea      	beq.n	5fe2 <cdc_acm_poll_out+0x7a>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    600c:	f104 0118 	add.w	r1, r4, #24
    6010:	4805      	ldr	r0, [pc, #20]	; (6028 <cdc_acm_poll_out+0xc0>)
    6012:	f009 fe0a 	bl	fc2a <k_work_submit_to_queue>
    6016:	e7c2      	b.n	5f9e <cdc_acm_poll_out+0x36>
    6018:	20000248 	.word	0x20000248
    601c:	000123e1 	.word	0x000123e1
    6020:	00012401 	.word	0x00012401
    6024:	00012420 	.word	0x00012420
    6028:	20000b78 	.word	0x20000b78

0000602c <cdc_acm_read_cb>:
{
    602c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (size <= 0) {
    602e:	1e0d      	subs	r5, r1, #0
{
    6030:	b08b      	sub	sp, #44	; 0x2c
    6032:	4606      	mov	r6, r0
    6034:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    6036:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    603a:	dd24      	ble.n	6086 <cdc_acm_read_cb+0x5a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    603c:	462a      	mov	r2, r5
    603e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    6040:	4639      	mov	r1, r7
    6042:	f007 f83a 	bl	d0ba <ring_buf_put>
	if (wrote < size) {
    6046:	4285      	cmp	r5, r0
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    6048:	4602      	mov	r2, r0
	if (wrote < size) {
    604a:	d90f      	bls.n	606c <cdc_acm_read_cb+0x40>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    604c:	4813      	ldr	r0, [pc, #76]	; (609c <cdc_acm_read_cb+0x70>)
    604e:	6803      	ldr	r3, [r0, #0]
    6050:	075b      	lsls	r3, r3, #29
    6052:	d00b      	beq.n	606c <cdc_acm_read_cb+0x40>
    6054:	4b12      	ldr	r3, [pc, #72]	; (60a0 <cdc_acm_read_cb+0x74>)
    6056:	9308      	str	r3, [sp, #32]
    6058:	1aad      	subs	r5, r5, r2
    605a:	2303      	movs	r3, #3
    605c:	aa07      	add	r2, sp, #28
    605e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6062:	9509      	str	r5, [sp, #36]	; 0x24
    6064:	9303      	str	r3, [sp, #12]
    6066:	9307      	str	r3, [sp, #28]
    6068:	f008 fe08 	bl	ec7c <z_log_msg2_static_create.constprop.0>
	dev_data->rx_ready = true;
    606c:	2301      	movs	r3, #1
    606e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    6072:	6823      	ldr	r3, [r4, #0]
    6074:	b13b      	cbz	r3, 6086 <cdc_acm_read_cb+0x5a>
    6076:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    607a:	b123      	cbz	r3, 6086 <cdc_acm_read_cb+0x5a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    607c:	4809      	ldr	r0, [pc, #36]	; (60a4 <cdc_acm_read_cb+0x78>)
    607e:	f104 0108 	add.w	r1, r4, #8
    6082:	f009 fdd2 	bl	fc2a <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    6086:	4b08      	ldr	r3, [pc, #32]	; (60a8 <cdc_acm_read_cb+0x7c>)
    6088:	9300      	str	r3, [sp, #0]
    608a:	9401      	str	r4, [sp, #4]
    608c:	2301      	movs	r3, #1
    608e:	2240      	movs	r2, #64	; 0x40
    6090:	4639      	mov	r1, r7
    6092:	4630      	mov	r0, r6
    6094:	f7ff fde4 	bl	5c60 <usb_transfer>
}
    6098:	b00b      	add	sp, #44	; 0x2c
    609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    609c:	20000248 	.word	0x20000248
    60a0:	00012437 	.word	0x00012437
    60a4:	20000b78 	.word	0x20000b78
    60a8:	0000602d 	.word	0x0000602d

000060ac <cdc_acm_dev_status_cb>:
{
    60ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    60ae:	4605      	mov	r5, r0
    60b0:	b089      	sub	sp, #36	; 0x24
    60b2:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    60b4:	4601      	mov	r1, r0
    60b6:	485f      	ldr	r0, [pc, #380]	; (6234 <cdc_acm_dev_status_cb+0x188>)
    60b8:	f008 fd3d 	bl	eb36 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    60bc:	4604      	mov	r4, r0
    60be:	b988      	cbnz	r0, 60e4 <cdc_acm_dev_status_cb+0x38>
		LOG_WRN("Device data not found for cfg %p", cfg);
    60c0:	485d      	ldr	r0, [pc, #372]	; (6238 <cdc_acm_dev_status_cb+0x18c>)
    60c2:	6803      	ldr	r3, [r0, #0]
    60c4:	f013 0f06 	tst.w	r3, #6
    60c8:	d00a      	beq.n	60e0 <cdc_acm_dev_status_cb+0x34>
    60ca:	4b5c      	ldr	r3, [pc, #368]	; (623c <cdc_acm_dev_status_cb+0x190>)
    60cc:	aa05      	add	r2, sp, #20
    60ce:	e9cd 3506 	strd	r3, r5, [sp, #24]
    60d2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    60d6:	2303      	movs	r3, #3
    60d8:	9301      	str	r3, [sp, #4]
    60da:	9305      	str	r3, [sp, #20]
    60dc:	f008 fdce 	bl	ec7c <z_log_msg2_static_create.constprop.0>
}
    60e0:	b009      	add	sp, #36	; 0x24
    60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    60e4:	4605      	mov	r5, r0
	switch (status) {
    60e6:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    60e8:	f855 3980 	ldr.w	r3, [r5], #-128
    60ec:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    60ee:	2905      	cmp	r1, #5
    60f0:	d8f6      	bhi.n	60e0 <cdc_acm_dev_status_cb+0x34>
    60f2:	a301      	add	r3, pc, #4	; (adr r3, 60f8 <cdc_acm_dev_status_cb+0x4c>)
    60f4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    60f8:	00006195 	.word	0x00006195
    60fc:	000060e1 	.word	0x000060e1
    6100:	00006111 	.word	0x00006111
    6104:	00006175 	.word	0x00006175
    6108:	000061a1 	.word	0x000061a1
    610c:	000061c9 	.word	0x000061c9
		LOG_INF("Device configured");
    6110:	4849      	ldr	r0, [pc, #292]	; (6238 <cdc_acm_dev_status_cb+0x18c>)
    6112:	6803      	ldr	r3, [r0, #0]
    6114:	f003 0307 	and.w	r3, r3, #7
    6118:	2b02      	cmp	r3, #2
    611a:	d909      	bls.n	6130 <cdc_acm_dev_status_cb+0x84>
    611c:	4b48      	ldr	r3, [pc, #288]	; (6240 <cdc_acm_dev_status_cb+0x194>)
    611e:	9306      	str	r3, [sp, #24]
    6120:	aa05      	add	r2, sp, #20
    6122:	2302      	movs	r3, #2
    6124:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    6128:	9301      	str	r3, [sp, #4]
    612a:	9305      	str	r3, [sp, #20]
    612c:	f008 fda6 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    6130:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    6134:	b939      	cbnz	r1, 6146 <cdc_acm_dev_status_cb+0x9a>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    6136:	6a3b      	ldr	r3, [r7, #32]
    6138:	462a      	mov	r2, r5
    613a:	7b18      	ldrb	r0, [r3, #12]
    613c:	f7ff ff76 	bl	602c <cdc_acm_read_cb>
			dev_data->configured = true;
    6140:	2301      	movs	r3, #1
    6142:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    6146:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    614a:	2b00      	cmp	r3, #0
    614c:	d1c8      	bne.n	60e0 <cdc_acm_dev_status_cb+0x34>
			dev_data->tx_ready = true;
    614e:	2301      	movs	r3, #1
    6150:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    6154:	f854 3c80 	ldr.w	r3, [r4, #-128]
    6158:	2b00      	cmp	r3, #0
    615a:	d0c1      	beq.n	60e0 <cdc_acm_dev_status_cb+0x34>
    615c:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    6160:	2b00      	cmp	r3, #0
    6162:	d0bd      	beq.n	60e0 <cdc_acm_dev_status_cb+0x34>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    6164:	4837      	ldr	r0, [pc, #220]	; (6244 <cdc_acm_dev_status_cb+0x198>)
    6166:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    616a:	b009      	add	sp, #36	; 0x24
    616c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    6170:	f009 bd5b 	b.w	fc2a <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    6174:	4830      	ldr	r0, [pc, #192]	; (6238 <cdc_acm_dev_status_cb+0x18c>)
    6176:	6803      	ldr	r3, [r0, #0]
    6178:	f003 0307 	and.w	r3, r3, #7
    617c:	2b02      	cmp	r3, #2
    617e:	d909      	bls.n	6194 <cdc_acm_dev_status_cb+0xe8>
    6180:	4b31      	ldr	r3, [pc, #196]	; (6248 <cdc_acm_dev_status_cb+0x19c>)
    6182:	9306      	str	r3, [sp, #24]
    6184:	aa05      	add	r2, sp, #20
    6186:	2302      	movs	r3, #2
    6188:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    618c:	9301      	str	r3, [sp, #4]
    618e:	9305      	str	r3, [sp, #20]
    6190:	f008 fd74 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    6194:	4628      	mov	r0, r5
}
    6196:	b009      	add	sp, #36	; 0x24
    6198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    619c:	f7ff be82 	b.w	5ea4 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    61a0:	4825      	ldr	r0, [pc, #148]	; (6238 <cdc_acm_dev_status_cb+0x18c>)
    61a2:	6803      	ldr	r3, [r0, #0]
    61a4:	f003 0307 	and.w	r3, r3, #7
    61a8:	2b02      	cmp	r3, #2
    61aa:	d909      	bls.n	61c0 <cdc_acm_dev_status_cb+0x114>
    61ac:	4b27      	ldr	r3, [pc, #156]	; (624c <cdc_acm_dev_status_cb+0x1a0>)
    61ae:	9306      	str	r3, [sp, #24]
    61b0:	aa05      	add	r2, sp, #20
    61b2:	2302      	movs	r3, #2
    61b4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    61b8:	9301      	str	r3, [sp, #4]
    61ba:	9305      	str	r3, [sp, #20]
    61bc:	f008 fd5e 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    61c0:	2301      	movs	r3, #1
    61c2:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    61c6:	e78b      	b.n	60e0 <cdc_acm_dev_status_cb+0x34>
		LOG_INF("Device resumed");
    61c8:	4e1b      	ldr	r6, [pc, #108]	; (6238 <cdc_acm_dev_status_cb+0x18c>)
    61ca:	6833      	ldr	r3, [r6, #0]
    61cc:	f003 0307 	and.w	r3, r3, #7
    61d0:	2b02      	cmp	r3, #2
    61d2:	d90a      	bls.n	61ea <cdc_acm_dev_status_cb+0x13e>
    61d4:	4b1e      	ldr	r3, [pc, #120]	; (6250 <cdc_acm_dev_status_cb+0x1a4>)
    61d6:	9306      	str	r3, [sp, #24]
    61d8:	aa05      	add	r2, sp, #20
    61da:	2302      	movs	r3, #2
    61dc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    61e0:	4630      	mov	r0, r6
    61e2:	9301      	str	r3, [sp, #4]
    61e4:	9305      	str	r3, [sp, #20]
    61e6:	f008 fd49 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    61ea:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    61ee:	2b00      	cmp	r3, #0
    61f0:	f43f af76 	beq.w	60e0 <cdc_acm_dev_status_cb+0x34>
			LOG_INF("from suspend");
    61f4:	6833      	ldr	r3, [r6, #0]
    61f6:	f003 0307 	and.w	r3, r3, #7
    61fa:	2b02      	cmp	r3, #2
    61fc:	d90a      	bls.n	6214 <cdc_acm_dev_status_cb+0x168>
    61fe:	4b15      	ldr	r3, [pc, #84]	; (6254 <cdc_acm_dev_status_cb+0x1a8>)
    6200:	9306      	str	r3, [sp, #24]
    6202:	480d      	ldr	r0, [pc, #52]	; (6238 <cdc_acm_dev_status_cb+0x18c>)
    6204:	2302      	movs	r3, #2
    6206:	aa05      	add	r2, sp, #20
    6208:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    620c:	9301      	str	r3, [sp, #4]
    620e:	9305      	str	r3, [sp, #20]
    6210:	f008 fd34 	bl	ec7c <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    6214:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    6218:	2100      	movs	r1, #0
    621a:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    621e:	2b00      	cmp	r3, #0
    6220:	f43f af5e 	beq.w	60e0 <cdc_acm_dev_status_cb+0x34>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    6224:	6a3b      	ldr	r3, [r7, #32]
    6226:	7b18      	ldrb	r0, [r3, #12]
    6228:	462a      	mov	r2, r5
}
    622a:	b009      	add	sp, #36	; 0x24
    622c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    6230:	f7ff befc 	b.w	602c <cdc_acm_read_cb>
    6234:	2000158c 	.word	0x2000158c
    6238:	20000248 	.word	0x20000248
    623c:	00012458 	.word	0x00012458
    6240:	00012479 	.word	0x00012479
    6244:	20000b78 	.word	0x20000b78
    6248:	0001248b 	.word	0x0001248b
    624c:	0001249f 	.word	0x0001249f
    6250:	000124b0 	.word	0x000124b0
    6254:	000124bf 	.word	0x000124bf

00006258 <cdc_acm_fifo_fill>:
{
    6258:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    625a:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    625c:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    6260:	b088      	sub	sp, #32
    6262:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    6264:	b113      	cbz	r3, 626c <cdc_acm_fifo_fill+0x14>
    6266:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    626a:	b193      	cbz	r3, 6292 <cdc_acm_fifo_fill+0x3a>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    626c:	4819      	ldr	r0, [pc, #100]	; (62d4 <cdc_acm_fifo_fill+0x7c>)
    626e:	6804      	ldr	r4, [r0, #0]
    6270:	f014 0406 	ands.w	r4, r4, #6
    6274:	d02b      	beq.n	62ce <cdc_acm_fifo_fill+0x76>
    6276:	4b18      	ldr	r3, [pc, #96]	; (62d8 <cdc_acm_fifo_fill+0x80>)
    6278:	aa05      	add	r2, sp, #20
    627a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    627e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6282:	2303      	movs	r3, #3
    6284:	9301      	str	r3, [sp, #4]
    6286:	9305      	str	r3, [sp, #20]
    6288:	f008 fcf8 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		return 0;
    628c:	2000      	movs	r0, #0
}
    628e:	b008      	add	sp, #32
    6290:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    6292:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    6294:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    6298:	f006 ff0f 	bl	d0ba <ring_buf_put>
	if (wrote < len) {
    629c:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    629e:	4604      	mov	r4, r0
	if (wrote < len) {
    62a0:	d210      	bcs.n	62c4 <cdc_acm_fifo_fill+0x6c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    62a2:	480c      	ldr	r0, [pc, #48]	; (62d4 <cdc_acm_fifo_fill+0x7c>)
    62a4:	6803      	ldr	r3, [r0, #0]
    62a6:	f013 0f06 	tst.w	r3, #6
    62aa:	d00b      	beq.n	62c4 <cdc_acm_fifo_fill+0x6c>
    62ac:	4b0b      	ldr	r3, [pc, #44]	; (62dc <cdc_acm_fifo_fill+0x84>)
    62ae:	9306      	str	r3, [sp, #24]
    62b0:	1b2d      	subs	r5, r5, r4
    62b2:	2303      	movs	r3, #3
    62b4:	aa05      	add	r2, sp, #20
    62b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    62ba:	9507      	str	r5, [sp, #28]
    62bc:	9301      	str	r3, [sp, #4]
    62be:	9305      	str	r3, [sp, #20]
    62c0:	f008 fcdc 	bl	ec7c <z_log_msg2_static_create.constprop.0>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    62c4:	4806      	ldr	r0, [pc, #24]	; (62e0 <cdc_acm_fifo_fill+0x88>)
    62c6:	f106 0118 	add.w	r1, r6, #24
    62ca:	f009 fcae 	bl	fc2a <k_work_submit_to_queue>
		return 0;
    62ce:	4620      	mov	r0, r4
    62d0:	e7dd      	b.n	628e <cdc_acm_fifo_fill+0x36>
    62d2:	bf00      	nop
    62d4:	20000248 	.word	0x20000248
    62d8:	000124cc 	.word	0x000124cc
    62dc:	00012437 	.word	0x00012437
    62e0:	20000b78 	.word	0x20000b78

000062e4 <cdc_acm_int_in>:
{
    62e4:	b510      	push	{r4, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    62e6:	4601      	mov	r1, r0
{
    62e8:	b088      	sub	sp, #32
    62ea:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    62ec:	480c      	ldr	r0, [pc, #48]	; (6320 <cdc_acm_int_in+0x3c>)
    62ee:	f008 fc3c 	bl	eb6a <usb_get_dev_data_by_ep>
	if (common == NULL) {
    62f2:	b988      	cbnz	r0, 6318 <cdc_acm_int_in+0x34>
		LOG_WRN("Device data not found for endpoint %u", ep);
    62f4:	480b      	ldr	r0, [pc, #44]	; (6324 <cdc_acm_int_in+0x40>)
    62f6:	6803      	ldr	r3, [r0, #0]
    62f8:	f013 0f06 	tst.w	r3, #6
    62fc:	d00a      	beq.n	6314 <cdc_acm_int_in+0x30>
    62fe:	4b0a      	ldr	r3, [pc, #40]	; (6328 <cdc_acm_int_in+0x44>)
    6300:	aa05      	add	r2, sp, #20
    6302:	e9cd 3406 	strd	r3, r4, [sp, #24]
    6306:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    630a:	2303      	movs	r3, #3
    630c:	9301      	str	r3, [sp, #4]
    630e:	9305      	str	r3, [sp, #20]
    6310:	f008 fcb4 	bl	ec7c <z_log_msg2_static_create.constprop.0>
}
    6314:	b008      	add	sp, #32
    6316:	bd10      	pop	{r4, pc}
	dev_data->notification_sent = 1U;
    6318:	2301      	movs	r3, #1
    631a:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    631e:	e7f9      	b.n	6314 <cdc_acm_int_in+0x30>
    6320:	2000158c 	.word	0x2000158c
    6324:	20000248 	.word	0x20000248
    6328:	000124fe 	.word	0x000124fe

0000632c <cdc_acm_class_handle_req>:
{
    632c:	b570      	push	{r4, r5, r6, lr}
    632e:	4604      	mov	r4, r0
    6330:	b088      	sub	sp, #32
    6332:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    6334:	7901      	ldrb	r1, [r0, #4]
    6336:	481c      	ldr	r0, [pc, #112]	; (63a8 <cdc_acm_class_handle_req+0x7c>)
{
    6338:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    633a:	f008 fc08 	bl	eb4e <usb_get_dev_data_by_iface>
	if (common == NULL) {
    633e:	b998      	cbnz	r0, 6368 <cdc_acm_class_handle_req+0x3c>
		LOG_WRN("Device data not found for interface %u",
    6340:	481a      	ldr	r0, [pc, #104]	; (63ac <cdc_acm_class_handle_req+0x80>)
    6342:	6803      	ldr	r3, [r0, #0]
    6344:	f013 0f06 	tst.w	r3, #6
    6348:	d00b      	beq.n	6362 <cdc_acm_class_handle_req+0x36>
    634a:	88a3      	ldrh	r3, [r4, #4]
    634c:	4a18      	ldr	r2, [pc, #96]	; (63b0 <cdc_acm_class_handle_req+0x84>)
    634e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6352:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6356:	2303      	movs	r3, #3
    6358:	aa05      	add	r2, sp, #20
    635a:	9301      	str	r3, [sp, #4]
    635c:	9305      	str	r3, [sp, #20]
    635e:	f008 fc8d 	bl	ec7c <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    6362:	f06f 0012 	mvn.w	r0, #18
    6366:	e011      	b.n	638c <cdc_acm_class_handle_req+0x60>
	if (usb_reqtype_is_to_device(setup)) {
    6368:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    636c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    636e:	2a00      	cmp	r2, #0
    6370:	db12      	blt.n	6398 <cdc_acm_class_handle_req+0x6c>
		switch (setup->bRequest) {
    6372:	2b20      	cmp	r3, #32
    6374:	d004      	beq.n	6380 <cdc_acm_class_handle_req+0x54>
    6376:	2b22      	cmp	r3, #34	; 0x22
    6378:	d00a      	beq.n	6390 <cdc_acm_class_handle_req+0x64>
	return -ENOTSUP;
    637a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    637e:	e005      	b.n	638c <cdc_acm_class_handle_req+0x60>
			memcpy(&dev_data->line_coding, *data,
    6380:	6829      	ldr	r1, [r5, #0]
    6382:	2207      	movs	r2, #7
    6384:	380c      	subs	r0, #12
    6386:	f008 fe7d 	bl	f084 <memcpy>
			return 0;
    638a:	2000      	movs	r0, #0
}
    638c:	b008      	add	sp, #32
    638e:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    6390:	8863      	ldrh	r3, [r4, #2]
    6392:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    6396:	e7f8      	b.n	638a <cdc_acm_class_handle_req+0x5e>
		if (setup->bRequest == GET_LINE_CODING) {
    6398:	2b21      	cmp	r3, #33	; 0x21
    639a:	d1ee      	bne.n	637a <cdc_acm_class_handle_req+0x4e>
			*data = (uint8_t *)(&dev_data->line_coding);
    639c:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    639e:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    63a0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    63a2:	6033      	str	r3, [r6, #0]
    63a4:	e7f1      	b.n	638a <cdc_acm_class_handle_req+0x5e>
    63a6:	bf00      	nop
    63a8:	2000158c 	.word	0x2000158c
    63ac:	20000248 	.word	0x20000248
    63b0:	00012524 	.word	0x00012524

000063b4 <cdc_acm_init>:
{
    63b4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    63b6:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    63b8:	2300      	movs	r3, #0
    63ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    63be:	4b0c      	ldr	r3, [pc, #48]	; (63f0 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    63c0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    63c4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    63c6:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    63ca:	b969      	cbnz	r1, 63e8 <cdc_acm_init+0x34>
	list->head = node;
    63cc:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    63d0:	f104 0008 	add.w	r0, r4, #8
    63d4:	4907      	ldr	r1, [pc, #28]	; (63f4 <cdc_acm_init+0x40>)
    63d6:	f009 fc1f 	bl	fc18 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    63da:	f104 0018 	add.w	r0, r4, #24
    63de:	4906      	ldr	r1, [pc, #24]	; (63f8 <cdc_acm_init+0x44>)
    63e0:	f009 fc1a 	bl	fc18 <k_work_init>
}
    63e4:	2000      	movs	r0, #0
    63e6:	bd10      	pop	{r4, pc}
	parent->next = child;
    63e8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    63ea:	605a      	str	r2, [r3, #4]
}
    63ec:	e7f0      	b.n	63d0 <cdc_acm_init+0x1c>
    63ee:	bf00      	nop
    63f0:	2000158c 	.word	0x2000158c
    63f4:	0000ebc1 	.word	0x0000ebc1
    63f8:	00005f15 	.word	0x00005f15

000063fc <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    63fc:	b530      	push	{r4, r5, lr}
    63fe:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    6400:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    6402:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    6404:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    6408:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    640a:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    640c:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    6410:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    6412:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    6416:	2002      	movs	r0, #2
    6418:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    641c:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    641e:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    6422:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    6426:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    6428:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    642c:	220a      	movs	r2, #10
    642e:	a901      	add	r1, sp, #4
    6430:	f7fe ffca 	bl	53c8 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    6434:	4c05      	ldr	r4, [pc, #20]	; (644c <cdc_acm_send_notification.isra.0+0x50>)
    6436:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    643a:	b923      	cbnz	r3, 6446 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    643c:	2001      	movs	r0, #1
    643e:	f009 fd69 	bl	ff14 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    6442:	3c01      	subs	r4, #1
    6444:	d1f7      	bne.n	6436 <cdc_acm_send_notification.isra.0+0x3a>
}
    6446:	b005      	add	sp, #20
    6448:	bd30      	pop	{r4, r5, pc}
    644a:	bf00      	nop
    644c:	000186a1 	.word	0x000186a1

00006450 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    6450:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    6452:	4d09      	ldr	r5, [pc, #36]	; (6478 <z_usb_work_q_init+0x28>)
    6454:	4909      	ldr	r1, [pc, #36]	; (647c <z_usb_work_q_init+0x2c>)
    6456:	2400      	movs	r4, #0
    6458:	9400      	str	r4, [sp, #0]
    645a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    645e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6462:	4628      	mov	r0, r5
    6464:	f005 fbb2 	bl	bbcc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    6468:	4905      	ldr	r1, [pc, #20]	; (6480 <z_usb_work_q_init+0x30>)
    646a:	4628      	mov	r0, r5
    646c:	f005 f834 	bl	b4d8 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    6470:	4620      	mov	r0, r4
    6472:	b003      	add	sp, #12
    6474:	bd30      	pop	{r4, r5, pc}
    6476:	bf00      	nop
    6478:	20000b78 	.word	0x20000b78
    647c:	20002d40 	.word	0x20002d40
    6480:	00012561 	.word	0x00012561

00006484 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6488:	4605      	mov	r5, r0
	__asm__ volatile(
    648a:	f04f 0320 	mov.w	r3, #32
    648e:	f3ef 8611 	mrs	r6, BASEPRI
    6492:	f383 8812 	msr	BASEPRI_MAX, r3
    6496:	f3bf 8f6f 	isb	sy
	return list->head;
    649a:	4b0e      	ldr	r3, [pc, #56]	; (64d4 <pm_state_notify+0x50>)
    649c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    649e:	b19c      	cbz	r4, 64c8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    64a0:	4f0d      	ldr	r7, [pc, #52]	; (64d8 <pm_state_notify+0x54>)
    64a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 64dc <pm_state_notify+0x58>
    64a6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    64aa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    64ae:	2d00      	cmp	r5, #0
    64b0:	bf08      	it	eq
    64b2:	4613      	moveq	r3, r2
		if (callback) {
    64b4:	b12b      	cbz	r3, 64c2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    64b6:	f898 2014 	ldrb.w	r2, [r8, #20]
    64ba:	fb09 f202 	mul.w	r2, r9, r2
    64be:	5cb8      	ldrb	r0, [r7, r2]
    64c0:	4798      	blx	r3
	return node->next;
    64c2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    64c4:	2c00      	cmp	r4, #0
    64c6:	d1f0      	bne.n	64aa <pm_state_notify+0x26>
	__asm__ volatile(
    64c8:	f386 8811 	msr	BASEPRI, r6
    64cc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    64d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64d4:	20001594 	.word	0x20001594
    64d8:	2000159c 	.word	0x2000159c
    64dc:	2000214c 	.word	0x2000214c

000064e0 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    64e0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    64e2:	2301      	movs	r3, #1
    64e4:	f000 001f 	and.w	r0, r0, #31
    64e8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    64ec:	4b07      	ldr	r3, [pc, #28]	; (650c <atomic_clear_bit.constprop.0+0x2c>)
    64ee:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    64f2:	43c0      	mvns	r0, r0
    64f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    64f8:	e853 2f00 	ldrex	r2, [r3]
    64fc:	4002      	ands	r2, r0
    64fe:	e843 2100 	strex	r1, r2, [r3]
    6502:	2900      	cmp	r1, #0
    6504:	d1f8      	bne.n	64f8 <atomic_clear_bit.constprop.0+0x18>
    6506:	f3bf 8f5b 	dmb	ish
}
    650a:	4770      	bx	lr
    650c:	200015a8 	.word	0x200015a8

00006510 <pm_system_resume>:

void pm_system_resume(void)
{
    6510:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    6512:	4b1d      	ldr	r3, [pc, #116]	; (6588 <pm_system_resume+0x78>)
    6514:	7d1c      	ldrb	r4, [r3, #20]
    6516:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    651a:	f004 031f 	and.w	r3, r4, #31
    651e:	2201      	movs	r2, #1
    6520:	409a      	lsls	r2, r3
    6522:	4b1a      	ldr	r3, [pc, #104]	; (658c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6524:	0961      	lsrs	r1, r4, #5
{
    6526:	b085      	sub	sp, #20
    6528:	43d0      	mvns	r0, r2
    652a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    652e:	e853 1f00 	ldrex	r1, [r3]
    6532:	ea01 0500 	and.w	r5, r1, r0
    6536:	e843 5c00 	strex	ip, r5, [r3]
    653a:	f1bc 0f00 	cmp.w	ip, #0
    653e:	d1f6      	bne.n	652e <pm_system_resume+0x1e>
    6540:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    6544:	4211      	tst	r1, r2
    6546:	d017      	beq.n	6578 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    6548:	4d11      	ldr	r5, [pc, #68]	; (6590 <pm_system_resume+0x80>)
    654a:	220c      	movs	r2, #12
    654c:	fb02 5204 	mla	r2, r2, r4, r5
    6550:	ca07      	ldmia	r2, {r0, r1, r2}
    6552:	ab01      	add	r3, sp, #4
    6554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    6558:	4a0e      	ldr	r2, [pc, #56]	; (6594 <pm_system_resume+0x84>)
    655a:	b17a      	cbz	r2, 657c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    655c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    6560:	f008 fdc4 	bl	f0ec <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    6564:	2000      	movs	r0, #0
    6566:	f7ff ff8d 	bl	6484 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    656a:	230c      	movs	r3, #12
    656c:	435c      	muls	r4, r3
    656e:	192a      	adds	r2, r5, r4
    6570:	2300      	movs	r3, #0
    6572:	512b      	str	r3, [r5, r4]
    6574:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    6578:	b005      	add	sp, #20
    657a:	bd30      	pop	{r4, r5, pc}
    657c:	f382 8811 	msr	BASEPRI, r2
    6580:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    6584:	e7ee      	b.n	6564 <pm_system_resume+0x54>
    6586:	bf00      	nop
    6588:	2000214c 	.word	0x2000214c
    658c:	200015ac 	.word	0x200015ac
    6590:	2000159c 	.word	0x2000159c
    6594:	0000f0ed 	.word	0x0000f0ed

00006598 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    6598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    659c:	4b35      	ldr	r3, [pc, #212]	; (6674 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    659e:	4a36      	ldr	r2, [pc, #216]	; (6678 <pm_system_suspend+0xe0>)
    65a0:	7d1c      	ldrb	r4, [r3, #20]
    65a2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    65a6:	0963      	lsrs	r3, r4, #5
    65a8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    65ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b0:	4d32      	ldr	r5, [pc, #200]	; (667c <pm_system_suspend+0xe4>)
    65b2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    65b6:	f004 081f 	and.w	r8, r4, #31
    65ba:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    65be:	f013 0f01 	tst.w	r3, #1
{
    65c2:	b085      	sub	sp, #20
    65c4:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    65c6:	d10a      	bne.n	65de <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    65c8:	4601      	mov	r1, r0
    65ca:	4620      	mov	r0, r4
    65cc:	f000 f876 	bl	66bc <pm_policy_next_state>
		if (info != NULL) {
    65d0:	b128      	cbz	r0, 65de <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    65d2:	c807      	ldmia	r0, {r0, r1, r2}
    65d4:	230c      	movs	r3, #12
    65d6:	fb03 5304 	mla	r3, r3, r4, r5
    65da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    65de:	230c      	movs	r3, #12
    65e0:	4363      	muls	r3, r4
    65e2:	18ea      	adds	r2, r5, r3
    65e4:	5cee      	ldrb	r6, [r5, r3]
    65e6:	b936      	cbnz	r6, 65f6 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    65e8:	4620      	mov	r0, r4
    65ea:	f7ff ff79 	bl	64e0 <atomic_clear_bit.constprop.0>
		ret = false;
    65ee:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    65f0:	b005      	add	sp, #20
    65f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    65f6:	1c7b      	adds	r3, r7, #1
    65f8:	d00f      	beq.n	661a <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    65fa:	f8d2 c008 	ldr.w	ip, [r2, #8]
    65fe:	4820      	ldr	r0, [pc, #128]	; (6680 <pm_system_suspend+0xe8>)
    6600:	4a20      	ldr	r2, [pc, #128]	; (6684 <pm_system_suspend+0xec>)
    6602:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    6606:	2100      	movs	r1, #0
    6608:	2300      	movs	r3, #0
    660a:	fbec 0106 	umlal	r0, r1, ip, r6
    660e:	f7fa fd77 	bl	1100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    6612:	2101      	movs	r1, #1
    6614:	1a38      	subs	r0, r7, r0
    6616:	f009 fc5d 	bl	fed4 <z_set_timeout_expiry>
	k_sched_lock();
    661a:	f005 fb67 	bl	bcec <k_sched_lock>
	pm_state_notify(true);
    661e:	2001      	movs	r0, #1
    6620:	f7ff ff30 	bl	6484 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6624:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6628:	2301      	movs	r3, #1
    662a:	fa03 f808 	lsl.w	r8, r3, r8
    662e:	4b16      	ldr	r3, [pc, #88]	; (6688 <pm_system_suspend+0xf0>)
    6630:	4499      	add	r9, r3
    6632:	e859 3f00 	ldrex	r3, [r9]
    6636:	ea43 0308 	orr.w	r3, r3, r8
    663a:	e849 3200 	strex	r2, r3, [r9]
    663e:	2a00      	cmp	r2, #0
    6640:	d1f7      	bne.n	6632 <pm_system_suspend+0x9a>
    6642:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    6646:	230c      	movs	r3, #12
    6648:	fb03 5504 	mla	r5, r3, r4, r5
    664c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    6650:	ab01      	add	r3, sp, #4
    6652:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    6656:	4a0d      	ldr	r2, [pc, #52]	; (668c <pm_system_suspend+0xf4>)
    6658:	b11a      	cbz	r2, 6662 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    665a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    665e:	f008 fd32 	bl	f0c6 <pm_power_state_set>
	pm_system_resume();
    6662:	f7ff ff55 	bl	6510 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    6666:	4620      	mov	r0, r4
    6668:	f7ff ff3a 	bl	64e0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    666c:	f005 fd0c 	bl	c088 <k_sched_unlock>
	bool ret = true;
    6670:	2001      	movs	r0, #1
    6672:	e7bd      	b.n	65f0 <pm_system_suspend+0x58>
    6674:	2000214c 	.word	0x2000214c
    6678:	200015a8 	.word	0x200015a8
    667c:	2000159c 	.word	0x2000159c
    6680:	000f423f 	.word	0x000f423f
    6684:	000f4240 	.word	0x000f4240
    6688:	200015ac 	.word	0x200015ac
    668c:	0000f0c7 	.word	0x0000f0c7

00006690 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6690:	4b05      	ldr	r3, [pc, #20]	; (66a8 <pm_constraint_get+0x18>)
    6692:	f3bf 8f5b 	dmb	ish
    6696:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    669a:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    669e:	fab0 f080 	clz	r0, r0
    66a2:	0940      	lsrs	r0, r0, #5
    66a4:	4770      	bx	lr
    66a6:	bf00      	nop
    66a8:	200015b0 	.word	0x200015b0

000066ac <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    66ac:	b908      	cbnz	r0, 66b2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    66ae:	4b02      	ldr	r3, [pc, #8]	; (66b8 <pm_state_cpu_get_all+0xc>)
    66b0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    66b2:	2000      	movs	r0, #0
    66b4:	4770      	bx	lr
    66b6:	bf00      	nop
    66b8:	00010d7c 	.word	0x00010d7c

000066bc <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    66bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66c0:	b085      	sub	sp, #20
    66c2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    66c4:	a903      	add	r1, sp, #12
    66c6:	f7ff fff1 	bl	66ac <pm_state_cpu_get_all>
    66ca:	f8df a074 	ldr.w	sl, [pc, #116]	; 6740 <pm_policy_next_state+0x84>
    66ce:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6744 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    66d2:	1e44      	subs	r4, r0, #1
    66d4:	b224      	sxth	r4, r4
    66d6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    66da:	f04f 0900 	mov.w	r9, #0
    66de:	1c63      	adds	r3, r4, #1
    66e0:	d104      	bne.n	66ec <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    66e2:	2500      	movs	r5, #0
}
    66e4:	4628      	mov	r0, r5
    66e6:	b005      	add	sp, #20
    66e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    66ec:	9a03      	ldr	r2, [sp, #12]
    66ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    66f2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    66f6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    66fa:	f7ff ffc9 	bl	6690 <pm_constraint_get>
    66fe:	b1e0      	cbz	r0, 673a <pm_policy_next_state+0x7e>
    6700:	6868      	ldr	r0, [r5, #4]
    6702:	f04f 0b00 	mov.w	fp, #0
    6706:	46d4      	mov	ip, sl
    6708:	4659      	mov	r1, fp
    670a:	fbe0 c107 	umlal	ip, r1, r0, r7
    670e:	4642      	mov	r2, r8
    6710:	464b      	mov	r3, r9
    6712:	4660      	mov	r0, ip
    6714:	f7fa fcf4 	bl	1100 <__aeabi_uldivmod>
    6718:	9001      	str	r0, [sp, #4]
    671a:	68a8      	ldr	r0, [r5, #8]
    671c:	46d4      	mov	ip, sl
    671e:	4659      	mov	r1, fp
    6720:	fbe0 c107 	umlal	ip, r1, r0, r7
    6724:	4642      	mov	r2, r8
    6726:	464b      	mov	r3, r9
    6728:	4660      	mov	r0, ip
    672a:	f7fa fce9 	bl	1100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    672e:	1c72      	adds	r2, r6, #1
    6730:	d0d8      	beq.n	66e4 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    6732:	9b01      	ldr	r3, [sp, #4]
    6734:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    6736:	42b0      	cmp	r0, r6
    6738:	d9d4      	bls.n	66e4 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    673a:	3c01      	subs	r4, #1
    673c:	b224      	sxth	r4, r4
    673e:	e7ce      	b.n	66de <pm_policy_next_state+0x22>
    6740:	000f423f 	.word	0x000f423f
    6744:	000f4240 	.word	0x000f4240

00006748 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6748:	4901      	ldr	r1, [pc, #4]	; (6750 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    674a:	2210      	movs	r2, #16
	str	r2, [r1]
    674c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    674e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6750:	e000ed10 	.word	0xe000ed10

00006754 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6754:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6756:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6758:	f380 8811 	msr	BASEPRI, r0
	isb
    675c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    6760:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6764:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6766:	b662      	cpsie	i
	isb
    6768:	f3bf 8f6f 	isb	sy

	bx	lr
    676c:	4770      	bx	lr
    676e:	bf00      	nop

00006770 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    6770:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    6772:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6774:	f381 8811 	msr	BASEPRI, r1

	wfe
    6778:	bf20      	wfe

	msr	BASEPRI, r0
    677a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    677e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6780:	4770      	bx	lr
    6782:	bf00      	nop

00006784 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6788:	b089      	sub	sp, #36	; 0x24
    678a:	4680      	mov	r8, r0
    678c:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    678e:	460c      	mov	r4, r1
    6790:	2900      	cmp	r1, #0
    6792:	d053      	beq.n	683c <z_arm_fatal_error+0xb8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6794:	4d2d      	ldr	r5, [pc, #180]	; (684c <z_arm_fatal_error+0xc8>)
    6796:	682b      	ldr	r3, [r5, #0]
    6798:	0758      	lsls	r0, r3, #29
    679a:	d04f      	beq.n	683c <z_arm_fatal_error+0xb8>
    679c:	e9d1 0100 	ldrd	r0, r1, [r1]
    67a0:	4e2b      	ldr	r6, [pc, #172]	; (6850 <z_arm_fatal_error+0xcc>)
    67a2:	68a3      	ldr	r3, [r4, #8]
    67a4:	46e9      	mov	r9, sp
    67a6:	b088      	sub	sp, #32
    67a8:	466a      	mov	r2, sp
    67aa:	e9c2 6004 	strd	r6, r0, [r2, #16]
    67ae:	2605      	movs	r6, #5
    67b0:	e9c2 1306 	strd	r1, r3, [r2, #24]
    67b4:	60be      	str	r6, [r7, #8]
    67b6:	f842 6f0c 	str.w	r6, [r2, #12]!
    67ba:	2300      	movs	r3, #0
    67bc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    67c0:	4628      	mov	r0, r5
    67c2:	f007 f894 	bl	d8ee <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    67c6:	682b      	ldr	r3, [r5, #0]
    67c8:	0759      	lsls	r1, r3, #29
    67ca:	46cd      	mov	sp, r9
    67cc:	d036      	beq.n	683c <z_arm_fatal_error+0xb8>
    67ce:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    67d2:	4b20      	ldr	r3, [pc, #128]	; (6854 <z_arm_fatal_error+0xd0>)
    67d4:	60be      	str	r6, [r7, #8]
    67d6:	b088      	sub	sp, #32
    67d8:	466a      	mov	r2, sp
    67da:	e9c2 3004 	strd	r3, r0, [r2, #16]
    67de:	6963      	ldr	r3, [r4, #20]
    67e0:	6191      	str	r1, [r2, #24]
    67e2:	61d3      	str	r3, [r2, #28]
    67e4:	f842 6f0c 	str.w	r6, [r2, #12]!
    67e8:	2300      	movs	r3, #0
    67ea:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    67ee:	4628      	mov	r0, r5
    67f0:	f007 f87d 	bl	d8ee <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    67f4:	682b      	ldr	r3, [r5, #0]
    67f6:	075a      	lsls	r2, r3, #29
    67f8:	46cd      	mov	sp, r9
    67fa:	d01f      	beq.n	683c <z_arm_fatal_error+0xb8>
    67fc:	69e3      	ldr	r3, [r4, #28]
    67fe:	4a16      	ldr	r2, [pc, #88]	; (6858 <z_arm_fatal_error+0xd4>)
    6800:	2603      	movs	r6, #3
    6802:	e9c7 2306 	strd	r2, r3, [r7, #24]
    6806:	607e      	str	r6, [r7, #4]
    6808:	617e      	str	r6, [r7, #20]
    680a:	2300      	movs	r3, #0
    680c:	f107 0214 	add.w	r2, r7, #20
    6810:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6814:	4628      	mov	r0, r5
    6816:	f007 f86a 	bl	d8ee <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    681a:	682b      	ldr	r3, [r5, #0]
    681c:	075b      	lsls	r3, r3, #29
    681e:	d00d      	beq.n	683c <z_arm_fatal_error+0xb8>
    6820:	69a3      	ldr	r3, [r4, #24]
    6822:	4a0e      	ldr	r2, [pc, #56]	; (685c <z_arm_fatal_error+0xd8>)
    6824:	607e      	str	r6, [r7, #4]
    6826:	e9c7 2306 	strd	r2, r3, [r7, #24]
    682a:	617e      	str	r6, [r7, #20]
    682c:	2300      	movs	r3, #0
    682e:	f107 0214 	add.w	r2, r7, #20
    6832:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6836:	4628      	mov	r0, r5
    6838:	f007 f859 	bl	d8ee <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    683c:	4621      	mov	r1, r4
    683e:	4640      	mov	r0, r8
    6840:	f004 fc80 	bl	b144 <z_fatal_error>
}
    6844:	3724      	adds	r7, #36	; 0x24
    6846:	46bd      	mov	sp, r7
    6848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    684c:	20000230 	.word	0x20000230
    6850:	0001256d 	.word	0x0001256d
    6854:	0001259c 	.word	0x0001259c
    6858:	000125cb 	.word	0x000125cb
    685c:	000125da 	.word	0x000125da

00006860 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6860:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6862:	2b00      	cmp	r3, #0
    6864:	db08      	blt.n	6878 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6866:	2201      	movs	r2, #1
    6868:	f000 001f 	and.w	r0, r0, #31
    686c:	fa02 f000 	lsl.w	r0, r2, r0
    6870:	095b      	lsrs	r3, r3, #5
    6872:	4a02      	ldr	r2, [pc, #8]	; (687c <arch_irq_enable+0x1c>)
    6874:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6878:	4770      	bx	lr
    687a:	bf00      	nop
    687c:	e000e100 	.word	0xe000e100

00006880 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6880:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6882:	2b00      	cmp	r3, #0
    6884:	db0d      	blt.n	68a2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6886:	2201      	movs	r2, #1
    6888:	095b      	lsrs	r3, r3, #5
    688a:	f000 001f 	and.w	r0, r0, #31
    688e:	fa02 f000 	lsl.w	r0, r2, r0
    6892:	3320      	adds	r3, #32
    6894:	4a03      	ldr	r2, [pc, #12]	; (68a4 <arch_irq_disable+0x24>)
    6896:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    689a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    689e:	f3bf 8f6f 	isb	sy
}
    68a2:	4770      	bx	lr
    68a4:	e000e100 	.word	0xe000e100

000068a8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    68a8:	4b05      	ldr	r3, [pc, #20]	; (68c0 <arch_irq_is_enabled+0x18>)
    68aa:	0942      	lsrs	r2, r0, #5
    68ac:	f000 001f 	and.w	r0, r0, #31
    68b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    68b4:	2301      	movs	r3, #1
    68b6:	fa03 f000 	lsl.w	r0, r3, r0
}
    68ba:	4010      	ands	r0, r2
    68bc:	4770      	bx	lr
    68be:	bf00      	nop
    68c0:	e000e100 	.word	0xe000e100

000068c4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    68c4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    68c6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68c8:	bfa8      	it	ge
    68ca:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    68ce:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68d2:	bfb8      	it	lt
    68d4:	4b06      	ldrlt	r3, [pc, #24]	; (68f0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68d6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    68da:	bfac      	ite	ge
    68dc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68e0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68e4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68e6:	bfb4      	ite	lt
    68e8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68ea:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    68ee:	4770      	bx	lr
    68f0:	e000ed14 	.word	0xe000ed14

000068f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    68f4:	bf30      	wfi
    b z_SysNmiOnReset
    68f6:	f7ff bffd 	b.w	68f4 <z_SysNmiOnReset>
    68fa:	bf00      	nop

000068fc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    68fc:	4a0f      	ldr	r2, [pc, #60]	; (693c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    68fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6900:	4b0f      	ldr	r3, [pc, #60]	; (6940 <z_arm_prep_c+0x44>)
    6902:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6906:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    690c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6910:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6914:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    691c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    6920:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6924:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    6928:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    692c:	f004 fccc 	bl	b2c8 <z_bss_zero>
	z_data_copy();
    6930:	f005 fcf2 	bl	c318 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6934:	f000 fc22 	bl	717c <z_arm_interrupt_init>
	z_cstart();
    6938:	f004 fcd0 	bl	b2dc <z_cstart>
    693c:	00001000 	.word	0x00001000
    6940:	e000ed00 	.word	0xe000ed00

00006944 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6944:	4a0a      	ldr	r2, [pc, #40]	; (6970 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6946:	490b      	ldr	r1, [pc, #44]	; (6974 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6948:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    694a:	6809      	ldr	r1, [r1, #0]
    694c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6950:	4909      	ldr	r1, [pc, #36]	; (6978 <arch_swap+0x34>)
	_current->arch.basepri = key;
    6952:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6956:	684b      	ldr	r3, [r1, #4]
    6958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    695c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    695e:	2300      	movs	r3, #0
    6960:	f383 8811 	msr	BASEPRI, r3
    6964:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6968:	6893      	ldr	r3, [r2, #8]
}
    696a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    696e:	4770      	bx	lr
    6970:	2000214c 	.word	0x2000214c
    6974:	0001100c 	.word	0x0001100c
    6978:	e000ed00 	.word	0xe000ed00

0000697c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    697c:	4913      	ldr	r1, [pc, #76]	; (69cc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    697e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6980:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6984:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6986:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    698a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    698e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    6990:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6994:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6998:	4f0d      	ldr	r7, [pc, #52]	; (69d0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    699a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    699e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    69a0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    69a2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    69a4:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    69a8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    69aa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    69ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    69b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    69b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    69b6:	f000 fc29 	bl	720c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    69ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    69be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    69c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    69c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    69ca:	4770      	bx	lr
    ldr r1, =_kernel
    69cc:	2000214c 	.word	0x2000214c
    ldr v4, =_SCS_ICSR
    69d0:	e000ed04 	.word	0xe000ed04

000069d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    69d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    69d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    69da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    69de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    69e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    69e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    69e8:	2902      	cmp	r1, #2
    beq _oops
    69ea:	d0ff      	beq.n	69ec <_oops>

000069ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    69ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    69ee:	f008 f9aa 	bl	ed46 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    69f2:	bd01      	pop	{r0, pc}

000069f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    69f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    69f8:	9b00      	ldr	r3, [sp, #0]
    69fa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    69fe:	490a      	ldr	r1, [pc, #40]	; (6a28 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6a00:	9b01      	ldr	r3, [sp, #4]
    6a02:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6a06:	9b02      	ldr	r3, [sp, #8]
    6a08:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6a0c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6a14:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6a18:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6a1c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6a1e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6a20:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6a22:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6a26:	4770      	bx	lr
    6a28:	0000cba9 	.word	0x0000cba9

00006a2c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6a2c:	4a0a      	ldr	r2, [pc, #40]	; (6a58 <z_check_thread_stack_fail+0x2c>)
{
    6a2e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    6a30:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    6a32:	b178      	cbz	r0, 6a54 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6a34:	f113 0f16 	cmn.w	r3, #22
    6a38:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    6a3c:	d005      	beq.n	6a4a <z_check_thread_stack_fail+0x1e>
    6a3e:	f1a0 0220 	sub.w	r2, r0, #32
    6a42:	429a      	cmp	r2, r3
    6a44:	d805      	bhi.n	6a52 <z_check_thread_stack_fail+0x26>
    6a46:	4283      	cmp	r3, r0
    6a48:	d203      	bcs.n	6a52 <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    6a4a:	4281      	cmp	r1, r0
    6a4c:	bf28      	it	cs
    6a4e:	2000      	movcs	r0, #0
    6a50:	4770      	bx	lr
    6a52:	2000      	movs	r0, #0
}
    6a54:	4770      	bx	lr
    6a56:	bf00      	nop
    6a58:	2000214c 	.word	0x2000214c

00006a5c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6a5c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6a5e:	4b09      	ldr	r3, [pc, #36]	; (6a84 <arch_switch_to_main_thread+0x28>)
    6a60:	6098      	str	r0, [r3, #8]
{
    6a62:	460d      	mov	r5, r1
    6a64:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6a66:	f000 fbd1 	bl	720c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6a6a:	4620      	mov	r0, r4
    6a6c:	f385 8809 	msr	PSP, r5
    6a70:	2100      	movs	r1, #0
    6a72:	b663      	cpsie	if
    6a74:	f381 8811 	msr	BASEPRI, r1
    6a78:	f3bf 8f6f 	isb	sy
    6a7c:	2200      	movs	r2, #0
    6a7e:	2300      	movs	r3, #0
    6a80:	f006 f892 	bl	cba8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6a84:	2000214c 	.word	0x2000214c

00006a88 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6a88:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6a8a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6a8c:	4a0b      	ldr	r2, [pc, #44]	; (6abc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6a8e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    6a90:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6a92:	bf1e      	ittt	ne
	movne	r1, #0
    6a94:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6a96:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    6a98:	f009 f80a 	blne	fab0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6a9c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6a9e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6aa2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6aa6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6aaa:	4905      	ldr	r1, [pc, #20]	; (6ac0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6aac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6aae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6ab0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6ab2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6ab6:	4903      	ldr	r1, [pc, #12]	; (6ac4 <_isr_wrapper+0x3c>)
	bx r1
    6ab8:	4708      	bx	r1
    6aba:	0000      	.short	0x0000
	ldr r2, =_kernel
    6abc:	2000214c 	.word	0x2000214c
	ldr r1, =_sw_isr_table
    6ac0:	00010458 	.word	0x00010458
	ldr r1, =z_arm_int_exit
    6ac4:	00006ac9 	.word	0x00006ac9

00006ac8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6ac8:	4b04      	ldr	r3, [pc, #16]	; (6adc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6aca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6acc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    6ace:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6ad0:	d003      	beq.n	6ada <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6ad2:	4903      	ldr	r1, [pc, #12]	; (6ae0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6ad8:	600a      	str	r2, [r1, #0]

00006ada <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6ada:	4770      	bx	lr
	ldr r3, =_kernel
    6adc:	2000214c 	.word	0x2000214c
	ldr r1, =_SCS_ICSR
    6ae0:	e000ed04 	.word	0xe000ed04

00006ae4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6ae4:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    6ae6:	4c4b      	ldr	r4, [pc, #300]	; (6c14 <bus_fault.constprop.0+0x130>)
    6ae8:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6aea:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6aec:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6aee:	b088      	sub	sp, #32
    6af0:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    6af2:	d00a      	beq.n	6b0a <bus_fault.constprop.0+0x26>
    6af4:	4b48      	ldr	r3, [pc, #288]	; (6c18 <bus_fault.constprop.0+0x134>)
    6af6:	9306      	str	r3, [sp, #24]
    6af8:	aa05      	add	r2, sp, #20
    6afa:	2302      	movs	r3, #2
    6afc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b00:	4620      	mov	r0, r4
    6b02:	9301      	str	r3, [sp, #4]
    6b04:	9305      	str	r3, [sp, #20]
    6b06:	f008 f92d 	bl	ed64 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6b0a:	4b44      	ldr	r3, [pc, #272]	; (6c1c <bus_fault.constprop.0+0x138>)
    6b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b0e:	04da      	lsls	r2, r3, #19
    6b10:	d50d      	bpl.n	6b2e <bus_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error");
    6b12:	6823      	ldr	r3, [r4, #0]
    6b14:	075b      	lsls	r3, r3, #29
    6b16:	d00a      	beq.n	6b2e <bus_fault.constprop.0+0x4a>
    6b18:	4b41      	ldr	r3, [pc, #260]	; (6c20 <bus_fault.constprop.0+0x13c>)
    6b1a:	9306      	str	r3, [sp, #24]
    6b1c:	483d      	ldr	r0, [pc, #244]	; (6c14 <bus_fault.constprop.0+0x130>)
    6b1e:	2302      	movs	r3, #2
    6b20:	aa05      	add	r2, sp, #20
    6b22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b26:	9301      	str	r3, [sp, #4]
    6b28:	9305      	str	r3, [sp, #20]
    6b2a:	f008 f91b 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6b2e:	4b3b      	ldr	r3, [pc, #236]	; (6c1c <bus_fault.constprop.0+0x138>)
    6b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b32:	0518      	lsls	r0, r3, #20
    6b34:	d50d      	bpl.n	6b52 <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    6b36:	6823      	ldr	r3, [r4, #0]
    6b38:	0759      	lsls	r1, r3, #29
    6b3a:	d00a      	beq.n	6b52 <bus_fault.constprop.0+0x6e>
    6b3c:	4b39      	ldr	r3, [pc, #228]	; (6c24 <bus_fault.constprop.0+0x140>)
    6b3e:	9306      	str	r3, [sp, #24]
    6b40:	4834      	ldr	r0, [pc, #208]	; (6c14 <bus_fault.constprop.0+0x130>)
    6b42:	2302      	movs	r3, #2
    6b44:	aa05      	add	r2, sp, #20
    6b46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b4a:	9301      	str	r3, [sp, #4]
    6b4c:	9305      	str	r3, [sp, #20]
    6b4e:	f008 f909 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6b52:	4b32      	ldr	r3, [pc, #200]	; (6c1c <bus_fault.constprop.0+0x138>)
    6b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b56:	059a      	lsls	r2, r3, #22
    6b58:	d527      	bpl.n	6baa <bus_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Precise data bus error");
    6b5a:	6823      	ldr	r3, [r4, #0]
    6b5c:	075b      	lsls	r3, r3, #29
    6b5e:	d00a      	beq.n	6b76 <bus_fault.constprop.0+0x92>
    6b60:	4b31      	ldr	r3, [pc, #196]	; (6c28 <bus_fault.constprop.0+0x144>)
    6b62:	9306      	str	r3, [sp, #24]
    6b64:	482b      	ldr	r0, [pc, #172]	; (6c14 <bus_fault.constprop.0+0x130>)
    6b66:	2302      	movs	r3, #2
    6b68:	aa05      	add	r2, sp, #20
    6b6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b6e:	9301      	str	r3, [sp, #4]
    6b70:	9305      	str	r3, [sp, #20]
    6b72:	f008 f8f7 	bl	ed64 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6b76:	4b29      	ldr	r3, [pc, #164]	; (6c1c <bus_fault.constprop.0+0x138>)
    6b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b7c:	0418      	lsls	r0, r3, #16
    6b7e:	d514      	bpl.n	6baa <bus_fault.constprop.0+0xc6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6b80:	6823      	ldr	r3, [r4, #0]
    6b82:	0759      	lsls	r1, r3, #29
    6b84:	d00b      	beq.n	6b9e <bus_fault.constprop.0+0xba>
    6b86:	4b29      	ldr	r3, [pc, #164]	; (6c2c <bus_fault.constprop.0+0x148>)
    6b88:	4822      	ldr	r0, [pc, #136]	; (6c14 <bus_fault.constprop.0+0x130>)
    6b8a:	e9cd 3206 	strd	r3, r2, [sp, #24]
    6b8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6b92:	2303      	movs	r3, #3
    6b94:	aa05      	add	r2, sp, #20
    6b96:	9301      	str	r3, [sp, #4]
    6b98:	9305      	str	r3, [sp, #20]
    6b9a:	f008 f8e3 	bl	ed64 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    6b9e:	b126      	cbz	r6, 6baa <bus_fault.constprop.0+0xc6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6ba0:	4a1e      	ldr	r2, [pc, #120]	; (6c1c <bus_fault.constprop.0+0x138>)
    6ba2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6ba8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6baa:	4b1c      	ldr	r3, [pc, #112]	; (6c1c <bus_fault.constprop.0+0x138>)
    6bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bae:	055b      	lsls	r3, r3, #21
    6bb0:	d50d      	bpl.n	6bce <bus_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Imprecise data bus error");
    6bb2:	6823      	ldr	r3, [r4, #0]
    6bb4:	075e      	lsls	r6, r3, #29
    6bb6:	d00a      	beq.n	6bce <bus_fault.constprop.0+0xea>
    6bb8:	4b1d      	ldr	r3, [pc, #116]	; (6c30 <bus_fault.constprop.0+0x14c>)
    6bba:	9306      	str	r3, [sp, #24]
    6bbc:	4815      	ldr	r0, [pc, #84]	; (6c14 <bus_fault.constprop.0+0x130>)
    6bbe:	2302      	movs	r3, #2
    6bc0:	aa05      	add	r2, sp, #20
    6bc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6bc6:	9301      	str	r3, [sp, #4]
    6bc8:	9305      	str	r3, [sp, #20]
    6bca:	f008 f8cb 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6bce:	4b13      	ldr	r3, [pc, #76]	; (6c1c <bus_fault.constprop.0+0x138>)
    6bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6bd2:	05d0      	lsls	r0, r2, #23
    6bd4:	d516      	bpl.n	6c04 <bus_fault.constprop.0+0x120>
		PR_FAULT_INFO("  Instruction bus error");
    6bd6:	6823      	ldr	r3, [r4, #0]
    6bd8:	0759      	lsls	r1, r3, #29
    6bda:	d00a      	beq.n	6bf2 <bus_fault.constprop.0+0x10e>
    6bdc:	4b15      	ldr	r3, [pc, #84]	; (6c34 <bus_fault.constprop.0+0x150>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6bde:	9306      	str	r3, [sp, #24]
    6be0:	480c      	ldr	r0, [pc, #48]	; (6c14 <bus_fault.constprop.0+0x130>)
    6be2:	2302      	movs	r3, #2
    6be4:	aa05      	add	r2, sp, #20
    6be6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6bea:	9301      	str	r3, [sp, #4]
    6bec:	9305      	str	r3, [sp, #20]
    6bee:	f008 f8b9 	bl	ed64 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6bf2:	4a0a      	ldr	r2, [pc, #40]	; (6c1c <bus_fault.constprop.0+0x138>)
    6bf4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    6bf6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6bf8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6bfc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6bfe:	7028      	strb	r0, [r5, #0]

	return reason;
}
    6c00:	b008      	add	sp, #32
    6c02:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c06:	049a      	lsls	r2, r3, #18
    6c08:	d5f3      	bpl.n	6bf2 <bus_fault.constprop.0+0x10e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6c0a:	6823      	ldr	r3, [r4, #0]
    6c0c:	075b      	lsls	r3, r3, #29
    6c0e:	d0f0      	beq.n	6bf2 <bus_fault.constprop.0+0x10e>
    6c10:	4b09      	ldr	r3, [pc, #36]	; (6c38 <bus_fault.constprop.0+0x154>)
    6c12:	e7e4      	b.n	6bde <bus_fault.constprop.0+0xfa>
    6c14:	20000230 	.word	0x20000230
    6c18:	00012608 	.word	0x00012608
    6c1c:	e000ed00 	.word	0xe000ed00
    6c20:	0001261e 	.word	0x0001261e
    6c24:	0001262f 	.word	0x0001262f
    6c28:	00012642 	.word	0x00012642
    6c2c:	0001265b 	.word	0x0001265b
    6c30:	00012670 	.word	0x00012670
    6c34:	0001268b 	.word	0x0001268b
    6c38:	000126a3 	.word	0x000126a3

00006c3c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6c3c:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    6c3e:	4c43      	ldr	r4, [pc, #268]	; (6d4c <usage_fault.constprop.0+0x110>)
    6c40:	6823      	ldr	r3, [r4, #0]
    6c42:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6c44:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6c46:	d00a      	beq.n	6c5e <usage_fault.constprop.0+0x22>
    6c48:	4b41      	ldr	r3, [pc, #260]	; (6d50 <usage_fault.constprop.0+0x114>)
    6c4a:	9306      	str	r3, [sp, #24]
    6c4c:	aa05      	add	r2, sp, #20
    6c4e:	2302      	movs	r3, #2
    6c50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c54:	4620      	mov	r0, r4
    6c56:	9301      	str	r3, [sp, #4]
    6c58:	9305      	str	r3, [sp, #20]
    6c5a:	f008 f883 	bl	ed64 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6c5e:	4b3d      	ldr	r3, [pc, #244]	; (6d54 <usage_fault.constprop.0+0x118>)
    6c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c62:	0198      	lsls	r0, r3, #6
    6c64:	d50d      	bpl.n	6c82 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    6c66:	6823      	ldr	r3, [r4, #0]
    6c68:	0759      	lsls	r1, r3, #29
    6c6a:	d00a      	beq.n	6c82 <usage_fault.constprop.0+0x46>
    6c6c:	4b3a      	ldr	r3, [pc, #232]	; (6d58 <usage_fault.constprop.0+0x11c>)
    6c6e:	9306      	str	r3, [sp, #24]
    6c70:	4836      	ldr	r0, [pc, #216]	; (6d4c <usage_fault.constprop.0+0x110>)
    6c72:	2302      	movs	r3, #2
    6c74:	aa05      	add	r2, sp, #20
    6c76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c7a:	9301      	str	r3, [sp, #4]
    6c7c:	9305      	str	r3, [sp, #20]
    6c7e:	f008 f871 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6c82:	4b34      	ldr	r3, [pc, #208]	; (6d54 <usage_fault.constprop.0+0x118>)
    6c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c86:	01da      	lsls	r2, r3, #7
    6c88:	d50d      	bpl.n	6ca6 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Unaligned memory access");
    6c8a:	6823      	ldr	r3, [r4, #0]
    6c8c:	075b      	lsls	r3, r3, #29
    6c8e:	d00a      	beq.n	6ca6 <usage_fault.constprop.0+0x6a>
    6c90:	4b32      	ldr	r3, [pc, #200]	; (6d5c <usage_fault.constprop.0+0x120>)
    6c92:	9306      	str	r3, [sp, #24]
    6c94:	482d      	ldr	r0, [pc, #180]	; (6d4c <usage_fault.constprop.0+0x110>)
    6c96:	2302      	movs	r3, #2
    6c98:	aa05      	add	r2, sp, #20
    6c9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c9e:	9301      	str	r3, [sp, #4]
    6ca0:	9305      	str	r3, [sp, #20]
    6ca2:	f008 f85f 	bl	ed64 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6ca6:	4b2b      	ldr	r3, [pc, #172]	; (6d54 <usage_fault.constprop.0+0x118>)
    6ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6caa:	0318      	lsls	r0, r3, #12
    6cac:	d50d      	bpl.n	6cca <usage_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  No coprocessor instructions");
    6cae:	6823      	ldr	r3, [r4, #0]
    6cb0:	0759      	lsls	r1, r3, #29
    6cb2:	d00a      	beq.n	6cca <usage_fault.constprop.0+0x8e>
    6cb4:	4b2a      	ldr	r3, [pc, #168]	; (6d60 <usage_fault.constprop.0+0x124>)
    6cb6:	9306      	str	r3, [sp, #24]
    6cb8:	4824      	ldr	r0, [pc, #144]	; (6d4c <usage_fault.constprop.0+0x110>)
    6cba:	2302      	movs	r3, #2
    6cbc:	aa05      	add	r2, sp, #20
    6cbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6cc2:	9301      	str	r3, [sp, #4]
    6cc4:	9305      	str	r3, [sp, #20]
    6cc6:	f008 f84d 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6cca:	4b22      	ldr	r3, [pc, #136]	; (6d54 <usage_fault.constprop.0+0x118>)
    6ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cce:	035a      	lsls	r2, r3, #13
    6cd0:	d50d      	bpl.n	6cee <usage_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6cd2:	6823      	ldr	r3, [r4, #0]
    6cd4:	075b      	lsls	r3, r3, #29
    6cd6:	d00a      	beq.n	6cee <usage_fault.constprop.0+0xb2>
    6cd8:	4b22      	ldr	r3, [pc, #136]	; (6d64 <usage_fault.constprop.0+0x128>)
    6cda:	9306      	str	r3, [sp, #24]
    6cdc:	481b      	ldr	r0, [pc, #108]	; (6d4c <usage_fault.constprop.0+0x110>)
    6cde:	2302      	movs	r3, #2
    6ce0:	aa05      	add	r2, sp, #20
    6ce2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ce6:	9301      	str	r3, [sp, #4]
    6ce8:	9305      	str	r3, [sp, #20]
    6cea:	f008 f83b 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6cee:	4b19      	ldr	r3, [pc, #100]	; (6d54 <usage_fault.constprop.0+0x118>)
    6cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cf2:	0398      	lsls	r0, r3, #14
    6cf4:	d50d      	bpl.n	6d12 <usage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6cf6:	6823      	ldr	r3, [r4, #0]
    6cf8:	0759      	lsls	r1, r3, #29
    6cfa:	d00a      	beq.n	6d12 <usage_fault.constprop.0+0xd6>
    6cfc:	4b1a      	ldr	r3, [pc, #104]	; (6d68 <usage_fault.constprop.0+0x12c>)
    6cfe:	9306      	str	r3, [sp, #24]
    6d00:	4812      	ldr	r0, [pc, #72]	; (6d4c <usage_fault.constprop.0+0x110>)
    6d02:	2302      	movs	r3, #2
    6d04:	aa05      	add	r2, sp, #20
    6d06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d0a:	9301      	str	r3, [sp, #4]
    6d0c:	9305      	str	r3, [sp, #20]
    6d0e:	f008 f829 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6d12:	4b10      	ldr	r3, [pc, #64]	; (6d54 <usage_fault.constprop.0+0x118>)
    6d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d16:	03da      	lsls	r2, r3, #15
    6d18:	d50d      	bpl.n	6d36 <usage_fault.constprop.0+0xfa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6d1a:	6823      	ldr	r3, [r4, #0]
    6d1c:	075b      	lsls	r3, r3, #29
    6d1e:	d00a      	beq.n	6d36 <usage_fault.constprop.0+0xfa>
    6d20:	4b12      	ldr	r3, [pc, #72]	; (6d6c <usage_fault.constprop.0+0x130>)
    6d22:	9306      	str	r3, [sp, #24]
    6d24:	4809      	ldr	r0, [pc, #36]	; (6d4c <usage_fault.constprop.0+0x110>)
    6d26:	2302      	movs	r3, #2
    6d28:	aa05      	add	r2, sp, #20
    6d2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d2e:	9301      	str	r3, [sp, #4]
    6d30:	9305      	str	r3, [sp, #20]
    6d32:	f008 f817 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6d36:	4a07      	ldr	r2, [pc, #28]	; (6d54 <usage_fault.constprop.0+0x118>)
    6d38:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6d3a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6d3e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    6d42:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6d44:	6293      	str	r3, [r2, #40]	; 0x28
}
    6d46:	b008      	add	sp, #32
    6d48:	bd10      	pop	{r4, pc}
    6d4a:	bf00      	nop
    6d4c:	20000230 	.word	0x20000230
    6d50:	000126d2 	.word	0x000126d2
    6d54:	e000ed00 	.word	0xe000ed00
    6d58:	000126ea 	.word	0x000126ea
    6d5c:	000126fd 	.word	0x000126fd
    6d60:	00012717 	.word	0x00012717
    6d64:	00012735 	.word	0x00012735
    6d68:	0001275a 	.word	0x0001275a
    6d6c:	00012774 	.word	0x00012774

00006d70 <mem_manage_fault>:
{
    6d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    6d74:	4c55      	ldr	r4, [pc, #340]	; (6ecc <mem_manage_fault+0x15c>)
    6d76:	6823      	ldr	r3, [r4, #0]
{
    6d78:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6d7a:	0759      	lsls	r1, r3, #29
{
    6d7c:	b088      	sub	sp, #32
    6d7e:	4607      	mov	r7, r0
    6d80:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6d82:	d00a      	beq.n	6d9a <mem_manage_fault+0x2a>
    6d84:	4b52      	ldr	r3, [pc, #328]	; (6ed0 <mem_manage_fault+0x160>)
    6d86:	9306      	str	r3, [sp, #24]
    6d88:	aa05      	add	r2, sp, #20
    6d8a:	2302      	movs	r3, #2
    6d8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d90:	4620      	mov	r0, r4
    6d92:	9301      	str	r3, [sp, #4]
    6d94:	9305      	str	r3, [sp, #20]
    6d96:	f007 ffe5 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6d9a:	4b4e      	ldr	r3, [pc, #312]	; (6ed4 <mem_manage_fault+0x164>)
    6d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d9e:	06da      	lsls	r2, r3, #27
    6da0:	d50d      	bpl.n	6dbe <mem_manage_fault+0x4e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6da2:	6823      	ldr	r3, [r4, #0]
    6da4:	075b      	lsls	r3, r3, #29
    6da6:	d00a      	beq.n	6dbe <mem_manage_fault+0x4e>
    6da8:	4b4b      	ldr	r3, [pc, #300]	; (6ed8 <mem_manage_fault+0x168>)
    6daa:	9306      	str	r3, [sp, #24]
    6dac:	4847      	ldr	r0, [pc, #284]	; (6ecc <mem_manage_fault+0x15c>)
    6dae:	2302      	movs	r3, #2
    6db0:	aa05      	add	r2, sp, #20
    6db2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6db6:	9301      	str	r3, [sp, #4]
    6db8:	9305      	str	r3, [sp, #20]
    6dba:	f007 ffd3 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6dbe:	4b45      	ldr	r3, [pc, #276]	; (6ed4 <mem_manage_fault+0x164>)
    6dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dc2:	071e      	lsls	r6, r3, #28
    6dc4:	d50d      	bpl.n	6de2 <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Unstacking error");
    6dc6:	6823      	ldr	r3, [r4, #0]
    6dc8:	0758      	lsls	r0, r3, #29
    6dca:	d00a      	beq.n	6de2 <mem_manage_fault+0x72>
    6dcc:	4b43      	ldr	r3, [pc, #268]	; (6edc <mem_manage_fault+0x16c>)
    6dce:	9306      	str	r3, [sp, #24]
    6dd0:	483e      	ldr	r0, [pc, #248]	; (6ecc <mem_manage_fault+0x15c>)
    6dd2:	2302      	movs	r3, #2
    6dd4:	aa05      	add	r2, sp, #20
    6dd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6dda:	9301      	str	r3, [sp, #4]
    6ddc:	9305      	str	r3, [sp, #20]
    6dde:	f007 ffc1 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6de2:	4b3c      	ldr	r3, [pc, #240]	; (6ed4 <mem_manage_fault+0x164>)
    6de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6de6:	0799      	lsls	r1, r3, #30
    6de8:	d437      	bmi.n	6e5a <mem_manage_fault+0xea>
	uint32_t mmfar = -EINVAL;
    6dea:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6dee:	4b39      	ldr	r3, [pc, #228]	; (6ed4 <mem_manage_fault+0x164>)
    6df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6df2:	07d9      	lsls	r1, r3, #31
    6df4:	d50d      	bpl.n	6e12 <mem_manage_fault+0xa2>
		PR_FAULT_INFO("  Instruction Access Violation");
    6df6:	6823      	ldr	r3, [r4, #0]
    6df8:	075a      	lsls	r2, r3, #29
    6dfa:	d00a      	beq.n	6e12 <mem_manage_fault+0xa2>
    6dfc:	4b38      	ldr	r3, [pc, #224]	; (6ee0 <mem_manage_fault+0x170>)
    6dfe:	9306      	str	r3, [sp, #24]
    6e00:	4832      	ldr	r0, [pc, #200]	; (6ecc <mem_manage_fault+0x15c>)
    6e02:	2302      	movs	r3, #2
    6e04:	aa05      	add	r2, sp, #20
    6e06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e0a:	9301      	str	r3, [sp, #4]
    6e0c:	9305      	str	r3, [sp, #20]
    6e0e:	f007 ffa9 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6e12:	4b30      	ldr	r3, [pc, #192]	; (6ed4 <mem_manage_fault+0x164>)
    6e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e16:	069b      	lsls	r3, r3, #26
    6e18:	d50d      	bpl.n	6e36 <mem_manage_fault+0xc6>
		PR_FAULT_INFO(
    6e1a:	6823      	ldr	r3, [r4, #0]
    6e1c:	0758      	lsls	r0, r3, #29
    6e1e:	d00a      	beq.n	6e36 <mem_manage_fault+0xc6>
    6e20:	4b30      	ldr	r3, [pc, #192]	; (6ee4 <mem_manage_fault+0x174>)
    6e22:	9306      	str	r3, [sp, #24]
    6e24:	4829      	ldr	r0, [pc, #164]	; (6ecc <mem_manage_fault+0x15c>)
    6e26:	2302      	movs	r3, #2
    6e28:	aa05      	add	r2, sp, #20
    6e2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e2e:	9301      	str	r3, [sp, #4]
    6e30:	9305      	str	r3, [sp, #20]
    6e32:	f007 ff97 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6e36:	4b27      	ldr	r3, [pc, #156]	; (6ed4 <mem_manage_fault+0x164>)
    6e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6e3a:	06d1      	lsls	r1, r2, #27
    6e3c:	d438      	bmi.n	6eb0 <mem_manage_fault+0x140>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6e40:	0792      	lsls	r2, r2, #30
    6e42:	d435      	bmi.n	6eb0 <mem_manage_fault+0x140>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6e44:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6e46:	4a23      	ldr	r2, [pc, #140]	; (6ed4 <mem_manage_fault+0x164>)
    6e48:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6e4a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6e4e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6e50:	2300      	movs	r3, #0
    6e52:	702b      	strb	r3, [r5, #0]
}
    6e54:	b008      	add	sp, #32
    6e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    6e5a:	6823      	ldr	r3, [r4, #0]
    6e5c:	075a      	lsls	r2, r3, #29
    6e5e:	d00a      	beq.n	6e76 <mem_manage_fault+0x106>
    6e60:	4b21      	ldr	r3, [pc, #132]	; (6ee8 <mem_manage_fault+0x178>)
    6e62:	9306      	str	r3, [sp, #24]
    6e64:	4819      	ldr	r0, [pc, #100]	; (6ecc <mem_manage_fault+0x15c>)
    6e66:	2302      	movs	r3, #2
    6e68:	aa05      	add	r2, sp, #20
    6e6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e6e:	9301      	str	r3, [sp, #4]
    6e70:	9305      	str	r3, [sp, #20]
    6e72:	f007 ff77 	bl	ed64 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    6e76:	4b17      	ldr	r3, [pc, #92]	; (6ed4 <mem_manage_fault+0x164>)
    6e78:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e7c:	061b      	lsls	r3, r3, #24
    6e7e:	d5b4      	bpl.n	6dea <mem_manage_fault+0x7a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6e80:	6823      	ldr	r3, [r4, #0]
    6e82:	0758      	lsls	r0, r3, #29
    6e84:	d00b      	beq.n	6e9e <mem_manage_fault+0x12e>
    6e86:	4b19      	ldr	r3, [pc, #100]	; (6eec <mem_manage_fault+0x17c>)
    6e88:	4810      	ldr	r0, [pc, #64]	; (6ecc <mem_manage_fault+0x15c>)
    6e8a:	e9cd 3606 	strd	r3, r6, [sp, #24]
    6e8e:	aa05      	add	r2, sp, #20
    6e90:	2303      	movs	r3, #3
    6e92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6e96:	9301      	str	r3, [sp, #4]
    6e98:	9305      	str	r3, [sp, #20]
    6e9a:	f007 ff63 	bl	ed64 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    6e9e:	f1b8 0f00 	cmp.w	r8, #0
    6ea2:	d0a4      	beq.n	6dee <mem_manage_fault+0x7e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6ea4:	4a0b      	ldr	r2, [pc, #44]	; (6ed4 <mem_manage_fault+0x164>)
    6ea6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6eac:	6293      	str	r3, [r2, #40]	; 0x28
    6eae:	e79e      	b.n	6dee <mem_manage_fault+0x7e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    6eb0:	685b      	ldr	r3, [r3, #4]
    6eb2:	051b      	lsls	r3, r3, #20
    6eb4:	d5c6      	bpl.n	6e44 <mem_manage_fault+0xd4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    6eb6:	4639      	mov	r1, r7
    6eb8:	4630      	mov	r0, r6
    6eba:	f7ff fdb7 	bl	6a2c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    6ebe:	2800      	cmp	r0, #0
    6ec0:	d0c0      	beq.n	6e44 <mem_manage_fault+0xd4>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6ec2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6ec6:	2002      	movs	r0, #2
    6ec8:	e7bd      	b.n	6e46 <mem_manage_fault+0xd6>
    6eca:	bf00      	nop
    6ecc:	20000230 	.word	0x20000230
    6ed0:	0001279f 	.word	0x0001279f
    6ed4:	e000ed00 	.word	0xe000ed00
    6ed8:	000127b5 	.word	0x000127b5
    6edc:	0001262f 	.word	0x0001262f
    6ee0:	00012816 	.word	0x00012816
    6ee4:	000126a3 	.word	0x000126a3
    6ee8:	000127e8 	.word	0x000127e8
    6eec:	00012800 	.word	0x00012800

00006ef0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6ef2:	ab0a      	add	r3, sp, #40	; 0x28
    6ef4:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    6ef6:	9302      	str	r3, [sp, #8]
    6ef8:	4b05      	ldr	r3, [pc, #20]	; (6f10 <z_log_msg2_runtime_create.constprop.0+0x20>)
    6efa:	9301      	str	r3, [sp, #4]
    6efc:	2300      	movs	r3, #0
    6efe:	9300      	str	r3, [sp, #0]
    6f00:	2201      	movs	r2, #1
    6f02:	4618      	mov	r0, r3
    6f04:	f7fb fe06 	bl	2b14 <z_impl_z_log_msg2_runtime_vcreate>
}
    6f08:	b007      	add	sp, #28
    6f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f0e:	bf00      	nop
    6f10:	00012835 	.word	0x00012835

00006f14 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6f18:	4b83      	ldr	r3, [pc, #524]	; (7128 <z_arm_fault+0x214>)
    6f1a:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    6f1e:	b08e      	sub	sp, #56	; 0x38
    6f20:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6f22:	f3c8 0408 	ubfx	r4, r8, #0, #9
    6f26:	2500      	movs	r5, #0
    6f28:	f385 8811 	msr	BASEPRI, r5
    6f2c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6f30:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6f34:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6f38:	d112      	bne.n	6f60 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6f3a:	f002 030c 	and.w	r3, r2, #12
    6f3e:	2b08      	cmp	r3, #8
    6f40:	d111      	bne.n	6f66 <z_arm_fault+0x52>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6f42:	487a      	ldr	r0, [pc, #488]	; (712c <z_arm_fault+0x218>)
    6f44:	6803      	ldr	r3, [r0, #0]
    6f46:	f013 0707 	ands.w	r7, r3, #7
    6f4a:	d00a      	beq.n	6f62 <z_arm_fault+0x4e>
    6f4c:	4b78      	ldr	r3, [pc, #480]	; (7130 <z_arm_fault+0x21c>)
    6f4e:	930a      	str	r3, [sp, #40]	; 0x28
    6f50:	aa09      	add	r2, sp, #36	; 0x24
    6f52:	2302      	movs	r3, #2
    6f54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f58:	9305      	str	r3, [sp, #20]
    6f5a:	9309      	str	r3, [sp, #36]	; 0x24
    6f5c:	f007 ff02 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    6f60:	462f      	mov	r7, r5
		return NULL;
    6f62:	463e      	mov	r6, r7
    6f64:	e004      	b.n	6f70 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6f66:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    6f68:	bf4e      	itee	mi
    6f6a:	462f      	movmi	r7, r5
			ptr_esf = (z_arch_esf_t *)msp;
    6f6c:	4606      	movpl	r6, r0
			*nested_exc = true;
    6f6e:	2701      	movpl	r7, #1
	*recoverable = false;
    6f70:	2300      	movs	r3, #0
    6f72:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    6f76:	1ee3      	subs	r3, r4, #3
    6f78:	2b09      	cmp	r3, #9
    6f7a:	f200 80b8 	bhi.w	70ee <z_arm_fault+0x1da>
    6f7e:	e8df f003 	tbb	[pc, r3]
    6f82:	a005      	.short	0xa005
    6f84:	b6b69da4 	.word	0xb6b69da4
    6f88:	a8b6b6b6 	.word	0xa8b6b6b6
	PR_FAULT_INFO("***** HARD FAULT *****");
    6f8c:	4d67      	ldr	r5, [pc, #412]	; (712c <z_arm_fault+0x218>)
    6f8e:	682b      	ldr	r3, [r5, #0]
    6f90:	075a      	lsls	r2, r3, #29
    6f92:	d00a      	beq.n	6faa <z_arm_fault+0x96>
    6f94:	4b67      	ldr	r3, [pc, #412]	; (7134 <z_arm_fault+0x220>)
    6f96:	930a      	str	r3, [sp, #40]	; 0x28
    6f98:	aa09      	add	r2, sp, #36	; 0x24
    6f9a:	2302      	movs	r3, #2
    6f9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6fa0:	4628      	mov	r0, r5
    6fa2:	9305      	str	r3, [sp, #20]
    6fa4:	9309      	str	r3, [sp, #36]	; 0x24
    6fa6:	f007 fedd 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6faa:	4a5f      	ldr	r2, [pc, #380]	; (7128 <z_arm_fault+0x214>)
    6fac:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    6fae:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6fb2:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6fb6:	f88d 8013 	strb.w	r8, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6fba:	d010      	beq.n	6fde <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    6fbc:	682b      	ldr	r3, [r5, #0]
    6fbe:	075b      	lsls	r3, r3, #29
    6fc0:	d101      	bne.n	6fc6 <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6fc2:	2400      	movs	r4, #0
    6fc4:	e01c      	b.n	7000 <z_arm_fault+0xec>
		PR_EXC("  Bus fault on vector table read");
    6fc6:	4b5c      	ldr	r3, [pc, #368]	; (7138 <z_arm_fault+0x224>)
    6fc8:	930a      	str	r3, [sp, #40]	; 0x28
    6fca:	4858      	ldr	r0, [pc, #352]	; (712c <z_arm_fault+0x218>)
    6fcc:	2302      	movs	r3, #2
    6fce:	9305      	str	r3, [sp, #20]
    6fd0:	9309      	str	r3, [sp, #36]	; 0x24
    6fd2:	aa09      	add	r2, sp, #36	; 0x24
    6fd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    6fd8:	f007 fec4 	bl	ed64 <z_log_msg2_static_create.constprop.0>
    6fdc:	e7f1      	b.n	6fc2 <z_arm_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6fde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	da28      	bge.n	7036 <z_arm_fault+0x122>
		PR_EXC("  Debug event");
    6fe4:	682b      	ldr	r3, [r5, #0]
    6fe6:	075d      	lsls	r5, r3, #29
    6fe8:	d0eb      	beq.n	6fc2 <z_arm_fault+0xae>
    6fea:	4b54      	ldr	r3, [pc, #336]	; (713c <z_arm_fault+0x228>)
    6fec:	930a      	str	r3, [sp, #40]	; 0x28
    6fee:	484f      	ldr	r0, [pc, #316]	; (712c <z_arm_fault+0x218>)
    6ff0:	2302      	movs	r3, #2
    6ff2:	aa09      	add	r2, sp, #36	; 0x24
    6ff4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ff8:	9305      	str	r3, [sp, #20]
    6ffa:	9309      	str	r3, [sp, #36]	; 0x24
    6ffc:	f007 feb2 	bl	ed64 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7000:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7004:	b9a3      	cbnz	r3, 7030 <z_arm_fault+0x11c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7006:	2220      	movs	r2, #32
    7008:	4631      	mov	r1, r6
    700a:	a806      	add	r0, sp, #24
    700c:	f008 f83a 	bl	f084 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7012:	2f00      	cmp	r7, #0
    7014:	f000 8083 	beq.w	711e <z_arm_fault+0x20a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7018:	f3c3 0208 	ubfx	r2, r3, #0, #9
    701c:	b922      	cbnz	r2, 7028 <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    701e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7022:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7026:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    7028:	a906      	add	r1, sp, #24
    702a:	4620      	mov	r0, r4
    702c:	f7ff fbaa 	bl	6784 <z_arm_fatal_error>
}
    7030:	b00e      	add	sp, #56	; 0x38
    7032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7036:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7038:	005c      	lsls	r4, r3, #1
    703a:	d5c2      	bpl.n	6fc2 <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    703c:	682b      	ldr	r3, [r5, #0]
    703e:	0758      	lsls	r0, r3, #29
    7040:	d00a      	beq.n	7058 <z_arm_fault+0x144>
    7042:	4b3f      	ldr	r3, [pc, #252]	; (7140 <z_arm_fault+0x22c>)
    7044:	930a      	str	r3, [sp, #40]	; 0x28
    7046:	4839      	ldr	r0, [pc, #228]	; (712c <z_arm_fault+0x218>)
    7048:	2302      	movs	r3, #2
    704a:	aa09      	add	r2, sp, #36	; 0x24
    704c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7050:	9305      	str	r3, [sp, #20]
    7052:	9309      	str	r3, [sp, #36]	; 0x24
    7054:	f007 fe86 	bl	ed64 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    7058:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    705a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    705e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    7062:	429a      	cmp	r2, r3
    7064:	d00b      	beq.n	707e <z_arm_fault+0x16a>
		} else if (SCB_MMFSR != 0) {
    7066:	4b30      	ldr	r3, [pc, #192]	; (7128 <z_arm_fault+0x214>)
    7068:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    706c:	b1ca      	cbz	r2, 70a2 <z_arm_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    706e:	f10d 0213 	add.w	r2, sp, #19
    7072:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7074:	4630      	mov	r0, r6
    7076:	f7ff fe7b 	bl	6d70 <mem_manage_fault>
    707a:	4604      	mov	r4, r0
		break;
    707c:	e7c0      	b.n	7000 <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    707e:	682b      	ldr	r3, [r5, #0]
    7080:	0759      	lsls	r1, r3, #29
    7082:	d00c      	beq.n	709e <z_arm_fault+0x18a>
    7084:	6833      	ldr	r3, [r6, #0]
    7086:	4a2f      	ldr	r2, [pc, #188]	; (7144 <z_arm_fault+0x230>)
    7088:	4828      	ldr	r0, [pc, #160]	; (712c <z_arm_fault+0x218>)
    708a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    708e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7092:	2303      	movs	r3, #3
    7094:	aa09      	add	r2, sp, #36	; 0x24
    7096:	9305      	str	r3, [sp, #20]
    7098:	9309      	str	r3, [sp, #36]	; 0x24
    709a:	f007 fe63 	bl	ed64 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    709e:	6834      	ldr	r4, [r6, #0]
    70a0:	e7ae      	b.n	7000 <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    70a2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    70a6:	b12a      	cbz	r2, 70b4 <z_arm_fault+0x1a0>
			reason = bus_fault(esf, 1, recoverable);
    70a8:	f10d 0113 	add.w	r1, sp, #19
    70ac:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    70ae:	f7ff fd19 	bl	6ae4 <bus_fault.constprop.0>
    70b2:	e7e2      	b.n	707a <z_arm_fault+0x166>
		} else if (SCB_UFSR != 0) {
    70b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    70b6:	b29b      	uxth	r3, r3
    70b8:	2b00      	cmp	r3, #0
    70ba:	d082      	beq.n	6fc2 <z_arm_fault+0xae>
		reason = usage_fault(esf);
    70bc:	f7ff fdbe 	bl	6c3c <usage_fault.constprop.0>
    70c0:	e7db      	b.n	707a <z_arm_fault+0x166>
		reason = mem_manage_fault(esf, 0, recoverable);
    70c2:	f10d 0213 	add.w	r2, sp, #19
    70c6:	2100      	movs	r1, #0
    70c8:	e7d4      	b.n	7074 <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    70ca:	f10d 0113 	add.w	r1, sp, #19
    70ce:	2000      	movs	r0, #0
    70d0:	e7ed      	b.n	70ae <z_arm_fault+0x19a>
	PR_FAULT_INFO(
    70d2:	4816      	ldr	r0, [pc, #88]	; (712c <z_arm_fault+0x218>)
    70d4:	6803      	ldr	r3, [r0, #0]
    70d6:	075a      	lsls	r2, r3, #29
    70d8:	f43f af73 	beq.w	6fc2 <z_arm_fault+0xae>
    70dc:	4b1a      	ldr	r3, [pc, #104]	; (7148 <z_arm_fault+0x234>)
    70de:	930a      	str	r3, [sp, #40]	; 0x28
    70e0:	2302      	movs	r3, #2
    70e2:	9305      	str	r3, [sp, #20]
    70e4:	9309      	str	r3, [sp, #36]	; 0x24
    70e6:	aa09      	add	r2, sp, #36	; 0x24
    70e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    70ec:	e774      	b.n	6fd8 <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    70ee:	490f      	ldr	r1, [pc, #60]	; (712c <z_arm_fault+0x218>)
    70f0:	680b      	ldr	r3, [r1, #0]
    70f2:	075b      	lsls	r3, r3, #29
    70f4:	f43f af65 	beq.w	6fc2 <z_arm_fault+0xae>
    70f8:	4a14      	ldr	r2, [pc, #80]	; (714c <z_arm_fault+0x238>)
    70fa:	4b15      	ldr	r3, [pc, #84]	; (7150 <z_arm_fault+0x23c>)
    70fc:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    7100:	bf18      	it	ne
    7102:	4613      	movne	r3, r2
    7104:	3c10      	subs	r4, #16
    7106:	e9cd 3402 	strd	r3, r4, [sp, #8]
    710a:	2400      	movs	r4, #0
    710c:	4b11      	ldr	r3, [pc, #68]	; (7154 <z_arm_fault+0x240>)
    710e:	9301      	str	r3, [sp, #4]
    7110:	9400      	str	r4, [sp, #0]
    7112:	4623      	mov	r3, r4
    7114:	2201      	movs	r2, #1
    7116:	4620      	mov	r0, r4
    7118:	f7ff feea 	bl	6ef0 <z_log_msg2_runtime_create.constprop.0>
    711c:	e770      	b.n	7000 <z_arm_fault+0xec>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    711e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7122:	f023 0301 	bic.w	r3, r3, #1
    7126:	e77e      	b.n	7026 <z_arm_fault+0x112>
    7128:	e000ed00 	.word	0xe000ed00
    712c:	20000230 	.word	0x20000230
    7130:	00012876 	.word	0x00012876
    7134:	000128a1 	.word	0x000128a1
    7138:	000128b8 	.word	0x000128b8
    713c:	000128d9 	.word	0x000128d9
    7140:	000128e7 	.word	0x000128e7
    7144:	00012906 	.word	0x00012906
    7148:	00012922 	.word	0x00012922
    714c:	0001285d 	.word	0x0001285d
    7150:	00012848 	.word	0x00012848
    7154:	00012835 	.word	0x00012835

00007158 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7158:	4a02      	ldr	r2, [pc, #8]	; (7164 <z_arm_fault_init+0xc>)
    715a:	6953      	ldr	r3, [r2, #20]
    715c:	f043 0310 	orr.w	r3, r3, #16
    7160:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7162:	4770      	bx	lr
    7164:	e000ed00 	.word	0xe000ed00

00007168 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7168:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    716c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7170:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7172:	4672      	mov	r2, lr
	bl z_arm_fault
    7174:	f7ff fece 	bl	6f14 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7178:	bd01      	pop	{r0, pc}
    717a:	bf00      	nop

0000717c <z_arm_interrupt_init>:
    717c:	4804      	ldr	r0, [pc, #16]	; (7190 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    717e:	2300      	movs	r3, #0
    7180:	2120      	movs	r1, #32
    7182:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7184:	3301      	adds	r3, #1
    7186:	2b30      	cmp	r3, #48	; 0x30
    7188:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    718c:	d1f9      	bne.n	7182 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    718e:	4770      	bx	lr
    7190:	e000e100 	.word	0xe000e100

00007194 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    7194:	f009 f8de 	bl	10354 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7198:	2020      	movs	r0, #32
    msr BASEPRI, r0
    719a:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    719e:	480b      	ldr	r0, [pc, #44]	; (71cc <__start+0x38>)
    ldr r1, =0xaa
    71a0:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    71a4:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    71a8:	f007 ff77 	bl	f09a <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    71ac:	4807      	ldr	r0, [pc, #28]	; (71cc <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    71ae:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    71b2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    71b4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    71b8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    71bc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    71be:	4308      	orrs	r0, r1
    msr CONTROL, r0
    71c0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    71c4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    71c8:	f7ff fb98 	bl	68fc <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    71cc:	20003b00 	.word	0x20003b00

000071d0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    71d0:	4b06      	ldr	r3, [pc, #24]	; (71ec <z_impl_k_thread_abort+0x1c>)
    71d2:	689b      	ldr	r3, [r3, #8]
    71d4:	4283      	cmp	r3, r0
    71d6:	d107      	bne.n	71e8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    71d8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    71dc:	b123      	cbz	r3, 71e8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    71de:	4a04      	ldr	r2, [pc, #16]	; (71f0 <z_impl_k_thread_abort+0x20>)
    71e0:	6853      	ldr	r3, [r2, #4]
    71e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    71e6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    71e8:	f005 b82e 	b.w	c248 <z_thread_abort>
    71ec:	2000214c 	.word	0x2000214c
    71f0:	e000ed00 	.word	0xe000ed00

000071f4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    71f4:	4b02      	ldr	r3, [pc, #8]	; (7200 <z_arm_configure_static_mpu_regions+0xc>)
    71f6:	4a03      	ldr	r2, [pc, #12]	; (7204 <z_arm_configure_static_mpu_regions+0x10>)
    71f8:	4803      	ldr	r0, [pc, #12]	; (7208 <z_arm_configure_static_mpu_regions+0x14>)
    71fa:	2101      	movs	r1, #1
    71fc:	f000 b892 	b.w	7324 <arm_core_mpu_configure_static_mpu_regions>
    7200:	20040000 	.word	0x20040000
    7204:	20000000 	.word	0x20000000
    7208:	00010d7c 	.word	0x00010d7c

0000720c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    720c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7210:	4b05      	ldr	r3, [pc, #20]	; (7228 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    7212:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7214:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7216:	4a05      	ldr	r2, [pc, #20]	; (722c <z_arm_configure_dynamic_mpu_regions+0x20>)
    7218:	2120      	movs	r1, #32
    721a:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    721e:	4618      	mov	r0, r3
    7220:	2101      	movs	r1, #1
    7222:	f000 b889 	b.w	7338 <arm_core_mpu_configure_dynamic_mpu_regions>
    7226:	bf00      	nop
    7228:	200015cc 	.word	0x200015cc
    722c:	150b0000 	.word	0x150b0000

00007230 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7230:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    7232:	4f2d      	ldr	r7, [pc, #180]	; (72e8 <mpu_configure_regions+0xb8>)
    7234:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7236:	2600      	movs	r6, #0
    7238:	428e      	cmp	r6, r1
    723a:	db02      	blt.n	7242 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    723c:	4610      	mov	r0, r2
    723e:	b009      	add	sp, #36	; 0x24
    7240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    7242:	6844      	ldr	r4, [r0, #4]
    7244:	2c00      	cmp	r4, #0
    7246:	d04c      	beq.n	72e2 <mpu_configure_regions+0xb2>
		if (do_sanity_check &&
    7248:	b1db      	cbz	r3, 7282 <mpu_configure_regions+0x52>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    724a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    724e:	ea14 0f0c 	tst.w	r4, ip
    7252:	d010      	beq.n	7276 <mpu_configure_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    7254:	4825      	ldr	r0, [pc, #148]	; (72ec <mpu_configure_regions+0xbc>)
    7256:	6803      	ldr	r3, [r0, #0]
    7258:	075a      	lsls	r2, r3, #29
    725a:	d029      	beq.n	72b0 <mpu_configure_regions+0x80>
    725c:	4b24      	ldr	r3, [pc, #144]	; (72f0 <mpu_configure_regions+0xc0>)
    725e:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7262:	2303      	movs	r3, #3
    7264:	9301      	str	r3, [sp, #4]
    7266:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    7268:	2300      	movs	r3, #0
    726a:	aa05      	add	r2, sp, #20
    726c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7270:	f006 fb3d 	bl	d8ee <z_impl_z_log_msg2_static_create>
		if (reg_index == -EINVAL) {
    7274:	e01c      	b.n	72b0 <mpu_configure_regions+0x80>
		&&
    7276:	2c1f      	cmp	r4, #31
    7278:	d9ec      	bls.n	7254 <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
    727a:	6805      	ldr	r5, [r0, #0]
		&&
    727c:	ea1c 0f05 	tst.w	ip, r5
    7280:	d1e8      	bne.n	7254 <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7282:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    7284:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7286:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    728a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    728c:	d913      	bls.n	72b6 <mpu_configure_regions+0x86>
	if (size > (1UL << 31)) {
    728e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7292:	d812      	bhi.n	72ba <mpu_configure_regions+0x8a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7294:	3c01      	subs	r4, #1
    7296:	fab4 f484 	clz	r4, r4
    729a:	f1c4 041f 	rsb	r4, r4, #31
    729e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    72a0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    72a2:	ea4c 0404 	orr.w	r4, ip, r4
    72a6:	d90e      	bls.n	72c6 <mpu_configure_regions+0x96>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    72a8:	4810      	ldr	r0, [pc, #64]	; (72ec <mpu_configure_regions+0xbc>)
    72aa:	6803      	ldr	r3, [r0, #0]
    72ac:	075b      	lsls	r3, r3, #29
    72ae:	d106      	bne.n	72be <mpu_configure_regions+0x8e>
			return -EINVAL;
    72b0:	f06f 0215 	mvn.w	r2, #21
    72b4:	e7c2      	b.n	723c <mpu_configure_regions+0xc>
		return REGION_32B;
    72b6:	2408      	movs	r4, #8
    72b8:	e7f2      	b.n	72a0 <mpu_configure_regions+0x70>
		return REGION_4G;
    72ba:	243e      	movs	r4, #62	; 0x3e
    72bc:	e7f0      	b.n	72a0 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    72be:	4b0d      	ldr	r3, [pc, #52]	; (72f4 <mpu_configure_regions+0xc4>)
    72c0:	e9cd 3206 	strd	r3, r2, [sp, #24]
    72c4:	e7cd      	b.n	7262 <mpu_configure_regions+0x32>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    72c6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    72ca:	4315      	orrs	r5, r2
    72cc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    72d0:	f044 0401 	orr.w	r4, r4, #1
    72d4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    72d8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    72dc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    72de:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    72e2:	3601      	adds	r6, #1
    72e4:	300c      	adds	r0, #12
    72e6:	e7a7      	b.n	7238 <mpu_configure_regions+0x8>
    72e8:	e000ed00 	.word	0xe000ed00
    72ec:	2000022c 	.word	0x2000022c
    72f0:	0001294a 	.word	0x0001294a
    72f4:	0001296d 	.word	0x0001296d

000072f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    72f8:	4b04      	ldr	r3, [pc, #16]	; (730c <arm_core_mpu_enable+0x14>)
    72fa:	2205      	movs	r2, #5
    72fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7304:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7308:	4770      	bx	lr
    730a:	bf00      	nop
    730c:	e000ed00 	.word	0xe000ed00

00007310 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    7310:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7314:	4b02      	ldr	r3, [pc, #8]	; (7320 <arm_core_mpu_disable+0x10>)
    7316:	2200      	movs	r2, #0
    7318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    731c:	4770      	bx	lr
    731e:	bf00      	nop
    7320:	e000ed00 	.word	0xe000ed00

00007324 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    7324:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7326:	4c03      	ldr	r4, [pc, #12]	; (7334 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7328:	2301      	movs	r3, #1
    732a:	7822      	ldrb	r2, [r4, #0]
    732c:	f7ff ff80 	bl	7230 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7330:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    7332:	bd10      	pop	{r4, pc}
    7334:	200021c7 	.word	0x200021c7

00007338 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    7338:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    733a:	4a09      	ldr	r2, [pc, #36]	; (7360 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    733c:	2300      	movs	r3, #0
    733e:	7812      	ldrb	r2, [r2, #0]
    7340:	f7ff ff76 	bl	7230 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7344:	f110 0f16 	cmn.w	r0, #22
    7348:	d003      	beq.n	7352 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    734a:	4b06      	ldr	r3, [pc, #24]	; (7364 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    734c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    734e:	2807      	cmp	r0, #7
    7350:	dd00      	ble.n	7354 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    7352:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    7354:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    7358:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    735c:	3001      	adds	r0, #1
    735e:	e7f6      	b.n	734e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    7360:	200021c7 	.word	0x200021c7
    7364:	e000ed00 	.word	0xe000ed00

00007368 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7368:	4914      	ldr	r1, [pc, #80]	; (73bc <z_arm_mpu_init+0x54>)
    736a:	6808      	ldr	r0, [r1, #0]
    736c:	2808      	cmp	r0, #8
{
    736e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7370:	d821      	bhi.n	73b6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7372:	f7ff ffcd 	bl	7310 <arm_core_mpu_disable>
    7376:	4c12      	ldr	r4, [pc, #72]	; (73c0 <z_arm_mpu_init+0x58>)
    7378:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    737a:	2200      	movs	r2, #0
    737c:	4290      	cmp	r0, r2
    737e:	f101 010c 	add.w	r1, r1, #12
    7382:	d105      	bne.n	7390 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7384:	4b0f      	ldr	r3, [pc, #60]	; (73c4 <z_arm_mpu_init+0x5c>)
    7386:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7388:	f7ff ffb6 	bl	72f8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    738c:	2000      	movs	r0, #0
}
    738e:	bd10      	pop	{r4, pc}
    7390:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7394:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7398:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    739c:	4313      	orrs	r3, r2
    739e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    73a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    73a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    73aa:	f043 0301 	orr.w	r3, r3, #1
    73ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    73b2:	3201      	adds	r2, #1
    73b4:	e7e2      	b.n	737c <z_arm_mpu_init+0x14>
		return -1;
    73b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    73ba:	e7e8      	b.n	738e <z_arm_mpu_init+0x26>
    73bc:	00010d88 	.word	0x00010d88
    73c0:	e000ed00 	.word	0xe000ed00
    73c4:	200021c7 	.word	0x200021c7

000073c8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    73c8:	b40c      	push	{r2, r3}
    73ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    73cc:	b909      	cbnz	r1, 73d2 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    73ce:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    73d2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    73d6:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    73d8:	9a06      	ldr	r2, [sp, #24]
    73da:	4806      	ldr	r0, [pc, #24]	; (73f4 <snprintf+0x2c>)
	va_start(vargs, format);
    73dc:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    73de:	a902      	add	r1, sp, #8
    73e0:	f7fa fb20 	bl	1a24 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    73e4:	9b02      	ldr	r3, [sp, #8]
    73e6:	2200      	movs	r2, #0
    73e8:	701a      	strb	r2, [r3, #0]
	return r;
}
    73ea:	b005      	add	sp, #20
    73ec:	f85d eb04 	ldr.w	lr, [sp], #4
    73f0:	b002      	add	sp, #8
    73f2:	4770      	bx	lr
    73f4:	0000f0ad 	.word	0x0000f0ad

000073f8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    73f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    73fa:	f04f 0320 	mov.w	r3, #32
    73fe:	f3ef 8011 	mrs	r0, BASEPRI
    7402:	f383 8812 	msr	BASEPRI_MAX, r3
    7406:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    740a:	4a11      	ldr	r2, [pc, #68]	; (7450 <nordicsemi_nrf52_init+0x58>)
    740c:	2301      	movs	r3, #1
    740e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7416:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    741a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    741e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    7422:	2c08      	cmp	r4, #8
    7424:	d108      	bne.n	7438 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7426:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    742a:	2905      	cmp	r1, #5
    742c:	d804      	bhi.n	7438 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    742e:	4c09      	ldr	r4, [pc, #36]	; (7454 <nordicsemi_nrf52_init+0x5c>)
    7430:	5c61      	ldrb	r1, [r4, r1]
    7432:	b109      	cbz	r1, 7438 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    7434:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    7438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    743c:	2201      	movs	r2, #1
    743e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    7442:	f380 8811 	msr	BASEPRI, r0
    7446:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    744a:	2000      	movs	r0, #0
    744c:	bd10      	pop	{r4, pc}
    744e:	bf00      	nop
    7450:	4001e000 	.word	0x4001e000
    7454:	000129a6 	.word	0x000129a6

00007458 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7458:	b120      	cbz	r0, 7464 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    745a:	4b03      	ldr	r3, [pc, #12]	; (7468 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    745c:	0180      	lsls	r0, r0, #6
    745e:	f043 0301 	orr.w	r3, r3, #1
    7462:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7464:	4770      	bx	lr
    7466:	bf00      	nop
    7468:	00010750 	.word	0x00010750

0000746c <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    746c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7470:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    7474:	07db      	lsls	r3, r3, #31
    7476:	d52e      	bpl.n	74d6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    7478:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    747c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    7480:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    7484:	2b07      	cmp	r3, #7
    7486:	d126      	bne.n	74d6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    7488:	4a14      	ldr	r2, [pc, #80]	; (74dc <board_nrf52840dongle_nrf52840_init+0x70>)
    748a:	2301      	movs	r3, #1
    748c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    7490:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7494:	2b00      	cmp	r3, #0
    7496:	d0fb      	beq.n	7490 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    7498:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    749c:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    74a0:	f023 0307 	bic.w	r3, r3, #7
    74a4:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    74a8:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    74ac:	2300      	movs	r3, #0
    74ae:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    74b2:	4a0a      	ldr	r2, [pc, #40]	; (74dc <board_nrf52840dongle_nrf52840_init+0x70>)
    74b4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    74b8:	2b00      	cmp	r3, #0
    74ba:	d0fb      	beq.n	74b4 <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    74bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    74c0:	4907      	ldr	r1, [pc, #28]	; (74e0 <board_nrf52840dongle_nrf52840_init+0x74>)
    74c2:	4b08      	ldr	r3, [pc, #32]	; (74e4 <board_nrf52840dongle_nrf52840_init+0x78>)
    74c4:	68ca      	ldr	r2, [r1, #12]
    74c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    74ca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    74cc:	60cb      	str	r3, [r1, #12]
    74ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    74d2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    74d4:	e7fd      	b.n	74d2 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    74d6:	2000      	movs	r0, #0
    74d8:	4770      	bx	lr
    74da:	bf00      	nop
    74dc:	4001e000 	.word	0x4001e000
    74e0:	e000ed00 	.word	0xe000ed00
    74e4:	05fa0004 	.word	0x05fa0004

000074e8 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    74e8:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    74ec:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    74ee:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    74f0:	d004      	beq.n	74fc <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    74f2:	f010 0f78 	tst.w	r0, #120	; 0x78
    74f6:	d001      	beq.n	74fc <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    74f8:	2000      	movs	r0, #0
    74fa:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    74fc:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    74fe:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    7502:	f000 0008 	and.w	r0, r0, #8
    7506:	da05      	bge.n	7514 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    7508:	b958      	cbnz	r0, 7522 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    750a:	4808      	ldr	r0, [pc, #32]	; (752c <endpoint_ctx+0x44>)
    750c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7510:	304c      	adds	r0, #76	; 0x4c
    7512:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    7514:	b938      	cbnz	r0, 7526 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    7516:	4805      	ldr	r0, [pc, #20]	; (752c <endpoint_ctx+0x44>)
    7518:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    751c:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    7520:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    7522:	4803      	ldr	r0, [pc, #12]	; (7530 <endpoint_ctx+0x48>)
    7524:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    7526:	4803      	ldr	r0, [pc, #12]	; (7534 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    7528:	4770      	bx	lr
    752a:	bf00      	nop
    752c:	20001bd8 	.word	0x20001bd8
    7530:	20001d24 	.word	0x20001d24
    7534:	20001e44 	.word	0x20001e44

00007538 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    7538:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    753a:	4801      	ldr	r0, [pc, #4]	; (7540 <usbd_evt_put+0x8>)
    753c:	f008 bb3f 	b.w	fbbe <k_queue_append>
    7540:	200002d4 	.word	0x200002d4

00007544 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7544:	4901      	ldr	r1, [pc, #4]	; (754c <usbd_work_schedule+0x8>)
    7546:	4802      	ldr	r0, [pc, #8]	; (7550 <usbd_work_schedule+0xc>)
    7548:	f008 bb6f 	b.w	fc2a <k_work_submit_to_queue>
    754c:	20001c00 	.word	0x20001c00
    7550:	20000c50 	.word	0x20000c50

00007554 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    7554:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    7556:	480b      	ldr	r0, [pc, #44]	; (7584 <usb_init+0x30>)
    7558:	f002 fd52 	bl	a000 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    755c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    755e:	480a      	ldr	r0, [pc, #40]	; (7588 <usb_init+0x34>)
    7560:	f002 fd94 	bl	a08c <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    7564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7568:	f44f 6280 	mov.w	r2, #1024	; 0x400
    756c:	4907      	ldr	r1, [pc, #28]	; (758c <usb_init+0x38>)
    756e:	4808      	ldr	r0, [pc, #32]	; (7590 <usb_init+0x3c>)
    7570:	9400      	str	r4, [sp, #0]
    7572:	f004 fb2b 	bl	bbcc <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    7576:	4907      	ldr	r1, [pc, #28]	; (7594 <usb_init+0x40>)
    7578:	4807      	ldr	r0, [pc, #28]	; (7598 <usb_init+0x44>)
    757a:	f008 fb4d 	bl	fc18 <k_work_init>

	return 0;
}
    757e:	4620      	mov	r0, r4
    7580:	b002      	add	sp, #8
    7582:	bd10      	pop	{r4, pc}
    7584:	00012bbd 	.word	0x00012bbd
    7588:	00010da8 	.word	0x00010da8
    758c:	20003160 	.word	0x20003160
    7590:	20000c50 	.word	0x20000c50
    7594:	000079bd 	.word	0x000079bd
    7598:	20001c00 	.word	0x20001c00

0000759c <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    759c:	4802      	ldr	r0, [pc, #8]	; (75a8 <usbd_evt_get+0xc>)
    759e:	2200      	movs	r2, #0
    75a0:	2300      	movs	r3, #0
    75a2:	f004 b9ab 	b.w	b8fc <z_impl_k_queue_get>
    75a6:	bf00      	nop
    75a8:	200002d4 	.word	0x200002d4

000075ac <usbd_evt_flush>:
{
    75ac:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    75ae:	4c05      	ldr	r4, [pc, #20]	; (75c4 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    75b0:	f7ff fff4 	bl	759c <usbd_evt_get>
		if (ev) {
    75b4:	b120      	cbz	r0, 75c0 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    75b6:	1d01      	adds	r1, r0, #4
    75b8:	4620      	mov	r0, r4
    75ba:	f008 fa34 	bl	fa26 <k_mem_slab_free>
	} while (ev != NULL);
    75be:	e7f7      	b.n	75b0 <usbd_evt_flush+0x4>
}
    75c0:	bd10      	pop	{r4, pc}
    75c2:	bf00      	nop
    75c4:	2000025c 	.word	0x2000025c

000075c8 <usbd_evt_alloc>:
{
    75c8:	b510      	push	{r4, lr}
    75ca:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    75cc:	481e      	ldr	r0, [pc, #120]	; (7648 <usbd_evt_alloc+0x80>)
    75ce:	2200      	movs	r2, #0
    75d0:	2300      	movs	r3, #0
    75d2:	4669      	mov	r1, sp
    75d4:	f003 ff1a 	bl	b40c <k_mem_slab_alloc>
    75d8:	2800      	cmp	r0, #0
    75da:	d030      	beq.n	763e <usbd_evt_alloc+0x76>
		LOG_ERR("USBD event allocation failed!");
    75dc:	4c1b      	ldr	r4, [pc, #108]	; (764c <usbd_evt_alloc+0x84>)
    75de:	6823      	ldr	r3, [r4, #0]
    75e0:	075a      	lsls	r2, r3, #29
    75e2:	d00a      	beq.n	75fa <usbd_evt_alloc+0x32>
    75e4:	4b1a      	ldr	r3, [pc, #104]	; (7650 <usbd_evt_alloc+0x88>)
    75e6:	9306      	str	r3, [sp, #24]
    75e8:	aa05      	add	r2, sp, #20
    75ea:	2302      	movs	r3, #2
    75ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    75f0:	4620      	mov	r0, r4
    75f2:	9301      	str	r3, [sp, #4]
    75f4:	9305      	str	r3, [sp, #20]
    75f6:	f007 fd97 	bl	f128 <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
    75fa:	f7ff ffd7 	bl	75ac <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    75fe:	4812      	ldr	r0, [pc, #72]	; (7648 <usbd_evt_alloc+0x80>)
    7600:	2200      	movs	r2, #0
    7602:	2300      	movs	r3, #0
    7604:	4669      	mov	r1, sp
    7606:	f003 ff01 	bl	b40c <k_mem_slab_alloc>
    760a:	b178      	cbz	r0, 762c <usbd_evt_alloc+0x64>
			LOG_ERR("USBD event memory corrupted");
    760c:	6823      	ldr	r3, [r4, #0]
    760e:	075b      	lsls	r3, r3, #29
    7610:	d00a      	beq.n	7628 <usbd_evt_alloc+0x60>
    7612:	4b10      	ldr	r3, [pc, #64]	; (7654 <usbd_evt_alloc+0x8c>)
    7614:	9306      	str	r3, [sp, #24]
    7616:	480d      	ldr	r0, [pc, #52]	; (764c <usbd_evt_alloc+0x84>)
    7618:	2302      	movs	r3, #2
    761a:	aa05      	add	r2, sp, #20
    761c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7620:	9301      	str	r3, [sp, #4]
    7622:	9305      	str	r3, [sp, #20]
    7624:	f007 fd80 	bl	f128 <z_log_msg2_static_create.constprop.0>
			return NULL;
    7628:	2000      	movs	r0, #0
    762a:	e00a      	b.n	7642 <usbd_evt_alloc+0x7a>
		ev = (struct usbd_event *)block.data;
    762c:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
    762e:	2304      	movs	r3, #4
		ev->block = block;
    7630:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7632:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    7634:	f7ff ff80 	bl	7538 <usbd_evt_put>
		usbd_work_schedule();
    7638:	f7ff ff84 	bl	7544 <usbd_work_schedule>
		return NULL;
    763c:	e7f4      	b.n	7628 <usbd_evt_alloc+0x60>
	ev = (struct usbd_event *)block.data;
    763e:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
    7640:	6040      	str	r0, [r0, #4]
}
    7642:	b008      	add	sp, #32
    7644:	bd10      	pop	{r4, pc}
    7646:	bf00      	nop
    7648:	2000025c 	.word	0x2000025c
    764c:	20000254 	.word	0x20000254
    7650:	000129ac 	.word	0x000129ac
    7654:	000129ca 	.word	0x000129ca

00007658 <usbd_event_transfer_data>:
{
    7658:	b5f0      	push	{r4, r5, r6, r7, lr}
    765a:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
    765c:	7881      	ldrb	r1, [r0, #2]
{
    765e:	4606      	mov	r6, r0
    7660:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    7662:	4608      	mov	r0, r1
    7664:	f7ff ff40 	bl	74e8 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    7668:	060a      	lsls	r2, r1, #24
		switch (p_event->data.eptransfer.status) {
    766a:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    766c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    766e:	d528      	bpl.n	76c2 <usbd_event_transfer_data+0x6a>
		switch (p_event->data.eptransfer.status) {
    7670:	b1b4      	cbz	r4, 76a0 <usbd_event_transfer_data+0x48>
    7672:	2c03      	cmp	r4, #3
    7674:	d022      	beq.n	76bc <usbd_event_transfer_data+0x64>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    7676:	482d      	ldr	r0, [pc, #180]	; (772c <usbd_event_transfer_data+0xd4>)
    7678:	6803      	ldr	r3, [r0, #0]
    767a:	075b      	lsls	r3, r3, #29
    767c:	d01e      	beq.n	76bc <usbd_event_transfer_data+0x64>
    767e:	4b2c      	ldr	r3, [pc, #176]	; (7730 <usbd_event_transfer_data+0xd8>)
    7680:	466d      	mov	r5, sp
    7682:	b088      	sub	sp, #32
    7684:	466a      	mov	r2, sp
    7686:	e9c2 3404 	strd	r3, r4, [r2, #16]
    768a:	2304      	movs	r3, #4
    768c:	6191      	str	r1, [r2, #24]
    768e:	607b      	str	r3, [r7, #4]
    7690:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7694:	f842 3f0c 	str.w	r3, [r2, #12]!
    7698:	f007 fd46 	bl	f128 <z_log_msg2_static_create.constprop.0>
    769c:	46ad      	mov	sp, r5
    769e:	e00d      	b.n	76bc <usbd_event_transfer_data+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    76a0:	f7ff ff92 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    76a4:	4603      	mov	r3, r0
    76a6:	b148      	cbz	r0, 76bc <usbd_event_transfer_data+0x64>
			ev->evt_type = USBD_EVT_EP;
    76a8:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    76aa:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    76ac:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    76ae:	2203      	movs	r2, #3
    76b0:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    76b2:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    76b4:	f7ff ff40 	bl	7538 <usbd_evt_put>
			usbd_work_schedule();
    76b8:	f7ff ff44 	bl	7544 <usbd_work_schedule>
}
    76bc:	370c      	adds	r7, #12
    76be:	46bd      	mov	sp, r7
    76c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    76c2:	b154      	cbz	r4, 76da <usbd_event_transfer_data+0x82>
    76c4:	2c01      	cmp	r4, #1
    76c6:	d1d6      	bne.n	7676 <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
    76c8:	f7ff ff7e 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    76cc:	4603      	mov	r3, r0
    76ce:	2800      	cmp	r0, #0
    76d0:	d0f4      	beq.n	76bc <usbd_event_transfer_data+0x64>
			ep_ctx->read_pending = true;
    76d2:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    76d4:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    76d6:	7304      	strb	r4, [r0, #12]
    76d8:	e7eb      	b.n	76b2 <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    76da:	f7ff ff75 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    76de:	2800      	cmp	r0, #0
    76e0:	d0ec      	beq.n	76bc <usbd_event_transfer_data+0x64>
				p_event->data.eptransfer.ep);
    76e2:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    76e4:	4b13      	ldr	r3, [pc, #76]	; (7734 <usbd_event_transfer_data+0xdc>)
    76e6:	f012 0f80 	tst.w	r2, #128	; 0x80
    76ea:	f002 0108 	and.w	r1, r2, #8
    76ee:	d011      	beq.n	7714 <usbd_event_transfer_data+0xbc>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    76f0:	b141      	cbz	r1, 7704 <usbd_event_transfer_data+0xac>
        {
            ret = p_reg->ISOIN.AMOUNT;
    76f2:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    76f6:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    76f8:	2301      	movs	r3, #1
    76fa:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    76fc:	2302      	movs	r3, #2
    76fe:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7700:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
    7702:	e7d7      	b.n	76b4 <usbd_event_transfer_data+0x5c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    7704:	f002 020f 	and.w	r2, r2, #15
    7708:	2114      	movs	r1, #20
    770a:	fb01 3302 	mla	r3, r1, r2, r3
    770e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    7712:	e7f0      	b.n	76f6 <usbd_event_transfer_data+0x9e>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    7714:	b111      	cbz	r1, 771c <usbd_event_transfer_data+0xc4>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    7716:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    771a:	e7ec      	b.n	76f6 <usbd_event_transfer_data+0x9e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    771c:	f002 020f 	and.w	r2, r2, #15
    7720:	2114      	movs	r1, #20
    7722:	fb01 3302 	mla	r3, r1, r2, r3
    7726:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    772a:	e7e4      	b.n	76f6 <usbd_event_transfer_data+0x9e>
    772c:	20000254 	.word	0x20000254
    7730:	000129e6 	.word	0x000129e6
    7734:	40027000 	.word	0x40027000

00007738 <usb_dc_power_event_handler>:
{
    7738:	b510      	push	{r4, lr}
    773a:	2802      	cmp	r0, #2
    773c:	b088      	sub	sp, #32
    773e:	4603      	mov	r3, r0
    7740:	d812      	bhi.n	7768 <usb_dc_power_event_handler+0x30>
    7742:	4a12      	ldr	r2, [pc, #72]	; (778c <usb_dc_power_event_handler+0x54>)
    7744:	5c14      	ldrb	r4, [r2, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    7746:	f7ff ff3f 	bl	75c8 <usbd_evt_alloc>
	if (!ev) {
    774a:	b1e0      	cbz	r0, 7786 <usb_dc_power_event_handler+0x4e>
	ev->evt_type = USBD_EVT_POWER;
    774c:	2200      	movs	r2, #0
    774e:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    7750:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    7752:	f7ff fef1 	bl	7538 <usbd_evt_put>
	if (usbd_ctx.attached) {
    7756:	4b0e      	ldr	r3, [pc, #56]	; (7790 <usb_dc_power_event_handler+0x58>)
    7758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    775c:	b19b      	cbz	r3, 7786 <usb_dc_power_event_handler+0x4e>
}
    775e:	b008      	add	sp, #32
    7760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    7764:	f7ff beee 	b.w	7544 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
    7768:	480a      	ldr	r0, [pc, #40]	; (7794 <usb_dc_power_event_handler+0x5c>)
    776a:	6802      	ldr	r2, [r0, #0]
    776c:	0752      	lsls	r2, r2, #29
    776e:	d00a      	beq.n	7786 <usb_dc_power_event_handler+0x4e>
    7770:	4a09      	ldr	r2, [pc, #36]	; (7798 <usb_dc_power_event_handler+0x60>)
    7772:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (event) {
    7776:	e9cd 2306 	strd	r2, r3, [sp, #24]
		LOG_ERR("Unknown USB power event %d", event);
    777a:	2303      	movs	r3, #3
    777c:	aa05      	add	r2, sp, #20
    777e:	9301      	str	r3, [sp, #4]
    7780:	9305      	str	r3, [sp, #20]
    7782:	f007 fcd1 	bl	f128 <z_log_msg2_static_create.constprop.0>
}
    7786:	b008      	add	sp, #32
    7788:	bd10      	pop	{r4, pc}
    778a:	bf00      	nop
    778c:	00012bba 	.word	0x00012bba
    7790:	20001bd8 	.word	0x20001bd8
    7794:	20000254 	.word	0x20000254
    7798:	00012a12 	.word	0x00012a12

0000779c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    779c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    779e:	490f      	ldr	r1, [pc, #60]	; (77dc <hfxo_stop.constprop.0.isra.0+0x40>)
    77a0:	f3bf 8f5b 	dmb	ish
    77a4:	f101 0320 	add.w	r3, r1, #32
    77a8:	2200      	movs	r2, #0
    77aa:	e853 0f00 	ldrex	r0, [r3]
    77ae:	2801      	cmp	r0, #1
    77b0:	d103      	bne.n	77ba <hfxo_stop.constprop.0.isra.0+0x1e>
    77b2:	e843 2400 	strex	r4, r2, [r3]
    77b6:	2c00      	cmp	r4, #0
    77b8:	d1f7      	bne.n	77aa <hfxo_stop.constprop.0.isra.0+0xe>
    77ba:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    77be:	d10b      	bne.n	77d8 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    77c0:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    77c2:	310c      	adds	r1, #12
    77c4:	4620      	mov	r0, r4
    77c6:	f005 f9d3 	bl	cb70 <onoff_cancel>

	if (rv == -EALREADY) {
    77ca:	3078      	adds	r0, #120	; 0x78
    77cc:	d104      	bne.n	77d8 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    77ce:	4620      	mov	r0, r4
}
    77d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d4:	f005 b9a7 	b.w	cb26 <onoff_release>
    77d8:	bd10      	pop	{r4, pc}
    77da:	bf00      	nop
    77dc:	20001bd8 	.word	0x20001bd8

000077e0 <usbd_event_handler>:
{
    77e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77e2:	b08d      	sub	sp, #52	; 0x34
    77e4:	4606      	mov	r6, r0
    77e6:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    77e8:	2214      	movs	r2, #20
    77ea:	2100      	movs	r1, #0
    77ec:	1d38      	adds	r0, r7, #4
    77ee:	f007 fc54 	bl	f09a <memset>
	switch (p_event->type) {
    77f2:	7833      	ldrb	r3, [r6, #0]
    77f4:	3b01      	subs	r3, #1
    77f6:	2b05      	cmp	r3, #5
    77f8:	d820      	bhi.n	783c <usbd_event_handler+0x5c>
    77fa:	e8df f003 	tbb	[pc, r3]
    77fe:	039e      	.short	0x039e
    7800:	158f1313 	.word	0x158f1313
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    7804:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    7806:	733b      	strb	r3, [r7, #12]
		evt.evt_type = USBD_EVT_POWER;
    7808:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    780a:	f7ff fedd 	bl	75c8 <usbd_evt_alloc>
		if (!ev) {
    780e:	4603      	mov	r3, r0
    7810:	b1a0      	cbz	r0, 783c <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    7812:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    7814:	f100 0208 	add.w	r2, r0, #8
    7818:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    781c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    7820:	4618      	mov	r0, r3
    7822:	e034      	b.n	788e <usbd_event_handler+0xae>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    7824:	2304      	movs	r3, #4
    7826:	e7ee      	b.n	7806 <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    7828:	78b1      	ldrb	r1, [r6, #2]
    782a:	4608      	mov	r0, r1
    782c:	f7ff fe5c 	bl	74e8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    7830:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    7832:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    7834:	b12b      	cbz	r3, 7842 <usbd_event_handler+0x62>
    7836:	3b01      	subs	r3, #1
    7838:	2b02      	cmp	r3, #2
    783a:	d96b      	bls.n	7914 <usbd_event_handler+0x134>
}
    783c:	3734      	adds	r7, #52	; 0x34
    783e:	46bd      	mov	sp, r7
    7840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    7842:	0608      	lsls	r0, r1, #24
		switch (p_event->data.eptransfer.status) {
    7844:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    7846:	d527      	bpl.n	7898 <usbd_event_handler+0xb8>
		switch (p_event->data.eptransfer.status) {
    7848:	b1b4      	cbz	r4, 7878 <usbd_event_handler+0x98>
    784a:	2c03      	cmp	r4, #3
    784c:	d0f6      	beq.n	783c <usbd_event_handler+0x5c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    784e:	483c      	ldr	r0, [pc, #240]	; (7940 <usbd_event_handler+0x160>)
    7850:	6803      	ldr	r3, [r0, #0]
    7852:	075b      	lsls	r3, r3, #29
    7854:	d0f2      	beq.n	783c <usbd_event_handler+0x5c>
    7856:	4b3b      	ldr	r3, [pc, #236]	; (7944 <usbd_event_handler+0x164>)
    7858:	466d      	mov	r5, sp
    785a:	b088      	sub	sp, #32
    785c:	466a      	mov	r2, sp
    785e:	e9c2 3404 	strd	r3, r4, [r2, #16]
    7862:	2304      	movs	r3, #4
    7864:	6191      	str	r1, [r2, #24]
    7866:	61bb      	str	r3, [r7, #24]
    7868:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    786c:	f842 3f0c 	str.w	r3, [r2, #12]!
    7870:	f007 fc5a 	bl	f128 <z_log_msg2_static_create.constprop.0>
    7874:	46ad      	mov	sp, r5
    7876:	e7e1      	b.n	783c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    7878:	f7ff fea6 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    787c:	4603      	mov	r3, r0
    787e:	2800      	cmp	r0, #0
    7880:	d0dc      	beq.n	783c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    7882:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    7884:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    7886:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    7888:	2203      	movs	r2, #3
    788a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    788c:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    788e:	f7ff fe53 	bl	7538 <usbd_evt_put>
		usbd_work_schedule();
    7892:	f7ff fe57 	bl	7544 <usbd_work_schedule>
    7896:	e7d1      	b.n	783c <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
    7898:	b154      	cbz	r4, 78b0 <usbd_event_handler+0xd0>
    789a:	2c01      	cmp	r4, #1
    789c:	d1d7      	bne.n	784e <usbd_event_handler+0x6e>
			struct usbd_event *ev = usbd_evt_alloc();
    789e:	f7ff fe93 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    78a2:	4603      	mov	r3, r0
    78a4:	2800      	cmp	r0, #0
    78a6:	d0c9      	beq.n	783c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    78a8:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    78aa:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    78ac:	7304      	strb	r4, [r0, #12]
    78ae:	e7ed      	b.n	788c <usbd_event_handler+0xac>
			struct usbd_event *ev = usbd_evt_alloc();
    78b0:	f7ff fe8a 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    78b4:	4604      	mov	r4, r0
    78b6:	2800      	cmp	r0, #0
    78b8:	d0c0      	beq.n	783c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    78ba:	2301      	movs	r3, #1
    78bc:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    78be:	2302      	movs	r3, #2
    78c0:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    78c2:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    78c4:	f105 010c 	add.w	r1, r5, #12
    78c8:	78b0      	ldrb	r0, [r6, #2]
    78ca:	f008 f843 	bl	f954 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    78ce:	4603      	mov	r3, r0
    78d0:	b178      	cbz	r0, 78f2 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    78d2:	481b      	ldr	r0, [pc, #108]	; (7940 <usbd_event_handler+0x160>)
    78d4:	6802      	ldr	r2, [r0, #0]
    78d6:	0752      	lsls	r2, r2, #29
    78d8:	d00b      	beq.n	78f2 <usbd_event_handler+0x112>
    78da:	4a1b      	ldr	r2, [pc, #108]	; (7948 <usbd_event_handler+0x168>)
    78dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    78e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    78e4:	2303      	movs	r3, #3
    78e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
    78ea:	603b      	str	r3, [r7, #0]
    78ec:	627b      	str	r3, [r7, #36]	; 0x24
    78ee:	f007 fc1b 	bl	f128 <z_log_msg2_static_create.constprop.0>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    78f2:	4a16      	ldr	r2, [pc, #88]	; (794c <usbd_event_handler+0x16c>)
    78f4:	68e9      	ldr	r1, [r5, #12]
    78f6:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    78fa:	428b      	cmp	r3, r1
    78fc:	d906      	bls.n	790c <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    78fe:	1a5b      	subs	r3, r3, r1
    7900:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    7904:	f003 f922 	bl	ab4c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    7908:	4620      	mov	r0, r4
    790a:	e7c0      	b.n	788e <usbd_event_handler+0xae>
				ctx->ctrl_read_len = 0U;
    790c:	2300      	movs	r3, #0
    790e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    7912:	e7f9      	b.n	7908 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    7914:	4630      	mov	r0, r6
    7916:	f7ff fe9f 	bl	7658 <usbd_event_transfer_data>
	if (put_evt) {
    791a:	e78f      	b.n	783c <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
    791c:	f107 0018 	add.w	r0, r7, #24
    7920:	f003 f8ee 	bl	ab00 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    7924:	7e7b      	ldrb	r3, [r7, #25]
    7926:	2b05      	cmp	r3, #5
    7928:	d103      	bne.n	7932 <usbd_event_handler+0x152>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    792a:	7e3b      	ldrb	r3, [r7, #24]
    792c:	f013 0f60 	tst.w	r3, #96	; 0x60
    7930:	d084      	beq.n	783c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    7932:	4b07      	ldr	r3, [pc, #28]	; (7950 <usbd_event_handler+0x170>)
    7934:	60fb      	str	r3, [r7, #12]
			evt.evt_type = USBD_EVT_EP;
    7936:	2401      	movs	r4, #1
    7938:	e767      	b.n	780a <usbd_event_handler+0x2a>
	switch (p_event->type) {
    793a:	2402      	movs	r4, #2
    793c:	e765      	b.n	780a <usbd_event_handler+0x2a>
    793e:	bf00      	nop
    7940:	20000254 	.word	0x20000254
    7944:	000129e6 	.word	0x000129e6
    7948:	00012a2d 	.word	0x00012a2d
    794c:	20001bd8 	.word	0x20001bd8
    7950:	20001d44 	.word	0x20001d44

00007954 <eps_ctx_init>:
{
    7954:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    7956:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    7958:	f064 007f 	orn	r0, r4, #127	; 0x7f
    795c:	b2c0      	uxtb	r0, r0
    795e:	f7ff fdc3 	bl	74e8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    7962:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    7964:	f007 fbcd 	bl	f102 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    7968:	2c08      	cmp	r4, #8
    796a:	d1f5      	bne.n	7958 <eps_ctx_init+0x4>
    796c:	4d0f      	ldr	r5, [pc, #60]	; (79ac <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    796e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    7970:	b2e0      	uxtb	r0, r4
    7972:	f7ff fdb9 	bl	74e8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    7976:	6903      	ldr	r3, [r0, #16]
    7978:	b903      	cbnz	r3, 797c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    797a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    797c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    797e:	f007 fbc0 	bl	f102 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    7982:	2c08      	cmp	r4, #8
    7984:	f105 0540 	add.w	r5, r5, #64	; 0x40
    7988:	d1f2      	bne.n	7970 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    798a:	4c09      	ldr	r4, [pc, #36]	; (79b0 <eps_ctx_init+0x5c>)
    798c:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    7990:	f007 fbb7 	bl	f102 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    7994:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    7998:	b913      	cbnz	r3, 79a0 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    799a:	4b06      	ldr	r3, [pc, #24]	; (79b4 <eps_ctx_init+0x60>)
    799c:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    79a0:	4805      	ldr	r0, [pc, #20]	; (79b8 <eps_ctx_init+0x64>)
    79a2:	f007 fbae 	bl	f102 <ep_ctx_reset>
}
    79a6:	2000      	movs	r0, #0
    79a8:	bd38      	pop	{r3, r4, r5, pc}
    79aa:	bf00      	nop
    79ac:	200019d8 	.word	0x200019d8
    79b0:	20001bd8 	.word	0x20001bd8
    79b4:	200015d8 	.word	0x200015d8
    79b8:	20001e44 	.word	0x20001e44

000079bc <usbd_work_handler>:
{
    79bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    79c0:	4ca3      	ldr	r4, [pc, #652]	; (7c50 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    79c2:	f8df 8290 	ldr.w	r8, [pc, #656]	; 7c54 <usbd_work_handler+0x298>
{
    79c6:	b08b      	sub	sp, #44	; 0x2c
    79c8:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    79ca:	f7ff fde7 	bl	759c <usbd_evt_get>
    79ce:	4606      	mov	r6, r0
    79d0:	b910      	cbnz	r0, 79d8 <usbd_work_handler+0x1c>
}
    79d2:	b00b      	add	sp, #44	; 0x2c
    79d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    79d8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    79dc:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    79de:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    79e2:	b93a      	cbnz	r2, 79f4 <usbd_work_handler+0x38>
    79e4:	2b00      	cmp	r3, #0
    79e6:	f000 80ae 	beq.w	7b46 <usbd_work_handler+0x18a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    79ea:	4649      	mov	r1, r9
    79ec:	4640      	mov	r0, r8
    79ee:	f008 f81a 	bl	fa26 <k_mem_slab_free>
}
    79f2:	e7ea      	b.n	79ca <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    79f4:	2b04      	cmp	r3, #4
    79f6:	f200 819d 	bhi.w	7d34 <usbd_work_handler+0x378>
    79fa:	e8df f013 	tbh	[pc, r3, lsl #1]
    79fe:	00a4      	.short	0x00a4
    7a00:	013d0005 	.word	0x013d0005
    7a04:	017d0153 	.word	0x017d0153
			if (!ctx->attached) {
    7a08:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    7a0c:	b983      	cbnz	r3, 7a30 <usbd_work_handler+0x74>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    7a0e:	4892      	ldr	r0, [pc, #584]	; (7c58 <usbd_work_handler+0x29c>)
    7a10:	6803      	ldr	r3, [r0, #0]
    7a12:	075b      	lsls	r3, r3, #29
    7a14:	d00c      	beq.n	7a30 <usbd_work_handler+0x74>
    7a16:	4b91      	ldr	r3, [pc, #580]	; (7c5c <usbd_work_handler+0x2a0>)
    7a18:	9308      	str	r3, [sp, #32]
    7a1a:	68b3      	ldr	r3, [r6, #8]
    7a1c:	7a5b      	ldrb	r3, [r3, #9]
    7a1e:	9309      	str	r3, [sp, #36]	; 0x24
    7a20:	aa07      	add	r2, sp, #28
    7a22:	2303      	movs	r3, #3
    7a24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7a28:	9301      	str	r3, [sp, #4]
    7a2a:	9307      	str	r3, [sp, #28]
    7a2c:	f007 fb7c 	bl	f128 <z_log_msg2_static_create.constprop.0>
	switch (ep_evt->evt_type) {
    7a30:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    7a32:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    7a34:	2b03      	cmp	r3, #3
    7a36:	d8d8      	bhi.n	79ea <usbd_work_handler+0x2e>
    7a38:	e8df f003 	tbb	[pc, r3]
    7a3c:	726d3d02 	.word	0x726d3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    7a40:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    7a42:	2208      	movs	r2, #8
    7a44:	2100      	movs	r1, #0
    7a46:	4630      	mov	r0, r6
    7a48:	f007 fb27 	bl	f09a <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7a4c:	4b84      	ldr	r3, [pc, #528]	; (7c60 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    7a4e:	4885      	ldr	r0, [pc, #532]	; (7c64 <usbd_work_handler+0x2a8>)
    7a50:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    7a54:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    7a56:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    7a5a:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    7a5c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    7a60:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    7a64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    7a68:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    7a6a:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    7a6e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7a72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    7a76:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    7a78:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    7a7c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    7a80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    7a84:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    7a86:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    7a88:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    7a8a:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    7a8c:	f007 fafa 	bl	f084 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    7a90:	682b      	ldr	r3, [r5, #0]
    7a92:	7a68      	ldrb	r0, [r5, #9]
    7a94:	2100      	movs	r1, #0
    7a96:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    7a98:	f996 3000 	ldrsb.w	r3, [r6]
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	db06      	blt.n	7aae <usbd_work_handler+0xf2>
    7aa0:	88f3      	ldrh	r3, [r6, #6]
    7aa2:	b123      	cbz	r3, 7aae <usbd_work_handler+0xf2>
		ctx->ctrl_read_len = usbd_setup->wLength;
    7aa4:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    7aa8:	f003 f850 	bl	ab4c <nrfx_usbd_setup_data_clear>
    7aac:	e79d      	b.n	79ea <usbd_work_handler+0x2e>
		ctx->ctrl_read_len = 0U;
    7aae:	2300      	movs	r3, #0
    7ab0:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    7ab4:	e799      	b.n	79ea <usbd_work_handler+0x2e>
	if (!ep_ctx->read_pending) {
    7ab6:	7f6b      	ldrb	r3, [r5, #29]
    7ab8:	2b00      	cmp	r3, #0
    7aba:	d096      	beq.n	79ea <usbd_work_handler+0x2e>
	if (!ep_ctx->read_complete) {
    7abc:	7f2b      	ldrb	r3, [r5, #28]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d093      	beq.n	79ea <usbd_work_handler+0x2e>
	ep_ctx->read_pending = false;
    7ac2:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ac8:	4867      	ldr	r0, [pc, #412]	; (7c68 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    7aca:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    7ad0:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7ad2:	f007 fb2c 	bl	f12e <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    7ad6:	696b      	ldr	r3, [r5, #20]
    7ad8:	9301      	str	r3, [sp, #4]
    7ada:	686b      	ldr	r3, [r5, #4]
    7adc:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    7ae0:	a901      	add	r1, sp, #4
    7ae2:	7a68      	ldrb	r0, [r5, #9]
    7ae4:	f002 fe3c 	bl	a760 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    7ae8:	4a60      	ldr	r2, [pc, #384]	; (7c6c <usbd_work_handler+0x2b0>)
    7aea:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    7aec:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
    7aee:	d00e      	beq.n	7b0e <usbd_work_handler+0x152>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    7af0:	4859      	ldr	r0, [pc, #356]	; (7c58 <usbd_work_handler+0x29c>)
    7af2:	6802      	ldr	r2, [r0, #0]
    7af4:	0756      	lsls	r6, r2, #29
    7af6:	d00a      	beq.n	7b0e <usbd_work_handler+0x152>
    7af8:	4a5d      	ldr	r2, [pc, #372]	; (7c70 <usbd_work_handler+0x2b4>)
    7afa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7afe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7b02:	2303      	movs	r3, #3
    7b04:	aa07      	add	r2, sp, #28
    7b06:	9300      	str	r3, [sp, #0]
    7b08:	9307      	str	r3, [sp, #28]
    7b0a:	f007 fb0d 	bl	f128 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
    7b0e:	4856      	ldr	r0, [pc, #344]	; (7c68 <usbd_work_handler+0x2ac>)
    7b10:	f007 fb0f 	bl	f132 <k_mutex_unlock.isra.0>
    7b14:	e769      	b.n	79ea <usbd_work_handler+0x2e>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    7b16:	682b      	ldr	r3, [r5, #0]
    7b18:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    7b1a:	7a68      	ldrb	r0, [r5, #9]
    7b1c:	4798      	blx	r3
		break;
    7b1e:	e764      	b.n	79ea <usbd_work_handler+0x2e>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    7b20:	7aab      	ldrb	r3, [r5, #10]
    7b22:	b96b      	cbnz	r3, 7b40 <usbd_work_handler+0x184>
    7b24:	7feb      	ldrb	r3, [r5, #31]
    7b26:	b95b      	cbnz	r3, 7b40 <usbd_work_handler+0x184>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7b28:	484f      	ldr	r0, [pc, #316]	; (7c68 <usbd_work_handler+0x2ac>)
    7b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b32:	f007 fafc 	bl	f12e <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    7b36:	f003 f839 	bl	abac <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    7b3a:	484b      	ldr	r0, [pc, #300]	; (7c68 <usbd_work_handler+0x2ac>)
    7b3c:	f007 faf9 	bl	f132 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    7b40:	682b      	ldr	r3, [r5, #0]
    7b42:	2102      	movs	r1, #2
    7b44:	e7e9      	b.n	7b1a <usbd_work_handler+0x15e>
	switch (pwr_evt->state) {
    7b46:	7a33      	ldrb	r3, [r6, #8]
    7b48:	2b04      	cmp	r3, #4
    7b4a:	f63f af4e 	bhi.w	79ea <usbd_work_handler+0x2e>
    7b4e:	e8df f003 	tbb	[pc, r3]
    7b52:	035b      	.short	0x035b
    7b54:	6925      	.short	0x6925
    7b56:	75          	.byte	0x75
    7b57:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    7b58:	f002 fdb2 	bl	a6c0 <nrfx_usbd_is_enabled>
    7b5c:	4605      	mov	r5, r0
    7b5e:	2800      	cmp	r0, #0
    7b60:	f47f af43 	bne.w	79ea <usbd_work_handler+0x2e>
			nrfx_usbd_enable();
    7b64:	f002 fcf0 	bl	a548 <nrfx_usbd_enable>
    7b68:	f3bf 8f5b 	dmb	ish
    7b6c:	4941      	ldr	r1, [pc, #260]	; (7c74 <usbd_work_handler+0x2b8>)
    7b6e:	2301      	movs	r3, #1
    7b70:	e851 2f00 	ldrex	r2, [r1]
    7b74:	2a00      	cmp	r2, #0
    7b76:	d103      	bne.n	7b80 <usbd_work_handler+0x1c4>
    7b78:	e841 3000 	strex	r0, r3, [r1]
    7b7c:	2800      	cmp	r0, #0
    7b7e:	d1f7      	bne.n	7b70 <usbd_work_handler+0x1b4>
    7b80:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    7b84:	f47f af31 	bne.w	79ea <usbd_work_handler+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    7b88:	f841 5c10 	str.w	r5, [r1, #-16]
    7b8c:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    7b90:	69e0      	ldr	r0, [r4, #28]
    7b92:	6163      	str	r3, [r4, #20]
    7b94:	3914      	subs	r1, #20
    7b96:	f004 ff7d 	bl	ca94 <onoff_request>
    7b9a:	e726      	b.n	79ea <usbd_work_handler+0x2e>
	switch (pwr_evt->state) {
    7b9c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    7b9e:	f065 007f 	orn	r0, r5, #127	; 0x7f
    7ba2:	b2c0      	uxtb	r0, r0
    7ba4:	f7ff fca0 	bl	74e8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    7ba8:	7a03      	ldrb	r3, [r0, #8]
    7baa:	b113      	cbz	r3, 7bb2 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    7bac:	7a40      	ldrb	r0, [r0, #9]
    7bae:	f003 f9e9 	bl	af84 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    7bb2:	3501      	adds	r5, #1
    7bb4:	2d08      	cmp	r5, #8
    7bb6:	d1f2      	bne.n	7b9e <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    7bb8:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    7bbc:	b11b      	cbz	r3, 7bc6 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    7bbe:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    7bc2:	f003 f9df 	bl	af84 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    7bc6:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    7bc8:	b2e8      	uxtb	r0, r5
    7bca:	f7ff fc8d 	bl	74e8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    7bce:	7a03      	ldrb	r3, [r0, #8]
    7bd0:	b113      	cbz	r3, 7bd8 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    7bd2:	7a40      	ldrb	r0, [r0, #9]
    7bd4:	f003 f9d6 	bl	af84 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    7bd8:	3501      	adds	r5, #1
    7bda:	2d08      	cmp	r5, #8
    7bdc:	d1f4      	bne.n	7bc8 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    7bde:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    7be2:	b11b      	cbz	r3, 7bec <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    7be4:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    7be8:	f003 f9cc 	bl	af84 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    7bec:	2001      	movs	r0, #1
    7bee:	f002 fd49 	bl	a684 <nrfx_usbd_start>
		ctx->ready = true;
    7bf2:	2301      	movs	r3, #1
    7bf4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    7bf8:	6823      	ldr	r3, [r4, #0]
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	f43f aef5 	beq.w	79ea <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    7c00:	2100      	movs	r1, #0
    7c02:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    7c04:	4798      	blx	r3
    7c06:	e6f0      	b.n	79ea <usbd_work_handler+0x2e>
		ctx->ready = false;
    7c08:	2500      	movs	r5, #0
    7c0a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    7c0e:	f003 f945 	bl	ae9c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    7c12:	f7ff fdc3 	bl	779c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    7c16:	6823      	ldr	r3, [r4, #0]
    7c18:	2b00      	cmp	r3, #0
    7c1a:	f43f aee6 	beq.w	79ea <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    7c1e:	4629      	mov	r1, r5
    7c20:	2004      	movs	r0, #4
    7c22:	e7ef      	b.n	7c04 <usbd_work_handler+0x248>
		if (dev_ready()) {
    7c24:	2a00      	cmp	r2, #0
    7c26:	f43f aee0 	beq.w	79ea <usbd_work_handler+0x2e>
			nrfx_usbd_suspend();
    7c2a:	f003 f94f 	bl	aecc <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    7c2e:	6823      	ldr	r3, [r4, #0]
    7c30:	2b00      	cmp	r3, #0
    7c32:	f43f aeda 	beq.w	79ea <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    7c36:	2100      	movs	r1, #0
    7c38:	2005      	movs	r0, #5
    7c3a:	e7e3      	b.n	7c04 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    7c3c:	6823      	ldr	r3, [r4, #0]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	f43f aed3 	beq.w	79ea <usbd_work_handler+0x2e>
    7c44:	2a00      	cmp	r2, #0
    7c46:	f43f aed0 	beq.w	79ea <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_RESUME, NULL);
    7c4a:	2100      	movs	r1, #0
    7c4c:	2006      	movs	r0, #6
    7c4e:	e7d9      	b.n	7c04 <usbd_work_handler+0x248>
    7c50:	20001bd8 	.word	0x20001bd8
    7c54:	2000025c 	.word	0x2000025c
    7c58:	20000254 	.word	0x20000254
    7c5c:	00012a4d 	.word	0x00012a4d
    7c60:	40027000 	.word	0x40027000
    7c64:	20001bdc 	.word	0x20001bdc
    7c68:	20001c10 	.word	0x20001c10
    7c6c:	0bad0000 	.word	0x0bad0000
    7c70:	00012a73 	.word	0x00012a73
    7c74:	20001bf8 	.word	0x20001bf8
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7c78:	f107 0510 	add.w	r5, r7, #16
    7c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c84:	4628      	mov	r0, r5
    7c86:	f007 fa52 	bl	f12e <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    7c8a:	f7ff fe63 	bl	7954 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    7c8e:	4628      	mov	r0, r5
    7c90:	f007 fa4f 	bl	f132 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    7c94:	f857 3c28 	ldr.w	r3, [r7, #-40]
    7c98:	2b00      	cmp	r3, #0
    7c9a:	f43f aea6 	beq.w	79ea <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_RESET, NULL);
    7c9e:	2100      	movs	r1, #0
    7ca0:	2001      	movs	r0, #1
    7ca2:	e7af      	b.n	7c04 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    7ca4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    7ca8:	b1ab      	cbz	r3, 7cd6 <usbd_work_handler+0x31a>
		ep_ctx->read_pending = true;
    7caa:	2501      	movs	r5, #1
    7cac:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    7cb0:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    7cb4:	f7ff fc88 	bl	75c8 <usbd_evt_alloc>
		if (!ev) {
    7cb8:	b9a8      	cbnz	r0, 7ce6 <usbd_work_handler+0x32a>
			LOG_ERR("Failed to alloc evt");
    7cba:	4827      	ldr	r0, [pc, #156]	; (7d58 <usbd_work_handler+0x39c>)
    7cbc:	6803      	ldr	r3, [r0, #0]
    7cbe:	075d      	lsls	r5, r3, #29
    7cc0:	d009      	beq.n	7cd6 <usbd_work_handler+0x31a>
    7cc2:	4b26      	ldr	r3, [pc, #152]	; (7d5c <usbd_work_handler+0x3a0>)
    7cc4:	9308      	str	r3, [sp, #32]
    7cc6:	aa07      	add	r2, sp, #28
    7cc8:	2302      	movs	r3, #2
    7cca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7cce:	9301      	str	r3, [sp, #4]
    7cd0:	9307      	str	r3, [sp, #28]
    7cd2:	f007 fa29 	bl	f128 <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
    7cd6:	f857 3c28 	ldr.w	r3, [r7, #-40]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	f43f ae85 	beq.w	79ea <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SOF, NULL);
    7ce0:	2100      	movs	r1, #0
    7ce2:	200a      	movs	r0, #10
    7ce4:	e78e      	b.n	7c04 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    7ce6:	4a1e      	ldr	r2, [pc, #120]	; (7d60 <usbd_work_handler+0x3a4>)
		ev->evt_type = USBD_EVT_EP;
    7ce8:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7cea:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    7cec:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    7cee:	f7ff fc23 	bl	7538 <usbd_evt_put>
		usbd_work_schedule();
    7cf2:	f7ff fc27 	bl	7544 <usbd_work_schedule>
    7cf6:	e7ee      	b.n	7cd6 <usbd_work_handler+0x31a>
				LOG_ERR("USBD event queue full!");
    7cf8:	4817      	ldr	r0, [pc, #92]	; (7d58 <usbd_work_handler+0x39c>)
    7cfa:	6803      	ldr	r3, [r0, #0]
    7cfc:	0759      	lsls	r1, r3, #29
    7cfe:	d009      	beq.n	7d14 <usbd_work_handler+0x358>
    7d00:	4b18      	ldr	r3, [pc, #96]	; (7d64 <usbd_work_handler+0x3a8>)
    7d02:	9308      	str	r3, [sp, #32]
    7d04:	aa07      	add	r2, sp, #28
    7d06:	2302      	movs	r3, #2
    7d08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7d0c:	9301      	str	r3, [sp, #4]
    7d0e:	9307      	str	r3, [sp, #28]
    7d10:	f007 fa0a 	bl	f128 <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    7d14:	f007 fd8b 	bl	f82e <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    7d18:	f003 f8c0 	bl	ae9c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    7d1c:	f002 fc0a 	bl	a534 <nrfx_usbd_uninit>
	usbd_evt_flush();
    7d20:	f7ff fc44 	bl	75ac <usbd_evt_flush>
	ret = eps_ctx_init();
    7d24:	f7ff fe16 	bl	7954 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    7d28:	f007 fd7a 	bl	f820 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    7d2c:	480e      	ldr	r0, [pc, #56]	; (7d68 <usbd_work_handler+0x3ac>)
    7d2e:	f002 fcd1 	bl	a6d4 <nrfx_usbd_init>
}
    7d32:	e65a      	b.n	79ea <usbd_work_handler+0x2e>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    7d34:	4808      	ldr	r0, [pc, #32]	; (7d58 <usbd_work_handler+0x39c>)
    7d36:	6802      	ldr	r2, [r0, #0]
    7d38:	0752      	lsls	r2, r2, #29
    7d3a:	f43f ae56 	beq.w	79ea <usbd_work_handler+0x2e>
    7d3e:	4a0b      	ldr	r2, [pc, #44]	; (7d6c <usbd_work_handler+0x3b0>)
    7d40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		switch (ev->evt_type) {
    7d44:	e9cd 2308 	strd	r2, r3, [sp, #32]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    7d48:	2303      	movs	r3, #3
    7d4a:	aa07      	add	r2, sp, #28
    7d4c:	9301      	str	r3, [sp, #4]
    7d4e:	9307      	str	r3, [sp, #28]
    7d50:	f007 f9ea 	bl	f128 <z_log_msg2_static_create.constprop.0>
    7d54:	e649      	b.n	79ea <usbd_work_handler+0x2e>
    7d56:	bf00      	nop
    7d58:	20000254 	.word	0x20000254
    7d5c:	00012a99 	.word	0x00012a99
    7d60:	20001e44 	.word	0x20001e44
    7d64:	00012aad 	.word	0x00012aad
    7d68:	000077e1 	.word	0x000077e1
    7d6c:	00012ac4 	.word	0x00012ac4

00007d70 <usb_dc_attach>:
{
    7d70:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    7d72:	4d1a      	ldr	r5, [pc, #104]	; (7ddc <usb_dc_attach+0x6c>)
    7d74:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    7d78:	bb5c      	cbnz	r4, 7dd2 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    7d7a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7d7e:	f007 fea6 	bl	face <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    7d82:	4620      	mov	r0, r4
    7d84:	f000 fca4 	bl	86d0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7d88:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    7d8a:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7d8c:	2101      	movs	r1, #1
    7d8e:	2027      	movs	r0, #39	; 0x27
    7d90:	f7fe fd98 	bl	68c4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    7d94:	4812      	ldr	r0, [pc, #72]	; (7de0 <usb_dc_attach+0x70>)
    7d96:	f002 fc9d 	bl	a6d4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    7d9a:	4b12      	ldr	r3, [pc, #72]	; (7de4 <usb_dc_attach+0x74>)
    7d9c:	4298      	cmp	r0, r3
    7d9e:	d11a      	bne.n	7dd6 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    7da0:	f007 fd3e 	bl	f820 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    7da4:	f7ff fdd6 	bl	7954 <eps_ctx_init>
	if (ret == 0) {
    7da8:	4604      	mov	r4, r0
    7daa:	b910      	cbnz	r0, 7db2 <usb_dc_attach+0x42>
		ctx->attached = true;
    7dac:	2301      	movs	r3, #1
    7dae:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    7db2:	4b0d      	ldr	r3, [pc, #52]	; (7de8 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    7db4:	681b      	ldr	r3, [r3, #0]
    7db6:	b10b      	cbz	r3, 7dbc <usb_dc_attach+0x4c>
		usbd_work_schedule();
    7db8:	f7ff fbc4 	bl	7544 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    7dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7dc0:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    7dc4:	07db      	lsls	r3, r3, #31
    7dc6:	d502      	bpl.n	7dce <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    7dc8:	2000      	movs	r0, #0
    7dca:	f7ff fcb5 	bl	7738 <usb_dc_power_event_handler>
}
    7dce:	4620      	mov	r0, r4
    7dd0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    7dd2:	2400      	movs	r4, #0
    7dd4:	e7fb      	b.n	7dce <usb_dc_attach+0x5e>
		return -EIO;
    7dd6:	f06f 0404 	mvn.w	r4, #4
    7dda:	e7f8      	b.n	7dce <usb_dc_attach+0x5e>
    7ddc:	20001bd8 	.word	0x20001bd8
    7de0:	000077e1 	.word	0x000077e1
    7de4:	0bad0000 	.word	0x0bad0000
    7de8:	200002d4 	.word	0x200002d4

00007dec <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    7dec:	4b07      	ldr	r3, [pc, #28]	; (7e0c <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    7dee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    7df2:	b13a      	cbz	r2, 7e04 <usb_dc_set_address+0x18>
    7df4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    7df8:	2b00      	cmp	r3, #0
    7dfa:	bf0c      	ite	eq
    7dfc:	f06f 0012 	mvneq.w	r0, #18
    7e00:	2000      	movne	r0, #0
    7e02:	4770      	bx	lr
		return -ENODEV;
    7e04:	f06f 0012 	mvn.w	r0, #18
}
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop
    7e0c:	20001bd8 	.word	0x20001bd8

00007e10 <usb_dc_ep_check_cap>:
{
    7e10:	b500      	push	{lr}
    7e12:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    7e14:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    7e16:	791b      	ldrb	r3, [r3, #4]
{
    7e18:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    7e1a:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    7e1e:	b98b      	cbnz	r3, 7e44 <usb_dc_ep_check_cap+0x34>
    7e20:	b358      	cbz	r0, 7e7a <usb_dc_ep_check_cap+0x6a>
		LOG_ERR("invalid endpoint configuration");
    7e22:	4817      	ldr	r0, [pc, #92]	; (7e80 <usb_dc_ep_check_cap+0x70>)
    7e24:	6803      	ldr	r3, [r0, #0]
    7e26:	0759      	lsls	r1, r3, #29
    7e28:	d009      	beq.n	7e3e <usb_dc_ep_check_cap+0x2e>
    7e2a:	4b16      	ldr	r3, [pc, #88]	; (7e84 <usb_dc_ep_check_cap+0x74>)
		LOG_ERR("invalid endpoint index/address");
    7e2c:	9306      	str	r3, [sp, #24]
    7e2e:	2302      	movs	r3, #2
    7e30:	9301      	str	r3, [sp, #4]
    7e32:	9305      	str	r3, [sp, #20]
    7e34:	aa05      	add	r2, sp, #20
    7e36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7e3a:	f007 f975 	bl	f128 <z_log_msg2_static_create.constprop.0>
		return -1;
    7e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7e42:	e01a      	b.n	7e7a <usb_dc_ep_check_cap+0x6a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    7e44:	2808      	cmp	r0, #8
    7e46:	d905      	bls.n	7e54 <usb_dc_ep_check_cap+0x44>
		LOG_ERR("invalid endpoint index/address");
    7e48:	480d      	ldr	r0, [pc, #52]	; (7e80 <usb_dc_ep_check_cap+0x70>)
    7e4a:	6803      	ldr	r3, [r0, #0]
    7e4c:	075a      	lsls	r2, r3, #29
    7e4e:	d0f6      	beq.n	7e3e <usb_dc_ep_check_cap+0x2e>
    7e50:	4b0d      	ldr	r3, [pc, #52]	; (7e88 <usb_dc_ep_check_cap+0x78>)
    7e52:	e7eb      	b.n	7e2c <usb_dc_ep_check_cap+0x1c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    7e54:	2b01      	cmp	r3, #1
    7e56:	d10f      	bne.n	7e78 <usb_dc_ep_check_cap+0x68>
    7e58:	0713      	lsls	r3, r2, #28
    7e5a:	d40d      	bmi.n	7e78 <usb_dc_ep_check_cap+0x68>
		LOG_WRN("invalid endpoint type");
    7e5c:	4808      	ldr	r0, [pc, #32]	; (7e80 <usb_dc_ep_check_cap+0x70>)
    7e5e:	6803      	ldr	r3, [r0, #0]
    7e60:	f013 0f06 	tst.w	r3, #6
    7e64:	d0eb      	beq.n	7e3e <usb_dc_ep_check_cap+0x2e>
    7e66:	4b09      	ldr	r3, [pc, #36]	; (7e8c <usb_dc_ep_check_cap+0x7c>)
    7e68:	9306      	str	r3, [sp, #24]
    7e6a:	2302      	movs	r3, #2
    7e6c:	9301      	str	r3, [sp, #4]
    7e6e:	9305      	str	r3, [sp, #20]
    7e70:	aa05      	add	r2, sp, #20
    7e72:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    7e76:	e7e0      	b.n	7e3a <usb_dc_ep_check_cap+0x2a>
	return 0;
    7e78:	2000      	movs	r0, #0
}
    7e7a:	b009      	add	sp, #36	; 0x24
    7e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e80:	20000254 	.word	0x20000254
    7e84:	00012adb 	.word	0x00012adb
    7e88:	00012afa 	.word	0x00012afa
    7e8c:	00012b19 	.word	0x00012b19

00007e90 <usb_dc_ep_configure>:
{
    7e90:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    7e92:	4b18      	ldr	r3, [pc, #96]	; (7ef4 <usb_dc_ep_configure+0x64>)
	if (!dev_attached()) {
    7e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    7e98:	b088      	sub	sp, #32
    7e9a:	4601      	mov	r1, r0
	if (!dev_attached()) {
    7e9c:	b333      	cbz	r3, 7eec <usb_dc_ep_configure+0x5c>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    7e9e:	7804      	ldrb	r4, [r0, #0]
    7ea0:	4620      	mov	r0, r4
    7ea2:	f7ff fb21 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    7ea6:	b918      	cbnz	r0, 7eb0 <usb_dc_ep_configure+0x20>
			return -EINVAL;
    7ea8:	f06f 0015 	mvn.w	r0, #21
}
    7eac:	b008      	add	sp, #32
    7eae:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    7eb0:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    7eb2:	790b      	ldrb	r3, [r1, #4]
    7eb4:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    7eb6:	8849      	ldrh	r1, [r1, #2]
    7eb8:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    7eba:	0722      	lsls	r2, r4, #28
    7ebc:	d411      	bmi.n	7ee2 <usb_dc_ep_configure+0x52>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    7ebe:	1e4b      	subs	r3, r1, #1
    7ec0:	420b      	tst	r3, r1
    7ec2:	d00e      	beq.n	7ee2 <usb_dc_ep_configure+0x52>
			LOG_ERR("EP max packet size must be a power of 2");
    7ec4:	480c      	ldr	r0, [pc, #48]	; (7ef8 <usb_dc_ep_configure+0x68>)
    7ec6:	6803      	ldr	r3, [r0, #0]
    7ec8:	075b      	lsls	r3, r3, #29
    7eca:	d0ed      	beq.n	7ea8 <usb_dc_ep_configure+0x18>
    7ecc:	4b0b      	ldr	r3, [pc, #44]	; (7efc <usb_dc_ep_configure+0x6c>)
    7ece:	9306      	str	r3, [sp, #24]
    7ed0:	aa05      	add	r2, sp, #20
    7ed2:	2302      	movs	r3, #2
    7ed4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7ed8:	9301      	str	r3, [sp, #4]
    7eda:	9305      	str	r3, [sp, #20]
    7edc:	f007 f924 	bl	f128 <z_log_msg2_static_create.constprop.0>
    7ee0:	e7e2      	b.n	7ea8 <usb_dc_ep_configure+0x18>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    7ee2:	4620      	mov	r0, r4
    7ee4:	f007 fd31 	bl	f94a <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    7ee8:	2000      	movs	r0, #0
    7eea:	e7df      	b.n	7eac <usb_dc_ep_configure+0x1c>
		return -ENODEV;
    7eec:	f06f 0012 	mvn.w	r0, #18
    7ef0:	e7dc      	b.n	7eac <usb_dc_ep_configure+0x1c>
    7ef2:	bf00      	nop
    7ef4:	20001bd8 	.word	0x20001bd8
    7ef8:	20000254 	.word	0x20000254
    7efc:	00012b2f 	.word	0x00012b2f

00007f00 <usb_dc_ep_set_stall>:
{
    7f00:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    7f02:	4b1a      	ldr	r3, [pc, #104]	; (7f6c <usb_dc_ep_set_stall+0x6c>)
	if (!dev_attached() || !dev_ready()) {
    7f04:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    7f08:	b088      	sub	sp, #32
    7f0a:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    7f0c:	b35a      	cbz	r2, 7f66 <usb_dc_ep_set_stall+0x66>
    7f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7f12:	b343      	cbz	r3, 7f66 <usb_dc_ep_set_stall+0x66>
	ep_ctx = endpoint_ctx(ep);
    7f14:	f7ff fae8 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    7f18:	4604      	mov	r4, r0
    7f1a:	b308      	cbz	r0, 7f60 <usb_dc_ep_set_stall+0x60>
	switch (ep_ctx->cfg.type) {
    7f1c:	7a83      	ldrb	r3, [r0, #10]
    7f1e:	2b01      	cmp	r3, #1
    7f20:	d010      	beq.n	7f44 <usb_dc_ep_set_stall+0x44>
    7f22:	d908      	bls.n	7f36 <usb_dc_ep_set_stall+0x36>
    7f24:	3b02      	subs	r3, #2
    7f26:	2b01      	cmp	r3, #1
    7f28:	d908      	bls.n	7f3c <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    7f2a:	6963      	ldr	r3, [r4, #20]
    7f2c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    7f2e:	2000      	movs	r0, #0
    7f30:	60e0      	str	r0, [r4, #12]
}
    7f32:	b008      	add	sp, #32
    7f34:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    7f36:	f002 fe41 	bl	abbc <nrfx_usbd_setup_stall>
		break;
    7f3a:	e7f6      	b.n	7f2a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    7f3c:	4608      	mov	r0, r1
    7f3e:	f002 fdb1 	bl	aaa4 <nrfx_usbd_ep_stall>
		break;
    7f42:	e7f2      	b.n	7f2a <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    7f44:	480a      	ldr	r0, [pc, #40]	; (7f70 <usb_dc_ep_set_stall+0x70>)
    7f46:	6803      	ldr	r3, [r0, #0]
    7f48:	075b      	lsls	r3, r3, #29
    7f4a:	d009      	beq.n	7f60 <usb_dc_ep_set_stall+0x60>
    7f4c:	4b09      	ldr	r3, [pc, #36]	; (7f74 <usb_dc_ep_set_stall+0x74>)
    7f4e:	9306      	str	r3, [sp, #24]
    7f50:	aa05      	add	r2, sp, #20
    7f52:	2302      	movs	r3, #2
    7f54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7f58:	9301      	str	r3, [sp, #4]
    7f5a:	9305      	str	r3, [sp, #20]
    7f5c:	f007 f8e4 	bl	f128 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    7f60:	f06f 0015 	mvn.w	r0, #21
    7f64:	e7e5      	b.n	7f32 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    7f66:	f06f 0012 	mvn.w	r0, #18
    7f6a:	e7e2      	b.n	7f32 <usb_dc_ep_set_stall+0x32>
    7f6c:	20001bd8 	.word	0x20001bd8
    7f70:	20000254 	.word	0x20000254
    7f74:	00012b57 	.word	0x00012b57

00007f78 <usb_dc_ep_clear_stall>:
{
    7f78:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7f7a:	4b0e      	ldr	r3, [pc, #56]	; (7fb4 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    7f7c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    7f80:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    7f82:	b182      	cbz	r2, 7fa6 <usb_dc_ep_clear_stall+0x2e>
    7f84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7f88:	b16b      	cbz	r3, 7fa6 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    7f8a:	f7ff faad 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    7f8e:	b168      	cbz	r0, 7fac <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    7f90:	f015 0408 	ands.w	r4, r5, #8
    7f94:	d10a      	bne.n	7fac <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    7f96:	4628      	mov	r0, r5
    7f98:	f002 fda6 	bl	aae8 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    7f9c:	4628      	mov	r0, r5
    7f9e:	f003 f843 	bl	b028 <nrfx_usbd_ep_stall_clear>
	return 0;
    7fa2:	4620      	mov	r0, r4
}
    7fa4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7fa6:	f06f 0012 	mvn.w	r0, #18
    7faa:	e7fb      	b.n	7fa4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    7fac:	f06f 0015 	mvn.w	r0, #21
    7fb0:	e7f8      	b.n	7fa4 <usb_dc_ep_clear_stall+0x2c>
    7fb2:	bf00      	nop
    7fb4:	20001bd8 	.word	0x20001bd8

00007fb8 <usb_dc_ep_is_stalled>:
{
    7fb8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7fba:	4b0c      	ldr	r3, [pc, #48]	; (7fec <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    7fbc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    7fc0:	4605      	mov	r5, r0
    7fc2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    7fc4:	b162      	cbz	r2, 7fe0 <usb_dc_ep_is_stalled+0x28>
    7fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7fca:	b14b      	cbz	r3, 7fe0 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    7fcc:	f7ff fa8c 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    7fd0:	b148      	cbz	r0, 7fe6 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    7fd2:	b141      	cbz	r1, 7fe6 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    7fd4:	4628      	mov	r0, r5
    7fd6:	f002 fd6d 	bl	aab4 <nrfx_usbd_ep_stall_check>
    7fda:	7020      	strb	r0, [r4, #0]
	return 0;
    7fdc:	2000      	movs	r0, #0
}
    7fde:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7fe0:	f06f 0012 	mvn.w	r0, #18
    7fe4:	e7fb      	b.n	7fde <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    7fe6:	f06f 0015 	mvn.w	r0, #21
    7fea:	e7f8      	b.n	7fde <usb_dc_ep_is_stalled+0x26>
    7fec:	20001bd8 	.word	0x20001bd8

00007ff0 <usb_dc_ep_enable>:
{
    7ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    7ff2:	4f13      	ldr	r7, [pc, #76]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
	if (!dev_attached()) {
    7ff4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    7ff8:	4604      	mov	r4, r0
	if (!dev_attached()) {
    7ffa:	b1bb      	cbz	r3, 802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
	ep_ctx = endpoint_ctx(ep);
    7ffc:	f7ff fa74 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    8000:	4605      	mov	r5, r0
    8002:	b1b0      	cbz	r0, 8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    8004:	0723      	lsls	r3, r4, #28
    8006:	d405      	bmi.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    8008:	4620      	mov	r0, r4
    800a:	f002 fd6d 	bl	aae8 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    800e:	4620      	mov	r0, r4
    8010:	f003 f80a 	bl	b028 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    8014:	7a2e      	ldrb	r6, [r5, #8]
    8016:	b97e      	cbnz	r6, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
	if (dev_ready()) {
    8018:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    801c:	2301      	movs	r3, #1
    801e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    8020:	b118      	cbz	r0, 802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    8022:	4620      	mov	r0, r4
    8024:	f002 ffae 	bl	af84 <nrfx_usbd_ep_enable>
	return 0;
    8028:	4630      	mov	r0, r6
}
    802a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    802c:	f06f 0012 	mvn.w	r0, #18
    8030:	e7fb      	b.n	802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
		return -EINVAL;
    8032:	f06f 0015 	mvn.w	r0, #21
    8036:	e7f8      	b.n	802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
		return -EALREADY;
    8038:	f06f 0077 	mvn.w	r0, #119	; 0x77
    803c:	e7f5      	b.n	802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
    803e:	bf00      	nop
    8040:	20001bd8 	.word	0x20001bd8

00008044 <usb_dc_ep_disable>:
{
    8044:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    8046:	4b11      	ldr	r3, [pc, #68]	; (808c <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    8048:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    804c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    804e:	b19a      	cbz	r2, 8078 <usb_dc_ep_disable+0x34>
    8050:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8054:	b183      	cbz	r3, 8078 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    8056:	f7ff fa47 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    805a:	4605      	mov	r5, r0
    805c:	b178      	cbz	r0, 807e <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    805e:	7a03      	ldrb	r3, [r0, #8]
    8060:	b183      	cbz	r3, 8084 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    8062:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    8064:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    8066:	f002 ff61 	bl	af2c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    806a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    806c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    806e:	f007 f848 	bl	f102 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    8072:	722c      	strb	r4, [r5, #8]
	return 0;
    8074:	4620      	mov	r0, r4
}
    8076:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    8078:	f06f 0012 	mvn.w	r0, #18
    807c:	e7fb      	b.n	8076 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    807e:	f06f 0015 	mvn.w	r0, #21
    8082:	e7f8      	b.n	8076 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    8084:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8088:	e7f5      	b.n	8076 <usb_dc_ep_disable+0x32>
    808a:	bf00      	nop
    808c:	20001bd8 	.word	0x20001bd8

00008090 <usb_dc_ep_write>:
{
    8090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    8094:	f8df 8114 	ldr.w	r8, [pc, #276]	; 81ac <usb_dc_ep_write+0x11c>
{
    8098:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    809a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    809e:	b08b      	sub	sp, #44	; 0x2c
    80a0:	4607      	mov	r7, r0
    80a2:	4689      	mov	r9, r1
    80a4:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    80a6:	2b00      	cmp	r3, #0
    80a8:	d07d      	beq.n	81a6 <usb_dc_ep_write+0x116>
    80aa:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    80ae:	2b00      	cmp	r3, #0
    80b0:	d079      	beq.n	81a6 <usb_dc_ep_write+0x116>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    80b2:	0605      	lsls	r5, r0, #24
    80b4:	d514      	bpl.n	80e0 <usb_dc_ep_write+0x50>
	ep_ctx = endpoint_ctx(ep);
    80b6:	f7ff fa17 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    80ba:	4605      	mov	r5, r0
    80bc:	b180      	cbz	r0, 80e0 <usb_dc_ep_write+0x50>
	if (!ep_ctx->cfg.en) {
    80be:	7a03      	ldrb	r3, [r0, #8]
    80c0:	b98b      	cbnz	r3, 80e6 <usb_dc_ep_write+0x56>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    80c2:	483b      	ldr	r0, [pc, #236]	; (81b0 <usb_dc_ep_write+0x120>)
    80c4:	6803      	ldr	r3, [r0, #0]
    80c6:	0759      	lsls	r1, r3, #29
    80c8:	d00a      	beq.n	80e0 <usb_dc_ep_write+0x50>
    80ca:	4b3a      	ldr	r3, [pc, #232]	; (81b4 <usb_dc_ep_write+0x124>)
    80cc:	aa07      	add	r2, sp, #28
    80ce:	e9cd 3708 	strd	r3, r7, [sp, #32]
    80d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    80d6:	2303      	movs	r3, #3
    80d8:	9301      	str	r3, [sp, #4]
    80da:	9307      	str	r3, [sp, #28]
    80dc:	f007 f824 	bl	f128 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    80e0:	f06f 0415 	mvn.w	r4, #21
    80e4:	e00f      	b.n	8106 <usb_dc_ep_write+0x76>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    80e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    80ee:	f108 0038 	add.w	r0, r8, #56	; 0x38
    80f2:	f007 f81c 	bl	f12e <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    80f6:	7fab      	ldrb	r3, [r5, #30]
    80f8:	b14b      	cbz	r3, 810e <usb_dc_ep_write+0x7e>
		k_mutex_unlock(&ctx->drv_lock);
    80fa:	f108 0038 	add.w	r0, r8, #56	; 0x38
    80fe:	f007 f818 	bl	f132 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    8102:	f06f 040a 	mvn.w	r4, #10
}
    8106:	4620      	mov	r0, r4
    8108:	b00b      	add	sp, #44	; 0x2c
    810a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    810e:	b916      	cbnz	r6, 8116 <usb_dc_ep_write+0x86>
    8110:	7feb      	ldrb	r3, [r5, #31]
    8112:	b103      	cbz	r3, 8116 <usb_dc_ep_write+0x86>
		ep_ctx->trans_zlp = false;
    8114:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    8116:	7aab      	ldrb	r3, [r5, #10]
    8118:	b9bb      	cbnz	r3, 814a <usb_dc_ep_write+0xba>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    811a:	b15e      	cbz	r6, 8134 <usb_dc_ep_write+0xa4>
    811c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    8120:	429e      	cmp	r6, r3
    8122:	d207      	bcs.n	8134 <usb_dc_ep_write+0xa4>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    8124:	686a      	ldr	r2, [r5, #4]
    8126:	fbb6 f3f2 	udiv	r3, r6, r2
    812a:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    812e:	b90b      	cbnz	r3, 8134 <usb_dc_ep_write+0xa4>
			ep_ctx->trans_zlp = true;
    8130:	2301      	movs	r3, #1
    8132:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    8134:	f002 fd4a 	bl	abcc <nrfx_usbd_last_setup_dir_get>
    8138:	4287      	cmp	r7, r0
    813a:	d006      	beq.n	814a <usb_dc_ep_write+0xba>
		nrfx_usbd_setup_clear();
    813c:	f002 fd36 	bl	abac <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    8140:	481d      	ldr	r0, [pc, #116]	; (81b8 <usb_dc_ep_write+0x128>)
    8142:	f006 fff6 	bl	f132 <k_mutex_unlock.isra.0>
		return 0;
    8146:	2400      	movs	r4, #0
    8148:	e7dd      	b.n	8106 <usb_dc_ep_write+0x76>
	ep_ctx->write_in_progress = true;
    814a:	2301      	movs	r3, #1
    814c:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    814e:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    8152:	a901      	add	r1, sp, #4
    8154:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    8156:	e9cd 9601 	strd	r9, r6, [sp, #4]
    815a:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    815e:	f002 faff 	bl	a760 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    8162:	4a16      	ldr	r2, [pc, #88]	; (81bc <usb_dc_ep_write+0x12c>)
    8164:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    8166:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
    8168:	d016      	beq.n	8198 <usb_dc_ep_write+0x108>
		ep_ctx->write_in_progress = false;
    816a:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    816e:	b10c      	cbz	r4, 8174 <usb_dc_ep_write+0xe4>
			*ret_bytes = 0;
    8170:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    8174:	480e      	ldr	r0, [pc, #56]	; (81b0 <usb_dc_ep_write+0x120>)
    8176:	6802      	ldr	r2, [r0, #0]
    8178:	0752      	lsls	r2, r2, #29
    817a:	d00a      	beq.n	8192 <usb_dc_ep_write+0x102>
    817c:	4a10      	ldr	r2, [pc, #64]	; (81c0 <usb_dc_ep_write+0x130>)
    817e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8182:	e9cd 2308 	strd	r2, r3, [sp, #32]
    8186:	2303      	movs	r3, #3
    8188:	aa07      	add	r2, sp, #28
    818a:	9300      	str	r3, [sp, #0]
    818c:	9307      	str	r3, [sp, #28]
    818e:	f006 ffcb 	bl	f128 <z_log_msg2_static_create.constprop.0>
		result = -EIO;
    8192:	f06f 0404 	mvn.w	r4, #4
    8196:	e002      	b.n	819e <usb_dc_ep_write+0x10e>
		if (ret_bytes) {
    8198:	b10c      	cbz	r4, 819e <usb_dc_ep_write+0x10e>
			*ret_bytes = data_len;
    819a:	6026      	str	r6, [r4, #0]
	int result = 0;
    819c:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    819e:	4806      	ldr	r0, [pc, #24]	; (81b8 <usb_dc_ep_write+0x128>)
    81a0:	f006 ffc7 	bl	f132 <k_mutex_unlock.isra.0>
	return result;
    81a4:	e7af      	b.n	8106 <usb_dc_ep_write+0x76>
		return -ENODEV;
    81a6:	f06f 0412 	mvn.w	r4, #18
    81aa:	e7ac      	b.n	8106 <usb_dc_ep_write+0x76>
    81ac:	20001bd8 	.word	0x20001bd8
    81b0:	20000254 	.word	0x20000254
    81b4:	00012b79 	.word	0x00012b79
    81b8:	20001c10 	.word	0x20001c10
    81bc:	0bad0000 	.word	0x0bad0000
    81c0:	00012b98 	.word	0x00012b98

000081c4 <usb_dc_ep_read_wait>:
{
    81c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81c8:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    81ca:	4b2b      	ldr	r3, [pc, #172]	; (8278 <usb_dc_ep_read_wait+0xb4>)
{
    81cc:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    81ce:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    81d2:	b088      	sub	sp, #32
    81d4:	4680      	mov	r8, r0
    81d6:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    81d8:	2a00      	cmp	r2, #0
    81da:	d049      	beq.n	8270 <usb_dc_ep_read_wait+0xac>
    81dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    81e0:	2b00      	cmp	r3, #0
    81e2:	d045      	beq.n	8270 <usb_dc_ep_read_wait+0xac>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    81e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    81e8:	d117      	bne.n	821a <usb_dc_ep_read_wait+0x56>
	if (!data && max_data_len) {
    81ea:	b901      	cbnz	r1, 81ee <usb_dc_ep_read_wait+0x2a>
    81ec:	b9af      	cbnz	r7, 821a <usb_dc_ep_read_wait+0x56>
	ep_ctx = endpoint_ctx(ep);
    81ee:	4640      	mov	r0, r8
    81f0:	f7ff f97a 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    81f4:	4604      	mov	r4, r0
    81f6:	b180      	cbz	r0, 821a <usb_dc_ep_read_wait+0x56>
	if (!ep_ctx->cfg.en) {
    81f8:	7a03      	ldrb	r3, [r0, #8]
    81fa:	b98b      	cbnz	r3, 8220 <usb_dc_ep_read_wait+0x5c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    81fc:	481f      	ldr	r0, [pc, #124]	; (827c <usb_dc_ep_read_wait+0xb8>)
    81fe:	6803      	ldr	r3, [r0, #0]
    8200:	075b      	lsls	r3, r3, #29
    8202:	d00a      	beq.n	821a <usb_dc_ep_read_wait+0x56>
    8204:	4b1e      	ldr	r3, [pc, #120]	; (8280 <usb_dc_ep_read_wait+0xbc>)
    8206:	aa05      	add	r2, sp, #20
    8208:	e9cd 3806 	strd	r3, r8, [sp, #24]
    820c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8210:	2303      	movs	r3, #3
    8212:	9301      	str	r3, [sp, #4]
    8214:	9305      	str	r3, [sp, #20]
    8216:	f006 ff87 	bl	f128 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    821a:	f06f 0015 	mvn.w	r0, #21
    821e:	e013      	b.n	8248 <usb_dc_ep_read_wait+0x84>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    8220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8224:	4817      	ldr	r0, [pc, #92]	; (8284 <usb_dc_ep_read_wait+0xc0>)
    8226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    822a:	f006 ff80 	bl	f12e <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    822e:	68e3      	ldr	r3, [r4, #12]
    8230:	42bb      	cmp	r3, r7
    8232:	4698      	mov	r8, r3
    8234:	bf28      	it	cs
    8236:	46b8      	movcs	r8, r7
	if (!data && !max_data_len) {
    8238:	b94e      	cbnz	r6, 824e <usb_dc_ep_read_wait+0x8a>
    823a:	b947      	cbnz	r7, 824e <usb_dc_ep_read_wait+0x8a>
		if (read_bytes) {
    823c:	b105      	cbz	r5, 8240 <usb_dc_ep_read_wait+0x7c>
			*read_bytes = ep_ctx->buf.len;
    823e:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    8240:	4810      	ldr	r0, [pc, #64]	; (8284 <usb_dc_ep_read_wait+0xc0>)
    8242:	f006 ff76 	bl	f132 <k_mutex_unlock.isra.0>
		return 0;
    8246:	2000      	movs	r0, #0
}
    8248:	b008      	add	sp, #32
    824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    824e:	69a1      	ldr	r1, [r4, #24]
    8250:	4642      	mov	r2, r8
    8252:	4630      	mov	r0, r6
    8254:	f006 ff16 	bl	f084 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    8258:	69a3      	ldr	r3, [r4, #24]
    825a:	4443      	add	r3, r8
    825c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    825e:	68e3      	ldr	r3, [r4, #12]
    8260:	eba3 0308 	sub.w	r3, r3, r8
    8264:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    8266:	2d00      	cmp	r5, #0
    8268:	d0ea      	beq.n	8240 <usb_dc_ep_read_wait+0x7c>
		*read_bytes = bytes_to_copy;
    826a:	f8c5 8000 	str.w	r8, [r5]
    826e:	e7e7      	b.n	8240 <usb_dc_ep_read_wait+0x7c>
		return -ENODEV;
    8270:	f06f 0012 	mvn.w	r0, #18
    8274:	e7e8      	b.n	8248 <usb_dc_ep_read_wait+0x84>
    8276:	bf00      	nop
    8278:	20001bd8 	.word	0x20001bd8
    827c:	20000254 	.word	0x20000254
    8280:	00012b79 	.word	0x00012b79
    8284:	20001c10 	.word	0x20001c10

00008288 <usb_dc_ep_read_continue>:
{
    8288:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    828a:	4d27      	ldr	r5, [pc, #156]	; (8328 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    828c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    8290:	b088      	sub	sp, #32
    8292:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    8294:	2b00      	cmp	r3, #0
    8296:	d044      	beq.n	8322 <usb_dc_ep_read_continue+0x9a>
    8298:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    829c:	2b00      	cmp	r3, #0
    829e:	d040      	beq.n	8322 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    82a0:	0602      	lsls	r2, r0, #24
    82a2:	d414      	bmi.n	82ce <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    82a4:	f7ff f920 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    82a8:	4604      	mov	r4, r0
    82aa:	b180      	cbz	r0, 82ce <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    82ac:	7a03      	ldrb	r3, [r0, #8]
    82ae:	b98b      	cbnz	r3, 82d4 <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    82b0:	481e      	ldr	r0, [pc, #120]	; (832c <usb_dc_ep_read_continue+0xa4>)
    82b2:	6803      	ldr	r3, [r0, #0]
    82b4:	075b      	lsls	r3, r3, #29
    82b6:	d00a      	beq.n	82ce <usb_dc_ep_read_continue+0x46>
    82b8:	4b1d      	ldr	r3, [pc, #116]	; (8330 <usb_dc_ep_read_continue+0xa8>)
    82ba:	aa05      	add	r2, sp, #20
    82bc:	e9cd 3106 	strd	r3, r1, [sp, #24]
    82c0:	2303      	movs	r3, #3
    82c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    82c6:	9301      	str	r3, [sp, #4]
    82c8:	9305      	str	r3, [sp, #20]
    82ca:	f006 ff2d 	bl	f128 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    82ce:	f06f 0015 	mvn.w	r0, #21
    82d2:	e018      	b.n	8306 <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    82d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82dc:	f105 0038 	add.w	r0, r5, #56	; 0x38
    82e0:	f006 ff25 	bl	f12e <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    82e4:	68e3      	ldr	r3, [r4, #12]
    82e6:	b9bb      	cbnz	r3, 8318 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    82e8:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    82ea:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    82ec:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    82ee:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    82f0:	7f63      	ldrb	r3, [r4, #29]
    82f2:	b18b      	cbz	r3, 8318 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    82f4:	f7ff f968 	bl	75c8 <usbd_evt_alloc>
			if (!ev) {
    82f8:	b938      	cbnz	r0, 830a <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    82fa:	f105 0038 	add.w	r0, r5, #56	; 0x38
    82fe:	f006 ff18 	bl	f132 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    8302:	f06f 000b 	mvn.w	r0, #11
}
    8306:	b008      	add	sp, #32
    8308:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    830a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    830c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    830e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    8310:	f7ff f912 	bl	7538 <usbd_evt_put>
			usbd_work_schedule();
    8314:	f7ff f916 	bl	7544 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    8318:	4806      	ldr	r0, [pc, #24]	; (8334 <usb_dc_ep_read_continue+0xac>)
    831a:	f006 ff0a 	bl	f132 <k_mutex_unlock.isra.0>
	return 0;
    831e:	2000      	movs	r0, #0
    8320:	e7f1      	b.n	8306 <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
    8322:	f06f 0012 	mvn.w	r0, #18
    8326:	e7ee      	b.n	8306 <usb_dc_ep_read_continue+0x7e>
    8328:	20001bd8 	.word	0x20001bd8
    832c:	20000254 	.word	0x20000254
    8330:	00012b79 	.word	0x00012b79
    8334:	20001c10 	.word	0x20001c10

00008338 <usb_dc_ep_set_callback>:
{
    8338:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    833a:	4b08      	ldr	r3, [pc, #32]	; (835c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    833c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8340:	b12b      	cbz	r3, 834e <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    8342:	f7ff f8d1 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    8346:	b128      	cbz	r0, 8354 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    8348:	6001      	str	r1, [r0, #0]
	return 0;
    834a:	2000      	movs	r0, #0
}
    834c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    834e:	f06f 0012 	mvn.w	r0, #18
    8352:	e7fb      	b.n	834c <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    8354:	f06f 0015 	mvn.w	r0, #21
    8358:	e7f8      	b.n	834c <usb_dc_ep_set_callback+0x14>
    835a:	bf00      	nop
    835c:	20001bd8 	.word	0x20001bd8

00008360 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    8360:	4b01      	ldr	r3, [pc, #4]	; (8368 <usb_dc_set_status_callback+0x8>)
    8362:	6018      	str	r0, [r3, #0]
}
    8364:	4770      	bx	lr
    8366:	bf00      	nop
    8368:	20001bd8 	.word	0x20001bd8

0000836c <usb_dc_ep_mps>:
{
    836c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    836e:	4b07      	ldr	r3, [pc, #28]	; (838c <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    8370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8374:	b123      	cbz	r3, 8380 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    8376:	f7ff f8b7 	bl	74e8 <endpoint_ctx>
	if (!ep_ctx) {
    837a:	b120      	cbz	r0, 8386 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    837c:	6840      	ldr	r0, [r0, #4]
}
    837e:	bd08      	pop	{r3, pc}
		return -ENODEV;
    8380:	f06f 0012 	mvn.w	r0, #18
    8384:	e7fb      	b.n	837e <usb_dc_ep_mps+0x12>
		return -EINVAL;
    8386:	f06f 0015 	mvn.w	r0, #21
    838a:	e7f8      	b.n	837e <usb_dc_ep_mps+0x12>
    838c:	20001bd8 	.word	0x20001bd8

00008390 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    8390:	4b08      	ldr	r3, [pc, #32]	; (83b4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    8392:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    8394:	1ac3      	subs	r3, r0, r3
{
    8396:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    8398:	4907      	ldr	r1, [pc, #28]	; (83b8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    839a:	109b      	asrs	r3, r3, #2
{
    839c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    839e:	4359      	muls	r1, r3
    83a0:	4806      	ldr	r0, [pc, #24]	; (83bc <onoff_stop+0x2c>)
    83a2:	2240      	movs	r2, #64	; 0x40
    83a4:	f006 fef2 	bl	f18c <stop>
	notify(mgr, res);
    83a8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    83aa:	4601      	mov	r1, r0
	notify(mgr, res);
    83ac:	4620      	mov	r0, r4
}
    83ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    83b2:	4718      	bx	r3
    83b4:	20001e78 	.word	0x20001e78
    83b8:	b6db6db7 	.word	0xb6db6db7
    83bc:	000103e0 	.word	0x000103e0

000083c0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    83c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    83c2:	4c0c      	ldr	r4, [pc, #48]	; (83f4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    83c4:	4a0c      	ldr	r2, [pc, #48]	; (83f8 <onoff_start+0x38>)
    83c6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    83c8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    83ca:	9300      	str	r3, [sp, #0]
{
    83cc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    83ce:	460b      	mov	r3, r1
    83d0:	490a      	ldr	r1, [pc, #40]	; (83fc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    83d2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    83d4:	4361      	muls	r1, r4
{
    83d6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    83d8:	4809      	ldr	r0, [pc, #36]	; (8400 <onoff_start+0x40>)
    83da:	f006 ff04 	bl	f1e6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    83de:	1e01      	subs	r1, r0, #0
    83e0:	da05      	bge.n	83ee <onoff_start+0x2e>
		notify(mgr, err);
    83e2:	4630      	mov	r0, r6
    83e4:	462b      	mov	r3, r5
	}
}
    83e6:	b002      	add	sp, #8
    83e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    83ec:	4718      	bx	r3
}
    83ee:	b002      	add	sp, #8
    83f0:	bd70      	pop	{r4, r5, r6, pc}
    83f2:	bf00      	nop
    83f4:	20001e78 	.word	0x20001e78
    83f8:	0000f255 	.word	0x0000f255
    83fc:	b6db6db7 	.word	0xb6db6db7
    8400:	000103e0 	.word	0x000103e0

00008404 <hfclk_start>:
{
    8404:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    8406:	f007 fd83 	bl	ff10 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    840a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    840e:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    8412:	4c07      	ldr	r4, [pc, #28]	; (8430 <hfclk_start+0x2c>)
    8414:	fb02 3101 	mla	r1, r2, r1, r3
    8418:	0bc0      	lsrs	r0, r0, #15
    841a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    841e:	0bc9      	lsrs	r1, r1, #15
    8420:	e9c4 0100 	strd	r0, r1, [r4]
}
    8424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    8428:	2001      	movs	r0, #1
    842a:	f007 b96b 	b.w	f704 <nrfx_clock_start>
    842e:	bf00      	nop
    8430:	20000d28 	.word	0x20000d28

00008434 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    8434:	2200      	movs	r2, #0
{
    8436:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    8438:	2101      	movs	r1, #1
{
    843a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    843c:	4610      	mov	r0, r2
    843e:	f7fe fa41 	bl	68c4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    8442:	2000      	movs	r0, #0
    8444:	f7fe fa0c 	bl	6860 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    8448:	480f      	ldr	r0, [pc, #60]	; (8488 <clk_init+0x54>)
    844a:	f001 f9eb 	bl	9824 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    844e:	4b0f      	ldr	r3, [pc, #60]	; (848c <clk_init+0x58>)
    8450:	4298      	cmp	r0, r3
    8452:	d115      	bne.n	8480 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    8454:	f001 f9f6 	bl	9844 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    8458:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    845a:	490d      	ldr	r1, [pc, #52]	; (8490 <clk_init+0x5c>)
    845c:	4630      	mov	r0, r6
    845e:	f004 fb06 	bl	ca6e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    8462:	2800      	cmp	r0, #0
    8464:	db0b      	blt.n	847e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    8466:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    8468:	4909      	ldr	r1, [pc, #36]	; (8490 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    846a:	2501      	movs	r5, #1
    846c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    846e:	f104 001c 	add.w	r0, r4, #28
    8472:	f004 fafc 	bl	ca6e <onoff_manager_init>
		if (err < 0) {
    8476:	2800      	cmp	r0, #0
    8478:	db01      	blt.n	847e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    847a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    847c:	2000      	movs	r0, #0
}
    847e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    8480:	f06f 0004 	mvn.w	r0, #4
    8484:	e7fb      	b.n	847e <clk_init+0x4a>
    8486:	bf00      	nop
    8488:	000084c9 	.word	0x000084c9
    848c:	0bad0000 	.word	0x0bad0000
    8490:	00010e20 	.word	0x00010e20

00008494 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    8494:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    8496:	230c      	movs	r3, #12
    8498:	4809      	ldr	r0, [pc, #36]	; (84c0 <clkstarted_handle.constprop.0+0x2c>)
    849a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    849c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    849e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    84a0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    84a4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    84a6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    84a8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    84aa:	4418      	add	r0, r3
    84ac:	f006 fe5b 	bl	f166 <set_on_state>
	if (callback) {
    84b0:	b12d      	cbz	r5, 84be <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    84b2:	4632      	mov	r2, r6
    84b4:	462b      	mov	r3, r5
    84b6:	4803      	ldr	r0, [pc, #12]	; (84c4 <clkstarted_handle.constprop.0+0x30>)
}
    84b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    84bc:	4718      	bx	r3
}
    84be:	bd70      	pop	{r4, r5, r6, pc}
    84c0:	20001e78 	.word	0x20001e78
    84c4:	000103e0 	.word	0x000103e0

000084c8 <clock_event_handler>:
	switch (event) {
    84c8:	b110      	cbz	r0, 84d0 <clock_event_handler+0x8>
    84ca:	2801      	cmp	r0, #1
    84cc:	d004      	beq.n	84d8 <clock_event_handler+0x10>
    84ce:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    84d0:	4b03      	ldr	r3, [pc, #12]	; (84e0 <clock_event_handler+0x18>)
    84d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84d4:	075b      	lsls	r3, r3, #29
    84d6:	d101      	bne.n	84dc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    84d8:	f7ff bfdc 	b.w	8494 <clkstarted_handle.constprop.0>
}
    84dc:	4770      	bx	lr
    84de:	bf00      	nop
    84e0:	20001e78 	.word	0x20001e78

000084e4 <generic_hfclk_start>:
{
    84e4:	b508      	push	{r3, lr}
	__asm__ volatile(
    84e6:	f04f 0320 	mov.w	r3, #32
    84ea:	f3ef 8111 	mrs	r1, BASEPRI
    84ee:	f383 8812 	msr	BASEPRI_MAX, r3
    84f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    84f6:	4a11      	ldr	r2, [pc, #68]	; (853c <generic_hfclk_start+0x58>)
    84f8:	6813      	ldr	r3, [r2, #0]
    84fa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    84fe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    8502:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    8504:	d00c      	beq.n	8520 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    850a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    850e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    8512:	f013 0301 	ands.w	r3, r3, #1
    8516:	d003      	beq.n	8520 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    8518:	4809      	ldr	r0, [pc, #36]	; (8540 <generic_hfclk_start+0x5c>)
    851a:	f006 fe24 	bl	f166 <set_on_state>
			already_started = true;
    851e:	2301      	movs	r3, #1
	__asm__ volatile(
    8520:	f381 8811 	msr	BASEPRI, r1
    8524:	f3bf 8f6f 	isb	sy
	if (already_started) {
    8528:	b123      	cbz	r3, 8534 <generic_hfclk_start+0x50>
}
    852a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    852e:	2000      	movs	r0, #0
    8530:	f7ff bfb0 	b.w	8494 <clkstarted_handle.constprop.0>
}
    8534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    8538:	f7ff bf64 	b.w	8404 <hfclk_start>
    853c:	20001ec8 	.word	0x20001ec8
    8540:	20001eb8 	.word	0x20001eb8

00008544 <api_blocking_start>:
{
    8544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    8546:	2200      	movs	r2, #0
    8548:	2301      	movs	r3, #1
    854a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    854e:	ab04      	add	r3, sp, #16
    8550:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    8554:	4a09      	ldr	r2, [pc, #36]	; (857c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    8556:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    855a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    855c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    8560:	f006 fe71 	bl	f246 <api_start>
	if (err < 0) {
    8564:	2800      	cmp	r0, #0
    8566:	db05      	blt.n	8574 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    8568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    856c:	2300      	movs	r3, #0
    856e:	4668      	mov	r0, sp
    8570:	f003 fa1e 	bl	b9b0 <z_impl_k_sem_take>
}
    8574:	b007      	add	sp, #28
    8576:	f85d fb04 	ldr.w	pc, [sp], #4
    857a:	bf00      	nop
    857c:	0000f273 	.word	0x0000f273

00008580 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    8580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8584:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    8588:	4605      	mov	r5, r0
    858a:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    858e:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    8592:	f04f 0320 	mov.w	r3, #32
    8596:	f3ef 8711 	mrs	r7, BASEPRI
    859a:	f383 8812 	msr	BASEPRI_MAX, r3
    859e:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    85a2:	f007 fcb5 	bl	ff10 <z_impl_k_uptime_ticks>
    85a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    85aa:	fba0 4003 	umull	r4, r0, r0, r3
    85ae:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    85b2:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    85b6:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    85ba:	4b25      	ldr	r3, [pc, #148]	; (8650 <cmd_status+0xd0>)
    85bc:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    85c0:	4b24      	ldr	r3, [pc, #144]	; (8654 <cmd_status+0xd4>)
    85c2:	0be4      	lsrs	r4, r4, #15
    85c4:	f8d3 a000 	ldr.w	sl, [r3]
    85c8:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
    85cc:	f387 8811 	msr	BASEPRI, r7
    85d0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    85d4:	4a20      	ldr	r2, [pc, #128]	; (8658 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
    85d6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 865c <cmd_status+0xdc>
    85da:	4f21      	ldr	r7, [pc, #132]	; (8660 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    85dc:	4628      	mov	r0, r5
    85de:	2108      	movs	r1, #8
    85e0:	f005 fb66 	bl	dcb0 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    85e4:	f019 0f01 	tst.w	r9, #1
    85e8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8664 <cmd_status+0xe4>
    85ec:	4a1e      	ldr	r2, [pc, #120]	; (8668 <cmd_status+0xe8>)
    85ee:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    85f2:	9300      	str	r3, [sp, #0]
    85f4:	4628      	mov	r0, r5
    85f6:	bf14      	ite	ne
    85f8:	4643      	movne	r3, r8
    85fa:	463b      	moveq	r3, r7
    85fc:	2108      	movs	r1, #8
    85fe:	f005 fb57 	bl	dcb0 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    8602:	eba4 030b 	sub.w	r3, r4, fp
    8606:	9300      	str	r3, [sp, #0]
    8608:	4628      	mov	r0, r5
    860a:	465b      	mov	r3, fp
    860c:	4a17      	ldr	r2, [pc, #92]	; (866c <cmd_status+0xec>)
    860e:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    8610:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    8614:	f005 fb4c 	bl	dcb0 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    8618:	4653      	mov	r3, sl
    861a:	4628      	mov	r0, r5
    861c:	4a14      	ldr	r2, [pc, #80]	; (8670 <cmd_status+0xf0>)
    861e:	9400      	str	r4, [sp, #0]
    8620:	2108      	movs	r1, #8
    8622:	f005 fb45 	bl	dcb0 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    8626:	4628      	mov	r0, r5
    8628:	4a12      	ldr	r2, [pc, #72]	; (8674 <cmd_status+0xf4>)
    862a:	2108      	movs	r1, #8
    862c:	f005 fb40 	bl	dcb0 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    8630:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    8634:	9300      	str	r3, [sp, #0]
    8636:	4628      	mov	r0, r5
    8638:	4a0b      	ldr	r2, [pc, #44]	; (8668 <cmd_status+0xe8>)
    863a:	2e00      	cmp	r6, #0
    863c:	bf14      	ite	ne
    863e:	4643      	movne	r3, r8
    8640:	463b      	moveq	r3, r7
    8642:	2108      	movs	r1, #8
    8644:	f005 fb34 	bl	dcb0 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    8648:	2000      	movs	r0, #0
    864a:	b003      	add	sp, #12
    864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8650:	20000d28 	.word	0x20000d28
    8654:	20000d30 	.word	0x20000d30
    8658:	00012bc3 	.word	0x00012bc3
    865c:	00011586 	.word	0x00011586
    8660:	00012bbe 	.word	0x00012bbe
    8664:	20001e78 	.word	0x20001e78
    8668:	00012bce 	.word	0x00012bce
    866c:	00012be8 	.word	0x00012be8
    8670:	00012c0a 	.word	0x00012c0a
    8674:	00012c2b 	.word	0x00012c2b

00008678 <hfclk_stop>:
{
    8678:	b510      	push	{r4, lr}
    867a:	f007 fc49 	bl	ff10 <z_impl_k_uptime_ticks>
    867e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8682:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    8686:	4c07      	ldr	r4, [pc, #28]	; (86a4 <hfclk_stop+0x2c>)
    8688:	fb02 3101 	mla	r1, r2, r1, r3
    868c:	0bc0      	lsrs	r0, r0, #15
    868e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    8692:	0bc9      	lsrs	r1, r1, #15
    8694:	e9c4 0100 	strd	r0, r1, [r4]
}
    8698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    869c:	2001      	movs	r0, #1
    869e:	f001 b8df 	b.w	9860 <nrfx_clock_stop>
    86a2:	bf00      	nop
    86a4:	20000d30 	.word	0x20000d30

000086a8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    86a8:	4b08      	ldr	r3, [pc, #32]	; (86cc <generic_hfclk_stop+0x24>)
    86aa:	f3bf 8f5b 	dmb	ish
    86ae:	e853 2f00 	ldrex	r2, [r3]
    86b2:	f022 0102 	bic.w	r1, r2, #2
    86b6:	e843 1000 	strex	r0, r1, [r3]
    86ba:	2800      	cmp	r0, #0
    86bc:	d1f7      	bne.n	86ae <generic_hfclk_stop+0x6>
    86be:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    86c2:	07d3      	lsls	r3, r2, #31
    86c4:	d401      	bmi.n	86ca <generic_hfclk_stop+0x22>
	hfclk_stop();
    86c6:	f7ff bfd7 	b.w	8678 <hfclk_stop>
}
    86ca:	4770      	bx	lr
    86cc:	20001ec8 	.word	0x20001ec8

000086d0 <z_nrf_clock_control_get_onoff>:
}
    86d0:	4a02      	ldr	r2, [pc, #8]	; (86dc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    86d2:	b2c3      	uxtb	r3, r0
}
    86d4:	201c      	movs	r0, #28
    86d6:	fb03 2000 	mla	r0, r3, r0, r2
    86da:	4770      	bx	lr
    86dc:	20001e78 	.word	0x20001e78

000086e0 <z_nrf_clock_control_lf_on>:
{
    86e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    86e4:	4939      	ldr	r1, [pc, #228]	; (87cc <z_nrf_clock_control_lf_on+0xec>)
    86e6:	f3bf 8f5b 	dmb	ish
    86ea:	4607      	mov	r7, r0
    86ec:	2201      	movs	r2, #1
    86ee:	e851 3f00 	ldrex	r3, [r1]
    86f2:	e841 2000 	strex	r0, r2, [r1]
    86f6:	2800      	cmp	r0, #0
    86f8:	d1f9      	bne.n	86ee <z_nrf_clock_control_lf_on+0xe>
    86fa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    86fe:	b933      	cbnz	r3, 870e <z_nrf_clock_control_lf_on+0x2e>
    8700:	4933      	ldr	r1, [pc, #204]	; (87d0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    8702:	4834      	ldr	r0, [pc, #208]	; (87d4 <z_nrf_clock_control_lf_on+0xf4>)
    8704:	604b      	str	r3, [r1, #4]
    8706:	60cb      	str	r3, [r1, #12]
    8708:	608a      	str	r2, [r1, #8]
    870a:	f004 f9c3 	bl	ca94 <onoff_request>
	switch (start_mode) {
    870e:	1e7b      	subs	r3, r7, #1
    8710:	2b01      	cmp	r3, #1
    8712:	d82f      	bhi.n	8774 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    8714:	2f01      	cmp	r7, #1
    8716:	d107      	bne.n	8728 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    871c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8720:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    8724:	2b01      	cmp	r3, #1
    8726:	d025      	beq.n	8774 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    8728:	f007 f9a7 	bl	fa7a <k_is_in_isr>
    872c:	4604      	mov	r4, r0
    872e:	b918      	cbnz	r0, 8738 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    8730:	4b29      	ldr	r3, [pc, #164]	; (87d8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    8732:	781b      	ldrb	r3, [r3, #0]
    8734:	2b00      	cmp	r3, #0
    8736:	d141      	bne.n	87bc <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    8738:	f04f 0320 	mov.w	r3, #32
    873c:	f3ef 8611 	mrs	r6, BASEPRI
    8740:	f383 8812 	msr	BASEPRI_MAX, r3
    8744:	f3bf 8f6f 	isb	sy
    8748:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    874a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 87dc <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    874e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    8752:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8756:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    875a:	03d2      	lsls	r2, r2, #15
    875c:	d50c      	bpl.n	8778 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    875e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    8762:	2b01      	cmp	r3, #1
    8764:	d001      	beq.n	876a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    8766:	2f01      	cmp	r7, #1
    8768:	d106      	bne.n	8778 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    876a:	b30c      	cbz	r4, 87b0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    876c:	f386 8811 	msr	BASEPRI, r6
    8770:	f3bf 8f6f 	isb	sy
}
    8774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    8778:	b1ac      	cbz	r4, 87a6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    877a:	4630      	mov	r0, r6
    877c:	f7fd fff8 	bl	6770 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    8780:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    8784:	2b00      	cmp	r3, #0
    8786:	d1e4      	bne.n	8752 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8788:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    878c:	2a00      	cmp	r2, #0
    878e:	d0e0      	beq.n	8752 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8790:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    8794:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    8798:	2301      	movs	r3, #1
    879a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    879e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    87a2:	60ab      	str	r3, [r5, #8]
}
    87a4:	e7d5      	b.n	8752 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    87a6:	2100      	movs	r1, #0
    87a8:	2021      	movs	r0, #33	; 0x21
    87aa:	f003 fd1d 	bl	c1e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    87ae:	e7e7      	b.n	8780 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    87b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    87b4:	2202      	movs	r2, #2
    87b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    87ba:	e7db      	b.n	8774 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    87bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    87c0:	2202      	movs	r2, #2
    87c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    87c6:	4606      	mov	r6, r0
}
    87c8:	e7bf      	b.n	874a <z_nrf_clock_control_lf_on+0x6a>
    87ca:	bf00      	nop
    87cc:	20001ecc 	.word	0x20001ecc
    87d0:	20001e68 	.word	0x20001e68
    87d4:	20001e94 	.word	0x20001e94
    87d8:	200021ee 	.word	0x200021ee
    87dc:	e000e100 	.word	0xe000e100

000087e0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    87e0:	b530      	push	{r4, r5, lr}
	return port->config;
    87e2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    87e4:	7b04      	ldrb	r4, [r0, #12]
    87e6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    87ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    87ee:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    87f2:	b085      	sub	sp, #20
    87f4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    87f8:	d104      	bne.n	8804 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    87fa:	4628      	mov	r0, r5
    87fc:	f001 fade 	bl	9dbc <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    8800:	2000      	movs	r0, #0
    8802:	e032      	b.n	886a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    8804:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    8808:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    880c:	d12f      	bne.n	886e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    880e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    8812:	bf0c      	ite	eq
    8814:	2304      	moveq	r3, #4
    8816:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    8818:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    881c:	6883      	ldr	r3, [r0, #8]
    881e:	fa23 f101 	lsr.w	r1, r3, r1
    8822:	07c9      	lsls	r1, r1, #31
    8824:	d42f      	bmi.n	8886 <gpio_nrfx_pin_interrupt_configure+0xa6>
    8826:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    882a:	d12c      	bne.n	8886 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    882c:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    882e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    8830:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    8834:	4a1c      	ldr	r2, [pc, #112]	; (88a8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    8836:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    883a:	bf18      	it	ne
    883c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    8840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    8844:	07db      	lsls	r3, r3, #31
    8846:	d41e      	bmi.n	8886 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    8848:	f10d 0407 	add.w	r4, sp, #7
    884c:	4621      	mov	r1, r4
    884e:	4628      	mov	r0, r5
    8850:	f001 fa18 	bl	9c84 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    8854:	4b15      	ldr	r3, [pc, #84]	; (88ac <gpio_nrfx_pin_interrupt_configure+0xcc>)
    8856:	4298      	cmp	r0, r3
    8858:	d114      	bne.n	8884 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    885a:	4620      	mov	r0, r4
    885c:	f001 fa60 	bl	9d20 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    8860:	4b13      	ldr	r3, [pc, #76]	; (88b0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    8862:	4298      	cmp	r0, r3
    8864:	d00e      	beq.n	8884 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    8866:	f06f 000b 	mvn.w	r0, #11
}
    886a:	b005      	add	sp, #20
    886c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    886e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    8872:	d005      	beq.n	8880 <gpio_nrfx_pin_interrupt_configure+0xa0>
    8874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    8878:	bf0c      	ite	eq
    887a:	2302      	moveq	r3, #2
    887c:	2301      	movne	r3, #1
    887e:	e7cb      	b.n	8818 <gpio_nrfx_pin_interrupt_configure+0x38>
    8880:	2303      	movs	r3, #3
    8882:	e7c9      	b.n	8818 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    8884:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    8886:	2300      	movs	r3, #0
    8888:	4619      	mov	r1, r3
    888a:	aa02      	add	r2, sp, #8
    888c:	4628      	mov	r0, r5
    888e:	f001 f8d3 	bl	9a38 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    8892:	4b07      	ldr	r3, [pc, #28]	; (88b0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    8894:	4298      	cmp	r0, r3
    8896:	d104      	bne.n	88a2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    8898:	2101      	movs	r1, #1
    889a:	4628      	mov	r0, r5
    889c:	f001 fa46 	bl	9d2c <nrfx_gpiote_trigger_enable>
    88a0:	e7ae      	b.n	8800 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    88a2:	f06f 0004 	mvn.w	r0, #4
    88a6:	e7e0      	b.n	886a <gpio_nrfx_pin_interrupt_configure+0x8a>
    88a8:	50000300 	.word	0x50000300
    88ac:	0bad0004 	.word	0x0bad0004
    88b0:	0bad0000 	.word	0x0bad0000

000088b4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    88b4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    88b6:	f001 fa23 	bl	9d00 <nrfx_gpiote_is_init>
    88ba:	4604      	mov	r4, r0
    88bc:	b968      	cbnz	r0, 88da <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    88be:	f001 f9f7 	bl	9cb0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    88c2:	4b08      	ldr	r3, [pc, #32]	; (88e4 <gpio_nrfx_init+0x30>)
    88c4:	4298      	cmp	r0, r3
    88c6:	d10a      	bne.n	88de <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    88c8:	4807      	ldr	r0, [pc, #28]	; (88e8 <gpio_nrfx_init+0x34>)
    88ca:	4621      	mov	r1, r4
    88cc:	f001 f9d4 	bl	9c78 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    88d0:	4622      	mov	r2, r4
    88d2:	2105      	movs	r1, #5
    88d4:	2006      	movs	r0, #6
    88d6:	f7fd fff5 	bl	68c4 <z_arm_irq_priority_set>
		return 0;
    88da:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    88dc:	bd10      	pop	{r4, pc}
		return -EIO;
    88de:	f06f 0004 	mvn.w	r0, #4
    88e2:	e7fb      	b.n	88dc <gpio_nrfx_init+0x28>
    88e4:	0bad0000 	.word	0x0bad0000
    88e8:	000088ed 	.word	0x000088ed

000088ec <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    88ec:	0942      	lsrs	r2, r0, #5
{
    88ee:	b570      	push	{r4, r5, r6, lr}
    88f0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    88f2:	d002      	beq.n	88fa <nrfx_gpio_handler+0xe>
    88f4:	2a01      	cmp	r2, #1
    88f6:	d015      	beq.n	8924 <nrfx_gpio_handler+0x38>
}
    88f8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    88fa:	4e0b      	ldr	r6, [pc, #44]	; (8928 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    88fc:	6932      	ldr	r2, [r6, #16]
    88fe:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8900:	2900      	cmp	r1, #0
    8902:	d0f9      	beq.n	88f8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    8904:	f003 031f 	and.w	r3, r3, #31
    8908:	2501      	movs	r5, #1
    890a:	680c      	ldr	r4, [r1, #0]
    890c:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    890e:	688a      	ldr	r2, [r1, #8]
    8910:	402a      	ands	r2, r5
    8912:	d002      	beq.n	891a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    8914:	684b      	ldr	r3, [r1, #4]
    8916:	4630      	mov	r0, r6
    8918:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    891a:	2c00      	cmp	r4, #0
    891c:	d0ec      	beq.n	88f8 <nrfx_gpio_handler+0xc>
    891e:	4621      	mov	r1, r4
    8920:	6824      	ldr	r4, [r4, #0]
    8922:	e7f4      	b.n	890e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    8924:	4e01      	ldr	r6, [pc, #4]	; (892c <nrfx_gpio_handler+0x40>)
    8926:	e7e9      	b.n	88fc <nrfx_gpio_handler+0x10>
    8928:	000103f8 	.word	0x000103f8
    892c:	00010410 	.word	0x00010410

00008930 <gpio_nrfx_pin_configure>:
{
    8930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    8934:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8936:	7b3b      	ldrb	r3, [r7, #12]
    8938:	f001 051f 	and.w	r5, r1, #31
{
    893c:	b085      	sub	sp, #20
    893e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8940:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    8944:	4614      	mov	r4, r2
    8946:	b9ca      	cbnz	r2, 897c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    8948:	a902      	add	r1, sp, #8
    894a:	4628      	mov	r0, r5
    894c:	f001 f99a 	bl	9c84 <nrfx_gpiote_channel_get>
    8950:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    8952:	4628      	mov	r0, r5
    8954:	f001 fa5a 	bl	9e0c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    8958:	4b48      	ldr	r3, [pc, #288]	; (8a7c <gpio_nrfx_pin_configure+0x14c>)
    895a:	4298      	cmp	r0, r3
    895c:	d004      	beq.n	8968 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    895e:	f06f 0004 	mvn.w	r0, #4
}
    8962:	b005      	add	sp, #20
    8964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    8968:	4284      	cmp	r4, r0
    896a:	d105      	bne.n	8978 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    896c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    8970:	f001 f9d0 	bl	9d14 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    8974:	42a0      	cmp	r0, r4
    8976:	d1f2      	bne.n	895e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    8978:	2000      	movs	r0, #0
    897a:	e7f2      	b.n	8962 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    897c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    8980:	f10d 0103 	add.w	r1, sp, #3
    8984:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    8986:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    898a:	f001 f97b 	bl	9c84 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    898e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    8990:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    8992:	aa02      	add	r2, sp, #8
    8994:	4649      	mov	r1, r9
    8996:	4628      	mov	r0, r5
    8998:	f001 f84e 	bl	9a38 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    899c:	4b37      	ldr	r3, [pc, #220]	; (8a7c <gpio_nrfx_pin_configure+0x14c>)
    899e:	4298      	cmp	r0, r3
    89a0:	d002      	beq.n	89a8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    89a2:	f06f 0015 	mvn.w	r0, #21
    89a6:	e7dc      	b.n	8962 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    89a8:	4580      	cmp	r8, r0
    89aa:	d103      	bne.n	89b4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    89ac:	f89d 0003 	ldrb.w	r0, [sp, #3]
    89b0:	f001 f9b0 	bl	9d14 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    89b4:	05a3      	lsls	r3, r4, #22
    89b6:	d54e      	bpl.n	8a56 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    89b8:	4b31      	ldr	r3, [pc, #196]	; (8a80 <gpio_nrfx_pin_configure+0x150>)
    89ba:	4a32      	ldr	r2, [pc, #200]	; (8a84 <gpio_nrfx_pin_configure+0x154>)
    89bc:	4023      	ands	r3, r4
    89be:	4293      	cmp	r3, r2
    89c0:	d03a      	beq.n	8a38 <gpio_nrfx_pin_configure+0x108>
    89c2:	d80c      	bhi.n	89de <gpio_nrfx_pin_configure+0xae>
    89c4:	2b06      	cmp	r3, #6
    89c6:	d014      	beq.n	89f2 <gpio_nrfx_pin_configure+0xc2>
    89c8:	d804      	bhi.n	89d4 <gpio_nrfx_pin_configure+0xa4>
    89ca:	b193      	cbz	r3, 89f2 <gpio_nrfx_pin_configure+0xc2>
    89cc:	2b02      	cmp	r3, #2
    89ce:	d1e8      	bne.n	89a2 <gpio_nrfx_pin_configure+0x72>
    89d0:	2304      	movs	r3, #4
    89d2:	e00e      	b.n	89f2 <gpio_nrfx_pin_configure+0xc2>
    89d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    89d8:	d1e3      	bne.n	89a2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    89da:	2301      	movs	r3, #1
    89dc:	e009      	b.n	89f2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    89de:	4a2a      	ldr	r2, [pc, #168]	; (8a88 <gpio_nrfx_pin_configure+0x158>)
    89e0:	4293      	cmp	r3, r2
    89e2:	d02b      	beq.n	8a3c <gpio_nrfx_pin_configure+0x10c>
    89e4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    89e8:	d02a      	beq.n	8a40 <gpio_nrfx_pin_configure+0x110>
    89ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    89ee:	d1d8      	bne.n	89a2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    89f0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    89f2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    89f6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    89fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    89fe:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    8a00:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    8a04:	bf54      	ite	pl
    8a06:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    8a0a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    8a0c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    8a0e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    8a12:	d517      	bpl.n	8a44 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	2101      	movs	r1, #1
    8a18:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    8a1c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    8a20:	2200      	movs	r2, #0
    8a22:	a901      	add	r1, sp, #4
    8a24:	4628      	mov	r0, r5
    8a26:	f001 f8b5 	bl	9b94 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    8a2a:	4b14      	ldr	r3, [pc, #80]	; (8a7c <gpio_nrfx_pin_configure+0x14c>)
    8a2c:	4298      	cmp	r0, r3
    8a2e:	bf14      	ite	ne
    8a30:	f06f 0015 	mvnne.w	r0, #21
    8a34:	2000      	moveq	r0, #0
    8a36:	e794      	b.n	8962 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    8a38:	2307      	movs	r3, #7
    8a3a:	e7da      	b.n	89f2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    8a3c:	2305      	movs	r3, #5
    8a3e:	e7d8      	b.n	89f2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    8a40:	2303      	movs	r3, #3
    8a42:	e7d6      	b.n	89f2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    8a44:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    8a46:	bf41      	itttt	mi
    8a48:	687b      	ldrmi	r3, [r7, #4]
    8a4a:	2101      	movmi	r1, #1
    8a4c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    8a50:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    8a54:	e7e4      	b.n	8a20 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    8a56:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8a58:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    8a5c:	bf54      	ite	pl
    8a5e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    8a62:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8a64:	461a      	mov	r2, r3
    8a66:	a901      	add	r1, sp, #4
    8a68:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    8a6a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8a6e:	f000 ffe3 	bl	9a38 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    8a72:	4b02      	ldr	r3, [pc, #8]	; (8a7c <gpio_nrfx_pin_configure+0x14c>)
    8a74:	4298      	cmp	r0, r3
    8a76:	f43f af7f 	beq.w	8978 <gpio_nrfx_pin_configure+0x48>
    8a7a:	e792      	b.n	89a2 <gpio_nrfx_pin_configure+0x72>
    8a7c:	0bad0000 	.word	0x0bad0000
    8a80:	00f00006 	.word	0x00f00006
    8a84:	00100006 	.word	0x00100006
    8a88:	00400002 	.word	0x00400002

00008a8c <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
    8a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
    8a90:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8b40 <print_all_reset_causes+0xb4>
		return "security";
    8a94:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8b44 <print_all_reset_causes+0xb8>
		return "parity error";
    8a98:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8b48 <print_all_reset_causes+0xbc>
{
    8a9c:	4607      	mov	r7, r0
    8a9e:	460d      	mov	r5, r1
    8aa0:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    8aa2:	2401      	movs	r4, #1
		if (cause & cause_mask) {
    8aa4:	ea15 0204 	ands.w	r2, r5, r4
    8aa8:	d013      	beq.n	8ad2 <print_all_reset_causes+0x46>
	switch (cause) {
    8aaa:	2a40      	cmp	r2, #64	; 0x40
    8aac:	d03c      	beq.n	8b28 <print_all_reset_causes+0x9c>
    8aae:	d81e      	bhi.n	8aee <print_all_reset_causes+0x62>
    8ab0:	2a08      	cmp	r2, #8
    8ab2:	d814      	bhi.n	8ade <print_all_reset_causes+0x52>
    8ab4:	3a01      	subs	r2, #1
    8ab6:	2a07      	cmp	r2, #7
    8ab8:	d834      	bhi.n	8b24 <print_all_reset_causes+0x98>
    8aba:	e8df f002 	tbb	[pc, r2]
    8abe:	0437      	.short	0x0437
    8ac0:	33332f33 	.word	0x33332f33
    8ac4:	3133      	.short	0x3133
    8ac6:	4b21      	ldr	r3, [pc, #132]	; (8b4c <print_all_reset_causes+0xc0>)
			shell_print(sh, "- %s",
    8ac8:	4652      	mov	r2, sl
    8aca:	2108      	movs	r1, #8
    8acc:	4638      	mov	r0, r7
    8ace:	f005 f8ef 	bl	dcb0 <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    8ad2:	3e01      	subs	r6, #1
    8ad4:	ea4f 0444 	mov.w	r4, r4, lsl #1
    8ad8:	d1e4      	bne.n	8aa4 <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
    8ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
    8ade:	2a10      	cmp	r2, #16
    8ae0:	d026      	beq.n	8b30 <print_all_reset_causes+0xa4>
		return "debug";
    8ae2:	4b1b      	ldr	r3, [pc, #108]	; (8b50 <print_all_reset_causes+0xc4>)
    8ae4:	491b      	ldr	r1, [pc, #108]	; (8b54 <print_all_reset_causes+0xc8>)
    8ae6:	2a20      	cmp	r2, #32
    8ae8:	bf08      	it	eq
    8aea:	460b      	moveq	r3, r1
    8aec:	e7ec      	b.n	8ac8 <print_all_reset_causes+0x3c>
	switch (cause) {
    8aee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    8af2:	d01f      	beq.n	8b34 <print_all_reset_causes+0xa8>
    8af4:	d808      	bhi.n	8b08 <print_all_reset_causes+0x7c>
    8af6:	2a80      	cmp	r2, #128	; 0x80
    8af8:	d01e      	beq.n	8b38 <print_all_reset_causes+0xac>
		return "CPU lockup";
    8afa:	4b15      	ldr	r3, [pc, #84]	; (8b50 <print_all_reset_causes+0xc4>)
    8afc:	4916      	ldr	r1, [pc, #88]	; (8b58 <print_all_reset_causes+0xcc>)
    8afe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    8b02:	bf08      	it	eq
    8b04:	460b      	moveq	r3, r1
    8b06:	e7df      	b.n	8ac8 <print_all_reset_causes+0x3c>
	switch (cause) {
    8b08:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    8b0c:	d016      	beq.n	8b3c <print_all_reset_causes+0xb0>
		return "clock";
    8b0e:	4b10      	ldr	r3, [pc, #64]	; (8b50 <print_all_reset_causes+0xc4>)
    8b10:	4912      	ldr	r1, [pc, #72]	; (8b5c <print_all_reset_causes+0xd0>)
    8b12:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    8b16:	bf08      	it	eq
    8b18:	460b      	moveq	r3, r1
    8b1a:	e7d5      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "brownout";
    8b1c:	4b10      	ldr	r3, [pc, #64]	; (8b60 <print_all_reset_causes+0xd4>)
    8b1e:	e7d3      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "power-on reset";
    8b20:	4b10      	ldr	r3, [pc, #64]	; (8b64 <print_all_reset_causes+0xd8>)
    8b22:	e7d1      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "unknown";
    8b24:	4b0a      	ldr	r3, [pc, #40]	; (8b50 <print_all_reset_causes+0xc4>)
    8b26:	e7cf      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "security";
    8b28:	4643      	mov	r3, r8
    8b2a:	e7cd      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "pin";
    8b2c:	4b0e      	ldr	r3, [pc, #56]	; (8b68 <print_all_reset_causes+0xdc>)
    8b2e:	e7cb      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "watchdog";
    8b30:	4b0e      	ldr	r3, [pc, #56]	; (8b6c <print_all_reset_causes+0xe0>)
    8b32:	e7c9      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "parity error";
    8b34:	464b      	mov	r3, r9
    8b36:	e7c7      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "low power wake-up";
    8b38:	4b0d      	ldr	r3, [pc, #52]	; (8b70 <print_all_reset_causes+0xe4>)
    8b3a:	e7c5      	b.n	8ac8 <print_all_reset_causes+0x3c>
		return "PLL error";
    8b3c:	4b0d      	ldr	r3, [pc, #52]	; (8b74 <print_all_reset_causes+0xe8>)
    8b3e:	e7c3      	b.n	8ac8 <print_all_reset_causes+0x3c>
    8b40:	000116ae 	.word	0x000116ae
    8b44:	00012cbd 	.word	0x00012cbd
    8b48:	00012cc6 	.word	0x00012cc6
    8b4c:	00012cab 	.word	0x00012cab
    8b50:	00012c87 	.word	0x00012c87
    8b54:	00012ce5 	.word	0x00012ce5
    8b58:	00012ceb 	.word	0x00012ceb
    8b5c:	00012d00 	.word	0x00012d00
    8b60:	00012c93 	.word	0x00012c93
    8b64:	00012c9c 	.word	0x00012c9c
    8b68:	00012c8f 	.word	0x00012c8f
    8b6c:	00012cb4 	.word	0x00012cb4
    8b70:	00012cd3 	.word	0x00012cd3
    8b74:	00012cf6 	.word	0x00012cf6

00008b78 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
    8b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8b7a:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&supported, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
    8b7c:	a801      	add	r0, sp, #4
    8b7e:	f006 fc28 	bl	f3d2 <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
    8b82:	f110 0f86 	cmn.w	r0, #134	; 0x86
    8b86:	4604      	mov	r4, r0
    8b88:	d111      	bne.n	8bae <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
    8b8a:	4a11      	ldr	r2, [pc, #68]	; (8bd0 <cmd_supported_reset_cause+0x58>)
    8b8c:	2101      	movs	r1, #1
    8b8e:	4628      	mov	r0, r5
    8b90:	f005 f88e 	bl	dcb0 <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
    8b94:	9c01      	ldr	r4, [sp, #4]
    8b96:	b1ac      	cbz	r4, 8bc4 <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
    8b98:	4a0e      	ldr	r2, [pc, #56]	; (8bd4 <cmd_supported_reset_cause+0x5c>)
    8b9a:	2108      	movs	r1, #8
    8b9c:	4628      	mov	r0, r5
    8b9e:	f005 f887 	bl	dcb0 <shell_fprintf>
		print_all_reset_causes(sh, cause);
    8ba2:	9901      	ldr	r1, [sp, #4]
    8ba4:	4628      	mov	r0, r5
    8ba6:	f7ff ff71 	bl	8a8c <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supporte");
	}

	return 0;
    8baa:	2400      	movs	r4, #0
    8bac:	e007      	b.n	8bbe <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
    8bae:	2800      	cmp	r0, #0
    8bb0:	d0f0      	beq.n	8b94 <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
    8bb2:	4603      	mov	r3, r0
    8bb4:	4a08      	ldr	r2, [pc, #32]	; (8bd8 <cmd_supported_reset_cause+0x60>)
    8bb6:	2101      	movs	r1, #1
    8bb8:	4628      	mov	r0, r5
    8bba:	f005 f879 	bl	dcb0 <shell_fprintf>
}
    8bbe:	4620      	mov	r0, r4
    8bc0:	b003      	add	sp, #12
    8bc2:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supporte");
    8bc4:	4a05      	ldr	r2, [pc, #20]	; (8bdc <cmd_supported_reset_cause+0x64>)
    8bc6:	2108      	movs	r1, #8
    8bc8:	4628      	mov	r0, r5
    8bca:	f005 f871 	bl	dcb0 <shell_fprintf>
    8bce:	e7f6      	b.n	8bbe <cmd_supported_reset_cause+0x46>
    8bd0:	00012d06 	.word	0x00012d06
    8bd4:	00012d50 	.word	0x00012d50
    8bd8:	00012d21 	.word	0x00012d21
    8bdc:	00012d69 	.word	0x00012d69

00008be0 <cmd_show_reset_cause>:
{
    8be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8be2:	4604      	mov	r4, r0
	return z_impl_hwinfo_get_reset_cause(cause);
    8be4:	a801      	add	r0, sp, #4
    8be6:	f006 fbcf 	bl	f388 <z_impl_hwinfo_get_reset_cause>
	if (res == -ENOTSUP) {
    8bea:	f110 0f86 	cmn.w	r0, #134	; 0x86
    8bee:	4605      	mov	r5, r0
    8bf0:	d105      	bne.n	8bfe <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
    8bf2:	4a0f      	ldr	r2, [pc, #60]	; (8c30 <cmd_show_reset_cause+0x50>)
    8bf4:	2101      	movs	r1, #1
		shell_print(sh, "No reset cause set");
    8bf6:	4620      	mov	r0, r4
    8bf8:	f005 f85a 	bl	dcb0 <shell_fprintf>
    8bfc:	e006      	b.n	8c0c <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
    8bfe:	b140      	cbz	r0, 8c12 <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
    8c00:	4603      	mov	r3, r0
    8c02:	4a0c      	ldr	r2, [pc, #48]	; (8c34 <cmd_show_reset_cause+0x54>)
    8c04:	2101      	movs	r1, #1
    8c06:	4620      	mov	r0, r4
    8c08:	f005 f852 	bl	dcb0 <shell_fprintf>
}
    8c0c:	4628      	mov	r0, r5
    8c0e:	b003      	add	sp, #12
    8c10:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
    8c12:	9b01      	ldr	r3, [sp, #4]
    8c14:	b14b      	cbz	r3, 8c2a <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
    8c16:	4620      	mov	r0, r4
    8c18:	4a07      	ldr	r2, [pc, #28]	; (8c38 <cmd_show_reset_cause+0x58>)
    8c1a:	2108      	movs	r1, #8
    8c1c:	f005 f848 	bl	dcb0 <shell_fprintf>
		print_all_reset_causes(sh, cause);
    8c20:	9901      	ldr	r1, [sp, #4]
    8c22:	4620      	mov	r0, r4
    8c24:	f7ff ff32 	bl	8a8c <print_all_reset_causes>
    8c28:	e7f0      	b.n	8c0c <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
    8c2a:	4a04      	ldr	r2, [pc, #16]	; (8c3c <cmd_show_reset_cause+0x5c>)
    8c2c:	2108      	movs	r1, #8
    8c2e:	e7e2      	b.n	8bf6 <cmd_show_reset_cause+0x16>
    8c30:	00012d06 	.word	0x00012d06
    8c34:	00012d7d 	.word	0x00012d7d
    8c38:	00012d9b 	.word	0x00012d9b
    8c3c:	00012dad 	.word	0x00012dad

00008c40 <cmd_clear_reset_cause>:
{
    8c40:	b538      	push	{r3, r4, r5, lr}
    8c42:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
    8c44:	f006 fbbd 	bl	f3c2 <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
    8c48:	f110 0f86 	cmn.w	r0, #134	; 0x86
    8c4c:	4604      	mov	r4, r0
    8c4e:	d107      	bne.n	8c60 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
    8c50:	4a08      	ldr	r2, [pc, #32]	; (8c74 <cmd_clear_reset_cause+0x34>)
    8c52:	2101      	movs	r1, #1
    8c54:	4628      	mov	r0, r5
    8c56:	f005 f82b 	bl	dcb0 <shell_fprintf>
    8c5a:	2400      	movs	r4, #0
}
    8c5c:	4620      	mov	r0, r4
    8c5e:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
    8c60:	2800      	cmp	r0, #0
    8c62:	d0fb      	beq.n	8c5c <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
    8c64:	4603      	mov	r3, r0
    8c66:	4a04      	ldr	r2, [pc, #16]	; (8c78 <cmd_clear_reset_cause+0x38>)
    8c68:	2101      	movs	r1, #1
    8c6a:	4628      	mov	r0, r5
    8c6c:	f005 f820 	bl	dcb0 <shell_fprintf>
		return res;
    8c70:	e7f4      	b.n	8c5c <cmd_clear_reset_cause+0x1c>
    8c72:	bf00      	nop
    8c74:	00012d06 	.word	0x00012d06
    8c78:	00012dc1 	.word	0x00012dc1

00008c7c <cmd_get_device_id>:
{
    8c7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8c80:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
    8c82:	2110      	movs	r1, #16
    8c84:	4668      	mov	r0, sp
    8c86:	f006 fb48 	bl	f31a <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
    8c8a:	f110 0f86 	cmn.w	r0, #134	; 0x86
    8c8e:	4604      	mov	r4, r0
    8c90:	d108      	bne.n	8ca4 <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
    8c92:	4a19      	ldr	r2, [pc, #100]	; (8cf8 <cmd_get_device_id+0x7c>)
    8c94:	2101      	movs	r1, #1
    8c96:	4628      	mov	r0, r5
    8c98:	f005 f80a 	bl	dcb0 <shell_fprintf>
}
    8c9c:	4620      	mov	r0, r4
    8c9e:	b004      	add	sp, #16
    8ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
    8ca4:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
    8ca6:	4603      	mov	r3, r0
	} else if (length < 0) {
    8ca8:	da05      	bge.n	8cb6 <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
    8caa:	4a14      	ldr	r2, [pc, #80]	; (8cfc <cmd_get_device_id+0x80>)
    8cac:	2101      	movs	r1, #1
    8cae:	4628      	mov	r0, r5
    8cb0:	f004 fffe 	bl	dcb0 <shell_fprintf>
		return length;
    8cb4:	e7f2      	b.n	8c9c <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    8cb6:	4a12      	ldr	r2, [pc, #72]	; (8d00 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    8cb8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8d04 <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    8cbc:	2108      	movs	r1, #8
    8cbe:	4628      	mov	r0, r5
    8cc0:	f004 fff6 	bl	dcb0 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
    8cc4:	4a10      	ldr	r2, [pc, #64]	; (8d08 <cmd_get_device_id+0x8c>)
    8cc6:	2108      	movs	r1, #8
    8cc8:	4628      	mov	r0, r5
    8cca:	f004 fff1 	bl	dcb0 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    8cce:	466e      	mov	r6, sp
    8cd0:	2700      	movs	r7, #0
    8cd2:	42a7      	cmp	r7, r4
    8cd4:	d106      	bne.n	8ce4 <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
    8cd6:	4a0d      	ldr	r2, [pc, #52]	; (8d0c <cmd_get_device_id+0x90>)
    8cd8:	2108      	movs	r1, #8
    8cda:	4628      	mov	r0, r5
    8cdc:	f004 ffe8 	bl	dcb0 <shell_fprintf>
	return 0;
    8ce0:	2400      	movs	r4, #0
    8ce2:	e7db      	b.n	8c9c <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    8ce4:	f816 3b01 	ldrb.w	r3, [r6], #1
    8ce8:	4642      	mov	r2, r8
    8cea:	2108      	movs	r1, #8
    8cec:	4628      	mov	r0, r5
    8cee:	f004 ffdf 	bl	dcb0 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    8cf2:	3701      	adds	r7, #1
    8cf4:	e7ed      	b.n	8cd2 <cmd_get_device_id+0x56>
    8cf6:	bf00      	nop
    8cf8:	00012d06 	.word	0x00012d06
    8cfc:	00012de7 	.word	0x00012de7
    8d00:	00012df3 	.word	0x00012df3
    8d04:	00012a94 	.word	0x00012a94
    8d08:	00012e00 	.word	0x00012e00
    8d0c:	00011585 	.word	0x00011585

00008d10 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    8d10:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    8d12:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    8d16:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    8d18:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    8d1a:	6002      	str	r2, [r0, #0]
}
    8d1c:	4802      	ldr	r0, [pc, #8]	; (8d28 <nrf_gpio_pin_port_decode+0x18>)
    8d1e:	bf18      	it	ne
    8d20:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    8d24:	4770      	bx	lr
    8d26:	bf00      	nop
    8d28:	50000300 	.word	0x50000300

00008d2c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    8d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    8d2e:	794b      	ldrb	r3, [r1, #5]
    8d30:	2b01      	cmp	r3, #1
    8d32:	d026      	beq.n	8d82 <uarte_nrfx_configure+0x56>
    8d34:	2b03      	cmp	r3, #3
    8d36:	d121      	bne.n	8d7c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    8d38:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8d3a:	798b      	ldrb	r3, [r1, #6]
    8d3c:	2b03      	cmp	r3, #3
    8d3e:	d11d      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    8d40:	79cc      	ldrb	r4, [r1, #7]
    8d42:	b10c      	cbz	r4, 8d48 <uarte_nrfx_configure+0x1c>
    8d44:	2c01      	cmp	r4, #1
    8d46:	d119      	bne.n	8d7c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    8d48:	790a      	ldrb	r2, [r1, #4]
    8d4a:	b112      	cbz	r2, 8d52 <uarte_nrfx_configure+0x26>
    8d4c:	2a02      	cmp	r2, #2
    8d4e:	d115      	bne.n	8d7c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    8d50:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    8d52:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    8d54:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    8d56:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    8d5a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    8d5c:	d065      	beq.n	8e2a <uarte_nrfx_configure+0xfe>
    8d5e:	d82d      	bhi.n	8dbc <uarte_nrfx_configure+0x90>
    8d60:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    8d64:	d064      	beq.n	8e30 <uarte_nrfx_configure+0x104>
    8d66:	d816      	bhi.n	8d96 <uarte_nrfx_configure+0x6a>
    8d68:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    8d6c:	d062      	beq.n	8e34 <uarte_nrfx_configure+0x108>
    8d6e:	d80a      	bhi.n	8d86 <uarte_nrfx_configure+0x5a>
    8d70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8d74:	d061      	beq.n	8e3a <uarte_nrfx_configure+0x10e>
    8d76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    8d7a:	d061      	beq.n	8e40 <uarte_nrfx_configure+0x114>
    8d7c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8d80:	e052      	b.n	8e28 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    8d82:	2600      	movs	r6, #0
    8d84:	e7d9      	b.n	8d3a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    8d86:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    8d8a:	d05c      	beq.n	8e46 <uarte_nrfx_configure+0x11a>
    8d8c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    8d90:	d1f4      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    8d92:	4b37      	ldr	r3, [pc, #220]	; (8e70 <uarte_nrfx_configure+0x144>)
    8d94:	e03c      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8d96:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    8d9a:	d057      	beq.n	8e4c <uarte_nrfx_configure+0x120>
    8d9c:	d807      	bhi.n	8dae <uarte_nrfx_configure+0x82>
    8d9e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    8da2:	d055      	beq.n	8e50 <uarte_nrfx_configure+0x124>
    8da4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    8da8:	d1e8      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    8daa:	4b32      	ldr	r3, [pc, #200]	; (8e74 <uarte_nrfx_configure+0x148>)
    8dac:	e030      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8dae:	f647 2712 	movw	r7, #31250	; 0x7a12
    8db2:	42bb      	cmp	r3, r7
    8db4:	d1e2      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    8db6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8dba:	e029      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8dbc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    8dc0:	d048      	beq.n	8e54 <uarte_nrfx_configure+0x128>
    8dc2:	d813      	bhi.n	8dec <uarte_nrfx_configure+0xc0>
    8dc4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    8dc8:	d047      	beq.n	8e5a <uarte_nrfx_configure+0x12e>
    8dca:	d809      	bhi.n	8de0 <uarte_nrfx_configure+0xb4>
    8dcc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    8dd0:	42bb      	cmp	r3, r7
    8dd2:	d044      	beq.n	8e5e <uarte_nrfx_configure+0x132>
    8dd4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    8dd8:	d1d0      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    8dda:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    8dde:	e017      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8de0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    8de4:	d1ca      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    8de6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    8dea:	e011      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8dec:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    8df0:	d038      	beq.n	8e64 <uarte_nrfx_configure+0x138>
    8df2:	d808      	bhi.n	8e06 <uarte_nrfx_configure+0xda>
    8df4:	4f20      	ldr	r7, [pc, #128]	; (8e78 <uarte_nrfx_configure+0x14c>)
    8df6:	42bb      	cmp	r3, r7
    8df8:	d037      	beq.n	8e6a <uarte_nrfx_configure+0x13e>
    8dfa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    8dfe:	d1bd      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    8e00:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    8e04:	e004      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8e06:	4f1d      	ldr	r7, [pc, #116]	; (8e7c <uarte_nrfx_configure+0x150>)
    8e08:	42bb      	cmp	r3, r7
    8e0a:	d1b7      	bne.n	8d7c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    8e0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    8e10:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    8e12:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    8e16:	1d03      	adds	r3, r0, #4
    8e18:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    8e1a:	4334      	orrs	r4, r6
    8e1c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8e1e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    8e22:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    8e26:	2000      	movs	r0, #0
}
    8e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    8e2a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    8e2e:	e7ef      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    8e30:	4b13      	ldr	r3, [pc, #76]	; (8e80 <uarte_nrfx_configure+0x154>)
    8e32:	e7ed      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    8e34:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    8e38:	e7ea      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    8e3a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    8e3e:	e7e7      	b.n	8e10 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    8e40:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    8e44:	e7e4      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    8e46:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    8e4a:	e7e1      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    8e4c:	4b0d      	ldr	r3, [pc, #52]	; (8e84 <uarte_nrfx_configure+0x158>)
    8e4e:	e7df      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    8e50:	4b0d      	ldr	r3, [pc, #52]	; (8e88 <uarte_nrfx_configure+0x15c>)
    8e52:	e7dd      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    8e54:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    8e58:	e7da      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    8e5a:	4b0c      	ldr	r3, [pc, #48]	; (8e8c <uarte_nrfx_configure+0x160>)
    8e5c:	e7d8      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    8e5e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    8e62:	e7d5      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    8e64:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    8e68:	e7d2      	b.n	8e10 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    8e6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8e6e:	e7cf      	b.n	8e10 <uarte_nrfx_configure+0xe4>
    8e70:	0013b000 	.word	0x0013b000
    8e74:	004ea000 	.word	0x004ea000
    8e78:	0003d090 	.word	0x0003d090
    8e7c:	000f4240 	.word	0x000f4240
    8e80:	00275000 	.word	0x00275000
    8e84:	0075c000 	.word	0x0075c000
    8e88:	003af000 	.word	0x003af000
    8e8c:	013a9000 	.word	0x013a9000

00008e90 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    8e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    8e92:	6906      	ldr	r6, [r0, #16]
{
    8e94:	4605      	mov	r5, r0
    8e96:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    8e98:	f006 fdef 	bl	fa7a <k_is_in_isr>
    8e9c:	b910      	cbnz	r0, 8ea4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    8e9e:	4b20      	ldr	r3, [pc, #128]	; (8f20 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	b983      	cbnz	r3, 8ec6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    8ea4:	f04f 0320 	mov.w	r3, #32
    8ea8:	f3ef 8411 	mrs	r4, BASEPRI
    8eac:	f383 8812 	msr	BASEPRI_MAX, r3
    8eb0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    8eb4:	6868      	ldr	r0, [r5, #4]
    8eb6:	f006 fb67 	bl	f588 <is_tx_ready.isra.0>
    8eba:	bb28      	cbnz	r0, 8f08 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    8ebc:	f384 8811 	msr	BASEPRI, r4
    8ec0:	f3bf 8f6f 	isb	sy
}
    8ec4:	e7ee      	b.n	8ea4 <uarte_nrfx_poll_out+0x14>
{
    8ec6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    8ec8:	6868      	ldr	r0, [r5, #4]
    8eca:	f006 fb5d 	bl	f588 <is_tx_ready.isra.0>
    8ece:	b970      	cbnz	r0, 8eee <uarte_nrfx_poll_out+0x5e>
    8ed0:	2001      	movs	r0, #1
    8ed2:	f006 fc15 	bl	f700 <nrfx_busy_wait>
    8ed6:	3c01      	subs	r4, #1
    8ed8:	d1f6      	bne.n	8ec8 <uarte_nrfx_poll_out+0x38>
    8eda:	2100      	movs	r1, #0
    8edc:	2021      	movs	r0, #33	; 0x21
    8ede:	f003 f983 	bl	c1e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    8ee2:	e7f0      	b.n	8ec6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    8ee4:	f384 8811 	msr	BASEPRI, r4
    8ee8:	f3bf 8f6f 	isb	sy
}
    8eec:	e7f5      	b.n	8eda <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    8eee:	f04f 0320 	mov.w	r3, #32
    8ef2:	f3ef 8411 	mrs	r4, BASEPRI
    8ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    8efa:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    8efe:	6868      	ldr	r0, [r5, #4]
    8f00:	f006 fb42 	bl	f588 <is_tx_ready.isra.0>
    8f04:	2800      	cmp	r0, #0
    8f06:	d0ed      	beq.n	8ee4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    8f08:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    8f0a:	2201      	movs	r2, #1
	data->char_out = c;
    8f0c:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    8f10:	6868      	ldr	r0, [r5, #4]
    8f12:	f006 fb1e 	bl	f552 <tx_start.isra.0>
	__asm__ volatile(
    8f16:	f384 8811 	msr	BASEPRI, r4
    8f1a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    8f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f20:	200021ee 	.word	0x200021ee

00008f24 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f28:	2200      	movs	r2, #0
    8f2a:	4607      	mov	r7, r0
    8f2c:	b088      	sub	sp, #32
    8f2e:	2101      	movs	r1, #1
    8f30:	2002      	movs	r0, #2
    8f32:	f7fd fcc7 	bl	68c4 <z_arm_irq_priority_set>
    8f36:	2002      	movs	r0, #2
    8f38:	f7fd fc92 	bl	6860 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    8f3c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    8f40:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    8f42:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8f46:	2300      	movs	r3, #0
    8f48:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    8f4c:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
    8f4e:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8f50:	68eb      	ldr	r3, [r5, #12]
    8f52:	1c5a      	adds	r2, r3, #1
    8f54:	d013      	beq.n	8f7e <uarte_0_init+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8f56:	a802      	add	r0, sp, #8
    8f58:	9302      	str	r3, [sp, #8]
    8f5a:	f7ff fed9 	bl	8d10 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8f5e:	9a02      	ldr	r2, [sp, #8]
    8f60:	2301      	movs	r3, #1
    8f62:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8f64:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    8f68:	68eb      	ldr	r3, [r5, #12]
    8f6a:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8f6c:	a802      	add	r0, sp, #8
    8f6e:	f7ff fecf 	bl	8d10 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8f72:	9b02      	ldr	r3, [sp, #8]
    8f74:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8f78:	2203      	movs	r2, #3
    8f7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8f7e:	6928      	ldr	r0, [r5, #16]
    8f80:	1c43      	adds	r3, r0, #1
    8f82:	d006      	beq.n	8f92 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    8f84:	7f2b      	ldrb	r3, [r5, #28]
    8f86:	2b00      	cmp	r3, #0
    8f88:	bf14      	ite	ne
    8f8a:	2103      	movne	r1, #3
    8f8c:	2100      	moveq	r1, #0
    8f8e:	f006 fad2 	bl	f536 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8f92:	696b      	ldr	r3, [r5, #20]
    8f94:	1c5a      	adds	r2, r3, #1
    8f96:	d013      	beq.n	8fc0 <uarte_0_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8f98:	a802      	add	r0, sp, #8
    8f9a:	9302      	str	r3, [sp, #8]
    8f9c:	f7ff feb8 	bl	8d10 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8fa0:	9a02      	ldr	r2, [sp, #8]
    8fa2:	2301      	movs	r3, #1
    8fa4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8fa6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    8faa:	696b      	ldr	r3, [r5, #20]
    8fac:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8fae:	a802      	add	r0, sp, #8
    8fb0:	f7ff feae 	bl	8d10 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8fb4:	9b02      	ldr	r3, [sp, #8]
    8fb6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8fba:	2203      	movs	r2, #3
    8fbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8fc0:	69a8      	ldr	r0, [r5, #24]
    8fc2:	1c43      	adds	r3, r0, #1
    8fc4:	d006      	beq.n	8fd4 <uarte_0_init+0xb0>
			nrf_gpio_cfg_input(cfg->cts_pin,
    8fc6:	7f6b      	ldrb	r3, [r5, #29]
    8fc8:	2b00      	cmp	r3, #0
    8fca:	bf14      	ite	ne
    8fcc:	2103      	movne	r1, #3
    8fce:	2100      	moveq	r1, #0
    8fd0:	f006 fab1 	bl	f536 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    8fd4:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    8fd8:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    8fda:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    8fde:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    8fe2:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
    8fe6:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
    8fe8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    8fec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    8ff0:	1d31      	adds	r1, r6, #4
    8ff2:	f7ff fe9b 	bl	8d2c <uarte_nrfx_configure>
	if (err) {
    8ff6:	4605      	mov	r5, r0
    8ff8:	2800      	cmp	r0, #0
    8ffa:	d158      	bne.n	90ae <uarte_0_init+0x18a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    8ffc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    9000:	0798      	lsls	r0, r3, #30
    9002:	d52b      	bpl.n	905c <uarte_0_init+0x138>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    9004:	f106 0016 	add.w	r0, r6, #22
    9008:	f001 f89a 	bl	a140 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    900c:	4b2a      	ldr	r3, [pc, #168]	; (90b8 <uarte_0_init+0x194>)
    900e:	4298      	cmp	r0, r3
    9010:	d011      	beq.n	9036 <uarte_0_init+0x112>
		LOG_ERR("Failed to allocate PPI Channel");
    9012:	482a      	ldr	r0, [pc, #168]	; (90bc <uarte_0_init+0x198>)
    9014:	6803      	ldr	r3, [r0, #0]
    9016:	0759      	lsls	r1, r3, #29
    9018:	d00a      	beq.n	9030 <uarte_0_init+0x10c>
    901a:	4b29      	ldr	r3, [pc, #164]	; (90c0 <uarte_0_init+0x19c>)
    901c:	9306      	str	r3, [sp, #24]
    901e:	2302      	movs	r3, #2
    9020:	9301      	str	r3, [sp, #4]
    9022:	9305      	str	r3, [sp, #20]
    9024:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9028:	462b      	mov	r3, r5
    902a:	aa05      	add	r2, sp, #20
    902c:	f004 fc5f 	bl	d8ee <z_impl_z_log_msg2_static_create>
		return -EIO;
    9030:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    9034:	e03b      	b.n	90ae <uarte_0_init+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    9036:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9038:	00c3      	lsls	r3, r0, #3
    903a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    903e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    9042:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9046:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    904a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    904e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    9052:	4a1c      	ldr	r2, [pc, #112]	; (90c4 <uarte_0_init+0x1a0>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    9054:	2301      	movs	r3, #1
    9056:	4083      	lsls	r3, r0
    9058:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    905c:	2308      	movs	r3, #8
    905e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    9062:	f898 3008 	ldrb.w	r3, [r8, #8]
    9066:	b95b      	cbnz	r3, 9080 <uarte_0_init+0x15c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9068:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    906c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    9070:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9074:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9078:	2301      	movs	r3, #1
    907a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    907e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    9080:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9084:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    9086:	bf5c      	itt	pl
    9088:	f44f 7280 	movpl.w	r2, #256	; 0x100
    908c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9090:	06db      	lsls	r3, r3, #27
    9092:	bf44      	itt	mi
    9094:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    9098:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    909c:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    909e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    90a0:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    90a4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90a8:	2301      	movs	r3, #1
    90aa:	60a3      	str	r3, [r4, #8]
    90ac:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    90ae:	4628      	mov	r0, r5
    90b0:	b008      	add	sp, #32
    90b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90b6:	bf00      	nop
    90b8:	0bad0000 	.word	0x0bad0000
    90bc:	20000244 	.word	0x20000244
    90c0:	00012ec6 	.word	0x00012ec6
    90c4:	4001f000 	.word	0x4001f000

000090c8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    90c8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    90ca:	2301      	movs	r3, #1
    90cc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90ce:	4a11      	ldr	r2, [pc, #68]	; (9114 <compare_int_lock+0x4c>)
    90d0:	f3bf 8f5b 	dmb	ish
    90d4:	43dc      	mvns	r4, r3
    90d6:	e852 1f00 	ldrex	r1, [r2]
    90da:	ea01 0c04 	and.w	ip, r1, r4
    90de:	e842 ce00 	strex	lr, ip, [r2]
    90e2:	f1be 0f00 	cmp.w	lr, #0
    90e6:	d1f6      	bne.n	90d6 <compare_int_lock+0xe>
    90e8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    90ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    90f0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    90f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    90f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    90fc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    9100:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9104:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    9108:	420b      	tst	r3, r1
}
    910a:	bf14      	ite	ne
    910c:	2001      	movne	r0, #1
    910e:	2000      	moveq	r0, #0
    9110:	bd10      	pop	{r4, pc}
    9112:	bf00      	nop
    9114:	20001eec 	.word	0x20001eec

00009118 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    9118:	4919      	ldr	r1, [pc, #100]	; (9180 <sys_clock_timeout_handler+0x68>)
{
    911a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    911c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    911e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    9122:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    9124:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    9128:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    912c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    912e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    9132:	d222      	bcs.n	917a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    9134:	4b13      	ldr	r3, [pc, #76]	; (9184 <sys_clock_timeout_handler+0x6c>)
    9136:	681b      	ldr	r3, [r3, #0]
    9138:	0a1a      	lsrs	r2, r3, #8
    913a:	061b      	lsls	r3, r3, #24
    913c:	195e      	adds	r6, r3, r5
    913e:	4b12      	ldr	r3, [pc, #72]	; (9188 <sys_clock_timeout_handler+0x70>)
    9140:	f142 0700 	adc.w	r7, r2, #0
    9144:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    9148:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    914a:	f003 f9c3 	bl	c4d4 <sys_clock_announce>
    return p_reg->CC[ch];
    914e:	00a3      	lsls	r3, r4, #2
    9150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9154:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9158:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    915c:	42aa      	cmp	r2, r5
    915e:	d10b      	bne.n	9178 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    9160:	b91e      	cbnz	r6, 916a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    9162:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    9166:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    916a:	4b08      	ldr	r3, [pc, #32]	; (918c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    916c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    9170:	fa00 f404 	lsl.w	r4, r0, r4
    9174:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    9178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    917a:	2600      	movs	r6, #0
    917c:	e7e5      	b.n	914a <sys_clock_timeout_handler+0x32>
    917e:	bf00      	nop
    9180:	20000d50 	.word	0x20000d50
    9184:	20001ef0 	.word	0x20001ef0
    9188:	20000d38 	.word	0x20000d38
    918c:	40011000 	.word	0x40011000

00009190 <compare_int_unlock>:
	if (key) {
    9190:	b319      	cbz	r1, 91da <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9192:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    9196:	2301      	movs	r3, #1
    9198:	4a10      	ldr	r2, [pc, #64]	; (91dc <compare_int_unlock+0x4c>)
    919a:	4083      	lsls	r3, r0
    919c:	e852 1f00 	ldrex	r1, [r2]
    91a0:	4319      	orrs	r1, r3
    91a2:	e842 1c00 	strex	ip, r1, [r2]
    91a6:	f1bc 0f00 	cmp.w	ip, #0
    91aa:	d1f7      	bne.n	919c <compare_int_unlock+0xc>
    91ac:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    91b0:	4a0b      	ldr	r2, [pc, #44]	; (91e0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    91b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    91b6:	4083      	lsls	r3, r0
    91b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    91bc:	4b09      	ldr	r3, [pc, #36]	; (91e4 <compare_int_unlock+0x54>)
    91be:	f3bf 8f5b 	dmb	ish
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    91c8:	fa23 f000 	lsr.w	r0, r3, r0
    91cc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    91ce:	bf42      	ittt	mi
    91d0:	4b05      	ldrmi	r3, [pc, #20]	; (91e8 <compare_int_unlock+0x58>)
    91d2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    91d6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    91da:	4770      	bx	lr
    91dc:	20001eec 	.word	0x20001eec
    91e0:	40011000 	.word	0x40011000
    91e4:	20001ee8 	.word	0x20001ee8
    91e8:	e000e100 	.word	0xe000e100

000091ec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    91ec:	4b0d      	ldr	r3, [pc, #52]	; (9224 <z_nrf_rtc_timer_read+0x38>)
    91ee:	6818      	ldr	r0, [r3, #0]
    91f0:	0a01      	lsrs	r1, r0, #8
    91f2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    91f4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    91f8:	4b0b      	ldr	r3, [pc, #44]	; (9228 <z_nrf_rtc_timer_read+0x3c>)
    91fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    91fe:	1818      	adds	r0, r3, r0
    9200:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    9204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    9208:	d20a      	bcs.n	9220 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    920a:	4b08      	ldr	r3, [pc, #32]	; (922c <z_nrf_rtc_timer_read+0x40>)
    920c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9210:	4290      	cmp	r0, r2
    9212:	eb71 0303 	sbcs.w	r3, r1, r3
    9216:	d203      	bcs.n	9220 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    9218:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    921c:	f141 0100 	adc.w	r1, r1, #0
}
    9220:	4770      	bx	lr
    9222:	bf00      	nop
    9224:	20001ef0 	.word	0x20001ef0
    9228:	40011000 	.word	0x40011000
    922c:	20000d38 	.word	0x20000d38

00009230 <compare_set>:
{
    9230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9234:	b085      	sub	sp, #20
    9236:	4616      	mov	r6, r2
    9238:	4698      	mov	r8, r3
    923a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    923c:	f7ff ff44 	bl	90c8 <compare_int_lock>
    9240:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    9242:	f7ff ffd3 	bl	91ec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    9246:	42b0      	cmp	r0, r6
    9248:	eb71 0308 	sbcs.w	r3, r1, r8
    924c:	d278      	bcs.n	9340 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    924e:	4b46      	ldr	r3, [pc, #280]	; (9368 <compare_set+0x138>)
    9250:	1a30      	subs	r0, r6, r0
    9252:	eb68 0101 	sbc.w	r1, r8, r1
    9256:	4298      	cmp	r0, r3
    9258:	f171 0300 	sbcs.w	r3, r1, #0
    925c:	f080 8081 	bcs.w	9362 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    9260:	4b42      	ldr	r3, [pc, #264]	; (936c <compare_set+0x13c>)
    9262:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    9266:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    926a:	45d8      	cmp	r8, fp
    926c:	bf08      	it	eq
    926e:	4556      	cmpeq	r6, sl
    9270:	d051      	beq.n	9316 <compare_set+0xe6>
    9272:	ea4f 0985 	mov.w	r9, r5, lsl #2
    9276:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    927a:	f105 0750 	add.w	r7, r5, #80	; 0x50
    927e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    9282:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9284:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    9288:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    928c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    928e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    9292:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9296:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    9298:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    929c:	4b34      	ldr	r3, [pc, #208]	; (9370 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    929e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    92a2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    92a4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    92a8:	1a40      	subs	r0, r0, r1
    92aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    92ae:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    92b2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    92b4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    92b8:	d107      	bne.n	92ca <compare_set+0x9a>
    92ba:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    92be:	2013      	movs	r0, #19
    92c0:	f006 fe28 	bl	ff14 <z_impl_k_busy_wait>
    92c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    92c8:	4b29      	ldr	r3, [pc, #164]	; (9370 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    92ca:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    92ce:	eba4 000c 	sub.w	r0, r4, ip
    92d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    92d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    92da:	bf88      	it	hi
    92dc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    92de:	2000      	movs	r0, #0
    92e0:	6038      	str	r0, [r7, #0]
    92e2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    92e4:	9801      	ldr	r0, [sp, #4]
    92e6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    92ea:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    92ee:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    92f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    92f6:	4281      	cmp	r1, r0
    92f8:	d006      	beq.n	9308 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    92fa:	1a20      	subs	r0, r4, r0
    92fc:	3802      	subs	r0, #2
    92fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    9302:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9306:	d819      	bhi.n	933c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    9308:	1aa4      	subs	r4, r4, r2
    930a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    930e:	eb14 0a06 	adds.w	sl, r4, r6
    9312:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    9316:	4915      	ldr	r1, [pc, #84]	; (936c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    9318:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    931a:	012b      	lsls	r3, r5, #4
    931c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    9320:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    9324:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    9326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9328:	6053      	str	r3, [r2, #4]
	return ret;
    932a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    932c:	4628      	mov	r0, r5
    932e:	9900      	ldr	r1, [sp, #0]
    9330:	f7ff ff2e 	bl	9190 <compare_int_unlock>
}
    9334:	4620      	mov	r0, r4
    9336:	b005      	add	sp, #20
    9338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    933c:	4620      	mov	r0, r4
    933e:	e7b1      	b.n	92a4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    9340:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9342:	4a0c      	ldr	r2, [pc, #48]	; (9374 <compare_set+0x144>)
    9344:	f3bf 8f5b 	dmb	ish
    9348:	40ab      	lsls	r3, r5
    934a:	e852 1f00 	ldrex	r1, [r2]
    934e:	4319      	orrs	r1, r3
    9350:	e842 1000 	strex	r0, r1, [r2]
    9354:	2800      	cmp	r0, #0
    9356:	d1f8      	bne.n	934a <compare_set+0x11a>
    9358:	f3bf 8f5b 	dmb	ish
    935c:	46b2      	mov	sl, r6
    935e:	46c3      	mov	fp, r8
    9360:	e7d9      	b.n	9316 <compare_set+0xe6>
			return -EINVAL;
    9362:	f06f 0415 	mvn.w	r4, #21
    9366:	e7e1      	b.n	932c <compare_set+0xfc>
    9368:	01000001 	.word	0x01000001
    936c:	20000d40 	.word	0x20000d40
    9370:	40011000 	.word	0x40011000
    9374:	20001ee8 	.word	0x20001ee8

00009378 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    9378:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    937a:	4b19      	ldr	r3, [pc, #100]	; (93e0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    937c:	4d19      	ldr	r5, [pc, #100]	; (93e4 <sys_clock_driver_init+0x6c>)
    937e:	2400      	movs	r4, #0
    9380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9388:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    938c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    9390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9394:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9398:	4b13      	ldr	r3, [pc, #76]	; (93e8 <sys_clock_driver_init+0x70>)
    939a:	2602      	movs	r6, #2
    939c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    93a0:	2101      	movs	r1, #1
    93a2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    93a6:	2011      	movs	r0, #17
    93a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    93ac:	4622      	mov	r2, r4
    93ae:	f7fd fa89 	bl	68c4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    93b2:	2011      	movs	r0, #17
    93b4:	f7fd fa54 	bl	6860 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    93b8:	4a0c      	ldr	r2, [pc, #48]	; (93ec <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    93ba:	2301      	movs	r3, #1
    93bc:	60ab      	str	r3, [r5, #8]
    93be:	602b      	str	r3, [r5, #0]
    93c0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    93c2:	4b0b      	ldr	r3, [pc, #44]	; (93f0 <sys_clock_driver_init+0x78>)
    93c4:	4a0b      	ldr	r2, [pc, #44]	; (93f4 <sys_clock_driver_init+0x7c>)
    93c6:	9300      	str	r3, [sp, #0]
    93c8:	9401      	str	r4, [sp, #4]
    93ca:	2300      	movs	r3, #0
    93cc:	4620      	mov	r0, r4
    93ce:	f7ff ff2f 	bl	9230 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    93d2:	4630      	mov	r0, r6
    93d4:	f7ff f984 	bl	86e0 <z_nrf_clock_control_lf_on>

	return 0;
}
    93d8:	4620      	mov	r0, r4
    93da:	b002      	add	sp, #8
    93dc:	bd70      	pop	{r4, r5, r6, pc}
    93de:	bf00      	nop
    93e0:	20000d40 	.word	0x20000d40
    93e4:	40011000 	.word	0x40011000
    93e8:	e000e100 	.word	0xe000e100
    93ec:	20001eec 	.word	0x20001eec
    93f0:	00009119 	.word	0x00009119
    93f4:	007fffff 	.word	0x007fffff

000093f8 <rtc_nrf_isr>:
{
    93f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    93fc:	4c35      	ldr	r4, [pc, #212]	; (94d4 <rtc_nrf_isr+0xdc>)
    93fe:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    9402:	079a      	lsls	r2, r3, #30
    9404:	d50b      	bpl.n	941e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9406:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    940a:	b143      	cbz	r3, 941e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    940c:	4a32      	ldr	r2, [pc, #200]	; (94d8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    940e:	2300      	movs	r3, #0
    9410:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    9414:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    9418:	6813      	ldr	r3, [r2, #0]
    941a:	3301      	adds	r3, #1
    941c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    941e:	f04f 0320 	mov.w	r3, #32
    9422:	f3ef 8211 	mrs	r2, BASEPRI
    9426:	f383 8812 	msr	BASEPRI_MAX, r3
    942a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    942e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    9432:	03db      	lsls	r3, r3, #15
    9434:	d512      	bpl.n	945c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9436:	f3bf 8f5b 	dmb	ish
    943a:	4b28      	ldr	r3, [pc, #160]	; (94dc <rtc_nrf_isr+0xe4>)
    943c:	e853 1f00 	ldrex	r1, [r3]
    9440:	f021 0001 	bic.w	r0, r1, #1
    9444:	e843 0600 	strex	r6, r0, [r3]
    9448:	2e00      	cmp	r6, #0
    944a:	d1f7      	bne.n	943c <rtc_nrf_isr+0x44>
    944c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    9450:	2900      	cmp	r1, #0
    9452:	d136      	bne.n	94c2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9454:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    9458:	2b00      	cmp	r3, #0
    945a:	d132      	bne.n	94c2 <rtc_nrf_isr+0xca>
{
    945c:	2300      	movs	r3, #0
	__asm__ volatile(
    945e:	f382 8811 	msr	BASEPRI, r2
    9462:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    9466:	b34b      	cbz	r3, 94bc <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    9468:	f7ff fec0 	bl	91ec <z_nrf_rtc_timer_read>
	__asm__ volatile(
    946c:	f04f 0320 	mov.w	r3, #32
    9470:	f3ef 8c11 	mrs	ip, BASEPRI
    9474:	f383 8812 	msr	BASEPRI_MAX, r3
    9478:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    947c:	4b18      	ldr	r3, [pc, #96]	; (94e0 <rtc_nrf_isr+0xe8>)
    947e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    9482:	42b0      	cmp	r0, r6
    9484:	eb71 0207 	sbcs.w	r2, r1, r7
    9488:	f04f 0200 	mov.w	r2, #0
    948c:	d320      	bcc.n	94d0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    948e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9492:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    9496:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    949a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    949e:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    94a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    94a4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    94a8:	f38c 8811 	msr	BASEPRI, ip
    94ac:	f3bf 8f6f 	isb	sy
		if (handler) {
    94b0:	b121      	cbz	r1, 94bc <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    94b2:	9500      	str	r5, [sp, #0]
    94b4:	4632      	mov	r2, r6
    94b6:	463b      	mov	r3, r7
    94b8:	2000      	movs	r0, #0
    94ba:	4788      	blx	r1
}
    94bc:	b003      	add	sp, #12
    94be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    94c2:	2300      	movs	r3, #0
    94c4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    94c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    94cc:	2301      	movs	r3, #1
}
    94ce:	e7c6      	b.n	945e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    94d0:	4611      	mov	r1, r2
    94d2:	e7e9      	b.n	94a8 <rtc_nrf_isr+0xb0>
    94d4:	40011000 	.word	0x40011000
    94d8:	20001ef0 	.word	0x20001ef0
    94dc:	20001ee8 	.word	0x20001ee8
    94e0:	20000d40 	.word	0x20000d40

000094e4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    94e4:	1c43      	adds	r3, r0, #1
{
    94e6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    94e8:	d021      	beq.n	952e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    94ea:	2801      	cmp	r0, #1
    94ec:	dd21      	ble.n	9532 <sys_clock_set_timeout+0x4e>
    94ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    94f2:	da20      	bge.n	9536 <sys_clock_set_timeout+0x52>
    94f4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    94f6:	f7ff fe79 	bl	91ec <z_nrf_rtc_timer_read>
    94fa:	4b10      	ldr	r3, [pc, #64]	; (953c <sys_clock_set_timeout+0x58>)
    94fc:	e9d3 1300 	ldrd	r1, r3, [r3]
    9500:	1a40      	subs	r0, r0, r1
		ticks = 0;
    9502:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9506:	bf28      	it	cs
    9508:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    950a:	3001      	adds	r0, #1
    950c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    950e:	480c      	ldr	r0, [pc, #48]	; (9540 <sys_clock_set_timeout+0x5c>)
    9510:	4282      	cmp	r2, r0
    9512:	bf28      	it	cs
    9514:	4602      	movcs	r2, r0
    9516:	1852      	adds	r2, r2, r1
    9518:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    951c:	4909      	ldr	r1, [pc, #36]	; (9544 <sys_clock_set_timeout+0x60>)
    951e:	9001      	str	r0, [sp, #4]
    9520:	9100      	str	r1, [sp, #0]
    9522:	f143 0300 	adc.w	r3, r3, #0
    9526:	f7ff fe83 	bl	9230 <compare_set>
}
    952a:	b002      	add	sp, #8
    952c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    952e:	4804      	ldr	r0, [pc, #16]	; (9540 <sys_clock_set_timeout+0x5c>)
    9530:	e7e0      	b.n	94f4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    9532:	2400      	movs	r4, #0
    9534:	e7df      	b.n	94f6 <sys_clock_set_timeout+0x12>
    9536:	4c02      	ldr	r4, [pc, #8]	; (9540 <sys_clock_set_timeout+0x5c>)
    9538:	e7dd      	b.n	94f6 <sys_clock_set_timeout+0x12>
    953a:	bf00      	nop
    953c:	20000d50 	.word	0x20000d50
    9540:	007fffff 	.word	0x007fffff
    9544:	00009119 	.word	0x00009119

00009548 <sys_clock_elapsed>:
{
    9548:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    954a:	f7ff fe4f 	bl	91ec <z_nrf_rtc_timer_read>
    954e:	4b02      	ldr	r3, [pc, #8]	; (9558 <sys_clock_elapsed+0x10>)
    9550:	681b      	ldr	r3, [r3, #0]
}
    9552:	1ac0      	subs	r0, r0, r3
    9554:	bd08      	pop	{r3, pc}
    9556:	bf00      	nop
    9558:	20000d50 	.word	0x20000d50

0000955c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    955c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9560:	4905      	ldr	r1, [pc, #20]	; (9578 <__NVIC_SystemReset+0x1c>)
    9562:	4b06      	ldr	r3, [pc, #24]	; (957c <__NVIC_SystemReset+0x20>)
    9564:	68ca      	ldr	r2, [r1, #12]
    9566:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    956a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    956c:	60cb      	str	r3, [r1, #12]
    956e:	f3bf 8f4f 	dsb	sy
    __NOP();
    9572:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    9574:	e7fd      	b.n	9572 <__NVIC_SystemReset+0x16>
    9576:	bf00      	nop
    9578:	e000ed00 	.word	0xe000ed00
    957c:	05fa0004 	.word	0x05fa0004

00009580 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9584:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9588:	2a08      	cmp	r2, #8
    958a:	d106      	bne.n	959a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    958c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    9590:	2b05      	cmp	r3, #5
    9592:	d802      	bhi.n	959a <nrf52_errata_103+0x1a>
    9594:	4a02      	ldr	r2, [pc, #8]	; (95a0 <nrf52_errata_103+0x20>)
    9596:	5cd0      	ldrb	r0, [r2, r3]
    9598:	4770      	bx	lr
        return false;
    959a:	2000      	movs	r0, #0
}
    959c:	4770      	bx	lr
    959e:	bf00      	nop
    95a0:	00012f02 	.word	0x00012f02

000095a4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    95a4:	4a02      	ldr	r2, [pc, #8]	; (95b0 <nvmc_wait+0xc>)
    95a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    95aa:	2b00      	cmp	r3, #0
    95ac:	d0fb      	beq.n	95a6 <nvmc_wait+0x2>
}
    95ae:	4770      	bx	lr
    95b0:	4001e000 	.word	0x4001e000

000095b4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    95b4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    95b6:	f006 f899 	bl	f6ec <nrf52_errata_136>
    95ba:	b140      	cbz	r0, 95ce <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    95bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    95c0:	2200      	movs	r2, #0
    95c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    95c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    95ca:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    95ce:	f006 f88d 	bl	f6ec <nrf52_errata_136>
    95d2:	2800      	cmp	r0, #0
    95d4:	d046      	beq.n	9664 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    95d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    95da:	4b65      	ldr	r3, [pc, #404]	; (9770 <SystemInit+0x1bc>)
    95dc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    95e0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    95e4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    95e8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    95ec:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    95f0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    95f4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    95f8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    95fc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    9600:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    9604:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9608:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    960c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    9610:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    9614:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    9618:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    961c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    9620:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    9624:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    9628:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    962c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    9630:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    9634:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    9638:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    963c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    9640:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    9644:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    9648:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    964c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    9650:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    9654:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    9658:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    965c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    9660:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    9664:	f7ff ff8c 	bl	9580 <nrf52_errata_103>
    9668:	b118      	cbz	r0, 9672 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    966a:	4b42      	ldr	r3, [pc, #264]	; (9774 <SystemInit+0x1c0>)
    966c:	4a42      	ldr	r2, [pc, #264]	; (9778 <SystemInit+0x1c4>)
    966e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    9672:	f7ff ff85 	bl	9580 <nrf52_errata_103>
    9676:	b118      	cbz	r0, 9680 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    9678:	4b40      	ldr	r3, [pc, #256]	; (977c <SystemInit+0x1c8>)
    967a:	22fb      	movs	r2, #251	; 0xfb
    967c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    9680:	f7ff ff7e 	bl	9580 <nrf52_errata_103>
    9684:	b170      	cbz	r0, 96a4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    9686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    968a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    968e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    9692:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    9696:	f022 020f 	bic.w	r2, r2, #15
    969a:	f003 030f 	and.w	r3, r3, #15
    969e:	4313      	orrs	r3, r2
    96a0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    96a4:	f7ff ff6c 	bl	9580 <nrf52_errata_103>
    96a8:	b120      	cbz	r0, 96b4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    96aa:	4b35      	ldr	r3, [pc, #212]	; (9780 <SystemInit+0x1cc>)
    96ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    96b0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    96b4:	f006 f81a 	bl	f6ec <nrf52_errata_136>
    96b8:	b148      	cbz	r0, 96ce <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    96ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    96be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    96c2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    96c4:	bf44      	itt	mi
    96c6:	f06f 0201 	mvnmi.w	r2, #1
    96ca:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    96ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    96d2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    96d6:	2a08      	cmp	r2, #8
    96d8:	d10e      	bne.n	96f8 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    96da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    96de:	2b05      	cmp	r3, #5
    96e0:	d802      	bhi.n	96e8 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    96e2:	4a28      	ldr	r2, [pc, #160]	; (9784 <SystemInit+0x1d0>)
    96e4:	5cd3      	ldrb	r3, [r2, r3]
    96e6:	b13b      	cbz	r3, 96f8 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    96e8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    96ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    96f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    96f4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    96f8:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    96fc:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    9700:	07db      	lsls	r3, r3, #31
    9702:	d514      	bpl.n	972e <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9704:	4820      	ldr	r0, [pc, #128]	; (9788 <SystemInit+0x1d4>)
    9706:	2301      	movs	r3, #1
    9708:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    970c:	f7ff ff4a 	bl	95a4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    9710:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    9714:	f023 0301 	bic.w	r3, r3, #1
    9718:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
    971c:	f7ff ff42 	bl	95a4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9720:	2300      	movs	r3, #0
    9722:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    9726:	f7ff ff3d 	bl	95a4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    972a:	f7ff ff17 	bl	955c <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    972e:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    9732:	2b00      	cmp	r3, #0
    9734:	db03      	blt.n	973e <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    9736:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    973a:	2b00      	cmp	r3, #0
    973c:	da14      	bge.n	9768 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    973e:	4912      	ldr	r1, [pc, #72]	; (9788 <SystemInit+0x1d4>)
    9740:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9742:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9746:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    974a:	2412      	movs	r4, #18
    nvmc_wait();
    974c:	f7ff ff2a 	bl	95a4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9750:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    9754:	f7ff ff26 	bl	95a4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    9758:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    975c:	f7ff ff22 	bl	95a4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9760:	2300      	movs	r3, #0
    9762:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    9766:	e7de      	b.n	9726 <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    9768:	4b08      	ldr	r3, [pc, #32]	; (978c <SystemInit+0x1d8>)
    976a:	4a09      	ldr	r2, [pc, #36]	; (9790 <SystemInit+0x1dc>)
    976c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    976e:	bd10      	pop	{r4, pc}
    9770:	4000c000 	.word	0x4000c000
    9774:	40005000 	.word	0x40005000
    9778:	00038148 	.word	0x00038148
    977c:	4000f000 	.word	0x4000f000
    9780:	40029000 	.word	0x40029000
    9784:	00012efc 	.word	0x00012efc
    9788:	4001e000 	.word	0x4001e000
    978c:	2000017c 	.word	0x2000017c
    9790:	03d09000 	.word	0x03d09000

00009794 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    9794:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    9796:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    9798:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    979a:	fab2 f382 	clz	r3, r2
    979e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    97a2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    97a4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    97a6:	d014      	beq.n	97d2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    97a8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    97ac:	fa05 f303 	lsl.w	r3, r5, r3
    97b0:	ea22 0303 	bic.w	r3, r2, r3
    97b4:	e850 6f00 	ldrex	r6, [r0]
    97b8:	4296      	cmp	r6, r2
    97ba:	d104      	bne.n	97c6 <nrfx_flag32_alloc+0x32>
    97bc:	e840 3c00 	strex	ip, r3, [r0]
    97c0:	f1bc 0f00 	cmp.w	ip, #0
    97c4:	d1f6      	bne.n	97b4 <nrfx_flag32_alloc+0x20>
    97c6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    97ca:	d1e5      	bne.n	9798 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    97cc:	4802      	ldr	r0, [pc, #8]	; (97d8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    97ce:	700c      	strb	r4, [r1, #0]
}
    97d0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    97d2:	4802      	ldr	r0, [pc, #8]	; (97dc <nrfx_flag32_alloc+0x48>)
    97d4:	e7fc      	b.n	97d0 <nrfx_flag32_alloc+0x3c>
    97d6:	bf00      	nop
    97d8:	0bad0000 	.word	0x0bad0000
    97dc:	0bad0002 	.word	0x0bad0002

000097e0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    97e0:	6803      	ldr	r3, [r0, #0]
    97e2:	40cb      	lsrs	r3, r1
    97e4:	07db      	lsls	r3, r3, #31
{
    97e6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    97e8:	d415      	bmi.n	9816 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    97ea:	2301      	movs	r3, #1
    97ec:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    97f0:	6803      	ldr	r3, [r0, #0]
    97f2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    97f6:	ea41 0203 	orr.w	r2, r1, r3
    97fa:	e850 4f00 	ldrex	r4, [r0]
    97fe:	429c      	cmp	r4, r3
    9800:	d104      	bne.n	980c <nrfx_flag32_free+0x2c>
    9802:	e840 2c00 	strex	ip, r2, [r0]
    9806:	f1bc 0f00 	cmp.w	ip, #0
    980a:	d1f6      	bne.n	97fa <nrfx_flag32_free+0x1a>
    980c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    9810:	d1ee      	bne.n	97f0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    9812:	4802      	ldr	r0, [pc, #8]	; (981c <nrfx_flag32_free+0x3c>)
}
    9814:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    9816:	4802      	ldr	r0, [pc, #8]	; (9820 <nrfx_flag32_free+0x40>)
    9818:	e7fc      	b.n	9814 <nrfx_flag32_free+0x34>
    981a:	bf00      	nop
    981c:	0bad0000 	.word	0x0bad0000
    9820:	0bad0004 	.word	0x0bad0004

00009824 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    9824:	4b04      	ldr	r3, [pc, #16]	; (9838 <nrfx_clock_init+0x14>)
    9826:	791a      	ldrb	r2, [r3, #4]
    9828:	b922      	cbnz	r2, 9834 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    982a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    982c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    982e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9830:	4802      	ldr	r0, [pc, #8]	; (983c <nrfx_clock_init+0x18>)
    9832:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    9834:	4802      	ldr	r0, [pc, #8]	; (9840 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9836:	4770      	bx	lr
    9838:	20001ef4 	.word	0x20001ef4
    983c:	0bad0000 	.word	0x0bad0000
    9840:	0bad000c 	.word	0x0bad000c

00009844 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    9844:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9846:	2000      	movs	r0, #0
    9848:	f7fd f82e 	bl	68a8 <arch_irq_is_enabled>
    984c:	b908      	cbnz	r0, 9852 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    984e:	f7fd f807 	bl	6860 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    9852:	4b02      	ldr	r3, [pc, #8]	; (985c <nrfx_clock_enable+0x18>)
    9854:	2201      	movs	r2, #1
    9856:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    9858:	bd08      	pop	{r3, pc}
    985a:	bf00      	nop
    985c:	200021e8 	.word	0x200021e8

00009860 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    9860:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9862:	b110      	cbz	r0, 986a <nrfx_clock_stop+0xa>
    9864:	2801      	cmp	r0, #1
    9866:	d017      	beq.n	9898 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    9868:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    986a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    986e:	2302      	movs	r3, #2
    9870:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9874:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    9878:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    987c:	2301      	movs	r3, #1
    987e:	60e3      	str	r3, [r4, #12]
    9880:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9884:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    9888:	03db      	lsls	r3, r3, #15
    988a:	d5ed      	bpl.n	9868 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    988c:	2001      	movs	r0, #1
    988e:	f005 ff37 	bl	f700 <nrfx_busy_wait>
    9892:	3d01      	subs	r5, #1
    9894:	d1f6      	bne.n	9884 <nrfx_clock_stop+0x24>
    9896:	e7e7      	b.n	9868 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    9898:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    989c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    989e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98a2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    98a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98aa:	6060      	str	r0, [r4, #4]
    98ac:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    98b0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    98b4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    98b8:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    98ba:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    98be:	d505      	bpl.n	98cc <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    98c0:	b123      	cbz	r3, 98cc <nrfx_clock_stop+0x6c>
    98c2:	2001      	movs	r0, #1
    98c4:	f005 ff1c 	bl	f700 <nrfx_busy_wait>
    98c8:	3d01      	subs	r5, #1
    98ca:	d1f1      	bne.n	98b0 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    98cc:	4b01      	ldr	r3, [pc, #4]	; (98d4 <nrfx_clock_stop+0x74>)
    98ce:	2200      	movs	r2, #0
    98d0:	715a      	strb	r2, [r3, #5]
    98d2:	e7c9      	b.n	9868 <nrfx_clock_stop+0x8>
    98d4:	20001ef4 	.word	0x20001ef4

000098d8 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    98d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    98dc:	b510      	push	{r4, lr}
    98de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    98e2:	b16a      	cbz	r2, 9900 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98e4:	2200      	movs	r2, #0
    98e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    98ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    98ee:	2201      	movs	r2, #1
    98f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    98f4:	4b11      	ldr	r3, [pc, #68]	; (993c <nrfx_clock_irq_handler+0x64>)
    98f6:	7958      	ldrb	r0, [r3, #5]
    98f8:	b910      	cbnz	r0, 9900 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    98fa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    98fc:	681b      	ldr	r3, [r3, #0]
    98fe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9904:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9908:	b172      	cbz	r2, 9928 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    990a:	2200      	movs	r2, #0
    990c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9910:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9914:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9918:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    991c:	0792      	lsls	r2, r2, #30
    991e:	d104      	bne.n	992a <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9920:	2201      	movs	r2, #1
    9922:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9926:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9928:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    992a:	2202      	movs	r2, #2
    992c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9930:	4b02      	ldr	r3, [pc, #8]	; (993c <nrfx_clock_irq_handler+0x64>)
}
    9932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9936:	681b      	ldr	r3, [r3, #0]
    9938:	2001      	movs	r0, #1
    993a:	4718      	bx	r3
    993c:	20001ef4 	.word	0x20001ef4

00009940 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    9940:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    9942:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9946:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    9948:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    994a:	6002      	str	r2, [r0, #0]
}
    994c:	4802      	ldr	r0, [pc, #8]	; (9958 <nrf_gpio_pin_port_decode+0x18>)
    994e:	bf18      	it	ne
    9950:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    9954:	4770      	bx	lr
    9956:	bf00      	nop
    9958:	50000300 	.word	0x50000300

0000995c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    995c:	4b03      	ldr	r3, [pc, #12]	; (996c <pin_in_use_by_te+0x10>)
    995e:	3008      	adds	r0, #8
    9960:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9964:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9968:	4770      	bx	lr
    996a:	bf00      	nop
    996c:	20000180 	.word	0x20000180

00009970 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    9970:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9972:	f100 0308 	add.w	r3, r0, #8
    9976:	4c0c      	ldr	r4, [pc, #48]	; (99a8 <call_handler+0x38>)
    9978:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    997c:	05da      	lsls	r2, r3, #23
{
    997e:	4605      	mov	r5, r0
    9980:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9982:	d507      	bpl.n	9994 <call_handler+0x24>
    9984:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    9988:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    998c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    9990:	6852      	ldr	r2, [r2, #4]
    9992:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    9994:	68a3      	ldr	r3, [r4, #8]
    9996:	b12b      	cbz	r3, 99a4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    9998:	68e2      	ldr	r2, [r4, #12]
    999a:	4631      	mov	r1, r6
    999c:	4628      	mov	r0, r5
    }
}
    999e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    99a2:	4718      	bx	r3
}
    99a4:	bd70      	pop	{r4, r5, r6, pc}
    99a6:	bf00      	nop
    99a8:	20000180 	.word	0x20000180

000099ac <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    99ac:	4a12      	ldr	r2, [pc, #72]	; (99f8 <release_handler+0x4c>)
    99ae:	3008      	adds	r0, #8
{
    99b0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    99b2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    99b6:	05d9      	lsls	r1, r3, #23
    99b8:	d51b      	bpl.n	99f2 <release_handler+0x46>
    99ba:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    99be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    99c2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    99c6:	f102 0410 	add.w	r4, r2, #16
    99ca:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    99cc:	f834 3b02 	ldrh.w	r3, [r4], #2
    99d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    99d4:	d003      	beq.n	99de <release_handler+0x32>
    99d6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    99da:	4299      	cmp	r1, r3
    99dc:	d009      	beq.n	99f2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    99de:	3001      	adds	r0, #1
    99e0:	2830      	cmp	r0, #48	; 0x30
    99e2:	d1f3      	bne.n	99cc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    99e4:	2300      	movs	r3, #0
    99e6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    99ea:	4804      	ldr	r0, [pc, #16]	; (99fc <release_handler+0x50>)
}
    99ec:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    99ee:	f7ff bef7 	b.w	97e0 <nrfx_flag32_free>
}
    99f2:	bc10      	pop	{r4}
    99f4:	4770      	bx	lr
    99f6:	bf00      	nop
    99f8:	20000180 	.word	0x20000180
    99fc:	200001f4 	.word	0x200001f4

00009a00 <pin_handler_trigger_uninit>:
{
    9a00:	b538      	push	{r3, r4, r5, lr}
    9a02:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    9a04:	f7ff ffaa 	bl	995c <pin_in_use_by_te>
    9a08:	4c09      	ldr	r4, [pc, #36]	; (9a30 <pin_handler_trigger_uninit+0x30>)
    9a0a:	f102 0508 	add.w	r5, r2, #8
    9a0e:	b140      	cbz	r0, 9a22 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9a10:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    9a14:	4907      	ldr	r1, [pc, #28]	; (9a34 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    9a16:	0b5b      	lsrs	r3, r3, #13
    9a18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    9a1c:	2000      	movs	r0, #0
    9a1e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    9a22:	4610      	mov	r0, r2
    9a24:	f7ff ffc2 	bl	99ac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    9a28:	2300      	movs	r3, #0
    9a2a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    9a2e:	bd38      	pop	{r3, r4, r5, pc}
    9a30:	20000180 	.word	0x20000180
    9a34:	40006000 	.word	0x40006000

00009a38 <nrfx_gpiote_input_configure>:
{
    9a38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9a3c:	4604      	mov	r4, r0
    9a3e:	4617      	mov	r7, r2
    9a40:	461d      	mov	r5, r3
    if (p_input_config)
    9a42:	b321      	cbz	r1, 9a8e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9a44:	4e4e      	ldr	r6, [pc, #312]	; (9b80 <nrfx_gpiote_input_configure+0x148>)
    9a46:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9a4a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    9a4e:	079b      	lsls	r3, r3, #30
    9a50:	d506      	bpl.n	9a60 <nrfx_gpiote_input_configure+0x28>
    9a52:	f7ff ff83 	bl	995c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    9a56:	b118      	cbz	r0, 9a60 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    9a58:	484a      	ldr	r0, [pc, #296]	; (9b84 <nrfx_gpiote_input_configure+0x14c>)
}
    9a5a:	b004      	add	sp, #16
    9a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    9a60:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    9a62:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    9a66:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    9a6a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    9a6e:	f10d 020f 	add.w	r2, sp, #15
    9a72:	460b      	mov	r3, r1
    9a74:	4620      	mov	r0, r4
    9a76:	f10d 010e 	add.w	r1, sp, #14
    9a7a:	f005 fe6f 	bl	f75c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    9a7e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    9a82:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9a86:	f043 0301 	orr.w	r3, r3, #1
    9a8a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    9a8e:	b197      	cbz	r7, 9ab6 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9a90:	4b3b      	ldr	r3, [pc, #236]	; (9b80 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    9a92:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    9a94:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9a96:	f104 0008 	add.w	r0, r4, #8
    9a9a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    9a9e:	078f      	lsls	r7, r1, #30
    9aa0:	d50c      	bpl.n	9abc <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    9aa2:	2a00      	cmp	r2, #0
    9aa4:	d1d8      	bne.n	9a58 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    9aa6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    9aaa:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    9aae:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    9ab2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    9ab6:	bbcd      	cbnz	r5, 9b2c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    9ab8:	4833      	ldr	r0, [pc, #204]	; (9b88 <nrfx_gpiote_input_configure+0x150>)
    9aba:	e7ce      	b.n	9a5a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    9abc:	f021 0120 	bic.w	r1, r1, #32
    9ac0:	04c9      	lsls	r1, r1, #19
    9ac2:	0cc9      	lsrs	r1, r1, #19
    9ac4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    9ac8:	2a00      	cmp	r2, #0
    9aca:	d0ec      	beq.n	9aa6 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    9acc:	2e03      	cmp	r6, #3
    9ace:	d8c3      	bhi.n	9a58 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    9ad0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    9ad2:	b92e      	cbnz	r6, 9ae0 <nrfx_gpiote_input_configure+0xa8>
    9ad4:	4a2d      	ldr	r2, [pc, #180]	; (9b8c <nrfx_gpiote_input_configure+0x154>)
    9ad6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    9ada:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    9ade:	e7e2      	b.n	9aa6 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9ae0:	00ba      	lsls	r2, r7, #2
    9ae2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9ae6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9aea:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    9aee:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    9af2:	f02c 0c03 	bic.w	ip, ip, #3
    9af6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9afa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    9afe:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    9b02:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    9b06:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9b0a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    9b0e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    9b12:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    9b16:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    9b1a:	ea4c 0c0e 	orr.w	ip, ip, lr
    9b1e:	f041 0120 	orr.w	r1, r1, #32
    9b22:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    9b26:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    9b2a:	e7bc      	b.n	9aa6 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    9b2c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    9b30:	4620      	mov	r0, r4
    9b32:	f7ff ff3b 	bl	99ac <release_handler>
    if (!handler)
    9b36:	2e00      	cmp	r6, #0
    9b38:	d0be      	beq.n	9ab8 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9b3a:	4d11      	ldr	r5, [pc, #68]	; (9b80 <nrfx_gpiote_input_configure+0x148>)
    9b3c:	682b      	ldr	r3, [r5, #0]
    9b3e:	429e      	cmp	r6, r3
    9b40:	d104      	bne.n	9b4c <nrfx_gpiote_input_configure+0x114>
    9b42:	686b      	ldr	r3, [r5, #4]
    9b44:	429f      	cmp	r7, r3
    9b46:	d101      	bne.n	9b4c <nrfx_gpiote_input_configure+0x114>
    9b48:	2200      	movs	r2, #0
    9b4a:	e00a      	b.n	9b62 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    9b4c:	4810      	ldr	r0, [pc, #64]	; (9b90 <nrfx_gpiote_input_configure+0x158>)
    9b4e:	f10d 010f 	add.w	r1, sp, #15
    9b52:	f7ff fe1f 	bl	9794 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    9b56:	4b0c      	ldr	r3, [pc, #48]	; (9b88 <nrfx_gpiote_input_configure+0x150>)
    9b58:	4298      	cmp	r0, r3
    9b5a:	f47f af7e 	bne.w	9a5a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    9b5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    9b62:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    9b66:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9b6a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    9b6c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9b6e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    9b72:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    9b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9b7a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    9b7e:	e79b      	b.n	9ab8 <nrfx_gpiote_input_configure+0x80>
    9b80:	20000180 	.word	0x20000180
    9b84:	0bad0004 	.word	0x0bad0004
    9b88:	0bad0000 	.word	0x0bad0000
    9b8c:	40006000 	.word	0x40006000
    9b90:	200001f4 	.word	0x200001f4

00009b94 <nrfx_gpiote_output_configure>:
{
    9b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b96:	4604      	mov	r4, r0
    9b98:	b085      	sub	sp, #20
    9b9a:	4615      	mov	r5, r2
    if (p_config)
    9b9c:	b319      	cbz	r1, 9be6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9b9e:	4e33      	ldr	r6, [pc, #204]	; (9c6c <nrfx_gpiote_output_configure+0xd8>)
    9ba0:	f100 0708 	add.w	r7, r0, #8
    9ba4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    9ba8:	0793      	lsls	r3, r2, #30
    9baa:	d403      	bmi.n	9bb4 <nrfx_gpiote_output_configure+0x20>
    9bac:	f7ff fed6 	bl	995c <pin_in_use_by_te>
    9bb0:	2800      	cmp	r0, #0
    9bb2:	d158      	bne.n	9c66 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    9bb4:	f012 0f1c 	tst.w	r2, #28
    9bb8:	d002      	beq.n	9bc0 <nrfx_gpiote_output_configure+0x2c>
    9bba:	784b      	ldrb	r3, [r1, #1]
    9bbc:	2b01      	cmp	r3, #1
    9bbe:	d052      	beq.n	9c66 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    9bc0:	2301      	movs	r3, #1
    9bc2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    9bc6:	2300      	movs	r3, #0
    9bc8:	e9cd 1300 	strd	r1, r3, [sp]
    9bcc:	1c4a      	adds	r2, r1, #1
    9bce:	1c8b      	adds	r3, r1, #2
    9bd0:	4620      	mov	r0, r4
    9bd2:	f10d 010f 	add.w	r1, sp, #15
    9bd6:	f005 fdc1 	bl	f75c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    9bda:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    9bde:	f043 0303 	orr.w	r3, r3, #3
    9be2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    9be6:	b915      	cbnz	r5, 9bee <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    9be8:	4821      	ldr	r0, [pc, #132]	; (9c70 <nrfx_gpiote_output_configure+0xdc>)
}
    9bea:	b005      	add	sp, #20
    9bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9bee:	4e1f      	ldr	r6, [pc, #124]	; (9c6c <nrfx_gpiote_output_configure+0xd8>)
    9bf0:	f104 0708 	add.w	r7, r4, #8
    9bf4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    9bf8:	0783      	lsls	r3, r0, #30
    9bfa:	d534      	bpl.n	9c66 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    9bfc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    9c00:	4661      	mov	r1, ip
    9c02:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    9c04:	f020 0020 	bic.w	r0, r0, #32
    9c08:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    9c0c:	04c0      	lsls	r0, r0, #19
    9c0e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    9c12:	0cc0      	lsrs	r0, r0, #19
    9c14:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    9c18:	2300      	movs	r3, #0
    9c1a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    9c1e:	786a      	ldrb	r2, [r5, #1]
    9c20:	2a00      	cmp	r2, #0
    9c22:	d0e1      	beq.n	9be8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    9c24:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    9c28:	78ad      	ldrb	r5, [r5, #2]
    9c2a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    9c2e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    9c32:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c36:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    9c3a:	0223      	lsls	r3, r4, #8
    9c3c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9c40:	0412      	lsls	r2, r2, #16
    9c42:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c46:	ea43 030e 	orr.w	r3, r3, lr
    9c4a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9c4c:	052a      	lsls	r2, r5, #20
    9c4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9c52:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c56:	4313      	orrs	r3, r2
    9c58:	f040 0020 	orr.w	r0, r0, #32
    9c5c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    9c60:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    9c64:	e7c0      	b.n	9be8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    9c66:	4803      	ldr	r0, [pc, #12]	; (9c74 <nrfx_gpiote_output_configure+0xe0>)
    9c68:	e7bf      	b.n	9bea <nrfx_gpiote_output_configure+0x56>
    9c6a:	bf00      	nop
    9c6c:	20000180 	.word	0x20000180
    9c70:	0bad0000 	.word	0x0bad0000
    9c74:	0bad0004 	.word	0x0bad0004

00009c78 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    9c78:	4b01      	ldr	r3, [pc, #4]	; (9c80 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    9c7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    9c7e:	4770      	bx	lr
    9c80:	20000180 	.word	0x20000180

00009c84 <nrfx_gpiote_channel_get>:
{
    9c84:	b508      	push	{r3, lr}
    9c86:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    9c88:	f7ff fe68 	bl	995c <pin_in_use_by_te>
    9c8c:	b138      	cbz	r0, 9c9e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9c8e:	4b05      	ldr	r3, [pc, #20]	; (9ca4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    9c90:	4805      	ldr	r0, [pc, #20]	; (9ca8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9c92:	3208      	adds	r2, #8
    9c94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    9c98:	0b5b      	lsrs	r3, r3, #13
    9c9a:	700b      	strb	r3, [r1, #0]
}
    9c9c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    9c9e:	4803      	ldr	r0, [pc, #12]	; (9cac <nrfx_gpiote_channel_get+0x28>)
    9ca0:	e7fc      	b.n	9c9c <nrfx_gpiote_channel_get+0x18>
    9ca2:	bf00      	nop
    9ca4:	20000180 	.word	0x20000180
    9ca8:	0bad0000 	.word	0x0bad0000
    9cac:	0bad0004 	.word	0x0bad0004

00009cb0 <nrfx_gpiote_init>:
{
    9cb0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9cb2:	4c0f      	ldr	r4, [pc, #60]	; (9cf0 <nrfx_gpiote_init+0x40>)
    9cb4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    9cb8:	b9bd      	cbnz	r5, 9cea <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9cba:	2260      	movs	r2, #96	; 0x60
    9cbc:	4629      	mov	r1, r5
    9cbe:	f104 0010 	add.w	r0, r4, #16
    9cc2:	f005 f9ea 	bl	f09a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9cc6:	2006      	movs	r0, #6
    9cc8:	f7fc fdca 	bl	6860 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9ccc:	4b09      	ldr	r3, [pc, #36]	; (9cf4 <nrfx_gpiote_init+0x44>)
    return err_code;
    9cce:	480a      	ldr	r0, [pc, #40]	; (9cf8 <nrfx_gpiote_init+0x48>)
    9cd0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    9cd4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9cd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9cdc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9ce0:	2301      	movs	r3, #1
    9ce2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9ce6:	6763      	str	r3, [r4, #116]	; 0x74
}
    9ce8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    9cea:	4804      	ldr	r0, [pc, #16]	; (9cfc <nrfx_gpiote_init+0x4c>)
    9cec:	e7fc      	b.n	9ce8 <nrfx_gpiote_init+0x38>
    9cee:	bf00      	nop
    9cf0:	20000180 	.word	0x20000180
    9cf4:	40006000 	.word	0x40006000
    9cf8:	0bad0000 	.word	0x0bad0000
    9cfc:	0bad0005 	.word	0x0bad0005

00009d00 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    9d00:	4b03      	ldr	r3, [pc, #12]	; (9d10 <nrfx_gpiote_is_init+0x10>)
    9d02:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9d06:	3800      	subs	r0, #0
    9d08:	bf18      	it	ne
    9d0a:	2001      	movne	r0, #1
    9d0c:	4770      	bx	lr
    9d0e:	bf00      	nop
    9d10:	20000180 	.word	0x20000180

00009d14 <nrfx_gpiote_channel_free>:
{
    9d14:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    9d16:	4801      	ldr	r0, [pc, #4]	; (9d1c <nrfx_gpiote_channel_free+0x8>)
    9d18:	f7ff bd62 	b.w	97e0 <nrfx_flag32_free>
    9d1c:	200001f0 	.word	0x200001f0

00009d20 <nrfx_gpiote_channel_alloc>:
{
    9d20:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    9d22:	4801      	ldr	r0, [pc, #4]	; (9d28 <nrfx_gpiote_channel_alloc+0x8>)
    9d24:	f7ff bd36 	b.w	9794 <nrfx_flag32_alloc>
    9d28:	200001f0 	.word	0x200001f0

00009d2c <nrfx_gpiote_trigger_enable>:
{
    9d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9d2e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9d30:	f7ff fe14 	bl	995c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9d34:	f104 0208 	add.w	r2, r4, #8
    9d38:	4b1e      	ldr	r3, [pc, #120]	; (9db4 <nrfx_gpiote_trigger_enable+0x88>)
    9d3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9d3e:	b1e8      	cbz	r0, 9d7c <nrfx_gpiote_trigger_enable+0x50>
    9d40:	f013 0502 	ands.w	r5, r3, #2
    9d44:	d11a      	bne.n	9d7c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9d46:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9d48:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    9d4a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    9d4e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    9d52:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9d56:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9d5a:	6005      	str	r5, [r0, #0]
    9d5c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    9d5e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    9d62:	f040 0001 	orr.w	r0, r0, #1
    9d66:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    9d6a:	b129      	cbz	r1, 9d78 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9d6c:	2201      	movs	r2, #1
    9d6e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    9d72:	4a11      	ldr	r2, [pc, #68]	; (9db8 <nrfx_gpiote_trigger_enable+0x8c>)
    9d74:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    9d78:	b003      	add	sp, #12
    9d7a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9d7c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    9d80:	2b04      	cmp	r3, #4
    9d82:	d012      	beq.n	9daa <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9d84:	2b05      	cmp	r3, #5
    9d86:	d012      	beq.n	9dae <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9d88:	a801      	add	r0, sp, #4
    9d8a:	9401      	str	r4, [sp, #4]
    9d8c:	f7ff fdd8 	bl	9940 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9d90:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    9d92:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9d96:	40d9      	lsrs	r1, r3
    9d98:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9d9c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    9d9e:	4620      	mov	r0, r4
}
    9da0:	b003      	add	sp, #12
    9da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    9da6:	f005 bd20 	b.w	f7ea <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9daa:	2103      	movs	r1, #3
    9dac:	e7f7      	b.n	9d9e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    9dae:	2102      	movs	r1, #2
    9db0:	e7f5      	b.n	9d9e <nrfx_gpiote_trigger_enable+0x72>
    9db2:	bf00      	nop
    9db4:	20000180 	.word	0x20000180
    9db8:	40006000 	.word	0x40006000

00009dbc <nrfx_gpiote_trigger_disable>:
{
    9dbc:	b508      	push	{r3, lr}
    9dbe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9dc0:	f7ff fdcc 	bl	995c <pin_in_use_by_te>
    9dc4:	b1c0      	cbz	r0, 9df8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9dc6:	f102 0108 	add.w	r1, r2, #8
    9dca:	4b0e      	ldr	r3, [pc, #56]	; (9e04 <nrfx_gpiote_trigger_disable+0x48>)
    9dcc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9dd0:	0799      	lsls	r1, r3, #30
    9dd2:	d411      	bmi.n	9df8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9dd4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    9dd6:	2201      	movs	r2, #1
    9dd8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    9dda:	009b      	lsls	r3, r3, #2
    9ddc:	490a      	ldr	r1, [pc, #40]	; (9e08 <nrfx_gpiote_trigger_disable+0x4c>)
    9dde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9de2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    9de6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9dea:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    9dee:	f022 0203 	bic.w	r2, r2, #3
    9df2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    9df6:	bd08      	pop	{r3, pc}
    9df8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    9dfc:	2100      	movs	r1, #0
    9dfe:	4610      	mov	r0, r2
    9e00:	f005 bcf3 	b.w	f7ea <nrf_gpio_cfg_sense_set>
    9e04:	20000180 	.word	0x20000180
    9e08:	40006000 	.word	0x40006000

00009e0c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    9e0c:	4b0e      	ldr	r3, [pc, #56]	; (9e48 <nrfx_gpiote_pin_uninit+0x3c>)
    9e0e:	f100 0208 	add.w	r2, r0, #8
{
    9e12:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    9e14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    9e18:	07db      	lsls	r3, r3, #31
{
    9e1a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    9e1c:	d511      	bpl.n	9e42 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    9e1e:	f7ff ffcd 	bl	9dbc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    9e22:	4620      	mov	r0, r4
    9e24:	f7ff fdec 	bl	9a00 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e28:	a801      	add	r0, sp, #4
    9e2a:	9401      	str	r4, [sp, #4]
    9e2c:	f7ff fd88 	bl	9940 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9e30:	9b01      	ldr	r3, [sp, #4]
    9e32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9e36:	2202      	movs	r2, #2
    9e38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    9e3c:	4803      	ldr	r0, [pc, #12]	; (9e4c <nrfx_gpiote_pin_uninit+0x40>)
}
    9e3e:	b002      	add	sp, #8
    9e40:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    9e42:	4803      	ldr	r0, [pc, #12]	; (9e50 <nrfx_gpiote_pin_uninit+0x44>)
    9e44:	e7fb      	b.n	9e3e <nrfx_gpiote_pin_uninit+0x32>
    9e46:	bf00      	nop
    9e48:	20000180 	.word	0x20000180
    9e4c:	0bad0000 	.word	0x0bad0000
    9e50:	0bad0004 	.word	0x0bad0004

00009e54 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    9e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e58:	4b64      	ldr	r3, [pc, #400]	; (9fec <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    9e5a:	4865      	ldr	r0, [pc, #404]	; (9ff0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9e5c:	4965      	ldr	r1, [pc, #404]	; (9ff4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    9e5e:	2600      	movs	r6, #0
{
    9e60:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    9e62:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9e64:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e66:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    9e68:	b135      	cbz	r5, 9e78 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    9e6a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    9e6e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9e70:	bf1e      	ittt	ne
    9e72:	601c      	strne	r4, [r3, #0]
    9e74:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    9e76:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9e78:	3304      	adds	r3, #4
    9e7a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    9e7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9e80:	d1f1      	bne.n	9e66 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e82:	f8df 816c 	ldr.w	r8, [pc, #364]	; 9ff0 <nrfx_gpiote_irq_handler+0x19c>
    9e86:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	f000 8091 	beq.w	9fb2 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    9e90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9e94:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    9e98:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    9e9a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    9e9e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    9ea2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    9ea4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9ea8:	2700      	movs	r7, #0
            while (latch[i])
    9eaa:	f10d 0910 	add.w	r9, sp, #16
    9eae:	017b      	lsls	r3, r7, #5
    9eb0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    9eb2:	f04f 0a01 	mov.w	sl, #1
    9eb6:	e049      	b.n	9f4c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    9eb8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9eba:	4a4f      	ldr	r2, [pc, #316]	; (9ff8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    9ebc:	fa94 f4a4 	rbit	r4, r4
    9ec0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    9ec4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9ec6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    9eca:	08e0      	lsrs	r0, r4, #3
    9ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9ed0:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    9ed2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    9ed6:	fa0a fc02 	lsl.w	ip, sl, r2
    9eda:	f819 2000 	ldrb.w	r2, [r9, r0]
    9ede:	ea22 020c 	bic.w	r2, r2, ip
    9ee2:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9ee6:	a803      	add	r0, sp, #12
    9ee8:	f3c3 0582 	ubfx	r5, r3, #2, #3
    9eec:	0899      	lsrs	r1, r3, #2
    9eee:	f7ff fd27 	bl	9940 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9ef2:	9a03      	ldr	r2, [sp, #12]
    9ef4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    9ef8:	074b      	lsls	r3, r1, #29
    9efa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9efe:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    9f00:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    9f04:	d529      	bpl.n	9f5a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    9f06:	4620      	mov	r0, r4
    9f08:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9f0a:	b2d5      	uxtb	r5, r2
    9f0c:	f7ff fd30 	bl	9970 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9f10:	a803      	add	r0, sp, #12
    9f12:	9403      	str	r4, [sp, #12]
    9f14:	f7ff fd14 	bl	9940 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9f18:	9b03      	ldr	r3, [sp, #12]
    9f1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9f1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    9f22:	f3c3 4301 	ubfx	r3, r3, #16, #2
    9f26:	429d      	cmp	r5, r3
    9f28:	d107      	bne.n	9f3a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    9f2a:	2100      	movs	r1, #0
    9f2c:	4620      	mov	r0, r4
    9f2e:	f005 fc5c 	bl	f7ea <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    9f32:	4629      	mov	r1, r5
    9f34:	4620      	mov	r0, r4
    9f36:	f005 fc58 	bl	f7ea <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9f3a:	a803      	add	r0, sp, #12
    9f3c:	9403      	str	r4, [sp, #12]
    9f3e:	f7ff fcff 	bl	9940 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    9f42:	9b03      	ldr	r3, [sp, #12]
    9f44:	fa0a f303 	lsl.w	r3, sl, r3
    9f48:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    9f4c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    9f50:	2c00      	cmp	r4, #0
    9f52:	d1b1      	bne.n	9eb8 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9f54:	b9cf      	cbnz	r7, 9f8a <nrfx_gpiote_irq_handler+0x136>
    9f56:	2701      	movs	r7, #1
    9f58:	e7a9      	b.n	9eae <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9f5a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    9f5c:	bf0c      	ite	eq
    9f5e:	2103      	moveq	r1, #3
    9f60:	2102      	movne	r1, #2
    9f62:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9f64:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    9f66:	f005 fc40 	bl	f7ea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    9f6a:	2d03      	cmp	r5, #3
    9f6c:	d004      	beq.n	9f78 <nrfx_gpiote_irq_handler+0x124>
    9f6e:	9a01      	ldr	r2, [sp, #4]
    9f70:	2a02      	cmp	r2, #2
    9f72:	d106      	bne.n	9f82 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    9f74:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    9f76:	d1e0      	bne.n	9f3a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    9f78:	4659      	mov	r1, fp
    9f7a:	4620      	mov	r0, r4
    9f7c:	f7ff fcf8 	bl	9970 <call_handler>
    9f80:	e7db      	b.n	9f3a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    9f82:	2a03      	cmp	r2, #3
    9f84:	d1d9      	bne.n	9f3a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    9f86:	2d02      	cmp	r5, #2
    9f88:	e7f5      	b.n	9f76 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9f8a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    9f8e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    9f92:	491a      	ldr	r1, [pc, #104]	; (9ffc <nrfx_gpiote_irq_handler+0x1a8>)
    9f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9f98:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    9f9c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    9f9e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    9fa2:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    9fa6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    9fa8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    9fac:	4313      	orrs	r3, r2
    9fae:	f47f af7b 	bne.w	9ea8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    9fb2:	2401      	movs	r4, #1
    while (mask)
    9fb4:	b916      	cbnz	r6, 9fbc <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    9fb6:	b007      	add	sp, #28
    9fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    9fbc:	fa96 f3a6 	rbit	r3, r6
    9fc0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    9fc4:	fa04 f203 	lsl.w	r2, r4, r3
    9fc8:	009b      	lsls	r3, r3, #2
    9fca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9fce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    9fd2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    9fd6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    9fda:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    9fde:	f3c0 2005 	ubfx	r0, r0, #8, #6
    9fe2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    9fe6:	f7ff fcc3 	bl	9970 <call_handler>
    9fea:	e7e3      	b.n	9fb4 <nrfx_gpiote_irq_handler+0x160>
    9fec:	40006100 	.word	0x40006100
    9ff0:	40006000 	.word	0x40006000
    9ff4:	40006120 	.word	0x40006120
    9ff8:	20000180 	.word	0x20000180
    9ffc:	50000300 	.word	0x50000300

0000a000 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    a000:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    a002:	4c18      	ldr	r4, [pc, #96]	; (a064 <nrfx_power_init+0x64>)
    a004:	7823      	ldrb	r3, [r4, #0]
    a006:	bb53      	cbnz	r3, a05e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    a008:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    a00a:	0791      	lsls	r1, r2, #30
    a00c:	f3c2 0340 	ubfx	r3, r2, #1, #1
    a010:	d511      	bpl.n	a036 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a016:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
    a01a:	2908      	cmp	r1, #8
    a01c:	d11d      	bne.n	a05a <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a01e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    a022:	2b05      	cmp	r3, #5
    a024:	d819      	bhi.n	a05a <nrfx_power_init+0x5a>
    a026:	4910      	ldr	r1, [pc, #64]	; (a068 <nrfx_power_init+0x68>)
    a028:	5cc9      	ldrb	r1, [r1, r3]
    a02a:	2301      	movs	r3, #1
    a02c:	b119      	cbz	r1, a036 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    a02e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    a032:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a036:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    a03a:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a03e:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    a042:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    a044:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    a048:	f7fc fc2e 	bl	68a8 <arch_irq_is_enabled>
    a04c:	b908      	cbnz	r0, a052 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    a04e:	f7fc fc07 	bl	6860 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    a052:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    a054:	4805      	ldr	r0, [pc, #20]	; (a06c <nrfx_power_init+0x6c>)
    m_initialized = true;
    a056:	7023      	strb	r3, [r4, #0]
}
    a058:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a05a:	2301      	movs	r3, #1
    a05c:	e7eb      	b.n	a036 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    a05e:	4804      	ldr	r0, [pc, #16]	; (a070 <nrfx_power_init+0x70>)
    a060:	e7fa      	b.n	a058 <nrfx_power_init+0x58>
    a062:	bf00      	nop
    a064:	200021e9 	.word	0x200021e9
    a068:	00012f08 	.word	0x00012f08
    a06c:	0bad0000 	.word	0x0bad0000
    a070:	0bad000c 	.word	0x0bad000c

0000a074 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    a074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a078:	f44f 7260 	mov.w	r2, #896	; 0x380
    a07c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    a080:	4b01      	ldr	r3, [pc, #4]	; (a088 <nrfx_power_usbevt_uninit+0x14>)
    a082:	2200      	movs	r2, #0
    a084:	601a      	str	r2, [r3, #0]
}
    a086:	4770      	bx	lr
    a088:	20001f04 	.word	0x20001f04

0000a08c <nrfx_power_usbevt_init>:
{
    a08c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    a08e:	f7ff fff1 	bl	a074 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    a092:	6803      	ldr	r3, [r0, #0]
    a094:	b10b      	cbz	r3, a09a <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    a096:	4a01      	ldr	r2, [pc, #4]	; (a09c <nrfx_power_usbevt_init+0x10>)
    a098:	6013      	str	r3, [r2, #0]
}
    a09a:	bd08      	pop	{r3, pc}
    a09c:	20001f04 	.word	0x20001f04

0000a0a0 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    a0a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    a0a4:	b510      	push	{r4, lr}
    a0a6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    a0aa:	0762      	lsls	r2, r4, #29
    a0ac:	d507      	bpl.n	a0be <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    a0ae:	f44f 7084 	mov.w	r0, #264	; 0x108
    a0b2:	f005 fba9 	bl	f808 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    a0b6:	b110      	cbz	r0, a0be <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    a0b8:	4b1e      	ldr	r3, [pc, #120]	; (a134 <nrfx_power_irq_handler+0x94>)
    a0ba:	681b      	ldr	r3, [r3, #0]
    a0bc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    a0be:	06a3      	lsls	r3, r4, #26
    a0c0:	d508      	bpl.n	a0d4 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    a0c2:	f44f 708a 	mov.w	r0, #276	; 0x114
    a0c6:	f005 fb9f 	bl	f808 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    a0ca:	b118      	cbz	r0, a0d4 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    a0cc:	4b1a      	ldr	r3, [pc, #104]	; (a138 <nrfx_power_irq_handler+0x98>)
    a0ce:	2000      	movs	r0, #0
    a0d0:	681b      	ldr	r3, [r3, #0]
    a0d2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    a0d4:	0660      	lsls	r0, r4, #25
    a0d6:	d508      	bpl.n	a0ea <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    a0d8:	f44f 708c 	mov.w	r0, #280	; 0x118
    a0dc:	f005 fb94 	bl	f808 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    a0e0:	b118      	cbz	r0, a0ea <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    a0e2:	4b15      	ldr	r3, [pc, #84]	; (a138 <nrfx_power_irq_handler+0x98>)
    a0e4:	2001      	movs	r0, #1
    a0e6:	681b      	ldr	r3, [r3, #0]
    a0e8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    a0ea:	0621      	lsls	r1, r4, #24
    a0ec:	d508      	bpl.n	a100 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    a0ee:	f44f 708e 	mov.w	r0, #284	; 0x11c
    a0f2:	f005 fb89 	bl	f808 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    a0f6:	b118      	cbz	r0, a100 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    a0f8:	4b10      	ldr	r3, [pc, #64]	; (a13c <nrfx_power_irq_handler+0x9c>)
    a0fa:	2000      	movs	r0, #0
    a0fc:	681b      	ldr	r3, [r3, #0]
    a0fe:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    a100:	05e2      	lsls	r2, r4, #23
    a102:	d508      	bpl.n	a116 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    a104:	f44f 7090 	mov.w	r0, #288	; 0x120
    a108:	f005 fb7e 	bl	f808 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    a10c:	b118      	cbz	r0, a116 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    a10e:	4b0b      	ldr	r3, [pc, #44]	; (a13c <nrfx_power_irq_handler+0x9c>)
    a110:	2001      	movs	r0, #1
    a112:	681b      	ldr	r3, [r3, #0]
    a114:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    a116:	05a3      	lsls	r3, r4, #22
    a118:	d50a      	bpl.n	a130 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    a11a:	f44f 7092 	mov.w	r0, #292	; 0x124
    a11e:	f005 fb73 	bl	f808 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    a122:	b128      	cbz	r0, a130 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    a124:	4b05      	ldr	r3, [pc, #20]	; (a13c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    a126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    a12a:	681b      	ldr	r3, [r3, #0]
    a12c:	2002      	movs	r0, #2
    a12e:	4718      	bx	r3
}
    a130:	bd10      	pop	{r4, pc}
    a132:	bf00      	nop
    a134:	20001efc 	.word	0x20001efc
    a138:	20001f00 	.word	0x20001f00
    a13c:	20001f04 	.word	0x20001f04

0000a140 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    a140:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    a142:	4801      	ldr	r0, [pc, #4]	; (a148 <nrfx_ppi_channel_alloc+0x8>)
    a144:	f7ff bb26 	b.w	9794 <nrfx_flag32_alloc>
    a148:	200001fc 	.word	0x200001fc

0000a14c <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a14c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a150:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    a154:	2a08      	cmp	r2, #8
    a156:	d106      	bne.n	a166 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a158:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    a15c:	2b05      	cmp	r3, #5
    a15e:	d804      	bhi.n	a16a <nrf52_errata_187+0x1e>
    a160:	4a03      	ldr	r2, [pc, #12]	; (a170 <nrf52_errata_187+0x24>)
    a162:	5cd0      	ldrb	r0, [r2, r3]
    a164:	4770      	bx	lr
        return false;
    a166:	2000      	movs	r0, #0
    a168:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a16a:	2001      	movs	r0, #1
}
    a16c:	4770      	bx	lr
    a16e:	bf00      	nop
    a170:	00012f0e 	.word	0x00012f0e

0000a174 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a174:	4b05      	ldr	r3, [pc, #20]	; (a18c <ep_state_access+0x18>)
    a176:	f010 0f80 	tst.w	r0, #128	; 0x80
    a17a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    a17e:	bf08      	it	eq
    a180:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    a182:	f000 000f 	and.w	r0, r0, #15
}
    a186:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a18a:	4770      	bx	lr
    a18c:	20002078 	.word	0x20002078

0000a190 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    a190:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    a192:	f005 fb5a 	bl	f84a <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    a196:	b118      	cbz	r0, a1a0 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a198:	4b03      	ldr	r3, [pc, #12]	; (a1a8 <usbd_dma_pending_clear+0x18>)
    a19a:	2200      	movs	r2, #0
    a19c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
    a1a0:	4b02      	ldr	r3, [pc, #8]	; (a1ac <usbd_dma_pending_clear+0x1c>)
    a1a2:	2200      	movs	r2, #0
    a1a4:	701a      	strb	r2, [r3, #0]
}
    a1a6:	bd08      	pop	{r3, pc}
    a1a8:	40027000 	.word	0x40027000
    a1ac:	200021eb 	.word	0x200021eb

0000a1b0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    a1b0:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    a1b2:	4a09      	ldr	r2, [pc, #36]	; (a1d8 <ev_usbreset_handler+0x28>)
    a1b4:	2300      	movs	r3, #0
    a1b6:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a1b8:	4a08      	ldr	r2, [pc, #32]	; (a1dc <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    a1ba:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a1be:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    a1c0:	f88d 3007 	strb.w	r3, [sp, #7]
    a1c4:	2301      	movs	r3, #1
    a1c6:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    a1ca:	4b05      	ldr	r3, [pc, #20]	; (a1e0 <ev_usbreset_handler+0x30>)
    a1cc:	a801      	add	r0, sp, #4
    a1ce:	681b      	ldr	r3, [r3, #0]
    a1d0:	4798      	blx	r3
}
    a1d2:	b003      	add	sp, #12
    a1d4:	f85d fb04 	ldr.w	pc, [sp], #4
    a1d8:	200021ea 	.word	0x200021ea
    a1dc:	200021ed 	.word	0x200021ed
    a1e0:	20002108 	.word	0x20002108

0000a1e4 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    a1e4:	4b21      	ldr	r3, [pc, #132]	; (a26c <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    a1e6:	b513      	push	{r0, r1, r4, lr}
    a1e8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    a1ec:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    a1f0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    a1f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    a1f6:	d50e      	bpl.n	a216 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    a1f8:	4b1d      	ldr	r3, [pc, #116]	; (a270 <ev_usbevent_handler+0x8c>)
    a1fa:	2201      	movs	r2, #1
    a1fc:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    a1fe:	2300      	movs	r3, #0
    a200:	f8ad 3005 	strh.w	r3, [sp, #5]
    a204:	f88d 3007 	strb.w	r3, [sp, #7]
    a208:	2302      	movs	r3, #2
    a20a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    a20e:	4b19      	ldr	r3, [pc, #100]	; (a274 <ev_usbevent_handler+0x90>)
    a210:	a801      	add	r0, sp, #4
    a212:	681b      	ldr	r3, [r3, #0]
    a214:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    a216:	05a2      	lsls	r2, r4, #22
    a218:	d50d      	bpl.n	a236 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    a21a:	4a15      	ldr	r2, [pc, #84]	; (a270 <ev_usbevent_handler+0x8c>)
    a21c:	2300      	movs	r3, #0
    a21e:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    a220:	f8ad 3005 	strh.w	r3, [sp, #5]
    a224:	f88d 3007 	strb.w	r3, [sp, #7]
    a228:	2303      	movs	r3, #3
    a22a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    a22e:	4b11      	ldr	r3, [pc, #68]	; (a274 <ev_usbevent_handler+0x90>)
    a230:	a801      	add	r0, sp, #4
    a232:	681b      	ldr	r3, [r3, #0]
    a234:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    a236:	0563      	lsls	r3, r4, #21
    a238:	d515      	bpl.n	a266 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    a23a:	4a0d      	ldr	r2, [pc, #52]	; (a270 <ev_usbevent_handler+0x8c>)
    a23c:	7813      	ldrb	r3, [r2, #0]
    a23e:	b193      	cbz	r3, a266 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    a240:	2300      	movs	r3, #0
    a242:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    a244:	4a09      	ldr	r2, [pc, #36]	; (a26c <ev_usbevent_handler+0x88>)
    a246:	2101      	movs	r1, #1
    a248:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a24c:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a24e:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    a250:	f8ad 3005 	strh.w	r3, [sp, #5]
    a254:	f88d 3007 	strb.w	r3, [sp, #7]
    a258:	2304      	movs	r3, #4
    a25a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    a25e:	4b05      	ldr	r3, [pc, #20]	; (a274 <ev_usbevent_handler+0x90>)
    a260:	a801      	add	r0, sp, #4
    a262:	681b      	ldr	r3, [r3, #0]
    a264:	4798      	blx	r3
        }
    }
}
    a266:	b002      	add	sp, #8
    a268:	bd10      	pop	{r4, pc}
    a26a:	bf00      	nop
    a26c:	40027000 	.word	0x40027000
    a270:	200021ea 	.word	0x200021ea
    a274:	20002108 	.word	0x20002108

0000a278 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    a278:	f04f 0320 	mov.w	r3, #32
    a27c:	f3ef 8011 	mrs	r0, BASEPRI
    a280:	f383 8812 	msr	BASEPRI_MAX, r3
    a284:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a288:	4b0a      	ldr	r3, [pc, #40]	; (a2b4 <usbd_errata_187_211_begin+0x3c>)
    a28a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a28e:	2203      	movs	r2, #3
    a290:	b961      	cbnz	r1, a2ac <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a292:	f249 3175 	movw	r1, #37749	; 0x9375
    a296:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    a29a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a29e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a2a2:	f380 8811 	msr	BASEPRI, r0
    a2a6:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a2aa:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    a2ac:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    a2b0:	e7f7      	b.n	a2a2 <usbd_errata_187_211_begin+0x2a>
    a2b2:	bf00      	nop
    a2b4:	4006e000 	.word	0x4006e000

0000a2b8 <usbd_errata_187_211_end>:
	__asm__ volatile(
    a2b8:	f04f 0320 	mov.w	r3, #32
    a2bc:	f3ef 8011 	mrs	r0, BASEPRI
    a2c0:	f383 8812 	msr	BASEPRI_MAX, r3
    a2c4:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a2c8:	4b0a      	ldr	r3, [pc, #40]	; (a2f4 <usbd_errata_187_211_end+0x3c>)
    a2ca:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a2ce:	b961      	cbnz	r1, a2ea <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a2d0:	f249 3275 	movw	r2, #37749	; 0x9375
    a2d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    a2d8:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a2dc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a2e0:	f380 8811 	msr	BASEPRI, r0
    a2e4:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a2e8:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    a2ea:	2200      	movs	r2, #0
    a2ec:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    a2f0:	e7f6      	b.n	a2e0 <usbd_errata_187_211_end+0x28>
    a2f2:	bf00      	nop
    a2f4:	4006e000 	.word	0x4006e000

0000a2f8 <nrfx_usbd_feeder_flash>:
{
    a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    a2fa:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    a2fc:	4f0b      	ldr	r7, [pc, #44]	; (a32c <nrfx_usbd_feeder_flash+0x34>)
    a2fe:	4295      	cmp	r5, r2
    a300:	bf28      	it	cs
    a302:	4615      	movcs	r5, r2
{
    a304:	460c      	mov	r4, r1
    a306:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    a308:	462a      	mov	r2, r5
    a30a:	6809      	ldr	r1, [r1, #0]
    a30c:	4638      	mov	r0, r7
    a30e:	f004 feb9 	bl	f084 <memcpy>
    p_transfer->size -= tx_size;
    a312:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    a314:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    a316:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    a318:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    a31c:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    a31e:	6060      	str	r0, [r4, #4]
}
    a320:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    a322:	6022      	str	r2, [r4, #0]
}
    a324:	bf18      	it	ne
    a326:	2001      	movne	r0, #1
    a328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a32a:	bf00      	nop
    a32c:	2000210c 	.word	0x2000210c

0000a330 <nrfx_usbd_feeder_flash_zlp>:
{
    a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    a332:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    a334:	4294      	cmp	r4, r2
    a336:	bf28      	it	cs
    a338:	4614      	movcs	r4, r2
{
    a33a:	4606      	mov	r6, r0
    a33c:	460d      	mov	r5, r1
    if (tx_size != 0)
    a33e:	b18c      	cbz	r4, a364 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    a340:	4f09      	ldr	r7, [pc, #36]	; (a368 <nrfx_usbd_feeder_flash_zlp+0x38>)
    a342:	6809      	ldr	r1, [r1, #0]
    a344:	4622      	mov	r2, r4
    a346:	4638      	mov	r0, r7
    a348:	f004 fe9c 	bl	f084 <memcpy>
        p_next->p_data.tx = p_buffer;
    a34c:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    a34e:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    a350:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    a352:	1b1b      	subs	r3, r3, r4
    a354:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    a356:	682b      	ldr	r3, [r5, #0]
}
    a358:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    a35a:	4423      	add	r3, r4
    a35c:	602b      	str	r3, [r5, #0]
}
    a35e:	bf18      	it	ne
    a360:	2001      	movne	r0, #1
    a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    a364:	6004      	str	r4, [r0, #0]
    a366:	e7f2      	b.n	a34e <nrfx_usbd_feeder_flash_zlp+0x1e>
    a368:	2000210c 	.word	0x2000210c

0000a36c <ev_sof_handler>:
{
    a36c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    a36e:	2300      	movs	r3, #0
    a370:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    a374:	4b0b      	ldr	r3, [pc, #44]	; (a3a4 <ev_sof_handler+0x38>)
    a376:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    a37a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    a37e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    a382:	4a09      	ldr	r2, [pc, #36]	; (a3a8 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    a384:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    a386:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    a388:	bf0c      	ite	eq
    a38a:	f44f 7180 	moveq.w	r1, #256	; 0x100
    a38e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    a392:	430b      	orrs	r3, r1
    a394:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    a396:	4b05      	ldr	r3, [pc, #20]	; (a3ac <ev_sof_handler+0x40>)
    a398:	a801      	add	r0, sp, #4
    a39a:	681b      	ldr	r3, [r3, #0]
    a39c:	4798      	blx	r3
}
    a39e:	b003      	add	sp, #12
    a3a0:	f85d fb04 	ldr.w	pc, [sp], #4
    a3a4:	40027000 	.word	0x40027000
    a3a8:	20001fe4 	.word	0x20001fe4
    a3ac:	20002108 	.word	0x20002108

0000a3b0 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a3b0:	4b06      	ldr	r3, [pc, #24]	; (a3cc <atomic_and.constprop.0.isra.0+0x1c>)
    a3b2:	f3bf 8f5b 	dmb	ish
    a3b6:	e853 2f00 	ldrex	r2, [r3]
    a3ba:	4002      	ands	r2, r0
    a3bc:	e843 2100 	strex	r1, r2, [r3]
    a3c0:	2900      	cmp	r1, #0
    a3c2:	d1f8      	bne.n	a3b6 <atomic_and.constprop.0.isra.0+0x6>
    a3c4:	f3bf 8f5b 	dmb	ish
}
    a3c8:	4770      	bx	lr
    a3ca:	bf00      	nop
    a3cc:	20001f74 	.word	0x20001f74

0000a3d0 <nrf_usbd_ep0in_dma_handler>:
{
    a3d0:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    a3d2:	f7ff fedd 	bl	a190 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a3d6:	4b08      	ldr	r3, [pc, #32]	; (a3f8 <nrf_usbd_ep0in_dma_handler+0x28>)
    a3d8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    a3dc:	2a03      	cmp	r2, #3
    a3de:	d105      	bne.n	a3ec <nrf_usbd_ep0in_dma_handler+0x1c>
}
    a3e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a3e4:	f06f 0001 	mvn.w	r0, #1
    a3e8:	f7ff bfe2 	b.w	a3b0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	d0f5      	beq.n	a3e0 <nrf_usbd_ep0in_dma_handler+0x10>
}
    a3f4:	bd08      	pop	{r3, pc}
    a3f6:	bf00      	nop
    a3f8:	20001fe8 	.word	0x20001fe8

0000a3fc <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    a3fc:	2201      	movs	r2, #1
{
    a3fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    a400:	fa02 f501 	lsl.w	r5, r2, r1
    a404:	491c      	ldr	r1, [pc, #112]	; (a478 <usbd_ep_data_handler+0x7c>)
    a406:	4e1d      	ldr	r6, [pc, #116]	; (a47c <usbd_ep_data_handler+0x80>)
    a408:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a40a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    a40e:	ea43 0305 	orr.w	r3, r3, r5
{
    a412:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    a414:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a416:	d024      	beq.n	a462 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a418:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a41c:	4b18      	ldr	r3, [pc, #96]	; (a480 <usbd_ep_data_handler+0x84>)
    a41e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a426:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a42a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    a42c:	b132      	cbz	r2, a43c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a42e:	2200      	movs	r2, #0
    a430:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    a432:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a434:	681b      	ldr	r3, [r3, #0]
    a436:	d011      	beq.n	a45c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    a438:	f005 fa57 	bl	f8ea <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a43c:	6831      	ldr	r1, [r6, #0]
    a43e:	4029      	ands	r1, r5
    a440:	d10a      	bne.n	a458 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a442:	2306      	movs	r3, #6
    a444:	f88d 3004 	strb.w	r3, [sp, #4]
    a448:	f88d 4006 	strb.w	r4, [sp, #6]
    a44c:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    a450:	4b0c      	ldr	r3, [pc, #48]	; (a484 <usbd_ep_data_handler+0x88>)
    a452:	a801      	add	r0, sp, #4
    a454:	681b      	ldr	r3, [r3, #0]
    a456:	4798      	blx	r3
}
    a458:	b002      	add	sp, #8
    a45a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    a45c:	f7ff ffb8 	bl	a3d0 <nrf_usbd_ep0in_dma_handler>
    a460:	e7ec      	b.n	a43c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a462:	6833      	ldr	r3, [r6, #0]
    a464:	421d      	tst	r5, r3
    a466:	d1f7      	bne.n	a458 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    a468:	2306      	movs	r3, #6
    a46a:	f88d 3004 	strb.w	r3, [sp, #4]
    a46e:	f88d 0006 	strb.w	r0, [sp, #6]
    a472:	f88d 2007 	strb.w	r2, [sp, #7]
    a476:	e7eb      	b.n	a450 <usbd_ep_data_handler+0x54>
    a478:	20001fe4 	.word	0x20001fe4
    a47c:	20001f74 	.word	0x20001f74
    a480:	00011024 	.word	0x00011024
    a484:	20002108 	.word	0x20002108

0000a488 <ev_setup_data_handler>:
{
    a488:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    a48a:	4b05      	ldr	r3, [pc, #20]	; (a4a0 <ev_setup_data_handler+0x18>)
    a48c:	781a      	ldrb	r2, [r3, #0]
    a48e:	4610      	mov	r0, r2
    a490:	f005 fa21 	bl	f8d6 <ep2bit>
}
    a494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    a498:	4601      	mov	r1, r0
    a49a:	4610      	mov	r0, r2
    a49c:	f7ff bfae 	b.w	a3fc <usbd_ep_data_handler>
    a4a0:	200021ed 	.word	0x200021ed

0000a4a4 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    a4a4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    a4a6:	f7ff fe73 	bl	a190 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a4aa:	4b0c      	ldr	r3, [pc, #48]	; (a4dc <ev_dma_epout8_handler+0x38>)
    a4ac:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    a4b0:	2a03      	cmp	r2, #3
    a4b2:	d010      	beq.n	a4d6 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    a4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    a4b8:	b96b      	cbnz	r3, a4d6 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a4ba:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    a4be:	f7ff ff77 	bl	a3b0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a4c2:	2306      	movs	r3, #6
    a4c4:	f88d 3004 	strb.w	r3, [sp, #4]
    a4c8:	2308      	movs	r3, #8
    a4ca:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    a4ce:	4b04      	ldr	r3, [pc, #16]	; (a4e0 <ev_dma_epout8_handler+0x3c>)
    a4d0:	a801      	add	r0, sp, #4
    a4d2:	681b      	ldr	r3, [r3, #0]
    a4d4:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    a4d6:	b003      	add	sp, #12
    a4d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a4dc:	20001fe8 	.word	0x20001fe8
    a4e0:	20002108 	.word	0x20002108

0000a4e4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a4e4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    a4e6:	f7ff fe53 	bl	a190 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a4ea:	4b10      	ldr	r3, [pc, #64]	; (a52c <ev_dma_epin8_handler+0x48>)
    a4ec:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    a4f0:	2a03      	cmp	r2, #3
    a4f2:	d106      	bne.n	a502 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a4f4:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a4f8:	b003      	add	sp, #12
    a4fa:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a4fe:	f7ff bf57 	b.w	a3b0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a502:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    a506:	b96b      	cbnz	r3, a524 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a508:	f46f 7080 	mvn.w	r0, #256	; 0x100
    a50c:	f7ff ff50 	bl	a3b0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a510:	2306      	movs	r3, #6
    a512:	f88d 3004 	strb.w	r3, [sp, #4]
    a516:	2388      	movs	r3, #136	; 0x88
    a518:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    a51c:	4b04      	ldr	r3, [pc, #16]	; (a530 <ev_dma_epin8_handler+0x4c>)
    a51e:	a801      	add	r0, sp, #4
    a520:	681b      	ldr	r3, [r3, #0]
    a522:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a524:	b003      	add	sp, #12
    a526:	f85d fb04 	ldr.w	pc, [sp], #4
    a52a:	bf00      	nop
    a52c:	20001fe8 	.word	0x20001fe8
    a530:	20002108 	.word	0x20002108

0000a534 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    a534:	4a02      	ldr	r2, [pc, #8]	; (a540 <nrfx_usbd_uninit+0xc>)
    a536:	2300      	movs	r3, #0
    a538:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    a53a:	4a02      	ldr	r2, [pc, #8]	; (a544 <nrfx_usbd_uninit+0x10>)
    a53c:	7013      	strb	r3, [r2, #0]
    return;
}
    a53e:	4770      	bx	lr
    a540:	20002108 	.word	0x20002108
    a544:	200021ec 	.word	0x200021ec

0000a548 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    a548:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    a54a:	4b48      	ldr	r3, [pc, #288]	; (a66c <nrfx_usbd_enable+0x124>)
    a54c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a550:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a554:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    a558:	f7ff fdf8 	bl	a14c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    a55c:	b108      	cbz	r0, a562 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    a55e:	f7ff fe8b 	bl	a278 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    a562:	f005 f972 	bl	f84a <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    a566:	b1c8      	cbz	r0, a59c <nrfx_usbd_enable+0x54>
	__asm__ volatile(
    a568:	f04f 0320 	mov.w	r3, #32
    a56c:	f3ef 8011 	mrs	r0, BASEPRI
    a570:	f383 8812 	msr	BASEPRI_MAX, r3
    a574:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a578:	4b3d      	ldr	r3, [pc, #244]	; (a670 <nrfx_usbd_enable+0x128>)
    a57a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a57e:	22c0      	movs	r2, #192	; 0xc0
    a580:	2900      	cmp	r1, #0
    a582:	d16a      	bne.n	a65a <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a584:	f249 3175 	movw	r1, #37749	; 0x9375
    a588:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    a58c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a590:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a594:	f380 8811 	msr	BASEPRI, r0
    a598:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    a59c:	4b33      	ldr	r3, [pc, #204]	; (a66c <nrfx_usbd_enable+0x124>)
    a59e:	2201      	movs	r2, #1
    a5a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a5a4:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    a5a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    a5ac:	0512      	lsls	r2, r2, #20
    a5ae:	d5fb      	bpl.n	a5a8 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
    a5b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a5b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a5b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    a5bc:	f005 f945 	bl	f84a <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    a5c0:	b1c0      	cbz	r0, a5f4 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
    a5c2:	f04f 0320 	mov.w	r3, #32
    a5c6:	f3ef 8011 	mrs	r0, BASEPRI
    a5ca:	f383 8812 	msr	BASEPRI_MAX, r3
    a5ce:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a5d2:	4b27      	ldr	r3, [pc, #156]	; (a670 <nrfx_usbd_enable+0x128>)
    a5d4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a5d8:	2900      	cmp	r1, #0
    a5da:	d141      	bne.n	a660 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a5dc:	f249 3275 	movw	r2, #37749	; 0x9375
    a5e0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    a5e4:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a5e8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a5ec:	f380 8811 	msr	BASEPRI, r0
    a5f0:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    a5f4:	f7ff fdaa 	bl	a14c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    a5f8:	b130      	cbz	r0, a608 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
    a5fa:	f7ff fe5d 	bl	a2b8 <usbd_errata_187_211_end>
    a5fe:	f7ff fda5 	bl	a14c <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    a602:	b108      	cbz	r0, a608 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
    a604:	f7ff fe38 	bl	a278 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    a608:	f005 f91f 	bl	f84a <nrf52_errata_166>
    a60c:	4b17      	ldr	r3, [pc, #92]	; (a66c <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
    a60e:	b150      	cbz	r0, a626 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    a610:	f240 72e3 	movw	r2, #2019	; 0x7e3
    a614:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    a618:	2240      	movs	r2, #64	; 0x40
    a61a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    a61e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    a622:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    a626:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    a628:	2280      	movs	r2, #128	; 0x80
    a62a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    a62e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a632:	4b10      	ldr	r3, [pc, #64]	; (a674 <nrfx_usbd_enable+0x12c>)
    a634:	f240 12ff 	movw	r2, #511	; 0x1ff
    a638:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    a63a:	4b0f      	ldr	r3, [pc, #60]	; (a678 <nrfx_usbd_enable+0x130>)
    a63c:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    a63e:	f7ff fda7 	bl	a190 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a642:	4b0e      	ldr	r3, [pc, #56]	; (a67c <nrfx_usbd_enable+0x134>)
    a644:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    a646:	4b0e      	ldr	r3, [pc, #56]	; (a680 <nrfx_usbd_enable+0x138>)
    a648:	2202      	movs	r2, #2
    a64a:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    a64c:	f7ff fd7e 	bl	a14c <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    a650:	b150      	cbz	r0, a668 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    a652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    a656:	f7ff be2f 	b.w	a2b8 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    a65a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    a65e:	e799      	b.n	a594 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    a660:	2200      	movs	r2, #0
    a662:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    a666:	e7c1      	b.n	a5ec <nrfx_usbd_enable+0xa4>
}
    a668:	bd08      	pop	{r3, pc}
    a66a:	bf00      	nop
    a66c:	40027000 	.word	0x40027000
    a670:	4006e000 	.word	0x4006e000
    a674:	20001fe4 	.word	0x20001fe4
    a678:	20001f74 	.word	0x20001f74
    a67c:	200021ed 	.word	0x200021ed
    a680:	200021ec 	.word	0x200021ec

0000a684 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    a684:	4b0a      	ldr	r3, [pc, #40]	; (a6b0 <nrfx_usbd_start+0x2c>)
    a686:	2200      	movs	r2, #0
{
    a688:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    a68a:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    a68c:	4a09      	ldr	r2, [pc, #36]	; (a6b4 <nrfx_usbd_start+0x30>)
    a68e:	4b0a      	ldr	r3, [pc, #40]	; (a6b8 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    a690:	4c0a      	ldr	r4, [pc, #40]	; (a6bc <nrfx_usbd_start+0x38>)
    a692:	2800      	cmp	r0, #0
    a694:	bf18      	it	ne
    a696:	4613      	movne	r3, r2
    a698:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    a69c:	2027      	movs	r0, #39	; 0x27
    a69e:	f7fc f8df 	bl	6860 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    a6a2:	2301      	movs	r3, #1
    a6a4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a6a8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    a6ac:	bd10      	pop	{r4, pc}
    a6ae:	bf00      	nop
    a6b0:	200021ea 	.word	0x200021ea
    a6b4:	01e01407 	.word	0x01e01407
    a6b8:	01c01407 	.word	0x01c01407
    a6bc:	40027000 	.word	0x40027000

0000a6c0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    a6c0:	4b03      	ldr	r3, [pc, #12]	; (a6d0 <nrfx_usbd_is_enabled+0x10>)
    a6c2:	7818      	ldrb	r0, [r3, #0]
}
    a6c4:	2801      	cmp	r0, #1
    a6c6:	bf94      	ite	ls
    a6c8:	2000      	movls	r0, #0
    a6ca:	2001      	movhi	r0, #1
    a6cc:	4770      	bx	lr
    a6ce:	bf00      	nop
    a6d0:	200021ec 	.word	0x200021ec

0000a6d4 <nrfx_usbd_init>:
{
    a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    a6d8:	4b1d      	ldr	r3, [pc, #116]	; (a750 <nrfx_usbd_init+0x7c>)
    a6da:	781c      	ldrb	r4, [r3, #0]
    a6dc:	2c00      	cmp	r4, #0
    a6de:	d135      	bne.n	a74c <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    a6e0:	4a1c      	ldr	r2, [pc, #112]	; (a754 <nrfx_usbd_init+0x80>)
    a6e2:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a6e4:	2201      	movs	r2, #1
    a6e6:	701a      	strb	r2, [r3, #0]
    a6e8:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a6ea:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    a6ee:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    a6f0:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a6f4:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    a6f8:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a6fa:	bf14      	ite	ne
    a6fc:	4641      	movne	r1, r8
    a6fe:	2140      	moveq	r1, #64	; 0x40
    a700:	4630      	mov	r0, r6
    a702:	f005 f922 	bl	f94a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    a706:	4630      	mov	r0, r6
    a708:	f7ff fd34 	bl	a174 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    a70c:	3501      	adds	r5, #1
    a70e:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    a710:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    a712:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    a714:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    a716:	d1eb      	bne.n	a6f0 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a718:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    a71a:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a71c:	f240 16ff 	movw	r6, #511	; 0x1ff
    a720:	4620      	mov	r0, r4
    a722:	f005 f912 	bl	f94a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    a726:	4620      	mov	r0, r4
    a728:	f7ff fd24 	bl	a174 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    a72c:	3401      	adds	r4, #1
    a72e:	b2e4      	uxtb	r4, r4
    a730:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    a732:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    a734:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    a736:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    a738:	d102      	bne.n	a740 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    a73a:	4807      	ldr	r0, [pc, #28]	; (a758 <nrfx_usbd_init+0x84>)
}
    a73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a740:	f014 0f08 	tst.w	r4, #8
    a744:	bf14      	ite	ne
    a746:	4631      	movne	r1, r6
    a748:	2140      	moveq	r1, #64	; 0x40
    a74a:	e7e9      	b.n	a720 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    a74c:	4803      	ldr	r0, [pc, #12]	; (a75c <nrfx_usbd_init+0x88>)
    a74e:	e7f5      	b.n	a73c <nrfx_usbd_init+0x68>
    a750:	200021ec 	.word	0x200021ec
    a754:	20002108 	.word	0x20002108
    a758:	0bad0000 	.word	0x0bad0000
    a75c:	0bad0005 	.word	0x0bad0005

0000a760 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    a760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a764:	4605      	mov	r5, r0
	__asm__ volatile(
    a766:	f04f 0320 	mov.w	r3, #32
    a76a:	f3ef 8811 	mrs	r8, BASEPRI
    a76e:	f383 8812 	msr	BASEPRI_MAX, r3
    a772:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    a776:	f010 040f 	ands.w	r4, r0, #15
    a77a:	d103      	bne.n	a784 <nrfx_usbd_ep_transfer+0x24>
    a77c:	4b27      	ldr	r3, [pc, #156]	; (a81c <nrfx_usbd_ep_transfer+0xbc>)
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	4283      	cmp	r3, r0
    a782:	d146      	bne.n	a812 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a784:	4b26      	ldr	r3, [pc, #152]	; (a820 <nrfx_usbd_ep_transfer+0xc0>)
    a786:	4f27      	ldr	r7, [pc, #156]	; (a824 <nrfx_usbd_ep_transfer+0xc4>)
    a788:	681a      	ldr	r2, [r3, #0]
    a78a:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    a78c:	4628      	mov	r0, r5
    a78e:	f005 f8a2 	bl	f8d6 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a792:	43d2      	mvns	r2, r2
    a794:	b292      	uxth	r2, r2
    a796:	f04f 0901 	mov.w	r9, #1
    a79a:	4332      	orrs	r2, r6
    a79c:	fa09 f900 	lsl.w	r9, r9, r0
    a7a0:	ea12 0f09 	tst.w	r2, r9
    a7a4:	d137      	bne.n	a816 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    a7a6:	4628      	mov	r0, r5
    a7a8:	f7ff fce4 	bl	a174 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a7ac:	220c      	movs	r2, #12
    a7ae:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    a7b0:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    a7b2:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    a7b4:	d529      	bpl.n	a80a <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a7b6:	4a1c      	ldr	r2, [pc, #112]	; (a828 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    a7b8:	6808      	ldr	r0, [r1, #0]
    a7ba:	4414      	add	r4, r2
    a7bc:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a7c0:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    a7c2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a7c6:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    a7ca:	d119      	bne.n	a800 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a7cc:	b9b2      	cbnz	r2, a7fc <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    a7ce:	4a17      	ldr	r2, [pc, #92]	; (a82c <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    a7d0:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    a7d2:	c907      	ldmia	r1, {r0, r1, r2}
    a7d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    a7d8:	2200      	movs	r2, #0
    a7da:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    a7dc:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    a7de:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a7e0:	4b13      	ldr	r3, [pc, #76]	; (a830 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    a7e2:	4814      	ldr	r0, [pc, #80]	; (a834 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    a7e4:	ea46 0609 	orr.w	r6, r6, r9
    a7e8:	2280      	movs	r2, #128	; 0x80
    a7ea:	603e      	str	r6, [r7, #0]
    a7ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    a7f0:	f388 8811 	msr	BASEPRI, r8
    a7f4:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    a7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    a7fc:	4a0e      	ldr	r2, [pc, #56]	; (a838 <nrfx_usbd_ep_transfer+0xd8>)
    a7fe:	e7e7      	b.n	a7d0 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a800:	b90a      	cbnz	r2, a806 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    a802:	4a0e      	ldr	r2, [pc, #56]	; (a83c <nrfx_usbd_ep_transfer+0xdc>)
    a804:	e7e4      	b.n	a7d0 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    a806:	4a0e      	ldr	r2, [pc, #56]	; (a840 <nrfx_usbd_ep_transfer+0xe0>)
    a808:	e7e2      	b.n	a7d0 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    a80a:	4a0e      	ldr	r2, [pc, #56]	; (a844 <nrfx_usbd_ep_transfer+0xe4>)
    a80c:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    a80e:	4a0e      	ldr	r2, [pc, #56]	; (a848 <nrfx_usbd_ep_transfer+0xe8>)
    a810:	e7de      	b.n	a7d0 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    a812:	480e      	ldr	r0, [pc, #56]	; (a84c <nrfx_usbd_ep_transfer+0xec>)
    a814:	e7ec      	b.n	a7f0 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    a816:	480e      	ldr	r0, [pc, #56]	; (a850 <nrfx_usbd_ep_transfer+0xf0>)
    a818:	e7ea      	b.n	a7f0 <nrfx_usbd_ep_transfer+0x90>
    a81a:	bf00      	nop
    a81c:	200021ed 	.word	0x200021ed
    a820:	20001fe4 	.word	0x20001fe4
    a824:	20001f74 	.word	0x20001f74
    a828:	20001f78 	.word	0x20001f78
    a82c:	0000f88b 	.word	0x0000f88b
    a830:	e000e100 	.word	0xe000e100
    a834:	0bad0000 	.word	0x0bad0000
    a838:	0000f8ad 	.word	0x0000f8ad
    a83c:	0000a2f9 	.word	0x0000a2f9
    a840:	0000a331 	.word	0x0000a331
    a844:	20001f08 	.word	0x20001f08
    a848:	0000f85d 	.word	0x0000f85d
    a84c:	0bad000a 	.word	0x0bad000a
    a850:	0bad000b 	.word	0x0bad000b

0000a854 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a854:	f010 0f08 	tst.w	r0, #8
    a858:	4b07      	ldr	r3, [pc, #28]	; (a878 <nrfx_usbd_epout_size_get+0x24>)
    a85a:	d006      	beq.n	a86a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    a85c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    a860:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    a864:	bf18      	it	ne
    a866:	2000      	movne	r0, #0
    a868:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a86a:	f000 000f 	and.w	r0, r0, #15
    a86e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    a872:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    a876:	4770      	bx	lr
    a878:	40027000 	.word	0x40027000

0000a87c <usbd_dmareq_process>:
{
    a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    a880:	f8df 815c 	ldr.w	r8, [pc, #348]	; a9e0 <usbd_dmareq_process+0x164>
    a884:	f898 3000 	ldrb.w	r3, [r8]
{
    a888:	b085      	sub	sp, #20
    if (!m_dma_pending)
    a88a:	2b00      	cmp	r3, #0
    a88c:	d16b      	bne.n	a966 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    a88e:	f8df 9154 	ldr.w	r9, [pc, #340]	; a9e4 <usbd_dmareq_process+0x168>
    a892:	4e55      	ldr	r6, [pc, #340]	; (a9e8 <usbd_dmareq_process+0x16c>)
    a894:	f8d9 1000 	ldr.w	r1, [r9]
    a898:	6833      	ldr	r3, [r6, #0]
    a89a:	4019      	ands	r1, r3
    a89c:	d063      	beq.n	a966 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    a89e:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    a8a2:	bf14      	ite	ne
    a8a4:	fa93 f1a3 	rbitne	r1, r3
    a8a8:	fa91 f1a1 	rbiteq	r1, r1
    a8ac:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a8b0:	290f      	cmp	r1, #15
    a8b2:	bf8a      	itet	hi
    a8b4:	f1a1 0410 	subhi.w	r4, r1, #16
    a8b8:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    a8bc:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a8be:	4620      	mov	r0, r4
    a8c0:	f7ff fc58 	bl	a174 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a8c4:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    a8c8:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a8cc:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    a8d0:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a8d4:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a8d6:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    a8da:	da47      	bge.n	a96c <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
    a8dc:	6803      	ldr	r3, [r0, #0]
    a8de:	8982      	ldrh	r2, [r0, #12]
    a8e0:	6841      	ldr	r1, [r0, #4]
    a8e2:	a802      	add	r0, sp, #8
    a8e4:	4798      	blx	r3
                if (!continue_transfer)
    a8e6:	b900      	cbnz	r0, a8ea <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    a8e8:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    a8ea:	f004 ffae 	bl	f84a <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    a8ee:	b118      	cbz	r0, a8f8 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    a8f0:	4b3e      	ldr	r3, [pc, #248]	; (a9ec <usbd_dmareq_process+0x170>)
    a8f2:	2282      	movs	r2, #130	; 0x82
    a8f4:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    a8f8:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    a8fa:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    a8fc:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    a8fe:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    a902:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    a904:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    a908:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    a90a:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    a90e:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    a910:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    a912:	f004 0008 	and.w	r0, r4, #8
    a916:	9902      	ldr	r1, [sp, #8]
    a918:	4b34      	ldr	r3, [pc, #208]	; (a9ec <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a91a:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a91e:	da4f      	bge.n	a9c0 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
    a920:	2800      	cmp	r0, #0
    a922:	d045      	beq.n	a9b0 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
    a924:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    a928:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    a92c:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a92e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a932:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a936:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a93a:	2201      	movs	r2, #1
    a93c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a93e:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a940:	4a2b      	ldr	r2, [pc, #172]	; (a9f0 <usbd_dmareq_process+0x174>)
    a942:	4b2c      	ldr	r3, [pc, #176]	; (a9f4 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a944:	4929      	ldr	r1, [pc, #164]	; (a9ec <usbd_dmareq_process+0x170>)
    a946:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    a94a:	bf38      	it	cc
    a94c:	4613      	movcc	r3, r2
    a94e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a952:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a956:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a95a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    a95c:	b91a      	cbnz	r2, a966 <usbd_dmareq_process+0xea>
    a95e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a962:	2a00      	cmp	r2, #0
    a964:	d0f9      	beq.n	a95a <usbd_dmareq_process+0xde>
}
    a966:	b005      	add	sp, #20
    a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    a96c:	4620      	mov	r0, r4
    a96e:	f7ff ff71 	bl	a854 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    a972:	89aa      	ldrh	r2, [r5, #12]
    a974:	6869      	ldr	r1, [r5, #4]
    a976:	f8d5 c000 	ldr.w	ip, [r5]
    a97a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    a97c:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    a97e:	a802      	add	r0, sp, #8
    a980:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    a982:	9a02      	ldr	r2, [sp, #8]
    a984:	2a00      	cmp	r2, #0
    a986:	d0ae      	beq.n	a8e6 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    a988:	9a03      	ldr	r2, [sp, #12]
    a98a:	4297      	cmp	r7, r2
    a98c:	d9ab      	bls.n	a8e6 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a98e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a990:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a992:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a994:	f7ff fd0c 	bl	a3b0 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a998:	2306      	movs	r3, #6
    a99a:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    a99e:	4b16      	ldr	r3, [pc, #88]	; (a9f8 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a9a0:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    a9a4:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a9a6:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    a9aa:	a801      	add	r0, sp, #4
    a9ac:	4798      	blx	r3
                    continue;
    a9ae:	e771      	b.n	a894 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    a9b0:	2014      	movs	r0, #20
    a9b2:	fb00 3304 	mla	r3, r0, r4, r3
    a9b6:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    a9ba:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    a9be:	e7b5      	b.n	a92c <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
    a9c0:	b128      	cbz	r0, a9ce <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
    a9c2:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    a9c6:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    a9ca:	2328      	movs	r3, #40	; 0x28
    a9cc:	e7af      	b.n	a92e <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
    a9ce:	2014      	movs	r0, #20
    a9d0:	fb00 3304 	mla	r3, r0, r4, r3
    a9d4:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    a9d8:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    a9dc:	e7f5      	b.n	a9ca <usbd_dmareq_process+0x14e>
    a9de:	bf00      	nop
    a9e0:	200021eb 	.word	0x200021eb
    a9e4:	20001f74 	.word	0x20001f74
    a9e8:	20001fe4 	.word	0x20001fe4
    a9ec:	40027000 	.word	0x40027000
    a9f0:	00011036 	.word	0x00011036
    a9f4:	00011024 	.word	0x00011024
    a9f8:	20002108 	.word	0x20002108

0000a9fc <ev_epdata_handler>:
{
    a9fc:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    a9fe:	4b0f      	ldr	r3, [pc, #60]	; (aa3c <ev_epdata_handler+0x40>)
    aa00:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    aa04:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    aa08:	2501      	movs	r5, #1
    while (dataepstatus)
    aa0a:	b91c      	cbnz	r4, aa14 <ev_epdata_handler+0x18>
}
    aa0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    aa10:	f7ff bf34 	b.w	a87c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    aa14:	fa94 f3a4 	rbit	r3, r4
    aa18:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aa1c:	2b0f      	cmp	r3, #15
    aa1e:	bfc8      	it	gt
    aa20:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    aa24:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aa26:	bfd4      	ite	le
    aa28:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    aa2c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    aa2e:	fa05 f303 	lsl.w	r3, r5, r3
    aa32:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    aa36:	f7ff fce1 	bl	a3fc <usbd_ep_data_handler>
    aa3a:	e7e6      	b.n	aa0a <ev_epdata_handler+0xe>
    aa3c:	40027000 	.word	0x40027000

0000aa40 <nrf_usbd_epout_dma_handler>:
{
    aa40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    aa42:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    aa44:	f7ff fba4 	bl	a190 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    aa48:	4620      	mov	r0, r4
    aa4a:	f7ff fb93 	bl	a174 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    aa4e:	7b83      	ldrb	r3, [r0, #14]
    aa50:	2b03      	cmp	r3, #3
    aa52:	d10d      	bne.n	aa70 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    aa54:	4620      	mov	r0, r4
    aa56:	f004 ff3e 	bl	f8d6 <ep2bit>
    aa5a:	2301      	movs	r3, #1
    aa5c:	fa03 f000 	lsl.w	r0, r3, r0
    aa60:	43c0      	mvns	r0, r0
    aa62:	f7ff fca5 	bl	a3b0 <atomic_and.constprop.0.isra.0>
}
    aa66:	b003      	add	sp, #12
    aa68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    aa6c:	f7ff bf06 	b.w	a87c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    aa70:	6805      	ldr	r5, [r0, #0]
    aa72:	2d00      	cmp	r5, #0
    aa74:	d1f7      	bne.n	aa66 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    aa76:	4620      	mov	r0, r4
    aa78:	f004 ff2d 	bl	f8d6 <ep2bit>
    aa7c:	2301      	movs	r3, #1
    aa7e:	fa03 f000 	lsl.w	r0, r3, r0
    aa82:	43c0      	mvns	r0, r0
    aa84:	f7ff fc94 	bl	a3b0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    aa88:	2306      	movs	r3, #6
    aa8a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    aa8e:	4b04      	ldr	r3, [pc, #16]	; (aaa0 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    aa90:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    aa94:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    aa96:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    aa9a:	a801      	add	r0, sp, #4
    aa9c:	4798      	blx	r3
    aa9e:	e7e2      	b.n	aa66 <nrf_usbd_epout_dma_handler+0x26>
    aaa0:	20002108 	.word	0x20002108

0000aaa4 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    aaa4:	4b02      	ldr	r3, [pc, #8]	; (aab0 <nrfx_usbd_ep_stall+0xc>)
    aaa6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    aaaa:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    aaae:	4770      	bx	lr
    aab0:	40027000 	.word	0x40027000

0000aab4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    aab4:	0702      	lsls	r2, r0, #28
    aab6:	d413      	bmi.n	aae0 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    aab8:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    aabc:	f010 0f80 	tst.w	r0, #128	; 0x80
    aac0:	4a08      	ldr	r2, [pc, #32]	; (aae4 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    aac2:	bf0b      	itete	eq
    aac4:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    aac8:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    aacc:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    aad0:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    aad4:	bf08      	it	eq
    aad6:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    aad8:	1e43      	subs	r3, r0, #1
    aada:	4258      	negs	r0, r3
    aadc:	4158      	adcs	r0, r3
    aade:	4770      	bx	lr
        return false;
    aae0:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    aae2:	4770      	bx	lr
    aae4:	40027000 	.word	0x40027000

0000aae8 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    aae8:	4b04      	ldr	r3, [pc, #16]	; (aafc <nrfx_usbd_ep_dtoggle_clear+0x14>)
    aaea:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    aaee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    aaf2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    aaf6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    aafa:	4770      	bx	lr
    aafc:	40027000 	.word	0x40027000

0000ab00 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    ab00:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    ab02:	2208      	movs	r2, #8
    ab04:	2100      	movs	r1, #0
{
    ab06:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    ab08:	f004 fac7 	bl	f09a <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    ab0c:	4b0e      	ldr	r3, [pc, #56]	; (ab48 <nrfx_usbd_setup_get+0x48>)
    ab0e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    ab12:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    ab14:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    ab18:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    ab1a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    ab1e:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    ab22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    ab26:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    ab28:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    ab2c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    ab30:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    ab34:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    ab36:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    ab3a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    ab3e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    ab42:	80e3      	strh	r3, [r4, #6]
}
    ab44:	bd10      	pop	{r4, pc}
    ab46:	bf00      	nop
    ab48:	40027000 	.word	0x40027000

0000ab4c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    ab4c:	4b02      	ldr	r3, [pc, #8]	; (ab58 <nrfx_usbd_setup_data_clear+0xc>)
    ab4e:	2201      	movs	r2, #1
    ab50:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    ab52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    ab54:	4770      	bx	lr
    ab56:	bf00      	nop
    ab58:	40027000 	.word	0x40027000

0000ab5c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    ab5c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    ab5e:	f7ff fb17 	bl	a190 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ab62:	4b10      	ldr	r3, [pc, #64]	; (aba4 <ev_dma_epout0_handler+0x48>)
    ab64:	7b9a      	ldrb	r2, [r3, #14]
    ab66:	2a03      	cmp	r2, #3
    ab68:	d106      	bne.n	ab78 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ab6a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    ab6e:	b002      	add	sp, #8
    ab70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ab74:	f7ff bc1c 	b.w	a3b0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    ab78:	681c      	ldr	r4, [r3, #0]
    ab7a:	b974      	cbnz	r4, ab9a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ab7c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    ab80:	f7ff fc16 	bl	a3b0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    ab84:	2306      	movs	r3, #6
    ab86:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    ab8a:	4b07      	ldr	r3, [pc, #28]	; (aba8 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    ab8c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	a801      	add	r0, sp, #4
    ab94:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    ab96:	b002      	add	sp, #8
    ab98:	bd10      	pop	{r4, pc}
    ab9a:	b002      	add	sp, #8
    ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    aba0:	f7ff bfd4 	b.w	ab4c <nrfx_usbd_setup_data_clear>
    aba4:	20001fe8 	.word	0x20001fe8
    aba8:	20002108 	.word	0x20002108

0000abac <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    abac:	4b02      	ldr	r3, [pc, #8]	; (abb8 <nrfx_usbd_setup_clear+0xc>)
    abae:	2201      	movs	r2, #1
    abb0:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    abb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    abb4:	4770      	bx	lr
    abb6:	bf00      	nop
    abb8:	40027000 	.word	0x40027000

0000abbc <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    abbc:	4b02      	ldr	r3, [pc, #8]	; (abc8 <nrfx_usbd_setup_stall+0xc>)
    abbe:	2201      	movs	r2, #1
    abc0:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    abc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    abc4:	4770      	bx	lr
    abc6:	bf00      	nop
    abc8:	40027000 	.word	0x40027000

0000abcc <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    abcc:	4b01      	ldr	r3, [pc, #4]	; (abd4 <nrfx_usbd_last_setup_dir_get+0x8>)
    abce:	7818      	ldrb	r0, [r3, #0]
    abd0:	4770      	bx	lr
    abd2:	bf00      	nop
    abd4:	200021ed 	.word	0x200021ed

0000abd8 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    abd8:	b510      	push	{r4, lr}
    abda:	4602      	mov	r2, r0
	__asm__ volatile(
    abdc:	f04f 0320 	mov.w	r3, #32
    abe0:	f3ef 8411 	mrs	r4, BASEPRI
    abe4:	f383 8812 	msr	BASEPRI_MAX, r3
    abe8:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    abec:	f004 fe73 	bl	f8d6 <ep2bit>
    abf0:	490d      	ldr	r1, [pc, #52]	; (ac28 <nrfx_usbd_transfer_out_drop+0x50>)
    abf2:	2301      	movs	r3, #1
    abf4:	fa03 f000 	lsl.w	r0, r3, r0
    abf8:	680b      	ldr	r3, [r1, #0]
    abfa:	ea23 0300 	bic.w	r3, r3, r0
    abfe:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    ac00:	f012 0108 	ands.w	r1, r2, #8
    ac04:	d10a      	bne.n	ac1c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    ac06:	f002 030f 	and.w	r3, r2, #15
    ac0a:	009b      	lsls	r3, r3, #2
    ac0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ac10:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    ac14:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    ac18:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    ac1c:	f384 8811 	msr	BASEPRI, r4
    ac20:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    ac24:	bd10      	pop	{r4, pc}
    ac26:	bf00      	nop
    ac28:	20001fe4 	.word	0x20001fe4

0000ac2c <usbd_ep_abort>:
{
    ac2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac2e:	4601      	mov	r1, r0
	__asm__ volatile(
    ac30:	f04f 0320 	mov.w	r3, #32
    ac34:	f3ef 8511 	mrs	r5, BASEPRI
    ac38:	f383 8812 	msr	BASEPRI_MAX, r3
    ac3c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    ac40:	f7ff fa98 	bl	a174 <ep_state_access>
    ac44:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ac46:	4608      	mov	r0, r1
    ac48:	f004 fe45 	bl	f8d6 <ep2bit>
    ac4c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    ac4e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ac52:	fa02 f200 	lsl.w	r2, r2, r0
    ac56:	482e      	ldr	r0, [pc, #184]	; (ad10 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    ac58:	d118      	bne.n	ac8c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ac5a:	6803      	ldr	r3, [r0, #0]
    ac5c:	ea32 0403 	bics.w	r4, r2, r3
    ac60:	d00a      	beq.n	ac78 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    ac62:	4608      	mov	r0, r1
    ac64:	f7ff ffb8 	bl	abd8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    ac68:	2303      	movs	r3, #3
    ac6a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    ac6c:	f385 8811 	msr	BASEPRI, r5
    ac70:	f3bf 8f6f 	isb	sy
}
    ac74:	b003      	add	sp, #12
    ac76:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ac78:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    ac7c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ac7e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    ac80:	4b24      	ldr	r3, [pc, #144]	; (ad14 <usbd_ep_abort+0xe8>)
    ac82:	6818      	ldr	r0, [r3, #0]
    ac84:	ea20 0002 	bic.w	r0, r0, r2
    ac88:	6018      	str	r0, [r3, #0]
    ac8a:	e7ed      	b.n	ac68 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    ac8c:	070b      	lsls	r3, r1, #28
    ac8e:	d415      	bmi.n	acbc <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    ac90:	2980      	cmp	r1, #128	; 0x80
    ac92:	4b21      	ldr	r3, [pc, #132]	; (ad18 <usbd_ep_abort+0xec>)
    ac94:	d02f      	beq.n	acf6 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ac96:	f001 040f 	and.w	r4, r1, #15
    ac9a:	f204 34da 	addw	r4, r4, #986	; 0x3da
    ac9e:	0064      	lsls	r4, r4, #1
    aca0:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    aca4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    aca8:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    acac:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    acae:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    acb2:	433c      	orrs	r4, r7
    acb4:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    acb8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    acbc:	4f15      	ldr	r7, [pc, #84]	; (ad14 <usbd_ep_abort+0xe8>)
    acbe:	6804      	ldr	r4, [r0, #0]
    acc0:	683b      	ldr	r3, [r7, #0]
    acc2:	ea64 0c03 	orn	ip, r4, r3
    acc6:	ea1c 0f02 	tst.w	ip, r2
    acca:	d0cf      	beq.n	ac6c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    accc:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    acce:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    acd2:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    acd4:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    acd6:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    acd8:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    acda:	2303      	movs	r3, #3
    acdc:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    acde:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    ace2:	4b0e      	ldr	r3, [pc, #56]	; (ad1c <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ace4:	f88d 1006 	strb.w	r1, [sp, #6]
    ace8:	2206      	movs	r2, #6
            m_event_handler(&evt);
    acea:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    acec:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    acf0:	a801      	add	r0, sp, #4
    acf2:	4798      	blx	r3
    acf4:	e7ba      	b.n	ac6c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    acf6:	f240 74b4 	movw	r4, #1972	; 0x7b4
    acfa:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    acfe:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ad02:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ad06:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ad08:	f044 0404 	orr.w	r4, r4, #4
    ad0c:	e7d1      	b.n	acb2 <usbd_ep_abort+0x86>
    ad0e:	bf00      	nop
    ad10:	20001f74 	.word	0x20001f74
    ad14:	20001fe4 	.word	0x20001fe4
    ad18:	40027000 	.word	0x40027000
    ad1c:	20002108 	.word	0x20002108

0000ad20 <ev_setup_handler>:
{
    ad20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    ad22:	4b17      	ldr	r3, [pc, #92]	; (ad80 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    ad24:	4c17      	ldr	r4, [pc, #92]	; (ad84 <ev_setup_handler+0x64>)
    ad26:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    ad2a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    ad2c:	4e16      	ldr	r6, [pc, #88]	; (ad88 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    ad2e:	43da      	mvns	r2, r3
    ad30:	4b16      	ldr	r3, [pc, #88]	; (ad8c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    ad32:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    ad34:	681b      	ldr	r3, [r3, #0]
    ad36:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    ad38:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    ad3a:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    ad3c:	f004 fdcb 	bl	f8d6 <ep2bit>
    ad40:	2301      	movs	r3, #1
    ad42:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    ad44:	4213      	tst	r3, r2
    ad46:	d002      	beq.n	ad4e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    ad48:	4608      	mov	r0, r1
    ad4a:	f7ff ff6f 	bl	ac2c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    ad4e:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    ad52:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    ad56:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    ad58:	f7ff fb2a 	bl	a3b0 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    ad5c:	6823      	ldr	r3, [r4, #0]
    ad5e:	f043 0301 	orr.w	r3, r3, #1
    ad62:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    ad64:	2300      	movs	r3, #0
    ad66:	f8ad 3005 	strh.w	r3, [sp, #5]
    ad6a:	f88d 3007 	strb.w	r3, [sp, #7]
    ad6e:	2305      	movs	r3, #5
    ad70:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    ad74:	4b06      	ldr	r3, [pc, #24]	; (ad90 <ev_setup_handler+0x70>)
    ad76:	a801      	add	r0, sp, #4
    ad78:	681b      	ldr	r3, [r3, #0]
    ad7a:	4798      	blx	r3
}
    ad7c:	b002      	add	sp, #8
    ad7e:	bd70      	pop	{r4, r5, r6, pc}
    ad80:	40027000 	.word	0x40027000
    ad84:	20001fe4 	.word	0x20001fe4
    ad88:	200021ed 	.word	0x200021ed
    ad8c:	20001f74 	.word	0x20001f74
    ad90:	20002108 	.word	0x20002108

0000ad94 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    ad94:	4b1b      	ldr	r3, [pc, #108]	; (ae04 <nrfx_usbd_irq_handler+0x70>)
    ad96:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    ad9a:	2300      	movs	r3, #0
{
    ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    ada0:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    ada2:	461d      	mov	r5, r3
    while (to_process)
    ada4:	b970      	cbnz	r0, adc4 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    ada6:	4f18      	ldr	r7, [pc, #96]	; (ae08 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    ada8:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    adac:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    adb0:	f04f 0801 	mov.w	r8, #1
    while (active)
    adb4:	b9bc      	cbnz	r4, ade6 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    adb6:	f7ff fd61 	bl	a87c <usbd_dmareq_process>
    if (setup_active)
    adba:	b306      	cbz	r6, adfe <nrfx_usbd_irq_handler+0x6a>
}
    adbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    adc0:	f7ff bfae 	b.w	ad20 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    adc4:	fa90 f2a0 	rbit	r2, r0
    adc8:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    adcc:	490f      	ldr	r1, [pc, #60]	; (ae0c <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    adce:	0096      	lsls	r6, r2, #2
    add0:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    add2:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    add6:	680e      	ldr	r6, [r1, #0]
    if (ret)
    add8:	b116      	cbz	r6, ade0 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    adda:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    addc:	6809      	ldr	r1, [r1, #0]
    adde:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    ade0:	ea20 0002 	bic.w	r0, r0, r2
    ade4:	e7de      	b.n	ada4 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    ade6:	fa94 f5a4 	rbit	r5, r4
    adea:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    adee:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    adf2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    adf6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    adf8:	ea24 0405 	bic.w	r4, r4, r5
    adfc:	e7da      	b.n	adb4 <nrfx_usbd_irq_handler+0x20>
}
    adfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae02:	bf00      	nop
    ae04:	40027000 	.word	0x40027000
    ae08:	00010f94 	.word	0x00010f94
    ae0c:	40027100 	.word	0x40027100

0000ae10 <usbd_ep_abort_all>:
{
    ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    ae12:	4e11      	ldr	r6, [pc, #68]	; (ae58 <usbd_ep_abort_all+0x48>)
    ae14:	4b11      	ldr	r3, [pc, #68]	; (ae5c <usbd_ep_abort_all+0x4c>)
    ae16:	6834      	ldr	r4, [r6, #0]
    ae18:	681b      	ldr	r3, [r3, #0]
    ae1a:	0c24      	lsrs	r4, r4, #16
    ae1c:	0424      	lsls	r4, r4, #16
    ae1e:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    ae20:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    ae22:	b91c      	cbnz	r4, ae2c <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    ae24:	f240 13ff 	movw	r3, #511	; 0x1ff
    ae28:	6033      	str	r3, [r6, #0]
}
    ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    ae2c:	fa94 f5a4 	rbit	r5, r4
    ae30:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ae34:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    ae36:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ae38:	bfc6      	itte	gt
    ae3a:	f1a5 0010 	subgt.w	r0, r5, #16
    ae3e:	b2c0      	uxtbgt	r0, r0
    ae40:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    ae44:	0703      	lsls	r3, r0, #28
    ae46:	d401      	bmi.n	ae4c <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    ae48:	f7ff fef0 	bl	ac2c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    ae4c:	fa07 f505 	lsl.w	r5, r7, r5
    ae50:	ea24 0405 	bic.w	r4, r4, r5
    ae54:	e7e5      	b.n	ae22 <usbd_ep_abort_all+0x12>
    ae56:	bf00      	nop
    ae58:	20001fe4 	.word	0x20001fe4
    ae5c:	20001f74 	.word	0x20001f74

0000ae60 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ae60:	4b0c      	ldr	r3, [pc, #48]	; (ae94 <nrfx_usbd_stop+0x34>)
    ae62:	2280      	movs	r2, #128	; 0x80
{
    ae64:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    ae66:	2027      	movs	r0, #39	; 0x27
    ae68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    ae6c:	f7fb fd1c 	bl	68a8 <arch_irq_is_enabled>
    ae70:	b170      	cbz	r0, ae90 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    ae72:	4c09      	ldr	r4, [pc, #36]	; (ae98 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    ae74:	f7ff ffcc 	bl	ae10 <usbd_ep_abort_all>
    ae78:	2300      	movs	r3, #0
    ae7a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    ae7e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    ae80:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    ae84:	f7fb fcfc 	bl	6880 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    ae88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ae8c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    ae90:	bd10      	pop	{r4, pc}
    ae92:	bf00      	nop
    ae94:	e000e100 	.word	0xe000e100
    ae98:	40027000 	.word	0x40027000

0000ae9c <nrfx_usbd_disable>:
{
    ae9c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    ae9e:	f7ff ffdf 	bl	ae60 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    aea2:	4b08      	ldr	r3, [pc, #32]	; (aec4 <nrfx_usbd_disable+0x28>)
    aea4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    aea8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    aeac:	2200      	movs	r2, #0
    aeae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    aeb2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    aeb6:	f7ff f96b 	bl	a190 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    aeba:	4b03      	ldr	r3, [pc, #12]	; (aec8 <nrfx_usbd_disable+0x2c>)
    aebc:	2201      	movs	r2, #1
    aebe:	701a      	strb	r2, [r3, #0]
}
    aec0:	bd08      	pop	{r3, pc}
    aec2:	bf00      	nop
    aec4:	40027000 	.word	0x40027000
    aec8:	200021ec 	.word	0x200021ec

0000aecc <nrfx_usbd_suspend>:
{
    aecc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    aece:	f04f 0320 	mov.w	r3, #32
    aed2:	f3ef 8511 	mrs	r5, BASEPRI
    aed6:	f383 8812 	msr	BASEPRI_MAX, r3
    aeda:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    aede:	4b11      	ldr	r3, [pc, #68]	; (af24 <nrfx_usbd_suspend+0x58>)
    aee0:	781b      	ldrb	r3, [r3, #0]
    aee2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    aee6:	b933      	cbnz	r3, aef6 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    aee8:	2400      	movs	r4, #0
	__asm__ volatile(
    aeea:	f385 8811 	msr	BASEPRI, r5
    aeee:	f3bf 8f6f 	isb	sy
}
    aef2:	4620      	mov	r0, r4
    aef4:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    aef6:	f7ff ff8b 	bl	ae10 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    aefa:	4b0b      	ldr	r3, [pc, #44]	; (af28 <nrfx_usbd_suspend+0x5c>)
    aefc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    af00:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    af04:	d1f0      	bne.n	aee8 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    af06:	2101      	movs	r1, #1
    af08:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    af0c:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    af10:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    af14:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    af16:	bf42      	ittt	mi
    af18:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    af1c:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    af20:	4614      	movmi	r4, r2
}
    af22:	e7e2      	b.n	aeea <nrfx_usbd_suspend+0x1e>
    af24:	200021ea 	.word	0x200021ea
    af28:	40027000 	.word	0x40027000

0000af2c <nrfx_usbd_ep_disable>:
{
    af2c:	b510      	push	{r4, lr}
    af2e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    af30:	f7ff fe7c 	bl	ac2c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    af34:	4a10      	ldr	r2, [pc, #64]	; (af78 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    af36:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    af3a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    af3e:	f04f 0301 	mov.w	r3, #1
    af42:	bf14      	ite	ne
    af44:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    af48:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    af4c:	fa03 f300 	lsl.w	r3, r3, r0
    af50:	ea6f 0303 	mvn.w	r3, r3
    af54:	bf15      	itete	ne
    af56:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    af58:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    af5a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    af5e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    af62:	bf14      	ite	ne
    af64:	4b05      	ldrne	r3, [pc, #20]	; (af7c <nrfx_usbd_ep_disable+0x50>)
    af66:	4b06      	ldreq	r3, [pc, #24]	; (af80 <nrfx_usbd_ep_disable+0x54>)
    af68:	5c1a      	ldrb	r2, [r3, r0]
    af6a:	2301      	movs	r3, #1
    af6c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    af6e:	4a02      	ldr	r2, [pc, #8]	; (af78 <nrfx_usbd_ep_disable+0x4c>)
    af70:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    af74:	bd10      	pop	{r4, pc}
    af76:	bf00      	nop
    af78:	40027000 	.word	0x40027000
    af7c:	00012f14 	.word	0x00012f14
    af80:	00012f1d 	.word	0x00012f1d

0000af84 <nrfx_usbd_ep_enable>:
{
    af84:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    af86:	b243      	sxtb	r3, r0
    af88:	2b00      	cmp	r3, #0
    af8a:	4b23      	ldr	r3, [pc, #140]	; (b018 <nrfx_usbd_ep_enable+0x94>)
    af8c:	4a23      	ldr	r2, [pc, #140]	; (b01c <nrfx_usbd_ep_enable+0x98>)
    af8e:	bfa8      	it	ge
    af90:	461a      	movge	r2, r3
    af92:	f000 030f 	and.w	r3, r0, #15
    af96:	f04f 0401 	mov.w	r4, #1
    af9a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    af9c:	4a20      	ldr	r2, [pc, #128]	; (b020 <nrfx_usbd_ep_enable+0x9c>)
    af9e:	fa04 f101 	lsl.w	r1, r4, r1
{
    afa2:	4605      	mov	r5, r0
    afa4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    afa8:	da0c      	bge.n	afc4 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    afaa:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    afae:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    afb0:	07c8      	lsls	r0, r1, #31
    afb2:	d406      	bmi.n	afc2 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    afb4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    afb8:	fa04 f303 	lsl.w	r3, r4, r3
    afbc:	4303      	orrs	r3, r0
    afbe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    afc2:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    afc4:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    afc8:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    afca:	07c9      	lsls	r1, r1, #31
    afcc:	d4f9      	bmi.n	afc2 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    afce:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    afd2:	fa04 f103 	lsl.w	r1, r4, r3
    afd6:	4331      	orrs	r1, r6
    afd8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    afdc:	2b00      	cmp	r3, #0
    afde:	d0f0      	beq.n	afc2 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    afe0:	0703      	lsls	r3, r0, #28
    afe2:	d4ee      	bmi.n	afc2 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    afe4:	f04f 0320 	mov.w	r3, #32
    afe8:	f3ef 8611 	mrs	r6, BASEPRI
    afec:	f383 8812 	msr	BASEPRI_MAX, r3
    aff0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    aff4:	f7ff fdf0 	bl	abd8 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    aff8:	4628      	mov	r0, r5
    affa:	f004 fc6c 	bl	f8d6 <ep2bit>
    affe:	4a09      	ldr	r2, [pc, #36]	; (b024 <nrfx_usbd_ep_enable+0xa0>)
    b000:	6813      	ldr	r3, [r2, #0]
    b002:	fa04 f000 	lsl.w	r0, r4, r0
    b006:	ea23 0000 	bic.w	r0, r3, r0
    b00a:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    b00c:	f386 8811 	msr	BASEPRI, r6
    b010:	f3bf 8f6f 	isb	sy
}
    b014:	e7d5      	b.n	afc2 <nrfx_usbd_ep_enable+0x3e>
    b016:	bf00      	nop
    b018:	00012f1d 	.word	0x00012f1d
    b01c:	00012f14 	.word	0x00012f14
    b020:	40027000 	.word	0x40027000
    b024:	20001f74 	.word	0x20001f74

0000b028 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    b028:	0603      	lsls	r3, r0, #24
{
    b02a:	b510      	push	{r4, lr}
    b02c:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    b02e:	d405      	bmi.n	b03c <nrfx_usbd_ep_stall_clear+0x14>
    b030:	f7ff fd40 	bl	aab4 <nrfx_usbd_ep_stall_check>
    b034:	b110      	cbz	r0, b03c <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    b036:	4620      	mov	r0, r4
    b038:	f7ff fdce 	bl	abd8 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    b03c:	4b01      	ldr	r3, [pc, #4]	; (b044 <nrfx_usbd_ep_stall_clear+0x1c>)
    b03e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    b042:	bd10      	pop	{r4, pc}
    b044:	40027000 	.word	0x40027000

0000b048 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    b048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    b04c:	f8df a048 	ldr.w	sl, [pc, #72]	; b098 <device_visitor+0x50>
    b050:	4d12      	ldr	r5, [pc, #72]	; (b09c <device_visitor+0x54>)
    b052:	469b      	mov	fp, r3
    b054:	eba5 050a 	sub.w	r5, r5, sl
    b058:	4b11      	ldr	r3, [pc, #68]	; (b0a0 <device_visitor+0x58>)
    b05a:	10ed      	asrs	r5, r5, #3
    b05c:	4680      	mov	r8, r0
    b05e:	460f      	mov	r7, r1
    b060:	4691      	mov	r9, r2
    b062:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    b064:	2600      	movs	r6, #0
    b066:	42be      	cmp	r6, r7
    b068:	d102      	bne.n	b070 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    b06a:	4630      	mov	r0, r6
}
    b06c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    b070:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    b074:	2c00      	cmp	r4, #0
    b076:	dd0d      	ble.n	b094 <device_visitor+0x4c>
    b078:	42a5      	cmp	r5, r4
    b07a:	d30b      	bcc.n	b094 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    b07c:	3c01      	subs	r4, #1
    b07e:	b224      	sxth	r4, r4
    b080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b084:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
    b088:	4659      	mov	r1, fp
    b08a:	47c8      	blx	r9
		if (rc < 0) {
    b08c:	2800      	cmp	r0, #0
    b08e:	dbed      	blt.n	b06c <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    b090:	3601      	adds	r6, #1
    b092:	e7e8      	b.n	b066 <device_visitor+0x1e>
	const struct device *dev = NULL;
    b094:	2000      	movs	r0, #0
    b096:	e7f7      	b.n	b088 <device_visitor+0x40>
    b098:	000103e0 	.word	0x000103e0
    b09c:	00010458 	.word	0x00010458
    b0a0:	aaaaaaab 	.word	0xaaaaaaab

0000b0a4 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b0a4:	4b0e      	ldr	r3, [pc, #56]	; (b0e0 <z_sys_init_run_level+0x3c>)
{
    b0a6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b0a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b0ac:	3001      	adds	r0, #1
    b0ae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    b0b2:	42a6      	cmp	r6, r4
    b0b4:	d800      	bhi.n	b0b8 <z_sys_init_run_level+0x14>
}
    b0b6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    b0b8:	e9d4 3500 	ldrd	r3, r5, [r4]
    b0bc:	4628      	mov	r0, r5
    b0be:	4798      	blx	r3
		if (dev != NULL) {
    b0c0:	b165      	cbz	r5, b0dc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    b0c2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    b0c4:	b130      	cbz	r0, b0d4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    b0c6:	2800      	cmp	r0, #0
    b0c8:	bfb8      	it	lt
    b0ca:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    b0cc:	28ff      	cmp	r0, #255	; 0xff
    b0ce:	bfa8      	it	ge
    b0d0:	20ff      	movge	r0, #255	; 0xff
    b0d2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    b0d4:	785a      	ldrb	r2, [r3, #1]
    b0d6:	f042 0201 	orr.w	r2, r2, #1
    b0da:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b0dc:	3408      	adds	r4, #8
    b0de:	e7e8      	b.n	b0b2 <z_sys_init_run_level+0xe>
    b0e0:	00010ff8 	.word	0x00010ff8

0000b0e4 <z_device_get_all_static>:
	*devices = __device_start;
    b0e4:	4a03      	ldr	r2, [pc, #12]	; (b0f4 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    b0e6:	4b04      	ldr	r3, [pc, #16]	; (b0f8 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    b0e8:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    b0ea:	1a9b      	subs	r3, r3, r2
}
    b0ec:	4803      	ldr	r0, [pc, #12]	; (b0fc <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    b0ee:	10db      	asrs	r3, r3, #3
}
    b0f0:	4358      	muls	r0, r3
    b0f2:	4770      	bx	lr
    b0f4:	000103e0 	.word	0x000103e0
    b0f8:	00010458 	.word	0x00010458
    b0fc:	aaaaaaab 	.word	0xaaaaaaab

0000b100 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    b100:	4b01      	ldr	r3, [pc, #4]	; (b108 <z_impl_z_errno+0x8>)
    b102:	6898      	ldr	r0, [r3, #8]
}
    b104:	3098      	adds	r0, #152	; 0x98
    b106:	4770      	bx	lr
    b108:	2000214c 	.word	0x2000214c

0000b10c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    b10c:	b510      	push	{r4, lr}
    b10e:	4604      	mov	r4, r0
    b110:	b088      	sub	sp, #32
	z_impl_log_panic();
    b112:	f7f7 fa1d 	bl	2550 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    b116:	4809      	ldr	r0, [pc, #36]	; (b13c <k_sys_fatal_error_handler+0x30>)
    b118:	6803      	ldr	r3, [r0, #0]
    b11a:	075b      	lsls	r3, r3, #29
    b11c:	d00a      	beq.n	b134 <k_sys_fatal_error_handler+0x28>
    b11e:	4b08      	ldr	r3, [pc, #32]	; (b140 <k_sys_fatal_error_handler+0x34>)
    b120:	9306      	str	r3, [sp, #24]
    b122:	2302      	movs	r3, #2
    b124:	9301      	str	r3, [sp, #4]
    b126:	9305      	str	r3, [sp, #20]
    b128:	2300      	movs	r3, #0
    b12a:	aa05      	add	r2, sp, #20
    b12c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b130:	f002 fbdd 	bl	d8ee <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
    b134:	4620      	mov	r0, r4
    b136:	f004 fc6d 	bl	fa14 <arch_system_halt>
    b13a:	bf00      	nop
    b13c:	20000230 	.word	0x20000230
    b140:	00012f26 	.word	0x00012f26

0000b144 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b148:	4605      	mov	r5, r0
    b14a:	b08e      	sub	sp, #56	; 0x38
    b14c:	460e      	mov	r6, r1
	__asm__ volatile(
    b14e:	f04f 0320 	mov.w	r3, #32
    b152:	f3ef 8811 	mrs	r8, BASEPRI
    b156:	f383 8812 	msr	BASEPRI_MAX, r3
    b15a:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    b15e:	4f2b      	ldr	r7, [pc, #172]	; (b20c <z_fatal_error+0xc8>)
	return z_impl_z_current_get();
    b160:	f001 f85c 	bl	c21c <z_impl_z_current_get>
    b164:	683b      	ldr	r3, [r7, #0]
    b166:	0759      	lsls	r1, r3, #29
    b168:	4604      	mov	r4, r0
    b16a:	d04c      	beq.n	b206 <z_fatal_error+0xc2>
	switch (reason) {
    b16c:	2d04      	cmp	r5, #4
    b16e:	bf96      	itet	ls
    b170:	4b27      	ldrls	r3, [pc, #156]	; (b210 <z_fatal_error+0xcc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    b172:	4a28      	ldrhi	r2, [pc, #160]	; (b214 <z_fatal_error+0xd0>)
	return 0;
    b174:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    b178:	4924      	ldr	r1, [pc, #144]	; (b20c <z_fatal_error+0xc8>)
    b17a:	9502      	str	r5, [sp, #8]
    b17c:	2300      	movs	r3, #0
    b17e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    b182:	4a25      	ldr	r2, [pc, #148]	; (b218 <z_fatal_error+0xd4>)
    b184:	4618      	mov	r0, r3
    b186:	e9cd 3200 	strd	r3, r2, [sp]
    b18a:	2201      	movs	r2, #1
    b18c:	f004 fc33 	bl	f9f6 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    b190:	b196      	cbz	r6, b1b8 <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    b192:	69f3      	ldr	r3, [r6, #28]
    b194:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b198:	b173      	cbz	r3, b1b8 <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
    b19a:	683b      	ldr	r3, [r7, #0]
    b19c:	075a      	lsls	r2, r3, #29
    b19e:	d01b      	beq.n	b1d8 <z_fatal_error+0x94>
    b1a0:	4b1e      	ldr	r3, [pc, #120]	; (b21c <z_fatal_error+0xd8>)
    b1a2:	930c      	str	r3, [sp, #48]	; 0x30
    b1a4:	2302      	movs	r3, #2
    b1a6:	9307      	str	r3, [sp, #28]
    b1a8:	930b      	str	r3, [sp, #44]	; 0x2c
    b1aa:	4818      	ldr	r0, [pc, #96]	; (b20c <z_fatal_error+0xc8>)
    b1ac:	2300      	movs	r3, #0
    b1ae:	aa0b      	add	r2, sp, #44	; 0x2c
    b1b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b1b4:	f002 fb9b 	bl	d8ee <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    b1b8:	683b      	ldr	r3, [r7, #0]
    b1ba:	075b      	lsls	r3, r3, #29
    b1bc:	d00c      	beq.n	b1d8 <z_fatal_error+0x94>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    b1be:	b9cc      	cbnz	r4, b1f4 <z_fatal_error+0xb0>
		thread_name = "unknown";
    b1c0:	4817      	ldr	r0, [pc, #92]	; (b220 <z_fatal_error+0xdc>)
	LOG_ERR("Current thread: %p (%s)", thread,
    b1c2:	4b18      	ldr	r3, [pc, #96]	; (b224 <z_fatal_error+0xe0>)
    b1c4:	9301      	str	r3, [sp, #4]
    b1c6:	2300      	movs	r3, #0
    b1c8:	e9cd 4002 	strd	r4, r0, [sp, #8]
    b1cc:	490f      	ldr	r1, [pc, #60]	; (b20c <z_fatal_error+0xc8>)
    b1ce:	9300      	str	r3, [sp, #0]
    b1d0:	2201      	movs	r2, #1
    b1d2:	4618      	mov	r0, r3
    b1d4:	f004 fc0f 	bl	f9f6 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    b1d8:	4631      	mov	r1, r6
    b1da:	4628      	mov	r0, r5
    b1dc:	f7ff ff96 	bl	b10c <k_sys_fatal_error_handler>
	__asm__ volatile(
    b1e0:	f388 8811 	msr	BASEPRI, r8
    b1e4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    b1e8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    b1ea:	b00e      	add	sp, #56	; 0x38
    b1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b1f0:	f7fb bfee 	b.w	71d0 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    b1f4:	4620      	mov	r0, r4
    b1f6:	f004 fc46 	bl	fa86 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d0e0      	beq.n	b1c0 <z_fatal_error+0x7c>
    b1fe:	7803      	ldrb	r3, [r0, #0]
    b200:	2b00      	cmp	r3, #0
    b202:	d0dd      	beq.n	b1c0 <z_fatal_error+0x7c>
    b204:	e7dd      	b.n	b1c2 <z_fatal_error+0x7e>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    b206:	2e00      	cmp	r6, #0
    b208:	d1c3      	bne.n	b192 <z_fatal_error+0x4e>
    b20a:	e7e5      	b.n	b1d8 <z_fatal_error+0x94>
    b20c:	20000230 	.word	0x20000230
    b210:	00011010 	.word	0x00011010
    b214:	00012f35 	.word	0x00012f35
    b218:	00012f43 	.word	0x00012f43
    b21c:	00012f6b 	.word	0x00012f6b
    b220:	00012c87 	.word	0x00012c87
    b224:	00012f8c 	.word	0x00012f8c

0000b228 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    b228:	b570      	push	{r4, r5, r6, lr}
    b22a:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    b22c:	ae06      	add	r6, sp, #24
{
    b22e:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
    b230:	4603      	mov	r3, r0
    b232:	4a13      	ldr	r2, [pc, #76]	; (b280 <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
    b234:	4d13      	ldr	r5, [pc, #76]	; (b284 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
    b236:	2108      	movs	r1, #8
    b238:	4630      	mov	r0, r6
    b23a:	f001 fba2 	bl	c982 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
    b23e:	23b8      	movs	r3, #184	; 0xb8
    b240:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    b244:	2201      	movs	r2, #1
    b246:	230f      	movs	r3, #15
    b248:	e9cd 3203 	strd	r3, r2, [sp, #12]
    b24c:	2300      	movs	r3, #0
    b24e:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b252:	4b0d      	ldr	r3, [pc, #52]	; (b288 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
    b254:	490d      	ldr	r1, [pc, #52]	; (b28c <init_idle_thread+0x64>)
    b256:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b258:	2218      	movs	r2, #24
    b25a:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
    b25e:	f44f 70b0 	mov.w	r0, #352	; 0x160
    b262:	9300      	str	r3, [sp, #0]
    b264:	fb00 1104 	mla	r1, r0, r4, r1
    b268:	4b09      	ldr	r3, [pc, #36]	; (b290 <init_idle_thread+0x68>)
    b26a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b26e:	4628      	mov	r0, r5
    b270:	f000 f97c 	bl	b56c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b274:	7b6b      	ldrb	r3, [r5, #13]
    b276:	f023 0304 	bic.w	r3, r3, #4
    b27a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    b27c:	b008      	add	sp, #32
    b27e:	bd70      	pop	{r4, r5, r6, pc}
    b280:	00012fee 	.word	0x00012fee
    b284:	20000d58 	.word	0x20000d58
    b288:	2000214c 	.word	0x2000214c
    b28c:	200039a0 	.word	0x200039a0
    b290:	0000b74d 	.word	0x0000b74d

0000b294 <bg_thread_main>:
{
    b294:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    b296:	4b0a      	ldr	r3, [pc, #40]	; (b2c0 <bg_thread_main+0x2c>)
    b298:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b29a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    b29c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b29e:	f7ff ff01 	bl	b0a4 <z_sys_init_run_level>
	boot_banner();
    b2a2:	f004 ffef 	bl	10284 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    b2a6:	2003      	movs	r0, #3
    b2a8:	f7ff fefc 	bl	b0a4 <z_sys_init_run_level>
	z_init_static_threads();
    b2ac:	f000 f9f2 	bl	b694 <z_init_static_threads>
	main();
    b2b0:	f7f6 f894 	bl	13dc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    b2b4:	4a03      	ldr	r2, [pc, #12]	; (b2c4 <bg_thread_main+0x30>)
    b2b6:	7b13      	ldrb	r3, [r2, #12]
    b2b8:	f023 0301 	bic.w	r3, r3, #1
    b2bc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    b2be:	bd08      	pop	{r3, pc}
    b2c0:	200021ee 	.word	0x200021ee
    b2c4:	20000e10 	.word	0x20000e10

0000b2c8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    b2c8:	4802      	ldr	r0, [pc, #8]	; (b2d4 <z_bss_zero+0xc>)
    b2ca:	4a03      	ldr	r2, [pc, #12]	; (b2d8 <z_bss_zero+0x10>)
    b2cc:	2100      	movs	r1, #0
    b2ce:	1a12      	subs	r2, r2, r0
    b2d0:	f003 bee3 	b.w	f09a <memset>
    b2d4:	200003d0 	.word	0x200003d0
    b2d8:	200021f0 	.word	0x200021f0

0000b2dc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    b2dc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    b2de:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b3a8 <z_cstart+0xcc>
    b2e2:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b2e4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    b2e8:	4d30      	ldr	r5, [pc, #192]	; (b3ac <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    b2ea:	4e31      	ldr	r6, [pc, #196]	; (b3b0 <z_cstart+0xd4>)
    b2ec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b2ee:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b3b4 <z_cstart+0xd8>
    b2f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2f6:	2400      	movs	r4, #0
    b2f8:	616b      	str	r3, [r5, #20]
    b2fa:	23e0      	movs	r3, #224	; 0xe0
    b2fc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    b300:	77ec      	strb	r4, [r5, #31]
    b302:	762c      	strb	r4, [r5, #24]
    b304:	766c      	strb	r4, [r5, #25]
    b306:	76ac      	strb	r4, [r5, #26]
    b308:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b30c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b30e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b312:	626b      	str	r3, [r5, #36]	; 0x24
    b314:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b318:	f7fb ff1e 	bl	7158 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b31c:	f7fb fa14 	bl	6748 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b324:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b326:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b328:	f7fc f81e 	bl	7368 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b32c:	f7fb ff62 	bl	71f4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    b330:	f7f6 fffa 	bl	2328 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    b334:	f240 1301 	movw	r3, #257	; 0x101
    b338:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    b33c:	ab06      	add	r3, sp, #24
    b33e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    b340:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
    b344:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b346:	f004 fb33 	bl	f9b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b34a:	4620      	mov	r0, r4
    b34c:	f7ff feaa 	bl	b0a4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b350:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    b352:	4d19      	ldr	r5, [pc, #100]	; (b3b8 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b354:	f7ff fea6 	bl	b0a4 <z_sys_init_run_level>
	z_sched_init();
    b358:	f000 feb2 	bl	c0c0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b35c:	4b17      	ldr	r3, [pc, #92]	; (b3bc <z_cstart+0xe0>)
    b35e:	9305      	str	r3, [sp, #20]
    b360:	2301      	movs	r3, #1
    b362:	4917      	ldr	r1, [pc, #92]	; (b3c0 <z_cstart+0xe4>)
    b364:	9400      	str	r4, [sp, #0]
    b366:	e9cd 4303 	strd	r4, r3, [sp, #12]
    b36a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b36e:	464b      	mov	r3, r9
    b370:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b374:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    b376:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b378:	f000 f8f8 	bl	b56c <z_setup_new_thread>
    b37c:	7b6a      	ldrb	r2, [r5, #13]
    b37e:	4607      	mov	r7, r0
    b380:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    b384:	4628      	mov	r0, r5
    b386:	736a      	strb	r2, [r5, #13]
    b388:	f004 fcc7 	bl	fd1a <z_ready_thread>
		init_idle_thread(i);
    b38c:	4620      	mov	r0, r4
    b38e:	f7ff ff4b 	bl	b228 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    b392:	4b0c      	ldr	r3, [pc, #48]	; (b3c4 <z_cstart+0xe8>)
    b394:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b396:	464a      	mov	r2, r9
    b398:	4639      	mov	r1, r7
    b39a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    b39c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    b39e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b3a2:	f7fb fb5b 	bl	6a5c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b3a6:	bf00      	nop
    b3a8:	20004320 	.word	0x20004320
    b3ac:	e000ed00 	.word	0xe000ed00
    b3b0:	2000214c 	.word	0x2000214c
    b3b4:	0000b295 	.word	0x0000b295
    b3b8:	20000e10 	.word	0x20000e10
    b3bc:	00012ff8 	.word	0x00012ff8
    b3c0:	20003580 	.word	0x20003580
    b3c4:	20000d58 	.word	0x20000d58

0000b3c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    b3c8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b3ca:	4b0e      	ldr	r3, [pc, #56]	; (b404 <init_mem_slab_module+0x3c>)
    b3cc:	4c0e      	ldr	r4, [pc, #56]	; (b408 <init_mem_slab_module+0x40>)
    b3ce:	42a3      	cmp	r3, r4
    b3d0:	d301      	bcc.n	b3d6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    b3d2:	2000      	movs	r0, #0
	return rc;
}
    b3d4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b3d6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    b3da:	ea41 0200 	orr.w	r2, r1, r0
    b3de:	f012 0203 	ands.w	r2, r2, #3
    b3e2:	d10b      	bne.n	b3fc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    b3e4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    b3e6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b3e8:	42aa      	cmp	r2, r5
    b3ea:	d101      	bne.n	b3f0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b3ec:	331c      	adds	r3, #28
    b3ee:	e7ee      	b.n	b3ce <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    b3f0:	695e      	ldr	r6, [r3, #20]
    b3f2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    b3f4:	3201      	adds	r2, #1
		slab->free_list = p;
    b3f6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    b3f8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    b3fa:	e7f5      	b.n	b3e8 <init_mem_slab_module+0x20>
	return rc;
    b3fc:	f06f 0015 	mvn.w	r0, #21
    b400:	e7e8      	b.n	b3d4 <init_mem_slab_module+0xc>
    b402:	bf00      	nop
    b404:	2000025c 	.word	0x2000025c
    b408:	20000278 	.word	0x20000278

0000b40c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b40e:	460c      	mov	r4, r1
	__asm__ volatile(
    b410:	f04f 0520 	mov.w	r5, #32
    b414:	f3ef 8111 	mrs	r1, BASEPRI
    b418:	f385 8812 	msr	BASEPRI_MAX, r5
    b41c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b420:	6945      	ldr	r5, [r0, #20]
    b422:	b15d      	cbz	r5, b43c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    b424:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    b426:	682b      	ldr	r3, [r5, #0]
    b428:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    b42a:	6983      	ldr	r3, [r0, #24]
    b42c:	3301      	adds	r3, #1
    b42e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b430:	2000      	movs	r0, #0
	__asm__ volatile(
    b432:	f381 8811 	msr	BASEPRI, r1
    b436:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    b43a:	e011      	b.n	b460 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b43c:	ea52 0c03 	orrs.w	ip, r2, r3
    b440:	d103      	bne.n	b44a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    b442:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    b444:	f06f 000b 	mvn.w	r0, #11
    b448:	e7f3      	b.n	b432 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b44a:	e9cd 2300 	strd	r2, r3, [sp]
    b44e:	4602      	mov	r2, r0
    b450:	3008      	adds	r0, #8
    b452:	f000 fd8b 	bl	bf6c <z_pend_curr>
		if (result == 0) {
    b456:	b918      	cbnz	r0, b460 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    b458:	4b02      	ldr	r3, [pc, #8]	; (b464 <k_mem_slab_alloc+0x58>)
    b45a:	689b      	ldr	r3, [r3, #8]
    b45c:	695b      	ldr	r3, [r3, #20]
    b45e:	6023      	str	r3, [r4, #0]
}
    b460:	b003      	add	sp, #12
    b462:	bd30      	pop	{r4, r5, pc}
    b464:	2000214c 	.word	0x2000214c

0000b468 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b46a:	4605      	mov	r5, r0
    b46c:	460e      	mov	r6, r1
	__asm__ volatile(
    b46e:	f04f 0320 	mov.w	r3, #32
    b472:	f3ef 8711 	mrs	r7, BASEPRI
    b476:	f383 8812 	msr	BASEPRI_MAX, r3
    b47a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    b47e:	4b06      	ldr	r3, [pc, #24]	; (b498 <k_thread_foreach+0x30>)
    b480:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    b482:	b924      	cbnz	r4, b48e <k_thread_foreach+0x26>
	__asm__ volatile(
    b484:	f387 8811 	msr	BASEPRI, r7
    b488:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    b48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    b48e:	4620      	mov	r0, r4
    b490:	4631      	mov	r1, r6
    b492:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    b494:	6f64      	ldr	r4, [r4, #116]	; 0x74
    b496:	e7f4      	b.n	b482 <k_thread_foreach+0x1a>
    b498:	2000214c 	.word	0x2000214c

0000b49c <z_thread_monitor_exit>:
	__asm__ volatile(
    b49c:	f04f 0320 	mov.w	r3, #32
    b4a0:	f3ef 8111 	mrs	r1, BASEPRI
    b4a4:	f383 8812 	msr	BASEPRI_MAX, r3
    b4a8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    b4ac:	4a09      	ldr	r2, [pc, #36]	; (b4d4 <z_thread_monitor_exit+0x38>)
    b4ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b4b0:	4283      	cmp	r3, r0
    b4b2:	d107      	bne.n	b4c4 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    b4b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    b4b6:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    b4b8:	f381 8811 	msr	BASEPRI, r1
    b4bc:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    b4c0:	4770      	bx	lr
    b4c2:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d0f7      	beq.n	b4b8 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    b4c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    b4ca:	4282      	cmp	r2, r0
    b4cc:	d1f9      	bne.n	b4c2 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    b4ce:	6f42      	ldr	r2, [r0, #116]	; 0x74
    b4d0:	675a      	str	r2, [r3, #116]	; 0x74
    b4d2:	e7f1      	b.n	b4b8 <z_thread_monitor_exit+0x1c>
    b4d4:	2000214c 	.word	0x2000214c

0000b4d8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    b4d8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    b4da:	4604      	mov	r4, r0
    b4dc:	b908      	cbnz	r0, b4e2 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    b4de:	4b05      	ldr	r3, [pc, #20]	; (b4f4 <z_impl_k_thread_name_set+0x1c>)
    b4e0:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    b4e2:	2220      	movs	r2, #32
    b4e4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    b4e8:	f003 fd56 	bl	ef98 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    b4ec:	2000      	movs	r0, #0
    b4ee:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    b4f2:	bd10      	pop	{r4, pc}
    b4f4:	2000214c 	.word	0x2000214c

0000b4f8 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    b4f8:	7b43      	ldrb	r3, [r0, #13]
    b4fa:	2b10      	cmp	r3, #16
    b4fc:	d80e      	bhi.n	b51c <k_thread_state_str+0x24>
    b4fe:	2b10      	cmp	r3, #16
    b500:	d81c      	bhi.n	b53c <k_thread_state_str+0x44>
    b502:	e8df f003 	tbb	[pc, r3]
    b506:	091d      	.short	0x091d
    b508:	1b151b13 	.word	0x1b151b13
    b50c:	1b171b1b 	.word	0x1b171b1b
    b510:	1b1b1b1b 	.word	0x1b1b1b1b
    b514:	1b1b      	.short	0x1b1b
    b516:	19          	.byte	0x19
    b517:	00          	.byte	0x00
    b518:	480b      	ldr	r0, [pc, #44]	; (b548 <k_thread_state_str+0x50>)
    b51a:	4770      	bx	lr
    b51c:	2b20      	cmp	r3, #32
    b51e:	d011      	beq.n	b544 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
    b520:	4a0a      	ldr	r2, [pc, #40]	; (b54c <k_thread_state_str+0x54>)
    b522:	480b      	ldr	r0, [pc, #44]	; (b550 <k_thread_state_str+0x58>)
    b524:	2b80      	cmp	r3, #128	; 0x80
    b526:	bf08      	it	eq
    b528:	4610      	moveq	r0, r2
    b52a:	4770      	bx	lr
		return "pending";
    b52c:	4809      	ldr	r0, [pc, #36]	; (b554 <k_thread_state_str+0x5c>)
    b52e:	4770      	bx	lr
		return "prestart";
    b530:	4809      	ldr	r0, [pc, #36]	; (b558 <k_thread_state_str+0x60>)
    b532:	4770      	bx	lr
		return "dead";
    b534:	4809      	ldr	r0, [pc, #36]	; (b55c <k_thread_state_str+0x64>)
    b536:	4770      	bx	lr
		return "suspended";
    b538:	4809      	ldr	r0, [pc, #36]	; (b560 <k_thread_state_str+0x68>)
    b53a:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
    b53c:	4804      	ldr	r0, [pc, #16]	; (b550 <k_thread_state_str+0x58>)
    b53e:	4770      	bx	lr
		return "";
    b540:	4808      	ldr	r0, [pc, #32]	; (b564 <k_thread_state_str+0x6c>)
    b542:	4770      	bx	lr
		return "aborting";
    b544:	4808      	ldr	r0, [pc, #32]	; (b568 <k_thread_state_str+0x70>)
}
    b546:	4770      	bx	lr
    b548:	00013016 	.word	0x00013016
    b54c:	00013025 	.word	0x00013025
    b550:	00012c87 	.word	0x00012c87
    b554:	00013000 	.word	0x00013000
    b558:	00013008 	.word	0x00013008
    b55c:	00013011 	.word	0x00013011
    b560:	000124a6 	.word	0x000124a6
    b564:	00011586 	.word	0x00011586
    b568:	0001301c 	.word	0x0001301c

0000b56c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b570:	b085      	sub	sp, #20
    b572:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b574:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    b578:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b57c:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    b57e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b580:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b582:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    b586:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
    b588:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    b58a:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
    b58e:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b590:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
    b594:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    b596:	6085      	str	r5, [r0, #8]
{
    b598:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    b59a:	e9c0 5506 	strd	r5, r5, [r0, #24]
    b59e:	460e      	mov	r6, r1
	thread_base->prio = priority;
    b5a0:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
    b5a2:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    b5a4:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
    b5a6:	4652      	mov	r2, sl
    b5a8:	21aa      	movs	r1, #170	; 0xaa
    b5aa:	4658      	mov	r0, fp
{
    b5ac:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
    b5b0:	f003 fd73 	bl	f09a <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b5b6:	9302      	str	r3, [sp, #8]
    b5b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b5ba:	9301      	str	r3, [sp, #4]
    b5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b5be:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
    b5c0:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b5c4:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
    b5c6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b5ca:	463a      	mov	r2, r7
    b5cc:	4631      	mov	r1, r6
    b5ce:	4620      	mov	r0, r4
    b5d0:	f7fb fa10 	bl	69f4 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
    b5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b5d6:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
    b5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b5da:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    b5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    b5de:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    b5e0:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    b5e4:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    b5e6:	f04f 0220 	mov.w	r2, #32
    b5ea:	f3ef 8311 	mrs	r3, BASEPRI
    b5ee:	f382 8812 	msr	BASEPRI_MAX, r2
    b5f2:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    b5f6:	4e10      	ldr	r6, [pc, #64]	; (b638 <z_setup_new_thread+0xcc>)
    b5f8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    b5fa:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    b5fc:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    b5fe:	f383 8811 	msr	BASEPRI, r3
    b602:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    b606:	f1b9 0f00 	cmp.w	r9, #0
    b60a:	d011      	beq.n	b630 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
    b60c:	221f      	movs	r2, #31
    b60e:	4649      	mov	r1, r9
    b610:	f104 0078 	add.w	r0, r4, #120	; 0x78
    b614:	f003 fcc0 	bl	ef98 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    b618:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    b61c:	68b3      	ldr	r3, [r6, #8]
    b61e:	b10b      	cbz	r3, b624 <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
    b620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    b624:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    b628:	4638      	mov	r0, r7
    b62a:	b005      	add	sp, #20
    b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    b630:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
    b634:	e7f2      	b.n	b61c <z_setup_new_thread+0xb0>
    b636:	bf00      	nop
    b638:	2000214c 	.word	0x2000214c

0000b63c <z_impl_k_thread_create>:
{
    b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b63e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b640:	2700      	movs	r7, #0
    b642:	9705      	str	r7, [sp, #20]
    b644:	9f10      	ldr	r7, [sp, #64]	; 0x40
    b646:	9704      	str	r7, [sp, #16]
    b648:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    b64a:	9703      	str	r7, [sp, #12]
    b64c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b64e:	9702      	str	r7, [sp, #8]
{
    b650:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b654:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    b656:	9701      	str	r7, [sp, #4]
    b658:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b65a:	9700      	str	r7, [sp, #0]
{
    b65c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b65e:	f7ff ff85 	bl	b56c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b662:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    b666:	bf08      	it	eq
    b668:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    b66c:	d005      	beq.n	b67a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b66e:	ea55 0306 	orrs.w	r3, r5, r6
    b672:	d105      	bne.n	b680 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    b674:	4620      	mov	r0, r4
    b676:	f000 fc1d 	bl	beb4 <z_sched_start>
}
    b67a:	4620      	mov	r0, r4
    b67c:	b007      	add	sp, #28
    b67e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b680:	4903      	ldr	r1, [pc, #12]	; (b690 <z_impl_k_thread_create+0x54>)
    b682:	4632      	mov	r2, r6
    b684:	462b      	mov	r3, r5
    b686:	f104 0018 	add.w	r0, r4, #24
    b68a:	f000 fea9 	bl	c3e0 <z_add_timeout>
    b68e:	e7f4      	b.n	b67a <z_impl_k_thread_create+0x3e>
    b690:	0000fd3b 	.word	0x0000fd3b

0000b694 <z_init_static_threads>:
{
    b694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b698:	4c29      	ldr	r4, [pc, #164]	; (b740 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    b69a:	4d2a      	ldr	r5, [pc, #168]	; (b744 <z_init_static_threads+0xb0>)
{
    b69c:	b087      	sub	sp, #28
    b69e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    b6a0:	42ae      	cmp	r6, r5
    b6a2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    b6a6:	d30f      	bcc.n	b6c8 <z_init_static_threads+0x34>
	k_sched_lock();
    b6a8:	f000 fb20 	bl	bcec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b6ac:	4c24      	ldr	r4, [pc, #144]	; (b740 <z_init_static_threads+0xac>)
    b6ae:	f8df 9098 	ldr.w	r9, [pc, #152]	; b748 <z_init_static_threads+0xb4>
    b6b2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    b6b6:	f240 37e7 	movw	r7, #999	; 0x3e7
    b6ba:	42ac      	cmp	r4, r5
    b6bc:	d320      	bcc.n	b700 <z_init_static_threads+0x6c>
}
    b6be:	b007      	add	sp, #28
    b6c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    b6c4:	f000 bce0 	b.w	c088 <k_sched_unlock>
		z_setup_new_thread(
    b6c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b6cc:	9305      	str	r3, [sp, #20]
    b6ce:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b6d2:	9304      	str	r3, [sp, #16]
    b6d4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b6d8:	9303      	str	r3, [sp, #12]
    b6da:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b6de:	9302      	str	r3, [sp, #8]
    b6e0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b6e4:	9301      	str	r3, [sp, #4]
    b6e6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    b6ea:	9300      	str	r3, [sp, #0]
    b6ec:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    b6f0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    b6f4:	f7ff ff3a 	bl	b56c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b6f8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    b6fc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b6fe:	e7ce      	b.n	b69e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b700:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b702:	1c5a      	adds	r2, r3, #1
    b704:	d00d      	beq.n	b722 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    b706:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b70a:	2100      	movs	r1, #0
    b70c:	4638      	mov	r0, r7
    b70e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b712:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    b716:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b71a:	d104      	bne.n	b726 <z_init_static_threads+0x92>
	z_sched_start(thread);
    b71c:	4640      	mov	r0, r8
    b71e:	f000 fbc9 	bl	beb4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b722:	3430      	adds	r4, #48	; 0x30
    b724:	e7c9      	b.n	b6ba <z_init_static_threads+0x26>
    b726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b72a:	2300      	movs	r3, #0
    b72c:	f7f5 fce8 	bl	1100 <__aeabi_uldivmod>
    b730:	4602      	mov	r2, r0
    b732:	460b      	mov	r3, r1
    b734:	f108 0018 	add.w	r0, r8, #24
    b738:	4649      	mov	r1, r9
    b73a:	f000 fe51 	bl	c3e0 <z_add_timeout>
    b73e:	e7f0      	b.n	b722 <z_init_static_threads+0x8e>
    b740:	2000025c 	.word	0x2000025c
    b744:	2000025c 	.word	0x2000025c
    b748:	0000fd3b 	.word	0x0000fd3b

0000b74c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    b74c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    b74e:	4c0b      	ldr	r4, [pc, #44]	; (b77c <idle+0x30>)
	return !z_sys_post_kernel;
    b750:	4d0b      	ldr	r5, [pc, #44]	; (b780 <idle+0x34>)
	__asm__ volatile(
    b752:	f04f 0220 	mov.w	r2, #32
    b756:	f3ef 8311 	mrs	r3, BASEPRI
    b75a:	f382 8812 	msr	BASEPRI_MAX, r2
    b75e:	f3bf 8f6f 	isb	sy
    b762:	f004 fba7 	bl	feb4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b766:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    b768:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b76a:	b913      	cbnz	r3, b772 <idle+0x26>
	arch_cpu_idle();
    b76c:	f7fa fff2 	bl	6754 <arch_cpu_idle>
}
    b770:	e7ef      	b.n	b752 <idle+0x6>
    b772:	f7fa ff11 	bl	6598 <pm_system_suspend>
    b776:	2800      	cmp	r0, #0
    b778:	d1eb      	bne.n	b752 <idle+0x6>
    b77a:	e7f7      	b.n	b76c <idle+0x20>
    b77c:	2000214c 	.word	0x2000214c
    b780:	200021ee 	.word	0x200021ee

0000b784 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b788:	4604      	mov	r4, r0
    b78a:	4617      	mov	r7, r2
    b78c:	461e      	mov	r6, r3
    b78e:	f04f 0320 	mov.w	r3, #32
    b792:	f3ef 8811 	mrs	r8, BASEPRI
    b796:	f383 8812 	msr	BASEPRI_MAX, r3
    b79a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b79e:	68c3      	ldr	r3, [r0, #12]
    b7a0:	4a32      	ldr	r2, [pc, #200]	; (b86c <z_impl_k_mutex_lock+0xe8>)
    b7a2:	b16b      	cbz	r3, b7c0 <z_impl_k_mutex_lock+0x3c>
    b7a4:	6880      	ldr	r0, [r0, #8]
    b7a6:	6891      	ldr	r1, [r2, #8]
    b7a8:	4288      	cmp	r0, r1
    b7aa:	d019      	beq.n	b7e0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b7ac:	ea57 0306 	orrs.w	r3, r7, r6
    b7b0:	d118      	bne.n	b7e4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    b7b2:	f388 8811 	msr	BASEPRI, r8
    b7b6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    b7ba:	f06f 000f 	mvn.w	r0, #15
    b7be:	e00c      	b.n	b7da <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    b7c0:	6891      	ldr	r1, [r2, #8]
    b7c2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b7c6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    b7c8:	3301      	adds	r3, #1
    b7ca:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    b7cc:	6893      	ldr	r3, [r2, #8]
    b7ce:	60a3      	str	r3, [r4, #8]
    b7d0:	f388 8811 	msr	BASEPRI, r8
    b7d4:	f3bf 8f6f 	isb	sy
		return 0;
    b7d8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b7da:	b002      	add	sp, #8
    b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    b7e0:	6921      	ldr	r1, [r4, #16]
    b7e2:	e7f0      	b.n	b7c6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b7e4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    b7e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    b7ec:	4299      	cmp	r1, r3
    b7ee:	bfa8      	it	ge
    b7f0:	4619      	movge	r1, r3
    b7f2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    b7f6:	4291      	cmp	r1, r2
    b7f8:	bfb8      	it	lt
    b7fa:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b7fc:	428b      	cmp	r3, r1
    b7fe:	dd2e      	ble.n	b85e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    b800:	f004 f95d 	bl	fabe <adjust_owner_prio.isra.0>
    b804:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b806:	e9cd 7600 	strd	r7, r6, [sp]
    b80a:	4819      	ldr	r0, [pc, #100]	; (b870 <z_impl_k_mutex_lock+0xec>)
    b80c:	4622      	mov	r2, r4
    b80e:	4641      	mov	r1, r8
    b810:	f000 fbac 	bl	bf6c <z_pend_curr>
	if (got_mutex == 0) {
    b814:	2800      	cmp	r0, #0
    b816:	d0e0      	beq.n	b7da <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    b818:	f04f 0320 	mov.w	r3, #32
    b81c:	f3ef 8611 	mrs	r6, BASEPRI
    b820:	f383 8812 	msr	BASEPRI_MAX, r3
    b824:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b828:	6823      	ldr	r3, [r4, #0]
    b82a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b82c:	429c      	cmp	r4, r3
    b82e:	d00a      	beq.n	b846 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b830:	b14b      	cbz	r3, b846 <z_impl_k_mutex_lock+0xc2>
    b832:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b836:	4299      	cmp	r1, r3
    b838:	bfa8      	it	ge
    b83a:	4619      	movge	r1, r3
    b83c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    b840:	4299      	cmp	r1, r3
    b842:	bfb8      	it	lt
    b844:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b846:	68a0      	ldr	r0, [r4, #8]
    b848:	f004 f939 	bl	fabe <adjust_owner_prio.isra.0>
    b84c:	b900      	cbnz	r0, b850 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    b84e:	b145      	cbz	r5, b862 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    b850:	4807      	ldr	r0, [pc, #28]	; (b870 <z_impl_k_mutex_lock+0xec>)
    b852:	4631      	mov	r1, r6
    b854:	f000 fa38 	bl	bcc8 <z_reschedule>
	return -EAGAIN;
    b858:	f06f 000a 	mvn.w	r0, #10
    b85c:	e7bd      	b.n	b7da <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    b85e:	2500      	movs	r5, #0
    b860:	e7d1      	b.n	b806 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    b862:	f386 8811 	msr	BASEPRI, r6
    b866:	f3bf 8f6f 	isb	sy
    b86a:	e7f5      	b.n	b858 <z_impl_k_mutex_lock+0xd4>
    b86c:	2000214c 	.word	0x2000214c
    b870:	200021ef 	.word	0x200021ef

0000b874 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b874:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b876:	6883      	ldr	r3, [r0, #8]
{
    b878:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    b87a:	2b00      	cmp	r3, #0
    b87c:	d033      	beq.n	b8e6 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b87e:	4a1d      	ldr	r2, [pc, #116]	; (b8f4 <z_impl_k_mutex_unlock+0x80>)
    b880:	6892      	ldr	r2, [r2, #8]
    b882:	4293      	cmp	r3, r2
    b884:	d132      	bne.n	b8ec <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    b886:	7bda      	ldrb	r2, [r3, #15]
    b888:	3a01      	subs	r2, #1
    b88a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b88c:	68c3      	ldr	r3, [r0, #12]
    b88e:	2b01      	cmp	r3, #1
    b890:	d905      	bls.n	b89e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    b892:	3b01      	subs	r3, #1
    b894:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    b896:	f000 fbf7 	bl	c088 <k_sched_unlock>

	return 0;
    b89a:	2000      	movs	r0, #0
}
    b89c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b89e:	f04f 0320 	mov.w	r3, #32
    b8a2:	f3ef 8511 	mrs	r5, BASEPRI
    b8a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b8aa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b8ae:	6901      	ldr	r1, [r0, #16]
    b8b0:	6880      	ldr	r0, [r0, #8]
    b8b2:	f004 f904 	bl	fabe <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b8b6:	4620      	mov	r0, r4
    b8b8:	f004 faa0 	bl	fdfc <z_unpend_first_thread>
	mutex->owner = new_owner;
    b8bc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b8be:	b160      	cbz	r0, b8da <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    b8c0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b8c4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b8c6:	2200      	movs	r2, #0
    b8c8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    b8cc:	f004 fa25 	bl	fd1a <z_ready_thread>
		z_reschedule(&lock, key);
    b8d0:	4809      	ldr	r0, [pc, #36]	; (b8f8 <z_impl_k_mutex_unlock+0x84>)
    b8d2:	4629      	mov	r1, r5
    b8d4:	f000 f9f8 	bl	bcc8 <z_reschedule>
    b8d8:	e7dd      	b.n	b896 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    b8da:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b8dc:	f385 8811 	msr	BASEPRI, r5
    b8e0:	f3bf 8f6f 	isb	sy
    b8e4:	e7d7      	b.n	b896 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    b8e6:	f06f 0015 	mvn.w	r0, #21
    b8ea:	e7d7      	b.n	b89c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    b8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b8f0:	e7d4      	b.n	b89c <z_impl_k_mutex_unlock+0x28>
    b8f2:	bf00      	nop
    b8f4:	2000214c 	.word	0x2000214c
    b8f8:	200021ef 	.word	0x200021ef

0000b8fc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    b8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b8fe:	4611      	mov	r1, r2
	__asm__ volatile(
    b900:	f04f 0220 	mov.w	r2, #32
    b904:	f3ef 8511 	mrs	r5, BASEPRI
    b908:	f382 8812 	msr	BASEPRI_MAX, r2
    b90c:	f3bf 8f6f 	isb	sy
    b910:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    b912:	b19c      	cbz	r4, b93c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b914:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    b916:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b918:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    b91c:	4294      	cmp	r4, r2
	list->head = node;
    b91e:	6003      	str	r3, [r0, #0]
	list->tail = node;
    b920:	bf08      	it	eq
    b922:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    b924:	2101      	movs	r1, #1
    b926:	4620      	mov	r0, r4
    b928:	f004 f93d 	bl	fba6 <z_queue_node_peek>
    b92c:	4604      	mov	r4, r0
	__asm__ volatile(
    b92e:	f385 8811 	msr	BASEPRI, r5
    b932:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    b936:	4620      	mov	r0, r4
    b938:	b003      	add	sp, #12
    b93a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b93c:	ea51 0203 	orrs.w	r2, r1, r3
    b940:	d0f5      	beq.n	b92e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b942:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    b946:	e9cd 1300 	strd	r1, r3, [sp]
    b94a:	4610      	mov	r0, r2
    b94c:	4629      	mov	r1, r5
    b94e:	f000 fb0d 	bl	bf6c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    b952:	2800      	cmp	r0, #0
    b954:	d1ef      	bne.n	b936 <z_impl_k_queue_get+0x3a>
    b956:	4b02      	ldr	r3, [pc, #8]	; (b960 <z_impl_k_queue_get+0x64>)
    b958:	689b      	ldr	r3, [r3, #8]
    b95a:	695c      	ldr	r4, [r3, #20]
    b95c:	e7eb      	b.n	b936 <z_impl_k_queue_get+0x3a>
    b95e:	bf00      	nop
    b960:	2000214c 	.word	0x2000214c

0000b964 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b964:	b538      	push	{r3, r4, r5, lr}
    b966:	4604      	mov	r4, r0
	__asm__ volatile(
    b968:	f04f 0320 	mov.w	r3, #32
    b96c:	f3ef 8511 	mrs	r5, BASEPRI
    b970:	f383 8812 	msr	BASEPRI_MAX, r3
    b974:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b978:	f004 fa40 	bl	fdfc <z_unpend_first_thread>

	if (thread != NULL) {
    b97c:	b150      	cbz	r0, b994 <z_impl_k_sem_give+0x30>
    b97e:	2200      	movs	r2, #0
    b980:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b984:	f004 f9c9 	bl	fd1a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b988:	4629      	mov	r1, r5
    b98a:	4808      	ldr	r0, [pc, #32]	; (b9ac <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b990:	f000 b99a 	b.w	bcc8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b994:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b998:	429a      	cmp	r2, r3
    b99a:	bf18      	it	ne
    b99c:	3301      	addne	r3, #1
    b99e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b9a0:	2102      	movs	r1, #2
    b9a2:	f104 0010 	add.w	r0, r4, #16
    b9a6:	f004 fc4b 	bl	10240 <z_handle_obj_poll_events>
}
    b9aa:	e7ed      	b.n	b988 <z_impl_k_sem_give+0x24>
    b9ac:	200021ef 	.word	0x200021ef

0000b9b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b9b0:	b513      	push	{r0, r1, r4, lr}
    b9b2:	f04f 0420 	mov.w	r4, #32
    b9b6:	f3ef 8111 	mrs	r1, BASEPRI
    b9ba:	f384 8812 	msr	BASEPRI_MAX, r4
    b9be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b9c2:	6884      	ldr	r4, [r0, #8]
    b9c4:	b144      	cbz	r4, b9d8 <z_impl_k_sem_take+0x28>
		sem->count--;
    b9c6:	3c01      	subs	r4, #1
    b9c8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    b9ca:	f381 8811 	msr	BASEPRI, r1
    b9ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b9d2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b9d4:	b002      	add	sp, #8
    b9d6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b9d8:	ea52 0403 	orrs.w	r4, r2, r3
    b9dc:	d106      	bne.n	b9ec <z_impl_k_sem_take+0x3c>
    b9de:	f381 8811 	msr	BASEPRI, r1
    b9e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b9e6:	f06f 000f 	mvn.w	r0, #15
    b9ea:	e7f3      	b.n	b9d4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b9ec:	e9cd 2300 	strd	r2, r3, [sp]
    b9f0:	4602      	mov	r2, r0
    b9f2:	4802      	ldr	r0, [pc, #8]	; (b9fc <z_impl_k_sem_take+0x4c>)
    b9f4:	f000 faba 	bl	bf6c <z_pend_curr>
	return ret;
    b9f8:	e7ec      	b.n	b9d4 <z_impl_k_sem_take+0x24>
    b9fa:	bf00      	nop
    b9fc:	200021ef 	.word	0x200021ef

0000ba00 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    ba04:	4e47      	ldr	r6, [pc, #284]	; (bb24 <work_queue_main+0x124>)
    ba06:	b085      	sub	sp, #20
    ba08:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    ba0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ba0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    ba12:	f04f 0320 	mov.w	r3, #32
    ba16:	f3ef 8711 	mrs	r7, BASEPRI
    ba1a:	f383 8812 	msr	BASEPRI_MAX, r3
    ba1e:	f3bf 8f6f 	isb	sy
    ba22:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ba26:	b98d      	cbnz	r5, ba4c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    ba28:	2102      	movs	r1, #2
    ba2a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    ba2e:	f004 f8e1 	bl	fbf4 <flag_test_and_clear>
    ba32:	2800      	cmp	r0, #0
    ba34:	d135      	bne.n	baa2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    ba36:	2300      	movs	r3, #0
    ba38:	e9cd 8900 	strd	r8, r9, [sp]
    ba3c:	9302      	str	r3, [sp, #8]
    ba3e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    ba42:	4639      	mov	r1, r7
    ba44:	4838      	ldr	r0, [pc, #224]	; (bb28 <work_queue_main+0x128>)
    ba46:	f000 fc55 	bl	c2f4 <z_sched_wait>
			continue;
    ba4a:	e7e2      	b.n	ba12 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ba4c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    ba50:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    ba52:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ba56:	4295      	cmp	r5, r2
    ba58:	d101      	bne.n	ba5e <work_queue_main+0x5e>
	list->tail = node;
    ba5a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    ba5e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    ba62:	f043 0302 	orr.w	r3, r3, #2
    ba66:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    ba6a:	68eb      	ldr	r3, [r5, #12]
    ba6c:	f023 0304 	bic.w	r3, r3, #4
    ba70:	f043 0301 	orr.w	r3, r3, #1
    ba74:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    ba76:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    ba78:	f387 8811 	msr	BASEPRI, r7
    ba7c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    ba80:	4628      	mov	r0, r5
    ba82:	4798      	blx	r3
	__asm__ volatile(
    ba84:	f04f 0320 	mov.w	r3, #32
    ba88:	f3ef 8b11 	mrs	fp, BASEPRI
    ba8c:	f383 8812 	msr	BASEPRI_MAX, r3
    ba90:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    ba94:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ba96:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    ba98:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ba9c:	d40b      	bmi.n	bab6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    ba9e:	60ea      	str	r2, [r5, #12]
    baa0:	e00e      	b.n	bac0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    baa2:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    baa6:	2200      	movs	r2, #0
    baa8:	2101      	movs	r1, #1
    baaa:	4628      	mov	r0, r5
    baac:	f004 f9ce 	bl	fe4c <z_sched_wake>
    bab0:	2800      	cmp	r0, #0
    bab2:	d1f8      	bne.n	baa6 <work_queue_main+0xa6>
    bab4:	e7bf      	b.n	ba36 <work_queue_main+0x36>
	return list->head;
    bab6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    bab8:	f023 0303 	bic.w	r3, r3, #3
    babc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    babe:	b970      	cbnz	r0, bade <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    bac0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    bac4:	f023 0302 	bic.w	r3, r3, #2
    bac8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    bacc:	f38b 8811 	msr	BASEPRI, fp
    bad0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    bad4:	05d8      	lsls	r0, r3, #23
    bad6:	d49c      	bmi.n	ba12 <work_queue_main+0x12>
	z_impl_k_yield();
    bad8:	f000 fafe 	bl	c0d8 <z_impl_k_yield>
}
    badc:	e799      	b.n	ba12 <work_queue_main+0x12>
	return node->next;
    bade:	2700      	movs	r7, #0
    bae0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    bae4:	463b      	mov	r3, r7
		if (wc->work == work) {
    bae6:	6842      	ldr	r2, [r0, #4]
    bae8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    baea:	4601      	mov	r1, r0
		if (wc->work == work) {
    baec:	d10c      	bne.n	bb08 <work_queue_main+0x108>
	return node->next;
    baee:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    baf0:	b997      	cbnz	r7, bb18 <work_queue_main+0x118>
    baf2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    baf4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    baf6:	4282      	cmp	r2, r0
    baf8:	d100      	bne.n	bafc <work_queue_main+0xfc>
	list->tail = node;
    bafa:	6071      	str	r1, [r6, #4]
	parent->next = child;
    bafc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    bb00:	f7ff ff30 	bl	b964 <z_impl_k_sem_give>
}
    bb04:	4639      	mov	r1, r7
    bb06:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    bb08:	f1ba 0f00 	cmp.w	sl, #0
    bb0c:	d0d8      	beq.n	bac0 <work_queue_main+0xc0>
	return node->next;
    bb0e:	4650      	mov	r0, sl
    bb10:	460f      	mov	r7, r1
    bb12:	f8da a000 	ldr.w	sl, [sl]
    bb16:	e7e6      	b.n	bae6 <work_queue_main+0xe6>
	return list->tail;
    bb18:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    bb1a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    bb1c:	4290      	cmp	r0, r2
	list->tail = node;
    bb1e:	bf08      	it	eq
    bb20:	6077      	streq	r7, [r6, #4]
}
    bb22:	e7eb      	b.n	bafc <work_queue_main+0xfc>
    bb24:	20002178 	.word	0x20002178
    bb28:	200021ef 	.word	0x200021ef

0000bb2c <submit_to_queue_locked>:
{
    bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    bb2e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bb30:	079a      	lsls	r2, r3, #30
{
    bb32:	4604      	mov	r4, r0
    bb34:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bb36:	f3c3 0540 	ubfx	r5, r3, #1, #1
    bb3a:	d41f      	bmi.n	bb7c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    bb3c:	075f      	lsls	r7, r3, #29
    bb3e:	d41f      	bmi.n	bb80 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    bb40:	680a      	ldr	r2, [r1, #0]
    bb42:	b90a      	cbnz	r2, bb48 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    bb44:	6882      	ldr	r2, [r0, #8]
    bb46:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    bb48:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    bb4a:	bf44      	itt	mi
    bb4c:	68a3      	ldrmi	r3, [r4, #8]
    bb4e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    bb50:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    bb52:	bf4c      	ite	mi
    bb54:	2502      	movmi	r5, #2
		ret = 1;
    bb56:	2501      	movpl	r5, #1
	if (queue == NULL) {
    bb58:	b37f      	cbz	r7, bbba <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    bb5a:	4b1b      	ldr	r3, [pc, #108]	; (bbc8 <submit_to_queue_locked+0x9c>)
    bb5c:	689b      	ldr	r3, [r3, #8]
    bb5e:	42bb      	cmp	r3, r7
    bb60:	d111      	bne.n	bb86 <submit_to_queue_locked+0x5a>
    bb62:	f003 ff8a 	bl	fa7a <k_is_in_isr>
    bb66:	f080 0001 	eor.w	r0, r0, #1
    bb6a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    bb6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bb70:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    bb72:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bb76:	d523      	bpl.n	bbc0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    bb78:	b13a      	cbz	r2, bb8a <submit_to_queue_locked+0x5e>
    bb7a:	b940      	cbnz	r0, bb8e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    bb7c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    bb80:	2300      	movs	r3, #0
    bb82:	6033      	str	r3, [r6, #0]
	return ret;
    bb84:	e013      	b.n	bbae <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    bb86:	2000      	movs	r0, #0
    bb88:	e7f0      	b.n	bb6c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    bb8a:	071b      	lsls	r3, r3, #28
    bb8c:	d4f6      	bmi.n	bb7c <submit_to_queue_locked+0x50>
	parent->next = child;
    bb8e:	2300      	movs	r3, #0
    bb90:	6023      	str	r3, [r4, #0]
	return list->tail;
    bb92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    bb96:	b963      	cbnz	r3, bbb2 <submit_to_queue_locked+0x86>
	list->head = node;
    bb98:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    bb9c:	4638      	mov	r0, r7
    bb9e:	f004 f834 	bl	fc0a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    bba2:	68e3      	ldr	r3, [r4, #12]
    bba4:	f043 0304 	orr.w	r3, r3, #4
    bba8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    bbaa:	6833      	ldr	r3, [r6, #0]
    bbac:	60a3      	str	r3, [r4, #8]
}
    bbae:	4628      	mov	r0, r5
    bbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    bbb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    bbb4:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
    bbb8:	e7f0      	b.n	bb9c <submit_to_queue_locked+0x70>
		return -EINVAL;
    bbba:	f06f 0515 	mvn.w	r5, #21
    bbbe:	e7df      	b.n	bb80 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    bbc0:	f06f 0512 	mvn.w	r5, #18
    bbc4:	e7dc      	b.n	bb80 <submit_to_queue_locked+0x54>
    bbc6:	bf00      	nop
    bbc8:	2000214c 	.word	0x2000214c

0000bbcc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    bbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbce:	b089      	sub	sp, #36	; 0x24
    bbd0:	4604      	mov	r4, r0
	list->head = NULL;
    bbd2:	2000      	movs	r0, #0
	list->tail = NULL;
    bbd4:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    bbd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    bbda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    bbde:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    bbe2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    bbe6:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    bbea:	b31d      	cbz	r5, bc34 <k_work_queue_start+0x68>
    bbec:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    bbee:	2800      	cmp	r0, #0
    bbf0:	f240 1001 	movw	r0, #257	; 0x101
    bbf4:	bf08      	it	eq
    bbf6:	2001      	moveq	r0, #1
	*flagp = flags;
    bbf8:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    bbfc:	2000      	movs	r0, #0
    bbfe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    bc02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    bc06:	e9cd 3003 	strd	r3, r0, [sp, #12]
    bc0a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    bc0e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    bc12:	4b09      	ldr	r3, [pc, #36]	; (bc38 <k_work_queue_start+0x6c>)
    bc14:	9400      	str	r4, [sp, #0]
    bc16:	4620      	mov	r0, r4
    bc18:	f7ff fd10 	bl	b63c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    bc1c:	b125      	cbz	r5, bc28 <k_work_queue_start+0x5c>
    bc1e:	6829      	ldr	r1, [r5, #0]
    bc20:	b111      	cbz	r1, bc28 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    bc22:	4620      	mov	r0, r4
    bc24:	f7ff fc58 	bl	b4d8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    bc28:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    bc2a:	b009      	add	sp, #36	; 0x24
    bc2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bc30:	f003 bf2b 	b.w	fa8a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    bc34:	2001      	movs	r0, #1
    bc36:	e7df      	b.n	bbf8 <k_work_queue_start+0x2c>
    bc38:	0000ba01 	.word	0x0000ba01

0000bc3c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    bc3c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    bc3e:	4c08      	ldr	r4, [pc, #32]	; (bc60 <z_reset_time_slice+0x24>)
    bc40:	6823      	ldr	r3, [r4, #0]
    bc42:	b15b      	cbz	r3, bc5c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    bc44:	f7fd fc80 	bl	9548 <sys_clock_elapsed>
    bc48:	4603      	mov	r3, r0
    bc4a:	6820      	ldr	r0, [r4, #0]
    bc4c:	4a05      	ldr	r2, [pc, #20]	; (bc64 <z_reset_time_slice+0x28>)
    bc4e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    bc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    bc54:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    bc56:	2100      	movs	r1, #0
    bc58:	f004 b93c 	b.w	fed4 <z_set_timeout_expiry>
}
    bc5c:	bd10      	pop	{r4, pc}
    bc5e:	bf00      	nop
    bc60:	20002188 	.word	0x20002188
    bc64:	2000214c 	.word	0x2000214c

0000bc68 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc6a:	4604      	mov	r4, r0
    bc6c:	460d      	mov	r5, r1
	__asm__ volatile(
    bc6e:	f04f 0320 	mov.w	r3, #32
    bc72:	f3ef 8611 	mrs	r6, BASEPRI
    bc76:	f383 8812 	msr	BASEPRI_MAX, r3
    bc7a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    bc7e:	4b0f      	ldr	r3, [pc, #60]	; (bcbc <k_sched_time_slice_set+0x54>)
    bc80:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    bc82:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bc86:	f240 30e7 	movw	r0, #999	; 0x3e7
    bc8a:	6119      	str	r1, [r3, #16]
    bc8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bc90:	2300      	movs	r3, #0
    bc92:	fbe4 0107 	umlal	r0, r1, r4, r7
    bc96:	f7f5 fa33 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    bc9a:	2c00      	cmp	r4, #0
    bc9c:	4b08      	ldr	r3, [pc, #32]	; (bcc0 <k_sched_time_slice_set+0x58>)
    bc9e:	dc09      	bgt.n	bcb4 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    bca0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    bca2:	4b08      	ldr	r3, [pc, #32]	; (bcc4 <k_sched_time_slice_set+0x5c>)
    bca4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    bca6:	f7ff ffc9 	bl	bc3c <z_reset_time_slice>
	__asm__ volatile(
    bcaa:	f386 8811 	msr	BASEPRI, r6
    bcae:	f3bf 8f6f 	isb	sy
	}
}
    bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    bcb4:	2802      	cmp	r0, #2
    bcb6:	bfb8      	it	lt
    bcb8:	2002      	movlt	r0, #2
    bcba:	e7f1      	b.n	bca0 <k_sched_time_slice_set+0x38>
    bcbc:	2000214c 	.word	0x2000214c
    bcc0:	20002188 	.word	0x20002188
    bcc4:	20002184 	.word	0x20002184

0000bcc8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bcc8:	b949      	cbnz	r1, bcde <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bcca:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    bcce:	b930      	cbnz	r0, bcde <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    bcd0:	4b05      	ldr	r3, [pc, #20]	; (bce8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    bcd2:	69da      	ldr	r2, [r3, #28]
    bcd4:	689b      	ldr	r3, [r3, #8]
    bcd6:	429a      	cmp	r2, r3
    bcd8:	d001      	beq.n	bcde <z_reschedule+0x16>
	ret = arch_swap(key);
    bcda:	f7fa be33 	b.w	6944 <arch_swap>
    bcde:	f381 8811 	msr	BASEPRI, r1
    bce2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    bce6:	4770      	bx	lr
    bce8:	2000214c 	.word	0x2000214c

0000bcec <k_sched_lock>:
	__asm__ volatile(
    bcec:	f04f 0320 	mov.w	r3, #32
    bcf0:	f3ef 8111 	mrs	r1, BASEPRI
    bcf4:	f383 8812 	msr	BASEPRI_MAX, r3
    bcf8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    bcfc:	4b04      	ldr	r3, [pc, #16]	; (bd10 <k_sched_lock+0x24>)
    bcfe:	689a      	ldr	r2, [r3, #8]
    bd00:	7bd3      	ldrb	r3, [r2, #15]
    bd02:	3b01      	subs	r3, #1
    bd04:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    bd06:	f381 8811 	msr	BASEPRI, r1
    bd0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    bd0e:	4770      	bx	lr
    bd10:	2000214c 	.word	0x2000214c

0000bd14 <update_cache>:
{
    bd14:	b538      	push	{r3, r4, r5, lr}
    bd16:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    bd18:	480c      	ldr	r0, [pc, #48]	; (bd4c <update_cache+0x38>)
    bd1a:	4d0d      	ldr	r5, [pc, #52]	; (bd50 <update_cache+0x3c>)
    bd1c:	f003 fff7 	bl	fd0e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    bd20:	4604      	mov	r4, r0
    bd22:	b900      	cbnz	r0, bd26 <update_cache+0x12>
    bd24:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    bd26:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    bd28:	b94a      	cbnz	r2, bd3e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    bd2a:	7b5a      	ldrb	r2, [r3, #13]
    bd2c:	06d2      	lsls	r2, r2, #27
    bd2e:	d106      	bne.n	bd3e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    bd30:	69a2      	ldr	r2, [r4, #24]
    bd32:	b922      	cbnz	r2, bd3e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    bd34:	89da      	ldrh	r2, [r3, #14]
    bd36:	2a7f      	cmp	r2, #127	; 0x7f
    bd38:	d901      	bls.n	bd3e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    bd3a:	61eb      	str	r3, [r5, #28]
}
    bd3c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    bd3e:	429c      	cmp	r4, r3
    bd40:	d001      	beq.n	bd46 <update_cache+0x32>
			z_reset_time_slice();
    bd42:	f7ff ff7b 	bl	bc3c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    bd46:	61ec      	str	r4, [r5, #28]
}
    bd48:	e7f8      	b.n	bd3c <update_cache+0x28>
    bd4a:	bf00      	nop
    bd4c:	2000216c 	.word	0x2000216c
    bd50:	2000214c 	.word	0x2000214c

0000bd54 <move_thread_to_end_of_prio_q>:
{
    bd54:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    bd56:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    bd5a:	7b43      	ldrb	r3, [r0, #13]
    bd5c:	2a00      	cmp	r2, #0
{
    bd5e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    bd60:	da04      	bge.n	bd6c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bd62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bd66:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    bd68:	f003 ff7c 	bl	fc64 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bd6c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    bd6e:	4a15      	ldr	r2, [pc, #84]	; (bdc4 <move_thread_to_end_of_prio_q+0x70>)
    bd70:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bd74:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    bd76:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bd7a:	f102 0520 	add.w	r5, r2, #32
    bd7e:	42ab      	cmp	r3, r5
    bd80:	d01b      	beq.n	bdba <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bd82:	b1d3      	cbz	r3, bdba <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    bd84:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    bd88:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    bd8c:	4286      	cmp	r6, r0
    bd8e:	d00f      	beq.n	bdb0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    bd90:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    bd92:	2800      	cmp	r0, #0
    bd94:	dd0c      	ble.n	bdb0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    bd96:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    bd98:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    bd9c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    bd9e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    bda0:	6890      	ldr	r0, [r2, #8]
    bda2:	1a43      	subs	r3, r0, r1
    bda4:	4258      	negs	r0, r3
}
    bda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    bdaa:	4158      	adcs	r0, r3
    bdac:	f7ff bfb2 	b.w	bd14 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    bdb0:	42a3      	cmp	r3, r4
    bdb2:	d002      	beq.n	bdba <move_thread_to_end_of_prio_q+0x66>
    bdb4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d1e6      	bne.n	bd88 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    bdba:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    bdbe:	6021      	str	r1, [r4, #0]
	list->tail = node;
    bdc0:	6251      	str	r1, [r2, #36]	; 0x24
}
    bdc2:	e7ed      	b.n	bda0 <move_thread_to_end_of_prio_q+0x4c>
    bdc4:	2000214c 	.word	0x2000214c

0000bdc8 <z_time_slice>:
{
    bdc8:	b538      	push	{r3, r4, r5, lr}
    bdca:	4601      	mov	r1, r0
	__asm__ volatile(
    bdcc:	f04f 0320 	mov.w	r3, #32
    bdd0:	f3ef 8411 	mrs	r4, BASEPRI
    bdd4:	f383 8812 	msr	BASEPRI_MAX, r3
    bdd8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    bddc:	4b15      	ldr	r3, [pc, #84]	; (be34 <z_time_slice+0x6c>)
    bdde:	4a16      	ldr	r2, [pc, #88]	; (be38 <z_time_slice+0x70>)
    bde0:	6898      	ldr	r0, [r3, #8]
    bde2:	6815      	ldr	r5, [r2, #0]
    bde4:	42a8      	cmp	r0, r5
    bde6:	d106      	bne.n	bdf6 <z_time_slice+0x2e>
			z_reset_time_slice();
    bde8:	f7ff ff28 	bl	bc3c <z_reset_time_slice>
	__asm__ volatile(
    bdec:	f384 8811 	msr	BASEPRI, r4
    bdf0:	f3bf 8f6f 	isb	sy
}
    bdf4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    bdf6:	2500      	movs	r5, #0
    bdf8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    bdfa:	4a10      	ldr	r2, [pc, #64]	; (be3c <z_time_slice+0x74>)
    bdfc:	6812      	ldr	r2, [r2, #0]
    bdfe:	b1ba      	cbz	r2, be30 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    be00:	89c2      	ldrh	r2, [r0, #14]
    be02:	2a7f      	cmp	r2, #127	; 0x7f
    be04:	d814      	bhi.n	be30 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    be06:	7b42      	ldrb	r2, [r0, #13]
    be08:	06d2      	lsls	r2, r2, #27
    be0a:	d111      	bne.n	be30 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    be0c:	4a0c      	ldr	r2, [pc, #48]	; (be40 <z_time_slice+0x78>)
    be0e:	f990 500e 	ldrsb.w	r5, [r0, #14]
    be12:	6812      	ldr	r2, [r2, #0]
    be14:	4295      	cmp	r5, r2
    be16:	db0b      	blt.n	be30 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    be18:	4a0a      	ldr	r2, [pc, #40]	; (be44 <z_time_slice+0x7c>)
    be1a:	4290      	cmp	r0, r2
    be1c:	d008      	beq.n	be30 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    be1e:	691a      	ldr	r2, [r3, #16]
    be20:	428a      	cmp	r2, r1
    be22:	dc02      	bgt.n	be2a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    be24:	f7ff ff96 	bl	bd54 <move_thread_to_end_of_prio_q>
    be28:	e7de      	b.n	bde8 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    be2a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    be2c:	611a      	str	r2, [r3, #16]
    be2e:	e7dd      	b.n	bdec <z_time_slice+0x24>
    be30:	2200      	movs	r2, #0
    be32:	e7fb      	b.n	be2c <z_time_slice+0x64>
    be34:	2000214c 	.word	0x2000214c
    be38:	20002180 	.word	0x20002180
    be3c:	20002188 	.word	0x20002188
    be40:	20002184 	.word	0x20002184
    be44:	20000d58 	.word	0x20000d58

0000be48 <ready_thread>:
{
    be48:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    be4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    be4e:	7b43      	ldrb	r3, [r0, #13]
    be50:	2a00      	cmp	r2, #0
    be52:	db2a      	blt.n	beaa <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    be54:	06da      	lsls	r2, r3, #27
    be56:	d128      	bne.n	beaa <ready_thread+0x62>
    be58:	6982      	ldr	r2, [r0, #24]
    be5a:	bb32      	cbnz	r2, beaa <ready_thread+0x62>
	return list->head == list;
    be5c:	4a14      	ldr	r2, [pc, #80]	; (beb0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    be5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    be62:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    be64:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be68:	f102 0520 	add.w	r5, r2, #32
    be6c:	42ab      	cmp	r3, r5
    be6e:	d017      	beq.n	bea0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be70:	b1b3      	cbz	r3, bea0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    be72:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    be76:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    be7a:	428e      	cmp	r6, r1
    be7c:	d00b      	beq.n	be96 <ready_thread+0x4e>
		return b2 - b1;
    be7e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    be80:	2900      	cmp	r1, #0
    be82:	dd08      	ble.n	be96 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    be84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    be86:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    be8a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    be8c:	6058      	str	r0, [r3, #4]
}
    be8e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    be90:	2000      	movs	r0, #0
    be92:	f7ff bf3f 	b.w	bd14 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    be96:	42a3      	cmp	r3, r4
    be98:	d002      	beq.n	bea0 <ready_thread+0x58>
    be9a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be9c:	2b00      	cmp	r3, #0
    be9e:	d1ea      	bne.n	be76 <ready_thread+0x2e>
	node->prev = tail;
    bea0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    bea4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    bea6:	6250      	str	r0, [r2, #36]	; 0x24
}
    bea8:	e7f1      	b.n	be8e <ready_thread+0x46>
}
    beaa:	bc70      	pop	{r4, r5, r6}
    beac:	4770      	bx	lr
    beae:	bf00      	nop
    beb0:	2000214c 	.word	0x2000214c

0000beb4 <z_sched_start>:
{
    beb4:	b510      	push	{r4, lr}
	__asm__ volatile(
    beb6:	f04f 0220 	mov.w	r2, #32
    beba:	f3ef 8411 	mrs	r4, BASEPRI
    bebe:	f382 8812 	msr	BASEPRI_MAX, r2
    bec2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    bec6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    bec8:	0751      	lsls	r1, r2, #29
    beca:	d404      	bmi.n	bed6 <z_sched_start+0x22>
	__asm__ volatile(
    becc:	f384 8811 	msr	BASEPRI, r4
    bed0:	f3bf 8f6f 	isb	sy
}
    bed4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bed6:	f022 0204 	bic.w	r2, r2, #4
    beda:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    bedc:	f7ff ffb4 	bl	be48 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    bee0:	4621      	mov	r1, r4
    bee2:	4802      	ldr	r0, [pc, #8]	; (beec <z_sched_start+0x38>)
}
    bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    bee8:	f7ff beee 	b.w	bcc8 <z_reschedule>
    beec:	200021ef 	.word	0x200021ef

0000bef0 <unready_thread>:
{
    bef0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    bef2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    bef6:	7b43      	ldrb	r3, [r0, #13]
    bef8:	2a00      	cmp	r2, #0
{
    befa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    befc:	da04      	bge.n	bf08 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    befe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bf02:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bf04:	f003 feae 	bl	fc64 <sys_dlist_remove>
	update_cache(thread == _current);
    bf08:	4b04      	ldr	r3, [pc, #16]	; (bf1c <unready_thread+0x2c>)
    bf0a:	6898      	ldr	r0, [r3, #8]
    bf0c:	1a43      	subs	r3, r0, r1
    bf0e:	4258      	negs	r0, r3
    bf10:	4158      	adcs	r0, r3
}
    bf12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    bf16:	f7ff befd 	b.w	bd14 <update_cache>
    bf1a:	bf00      	nop
    bf1c:	2000214c 	.word	0x2000214c

0000bf20 <pend>:
{
    bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf24:	4606      	mov	r6, r0
    bf26:	4615      	mov	r5, r2
    bf28:	461c      	mov	r4, r3
	__asm__ volatile(
    bf2a:	f04f 0320 	mov.w	r3, #32
    bf2e:	f3ef 8711 	mrs	r7, BASEPRI
    bf32:	f383 8812 	msr	BASEPRI_MAX, r3
    bf36:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    bf3a:	f003 ff20 	bl	fd7e <add_to_waitq_locked>
	__asm__ volatile(
    bf3e:	f387 8811 	msr	BASEPRI, r7
    bf42:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bf46:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    bf4a:	bf08      	it	eq
    bf4c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    bf50:	d008      	beq.n	bf64 <pend+0x44>
    bf52:	462a      	mov	r2, r5
    bf54:	4623      	mov	r3, r4
    bf56:	f106 0018 	add.w	r0, r6, #24
    bf5a:	4903      	ldr	r1, [pc, #12]	; (bf68 <pend+0x48>)
}
    bf5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf60:	f000 ba3e 	b.w	c3e0 <z_add_timeout>
    bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf68:	0000fd3b 	.word	0x0000fd3b

0000bf6c <z_pend_curr>:
{
    bf6c:	b510      	push	{r4, lr}
	pending_current = _current;
    bf6e:	4b07      	ldr	r3, [pc, #28]	; (bf8c <z_pend_curr+0x20>)
    bf70:	6898      	ldr	r0, [r3, #8]
    bf72:	4b07      	ldr	r3, [pc, #28]	; (bf90 <z_pend_curr+0x24>)
{
    bf74:	460c      	mov	r4, r1
	pending_current = _current;
    bf76:	6018      	str	r0, [r3, #0]
{
    bf78:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    bf7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bf7e:	f7ff ffcf 	bl	bf20 <pend>
    bf82:	4620      	mov	r0, r4
}
    bf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf88:	f7fa bcdc 	b.w	6944 <arch_swap>
    bf8c:	2000214c 	.word	0x2000214c
    bf90:	20002180 	.word	0x20002180

0000bf94 <z_set_prio>:
{
    bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf96:	4604      	mov	r4, r0
	__asm__ volatile(
    bf98:	f04f 0320 	mov.w	r3, #32
    bf9c:	f3ef 8611 	mrs	r6, BASEPRI
    bfa0:	f383 8812 	msr	BASEPRI_MAX, r3
    bfa4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    bfa8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bfaa:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    bfac:	b249      	sxtb	r1, r1
    bfae:	d133      	bne.n	c018 <z_set_prio+0x84>
		if (need_sched) {
    bfb0:	6982      	ldr	r2, [r0, #24]
    bfb2:	bb8a      	cbnz	r2, c018 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bfb8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bfba:	f003 fe53 	bl	fc64 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bfbe:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    bfc0:	4a17      	ldr	r2, [pc, #92]	; (c020 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    bfc2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bfc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bfc8:	7343      	strb	r3, [r0, #13]
    bfca:	4610      	mov	r0, r2
    bfcc:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bfd0:	4283      	cmp	r3, r0
    bfd2:	d01b      	beq.n	c00c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bfd4:	b1d3      	cbz	r3, c00c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    bfd6:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    bfd8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    bfdc:	42a9      	cmp	r1, r5
    bfde:	d010      	beq.n	c002 <z_set_prio+0x6e>
		return b2 - b1;
    bfe0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    bfe2:	2d00      	cmp	r5, #0
    bfe4:	dd0d      	ble.n	c002 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    bfe6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    bfe8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    bfec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    bfee:	605c      	str	r4, [r3, #4]
			update_cache(1);
    bff0:	2001      	movs	r0, #1
    bff2:	f7ff fe8f 	bl	bd14 <update_cache>
    bff6:	2001      	movs	r0, #1
	__asm__ volatile(
    bff8:	f386 8811 	msr	BASEPRI, r6
    bffc:	f3bf 8f6f 	isb	sy
}
    c000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    c002:	42bb      	cmp	r3, r7
    c004:	d002      	beq.n	c00c <z_set_prio+0x78>
    c006:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c008:	2b00      	cmp	r3, #0
    c00a:	d1e5      	bne.n	bfd8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    c00c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    c00e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    c012:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c014:	6254      	str	r4, [r2, #36]	; 0x24
}
    c016:	e7eb      	b.n	bff0 <z_set_prio+0x5c>
			thread->base.prio = prio;
    c018:	73a1      	strb	r1, [r4, #14]
    c01a:	2000      	movs	r0, #0
    c01c:	e7ec      	b.n	bff8 <z_set_prio+0x64>
    c01e:	bf00      	nop
    c020:	2000214c 	.word	0x2000214c

0000c024 <z_impl_k_thread_suspend>:
{
    c024:	b570      	push	{r4, r5, r6, lr}
    c026:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    c028:	3018      	adds	r0, #24
    c02a:	f003 ff2d 	bl	fe88 <z_abort_timeout>
	__asm__ volatile(
    c02e:	f04f 0320 	mov.w	r3, #32
    c032:	f3ef 8611 	mrs	r6, BASEPRI
    c036:	f383 8812 	msr	BASEPRI_MAX, r3
    c03a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    c03e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    c042:	7b63      	ldrb	r3, [r4, #13]
    c044:	2a00      	cmp	r2, #0
    c046:	da05      	bge.n	c054 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c04c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c04e:	4620      	mov	r0, r4
    c050:	f003 fe08 	bl	fc64 <sys_dlist_remove>
		update_cache(thread == _current);
    c054:	4d0b      	ldr	r5, [pc, #44]	; (c084 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c056:	7b63      	ldrb	r3, [r4, #13]
    c058:	68a8      	ldr	r0, [r5, #8]
    c05a:	f043 0310 	orr.w	r3, r3, #16
    c05e:	7363      	strb	r3, [r4, #13]
    c060:	1b03      	subs	r3, r0, r4
    c062:	4258      	negs	r0, r3
    c064:	4158      	adcs	r0, r3
    c066:	f7ff fe55 	bl	bd14 <update_cache>
	__asm__ volatile(
    c06a:	f386 8811 	msr	BASEPRI, r6
    c06e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    c072:	68ab      	ldr	r3, [r5, #8]
    c074:	42a3      	cmp	r3, r4
    c076:	d103      	bne.n	c080 <z_impl_k_thread_suspend+0x5c>
}
    c078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    c07c:	f003 be3d 	b.w	fcfa <z_reschedule_unlocked>
}
    c080:	bd70      	pop	{r4, r5, r6, pc}
    c082:	bf00      	nop
    c084:	2000214c 	.word	0x2000214c

0000c088 <k_sched_unlock>:
{
    c088:	b510      	push	{r4, lr}
	__asm__ volatile(
    c08a:	f04f 0320 	mov.w	r3, #32
    c08e:	f3ef 8411 	mrs	r4, BASEPRI
    c092:	f383 8812 	msr	BASEPRI_MAX, r3
    c096:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    c09a:	4b08      	ldr	r3, [pc, #32]	; (c0bc <k_sched_unlock+0x34>)
    c09c:	689a      	ldr	r2, [r3, #8]
    c09e:	7bd3      	ldrb	r3, [r2, #15]
    c0a0:	3301      	adds	r3, #1
    c0a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    c0a4:	2000      	movs	r0, #0
    c0a6:	f7ff fe35 	bl	bd14 <update_cache>
	__asm__ volatile(
    c0aa:	f384 8811 	msr	BASEPRI, r4
    c0ae:	f3bf 8f6f 	isb	sy
}
    c0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    c0b6:	f003 be20 	b.w	fcfa <z_reschedule_unlocked>
    c0ba:	bf00      	nop
    c0bc:	2000214c 	.word	0x2000214c

0000c0c0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    c0c0:	4b04      	ldr	r3, [pc, #16]	; (c0d4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c0c2:	2100      	movs	r1, #0
    c0c4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    c0c8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    c0cc:	4608      	mov	r0, r1
    c0ce:	f7ff bdcb 	b.w	bc68 <k_sched_time_slice_set>
    c0d2:	bf00      	nop
    c0d4:	2000214c 	.word	0x2000214c

0000c0d8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    c0da:	f04f 0320 	mov.w	r3, #32
    c0de:	f3ef 8511 	mrs	r5, BASEPRI
    c0e2:	f383 8812 	msr	BASEPRI_MAX, r3
    c0e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    c0ea:	491a      	ldr	r1, [pc, #104]	; (c154 <z_impl_k_yield+0x7c>)
    c0ec:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c0ee:	7b43      	ldrb	r3, [r0, #13]
    c0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c0f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c0f6:	f003 fdb5 	bl	fc64 <sys_dlist_remove>
	}
	queue_thread(_current);
    c0fa:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    c0fc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    c0fe:	4608      	mov	r0, r1
    c100:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c104:	735a      	strb	r2, [r3, #13]
    c106:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c10a:	4282      	cmp	r2, r0
    c10c:	d01c      	beq.n	c148 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c10e:	b1da      	cbz	r2, c148 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    c110:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    c112:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    c116:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    c11a:	42a6      	cmp	r6, r4
    c11c:	d00f      	beq.n	c13e <z_impl_k_yield+0x66>
		return b2 - b1;
    c11e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    c120:	2c00      	cmp	r4, #0
    c122:	dd0c      	ble.n	c13e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    c124:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    c126:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    c12a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    c12c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    c12e:	2001      	movs	r0, #1
    c130:	f7ff fdf0 	bl	bd14 <update_cache>
    c134:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    c136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c13a:	f7fa bc03 	b.w	6944 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    c13e:	42ba      	cmp	r2, r7
    c140:	d002      	beq.n	c148 <z_impl_k_yield+0x70>
    c142:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c144:	2a00      	cmp	r2, #0
    c146:	d1e6      	bne.n	c116 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    c148:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    c14a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    c14e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c150:	624b      	str	r3, [r1, #36]	; 0x24
}
    c152:	e7ec      	b.n	c12e <z_impl_k_yield+0x56>
    c154:	2000214c 	.word	0x2000214c

0000c158 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    c158:	ea50 0301 	orrs.w	r3, r0, r1
{
    c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c160:	4605      	mov	r5, r0
    c162:	460e      	mov	r6, r1
	if (ticks == 0) {
    c164:	d103      	bne.n	c16e <z_tick_sleep+0x16>
	z_impl_k_yield();
    c166:	f7ff ffb7 	bl	c0d8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    c16a:	2000      	movs	r0, #0
    c16c:	e033      	b.n	c1d6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    c16e:	f06f 0401 	mvn.w	r4, #1
    c172:	1a24      	subs	r4, r4, r0
    c174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c178:	eb63 0301 	sbc.w	r3, r3, r1
    c17c:	2c01      	cmp	r4, #1
    c17e:	f173 0300 	sbcs.w	r3, r3, #0
    c182:	da02      	bge.n	c18a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c184:	f003 fec0 	bl	ff08 <sys_clock_tick_get_32>
    c188:	1944      	adds	r4, r0, r5
    c18a:	f04f 0320 	mov.w	r3, #32
    c18e:	f3ef 8811 	mrs	r8, BASEPRI
    c192:	f383 8812 	msr	BASEPRI_MAX, r3
    c196:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    c19a:	4f10      	ldr	r7, [pc, #64]	; (c1dc <z_tick_sleep+0x84>)
    c19c:	4b10      	ldr	r3, [pc, #64]	; (c1e0 <z_tick_sleep+0x88>)
    c19e:	68b8      	ldr	r0, [r7, #8]
    c1a0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    c1a2:	f7ff fea5 	bl	bef0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c1a6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c1a8:	490e      	ldr	r1, [pc, #56]	; (c1e4 <z_tick_sleep+0x8c>)
    c1aa:	462a      	mov	r2, r5
    c1ac:	4633      	mov	r3, r6
    c1ae:	3018      	adds	r0, #24
    c1b0:	f000 f916 	bl	c3e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c1b4:	68ba      	ldr	r2, [r7, #8]
    c1b6:	7b53      	ldrb	r3, [r2, #13]
    c1b8:	f043 0310 	orr.w	r3, r3, #16
    c1bc:	7353      	strb	r3, [r2, #13]
    c1be:	4640      	mov	r0, r8
    c1c0:	f7fa fbc0 	bl	6944 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c1c4:	f003 fea0 	bl	ff08 <sys_clock_tick_get_32>
    c1c8:	1a20      	subs	r0, r4, r0
    c1ca:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    c1ce:	2801      	cmp	r0, #1
    c1d0:	f173 0300 	sbcs.w	r3, r3, #0
    c1d4:	dbc9      	blt.n	c16a <z_tick_sleep+0x12>
}
    c1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1da:	bf00      	nop
    c1dc:	2000214c 	.word	0x2000214c
    c1e0:	20002180 	.word	0x20002180
    c1e4:	0000fd3b 	.word	0x0000fd3b

0000c1e8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c1e8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    c1ec:	bf08      	it	eq
    c1ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    c1f2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c1f4:	d106      	bne.n	c204 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    c1f6:	4b08      	ldr	r3, [pc, #32]	; (c218 <z_impl_k_sleep+0x30>)
    c1f8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c1fa:	f7ff ff13 	bl	c024 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    c1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    c202:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    c204:	f7ff ffa8 	bl	c158 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    c208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c20c:	fb80 0303 	smull	r0, r3, r0, r3
    c210:	0bc0      	lsrs	r0, r0, #15
    c212:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    c216:	e7f4      	b.n	c202 <z_impl_k_sleep+0x1a>
    c218:	2000214c 	.word	0x2000214c

0000c21c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    c21c:	4b01      	ldr	r3, [pc, #4]	; (c224 <z_impl_z_current_get+0x8>)
    c21e:	6898      	ldr	r0, [r3, #8]
    c220:	4770      	bx	lr
    c222:	bf00      	nop
    c224:	2000214c 	.word	0x2000214c

0000c228 <z_impl_k_is_preempt_thread>:
    c228:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    c22c:	b93b      	cbnz	r3, c23e <z_impl_k_is_preempt_thread+0x16>
    c22e:	4b05      	ldr	r3, [pc, #20]	; (c244 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    c230:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    c232:	89d8      	ldrh	r0, [r3, #14]
    c234:	287f      	cmp	r0, #127	; 0x7f
    c236:	bf8c      	ite	hi
    c238:	2000      	movhi	r0, #0
    c23a:	2001      	movls	r0, #1
    c23c:	4770      	bx	lr
    c23e:	2000      	movs	r0, #0
}
    c240:	4770      	bx	lr
    c242:	bf00      	nop
    c244:	2000214c 	.word	0x2000214c

0000c248 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    c248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c24c:	4604      	mov	r4, r0
    c24e:	f04f 0320 	mov.w	r3, #32
    c252:	f3ef 8611 	mrs	r6, BASEPRI
    c256:	f383 8812 	msr	BASEPRI_MAX, r3
    c25a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c25e:	7b43      	ldrb	r3, [r0, #13]
    c260:	071a      	lsls	r2, r3, #28
    c262:	d505      	bpl.n	c270 <z_thread_abort+0x28>
	__asm__ volatile(
    c264:	f386 8811 	msr	BASEPRI, r6
    c268:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c270:	f023 0220 	bic.w	r2, r3, #32
    c274:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    c278:	09d2      	lsrs	r2, r2, #7
    c27a:	d123      	bne.n	c2c4 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c27c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    c27e:	68a3      	ldr	r3, [r4, #8]
    c280:	b113      	cbz	r3, c288 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    c282:	4620      	mov	r0, r4
    c284:	f003 fcf6 	bl	fc74 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    c288:	f104 0018 	add.w	r0, r4, #24
    c28c:	f003 fdfc 	bl	fe88 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    c290:	f104 0758 	add.w	r7, r4, #88	; 0x58
    c294:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    c298:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c29a:	42bd      	cmp	r5, r7
    c29c:	d000      	beq.n	c2a0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c29e:	b9cd      	cbnz	r5, c2d4 <z_thread_abort+0x8c>
		update_cache(1);
    c2a0:	2001      	movs	r0, #1
    c2a2:	f7ff fd37 	bl	bd14 <update_cache>
		z_thread_monitor_exit(thread);
    c2a6:	4620      	mov	r0, r4
    c2a8:	f7ff f8f8 	bl	b49c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    c2ac:	4b10      	ldr	r3, [pc, #64]	; (c2f0 <z_thread_abort+0xa8>)
    c2ae:	689b      	ldr	r3, [r3, #8]
    c2b0:	42a3      	cmp	r3, r4
    c2b2:	d1d7      	bne.n	c264 <z_thread_abort+0x1c>
    c2b4:	f3ef 8305 	mrs	r3, IPSR
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d1d3      	bne.n	c264 <z_thread_abort+0x1c>
    c2bc:	4630      	mov	r0, r6
    c2be:	f7fa fb41 	bl	6944 <arch_swap>
	return ret;
    c2c2:	e7cf      	b.n	c264 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c2c4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    c2c8:	f043 0308 	orr.w	r3, r3, #8
    c2cc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c2ce:	f003 fcc9 	bl	fc64 <sys_dlist_remove>
}
    c2d2:	e7d4      	b.n	c27e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    c2d4:	4628      	mov	r0, r5
    c2d6:	f003 fccd 	bl	fc74 <unpend_thread_no_timeout>
    c2da:	f105 0018 	add.w	r0, r5, #24
    c2de:	f003 fdd3 	bl	fe88 <z_abort_timeout>
    c2e2:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    c2e6:	4628      	mov	r0, r5
    c2e8:	f7ff fdae 	bl	be48 <ready_thread>
    c2ec:	e7d4      	b.n	c298 <z_thread_abort+0x50>
    c2ee:	bf00      	nop
    c2f0:	2000214c 	.word	0x2000214c

0000c2f4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    c2f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    c2f6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    c2fa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    c2fc:	e9cd 6700 	strd	r6, r7, [sp]
    c300:	f7ff fe34 	bl	bf6c <z_pend_curr>

	if (data != NULL) {
    c304:	b11c      	cbz	r4, c30e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    c306:	4b03      	ldr	r3, [pc, #12]	; (c314 <z_sched_wait+0x20>)
    c308:	689b      	ldr	r3, [r3, #8]
    c30a:	695b      	ldr	r3, [r3, #20]
    c30c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    c30e:	b002      	add	sp, #8
    c310:	bdd0      	pop	{r4, r6, r7, pc}
    c312:	bf00      	nop
    c314:	2000214c 	.word	0x2000214c

0000c318 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c318:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    c31a:	4806      	ldr	r0, [pc, #24]	; (c334 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    c31c:	4a06      	ldr	r2, [pc, #24]	; (c338 <z_data_copy+0x20>)
    c31e:	4907      	ldr	r1, [pc, #28]	; (c33c <z_data_copy+0x24>)
    c320:	1a12      	subs	r2, r2, r0
    c322:	f002 feaf 	bl	f084 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c32a:	4a05      	ldr	r2, [pc, #20]	; (c340 <z_data_copy+0x28>)
    c32c:	4905      	ldr	r1, [pc, #20]	; (c344 <z_data_copy+0x2c>)
    c32e:	4806      	ldr	r0, [pc, #24]	; (c348 <z_data_copy+0x30>)
    c330:	f002 bea8 	b.w	f084 <memcpy>
    c334:	20000000 	.word	0x20000000
    c338:	200003d0 	.word	0x200003d0
    c33c:	00013038 	.word	0x00013038
    c340:	00000000 	.word	0x00000000
    c344:	00013038 	.word	0x00013038
    c348:	20000000 	.word	0x20000000

0000c34c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c34c:	4b03      	ldr	r3, [pc, #12]	; (c35c <elapsed+0x10>)
    c34e:	681b      	ldr	r3, [r3, #0]
    c350:	b90b      	cbnz	r3, c356 <elapsed+0xa>
    c352:	f7fd b8f9 	b.w	9548 <sys_clock_elapsed>
}
    c356:	2000      	movs	r0, #0
    c358:	4770      	bx	lr
    c35a:	bf00      	nop
    c35c:	2000218c 	.word	0x2000218c

0000c360 <next_timeout>:
	return list->head == list;
    c360:	4b10      	ldr	r3, [pc, #64]	; (c3a4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    c362:	b510      	push	{r4, lr}
    c364:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c366:	429c      	cmp	r4, r3
    c368:	bf08      	it	eq
    c36a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    c36c:	f7ff ffee 	bl	c34c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    c370:	b1a4      	cbz	r4, c39c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c372:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    c376:	1a1b      	subs	r3, r3, r0
    c378:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    c37c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c380:	f170 0200 	sbcs.w	r2, r0, #0
    c384:	da0a      	bge.n	c39c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    c386:	2800      	cmp	r0, #0
    c388:	bfac      	ite	ge
    c38a:	4618      	movge	r0, r3
    c38c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c38e:	4b06      	ldr	r3, [pc, #24]	; (c3a8 <next_timeout+0x48>)
    c390:	691b      	ldr	r3, [r3, #16]
    c392:	b113      	cbz	r3, c39a <next_timeout+0x3a>
    c394:	4298      	cmp	r0, r3
    c396:	bfa8      	it	ge
    c398:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    c39a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    c39c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c3a0:	e7f5      	b.n	c38e <next_timeout+0x2e>
    c3a2:	bf00      	nop
    c3a4:	20000200 	.word	0x20000200
    c3a8:	2000214c 	.word	0x2000214c

0000c3ac <remove_timeout>:
{
    c3ac:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    c3ae:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c3b0:	b168      	cbz	r0, c3ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    c3b2:	4a0a      	ldr	r2, [pc, #40]	; (c3dc <remove_timeout+0x30>)
    c3b4:	6852      	ldr	r2, [r2, #4]
    c3b6:	4290      	cmp	r0, r2
    c3b8:	d009      	beq.n	c3ce <remove_timeout+0x22>
	if (next(t) != NULL) {
    c3ba:	b143      	cbz	r3, c3ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    c3bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    c3c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    c3c4:	1912      	adds	r2, r2, r4
    c3c6:	eb41 0105 	adc.w	r1, r1, r5
    c3ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    c3ce:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    c3d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c3d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c3d4:	2300      	movs	r3, #0
	node->prev = NULL;
    c3d6:	e9c0 3300 	strd	r3, r3, [r0]
}
    c3da:	bd30      	pop	{r4, r5, pc}
    c3dc:	20000200 	.word	0x20000200

0000c3e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c3e4:	bf08      	it	eq
    c3e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    c3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3ec:	4604      	mov	r4, r0
    c3ee:	461f      	mov	r7, r3
    c3f0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c3f2:	d067      	beq.n	c4c4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    c3f4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    c3f6:	f04f 0320 	mov.w	r3, #32
    c3fa:	f3ef 8611 	mrs	r6, BASEPRI
    c3fe:	f383 8812 	msr	BASEPRI_MAX, r3
    c402:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c406:	f06f 0201 	mvn.w	r2, #1
    c40a:	1b53      	subs	r3, r2, r5
    c40c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c410:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c414:	2b00      	cmp	r3, #0
    c416:	db1b      	blt.n	c450 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c418:	4b2b      	ldr	r3, [pc, #172]	; (c4c8 <z_add_timeout+0xe8>)
    c41a:	e9d3 1300 	ldrd	r1, r3, [r3]
    c41e:	1a52      	subs	r2, r2, r1
    c420:	eb6c 0303 	sbc.w	r3, ip, r3
    c424:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    c426:	eb63 0307 	sbc.w	r3, r3, r7
    c42a:	2d01      	cmp	r5, #1
    c42c:	f173 0200 	sbcs.w	r2, r3, #0
    c430:	bfbc      	itt	lt
    c432:	2501      	movlt	r5, #1
    c434:	2300      	movlt	r3, #0
    c436:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    c43a:	4824      	ldr	r0, [pc, #144]	; (c4cc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    c43c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c440:	4283      	cmp	r3, r0
    c442:	d118      	bne.n	c476 <z_add_timeout+0x96>
	node->prev = tail;
    c444:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    c448:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    c44c:	6044      	str	r4, [r0, #4]
}
    c44e:	e026      	b.n	c49e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c450:	f7ff ff7c 	bl	c34c <elapsed>
    c454:	3501      	adds	r5, #1
    c456:	f147 0700 	adc.w	r7, r7, #0
    c45a:	182d      	adds	r5, r5, r0
    c45c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    c460:	e9c4 5704 	strd	r5, r7, [r4, #16]
    c464:	e7e9      	b.n	c43a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    c466:	1a52      	subs	r2, r2, r1
    c468:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    c46c:	459c      	cmp	ip, r3
    c46e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    c472:	d0e7      	beq.n	c444 <z_add_timeout+0x64>
    c474:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    c476:	2b00      	cmp	r3, #0
    c478:	d0e4      	beq.n	c444 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    c47a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    c47e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    c482:	428a      	cmp	r2, r1
    c484:	eb75 0e07 	sbcs.w	lr, r5, r7
    c488:	daed      	bge.n	c466 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    c48a:	1a8a      	subs	r2, r1, r2
    c48c:	eb67 0505 	sbc.w	r5, r7, r5
    c490:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    c494:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c496:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c49a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c49c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    c49e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c4a0:	4283      	cmp	r3, r0
    c4a2:	d00b      	beq.n	c4bc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c4a4:	429c      	cmp	r4, r3
    c4a6:	d109      	bne.n	c4bc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c4a8:	f7ff ff5a 	bl	c360 <next_timeout>

			if (next_time == 0 ||
    c4ac:	b118      	cbz	r0, c4b6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    c4ae:	4b08      	ldr	r3, [pc, #32]	; (c4d0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    c4b0:	691b      	ldr	r3, [r3, #16]
    c4b2:	4283      	cmp	r3, r0
    c4b4:	d002      	beq.n	c4bc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    c4b6:	2100      	movs	r1, #0
    c4b8:	f7fd f814 	bl	94e4 <sys_clock_set_timeout>
	__asm__ volatile(
    c4bc:	f386 8811 	msr	BASEPRI, r6
    c4c0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    c4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4c6:	bf00      	nop
    c4c8:	20000ec8 	.word	0x20000ec8
    c4cc:	20000200 	.word	0x20000200
    c4d0:	2000214c 	.word	0x2000214c

0000c4d4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c4d8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    c4da:	f7ff fc75 	bl	bdc8 <z_time_slice>
	__asm__ volatile(
    c4de:	f04f 0320 	mov.w	r3, #32
    c4e2:	f3ef 8411 	mrs	r4, BASEPRI
    c4e6:	f383 8812 	msr	BASEPRI_MAX, r3
    c4ea:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    c4ee:	4e24      	ldr	r6, [pc, #144]	; (c580 <CONFIG_USB_DEVICE_VID+0x2d>)
	return list->head == list;
    c4f0:	f8df 8090 	ldr.w	r8, [pc, #144]	; c584 <CONFIG_USB_DEVICE_VID+0x31>
    c4f4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    c4f6:	4d24      	ldr	r5, [pc, #144]	; (c588 <CONFIG_USB_DEVICE_VID+0x35>)
    c4f8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    c4fc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c4fe:	4540      	cmp	r0, r8
		curr_tick += dt;
    c500:	e9d5 1e00 	ldrd	r1, lr, [r5]
    c504:	ea4f 77e2 	mov.w	r7, r2, asr #31
    c508:	d00b      	beq.n	c522 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    c50a:	b150      	cbz	r0, c522 <sys_clock_announce+0x4e>
    c50c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    c510:	429a      	cmp	r2, r3
    c512:	eb77 090c 	sbcs.w	r9, r7, ip
    c516:	da16      	bge.n	c546 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    c518:	1a9b      	subs	r3, r3, r2
    c51a:	eb6c 0c07 	sbc.w	ip, ip, r7
    c51e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    c522:	1852      	adds	r2, r2, r1
    c524:	eb4e 0707 	adc.w	r7, lr, r7
    c528:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    c52c:	2500      	movs	r5, #0
    c52e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    c530:	f7ff ff16 	bl	c360 <next_timeout>
    c534:	4629      	mov	r1, r5
    c536:	f7fc ffd5 	bl	94e4 <sys_clock_set_timeout>
	__asm__ volatile(
    c53a:	f384 8811 	msr	BASEPRI, r4
    c53e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    c542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    c546:	1859      	adds	r1, r3, r1
    c548:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    c54c:	1ad3      	subs	r3, r2, r3
    c54e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    c550:	2200      	movs	r2, #0
    c552:	2300      	movs	r3, #0
    c554:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    c558:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    c55c:	f7ff ff26 	bl	c3ac <remove_timeout>
    c560:	f384 8811 	msr	BASEPRI, r4
    c564:	f3bf 8f6f 	isb	sy
		t->fn(t);
    c568:	6883      	ldr	r3, [r0, #8]
    c56a:	4798      	blx	r3
	__asm__ volatile(
    c56c:	f04f 0320 	mov.w	r3, #32
    c570:	f3ef 8411 	mrs	r4, BASEPRI
    c574:	f383 8812 	msr	BASEPRI_MAX, r3
    c578:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    c57c:	e7bc      	b.n	c4f8 <sys_clock_announce+0x24>
    c57e:	bf00      	nop
    c580:	2000218c 	.word	0x2000218c
    c584:	20000200 	.word	0x20000200
    c588:	20000ec8 	.word	0x20000ec8

0000c58c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c58c:	b510      	push	{r4, lr}
    c58e:	f04f 0320 	mov.w	r3, #32
    c592:	f3ef 8411 	mrs	r4, BASEPRI
    c596:	f383 8812 	msr	BASEPRI_MAX, r3
    c59a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    c59e:	f7fc ffd3 	bl	9548 <sys_clock_elapsed>
    c5a2:	4a05      	ldr	r2, [pc, #20]	; (c5b8 <sys_clock_tick_get+0x2c>)
    c5a4:	e9d2 3100 	ldrd	r3, r1, [r2]
    c5a8:	18c0      	adds	r0, r0, r3
    c5aa:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    c5ae:	f384 8811 	msr	BASEPRI, r4
    c5b2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    c5b6:	bd10      	pop	{r4, pc}
    c5b8:	20000ec8 	.word	0x20000ec8

0000c5bc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    c5bc:	b570      	push	{r4, r5, r6, lr}
    c5be:	4604      	mov	r4, r0
	__asm__ volatile(
    c5c0:	f04f 0320 	mov.w	r3, #32
    c5c4:	f3ef 8511 	mrs	r5, BASEPRI
    c5c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c5cc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    c5d0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    c5d4:	3301      	adds	r3, #1
    c5d6:	f142 0200 	adc.w	r2, r2, #0
    c5da:	2b02      	cmp	r3, #2
    c5dc:	f172 0300 	sbcs.w	r3, r2, #0
    c5e0:	d304      	bcc.n	c5ec <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c5e2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    c5e6:	4918      	ldr	r1, [pc, #96]	; (c648 <z_timer_expiration_handler+0x8c>)
    c5e8:	f7ff fefa 	bl	c3e0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    c5ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c5ee:	3301      	adds	r3, #1
    c5f0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    c5f2:	6a23      	ldr	r3, [r4, #32]
    c5f4:	b173      	cbz	r3, c614 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    c5f6:	f385 8811 	msr	BASEPRI, r5
    c5fa:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    c5fe:	6a23      	ldr	r3, [r4, #32]
    c600:	4620      	mov	r0, r4
    c602:	4798      	blx	r3
	__asm__ volatile(
    c604:	f04f 0320 	mov.w	r3, #32
    c608:	f3ef 8511 	mrs	r5, BASEPRI
    c60c:	f383 8812 	msr	BASEPRI_MAX, r3
    c610:	f3bf 8f6f 	isb	sy
	return list->head == list;
    c614:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c618:	42a6      	cmp	r6, r4
    c61a:	d000      	beq.n	c61e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    c61c:	b926      	cbnz	r6, c628 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    c61e:	f385 8811 	msr	BASEPRI, r5
    c622:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    c626:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    c628:	4630      	mov	r0, r6
    c62a:	f003 fb36 	bl	fc9a <z_unpend_thread_no_timeout>
    c62e:	2300      	movs	r3, #0
    c630:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
    c634:	f385 8811 	msr	BASEPRI, r5
    c638:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    c63c:	4630      	mov	r0, r6
}
    c63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    c642:	f003 bb6a 	b.w	fd1a <z_ready_thread>
    c646:	bf00      	nop
    c648:	0000c5bd 	.word	0x0000c5bd

0000c64c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    c64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c650:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c656:	bf08      	it	eq
    c658:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    c65c:	4606      	mov	r6, r0
    c65e:	461c      	mov	r4, r3
    c660:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    c664:	4689      	mov	r9, r1
    c666:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c668:	d03e      	beq.n	c6e8 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    c66a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    c66e:	bf08      	it	eq
    c670:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    c674:	4615      	mov	r5, r2
    c676:	4607      	mov	r7, r0
    c678:	d014      	beq.n	c6a4 <z_impl_k_timer_start+0x58>
    c67a:	ea50 0302 	orrs.w	r3, r0, r2
    c67e:	d011      	beq.n	c6a4 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    c680:	f06f 0301 	mvn.w	r3, #1
    c684:	1a9b      	subs	r3, r3, r2
    c686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c68a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    c68e:	2b00      	cmp	r3, #0
    c690:	da08      	bge.n	c6a4 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    c692:	2a02      	cmp	r2, #2
    c694:	f170 0300 	sbcs.w	r3, r0, #0
    c698:	bfbc      	itt	lt
    c69a:	2502      	movlt	r5, #2
    c69c:	2700      	movlt	r7, #0
    c69e:	3d01      	subs	r5, #1
    c6a0:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    c6a4:	f06f 0301 	mvn.w	r3, #1
    c6a8:	1a5b      	subs	r3, r3, r1
    c6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c6ae:	eb63 0304 	sbc.w	r3, r3, r4
    c6b2:	2b00      	cmp	r3, #0
    c6b4:	da09      	bge.n	c6ca <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    c6b6:	2901      	cmp	r1, #1
    c6b8:	f174 0300 	sbcs.w	r3, r4, #0
    c6bc:	bfbc      	itt	lt
    c6be:	2101      	movlt	r1, #1
    c6c0:	2400      	movlt	r4, #0
    c6c2:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    c6c6:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    c6ca:	4630      	mov	r0, r6
    c6cc:	f003 fbdc 	bl	fe88 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    c6d0:	2300      	movs	r3, #0
    c6d2:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    c6d4:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c6d8:	464a      	mov	r2, r9
    c6da:	4643      	mov	r3, r8
    c6dc:	4630      	mov	r0, r6
    c6de:	4903      	ldr	r1, [pc, #12]	; (c6ec <z_impl_k_timer_start+0xa0>)
		     duration);
}
    c6e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c6e4:	f7ff be7c 	b.w	c3e0 <z_add_timeout>
}
    c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6ec:	0000c5bd 	.word	0x0000c5bd

0000c6f0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    c6f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    c6f4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    c6f6:	4b29      	ldr	r3, [pc, #164]	; (c79c <z_impl_k_poll+0xac>)
    c6f8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    c6fa:	2301      	movs	r3, #1
    c6fc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    c700:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    c704:	ea52 0305 	orrs.w	r3, r2, r5
{
    c708:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    c70a:	bf0c      	ite	eq
    c70c:	2301      	moveq	r3, #1
    c70e:	2300      	movne	r3, #0
    c710:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    c714:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    c716:	f003 fc84 	bl	10022 <register_events>
    c71a:	4681      	mov	r9, r0
	__asm__ volatile(
    c71c:	f04f 0320 	mov.w	r3, #32
    c720:	f3ef 8a11 	mrs	sl, BASEPRI
    c724:	f383 8812 	msr	BASEPRI_MAX, r3
    c728:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    c72c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    c730:	b964      	cbnz	r4, c74c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    c732:	4601      	mov	r1, r0
    c734:	4652      	mov	r2, sl
    c736:	4640      	mov	r0, r8
    c738:	f003 fd44 	bl	101c4 <clear_event_registrations>
	__asm__ volatile(
    c73c:	f38a 8811 	msr	BASEPRI, sl
    c740:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    c744:	4620      	mov	r0, r4
    c746:	b002      	add	sp, #8
    c748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    c74c:	2300      	movs	r3, #0
    c74e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c752:	ea56 0305 	orrs.w	r3, r6, r5
    c756:	d106      	bne.n	c766 <z_impl_k_poll+0x76>
    c758:	f38a 8811 	msr	BASEPRI, sl
    c75c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    c760:	f06f 040a 	mvn.w	r4, #10
    c764:	e7ee      	b.n	c744 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    c766:	e9cd 6500 	strd	r6, r5, [sp]
    c76a:	4a0d      	ldr	r2, [pc, #52]	; (c7a0 <z_impl_k_poll+0xb0>)
    c76c:	480d      	ldr	r0, [pc, #52]	; (c7a4 <z_impl_k_poll+0xb4>)
    c76e:	4651      	mov	r1, sl
    c770:	f7ff fbfc 	bl	bf6c <z_pend_curr>
    c774:	4604      	mov	r4, r0
	__asm__ volatile(
    c776:	f04f 0320 	mov.w	r3, #32
    c77a:	f3ef 8511 	mrs	r5, BASEPRI
    c77e:	f383 8812 	msr	BASEPRI_MAX, r3
    c782:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    c786:	462a      	mov	r2, r5
    c788:	4649      	mov	r1, r9
    c78a:	4640      	mov	r0, r8
    c78c:	f003 fd1a 	bl	101c4 <clear_event_registrations>
	__asm__ volatile(
    c790:	f385 8811 	msr	BASEPRI, r5
    c794:	f3bf 8f6f 	isb	sy
	return swap_rc;
    c798:	e7d4      	b.n	c744 <z_impl_k_poll+0x54>
    c79a:	bf00      	nop
    c79c:	2000214c 	.word	0x2000214c
    c7a0:	20000208 	.word	0x20000208
    c7a4:	200021ef 	.word	0x200021ef

0000c7a8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    c7a8:	b538      	push	{r3, r4, r5, lr}
    c7aa:	4603      	mov	r3, r0
	__asm__ volatile(
    c7ac:	f04f 0220 	mov.w	r2, #32
    c7b0:	f3ef 8511 	mrs	r5, BASEPRI
    c7b4:	f382 8812 	msr	BASEPRI_MAX, r2
    c7b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    c7bc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    c7be:	2101      	movs	r1, #1
    c7c0:	6081      	str	r1, [r0, #8]
	return list->head == list;
    c7c2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    c7c4:	4283      	cmp	r3, r0
    c7c6:	d106      	bne.n	c7d6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    c7c8:	f385 8811 	msr	BASEPRI, r5
    c7cc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    c7d0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    c7d2:	4620      	mov	r0, r4
    c7d4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    c7d6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c7da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c7dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c7de:	2300      	movs	r3, #0
	node->prev = NULL;
    c7e0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    c7e4:	f003 fc94 	bl	10110 <signal_poll_event>
	z_reschedule(&lock, key);
    c7e8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    c7ea:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    c7ec:	4801      	ldr	r0, [pc, #4]	; (c7f4 <z_impl_k_poll_signal_raise+0x4c>)
    c7ee:	f7ff fa6b 	bl	bcc8 <z_reschedule>
	return rc;
    c7f2:	e7ee      	b.n	c7d2 <z_impl_k_poll_signal_raise+0x2a>
    c7f4:	200021ef 	.word	0x200021ef

0000c7f8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    c7f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c7fa:	4606      	mov	r6, r0
    c7fc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    c7fe:	f003 f93c 	bl	fa7a <k_is_in_isr>
    c802:	b980      	cbnz	r0, c826 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    c804:	4b0b      	ldr	r3, [pc, #44]	; (c834 <z_thread_aligned_alloc+0x3c>)
    c806:	689b      	ldr	r3, [r3, #8]
    c808:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
    c80c:	b17c      	cbz	r4, c82e <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    c80e:	1d2a      	adds	r2, r5, #4
    c810:	d209      	bcs.n	c826 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    c812:	2000      	movs	r0, #0
    c814:	2100      	movs	r1, #0
    c816:	e9cd 0100 	strd	r0, r1, [sp]
    c81a:	f046 0104 	orr.w	r1, r6, #4
    c81e:	4620      	mov	r0, r4
    c820:	f003 fd39 	bl	10296 <k_heap_aligned_alloc>
	if (mem == NULL) {
    c824:	b908      	cbnz	r0, c82a <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    c826:	2400      	movs	r4, #0
	}

	return ret;
    c828:	e001      	b.n	c82e <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
    c82a:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    c82c:	1d04      	adds	r4, r0, #4
}
    c82e:	4620      	mov	r0, r4
    c830:	b002      	add	sp, #8
    c832:	bd70      	pop	{r4, r5, r6, pc}
    c834:	2000214c 	.word	0x2000214c

0000c838 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    c838:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c83a:	4c06      	ldr	r4, [pc, #24]	; (c854 <statics_init+0x1c>)
    c83c:	4d06      	ldr	r5, [pc, #24]	; (c858 <statics_init+0x20>)
    c83e:	42ac      	cmp	r4, r5
    c840:	d301      	bcc.n	c846 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    c842:	2000      	movs	r0, #0
    c844:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c846:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c84a:	4620      	mov	r0, r4
    c84c:	f003 fd1b 	bl	10286 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c850:	3414      	adds	r4, #20
    c852:	e7f4      	b.n	c83e <statics_init+0x6>
    c854:	20000278 	.word	0x20000278
    c858:	20000278 	.word	0x20000278

0000c85c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    c85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    c85e:	4b09      	ldr	r3, [pc, #36]	; (c884 <k_sys_work_q_init+0x28>)
    c860:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    c862:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    c864:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    c866:	9300      	str	r3, [sp, #0]
    c868:	4907      	ldr	r1, [pc, #28]	; (c888 <k_sys_work_q_init+0x2c>)
    c86a:	4808      	ldr	r0, [pc, #32]	; (c88c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    c86c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    c870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c874:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c878:	f7ff f9a8 	bl	bbcc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    c87c:	4620      	mov	r0, r4
    c87e:	b004      	add	sp, #16
    c880:	bd10      	pop	{r4, pc}
    c882:	bf00      	nop
    c884:	0001302c 	.word	0x0001302c
    c888:	20004320 	.word	0x20004320
    c88c:	20000ed0 	.word	0x20000ed0

0000c890 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    c890:	4770      	bx	lr

0000c892 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    c892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c896:	4607      	mov	r7, r0
    c898:	460e      	mov	r6, r1
    c89a:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
    c89c:	461d      	mov	r5, r3
    c89e:	b1fb      	cbz	r3, c8e0 <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
    c8a0:	7818      	ldrb	r0, [r3, #0]
    c8a2:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    c8a4:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
    c8a8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    c8ac:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    c8ae:	f04f 0900 	mov.w	r9, #0
    c8b2:	45d1      	cmp	r9, sl
    c8b4:	d308      	bcc.n	c8c8 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
    c8b6:	686a      	ldr	r2, [r5, #4]
    c8b8:	f105 0308 	add.w	r3, r5, #8
    c8bc:	4641      	mov	r1, r8
    c8be:	4638      	mov	r0, r7
    c8c0:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    c8c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    c8c6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    c8c8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    c8cc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    c8d0:	4620      	mov	r0, r4
    c8d2:	f002 fb81 	bl	efd8 <strlen>
    c8d6:	3001      	adds	r0, #1
    c8d8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    c8da:	f109 0901 	add.w	r9, r9, #1
    c8de:	e7e8      	b.n	c8b2 <cbpprintf_external+0x20>
}
    c8e0:	f06f 0015 	mvn.w	r0, #21
    c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c8e8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    c8e8:	4603      	mov	r3, r0
    c8ea:	b140      	cbz	r0, c8fe <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c8ec:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c8ee:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c8f2:	2a02      	cmp	r2, #2
    c8f4:	d006      	beq.n	c904 <sys_notify_validate+0x1c>
    c8f6:	2a03      	cmp	r2, #3
    c8f8:	d004      	beq.n	c904 <sys_notify_validate+0x1c>
    c8fa:	2a01      	cmp	r2, #1
    c8fc:	d005      	beq.n	c90a <sys_notify_validate+0x22>
		return -EINVAL;
    c8fe:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    c902:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    c904:	681a      	ldr	r2, [r3, #0]
    c906:	2a00      	cmp	r2, #0
    c908:	d0f9      	beq.n	c8fe <sys_notify_validate+0x16>
		notify->result = 0;
    c90a:	2000      	movs	r0, #0
    c90c:	6098      	str	r0, [r3, #8]
    c90e:	4770      	bx	lr

0000c910 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c910:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c912:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    c916:	2a02      	cmp	r2, #2
{
    c918:	b510      	push	{r4, lr}
    c91a:	4603      	mov	r3, r0
	notify->result = res;
    c91c:	6081      	str	r1, [r0, #8]
	switch (method) {
    c91e:	d00a      	beq.n	c936 <sys_notify_finalize+0x26>
    c920:	2a03      	cmp	r2, #3
    c922:	d10b      	bne.n	c93c <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    c924:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    c926:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c928:	2200      	movs	r2, #0
    c92a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    c92c:	b108      	cbz	r0, c932 <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    c92e:	f7ff ff3b 	bl	c7a8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c932:	4620      	mov	r0, r4
    c934:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    c936:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    c938:	2400      	movs	r4, #0
		break;
    c93a:	e7f5      	b.n	c928 <sys_notify_finalize+0x18>
	switch (method) {
    c93c:	2400      	movs	r4, #0
    c93e:	4620      	mov	r0, r4
    c940:	e7f2      	b.n	c928 <sys_notify_finalize+0x18>

0000c942 <str_out>:
{
    c942:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c944:	688a      	ldr	r2, [r1, #8]
    c946:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    c948:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c94a:	b114      	cbz	r4, c952 <str_out+0x10>
    c94c:	684b      	ldr	r3, [r1, #4]
    c94e:	4293      	cmp	r3, r2
    c950:	dc01      	bgt.n	c956 <str_out+0x14>
		ctx->count++;
    c952:	608d      	str	r5, [r1, #8]
}
    c954:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    c956:	3b01      	subs	r3, #1
    c958:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    c95a:	bf08      	it	eq
    c95c:	2200      	moveq	r2, #0
    c95e:	608d      	str	r5, [r1, #8]
    c960:	bf0c      	ite	eq
    c962:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    c964:	54a0      	strbne	r0, [r4, r2]
    c966:	e7f5      	b.n	c954 <str_out+0x12>

0000c968 <printk>:
{
    c968:	b40f      	push	{r0, r1, r2, r3}
    c96a:	b507      	push	{r0, r1, r2, lr}
    c96c:	a904      	add	r1, sp, #16
    c96e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    c972:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    c974:	f000 ff43 	bl	d7fe <z_log_vprintk>
}
    c978:	b003      	add	sp, #12
    c97a:	f85d eb04 	ldr.w	lr, [sp], #4
    c97e:	b004      	add	sp, #16
    c980:	4770      	bx	lr

0000c982 <snprintk>:
{
    c982:	b40c      	push	{r2, r3}
    c984:	b507      	push	{r0, r1, r2, lr}
    c986:	ab04      	add	r3, sp, #16
    c988:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    c98c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    c98e:	f7f4 ff55 	bl	183c <vsnprintk>
}
    c992:	b003      	add	sp, #12
    c994:	f85d eb04 	ldr.w	lr, [sp], #4
    c998:	b002      	add	sp, #8
    c99a:	4770      	bx	lr

0000c99c <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c99c:	b510      	push	{r4, lr}
    c99e:	4603      	mov	r3, r0
	return list->head;
    c9a0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c9a2:	2200      	movs	r2, #0
    c9a4:	b158      	cbz	r0, c9be <sys_slist_find_and_remove+0x22>
    c9a6:	4288      	cmp	r0, r1
    c9a8:	d10f      	bne.n	c9ca <sys_slist_find_and_remove+0x2e>
	return node->next;
    c9aa:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    c9ac:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    c9ae:	b93a      	cbnz	r2, c9c0 <sys_slist_find_and_remove+0x24>
    c9b0:	42a1      	cmp	r1, r4
	list->head = node;
    c9b2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    c9b4:	d100      	bne.n	c9b8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    c9b6:	6058      	str	r0, [r3, #4]
	parent->next = child;
    c9b8:	2300      	movs	r3, #0
    c9ba:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c9bc:	2001      	movs	r0, #1
    c9be:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    c9c0:	42a1      	cmp	r1, r4
	parent->next = child;
    c9c2:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c9c4:	bf08      	it	eq
    c9c6:	605a      	streq	r2, [r3, #4]
}
    c9c8:	e7f6      	b.n	c9b8 <sys_slist_find_and_remove+0x1c>
	return node->next;
    c9ca:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c9cc:	6800      	ldr	r0, [r0, #0]
    c9ce:	e7e9      	b.n	c9a4 <sys_slist_find_and_remove+0x8>

0000c9d0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c9d0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    c9d2:	f013 0307 	ands.w	r3, r3, #7
    c9d6:	d105      	bne.n	c9e4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    c9d8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    c9da:	2b00      	cmp	r3, #0
    c9dc:	bf0c      	ite	eq
    c9de:	2000      	moveq	r0, #0
    c9e0:	2003      	movne	r0, #3
    c9e2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    c9e4:	2b02      	cmp	r3, #2
    c9e6:	d105      	bne.n	c9f4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    c9e8:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    c9ea:	2b00      	cmp	r3, #0
    c9ec:	bf14      	ite	ne
    c9ee:	2000      	movne	r0, #0
    c9f0:	2004      	moveq	r0, #4
    c9f2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    c9f4:	2b01      	cmp	r3, #1
    c9f6:	d105      	bne.n	ca04 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    c9f8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	bf0c      	ite	eq
    c9fe:	2000      	moveq	r0, #0
    ca00:	2005      	movne	r0, #5
    ca02:	4770      	bx	lr
	int evt = EVT_NOP;
    ca04:	2000      	movs	r0, #0
}
    ca06:	4770      	bx	lr

0000ca08 <notify_one>:
{
    ca08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca0c:	460d      	mov	r5, r1
    ca0e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ca10:	4619      	mov	r1, r3
    ca12:	1d28      	adds	r0, r5, #4
{
    ca14:	4690      	mov	r8, r2
    ca16:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ca18:	f7ff ff7a 	bl	c910 <sys_notify_finalize>
	if (cb) {
    ca1c:	4604      	mov	r4, r0
    ca1e:	b138      	cbz	r0, ca30 <notify_one+0x28>
		cb(mgr, cli, state, res);
    ca20:	4633      	mov	r3, r6
    ca22:	4642      	mov	r2, r8
    ca24:	4629      	mov	r1, r5
    ca26:	4638      	mov	r0, r7
    ca28:	46a4      	mov	ip, r4
}
    ca2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    ca2e:	4760      	bx	ip
}
    ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ca34 <transition_complete>:
{
    ca34:	b410      	push	{r4}
	__asm__ volatile(
    ca36:	f04f 0420 	mov.w	r4, #32
    ca3a:	f3ef 8211 	mrs	r2, BASEPRI
    ca3e:	f384 8812 	msr	BASEPRI_MAX, r4
    ca42:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    ca46:	6141      	str	r1, [r0, #20]
}
    ca48:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    ca4a:	2101      	movs	r1, #1
    ca4c:	f7f4 bf0a 	b.w	1864 <process_event>

0000ca50 <validate_args>:
{
    ca50:	b510      	push	{r4, lr}
    ca52:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    ca54:	b140      	cbz	r0, ca68 <validate_args+0x18>
    ca56:	b139      	cbz	r1, ca68 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    ca58:	1d08      	adds	r0, r1, #4
    ca5a:	f7ff ff45 	bl	c8e8 <sys_notify_validate>
	if ((rv == 0)
    ca5e:	b928      	cbnz	r0, ca6c <validate_args+0x1c>
	    && ((cli->notify.flags
    ca60:	68a3      	ldr	r3, [r4, #8]
    ca62:	f033 0303 	bics.w	r3, r3, #3
    ca66:	d001      	beq.n	ca6c <validate_args+0x1c>
		rv = -EINVAL;
    ca68:	f06f 0015 	mvn.w	r0, #21
}
    ca6c:	bd10      	pop	{r4, pc}

0000ca6e <onoff_manager_init>:
{
    ca6e:	b538      	push	{r3, r4, r5, lr}
    ca70:	460c      	mov	r4, r1
	if ((mgr == NULL)
    ca72:	4605      	mov	r5, r0
    ca74:	b158      	cbz	r0, ca8e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    ca76:	b151      	cbz	r1, ca8e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    ca78:	680b      	ldr	r3, [r1, #0]
    ca7a:	b143      	cbz	r3, ca8e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    ca7c:	684b      	ldr	r3, [r1, #4]
    ca7e:	b133      	cbz	r3, ca8e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ca80:	221c      	movs	r2, #28
    ca82:	2100      	movs	r1, #0
    ca84:	f002 fb09 	bl	f09a <memset>
    ca88:	612c      	str	r4, [r5, #16]
	return 0;
    ca8a:	2000      	movs	r0, #0
}
    ca8c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ca8e:	f06f 0015 	mvn.w	r0, #21
    ca92:	e7fb      	b.n	ca8c <onoff_manager_init+0x1e>

0000ca94 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    ca94:	b570      	push	{r4, r5, r6, lr}
    ca96:	4604      	mov	r4, r0
    ca98:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    ca9a:	f7ff ffd9 	bl	ca50 <validate_args>

	if (rv < 0) {
    ca9e:	1e05      	subs	r5, r0, #0
    caa0:	db31      	blt.n	cb06 <onoff_request+0x72>
    caa2:	f04f 0320 	mov.w	r3, #32
    caa6:	f3ef 8111 	mrs	r1, BASEPRI
    caaa:	f383 8812 	msr	BASEPRI_MAX, r3
    caae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    cab2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cab4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    cab6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    caba:	42ab      	cmp	r3, r5
    cabc:	f000 0207 	and.w	r2, r0, #7
    cac0:	d02e      	beq.n	cb20 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    cac2:	2a02      	cmp	r2, #2
    cac4:	d10e      	bne.n	cae4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    cac6:	3301      	adds	r3, #1
    cac8:	8363      	strh	r3, [r4, #26]
	rv = state;
    caca:	4615      	mov	r5, r2
		notify = true;
    cacc:	2301      	movs	r3, #1
	__asm__ volatile(
    cace:	f381 8811 	msr	BASEPRI, r1
    cad2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    cad6:	b1b3      	cbz	r3, cb06 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    cad8:	2300      	movs	r3, #0
    cada:	4631      	mov	r1, r6
    cadc:	4620      	mov	r0, r4
    cade:	f7ff ff93 	bl	ca08 <notify_one>
    cae2:	e010      	b.n	cb06 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    cae4:	0783      	lsls	r3, r0, #30
    cae6:	d001      	beq.n	caec <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    cae8:	2a06      	cmp	r2, #6
    caea:	d10e      	bne.n	cb0a <onoff_request+0x76>
	parent->next = child;
    caec:	2300      	movs	r3, #0
    caee:	6033      	str	r3, [r6, #0]
	return list->tail;
    caf0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    caf2:	b993      	cbnz	r3, cb1a <onoff_request+0x86>
	list->head = node;
    caf4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    caf8:	4615      	mov	r5, r2
    cafa:	b962      	cbnz	r2, cb16 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    cafc:	460a      	mov	r2, r1
    cafe:	4620      	mov	r0, r4
    cb00:	2102      	movs	r1, #2
    cb02:	f7f4 feaf 	bl	1864 <process_event>
		}
	}

	return rv;
}
    cb06:	4628      	mov	r0, r5
    cb08:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    cb0a:	2a05      	cmp	r2, #5
    cb0c:	bf0c      	ite	eq
    cb0e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    cb12:	f06f 0504 	mvnne.w	r5, #4
    cb16:	2300      	movs	r3, #0
    cb18:	e7d9      	b.n	cace <onoff_request+0x3a>
	parent->next = child;
    cb1a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    cb1c:	6066      	str	r6, [r4, #4]
}
    cb1e:	e7eb      	b.n	caf8 <onoff_request+0x64>
		rv = -EAGAIN;
    cb20:	f06f 050a 	mvn.w	r5, #10
    cb24:	e7f7      	b.n	cb16 <onoff_request+0x82>

0000cb26 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    cb26:	b510      	push	{r4, lr}
	__asm__ volatile(
    cb28:	f04f 0320 	mov.w	r3, #32
    cb2c:	f3ef 8211 	mrs	r2, BASEPRI
    cb30:	f383 8812 	msr	BASEPRI_MAX, r3
    cb34:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cb38:	8b04      	ldrh	r4, [r0, #24]
    cb3a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    cb3e:	2c02      	cmp	r4, #2
    cb40:	d00a      	beq.n	cb58 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    cb42:	2c01      	cmp	r4, #1
    cb44:	bf0c      	ite	eq
    cb46:	f06f 0004 	mvneq.w	r0, #4
    cb4a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    cb4e:	f382 8811 	msr	BASEPRI, r2
    cb52:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    cb56:	e008      	b.n	cb6a <onoff_release+0x44>
	mgr->refs -= 1U;
    cb58:	8b43      	ldrh	r3, [r0, #26]
    cb5a:	3b01      	subs	r3, #1
    cb5c:	b29b      	uxth	r3, r3
    cb5e:	8343      	strh	r3, [r0, #26]
	if (stop) {
    cb60:	b923      	cbnz	r3, cb6c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    cb62:	4621      	mov	r1, r4
    cb64:	f7f4 fe7e 	bl	1864 <process_event>
	int rv = state;
    cb68:	4620      	mov	r0, r4
}
    cb6a:	bd10      	pop	{r4, pc}
	int rv = state;
    cb6c:	4620      	mov	r0, r4
    cb6e:	e7ee      	b.n	cb4e <onoff_release+0x28>

0000cb70 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    cb70:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    cb72:	b1b0      	cbz	r0, cba2 <onoff_cancel+0x32>
    cb74:	b1a9      	cbz	r1, cba2 <onoff_cancel+0x32>
	__asm__ volatile(
    cb76:	f04f 0220 	mov.w	r2, #32
    cb7a:	f3ef 8511 	mrs	r5, BASEPRI
    cb7e:	f382 8812 	msr	BASEPRI_MAX, r2
    cb82:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cb86:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    cb88:	f7ff ff08 	bl	c99c <sys_slist_find_and_remove>
    cb8c:	b130      	cbz	r0, cb9c <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    cb8e:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    cb92:	f385 8811 	msr	BASEPRI, r5
    cb96:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    cb9a:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    cb9c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cba0:	e7f7      	b.n	cb92 <onoff_cancel+0x22>
		return -EINVAL;
    cba2:	f06f 0015 	mvn.w	r0, #21
    cba6:	e7f8      	b.n	cb9a <onoff_cancel+0x2a>

0000cba8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    cba8:	4604      	mov	r4, r0
    cbaa:	b508      	push	{r3, lr}
    cbac:	4608      	mov	r0, r1
    cbae:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    cbb0:	461a      	mov	r2, r3
    cbb2:	47a0      	blx	r4
	return z_impl_z_current_get();
    cbb4:	f7ff fb32 	bl	c21c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    cbb8:	f7fa fb0a 	bl	71d0 <z_impl_k_thread_abort>

0000cbbc <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    cbbc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    cbc0:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    cbc2:	0840      	lsrs	r0, r0, #1
    cbc4:	4770      	bx	lr

0000cbc6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    cbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbc8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    cbca:	f7ff fff7 	bl	cbbc <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cbce:	fab0 f080 	clz	r0, r0
    cbd2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    cbd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    cbda:	00ca      	lsls	r2, r1, #3
    cbdc:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    cbe0:	1d17      	adds	r7, r2, #4
{
    cbe2:	460c      	mov	r4, r1
    cbe4:	3206      	adds	r2, #6
    cbe6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    cbe8:	b956      	cbnz	r6, cc00 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    cbea:	2101      	movs	r1, #1
    cbec:	fa01 f000 	lsl.w	r0, r1, r0
    cbf0:	68d9      	ldr	r1, [r3, #12]
    cbf2:	4301      	orrs	r1, r0
    cbf4:	60d9      	str	r1, [r3, #12]
		b->next = c;
    cbf6:	f8cc 4010 	str.w	r4, [ip, #16]
    cbfa:	53dd      	strh	r5, [r3, r7]
    cbfc:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    cbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    cc00:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    cc02:	3104      	adds	r1, #4
    cc04:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    cc06:	53d8      	strh	r0, [r3, r7]
    cc08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    cc0c:	529e      	strh	r6, [r3, r2]
    cc0e:	80c5      	strh	r5, [r0, #6]
    cc10:	525d      	strh	r5, [r3, r1]
    cc12:	e7f4      	b.n	cbfe <free_list_add+0x38>

0000cc14 <free_list_remove_bidx>:
{
    cc14:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    cc16:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    cc1a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    cc1c:	4299      	cmp	r1, r3
    cc1e:	f102 0104 	add.w	r1, r2, #4
    cc22:	d10a      	bne.n	cc3a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    cc24:	2301      	movs	r3, #1
    cc26:	fa03 f202 	lsl.w	r2, r3, r2
    cc2a:	68c3      	ldr	r3, [r0, #12]
    cc2c:	ea23 0302 	bic.w	r3, r3, r2
    cc30:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    cc32:	2300      	movs	r3, #0
    cc34:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    cc38:	bd10      	pop	{r4, pc}
    cc3a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    cc3c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    cc40:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    cc44:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    cc48:	80cb      	strh	r3, [r1, #6]
    cc4a:	8082      	strh	r2, [r0, #4]
}
    cc4c:	e7f4      	b.n	cc38 <free_list_remove_bidx+0x24>

0000cc4e <free_list_remove>:
{
    cc4e:	b508      	push	{r3, lr}
    cc50:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    cc52:	f7ff ffb3 	bl	cbbc <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    cc56:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    cc5a:	f1c2 021f 	rsb	r2, r2, #31
    cc5e:	4618      	mov	r0, r3
}
    cc60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    cc64:	f7ff bfd6 	b.w	cc14 <free_list_remove_bidx>

0000cc68 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc6c:	fab1 f581 	clz	r5, r1
    cc70:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    cc74:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    cc78:	4603      	mov	r3, r0
	if (b->next) {
    cc7a:	693a      	ldr	r2, [r7, #16]
{
    cc7c:	460e      	mov	r6, r1
	if (b->next) {
    cc7e:	b1c2      	cbz	r2, ccb2 <alloc_chunk+0x4a>
    cc80:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    cc84:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    cc86:	4618      	mov	r0, r3
    cc88:	4621      	mov	r1, r4
    cc8a:	f7ff ff97 	bl	cbbc <chunk_size>
    cc8e:	42b0      	cmp	r0, r6
    cc90:	d306      	bcc.n	cca0 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    cc92:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    cc94:	4618      	mov	r0, r3
    cc96:	f7ff ffbd 	bl	cc14 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    cc9a:	4620      	mov	r0, r4
    cc9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    cca0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    cca4:	f1b8 0801 	subs.w	r8, r8, #1
    cca8:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    ccaa:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    ccac:	d001      	beq.n	ccb2 <alloc_chunk+0x4a>
    ccae:	4282      	cmp	r2, r0
    ccb0:	d1e8      	bne.n	cc84 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    ccb2:	f1c5 0220 	rsb	r2, r5, #32
    ccb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ccba:	4094      	lsls	r4, r2
    ccbc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    ccbe:	4014      	ands	r4, r2
    ccc0:	d0eb      	beq.n	cc9a <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    ccc2:	fa94 f2a4 	rbit	r2, r4
    ccc6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    ccca:	1d11      	adds	r1, r2, #4
    cccc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    ccd0:	4621      	mov	r1, r4
    ccd2:	e7df      	b.n	cc94 <alloc_chunk+0x2c>

0000ccd4 <merge_chunks>:
{
    ccd4:	b538      	push	{r3, r4, r5, lr}
    ccd6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    ccd8:	f7ff ff70 	bl	cbbc <chunk_size>
{
    ccdc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    ccde:	4604      	mov	r4, r0
    cce0:	4611      	mov	r1, r2
    cce2:	4618      	mov	r0, r3
    cce4:	f7ff ff6a 	bl	cbbc <chunk_size>
		((uint16_t *)cmem)[f] = val;
    cce8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    ccec:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccee:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    ccf0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    ccf2:	4618      	mov	r0, r3
    ccf4:	f7ff ff62 	bl	cbbc <chunk_size>
	void *cmem = &buf[c];
    ccf8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    ccfa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    ccfe:	bd38      	pop	{r3, r4, r5, pc}

0000cd00 <split_chunks>:
{
    cd00:	b538      	push	{r3, r4, r5, lr}
    cd02:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    cd04:	f7ff ff5a 	bl	cbbc <chunk_size>
{
    cd08:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    cd0a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    cd0c:	1a51      	subs	r1, r2, r1
    cd0e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    cd12:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cd14:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    cd16:	8060      	strh	r0, [r4, #2]
    cd18:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cd1c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    cd1e:	8044      	strh	r4, [r0, #2]
    cd20:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    cd24:	4618      	mov	r0, r3
    cd26:	4611      	mov	r1, r2
    cd28:	f7ff ff48 	bl	cbbc <chunk_size>
	void *cmem = &buf[c];
    cd2c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    cd2e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    cd32:	bd38      	pop	{r3, r4, r5, pc}

0000cd34 <free_chunk>:
{
    cd34:	b538      	push	{r3, r4, r5, lr}
    cd36:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    cd38:	f7ff ff40 	bl	cbbc <chunk_size>
    cd3c:	460c      	mov	r4, r1
    cd3e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    cd40:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    cd44:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    cd46:	07da      	lsls	r2, r3, #31
    cd48:	d40a      	bmi.n	cd60 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    cd4a:	4628      	mov	r0, r5
    cd4c:	f7ff ff7f 	bl	cc4e <free_list_remove>
	return c + chunk_size(h, c);
    cd50:	4621      	mov	r1, r4
    cd52:	4628      	mov	r0, r5
    cd54:	f7ff ff32 	bl	cbbc <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    cd58:	1822      	adds	r2, r4, r0
    cd5a:	4628      	mov	r0, r5
    cd5c:	f7ff ffba 	bl	ccd4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    cd60:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    cd64:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    cd66:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    cd6a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    cd6c:	07db      	lsls	r3, r3, #31
    cd6e:	d40c      	bmi.n	cd8a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    cd70:	4628      	mov	r0, r5
    cd72:	f7ff ff6c 	bl	cc4e <free_list_remove>
		return ((uint16_t *)cmem)[f];
    cd76:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    cd7a:	4622      	mov	r2, r4
    cd7c:	1a61      	subs	r1, r4, r1
    cd7e:	4628      	mov	r0, r5
    cd80:	f7ff ffa8 	bl	ccd4 <merge_chunks>
    cd84:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    cd88:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    cd8a:	4621      	mov	r1, r4
    cd8c:	4628      	mov	r0, r5
}
    cd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    cd92:	f7ff bf18 	b.w	cbc6 <free_list_add>

0000cd96 <sys_heap_free>:
	if (mem == NULL) {
    cd96:	b161      	cbz	r1, cdb2 <sys_heap_free+0x1c>
    cd98:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cd9a:	3904      	subs	r1, #4
    cd9c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    cd9e:	f021 0307 	bic.w	r3, r1, #7
    cda2:	4403      	add	r3, r0
	free_chunk(h, c);
    cda4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    cda6:	885a      	ldrh	r2, [r3, #2]
    cda8:	f022 0201 	bic.w	r2, r2, #1
    cdac:	805a      	strh	r2, [r3, #2]
    cdae:	f7ff bfc1 	b.w	cd34 <free_chunk>
}
    cdb2:	4770      	bx	lr

0000cdb4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    cdb4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    cdb6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    cdb8:	b909      	cbnz	r1, cdbe <sys_heap_alloc+0xa>
		return NULL;
    cdba:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    cdbc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    cdbe:	68ab      	ldr	r3, [r5, #8]
    cdc0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    cdc4:	d9f9      	bls.n	cdba <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cdc6:	310b      	adds	r1, #11
    cdc8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    cdca:	4621      	mov	r1, r4
    cdcc:	4628      	mov	r0, r5
    cdce:	f7ff ff4b 	bl	cc68 <alloc_chunk>
	if (c == 0U) {
    cdd2:	4606      	mov	r6, r0
    cdd4:	2800      	cmp	r0, #0
    cdd6:	d0f0      	beq.n	cdba <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    cdd8:	4601      	mov	r1, r0
    cdda:	4628      	mov	r0, r5
    cddc:	f7ff feee 	bl	cbbc <chunk_size>
    cde0:	42a0      	cmp	r0, r4
    cde2:	d907      	bls.n	cdf4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    cde4:	1932      	adds	r2, r6, r4
    cde6:	4628      	mov	r0, r5
    cde8:	f7ff ff8a 	bl	cd00 <split_chunks>
		free_list_add(h, c + chunk_sz);
    cdec:	4611      	mov	r1, r2
    cdee:	4628      	mov	r0, r5
    cdf0:	f7ff fee9 	bl	cbc6 <free_list_add>
	void *cmem = &buf[c];
    cdf4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    cdf8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cdfa:	8853      	ldrh	r3, [r2, #2]
    cdfc:	f043 0301 	orr.w	r3, r3, #1
    ce00:	8053      	strh	r3, [r2, #2]
    ce02:	3004      	adds	r0, #4
	return mem;
    ce04:	e7da      	b.n	cdbc <sys_heap_alloc+0x8>

0000ce06 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ce06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce0a:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    ce0c:	424a      	negs	r2, r1
    ce0e:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    ce12:	ea31 0202 	bics.w	r2, r1, r2
{
    ce16:	4603      	mov	r3, r0
	if (align != rew) {
    ce18:	d00a      	beq.n	ce30 <sys_heap_aligned_alloc+0x2a>
		return false;
    ce1a:	2f04      	cmp	r7, #4
    ce1c:	463a      	mov	r2, r7
    ce1e:	46b9      	mov	r9, r7
    ce20:	bf28      	it	cs
    ce22:	2204      	movcs	r2, #4
		align -= rew;
    ce24:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    ce26:	b974      	cbnz	r4, ce46 <sys_heap_aligned_alloc+0x40>
		return NULL;
    ce28:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    ce2a:	4628      	mov	r0, r5
    ce2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ce30:	2904      	cmp	r1, #4
    ce32:	d804      	bhi.n	ce3e <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    ce34:	4621      	mov	r1, r4
}
    ce36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ce3a:	f7ff bfbb 	b.w	cdb4 <sys_heap_alloc>
		rew = 0;
    ce3e:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    ce42:	2204      	movs	r2, #4
    ce44:	e7ef      	b.n	ce26 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    ce46:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    ce48:	68b3      	ldr	r3, [r6, #8]
    ce4a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ce4e:	d9eb      	bls.n	ce28 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ce50:	f104 010b 	add.w	r1, r4, #11
    ce54:	4439      	add	r1, r7
    ce56:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ce58:	08c9      	lsrs	r1, r1, #3
    ce5a:	4630      	mov	r0, r6
    ce5c:	f7ff ff04 	bl	cc68 <alloc_chunk>
	if (c0 == 0) {
    ce60:	4680      	mov	r8, r0
    ce62:	2800      	cmp	r0, #0
    ce64:	d0e0      	beq.n	ce28 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ce66:	f109 0504 	add.w	r5, r9, #4
    ce6a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ce6e:	1e7b      	subs	r3, r7, #1
    ce70:	4435      	add	r5, r6
    ce72:	441d      	add	r5, r3
    ce74:	427f      	negs	r7, r7
    ce76:	403d      	ands	r5, r7
    ce78:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ce7c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ce7e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ce80:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ce82:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ce84:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ce88:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ce8a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ce8e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ce92:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ce96:	d208      	bcs.n	ceaa <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    ce98:	4601      	mov	r1, r0
    ce9a:	463a      	mov	r2, r7
    ce9c:	4630      	mov	r0, r6
    ce9e:	f7ff ff2f 	bl	cd00 <split_chunks>
		free_list_add(h, c0);
    cea2:	4641      	mov	r1, r8
    cea4:	4630      	mov	r0, r6
    cea6:	f7ff fe8e 	bl	cbc6 <free_list_add>
	return c + chunk_size(h, c);
    ceaa:	4639      	mov	r1, r7
    ceac:	4630      	mov	r0, r6
    ceae:	f7ff fe85 	bl	cbbc <chunk_size>
    ceb2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ceb4:	4284      	cmp	r4, r0
    ceb6:	d207      	bcs.n	cec8 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    ceb8:	4630      	mov	r0, r6
    ceba:	4622      	mov	r2, r4
    cebc:	f7ff ff20 	bl	cd00 <split_chunks>
		free_list_add(h, c_end);
    cec0:	4621      	mov	r1, r4
    cec2:	4630      	mov	r0, r6
    cec4:	f7ff fe7f 	bl	cbc6 <free_list_add>
	void *cmem = &buf[c];
    cec8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cecc:	8873      	ldrh	r3, [r6, #2]
    cece:	f043 0301 	orr.w	r3, r3, #1
    ced2:	8073      	strh	r3, [r6, #2]
    ced4:	e7a9      	b.n	ce2a <sys_heap_aligned_alloc+0x24>

0000ced6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    ced6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ced8:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ceda:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cedc:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cee0:	f021 0107 	bic.w	r1, r1, #7
{
    cee4:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cee6:	1acd      	subs	r5, r1, r3
    cee8:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    ceea:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    ceec:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cef0:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    cef4:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cef6:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    cef8:	2600      	movs	r6, #0
    cefa:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cefc:	f1c0 0020 	rsb	r0, r0, #32
    cf00:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    cf04:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    cf06:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    cf08:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cf0c:	4284      	cmp	r4, r0
    cf0e:	d118      	bne.n	cf42 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cf10:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cf12:	f040 0001 	orr.w	r0, r0, #1
    cf16:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    cf18:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cf1c:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cf1e:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    cf20:	801e      	strh	r6, [r3, #0]
    cf22:	8067      	strh	r7, [r4, #2]
    cf24:	195c      	adds	r4, r3, r5
    cf26:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    cf2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    cf2e:	8066      	strh	r6, [r4, #2]
    cf30:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cf32:	8850      	ldrh	r0, [r2, #2]
    cf34:	f040 0001 	orr.w	r0, r0, #1
    cf38:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cf3a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    cf3c:	4618      	mov	r0, r3
    cf3e:	f7ff be42 	b.w	cbc6 <free_list_add>
		h->buckets[i].next = 0;
    cf42:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    cf46:	e7e1      	b.n	cf0c <sys_heap_init+0x36>

0000cf48 <encode_uint>:
{
    cf48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf4c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    cf4e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    cf50:	2b6f      	cmp	r3, #111	; 0x6f
{
    cf52:	4680      	mov	r8, r0
    cf54:	460f      	mov	r7, r1
    cf56:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    cf58:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    cf5c:	d029      	beq.n	cfb2 <encode_uint+0x6a>
    cf5e:	d824      	bhi.n	cfaa <encode_uint+0x62>
		return 16;
    cf60:	2b58      	cmp	r3, #88	; 0x58
    cf62:	bf14      	ite	ne
    cf64:	260a      	movne	r6, #10
    cf66:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    cf68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    cf6c:	4632      	mov	r2, r6
    cf6e:	2300      	movs	r3, #0
    cf70:	4640      	mov	r0, r8
    cf72:	4639      	mov	r1, r7
    cf74:	f7f4 f8c4 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf78:	2a09      	cmp	r2, #9
    cf7a:	b2d4      	uxtb	r4, r2
    cf7c:	d81e      	bhi.n	cfbc <encode_uint+0x74>
    cf7e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    cf80:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf82:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    cf84:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf88:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    cf8c:	d301      	bcc.n	cf92 <encode_uint+0x4a>
    cf8e:	45d1      	cmp	r9, sl
    cf90:	d811      	bhi.n	cfb6 <encode_uint+0x6e>
	if (conv->flag_hash) {
    cf92:	782b      	ldrb	r3, [r5, #0]
    cf94:	069b      	lsls	r3, r3, #26
    cf96:	d505      	bpl.n	cfa4 <encode_uint+0x5c>
		if (radix == 8) {
    cf98:	2e08      	cmp	r6, #8
    cf9a:	d115      	bne.n	cfc8 <encode_uint+0x80>
			conv->altform_0 = true;
    cf9c:	78ab      	ldrb	r3, [r5, #2]
    cf9e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    cfa2:	70ab      	strb	r3, [r5, #2]
}
    cfa4:	4648      	mov	r0, r9
    cfa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    cfaa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    cfae:	2b70      	cmp	r3, #112	; 0x70
    cfb0:	e7d7      	b.n	cf62 <encode_uint+0x1a>
	switch (specifier) {
    cfb2:	2608      	movs	r6, #8
    cfb4:	e7d8      	b.n	cf68 <encode_uint+0x20>
		value /= radix;
    cfb6:	4680      	mov	r8, r0
    cfb8:	460f      	mov	r7, r1
    cfba:	e7d7      	b.n	cf6c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cfbc:	f1bb 0f19 	cmp.w	fp, #25
    cfc0:	bf94      	ite	ls
    cfc2:	3437      	addls	r4, #55	; 0x37
    cfc4:	3457      	addhi	r4, #87	; 0x57
    cfc6:	e7db      	b.n	cf80 <encode_uint+0x38>
		} else if (radix == 16) {
    cfc8:	2e10      	cmp	r6, #16
    cfca:	d1eb      	bne.n	cfa4 <encode_uint+0x5c>
			conv->altform_0c = true;
    cfcc:	78ab      	ldrb	r3, [r5, #2]
    cfce:	f043 0310 	orr.w	r3, r3, #16
    cfd2:	e7e6      	b.n	cfa2 <encode_uint+0x5a>

0000cfd4 <outs>:
{
    cfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfd8:	4607      	mov	r7, r0
    cfda:	4688      	mov	r8, r1
    cfdc:	4615      	mov	r5, r2
    cfde:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    cfe0:	4614      	mov	r4, r2
    cfe2:	42b4      	cmp	r4, r6
    cfe4:	eba4 0005 	sub.w	r0, r4, r5
    cfe8:	d302      	bcc.n	cff0 <outs+0x1c>
    cfea:	b93e      	cbnz	r6, cffc <outs+0x28>
    cfec:	7823      	ldrb	r3, [r4, #0]
    cfee:	b12b      	cbz	r3, cffc <outs+0x28>
		int rc = out((int)*sp++, ctx);
    cff0:	f814 0b01 	ldrb.w	r0, [r4], #1
    cff4:	4641      	mov	r1, r8
    cff6:	47b8      	blx	r7
		if (rc < 0) {
    cff8:	2800      	cmp	r0, #0
    cffa:	daf2      	bge.n	cfe2 <outs+0xe>
}
    cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d000 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    d000:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    d004:	4770      	bx	lr

0000d006 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    d006:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    d008:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    d00c:	42ac      	cmp	r4, r5
    d00e:	d207      	bcs.n	d020 <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
    d010:	6906      	ldr	r6, [r0, #16]
    d012:	f7ff fff5 	bl	d000 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    d016:	fbb0 f0f6 	udiv	r0, r0, r6
    d01a:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
    d01c:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    d020:	1b63      	subs	r3, r4, r5
    d022:	4258      	negs	r0, r3
    d024:	4158      	adcs	r0, r3
    d026:	bd70      	pop	{r4, r5, r6, pc}

0000d028 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
    d02c:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
    d02e:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
    d032:	454c      	cmp	r4, r9
{
    d034:	4605      	mov	r5, r0
    d036:	460e      	mov	r6, r1
    d038:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
    d03a:	d907      	bls.n	d04c <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    d03c:	6907      	ldr	r7, [r0, #16]
    d03e:	f7ff ffdf 	bl	d000 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    d042:	fbb0 f0f7 	udiv	r0, r0, r7
    d046:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    d048:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    d04c:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    d04e:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    d050:	692f      	ldr	r7, [r5, #16]
    d052:	b18b      	cbz	r3, d078 <ring_buf_put_claim+0x50>
    d054:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
    d056:	443c      	add	r4, r7
    d058:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    d05c:	4540      	cmp	r0, r8
    d05e:	bf28      	it	cs
    d060:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
    d062:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    d064:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
    d066:	42b8      	cmp	r0, r7
    d068:	bf28      	it	cs
    d06a:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    d06c:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    d06e:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    d070:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
    d072:	60a9      	str	r1, [r5, #8]

	return allocated;
}
    d074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    d078:	fbb1 f3f7 	udiv	r3, r1, r7
    d07c:	fb07 1313 	mls	r3, r7, r3, r1
    d080:	e7e9      	b.n	d056 <ring_buf_put_claim+0x2e>

0000d082 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    d082:	b570      	push	{r4, r5, r6, lr}
    d084:	4605      	mov	r5, r0
    d086:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    d088:	f7ff ffba 	bl	d000 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    d08c:	686e      	ldr	r6, [r5, #4]
    d08e:	692a      	ldr	r2, [r5, #16]
    d090:	682b      	ldr	r3, [r5, #0]
    d092:	1931      	adds	r1, r6, r4
    d094:	4413      	add	r3, r2
    d096:	4299      	cmp	r1, r3
    d098:	d80c      	bhi.n	d0b4 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    d09a:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
    d09c:	bf83      	ittte	hi
    d09e:	fbb0 f3f2 	udivhi	r3, r0, r2
    d0a2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    d0a6:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    d0a8:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
    d0aa:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    d0ac:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
    d0b0:	2000      	movs	r0, #0
}
    d0b2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d0b4:	f06f 0015 	mvn.w	r0, #21
    d0b8:	e7fb      	b.n	d0b2 <ring_buf_put_finish+0x30>

0000d0ba <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    d0ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d0be:	4680      	mov	r8, r0
    d0c0:	460e      	mov	r6, r1
    d0c2:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    d0c4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    d0c6:	462a      	mov	r2, r5
    d0c8:	a901      	add	r1, sp, #4
    d0ca:	4640      	mov	r0, r8
    d0cc:	f7ff ffac 	bl	d028 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    d0d0:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    d0d2:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    d0d4:	4602      	mov	r2, r0
    d0d6:	9801      	ldr	r0, [sp, #4]
    d0d8:	f001 ffd4 	bl	f084 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    d0dc:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    d0de:	4427      	add	r7, r4
		data += partial_size;
    d0e0:	4426      	add	r6, r4
	} while (size && partial_size);
    d0e2:	d001      	beq.n	d0e8 <ring_buf_put+0x2e>
    d0e4:	2c00      	cmp	r4, #0
    d0e6:	d1ee      	bne.n	d0c6 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    d0e8:	4639      	mov	r1, r7
    d0ea:	4640      	mov	r0, r8
    d0ec:	f7ff ffc9 	bl	d082 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    d0f0:	4638      	mov	r0, r7
    d0f2:	b002      	add	sp, #8
    d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d0f8 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    d0fc:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    d0fe:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    d100:	42b3      	cmp	r3, r6
{
    d102:	4604      	mov	r4, r0
    d104:	460f      	mov	r7, r1
    d106:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    d108:	d907      	bls.n	d11a <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    d10a:	6905      	ldr	r5, [r0, #16]
    d10c:	f7ff ff78 	bl	d000 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    d110:	fbb0 f1f5 	udiv	r1, r0, r5
    d114:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
    d116:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    d11a:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    d11c:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    d11e:	6923      	ldr	r3, [r4, #16]
    d120:	b185      	cbz	r5, d144 <ring_buf_get_claim+0x4c>
    d122:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    d124:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    d126:	4540      	cmp	r0, r8
    d128:	bf28      	it	cs
    d12a:	4640      	movcs	r0, r8
    d12c:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    d12e:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    d130:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    d132:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    d134:	bf28      	it	cs
    d136:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    d138:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    d13a:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    d13c:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    d13e:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    d140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    d144:	fbb1 f5f3 	udiv	r5, r1, r3
    d148:	fb03 1515 	mls	r5, r3, r5, r1
    d14c:	e7ea      	b.n	d124 <ring_buf_get_claim+0x2c>

0000d14e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    d14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    d150:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    d152:	68c3      	ldr	r3, [r0, #12]
    d154:	42b3      	cmp	r3, r6
{
    d156:	4605      	mov	r5, r0
    d158:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    d15a:	d914      	bls.n	d186 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    d15c:	6907      	ldr	r7, [r0, #16]
    d15e:	f7ff ff4f 	bl	d000 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    d162:	fbb0 f1f7 	udiv	r1, r0, r7
    d166:	3901      	subs	r1, #1
    d168:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
    d16c:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    d16e:	6829      	ldr	r1, [r5, #0]
    d170:	4421      	add	r1, r4
    d172:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    d174:	bf9f      	itttt	ls
    d176:	1ac9      	subls	r1, r1, r3
    d178:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    d17a:	60e9      	strls	r1, [r5, #12]

	return 0;
    d17c:	2000      	movls	r0, #0
		return -EINVAL;
    d17e:	bf88      	it	hi
    d180:	f06f 0015 	mvnhi.w	r0, #21
}
    d184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    d186:	2300      	movs	r3, #0
    d188:	e7f1      	b.n	d16e <ring_buf_get_finish+0x20>

0000d18a <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    d18a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d18e:	4680      	mov	r8, r0
    d190:	460d      	mov	r5, r1
    d192:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    d194:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    d196:	4632      	mov	r2, r6
    d198:	a901      	add	r1, sp, #4
    d19a:	4640      	mov	r0, r8
    d19c:	f7ff ffac 	bl	d0f8 <ring_buf_get_claim>
    d1a0:	4604      	mov	r4, r0
		if (data) {
    d1a2:	b12d      	cbz	r5, d1b0 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    d1a4:	4602      	mov	r2, r0
    d1a6:	9901      	ldr	r1, [sp, #4]
    d1a8:	4628      	mov	r0, r5
    d1aa:	f001 ff6b 	bl	f084 <memcpy>
			data += partial_size;
    d1ae:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    d1b0:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    d1b2:	4427      	add	r7, r4
	} while (size && partial_size);
    d1b4:	d001      	beq.n	d1ba <ring_buf_get+0x30>
    d1b6:	2c00      	cmp	r4, #0
    d1b8:	d1ed      	bne.n	d196 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    d1ba:	4639      	mov	r1, r7
    d1bc:	4640      	mov	r0, r8
    d1be:	f7ff ffc6 	bl	d14e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    d1c2:	4638      	mov	r0, r7
    d1c4:	b002      	add	sp, #8
    d1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d1ca <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    d1ca:	4602      	mov	r2, r0
    d1cc:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    d1ce:	68c0      	ldr	r0, [r0, #12]
    d1d0:	6814      	ldr	r4, [r2, #0]
    d1d2:	42a0      	cmp	r0, r4
    d1d4:	d904      	bls.n	d1e0 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    d1d6:	3801      	subs	r0, #1
    d1d8:	1b00      	subs	r0, r0, r4
    d1da:	6008      	str	r0, [r1, #0]

		return false;
    d1dc:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    d1de:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    d1e0:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    d1e2:	b918      	cbnz	r0, d1ec <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    d1e4:	3b01      	subs	r3, #1
    d1e6:	1b1b      	subs	r3, r3, r4
    d1e8:	600b      	str	r3, [r1, #0]
		return false;
    d1ea:	e7f8      	b.n	d1de <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    d1ec:	1b1b      	subs	r3, r3, r4
    d1ee:	600b      	str	r3, [r1, #0]
	return true;
    d1f0:	2001      	movs	r0, #1
    d1f2:	e7f4      	b.n	d1de <free_space+0x14>

0000d1f4 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    d1f4:	b510      	push	{r4, lr}
    d1f6:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    d1f8:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d1fa:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    d1fc:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d1fe:	07d2      	lsls	r2, r2, #31
    d200:	d502      	bpl.n	d208 <idx_inc+0x14>
		return i & (buffer->size - 1);
    d202:	3b01      	subs	r3, #1
    d204:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    d206:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    d208:	4298      	cmp	r0, r3
    d20a:	bf28      	it	cs
    d20c:	1ac0      	subcs	r0, r0, r3
    d20e:	e7fa      	b.n	d206 <idx_inc+0x12>

0000d210 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    d210:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    d212:	69c2      	ldr	r2, [r0, #28]
{
    d214:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    d216:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    d218:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    d21a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    d21e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d222:	462a      	mov	r2, r5
    d224:	6801      	ldr	r1, [r0, #0]
{
    d226:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d228:	f7ff ffe4 	bl	d1f4 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d22c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d22e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d230:	462a      	mov	r2, r5
    d232:	4620      	mov	r0, r4
    d234:	f7ff ffde 	bl	d1f4 <idx_inc>
    d238:	6060      	str	r0, [r4, #4]
}
    d23a:	bd38      	pop	{r3, r4, r5, pc}

0000d23c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    d23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    d240:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    d244:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    d248:	461f      	mov	r7, r3
	*user_packet = false;
    d24a:	2300      	movs	r3, #0
    d24c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    d24e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    d252:	f003 0303 	and.w	r3, r3, #3
    d256:	2b02      	cmp	r3, #2
{
    d258:	4604      	mov	r4, r0
    d25a:	468b      	mov	fp, r1
    d25c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    d25e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    d262:	d103      	bne.n	d26c <drop_item_locked+0x30>
		return item->skip.len;
    d264:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    d268:	08ad      	lsrs	r5, r5, #2
    d26a:	d12e      	bne.n	d2ca <drop_item_locked+0x8e>
    d26c:	69a3      	ldr	r3, [r4, #24]
    d26e:	4630      	mov	r0, r6
    d270:	4798      	blx	r3
    d272:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    d274:	f1b8 0f00 	cmp.w	r8, #0
    d278:	d036      	beq.n	d2e8 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    d27a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    d27e:	079b      	lsls	r3, r3, #30
    d280:	d52f      	bpl.n	d2e2 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    d282:	f10b 0101 	add.w	r1, fp, #1
    d286:	4620      	mov	r0, r4
    d288:	f7ff ffc2 	bl	d210 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    d28c:	6861      	ldr	r1, [r4, #4]
    d28e:	462a      	mov	r2, r5
    d290:	4620      	mov	r0, r4
    d292:	f7ff ffaf 	bl	d1f4 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    d296:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    d298:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    d29a:	462a      	mov	r2, r5
    d29c:	4620      	mov	r0, r4
    d29e:	f7ff ffa9 	bl	d1f4 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    d2a2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    d2a4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    d2a6:	68e1      	ldr	r1, [r4, #12]
    d2a8:	4620      	mov	r0, r4
    d2aa:	f7ff ffa3 	bl	d1f4 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    d2ae:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    d2b0:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    d2b4:	f002 0203 	and.w	r2, r2, #3
    d2b8:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    d2ba:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    d2be:	d10c      	bne.n	d2da <drop_item_locked+0x9e>
		return item->skip.len;
    d2c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    d2c4:	089b      	lsrs	r3, r3, #2
    d2c6:	d008      	beq.n	d2da <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    d2c8:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    d2ca:	68e1      	ldr	r1, [r4, #12]
    d2cc:	462a      	mov	r2, r5
    d2ce:	4620      	mov	r0, r4
    d2d0:	f7ff ff90 	bl	d1f4 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    d2d4:	e9c4 0002 	strd	r0, r0, [r4, #8]
    d2d8:	e007      	b.n	d2ea <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    d2da:	69a3      	ldr	r3, [r4, #24]
    d2dc:	4630      	mov	r0, r6
    d2de:	4798      	blx	r3
    d2e0:	4405      	add	r5, r0
			*user_packet = true;
    d2e2:	2301      	movs	r3, #1
    d2e4:	703b      	strb	r3, [r7, #0]
    d2e6:	e7f0      	b.n	d2ca <drop_item_locked+0x8e>
		item = NULL;
    d2e8:	4646      	mov	r6, r8
	}

	return item;
}
    d2ea:	4630      	mov	r0, r6
    d2ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d2f0 <mpsc_pbuf_init>:
{
    d2f0:	b538      	push	{r3, r4, r5, lr}
    d2f2:	460d      	mov	r5, r1
    d2f4:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    d2f6:	221c      	movs	r2, #28
    d2f8:	2100      	movs	r1, #0
    d2fa:	f001 fece 	bl	f09a <memset>
	buffer->get_wlen = cfg->get_wlen;
    d2fe:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
    d300:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
    d302:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    d304:	68ab      	ldr	r3, [r5, #8]
    d306:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    d308:	682b      	ldr	r3, [r5, #0]
    d30a:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    d30c:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    d30e:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    d310:	b122      	cbz	r2, d31c <mpsc_pbuf_init+0x2c>
    d312:	1e51      	subs	r1, r2, #1
    d314:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    d316:	bf08      	it	eq
    d318:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    d31c:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d31e:	2201      	movs	r2, #1
    d320:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d324:	2100      	movs	r1, #0
}
    d326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d32a:	f002 bc53 	b.w	fbd4 <z_impl_k_sem_init>

0000d32e <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    d32e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d332:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    d334:	6a03      	ldr	r3, [r0, #32]
    d336:	3b01      	subs	r3, #1
    d338:	428b      	cmp	r3, r1
{
    d33a:	b085      	sub	sp, #20
    d33c:	4604      	mov	r4, r0
    d33e:	460f      	mov	r7, r1
    d340:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    d342:	d364      	bcc.n	d40e <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    d344:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    d346:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    d348:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
    d34c:	f04f 0320 	mov.w	r3, #32
    d350:	f3ef 8611 	mrs	r6, BASEPRI
    d354:	f383 8812 	msr	BASEPRI_MAX, r3
    d358:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    d35c:	a903      	add	r1, sp, #12
    d35e:	4620      	mov	r0, r4
    d360:	f7ff ff33 	bl	d1ca <free_space>
		if (free_wlen >= wlen) {
    d364:	9903      	ldr	r1, [sp, #12]
    d366:	42b9      	cmp	r1, r7
    d368:	d321      	bcc.n	d3ae <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    d36a:	6821      	ldr	r1, [r4, #0]
			item =
    d36c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    d36e:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    d372:	f022 0203 	bic.w	r2, r2, #3
    d376:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    d37a:	4620      	mov	r0, r4
    d37c:	463a      	mov	r2, r7
			item =
    d37e:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    d382:	f7ff ff37 	bl	d1f4 <idx_inc>
		cont = false;
    d386:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    d388:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    d38a:	f386 8811 	msr	BASEPRI, r6
    d38e:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    d392:	2b00      	cmp	r3, #0
    d394:	d03d      	beq.n	d412 <mpsc_pbuf_alloc+0xe4>
    d396:	2d00      	cmp	r5, #0
    d398:	d0d8      	beq.n	d34c <mpsc_pbuf_alloc+0x1e>
    d39a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d0d4      	beq.n	d34c <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    d3a2:	4629      	mov	r1, r5
    d3a4:	6963      	ldr	r3, [r4, #20]
    d3a6:	4620      	mov	r0, r4
    d3a8:	4798      	blx	r3
			dropped_item = NULL;
    d3aa:	2500      	movs	r5, #0
    d3ac:	e7ce      	b.n	d34c <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    d3ae:	b128      	cbz	r0, d3bc <mpsc_pbuf_alloc+0x8e>
    d3b0:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    d3b2:	4620      	mov	r0, r4
    d3b4:	f7ff ff2c 	bl	d210 <add_skip_item>
			cont = true;
    d3b8:	9b01      	ldr	r3, [sp, #4]
    d3ba:	e7e6      	b.n	d38a <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d3bc:	ea58 0309 	orrs.w	r3, r8, r9
    d3c0:	d017      	beq.n	d3f2 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    d3c2:	f002 fb5a 	bl	fa7a <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d3c6:	b9a0      	cbnz	r0, d3f2 <mpsc_pbuf_alloc+0xc4>
    d3c8:	f386 8811 	msr	BASEPRI, r6
    d3cc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    d3d0:	4642      	mov	r2, r8
    d3d2:	464b      	mov	r3, r9
    d3d4:	4658      	mov	r0, fp
    d3d6:	f7fe faeb 	bl	b9b0 <z_impl_k_sem_take>
	__asm__ volatile(
    d3da:	f04f 0320 	mov.w	r3, #32
    d3de:	f3ef 8611 	mrs	r6, BASEPRI
    d3e2:	f383 8812 	msr	BASEPRI_MAX, r3
    d3e6:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    d3ea:	fab0 f380 	clz	r3, r0
    d3ee:	095b      	lsrs	r3, r3, #5
    d3f0:	e7cb      	b.n	d38a <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    d3f2:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    d3f4:	9903      	ldr	r1, [sp, #12]
    d3f6:	f10d 030b 	add.w	r3, sp, #11
    d3fa:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d3fe:	4620      	mov	r0, r4
    d400:	f7ff ff1c 	bl	d23c <drop_item_locked>
			cont = dropped_item != NULL;
    d404:	1e03      	subs	r3, r0, #0
    d406:	4605      	mov	r5, r0
    d408:	bf18      	it	ne
    d40a:	2301      	movne	r3, #1
    d40c:	e7bd      	b.n	d38a <mpsc_pbuf_alloc+0x5c>
		return NULL;
    d40e:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    d412:	4650      	mov	r0, sl
    d414:	b005      	add	sp, #20
    d416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d41a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    d41a:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    d41c:	6983      	ldr	r3, [r0, #24]
{
    d41e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d420:	4608      	mov	r0, r1
{
    d422:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d424:	4798      	blx	r3
    d426:	4602      	mov	r2, r0
    d428:	f04f 0320 	mov.w	r3, #32
    d42c:	f3ef 8611 	mrs	r6, BASEPRI
    d430:	f383 8812 	msr	BASEPRI_MAX, r3
    d434:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    d438:	782b      	ldrb	r3, [r5, #0]
    d43a:	f043 0301 	orr.w	r3, r3, #1
    d43e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d440:	6861      	ldr	r1, [r4, #4]
    d442:	4620      	mov	r0, r4
    d444:	f7ff fed6 	bl	d1f4 <idx_inc>
    d448:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
    d44a:	f386 8811 	msr	BASEPRI, r6
    d44e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    d452:	bd70      	pop	{r4, r5, r6, pc}

0000d454 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d458:	4604      	mov	r4, r0
	__asm__ volatile(
    d45a:	f04f 0320 	mov.w	r3, #32
    d45e:	f3ef 8611 	mrs	r6, BASEPRI
    d462:	f383 8812 	msr	BASEPRI_MAX, r3
    d466:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    d46a:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    d46e:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    d470:	bf88      	it	hi
    d472:	6a23      	ldrhi	r3, [r4, #32]
    d474:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    d476:	b1f3      	cbz	r3, d4b6 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    d478:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    d47a:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    d47e:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    d482:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    d486:	d016      	beq.n	d4b6 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    d488:	2b02      	cmp	r3, #2
    d48a:	d103      	bne.n	d494 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    d48c:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    d490:	08ad      	lsrs	r5, r5, #2
    d492:	d115      	bne.n	d4c0 <mpsc_pbuf_claim+0x6c>
    d494:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    d496:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    d498:	d50f      	bpl.n	d4ba <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    d49a:	f042 0202 	orr.w	r2, r2, #2
    d49e:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    d4a2:	4640      	mov	r0, r8
    d4a4:	4798      	blx	r3
    d4a6:	4639      	mov	r1, r7
    d4a8:	4602      	mov	r2, r0
    d4aa:	4620      	mov	r0, r4
    d4ac:	f7ff fea2 	bl	d1f4 <idx_inc>
		cont = false;
    d4b0:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    d4b2:	60a0      	str	r0, [r4, #8]
    d4b4:	e011      	b.n	d4da <mpsc_pbuf_claim+0x86>
			item = NULL;
    d4b6:	4698      	mov	r8, r3
    d4b8:	e00f      	b.n	d4da <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    d4ba:	4640      	mov	r0, r8
    d4bc:	4798      	blx	r3
    d4be:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    d4c0:	68a1      	ldr	r1, [r4, #8]
    d4c2:	462a      	mov	r2, r5
    d4c4:	4620      	mov	r0, r4
    d4c6:	f7ff fe95 	bl	d1f4 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    d4ca:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    d4cc:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    d4ce:	462a      	mov	r2, r5
    d4d0:	4620      	mov	r0, r4
    d4d2:	f7ff fe8f 	bl	d1f4 <idx_inc>
				cont = true;
    d4d6:	2301      	movs	r3, #1
				buffer->rd_idx =
    d4d8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    d4da:	f386 8811 	msr	BASEPRI, r6
    d4de:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	d1b9      	bne.n	d45a <mpsc_pbuf_claim+0x6>

	return item;
}
    d4e6:	4640      	mov	r0, r8
    d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4ec <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    d4ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    d4ee:	6983      	ldr	r3, [r0, #24]
{
    d4f0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d4f2:	4608      	mov	r0, r1
{
    d4f4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d4f6:	4798      	blx	r3
    d4f8:	4602      	mov	r2, r0
	__asm__ volatile(
    d4fa:	f04f 0320 	mov.w	r3, #32
    d4fe:	f3ef 8611 	mrs	r6, BASEPRI
    d502:	f383 8812 	msr	BASEPRI_MAX, r3
    d506:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    d50a:	782b      	ldrb	r3, [r5, #0]
    d50c:	f36f 0300 	bfc	r3, #0, #1
    d510:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d512:	6923      	ldr	r3, [r4, #16]
    d514:	079b      	lsls	r3, r3, #30
    d516:	d505      	bpl.n	d524 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    d518:	68e1      	ldr	r1, [r4, #12]
    d51a:	69e3      	ldr	r3, [r4, #28]
    d51c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d520:	429d      	cmp	r5, r3
    d522:	d112      	bne.n	d54a <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    d524:	782b      	ldrb	r3, [r5, #0]
    d526:	f36f 0341 	bfc	r3, #1, #1
    d52a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    d52c:	68e1      	ldr	r1, [r4, #12]
    d52e:	4620      	mov	r0, r4
    d530:	f7ff fe60 	bl	d1f4 <idx_inc>
    d534:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    d536:	f386 8811 	msr	BASEPRI, r6
    d53a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    d53e:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    d542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d546:	f7fe ba0d 	b.w	b964 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    d54a:	682b      	ldr	r3, [r5, #0]
    d54c:	f360 039f 	bfi	r3, r0, #2, #30
    d550:	602b      	str	r3, [r5, #0]
    d552:	e7f0      	b.n	d536 <mpsc_pbuf_free+0x4a>

0000d554 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    d554:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    d558:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    d55a:	bf8a      	itet	hi
    d55c:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    d55e:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    d560:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    d562:	1e18      	subs	r0, r3, #0
    d564:	bf18      	it	ne
    d566:	2001      	movne	r0, #1
    d568:	4770      	bx	lr

0000d56a <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    d56a:	070b      	lsls	r3, r1, #28
    d56c:	d504      	bpl.n	d578 <foldcase+0xe>
    d56e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    d572:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    d574:	bf98      	it	ls
    d576:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    d578:	4770      	bx	lr

0000d57a <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    d57a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d57e:	b087      	sub	sp, #28
    d580:	468a      	mov	sl, r1
    d582:	4614      	mov	r4, r2
    d584:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    d586:	4605      	mov	r5, r0
    d588:	b918      	cbnz	r0, d592 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    d58a:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    d58c:	b007      	add	sp, #28
    d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    d592:	2900      	cmp	r1, #0
    d594:	d0f9      	beq.n	d58a <fnmatchx+0x10>
    if (recursion-- == 0)
    d596:	9b02      	ldr	r3, [sp, #8]
    d598:	2b00      	cmp	r3, #0
    d59a:	f000 8113 	beq.w	d7c4 <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    d59e:	f004 0304 	and.w	r3, r4, #4
    d5a2:	460a      	mov	r2, r1
    d5a4:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    d5a6:	46a9      	mov	r9, r5
    d5a8:	4621      	mov	r1, r4
    d5aa:	f819 0b01 	ldrb.w	r0, [r9], #1
    d5ae:	f7ff ffdc 	bl	d56a <foldcase>
    d5b2:	4603      	mov	r3, r0
    d5b4:	b2c0      	uxtb	r0, r0
    d5b6:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    d5b8:	7817      	ldrb	r7, [r2, #0]
    d5ba:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
    d5bc:	d025      	beq.n	d60a <fnmatchx+0x90>
    d5be:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    d5c2:	d10b      	bne.n	d5dc <fnmatchx+0x62>
    d5c4:	b1c8      	cbz	r0, d5fa <fnmatchx+0x80>
    d5c6:	282a      	cmp	r0, #42	; 0x2a
    d5c8:	d036      	beq.n	d638 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
    d5ca:	4621      	mov	r1, r4
    d5cc:	4638      	mov	r0, r7
    d5ce:	f7ff ffcc 	bl	d56a <foldcase>
    d5d2:	4286      	cmp	r6, r0
    d5d4:	f102 0201 	add.w	r2, r2, #1
    d5d8:	d01e      	beq.n	d618 <fnmatchx+0x9e>
    d5da:	e7d6      	b.n	d58a <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    d5dc:	285b      	cmp	r0, #91	; 0x5b
    d5de:	d07b      	beq.n	d6d8 <fnmatchx+0x15e>
    d5e0:	285c      	cmp	r0, #92	; 0x5c
    d5e2:	d1f2      	bne.n	d5ca <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    d5e4:	07e0      	lsls	r0, r4, #31
    d5e6:	d4f0      	bmi.n	d5ca <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    d5e8:	7868      	ldrb	r0, [r5, #1]
    d5ea:	f7ff ffbe 	bl	d56a <foldcase>
    d5ee:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    d5f2:	bf18      	it	ne
    d5f4:	f105 0902 	addne.w	r9, r5, #2
    d5f8:	e7e7      	b.n	d5ca <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    d5fa:	06e3      	lsls	r3, r4, #27
    d5fc:	d501      	bpl.n	d602 <fnmatchx+0x88>
    d5fe:	2f2f      	cmp	r7, #47	; 0x2f
    d600:	d0c4      	beq.n	d58c <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    d602:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    d604:	bf18      	it	ne
    d606:	2001      	movne	r0, #1
    d608:	e7c0      	b.n	d58c <fnmatchx+0x12>
            if (*string == EOS)
    d60a:	2f00      	cmp	r7, #0
    d60c:	d0bd      	beq.n	d58a <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    d60e:	2f2f      	cmp	r7, #47	; 0x2f
    d610:	d104      	bne.n	d61c <fnmatchx+0xa2>
    d612:	07a6      	lsls	r6, r4, #30
    d614:	d4b9      	bmi.n	d58a <fnmatchx+0x10>
            ++string;
    d616:	3201      	adds	r2, #1
            break;
    d618:	464d      	mov	r5, r9
    d61a:	e7c4      	b.n	d5a6 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    d61c:	2f2e      	cmp	r7, #46	; 0x2e
    d61e:	d1fa      	bne.n	d616 <fnmatchx+0x9c>
    d620:	9b04      	ldr	r3, [sp, #16]
    d622:	2b00      	cmp	r3, #0
    d624:	d0f7      	beq.n	d616 <fnmatchx+0x9c>
    d626:	4552      	cmp	r2, sl
    d628:	d0af      	beq.n	d58a <fnmatchx+0x10>
                (string == stringstart ||
    d62a:	07a5      	lsls	r5, r4, #30
    d62c:	d5f3      	bpl.n	d616 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    d62e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d632:	2b2f      	cmp	r3, #47	; 0x2f
    d634:	d1ef      	bne.n	d616 <fnmatchx+0x9c>
    d636:	e7a8      	b.n	d58a <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    d638:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    d63a:	f7ff ff96 	bl	d56a <foldcase>
    d63e:	b2c1      	uxtb	r1, r0
            while (c == '*')
    d640:	292a      	cmp	r1, #42	; 0x2a
    d642:	d018      	beq.n	d676 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    d644:	2f2e      	cmp	r7, #46	; 0x2e
    d646:	d109      	bne.n	d65c <fnmatchx+0xe2>
    d648:	9b04      	ldr	r3, [sp, #16]
    d64a:	b13b      	cbz	r3, d65c <fnmatchx+0xe2>
    d64c:	4552      	cmp	r2, sl
    d64e:	d09c      	beq.n	d58a <fnmatchx+0x10>
                (string == stringstart ||
    d650:	07a0      	lsls	r0, r4, #30
    d652:	d503      	bpl.n	d65c <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    d654:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d658:	2b2f      	cmp	r3, #47	; 0x2f
    d65a:	d096      	beq.n	d58a <fnmatchx+0x10>
            if (c == EOS) {
    d65c:	b979      	cbnz	r1, d67e <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
    d65e:	f014 0002 	ands.w	r0, r4, #2
    d662:	d093      	beq.n	d58c <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    d664:	06e3      	lsls	r3, r4, #27
    d666:	f100 80af 	bmi.w	d7c8 <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
    d66a:	212f      	movs	r1, #47	; 0x2f
    d66c:	4610      	mov	r0, r2
    d66e:	f001 fca5 	bl	efbc <strchr>
                        0 : FNM_NOMATCH;
    d672:	3800      	subs	r0, #0
    d674:	e7c6      	b.n	d604 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
    d676:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    d67a:	4621      	mov	r1, r4
    d67c:	e7dd      	b.n	d63a <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    d67e:	292f      	cmp	r1, #47	; 0x2f
    d680:	d021      	beq.n	d6c6 <fnmatchx+0x14c>
    if (recursion-- == 0)
    d682:	9b02      	ldr	r3, [sp, #8]
    d684:	4616      	mov	r6, r2
    d686:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    d688:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    d68c:	f004 0a02 	and.w	sl, r4, #2
    d690:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    d692:	4621      	mov	r1, r4
    d694:	f89b 0000 	ldrb.w	r0, [fp]
    d698:	f7ff ff67 	bl	d56a <foldcase>
    d69c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    d6a0:	f106 0601 	add.w	r6, r6, #1
    d6a4:	f43f af71 	beq.w	d58a <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    d6a8:	463b      	mov	r3, r7
    d6aa:	4642      	mov	r2, r8
    d6ac:	4659      	mov	r1, fp
    d6ae:	4648      	mov	r0, r9
    d6b0:	f7ff ff63 	bl	d57a <fnmatchx>
    d6b4:	2801      	cmp	r0, #1
    d6b6:	f47f af69 	bne.w	d58c <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    d6ba:	2d2f      	cmp	r5, #47	; 0x2f
    d6bc:	d1e8      	bne.n	d690 <fnmatchx+0x116>
    d6be:	f1ba 0f00 	cmp.w	sl, #0
    d6c2:	d0e5      	beq.n	d690 <fnmatchx+0x116>
    d6c4:	e761      	b.n	d58a <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    d6c6:	07a7      	lsls	r7, r4, #30
    d6c8:	d5db      	bpl.n	d682 <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
    d6ca:	4610      	mov	r0, r2
    d6cc:	f001 fc76 	bl	efbc <strchr>
    d6d0:	4602      	mov	r2, r0
    d6d2:	2800      	cmp	r0, #0
    d6d4:	d1a0      	bne.n	d618 <fnmatchx+0x9e>
    d6d6:	e758      	b.n	d58a <fnmatchx+0x10>
            if (*string == EOS)
    d6d8:	2f00      	cmp	r7, #0
    d6da:	f43f af56 	beq.w	d58a <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    d6de:	2f2f      	cmp	r7, #47	; 0x2f
    d6e0:	d102      	bne.n	d6e8 <fnmatchx+0x16e>
    d6e2:	07a6      	lsls	r6, r4, #30
    d6e4:	f53f af51 	bmi.w	d58a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    d6e8:	4621      	mov	r1, r4
    d6ea:	4638      	mov	r0, r7
    d6ec:	f7ff ff3d 	bl	d56a <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    d6f0:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
    d6f2:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    d6f4:	2b21      	cmp	r3, #33	; 0x21
    d6f6:	d001      	beq.n	d6fc <fnmatchx+0x182>
    d6f8:	2b5e      	cmp	r3, #94	; 0x5e
    d6fa:	d123      	bne.n	d744 <fnmatchx+0x1ca>
        ++pattern;
    d6fc:	3502      	adds	r5, #2
    d6fe:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    d700:	9301      	str	r3, [sp, #4]
    need = 1;
    d702:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    d704:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    d708:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    d70c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    d70e:	462e      	mov	r6, r5
    d710:	4621      	mov	r1, r4
    d712:	f816 0b01 	ldrb.w	r0, [r6], #1
    d716:	9305      	str	r3, [sp, #20]
    d718:	f7ff ff27 	bl	d56a <foldcase>
    d71c:	fa5f f880 	uxtb.w	r8, r0
    d720:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    d724:	9b05      	ldr	r3, [sp, #20]
    d726:	d110      	bne.n	d74a <fnmatchx+0x1d0>
    d728:	bb0b      	cbnz	r3, d76e <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
    d72a:	9b01      	ldr	r3, [sp, #4]
    d72c:	455b      	cmp	r3, fp
    d72e:	f43f af2c 	beq.w	d58a <fnmatchx+0x10>
            if (r == (void *)-1) {
    d732:	1c73      	adds	r3, r6, #1
    d734:	d103      	bne.n	d73e <fnmatchx+0x1c4>
                if (*string != '[')
    d736:	2f5b      	cmp	r7, #91	; 0x5b
    d738:	f47f af27 	bne.w	d58a <fnmatchx+0x10>
    d73c:	464e      	mov	r6, r9
            ++string;
    d73e:	3201      	adds	r2, #1
            break;
    d740:	46b1      	mov	r9, r6
    d742:	e769      	b.n	d618 <fnmatchx+0x9e>
    d744:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    d746:	2300      	movs	r3, #0
    d748:	e7da      	b.n	d700 <fnmatchx+0x186>
        if (c == '/')
    d74a:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
    d74e:	d0f2      	beq.n	d736 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    d750:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
    d754:	d107      	bne.n	d766 <fnmatchx+0x1ec>
    d756:	9b03      	ldr	r3, [sp, #12]
    d758:	b94b      	cbnz	r3, d76e <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
    d75a:	7868      	ldrb	r0, [r5, #1]
    d75c:	f7ff ff05 	bl	d56a <foldcase>
    d760:	1cae      	adds	r6, r5, #2
    d762:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
    d766:	f1b8 0f00 	cmp.w	r8, #0
    d76a:	f43f af0e 	beq.w	d58a <fnmatchx+0x10>
        if (*pattern == '-' 
    d76e:	7833      	ldrb	r3, [r6, #0]
    d770:	2b2d      	cmp	r3, #45	; 0x2d
    d772:	d120      	bne.n	d7b6 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    d774:	7870      	ldrb	r0, [r6, #1]
    d776:	4621      	mov	r1, r4
    d778:	f7ff fef7 	bl	d56a <foldcase>
    d77c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    d780:	d019      	beq.n	d7b6 <fnmatchx+0x23c>
    d782:	285d      	cmp	r0, #93	; 0x5d
    d784:	d017      	beq.n	d7b6 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    d786:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    d788:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    d78c:	d10a      	bne.n	d7a4 <fnmatchx+0x22a>
    d78e:	9b03      	ldr	r3, [sp, #12]
    d790:	b943      	cbnz	r3, d7a4 <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
    d792:	78b0      	ldrb	r0, [r6, #2]
    d794:	f7ff fee9 	bl	d56a <foldcase>
            if (c2 == EOS)
    d798:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    d79c:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    d7a0:	f43f aef3 	beq.w	d58a <fnmatchx+0x10>
            if (c <= test && test <= c2)
    d7a4:	9b00      	ldr	r3, [sp, #0]
    d7a6:	4543      	cmp	r3, r8
    d7a8:	db03      	blt.n	d7b2 <fnmatchx+0x238>
                ok = 1;
    d7aa:	4283      	cmp	r3, r0
    d7ac:	bfd8      	it	le
    d7ae:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    d7b2:	2300      	movs	r3, #0
    d7b4:	e7ab      	b.n	d70e <fnmatchx+0x194>
        } else if (c == test)
    d7b6:	9b00      	ldr	r3, [sp, #0]
    d7b8:	4635      	mov	r5, r6
    d7ba:	4543      	cmp	r3, r8
    d7bc:	bf08      	it	eq
    d7be:	f04f 0b01 	moveq.w	fp, #1
    d7c2:	e7f6      	b.n	d7b2 <fnmatchx+0x238>
        return FNM_NORES;
    d7c4:	2003      	movs	r0, #3
    d7c6:	e6e1      	b.n	d58c <fnmatchx+0x12>
                return 0;
    d7c8:	4608      	mov	r0, r1
    d7ca:	e6df      	b.n	d58c <fnmatchx+0x12>

0000d7cc <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    d7cc:	2340      	movs	r3, #64	; 0x40
    d7ce:	f7ff bed4 	b.w	d57a <fnmatchx>

0000d7d2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    d7d2:	4770      	bx	lr

0000d7d4 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    d7d4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d7d6:	075b      	lsls	r3, r3, #29
    d7d8:	d40b      	bmi.n	d7f2 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d7da:	6803      	ldr	r3, [r0, #0]
    d7dc:	8840      	ldrh	r0, [r0, #2]
    d7de:	f3c3 2349 	ubfx	r3, r3, #9, #10
    d7e2:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    d7e6:	4418      	add	r0, r3
    d7e8:	3013      	adds	r0, #19
    d7ea:	f020 0007 	bic.w	r0, r0, #7
    d7ee:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    d7f0:	4770      	bx	lr
	return 0;
    d7f2:	2000      	movs	r0, #0
}
    d7f4:	4770      	bx	lr

0000d7f6 <default_get_timestamp>:
    d7f6:	f001 bf75 	b.w	f6e4 <sys_clock_cycle_get_32>

0000d7fa <dummy_timestamp>:
    d7fa:	2000      	movs	r0, #0
    d7fc:	4770      	bx	lr

0000d7fe <z_log_vprintk>:
{
    d7fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    d800:	2300      	movs	r3, #0
    d802:	e9cd 0101 	strd	r0, r1, [sp, #4]
    d806:	9300      	str	r3, [sp, #0]
    d808:	461a      	mov	r2, r3
    d80a:	4619      	mov	r1, r3
    d80c:	4618      	mov	r0, r3
    d80e:	f7f5 f981 	bl	2b14 <z_impl_z_log_msg2_runtime_vcreate>
}
    d812:	b005      	add	sp, #20
    d814:	f85d fb04 	ldr.w	pc, [sp], #4

0000d818 <notify_drop>:
	z_log_dropped(true);
    d818:	2001      	movs	r0, #1
    d81a:	f7f4 bd33 	b.w	2284 <z_log_dropped>

0000d81e <get_msg>:
{
    d81e:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    d820:	f7f4 fda6 	bl	2370 <z_log_msg2_claim>
}
    d824:	bd08      	pop	{r3, pc}

0000d826 <z_log_get_tag>:
}
    d826:	2000      	movs	r0, #0
    d828:	4770      	bx	lr

0000d82a <log_backend_disable>:
	backend->cb->active = false;
    d82a:	6843      	ldr	r3, [r0, #4]
    d82c:	2100      	movs	r1, #0
    d82e:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
    d830:	f7f4 bf30 	b.w	2694 <backend_filter_set>

0000d834 <buffer_write>:
{
    d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d836:	4606      	mov	r6, r0
    d838:	460d      	mov	r5, r1
    d83a:	4614      	mov	r4, r2
    d83c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    d83e:	4621      	mov	r1, r4
    d840:	4628      	mov	r0, r5
    d842:	463a      	mov	r2, r7
    d844:	47b0      	blx	r6
	} while (len != 0);
    d846:	1a24      	subs	r4, r4, r0
		buf += processed;
    d848:	4405      	add	r5, r0
	} while (len != 0);
    d84a:	d1f8      	bne.n	d83e <buffer_write+0xa>
}
    d84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d84e <log_output_flush>:
		     output->control_block->offset,
    d84e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    d850:	6881      	ldr	r1, [r0, #8]
{
    d852:	b510      	push	{r4, lr}
    d854:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    d856:	e9d2 2300 	ldrd	r2, r3, [r2]
    d85a:	6800      	ldr	r0, [r0, #0]
    d85c:	f7ff ffea 	bl	d834 <buffer_write>
	output->control_block->offset = 0;
    d860:	6863      	ldr	r3, [r4, #4]
    d862:	2200      	movs	r2, #0
    d864:	601a      	str	r2, [r3, #0]
}
    d866:	bd10      	pop	{r4, pc}

0000d868 <out_func>:
{
    d868:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    d86a:	684b      	ldr	r3, [r1, #4]
    d86c:	681a      	ldr	r2, [r3, #0]
    d86e:	68cb      	ldr	r3, [r1, #12]
    d870:	429a      	cmp	r2, r3
{
    d872:	4605      	mov	r5, r0
    d874:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    d876:	d102      	bne.n	d87e <out_func+0x16>
		log_output_flush(out_ctx);
    d878:	4608      	mov	r0, r1
    d87a:	f7ff ffe8 	bl	d84e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d87e:	6863      	ldr	r3, [r4, #4]
    d880:	f3bf 8f5b 	dmb	ish
    d884:	e853 2f00 	ldrex	r2, [r3]
    d888:	1c51      	adds	r1, r2, #1
    d88a:	e843 1000 	strex	r0, r1, [r3]
    d88e:	2800      	cmp	r0, #0
    d890:	d1f8      	bne.n	d884 <out_func+0x1c>
    d892:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    d896:	68a3      	ldr	r3, [r4, #8]
    d898:	549d      	strb	r5, [r3, r2]
}
    d89a:	2000      	movs	r0, #0
    d89c:	bd38      	pop	{r3, r4, r5, pc}

0000d89e <cr_out_func>:
{
    d89e:	b538      	push	{r3, r4, r5, lr}
    d8a0:	4605      	mov	r5, r0
    d8a2:	460c      	mov	r4, r1
	out_func(c, ctx);
    d8a4:	f7ff ffe0 	bl	d868 <out_func>
	if (c == '\n') {
    d8a8:	2d0a      	cmp	r5, #10
    d8aa:	d103      	bne.n	d8b4 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    d8ac:	4621      	mov	r1, r4
    d8ae:	200d      	movs	r0, #13
    d8b0:	f7ff ffda 	bl	d868 <out_func>
}
    d8b4:	2000      	movs	r0, #0
    d8b6:	bd38      	pop	{r3, r4, r5, pc}

0000d8b8 <z_log_msg2_finalize>:
{
    d8b8:	b570      	push	{r4, r5, r6, lr}
    d8ba:	460e      	mov	r6, r1
    d8bc:	4615      	mov	r5, r2
    d8be:	4619      	mov	r1, r3
	if (!msg) {
    d8c0:	4604      	mov	r4, r0
    d8c2:	b918      	cbnz	r0, d8cc <z_log_msg2_finalize+0x14>
}
    d8c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    d8c8:	f7f4 bcdc 	b.w	2284 <z_log_dropped>
	if (data) {
    d8cc:	b143      	cbz	r3, d8e0 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    d8ce:	f100 030c 	add.w	r3, r0, #12
    d8d2:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    d8d6:	4418      	add	r0, r3
    d8d8:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    d8dc:	f001 fbd2 	bl	f084 <memcpy>
	msg->hdr.source = source;
    d8e0:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    d8e4:	4620      	mov	r0, r4
}
    d8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    d8ea:	f7f4 be1f 	b.w	252c <z_log_msg2_commit>

0000d8ee <z_impl_z_log_msg2_static_create>:
{
    d8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d8f2:	f3c1 2949 	ubfx	r9, r1, #9, #10
    d8f6:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    d8fa:	444c      	add	r4, r9
    d8fc:	3413      	adds	r4, #19
    d8fe:	f024 0407 	bic.w	r4, r4, #7
    d902:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    d904:	08a0      	lsrs	r0, r4, #2
{
    d906:	460d      	mov	r5, r1
    d908:	4690      	mov	r8, r2
    d90a:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    d90c:	f7f4 fd28 	bl	2360 <z_log_msg2_alloc>
	if (msg) {
    d910:	4604      	mov	r4, r0
    d912:	b120      	cbz	r0, d91e <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
    d914:	464a      	mov	r2, r9
    d916:	4641      	mov	r1, r8
    d918:	300c      	adds	r0, #12
    d91a:	f001 fbb3 	bl	f084 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
    d91e:	463b      	mov	r3, r7
    d920:	462a      	mov	r2, r5
    d922:	4631      	mov	r1, r6
    d924:	4620      	mov	r0, r4
}
    d926:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    d92a:	f7ff bfc5 	b.w	d8b8 <z_log_msg2_finalize>

0000d92e <log_halt>:
    d92e:	684b      	ldr	r3, [r1, #4]
    d930:	2000      	movs	r0, #0
    d932:	7158      	strb	r0, [r3, #5]
}
    d934:	4770      	bx	lr

0000d936 <log_go>:
	backend->cb->active = true;
    d936:	684b      	ldr	r3, [r1, #4]
    d938:	2201      	movs	r2, #1
    d93a:	715a      	strb	r2, [r3, #5]
}
    d93c:	2000      	movs	r0, #0
    d93e:	4770      	bx	lr

0000d940 <cmd_log_self_status>:
{
    d940:	b570      	push	{r4, r5, r6, lr}
    d942:	4604      	mov	r4, r0
    d944:	460d      	mov	r5, r1
    d946:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    d948:	f7f5 fa72 	bl	2e30 <shell_state_precheck>
    d94c:	b130      	cbz	r0, d95c <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    d94e:	69e1      	ldr	r1, [r4, #28]
    d950:	4633      	mov	r3, r6
    d952:	6809      	ldr	r1, [r1, #0]
    d954:	462a      	mov	r2, r5
    d956:	4620      	mov	r0, r4
    d958:	f7f5 f9a2 	bl	2ca0 <log_status>
}
    d95c:	2000      	movs	r0, #0
    d95e:	bd70      	pop	{r4, r5, r6, pc}

0000d960 <cmd_log_self_enable>:
{
    d960:	b570      	push	{r4, r5, r6, lr}
    d962:	4604      	mov	r4, r0
    d964:	460d      	mov	r5, r1
    d966:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    d968:	f7f5 fa62 	bl	2e30 <shell_state_precheck>
    d96c:	b140      	cbz	r0, d980 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    d96e:	69e1      	ldr	r1, [r4, #28]
    d970:	4633      	mov	r3, r6
    d972:	462a      	mov	r2, r5
    d974:	4620      	mov	r0, r4
    d976:	6809      	ldr	r1, [r1, #0]
}
    d978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    d97c:	f7f5 bad0 	b.w	2f20 <log_enable>
}
    d980:	bd70      	pop	{r4, r5, r6, pc}

0000d982 <log_disable>:
{
    d982:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    d984:	2400      	movs	r4, #0
    d986:	9400      	str	r4, [sp, #0]
    d988:	3304      	adds	r3, #4
    d98a:	3a01      	subs	r2, #1
    d98c:	f7f5 fa60 	bl	2e50 <filters_set>
}
    d990:	4620      	mov	r0, r4
    d992:	b002      	add	sp, #8
    d994:	bd10      	pop	{r4, pc}

0000d996 <cmd_log_self_disable>:
{
    d996:	b570      	push	{r4, r5, r6, lr}
    d998:	4604      	mov	r4, r0
    d99a:	460d      	mov	r5, r1
    d99c:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    d99e:	f7f5 fa47 	bl	2e30 <shell_state_precheck>
    d9a2:	b140      	cbz	r0, d9b6 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    d9a4:	69e1      	ldr	r1, [r4, #28]
    d9a6:	4633      	mov	r3, r6
    d9a8:	462a      	mov	r2, r5
    d9aa:	4620      	mov	r0, r4
    d9ac:	6809      	ldr	r1, [r1, #0]
}
    d9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    d9b2:	f7ff bfe6 	b.w	d982 <log_disable>
}
    d9b6:	bd70      	pop	{r4, r5, r6, pc}

0000d9b8 <cmd_log_self_go>:
{
    d9b8:	b510      	push	{r4, lr}
    d9ba:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    d9bc:	f7f5 fa38 	bl	2e30 <shell_state_precheck>
    d9c0:	b120      	cbz	r0, d9cc <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
    d9c2:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    d9c4:	681b      	ldr	r3, [r3, #0]
    d9c6:	685b      	ldr	r3, [r3, #4]
    d9c8:	2201      	movs	r2, #1
    d9ca:	715a      	strb	r2, [r3, #5]
}
    d9cc:	2000      	movs	r0, #0
    d9ce:	bd10      	pop	{r4, pc}

0000d9d0 <cmd_log_self_halt>:
{
    d9d0:	b510      	push	{r4, lr}
    d9d2:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    d9d4:	f7f5 fa2c 	bl	2e30 <shell_state_precheck>
    d9d8:	b120      	cbz	r0, d9e4 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    d9da:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
    d9dc:	681b      	ldr	r3, [r3, #0]
    d9de:	685b      	ldr	r3, [r3, #4]
    d9e0:	2200      	movs	r2, #0
    d9e2:	715a      	strb	r2, [r3, #5]
}
    d9e4:	2000      	movs	r0, #0
    d9e6:	bd10      	pop	{r4, pc}

0000d9e8 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    d9e8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d9ea:	075b      	lsls	r3, r3, #29
    d9ec:	d40b      	bmi.n	da06 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d9ee:	6803      	ldr	r3, [r0, #0]
    d9f0:	8840      	ldrh	r0, [r0, #2]
    d9f2:	f3c3 2349 	ubfx	r3, r3, #9, #10
    d9f6:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    d9fa:	4418      	add	r0, r3
    d9fc:	3013      	adds	r0, #19
    d9fe:	f020 0007 	bic.w	r0, r0, #7
    da02:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    da04:	4770      	bx	lr
	return 0;
    da06:	2000      	movs	r0, #0
}
    da08:	4770      	bx	lr

0000da0a <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    da0a:	6883      	ldr	r3, [r0, #8]
    da0c:	6a1b      	ldr	r3, [r3, #32]
    da0e:	b103      	cbz	r3, da12 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    da10:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    da12:	4770      	bx	lr

0000da14 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
    da14:	6843      	ldr	r3, [r0, #4]
    da16:	681b      	ldr	r3, [r3, #0]
{
    da18:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    da1a:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
    da1c:	4620      	mov	r0, r4
    da1e:	f7ff fff4 	bl	da0a <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    da22:	68a3      	ldr	r3, [r4, #8]
    da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    da26:	b10b      	cbz	r3, da2c <uninit+0x18>
		api->irq_rx_disable(dev);
    da28:	4620      	mov	r0, r4
    da2a:	4798      	blx	r3
}
    da2c:	2000      	movs	r0, #0
    da2e:	bd10      	pop	{r4, pc}

0000da30 <enable>:
{
    da30:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    da32:	6843      	ldr	r3, [r0, #4]
    da34:	681b      	ldr	r3, [r3, #0]
    da36:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    da38:	b111      	cbz	r1, da40 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    da3a:	6818      	ldr	r0, [r3, #0]
    da3c:	f7ff ffe5 	bl	da0a <uart_irq_tx_disable>
}
    da40:	2000      	movs	r0, #0
    da42:	bd08      	pop	{r3, pc}

0000da44 <read>:
{
    da44:	b510      	push	{r4, lr}
    da46:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    da48:	6843      	ldr	r3, [r0, #4]
    da4a:	68d8      	ldr	r0, [r3, #12]
    da4c:	f7ff fb9d 	bl	d18a <ring_buf_get>
    da50:	6020      	str	r0, [r4, #0]
}
    da52:	2000      	movs	r0, #0
    da54:	bd10      	pop	{r4, pc}

0000da56 <write>:
{
    da56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    da5a:	6845      	ldr	r5, [r0, #4]
{
    da5c:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    da5e:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    da60:	7c1b      	ldrb	r3, [r3, #16]
{
    da62:	460c      	mov	r4, r1
    da64:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    da66:	b153      	cbz	r3, da7e <write+0x28>
    da68:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    da6c:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    da6e:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
    da70:	d120      	bne.n	dab4 <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    da72:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
    da76:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    da78:	2001      	movs	r0, #1
    da7a:	4790      	blx	r2
    da7c:	e017      	b.n	daae <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    da7e:	68a8      	ldr	r0, [r5, #8]
    da80:	f7ff fb1b 	bl	d0ba <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    da84:	682b      	ldr	r3, [r5, #0]
    da86:	6030      	str	r0, [r6, #0]
    da88:	330c      	adds	r3, #12
    da8a:	2101      	movs	r1, #1
    da8c:	f3bf 8f5b 	dmb	ish
    da90:	e853 2f00 	ldrex	r2, [r3]
    da94:	e843 1000 	strex	r0, r1, [r3]
    da98:	2800      	cmp	r0, #0
    da9a:	d1f9      	bne.n	da90 <write+0x3a>
    da9c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    daa0:	b92a      	cbnz	r2, daae <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    daa2:	682b      	ldr	r3, [r5, #0]
    daa4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    daa6:	6883      	ldr	r3, [r0, #8]
    daa8:	69db      	ldr	r3, [r3, #28]
    daaa:	b103      	cbz	r3, daae <write+0x58>
		api->irq_tx_enable(dev);
    daac:	4798      	blx	r3
}
    daae:	2000      	movs	r0, #0
    dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    dab4:	6818      	ldr	r0, [r3, #0]
    dab6:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    daba:	6883      	ldr	r3, [r0, #8]
    dabc:	685b      	ldr	r3, [r3, #4]
    dabe:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    dac0:	e7d4      	b.n	da6c <write+0x16>

0000dac2 <atomic_or>:
{
    dac2:	4603      	mov	r3, r0
}
    dac4:	f3bf 8f5b 	dmb	ish
    dac8:	e853 0f00 	ldrex	r0, [r3]
    dacc:	ea40 0201 	orr.w	r2, r0, r1
    dad0:	e843 2c00 	strex	ip, r2, [r3]
    dad4:	f1bc 0f00 	cmp.w	ip, #0
    dad8:	d1f6      	bne.n	dac8 <atomic_or+0x6>
    dada:	f3bf 8f5b 	dmb	ish
    dade:	4770      	bx	lr

0000dae0 <atomic_and>:
{
    dae0:	4603      	mov	r3, r0
}
    dae2:	f3bf 8f5b 	dmb	ish
    dae6:	e853 0f00 	ldrex	r0, [r3]
    daea:	ea00 0201 	and.w	r2, r0, r1
    daee:	e843 2c00 	strex	ip, r2, [r3]
    daf2:	f1bc 0f00 	cmp.w	ip, #0
    daf6:	d1f6      	bne.n	dae6 <atomic_and+0x6>
    daf8:	f3bf 8f5b 	dmb	ish
    dafc:	4770      	bx	lr

0000dafe <shell_signal_handle>:
{
    dafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    db00:	6885      	ldr	r5, [r0, #8]
    db02:	0109      	lsls	r1, r1, #4
    db04:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    db08:	4604      	mov	r4, r0
    db0a:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    db0c:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    db0e:	aa01      	add	r2, sp, #4
    db10:	4669      	mov	r1, sp
    db12:	4628      	mov	r0, r5
    db14:	f002 fbaa 	bl	1026c <z_impl_k_poll_signal_check>
	if (set) {
    db18:	9b00      	ldr	r3, [sp, #0]
    db1a:	b123      	cbz	r3, db26 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    db1c:	4628      	mov	r0, r5
    db1e:	f002 fba2 	bl	10266 <z_impl_k_poll_signal_reset>
		handler(shell);
    db22:	4620      	mov	r0, r4
    db24:	47b0      	blx	r6
}
    db26:	b002      	add	sp, #8
    db28:	bd70      	pop	{r4, r5, r6, pc}

0000db2a <z_shell_strlen>:
{
    db2a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    db2c:	b110      	cbz	r0, db34 <z_shell_strlen+0xa>
    db2e:	f001 fa53 	bl	efd8 <strlen>
    db32:	b280      	uxth	r0, r0
}
    db34:	bd08      	pop	{r3, pc}

0000db36 <z_shell_raw_fprintf>:
{
    db36:	b40e      	push	{r1, r2, r3}
    db38:	b503      	push	{r0, r1, lr}
    db3a:	aa03      	add	r2, sp, #12
    db3c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    db40:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    db42:	f7f6 fcd9 	bl	44f8 <z_shell_fprintf_fmt>
}
    db46:	b002      	add	sp, #8
    db48:	f85d eb04 	ldr.w	lr, [sp], #4
    db4c:	b003      	add	sp, #12
    db4e:	4770      	bx	lr

0000db50 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    db50:	f7fd be18 	b.w	b784 <z_impl_k_mutex_lock>

0000db54 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    db54:	688b      	ldr	r3, [r1, #8]
    db56:	b920      	cbnz	r0, db62 <transport_evt_handler+0xe>
    db58:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    db5c:	2100      	movs	r1, #0
    db5e:	f7fe be23 	b.w	c7a8 <z_impl_k_poll_signal_raise>
    db62:	f503 7026 	add.w	r0, r3, #664	; 0x298
    db66:	e7f9      	b.n	db5c <transport_evt_handler+0x8>

0000db68 <kill_handler>:
{
    db68:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    db6a:	6883      	ldr	r3, [r0, #8]
    db6c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
    db70:	07db      	lsls	r3, r3, #31
{
    db72:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    db74:	d41d      	bmi.n	dbb2 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
    db76:	69c0      	ldr	r0, [r0, #28]
    db78:	f000 fd6f 	bl	e65a <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    db7c:	6860      	ldr	r0, [r4, #4]
    db7e:	6803      	ldr	r3, [r0, #0]
    db80:	685b      	ldr	r3, [r3, #4]
    db82:	4798      	blx	r3
	if (err != 0) {
    db84:	4605      	mov	r5, r0
    db86:	b920      	cbnz	r0, db92 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
    db88:	68e0      	ldr	r0, [r4, #12]
    db8a:	f000 ff0f 	bl	e9ac <z_shell_history_purge>
	shell->ctx->state = state;
    db8e:	68a3      	ldr	r3, [r4, #8]
    db90:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    db92:	68a3      	ldr	r3, [r4, #8]
    db94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    db96:	b113      	cbz	r3, db9e <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
    db98:	4629      	mov	r1, r5
    db9a:	4620      	mov	r0, r4
    db9c:	4798      	blx	r3
	shell->ctx->tid = NULL;
    db9e:	68a3      	ldr	r3, [r4, #8]
    dba0:	2200      	movs	r2, #0
    dba2:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    dba6:	f7fe fb39 	bl	c21c <z_impl_z_current_get>
}
    dbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    dbae:	f7f9 bb0f 	b.w	71d0 <z_impl_k_thread_abort>
		return -EBUSY;
    dbb2:	f06f 050f 	mvn.w	r5, #15
    dbb6:	e7ec      	b.n	db92 <kill_handler+0x2a>

0000dbb8 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    dbb8:	f500 7019 	add.w	r0, r0, #612	; 0x264
    dbbc:	b111      	cbz	r1, dbc4 <z_flag_history_exit_set.isra.0+0xc>
    dbbe:	2104      	movs	r1, #4
    dbc0:	f7ff bf7f 	b.w	dac2 <atomic_or>
    dbc4:	f06f 0104 	mvn.w	r1, #4
    dbc8:	f7ff bf8a 	b.w	dae0 <atomic_and>

0000dbcc <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    dbcc:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    dbce:	f500 7018 	add.w	r0, r0, #608	; 0x260
    dbd2:	b129      	cbz	r1, dbe0 <z_flag_insert_mode_set.isra.0+0x14>
    dbd4:	2101      	movs	r1, #1
    dbd6:	f7ff ff74 	bl	dac2 <atomic_or>
}
    dbda:	f000 0001 	and.w	r0, r0, #1
    dbde:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    dbe0:	f06f 0101 	mvn.w	r1, #1
    dbe4:	f7ff ff7c 	bl	dae0 <atomic_and>
    dbe8:	e7f7      	b.n	dbda <z_flag_insert_mode_set.isra.0+0xe>

0000dbea <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    dbea:	f7fd be43 	b.w	b874 <z_impl_k_mutex_unlock>

0000dbee <shell_log_process>:
{
    dbee:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
    dbf0:	2300      	movs	r3, #0
{
    dbf2:	4604      	mov	r4, r0
	int signaled = 0;
    dbf4:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
    dbf6:	4620      	mov	r0, r4
    dbf8:	f000 fb5f 	bl	e2ba <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
    dbfc:	69e0      	ldr	r0, [r4, #28]
    dbfe:	f000 fd6d 	bl	e6dc <z_shell_log_backend_process>
    dc02:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
    dc04:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
    dc06:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
    dc08:	f7f6 fe00 	bl	480c <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
    dc0c:	68a3      	ldr	r3, [r4, #8]
    dc0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
    dc10:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
    dc14:	b123      	cbz	r3, dc20 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
    dc16:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    dc1a:	2100      	movs	r1, #0
    dc1c:	f7fe fae4 	bl	c1e8 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
    dc20:	aa01      	add	r2, sp, #4
    dc22:	4669      	mov	r1, sp
    dc24:	4630      	mov	r0, r6
    dc26:	f002 fb21 	bl	1026c <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
    dc2a:	b115      	cbz	r5, dc32 <shell_log_process+0x44>
    dc2c:	9b00      	ldr	r3, [sp, #0]
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d0e1      	beq.n	dbf6 <shell_log_process+0x8>
}
    dc32:	b002      	add	sp, #8
    dc34:	bd70      	pop	{r4, r5, r6, pc}

0000dc36 <shell_vfprintf>:
{
    dc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc38:	4604      	mov	r4, r0
	return shell->ctx->state;
    dc3a:	6880      	ldr	r0, [r0, #8]
{
    dc3c:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    dc3e:	7903      	ldrb	r3, [r0, #4]
    dc40:	2b02      	cmp	r3, #2
{
    dc42:	460d      	mov	r5, r1
    dc44:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    dc46:	d007      	beq.n	dc58 <shell_vfprintf+0x22>
}
    dc48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    dc4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    dc50:	f500 7019 	add.w	r0, r0, #612	; 0x264
    dc54:	f7ff bf35 	b.w	dac2 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    dc58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dc5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dc60:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    dc64:	f7ff ff74 	bl	db50 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    dc68:	68a3      	ldr	r3, [r4, #8]
    dc6a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    dc6e:	0511      	lsls	r1, r2, #20
    dc70:	d404      	bmi.n	dc7c <shell_vfprintf+0x46>
    dc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dc74:	b913      	cbnz	r3, dc7c <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    dc76:	4620      	mov	r0, r4
    dc78:	f000 fb1f 	bl	e2ba <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    dc7c:	463b      	mov	r3, r7
    dc7e:	4632      	mov	r2, r6
    dc80:	4629      	mov	r1, r5
    dc82:	4620      	mov	r0, r4
    dc84:	f000 fb7a 	bl	e37c <z_shell_vfprintf>
    dc88:	68a3      	ldr	r3, [r4, #8]
    dc8a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    dc8e:	0512      	lsls	r2, r2, #20
    dc90:	d404      	bmi.n	dc9c <shell_vfprintf+0x66>
    dc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dc94:	b913      	cbnz	r3, dc9c <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    dc96:	4620      	mov	r0, r4
    dc98:	f7f6 fdb8 	bl	480c <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    dc9c:	6960      	ldr	r0, [r4, #20]
    dc9e:	f000 f817 	bl	dcd0 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    dca2:	68a0      	ldr	r0, [r4, #8]
}
    dca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    dca8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    dcac:	f7ff bf9d 	b.w	dbea <k_mutex_unlock.isra.0>

0000dcb0 <shell_fprintf>:
{
    dcb0:	b40c      	push	{r2, r3}
    dcb2:	b507      	push	{r0, r1, r2, lr}
    dcb4:	ab04      	add	r3, sp, #16
    dcb6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    dcba:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    dcbc:	f7ff ffbb 	bl	dc36 <shell_vfprintf>
}
    dcc0:	b003      	add	sp, #12
    dcc2:	f85d eb04 	ldr.w	lr, [sp], #4
    dcc6:	b002      	add	sp, #8
    dcc8:	4770      	bx	lr

0000dcca <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    dcca:	6883      	ldr	r3, [r0, #8]
    dccc:	6399      	str	r1, [r3, #56]	; 0x38
}
    dcce:	4770      	bx	lr

0000dcd0 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    dcd0:	6902      	ldr	r2, [r0, #16]
    dcd2:	6883      	ldr	r3, [r0, #8]
    dcd4:	6812      	ldr	r2, [r2, #0]
    dcd6:	6801      	ldr	r1, [r0, #0]
{
    dcd8:	b510      	push	{r4, lr}
    dcda:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    dcdc:	68c0      	ldr	r0, [r0, #12]
    dcde:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    dce0:	6923      	ldr	r3, [r4, #16]
    dce2:	2200      	movs	r2, #0
    dce4:	601a      	str	r2, [r3, #0]
}
    dce6:	bd10      	pop	{r4, pc}

0000dce8 <out_func>:
{
    dce8:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    dcea:	68cb      	ldr	r3, [r1, #12]
    dcec:	7c1b      	ldrb	r3, [r3, #16]
    dcee:	2b02      	cmp	r3, #2
{
    dcf0:	4605      	mov	r5, r0
    dcf2:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    dcf4:	d104      	bne.n	dd00 <out_func+0x18>
    dcf6:	280a      	cmp	r0, #10
    dcf8:	d102      	bne.n	dd00 <out_func+0x18>
		(void)out_func('\r', ctx);
    dcfa:	200d      	movs	r0, #13
    dcfc:	f7ff fff4 	bl	dce8 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    dd00:	6923      	ldr	r3, [r4, #16]
    dd02:	6822      	ldr	r2, [r4, #0]
    dd04:	681b      	ldr	r3, [r3, #0]
    dd06:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    dd08:	6922      	ldr	r2, [r4, #16]
    dd0a:	6813      	ldr	r3, [r2, #0]
    dd0c:	3301      	adds	r3, #1
    dd0e:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    dd10:	6862      	ldr	r2, [r4, #4]
    dd12:	4293      	cmp	r3, r2
    dd14:	d102      	bne.n	dd1c <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    dd16:	4620      	mov	r0, r4
    dd18:	f7ff ffda 	bl	dcd0 <z_shell_fprintf_buffer_flush>
}
    dd1c:	2000      	movs	r0, #0
    dd1e:	bd38      	pop	{r3, r4, r5, pc}

0000dd20 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    dd20:	2820      	cmp	r0, #32
    dd22:	d005      	beq.n	dd30 <isspace+0x10>
    dd24:	3809      	subs	r0, #9
    dd26:	2804      	cmp	r0, #4
    dd28:	bf8c      	ite	hi
    dd2a:	2000      	movhi	r0, #0
    dd2c:	2001      	movls	r0, #1
    dd2e:	4770      	bx	lr
    dd30:	2001      	movs	r0, #1
}
    dd32:	4770      	bx	lr

0000dd34 <z_shell_strlen>:
{
    dd34:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    dd36:	b110      	cbz	r0, dd3e <z_shell_strlen+0xa>
    dd38:	f001 f94e 	bl	efd8 <strlen>
    dd3c:	b280      	uxth	r0, r0
}
    dd3e:	bd08      	pop	{r3, pc}

0000dd40 <z_column_span_with_buffer_offsets_get>:
{
    dd40:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    dd42:	7b03      	ldrb	r3, [r0, #12]
    dd44:	8940      	ldrh	r0, [r0, #10]
    dd46:	441a      	add	r2, r3
    dd48:	4419      	add	r1, r3
    dd4a:	fbb2 f4f0 	udiv	r4, r2, r0
    dd4e:	fbb1 f3f0 	udiv	r3, r1, r0
    dd52:	fb00 2214 	mls	r2, r0, r4, r2
    dd56:	fb00 1013 	mls	r0, r0, r3, r1
}
    dd5a:	1a10      	subs	r0, r2, r0
    dd5c:	bd10      	pop	{r4, pc}

0000dd5e <z_row_span_with_buffer_offsets_get>:
{
    dd5e:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    dd60:	7b04      	ldrb	r4, [r0, #12]
    dd62:	8943      	ldrh	r3, [r0, #10]
    dd64:	4421      	add	r1, r4
    dd66:	1910      	adds	r0, r2, r4
    dd68:	fbb1 f1f3 	udiv	r1, r1, r3
    dd6c:	fbb0 f0f3 	udiv	r0, r0, r3
}
    dd70:	1a40      	subs	r0, r0, r1
    dd72:	bd10      	pop	{r4, pc}

0000dd74 <z_shell_multiline_data_calc>:
{
    dd74:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    dd76:	7b05      	ldrb	r5, [r0, #12]
    dd78:	8943      	ldrh	r3, [r0, #10]
    dd7a:	4429      	add	r1, r5
    dd7c:	fbb1 f4f3 	udiv	r4, r1, r3
    dd80:	fb03 1114 	mls	r1, r3, r4, r1
    dd84:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    dd86:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    dd88:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    dd8a:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    dd8c:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    dd90:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    dd94:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    dd96:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    dd98:	1c4c      	adds	r4, r1, #1
    dd9a:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    dd9c:	8042      	strh	r2, [r0, #2]
}
    dd9e:	bd30      	pop	{r4, r5, pc}

0000dda0 <z_shell_make_argv>:
{
    dda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    dda4:	2500      	movs	r5, #0
{
    dda6:	4606      	mov	r6, r0
    dda8:	460f      	mov	r7, r1
    ddaa:	4614      	mov	r4, r2
    ddac:	4698      	mov	r8, r3
	*argc = 0;
    ddae:	6005      	str	r5, [r0, #0]
		c = *cmd;
    ddb0:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    ddb2:	2800      	cmp	r0, #0
    ddb4:	f000 80b5 	beq.w	df22 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
    ddb8:	f7ff ffb2 	bl	dd20 <isspace>
    ddbc:	b118      	cbz	r0, ddc6 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
    ddbe:	2300      	movs	r3, #0
    ddc0:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
    ddc4:	e7f4      	b.n	ddb0 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
    ddc6:	6832      	ldr	r2, [r6, #0]
    ddc8:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
    ddca:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
    ddcc:	6033      	str	r3, [r6, #0]
    ddce:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
    ddd2:	f000 80a6 	beq.w	df22 <z_shell_make_argv+0x182>
	char quote = 0;
    ddd6:	4605      	mov	r5, r0
		c = *cmd;
    ddd8:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    dddc:	f1b9 0f00 	cmp.w	r9, #0
    dde0:	d0e6      	beq.n	ddb0 <z_shell_make_argv+0x10>
		if (!quote) {
    dde2:	2d00      	cmp	r5, #0
    dde4:	f040 8089 	bne.w	defa <z_shell_make_argv+0x15a>
			switch (c) {
    dde8:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    ddec:	d006      	beq.n	ddfc <z_shell_make_argv+0x5c>
    ddee:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    ddf2:	f000 808a 	beq.w	df0a <z_shell_make_argv+0x16a>
    ddf6:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    ddfa:	d176      	bne.n	deea <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
    ddfc:	4620      	mov	r0, r4
    ddfe:	f7ff ff99 	bl	dd34 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    de02:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
    de04:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    de06:	4620      	mov	r0, r4
    de08:	f001 f924 	bl	f054 <memmove>
				continue;
    de0c:	464d      	mov	r5, r9
    de0e:	e7e3      	b.n	ddd8 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    de10:	4620      	mov	r0, r4
    de12:	f7ff ff8f 	bl	dd34 <z_shell_strlen>
    de16:	1c61      	adds	r1, r4, #1
    de18:	4602      	mov	r2, r0
    de1a:	4620      	mov	r0, r4
    de1c:	f001 f91a 	bl	f054 <memmove>
			quote = 0;
    de20:	2500      	movs	r5, #0
			continue;
    de22:	e7d9      	b.n	ddd8 <z_shell_make_argv+0x38>
			if (t == '0') {
    de24:	2930      	cmp	r1, #48	; 0x30
    de26:	d126      	bne.n	de76 <z_shell_make_argv+0xd6>
    de28:	2302      	movs	r3, #2
				uint8_t v = 0U;
    de2a:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    de2e:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    de30:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    de34:	b2d2      	uxtb	r2, r2
    de36:	2a07      	cmp	r2, #7
    de38:	fa5f f983 	uxtb.w	r9, r3
    de3c:	d818      	bhi.n	de70 <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
    de3e:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    de40:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    de44:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    de46:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    de4a:	d1f0      	bne.n	de2e <z_shell_make_argv+0x8e>
    de4c:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
    de4e:	4620      	mov	r0, r4
    de50:	f7ff ff70 	bl	dd34 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    de54:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    de58:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    de5a:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
    de5e:	eba0 0209 	sub.w	r2, r0, r9
    de62:	4659      	mov	r1, fp
    de64:	4620      	mov	r0, r4
    de66:	f001 f8f5 	bl	f054 <memmove>
					*cmd++ = v;
    de6a:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    de6e:	e7b3      	b.n	ddd8 <z_shell_make_argv+0x38>
				if (i > 2) {
    de70:	f1b9 0f02 	cmp.w	r9, #2
    de74:	d1eb      	bne.n	de4e <z_shell_make_argv+0xae>
			if (t == 'x') {
    de76:	2978      	cmp	r1, #120	; 0x78
    de78:	d13d      	bne.n	def6 <z_shell_make_argv+0x156>
    de7a:	2102      	movs	r1, #2
				uint8_t v = 0U;
    de7c:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    de80:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
    de82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    de86:	b2db      	uxtb	r3, r3
    de88:	2b09      	cmp	r3, #9
    de8a:	b2c8      	uxtb	r0, r1
    de8c:	d81a      	bhi.n	dec4 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
    de8e:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    de92:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
    de94:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
    de98:	d112      	bne.n	dec0 <z_shell_make_argv+0x120>
    de9a:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
    de9e:	4620      	mov	r0, r4
    dea0:	f7ff ff48 	bl	dd34 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    dea4:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    dea8:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    deaa:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
    deae:	eba0 020a 	sub.w	r2, r0, sl
    deb2:	4659      	mov	r1, fp
    deb4:	4620      	mov	r0, r4
    deb6:	f001 f8cd 	bl	f054 <memmove>
					*cmd++ = v;
    deba:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    debe:	e78b      	b.n	ddd8 <z_shell_make_argv+0x38>
    dec0:	2103      	movs	r1, #3
    dec2:	e7dd      	b.n	de80 <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
    dec4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    dec8:	2b05      	cmp	r3, #5
    deca:	d803      	bhi.n	ded4 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
    decc:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    dece:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
    ded2:	e7de      	b.n	de92 <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
    ded4:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    ded8:	2b05      	cmp	r3, #5
    deda:	d801      	bhi.n	dee0 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
    dedc:	3a37      	subs	r2, #55	; 0x37
    dede:	e7f6      	b.n	dece <z_shell_make_argv+0x12e>
				if (i > 2) {
    dee0:	2802      	cmp	r0, #2
    dee2:	d008      	beq.n	def6 <z_shell_make_argv+0x156>
    dee4:	f04f 0a03 	mov.w	sl, #3
    dee8:	e7d9      	b.n	de9e <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
    deea:	4648      	mov	r0, r9
    deec:	f7ff ff18 	bl	dd20 <isspace>
    def0:	2800      	cmp	r0, #0
    def2:	f47f af5d 	bne.w	ddb0 <z_shell_make_argv+0x10>
		cmd += 1;
    def6:	3401      	adds	r4, #1
    def8:	e76e      	b.n	ddd8 <z_shell_make_argv+0x38>
		if (quote == c) {
    defa:	45a9      	cmp	r9, r5
    defc:	d088      	beq.n	de10 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
    defe:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    df02:	d1f8      	bne.n	def6 <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
    df04:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    df06:	428d      	cmp	r5, r1
    df08:	d18c      	bne.n	de24 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
    df0a:	4620      	mov	r0, r4
    df0c:	f7ff ff12 	bl	dd34 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    df10:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
    df14:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    df16:	4649      	mov	r1, r9
    df18:	4620      	mov	r0, r4
    df1a:	f001 f89b 	bl	f054 <memmove>
				cmd += 1;
    df1e:	464c      	mov	r4, r9
				continue;
    df20:	e75a      	b.n	ddd8 <z_shell_make_argv+0x38>
}
    df22:	4628      	mov	r0, r5
    df24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000df28 <z_shell_pattern_remove>:
{
    df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df2a:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    df2c:	4611      	mov	r1, r2
{
    df2e:	4615      	mov	r5, r2
    df30:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    df32:	f001 f807 	bl	ef44 <strstr>
    df36:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    df38:	4628      	mov	r0, r5
    df3a:	f7ff fefb 	bl	dd34 <z_shell_strlen>
    df3e:	4605      	mov	r5, r0
	if (!pattern_addr) {
    df40:	b1c4      	cbz	r4, df74 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    df42:	42a7      	cmp	r7, r4
    df44:	d207      	bcs.n	df56 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    df46:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    df4a:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    df4c:	bf02      	ittt	eq
    df4e:	3501      	addeq	r5, #1
    df50:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    df52:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    df56:	4620      	mov	r0, r4
    df58:	f7ff feec 	bl	dd34 <z_shell_strlen>
	*buff_len -= pattern_len;
    df5c:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    df5e:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
    df60:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    df62:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
    df64:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    df66:	1961      	adds	r1, r4, r5
    df68:	4620      	mov	r0, r4
    df6a:	b292      	uxth	r2, r2
}
    df6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    df70:	f001 b870 	b.w	f054 <memmove>
}
    df74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000df76 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    df76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df7a:	4688      	mov	r8, r1
    df7c:	b086      	sub	sp, #24
    df7e:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
    df80:	4604      	mov	r4, r0
    df82:	b128      	cbz	r0, df90 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    df84:	4601      	mov	r1, r0
    df86:	2214      	movs	r2, #20
    df88:	a801      	add	r0, sp, #4
    df8a:	f001 f87b 	bl	f084 <memcpy>
		parent = &parent_cpy;
    df8e:	ac01      	add	r4, sp, #4
    df90:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    df92:	4631      	mov	r1, r6
    df94:	463a      	mov	r2, r7
    df96:	4620      	mov	r0, r4
    df98:	f7f6 fac2 	bl	4520 <z_shell_cmd_get>
    df9c:	3601      	adds	r6, #1
    df9e:	4605      	mov	r5, r0
    dfa0:	b128      	cbz	r0, dfae <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    dfa2:	6829      	ldr	r1, [r5, #0]
    dfa4:	4640      	mov	r0, r8
    dfa6:	f001 f827 	bl	eff8 <strcmp>
    dfaa:	2800      	cmp	r0, #0
    dfac:	d1f1      	bne.n	df92 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
    dfae:	4628      	mov	r0, r5
    dfb0:	b006      	add	sp, #24
    dfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dfb6 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    dfb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dfba:	461c      	mov	r4, r3
    dfbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    dfc0:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    dfc4:	2300      	movs	r3, #0
{
    dfc6:	460f      	mov	r7, r1
    dfc8:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    dfca:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    dfcc:	6823      	ldr	r3, [r4, #0]
    dfce:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    dfd0:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    dfd2:	d21b      	bcs.n	e00c <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    dfd4:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    dfd8:	f000 fd66 	bl	eaa8 <z_shell_has_wildcard>
    dfdc:	6823      	ldr	r3, [r4, #0]
    dfde:	4682      	mov	sl, r0
    dfe0:	b118      	cbz	r0, dfea <z_shell_get_last_command+0x34>
				(*match_arg)++;
    dfe2:	3301      	adds	r3, #1
    dfe4:	6023      	str	r3, [r4, #0]
				continue;
    dfe6:	4628      	mov	r0, r5
    dfe8:	e7f0      	b.n	dfcc <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    dfea:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    dfee:	4642      	mov	r2, r8
    dff0:	4628      	mov	r0, r5
    dff2:	f7ff ffc0 	bl	df76 <z_shell_find_cmd>
		if (entry) {
    dff6:	b148      	cbz	r0, e00c <z_shell_get_last_command+0x56>
			(*match_arg)++;
    dff8:	6823      	ldr	r3, [r4, #0]
    dffa:	1c5a      	adds	r2, r3, #1
    dffc:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    dffe:	f1b9 0f00 	cmp.w	r9, #0
    e002:	d0e3      	beq.n	dfcc <z_shell_get_last_command+0x16>
    e004:	4580      	cmp	r8, r0
    e006:	d1e1      	bne.n	dfcc <z_shell_get_last_command+0x16>
			(*match_arg)--;
    e008:	6023      	str	r3, [r4, #0]
			return NULL;
    e00a:	4655      	mov	r5, sl
		}
	}

	return entry;
}
    e00c:	4628      	mov	r0, r5
    e00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e012 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    e012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e016:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
    e018:	f7ff fe8c 	bl	dd34 <z_shell_strlen>
    e01c:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
    e01e:	bb47      	cbnz	r7, e072 <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
    e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
    e024:	b14c      	cbz	r4, e03a <z_shell_spaces_trim+0x28>
						len - j + 1);
    e026:	b292      	uxth	r2, r2
    e028:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
    e02a:	1c58      	adds	r0, r3, #1
    e02c:	3201      	adds	r2, #1
    e02e:	4438      	add	r0, r7
    e030:	f001 f810 	bl	f054 <memmove>
					len -= shift;
    e034:	1b36      	subs	r6, r6, r4
    e036:	b2b6      	uxth	r6, r6
					shift = 0U;
    e038:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
    e03a:	1e73      	subs	r3, r6, #1
    e03c:	429d      	cmp	r5, r3
    e03e:	daef      	bge.n	e020 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    e040:	5d78      	ldrb	r0, [r7, r5]
    e042:	f7ff fe6d 	bl	dd20 <isspace>
    e046:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
    e048:	3501      	adds	r5, #1
    e04a:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
    e04c:	2800      	cmp	r0, #0
    e04e:	d0f4      	beq.n	e03a <z_shell_spaces_trim+0x28>
    e050:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
    e052:	b291      	uxth	r1, r2
    e054:	428e      	cmp	r6, r1
    e056:	d9f0      	bls.n	e03a <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    e058:	5cb8      	ldrb	r0, [r7, r2]
    e05a:	f7ff fe61 	bl	dd20 <isspace>
    e05e:	18b9      	adds	r1, r7, r2
    e060:	f102 0c01 	add.w	ip, r2, #1
    e064:	4680      	mov	r8, r0
    e066:	2800      	cmp	r0, #0
    e068:	d0dc      	beq.n	e024 <z_shell_spaces_trim+0x12>
					shift++;
    e06a:	3401      	adds	r4, #1
    e06c:	b2a4      	uxth	r4, r4
    e06e:	4662      	mov	r2, ip
    e070:	e7ef      	b.n	e052 <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
    e072:	2500      	movs	r5, #0
	uint16_t shift = 0U;
    e074:	462c      	mov	r4, r5
    e076:	e7e0      	b.n	e03a <z_shell_spaces_trim+0x28>

0000e078 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    e07a:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    e07c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    e080:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    e082:	b953      	cbnz	r3, e09a <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    e084:	68ab      	ldr	r3, [r5, #8]
    e086:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    e088:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    e08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    e08c:	3a01      	subs	r2, #1
    e08e:	b292      	uxth	r2, r2
    e090:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    e092:	b922      	cbnz	r2, e09e <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
    e094:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    e098:	e7f4      	b.n	e084 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    e09a:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    e09e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e0a0:	18b3      	adds	r3, r6, r2
    e0a2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    e0a6:	f7ff fe3b 	bl	dd20 <isspace>
    e0aa:	4603      	mov	r3, r0
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d1ed      	bne.n	e08c <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    e0b0:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
    e0b2:	b29f      	uxth	r7, r3
    e0b4:	fa16 f183 	uxtah	r1, r6, r3
    e0b8:	5df0      	ldrb	r0, [r6, r7]
    e0ba:	f7ff fe31 	bl	dd20 <isspace>
    e0be:	3301      	adds	r3, #1
    e0c0:	2800      	cmp	r0, #0
    e0c2:	d1f6      	bne.n	e0b2 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
    e0c4:	2f00      	cmp	r7, #0
    e0c6:	d0dd      	beq.n	e084 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    e0c8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    e0ca:	3301      	adds	r3, #1
    e0cc:	1bda      	subs	r2, r3, r7
    e0ce:	4630      	mov	r0, r6
    e0d0:	f000 ffc0 	bl	f054 <memmove>
		*buff_len = *buff_len - i;
    e0d4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    e0d6:	1bdb      	subs	r3, r3, r7
    e0d8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    e0da:	e7d3      	b.n	e084 <z_shell_cmd_trim+0xc>

0000e0dc <z_shell_raw_fprintf>:
{
    e0dc:	b40e      	push	{r1, r2, r3}
    e0de:	b503      	push	{r0, r1, lr}
    e0e0:	aa03      	add	r2, sp, #12
    e0e2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    e0e6:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    e0e8:	f7f6 fa06 	bl	44f8 <z_shell_fprintf_fmt>
}
    e0ec:	b002      	add	sp, #8
    e0ee:	f85d eb04 	ldr.w	lr, [sp], #4
    e0f2:	b003      	add	sp, #12
    e0f4:	4770      	bx	lr

0000e0f6 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    e0f6:	6882      	ldr	r2, [r0, #8]
{
    e0f8:	b538      	push	{r3, r4, r5, lr}
    e0fa:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    e0fc:	6810      	ldr	r0, [r2, #0]
    e0fe:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    e100:	b110      	cbz	r0, e108 <full_line_cmd+0x12>
    e102:	f000 ff69 	bl	efd8 <strlen>
    e106:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    e108:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    e10a:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    e10c:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    e10e:	fbb3 f2f0 	udiv	r2, r3, r0
    e112:	fb00 3012 	mls	r0, r0, r2, r3
}
    e116:	fab0 f080 	clz	r0, r0
    e11a:	0940      	lsrs	r0, r0, #5
    e11c:	bd38      	pop	{r3, r4, r5, pc}

0000e11e <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    e11e:	6882      	ldr	r2, [r0, #8]
{
    e120:	b538      	push	{r3, r4, r5, lr}
    e122:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    e124:	6810      	ldr	r0, [r2, #0]
    e126:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    e128:	b110      	cbz	r0, e130 <z_shell_cursor_in_empty_line+0x12>
    e12a:	f000 ff55 	bl	efd8 <strlen>
    e12e:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    e130:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    e132:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    e134:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    e136:	fbb3 f2f0 	udiv	r2, r3, r0
    e13a:	fb00 3012 	mls	r0, r0, r2, r3
}
    e13e:	fab0 f080 	clz	r0, r0
    e142:	0940      	lsrs	r0, r0, #5
    e144:	bd38      	pop	{r3, r4, r5, pc}

0000e146 <z_shell_op_cond_next_line>:
{
    e146:	b510      	push	{r4, lr}
    e148:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    e14a:	f7ff ffe8 	bl	e11e <z_shell_cursor_in_empty_line>
    e14e:	b120      	cbz	r0, e15a <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
    e150:	6960      	ldr	r0, [r4, #20]
}
    e152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
    e156:	f7f6 ba15 	b.w	4584 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    e15a:	4620      	mov	r0, r4
    e15c:	f7ff ffcb 	bl	e0f6 <full_line_cmd>
    e160:	2800      	cmp	r0, #0
    e162:	d1f5      	bne.n	e150 <z_shell_op_cond_next_line+0xa>
}
    e164:	bd10      	pop	{r4, pc}

0000e166 <z_shell_op_cursor_position_synchronize>:
{
    e166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    e168:	6884      	ldr	r4, [r0, #8]
{
    e16a:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    e16c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e16e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    e170:	f104 0020 	add.w	r0, r4, #32
    e174:	f7ff fdfe 	bl	dd74 <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
    e178:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    e17a:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    e17c:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    e17e:	f7ff ffba 	bl	e0f6 <full_line_cmd>
    e182:	b110      	cbz	r0, e18a <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
    e184:	6968      	ldr	r0, [r5, #20]
    e186:	f7f6 f9fd 	bl	4584 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    e18a:	42b7      	cmp	r7, r6
    e18c:	d107      	bne.n	e19e <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    e18e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    e190:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    e192:	4628      	mov	r0, r5
    e194:	1ac9      	subs	r1, r1, r3
}
    e196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    e19a:	f7f6 ba0f 	b.w	45bc <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    e19e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    e1a0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e1a2:	4628      	mov	r0, r5
    e1a4:	1ac9      	subs	r1, r1, r3
    e1a6:	f7f6 f9f3 	bl	4590 <z_shell_op_cursor_vert_move>
    e1aa:	e7f0      	b.n	e18e <z_shell_op_cursor_position_synchronize+0x28>

0000e1ac <z_shell_op_cursor_move>:
{
    e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1ae:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    e1b0:	6880      	ldr	r0, [r0, #8]
{
    e1b2:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    e1b4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    e1b6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    e1b8:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    e1ba:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    e1bc:	f7ff fdda 	bl	dd74 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    e1c0:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    e1c2:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    e1c4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e1c6:	462a      	mov	r2, r5
    e1c8:	3020      	adds	r0, #32
    e1ca:	f7ff fdc8 	bl	dd5e <z_row_span_with_buffer_offsets_get>
    e1ce:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    e1d0:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    e1d2:	462a      	mov	r2, r5
    e1d4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e1d6:	3020      	adds	r0, #32
    e1d8:	f7ff fdb2 	bl	dd40 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    e1dc:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    e1de:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    e1e0:	4620      	mov	r0, r4
    e1e2:	f7f6 f9d5 	bl	4590 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    e1e6:	4631      	mov	r1, r6
    e1e8:	4620      	mov	r0, r4
    e1ea:	f7f6 f9e7 	bl	45bc <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    e1ee:	68a3      	ldr	r3, [r4, #8]
    e1f0:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    e1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e1f4 <z_shell_op_cursor_word_move>:
{
    e1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    e1f8:	1e0c      	subs	r4, r1, #0
{
    e1fa:	4606      	mov	r6, r0
	if (val < 0) {
    e1fc:	da34      	bge.n	e268 <z_shell_op_cursor_word_move+0x74>
		val = -val;
    e1fe:	4264      	negs	r4, r4
    e200:	b224      	sxth	r4, r4
		sign = -1;
    e202:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e206:	b2a4      	uxth	r4, r4
    e208:	b2af      	uxth	r7, r5
    e20a:	e025      	b.n	e258 <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
    e20c:	68b3      	ldr	r3, [r6, #8]
    e20e:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
    e212:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
    e216:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
    e21a:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    e21c:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    e21e:	eba3 010e 	sub.w	r1, r3, lr
    e222:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    e224:	b90b      	cbnz	r3, e22a <z_shell_op_cursor_word_move+0x36>
    e226:	1c6a      	adds	r2, r5, #1
    e228:	d010      	beq.n	e24c <z_shell_op_cursor_word_move+0x58>
    e22a:	4599      	cmp	r9, r3
    e22c:	d101      	bne.n	e232 <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
    e22e:	2d01      	cmp	r5, #1
    e230:	d00c      	beq.n	e24c <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
    e232:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    e236:	f042 0c20 	orr.w	ip, r2, #32
    e23a:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    e23e:	f1bc 0f19 	cmp.w	ip, #25
    e242:	d90d      	bls.n	e260 <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e244:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    e246:	2a09      	cmp	r2, #9
    e248:	d90a      	bls.n	e260 <z_shell_op_cursor_word_move+0x6c>
			if (found) {
    e24a:	b150      	cbz	r0, e262 <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
    e24c:	b209      	sxth	r1, r1
    e24e:	4630      	mov	r0, r6
    e250:	f7ff ffac 	bl	e1ac <z_shell_op_cursor_move>
    e254:	3c01      	subs	r4, #1
    e256:	b2a4      	uxth	r4, r4
	while (val--) {
    e258:	2c00      	cmp	r4, #0
    e25a:	d1d7      	bne.n	e20c <z_shell_op_cursor_word_move+0x18>
}
    e25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    e260:	2001      	movs	r0, #1
	while (1) {
    e262:	443b      	add	r3, r7
    e264:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    e266:	e7da      	b.n	e21e <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
    e268:	2501      	movs	r5, #1
    e26a:	e7cc      	b.n	e206 <z_shell_op_cursor_word_move+0x12>

0000e26c <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    e26c:	6883      	ldr	r3, [r0, #8]
    e26e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    e270:	4249      	negs	r1, r1
    e272:	b209      	sxth	r1, r1
    e274:	f7ff bf9a 	b.w	e1ac <z_shell_op_cursor_move>

0000e278 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    e278:	6883      	ldr	r3, [r0, #8]
    e27a:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    e27c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e27e:	1ac9      	subs	r1, r1, r3
    e280:	b209      	sxth	r1, r1
    e282:	f7ff bf93 	b.w	e1ac <z_shell_op_cursor_move>

0000e286 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    e286:	6883      	ldr	r3, [r0, #8]
    e288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e28a:	b11b      	cbz	r3, e294 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    e28c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e290:	f7ff bf8c 	b.w	e1ac <z_shell_op_cursor_move>
}
    e294:	4770      	bx	lr

0000e296 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    e296:	6883      	ldr	r3, [r0, #8]
    e298:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    e29a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    e29c:	429a      	cmp	r2, r3
    e29e:	d202      	bcs.n	e2a6 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    e2a0:	2101      	movs	r1, #1
    e2a2:	f7ff bf83 	b.w	e1ac <z_shell_op_cursor_move>
}
    e2a6:	4770      	bx	lr

0000e2a8 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    e2a8:	6883      	ldr	r3, [r0, #8]
    e2aa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    e2ac:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    e2ae:	4413      	add	r3, r2
    e2b0:	2200      	movs	r2, #0
    e2b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    e2b6:	f7f6 b959 	b.w	456c <z_clear_eos>

0000e2ba <z_shell_cmd_line_erase>:
{
    e2ba:	b510      	push	{r4, lr}
    e2bc:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    e2be:	6880      	ldr	r0, [r0, #8]
    e2c0:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    e2c2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e2c4:	3020      	adds	r0, #32
    e2c6:	f7ff fd55 	bl	dd74 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    e2ca:	68a3      	ldr	r3, [r4, #8]
    e2cc:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    e2ce:	4620      	mov	r0, r4
    e2d0:	f1c1 0101 	rsb	r1, r1, #1
    e2d4:	f7f6 f972 	bl	45bc <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    e2d8:	68a3      	ldr	r3, [r4, #8]
    e2da:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    e2dc:	4620      	mov	r0, r4
    e2de:	3901      	subs	r1, #1
    e2e0:	f7f6 f956 	bl	4590 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    e2e4:	4620      	mov	r0, r4
}
    e2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    e2ea:	f7f6 b93f 	b.w	456c <z_clear_eos>

0000e2ee <z_shell_write>:
{
    e2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2f2:	4605      	mov	r5, r0
    e2f4:	b086      	sub	sp, #24
    e2f6:	460f      	mov	r7, r1
    e2f8:	4614      	mov	r4, r2
	size_t offset = 0;
    e2fa:	2600      	movs	r6, #0
	while (length) {
    e2fc:	b914      	cbnz	r4, e304 <z_shell_write+0x16>
}
    e2fe:	b006      	add	sp, #24
    e300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    e304:	6868      	ldr	r0, [r5, #4]
    e306:	6803      	ldr	r3, [r0, #0]
    e308:	4622      	mov	r2, r4
    e30a:	f8d3 800c 	ldr.w	r8, [r3, #12]
    e30e:	19b9      	adds	r1, r7, r6
    e310:	466b      	mov	r3, sp
    e312:	47c0      	blx	r8
		offset += tmp_cnt;
    e314:	9a00      	ldr	r2, [sp, #0]
    e316:	4416      	add	r6, r2
		length -= tmp_cnt;
    e318:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    e31a:	2a00      	cmp	r2, #0
    e31c:	d1ee      	bne.n	e2fc <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    e31e:	68ab      	ldr	r3, [r5, #8]
    e320:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    e322:	2903      	cmp	r1, #3
    e324:	d0ea      	beq.n	e2fc <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    e326:	2902      	cmp	r1, #2
    e328:	d813      	bhi.n	e352 <z_shell_write+0x64>
		k_poll_event_init(&event,
    e32a:	f503 7326 	add.w	r3, r3, #664	; 0x298
    e32e:	2101      	movs	r1, #1
    e330:	a801      	add	r0, sp, #4
    e332:	f001 ff76 	bl	10222 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    e336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e33e:	2101      	movs	r1, #1
    e340:	a801      	add	r0, sp, #4
    e342:	f7fe f9d5 	bl	c6f0 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    e346:	68a8      	ldr	r0, [r5, #8]
    e348:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    e34c:	f001 ff8b 	bl	10266 <z_impl_k_poll_signal_reset>
    e350:	e7d4      	b.n	e2fc <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
    e352:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
    e356:	0792      	lsls	r2, r2, #30
    e358:	d5fb      	bpl.n	e352 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e35a:	f3bf 8f5b 	dmb	ish
    e35e:	f503 7319 	add.w	r3, r3, #612	; 0x264
    e362:	e853 2f00 	ldrex	r2, [r3]
    e366:	f022 0202 	bic.w	r2, r2, #2
    e36a:	e843 2100 	strex	r1, r2, [r3]
    e36e:	2900      	cmp	r1, #0
    e370:	d1f7      	bne.n	e362 <z_shell_write+0x74>
    e372:	f3bf 8f5b 	dmb	ish
	return ret;
    e376:	e7c1      	b.n	e2fc <z_shell_write+0xe>

0000e378 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    e378:	f7ff bfb9 	b.w	e2ee <z_shell_write>

0000e37c <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    e37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e37e:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
    e380:	6881      	ldr	r1, [r0, #8]
    e382:	461e      	mov	r6, r3
    e384:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    e388:	06db      	lsls	r3, r3, #27
{
    e38a:	4604      	mov	r4, r0
    e38c:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    e38e:	d517      	bpl.n	e3c0 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
    e390:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    e394:	42bb      	cmp	r3, r7
    e396:	d013      	beq.n	e3c0 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    e398:	2202      	movs	r2, #2
    e39a:	312e      	adds	r1, #46	; 0x2e
    e39c:	a801      	add	r0, sp, #4
    e39e:	f000 fe71 	bl	f084 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    e3a2:	4639      	mov	r1, r7
    e3a4:	4620      	mov	r0, r4
    e3a6:	f7f6 f927 	bl	45f8 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    e3aa:	6960      	ldr	r0, [r4, #20]
    e3ac:	4632      	mov	r2, r6
    e3ae:	4629      	mov	r1, r5
    e3b0:	f7f6 f8a2 	bl	44f8 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    e3b4:	a901      	add	r1, sp, #4
    e3b6:	4620      	mov	r0, r4
    e3b8:	f7f6 f93e 	bl	4638 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    e3bc:	b003      	add	sp, #12
    e3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    e3c0:	6960      	ldr	r0, [r4, #20]
    e3c2:	4632      	mov	r2, r6
    e3c4:	4629      	mov	r1, r5
}
    e3c6:	b003      	add	sp, #12
    e3c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    e3cc:	f7f6 b894 	b.w	44f8 <z_shell_fprintf_fmt>

0000e3d0 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    e3d0:	b40c      	push	{r2, r3}
    e3d2:	b507      	push	{r0, r1, r2, lr}
    e3d4:	ab04      	add	r3, sp, #16
    e3d6:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    e3da:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    e3dc:	f7ff ffce 	bl	e37c <z_shell_vfprintf>
	va_end(args);
}
    e3e0:	b003      	add	sp, #12
    e3e2:	f85d eb04 	ldr.w	lr, [sp], #4
    e3e6:	b002      	add	sp, #8
    e3e8:	4770      	bx	lr

0000e3ea <data_insert>:
{
    e3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    e3ee:	6886      	ldr	r6, [r0, #8]
    e3f0:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    e3f2:	18ab      	adds	r3, r5, r2
    e3f4:	2bff      	cmp	r3, #255	; 0xff
{
    e3f6:	4607      	mov	r7, r0
    e3f8:	4688      	mov	r8, r1
    e3fa:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    e3fc:	dc1e      	bgt.n	e43c <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    e3fe:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
    e400:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    e402:	3342      	adds	r3, #66	; 0x42
    e404:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    e406:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
    e408:	462a      	mov	r2, r5
    e40a:	4631      	mov	r1, r6
    e40c:	1930      	adds	r0, r6, r4
    e40e:	f000 fe21 	bl	f054 <memmove>
	memcpy(curr_pos, data, len);
    e412:	4622      	mov	r2, r4
    e414:	4641      	mov	r1, r8
    e416:	4630      	mov	r0, r6
    e418:	f000 fe34 	bl	f084 <memcpy>
	shell->ctx->cmd_buff_len += len;
    e41c:	68b9      	ldr	r1, [r7, #8]
    e41e:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
    e420:	4423      	add	r3, r4
    e422:	b29b      	uxth	r3, r3
    e424:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    e426:	440b      	add	r3, r1
    e428:	2200      	movs	r2, #0
    e42a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    e42e:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    e432:	079b      	lsls	r3, r3, #30
    e434:	d404      	bmi.n	e440 <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
    e436:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
    e438:	4414      	add	r4, r2
    e43a:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
    e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    e440:	4629      	mov	r1, r5
    e442:	4638      	mov	r0, r7
}
    e444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    e448:	f7f6 b970 	b.w	472c <reprint_from_cursor>

0000e44c <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    e44c:	f7ff bfcd 	b.w	e3ea <data_insert>

0000e450 <z_shell_op_char_delete>:
{
    e450:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    e452:	6883      	ldr	r3, [r0, #8]
{
    e454:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    e456:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
    e458:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    e45a:	1a24      	subs	r4, r4, r0
    e45c:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    e45e:	b18c      	cbz	r4, e484 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    e460:	3042      	adds	r0, #66	; 0x42
    e462:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    e464:	4622      	mov	r2, r4
    e466:	1c41      	adds	r1, r0, #1
    e468:	f000 fdf4 	bl	f054 <memmove>
	--shell->ctx->cmd_buff_len;
    e46c:	68aa      	ldr	r2, [r5, #8]
    e46e:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    e470:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    e472:	3b01      	subs	r3, #1
    e474:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    e476:	4628      	mov	r0, r5
    e478:	2201      	movs	r2, #1
}
    e47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    e47e:	b289      	uxth	r1, r1
    e480:	f7f6 b954 	b.w	472c <reprint_from_cursor>
}
    e484:	bd38      	pop	{r3, r4, r5, pc}

0000e486 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    e486:	6883      	ldr	r3, [r0, #8]
    e488:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    e48a:	b510      	push	{r4, lr}
    e48c:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    e48e:	b152      	cbz	r2, e4a6 <z_shell_op_char_backspace+0x20>
    e490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e492:	b143      	cbz	r3, e4a6 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    e494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e498:	f7ff fe88 	bl	e1ac <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    e49c:	4620      	mov	r0, r4
}
    e49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    e4a2:	f7ff bfd5 	b.w	e450 <z_shell_op_char_delete>
}
    e4a6:	bd10      	pop	{r4, pc}

0000e4a8 <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
    e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
    e4aa:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    e4ac:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
    e4ae:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
    e4b0:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
    e4b2:	4630      	mov	r0, r6
    e4b4:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
    e4b8:	f7fe ffcc 	bl	d454 <mpsc_pbuf_claim>
    e4bc:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
    e4c0:	4604      	mov	r4, r0
    e4c2:	b160      	cbz	r0, e4de <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    e4c4:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
    e4c6:	4601      	mov	r1, r0
    e4c8:	bf0c      	ite	eq
    e4ca:	220e      	moveq	r2, #14
    e4cc:	220f      	movne	r2, #15
    e4ce:	4638      	mov	r0, r7
    e4d0:	f7f4 fa78 	bl	29c4 <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
    e4d4:	4630      	mov	r0, r6
    e4d6:	4621      	mov	r1, r4
    e4d8:	f7ff f808 	bl	d4ec <mpsc_pbuf_free>

	return true;
    e4dc:	2001      	movs	r0, #1
}
    e4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e4e0 <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    e4e0:	6843      	ldr	r3, [r0, #4]
{
    e4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    e4e6:	681e      	ldr	r6, [r3, #0]
    e4e8:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
    e4ea:	69f3      	ldr	r3, [r6, #28]
    e4ec:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
    e4f0:	68da      	ldr	r2, [r3, #12]
    e4f2:	7912      	ldrb	r2, [r2, #4]
    e4f4:	2a01      	cmp	r2, #1
{
    e4f6:	460d      	mov	r5, r1
    e4f8:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
    e4fc:	d003      	beq.n	e506 <log2_process+0x26>
    e4fe:	2a03      	cmp	r2, #3
    e500:	d042      	beq.n	e588 <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
    e502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    e506:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
    e508:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
    e50a:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
    e50c:	0759      	lsls	r1, r3, #29
    e50e:	d439      	bmi.n	e584 <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e510:	682b      	ldr	r3, [r5, #0]
    e512:	f3c3 2449 	ubfx	r4, r3, #9, #10
    e516:	886b      	ldrh	r3, [r5, #2]
    e518:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    e51c:	441c      	add	r4, r3
    e51e:	3413      	adds	r4, #19
    e520:	f024 0407 	bic.w	r4, r4, #7
    e524:	08a4      	lsrs	r4, r4, #2
    e526:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    e52a:	f240 3ce7 	movw	ip, #999	; 0x3e7
    e52e:	2100      	movs	r1, #0
    e530:	fbe0 c10e 	umlal	ip, r1, r0, lr
    e534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e538:	2300      	movs	r3, #0
    e53a:	4660      	mov	r0, ip
    e53c:	f7f2 fde0 	bl	1100 <__aeabi_uldivmod>
    e540:	4602      	mov	r2, r0
    e542:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
    e544:	4638      	mov	r0, r7
    e546:	4621      	mov	r1, r4
    e548:	f7fe fef1 	bl	d32e <mpsc_pbuf_alloc>
	if (!dst) {
    e54c:	4680      	mov	r8, r0
    e54e:	b188      	cbz	r0, e574 <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
    e550:	4629      	mov	r1, r5
    e552:	6802      	ldr	r2, [r0, #0]
    e554:	f851 3b04 	ldr.w	r3, [r1], #4
    e558:	f3c3 039d 	ubfx	r3, r3, #2, #30
    e55c:	f363 029f 	bfi	r2, r3, #2, #30
    e560:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
    e564:	1e62      	subs	r2, r4, #1
    e566:	0092      	lsls	r2, r2, #2
    e568:	f000 fd8c 	bl	f084 <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
    e56c:	4641      	mov	r1, r8
    e56e:	4638      	mov	r0, r7
    e570:	f7fe ff53 	bl	d41a <mpsc_pbuf_commit>
				signal =
    e574:	68b0      	ldr	r0, [r6, #8]
    e576:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
    e57a:	2100      	movs	r1, #0
}
    e57c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e580:	f7fe b912 	b.w	c7a8 <z_impl_k_poll_signal_raise>
	return 0;
    e584:	2400      	movs	r4, #0
    e586:	e7ce      	b.n	e526 <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
    e588:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
    e58a:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
    e58c:	f7ff fe95 	bl	e2ba <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    e590:	2c00      	cmp	r4, #0
    e592:	bf0c      	ite	eq
    e594:	f04f 080e 	moveq.w	r8, #14
    e598:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
    e59c:	f04f 0320 	mov.w	r3, #32
    e5a0:	f3ef 8411 	mrs	r4, BASEPRI
    e5a4:	f383 8812 	msr	BASEPRI_MAX, r3
    e5a8:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    e5ac:	68b3      	ldr	r3, [r6, #8]
    e5ae:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    e5b2:	051a      	lsls	r2, r3, #20
    e5b4:	d402      	bmi.n	e5bc <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
    e5b6:	4630      	mov	r0, r6
    e5b8:	f7ff fe7f 	bl	e2ba <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
    e5bc:	4642      	mov	r2, r8
    e5be:	4629      	mov	r1, r5
    e5c0:	4638      	mov	r0, r7
    e5c2:	f7f4 f9ff 	bl	29c4 <log_output_msg2_process>
    e5c6:	68b3      	ldr	r3, [r6, #8]
    e5c8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    e5cc:	051b      	lsls	r3, r3, #20
    e5ce:	d402      	bmi.n	e5d6 <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
    e5d0:	4630      	mov	r0, r6
    e5d2:	f7f6 f91b 	bl	480c <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
    e5d6:	f384 8811 	msr	BASEPRI, r4
    e5da:	f3bf 8f6f 	isb	sy
}
    e5de:	e790      	b.n	e502 <log2_process+0x22>

0000e5e0 <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    e5e0:	6843      	ldr	r3, [r0, #4]
    e5e2:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e5e4:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
    e5e8:	f3bf 8f5b 	dmb	ish
    e5ec:	e853 0f00 	ldrex	r0, [r3]
    e5f0:	4408      	add	r0, r1
    e5f2:	e843 0c00 	strex	ip, r0, [r3]
    e5f6:	f1bc 0f00 	cmp.w	ip, #0
    e5fa:	d1f7      	bne.n	e5ec <dropped+0xc>
    e5fc:	f3bf 8f5b 	dmb	ish
    e600:	68d3      	ldr	r3, [r2, #12]
    e602:	f3bf 8f5b 	dmb	ish
    e606:	e853 2f00 	ldrex	r2, [r3]
    e60a:	440a      	add	r2, r1
    e60c:	e843 2000 	strex	r0, r2, [r3]
    e610:	2800      	cmp	r0, #0
    e612:	d1f8      	bne.n	e606 <dropped+0x26>
    e614:	f3bf 8f5b 	dmb	ish
}
    e618:	4770      	bx	lr

0000e61a <z_shell_log_backend_output_func>:
{
    e61a:	b510      	push	{r4, lr}
    e61c:	4613      	mov	r3, r2
    e61e:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
    e620:	460a      	mov	r2, r1
    e622:	4601      	mov	r1, r0
    e624:	4618      	mov	r0, r3
    e626:	f7ff fea7 	bl	e378 <z_shell_print_stream>
}
    e62a:	4620      	mov	r0, r4
    e62c:	bd10      	pop	{r4, pc}

0000e62e <z_shell_log_backend_enable>:
{
    e62e:	b570      	push	{r4, r5, r6, lr}
    e630:	4604      	mov	r4, r0
    e632:	460d      	mov	r5, r1
    e634:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
    e636:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
    e63a:	f7fe fe59 	bl	d2f0 <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
    e63e:	4632      	mov	r2, r6
    e640:	6820      	ldr	r0, [r4, #0]
    e642:	4629      	mov	r1, r5
    e644:	f7f4 f83e 	bl	26c4 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
    e648:	68a3      	ldr	r3, [r4, #8]
    e64a:	685b      	ldr	r3, [r3, #4]
    e64c:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
    e64e:	68e3      	ldr	r3, [r4, #12]
    e650:	2200      	movs	r2, #0
    e652:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    e654:	2201      	movs	r2, #1
    e656:	711a      	strb	r2, [r3, #4]
}
    e658:	bd70      	pop	{r4, r5, r6, pc}

0000e65a <z_shell_log_backend_disable>:
{
    e65a:	b510      	push	{r4, lr}
    e65c:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
    e65e:	6800      	ldr	r0, [r0, #0]
    e660:	f7ff f8e3 	bl	d82a <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    e664:	68e3      	ldr	r3, [r4, #12]
    e666:	2202      	movs	r2, #2
    e668:	711a      	strb	r2, [r3, #4]
}
    e66a:	bd10      	pop	{r4, pc}

0000e66c <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    e66c:	6843      	ldr	r3, [r0, #4]
{
    e66e:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    e670:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
    e672:	6860      	ldr	r0, [r4, #4]
    e674:	6803      	ldr	r3, [r0, #0]
    e676:	2101      	movs	r1, #1
    e678:	689b      	ldr	r3, [r3, #8]
    e67a:	4798      	blx	r3
	if (err == 0) {
    e67c:	bb48      	cbnz	r0, e6d2 <panic+0x66>
		shell->log_backend->control_block->state =
    e67e:	69e3      	ldr	r3, [r4, #28]
    e680:	68db      	ldr	r3, [r3, #12]
    e682:	2203      	movs	r2, #3
    e684:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e686:	68a3      	ldr	r3, [r4, #8]
    e688:	f3bf 8f5b 	dmb	ish
    e68c:	f503 7319 	add.w	r3, r3, #612	; 0x264
    e690:	e853 2f00 	ldrex	r2, [r3]
    e694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e698:	e843 2100 	strex	r1, r2, [r3]
    e69c:	2900      	cmp	r1, #0
    e69e:	d1f7      	bne.n	e690 <panic+0x24>
    e6a0:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    e6a4:	68a0      	ldr	r0, [r4, #8]
    e6a6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    e6a8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e6aa:	3020      	adds	r0, #32
    e6ac:	f7ff fb62 	bl	dd74 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
    e6b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e6b4:	4620      	mov	r0, r4
    e6b6:	f7f5 ff6b 	bl	4590 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
    e6ba:	68a3      	ldr	r3, [r4, #8]
    e6bc:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
    e6be:	4620      	mov	r0, r4
    e6c0:	4249      	negs	r1, r1
    e6c2:	f7f5 ff7b 	bl	45bc <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
    e6c6:	4620      	mov	r0, r4
    e6c8:	f7ff feee 	bl	e4a8 <process_msg2_from_buffer>
    e6cc:	2800      	cmp	r0, #0
    e6ce:	d1fa      	bne.n	e6c6 <panic+0x5a>
}
    e6d0:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
    e6d2:	69e0      	ldr	r0, [r4, #28]
}
    e6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
    e6d8:	f7ff bfbf 	b.w	e65a <z_shell_log_backend_disable>

0000e6dc <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
    e6dc:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
    e6de:	685b      	ldr	r3, [r3, #4]
{
    e6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
    e6e2:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
    e6e4:	68a3      	ldr	r3, [r4, #8]
    e6e6:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e6ea:	68c3      	ldr	r3, [r0, #12]
    e6ec:	f3bf 8f5b 	dmb	ish
{
    e6f0:	4605      	mov	r5, r0
    e6f2:	f3c6 1600 	ubfx	r6, r6, #4, #1
    e6f6:	2200      	movs	r2, #0
    e6f8:	e853 7f00 	ldrex	r7, [r3]
    e6fc:	e843 2100 	strex	r1, r2, [r3]
    e700:	2900      	cmp	r1, #0
    e702:	d1f9      	bne.n	e6f8 <z_shell_log_backend_process+0x1c>
    e704:	f3bf 8f5b 	dmb	ish
	if (dropped) {
    e708:	b19f      	cbz	r7, e732 <z_shell_log_backend_process+0x56>
		if (colors) {
    e70a:	b14e      	cbz	r6, e720 <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    e70c:	68a1      	ldr	r1, [r4, #8]
    e70e:	2202      	movs	r2, #2
    e710:	312e      	adds	r1, #46	; 0x2e
    e712:	a801      	add	r0, sp, #4
    e714:	f000 fcb6 	bl	f084 <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
    e718:	2101      	movs	r1, #1
    e71a:	4620      	mov	r0, r4
    e71c:	f7f5 ff6c 	bl	45f8 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
    e720:	68a8      	ldr	r0, [r5, #8]
    e722:	4639      	mov	r1, r7
    e724:	f7f4 f9b2 	bl	2a8c <log_output_dropped_process>
		if (colors) {
    e728:	b11e      	cbz	r6, e732 <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
    e72a:	a901      	add	r1, sp, #4
    e72c:	4620      	mov	r0, r4
    e72e:	f7f5 ff83 	bl	4638 <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
    e732:	4620      	mov	r0, r4
}
    e734:	b003      	add	sp, #12
    e736:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
    e73a:	f7ff beb5 	b.w	e4a8 <process_msg2_from_buffer>

0000e73e <z_shell_raw_fprintf>:
{
    e73e:	b40e      	push	{r1, r2, r3}
    e740:	b503      	push	{r0, r1, lr}
    e742:	aa03      	add	r2, sp, #12
    e744:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    e748:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    e74a:	f7f5 fed5 	bl	44f8 <z_shell_fprintf_fmt>
}
    e74e:	b002      	add	sp, #8
    e750:	f85d eb04 	ldr.w	lr, [sp], #4
    e754:	b003      	add	sp, #12
    e756:	4770      	bx	lr

0000e758 <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
    e758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e75c:	4604      	mov	r4, r0
    e75e:	4690      	mov	r8, r2
	if (str == NULL) {
    e760:	460e      	mov	r6, r1
    e762:	2900      	cmp	r1, #0
    e764:	d069      	beq.n	e83a <formatted_text_print.constprop.0+0xe2>
    e766:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
    e768:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    e76a:	2b20      	cmp	r3, #32
    e76c:	d023      	beq.n	e7b6 <formatted_text_print.constprop.0+0x5e>
    e76e:	3b09      	subs	r3, #9
    e770:	2b04      	cmp	r3, #4
    e772:	d920      	bls.n	e7b6 <formatted_text_print.constprop.0+0x5e>
    e774:	4630      	mov	r0, r6
    e776:	f000 fc2f 	bl	efd8 <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    e77a:	68a3      	ldr	r3, [r4, #8]
    e77c:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    e77e:	b280      	uxth	r0, r0
    e780:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    e782:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    e786:	4298      	cmp	r0, r3
    e788:	eb06 0905 	add.w	r9, r6, r5
    e78c:	d915      	bls.n	e7ba <formatted_text_print.constprop.0+0x62>
    e78e:	4648      	mov	r0, r9
		size_t idx = 0;
    e790:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
    e792:	f810 2b01 	ldrb.w	r2, [r0], #1
    e796:	2a20      	cmp	r2, #32
    e798:	d006      	beq.n	e7a8 <formatted_text_print.constprop.0+0x50>
    e79a:	f1a2 0c09 	sub.w	ip, r2, #9
    e79e:	f1bc 0f04 	cmp.w	ip, #4
    e7a2:	d802      	bhi.n	e7aa <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
    e7a4:	2a0a      	cmp	r2, #10
    e7a6:	d02f      	beq.n	e808 <formatted_text_print.constprop.0+0xb0>
    e7a8:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
    e7aa:	eb08 0207 	add.w	r2, r8, r7
    e7ae:	4291      	cmp	r1, r2
    e7b0:	d929      	bls.n	e806 <formatted_text_print.constprop.0+0xae>
			++idx;
    e7b2:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    e7b4:	e7ed      	b.n	e792 <formatted_text_print.constprop.0+0x3a>
		++offset;
    e7b6:	3501      	adds	r5, #1
    e7b8:	e7d6      	b.n	e768 <formatted_text_print.constprop.0+0x10>
    e7ba:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
    e7bc:	2700      	movs	r7, #0
    e7be:	42b8      	cmp	r0, r7
    e7c0:	d016      	beq.n	e7f0 <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
    e7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
    e7c6:	2a0a      	cmp	r2, #10
    e7c8:	eb05 0a07 	add.w	sl, r5, r7
    e7cc:	d119      	bne.n	e802 <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    e7ce:	6960      	ldr	r0, [r4, #20]
    e7d0:	f7ff fa7e 	bl	dcd0 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    e7d4:	4649      	mov	r1, r9
    e7d6:	463a      	mov	r2, r7
    e7d8:	4620      	mov	r0, r4
    e7da:	f7ff fd88 	bl	e2ee <z_shell_write>
					z_cursor_next_line_move(shell);
    e7de:	6960      	ldr	r0, [r4, #20]
    e7e0:	f7f6 f82c 	bl	483c <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
    e7e4:	4641      	mov	r1, r8
    e7e6:	4620      	mov	r0, r4
					offset += idx + 1;
    e7e8:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
    e7ec:	f7f5 fee6 	bl	45bc <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    e7f0:	6960      	ldr	r0, [r4, #20]
    e7f2:	1971      	adds	r1, r6, r5
    e7f4:	f7ff ffa3 	bl	e73e <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
    e7f8:	6960      	ldr	r0, [r4, #20]
}
    e7fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
    e7fe:	f7f6 b81d 	b.w	483c <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    e802:	3701      	adds	r7, #1
    e804:	e7db      	b.n	e7be <formatted_text_print.constprop.0+0x66>
    e806:	461f      	mov	r7, r3
    e808:	6960      	ldr	r0, [r4, #20]
    e80a:	f7ff fa61 	bl	dcd0 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    e80e:	463a      	mov	r2, r7
    e810:	4649      	mov	r1, r9
    e812:	4620      	mov	r0, r4
    e814:	f7ff fd6b 	bl	e2ee <z_shell_write>
		offset += length;
    e818:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    e81a:	5d73      	ldrb	r3, [r6, r5]
    e81c:	2b20      	cmp	r3, #32
    e81e:	d00a      	beq.n	e836 <formatted_text_print.constprop.0+0xde>
    e820:	3b09      	subs	r3, #9
    e822:	2b04      	cmp	r3, #4
    e824:	d907      	bls.n	e836 <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
    e826:	6960      	ldr	r0, [r4, #20]
    e828:	f7f6 f808 	bl	483c <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    e82c:	4641      	mov	r1, r8
    e82e:	4620      	mov	r0, r4
    e830:	f7f5 fec4 	bl	45bc <z_shell_op_cursor_horiz_move>
	while (true) {
    e834:	e79e      	b.n	e774 <formatted_text_print.constprop.0+0x1c>
			++offset;
    e836:	3501      	adds	r5, #1
    e838:	e7ef      	b.n	e81a <formatted_text_print.constprop.0+0xc2>
}
    e83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e83e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    e83e:	6983      	ldr	r3, [r0, #24]
    e840:	2000      	movs	r0, #0
    e842:	6018      	str	r0, [r3, #0]
}
    e844:	4770      	bx	lr

0000e846 <z_shell_raw_fprintf>:
{
    e846:	b40e      	push	{r1, r2, r3}
    e848:	b503      	push	{r0, r1, lr}
    e84a:	aa03      	add	r2, sp, #12
    e84c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    e850:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    e852:	f7f5 fe51 	bl	44f8 <z_shell_fprintf_fmt>
}
    e856:	b002      	add	sp, #8
    e858:	f85d eb04 	ldr.w	lr, [sp], #4
    e85c:	b003      	add	sp, #12
    e85e:	4770      	bx	lr

0000e860 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e860:	6883      	ldr	r3, [r0, #8]
    e862:	f3bf 8f5b 	dmb	ish
    e866:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e86a:	e853 2f00 	ldrex	r2, [r3]
    e86e:	f022 0208 	bic.w	r2, r2, #8
    e872:	e843 2100 	strex	r1, r2, [r3]
    e876:	2900      	cmp	r1, #0
    e878:	d1f7      	bne.n	e86a <cmd_bacskpace_mode_backspace+0xa>
    e87a:	f3bf 8f5b 	dmb	ish
}
    e87e:	2000      	movs	r0, #0
    e880:	4770      	bx	lr

0000e882 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e882:	6883      	ldr	r3, [r0, #8]
    e884:	f3bf 8f5b 	dmb	ish
    e888:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e88c:	e853 2f00 	ldrex	r2, [r3]
    e890:	f042 0208 	orr.w	r2, r2, #8
    e894:	e843 2100 	strex	r1, r2, [r3]
    e898:	2900      	cmp	r1, #0
    e89a:	d1f7      	bne.n	e88c <cmd_bacskpace_mode_delete+0xa>
    e89c:	f3bf 8f5b 	dmb	ish
}
    e8a0:	2000      	movs	r0, #0
    e8a2:	4770      	bx	lr

0000e8a4 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e8a4:	6883      	ldr	r3, [r0, #8]
    e8a6:	f3bf 8f5b 	dmb	ish
    e8aa:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e8ae:	e853 2f00 	ldrex	r2, [r3]
    e8b2:	f022 0202 	bic.w	r2, r2, #2
    e8b6:	e843 2100 	strex	r1, r2, [r3]
    e8ba:	2900      	cmp	r1, #0
    e8bc:	d1f7      	bne.n	e8ae <cmd_echo_off+0xa>
    e8be:	f3bf 8f5b 	dmb	ish
}
    e8c2:	2000      	movs	r0, #0
    e8c4:	4770      	bx	lr

0000e8c6 <cmd_colors_off>:
    e8c6:	6883      	ldr	r3, [r0, #8]
    e8c8:	f3bf 8f5b 	dmb	ish
    e8cc:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e8d0:	e853 2f00 	ldrex	r2, [r3]
    e8d4:	f022 0210 	bic.w	r2, r2, #16
    e8d8:	e843 2100 	strex	r1, r2, [r3]
    e8dc:	2900      	cmp	r1, #0
    e8de:	d1f7      	bne.n	e8d0 <cmd_colors_off+0xa>
    e8e0:	f3bf 8f5b 	dmb	ish
}
    e8e4:	2000      	movs	r0, #0
    e8e6:	4770      	bx	lr

0000e8e8 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e8e8:	6883      	ldr	r3, [r0, #8]
    e8ea:	f3bf 8f5b 	dmb	ish
    e8ee:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e8f2:	e853 2f00 	ldrex	r2, [r3]
    e8f6:	f042 0210 	orr.w	r2, r2, #16
    e8fa:	e843 2100 	strex	r1, r2, [r3]
    e8fe:	2900      	cmp	r1, #0
    e900:	d1f7      	bne.n	e8f2 <cmd_colors_on+0xa>
    e902:	f3bf 8f5b 	dmb	ish
}
    e906:	2000      	movs	r0, #0
    e908:	4770      	bx	lr

0000e90a <cmd_echo_on>:
    e90a:	6883      	ldr	r3, [r0, #8]
    e90c:	f3bf 8f5b 	dmb	ish
    e910:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e914:	e853 2f00 	ldrex	r2, [r3]
    e918:	f042 0202 	orr.w	r2, r2, #2
    e91c:	e843 2100 	strex	r1, r2, [r3]
    e920:	2900      	cmp	r1, #0
    e922:	d1f7      	bne.n	e914 <cmd_echo_on+0xa>
    e924:	f3bf 8f5b 	dmb	ish
}
    e928:	2000      	movs	r0, #0
    e92a:	4770      	bx	lr

0000e92c <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    e92c:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    e92e:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    e930:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
    e932:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    e936:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    e938:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    e93a:	2200      	movs	r2, #0
	node->prev = NULL;
    e93c:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    e940:	8919      	ldrh	r1, [r3, #8]
    e942:	895b      	ldrh	r3, [r3, #10]
    e944:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    e946:	310c      	adds	r1, #12
    e948:	f7fe fc01 	bl	d14e <ring_buf_get_finish>

	return true;
}
    e94c:	2001      	movs	r0, #1
    e94e:	bd08      	pop	{r3, pc}

0000e950 <z_shell_history_mode_exit>:
	history->current = NULL;
    e950:	2300      	movs	r3, #0
    e952:	60c3      	str	r3, [r0, #12]
}
    e954:	4770      	bx	lr

0000e956 <z_shell_history_get>:
{
    e956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e958:	461f      	mov	r7, r3
	return list->head == list;
    e95a:	4603      	mov	r3, r0
    e95c:	4616      	mov	r6, r2
    e95e:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    e962:	429c      	cmp	r4, r3
    e964:	d102      	bne.n	e96c <z_shell_history_get+0x16>
		*len = 0U;
    e966:	2000      	movs	r0, #0
    e968:	8038      	strh	r0, [r7, #0]
}
    e96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    e96c:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    e96e:	b9b1      	cbnz	r1, e99e <z_shell_history_get+0x48>
		if (history->current == NULL) {
    e970:	2d00      	cmp	r5, #0
    e972:	d0f8      	beq.n	e966 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    e974:	42ac      	cmp	r4, r5
    e976:	d102      	bne.n	e97e <z_shell_history_get+0x28>
	history->current = l_item;
    e978:	2300      	movs	r3, #0
    e97a:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    e97c:	e7f3      	b.n	e966 <z_shell_history_get+0x10>
    e97e:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    e980:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    e982:	2c00      	cmp	r4, #0
    e984:	d0ef      	beq.n	e966 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    e986:	8922      	ldrh	r2, [r4, #8]
    e988:	f104 010c 	add.w	r1, r4, #12
    e98c:	4630      	mov	r0, r6
    e98e:	f000 fb79 	bl	f084 <memcpy>
		*len = h_item->len;
    e992:	8923      	ldrh	r3, [r4, #8]
    e994:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    e996:	2200      	movs	r2, #0
    e998:	54f2      	strb	r2, [r6, r3]
		return true;
    e99a:	2001      	movs	r0, #1
    e99c:	e7e5      	b.n	e96a <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    e99e:	2d00      	cmp	r5, #0
    e9a0:	d0ee      	beq.n	e980 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    e9a2:	6883      	ldr	r3, [r0, #8]
    e9a4:	42ab      	cmp	r3, r5
    e9a6:	d0e7      	beq.n	e978 <z_shell_history_get+0x22>
    e9a8:	682c      	ldr	r4, [r5, #0]
    e9aa:	e7e9      	b.n	e980 <z_shell_history_get+0x2a>

0000e9ac <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    e9ac:	b538      	push	{r3, r4, r5, lr}
    e9ae:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    e9b0:	1d05      	adds	r5, r0, #4
    e9b2:	6863      	ldr	r3, [r4, #4]
    e9b4:	42ab      	cmp	r3, r5
    e9b6:	d004      	beq.n	e9c2 <z_shell_history_purge+0x16>
    e9b8:	4620      	mov	r0, r4
    e9ba:	f7ff ffb7 	bl	e92c <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    e9be:	2800      	cmp	r0, #0
    e9c0:	d1f7      	bne.n	e9b2 <z_shell_history_purge+0x6>
	}
}
    e9c2:	bd38      	pop	{r3, r4, r5, pc}

0000e9c4 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    e9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
    e9c8:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    e9ca:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    e9ce:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    e9d2:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    e9d4:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    e9d8:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    e9da:	429d      	cmp	r5, r3
{
    e9dc:	4604      	mov	r4, r0
    e9de:	468a      	mov	sl, r1
    e9e0:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    e9e2:	d841      	bhi.n	ea68 <z_shell_history_put+0xa4>
	history->current = NULL;
    e9e4:	2300      	movs	r3, #0
    e9e6:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    e9e8:	2a00      	cmp	r2, #0
    e9ea:	d03d      	beq.n	ea68 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    e9ec:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    e9f0:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e9f2:	4581      	cmp	r9, r0
    e9f4:	d12d      	bne.n	ea52 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    e9f6:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    e9f8:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    e9fc:	6820      	ldr	r0, [r4, #0]
    e9fe:	462a      	mov	r2, r5
    ea00:	a901      	add	r1, sp, #4
    ea02:	f7fe fb11 	bl	d028 <ring_buf_put_claim>
		if (claim_len < total_len) {
    ea06:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    ea08:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    ea0a:	d930      	bls.n	ea6e <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
    ea0c:	6820      	ldr	r0, [r4, #0]
    ea0e:	462a      	mov	r2, r5
    ea10:	a901      	add	r1, sp, #4
    ea12:	f7fe fb09 	bl	d028 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    ea16:	4285      	cmp	r5, r0
    ea18:	d12a      	bne.n	ea70 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
    ea1a:	4631      	mov	r1, r6
    ea1c:	6820      	ldr	r0, [r4, #0]
    ea1e:	f7fe fb30 	bl	d082 <ring_buf_put_finish>
				padding += claim_len;
    ea22:	44b0      	add	r8, r6
    ea24:	fa1f f888 	uxth.w	r8, r8
    ea28:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    ea2a:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    ea2c:	4651      	mov	r1, sl
	item->len = len;
    ea2e:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    ea30:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
    ea34:	463a      	mov	r2, r7
    ea36:	f105 000c 	add.w	r0, r5, #12
    ea3a:	f000 fb23 	bl	f084 <memcpy>
	sys_dnode_t *const head = list->head;
    ea3e:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    ea40:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    ea42:	e9c5 3900 	strd	r3, r9, [r5]
    ea46:	4631      	mov	r1, r6
	head->prev = node;
    ea48:	605d      	str	r5, [r3, #4]
	list->head = node;
    ea4a:	6065      	str	r5, [r4, #4]
    ea4c:	f7fe fb19 	bl	d082 <ring_buf_put_finish>
			break;
    ea50:	e00a      	b.n	ea68 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    ea52:	9001      	str	r0, [sp, #4]
	if (l_item &&
    ea54:	2800      	cmp	r0, #0
    ea56:	d0cf      	beq.n	e9f8 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
    ea58:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    ea5a:	4293      	cmp	r3, r2
    ea5c:	d1cc      	bne.n	e9f8 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    ea5e:	300c      	adds	r0, #12
    ea60:	f000 fae7 	bl	f032 <memcmp>
	   (h_item->len == len) &&
    ea64:	2800      	cmp	r0, #0
    ea66:	d1c7      	bne.n	e9f8 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    ea68:	b003      	add	sp, #12
    ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    ea6e:	d0dc      	beq.n	ea2a <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
    ea70:	6820      	ldr	r0, [r4, #0]
    ea72:	2100      	movs	r1, #0
    ea74:	f7fe fb05 	bl	d082 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    ea78:	6863      	ldr	r3, [r4, #4]
    ea7a:	4599      	cmp	r9, r3
    ea7c:	d108      	bne.n	ea90 <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
    ea7e:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    ea80:	2208      	movs	r2, #8
	buf->tail = 0;
    ea82:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    ea86:	2100      	movs	r1, #0
    ea88:	4410      	add	r0, r2
    ea8a:	f000 fb06 	bl	f09a <memset>
}
    ea8e:	e7b5      	b.n	e9fc <z_shell_history_put+0x38>
    ea90:	4620      	mov	r0, r4
    ea92:	f7ff ff4b 	bl	e92c <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    ea96:	2800      	cmp	r0, #0
    ea98:	d1b0      	bne.n	e9fc <z_shell_history_put+0x38>
    ea9a:	e7f0      	b.n	ea7e <z_shell_history_put+0xba>

0000ea9c <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    ea9c:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    ea9e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    eaa2:	2300      	movs	r3, #0
    eaa4:	60c3      	str	r3, [r0, #12]
}
    eaa6:	4770      	bx	lr

0000eaa8 <z_shell_has_wildcard>:
{
    eaa8:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    eaaa:	4604      	mov	r4, r0
    eaac:	b908      	cbnz	r0, eab2 <z_shell_has_wildcard+0xa>
	return false;
    eaae:	2000      	movs	r0, #0
}
    eab0:	bd10      	pop	{r4, pc}
    eab2:	f000 fa91 	bl	efd8 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    eab6:	2300      	movs	r3, #0
    eab8:	b280      	uxth	r0, r0
    eaba:	4283      	cmp	r3, r0
    eabc:	d2f7      	bcs.n	eaae <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    eabe:	5ce2      	ldrb	r2, [r4, r3]
    eac0:	2a3f      	cmp	r2, #63	; 0x3f
    eac2:	d003      	beq.n	eacc <z_shell_has_wildcard+0x24>
    eac4:	2a2a      	cmp	r2, #42	; 0x2a
    eac6:	d001      	beq.n	eacc <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    eac8:	3301      	adds	r3, #1
    eaca:	e7f6      	b.n	eaba <z_shell_has_wildcard+0x12>
			return true;
    eacc:	2001      	movs	r0, #1
    eace:	e7ef      	b.n	eab0 <z_shell_has_wildcard+0x8>

0000ead0 <z_shell_wildcard_prepare>:
{
    ead0:	b510      	push	{r4, lr}
    ead2:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    ead4:	6880      	ldr	r0, [r0, #8]
    ead6:	f44f 7280 	mov.w	r2, #256	; 0x100
    eada:	2100      	movs	r1, #0
    eadc:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    eae0:	f000 fadb 	bl	f09a <memset>
	memcpy(shell->ctx->temp_buff,
    eae4:	68a0      	ldr	r0, [r4, #8]
    eae6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    eae8:	f100 0142 	add.w	r1, r0, #66	; 0x42
    eaec:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    eaf0:	f000 fac8 	bl	f084 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    eaf4:	68a0      	ldr	r0, [r4, #8]
    eaf6:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    eafa:	f7ff fa8a 	bl	e012 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    eafe:	68a0      	ldr	r0, [r4, #8]
    eb00:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    eb04:	f000 fa68 	bl	efd8 <strlen>
    eb08:	68a3      	ldr	r3, [r4, #8]
    eb0a:	3001      	adds	r0, #1
    eb0c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
    eb10:	bd10      	pop	{r4, pc}

0000eb12 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    eb12:	b510      	push	{r4, lr}
    eb14:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    eb16:	6880      	ldr	r0, [r0, #8]
    eb18:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    eb1c:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    eb20:	3042      	adds	r0, #66	; 0x42
    eb22:	f000 faaf 	bl	f084 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    eb26:	68a3      	ldr	r3, [r4, #8]
    eb28:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    eb2c:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    eb2e:	bd10      	pop	{r4, pc}

0000eb30 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    eb30:	2300      	movs	r3, #0
    eb32:	f7fe bedc 	b.w	d8ee <z_impl_z_log_msg2_static_create>

0000eb36 <usb_get_dev_data_by_cfg>:
	return list->head;
    eb36:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    eb38:	b140      	cbz	r0, eb4c <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    eb3a:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    eb3e:	685b      	ldr	r3, [r3, #4]
    eb40:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    eb42:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    eb46:	d001      	beq.n	eb4c <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    eb48:	6840      	ldr	r0, [r0, #4]
    eb4a:	e7f5      	b.n	eb38 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    eb4c:	4770      	bx	lr

0000eb4e <usb_get_dev_data_by_iface>:
	return list->head;
    eb4e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    eb50:	b150      	cbz	r0, eb68 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    eb52:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    eb56:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    eb58:	685b      	ldr	r3, [r3, #4]
    eb5a:	789b      	ldrb	r3, [r3, #2]
    eb5c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    eb5e:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    eb62:	d001      	beq.n	eb68 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    eb64:	6840      	ldr	r0, [r0, #4]
    eb66:	e7f3      	b.n	eb50 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    eb68:	4770      	bx	lr

0000eb6a <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    eb6a:	b530      	push	{r4, r5, lr}
	return list->head;
    eb6c:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    eb6e:	b188      	cbz	r0, eb94 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    eb70:	f850 3c04 	ldr.w	r3, [r0, #-4]
    eb74:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    eb76:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    eb78:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    eb7a:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    eb7c:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    eb7e:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    eb80:	b2dc      	uxtb	r4, r3
    eb82:	42a5      	cmp	r5, r4
    eb84:	d801      	bhi.n	eb8a <usb_get_dev_data_by_ep+0x20>
	return node->next;
    eb86:	6840      	ldr	r0, [r0, #4]
    eb88:	e7f1      	b.n	eb6e <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    eb8a:	3301      	adds	r3, #1
    eb8c:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    eb90:	428c      	cmp	r4, r1
    eb92:	d1f5      	bne.n	eb80 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    eb94:	bd30      	pop	{r4, r5, pc}

0000eb96 <usb_transfer_is_busy>:
{
    eb96:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    eb98:	f7f6 ff4e 	bl	5a38 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    eb9c:	b128      	cbz	r0, ebaa <usb_transfer_is_busy+0x14>
    eb9e:	6840      	ldr	r0, [r0, #4]
    eba0:	f110 0f10 	cmn.w	r0, #16
    eba4:	bf14      	ite	ne
    eba6:	2000      	movne	r0, #0
    eba8:	2001      	moveq	r0, #1
}
    ebaa:	bd08      	pop	{r3, pc}

0000ebac <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    ebac:	1c4b      	adds	r3, r1, #1
    ebae:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    ebb0:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    ebb2:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    ebb4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    ebb8:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    ebba:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    ebbe:	4770      	bx	lr

0000ebc0 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    ebc0:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    ebc4:	6f80      	ldr	r0, [r0, #120]	; 0x78
    ebc6:	4718      	bx	r3

0000ebc8 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    ebc8:	6903      	ldr	r3, [r0, #16]
    ebca:	2200      	movs	r2, #0
    ebcc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    ebd0:	4770      	bx	lr

0000ebd2 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ebd2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    ebd4:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    ebd8:	b108      	cbz	r0, ebde <cdc_acm_irq_tx_ready+0xc>
		return 1;
    ebda:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    ebde:	4770      	bx	lr

0000ebe0 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    ebe0:	6903      	ldr	r3, [r0, #16]
    ebe2:	2200      	movs	r2, #0
    ebe4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    ebe8:	4770      	bx	lr

0000ebea <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    ebea:	6903      	ldr	r3, [r0, #16]
}
    ebec:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    ebf0:	4770      	bx	lr

0000ebf2 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ebf2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    ebf4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    ebf8:	b112      	cbz	r2, ec00 <cdc_acm_irq_is_pending+0xe>
    ebfa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    ebfe:	b92a      	cbnz	r2, ec0c <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    ec00:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    ec04:	b118      	cbz	r0, ec0e <cdc_acm_irq_is_pending+0x1c>
		return 0;
    ec06:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    ec0a:	4770      	bx	lr
		return 1;
    ec0c:	2001      	movs	r0, #1
}
    ec0e:	4770      	bx	lr

0000ec10 <cdc_acm_irq_update>:
}
    ec10:	2001      	movs	r0, #1
    ec12:	4770      	bx	lr

0000ec14 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ec14:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    ec16:	e9c3 1200 	strd	r1, r2, [r3]
}
    ec1a:	4770      	bx	lr

0000ec1c <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    ec1c:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ec1e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    ec20:	d007      	beq.n	ec32 <cdc_acm_line_ctrl_get+0x16>
    ec22:	2904      	cmp	r1, #4
    ec24:	d00a      	beq.n	ec3c <cdc_acm_line_ctrl_get+0x20>
    ec26:	2901      	cmp	r1, #1
    ec28:	d10d      	bne.n	ec46 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    ec2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
    ec2c:	6013      	str	r3, [r2, #0]
		return 0;
    ec2e:	2000      	movs	r0, #0
    ec30:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    ec32:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    ec36:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ec3a:	e7f7      	b.n	ec2c <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    ec3c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    ec40:	f003 0301 	and.w	r3, r3, #1
    ec44:	e7f2      	b.n	ec2c <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    ec46:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ec4a:	4770      	bx	lr

0000ec4c <cdc_acm_fifo_read>:
{
    ec4c:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ec4e:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    ec50:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    ec52:	f7fe fa9a 	bl	d18a <ring_buf_get>
    ec56:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    ec58:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    ec5a:	f7fe f9d4 	bl	d006 <ring_buf_is_empty>
    ec5e:	b110      	cbz	r0, ec66 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    ec60:	2300      	movs	r3, #0
    ec62:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    ec66:	4620      	mov	r0, r4
    ec68:	bd38      	pop	{r3, r4, r5, pc}

0000ec6a <cdc_acm_poll_in>:
{
    ec6a:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    ec6c:	2201      	movs	r2, #1
    ec6e:	f7ff ffed 	bl	ec4c <cdc_acm_fifo_read>
}
    ec72:	3801      	subs	r0, #1
    ec74:	bf18      	it	ne
    ec76:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ec7a:	bd08      	pop	{r3, pc}

0000ec7c <z_log_msg2_static_create.constprop.0>:
    ec7c:	2300      	movs	r3, #0
    ec7e:	f7fe be36 	b.w	d8ee <z_impl_z_log_msg2_static_create>

0000ec82 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    ec82:	2940      	cmp	r1, #64	; 0x40
{
    ec84:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ec86:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    ec88:	d042      	beq.n	ed10 <cdc_acm_line_ctrl_set+0x8e>
    ec8a:	d813      	bhi.n	ecb4 <cdc_acm_line_ctrl_set+0x32>
    ec8c:	2910      	cmp	r1, #16
    ec8e:	d032      	beq.n	ecf6 <cdc_acm_line_ctrl_set+0x74>
    ec90:	d806      	bhi.n	eca0 <cdc_acm_line_ctrl_set+0x1e>
    ec92:	2901      	cmp	r1, #1
    ec94:	d01e      	beq.n	ecd4 <cdc_acm_line_ctrl_set+0x52>
    ec96:	2908      	cmp	r1, #8
    ec98:	d01f      	beq.n	ecda <cdc_acm_line_ctrl_set+0x58>
    ec9a:	f06f 0012 	mvn.w	r0, #18
}
    ec9e:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    eca0:	2920      	cmp	r1, #32
    eca2:	d1fa      	bne.n	ec9a <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    eca4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    eca8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    ecac:	b342      	cbz	r2, ed00 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    ecae:	f041 0104 	orr.w	r1, r1, #4
    ecb2:	e025      	b.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
    ecb4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    ecb8:	d033      	beq.n	ed22 <cdc_acm_line_ctrl_set+0xa0>
    ecba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ecbe:	d039      	beq.n	ed34 <cdc_acm_line_ctrl_set+0xb2>
    ecc0:	2980      	cmp	r1, #128	; 0x80
    ecc2:	d1ea      	bne.n	ec9a <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    ecc4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ecc8:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    eccc:	b1c2      	cbz	r2, ed00 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    ecce:	f041 0110 	orr.w	r1, r1, #16
    ecd2:	e015      	b.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    ecd4:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    ecd6:	2000      	movs	r0, #0
    ecd8:	e7e1      	b.n	ec9e <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    ecda:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ecde:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    ece2:	b92a      	cbnz	r2, ecf0 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    ece4:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    ece8:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ecea:	f7f7 fb87 	bl	63fc <cdc_acm_send_notification.isra.0>
    ecee:	e7f2      	b.n	ecd6 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    ecf0:	f041 0101 	orr.w	r1, r1, #1
    ecf4:	e7f6      	b.n	ece4 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    ecf6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ecfa:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    ecfe:	b922      	cbnz	r2, ed0a <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    ed00:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ed04:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ed08:	e7ef      	b.n	ecea <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    ed0a:	f041 0102 	orr.w	r1, r1, #2
    ed0e:	e7f7      	b.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    ed10:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ed14:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    ed18:	2a00      	cmp	r2, #0
    ed1a:	d0f1      	beq.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    ed1c:	f041 0108 	orr.w	r1, r1, #8
    ed20:	e7ee      	b.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    ed22:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ed26:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    ed2a:	2a00      	cmp	r2, #0
    ed2c:	d0e8      	beq.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    ed2e:	f041 0120 	orr.w	r1, r1, #32
    ed32:	e7e5      	b.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    ed34:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ed38:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    ed3c:	2a00      	cmp	r2, #0
    ed3e:	d0df      	beq.n	ed00 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    ed40:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    ed44:	e7dc      	b.n	ed00 <cdc_acm_line_ctrl_set+0x7e>

0000ed46 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    ed46:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    ed48:	6800      	ldr	r0, [r0, #0]
    ed4a:	f7f7 bd1b 	b.w	6784 <z_arm_fatal_error>

0000ed4e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    ed4e:	2100      	movs	r1, #0
    ed50:	2001      	movs	r0, #1
    ed52:	f7f7 bd17 	b.w	6784 <z_arm_fatal_error>

0000ed56 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    ed56:	b508      	push	{r3, lr}
	handler();
    ed58:	f7f7 fdcc 	bl	68f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    ed5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    ed60:	f7f7 beb2 	b.w	6ac8 <z_arm_exc_exit>

0000ed64 <z_log_msg2_static_create.constprop.0>:
    ed64:	2300      	movs	r3, #0
    ed66:	f7fe bdc2 	b.w	d8ee <z_impl_z_log_msg2_static_create>

0000ed6a <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    ed6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ed6e:	4684      	mov	ip, r0
    ed70:	4688      	mov	r8, r1
	register const char *s = nptr;
    ed72:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    ed74:	4621      	mov	r1, r4
    ed76:	f814 3b01 	ldrb.w	r3, [r4], #1
    ed7a:	2b20      	cmp	r3, #32
    ed7c:	d0fa      	beq.n	ed74 <strtol+0xa>
    ed7e:	f1a3 0009 	sub.w	r0, r3, #9
    ed82:	2804      	cmp	r0, #4
    ed84:	d9f6      	bls.n	ed74 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
    ed86:	2b2d      	cmp	r3, #45	; 0x2d
    ed88:	d12d      	bne.n	ede6 <strtol+0x7c>
		neg = 1;
		c = *s++;
    ed8a:	784b      	ldrb	r3, [r1, #1]
    ed8c:	1c8c      	adds	r4, r1, #2
		neg = 1;
    ed8e:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    ed90:	2a00      	cmp	r2, #0
    ed92:	d05a      	beq.n	ee4a <strtol+0xe0>
    ed94:	2a10      	cmp	r2, #16
    ed96:	d109      	bne.n	edac <strtol+0x42>
    ed98:	2b30      	cmp	r3, #48	; 0x30
    ed9a:	d107      	bne.n	edac <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    ed9c:	7823      	ldrb	r3, [r4, #0]
    ed9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    eda2:	2b58      	cmp	r3, #88	; 0x58
    eda4:	d14c      	bne.n	ee40 <strtol+0xd6>
		c = s[1];
    eda6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    eda8:	2210      	movs	r2, #16
		s += 2;
    edaa:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    edac:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    edb0:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    edb2:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    edb4:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    edb8:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    edba:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    edbe:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    edc2:	2d09      	cmp	r5, #9
    edc4:	d815      	bhi.n	edf2 <strtol+0x88>
			c -= '0';
    edc6:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    edc8:	429a      	cmp	r2, r3
    edca:	dd22      	ble.n	ee12 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    edcc:	1c75      	adds	r5, r6, #1
    edce:	d007      	beq.n	ede0 <strtol+0x76>
    edd0:	4570      	cmp	r0, lr
    edd2:	d81b      	bhi.n	ee0c <strtol+0xa2>
    edd4:	d101      	bne.n	edda <strtol+0x70>
    edd6:	454b      	cmp	r3, r9
    edd8:	dc18      	bgt.n	ee0c <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    edda:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    edde:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    ede0:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    ede4:	e7eb      	b.n	edbe <strtol+0x54>
	} else if (c == '+') {
    ede6:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    ede8:	bf04      	itt	eq
    edea:	784b      	ldrbeq	r3, [r1, #1]
    edec:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    edee:	2100      	movs	r1, #0
    edf0:	e7ce      	b.n	ed90 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    edf2:	f043 0520 	orr.w	r5, r3, #32
    edf6:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    edf8:	2d19      	cmp	r5, #25
    edfa:	d80a      	bhi.n	ee12 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    edfc:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    ee00:	2d1a      	cmp	r5, #26
    ee02:	bf34      	ite	cc
    ee04:	2537      	movcc	r5, #55	; 0x37
    ee06:	2557      	movcs	r5, #87	; 0x57
    ee08:	1b5b      	subs	r3, r3, r5
    ee0a:	e7dd      	b.n	edc8 <strtol+0x5e>
			any = -1;
    ee0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ee10:	e7e6      	b.n	ede0 <strtol+0x76>
		}
	}

	if (any < 0) {
    ee12:	1c73      	adds	r3, r6, #1
    ee14:	d109      	bne.n	ee2a <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    ee16:	f7fc f973 	bl	b100 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    ee1a:	2322      	movs	r3, #34	; 0x22
    ee1c:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    ee1e:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    ee20:	f1b8 0f00 	cmp.w	r8, #0
    ee24:	d107      	bne.n	ee36 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    ee26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    ee2a:	b101      	cbz	r1, ee2e <strtol+0xc4>
		acc = -acc;
    ee2c:	4240      	negs	r0, r0
	if (endptr != NULL) {
    ee2e:	f1b8 0f00 	cmp.w	r8, #0
    ee32:	d0f8      	beq.n	ee26 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
    ee34:	b10e      	cbz	r6, ee3a <strtol+0xd0>
    ee36:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    ee3a:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    ee3e:	e7f2      	b.n	ee26 <strtol+0xbc>
	if (base == 0) {
    ee40:	2330      	movs	r3, #48	; 0x30
    ee42:	2a00      	cmp	r2, #0
    ee44:	d1b2      	bne.n	edac <strtol+0x42>
		base = c == '0' ? 8 : 10;
    ee46:	2208      	movs	r2, #8
    ee48:	e7b0      	b.n	edac <strtol+0x42>
	if ((base == 0 || base == 16) &&
    ee4a:	2b30      	cmp	r3, #48	; 0x30
    ee4c:	d0a6      	beq.n	ed9c <strtol+0x32>
		base = c == '0' ? 8 : 10;
    ee4e:	220a      	movs	r2, #10
    ee50:	e7ac      	b.n	edac <strtol+0x42>

0000ee52 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    ee52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee56:	4607      	mov	r7, r0
    ee58:	4688      	mov	r8, r1
	register const char *s = nptr;
    ee5a:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    ee5c:	4621      	mov	r1, r4
    ee5e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    ee62:	2b20      	cmp	r3, #32
    ee64:	d0fa      	beq.n	ee5c <strtoul+0xa>
    ee66:	f1a3 0009 	sub.w	r0, r3, #9
    ee6a:	2804      	cmp	r0, #4
    ee6c:	d9f6      	bls.n	ee5c <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
    ee6e:	2b2d      	cmp	r3, #45	; 0x2d
    ee70:	d12f      	bne.n	eed2 <strtoul+0x80>
		neg = 1;
		c = *s++;
    ee72:	784b      	ldrb	r3, [r1, #1]
    ee74:	1c8c      	adds	r4, r1, #2
		neg = 1;
    ee76:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    ee7a:	2a00      	cmp	r2, #0
    ee7c:	d05e      	beq.n	ef3c <strtoul+0xea>
    ee7e:	2a10      	cmp	r2, #16
    ee80:	d109      	bne.n	ee96 <strtoul+0x44>
    ee82:	2b30      	cmp	r3, #48	; 0x30
    ee84:	d107      	bne.n	ee96 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    ee86:	7823      	ldrb	r3, [r4, #0]
    ee88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ee8c:	2b58      	cmp	r3, #88	; 0x58
    ee8e:	d150      	bne.n	ef32 <strtoul+0xe0>
		c = s[1];
    ee90:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    ee92:	2210      	movs	r2, #16
		s += 2;
    ee94:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    ee96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    ee9a:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    ee9c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    eea0:	fb02 fe01 	mul.w	lr, r2, r1
    eea4:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
    eea8:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    eeaa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    eeae:	2d09      	cmp	r5, #9
    eeb0:	d816      	bhi.n	eee0 <strtoul+0x8e>
			c -= '0';
    eeb2:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    eeb4:	429a      	cmp	r2, r3
    eeb6:	dd23      	ble.n	ef00 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    eeb8:	2e00      	cmp	r6, #0
    eeba:	db1e      	blt.n	eefa <strtoul+0xa8>
    eebc:	4288      	cmp	r0, r1
    eebe:	d81c      	bhi.n	eefa <strtoul+0xa8>
    eec0:	d101      	bne.n	eec6 <strtoul+0x74>
    eec2:	4573      	cmp	r3, lr
    eec4:	dc19      	bgt.n	eefa <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    eec6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    eeca:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    eecc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    eed0:	e7eb      	b.n	eeaa <strtoul+0x58>
	} else if (c == '+') {
    eed2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    eed4:	bf04      	itt	eq
    eed6:	784b      	ldrbeq	r3, [r1, #1]
    eed8:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    eeda:	f04f 0c00 	mov.w	ip, #0
    eede:	e7cc      	b.n	ee7a <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    eee0:	f043 0520 	orr.w	r5, r3, #32
    eee4:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    eee6:	2d19      	cmp	r5, #25
    eee8:	d80a      	bhi.n	ef00 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    eeea:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    eeee:	2d1a      	cmp	r5, #26
    eef0:	bf34      	ite	cc
    eef2:	2537      	movcc	r5, #55	; 0x37
    eef4:	2557      	movcs	r5, #87	; 0x57
    eef6:	1b5b      	subs	r3, r3, r5
    eef8:	e7dc      	b.n	eeb4 <strtoul+0x62>
			any = -1;
    eefa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    eefe:	e7e5      	b.n	eecc <strtoul+0x7a>
		}
	}
	if (any < 0) {
    ef00:	2e00      	cmp	r6, #0
    ef02:	da0a      	bge.n	ef1a <strtoul+0xc8>
    ef04:	f7fc f8fc 	bl	b100 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    ef08:	2322      	movs	r3, #34	; 0x22
    ef0a:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    ef0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
    ef10:	f1b8 0f00 	cmp.w	r8, #0
    ef14:	d109      	bne.n	ef2a <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    ef16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
    ef1a:	f1bc 0f00 	cmp.w	ip, #0
    ef1e:	d000      	beq.n	ef22 <strtoul+0xd0>
		acc = -acc;
    ef20:	4240      	negs	r0, r0
	if (endptr != NULL) {
    ef22:	f1b8 0f00 	cmp.w	r8, #0
    ef26:	d0f6      	beq.n	ef16 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
    ef28:	b106      	cbz	r6, ef2c <strtoul+0xda>
    ef2a:	1e67      	subs	r7, r4, #1
    ef2c:	f8c8 7000 	str.w	r7, [r8]
	return acc;
    ef30:	e7f1      	b.n	ef16 <strtoul+0xc4>
	if (base == 0) {
    ef32:	2330      	movs	r3, #48	; 0x30
    ef34:	2a00      	cmp	r2, #0
    ef36:	d1ae      	bne.n	ee96 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
    ef38:	2208      	movs	r2, #8
    ef3a:	e7ac      	b.n	ee96 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
    ef3c:	2b30      	cmp	r3, #48	; 0x30
    ef3e:	d0a2      	beq.n	ee86 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
    ef40:	220a      	movs	r2, #10
    ef42:	e7a8      	b.n	ee96 <strtoul+0x44>

0000ef44 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    ef44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    ef48:	f891 8000 	ldrb.w	r8, [r1]
{
    ef4c:	4605      	mov	r5, r0
	if (c != 0) {
    ef4e:	f1b8 0f00 	cmp.w	r8, #0
    ef52:	d010      	beq.n	ef76 <strstr+0x32>
	c = *find++;
    ef54:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    ef56:	4620      	mov	r0, r4
    ef58:	f000 f83e 	bl	efd8 <strlen>
    ef5c:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    ef5e:	462e      	mov	r6, r5
    ef60:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    ef64:	b163      	cbz	r3, ef80 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    ef66:	4598      	cmp	r8, r3
    ef68:	d108      	bne.n	ef7c <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    ef6a:	463a      	mov	r2, r7
    ef6c:	4621      	mov	r1, r4
    ef6e:	4630      	mov	r0, r6
    ef70:	f000 f84e 	bl	f010 <strncmp>
    ef74:	b910      	cbnz	r0, ef7c <strstr+0x38>
	s--;
	}
	return (char *)s;
}
    ef76:	4628      	mov	r0, r5
    ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    ef7c:	4635      	mov	r5, r6
    ef7e:	e7ee      	b.n	ef5e <strstr+0x1a>
					return NULL;
    ef80:	461d      	mov	r5, r3
    ef82:	e7f8      	b.n	ef76 <strstr+0x32>

0000ef84 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    ef84:	3901      	subs	r1, #1
    ef86:	4603      	mov	r3, r0
    ef88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ef8c:	b90a      	cbnz	r2, ef92 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    ef8e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    ef90:	4770      	bx	lr
		*d = *s;
    ef92:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    ef96:	e7f7      	b.n	ef88 <strcpy+0x4>

0000ef98 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    ef98:	b570      	push	{r4, r5, r6, lr}
    ef9a:	4605      	mov	r5, r0
    ef9c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    ef9e:	b142      	cbz	r2, efb2 <strncpy+0x1a>
    efa0:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    efa4:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    efa6:	b92c      	cbnz	r4, efb4 <strncpy+0x1c>
    efa8:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    efaa:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    efae:	429a      	cmp	r2, r3
    efb0:	d1fb      	bne.n	efaa <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    efb2:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    efb4:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    efb8:	4632      	mov	r2, r6
    efba:	e7ef      	b.n	ef9c <strncpy+0x4>

0000efbc <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    efbc:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    efbe:	4603      	mov	r3, r0
    efc0:	781a      	ldrb	r2, [r3, #0]
    efc2:	428a      	cmp	r2, r1
    efc4:	4618      	mov	r0, r3
    efc6:	f103 0301 	add.w	r3, r3, #1
    efca:	d004      	beq.n	efd6 <strchr+0x1a>
    efcc:	2a00      	cmp	r2, #0
    efce:	d1f7      	bne.n	efc0 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    efd0:	2900      	cmp	r1, #0
    efd2:	bf18      	it	ne
    efd4:	2000      	movne	r0, #0
}
    efd6:	4770      	bx	lr

0000efd8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    efd8:	4603      	mov	r3, r0
	size_t n = 0;
    efda:	2000      	movs	r0, #0

	while (*s != '\0') {
    efdc:	5c1a      	ldrb	r2, [r3, r0]
    efde:	b902      	cbnz	r2, efe2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    efe0:	4770      	bx	lr
		n++;
    efe2:	3001      	adds	r0, #1
    efe4:	e7fa      	b.n	efdc <strlen+0x4>

0000efe6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    efe6:	4603      	mov	r3, r0
	size_t n = 0;
    efe8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    efea:	5c1a      	ldrb	r2, [r3, r0]
    efec:	b10a      	cbz	r2, eff2 <strnlen+0xc>
    efee:	4288      	cmp	r0, r1
    eff0:	d100      	bne.n	eff4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    eff2:	4770      	bx	lr
		n++;
    eff4:	3001      	adds	r0, #1
    eff6:	e7f8      	b.n	efea <strnlen+0x4>

0000eff8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    eff8:	1e43      	subs	r3, r0, #1
    effa:	3901      	subs	r1, #1
    effc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f000:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    f004:	4282      	cmp	r2, r0
    f006:	d101      	bne.n	f00c <strcmp+0x14>
    f008:	2a00      	cmp	r2, #0
    f00a:	d1f7      	bne.n	effc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    f00c:	1a10      	subs	r0, r2, r0
    f00e:	4770      	bx	lr

0000f010 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    f010:	b510      	push	{r4, lr}
    f012:	3901      	subs	r1, #1
    f014:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    f016:	4282      	cmp	r2, r0
    f018:	d009      	beq.n	f02e <strncmp+0x1e>
    f01a:	7803      	ldrb	r3, [r0, #0]
    f01c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    f020:	42a3      	cmp	r3, r4
    f022:	d100      	bne.n	f026 <strncmp+0x16>
    f024:	b90b      	cbnz	r3, f02a <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    f026:	1b18      	subs	r0, r3, r4
    f028:	e002      	b.n	f030 <strncmp+0x20>
		s1++;
    f02a:	3001      	adds	r0, #1
		n--;
    f02c:	e7f3      	b.n	f016 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
    f02e:	2000      	movs	r0, #0
}
    f030:	bd10      	pop	{r4, pc}

0000f032 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    f032:	b510      	push	{r4, lr}
    f034:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    f036:	b15a      	cbz	r2, f050 <memcmp+0x1e>
    f038:	3901      	subs	r1, #1
    f03a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    f03c:	f813 0b01 	ldrb.w	r0, [r3], #1
    f040:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    f044:	42a3      	cmp	r3, r4
    f046:	d001      	beq.n	f04c <memcmp+0x1a>
    f048:	4290      	cmp	r0, r2
    f04a:	d0f7      	beq.n	f03c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    f04c:	1a80      	subs	r0, r0, r2
}
    f04e:	bd10      	pop	{r4, pc}
		return 0;
    f050:	4610      	mov	r0, r2
    f052:	e7fc      	b.n	f04e <memcmp+0x1c>

0000f054 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    f054:	1a43      	subs	r3, r0, r1
    f056:	4293      	cmp	r3, r2
{
    f058:	b510      	push	{r4, lr}
    f05a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    f05e:	d308      	bcc.n	f072 <memmove+0x1e>
    f060:	3901      	subs	r1, #1
	char *dest = d;
    f062:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    f064:	429a      	cmp	r2, r3
    f066:	d007      	beq.n	f078 <memmove+0x24>
			*dest = *src;
    f068:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    f06c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    f070:	e7f8      	b.n	f064 <memmove+0x10>
    f072:	440a      	add	r2, r1
		while (n > 0) {
    f074:	428a      	cmp	r2, r1
    f076:	d100      	bne.n	f07a <memmove+0x26>
		}
	}

	return d;
}
    f078:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    f07a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    f07e:	f803 4d01 	strb.w	r4, [r3, #-1]!
    f082:	e7f7      	b.n	f074 <memmove+0x20>

0000f084 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    f084:	b510      	push	{r4, lr}
    f086:	1e43      	subs	r3, r0, #1
    f088:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    f08a:	4291      	cmp	r1, r2
    f08c:	d100      	bne.n	f090 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    f08e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    f090:	f811 4b01 	ldrb.w	r4, [r1], #1
    f094:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    f098:	e7f7      	b.n	f08a <memcpy+0x6>

0000f09a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    f09a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    f09c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    f09e:	4603      	mov	r3, r0
	while (n > 0) {
    f0a0:	4293      	cmp	r3, r2
    f0a2:	d100      	bne.n	f0a6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    f0a4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    f0a6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    f0aa:	e7f9      	b.n	f0a0 <memset+0x6>

0000f0ac <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    f0ac:	684b      	ldr	r3, [r1, #4]
    f0ae:	2b01      	cmp	r3, #1
    f0b0:	dd07      	ble.n	f0c2 <sprintf_out+0x16>
		*(p->ptr) = c;
    f0b2:	680b      	ldr	r3, [r1, #0]
    f0b4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    f0b6:	680b      	ldr	r3, [r1, #0]
    f0b8:	3301      	adds	r3, #1
    f0ba:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    f0bc:	684b      	ldr	r3, [r1, #4]
    f0be:	3b01      	subs	r3, #1
    f0c0:	604b      	str	r3, [r1, #4]
}
    f0c2:	2000      	movs	r0, #0
    f0c4:	4770      	bx	lr

0000f0c6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    f0c6:	b084      	sub	sp, #16
    f0c8:	ab04      	add	r3, sp, #16
    f0ca:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    f0ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f0d2:	2b06      	cmp	r3, #6
    f0d4:	d108      	bne.n	f0e8 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    f0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f0da:	2201      	movs	r2, #1
    f0dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f0e0:	f3bf 8f4f 	dsb	sy
        __WFE();
    f0e4:	bf20      	wfe
    while (true)
    f0e6:	e7fd      	b.n	f0e4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    f0e8:	b004      	add	sp, #16
    f0ea:	4770      	bx	lr

0000f0ec <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    f0ec:	b084      	sub	sp, #16
    f0ee:	ab04      	add	r3, sp, #16
    f0f0:	e903 0007 	stmdb	r3, {r0, r1, r2}
    f0f4:	2300      	movs	r3, #0
    f0f6:	f383 8811 	msr	BASEPRI, r3
    f0fa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f0fe:	b004      	add	sp, #16
    f100:	4770      	bx	lr

0000f102 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    f102:	6903      	ldr	r3, [r0, #16]
{
    f104:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    f106:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    f10a:	2300      	movs	r3, #0
    f10c:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    f10e:	7f83      	ldrb	r3, [r0, #30]
{
    f110:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    f112:	b113      	cbz	r3, f11a <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    f114:	7a40      	ldrb	r0, [r0, #9]
    f116:	f000 fc49 	bl	f9ac <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    f11a:	2301      	movs	r3, #1
    f11c:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    f11e:	2300      	movs	r3, #0
    f120:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    f122:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    f124:	77a3      	strb	r3, [r4, #30]
}
    f126:	bd10      	pop	{r4, pc}

0000f128 <z_log_msg2_static_create.constprop.0>:
    f128:	2300      	movs	r3, #0
    f12a:	f7fe bbe0 	b.w	d8ee <z_impl_z_log_msg2_static_create>

0000f12e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    f12e:	f7fc bb29 	b.w	b784 <z_impl_k_mutex_lock>

0000f132 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    f132:	f7fc bb9f 	b.w	b874 <z_impl_k_mutex_unlock>

0000f136 <usb_dc_ep_read>:
{
    f136:	b570      	push	{r4, r5, r6, lr}
    f138:	4604      	mov	r4, r0
    f13a:	460e      	mov	r6, r1
    f13c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    f13e:	f7f9 f841 	bl	81c4 <usb_dc_ep_read_wait>
	if (ret) {
    f142:	b930      	cbnz	r0, f152 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    f144:	b906      	cbnz	r6, f148 <usb_dc_ep_read+0x12>
    f146:	b125      	cbz	r5, f152 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    f148:	4620      	mov	r0, r4
}
    f14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    f14e:	f7f9 b89b 	b.w	8288 <usb_dc_ep_read_continue>
}
    f152:	bd70      	pop	{r4, r5, r6, pc}

0000f154 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    f154:	6903      	ldr	r3, [r0, #16]
    f156:	b2c9      	uxtb	r1, r1
    f158:	220c      	movs	r2, #12
    f15a:	fb01 3302 	mla	r3, r1, r2, r3
    f15e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    f160:	f000 0007 	and.w	r0, r0, #7
    f164:	4770      	bx	lr

0000f166 <set_on_state>:
	__asm__ volatile(
    f166:	f04f 0320 	mov.w	r3, #32
    f16a:	f3ef 8211 	mrs	r2, BASEPRI
    f16e:	f383 8812 	msr	BASEPRI_MAX, r3
    f172:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f176:	6803      	ldr	r3, [r0, #0]
    f178:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f17c:	f043 0302 	orr.w	r3, r3, #2
    f180:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f182:	f382 8811 	msr	BASEPRI, r2
    f186:	f3bf 8f6f 	isb	sy
}
    f18a:	4770      	bx	lr

0000f18c <stop>:
{
    f18c:	4603      	mov	r3, r0
    f18e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    f190:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    f192:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    f194:	f04f 0420 	mov.w	r4, #32
    f198:	f3ef 8611 	mrs	r6, BASEPRI
    f19c:	f384 8812 	msr	BASEPRI_MAX, r4
    f1a0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f1a4:	250c      	movs	r5, #12
    f1a6:	fb05 0401 	mla	r4, r5, r1, r0
    f1aa:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f1ac:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    f1b0:	d001      	beq.n	f1b6 <stop+0x2a>
    f1b2:	42a2      	cmp	r2, r4
    f1b4:	d111      	bne.n	f1da <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f1b6:	fb05 0001 	mla	r0, r5, r1, r0
    f1ba:	2201      	movs	r2, #1
    f1bc:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    f1be:	2000      	movs	r0, #0
	__asm__ volatile(
    f1c0:	f386 8811 	msr	BASEPRI, r6
    f1c4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    f1c8:	b930      	cbnz	r0, f1d8 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    f1ca:	685b      	ldr	r3, [r3, #4]
    f1cc:	220c      	movs	r2, #12
    f1ce:	fb02 3101 	mla	r1, r2, r1, r3
    f1d2:	684b      	ldr	r3, [r1, #4]
    f1d4:	4798      	blx	r3
	return 0;
    f1d6:	2000      	movs	r0, #0
}
    f1d8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    f1da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f1de:	e7ef      	b.n	f1c0 <stop+0x34>

0000f1e0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    f1e0:	2280      	movs	r2, #128	; 0x80
    f1e2:	f7ff bfd3 	b.w	f18c <stop>

0000f1e6 <async_start>:
{
    f1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1e8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    f1ea:	6904      	ldr	r4, [r0, #16]
{
    f1ec:	4605      	mov	r5, r0
    f1ee:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    f1f0:	f04f 0020 	mov.w	r0, #32
    f1f4:	f3ef 8c11 	mrs	ip, BASEPRI
    f1f8:	f380 8812 	msr	BASEPRI_MAX, r0
    f1fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f200:	260c      	movs	r6, #12
    f202:	fb06 4601 	mla	r6, r6, r1, r4
    f206:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f208:	f000 0e07 	and.w	lr, r0, #7
    f20c:	f1be 0f01 	cmp.w	lr, #1
    f210:	d110      	bne.n	f234 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f212:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    f214:	2600      	movs	r6, #0
	__asm__ volatile(
    f216:	f38c 8811 	msr	BASEPRI, ip
    f21a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    f21e:	b93e      	cbnz	r6, f230 <async_start+0x4a>
	subdata->cb = cb;
    f220:	200c      	movs	r0, #12
    f222:	4341      	muls	r1, r0
    f224:	440c      	add	r4, r1
	subdata->user_data = user_data;
    f226:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    f22a:	686b      	ldr	r3, [r5, #4]
    f22c:	585b      	ldr	r3, [r3, r1]
    f22e:	4798      	blx	r3
}
    f230:	4630      	mov	r0, r6
    f232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    f234:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    f238:	4287      	cmp	r7, r0
    f23a:	bf14      	ite	ne
    f23c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    f240:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    f244:	e7e7      	b.n	f216 <async_start+0x30>

0000f246 <api_start>:
{
    f246:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f248:	2480      	movs	r4, #128	; 0x80
    f24a:	9400      	str	r4, [sp, #0]
    f24c:	f7ff ffcb 	bl	f1e6 <async_start>
}
    f250:	b002      	add	sp, #8
    f252:	bd10      	pop	{r4, pc}

0000f254 <onoff_started_callback>:
	return &data->mgr[type];
    f254:	6900      	ldr	r0, [r0, #16]
{
    f256:	b410      	push	{r4}
	return &data->mgr[type];
    f258:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    f25a:	241c      	movs	r4, #28
    f25c:	fb03 0004 	mla	r0, r3, r4, r0
    f260:	2100      	movs	r1, #0
}
    f262:	bc10      	pop	{r4}
	notify(mgr, 0);
    f264:	4710      	bx	r2

0000f266 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f266:	2000      	movs	r0, #0
    f268:	f000 ba4c 	b.w	f704 <nrfx_clock_start>

0000f26c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f26c:	2000      	movs	r0, #0
    f26e:	f7fa baf7 	b.w	9860 <nrfx_clock_stop>

0000f272 <blocking_start_callback>:
{
    f272:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f274:	f7fc bb76 	b.w	b964 <z_impl_k_sem_give>

0000f278 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f278:	6843      	ldr	r3, [r0, #4]
    f27a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f27c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    f280:	600b      	str	r3, [r1, #0]
}
    f282:	2000      	movs	r0, #0
    f284:	4770      	bx	lr

0000f286 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f286:	6843      	ldr	r3, [r0, #4]
    f288:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    f28a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    f28e:	4042      	eors	r2, r0
    f290:	400a      	ands	r2, r1
    f292:	4042      	eors	r2, r0
    p_reg->OUT = value;
    f294:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    f298:	2000      	movs	r0, #0
    f29a:	4770      	bx	lr

0000f29c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f29c:	6843      	ldr	r3, [r0, #4]
    f29e:	685b      	ldr	r3, [r3, #4]
}
    f2a0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    f2a2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    f2a6:	4770      	bx	lr

0000f2a8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f2a8:	6843      	ldr	r3, [r0, #4]
    f2aa:	685b      	ldr	r3, [r3, #4]
}
    f2ac:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    f2ae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    f2b2:	4770      	bx	lr

0000f2b4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f2b4:	6843      	ldr	r3, [r0, #4]
    f2b6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f2b8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    f2bc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    f2be:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    f2c2:	2000      	movs	r0, #0
    f2c4:	4770      	bx	lr

0000f2c6 <gpio_nrfx_manage_callback>:
	return port->data;
    f2c6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    f2c8:	6858      	ldr	r0, [r3, #4]
{
    f2ca:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    f2cc:	b158      	cbz	r0, f2e6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f2ce:	2400      	movs	r4, #0
    f2d0:	4281      	cmp	r1, r0
    f2d2:	d112      	bne.n	f2fa <gpio_nrfx_manage_callback+0x34>
	return node->next;
    f2d4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    f2d6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    f2d8:	b954      	cbnz	r4, f2f0 <gpio_nrfx_manage_callback+0x2a>
    f2da:	428d      	cmp	r5, r1
	list->head = node;
    f2dc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    f2de:	d100      	bne.n	f2e2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    f2e0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    f2e2:	2000      	movs	r0, #0
    f2e4:	6008      	str	r0, [r1, #0]
	if (set) {
    f2e6:	b96a      	cbnz	r2, f304 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    f2e8:	2000      	movs	r0, #0
}
    f2ea:	bd30      	pop	{r4, r5, pc}
    f2ec:	4628      	mov	r0, r5
    f2ee:	e7ef      	b.n	f2d0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    f2f0:	428d      	cmp	r5, r1
	parent->next = child;
    f2f2:	6020      	str	r0, [r4, #0]
	list->tail = node;
    f2f4:	bf08      	it	eq
    f2f6:	609c      	streq	r4, [r3, #8]
}
    f2f8:	e7f3      	b.n	f2e2 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    f2fa:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f2fc:	4604      	mov	r4, r0
    f2fe:	2d00      	cmp	r5, #0
    f300:	d1f4      	bne.n	f2ec <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    f302:	b13a      	cbz	r2, f314 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    f304:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    f306:	685a      	ldr	r2, [r3, #4]
    f308:	600a      	str	r2, [r1, #0]
	list->head = node;
    f30a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    f30c:	2800      	cmp	r0, #0
    f30e:	d1eb      	bne.n	f2e8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    f310:	6099      	str	r1, [r3, #8]
}
    f312:	e7ea      	b.n	f2ea <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    f314:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f318:	e7e7      	b.n	f2ea <gpio_nrfx_manage_callback+0x24>

0000f31a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    f31a:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    f31c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    f320:	2908      	cmp	r1, #8
    f322:	6e66      	ldr	r6, [r4, #100]	; 0x64
    f324:	6e65      	ldr	r5, [r4, #100]	; 0x64
    f326:	6e62      	ldr	r2, [r4, #100]	; 0x64
    f328:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    f32a:	ea4f 2515 	mov.w	r5, r5, lsr #8
    f32e:	ea4f 6303 	mov.w	r3, r3, lsl #24
    f332:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    f336:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    f33a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    f33e:	ea43 0305 	orr.w	r3, r3, r5
    f342:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    f346:	ea43 0302 	orr.w	r3, r3, r2
    f34a:	9300      	str	r3, [sp, #0]
    f34c:	6e26      	ldr	r6, [r4, #96]	; 0x60
    f34e:	6e25      	ldr	r5, [r4, #96]	; 0x60
    f350:	6e22      	ldr	r2, [r4, #96]	; 0x60
    f352:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    f354:	ea4f 2415 	mov.w	r4, r5, lsr #8
    f358:	ea4f 6303 	mov.w	r3, r3, lsl #24
    f35c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    f360:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    f364:	ea43 0304 	orr.w	r3, r3, r4
    f368:	ea4f 2402 	mov.w	r4, r2, lsl #8
    f36c:	bf28      	it	cs
    f36e:	2108      	movcs	r1, #8
    f370:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    f374:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    f376:	460a      	mov	r2, r1
    f378:	460c      	mov	r4, r1
    f37a:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    f37c:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    f37e:	f7ff fe81 	bl	f084 <memcpy>

	return length;
}
    f382:	4620      	mov	r0, r4
    f384:	b002      	add	sp, #8
    f386:	bd70      	pop	{r4, r5, r6, pc}

0000f388 <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
    f388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f38c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
    f390:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
    f394:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
    f396:	bf48      	it	mi
    f398:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
    f39c:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
    f39e:	bf48      	it	mi
    f3a0:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
    f3a4:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
    f3a6:	bf48      	it	mi
    f3a8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
    f3ac:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
    f3ae:	bf48      	it	mi
    f3b0:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
    f3b4:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
    f3b6:	bf48      	it	mi
    f3b8:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
    f3bc:	6003      	str	r3, [r0, #0]

	return 0;
}
    f3be:	2000      	movs	r0, #0
    f3c0:	4770      	bx	lr

0000f3c2 <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
    f3c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
    f3ce:	2000      	movs	r0, #0
    f3d0:	4770      	bx	lr

0000f3d2 <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
    f3d2:	f240 13b3 	movw	r3, #435	; 0x1b3
    f3d6:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
    f3d8:	2000      	movs	r0, #0
    f3da:	4770      	bx	lr

0000f3dc <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    f3dc:	6902      	ldr	r2, [r0, #16]
{
    f3de:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    f3e0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    f3e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    f3e8:	2000      	movs	r0, #0
    f3ea:	4770      	bx	lr

0000f3ec <uarte_nrfx_err_check>:
	return config->uarte_regs;
    f3ec:	6843      	ldr	r3, [r0, #4]
    f3ee:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f3f0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f3f4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f3f8:	4770      	bx	lr

0000f3fa <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    f3fa:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    f3fc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    f3fe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f400:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f404:	b148      	cbz	r0, f41a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    f406:	7d52      	ldrb	r2, [r2, #21]
    f408:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f40a:	2000      	movs	r0, #0
    f40c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    f410:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f414:	2201      	movs	r2, #1
    f416:	601a      	str	r2, [r3, #0]
	return 0;
    f418:	4770      	bx	lr
		return -1;
    f41a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f41e:	4770      	bx	lr

0000f420 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f420:	2a00      	cmp	r2, #0
{
    f422:	b510      	push	{r4, lr}
    f424:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f426:	dd0f      	ble.n	f448 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    f428:	6843      	ldr	r3, [r0, #4]
    f42a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f42c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f430:	b148      	cbz	r0, f446 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    f432:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f434:	2000      	movs	r0, #0
    f436:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    f43a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    f43e:	7d52      	ldrb	r2, [r2, #21]
    f440:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f442:	2001      	movs	r0, #1
    f444:	6018      	str	r0, [r3, #0]
}
    f446:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    f448:	2000      	movs	r0, #0
    f44a:	e7fc      	b.n	f446 <uarte_nrfx_fifo_read+0x26>

0000f44c <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    f44c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    f44e:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    f450:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    f452:	f04f 0020 	mov.w	r0, #32
    f456:	f3ef 8311 	mrs	r3, BASEPRI
    f45a:	f380 8812 	msr	BASEPRI_MAX, r0
    f45e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    f462:	68c9      	ldr	r1, [r1, #12]
    f464:	2000      	movs	r0, #0
    f466:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    f468:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    f46c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    f470:	f383 8811 	msr	BASEPRI, r3
    f474:	f3bf 8f6f 	isb	sy
}
    f478:	4770      	bx	lr

0000f47a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    f47a:	6903      	ldr	r3, [r0, #16]
    f47c:	68db      	ldr	r3, [r3, #12]
    f47e:	2201      	movs	r2, #1
    f480:	739a      	strb	r2, [r3, #14]
}
    f482:	4770      	bx	lr

0000f484 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    f484:	6903      	ldr	r3, [r0, #16]
    f486:	68db      	ldr	r3, [r3, #12]
    f488:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    f48a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    f48e:	b962      	cbnz	r2, f4aa <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    f490:	6842      	ldr	r2, [r0, #4]
    f492:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f494:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    f498:	b140      	cbz	r0, f4ac <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    f49a:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    f49e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    f4a2:	d003      	beq.n	f4ac <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    f4a4:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    f4a6:	2001      	movs	r0, #1
    f4a8:	4770      	bx	lr
    f4aa:	2000      	movs	r0, #0
}
    f4ac:	4770      	bx	lr

0000f4ae <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    f4ae:	6843      	ldr	r3, [r0, #4]
    f4b0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f4b2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    f4b6:	3800      	subs	r0, #0
    f4b8:	bf18      	it	ne
    f4ba:	2001      	movne	r0, #1
    f4bc:	4770      	bx	lr

0000f4be <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    f4be:	6843      	ldr	r3, [r0, #4]
    f4c0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f4c2:	2210      	movs	r2, #16
    f4c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f4c8:	4770      	bx	lr

0000f4ca <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    f4ca:	6843      	ldr	r3, [r0, #4]
    f4cc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    f4ce:	2210      	movs	r2, #16
    f4d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f4d4:	4770      	bx	lr

0000f4d6 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    f4d6:	6843      	ldr	r3, [r0, #4]
    f4d8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f4da:	f44f 7200 	mov.w	r2, #512	; 0x200
    f4de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f4e2:	4770      	bx	lr

0000f4e4 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    f4e4:	6843      	ldr	r3, [r0, #4]
    f4e6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    f4e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    f4ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f4f0:	4770      	bx	lr

0000f4f2 <uarte_nrfx_irq_update>:
}
    f4f2:	2001      	movs	r0, #1
    f4f4:	4770      	bx	lr

0000f4f6 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    f4f6:	6903      	ldr	r3, [r0, #16]
    f4f8:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    f4fa:	e9c3 1200 	strd	r1, r2, [r3]
}
    f4fe:	4770      	bx	lr

0000f500 <uarte_nrfx_irq_is_pending>:
{
    f500:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    f502:	6843      	ldr	r3, [r0, #4]
    f504:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    f506:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    f50a:	025b      	lsls	r3, r3, #9
{
    f50c:	4604      	mov	r4, r0
		||
    f50e:	d405      	bmi.n	f51c <uarte_nrfx_irq_is_pending+0x1c>
    f510:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    f514:	f010 0010 	ands.w	r0, r0, #16
    f518:	d106      	bne.n	f528 <uarte_nrfx_irq_is_pending+0x28>
}
    f51a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    f51c:	f7ff ffb2 	bl	f484 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    f520:	2800      	cmp	r0, #0
    f522:	d0f5      	beq.n	f510 <uarte_nrfx_irq_is_pending+0x10>
		||
    f524:	2001      	movs	r0, #1
    f526:	e7f8      	b.n	f51a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    f528:	4620      	mov	r0, r4
    f52a:	f7ff ffc0 	bl	f4ae <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    f52e:	3800      	subs	r0, #0
    f530:	bf18      	it	ne
    f532:	2001      	movne	r0, #1
    f534:	e7f1      	b.n	f51a <uarte_nrfx_irq_is_pending+0x1a>

0000f536 <nrf_gpio_cfg_input>:
{
    f536:	b507      	push	{r0, r1, r2, lr}
    f538:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f53a:	a801      	add	r0, sp, #4
    f53c:	f7f9 fbe8 	bl	8d10 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f540:	9b01      	ldr	r3, [sp, #4]
    f542:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f546:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    f548:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    f54c:	b003      	add	sp, #12
    f54e:	f85d fb04 	ldr.w	pc, [sp], #4

0000f552 <tx_start.isra.0>:
	return config->uarte_regs;
    f552:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f554:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f558:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f55c:	2200      	movs	r2, #0
    f55e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    f562:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    f566:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    f56a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f56e:	6842      	ldr	r2, [r0, #4]
    f570:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f572:	bf41      	itttt	mi
    f574:	2208      	movmi	r2, #8
    f576:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    f57a:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    f57e:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f582:	2201      	movs	r2, #1
    f584:	609a      	str	r2, [r3, #8]
}
    f586:	4770      	bx	lr

0000f588 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    f588:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    f58a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f58c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f590:	b940      	cbnz	r0, f5a4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f592:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f594:	079b      	lsls	r3, r3, #30
    f596:	d406      	bmi.n	f5a6 <is_tx_ready.isra.0+0x1e>
    f598:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    f59c:	3800      	subs	r0, #0
    f59e:	bf18      	it	ne
    f5a0:	2001      	movne	r0, #1
    f5a2:	4770      	bx	lr
    f5a4:	2001      	movs	r0, #1
}
    f5a6:	4770      	bx	lr

0000f5a8 <uarte_nrfx_fifo_fill>:
{
    f5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    f5aa:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    f5ac:	68f3      	ldr	r3, [r6, #12]
    f5ae:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f5b0:	f3bf 8f5b 	dmb	ish
    f5b4:	4294      	cmp	r4, r2
    f5b6:	bfa8      	it	ge
    f5b8:	4614      	movge	r4, r2
{
    f5ba:	4605      	mov	r5, r0
    f5bc:	3310      	adds	r3, #16
    f5be:	2201      	movs	r2, #1
    f5c0:	e853 0f00 	ldrex	r0, [r3]
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d103      	bne.n	f5d0 <uarte_nrfx_fifo_fill+0x28>
    f5c8:	e843 2700 	strex	r7, r2, [r3]
    f5cc:	2f00      	cmp	r7, #0
    f5ce:	d1f7      	bne.n	f5c0 <uarte_nrfx_fifo_fill+0x18>
    f5d0:	f3bf 8f5b 	dmb	ish
    f5d4:	bf0c      	ite	eq
    f5d6:	4613      	moveq	r3, r2
    f5d8:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    f5da:	d01d      	beq.n	f618 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    f5dc:	461c      	mov	r4, r3
}
    f5de:	4620      	mov	r0, r4
    f5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    f5e2:	68f2      	ldr	r2, [r6, #12]
    f5e4:	5cc8      	ldrb	r0, [r1, r3]
    f5e6:	6892      	ldr	r2, [r2, #8]
    f5e8:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    f5ea:	3301      	adds	r3, #1
    f5ec:	42a3      	cmp	r3, r4
    f5ee:	dbf8      	blt.n	f5e2 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    f5f0:	f04f 0320 	mov.w	r3, #32
    f5f4:	f3ef 8711 	mrs	r7, BASEPRI
    f5f8:	f383 8812 	msr	BASEPRI_MAX, r3
    f5fc:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    f600:	6868      	ldr	r0, [r5, #4]
    f602:	f7ff ffc1 	bl	f588 <is_tx_ready.isra.0>
    f606:	68f3      	ldr	r3, [r6, #12]
    f608:	b940      	cbnz	r0, f61c <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    f60a:	6118      	str	r0, [r3, #16]
		len = 0;
    f60c:	4604      	mov	r4, r0
	__asm__ volatile(
    f60e:	f387 8811 	msr	BASEPRI, r7
    f612:	f3bf 8f6f 	isb	sy
	return len;
    f616:	e7e2      	b.n	f5de <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    f618:	2300      	movs	r3, #0
    f61a:	e7e7      	b.n	f5ec <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    f61c:	6899      	ldr	r1, [r3, #8]
    f61e:	6868      	ldr	r0, [r5, #4]
    f620:	4622      	mov	r2, r4
    f622:	f7ff ff96 	bl	f552 <tx_start.isra.0>
    f626:	e7f2      	b.n	f60e <uarte_nrfx_fifo_fill+0x66>

0000f628 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    f628:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    f62a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    f62c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    f630:	05c9      	lsls	r1, r1, #23
{
    f632:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    f634:	d518      	bpl.n	f668 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f636:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    f63a:	b1a9      	cbz	r1, f668 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    f63c:	f04f 0420 	mov.w	r4, #32
    f640:	f3ef 8111 	mrs	r1, BASEPRI
    f644:	f384 8812 	msr	BASEPRI_MAX, r4
    f648:	f3bf 8f6f 	isb	sy
    f64c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f650:	b134      	cbz	r4, f660 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f652:	2400      	movs	r4, #0
    f654:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    f658:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f65c:	2401      	movs	r4, #1
    f65e:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    f660:	f381 8811 	msr	BASEPRI, r1
    f664:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f668:	6852      	ldr	r2, [r2, #4]
    f66a:	06d2      	lsls	r2, r2, #27
    f66c:	d51a      	bpl.n	f6a4 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    f66e:	f04f 0220 	mov.w	r2, #32
    f672:	f3ef 8111 	mrs	r1, BASEPRI
    f676:	f382 8812 	msr	BASEPRI_MAX, r2
    f67a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f67e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    f682:	b112      	cbz	r2, f68a <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f684:	2200      	movs	r2, #0
    f686:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    f68a:	6902      	ldr	r2, [r0, #16]
    f68c:	68d2      	ldr	r2, [r2, #12]
    f68e:	b10a      	cbz	r2, f694 <uarte_nrfx_isr_int+0x6c>
    f690:	6912      	ldr	r2, [r2, #16]
    f692:	b91a      	cbnz	r2, f69c <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    f694:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    f698:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    f69c:	f381 8811 	msr	BASEPRI, r1
    f6a0:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    f6a4:	6902      	ldr	r2, [r0, #16]
    f6a6:	68d2      	ldr	r2, [r2, #12]
    f6a8:	b15a      	cbz	r2, f6c2 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f6aa:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    f6ae:	b151      	cbz	r1, f6c6 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
    f6b0:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    f6b2:	2100      	movs	r1, #0
    f6b4:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    f6b6:	b134      	cbz	r4, f6c6 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    f6b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    f6bc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    f6c0:	7391      	strb	r1, [r2, #14]
}
    f6c2:	bc10      	pop	{r4}
    f6c4:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f6c6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    f6ca:	b121      	cbz	r1, f6d6 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6cc:	2100      	movs	r1, #0
    f6ce:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    f6d2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    f6d6:	6813      	ldr	r3, [r2, #0]
    f6d8:	2b00      	cmp	r3, #0
    f6da:	d0f2      	beq.n	f6c2 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    f6dc:	6851      	ldr	r1, [r2, #4]
}
    f6de:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    f6e0:	4718      	bx	r3

0000f6e2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    f6e2:	4770      	bx	lr

0000f6e4 <sys_clock_cycle_get_32>:
{
    f6e4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    f6e6:	f7f9 fd81 	bl	91ec <z_nrf_rtc_timer_read>
}
    f6ea:	bd08      	pop	{r3, pc}

0000f6ec <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f6ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    f6f0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    f6f4:	f1a0 0308 	sub.w	r3, r0, #8
    f6f8:	4258      	negs	r0, r3
    f6fa:	4158      	adcs	r0, r3
    f6fc:	4770      	bx	lr

0000f6fe <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    f6fe:	4700      	bx	r0

0000f700 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    f700:	f000 bc08 	b.w	ff14 <z_impl_k_busy_wait>

0000f704 <nrfx_clock_start>:
    switch (domain)
    f704:	b110      	cbz	r0, f70c <nrfx_clock_start+0x8>
    f706:	2801      	cmp	r0, #1
    f708:	d01d      	beq.n	f746 <nrfx_clock_start+0x42>
    f70a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f70c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f710:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f714:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    f718:	03c9      	lsls	r1, r1, #15
    f71a:	d512      	bpl.n	f742 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    f71c:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    f720:	2a01      	cmp	r2, #1
    f722:	d10e      	bne.n	f742 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f724:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f72c:	2200      	movs	r2, #0
    f72e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f732:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    f736:	2202      	movs	r2, #2
    f738:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f73c:	2201      	movs	r2, #1
    f73e:	609a      	str	r2, [r3, #8]
}
    f740:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    f742:	2200      	movs	r2, #0
    f744:	e7ee      	b.n	f724 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f74a:	2200      	movs	r2, #0
    f74c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f750:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    f754:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f758:	6018      	str	r0, [r3, #0]
}
    f75a:	4770      	bx	lr

0000f75c <nrf_gpio_reconfigure>:
{
    f75c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f75e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f760:	a801      	add	r0, sp, #4
{
    f762:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    f766:	4617      	mov	r7, r2
    f768:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f76a:	f7fa f8e9 	bl	9940 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f76e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    f770:	2f00      	cmp	r7, #0
    f772:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    f776:	bf14      	ite	ne
    f778:	2302      	movne	r3, #2
    f77a:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    f77c:	2900      	cmp	r1, #0
    f77e:	bf18      	it	ne
    f780:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    f784:	2d00      	cmp	r5, #0
    f786:	bf14      	ite	ne
    f788:	f04f 0c0c 	movne.w	ip, #12
    f78c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    f790:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    f792:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    f796:	bf14      	ite	ne
    f798:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    f79c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    f7a0:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    f7a2:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f7a6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    f7aa:	bf14      	ite	ne
    f7ac:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    f7b0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    f7b4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    f7b8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f7bc:	b101      	cbz	r1, f7c0 <nrf_gpio_reconfigure+0x64>
    f7be:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    f7c0:	b10f      	cbz	r7, f7c6 <nrf_gpio_reconfigure+0x6a>
    f7c2:	783f      	ldrb	r7, [r7, #0]
    f7c4:	007f      	lsls	r7, r7, #1
    f7c6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f7c8:	b10d      	cbz	r5, f7ce <nrf_gpio_reconfigure+0x72>
    f7ca:	782d      	ldrb	r5, [r5, #0]
    f7cc:	00ad      	lsls	r5, r5, #2
    f7ce:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    f7d0:	b10c      	cbz	r4, f7d6 <nrf_gpio_reconfigure+0x7a>
    f7d2:	7822      	ldrb	r2, [r4, #0]
    f7d4:	0214      	lsls	r4, r2, #8
    f7d6:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    f7d8:	b10e      	cbz	r6, f7de <nrf_gpio_reconfigure+0x82>
    f7da:	7836      	ldrb	r6, [r6, #0]
    f7dc:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f7de:	432c      	orrs	r4, r5
    f7e0:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    f7e2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    f7e6:	b003      	add	sp, #12
    f7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f7ea <nrf_gpio_cfg_sense_set>:
{
    f7ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    f7ec:	f10d 030f 	add.w	r3, sp, #15
    f7f0:	9301      	str	r3, [sp, #4]
    f7f2:	2300      	movs	r3, #0
{
    f7f4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    f7f8:	9300      	str	r3, [sp, #0]
    f7fa:	461a      	mov	r2, r3
    f7fc:	4619      	mov	r1, r3
    f7fe:	f7ff ffad 	bl	f75c <nrf_gpio_reconfigure>
}
    f802:	b005      	add	sp, #20
    f804:	f85d fb04 	ldr.w	pc, [sp], #4

0000f808 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f808:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    f80c:	681a      	ldr	r2, [r3, #0]
    f80e:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f810:	bf1f      	itttt	ne
    f812:	2200      	movne	r2, #0
    f814:	601a      	strne	r2, [r3, #0]
    f816:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f818:	2001      	movne	r0, #1
    f81a:	bf08      	it	eq
    f81c:	2000      	moveq	r0, #0
}
    f81e:	4770      	bx	lr

0000f820 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    f820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f824:	f44f 7260 	mov.w	r2, #896	; 0x380
    f828:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f82c:	4770      	bx	lr

0000f82e <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    f82e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f832:	f44f 7260 	mov.w	r2, #896	; 0x380
    f836:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f83a:	4770      	bx	lr

0000f83c <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    f83c:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    f83e:	f7fa fc2f 	bl	a0a0 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    f842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    f846:	f7fa b847 	b.w	98d8 <nrfx_clock_irq_handler>

0000f84a <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f84a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    f84e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    f852:	f1a0 0308 	sub.w	r3, r0, #8
    f856:	4258      	negs	r0, r3
    f858:	4158      	adcs	r0, r3
    f85a:	4770      	bx	lr

0000f85c <nrfx_usbd_consumer>:
{
    f85c:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    f85e:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    f860:	680d      	ldr	r5, [r1, #0]
    f862:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    f864:	bf97      	itett	ls
    f866:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    f86a:	2100      	movhi	r1, #0
        size -= data_size;
    f86c:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    f86e:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    f870:	bf8e      	itee	hi
    f872:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    f876:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    f878:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    f87a:	429a      	cmp	r2, r3
    f87c:	d103      	bne.n	f886 <nrfx_usbd_consumer+0x2a>
    f87e:	1e20      	subs	r0, r4, #0
    f880:	bf18      	it	ne
    f882:	2001      	movne	r0, #1
}
    f884:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    f886:	2000      	movs	r0, #0
    f888:	e7fc      	b.n	f884 <nrfx_usbd_consumer+0x28>

0000f88a <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    f88a:	684b      	ldr	r3, [r1, #4]
{
    f88c:	b510      	push	{r4, lr}
    f88e:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    f890:	680c      	ldr	r4, [r1, #0]
    f892:	bf28      	it	cs
    f894:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    f896:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    f89a:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    f89c:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    f89e:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    f8a0:	441a      	add	r2, r3
}
    f8a2:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    f8a4:	600a      	str	r2, [r1, #0]
}
    f8a6:	bf18      	it	ne
    f8a8:	2001      	movne	r0, #1
    f8aa:	bd10      	pop	{r4, pc}

0000f8ac <nrfx_usbd_feeder_ram_zlp>:
{
    f8ac:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    f8ae:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    f8b0:	680b      	ldr	r3, [r1, #0]
    f8b2:	42a2      	cmp	r2, r4
    f8b4:	bf28      	it	cs
    f8b6:	4622      	movcs	r2, r4
    f8b8:	2a00      	cmp	r2, #0
    f8ba:	bf14      	ite	ne
    f8bc:	461d      	movne	r5, r3
    f8be:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    f8c0:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    f8c4:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    f8c8:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    f8ca:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    f8cc:	600a      	str	r2, [r1, #0]
}
    f8ce:	bf14      	ite	ne
    f8d0:	2001      	movne	r0, #1
    f8d2:	2000      	moveq	r0, #0
    f8d4:	bd30      	pop	{r4, r5, pc}

0000f8d6 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    f8d6:	f010 0f80 	tst.w	r0, #128	; 0x80
    f8da:	bf14      	ite	ne
    f8dc:	2300      	movne	r3, #0
    f8de:	2310      	moveq	r3, #16
    f8e0:	f000 000f 	and.w	r0, r0, #15
}
    f8e4:	4418      	add	r0, r3
    f8e6:	4770      	bx	lr

0000f8e8 <ev_started_handler>:
}
    f8e8:	4770      	bx	lr

0000f8ea <nrf_usbd_epin_dma_handler>:
{
    f8ea:	b508      	push	{r3, lr}
    f8ec:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    f8ee:	f7fa fc4f 	bl	a190 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    f8f2:	4608      	mov	r0, r1
    f8f4:	f7fa fc3e 	bl	a174 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f8f8:	7b83      	ldrb	r3, [r0, #14]
    f8fa:	2b03      	cmp	r3, #3
    f8fc:	d10a      	bne.n	f914 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f8fe:	4608      	mov	r0, r1
    f900:	f7ff ffe9 	bl	f8d6 <ep2bit>
    f904:	2301      	movs	r3, #1
    f906:	fa03 f000 	lsl.w	r0, r3, r0
    f90a:	43c0      	mvns	r0, r0
}
    f90c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f910:	f7fa bd4e 	b.w	a3b0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    f914:	6803      	ldr	r3, [r0, #0]
    f916:	2b00      	cmp	r3, #0
    f918:	d0f1      	beq.n	f8fe <nrf_usbd_epin_dma_handler+0x14>
}
    f91a:	bd08      	pop	{r3, pc}

0000f91c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    f91c:	2087      	movs	r0, #135	; 0x87
    f91e:	f7ff bfe4 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f922 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    f922:	2086      	movs	r0, #134	; 0x86
    f924:	f7ff bfe1 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f928 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    f928:	2085      	movs	r0, #133	; 0x85
    f92a:	f7ff bfde 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f92e <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    f92e:	2084      	movs	r0, #132	; 0x84
    f930:	f7ff bfdb 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f934 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    f934:	2083      	movs	r0, #131	; 0x83
    f936:	f7ff bfd8 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f93a <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    f93a:	2082      	movs	r0, #130	; 0x82
    f93c:	f7ff bfd5 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f940 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    f940:	2081      	movs	r0, #129	; 0x81
    f942:	f7ff bfd2 	b.w	f8ea <nrf_usbd_epin_dma_handler>

0000f946 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    f946:	f7fa bd43 	b.w	a3d0 <nrf_usbd_ep0in_dma_handler>

0000f94a <nrfx_usbd_ep_max_packet_size_set>:
{
    f94a:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    f94c:	f7fa fc12 	bl	a174 <ep_state_access>
    p_state->max_packet_size = size;
    f950:	8181      	strh	r1, [r0, #12]
}
    f952:	bd08      	pop	{r3, pc}

0000f954 <nrfx_usbd_ep_status_get>:
{
    f954:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    f956:	f7fa fc0d 	bl	a174 <ep_state_access>
	__asm__ volatile(
    f95a:	f04f 0220 	mov.w	r2, #32
    f95e:	f3ef 8311 	mrs	r3, BASEPRI
    f962:	f382 8812 	msr	BASEPRI_MAX, r2
    f966:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    f96a:	6882      	ldr	r2, [r0, #8]
    f96c:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    f96e:	6802      	ldr	r2, [r0, #0]
    f970:	b92a      	cbnz	r2, f97e <nrfx_usbd_ep_status_get+0x2a>
    f972:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    f974:	f383 8811 	msr	BASEPRI, r3
    f978:	f3bf 8f6f 	isb	sy
}
    f97c:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    f97e:	2004      	movs	r0, #4
    f980:	e7f8      	b.n	f974 <nrfx_usbd_ep_status_get+0x20>

0000f982 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    f982:	2007      	movs	r0, #7
    f984:	f7fb b85c 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f988 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    f988:	2006      	movs	r0, #6
    f98a:	f7fb b859 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f98e <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    f98e:	2005      	movs	r0, #5
    f990:	f7fb b856 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f994 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    f994:	2004      	movs	r0, #4
    f996:	f7fb b853 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f99a <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    f99a:	2003      	movs	r0, #3
    f99c:	f7fb b850 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f9a0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    f9a0:	2002      	movs	r0, #2
    f9a2:	f7fb b84d 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f9a6 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    f9a6:	2001      	movs	r0, #1
    f9a8:	f7fb b84a 	b.w	aa40 <nrf_usbd_epout_dma_handler>

0000f9ac <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    f9ac:	f7fb b93e 	b.w	ac2c <usbd_ep_abort>

0000f9b0 <z_device_state_init>:
}
    f9b0:	4770      	bx	lr

0000f9b2 <z_device_is_ready>:
	if (dev == NULL) {
    f9b2:	b138      	cbz	r0, f9c4 <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
    f9b4:	68c3      	ldr	r3, [r0, #12]
    f9b6:	8818      	ldrh	r0, [r3, #0]
    f9b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    f9bc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    f9c0:	4258      	negs	r0, r3
    f9c2:	4158      	adcs	r0, r3
}
    f9c4:	4770      	bx	lr

0000f9c6 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
    f9c6:	6940      	ldr	r0, [r0, #20]
{
    f9c8:	b470      	push	{r4, r5, r6}
    f9ca:	4613      	mov	r3, r2
    f9cc:	460d      	mov	r5, r1
	if (rv != NULL) {
    f9ce:	b960      	cbnz	r0, f9ea <device_required_foreach+0x24>
	size_t handle_count = 0;
    f9d0:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
    f9d2:	462a      	mov	r2, r5
}
    f9d4:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    f9d6:	f7fb bb37 	b.w	b048 <device_visitor>
			++i;
    f9da:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    f9dc:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    f9e0:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    f9e2:	b2a4      	uxth	r4, r4
    f9e4:	4294      	cmp	r4, r2
    f9e6:	d9f8      	bls.n	f9da <device_required_foreach+0x14>
    f9e8:	e7f3      	b.n	f9d2 <device_required_foreach+0xc>
		size_t i = 0;
    f9ea:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    f9ec:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    f9f0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    f9f4:	e7f2      	b.n	f9dc <device_required_foreach+0x16>

0000f9f6 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    f9f6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    f9f8:	ab0a      	add	r3, sp, #40	; 0x28
    f9fa:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    f9fc:	9302      	str	r3, [sp, #8]
    f9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa00:	9301      	str	r3, [sp, #4]
    fa02:	2300      	movs	r3, #0
    fa04:	9300      	str	r3, [sp, #0]
    fa06:	2201      	movs	r2, #1
    fa08:	4618      	mov	r0, r3
    fa0a:	f7f3 f883 	bl	2b14 <z_impl_z_log_msg2_runtime_vcreate>
}
    fa0e:	b007      	add	sp, #28
    fa10:	f85d fb04 	ldr.w	pc, [sp], #4

0000fa14 <arch_system_halt>:
	__asm__ volatile(
    fa14:	f04f 0220 	mov.w	r2, #32
    fa18:	f3ef 8311 	mrs	r3, BASEPRI
    fa1c:	f382 8812 	msr	BASEPRI_MAX, r2
    fa20:	f3bf 8f6f 	isb	sy
	for (;;) {
    fa24:	e7fe      	b.n	fa24 <arch_system_halt+0x10>

0000fa26 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    fa26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa28:	4604      	mov	r4, r0
    fa2a:	460d      	mov	r5, r1
    fa2c:	f04f 0320 	mov.w	r3, #32
    fa30:	f3ef 8611 	mrs	r6, BASEPRI
    fa34:	f383 8812 	msr	BASEPRI_MAX, r3
    fa38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    fa3c:	6947      	ldr	r7, [r0, #20]
    fa3e:	b97f      	cbnz	r7, fa60 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    fa40:	f000 f9dc 	bl	fdfc <z_unpend_first_thread>

		if (pending_thread != NULL) {
    fa44:	b160      	cbz	r0, fa60 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    fa46:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    fa48:	6142      	str	r2, [r0, #20]
    fa4a:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
    fa4e:	f000 f964 	bl	fd1a <z_ready_thread>
			z_reschedule(&slab->lock, key);
    fa52:	4631      	mov	r1, r6
    fa54:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    fa58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    fa5c:	f7fc b934 	b.w	bcc8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    fa60:	682b      	ldr	r3, [r5, #0]
    fa62:	6962      	ldr	r2, [r4, #20]
    fa64:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    fa66:	682b      	ldr	r3, [r5, #0]
    fa68:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    fa6a:	69a3      	ldr	r3, [r4, #24]
    fa6c:	3b01      	subs	r3, #1
    fa6e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    fa70:	f386 8811 	msr	BASEPRI, r6
    fa74:	f3bf 8f6f 	isb	sy
}
    fa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fa7a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fa7a:	f3ef 8005 	mrs	r0, IPSR
}
    fa7e:	3800      	subs	r0, #0
    fa80:	bf18      	it	ne
    fa82:	2001      	movne	r0, #1
    fa84:	4770      	bx	lr

0000fa86 <k_thread_name_get>:
}
    fa86:	3078      	adds	r0, #120	; 0x78
    fa88:	4770      	bx	lr

0000fa8a <z_impl_k_thread_start>:
	z_sched_start(thread);
    fa8a:	f7fc ba13 	b.w	beb4 <z_sched_start>

0000fa8e <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    fa8e:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
    fa90:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
    fa94:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    fa96:	4293      	cmp	r3, r2
    fa98:	d102      	bne.n	faa0 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    fa9a:	600b      	str	r3, [r1, #0]

	return 0;
}
    fa9c:	2000      	movs	r0, #0
    fa9e:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    faa0:	5ce0      	ldrb	r0, [r4, r3]
    faa2:	28aa      	cmp	r0, #170	; 0xaa
    faa4:	d1f9      	bne.n	fa9a <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    faa6:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    faa8:	e7f5      	b.n	fa96 <z_impl_k_thread_stack_space_get+0x8>

0000faaa <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    faaa:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
    faae:	4770      	bx	lr

0000fab0 <z_pm_save_idle_exit>:
{
    fab0:	b508      	push	{r3, lr}
	pm_system_resume();
    fab2:	f7f6 fd2d 	bl	6510 <pm_system_resume>
}
    fab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    faba:	f7ff be12 	b.w	f6e2 <sys_clock_idle_exit>

0000fabe <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    fabe:	f990 300e 	ldrsb.w	r3, [r0, #14]
    fac2:	428b      	cmp	r3, r1
    fac4:	d001      	beq.n	faca <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    fac6:	f7fc ba65 	b.w	bf94 <z_set_prio>
}
    faca:	2000      	movs	r0, #0
    facc:	4770      	bx	lr

0000face <z_impl_k_mutex_init>:
{
    face:	4603      	mov	r3, r0
	mutex->owner = NULL;
    fad0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    fad2:	e9c3 0002 	strd	r0, r0, [r3, #8]
    fad6:	e9c3 3300 	strd	r3, r3, [r3]
}
    fada:	4770      	bx	lr

0000fadc <queue_insert>:
{
    fadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fae0:	4699      	mov	r9, r3
    fae2:	4604      	mov	r4, r0
    fae4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fae8:	460d      	mov	r5, r1
    faea:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    faec:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    faf0:	f04f 0220 	mov.w	r2, #32
    faf4:	f3ef 8711 	mrs	r7, BASEPRI
    faf8:	f382 8812 	msr	BASEPRI_MAX, r2
    fafc:	f3bf 8f6f 	isb	sy
	if (is_append) {
    fb00:	b103      	cbz	r3, fb04 <queue_insert+0x28>
	return list->tail;
    fb02:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    fb04:	4630      	mov	r0, r6
    fb06:	f000 f979 	bl	fdfc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    fb0a:	b160      	cbz	r0, fb26 <queue_insert+0x4a>
    fb0c:	2400      	movs	r4, #0
    fb0e:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    fb12:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    fb16:	f000 f900 	bl	fd1a <z_ready_thread>
	z_reschedule(&queue->lock, key);
    fb1a:	4630      	mov	r0, r6
    fb1c:	4639      	mov	r1, r7
    fb1e:	f7fc f8d3 	bl	bcc8 <z_reschedule>
	return 0;
    fb22:	2000      	movs	r0, #0
    fb24:	e00c      	b.n	fb40 <queue_insert+0x64>
	if (alloc) {
    fb26:	f1b9 0f00 	cmp.w	r9, #0
    fb2a:	d01b      	beq.n	fb64 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    fb2c:	2108      	movs	r1, #8
    fb2e:	f7fc fe63 	bl	c7f8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    fb32:	b938      	cbnz	r0, fb44 <queue_insert+0x68>
	__asm__ volatile(
    fb34:	f387 8811 	msr	BASEPRI, r7
    fb38:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    fb3c:	f06f 000b 	mvn.w	r0, #11
}
    fb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    fb44:	2301      	movs	r3, #1
		anode->data = data;
    fb46:	f8c0 8004 	str.w	r8, [r0, #4]
    fb4a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fb4c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb4e:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    fb52:	b95d      	cbnz	r5, fb6c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb54:	6823      	ldr	r3, [r4, #0]
    fb56:	4313      	orrs	r3, r2
    fb58:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    fb5a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    fb5c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    fb5e:	b973      	cbnz	r3, fb7e <queue_insert+0xa2>
	list->tail = node;
    fb60:	6060      	str	r0, [r4, #4]
}
    fb62:	e00c      	b.n	fb7e <queue_insert+0xa2>
	node->next_and_flags = flags;
    fb64:	f8c8 9000 	str.w	r9, [r8]
}
    fb68:	4640      	mov	r0, r8
    fb6a:	e7ef      	b.n	fb4c <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fb6c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    fb6e:	f033 0303 	bics.w	r3, r3, #3
    fb72:	d110      	bne.n	fb96 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb74:	6002      	str	r2, [r0, #0]
	return list->tail;
    fb76:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    fb78:	b93a      	cbnz	r2, fb8a <queue_insert+0xae>
	list->head = node;
    fb7a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    fb7e:	2104      	movs	r1, #4
    fb80:	f104 0010 	add.w	r0, r4, #16
    fb84:	f000 fb5c 	bl	10240 <z_handle_obj_poll_events>
    fb88:	e7c7      	b.n	fb1a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fb8a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb8c:	f003 0303 	and.w	r3, r3, #3
    fb90:	4303      	orrs	r3, r0
    fb92:	6013      	str	r3, [r2, #0]
    fb94:	e7e4      	b.n	fb60 <queue_insert+0x84>
    fb96:	4313      	orrs	r3, r2
    fb98:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fb9a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb9c:	f003 0303 	and.w	r3, r3, #3
    fba0:	4303      	orrs	r3, r0
    fba2:	602b      	str	r3, [r5, #0]
}
    fba4:	e7eb      	b.n	fb7e <queue_insert+0xa2>

0000fba6 <z_queue_node_peek>:
{
    fba6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    fba8:	4604      	mov	r4, r0
    fbaa:	b130      	cbz	r0, fbba <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fbac:	6802      	ldr	r2, [r0, #0]
    fbae:	0793      	lsls	r3, r2, #30
    fbb0:	d003      	beq.n	fbba <z_queue_node_peek+0x14>
		ret = anode->data;
    fbb2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    fbb4:	b109      	cbz	r1, fbba <z_queue_node_peek+0x14>
			k_free(anode);
    fbb6:	f000 fb5e 	bl	10276 <k_free>
}
    fbba:	4620      	mov	r0, r4
    fbbc:	bd10      	pop	{r4, pc}

0000fbbe <k_queue_append>:
{
    fbbe:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    fbc0:	2301      	movs	r3, #1
    fbc2:	9300      	str	r3, [sp, #0]
    fbc4:	2300      	movs	r3, #0
{
    fbc6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    fbc8:	4619      	mov	r1, r3
    fbca:	f7ff ff87 	bl	fadc <queue_insert>
}
    fbce:	b003      	add	sp, #12
    fbd0:	f85d fb04 	ldr.w	pc, [sp], #4

0000fbd4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    fbd4:	b15a      	cbz	r2, fbee <z_impl_k_sem_init+0x1a>
    fbd6:	428a      	cmp	r2, r1
    fbd8:	d309      	bcc.n	fbee <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    fbda:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    fbde:	e9c0 1202 	strd	r1, r2, [r0, #8]
    fbe2:	e9c0 0000 	strd	r0, r0, [r0]
    fbe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    fbea:	2000      	movs	r0, #0
    fbec:	4770      	bx	lr
		return -EINVAL;
    fbee:	f06f 0015 	mvn.w	r0, #21
}
    fbf2:	4770      	bx	lr

0000fbf4 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    fbf4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    fbf6:	2301      	movs	r3, #1
    fbf8:	408b      	lsls	r3, r1
    fbfa:	ea22 0303 	bic.w	r3, r2, r3
    fbfe:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    fc00:	fa22 f001 	lsr.w	r0, r2, r1
}
    fc04:	f000 0001 	and.w	r0, r0, #1
    fc08:	4770      	bx	lr

0000fc0a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    fc0a:	b120      	cbz	r0, fc16 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    fc0c:	2200      	movs	r2, #0
    fc0e:	4611      	mov	r1, r2
    fc10:	30c0      	adds	r0, #192	; 0xc0
    fc12:	f000 b91b 	b.w	fe4c <z_sched_wake>
}
    fc16:	4770      	bx	lr

0000fc18 <k_work_init>:
{
    fc18:	b538      	push	{r3, r4, r5, lr}
    fc1a:	4604      	mov	r4, r0
    fc1c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    fc1e:	2210      	movs	r2, #16
    fc20:	2100      	movs	r1, #0
    fc22:	f7ff fa3a 	bl	f09a <memset>
    fc26:	6065      	str	r5, [r4, #4]
}
    fc28:	bd38      	pop	{r3, r4, r5, pc}

0000fc2a <k_work_submit_to_queue>:
{
    fc2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fc2c:	9001      	str	r0, [sp, #4]
    fc2e:	4608      	mov	r0, r1
	__asm__ volatile(
    fc30:	f04f 0320 	mov.w	r3, #32
    fc34:	f3ef 8511 	mrs	r5, BASEPRI
    fc38:	f383 8812 	msr	BASEPRI_MAX, r3
    fc3c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    fc40:	a901      	add	r1, sp, #4
    fc42:	f7fb ff73 	bl	bb2c <submit_to_queue_locked>
    fc46:	4604      	mov	r4, r0
	__asm__ volatile(
    fc48:	f385 8811 	msr	BASEPRI, r5
    fc4c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    fc50:	2800      	cmp	r0, #0
    fc52:	dd04      	ble.n	fc5e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    fc54:	f7fc fae8 	bl	c228 <z_impl_k_is_preempt_thread>
    fc58:	b108      	cbz	r0, fc5e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    fc5a:	f7fc fa3d 	bl	c0d8 <z_impl_k_yield>
}
    fc5e:	4620      	mov	r0, r4
    fc60:	b003      	add	sp, #12
    fc62:	bd30      	pop	{r4, r5, pc}

0000fc64 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    fc64:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    fc68:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fc6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fc6c:	2300      	movs	r3, #0
	node->prev = NULL;
    fc6e:	e9c0 3300 	strd	r3, r3, [r0]
}
    fc72:	4770      	bx	lr

0000fc74 <unpend_thread_no_timeout>:
{
    fc74:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    fc76:	f7ff fff5 	bl	fc64 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fc7a:	7b43      	ldrb	r3, [r0, #13]
    fc7c:	f023 0302 	bic.w	r3, r3, #2
    fc80:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    fc82:	2300      	movs	r3, #0
    fc84:	6083      	str	r3, [r0, #8]
}
    fc86:	bd08      	pop	{r3, pc}

0000fc88 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    fc88:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    fc8c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    fc90:	4283      	cmp	r3, r0
		return b2 - b1;
    fc92:	bf14      	ite	ne
    fc94:	1ac0      	subne	r0, r0, r3
	return 0;
    fc96:	2000      	moveq	r0, #0
}
    fc98:	4770      	bx	lr

0000fc9a <z_unpend_thread_no_timeout>:
{
    fc9a:	b508      	push	{r3, lr}
	__asm__ volatile(
    fc9c:	f04f 0320 	mov.w	r3, #32
    fca0:	f3ef 8111 	mrs	r1, BASEPRI
    fca4:	f383 8812 	msr	BASEPRI_MAX, r3
    fca8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    fcac:	f7ff ffe2 	bl	fc74 <unpend_thread_no_timeout>
	__asm__ volatile(
    fcb0:	f381 8811 	msr	BASEPRI, r1
    fcb4:	f3bf 8f6f 	isb	sy
}
    fcb8:	bd08      	pop	{r3, pc}

0000fcba <z_unpend_thread>:
{
    fcba:	b510      	push	{r4, lr}
	__asm__ volatile(
    fcbc:	f04f 0320 	mov.w	r3, #32
    fcc0:	f3ef 8411 	mrs	r4, BASEPRI
    fcc4:	f383 8812 	msr	BASEPRI_MAX, r3
    fcc8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    fccc:	f7ff ffd2 	bl	fc74 <unpend_thread_no_timeout>
	__asm__ volatile(
    fcd0:	f384 8811 	msr	BASEPRI, r4
    fcd4:	f3bf 8f6f 	isb	sy
}
    fcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcdc:	3018      	adds	r0, #24
    fcde:	f000 b8d3 	b.w	fe88 <z_abort_timeout>

0000fce2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fce2:	4603      	mov	r3, r0
    fce4:	b920      	cbnz	r0, fcf0 <z_reschedule_irqlock+0xe>
    fce6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    fcea:	b90a      	cbnz	r2, fcf0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    fcec:	f7f6 be2a 	b.w	6944 <arch_swap>
    fcf0:	f383 8811 	msr	BASEPRI, r3
    fcf4:	f3bf 8f6f 	isb	sy
}
    fcf8:	4770      	bx	lr

0000fcfa <z_reschedule_unlocked>:
	__asm__ volatile(
    fcfa:	f04f 0320 	mov.w	r3, #32
    fcfe:	f3ef 8011 	mrs	r0, BASEPRI
    fd02:	f383 8812 	msr	BASEPRI_MAX, r3
    fd06:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fd0a:	f7ff bfea 	b.w	fce2 <z_reschedule_irqlock>

0000fd0e <z_priq_dumb_best>:
{
    fd0e:	4603      	mov	r3, r0
	return list->head == list;
    fd10:	6800      	ldr	r0, [r0, #0]
}
    fd12:	4283      	cmp	r3, r0
    fd14:	bf08      	it	eq
    fd16:	2000      	moveq	r0, #0
    fd18:	4770      	bx	lr

0000fd1a <z_ready_thread>:
{
    fd1a:	b510      	push	{r4, lr}
    fd1c:	f04f 0320 	mov.w	r3, #32
    fd20:	f3ef 8411 	mrs	r4, BASEPRI
    fd24:	f383 8812 	msr	BASEPRI_MAX, r3
    fd28:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    fd2c:	f7fc f88c 	bl	be48 <ready_thread>
	__asm__ volatile(
    fd30:	f384 8811 	msr	BASEPRI, r4
    fd34:	f3bf 8f6f 	isb	sy
}
    fd38:	bd10      	pop	{r4, pc}

0000fd3a <z_thread_timeout>:
{
    fd3a:	b510      	push	{r4, lr}
    fd3c:	4601      	mov	r1, r0
	__asm__ volatile(
    fd3e:	f04f 0320 	mov.w	r3, #32
    fd42:	f3ef 8411 	mrs	r4, BASEPRI
    fd46:	f383 8812 	msr	BASEPRI_MAX, r3
    fd4a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    fd4e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    fd52:	f013 0f28 	tst.w	r3, #40	; 0x28
    fd56:	d10d      	bne.n	fd74 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    fd58:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    fd5c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    fd5e:	b10b      	cbz	r3, fd64 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    fd60:	f7ff ff88 	bl	fc74 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    fd64:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    fd68:	f023 0314 	bic.w	r3, r3, #20
    fd6c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    fd70:	f7fc f86a 	bl	be48 <ready_thread>
	__asm__ volatile(
    fd74:	f384 8811 	msr	BASEPRI, r4
    fd78:	f3bf 8f6f 	isb	sy
}
    fd7c:	bd10      	pop	{r4, pc}

0000fd7e <add_to_waitq_locked>:
{
    fd7e:	b538      	push	{r3, r4, r5, lr}
    fd80:	4604      	mov	r4, r0
    fd82:	460d      	mov	r5, r1
	unready_thread(thread);
    fd84:	f7fc f8b4 	bl	bef0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    fd88:	7b63      	ldrb	r3, [r4, #13]
    fd8a:	f043 0302 	orr.w	r3, r3, #2
    fd8e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    fd90:	b195      	cbz	r5, fdb8 <add_to_waitq_locked+0x3a>
    fd92:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    fd94:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd96:	429d      	cmp	r5, r3
    fd98:	d015      	beq.n	fdc6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fd9a:	b1a3      	cbz	r3, fdc6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    fd9c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    fda0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    fda4:	4291      	cmp	r1, r2
    fda6:	d008      	beq.n	fdba <add_to_waitq_locked+0x3c>
		return b2 - b1;
    fda8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    fdaa:	2a00      	cmp	r2, #0
    fdac:	dd05      	ble.n	fdba <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    fdae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fdb0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    fdb4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fdb6:	605c      	str	r4, [r3, #4]
}
    fdb8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    fdba:	686a      	ldr	r2, [r5, #4]
    fdbc:	4293      	cmp	r3, r2
    fdbe:	d002      	beq.n	fdc6 <add_to_waitq_locked+0x48>
    fdc0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fdc2:	2b00      	cmp	r3, #0
    fdc4:	d1ec      	bne.n	fda0 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    fdc6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    fdc8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    fdcc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fdce:	606c      	str	r4, [r5, #4]
}
    fdd0:	e7f2      	b.n	fdb8 <add_to_waitq_locked+0x3a>

0000fdd2 <z_unpend1_no_timeout>:
{
    fdd2:	b510      	push	{r4, lr}
	__asm__ volatile(
    fdd4:	f04f 0320 	mov.w	r3, #32
    fdd8:	f3ef 8411 	mrs	r4, BASEPRI
    fddc:	f383 8812 	msr	BASEPRI_MAX, r3
    fde0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    fde4:	f7ff ff93 	bl	fd0e <z_priq_dumb_best>
		if (thread != NULL) {
    fde8:	4601      	mov	r1, r0
    fdea:	b108      	cbz	r0, fdf0 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    fdec:	f7ff ff42 	bl	fc74 <unpend_thread_no_timeout>
	__asm__ volatile(
    fdf0:	f384 8811 	msr	BASEPRI, r4
    fdf4:	f3bf 8f6f 	isb	sy
}
    fdf8:	4608      	mov	r0, r1
    fdfa:	bd10      	pop	{r4, pc}

0000fdfc <z_unpend_first_thread>:
{
    fdfc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fdfe:	f04f 0320 	mov.w	r3, #32
    fe02:	f3ef 8511 	mrs	r5, BASEPRI
    fe06:	f383 8812 	msr	BASEPRI_MAX, r3
    fe0a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    fe0e:	f7ff ff7e 	bl	fd0e <z_priq_dumb_best>
		if (thread != NULL) {
    fe12:	4604      	mov	r4, r0
    fe14:	b120      	cbz	r0, fe20 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    fe16:	f7ff ff2d 	bl	fc74 <unpend_thread_no_timeout>
    fe1a:	3018      	adds	r0, #24
    fe1c:	f000 f834 	bl	fe88 <z_abort_timeout>
	__asm__ volatile(
    fe20:	f385 8811 	msr	BASEPRI, r5
    fe24:	f3bf 8f6f 	isb	sy
}
    fe28:	4620      	mov	r0, r4
    fe2a:	bd38      	pop	{r3, r4, r5, pc}

0000fe2c <z_unpend_all>:
{
    fe2c:	b538      	push	{r3, r4, r5, lr}
    fe2e:	4605      	mov	r5, r0
	int need_sched = 0;
    fe30:	2000      	movs	r0, #0
	return list->head == list;
    fe32:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe34:	42a5      	cmp	r5, r4
    fe36:	d000      	beq.n	fe3a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fe38:	b904      	cbnz	r4, fe3c <z_unpend_all+0x10>
}
    fe3a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    fe3c:	4620      	mov	r0, r4
    fe3e:	f7ff ff3c 	bl	fcba <z_unpend_thread>
		z_ready_thread(thread);
    fe42:	4620      	mov	r0, r4
    fe44:	f7ff ff69 	bl	fd1a <z_ready_thread>
		need_sched = 1;
    fe48:	2001      	movs	r0, #1
    fe4a:	e7f2      	b.n	fe32 <z_unpend_all+0x6>

0000fe4c <z_sched_wake>:
{
    fe4c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fe4e:	f04f 0320 	mov.w	r3, #32
    fe52:	f3ef 8511 	mrs	r5, BASEPRI
    fe56:	f383 8812 	msr	BASEPRI_MAX, r3
    fe5a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    fe5e:	f7ff ff56 	bl	fd0e <z_priq_dumb_best>
		if (thread != NULL) {
    fe62:	4604      	mov	r4, r0
    fe64:	b158      	cbz	r0, fe7e <z_sched_wake+0x32>
    fe66:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
    fe6a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    fe6c:	f7ff ff02 	bl	fc74 <unpend_thread_no_timeout>
    fe70:	3018      	adds	r0, #24
    fe72:	f000 f809 	bl	fe88 <z_abort_timeout>
			ready_thread(thread);
    fe76:	4620      	mov	r0, r4
    fe78:	f7fb ffe6 	bl	be48 <ready_thread>
			ret = true;
    fe7c:	2001      	movs	r0, #1
	__asm__ volatile(
    fe7e:	f385 8811 	msr	BASEPRI, r5
    fe82:	f3bf 8f6f 	isb	sy
}
    fe86:	bd38      	pop	{r3, r4, r5, pc}

0000fe88 <z_abort_timeout>:
{
    fe88:	b510      	push	{r4, lr}
	__asm__ volatile(
    fe8a:	f04f 0220 	mov.w	r2, #32
    fe8e:	f3ef 8411 	mrs	r4, BASEPRI
    fe92:	f382 8812 	msr	BASEPRI_MAX, r2
    fe96:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    fe9a:	6803      	ldr	r3, [r0, #0]
    fe9c:	b13b      	cbz	r3, feae <z_abort_timeout+0x26>
			remove_timeout(to);
    fe9e:	f7fc fa85 	bl	c3ac <remove_timeout>
			ret = 0;
    fea2:	2000      	movs	r0, #0
	__asm__ volatile(
    fea4:	f384 8811 	msr	BASEPRI, r4
    fea8:	f3bf 8f6f 	isb	sy
}
    feac:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    feae:	f06f 0015 	mvn.w	r0, #21
    feb2:	e7f7      	b.n	fea4 <z_abort_timeout+0x1c>

0000feb4 <z_get_next_timeout_expiry>:
{
    feb4:	b510      	push	{r4, lr}
	__asm__ volatile(
    feb6:	f04f 0320 	mov.w	r3, #32
    feba:	f3ef 8411 	mrs	r4, BASEPRI
    febe:	f383 8812 	msr	BASEPRI_MAX, r3
    fec2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    fec6:	f7fc fa4b 	bl	c360 <next_timeout>
	__asm__ volatile(
    feca:	f384 8811 	msr	BASEPRI, r4
    fece:	f3bf 8f6f 	isb	sy
}
    fed2:	bd10      	pop	{r4, pc}

0000fed4 <z_set_timeout_expiry>:
{
    fed4:	b570      	push	{r4, r5, r6, lr}
    fed6:	4604      	mov	r4, r0
    fed8:	460d      	mov	r5, r1
	__asm__ volatile(
    feda:	f04f 0320 	mov.w	r3, #32
    fede:	f3ef 8611 	mrs	r6, BASEPRI
    fee2:	f383 8812 	msr	BASEPRI_MAX, r3
    fee6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    feea:	f7fc fa39 	bl	c360 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    feee:	2801      	cmp	r0, #1
    fef0:	dd05      	ble.n	fefe <z_set_timeout_expiry+0x2a>
    fef2:	42a0      	cmp	r0, r4
    fef4:	db03      	blt.n	fefe <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    fef6:	4629      	mov	r1, r5
    fef8:	4620      	mov	r0, r4
    fefa:	f7f9 faf3 	bl	94e4 <sys_clock_set_timeout>
	__asm__ volatile(
    fefe:	f386 8811 	msr	BASEPRI, r6
    ff02:	f3bf 8f6f 	isb	sy
}
    ff06:	bd70      	pop	{r4, r5, r6, pc}

0000ff08 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ff08:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ff0a:	f7fc fb3f 	bl	c58c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ff0e:	bd08      	pop	{r3, pc}

0000ff10 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    ff10:	f7fc bb3c 	b.w	c58c <sys_clock_tick_get>

0000ff14 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    ff14:	b108      	cbz	r0, ff1a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    ff16:	f7f7 ba9f 	b.w	7458 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    ff1a:	4770      	bx	lr

0000ff1c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ff1c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    ff20:	bf08      	it	eq
    ff22:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    ff26:	b538      	push	{r3, r4, r5, lr}
    ff28:	4605      	mov	r5, r0
    ff2a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ff2c:	d01d      	beq.n	ff6a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ff2e:	ea51 0300 	orrs.w	r3, r1, r0
    ff32:	d103      	bne.n	ff3c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    ff34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    ff38:	f7fc bb28 	b.w	c58c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    ff3c:	f06f 0301 	mvn.w	r3, #1
    ff40:	1a18      	subs	r0, r3, r0
    ff42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ff46:	eb63 0101 	sbc.w	r1, r3, r1
    ff4a:	2900      	cmp	r1, #0
    ff4c:	da0c      	bge.n	ff68 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    ff4e:	f7fc fb1d 	bl	c58c <sys_clock_tick_get>
    ff52:	2d01      	cmp	r5, #1
    ff54:	4622      	mov	r2, r4
    ff56:	f174 0400 	sbcs.w	r4, r4, #0
    ff5a:	462b      	mov	r3, r5
    ff5c:	bfbc      	itt	lt
    ff5e:	2301      	movlt	r3, #1
    ff60:	2200      	movlt	r2, #0
    ff62:	1818      	adds	r0, r3, r0
    ff64:	eb41 0102 	adc.w	r1, r1, r2
}
    ff68:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    ff6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff6e:	4601      	mov	r1, r0
    ff70:	e7fa      	b.n	ff68 <sys_clock_timeout_end_calc+0x4c>

0000ff72 <k_timer_init>:
	timer->status = 0U;
    ff72:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    ff74:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    ff78:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    ff7c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    ff80:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    ff84:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    ff86:	6343      	str	r3, [r0, #52]	; 0x34
}
    ff88:	4770      	bx	lr

0000ff8a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    ff8a:	b510      	push	{r4, lr}
    ff8c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    ff8e:	f7ff ff7b 	bl	fe88 <z_abort_timeout>

	if (inactive) {
    ff92:	b9b0      	cbnz	r0, ffc2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    ff94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ff96:	b10b      	cbz	r3, ff9c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    ff98:	4620      	mov	r0, r4
    ff9a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ff9c:	f104 0018 	add.w	r0, r4, #24
    ffa0:	f7ff ff17 	bl	fdd2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ffa4:	b168      	cbz	r0, ffc2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    ffa6:	f7ff feb8 	bl	fd1a <z_ready_thread>
	__asm__ volatile(
    ffaa:	f04f 0320 	mov.w	r3, #32
    ffae:	f3ef 8011 	mrs	r0, BASEPRI
    ffb2:	f383 8812 	msr	BASEPRI_MAX, r3
    ffb6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    ffba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    ffbe:	f7ff be90 	b.w	fce2 <z_reschedule_irqlock>
    ffc2:	bd10      	pop	{r4, pc}

0000ffc4 <add_event>:
{
    ffc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffc6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    ffc8:	e9d0 1300 	ldrd	r1, r3, [r0]
    ffcc:	4288      	cmp	r0, r1
    ffce:	4604      	mov	r4, r0
    ffd0:	d00d      	beq.n	ffee <add_event+0x2a>
	if ((pending == NULL) ||
    ffd2:	b163      	cbz	r3, ffee <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    ffd4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    ffd6:	b100      	cbz	r0, ffda <add_event+0x16>
    ffd8:	3860      	subs	r0, #96	; 0x60
    ffda:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    ffde:	4639      	mov	r1, r7
    ffe0:	f7ff fe52 	bl	fc88 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    ffe4:	2800      	cmp	r0, #0
    ffe6:	dc02      	bgt.n	ffee <add_event+0x2a>
	return list->head == list;
    ffe8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ffea:	42b4      	cmp	r4, r6
    ffec:	d109      	bne.n	10002 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
    ffee:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    fff0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    fff4:	601d      	str	r5, [r3, #0]
	list->tail = node;
    fff6:	6065      	str	r5, [r4, #4]
}
    fff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    fffa:	6863      	ldr	r3, [r4, #4]
    fffc:	42b3      	cmp	r3, r6
    fffe:	d0f6      	beq.n	ffee <add_event+0x2a>
   10000:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   10002:	2e00      	cmp	r6, #0
   10004:	d0f3      	beq.n	ffee <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   10006:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   10008:	b101      	cbz	r1, 1000c <add_event+0x48>
   1000a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1000c:	4638      	mov	r0, r7
   1000e:	f7ff fe3b 	bl	fc88 <z_sched_prio_cmp>
   10012:	2800      	cmp	r0, #0
   10014:	ddf1      	ble.n	fffa <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   10016:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   10018:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1001c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1001e:	6075      	str	r5, [r6, #4]
			return;
   10020:	e7ea      	b.n	fff8 <add_event+0x34>

00010022 <register_events>:
{
   10022:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   10026:	2500      	movs	r5, #0
{
   10028:	468b      	mov	fp, r1
   1002a:	4614      	mov	r4, r2
   1002c:	461f      	mov	r7, r3
   1002e:	4682      	mov	sl, r0
	int events_registered = 0;
   10030:	462e      	mov	r6, r5
	event->poller = NULL;
   10032:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   10034:	455d      	cmp	r5, fp
   10036:	db02      	blt.n	1003e <register_events+0x1c>
}
   10038:	4630      	mov	r0, r6
   1003a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1003e:	f04f 0320 	mov.w	r3, #32
   10042:	f3ef 8911 	mrs	r9, BASEPRI
   10046:	f383 8812 	msr	BASEPRI_MAX, r3
   1004a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1004e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   10052:	f003 031f 	and.w	r3, r3, #31
   10056:	3b01      	subs	r3, #1
   10058:	2b07      	cmp	r3, #7
   1005a:	d80f      	bhi.n	1007c <register_events+0x5a>
   1005c:	e8df f003 	tbb	[pc, r3]
   10060:	0a0e041e 	.word	0x0a0e041e
   10064:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   10068:	f8da 3010 	ldr.w	r3, [sl, #16]
   1006c:	689b      	ldr	r3, [r3, #8]
   1006e:	b12b      	cbz	r3, 1007c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   10070:	2302      	movs	r3, #2
   10072:	e020      	b.n	100b6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   10074:	f8da 3010 	ldr.w	r3, [sl, #16]
   10078:	681b      	ldr	r3, [r3, #0]
   1007a:	bb8b      	cbnz	r3, 100e0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1007c:	bb47      	cbnz	r7, 100d0 <register_events+0xae>
   1007e:	7823      	ldrb	r3, [r4, #0]
   10080:	b333      	cbz	r3, 100d0 <register_events+0xae>
	switch (event->type) {
   10082:	f89a 300d 	ldrb.w	r3, [sl, #13]
   10086:	f003 031f 	and.w	r3, r3, #31
   1008a:	3b01      	subs	r3, #1
   1008c:	2b07      	cmp	r3, #7
   1008e:	d830      	bhi.n	100f2 <register_events+0xd0>
   10090:	e8df f003 	tbb	[pc, r3]
   10094:	282f2833 	.word	0x282f2833
   10098:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1009c:	f8da 3010 	ldr.w	r3, [sl, #16]
   100a0:	689b      	ldr	r3, [r3, #8]
   100a2:	2b00      	cmp	r3, #0
   100a4:	d0ea      	beq.n	1007c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   100a6:	2301      	movs	r3, #1
   100a8:	e005      	b.n	100b6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   100aa:	f8da 3010 	ldr.w	r3, [sl, #16]
   100ae:	6a1b      	ldr	r3, [r3, #32]
   100b0:	2b00      	cmp	r3, #0
   100b2:	d0e3      	beq.n	1007c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   100b4:	2310      	movs	r3, #16
	event->state |= state;
   100b6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   100ba:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   100be:	f3c2 3145 	ubfx	r1, r2, #13, #6
   100c2:	430b      	orrs	r3, r1
   100c4:	f363 3252 	bfi	r2, r3, #13, #6
   100c8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   100cc:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   100d0:	f389 8811 	msr	BASEPRI, r9
   100d4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   100d8:	3501      	adds	r5, #1
   100da:	f10a 0a14 	add.w	sl, sl, #20
   100de:	e7a9      	b.n	10034 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   100e0:	2304      	movs	r3, #4
   100e2:	e7e8      	b.n	100b6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   100e4:	f8da 0010 	ldr.w	r0, [sl, #16]
   100e8:	4622      	mov	r2, r4
   100ea:	4651      	mov	r1, sl
   100ec:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   100ee:	f7ff ff69 	bl	ffc4 <add_event>
	event->poller = poller;
   100f2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   100f6:	3601      	adds	r6, #1
   100f8:	e7ea      	b.n	100d0 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   100fa:	f8da 0010 	ldr.w	r0, [sl, #16]
   100fe:	4622      	mov	r2, r4
   10100:	4651      	mov	r1, sl
   10102:	e7f4      	b.n	100ee <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   10104:	f8da 0010 	ldr.w	r0, [sl, #16]
   10108:	4622      	mov	r2, r4
   1010a:	4651      	mov	r1, sl
   1010c:	3024      	adds	r0, #36	; 0x24
   1010e:	e7ee      	b.n	100ee <register_events+0xcc>

00010110 <signal_poll_event>:
{
   10110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   10114:	6884      	ldr	r4, [r0, #8]
{
   10116:	4605      	mov	r5, r0
   10118:	460e      	mov	r6, r1
	if (poller != NULL) {
   1011a:	b144      	cbz	r4, 1012e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1011c:	7863      	ldrb	r3, [r4, #1]
   1011e:	2b01      	cmp	r3, #1
   10120:	d136      	bne.n	10190 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   10122:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   10126:	f013 0302 	ands.w	r3, r3, #2
   1012a:	d10a      	bne.n	10142 <signal_poll_event+0x32>
		poller->is_polling = false;
   1012c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1012e:	68eb      	ldr	r3, [r5, #12]
   10130:	f3c3 3145 	ubfx	r1, r3, #13, #6
   10134:	430e      	orrs	r6, r1
	event->poller = NULL;
   10136:	2000      	movs	r0, #0
	event->state |= state;
   10138:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1013c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1013e:	60eb      	str	r3, [r5, #12]
	return retcode;
   10140:	e00b      	b.n	1015a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   10142:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   10146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1014a:	bf08      	it	eq
   1014c:	f112 0f02 	cmneq.w	r2, #2
   10150:	d105      	bne.n	1015e <signal_poll_event+0x4e>
		poller->is_polling = false;
   10152:	2300      	movs	r3, #0
   10154:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   10156:	f06f 000a 	mvn.w	r0, #10
}
   1015a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1015e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   10162:	4640      	mov	r0, r8
   10164:	f7ff fda9 	bl	fcba <z_unpend_thread>
	arch_thread_return_value_set(thread,
   10168:	2e08      	cmp	r6, #8
   1016a:	bf0c      	ite	eq
   1016c:	f06f 0303 	mvneq.w	r3, #3
   10170:	2300      	movne	r3, #0
   10172:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10174:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   10178:	06db      	lsls	r3, r3, #27
   1017a:	d102      	bne.n	10182 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1017c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   10180:	b10f      	cbz	r7, 10186 <signal_poll_event+0x76>
		poller->is_polling = false;
   10182:	2300      	movs	r3, #0
   10184:	e7d2      	b.n	1012c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   10186:	4640      	mov	r0, r8
   10188:	f7ff fdc7 	bl	fd1a <z_ready_thread>
		poller->is_polling = false;
   1018c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1018e:	e7ce      	b.n	1012e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   10190:	2b02      	cmp	r3, #2
   10192:	d1f6      	bne.n	10182 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   10194:	7823      	ldrb	r3, [r4, #0]
   10196:	2b00      	cmp	r3, #0
   10198:	d0c9      	beq.n	1012e <signal_poll_event+0x1e>
   1019a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1019e:	2f00      	cmp	r7, #0
   101a0:	d0f4      	beq.n	1018c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   101a2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   101a6:	f1a4 0914 	sub.w	r9, r4, #20
   101aa:	f104 0014 	add.w	r0, r4, #20
   101ae:	f7ff fe6b 	bl	fe88 <z_abort_timeout>
		twork->poll_result = 0;
   101b2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   101b6:	4649      	mov	r1, r9
   101b8:	4638      	mov	r0, r7
   101ba:	f7ff fd36 	bl	fc2a <k_work_submit_to_queue>
		poller->is_polling = false;
   101be:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   101c2:	e7b4      	b.n	1012e <signal_poll_event+0x1e>

000101c4 <clear_event_registrations>:
	while (num_events--) {
   101c4:	2314      	movs	r3, #20
{
   101c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   101c8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   101cc:	2400      	movs	r4, #0
   101ce:	2601      	movs	r6, #1
	while (num_events--) {
   101d0:	b901      	cbnz	r1, 101d4 <clear_event_registrations+0x10>
}
   101d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   101d4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   101d8:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   101dc:	f003 031f 	and.w	r3, r3, #31
   101e0:	2b08      	cmp	r3, #8
   101e2:	f1a0 0714 	sub.w	r7, r0, #20
   101e6:	d80d      	bhi.n	10204 <clear_event_registrations+0x40>
   101e8:	fa06 f303 	lsl.w	r3, r6, r3
   101ec:	f413 7f8b 	tst.w	r3, #278	; 0x116
   101f0:	d008      	beq.n	10204 <clear_event_registrations+0x40>
	return node->next != NULL;
   101f2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   101f6:	b12b      	cbz	r3, 10204 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   101f8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   101fc:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   101fe:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   10200:	e940 4405 	strd	r4, r4, [r0, #-20]
   10204:	f382 8811 	msr	BASEPRI, r2
   10208:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1020c:	f04f 0320 	mov.w	r3, #32
   10210:	f3ef 8211 	mrs	r2, BASEPRI
   10214:	f383 8812 	msr	BASEPRI_MAX, r3
   10218:	f3bf 8f6f 	isb	sy
   1021c:	3901      	subs	r1, #1
   1021e:	4638      	mov	r0, r7
   10220:	e7d6      	b.n	101d0 <clear_event_registrations+0xc>

00010222 <k_poll_event_init>:
{
   10222:	b510      	push	{r4, lr}
	event->type = type;
   10224:	04d2      	lsls	r2, r2, #19
   10226:	0209      	lsls	r1, r1, #8
   10228:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1022c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   10230:	430a      	orrs	r2, r1
   10232:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   10234:	2400      	movs	r4, #0
	event->type = type;
   10236:	430a      	orrs	r2, r1
	event->obj = obj;
   10238:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1023c:	6084      	str	r4, [r0, #8]
}
   1023e:	bd10      	pop	{r4, pc}

00010240 <z_handle_obj_poll_events>:
{
   10240:	4603      	mov	r3, r0
	return list->head == list;
   10242:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   10244:	4283      	cmp	r3, r0
   10246:	d008      	beq.n	1025a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   10248:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1024c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1024e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10250:	2300      	movs	r3, #0
	node->prev = NULL;
   10252:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   10256:	f7ff bf5b 	b.w	10110 <signal_poll_event>
}
   1025a:	4770      	bx	lr

0001025c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1025c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1025e:	e9c0 0000 	strd	r0, r0, [r0]
   10262:	6083      	str	r3, [r0, #8]
}
   10264:	4770      	bx	lr

00010266 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   10266:	2300      	movs	r3, #0
   10268:	6083      	str	r3, [r0, #8]
}
   1026a:	4770      	bx	lr

0001026c <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   1026c:	6883      	ldr	r3, [r0, #8]
   1026e:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   10270:	68c3      	ldr	r3, [r0, #12]
   10272:	6013      	str	r3, [r2, #0]
}
   10274:	4770      	bx	lr

00010276 <k_free>:
	if (ptr != NULL) {
   10276:	b120      	cbz	r0, 10282 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   10278:	1f01      	subs	r1, r0, #4
   1027a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1027e:	f000 b84b 	b.w	10318 <k_heap_free>
}
   10282:	4770      	bx	lr

00010284 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   10284:	4770      	bx	lr

00010286 <k_heap_init>:
{
   10286:	b410      	push	{r4}
   10288:	f100 040c 	add.w	r4, r0, #12
   1028c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   10290:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   10292:	f7fc be20 	b.w	ced6 <sys_heap_init>

00010296 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   10296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1029a:	b085      	sub	sp, #20
   1029c:	4606      	mov	r6, r0
   1029e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   102a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   102a4:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   102a6:	f7ff fe39 	bl	ff1c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   102aa:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   102ae:	4605      	mov	r5, r0
   102b0:	460f      	mov	r7, r1
   102b2:	f04f 0320 	mov.w	r3, #32
   102b6:	f3ef 8411 	mrs	r4, BASEPRI
   102ba:	f383 8812 	msr	BASEPRI_MAX, r3
   102be:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   102c2:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   102c6:	464a      	mov	r2, r9
   102c8:	4641      	mov	r1, r8
   102ca:	4630      	mov	r0, r6
   102cc:	f7fc fd9b 	bl	ce06 <sys_heap_aligned_alloc>
   102d0:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   102d2:	f7fc f95b 	bl	c58c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   102d6:	9b03      	ldr	r3, [sp, #12]
   102d8:	b13b      	cbz	r3, 102ea <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   102da:	f384 8811 	msr	BASEPRI, r4
   102de:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   102e2:	4618      	mov	r0, r3
   102e4:	b005      	add	sp, #20
   102e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   102ea:	1a28      	subs	r0, r5, r0
   102ec:	eb67 0101 	sbc.w	r1, r7, r1
   102f0:	2801      	cmp	r0, #1
   102f2:	f171 0200 	sbcs.w	r2, r1, #0
   102f6:	dbf0      	blt.n	102da <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   102f8:	e9cd 0100 	strd	r0, r1, [sp]
   102fc:	465a      	mov	r2, fp
   102fe:	4621      	mov	r1, r4
   10300:	4650      	mov	r0, sl
   10302:	f7fb fe33 	bl	bf6c <z_pend_curr>
	__asm__ volatile(
   10306:	f04f 0320 	mov.w	r3, #32
   1030a:	f3ef 8411 	mrs	r4, BASEPRI
   1030e:	f383 8812 	msr	BASEPRI_MAX, r3
   10312:	f3bf 8f6f 	isb	sy
   10316:	e7d6      	b.n	102c6 <k_heap_aligned_alloc+0x30>

00010318 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   10318:	b538      	push	{r3, r4, r5, lr}
   1031a:	4604      	mov	r4, r0
   1031c:	f04f 0320 	mov.w	r3, #32
   10320:	f3ef 8511 	mrs	r5, BASEPRI
   10324:	f383 8812 	msr	BASEPRI_MAX, r3
   10328:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1032c:	f7fc fd33 	bl	cd96 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   10330:	f104 000c 	add.w	r0, r4, #12
   10334:	f7ff fd7a 	bl	fe2c <z_unpend_all>
   10338:	b130      	cbz	r0, 10348 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1033a:	4629      	mov	r1, r5
   1033c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   10340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   10344:	f7fb bcc0 	b.w	bcc8 <z_reschedule>
	__asm__ volatile(
   10348:	f385 8811 	msr	BASEPRI, r5
   1034c:	f3bf 8f6f 	isb	sy
}
   10350:	bd38      	pop	{r3, r4, r5, pc}
	...

00010354 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10354:	f7f9 b92e 	b.w	95b4 <SystemInit>
