
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	58 3e 00 20 e9 61 00 00 c3 de 00 00 bd 61 00 00     X>. .a.......a..
  10:	bd 61 00 00 bd 61 00 00 bd 61 00 00 00 00 00 00     .a...a...a......
	...
  2c:	95 5a 00 00 bd 61 00 00 00 00 00 00 49 5a 00 00     .Z...a......IZ..
  3c:	bd 61 00 00                                         .a..

00000040 <_irq_vector_table>:
  40:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  50:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  60:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  70:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  80:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  90:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  a0:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  b0:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  c0:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  d0:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  e0:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..
  f0:	11 5b 00 00 11 5b 00 00 11 5b 00 00 11 5b 00 00     .[...[...[...[..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x94>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0x6>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x8c>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SHELL_HISTORY_BUFFER+0x1a>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SHELL_HISTORY_BUFFER+0x1a>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x90>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <__data_size+0x2>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0x2>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x84>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <__data_size+0x4e>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0x4e>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x88>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <__data_size+0x7a>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x7a>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0x4e>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x7a>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SHELL_HISTORY_BUFFER+0x1a>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0x2>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0xa4>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x9e>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0xb2>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <consumer_thread>:
/*
 * Consumer thread for testing message queue 
 */
void
consumer_thread(void) 
{
     3dc:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
     3de:	4c0e      	ldr	r4, [pc, #56]	; (418 <CONFIG_FLASH_SIZE+0x18>)
	struct data_packet data;

	while(1) {
		if (k_msgq_get(&my_msgq, &data, K_FOREVER) == 0) {
			if (data.preamble == 0xAA)
				printk("MSG Received: %s\n", data.string);
     3e0:	4d0e      	ldr	r5, [pc, #56]	; (41c <CONFIG_FLASH_SIZE+0x1c>)
{
     3e2:	b08b      	sub	sp, #44	; 0x2c
     3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     3ec:	a901      	add	r1, sp, #4
     3ee:	4620      	mov	r0, r4
     3f0:	f00a fa16 	bl	a820 <z_impl_k_msgq_get>
		if (k_msgq_get(&my_msgq, &data, K_FOREVER) == 0) {
     3f4:	2800      	cmp	r0, #0
     3f6:	d1f5      	bne.n	3e4 <consumer_thread+0x8>
			if (data.preamble == 0xAA)
     3f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     3fc:	2baa      	cmp	r3, #170	; 0xaa
     3fe:	d104      	bne.n	40a <CONFIG_FLASH_SIZE+0xa>
				printk("MSG Received: %s\n", data.string);
     400:	f10d 0106 	add.w	r1, sp, #6
     404:	4628      	mov	r0, r5
     406:	f00b fb65 	bl	bad4 <printk>
			memset(&data, 0, sizeof(struct data_packet));
     40a:	2222      	movs	r2, #34	; 0x22
     40c:	2100      	movs	r1, #0
     40e:	a801      	add	r0, sp, #4
     410:	f00d fef9 	bl	e206 <memset>
		if (k_msgq_get(&my_msgq, &data, K_FOREVER) == 0) {
     414:	e7e6      	b.n	3e4 <consumer_thread+0x8>
     416:	bf00      	nop
     418:	200002f4 	.word	0x200002f4
     41c:	000102b8 	.word	0x000102b8

00000420 <main>:
/*
 * Sample app to init USB, and demonstrate shell functionality
 */
void
main(void)
{
     420:	b570      	push	{r4, r5, r6, lr}
     422:	b08a      	sub	sp, #40	; 0x28
	bool led_is_on = true;
	int ret;

	/* Setup DTR */
	const struct device *shell_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_shell_uart));
	uint32_t dtr = 0;
     424:	2400      	movs	r4, #0

	/* MSGQ Packet */
	struct data_packet packet;
	packet.preamble = 0xAA;
     426:	23aa      	movs	r3, #170	; 0xaa
	snprintk(packet.string, sizeof(packet.string), "Colonels Recipe.exe\n");
     428:	4a2c      	ldr	r2, [pc, #176]	; (4dc <main+0xbc>)
	uint32_t dtr = 0;
     42a:	9400      	str	r4, [sp, #0]
	snprintk(packet.string, sizeof(packet.string), "Colonels Recipe.exe\n");
     42c:	2120      	movs	r1, #32
     42e:	f10d 0006 	add.w	r0, sp, #6
	packet.preamble = 0xAA;
     432:	f8ad 3004 	strh.w	r3, [sp, #4]
	snprintk(packet.string, sizeof(packet.string), "Colonels Recipe.exe\n");
     436:	f00b fb5a 	bl	baee <snprintk>
	
	if (usb_enable(NULL))
     43a:	4620      	mov	r0, r4
     43c:	f004 f94c 	bl	46d8 <usb_enable>
     440:	2800      	cmp	r0, #0
     442:	d149      	bne.n	4d8 <main+0xb8>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     444:	4c26      	ldr	r4, [pc, #152]	; (4e0 <main+0xc0>)
		return;

	/* Wait on DTR - 'Data Terminal Ready'*/
	while (!dtr) {
     446:	9b00      	ldr	r3, [sp, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d035      	beq.n	4b8 <main+0x98>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     44c:	4825      	ldr	r0, [pc, #148]	; (4e4 <main+0xc4>)
     44e:	f009 fe2f 	bl	a0b0 <z_impl_device_get_binding>
		k_sleep(K_MSEC(100));
	} 

	/* DTR - OK, Continue */
	dev = device_get_binding(LED0);
	if (dev == NULL) {
     452:	4604      	mov	r4, r0
     454:	2800      	cmp	r0, #0
     456:	d03f      	beq.n	4d8 <main+0xb8>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     458:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     45a:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     45c:	6813      	ldr	r3, [r2, #0]
     45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     462:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     464:	680b      	ldr	r3, [r1, #0]
     466:	f44f 6220 	mov.w	r2, #2560	; 0xa00
     46a:	210c      	movs	r1, #12
     46c:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
     46e:	2800      	cmp	r0, #0
     470:	db32      	blt.n	4d8 <main+0xb8>
	return z_impl_k_msgq_put(msgq, data, timeout);
     472:	4e1d      	ldr	r6, [pc, #116]	; (4e8 <main+0xc8>)
	bool led_is_on = true;
     474:	2301      	movs	r3, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     476:	6922      	ldr	r2, [r4, #16]
     478:	6812      	ldr	r2, [r2, #0]
		value = (value != 0) ? 0 : 1;
     47a:	f083 0501 	eor.w	r5, r3, #1
     47e:	b2ed      	uxtb	r5, r5
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     480:	f412 5f80 	tst.w	r2, #4096	; 0x1000
     484:	bf18      	it	ne
     486:	462b      	movne	r3, r5
	if (value != 0)	{
     488:	b31b      	cbz	r3, 4d2 <main+0xb2>
	return api->port_set_bits_raw(port, pins);
     48a:	68a3      	ldr	r3, [r4, #8]
     48c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     48e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     492:	4620      	mov	r0, r4
     494:	4798      	blx	r3
     496:	2200      	movs	r2, #0
     498:	2300      	movs	r3, #0
     49a:	a901      	add	r1, sp, #4
     49c:	4630      	mov	r0, r6
     49e:	f00a f969 	bl	a774 <z_impl_k_msgq_put>
	while (1) {
		gpio_pin_set(dev, PIN, (int)led_is_on);
		led_is_on = !led_is_on;

		/* Send Messages to consumers */
		if (k_msgq_put(&my_msgq, &packet, K_NO_WAIT) != 0) {
     4a2:	b110      	cbz	r0, 4aa <main+0x8a>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
     4a4:	4630      	mov	r0, r6
     4a6:	f00e fbf6 	bl	ec96 <z_impl_k_msgq_purge>
	return z_impl_k_sleep(timeout);
     4aa:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     4ae:	2100      	movs	r1, #0
     4b0:	f00a ff42 	bl	b338 <z_impl_k_sleep>
		led_is_on = !led_is_on;
     4b4:	462b      	mov	r3, r5
	while (1) {
     4b6:	e7de      	b.n	476 <main+0x56>
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     4b8:	68a3      	ldr	r3, [r4, #8]
     4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     4bc:	b11b      	cbz	r3, 4c6 <main+0xa6>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     4be:	466a      	mov	r2, sp
     4c0:	2104      	movs	r1, #4
     4c2:	4620      	mov	r0, r4
     4c4:	4798      	blx	r3
     4c6:	2100      	movs	r1, #0
     4c8:	f640 40cd 	movw	r0, #3277	; 0xccd
     4cc:	f00a ff34 	bl	b338 <z_impl_k_sleep>
     4d0:	e7b9      	b.n	446 <main+0x26>
     4d2:	68a3      	ldr	r3, [r4, #8]
     4d4:	691b      	ldr	r3, [r3, #16]
     4d6:	e7da      	b.n	48e <main+0x6e>
		 	 */
			k_msgq_purge(&my_msgq);
		}
		k_sleep(K_SECONDS(5));
	}
     4d8:	b00a      	add	sp, #40	; 0x28
     4da:	bd70      	pop	{r4, r5, r6, pc}
     4dc:	000102ca 	.word	0x000102ca
     4e0:	0000f650 	.word	0x0000f650
     4e4:	000102df 	.word	0x000102df
     4e8:	200002f4 	.word	0x200002f4

000004ec <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f0:	4605      	mov	r5, r0
     4f2:	b08b      	sub	sp, #44	; 0x2c
     4f4:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     4f6:	f015 0303 	ands.w	r3, r5, #3
     4fa:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
     4fe:	9203      	str	r2, [sp, #12]
     500:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     502:	9301      	str	r3, [sp, #4]
     504:	f040 81f5 	bne.w	8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     508:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     50a:	2d00      	cmp	r5, #0
     50c:	f040 81f4 	bne.w	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     510:	f001 0607 	and.w	r6, r1, #7
     514:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     516:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     51a:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     51e:	2704      	movs	r7, #4
	s = fmt--;
     520:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     522:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     526:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
     52a:	4652      	mov	r2, sl
	size = sizeof(char *);
     52c:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     52e:	b105      	cbz	r5, 532 <cbvprintf_package+0x46>
				*(const char **)buf = s;
     530:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
     532:	9b03      	ldr	r3, [sp, #12]
     534:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
     538:	4bce      	ldr	r3, [pc, #824]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     53a:	4298      	cmp	r0, r3
     53c:	f0c0 812a 	bcc.w	794 <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
     540:	4bcd      	ldr	r3, [pc, #820]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     542:	4298      	cmp	r0, r3
     544:	f080 8126 	bcs.w	794 <cbvprintf_package+0x2a8>
     548:	f1be 0f00 	cmp.w	lr, #0
     54c:	f000 813c 	beq.w	7c8 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
     550:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     554:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
     558:	f1be 0f00 	cmp.w	lr, #0
     55c:	f000 811d 	beq.w	79a <cbvprintf_package+0x2ae>
     560:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
     564:	f0c0 8119 	bcc.w	79a <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     568:	f06f 0015 	mvn.w	r0, #21
     56c:	e0f5      	b.n	75a <cbvprintf_package+0x26e>
		if (!parsing) {
     56e:	b932      	cbnz	r2, 57e <cbvprintf_package+0x92>
			if (*fmt == '%') {
     570:	2b25      	cmp	r3, #37	; 0x25
     572:	f040 812c 	bne.w	7ce <cbvprintf_package+0x2e2>
				parsing = true;
     576:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     578:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
     57a:	46b9      	mov	r9, r7
     57c:	e127      	b.n	7ce <cbvprintf_package+0x2e2>
		switch (*fmt) {
     57e:	2b2b      	cmp	r3, #43	; 0x2b
     580:	d824      	bhi.n	5cc <cbvprintf_package+0xe0>
     582:	2b1f      	cmp	r3, #31
     584:	d801      	bhi.n	58a <cbvprintf_package+0x9e>
			parsing = false;
     586:	2200      	movs	r2, #0
     588:	e121      	b.n	7ce <cbvprintf_package+0x2e2>
		switch (*fmt) {
     58a:	f1a3 0020 	sub.w	r0, r3, #32
     58e:	280b      	cmp	r0, #11
     590:	d8f9      	bhi.n	586 <cbvprintf_package+0x9a>
     592:	f20f 0c08 	addw	ip, pc, #8
     596:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
     59a:	bf00      	nop
     59c:	000007cf 	.word	0x000007cf
     5a0:	00000587 	.word	0x00000587
     5a4:	00000587 	.word	0x00000587
     5a8:	000007cf 	.word	0x000007cf
     5ac:	00000587 	.word	0x00000587
     5b0:	00000587 	.word	0x00000587
     5b4:	00000587 	.word	0x00000587
     5b8:	00000587 	.word	0x00000587
     5bc:	00000587 	.word	0x00000587
     5c0:	00000587 	.word	0x00000587
     5c4:	00000773 	.word	0x00000773
     5c8:	000007cf 	.word	0x000007cf
     5cc:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
     5d0:	fa5f fc80 	uxtb.w	ip, r0
     5d4:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     5d8:	d8d5      	bhi.n	586 <cbvprintf_package+0x9a>
     5da:	284d      	cmp	r0, #77	; 0x4d
     5dc:	d8d3      	bhi.n	586 <cbvprintf_package+0x9a>
     5de:	f20f 0c08 	addw	ip, pc, #8
     5e2:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
     5e6:	bf00      	nop
     5e8:	000007cf 	.word	0x000007cf
     5ec:	000007cf 	.word	0x000007cf
     5f0:	00000587 	.word	0x00000587
     5f4:	000007cf 	.word	0x000007cf
     5f8:	000007cf 	.word	0x000007cf
     5fc:	000007cf 	.word	0x000007cf
     600:	000007cf 	.word	0x000007cf
     604:	000007cf 	.word	0x000007cf
     608:	000007cf 	.word	0x000007cf
     60c:	000007cf 	.word	0x000007cf
     610:	000007cf 	.word	0x000007cf
     614:	000007cf 	.word	0x000007cf
     618:	000007cf 	.word	0x000007cf
     61c:	00000587 	.word	0x00000587
     620:	00000587 	.word	0x00000587
     624:	00000587 	.word	0x00000587
     628:	00000587 	.word	0x00000587
     62c:	00000587 	.word	0x00000587
     630:	00000587 	.word	0x00000587
     634:	00000587 	.word	0x00000587
     638:	0000073b 	.word	0x0000073b
     63c:	00000587 	.word	0x00000587
     640:	00000587 	.word	0x00000587
     644:	00000587 	.word	0x00000587
     648:	0000073b 	.word	0x0000073b
     64c:	0000073b 	.word	0x0000073b
     650:	0000073b 	.word	0x0000073b
     654:	00000587 	.word	0x00000587
     658:	00000587 	.word	0x00000587
     65c:	00000587 	.word	0x00000587
     660:	00000587 	.word	0x00000587
     664:	000007cf 	.word	0x000007cf
     668:	00000587 	.word	0x00000587
     66c:	00000587 	.word	0x00000587
     670:	00000587 	.word	0x00000587
     674:	00000587 	.word	0x00000587
     678:	00000587 	.word	0x00000587
     67c:	00000587 	.word	0x00000587
     680:	00000587 	.word	0x00000587
     684:	00000587 	.word	0x00000587
     688:	00000587 	.word	0x00000587
     68c:	00000587 	.word	0x00000587
     690:	00000587 	.word	0x00000587
     694:	00000721 	.word	0x00000721
     698:	00000587 	.word	0x00000587
     69c:	00000587 	.word	0x00000587
     6a0:	00000587 	.word	0x00000587
     6a4:	00000587 	.word	0x00000587
     6a8:	00000587 	.word	0x00000587
     6ac:	00000587 	.word	0x00000587
     6b0:	00000587 	.word	0x00000587
     6b4:	00000587 	.word	0x00000587
     6b8:	0000073b 	.word	0x0000073b
     6bc:	00000587 	.word	0x00000587
     6c0:	00000721 	.word	0x00000721
     6c4:	00000721 	.word	0x00000721
     6c8:	0000073b 	.word	0x0000073b
     6cc:	0000073b 	.word	0x0000073b
     6d0:	0000073b 	.word	0x0000073b
     6d4:	000007cf 	.word	0x000007cf
     6d8:	00000721 	.word	0x00000721
     6dc:	00000769 	.word	0x00000769
     6e0:	00000587 	.word	0x00000587
     6e4:	000007cf 	.word	0x000007cf
     6e8:	00000587 	.word	0x00000587
     6ec:	0000076d 	.word	0x0000076d
     6f0:	00000721 	.word	0x00000721
     6f4:	0000076d 	.word	0x0000076d
     6f8:	00000587 	.word	0x00000587
     6fc:	00000587 	.word	0x00000587
     700:	0000076d 	.word	0x0000076d
     704:	00000579 	.word	0x00000579
     708:	00000721 	.word	0x00000721
     70c:	00000587 	.word	0x00000587
     710:	00000587 	.word	0x00000587
     714:	00000721 	.word	0x00000721
     718:	00000587 	.word	0x00000587
     71c:	00000579 	.word	0x00000579
			if (fmt[-1] == 'l') {
     720:	f811 2c01 	ldrb.w	r2, [r1, #-1]
     724:	2a6c      	cmp	r2, #108	; 0x6c
     726:	d123      	bne.n	770 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
     728:	f811 2c02 	ldrb.w	r2, [r1, #-2]
     72c:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
     72e:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
     732:	d02d      	beq.n	790 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
     734:	2704      	movs	r7, #4
					size = sizeof(long long);
     736:	46b9      	mov	r9, r7
     738:	e01b      	b.n	772 <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
     73a:	f108 0807 	add.w	r8, r8, #7
     73e:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
     742:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     744:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
     748:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     74c:	b155      	cbz	r5, 764 <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
     74e:	eb0e 0004 	add.w	r0, lr, r4
     752:	42b0      	cmp	r0, r6
     754:	d904      	bls.n	760 <cbvprintf_package+0x274>
					return -ENOSPC;
     756:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     75a:	b00b      	add	sp, #44	; 0x2c
     75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     760:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
     764:	3408      	adds	r4, #8
			parsing = false;
     766:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
     768:	2708      	movs	r7, #8
     76a:	e706      	b.n	57a <cbvprintf_package+0x8e>
			parsing = false;
     76c:	2200      	movs	r2, #0
     76e:	e7e1      	b.n	734 <cbvprintf_package+0x248>
			parsing = false;
     770:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
     772:	3c01      	subs	r4, #1
     774:	443c      	add	r4, r7
     776:	4278      	negs	r0, r7
     778:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     77a:	b125      	cbz	r5, 786 <cbvprintf_package+0x29a>
     77c:	eba9 0005 	sub.w	r0, r9, r5
     780:	4420      	add	r0, r4
     782:	42b0      	cmp	r0, r6
     784:	d8e7      	bhi.n	756 <cbvprintf_package+0x26a>
		if (*fmt == 's') {
     786:	2b73      	cmp	r3, #115	; 0x73
     788:	d143      	bne.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
			s = va_arg(ap, char *);
     78a:	f858 0b04 	ldr.w	r0, [r8], #4
     78e:	e6ce      	b.n	52e <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
     790:	2708      	movs	r7, #8
     792:	e7d0      	b.n	736 <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
     794:	f04f 0c00 	mov.w	ip, #0
     798:	e6dc      	b.n	554 <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     79a:	9b00      	ldr	r3, [sp, #0]
     79c:	2b0f      	cmp	r3, #15
     79e:	f63f aee3 	bhi.w	568 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
     7a2:	b345      	cbz	r5, 7f6 <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
     7a4:	f8dd e000 	ldr.w	lr, [sp]
     7a8:	a80a      	add	r0, sp, #40	; 0x28
     7aa:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
     7ae:	4470      	add	r0, lr
     7b0:	f1bc 0f00 	cmp.w	ip, #0
     7b4:	d019      	beq.n	7ea <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     7b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
     7ba:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
     7be:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     7c2:	9b00      	ldr	r3, [sp, #0]
     7c4:	3301      	adds	r3, #1
     7c6:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
     7c8:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     7ca:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
     7ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     7d2:	2b00      	cmp	r3, #0
     7d4:	f47f aecb 	bne.w	56e <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
     7d8:	1b60      	subs	r0, r4, r5
     7da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
     7de:	f4bf aec3 	bcs.w	568 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
     7e2:	bb9d      	cbnz	r5, 84c <CONFIG_ISR_STACK_SIZE+0x4c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     7e4:	3e08      	subs	r6, #8
     7e6:	4430      	add	r0, r6
     7e8:	e7b7      	b.n	75a <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
     7ea:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
     7ee:	9b02      	ldr	r3, [sp, #8]
     7f0:	3301      	adds	r3, #1
     7f2:	9302      	str	r3, [sp, #8]
     7f4:	e7e5      	b.n	7c2 <cbvprintf_package+0x2d6>
				} else if (is_ro) {
     7f6:	f1bc 0f00 	cmp.w	ip, #0
     7fa:	d001      	beq.n	800 <CONFIG_ISR_STACK_SIZE>
					len += 1;
     7fc:	3601      	adds	r6, #1
     7fe:	e7e0      	b.n	7c2 <cbvprintf_package+0x2d6>
     800:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
     804:	f00d fc9e 	bl	e144 <strlen>
     808:	3602      	adds	r6, #2
     80a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
     80e:	4406      	add	r6, r0
     810:	e7d7      	b.n	7c2 <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
     812:	f1b9 0f04 	cmp.w	r9, #4
     816:	d108      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
			int v = va_arg(ap, int);
     818:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
     81c:	b115      	cbz	r5, 824 <CONFIG_ISR_STACK_SIZE+0x24>
			int v = va_arg(ap, int);
     81e:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
     822:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     824:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     826:	4680      	mov	r8, r0
     828:	e7d1      	b.n	7ce <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
     82a:	f1b9 0f08 	cmp.w	r9, #8
     82e:	f47f ae9b 	bne.w	568 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
     832:	f108 0307 	add.w	r3, r8, #7
     836:	f023 0307 	bic.w	r3, r3, #7
     83a:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
     83e:	b11d      	cbz	r5, 848 <CONFIG_ISR_STACK_SIZE+0x48>
			long long v = va_arg(ap, long long);
     840:	e9d3 bc00 	ldrd	fp, ip, [r3]
     844:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     848:	3408      	adds	r4, #8
     84a:	e7c0      	b.n	7ce <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
     84c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     84e:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     850:	0880      	lsrs	r0, r0, #2
     852:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
     854:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
     856:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     85a:	f1ba 0f00 	cmp.w	sl, #0
     85e:	d005      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     860:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
     862:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
     866:	9a00      	ldr	r2, [sp, #0]
     868:	429a      	cmp	r2, r3
     86a:	d107      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
		if (BUF_OFFSET + 1 + size > len) {
     86c:	f1c5 0901 	rsb	r9, r5, #1
     870:	e039      	b.n	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
     872:	bf00      	nop
     874:	0000f578 	.word	0x0000f578
     878:	0001230c 	.word	0x0001230c
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     87c:	f811 2b01 	ldrb.w	r2, [r1], #1
     880:	0617      	lsls	r7, r2, #24
     882:	d507      	bpl.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
			if (BUF_OFFSET + 1 > len) {
     884:	1827      	adds	r7, r4, r0
     886:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     88c:	f63f af63 	bhi.w	756 <cbvprintf_package+0x26a>
			*buf++ = pos;
     890:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
     894:	3301      	adds	r3, #1
     896:	e7e6      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     898:	9b01      	ldr	r3, [sp, #4]
     89a:	aa06      	add	r2, sp, #24
     89c:	f812 8003 	ldrb.w	r8, [r2, r3]
     8a0:	f1ba 0f00 	cmp.w	sl, #0
     8a4:	d002      	beq.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
     8a6:	f018 0f80 	tst.w	r8, #128	; 0x80
     8aa:	d119      	bne.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     8ac:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     8b0:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     8b2:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     8b6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
     8ba:	4608      	mov	r0, r1
     8bc:	9102      	str	r1, [sp, #8]
     8be:	f00d fc41 	bl	e144 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
     8c2:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
     8c6:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     8c8:	443a      	add	r2, r7
     8ca:	42b2      	cmp	r2, r6
     8cc:	f63f af43 	bhi.w	756 <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
     8d0:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
     8d4:	9902      	ldr	r1, [sp, #8]
     8d6:	4620      	mov	r0, r4
     8d8:	463a      	mov	r2, r7
     8da:	f00d fc89 	bl	e1f0 <memcpy>
		buf += size;
     8de:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
     8e0:	9b01      	ldr	r3, [sp, #4]
     8e2:	3301      	adds	r3, #1
     8e4:	9301      	str	r3, [sp, #4]
     8e6:	e9dd 2300 	ldrd	r2, r3, [sp]
     8ea:	429a      	cmp	r2, r3
     8ec:	d1d4      	bne.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
	return BUF_OFFSET;
     8ee:	1b60      	subs	r0, r4, r5
     8f0:	e733      	b.n	75a <cbvprintf_package+0x26e>
		return -EFAULT;
     8f2:	f06f 000d 	mvn.w	r0, #13
     8f6:	e730      	b.n	75a <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     8f8:	2907      	cmp	r1, #7
     8fa:	f63f ae0e 	bhi.w	51a <cbvprintf_package+0x2e>
     8fe:	e72a      	b.n	756 <cbvprintf_package+0x26a>

00000900 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     900:	4b01      	ldr	r3, [pc, #4]	; (908 <__printk_hook_install+0x8>)
     902:	6018      	str	r0, [r3, #0]
}
     904:	4770      	bx	lr
     906:	bf00      	nop
     908:	20000000 	.word	0x20000000

0000090c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     90c:	b530      	push	{r4, r5, lr}
     90e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     910:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     914:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     916:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     918:	a901      	add	r1, sp, #4
     91a:	4805      	ldr	r0, [pc, #20]	; (930 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     91c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     91e:	f000 f8e9 	bl	af4 <cbvprintf>

	if (ctx.count < ctx.max) {
     922:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     926:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     928:	bfb8      	it	lt
     92a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     92c:	b005      	add	sp, #20
     92e:	bd30      	pop	{r4, r5, pc}
     930:	0000baaf 	.word	0x0000baaf

00000934 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     938:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     93c:	f019 0808 	ands.w	r8, r9, #8
{
     940:	4604      	mov	r4, r0
     942:	4693      	mov	fp, r2
	if (processing) {
     944:	d00d      	beq.n	962 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     946:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     948:	bf0c      	ite	eq
     94a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     94e:	f049 0920 	orrne.w	r9, r9, #32
     952:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     956:	f38b 8811 	msr	BASEPRI, fp
     95a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     95e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     962:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     966:	2902      	cmp	r1, #2
     968:	d107      	bne.n	97a <process_event+0x46>
			evt = process_recheck(mgr);
     96a:	4620      	mov	r0, r4
     96c:	f00b f8e6 	bl	bb3c <process_recheck>
		if (evt == EVT_NOP) {
     970:	2800      	cmp	r0, #0
     972:	d0f0      	beq.n	956 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     974:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     976:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     978:	d14e      	bne.n	a18 <process_event+0xe4>
			res = mgr->last_res;
     97a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     97c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     97e:	2f00      	cmp	r7, #0
     980:	da15      	bge.n	9ae <process_event+0x7a>
		*clients = mgr->clients;
     982:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     984:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     988:	e9c4 8800 	strd	r8, r8, [r4]
     98c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     990:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     992:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     994:	8b21      	ldrh	r1, [r4, #24]
     996:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     99a:	45ca      	cmp	sl, r9
     99c:	d002      	beq.n	9a4 <process_event+0x70>
		if (do_monitors
     99e:	68a3      	ldr	r3, [r4, #8]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d15a      	bne.n	a5a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     9a4:	b90d      	cbnz	r5, 9aa <process_event+0x76>
		    || (transit != NULL)) {
     9a6:	2e00      	cmp	r6, #0
     9a8:	d071      	beq.n	a8e <process_event+0x15a>
     9aa:	2300      	movs	r3, #0
     9ac:	e056      	b.n	a5c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9ae:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     9b2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     9b4:	2a01      	cmp	r2, #1
     9b6:	d81e      	bhi.n	9f6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9b8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     9bc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     9be:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9c0:	b289      	uxth	r1, r1
     9c2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     9c6:	d10a      	bne.n	9de <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     9c8:	b13d      	cbz	r5, 9da <process_event+0xa6>
     9ca:	8b63      	ldrh	r3, [r4, #26]
     9cc:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     9ce:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     9d0:	3301      	adds	r3, #1
     9d2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     9d4:	2a00      	cmp	r2, #0
     9d6:	d1fa      	bne.n	9ce <process_event+0x9a>
     9d8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9da:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     9de:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     9e0:	4620      	mov	r0, r4
     9e2:	f00b f8ab 	bl	bb3c <process_recheck>
     9e6:	4606      	mov	r6, r0
     9e8:	2800      	cmp	r0, #0
     9ea:	d0d3      	beq.n	994 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     9ec:	8b23      	ldrh	r3, [r4, #24]
     9ee:	f043 0320 	orr.w	r3, r3, #32
     9f2:	8323      	strh	r3, [r4, #24]
     9f4:	e7cd      	b.n	992 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     9f6:	2b04      	cmp	r3, #4
     9f8:	d10c      	bne.n	a14 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9fa:	f021 0107 	bic.w	r1, r1, #7
     9fe:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     a00:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     a02:	4620      	mov	r0, r4
     a04:	f00b f89a 	bl	bb3c <process_recheck>
     a08:	4605      	mov	r5, r0
     a0a:	2800      	cmp	r0, #0
     a0c:	d0c1      	beq.n	992 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a0e:	f041 0120 	orr.w	r1, r1, #32
     a12:	8321      	strh	r1, [r4, #24]
     a14:	2500      	movs	r5, #0
     a16:	e7bc      	b.n	992 <process_event+0x5e>
		} else if (evt == EVT_START) {
     a18:	2803      	cmp	r0, #3
     a1a:	d109      	bne.n	a30 <process_event+0xfc>
			transit = mgr->transitions->start;
     a1c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a1e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     a22:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a24:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     a28:	8323      	strh	r3, [r4, #24]
}
     a2a:	2500      	movs	r5, #0
		res = 0;
     a2c:	462f      	mov	r7, r5
     a2e:	e7b1      	b.n	994 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     a30:	2804      	cmp	r0, #4
     a32:	d106      	bne.n	a42 <process_event+0x10e>
			transit = mgr->transitions->stop;
     a34:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a36:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     a3a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a3c:	f043 0304 	orr.w	r3, r3, #4
     a40:	e7f2      	b.n	a28 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     a42:	2805      	cmp	r0, #5
     a44:	d106      	bne.n	a54 <process_event+0x120>
			transit = mgr->transitions->reset;
     a46:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a48:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     a4c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a4e:	f043 0305 	orr.w	r3, r3, #5
     a52:	e7e9      	b.n	a28 <process_event+0xf4>
     a54:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     a56:	462e      	mov	r6, r5
     a58:	e7e8      	b.n	a2c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     a5a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     a5c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     a60:	8321      	strh	r1, [r4, #24]
     a62:	f38b 8811 	msr	BASEPRI, fp
     a66:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a6a:	b9fb      	cbnz	r3, aac <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     a6c:	bb85      	cbnz	r5, ad0 <process_event+0x19c>
			if (transit != NULL) {
     a6e:	b116      	cbz	r6, a76 <process_event+0x142>
				transit(mgr, transition_complete);
     a70:	491f      	ldr	r1, [pc, #124]	; (af0 <process_event+0x1bc>)
     a72:	4620      	mov	r0, r4
     a74:	47b0      	blx	r6
	__asm__ volatile(
     a76:	f04f 0320 	mov.w	r3, #32
     a7a:	f3ef 8b11 	mrs	fp, BASEPRI
     a7e:	f383 8812 	msr	BASEPRI_MAX, r3
     a82:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a86:	8b23      	ldrh	r3, [r4, #24]
     a88:	f023 0308 	bic.w	r3, r3, #8
     a8c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a8e:	8b23      	ldrh	r3, [r4, #24]
     a90:	06da      	lsls	r2, r3, #27
     a92:	d525      	bpl.n	ae0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a94:	f023 0310 	bic.w	r3, r3, #16
     a98:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     a9a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a9c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     aa0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     aa4:	2900      	cmp	r1, #0
     aa6:	f47f af5e 	bne.w	966 <process_event+0x32>
out:
     aaa:	e754      	b.n	956 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     aac:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     aae:	2900      	cmp	r1, #0
     ab0:	d0dc      	beq.n	a6c <process_event+0x138>
	return node->next;
     ab2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     ab6:	f8d1 b004 	ldr.w	fp, [r1, #4]
     aba:	463b      	mov	r3, r7
     abc:	4652      	mov	r2, sl
     abe:	4620      	mov	r0, r4
     ac0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ac2:	f1b9 0f00 	cmp.w	r9, #0
     ac6:	d0d1      	beq.n	a6c <process_event+0x138>
     ac8:	4649      	mov	r1, r9
     aca:	f8d9 9000 	ldr.w	r9, [r9]
     ace:	e7f2      	b.n	ab6 <process_event+0x182>
     ad0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     ad2:	463b      	mov	r3, r7
     ad4:	4652      	mov	r2, sl
     ad6:	4620      	mov	r0, r4
     ad8:	682d      	ldr	r5, [r5, #0]
     ada:	f00b f84b 	bl	bb74 <notify_one>
     ade:	e7c5      	b.n	a6c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     ae0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ae4:	bf1e      	ittt	ne
     ae6:	f023 0320 	bicne.w	r3, r3, #32
     aea:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     aec:	2102      	movne	r1, #2
     aee:	e7d5      	b.n	a9c <process_event+0x168>
     af0:	0000bba1 	.word	0x0000bba1

00000af4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     af8:	b091      	sub	sp, #68	; 0x44
     afa:	468b      	mov	fp, r1
     afc:	9002      	str	r0, [sp, #8]
     afe:	4692      	mov	sl, r2
     b00:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     b02:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     b04:	f89a 0000 	ldrb.w	r0, [sl]
     b08:	b908      	cbnz	r0, b0e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     b0a:	4628      	mov	r0, r5
     b0c:	e35f      	b.n	11ce <cbvprintf+0x6da>
		if (*fp != '%') {
     b0e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     b10:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     b14:	d007      	beq.n	b26 <cbvprintf+0x32>
			OUTC('%');
     b16:	9b02      	ldr	r3, [sp, #8]
     b18:	4659      	mov	r1, fp
     b1a:	4798      	blx	r3
     b1c:	2800      	cmp	r0, #0
     b1e:	f2c0 8356 	blt.w	11ce <cbvprintf+0x6da>
     b22:	3501      	adds	r5, #1
			break;
     b24:	e212      	b.n	f4c <cbvprintf+0x458>
		} state = {
     b26:	2218      	movs	r2, #24
     b28:	2100      	movs	r1, #0
     b2a:	a80a      	add	r0, sp, #40	; 0x28
     b2c:	f00d fb6b 	bl	e206 <memset>
	if (*sp == '%') {
     b30:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b34:	2b25      	cmp	r3, #37	; 0x25
     b36:	d078      	beq.n	c2a <cbvprintf+0x136>
     b38:	2200      	movs	r2, #0
     b3a:	4610      	mov	r0, r2
     b3c:	4696      	mov	lr, r2
     b3e:	4694      	mov	ip, r2
     b40:	4616      	mov	r6, r2
     b42:	4639      	mov	r1, r7
		switch (*sp) {
     b44:	f817 3b01 	ldrb.w	r3, [r7], #1
     b48:	2b2b      	cmp	r3, #43	; 0x2b
     b4a:	f000 809d 	beq.w	c88 <cbvprintf+0x194>
     b4e:	f200 8094 	bhi.w	c7a <cbvprintf+0x186>
     b52:	2b20      	cmp	r3, #32
     b54:	f000 809b 	beq.w	c8e <cbvprintf+0x19a>
     b58:	2b23      	cmp	r3, #35	; 0x23
     b5a:	f000 809b 	beq.w	c94 <cbvprintf+0x1a0>
     b5e:	b12e      	cbz	r6, b6c <cbvprintf+0x78>
     b60:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b64:	f046 0604 	orr.w	r6, r6, #4
     b68:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b6c:	f1bc 0f00 	cmp.w	ip, #0
     b70:	d005      	beq.n	b7e <cbvprintf+0x8a>
     b72:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b76:	f046 0608 	orr.w	r6, r6, #8
     b7a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b7e:	f1be 0f00 	cmp.w	lr, #0
     b82:	d005      	beq.n	b90 <cbvprintf+0x9c>
     b84:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b88:	f046 0610 	orr.w	r6, r6, #16
     b8c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b90:	b128      	cbz	r0, b9e <cbvprintf+0xaa>
     b92:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b96:	f040 0020 	orr.w	r0, r0, #32
     b9a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b9e:	b12a      	cbz	r2, bac <cbvprintf+0xb8>
     ba0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ba8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     bac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bb0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     bb4:	2844      	cmp	r0, #68	; 0x44
     bb6:	d103      	bne.n	bc0 <cbvprintf+0xcc>
		conv->flag_zero = false;
     bb8:	f36f 1286 	bfc	r2, #6, #1
     bbc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     bc0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     bc4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     bca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     bce:	d17b      	bne.n	cc8 <cbvprintf+0x1d4>
		conv->width_star = true;
     bd0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     bd4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     bd8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     bda:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     bde:	781a      	ldrb	r2, [r3, #0]
     be0:	2a2e      	cmp	r2, #46	; 0x2e
     be2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     be6:	bf0c      	ite	eq
     be8:	2101      	moveq	r1, #1
     bea:	2100      	movne	r1, #0
     bec:	f361 0241 	bfi	r2, r1, #1, #1
     bf0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     bf4:	d174      	bne.n	ce0 <cbvprintf+0x1ec>
	if (*sp == '*') {
     bf6:	785a      	ldrb	r2, [r3, #1]
     bf8:	2a2a      	cmp	r2, #42	; 0x2a
     bfa:	d06a      	beq.n	cd2 <cbvprintf+0x1de>
	++sp;
     bfc:	3301      	adds	r3, #1
	size_t val = 0;
     bfe:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     c00:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     c02:	4618      	mov	r0, r3
     c04:	f810 2b01 	ldrb.w	r2, [r0], #1
     c08:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c0c:	2f09      	cmp	r7, #9
     c0e:	f240 808e 	bls.w	d2e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     c12:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     c16:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     c18:	f3c2 0040 	ubfx	r0, r2, #1, #1
     c1c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     c20:	f361 0241 	bfi	r2, r1, #1, #1
     c24:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     c28:	e05a      	b.n	ce0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     c2a:	f10a 0702 	add.w	r7, sl, #2
     c2e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     c32:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c36:	07d9      	lsls	r1, r3, #31
     c38:	f140 8149 	bpl.w	ece <cbvprintf+0x3da>
			width = va_arg(ap, int);
     c3c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     c40:	f1b9 0f00 	cmp.w	r9, #0
     c44:	da07      	bge.n	c56 <cbvprintf+0x162>
				conv->flag_dash = true;
     c46:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     c4a:	f042 0204 	orr.w	r2, r2, #4
     c4e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     c52:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     c56:	075a      	lsls	r2, r3, #29
     c58:	f140 8142 	bpl.w	ee0 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     c5c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c60:	f1b8 0f00 	cmp.w	r8, #0
     c64:	f280 8141 	bge.w	eea <cbvprintf+0x3f6>
				conv->prec_present = false;
     c68:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c6c:	f36f 0341 	bfc	r3, #1, #1
     c70:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c74:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     c78:	e137      	b.n	eea <cbvprintf+0x3f6>
		switch (*sp) {
     c7a:	2b2d      	cmp	r3, #45	; 0x2d
     c7c:	d00c      	beq.n	c98 <cbvprintf+0x1a4>
     c7e:	2b30      	cmp	r3, #48	; 0x30
     c80:	f47f af6d 	bne.w	b5e <cbvprintf+0x6a>
			conv->flag_zero = true;
     c84:	2201      	movs	r2, #1
	} while (loop);
     c86:	e75c      	b.n	b42 <cbvprintf+0x4e>
			conv->flag_plus = true;
     c88:	f04f 0c01 	mov.w	ip, #1
     c8c:	e759      	b.n	b42 <cbvprintf+0x4e>
			conv->flag_space = true;
     c8e:	f04f 0e01 	mov.w	lr, #1
     c92:	e756      	b.n	b42 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c94:	2001      	movs	r0, #1
     c96:	e754      	b.n	b42 <cbvprintf+0x4e>
		switch (*sp) {
     c98:	2601      	movs	r6, #1
     c9a:	e752      	b.n	b42 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c9c:	fb0c 0202 	mla	r2, ip, r2, r0
     ca0:	3a30      	subs	r2, #48	; 0x30
     ca2:	4633      	mov	r3, r6
     ca4:	461e      	mov	r6, r3
     ca6:	f816 0b01 	ldrb.w	r0, [r6], #1
     caa:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     cae:	2f09      	cmp	r7, #9
     cb0:	d9f4      	bls.n	c9c <cbvprintf+0x1a8>
	if (sp != wp) {
     cb2:	4299      	cmp	r1, r3
     cb4:	d093      	beq.n	bde <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     cb6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     cba:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     cbc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     cbe:	f362 0141 	bfi	r1, r2, #1, #1
     cc2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     cc6:	e78a      	b.n	bde <cbvprintf+0xea>
     cc8:	460b      	mov	r3, r1
	size_t val = 0;
     cca:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     ccc:	f04f 0c0a 	mov.w	ip, #10
     cd0:	e7e8      	b.n	ca4 <cbvprintf+0x1b0>
		conv->prec_star = true;
     cd2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cd6:	f042 0204 	orr.w	r2, r2, #4
     cda:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     cde:	3302      	adds	r3, #2
	switch (*sp) {
     ce0:	461f      	mov	r7, r3
     ce2:	f817 2b01 	ldrb.w	r2, [r7], #1
     ce6:	2a6c      	cmp	r2, #108	; 0x6c
     ce8:	d041      	beq.n	d6e <cbvprintf+0x27a>
     cea:	d825      	bhi.n	d38 <cbvprintf+0x244>
     cec:	2a68      	cmp	r2, #104	; 0x68
     cee:	d02b      	beq.n	d48 <cbvprintf+0x254>
     cf0:	2a6a      	cmp	r2, #106	; 0x6a
     cf2:	d046      	beq.n	d82 <cbvprintf+0x28e>
     cf4:	2a4c      	cmp	r2, #76	; 0x4c
     cf6:	d04c      	beq.n	d92 <cbvprintf+0x29e>
     cf8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     cfa:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     cfe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     d02:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     d06:	2a78      	cmp	r2, #120	; 0x78
     d08:	f200 80d9 	bhi.w	ebe <cbvprintf+0x3ca>
     d0c:	2a57      	cmp	r2, #87	; 0x57
     d0e:	d84d      	bhi.n	dac <cbvprintf+0x2b8>
     d10:	2a41      	cmp	r2, #65	; 0x41
     d12:	d003      	beq.n	d1c <cbvprintf+0x228>
     d14:	3a45      	subs	r2, #69	; 0x45
     d16:	2a02      	cmp	r2, #2
     d18:	f200 80d1 	bhi.w	ebe <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     d1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d20:	2204      	movs	r2, #4
     d22:	f362 0302 	bfi	r3, r2, #0, #3
     d26:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     d2a:	2301      	movs	r3, #1
			break;
     d2c:	e09e      	b.n	e6c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     d2e:	fb06 2101 	mla	r1, r6, r1, r2
     d32:	3930      	subs	r1, #48	; 0x30
     d34:	4603      	mov	r3, r0
     d36:	e764      	b.n	c02 <cbvprintf+0x10e>
	switch (*sp) {
     d38:	2a74      	cmp	r2, #116	; 0x74
     d3a:	d026      	beq.n	d8a <cbvprintf+0x296>
     d3c:	2a7a      	cmp	r2, #122	; 0x7a
     d3e:	d1db      	bne.n	cf8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     d40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d44:	2206      	movs	r2, #6
     d46:	e00d      	b.n	d64 <cbvprintf+0x270>
		if (*++sp == 'h') {
     d48:	785a      	ldrb	r2, [r3, #1]
     d4a:	2a68      	cmp	r2, #104	; 0x68
     d4c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d50:	d106      	bne.n	d60 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d52:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d54:	f361 02c6 	bfi	r2, r1, #3, #4
     d58:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d5c:	1c9f      	adds	r7, r3, #2
     d5e:	e7cc      	b.n	cfa <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d60:	4613      	mov	r3, r2
     d62:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d64:	f362 03c6 	bfi	r3, r2, #3, #4
     d68:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d6c:	e7c5      	b.n	cfa <cbvprintf+0x206>
		if (*++sp == 'l') {
     d6e:	785a      	ldrb	r2, [r3, #1]
     d70:	2a6c      	cmp	r2, #108	; 0x6c
     d72:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d76:	d101      	bne.n	d7c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d78:	2104      	movs	r1, #4
     d7a:	e7eb      	b.n	d54 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d7c:	4613      	mov	r3, r2
     d7e:	2203      	movs	r2, #3
     d80:	e7f0      	b.n	d64 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d86:	2205      	movs	r2, #5
     d88:	e7ec      	b.n	d64 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d8a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d8e:	2207      	movs	r2, #7
     d90:	e7e8      	b.n	d64 <cbvprintf+0x270>
		conv->unsupported = true;
     d92:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d96:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d9a:	f023 0302 	bic.w	r3, r3, #2
     d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     da2:	f043 0302 	orr.w	r3, r3, #2
     da6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     daa:	e7a6      	b.n	cfa <cbvprintf+0x206>
	switch (conv->specifier) {
     dac:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     db0:	2920      	cmp	r1, #32
     db2:	f200 8084 	bhi.w	ebe <cbvprintf+0x3ca>
     db6:	a001      	add	r0, pc, #4	; (adr r0, dbc <cbvprintf+0x2c8>)
     db8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     dbc:	00000e81 	.word	0x00000e81
     dc0:	00000ebf 	.word	0x00000ebf
     dc4:	00000ebf 	.word	0x00000ebf
     dc8:	00000ebf 	.word	0x00000ebf
     dcc:	00000ebf 	.word	0x00000ebf
     dd0:	00000ebf 	.word	0x00000ebf
     dd4:	00000ebf 	.word	0x00000ebf
     dd8:	00000ebf 	.word	0x00000ebf
     ddc:	00000ebf 	.word	0x00000ebf
     de0:	00000d1d 	.word	0x00000d1d
     de4:	00000ebf 	.word	0x00000ebf
     de8:	00000e81 	.word	0x00000e81
     dec:	00000e41 	.word	0x00000e41
     df0:	00000d1d 	.word	0x00000d1d
     df4:	00000d1d 	.word	0x00000d1d
     df8:	00000d1d 	.word	0x00000d1d
     dfc:	00000ebf 	.word	0x00000ebf
     e00:	00000e41 	.word	0x00000e41
     e04:	00000ebf 	.word	0x00000ebf
     e08:	00000ebf 	.word	0x00000ebf
     e0c:	00000ebf 	.word	0x00000ebf
     e10:	00000ebf 	.word	0x00000ebf
     e14:	00000e89 	.word	0x00000e89
     e18:	00000e81 	.word	0x00000e81
     e1c:	00000ea5 	.word	0x00000ea5
     e20:	00000ebf 	.word	0x00000ebf
     e24:	00000ebf 	.word	0x00000ebf
     e28:	00000ea5 	.word	0x00000ea5
     e2c:	00000ebf 	.word	0x00000ebf
     e30:	00000e81 	.word	0x00000e81
     e34:	00000ebf 	.word	0x00000ebf
     e38:	00000ebf 	.word	0x00000ebf
     e3c:	00000e81 	.word	0x00000e81
		conv->specifier_cat = SPECIFIER_SINT;
     e40:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e44:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     e46:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     e4a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e4e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e50:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e54:	bf02      	ittt	eq
     e56:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e5a:	f041 0101 	orreq.w	r1, r1, #1
     e5e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e62:	2a63      	cmp	r2, #99	; 0x63
     e64:	d131      	bne.n	eca <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e66:	3b00      	subs	r3, #0
     e68:	bf18      	it	ne
     e6a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e6c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e70:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e74:	430b      	orrs	r3, r1
     e76:	f363 0241 	bfi	r2, r3, #1, #1
     e7a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e7e:	e6d8      	b.n	c32 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e80:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e84:	2002      	movs	r0, #2
     e86:	e7de      	b.n	e46 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e88:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e8c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e90:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e94:	2103      	movs	r1, #3
     e96:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e9a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e9c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ea0:	4143      	adcs	r3, r0
     ea2:	e7e3      	b.n	e6c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     ea4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     ea8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     eaa:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     eae:	f361 0202 	bfi	r2, r1, #0, #3
     eb2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     eb6:	bf14      	ite	ne
     eb8:	2301      	movne	r3, #1
     eba:	2300      	moveq	r3, #0
     ebc:	e7d6      	b.n	e6c <cbvprintf+0x378>
		conv->invalid = true;
     ebe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ec2:	f043 0301 	orr.w	r3, r3, #1
     ec6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     eca:	2300      	movs	r3, #0
     ecc:	e7ce      	b.n	e6c <cbvprintf+0x378>
		} else if (conv->width_present) {
     ece:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     ed2:	2a00      	cmp	r2, #0
			width = conv->width_value;
     ed4:	bfb4      	ite	lt
     ed6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     eda:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     ede:	e6ba      	b.n	c56 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     ee0:	079b      	lsls	r3, r3, #30
     ee2:	f57f aec7 	bpl.w	c74 <cbvprintf+0x180>
			precision = conv->prec_value;
     ee6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     eea:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     eee:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ef0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     ef4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     ef8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     efc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     efe:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     f02:	d138      	bne.n	f76 <cbvprintf+0x482>
			switch (length_mod) {
     f04:	1ecb      	subs	r3, r1, #3
     f06:	2b04      	cmp	r3, #4
     f08:	d822      	bhi.n	f50 <cbvprintf+0x45c>
     f0a:	e8df f003 	tbb	[pc, r3]
     f0e:	0903      	.short	0x0903
     f10:	2109      	.short	0x2109
     f12:	21          	.byte	0x21
     f13:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     f14:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     f18:	17da      	asrs	r2, r3, #31
     f1a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     f1e:	e006      	b.n	f2e <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     f20:	3407      	adds	r4, #7
     f22:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     f26:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     f2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     f2e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     f32:	f013 0603 	ands.w	r6, r3, #3
     f36:	d056      	beq.n	fe6 <cbvprintf+0x4f2>
			OUTS(sp, fp);
     f38:	9802      	ldr	r0, [sp, #8]
     f3a:	463b      	mov	r3, r7
     f3c:	4652      	mov	r2, sl
     f3e:	4659      	mov	r1, fp
     f40:	f00b f8fe 	bl	c140 <outs>
     f44:	2800      	cmp	r0, #0
     f46:	f2c0 8142 	blt.w	11ce <cbvprintf+0x6da>
     f4a:	4405      	add	r5, r0
			continue;
     f4c:	46ba      	mov	sl, r7
     f4e:	e5d9      	b.n	b04 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f50:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f54:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f56:	ea4f 72e3 	mov.w	r2, r3, asr #31
     f5a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f5e:	d105      	bne.n	f6c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     f60:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f64:	930a      	str	r3, [sp, #40]	; 0x28
     f66:	2300      	movs	r3, #0
     f68:	930b      	str	r3, [sp, #44]	; 0x2c
     f6a:	e7e0      	b.n	f2e <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     f6c:	2902      	cmp	r1, #2
     f6e:	d1de      	bne.n	f2e <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     f70:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     f74:	e7d0      	b.n	f18 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f76:	2b02      	cmp	r3, #2
     f78:	d123      	bne.n	fc2 <cbvprintf+0x4ce>
			switch (length_mod) {
     f7a:	1ecb      	subs	r3, r1, #3
     f7c:	2b04      	cmp	r3, #4
     f7e:	d813      	bhi.n	fa8 <cbvprintf+0x4b4>
     f80:	e8df f003 	tbb	[pc, r3]
     f84:	120a0a03 	.word	0x120a0a03
     f88:	12          	.byte	0x12
     f89:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     f8a:	6822      	ldr	r2, [r4, #0]
     f8c:	920a      	str	r2, [sp, #40]	; 0x28
     f8e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     f90:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     f92:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f94:	4604      	mov	r4, r0
     f96:	e7ca      	b.n	f2e <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     f98:	1de0      	adds	r0, r4, #7
     f9a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     f9e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     fa2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     fa6:	e7f5      	b.n	f94 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     fa8:	f854 3b04 	ldr.w	r3, [r4], #4
     fac:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     fae:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     fb0:	f04f 0300 	mov.w	r3, #0
     fb4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     fb6:	d0d3      	beq.n	f60 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     fb8:	2902      	cmp	r1, #2
     fba:	d1b8      	bne.n	f2e <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     fbc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     fc0:	e7d0      	b.n	f64 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     fc2:	2b04      	cmp	r3, #4
     fc4:	d109      	bne.n	fda <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     fc6:	1de3      	adds	r3, r4, #7
     fc8:	f023 0307 	bic.w	r3, r3, #7
     fcc:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
     fd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     fd8:	e7a9      	b.n	f2e <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     fda:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     fdc:	bf04      	itt	eq
     fde:	f854 3b04 	ldreq.w	r3, [r4], #4
     fe2:	930a      	streq	r3, [sp, #40]	; 0x28
     fe4:	e7a3      	b.n	f2e <cbvprintf+0x43a>
		switch (conv->specifier) {
     fe6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     fea:	2878      	cmp	r0, #120	; 0x78
     fec:	d8ae      	bhi.n	f4c <cbvprintf+0x458>
     fee:	2862      	cmp	r0, #98	; 0x62
     ff0:	d822      	bhi.n	1038 <cbvprintf+0x544>
     ff2:	2825      	cmp	r0, #37	; 0x25
     ff4:	f43f ad8f 	beq.w	b16 <cbvprintf+0x22>
     ff8:	2858      	cmp	r0, #88	; 0x58
     ffa:	d1a7      	bne.n	f4c <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     ffc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1000:	9300      	str	r3, [sp, #0]
    1002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1006:	ab04      	add	r3, sp, #16
    1008:	aa0c      	add	r2, sp, #48	; 0x30
    100a:	f00b f853 	bl	c0b4 <encode_uint>
    100e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1018:	db0c      	blt.n	1034 <cbvprintf+0x540>
				conv->flag_zero = false;
    101a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    101e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1022:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1026:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1028:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    102c:	d902      	bls.n	1034 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    102e:	eba8 0303 	sub.w	r3, r8, r3
    1032:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1034:	4680      	mov	r8, r0
    1036:	e03d      	b.n	10b4 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    1038:	3863      	subs	r0, #99	; 0x63
    103a:	2815      	cmp	r0, #21
    103c:	d886      	bhi.n	f4c <cbvprintf+0x458>
    103e:	a201      	add	r2, pc, #4	; (adr r2, 1044 <cbvprintf+0x550>)
    1040:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1044:	000010c5 	.word	0x000010c5
    1048:	00001129 	.word	0x00001129
    104c:	00000f4d 	.word	0x00000f4d
    1050:	00000f4d 	.word	0x00000f4d
    1054:	00000f4d 	.word	0x00000f4d
    1058:	00000f4d 	.word	0x00000f4d
    105c:	00001129 	.word	0x00001129
    1060:	00000f4d 	.word	0x00000f4d
    1064:	00000f4d 	.word	0x00000f4d
    1068:	00000f4d 	.word	0x00000f4d
    106c:	00000f4d 	.word	0x00000f4d
    1070:	00001183 	.word	0x00001183
    1074:	00001151 	.word	0x00001151
    1078:	00001155 	.word	0x00001155
    107c:	00000f4d 	.word	0x00000f4d
    1080:	00000f4d 	.word	0x00000f4d
    1084:	0000109d 	.word	0x0000109d
    1088:	00000f4d 	.word	0x00000f4d
    108c:	00001151 	.word	0x00001151
    1090:	00000f4d 	.word	0x00000f4d
    1094:	00000f4d 	.word	0x00000f4d
    1098:	00001151 	.word	0x00001151
			if (precision >= 0) {
    109c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    10a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    10a4:	db0a      	blt.n	10bc <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    10a6:	4641      	mov	r1, r8
    10a8:	4650      	mov	r0, sl
    10aa:	f00d f852 	bl	e152 <strnlen>
			bpe = bps + len;
    10ae:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    10b2:	2600      	movs	r6, #0
		if (bps == NULL) {
    10b4:	f1ba 0f00 	cmp.w	sl, #0
    10b8:	d10c      	bne.n	10d4 <cbvprintf+0x5e0>
    10ba:	e747      	b.n	f4c <cbvprintf+0x458>
				len = strlen(bps);
    10bc:	4650      	mov	r0, sl
    10be:	f00d f841 	bl	e144 <strlen>
    10c2:	e7f4      	b.n	10ae <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10c6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    10ca:	2600      	movs	r6, #0
			bps = buf;
    10cc:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    10d0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    10d4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    10d8:	b106      	cbz	r6, 10dc <cbvprintf+0x5e8>
			nj_len += 1U;
    10da:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    10dc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    10e0:	06d0      	lsls	r0, r2, #27
    10e2:	d568      	bpl.n	11b6 <cbvprintf+0x6c2>
			nj_len += 2U;
    10e4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    10e6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    10e8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    10ea:	bf48      	it	mi
    10ec:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    10ee:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    10f0:	bf48      	it	mi
    10f2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    10f4:	f1b9 0f00 	cmp.w	r9, #0
    10f8:	dd76      	ble.n	11e8 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    10fa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    10fe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1102:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1106:	9303      	str	r3, [sp, #12]
    1108:	0753      	lsls	r3, r2, #29
    110a:	d46d      	bmi.n	11e8 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    110c:	0650      	lsls	r0, r2, #25
    110e:	d561      	bpl.n	11d4 <cbvprintf+0x6e0>
					if (sign != 0) {
    1110:	b146      	cbz	r6, 1124 <cbvprintf+0x630>
						OUTC(sign);
    1112:	9b02      	ldr	r3, [sp, #8]
    1114:	4659      	mov	r1, fp
    1116:	4630      	mov	r0, r6
    1118:	4798      	blx	r3
    111a:	2800      	cmp	r0, #0
    111c:	db57      	blt.n	11ce <cbvprintf+0x6da>
						sign = 0;
    111e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1120:	3501      	adds	r5, #1
						sign = 0;
    1122:	461e      	mov	r6, r3
					pad = '0';
    1124:	2330      	movs	r3, #48	; 0x30
    1126:	e056      	b.n	11d6 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    1128:	071e      	lsls	r6, r3, #28
    112a:	d40f      	bmi.n	114c <cbvprintf+0x658>
				sign = ' ';
    112c:	f013 0610 	ands.w	r6, r3, #16
    1130:	bf18      	it	ne
    1132:	2620      	movne	r6, #32
			sint = value->sint;
    1134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1138:	2b00      	cmp	r3, #0
    113a:	f6bf af5f 	bge.w	ffc <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    113e:	4252      	negs	r2, r2
    1140:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1144:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1148:	262d      	movs	r6, #45	; 0x2d
    114a:	e757      	b.n	ffc <cbvprintf+0x508>
				sign = '+';
    114c:	262b      	movs	r6, #43	; 0x2b
    114e:	e7f1      	b.n	1134 <cbvprintf+0x640>
		switch (conv->specifier) {
    1150:	2600      	movs	r6, #0
    1152:	e753      	b.n	ffc <cbvprintf+0x508>
			if (value->ptr != NULL) {
    1154:	980a      	ldr	r0, [sp, #40]	; 0x28
    1156:	b340      	cbz	r0, 11aa <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1158:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    115c:	9300      	str	r3, [sp, #0]
    115e:	aa0c      	add	r2, sp, #48	; 0x30
    1160:	ab04      	add	r3, sp, #16
    1162:	2100      	movs	r1, #0
    1164:	f00a ffa6 	bl	c0b4 <encode_uint>
				conv->altform_0c = true;
    1168:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    116c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1170:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1174:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1178:	4682      	mov	sl, r0
				conv->altform_0c = true;
    117a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    117e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1180:	e746      	b.n	1010 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    1182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1184:	2907      	cmp	r1, #7
    1186:	f63f aee1 	bhi.w	f4c <cbvprintf+0x458>
    118a:	e8df f001 	tbb	[pc, r1]
    118e:	040c      	.short	0x040c
    1190:	08080c06 	.word	0x08080c06
    1194:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1196:	701d      	strb	r5, [r3, #0]
		break;
    1198:	e6d8      	b.n	f4c <cbvprintf+0x458>
		*(short *)dp = (short)count;
    119a:	801d      	strh	r5, [r3, #0]
		break;
    119c:	e6d6      	b.n	f4c <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    119e:	17ea      	asrs	r2, r5, #31
    11a0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    11a4:	e6d2      	b.n	f4c <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11a6:	601d      	str	r5, [r3, #0]
		break;
    11a8:	e6d0      	b.n	f4c <cbvprintf+0x458>
			bps = "(nil)";
    11aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1274 <cbvprintf+0x780>
    11ae:	4606      	mov	r6, r0
			bpe = bps + 5;
    11b0:	f10a 0805 	add.w	r8, sl, #5
    11b4:	e78e      	b.n	10d4 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    11b6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    11b8:	bf48      	it	mi
    11ba:	3301      	addmi	r3, #1
    11bc:	e793      	b.n	10e6 <cbvprintf+0x5f2>
					OUTC(pad);
    11be:	4618      	mov	r0, r3
    11c0:	9303      	str	r3, [sp, #12]
    11c2:	4659      	mov	r1, fp
    11c4:	9b02      	ldr	r3, [sp, #8]
    11c6:	4798      	blx	r3
    11c8:	2800      	cmp	r0, #0
    11ca:	9b03      	ldr	r3, [sp, #12]
    11cc:	da04      	bge.n	11d8 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    11ce:	b011      	add	sp, #68	; 0x44
    11d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    11d4:	2320      	movs	r3, #32
    11d6:	444d      	add	r5, r9
    11d8:	464a      	mov	r2, r9
				while (width-- > 0) {
    11da:	2a00      	cmp	r2, #0
    11dc:	eba5 0109 	sub.w	r1, r5, r9
    11e0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    11e4:	dceb      	bgt.n	11be <cbvprintf+0x6ca>
    11e6:	460d      	mov	r5, r1
		if (sign != 0) {
    11e8:	b136      	cbz	r6, 11f8 <cbvprintf+0x704>
			OUTC(sign);
    11ea:	9b02      	ldr	r3, [sp, #8]
    11ec:	4659      	mov	r1, fp
    11ee:	4630      	mov	r0, r6
    11f0:	4798      	blx	r3
    11f2:	2800      	cmp	r0, #0
    11f4:	dbeb      	blt.n	11ce <cbvprintf+0x6da>
    11f6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    11f8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11fc:	06d9      	lsls	r1, r3, #27
    11fe:	d401      	bmi.n	1204 <cbvprintf+0x710>
    1200:	071a      	lsls	r2, r3, #28
    1202:	d506      	bpl.n	1212 <cbvprintf+0x71e>
				OUTC('0');
    1204:	9b02      	ldr	r3, [sp, #8]
    1206:	4659      	mov	r1, fp
    1208:	2030      	movs	r0, #48	; 0x30
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	dbde      	blt.n	11ce <cbvprintf+0x6da>
    1210:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1212:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1216:	06db      	lsls	r3, r3, #27
    1218:	d507      	bpl.n	122a <cbvprintf+0x736>
				OUTC(conv->specifier);
    121a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    121e:	9b02      	ldr	r3, [sp, #8]
    1220:	4659      	mov	r1, fp
    1222:	4798      	blx	r3
    1224:	2800      	cmp	r0, #0
    1226:	dbd2      	blt.n	11ce <cbvprintf+0x6da>
    1228:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    122a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    122c:	442e      	add	r6, r5
    122e:	1b73      	subs	r3, r6, r5
    1230:	2b00      	cmp	r3, #0
    1232:	dc16      	bgt.n	1262 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    1234:	9802      	ldr	r0, [sp, #8]
    1236:	4643      	mov	r3, r8
    1238:	4652      	mov	r2, sl
    123a:	4659      	mov	r1, fp
    123c:	f00a ff80 	bl	c140 <outs>
    1240:	2800      	cmp	r0, #0
    1242:	dbc4      	blt.n	11ce <cbvprintf+0x6da>
    1244:	4405      	add	r5, r0
		while (width > 0) {
    1246:	44a9      	add	r9, r5
    1248:	eba9 0305 	sub.w	r3, r9, r5
    124c:	2b00      	cmp	r3, #0
    124e:	f77f ae7d 	ble.w	f4c <cbvprintf+0x458>
			OUTC(' ');
    1252:	9b02      	ldr	r3, [sp, #8]
    1254:	4659      	mov	r1, fp
    1256:	2020      	movs	r0, #32
    1258:	4798      	blx	r3
    125a:	2800      	cmp	r0, #0
    125c:	dbb7      	blt.n	11ce <cbvprintf+0x6da>
    125e:	3501      	adds	r5, #1
			--width;
    1260:	e7f2      	b.n	1248 <cbvprintf+0x754>
				OUTC('0');
    1262:	9b02      	ldr	r3, [sp, #8]
    1264:	4659      	mov	r1, fp
    1266:	2030      	movs	r0, #48	; 0x30
    1268:	4798      	blx	r3
    126a:	2800      	cmp	r0, #0
    126c:	dbaf      	blt.n	11ce <cbvprintf+0x6da>
    126e:	3501      	adds	r5, #1
    1270:	e7dd      	b.n	122e <cbvprintf+0x73a>
    1272:	bf00      	nop
    1274:	000102fa 	.word	0x000102fa

00001278 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1278:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    127a:	4910      	ldr	r1, [pc, #64]	; (12bc <enable_logger+0x44>)
    127c:	4810      	ldr	r0, [pc, #64]	; (12c0 <enable_logger+0x48>)
{
    127e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1280:	2200      	movs	r2, #0
    1282:	f00d ff83 	bl	f18c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1286:	4d0f      	ldr	r5, [pc, #60]	; (12c4 <enable_logger+0x4c>)
    1288:	490f      	ldr	r1, [pc, #60]	; (12c8 <enable_logger+0x50>)
    128a:	2200      	movs	r2, #0
    128c:	2300      	movs	r3, #0
    128e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1292:	2400      	movs	r4, #0
    1294:	230e      	movs	r3, #14
    1296:	e9cd 3403 	strd	r3, r4, [sp, #12]
    129a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    129e:	4b0b      	ldr	r3, [pc, #44]	; (12cc <enable_logger+0x54>)
    12a0:	9400      	str	r4, [sp, #0]
    12a2:	f44f 7240 	mov.w	r2, #768	; 0x300
    12a6:	4628      	mov	r0, r5
    12a8:	f009 f9c0 	bl	a62c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    12ac:	4908      	ldr	r1, [pc, #32]	; (12d0 <enable_logger+0x58>)
    12ae:	4628      	mov	r0, r5
    12b0:	f009 f912 	bl	a4d8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    12b4:	4620      	mov	r0, r4
    12b6:	b009      	add	sp, #36	; 0x24
    12b8:	bd30      	pop	{r4, r5, pc}
    12ba:	bf00      	nop
    12bc:	000012d5 	.word	0x000012d5
    12c0:	20000920 	.word	0x20000920
    12c4:	20000958 	.word	0x20000958
    12c8:	20002758 	.word	0x20002758
    12cc:	00001529 	.word	0x00001529
    12d0:	00010679 	.word	0x00010679

000012d4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    12d4:	4801      	ldr	r0, [pc, #4]	; (12dc <log_process_thread_timer_expiry_fn+0x8>)
    12d6:	f009 bbed 	b.w	aab4 <z_impl_k_sem_give>
    12da:	bf00      	nop
    12dc:	20000354 	.word	0x20000354

000012e0 <log_init>:
{
    12e0:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    12e2:	4b12      	ldr	r3, [pc, #72]	; (132c <log_init+0x4c>)
    12e4:	f3bf 8f5b 	dmb	ish
    12e8:	e853 5f00 	ldrex	r5, [r3]
    12ec:	1c6a      	adds	r2, r5, #1
    12ee:	e843 2100 	strex	r1, r2, [r3]
    12f2:	2900      	cmp	r1, #0
    12f4:	d1f8      	bne.n	12e8 <log_init+0x8>
    12f6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    12fa:	b92d      	cbnz	r5, 1308 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    12fc:	4c0c      	ldr	r4, [pc, #48]	; (1330 <log_init+0x50>)
    12fe:	4e0d      	ldr	r6, [pc, #52]	; (1334 <log_init+0x54>)
    1300:	1b36      	subs	r6, r6, r4
    1302:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1304:	42b5      	cmp	r5, r6
    1306:	db00      	blt.n	130a <log_init+0x2a>
}
    1308:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    130a:	7b23      	ldrb	r3, [r4, #12]
    130c:	b153      	cbz	r3, 1324 <log_init+0x44>
			if (backend->api->init != NULL) {
    130e:	6823      	ldr	r3, [r4, #0]
    1310:	699b      	ldr	r3, [r3, #24]
    1312:	b10b      	cbz	r3, 1318 <log_init+0x38>
				backend->api->init(backend);
    1314:	4620      	mov	r0, r4
    1316:	4798      	blx	r3
			log_backend_enable(backend,
    1318:	6863      	ldr	r3, [r4, #4]
    131a:	2204      	movs	r2, #4
    131c:	6819      	ldr	r1, [r3, #0]
    131e:	4620      	mov	r0, r4
    1320:	f000 fa38 	bl	1794 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1324:	3501      	adds	r5, #1
    1326:	3410      	adds	r4, #16
    1328:	e7ec      	b.n	1304 <log_init+0x24>
    132a:	bf00      	nop
    132c:	20001100 	.word	0x20001100
    1330:	0000f888 	.word	0x0000f888
    1334:	0000f898 	.word	0x0000f898

00001338 <z_log_notify_backend_enabled>:
{
    1338:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    133a:	4c04      	ldr	r4, [pc, #16]	; (134c <z_log_notify_backend_enabled+0x14>)
    133c:	7823      	ldrb	r3, [r4, #0]
    133e:	b913      	cbnz	r3, 1346 <z_log_notify_backend_enabled+0xe>
    1340:	4803      	ldr	r0, [pc, #12]	; (1350 <z_log_notify_backend_enabled+0x18>)
    1342:	f009 fbb7 	bl	aab4 <z_impl_k_sem_give>
	backend_attached = true;
    1346:	2301      	movs	r3, #1
    1348:	7023      	strb	r3, [r4, #0]
}
    134a:	bd10      	pop	{r4, pc}
    134c:	200022d8 	.word	0x200022d8
    1350:	20000354 	.word	0x20000354

00001354 <z_log_dropped>:
    1354:	4b0c      	ldr	r3, [pc, #48]	; (1388 <z_log_dropped+0x34>)
    1356:	f3bf 8f5b 	dmb	ish
    135a:	e853 2f00 	ldrex	r2, [r3]
    135e:	3201      	adds	r2, #1
    1360:	e843 2100 	strex	r1, r2, [r3]
    1364:	2900      	cmp	r1, #0
    1366:	d1f8      	bne.n	135a <z_log_dropped+0x6>
    1368:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    136c:	b158      	cbz	r0, 1386 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    136e:	f3bf 8f5b 	dmb	ish
    1372:	4b06      	ldr	r3, [pc, #24]	; (138c <z_log_dropped+0x38>)
    1374:	e853 2f00 	ldrex	r2, [r3]
    1378:	3a01      	subs	r2, #1
    137a:	e843 2100 	strex	r1, r2, [r3]
    137e:	2900      	cmp	r1, #0
    1380:	d1f8      	bne.n	1374 <z_log_dropped+0x20>
    1382:	f3bf 8f5b 	dmb	ish
}
    1386:	4770      	bx	lr
    1388:	200010fc 	.word	0x200010fc
    138c:	200010f8 	.word	0x200010f8

00001390 <z_log_dropped_read_and_clear>:
}
    1390:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1392:	4b06      	ldr	r3, [pc, #24]	; (13ac <z_log_dropped_read_and_clear+0x1c>)
    1394:	f3bf 8f5b 	dmb	ish
    1398:	4602      	mov	r2, r0
    139a:	e853 0f00 	ldrex	r0, [r3]
    139e:	e843 2100 	strex	r1, r2, [r3]
    13a2:	2900      	cmp	r1, #0
    13a4:	d1f9      	bne.n	139a <z_log_dropped_read_and_clear+0xa>
    13a6:	f3bf 8f5b 	dmb	ish
    13aa:	4770      	bx	lr
    13ac:	200010fc 	.word	0x200010fc

000013b0 <dropped_notify>:
{
    13b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    13b2:	f7ff ffed 	bl	1390 <z_log_dropped_read_and_clear>
    13b6:	4c0a      	ldr	r4, [pc, #40]	; (13e0 <dropped_notify+0x30>)
    13b8:	4d0a      	ldr	r5, [pc, #40]	; (13e4 <dropped_notify+0x34>)
    13ba:	1b2d      	subs	r5, r5, r4
    13bc:	4607      	mov	r7, r0
    13be:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    13c0:	2600      	movs	r6, #0
    13c2:	42ae      	cmp	r6, r5
    13c4:	db00      	blt.n	13c8 <dropped_notify+0x18>
}
    13c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    13c8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    13ca:	795b      	ldrb	r3, [r3, #5]
    13cc:	b12b      	cbz	r3, 13da <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    13ce:	6823      	ldr	r3, [r4, #0]
    13d0:	691b      	ldr	r3, [r3, #16]
    13d2:	b113      	cbz	r3, 13da <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    13da:	3601      	adds	r6, #1
    13dc:	3410      	adds	r4, #16
    13de:	e7f0      	b.n	13c2 <dropped_notify+0x12>
    13e0:	0000f888 	.word	0x0000f888
    13e4:	0000f898 	.word	0x0000f898

000013e8 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    13e8:	4901      	ldr	r1, [pc, #4]	; (13f0 <z_log_msg2_init+0x8>)
    13ea:	4802      	ldr	r0, [pc, #8]	; (13f4 <z_log_msg2_init+0xc>)
    13ec:	f00b b836 	b.w	c45c <mpsc_pbuf_init>
    13f0:	0000f9a8 	.word	0x0000f9a8
    13f4:	20001104 	.word	0x20001104

000013f8 <log_core_init>:
	panic_mode = false;
    13f8:	4a09      	ldr	r2, [pc, #36]	; (1420 <log_core_init+0x28>)
{
    13fa:	b508      	push	{r3, lr}
	panic_mode = false;
    13fc:	2300      	movs	r3, #0
    13fe:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1400:	4a08      	ldr	r2, [pc, #32]	; (1424 <log_core_init+0x2c>)
    1402:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1404:	4b08      	ldr	r3, [pc, #32]	; (1428 <log_core_init+0x30>)
    1406:	4a09      	ldr	r2, [pc, #36]	; (142c <log_core_init+0x34>)
    1408:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    140a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    140e:	f000 fbd1 	bl	1bb4 <log_output_timestamp_freq_set>
		z_log_msg2_init();
    1412:	f7ff ffe9 	bl	13e8 <z_log_msg2_init>
}
    1416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    141a:	f000 b925 	b.w	1668 <z_log_runtime_filters_init>
    141e:	bf00      	nop
    1420:	200022d9 	.word	0x200022d9
    1424:	200010fc 	.word	0x200010fc
    1428:	20000004 	.word	0x20000004
    142c:	0000c963 	.word	0x0000c963

00001430 <z_log_msg2_alloc>:
{
    1430:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1432:	2200      	movs	r2, #0
    1434:	4801      	ldr	r0, [pc, #4]	; (143c <z_log_msg2_alloc+0xc>)
    1436:	2300      	movs	r3, #0
    1438:	f00b b82f 	b.w	c49a <mpsc_pbuf_alloc>
    143c:	20001104 	.word	0x20001104

00001440 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1440:	4801      	ldr	r0, [pc, #4]	; (1448 <z_log_msg2_claim+0x8>)
    1442:	f00b b8bd 	b.w	c5c0 <mpsc_pbuf_claim>
    1446:	bf00      	nop
    1448:	20001104 	.word	0x20001104

0000144c <z_log_msg2_free>:
{
    144c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    144e:	4801      	ldr	r0, [pc, #4]	; (1454 <z_log_msg2_free+0x8>)
    1450:	f00b b902 	b.w	c658 <mpsc_pbuf_free>
    1454:	20001104 	.word	0x20001104

00001458 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1458:	4801      	ldr	r0, [pc, #4]	; (1460 <z_log_msg2_pending+0x8>)
    145a:	f00b b931 	b.w	c6c0 <mpsc_pbuf_is_pending>
    145e:	bf00      	nop
    1460:	20001104 	.word	0x20001104

00001464 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1464:	4b2a      	ldr	r3, [pc, #168]	; (1510 <z_impl_log_process+0xac>)
    1466:	781b      	ldrb	r3, [r3, #0]
{
    1468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    146c:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    146e:	b90b      	cbnz	r3, 1474 <z_impl_log_process+0x10>
    1470:	2800      	cmp	r0, #0
    1472:	d04b      	beq.n	150c <z_impl_log_process+0xa8>
	msg = get_msg();
    1474:	f00b fa89 	bl	c98a <get_msg>
	if (msg.msg) {
    1478:	4605      	mov	r5, r0
    147a:	b118      	cbz	r0, 1484 <z_impl_log_process+0x20>
		if (!bypass) {
    147c:	b16e      	cbz	r6, 149a <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    147e:	4628      	mov	r0, r5
    1480:	f7ff ffe4 	bl	144c <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1484:	b92e      	cbnz	r6, 1492 <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    1486:	4b23      	ldr	r3, [pc, #140]	; (1514 <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	2b00      	cmp	r3, #0
    148c:	dd01      	ble.n	1492 <z_impl_log_process+0x2e>
		dropped_notify();
    148e:	f7ff ff8f 	bl	13b0 <dropped_notify>
}
    1492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    1496:	f7ff bfdf 	b.w	1458 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    149a:	4b1f      	ldr	r3, [pc, #124]	; (1518 <z_impl_log_process+0xb4>)
    149c:	f3bf 8f5b 	dmb	ish
    14a0:	e853 2f00 	ldrex	r2, [r3]
    14a4:	3a01      	subs	r2, #1
    14a6:	e843 2100 	strex	r1, r2, [r3]
    14aa:	2900      	cmp	r1, #0
    14ac:	d1f8      	bne.n	14a0 <z_impl_log_process+0x3c>
    14ae:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    14b2:	4c1a      	ldr	r4, [pc, #104]	; (151c <z_impl_log_process+0xb8>)
    14b4:	4f1a      	ldr	r7, [pc, #104]	; (1520 <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    14b6:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1524 <z_impl_log_process+0xc0>
    14ba:	1b3f      	subs	r7, r7, r4
    14bc:	113f      	asrs	r7, r7, #4
    14be:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    14c0:	45b8      	cmp	r8, r7
    14c2:	dadc      	bge.n	147e <z_impl_log_process+0x1a>
	return backend->cb->active;
    14c4:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    14c6:	795b      	ldrb	r3, [r3, #5]
    14c8:	b1cb      	cbz	r3, 14fe <z_impl_log_process+0x9a>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    14ca:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    14cc:	074b      	lsls	r3, r1, #29
    14ce:	d411      	bmi.n	14f4 <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    14d0:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    14d4:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    14d6:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    14da:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    14de:	b192      	cbz	r2, 1506 <z_impl_log_process+0xa2>
    14e0:	eba2 020a 	sub.w	r2, r2, sl
    14e4:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    14e8:	2301      	movs	r3, #1
    14ea:	4620      	mov	r0, r4
    14ec:	f000 f968 	bl	17c0 <log_filter_get>
			if (log_backend_is_active(backend) &&
    14f0:	4548      	cmp	r0, r9
    14f2:	d304      	bcc.n	14fe <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    14f4:	6823      	ldr	r3, [r4, #0]
    14f6:	4629      	mov	r1, r5
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	4620      	mov	r0, r4
    14fc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    14fe:	f108 0801 	add.w	r8, r8, #1
    1502:	3410      	adds	r4, #16
    1504:	e7dc      	b.n	14c0 <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    1506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    150a:	e7ed      	b.n	14e8 <z_impl_log_process+0x84>
}
    150c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1510:	200022d8 	.word	0x200022d8
    1514:	200010fc 	.word	0x200010fc
    1518:	200010f8 	.word	0x200010f8
    151c:	0000f888 	.word	0x0000f888
    1520:	0000f898 	.word	0x0000f898
    1524:	2000025c 	.word	0x2000025c

00001528 <log_process_thread_func>:
{
    1528:	b510      	push	{r4, lr}
	log_init();
    152a:	f7ff fed9 	bl	12e0 <log_init>
	return z_impl_z_current_get();
    152e:	f009 ff1d 	bl	b36c <z_impl_z_current_get>
	proc_tid = process_tid;
    1532:	4b0c      	ldr	r3, [pc, #48]	; (1564 <log_process_thread_func+0x3c>)
    1534:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1536:	b130      	cbz	r0, 1546 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1538:	4b0b      	ldr	r3, [pc, #44]	; (1568 <log_process_thread_func+0x40>)
	    process_tid &&
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	2b09      	cmp	r3, #9
    153e:	dd02      	ble.n	1546 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1540:	480a      	ldr	r0, [pc, #40]	; (156c <log_process_thread_func+0x44>)
    1542:	f009 fab7 	bl	aab4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    1546:	4c09      	ldr	r4, [pc, #36]	; (156c <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1548:	2000      	movs	r0, #0
    154a:	f7ff ff8b 	bl	1464 <z_impl_log_process>
		if (log_process(false) == false) {
    154e:	2800      	cmp	r0, #0
    1550:	d1fa      	bne.n	1548 <log_process_thread_func+0x20>
    1552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    155a:	4620      	mov	r0, r4
    155c:	f009 fad0 	bl	ab00 <z_impl_k_sem_take>
    1560:	e7f2      	b.n	1548 <log_process_thread_func+0x20>
    1562:	bf00      	nop
    1564:	20001140 	.word	0x20001140
    1568:	200010f8 	.word	0x200010f8
    156c:	20000354 	.word	0x20000354

00001570 <z_log_msg_post_finalize>:
{
    1570:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1572:	4b1d      	ldr	r3, [pc, #116]	; (15e8 <z_log_msg_post_finalize+0x78>)
    1574:	f3bf 8f5b 	dmb	ish
    1578:	e853 2f00 	ldrex	r2, [r3]
    157c:	1c51      	adds	r1, r2, #1
    157e:	e843 1000 	strex	r0, r1, [r3]
    1582:	2800      	cmp	r0, #0
    1584:	d1f8      	bne.n	1578 <z_log_msg_post_finalize+0x8>
    1586:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    158a:	4b18      	ldr	r3, [pc, #96]	; (15ec <z_log_msg_post_finalize+0x7c>)
    158c:	781b      	ldrb	r3, [r3, #0]
    158e:	b183      	cbz	r3, 15b2 <z_log_msg_post_finalize+0x42>
    1590:	f04f 0320 	mov.w	r3, #32
    1594:	f3ef 8411 	mrs	r4, BASEPRI
    1598:	f383 8812 	msr	BASEPRI_MAX, r3
    159c:	f3bf 8f6f 	isb	sy
    15a0:	2000      	movs	r0, #0
    15a2:	f7ff ff5f 	bl	1464 <z_impl_log_process>
	__asm__ volatile(
    15a6:	f384 8811 	msr	BASEPRI, r4
    15aa:	f3bf 8f6f 	isb	sy
}
    15ae:	b002      	add	sp, #8
    15b0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    15b2:	4b0f      	ldr	r3, [pc, #60]	; (15f0 <z_log_msg_post_finalize+0x80>)
    15b4:	681b      	ldr	r3, [r3, #0]
    15b6:	2b00      	cmp	r3, #0
    15b8:	d0f9      	beq.n	15ae <z_log_msg_post_finalize+0x3e>
    15ba:	b952      	cbnz	r2, 15d2 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    15bc:	2200      	movs	r2, #0
    15be:	2300      	movs	r3, #0
    15c0:	e9cd 2300 	strd	r2, r3, [sp]
    15c4:	480b      	ldr	r0, [pc, #44]	; (15f4 <z_log_msg_post_finalize+0x84>)
    15c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    15ca:	2300      	movs	r3, #0
    15cc:	f00a f8e6 	bl	b79c <z_impl_k_timer_start>
    15d0:	e7ed      	b.n	15ae <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    15d2:	2a0a      	cmp	r2, #10
    15d4:	d1eb      	bne.n	15ae <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    15d6:	4807      	ldr	r0, [pc, #28]	; (15f4 <z_log_msg_post_finalize+0x84>)
    15d8:	f00d fde4 	bl	f1a4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    15dc:	4806      	ldr	r0, [pc, #24]	; (15f8 <z_log_msg_post_finalize+0x88>)
}
    15de:	b002      	add	sp, #8
    15e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15e4:	f009 ba66 	b.w	aab4 <z_impl_k_sem_give>
    15e8:	200010f8 	.word	0x200010f8
    15ec:	200022d9 	.word	0x200022d9
    15f0:	20001140 	.word	0x20001140
    15f4:	20000920 	.word	0x20000920
    15f8:	20000354 	.word	0x20000354

000015fc <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <z_log_msg2_commit+0x1c>)
{
    15fe:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1600:	681b      	ldr	r3, [r3, #0]
{
    1602:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1604:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1606:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1608:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    160a:	4804      	ldr	r0, [pc, #16]	; (161c <z_log_msg2_commit+0x20>)
    160c:	f00a ffbb 	bl	c586 <mpsc_pbuf_commit>
}
    1610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1614:	f7ff bfac 	b.w	1570 <z_log_msg_post_finalize>
    1618:	20000004 	.word	0x20000004
    161c:	20001104 	.word	0x20001104

00001620 <z_impl_log_panic>:
{
    1620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1622:	4f0e      	ldr	r7, [pc, #56]	; (165c <z_impl_log_panic+0x3c>)
    1624:	783d      	ldrb	r5, [r7, #0]
    1626:	b975      	cbnz	r5, 1646 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    1628:	4c0d      	ldr	r4, [pc, #52]	; (1660 <z_impl_log_panic+0x40>)
    162a:	4e0e      	ldr	r6, [pc, #56]	; (1664 <z_impl_log_panic+0x44>)
	log_init();
    162c:	f7ff fe58 	bl	12e0 <log_init>
    1630:	1b36      	subs	r6, r6, r4
    1632:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1634:	42b5      	cmp	r5, r6
    1636:	db07      	blt.n	1648 <z_impl_log_panic+0x28>
    1638:	2000      	movs	r0, #0
    163a:	f7ff ff13 	bl	1464 <z_impl_log_process>
		while (log_process(false) == true) {
    163e:	2800      	cmp	r0, #0
    1640:	d1fa      	bne.n	1638 <z_impl_log_panic+0x18>
	panic_mode = true;
    1642:	2301      	movs	r3, #1
    1644:	703b      	strb	r3, [r7, #0]
}
    1646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1648:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    164a:	795b      	ldrb	r3, [r3, #5]
    164c:	b11b      	cbz	r3, 1656 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    164e:	6823      	ldr	r3, [r4, #0]
    1650:	4620      	mov	r0, r4
    1652:	695b      	ldr	r3, [r3, #20]
    1654:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1656:	3501      	adds	r5, #1
    1658:	3410      	adds	r4, #16
    165a:	e7eb      	b.n	1634 <z_impl_log_panic+0x14>
    165c:	200022d9 	.word	0x200022d9
    1660:	0000f888 	.word	0x0000f888
    1664:	0000f898 	.word	0x0000f898

00001668 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1668:	480b      	ldr	r0, [pc, #44]	; (1698 <z_log_runtime_filters_init+0x30>)
    166a:	4b0c      	ldr	r3, [pc, #48]	; (169c <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    166c:	b530      	push	{r4, r5, lr}
    166e:	1a1b      	subs	r3, r3, r0
    1670:	4c0b      	ldr	r4, [pc, #44]	; (16a0 <z_log_runtime_filters_init+0x38>)
    1672:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    1674:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    1676:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    1678:	4299      	cmp	r1, r3
    167a:	d100      	bne.n	167e <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    167c:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    167e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    1682:	6825      	ldr	r5, [r4, #0]
    1684:	f002 0207 	and.w	r2, r2, #7
    1688:	f025 0507 	bic.w	r5, r5, #7
    168c:	432a      	orrs	r2, r5
    168e:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    1692:	3101      	adds	r1, #1
    1694:	e7f0      	b.n	1678 <z_log_runtime_filters_init+0x10>
    1696:	bf00      	nop
    1698:	0000f818 	.word	0x0000f818
    169c:	0000f888 	.word	0x0000f888
    16a0:	2000025c 	.word	0x2000025c

000016a4 <log_source_name_get>:
    16a4:	4a04      	ldr	r2, [pc, #16]	; (16b8 <log_source_name_get+0x14>)
    16a6:	4b05      	ldr	r3, [pc, #20]	; (16bc <log_source_name_get+0x18>)
    16a8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    16aa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    16ae:	bf34      	ite	cc
    16b0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    16b4:	2000      	movcs	r0, #0
}
    16b6:	4770      	bx	lr
    16b8:	0000f818 	.word	0x0000f818
    16bc:	0000f888 	.word	0x0000f888

000016c0 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    16c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16c4:	4689      	mov	r9, r1
    16c6:	4616      	mov	r6, r2
    16c8:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    16ca:	4604      	mov	r4, r0
    16cc:	b9b8      	cbnz	r0, 16fe <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    16ce:	f8df a084 	ldr.w	sl, [pc, #132]	; 1754 <z_impl_log_filter_set+0x94>
    16d2:	4f21      	ldr	r7, [pc, #132]	; (1758 <z_impl_log_filter_set+0x98>)
    16d4:	eba7 070a 	sub.w	r7, r7, sl
    16d8:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    16da:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    16dc:	42bc      	cmp	r4, r7
    16de:	db02      	blt.n	16e6 <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    16e0:	4628      	mov	r0, r5
    16e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    16e6:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    16ea:	4643      	mov	r3, r8
    16ec:	4632      	mov	r2, r6
    16ee:	4649      	mov	r1, r9
    16f0:	f7ff ffe6 	bl	16c0 <z_impl_log_filter_set>
				max = MAX(current, max);
    16f4:	4285      	cmp	r5, r0
    16f6:	bf38      	it	cc
    16f8:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    16fa:	3401      	adds	r4, #1
    16fc:	e7ee      	b.n	16dc <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    16fe:	4b17      	ldr	r3, [pc, #92]	; (175c <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    1700:	4c17      	ldr	r4, [pc, #92]	; (1760 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    1702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    1706:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    1708:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    170a:	791a      	ldrb	r2, [r3, #4]
    170c:	2307      	movs	r3, #7
    170e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1712:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    1716:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    1718:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    171c:	bf28      	it	cs
    171e:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    1720:	ea23 0301 	bic.w	r3, r3, r1
    1724:	f005 0107 	and.w	r1, r5, #7
    1728:	fa01 f202 	lsl.w	r2, r1, r2
    172c:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    172e:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    1730:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    1732:	fa23 f002 	lsr.w	r0, r3, r2
    1736:	f000 0007 	and.w	r0, r0, #7
    173a:	4281      	cmp	r1, r0
    173c:	f102 0203 	add.w	r2, r2, #3
    1740:	bf38      	it	cc
    1742:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    1744:	2a1e      	cmp	r2, #30
    1746:	d1f4      	bne.n	1732 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    1748:	f023 0307 	bic.w	r3, r3, #7
    174c:	430b      	orrs	r3, r1
    174e:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    1752:	e7c5      	b.n	16e0 <z_impl_log_filter_set+0x20>
    1754:	0000f888 	.word	0x0000f888
    1758:	0000f898 	.word	0x0000f898
    175c:	0000f818 	.word	0x0000f818
    1760:	2000025c 	.word	0x2000025c

00001764 <backend_filter_set>:
{
    1764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1766:	4c09      	ldr	r4, [pc, #36]	; (178c <backend_filter_set+0x28>)
    1768:	4b09      	ldr	r3, [pc, #36]	; (1790 <backend_filter_set+0x2c>)
    176a:	1ae4      	subs	r4, r4, r3
    176c:	4606      	mov	r6, r0
    176e:	460f      	mov	r7, r1
    1770:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    1772:	2500      	movs	r5, #0
    1774:	42a5      	cmp	r5, r4
    1776:	d100      	bne.n	177a <backend_filter_set+0x16>
}
    1778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    177a:	2100      	movs	r1, #0
    177c:	b22a      	sxth	r2, r5
    177e:	463b      	mov	r3, r7
    1780:	4630      	mov	r0, r6
    1782:	f7ff ff9d 	bl	16c0 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    1786:	3501      	adds	r5, #1
    1788:	e7f4      	b.n	1774 <backend_filter_set+0x10>
    178a:	bf00      	nop
    178c:	0000f888 	.word	0x0000f888
    1790:	0000f818 	.word	0x0000f818

00001794 <log_backend_enable>:
	id += backend - log_backend_get(0);
    1794:	4b09      	ldr	r3, [pc, #36]	; (17bc <log_backend_enable+0x28>)
    1796:	1ac3      	subs	r3, r0, r3
{
    1798:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    179a:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    179c:	6846      	ldr	r6, [r0, #4]
{
    179e:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    17a0:	3301      	adds	r3, #1
{
    17a2:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    17a4:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    17a6:	4611      	mov	r1, r2
    17a8:	f7ff ffdc 	bl	1764 <backend_filter_set>
	backend->cb->ctx = ctx;
    17ac:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    17ae:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    17b0:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    17b2:	715a      	strb	r2, [r3, #5]
}
    17b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    17b8:	f7ff bdbe 	b.w	1338 <z_log_notify_backend_enabled>
    17bc:	0000f888 	.word	0x0000f888

000017c0 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    17c0:	b163      	cbz	r3, 17dc <log_filter_get+0x1c>
		if (source_id < 0) {
    17c2:	2a00      	cmp	r2, #0
    17c4:	db0f      	blt.n	17e6 <log_filter_get+0x26>
	return backend->cb->id;
    17c6:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    17c8:	4908      	ldr	r1, [pc, #32]	; (17ec <log_filter_get+0x2c>)
    17ca:	7918      	ldrb	r0, [r3, #4]
    17cc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    17d0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    17d4:	40d8      	lsrs	r0, r3
    17d6:	f000 0007 	and.w	r0, r0, #7
    17da:	4770      	bx	lr
	return __log_const_start[source_id].level;
    17dc:	4b04      	ldr	r3, [pc, #16]	; (17f0 <log_filter_get+0x30>)
    17de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    17e2:	7910      	ldrb	r0, [r2, #4]
    17e4:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    17e6:	2004      	movs	r0, #4
}
    17e8:	4770      	bx	lr
    17ea:	bf00      	nop
    17ec:	2000025c 	.word	0x2000025c
    17f0:	0000f818 	.word	0x0000f818

000017f4 <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    17f4:	4b02      	ldr	r3, [pc, #8]	; (1800 <log_msg_mem_get_free+0xc>)
    17f6:	6898      	ldr	r0, [r3, #8]
    17f8:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    17fa:	1ac0      	subs	r0, r0, r3
    17fc:	4770      	bx	lr
    17fe:	bf00      	nop
    1800:	20001144 	.word	0x20001144

00001804 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    1804:	4b01      	ldr	r3, [pc, #4]	; (180c <log_msg_mem_get_used+0x8>)
    1806:	6998      	ldr	r0, [r3, #24]
    1808:	4770      	bx	lr
    180a:	bf00      	nop
    180c:	20001144 	.word	0x20001144

00001810 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1810:	b40e      	push	{r1, r2, r3}
    1812:	b503      	push	{r0, r1, lr}
    1814:	ab03      	add	r3, sp, #12
    1816:	4601      	mov	r1, r0
    1818:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    181c:	4804      	ldr	r0, [pc, #16]	; (1830 <print_formatted+0x20>)
	va_start(args, fmt);
    181e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1820:	f7ff f968 	bl	af4 <cbvprintf>
	va_end(args);

	return length;
}
    1824:	b002      	add	sp, #8
    1826:	f85d eb04 	ldr.w	lr, [sp], #4
    182a:	b003      	add	sp, #12
    182c:	4770      	bx	lr
    182e:	bf00      	nop
    1830:	0000c9d5 	.word	0x0000c9d5

00001834 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1838:	461d      	mov	r5, r3
    183a:	9b08      	ldr	r3, [sp, #32]
    183c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    183e:	06da      	lsls	r2, r3, #27
{
    1840:	4604      	mov	r4, r0
    1842:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1844:	d405      	bmi.n	1852 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1846:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1848:	bf4c      	ite	mi
    184a:	492a      	ldrmi	r1, [pc, #168]	; (18f4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    184c:	492a      	ldrpl	r1, [pc, #168]	; (18f8 <hexdump_line_print+0xc4>)
    184e:	f7ff ffdf 	bl	1810 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1852:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 18fc <hexdump_line_print+0xc8>
{
    1856:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    185a:	45a8      	cmp	r8, r5
    185c:	db2a      	blt.n	18b4 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    185e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1900 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1862:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1904 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1866:	f8df a094 	ldr.w	sl, [pc, #148]	; 18fc <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    186a:	2500      	movs	r5, #0
		if (i < length) {
    186c:	42bd      	cmp	r5, r7
    186e:	d22f      	bcs.n	18d0 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1870:	5d72      	ldrb	r2, [r6, r5]
    1872:	4649      	mov	r1, r9
    1874:	4620      	mov	r0, r4
    1876:	f7ff ffcb 	bl	1810 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    187a:	3501      	adds	r5, #1
    187c:	2d10      	cmp	r5, #16
    187e:	d120      	bne.n	18c2 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1880:	4921      	ldr	r1, [pc, #132]	; (1908 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1882:	f8df 8078 	ldr.w	r8, [pc, #120]	; 18fc <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    1886:	f8df 9084 	ldr.w	r9, [pc, #132]	; 190c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    188a:	4620      	mov	r0, r4
    188c:	f7ff ffc0 	bl	1810 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1890:	2500      	movs	r5, #0
		if (i < length) {
    1892:	42af      	cmp	r7, r5
    1894:	d928      	bls.n	18e8 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1896:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1898:	f1a2 0320 	sub.w	r3, r2, #32
    189c:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    189e:	bf28      	it	cs
    18a0:	222e      	movcs	r2, #46	; 0x2e
    18a2:	4649      	mov	r1, r9
    18a4:	4620      	mov	r0, r4
    18a6:	f7ff ffb3 	bl	1810 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18aa:	3501      	adds	r5, #1
    18ac:	2d10      	cmp	r5, #16
    18ae:	d114      	bne.n	18da <hexdump_line_print+0xa6>
		}
	}
}
    18b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    18b4:	4649      	mov	r1, r9
    18b6:	4620      	mov	r0, r4
    18b8:	f7ff ffaa 	bl	1810 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    18bc:	f108 0801 	add.w	r8, r8, #1
    18c0:	e7cb      	b.n	185a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    18c2:	076a      	lsls	r2, r5, #29
    18c4:	d1d2      	bne.n	186c <hexdump_line_print+0x38>
			print_formatted(output, " ");
    18c6:	4651      	mov	r1, sl
    18c8:	4620      	mov	r0, r4
    18ca:	f7ff ffa1 	bl	1810 <print_formatted>
    18ce:	e7cd      	b.n	186c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    18d0:	4641      	mov	r1, r8
    18d2:	4620      	mov	r0, r4
    18d4:	f7ff ff9c 	bl	1810 <print_formatted>
    18d8:	e7cf      	b.n	187a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    18da:	076b      	lsls	r3, r5, #29
    18dc:	d1d9      	bne.n	1892 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    18de:	4641      	mov	r1, r8
    18e0:	4620      	mov	r0, r4
    18e2:	f7ff ff95 	bl	1810 <print_formatted>
    18e6:	e7d4      	b.n	1892 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    18e8:	4641      	mov	r1, r8
    18ea:	4620      	mov	r0, r4
    18ec:	f7ff ff90 	bl	1810 <print_formatted>
    18f0:	e7db      	b.n	18aa <hexdump_line_print+0x76>
    18f2:	bf00      	nop
    18f4:	0001082a 	.word	0x0001082a
    18f8:	00010416 	.word	0x00010416
    18fc:	0001030c 	.word	0x0001030c
    1900:	0001030a 	.word	0x0001030a
    1904:	00010304 	.word	0x00010304
    1908:	0001030e 	.word	0x0001030e
    190c:	00010e87 	.word	0x00010e87

00001910 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1914:	b087      	sub	sp, #28
    1916:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1918:	f001 0301 	and.w	r3, r1, #1
{
    191c:	9205      	str	r2, [sp, #20]
    191e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1922:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1926:	9304      	str	r3, [sp, #16]
{
    1928:	4607      	mov	r7, r0
    192a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    192c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1930:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1934:	f00b f82d 	bl	c992 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1938:	4602      	mov	r2, r0
    193a:	2800      	cmp	r0, #0
    193c:	d044      	beq.n	19c8 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    193e:	493a      	ldr	r1, [pc, #232]	; (1a28 <prefix_print+0x118>)
    1940:	4638      	mov	r0, r7
    1942:	f7ff ff65 	bl	1810 <print_formatted>
    1946:	4605      	mov	r5, r0
	}

	if (stamp) {
    1948:	f1bb 0f00 	cmp.w	fp, #0
    194c:	d008      	beq.n	1960 <prefix_print+0x50>
	if (!format) {
    194e:	f018 0f44 	tst.w	r8, #68	; 0x44
    1952:	d13b      	bne.n	19cc <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1954:	4935      	ldr	r1, [pc, #212]	; (1a2c <prefix_print+0x11c>)
    1956:	4622      	mov	r2, r4
    1958:	4638      	mov	r0, r7
    195a:	f7ff ff59 	bl	1810 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    195e:	4405      	add	r5, r0
	if (color) {
    1960:	9b04      	ldr	r3, [sp, #16]
    1962:	b153      	cbz	r3, 197a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1964:	4b32      	ldr	r3, [pc, #200]	; (1a30 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1966:	4933      	ldr	r1, [pc, #204]	; (1a34 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1968:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    196c:	4b32      	ldr	r3, [pc, #200]	; (1a38 <prefix_print+0x128>)
    196e:	4638      	mov	r0, r7
    1970:	2a00      	cmp	r2, #0
    1972:	bf08      	it	eq
    1974:	461a      	moveq	r2, r3
    1976:	f7ff ff4b 	bl	1810 <print_formatted>
	if (level_on) {
    197a:	b13e      	cbz	r6, 198c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    197c:	4b2f      	ldr	r3, [pc, #188]	; (1a3c <prefix_print+0x12c>)
    197e:	4930      	ldr	r1, [pc, #192]	; (1a40 <prefix_print+0x130>)
    1980:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1984:	4638      	mov	r0, r7
    1986:	f7ff ff43 	bl	1810 <print_formatted>
    198a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    198c:	f1ba 0f00 	cmp.w	sl, #0
    1990:	db16      	blt.n	19c0 <prefix_print+0xb0>
		total += print_formatted(output,
    1992:	9b05      	ldr	r3, [sp, #20]
    1994:	2b00      	cmp	r3, #0
    1996:	d045      	beq.n	1a24 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1998:	2301      	movs	r3, #1
    199a:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    199e:	4b29      	ldr	r3, [pc, #164]	; (1a44 <prefix_print+0x134>)
    19a0:	4c29      	ldr	r4, [pc, #164]	; (1a48 <prefix_print+0x138>)
    19a2:	f019 0f10 	tst.w	r9, #16
    19a6:	bf18      	it	ne
    19a8:	461c      	movne	r4, r3
    19aa:	4651      	mov	r1, sl
    19ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    19b0:	f7ff fe78 	bl	16a4 <log_source_name_get>
    19b4:	4621      	mov	r1, r4
    19b6:	4602      	mov	r2, r0
    19b8:	4638      	mov	r0, r7
    19ba:	f7ff ff29 	bl	1810 <print_formatted>
    19be:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    19c0:	1970      	adds	r0, r6, r5
    19c2:	b007      	add	sp, #28
    19c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    19c8:	4605      	mov	r5, r0
    19ca:	e7bd      	b.n	1948 <prefix_print+0x38>
	} else if (freq != 0U) {
    19cc:	4b1f      	ldr	r3, [pc, #124]	; (1a4c <prefix_print+0x13c>)
    19ce:	6818      	ldr	r0, [r3, #0]
    19d0:	2800      	cmp	r0, #0
    19d2:	d0c4      	beq.n	195e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    19d4:	4b1e      	ldr	r3, [pc, #120]	; (1a50 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    19d6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    19e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    19e4:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    19e8:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    19ec:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    19f0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    19f4:	fbb3 f2f1 	udiv	r2, r3, r1
    19f8:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    19fc:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1a00:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a04:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    1a08:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a0c:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    1a10:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a12:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    1a16:	490f      	ldr	r1, [pc, #60]	; (1a54 <prefix_print+0x144>)
    1a18:	e9cd e001 	strd	lr, r0, [sp, #4]
    1a1c:	4638      	mov	r0, r7
    1a1e:	f7ff fef7 	bl	1810 <print_formatted>
    1a22:	e79c      	b.n	195e <prefix_print+0x4e>
		total += print_formatted(output,
    1a24:	4c08      	ldr	r4, [pc, #32]	; (1a48 <prefix_print+0x138>)
    1a26:	e7c0      	b.n	19aa <prefix_print+0x9a>
    1a28:	0001031e 	.word	0x0001031e
    1a2c:	00010322 	.word	0x00010322
    1a30:	0000f9bc 	.word	0x0000f9bc
    1a34:	00010949 	.word	0x00010949
    1a38:	00010310 	.word	0x00010310
    1a3c:	0000f9d0 	.word	0x0000f9d0
    1a40:	00010347 	.word	0x00010347
    1a44:	0001031a 	.word	0x0001031a
    1a48:	00010315 	.word	0x00010315
    1a4c:	20001160 	.word	0x20001160
    1a50:	20001164 	.word	0x20001164
    1a54:	0001032b 	.word	0x0001032b

00001a58 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1a58:	b538      	push	{r3, r4, r5, lr}
    1a5a:	460c      	mov	r4, r1
	if (color) {
    1a5c:	07e1      	lsls	r1, r4, #31
{
    1a5e:	4605      	mov	r5, r0
	if (color) {
    1a60:	d503      	bpl.n	1a6a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1a62:	4a08      	ldr	r2, [pc, #32]	; (1a84 <postfix_print+0x2c>)
    1a64:	4908      	ldr	r1, [pc, #32]	; (1a88 <postfix_print+0x30>)
    1a66:	f7ff fed3 	bl	1810 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a6a:	06e2      	lsls	r2, r4, #27
    1a6c:	d408      	bmi.n	1a80 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a6e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1a70:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1a72:	bf4c      	ite	mi
    1a74:	4905      	ldrmi	r1, [pc, #20]	; (1a8c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1a76:	4906      	ldrpl	r1, [pc, #24]	; (1a90 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1a7c:	f7ff bec8 	b.w	1810 <print_formatted>
}
    1a80:	bd38      	pop	{r3, r4, r5, pc}
    1a82:	bf00      	nop
    1a84:	00010310 	.word	0x00010310
    1a88:	00010949 	.word	0x00010949
    1a8c:	0001082a 	.word	0x0001082a
    1a90:	00010416 	.word	0x00010416

00001a94 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    1a98:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    1a9a:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1a9e:	4606      	mov	r6, r0
    1aa0:	460c      	mov	r4, r1
    1aa2:	4690      	mov	r8, r2
    1aa4:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1aa8:	d04d      	beq.n	1b46 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1aaa:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    1aac:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1aae:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d044      	beq.n	1b40 <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    1ab6:	4925      	ldr	r1, [pc, #148]	; (1b4c <log_output_msg2_process+0xb8>)
    1ab8:	1a5b      	subs	r3, r3, r1
    1aba:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1abe:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1ac2:	f8cd 9000 	str.w	r9, [sp]
    1ac6:	68a3      	ldr	r3, [r4, #8]
    1ac8:	2200      	movs	r2, #0
    1aca:	4641      	mov	r1, r8
    1acc:	4630      	mov	r0, r6
    1ace:	f7ff ff1f 	bl	1910 <prefix_print>
    1ad2:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1ad4:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1ad6:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1ada:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1ade:	b153      	cbz	r3, 1af6 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1ae0:	4f1b      	ldr	r7, [pc, #108]	; (1b50 <log_output_msg2_process+0xbc>)
    1ae2:	481c      	ldr	r0, [pc, #112]	; (1b54 <log_output_msg2_process+0xc0>)
    1ae4:	491c      	ldr	r1, [pc, #112]	; (1b58 <log_output_msg2_process+0xc4>)
    1ae6:	462b      	mov	r3, r5
    1ae8:	4632      	mov	r2, r6
    1aea:	f1b9 0f00 	cmp.w	r9, #0
    1aee:	bf08      	it	eq
    1af0:	4638      	moveq	r0, r7
    1af2:	f009 ff82 	bl	b9fa <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1af6:	8867      	ldrh	r7, [r4, #2]
    1af8:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1afc:	b197      	cbz	r7, 1b24 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1afe:	6823      	ldr	r3, [r4, #0]
    1b00:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b04:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1b06:	2f10      	cmp	r7, #16
    1b08:	463c      	mov	r4, r7
    1b0a:	bf28      	it	cs
    1b0c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1b0e:	4629      	mov	r1, r5
    1b10:	f8cd 8000 	str.w	r8, [sp]
    1b14:	4653      	mov	r3, sl
    1b16:	4622      	mov	r2, r4
    1b18:	4630      	mov	r0, r6
    1b1a:	f7ff fe8b 	bl	1834 <hexdump_line_print>
	} while (len);
    1b1e:	1b3f      	subs	r7, r7, r4
		data += length;
    1b20:	4425      	add	r5, r4
	} while (len);
    1b22:	d1f0      	bne.n	1b06 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1b24:	f1b9 0f00 	cmp.w	r9, #0
    1b28:	d004      	beq.n	1b34 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1b2a:	464a      	mov	r2, r9
    1b2c:	4641      	mov	r1, r8
    1b2e:	4630      	mov	r0, r6
    1b30:	f7ff ff92 	bl	1a58 <postfix_print>
	}

	log_output_flush(output);
    1b34:	4630      	mov	r0, r6
}
    1b36:	b004      	add	sp, #16
    1b38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1b3c:	f00a bf3d 	b.w	c9ba <log_output_flush>
		int16_t source_id = source ?
    1b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1b44:	e7bb      	b.n	1abe <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1b46:	46ca      	mov	sl, r9
    1b48:	e7c4      	b.n	1ad4 <log_output_msg2_process+0x40>
    1b4a:	bf00      	nop
    1b4c:	2000025c 	.word	0x2000025c
    1b50:	0000ca0b 	.word	0x0000ca0b
    1b54:	0000c9d5 	.word	0x0000c9d5
    1b58:	00000af5 	.word	0x00000af5

00001b5c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1b5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b5e:	f242 730f 	movw	r3, #9999	; 0x270f
    1b62:	428b      	cmp	r3, r1
    1b64:	bf28      	it	cs
    1b66:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1b68:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b6a:	4a0f      	ldr	r2, [pc, #60]	; (1ba8 <log_output_dropped_process+0x4c>)
{
    1b6c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b6e:	2105      	movs	r1, #5
    1b70:	4668      	mov	r0, sp
    1b72:	f009 ffbc 	bl	baee <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1b76:	6863      	ldr	r3, [r4, #4]
    1b78:	490c      	ldr	r1, [pc, #48]	; (1bac <log_output_dropped_process+0x50>)
    1b7a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b7c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1b7e:	2204      	movs	r2, #4
    1b80:	4628      	mov	r0, r5
    1b82:	f00a ff0d 	bl	c9a0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1b86:	6863      	ldr	r3, [r4, #4]
    1b88:	4632      	mov	r2, r6
    1b8a:	4669      	mov	r1, sp
    1b8c:	4628      	mov	r0, r5
    1b8e:	685b      	ldr	r3, [r3, #4]
    1b90:	f00a ff06 	bl	c9a0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1b94:	6863      	ldr	r3, [r4, #4]
    1b96:	4906      	ldr	r1, [pc, #24]	; (1bb0 <log_output_dropped_process+0x54>)
    1b98:	685b      	ldr	r3, [r3, #4]
    1b9a:	2217      	movs	r2, #23
    1b9c:	4628      	mov	r0, r5
    1b9e:	f00a feff 	bl	c9a0 <buffer_write>
		     output->control_block->ctx);
}
    1ba2:	b002      	add	sp, #8
    1ba4:	bd70      	pop	{r4, r5, r6, pc}
    1ba6:	bf00      	nop
    1ba8:	00011cf0 	.word	0x00011cf0
    1bac:	00010385 	.word	0x00010385
    1bb0:	0001036d 	.word	0x0001036d

00001bb4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1bb4:	4a08      	ldr	r2, [pc, #32]	; (1bd8 <log_output_timestamp_freq_set+0x24>)
{
    1bb6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1bb8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1bba:	4c08      	ldr	r4, [pc, #32]	; (1bdc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1bbc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1bbe:	2100      	movs	r1, #0
    1bc0:	42a0      	cmp	r0, r4
    1bc2:	d804      	bhi.n	1bce <log_output_timestamp_freq_set+0x1a>
    1bc4:	b101      	cbz	r1, 1bc8 <log_output_timestamp_freq_set+0x14>
    1bc6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1bc8:	4b05      	ldr	r3, [pc, #20]	; (1be0 <log_output_timestamp_freq_set+0x2c>)
    1bca:	6018      	str	r0, [r3, #0]
}
    1bcc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1bce:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1bd0:	005b      	lsls	r3, r3, #1
    1bd2:	2101      	movs	r1, #1
    1bd4:	e7f4      	b.n	1bc0 <log_output_timestamp_freq_set+0xc>
    1bd6:	bf00      	nop
    1bd8:	20001164 	.word	0x20001164
    1bdc:	000f4240 	.word	0x000f4240
    1be0:	20001160 	.word	0x20001160

00001be4 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    1be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1be8:	b085      	sub	sp, #20
    1bea:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    1bee:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    1bf2:	4605      	mov	r5, r0
    1bf4:	4688      	mov	r8, r1
    1bf6:	4614      	mov	r4, r2
    1bf8:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    1bfa:	f1bb 0f00 	cmp.w	fp, #0
    1bfe:	d037      	beq.n	1c70 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    1c00:	2200      	movs	r2, #0
    1c02:	f8cd a000 	str.w	sl, [sp]
    1c06:	465b      	mov	r3, fp
    1c08:	210c      	movs	r1, #12
    1c0a:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    1c0c:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    1c10:	f7fe fc6c 	bl	4ec <cbvprintf_package>
    1c14:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    1c16:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c1a:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    1c1e:	f005 0407 	and.w	r4, r5, #7
    1c22:	4d14      	ldr	r5, [pc, #80]	; (1c74 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    1c24:	4b14      	ldr	r3, [pc, #80]	; (1c78 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1c26:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c28:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    1c2a:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    1c2e:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c32:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1c36:	432c      	orrs	r4, r5
    1c38:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    1c3c:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1c3e:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1c40:	f7ff fbf6 	bl	1430 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    1c44:	4605      	mov	r5, r0
    1c46:	b150      	cbz	r0, 1c5e <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    1c48:	f1bb 0f00 	cmp.w	fp, #0
    1c4c:	d007      	beq.n	1c5e <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    1c4e:	f8cd a000 	str.w	sl, [sp]
    1c52:	465b      	mov	r3, fp
    1c54:	2200      	movs	r2, #0
    1c56:	4639      	mov	r1, r7
    1c58:	300c      	adds	r0, #12
    1c5a:	f7fe fc47 	bl	4ec <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    1c5e:	464b      	mov	r3, r9
    1c60:	4622      	mov	r2, r4
    1c62:	4641      	mov	r1, r8
    1c64:	4628      	mov	r0, r5
}
    1c66:	b005      	add	sp, #20
    1c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    1c6c:	f00a beda 	b.w	ca24 <z_log_msg2_finalize>
		plen = 0;
    1c70:	465f      	mov	r7, fp
    1c72:	e7d0      	b.n	1c16 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1c74:	0007fe00 	.word	0x0007fe00
    1c78:	7ff80000 	.word	0x7ff80000

00001c7c <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1c7c:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    1c7e:	2804      	cmp	r0, #4
	entry->handler = NULL;
    1c80:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1c82:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    1c84:	bf98      	it	ls
    1c86:	4b04      	ldrls	r3, [pc, #16]	; (1c98 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    1c88:	4a04      	ldr	r2, [pc, #16]	; (1c9c <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    1c8a:	bf98      	it	ls
    1c8c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    1c90:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    1c92:	600b      	str	r3, [r1, #0]
}
    1c94:	4770      	bx	lr
    1c96:	bf00      	nop
    1c98:	0000fa24 	.word	0x0000fa24
    1c9c:	0000fa00 	.word	0x0000fa00

00001ca0 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1ca0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    1ca2:	4a08      	ldr	r2, [pc, #32]	; (1cc4 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    1ca4:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    1ca6:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1ca8:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    1caa:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    1cac:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <backend_name_get+0x28>)
    1cae:	4a07      	ldr	r2, [pc, #28]	; (1ccc <backend_name_get+0x2c>)
    1cb0:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    1cb2:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    1cb6:	bf3e      	ittt	cc
    1cb8:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    1cbc:	689b      	ldrcc	r3, [r3, #8]
    1cbe:	600b      	strcc	r3, [r1, #0]
	}
}
    1cc0:	4770      	bx	lr
    1cc2:	bf00      	nop
    1cc4:	0000fb78 	.word	0x0000fb78
    1cc8:	0000f888 	.word	0x0000f888
    1ccc:	0000f898 	.word	0x0000f898

00001cd0 <cmd_log_memory_slabs>:
{
    1cd0:	b538      	push	{r3, r4, r5, lr}
    1cd2:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    1cd4:	f7ff fd8e 	bl	17f4 <log_msg_mem_get_free>
    1cd8:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    1cda:	f7ff fd93 	bl	1804 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    1cde:	4a09      	ldr	r2, [pc, #36]	; (1d04 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    1ce0:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    1ce2:	2108      	movs	r1, #8
    1ce4:	4620      	mov	r0, r4
    1ce6:	f00b f899 	bl	ce1c <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    1cea:	462b      	mov	r3, r5
    1cec:	4620      	mov	r0, r4
    1cee:	4a06      	ldr	r2, [pc, #24]	; (1d08 <cmd_log_memory_slabs+0x38>)
    1cf0:	2108      	movs	r1, #8
    1cf2:	f00b f893 	bl	ce1c <shell_fprintf>
		shell_print(
    1cf6:	4620      	mov	r0, r4
    1cf8:	4a04      	ldr	r2, [pc, #16]	; (1d0c <cmd_log_memory_slabs+0x3c>)
    1cfa:	2108      	movs	r1, #8
    1cfc:	f00b f88e 	bl	ce1c <shell_fprintf>
}
    1d00:	2000      	movs	r0, #0
    1d02:	bd38      	pop	{r3, r4, r5, pc}
    1d04:	0001038a 	.word	0x0001038a
    1d08:	0001039b 	.word	0x0001039b
    1d0c:	000103ac 	.word	0x000103ac

00001d10 <cmd_log_backends_list>:
{
    1d10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1d14:	4b11      	ldr	r3, [pc, #68]	; (1d5c <cmd_log_backends_list+0x4c>)
    1d16:	4c12      	ldr	r4, [pc, #72]	; (1d60 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    1d18:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1d64 <cmd_log_backends_list+0x54>
    1d1c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d68 <cmd_log_backends_list+0x58>
    1d20:	f8df a048 	ldr.w	sl, [pc, #72]	; 1d6c <cmd_log_backends_list+0x5c>
    1d24:	1b1b      	subs	r3, r3, r4
{
    1d26:	4607      	mov	r7, r0
    1d28:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    1d2a:	2500      	movs	r5, #0
    1d2c:	42b5      	cmp	r5, r6
    1d2e:	db03      	blt.n	1d38 <cmd_log_backends_list+0x28>
}
    1d30:	2000      	movs	r0, #0
    1d32:	b002      	add	sp, #8
    1d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    1d38:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    1d3a:	7959      	ldrb	r1, [r3, #5]
    1d3c:	791b      	ldrb	r3, [r3, #4]
    1d3e:	2900      	cmp	r1, #0
    1d40:	bf14      	ite	ne
    1d42:	4642      	movne	r2, r8
    1d44:	464a      	moveq	r2, r9
    1d46:	e9cd 2300 	strd	r2, r3, [sp]
    1d4a:	2108      	movs	r1, #8
    1d4c:	68a3      	ldr	r3, [r4, #8]
    1d4e:	4652      	mov	r2, sl
    1d50:	4638      	mov	r0, r7
    1d52:	f00b f863 	bl	ce1c <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    1d56:	3501      	adds	r5, #1
    1d58:	3410      	adds	r4, #16
    1d5a:	e7e7      	b.n	1d2c <cmd_log_backends_list+0x1c>
    1d5c:	0000f898 	.word	0x0000f898
    1d60:	0000f888 	.word	0x0000f888
    1d64:	00011e36 	.word	0x00011e36
    1d68:	0001141b 	.word	0x0001141b
    1d6c:	000103f8 	.word	0x000103f8

00001d70 <log_status>:
{
    1d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1d74:	4b24      	ldr	r3, [pc, #144]	; (1e08 <log_status+0x98>)
    1d76:	4c25      	ldr	r4, [pc, #148]	; (1e0c <log_status+0x9c>)
    1d78:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    1d7a:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    1d7c:	795b      	ldrb	r3, [r3, #5]
{
    1d7e:	b085      	sub	sp, #20
    1d80:	4605      	mov	r5, r0
    1d82:	460e      	mov	r6, r1
    1d84:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    1d86:	b91b      	cbnz	r3, 1d90 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    1d88:	4a21      	ldr	r2, [pc, #132]	; (1e10 <log_status+0xa0>)
    1d8a:	2103      	movs	r1, #3
    1d8c:	f00b f846 	bl	ce1c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1d90:	4b20      	ldr	r3, [pc, #128]	; (1e14 <log_status+0xa4>)
    1d92:	4a21      	ldr	r2, [pc, #132]	; (1e18 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1d94:	f8df a084 	ldr.w	sl, [pc, #132]	; 1e1c <log_status+0xac>
    1d98:	f8df b084 	ldr.w	fp, [pc, #132]	; 1e20 <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1d9c:	2108      	movs	r1, #8
    1d9e:	4628      	mov	r0, r5
    1da0:	f00b f83c 	bl	ce1c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    1da4:	4a1f      	ldr	r2, [pc, #124]	; (1e24 <log_status+0xb4>)
    1da6:	2108      	movs	r1, #8
    1da8:	4628      	mov	r0, r5
    1daa:	f00b f837 	bl	ce1c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    1dae:	f04f 0800 	mov.w	r8, #0
    1db2:	fa0f f788 	sxth.w	r7, r8
    1db6:	42a7      	cmp	r7, r4
    1db8:	f108 0801 	add.w	r8, r8, #1
    1dbc:	d303      	bcc.n	1dc6 <log_status+0x56>
}
    1dbe:	2000      	movs	r0, #0
    1dc0:	b005      	add	sp, #20
    1dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1dc6:	463a      	mov	r2, r7
    1dc8:	2301      	movs	r3, #1
    1dca:	2100      	movs	r1, #0
    1dcc:	4630      	mov	r0, r6
    1dce:	f7ff fcf7 	bl	17c0 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1dd2:	2300      	movs	r3, #0
    1dd4:	463a      	mov	r2, r7
    1dd6:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1dd8:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1dda:	4630      	mov	r0, r6
    1ddc:	f7ff fcf0 	bl	17c0 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1de0:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1de2:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1de4:	2000      	movs	r0, #0
    1de6:	f7ff fc5d 	bl	16a4 <log_source_name_get>
    1dea:	9a03      	ldr	r2, [sp, #12]
    1dec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    1df0:	9201      	str	r2, [sp, #4]
    1df2:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    1df6:	9200      	str	r2, [sp, #0]
    1df8:	4603      	mov	r3, r0
    1dfa:	465a      	mov	r2, fp
    1dfc:	2108      	movs	r1, #8
    1dfe:	4628      	mov	r0, r5
    1e00:	f00b f80c 	bl	ce1c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    1e04:	e7d5      	b.n	1db2 <log_status+0x42>
    1e06:	bf00      	nop
    1e08:	0000f818 	.word	0x0000f818
    1e0c:	0000f888 	.word	0x0000f888
    1e10:	00010419 	.word	0x00010419
    1e14:	0001042b 	.word	0x0001042b
    1e18:	00010437 	.word	0x00010437
    1e1c:	0000fa10 	.word	0x0000fa10
    1e20:	00010492 	.word	0x00010492
    1e24:	00010455 	.word	0x00010455

00001e28 <module_name_get>:
{
    1e28:	b510      	push	{r4, lr}
	entry->handler = NULL;
    1e2a:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    1e2c:	4a05      	ldr	r2, [pc, #20]	; (1e44 <module_name_get+0x1c>)
	entry->handler = NULL;
    1e2e:	60cb      	str	r3, [r1, #12]
{
    1e30:	460c      	mov	r4, r1
	entry->help  = NULL;
    1e32:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    1e34:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    1e36:	4601      	mov	r1, r0
    1e38:	4618      	mov	r0, r3
    1e3a:	f7ff fc33 	bl	16a4 <log_source_name_get>
    1e3e:	6020      	str	r0, [r4, #0]
}
    1e40:	bd10      	pop	{r4, pc}
    1e42:	bf00      	nop
    1e44:	0000fa00 	.word	0x0000fa00

00001e48 <shell_backend_cmd_execute>:
{
    1e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    1e4c:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    1e50:	4c18      	ldr	r4, [pc, #96]	; (1eb4 <shell_backend_cmd_execute+0x6c>)
{
    1e52:	b085      	sub	sp, #20
    1e54:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    1e56:	4650      	mov	r0, sl
{
    1e58:	4689      	mov	r9, r1
    1e5a:	4690      	mov	r8, r2
    1e5c:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    1e5e:	f00c f971 	bl	e144 <strlen>
    1e62:	4915      	ldr	r1, [pc, #84]	; (1eb8 <shell_backend_cmd_execute+0x70>)
    1e64:	1b09      	subs	r1, r1, r4
    1e66:	110b      	asrs	r3, r1, #4
    1e68:	4602      	mov	r2, r0
    1e6a:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e6c:	2700      	movs	r7, #0
    1e6e:	46a3      	mov	fp, r4
    1e70:	9b01      	ldr	r3, [sp, #4]
    1e72:	429f      	cmp	r7, r3
    1e74:	db08      	blt.n	1e88 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    1e76:	4a11      	ldr	r2, [pc, #68]	; (1ebc <shell_backend_cmd_execute+0x74>)
    1e78:	4653      	mov	r3, sl
    1e7a:	2101      	movs	r1, #1
    1e7c:	4630      	mov	r0, r6
    1e7e:	f00a ffcd 	bl	ce1c <shell_fprintf>
		return -ENOEXEC;
    1e82:	f06f 0507 	mvn.w	r5, #7
    1e86:	e00f      	b.n	1ea8 <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    1e88:	68a1      	ldr	r1, [r4, #8]
    1e8a:	9203      	str	r2, [sp, #12]
    1e8c:	4650      	mov	r0, sl
    1e8e:	f00c f975 	bl	e17c <strncmp>
    1e92:	3410      	adds	r4, #16
    1e94:	9a03      	ldr	r2, [sp, #12]
    1e96:	4605      	mov	r5, r0
    1e98:	b950      	cbnz	r0, 1eb0 <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    1e9a:	9c02      	ldr	r4, [sp, #8]
    1e9c:	4643      	mov	r3, r8
    1e9e:	464a      	mov	r2, r9
    1ea0:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    1ea4:	4630      	mov	r0, r6
    1ea6:	47a0      	blx	r4
}
    1ea8:	4628      	mov	r0, r5
    1eaa:	b005      	add	sp, #20
    1eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    1eb0:	3701      	adds	r7, #1
    1eb2:	e7dd      	b.n	1e70 <shell_backend_cmd_execute+0x28>
    1eb4:	0000f888 	.word	0x0000f888
    1eb8:	0000f898 	.word	0x0000f898
    1ebc:	000104a6 	.word	0x000104a6

00001ec0 <cmd_log_backend_status>:
{
    1ec0:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    1ec2:	4b02      	ldr	r3, [pc, #8]	; (1ecc <cmd_log_backend_status+0xc>)
    1ec4:	f7ff ffc0 	bl	1e48 <shell_backend_cmd_execute>
}
    1ec8:	2000      	movs	r0, #0
    1eca:	bd08      	pop	{r3, pc}
    1ecc:	00001d71 	.word	0x00001d71

00001ed0 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    1ed0:	4b01      	ldr	r3, [pc, #4]	; (1ed8 <cmd_log_backend_halt+0x8>)
    1ed2:	f7ff bfb9 	b.w	1e48 <shell_backend_cmd_execute>
    1ed6:	bf00      	nop
    1ed8:	0000ca9b 	.word	0x0000ca9b

00001edc <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    1edc:	4b01      	ldr	r3, [pc, #4]	; (1ee4 <cmd_log_backend_go+0x8>)
    1ede:	f7ff bfb3 	b.w	1e48 <shell_backend_cmd_execute>
    1ee2:	bf00      	nop
    1ee4:	0000caa3 	.word	0x0000caa3

00001ee8 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    1ee8:	4b01      	ldr	r3, [pc, #4]	; (1ef0 <cmd_log_backend_enable+0x8>)
    1eea:	f7ff bfad 	b.w	1e48 <shell_backend_cmd_execute>
    1eee:	bf00      	nop
    1ef0:	00001ff1 	.word	0x00001ff1

00001ef4 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    1ef4:	4b01      	ldr	r3, [pc, #4]	; (1efc <cmd_log_backend_disable+0x8>)
    1ef6:	f7ff bfa7 	b.w	1e48 <shell_backend_cmd_execute>
    1efa:	bf00      	nop
    1efc:	0000caef 	.word	0x0000caef

00001f00 <shell_state_precheck>:
{
    1f00:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    1f02:	69c3      	ldr	r3, [r0, #28]
    1f04:	68db      	ldr	r3, [r3, #12]
    1f06:	791c      	ldrb	r4, [r3, #4]
    1f08:	b92c      	cbnz	r4, 1f16 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    1f0a:	4a04      	ldr	r2, [pc, #16]	; (1f1c <shell_state_precheck+0x1c>)
    1f0c:	2101      	movs	r1, #1
    1f0e:	f00a ff85 	bl	ce1c <shell_fprintf>
    1f12:	4620      	mov	r0, r4
}
    1f14:	bd10      	pop	{r4, pc}
	return true;
    1f16:	2001      	movs	r0, #1
    1f18:	e7fc      	b.n	1f14 <shell_state_precheck+0x14>
    1f1a:	bf00      	nop
    1f1c:	000104bb 	.word	0x000104bb

00001f20 <filters_set>:
{
    1f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f24:	4e2c      	ldr	r6, [pc, #176]	; (1fd8 <filters_set+0xb8>)
    1f26:	461f      	mov	r7, r3
    1f28:	4b2c      	ldr	r3, [pc, #176]	; (1fdc <filters_set+0xbc>)
    1f2a:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    1f2c:	1e15      	subs	r5, r2, #0
{
    1f2e:	b085      	sub	sp, #20
    1f30:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    1f34:	bf14      	ite	ne
    1f36:	462b      	movne	r3, r5
    1f38:	4633      	moveq	r3, r6
    1f3a:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    1f3c:	684b      	ldr	r3, [r1, #4]
    1f3e:	795b      	ldrb	r3, [r3, #5]
{
    1f40:	4680      	mov	r8, r0
    1f42:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    1f44:	b91b      	cbnz	r3, 1f4e <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    1f46:	4a26      	ldr	r2, [pc, #152]	; (1fe0 <filters_set+0xc0>)
    1f48:	2103      	movs	r1, #3
    1f4a:	f00a ff67 	bl	ce1c <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    1f4e:	f8df a094 	ldr.w	sl, [pc, #148]	; 1fe4 <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    1f52:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    1f54:	9b02      	ldr	r3, [sp, #8]
    1f56:	429c      	cmp	r4, r3
    1f58:	db02      	blt.n	1f60 <filters_set+0x40>
}
    1f5a:	b005      	add	sp, #20
    1f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    1f60:	b3bd      	cbz	r5, 1fd2 <filters_set+0xb2>
    1f62:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    1f66:	2300      	movs	r3, #0
    1f68:	429e      	cmp	r6, r3
    1f6a:	d107      	bne.n	1f7c <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    1f6c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1f70:	4a1d      	ldr	r2, [pc, #116]	; (1fe8 <filters_set+0xc8>)
    1f72:	2101      	movs	r1, #1
    1f74:	4640      	mov	r0, r8
    1f76:	f00a ff51 	bl	ce1c <shell_fprintf>
    1f7a:	e023      	b.n	1fc4 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    1f7c:	4619      	mov	r1, r3
    1f7e:	2000      	movs	r0, #0
    1f80:	9303      	str	r3, [sp, #12]
    1f82:	f7ff fb8f 	bl	16a4 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    1f86:	2240      	movs	r2, #64	; 0x40
    1f88:	4659      	mov	r1, fp
    1f8a:	f00c f8f7 	bl	e17c <strncmp>
    1f8e:	9b03      	ldr	r3, [sp, #12]
    1f90:	b9d0      	cbnz	r0, 1fc8 <filters_set+0xa8>
			return i;
    1f92:	461a      	mov	r2, r3
    1f94:	2100      	movs	r1, #0
    1f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f98:	b212      	sxth	r2, r2
    1f9a:	4648      	mov	r0, r9
    1f9c:	f7ff fb90 	bl	16c0 <z_impl_log_filter_set>
			if (set_lvl != level) {
    1fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1fa2:	4283      	cmp	r3, r0
    1fa4:	4683      	mov	fp, r0
    1fa6:	d00d      	beq.n	1fc4 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    1fa8:	b985      	cbnz	r5, 1fcc <filters_set+0xac>
					log_source_name_get(
    1faa:	4621      	mov	r1, r4
    1fac:	4628      	mov	r0, r5
    1fae:	f7ff fb79 	bl	16a4 <log_source_name_get>
    1fb2:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    1fb4:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    1fb8:	9200      	str	r2, [sp, #0]
    1fba:	2103      	movs	r1, #3
    1fbc:	4a0b      	ldr	r2, [pc, #44]	; (1fec <filters_set+0xcc>)
    1fbe:	4640      	mov	r0, r8
    1fc0:	f00a ff2c 	bl	ce1c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    1fc4:	3401      	adds	r4, #1
    1fc6:	e7c5      	b.n	1f54 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    1fc8:	3301      	adds	r3, #1
    1fca:	e7cd      	b.n	1f68 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    1fcc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1fd0:	e7f0      	b.n	1fb4 <filters_set+0x94>
    1fd2:	4622      	mov	r2, r4
    1fd4:	e7de      	b.n	1f94 <filters_set+0x74>
    1fd6:	bf00      	nop
    1fd8:	0000f888 	.word	0x0000f888
    1fdc:	0000f818 	.word	0x0000f818
    1fe0:	000104df 	.word	0x000104df
    1fe4:	0000fa10 	.word	0x0000fa10
    1fe8:	0001050a 	.word	0x0001050a
    1fec:	000104f4 	.word	0x000104f4

00001ff0 <log_enable>:
{
    1ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    1ff4:	f8d3 b004 	ldr.w	fp, [r3, #4]
    1ff8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 2048 <log_enable+0x58>
{
    1ffc:	4606      	mov	r6, r0
    1ffe:	4688      	mov	r8, r1
    2000:	4691      	mov	r9, r2
    2002:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2004:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    2006:	f85a 1b04 	ldr.w	r1, [sl], #4
    200a:	2204      	movs	r2, #4
    200c:	4658      	mov	r0, fp
    200e:	f00c f8b5 	bl	e17c <strncmp>
    2012:	4604      	mov	r4, r0
    2014:	b170      	cbz	r0, 2034 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2016:	3701      	adds	r7, #1
    2018:	2f05      	cmp	r7, #5
    201a:	d1f4      	bne.n	2006 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    201c:	686b      	ldr	r3, [r5, #4]
    201e:	4a0b      	ldr	r2, [pc, #44]	; (204c <log_enable+0x5c>)
    2020:	2101      	movs	r1, #1
    2022:	4630      	mov	r0, r6
    2024:	f00a fefa 	bl	ce1c <shell_fprintf>
    2028:	f06f 0407 	mvn.w	r4, #7
}
    202c:	4620      	mov	r0, r4
    202e:	b003      	add	sp, #12
    2030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    2034:	9700      	str	r7, [sp, #0]
    2036:	f105 0308 	add.w	r3, r5, #8
    203a:	f1a9 0202 	sub.w	r2, r9, #2
    203e:	4641      	mov	r1, r8
    2040:	4630      	mov	r0, r6
    2042:	f7ff ff6d 	bl	1f20 <filters_set>
	return 0;
    2046:	e7f1      	b.n	202c <log_enable+0x3c>
    2048:	0000fa10 	.word	0x0000fa10
    204c:	00010524 	.word	0x00010524

00002050 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    2050:	b513      	push	{r0, r1, r4, lr}
    2052:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    2054:	f00c fe15 	bl	ec82 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    2058:	f3c0 2307 	ubfx	r3, r0, #8, #8
    205c:	9301      	str	r3, [sp, #4]
    205e:	f3c0 4307 	ubfx	r3, r0, #16, #8
    2062:	9300      	str	r3, [sp, #0]
    2064:	4a04      	ldr	r2, [pc, #16]	; (2078 <cmd_kernel_version+0x28>)
    2066:	0e03      	lsrs	r3, r0, #24
    2068:	2108      	movs	r1, #8
    206a:	4620      	mov	r0, r4
    206c:	f00a fed6 	bl	ce1c <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    2070:	2000      	movs	r0, #0
    2072:	b002      	add	sp, #8
    2074:	bd10      	pop	{r4, pc}
    2076:	bf00      	nop
    2078:	000106df 	.word	0x000106df

0000207c <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    207c:	b510      	push	{r4, lr}
    207e:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    2080:	f00d f853 	bl	f12a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2088:	fba0 2003 	umull	r2, r0, r0, r3
    208c:	fb03 0301 	mla	r3, r3, r1, r0
    2090:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    2092:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    2096:	4620      	mov	r0, r4
    2098:	4a02      	ldr	r2, [pc, #8]	; (20a4 <cmd_kernel_uptime+0x28>)
    209a:	2108      	movs	r1, #8
    209c:	f00a febe 	bl	ce1c <shell_fprintf>
	return 0;
}
    20a0:	2000      	movs	r0, #0
    20a2:	bd10      	pop	{r4, pc}
    20a4:	000106f8 	.word	0x000106f8

000020a8 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    20a8:	b510      	push	{r4, lr}
    20aa:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    20ac:	f006 fa3c 	bl	8528 <sys_clock_elapsed>
    20b0:	4a08      	ldr	r2, [pc, #32]	; (20d4 <cmd_kernel_threads+0x2c>)
    20b2:	4603      	mov	r3, r0
    20b4:	2108      	movs	r1, #8
    20b6:	4620      	mov	r0, r4
    20b8:	f00a feb0 	bl	ce1c <shell_fprintf>
	shell_print(shell, "Threads:");
    20bc:	4a06      	ldr	r2, [pc, #24]	; (20d8 <cmd_kernel_threads+0x30>)
    20be:	4620      	mov	r0, r4
    20c0:	2108      	movs	r1, #8
    20c2:	f00a feab 	bl	ce1c <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    20c6:	4805      	ldr	r0, [pc, #20]	; (20dc <cmd_kernel_threads+0x34>)
    20c8:	4621      	mov	r1, r4
    20ca:	f008 f9cd 	bl	a468 <k_thread_foreach>
	return 0;
}
    20ce:	2000      	movs	r0, #0
    20d0:	bd10      	pop	{r4, pc}
    20d2:	bf00      	nop
    20d4:	00010707 	.word	0x00010707
    20d8:	00010726 	.word	0x00010726
    20dc:	0000213d 	.word	0x0000213d

000020e0 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    20e0:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    20e2:	4601      	mov	r1, r0
{
    20e4:	b087      	sub	sp, #28
    20e6:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    20e8:	4811      	ldr	r0, [pc, #68]	; (2130 <cmd_kernel_stacks+0x50>)
    20ea:	f008 f9bd 	bl	a468 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    20ee:	4a11      	ldr	r2, [pc, #68]	; (2134 <cmd_kernel_stacks+0x54>)
		unused = 0;
    20f0:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    20f2:	f812 1b01 	ldrb.w	r1, [r2], #1
    20f6:	29aa      	cmp	r1, #170	; 0xaa
    20f8:	d103      	bne.n	2102 <cmd_kernel_stacks+0x22>
				unused++;
    20fa:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    20fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2100:	d1f7      	bne.n	20f2 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    2102:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    2106:	2264      	movs	r2, #100	; 0x64
    2108:	434a      	muls	r2, r1
    210a:	0ad2      	lsrs	r2, r2, #11
    210c:	9205      	str	r2, [sp, #20]
    210e:	2500      	movs	r5, #0
    2110:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2114:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2118:	e9cd 2301 	strd	r2, r3, [sp, #4]
    211c:	4620      	mov	r0, r4
    211e:	4b05      	ldr	r3, [pc, #20]	; (2134 <cmd_kernel_stacks+0x54>)
    2120:	4a05      	ldr	r2, [pc, #20]	; (2138 <cmd_kernel_stacks+0x58>)
    2122:	9500      	str	r5, [sp, #0]
    2124:	2108      	movs	r1, #8
    2126:	f00a fe79 	bl	ce1c <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    212a:	4628      	mov	r0, r5
    212c:	b007      	add	sp, #28
    212e:	bd30      	pop	{r4, r5, pc}
    2130:	0000221d 	.word	0x0000221d
    2134:	20003f98 	.word	0x20003f98
    2138:	00010730 	.word	0x00010730

0000213c <shell_tdata_dump>:
{
    213c:	b5f0      	push	{r4, r5, r6, r7, lr}
    213e:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    2140:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    2144:	4604      	mov	r4, r0
    2146:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    2148:	f00c fd89 	bl	ec5e <k_thread_name_get>
    214c:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    214e:	f009 f90d 	bl	b36c <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    2152:	4b23      	ldr	r3, [pc, #140]	; (21e0 <shell_tdata_dump+0xa4>)
    2154:	4a23      	ldr	r2, [pc, #140]	; (21e4 <shell_tdata_dump+0xa8>)
    2156:	2e00      	cmp	r6, #0
    2158:	bf08      	it	eq
    215a:	461e      	moveq	r6, r3
    215c:	4b22      	ldr	r3, [pc, #136]	; (21e8 <shell_tdata_dump+0xac>)
    215e:	e9cd 4600 	strd	r4, r6, [sp]
    2162:	4284      	cmp	r4, r0
    2164:	bf18      	it	ne
    2166:	4613      	movne	r3, r2
    2168:	2108      	movs	r1, #8
    216a:	4628      	mov	r0, r5
    216c:	4a1f      	ldr	r2, [pc, #124]	; (21ec <shell_tdata_dump+0xb0>)
    216e:	f00a fe55 	bl	ce1c <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    2172:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    2176:	e9cd 2302 	strd	r2, r3, [sp, #8]
    217a:	f994 300e 	ldrsb.w	r3, [r4, #14]
    217e:	4a1c      	ldr	r2, [pc, #112]	; (21f0 <shell_tdata_dump+0xb4>)
    2180:	9300      	str	r3, [sp, #0]
    2182:	2108      	movs	r1, #8
    2184:	7b23      	ldrb	r3, [r4, #12]
    2186:	4628      	mov	r0, r5
    2188:	f00a fe48 	bl	ce1c <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    218c:	4620      	mov	r0, r4
    218e:	f008 f9b3 	bl	a4f8 <k_thread_state_str>
    2192:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2194:	9200      	str	r2, [sp, #0]
    2196:	4603      	mov	r3, r0
    2198:	4a16      	ldr	r2, [pc, #88]	; (21f4 <shell_tdata_dump+0xb8>)
    219a:	2108      	movs	r1, #8
    219c:	4628      	mov	r0, r5
    219e:	f00a fe3d 	bl	ce1c <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    21a2:	a905      	add	r1, sp, #20
    21a4:	4620      	mov	r0, r4
    21a6:	f00c fd5e 	bl	ec66 <z_impl_k_thread_stack_space_get>
	if (ret) {
    21aa:	4603      	mov	r3, r0
    21ac:	b130      	cbz	r0, 21bc <shell_tdata_dump+0x80>
		shell_print(shell,
    21ae:	4a12      	ldr	r2, [pc, #72]	; (21f8 <shell_tdata_dump+0xbc>)
    21b0:	2108      	movs	r1, #8
    21b2:	4628      	mov	r0, r5
    21b4:	f00a fe32 	bl	ce1c <shell_fprintf>
}
    21b8:	b007      	add	sp, #28
    21ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    21bc:	9a05      	ldr	r2, [sp, #20]
    21be:	2364      	movs	r3, #100	; 0x64
    21c0:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    21c2:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    21c6:	434b      	muls	r3, r1
		shell_print(shell,
    21c8:	4a0c      	ldr	r2, [pc, #48]	; (21fc <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    21ca:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    21ce:	2108      	movs	r1, #8
    21d0:	e9cd 7302 	strd	r7, r3, [sp, #8]
    21d4:	4628      	mov	r0, r5
    21d6:	463b      	mov	r3, r7
    21d8:	f00a fe20 	bl	ce1c <shell_fprintf>
}
    21dc:	e7ec      	b.n	21b8 <shell_tdata_dump+0x7c>
    21de:	bf00      	nop
    21e0:	00010776 	.word	0x00010776
    21e4:	0001030c 	.word	0x0001030c
    21e8:	00011aeb 	.word	0x00011aeb
    21ec:	00010779 	.word	0x00010779
    21f0:	00010785 	.word	0x00010785
    21f4:	000107b1 	.word	0x000107b1
    21f8:	000107c8 	.word	0x000107c8
    21fc:	000107f5 	.word	0x000107f5

00002200 <cmd_kernel_cycles>:
{
    2200:	b510      	push	{r4, lr}
    2202:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    2204:	f00c fb5a 	bl	e8bc <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    2208:	4a03      	ldr	r2, [pc, #12]	; (2218 <cmd_kernel_cycles+0x18>)
    220a:	4603      	mov	r3, r0
    220c:	2108      	movs	r1, #8
    220e:	4620      	mov	r0, r4
    2210:	f00a fe04 	bl	ce1c <shell_fprintf>
}
    2214:	2000      	movs	r0, #0
    2216:	bd10      	pop	{r4, pc}
    2218:	0001082c 	.word	0x0001082c

0000221c <shell_stack_dump>:
{
    221c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    221e:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    2222:	b089      	sub	sp, #36	; 0x24
    2224:	4604      	mov	r4, r0
    2226:	460d      	mov	r5, r1
    2228:	a907      	add	r1, sp, #28
    222a:	f00c fd1c 	bl	ec66 <z_impl_k_thread_stack_space_get>
	if (ret) {
    222e:	4603      	mov	r3, r0
    2230:	b130      	cbz	r0, 2240 <shell_stack_dump+0x24>
		shell_print(shell,
    2232:	4a10      	ldr	r2, [pc, #64]	; (2274 <shell_stack_dump+0x58>)
    2234:	2108      	movs	r1, #8
    2236:	4628      	mov	r0, r5
    2238:	f00a fdf0 	bl	ce1c <shell_fprintf>
}
    223c:	b009      	add	sp, #36	; 0x24
    223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    2240:	4620      	mov	r0, r4
    2242:	f00c fd0c 	bl	ec5e <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    2246:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    2248:	4a0b      	ldr	r2, [pc, #44]	; (2278 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    224a:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    224c:	2800      	cmp	r0, #0
    224e:	bf18      	it	ne
    2250:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    2252:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    2254:	e9cd 1702 	strd	r1, r7, [sp, #8]
    2258:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    225c:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    225e:	4a07      	ldr	r2, [pc, #28]	; (227c <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    2260:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    2264:	2108      	movs	r1, #8
    2266:	e9cd 6304 	strd	r6, r3, [sp, #16]
    226a:	4628      	mov	r0, r5
    226c:	4623      	mov	r3, r4
    226e:	f00a fdd5 	bl	ce1c <shell_fprintf>
    2272:	e7e3      	b.n	223c <shell_stack_dump+0x20>
    2274:	000107c8 	.word	0x000107c8
    2278:	00010776 	.word	0x00010776
    227c:	00010842 	.word	0x00010842

00002280 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    2280:	4603      	mov	r3, r0
	const char *name = dev->name;
    2282:	6800      	ldr	r0, [r0, #0]
{
    2284:	b510      	push	{r4, lr}
    2286:	460c      	mov	r4, r1
    2288:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    228a:	b108      	cbz	r0, 2290 <get_device_name+0x10>
    228c:	7802      	ldrb	r2, [r0, #0]
    228e:	b922      	cbnz	r2, 229a <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    2290:	4a02      	ldr	r2, [pc, #8]	; (229c <get_device_name+0x1c>)
    2292:	4620      	mov	r0, r4
    2294:	f004 f89e 	bl	63d4 <snprintf>
		name = buf;
    2298:	4620      	mov	r0, r4
	}

	return name;
}
    229a:	bd10      	pop	{r4, pc}
    229c:	00010919 	.word	0x00010919

000022a0 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    22a0:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    22a2:	680c      	ldr	r4, [r1, #0]
    22a4:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    22a8:	f7ff ffea 	bl	2280 <get_device_name>
    22ac:	4a03      	ldr	r2, [pc, #12]	; (22bc <cmd_device_list_visitor+0x1c>)
    22ae:	4603      	mov	r3, r0
    22b0:	2108      	movs	r1, #8
    22b2:	4620      	mov	r0, r4
    22b4:	f00a fdb2 	bl	ce1c <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    22b8:	2000      	movs	r0, #0
    22ba:	bd10      	pop	{r4, pc}
    22bc:	0001091e 	.word	0x0001091e

000022c0 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    22c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22c4:	b08a      	sub	sp, #40	; 0x28
    22c6:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    22c8:	a801      	add	r0, sp, #4
    22ca:	f007 fee3 	bl	a094 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    22ce:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    22d0:	4a1b      	ldr	r2, [pc, #108]	; (2340 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    22d2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2344 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    22d6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 2348 <cmd_device_list+0x88>
    22da:	f8df a070 	ldr.w	sl, [pc, #112]	; 234c <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    22de:	2318      	movs	r3, #24
    22e0:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    22e4:	2108      	movs	r1, #8
    22e6:	4628      	mov	r0, r5
    22e8:	f00a fd98 	bl	ce1c <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    22ec:	9c01      	ldr	r4, [sp, #4]
    22ee:	42b4      	cmp	r4, r6
    22f0:	d303      	bcc.n	22fa <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    22f2:	2000      	movs	r0, #0
    22f4:	b00a      	add	sp, #40	; 0x28
    22f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    22fa:	af05      	add	r7, sp, #20
    22fc:	4639      	mov	r1, r7
    22fe:	2214      	movs	r2, #20
    2300:	4620      	mov	r0, r4
    2302:	f7ff ffbd 	bl	2280 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    2306:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    2308:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    230a:	2108      	movs	r1, #8
    230c:	4628      	mov	r0, r5
    230e:	f00a fd85 	bl	ce1c <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2312:	4620      	mov	r0, r4
    2314:	f00c fc39 	bl	eb8a <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    2318:	4a0d      	ldr	r2, [pc, #52]	; (2350 <cmd_device_list+0x90>)
    231a:	2800      	cmp	r0, #0
    231c:	bf14      	ite	ne
    231e:	464b      	movne	r3, r9
    2320:	4653      	moveq	r3, sl
    2322:	2108      	movs	r1, #8
    2324:	4628      	mov	r0, r5
    2326:	f00a fd79 	bl	ce1c <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    232a:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    232c:	4620      	mov	r0, r4
    232e:	4909      	ldr	r1, [pc, #36]	; (2354 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    2330:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    2332:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    2334:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    2338:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    233a:	f00c fc30 	bl	eb9e <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    233e:	e7d6      	b.n	22ee <cmd_device_list+0x2e>
    2340:	0001093d 	.word	0x0001093d
    2344:	00010947 	.word	0x00010947
    2348:	0001092e 	.word	0x0001092e
    234c:	00010934 	.word	0x00010934
    2350:	0001094c 	.word	0x0001094c
    2354:	000022a1 	.word	0x000022a1

00002358 <device_get_config_level>:
{
    2358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    235c:	4b11      	ldr	r3, [pc, #68]	; (23a4 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    235e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 23a8 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2362:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    2366:	3101      	adds	r1, #1
{
    2368:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    236a:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    236e:	4606      	mov	r6, r0
	bool devices = false;
    2370:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2372:	45a0      	cmp	r8, r4
    2374:	d803      	bhi.n	237e <device_get_config_level+0x26>
}
    2376:	4638      	mov	r0, r7
    2378:	b007      	add	sp, #28
    237a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    237e:	4620      	mov	r0, r4
    2380:	f00c fc03 	bl	eb8a <z_device_is_ready>
		if (device_is_ready(dev)) {
    2384:	4605      	mov	r5, r0
    2386:	b158      	cbz	r0, 23a0 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    2388:	2214      	movs	r2, #20
    238a:	a901      	add	r1, sp, #4
    238c:	4620      	mov	r0, r4
    238e:	f7ff ff77 	bl	2280 <get_device_name>
    2392:	464a      	mov	r2, r9
    2394:	4603      	mov	r3, r0
    2396:	2108      	movs	r1, #8
    2398:	4630      	mov	r0, r6
    239a:	f00a fd3f 	bl	ce1c <shell_fprintf>
			devices = true;
    239e:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    23a0:	3418      	adds	r4, #24
    23a2:	e7e6      	b.n	2372 <device_get_config_level+0x1a>
    23a4:	0000fc30 	.word	0x0000fc30
    23a8:	00010953 	.word	0x00010953

000023ac <cmd_device_levels>:
{
    23ac:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    23ae:	2108      	movs	r1, #8
{
    23b0:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    23b2:	4a1e      	ldr	r2, [pc, #120]	; (242c <cmd_device_levels+0x80>)
    23b4:	f00a fd32 	bl	ce1c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    23b8:	2100      	movs	r1, #0
    23ba:	4620      	mov	r0, r4
    23bc:	f7ff ffcc 	bl	2358 <device_get_config_level>
	if (ret == false) {
    23c0:	b920      	cbnz	r0, 23cc <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    23c2:	4a1b      	ldr	r2, [pc, #108]	; (2430 <cmd_device_levels+0x84>)
    23c4:	2108      	movs	r1, #8
    23c6:	4620      	mov	r0, r4
    23c8:	f00a fd28 	bl	ce1c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    23cc:	2108      	movs	r1, #8
    23ce:	4620      	mov	r0, r4
    23d0:	4a18      	ldr	r2, [pc, #96]	; (2434 <cmd_device_levels+0x88>)
    23d2:	f00a fd23 	bl	ce1c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    23d6:	2101      	movs	r1, #1
    23d8:	4620      	mov	r0, r4
    23da:	f7ff ffbd 	bl	2358 <device_get_config_level>
	if (ret == false) {
    23de:	b920      	cbnz	r0, 23ea <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    23e0:	4a13      	ldr	r2, [pc, #76]	; (2430 <cmd_device_levels+0x84>)
    23e2:	2108      	movs	r1, #8
    23e4:	4620      	mov	r0, r4
    23e6:	f00a fd19 	bl	ce1c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    23ea:	2108      	movs	r1, #8
    23ec:	4620      	mov	r0, r4
    23ee:	4a12      	ldr	r2, [pc, #72]	; (2438 <cmd_device_levels+0x8c>)
    23f0:	f00a fd14 	bl	ce1c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    23f4:	2102      	movs	r1, #2
    23f6:	4620      	mov	r0, r4
    23f8:	f7ff ffae 	bl	2358 <device_get_config_level>
	if (ret == false) {
    23fc:	b920      	cbnz	r0, 2408 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    23fe:	4a0c      	ldr	r2, [pc, #48]	; (2430 <cmd_device_levels+0x84>)
    2400:	2108      	movs	r1, #8
    2402:	4620      	mov	r0, r4
    2404:	f00a fd0a 	bl	ce1c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    2408:	2108      	movs	r1, #8
    240a:	4620      	mov	r0, r4
    240c:	4a0b      	ldr	r2, [pc, #44]	; (243c <cmd_device_levels+0x90>)
    240e:	f00a fd05 	bl	ce1c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    2412:	2103      	movs	r1, #3
    2414:	4620      	mov	r0, r4
    2416:	f7ff ff9f 	bl	2358 <device_get_config_level>
	if (ret == false) {
    241a:	b920      	cbnz	r0, 2426 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    241c:	4a04      	ldr	r2, [pc, #16]	; (2430 <cmd_device_levels+0x84>)
    241e:	2108      	movs	r1, #8
    2420:	4620      	mov	r0, r4
    2422:	f00a fcfb 	bl	ce1c <shell_fprintf>
}
    2426:	2000      	movs	r0, #0
    2428:	bd10      	pop	{r4, pc}
    242a:	bf00      	nop
    242c:	00010959 	.word	0x00010959
    2430:	00010968 	.word	0x00010968
    2434:	00010970 	.word	0x00010970
    2438:	0001097f 	.word	0x0001097f
    243c:	0001098d 	.word	0x0001098d

00002440 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    2440:	1e8b      	subs	r3, r1, #2
    2442:	2b02      	cmp	r3, #2
{
    2444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2448:	4607      	mov	r7, r0
    244a:	4688      	mov	r8, r1
    244c:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    244e:	d833      	bhi.n	24b8 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    2450:	6860      	ldr	r0, [r4, #4]
    2452:	2210      	movs	r2, #16
    2454:	2100      	movs	r1, #0
    2456:	f00b fdb2 	bl	dfbe <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    245a:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    245e:	4606      	mov	r6, r0
	if (argc < 3) {
    2460:	d01e      	beq.n	24a0 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    2462:	68a0      	ldr	r0, [r4, #8]
    2464:	220a      	movs	r2, #10
    2466:	2100      	movs	r1, #0
    2468:	f00b fda9 	bl	dfbe <strtoul>
    246c:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    246e:	4a21      	ldr	r2, [pc, #132]	; (24f4 <cmd_devmem+0xb4>)
    2470:	462b      	mov	r3, r5
    2472:	2108      	movs	r1, #8
    2474:	4638      	mov	r0, r7
    2476:	f00a fcd1 	bl	ce1c <shell_fprintf>

	if (argc <= 3) {
    247a:	f1b8 0f04 	cmp.w	r8, #4
    247e:	d01e      	beq.n	24be <cmd_devmem+0x7e>
	switch (width) {
    2480:	2d10      	cmp	r5, #16
    2482:	d00f      	beq.n	24a4 <cmd_devmem+0x64>
    2484:	2d20      	cmp	r5, #32
    2486:	d010      	beq.n	24aa <cmd_devmem+0x6a>
    2488:	2d08      	cmp	r5, #8
    248a:	d110      	bne.n	24ae <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    248c:	7833      	ldrb	r3, [r6, #0]
    248e:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    2490:	4a19      	ldr	r2, [pc, #100]	; (24f8 <cmd_devmem+0xb8>)
    2492:	2108      	movs	r1, #8
    2494:	4638      	mov	r0, r7
    2496:	f00a fcc1 	bl	ce1c <shell_fprintf>
	int err = 0;
    249a:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    24a0:	2520      	movs	r5, #32
    24a2:	e7e4      	b.n	246e <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    24a4:	8833      	ldrh	r3, [r6, #0]
    24a6:	b29b      	uxth	r3, r3
	if (err == 0) {
    24a8:	e7f2      	b.n	2490 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    24aa:	6833      	ldr	r3, [r6, #0]
    24ac:	e7f0      	b.n	2490 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    24ae:	4a13      	ldr	r2, [pc, #76]	; (24fc <cmd_devmem+0xbc>)
    24b0:	2108      	movs	r1, #8
    24b2:	4638      	mov	r0, r7
    24b4:	f00a fcb2 	bl	ce1c <shell_fprintf>
		return -EINVAL;
    24b8:	f06f 0015 	mvn.w	r0, #21
    24bc:	e7ee      	b.n	249c <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    24be:	68e0      	ldr	r0, [r4, #12]
    24c0:	2210      	movs	r2, #16
    24c2:	2100      	movs	r1, #0
    24c4:	f00b fd7b 	bl	dfbe <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    24c8:	4a0d      	ldr	r2, [pc, #52]	; (2500 <cmd_devmem+0xc0>)
    24ca:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    24cc:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    24ce:	2108      	movs	r1, #8
    24d0:	4638      	mov	r0, r7
    24d2:	f00a fca3 	bl	ce1c <shell_fprintf>
	switch (width) {
    24d6:	2d10      	cmp	r5, #16
    24d8:	d006      	beq.n	24e8 <cmd_devmem+0xa8>
    24da:	2d20      	cmp	r5, #32
    24dc:	d007      	beq.n	24ee <cmd_devmem+0xae>
    24de:	2d08      	cmp	r5, #8
    24e0:	d1e5      	bne.n	24ae <cmd_devmem+0x6e>
		sys_write8(value, addr);
    24e2:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    24e4:	7034      	strb	r4, [r6, #0]
    24e6:	e7d8      	b.n	249a <cmd_devmem+0x5a>
		sys_write16(value, addr);
    24e8:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    24ea:	8034      	strh	r4, [r6, #0]
    24ec:	e7d5      	b.n	249a <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    24ee:	6034      	str	r4, [r6, #0]
    24f0:	e7d3      	b.n	249a <cmd_devmem+0x5a>
    24f2:	bf00      	nop
    24f4:	000109ea 	.word	0x000109ea
    24f8:	00010a15 	.word	0x00010a15
    24fc:	000109ff 	.word	0x000109ff
    2500:	00010a26 	.word	0x00010a26

00002504 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    2504:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    2506:	4e0e      	ldr	r6, [pc, #56]	; (2540 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    2508:	4604      	mov	r4, r0
	if (bypass && in_use) {
    250a:	7833      	ldrb	r3, [r6, #0]
    250c:	460d      	mov	r5, r1
    250e:	b131      	cbz	r1, 251e <set_bypass.isra.0+0x1a>
    2510:	b12b      	cbz	r3, 251e <set_bypass.isra.0+0x1a>
}
    2512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    2516:	4a0b      	ldr	r2, [pc, #44]	; (2544 <set_bypass.isra.0+0x40>)
    2518:	2101      	movs	r1, #1
    251a:	f00a bc7f 	b.w	ce1c <shell_fprintf>
	in_use = !in_use;
    251e:	f083 0301 	eor.w	r3, r3, #1
    2522:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    2524:	b133      	cbz	r3, 2534 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    2526:	4a08      	ldr	r2, [pc, #32]	; (2548 <set_bypass.isra.0+0x44>)
    2528:	2108      	movs	r1, #8
    252a:	4620      	mov	r0, r4
    252c:	f00a fc76 	bl	ce1c <shell_fprintf>
		in_use = true;
    2530:	2301      	movs	r3, #1
    2532:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    2534:	4629      	mov	r1, r5
    2536:	4620      	mov	r0, r4
}
    2538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    253c:	f00a bc7b 	b.w	ce36 <shell_set_bypass>
    2540:	200022dc 	.word	0x200022dc
    2544:	00010a3a 	.word	0x00010a3a
    2548:	00010a75 	.word	0x00010a75

0000254c <bypass_cb>:
{
    254c:	b570      	push	{r4, r5, r6, lr}
    254e:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    2550:	483c      	ldr	r0, [pc, #240]	; (2644 <bypass_cb+0xf8>)
    2552:	7803      	ldrb	r3, [r0, #0]
    2554:	2b18      	cmp	r3, #24
    2556:	d102      	bne.n	255e <bypass_cb+0x12>
    2558:	780b      	ldrb	r3, [r1, #0]
    255a:	2b11      	cmp	r3, #17
    255c:	d031      	beq.n	25c2 <bypass_cb+0x76>
    255e:	3a01      	subs	r2, #1
    2560:	460b      	mov	r3, r1
    2562:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    2564:	429d      	cmp	r5, r3
    2566:	d125      	bne.n	25b4 <bypass_cb+0x68>
	tail = recv[len - 1];
    2568:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    256a:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    256c:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    256e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    2572:	2b09      	cmp	r3, #9
    2574:	4c34      	ldr	r4, [pc, #208]	; (2648 <bypass_cb+0xfc>)
    2576:	d904      	bls.n	2582 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    2578:	f022 0320 	bic.w	r3, r2, #32
    257c:	3b41      	subs	r3, #65	; 0x41
    257e:	2b05      	cmp	r3, #5
    2580:	d804      	bhi.n	258c <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    2582:	6823      	ldr	r3, [r4, #0]
    2584:	4931      	ldr	r1, [pc, #196]	; (264c <bypass_cb+0x100>)
    2586:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    2588:	3301      	adds	r3, #1
    258a:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    258c:	6823      	ldr	r3, [r4, #0]
    258e:	2b02      	cmp	r3, #2
    2590:	d134      	bne.n	25fc <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    2592:	2210      	movs	r2, #16
    2594:	482d      	ldr	r0, [pc, #180]	; (264c <bypass_cb+0x100>)
    2596:	2100      	movs	r1, #0
    2598:	f00b fd11 	bl	dfbe <strtoul>
		*bytes = byte;
    259c:	4a2c      	ldr	r2, [pc, #176]	; (2650 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    259e:	6813      	ldr	r3, [r2, #0]
    25a0:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    25a4:	6013      	str	r3, [r2, #0]
		sum++;
    25a6:	4a2b      	ldr	r2, [pc, #172]	; (2654 <bypass_cb+0x108>)
    25a8:	6813      	ldr	r3, [r2, #0]
    25aa:	3301      	adds	r3, #1
    25ac:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    25ae:	2300      	movs	r3, #0
    25b0:	6023      	str	r3, [r4, #0]
    25b2:	e023      	b.n	25fc <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    25b4:	f813 6b01 	ldrb.w	r6, [r3], #1
    25b8:	2e18      	cmp	r6, #24
    25ba:	d1d3      	bne.n	2564 <bypass_cb+0x18>
    25bc:	781e      	ldrb	r6, [r3, #0]
    25be:	2e11      	cmp	r6, #17
    25c0:	d1d0      	bne.n	2564 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    25c2:	4d24      	ldr	r5, [pc, #144]	; (2654 <bypass_cb+0x108>)
    25c4:	4a24      	ldr	r2, [pc, #144]	; (2658 <bypass_cb+0x10c>)
    25c6:	682b      	ldr	r3, [r5, #0]
    25c8:	2108      	movs	r1, #8
    25ca:	4620      	mov	r0, r4
    25cc:	f00a fc26 	bl	ce1c <shell_fprintf>
		set_bypass(sh, NULL);
    25d0:	4620      	mov	r0, r4
    25d2:	2100      	movs	r1, #0
    25d4:	f7ff ff96 	bl	2504 <set_bypass.isra.0>
		if (!littleendian) {
    25d8:	4b20      	ldr	r3, [pc, #128]	; (265c <bypass_cb+0x110>)
    25da:	7818      	ldrb	r0, [r3, #0]
    25dc:	b970      	cbnz	r0, 25fc <bypass_cb+0xb0>
    25de:	4a20      	ldr	r2, [pc, #128]	; (2660 <bypass_cb+0x114>)
    25e0:	682b      	ldr	r3, [r5, #0]
    25e2:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    25e4:	2b04      	cmp	r3, #4
    25e6:	dc0a      	bgt.n	25fe <bypass_cb+0xb2>
    25e8:	b108      	cbz	r0, 25ee <bypass_cb+0xa2>
    25ea:	6011      	str	r1, [r2, #0]
    25ec:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    25ee:	f013 0103 	ands.w	r1, r3, #3
    25f2:	d10b      	bne.n	260c <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    25f4:	6812      	ldr	r2, [r2, #0]
    25f6:	6813      	ldr	r3, [r2, #0]
    25f8:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    25fa:	6013      	str	r3, [r2, #0]
}
    25fc:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    25fe:	6808      	ldr	r0, [r1, #0]
    2600:	ba00      	rev	r0, r0
    2602:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    2606:	3b04      	subs	r3, #4
				data++;
    2608:	2001      	movs	r0, #1
    260a:	e7eb      	b.n	25e4 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    260c:	425b      	negs	r3, r3
    260e:	f003 0303 	and.w	r3, r3, #3
    2612:	bf58      	it	pl
    2614:	4259      	negpl	r1, r3
    2616:	2902      	cmp	r1, #2
    2618:	d104      	bne.n	2624 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    261a:	6812      	ldr	r2, [r2, #0]
    261c:	8813      	ldrh	r3, [r2, #0]
    261e:	ba5b      	rev16	r3, r3
    2620:	b29b      	uxth	r3, r3
    2622:	e7ea      	b.n	25fa <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    2624:	2903      	cmp	r1, #3
    2626:	d1e9      	bne.n	25fc <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    2628:	6810      	ldr	r0, [r2, #0]
    262a:	6802      	ldr	r2, [r0, #0]
    262c:	0411      	lsls	r1, r2, #16
    262e:	f3c2 4307 	ubfx	r3, r2, #16, #8
    2632:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    2636:	430b      	orrs	r3, r1
    2638:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    263c:	4313      	orrs	r3, r2
    263e:	6003      	str	r3, [r0, #0]
    2640:	e7dc      	b.n	25fc <bypass_cb+0xb0>
    2642:	bf00      	nop
    2644:	200022de 	.word	0x200022de
    2648:	2000116c 	.word	0x2000116c
    264c:	200022da 	.word	0x200022da
    2650:	20001168 	.word	0x20001168
    2654:	20001174 	.word	0x20001174
    2658:	00010a9f 	.word	0x00010a9f
    265c:	200022dd 	.word	0x200022dd
    2660:	20001170 	.word	0x20001170

00002664 <cmd_load>:
{
    2664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2668:	460d      	mov	r5, r1
	chunk_element = 0;
    266a:	492d      	ldr	r1, [pc, #180]	; (2720 <cmd_load+0xbc>)
	littleendian = false;
    266c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2724 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    2670:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2728 <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    2674:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 272c <cmd_load+0xc8>
	littleendian = false;
    2678:	2300      	movs	r3, #0
	chunk_element = 0;
    267a:	600b      	str	r3, [r1, #0]
	sum = 0;
    267c:	492c      	ldr	r1, [pc, #176]	; (2730 <cmd_load+0xcc>)
	littleendian = false;
    267e:	f888 3000 	strb.w	r3, [r8]
{
    2682:	4606      	mov	r6, r0
	sum = 0;
    2684:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    2686:	4614      	mov	r4, r2
    2688:	2d01      	cmp	r5, #1
    268a:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    268c:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    2690:	d921      	bls.n	26d6 <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    2692:	4618      	mov	r0, r3
    2694:	2202      	movs	r2, #2
    2696:	4649      	mov	r1, r9
    2698:	9301      	str	r3, [sp, #4]
    269a:	f00b fd6f 	bl	e17c <strncmp>
    269e:	9b01      	ldr	r3, [sp, #4]
    26a0:	b988      	cbnz	r0, 26c6 <cmd_load+0x62>
    26a2:	6822      	ldr	r2, [r4, #0]
    26a4:	7892      	ldrb	r2, [r2, #2]
    26a6:	3a00      	subs	r2, #0
    26a8:	bf18      	it	ne
    26aa:	2201      	movne	r2, #1
    26ac:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    26b0:	4920      	ldr	r1, [pc, #128]	; (2734 <cmd_load+0xd0>)
    26b2:	2202      	movs	r2, #2
    26b4:	4650      	mov	r0, sl
    26b6:	f00b fd61 	bl	e17c <strncmp>
    26ba:	b930      	cbnz	r0, 26ca <cmd_load+0x66>
			littleendian = true;
    26bc:	2301      	movs	r3, #1
    26be:	f888 3000 	strb.w	r3, [r8]
		argc--;
    26c2:	3d01      	subs	r5, #1
    26c4:	e7e0      	b.n	2688 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    26c6:	2200      	movs	r2, #0
    26c8:	e7f0      	b.n	26ac <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    26ca:	4649      	mov	r1, r9
    26cc:	4650      	mov	r0, sl
    26ce:	f00b fd49 	bl	e164 <strcmp>
    26d2:	b9b0      	cbnz	r0, 2702 <cmd_load+0x9e>
			argv++;
    26d4:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    26d6:	2200      	movs	r2, #0
    26d8:	4611      	mov	r1, r2
    26da:	6878      	ldr	r0, [r7, #4]
    26dc:	f00b fbfb 	bl	ded6 <strtol>
    26e0:	4b15      	ldr	r3, [pc, #84]	; (2738 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    26e2:	2200      	movs	r2, #0
    26e4:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    26e6:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    26e8:	6878      	ldr	r0, [r7, #4]
    26ea:	f00b fbf4 	bl	ded6 <strtol>
    26ee:	4b13      	ldr	r3, [pc, #76]	; (273c <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    26f0:	4913      	ldr	r1, [pc, #76]	; (2740 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    26f2:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    26f4:	4630      	mov	r0, r6
    26f6:	f7ff ff05 	bl	2504 <set_bypass.isra.0>
}
    26fa:	2000      	movs	r0, #0
    26fc:	b003      	add	sp, #12
    26fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    2702:	f89a 2000 	ldrb.w	r2, [sl]
    2706:	2a2d      	cmp	r2, #45	; 0x2d
    2708:	d1e5      	bne.n	26d6 <cmd_load+0x72>
    270a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    270e:	2a00      	cmp	r2, #0
    2710:	d0e1      	beq.n	26d6 <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    2712:	4653      	mov	r3, sl
    2714:	465a      	mov	r2, fp
    2716:	2108      	movs	r1, #8
    2718:	4630      	mov	r0, r6
    271a:	f00a fb7f 	bl	ce1c <shell_fprintf>
    271e:	e7d0      	b.n	26c2 <cmd_load+0x5e>
    2720:	2000116c 	.word	0x2000116c
    2724:	200022dd 	.word	0x200022dd
    2728:	00010ab9 	.word	0x00010ab9
    272c:	00010abf 	.word	0x00010abf
    2730:	20001174 	.word	0x20001174
    2734:	00010abc 	.word	0x00010abc
    2738:	20001168 	.word	0x20001168
    273c:	20001170 	.word	0x20001170
    2740:	0000254d 	.word	0x0000254d

00002744 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    2744:	b507      	push	{r0, r1, r2, lr}
    2746:	480a      	ldr	r0, [pc, #40]	; (2770 <enable_shell_uart+0x2c>)
    2748:	f00c fa1f 	bl	eb8a <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    274c:	b160      	cbz	r0, 2768 <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    274e:	4a09      	ldr	r2, [pc, #36]	; (2774 <enable_shell_uart+0x30>)
    2750:	4907      	ldr	r1, [pc, #28]	; (2770 <enable_shell_uart+0x2c>)
    2752:	6812      	ldr	r2, [r2, #0]
    2754:	4808      	ldr	r0, [pc, #32]	; (2778 <enable_shell_uart+0x34>)
    2756:	2304      	movs	r3, #4
    2758:	9300      	str	r3, [sp, #0]
    275a:	2301      	movs	r3, #1
    275c:	f000 fe0a 	bl	3374 <shell_init>

	return 0;
    2760:	2000      	movs	r0, #0
}
    2762:	b003      	add	sp, #12
    2764:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    2768:	f06f 0012 	mvn.w	r0, #18
    276c:	e7f9      	b.n	2762 <enable_shell_uart+0x1e>
    276e:	bf00      	nop
    2770:	0000f650 	.word	0x0000f650
    2774:	0000fccc 	.word	0x0000fccc
    2778:	0000f898 	.word	0x0000f898

0000277c <init>:
{
    277c:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    277e:	6846      	ldr	r6, [r0, #4]
{
    2780:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    2782:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    2784:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    2786:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    2788:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    278a:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    278e:	2208      	movs	r2, #8
	buf->tail = 0;
    2790:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    2794:	4629      	mov	r1, r5
    2796:	4410      	add	r0, r2
    2798:	f00b fd35 	bl	e206 <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    279c:	68f0      	ldr	r0, [r6, #12]
    279e:	2208      	movs	r2, #8
	buf->tail = 0;
    27a0:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    27a4:	4629      	mov	r1, r5
    27a6:	4410      	add	r0, r2
    27a8:	f00b fd2d 	bl	e206 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    27ac:	6833      	ldr	r3, [r6, #0]
    27ae:	60dd      	str	r5, [r3, #12]
	const struct uart_driver_api *api =
    27b0:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    27b2:	b12b      	cbz	r3, 27c0 <init+0x44>
    27b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    27b6:	b11b      	cbz	r3, 27c0 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    27b8:	4905      	ldr	r1, [pc, #20]	; (27d0 <init+0x54>)
    27ba:	4632      	mov	r2, r6
    27bc:	4620      	mov	r0, r4
    27be:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    27c0:	68a3      	ldr	r3, [r4, #8]
    27c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27c4:	b10b      	cbz	r3, 27ca <init+0x4e>
		api->irq_rx_enable(dev);
    27c6:	4620      	mov	r0, r4
    27c8:	4798      	blx	r3
}
    27ca:	2000      	movs	r0, #0
    27cc:	bd70      	pop	{r4, r5, r6, pc}
    27ce:	bf00      	nop
    27d0:	000027d5 	.word	0x000027d5

000027d4 <uart_callback>:
{
    27d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27d8:	4604      	mov	r4, r0
    27da:	b088      	sub	sp, #32
    27dc:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    27de:	6883      	ldr	r3, [r0, #8]
    27e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27e2:	b103      	cbz	r3, 27e6 <uart_callback+0x12>
	return api->irq_update(dev);
    27e4:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    27e6:	68a3      	ldr	r3, [r4, #8]
    27e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    27ea:	bb4b      	cbnz	r3, 2840 <uart_callback+0x6c>
			LOG_WRN("RX ring buffer full.");
    27ec:	f8df 911c 	ldr.w	r9, [pc, #284]	; 290c <uart_callback+0x138>
    27f0:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2910 <uart_callback+0x13c>
{
    27f4:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    27f8:	68f0      	ldr	r0, [r6, #12]
    27fa:	4669      	mov	r1, sp
    27fc:	6902      	ldr	r2, [r0, #16]
    27fe:	f009 fcc9 	bl	c194 <ring_buf_put_claim>
		if (len > 0) {
    2802:	4607      	mov	r7, r0
    2804:	2800      	cmp	r0, #0
    2806:	d043      	beq.n	2890 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
    2808:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    280a:	9900      	ldr	r1, [sp, #0]
    280c:	699b      	ldr	r3, [r3, #24]
    280e:	2b00      	cmp	r3, #0
    2810:	d03b      	beq.n	288a <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
    2812:	4602      	mov	r2, r0
    2814:	4620      	mov	r0, r4
    2816:	4798      	blx	r3
				new_data = true;
    2818:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    281a:	4629      	mov	r1, r5
    281c:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    281e:	bf18      	it	ne
    2820:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    2824:	f009 fce3 	bl	c1ee <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    2828:	b10d      	cbz	r5, 282e <uart_callback+0x5a>
    282a:	42af      	cmp	r7, r5
    282c:	d0e4      	beq.n	27f8 <uart_callback+0x24>
	if (new_data) {
    282e:	f1b8 0f00 	cmp.w	r8, #0
    2832:	d009      	beq.n	2848 <uart_callback+0x74>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    2834:	6833      	ldr	r3, [r6, #0]
    2836:	2000      	movs	r0, #0
    2838:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    283c:	4790      	blx	r2
}
    283e:	e003      	b.n	2848 <uart_callback+0x74>
	return api->irq_rx_ready(dev);
    2840:	4620      	mov	r0, r4
    2842:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    2844:	2800      	cmp	r0, #0
    2846:	d1d1      	bne.n	27ec <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    2848:	68a3      	ldr	r3, [r4, #8]
    284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    284c:	2b00      	cmp	r3, #0
    284e:	d13c      	bne.n	28ca <uart_callback+0xf6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    2850:	68b0      	ldr	r0, [r6, #8]
    2852:	a901      	add	r1, sp, #4
    2854:	6902      	ldr	r2, [r0, #16]
    2856:	f009 fd05 	bl	c264 <ring_buf_get_claim>
	if (len) {
    285a:	4605      	mov	r5, r0
    285c:	2800      	cmp	r0, #0
    285e:	d04f      	beq.n	2900 <uart_callback+0x12c>
	if (api->line_ctrl_get == NULL) {
    2860:	68a3      	ldr	r3, [r4, #8]
    2862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2864:	2b00      	cmp	r3, #0
    2866:	d037      	beq.n	28d8 <uart_callback+0x104>
	return api->line_ctrl_get(dev, ctrl, val);
    2868:	aa02      	add	r2, sp, #8
    286a:	2104      	movs	r1, #4
    286c:	4620      	mov	r0, r4
    286e:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    2870:	f110 0f58 	cmn.w	r0, #88	; 0x58
    2874:	d030      	beq.n	28d8 <uart_callback+0x104>
    2876:	3086      	adds	r0, #134	; 0x86
    2878:	d02e      	beq.n	28d8 <uart_callback+0x104>
			if (dtr) {
    287a:	9b02      	ldr	r3, [sp, #8]
    287c:	bb63      	cbnz	r3, 28d8 <uart_callback+0x104>
	return z_impl_k_sleep(timeout);
    287e:	2100      	movs	r1, #0
    2880:	f640 40cd 	movw	r0, #3277	; 0xccd
    2884:	f008 fd58 	bl	b338 <z_impl_k_sleep>
		while (true) {
    2888:	e7ea      	b.n	2860 <uart_callback+0x8c>
		return -ENOSYS;
    288a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    288e:	e7c3      	b.n	2818 <uart_callback+0x44>
			LOG_WRN("RX ring buffer full.");
    2890:	f8d9 3000 	ldr.w	r3, [r9]
    2894:	f013 0f06 	tst.w	r3, #6
    2898:	d00b      	beq.n	28b2 <uart_callback+0xde>
    289a:	2302      	movs	r3, #2
    289c:	f8cd a018 	str.w	sl, [sp, #24]
    28a0:	9301      	str	r3, [sp, #4]
    28a2:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    28a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    28a8:	4603      	mov	r3, r0
    28aa:	aa05      	add	r2, sp, #20
    28ac:	4648      	mov	r0, r9
    28ae:	f00a f8d4 	bl	ca5a <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    28b2:	68a3      	ldr	r3, [r4, #8]
    28b4:	699b      	ldr	r3, [r3, #24]
    28b6:	b12b      	cbz	r3, 28c4 <uart_callback+0xf0>
	return api->fifo_read(dev, rx_data, size);
    28b8:	2201      	movs	r2, #1
    28ba:	a902      	add	r1, sp, #8
    28bc:	4620      	mov	r0, r4
    28be:	4798      	blx	r3
    28c0:	4605      	mov	r5, r0
    28c2:	e7b1      	b.n	2828 <uart_callback+0x54>
		return -ENOSYS;
    28c4:	f06f 0557 	mvn.w	r5, #87	; 0x57
    28c8:	e7ae      	b.n	2828 <uart_callback+0x54>
	return api->irq_tx_ready(dev);
    28ca:	4620      	mov	r0, r4
    28cc:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    28ce:	2800      	cmp	r0, #0
    28d0:	d1be      	bne.n	2850 <uart_callback+0x7c>
}
    28d2:	b008      	add	sp, #32
    28d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (api->fifo_fill == NULL) {
    28d8:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    28da:	9901      	ldr	r1, [sp, #4]
    28dc:	695b      	ldr	r3, [r3, #20]
    28de:	b163      	cbz	r3, 28fa <uart_callback+0x126>
	return api->fifo_fill(dev, tx_data, size);
    28e0:	462a      	mov	r2, r5
    28e2:	4620      	mov	r0, r4
    28e4:	4798      	blx	r3
    28e6:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    28e8:	68b0      	ldr	r0, [r6, #8]
    28ea:	f009 fce6 	bl	c2ba <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    28ee:	6833      	ldr	r3, [r6, #0]
    28f0:	2001      	movs	r0, #1
    28f2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    28f6:	4790      	blx	r2
}
    28f8:	e7eb      	b.n	28d2 <uart_callback+0xfe>
		return -ENOSYS;
    28fa:	f06f 0157 	mvn.w	r1, #87	; 0x57
    28fe:	e7f3      	b.n	28e8 <uart_callback+0x114>
		uart_irq_tx_disable(dev);
    2900:	4620      	mov	r0, r4
    2902:	f00a f938 	bl	cb76 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    2906:	6833      	ldr	r3, [r6, #0]
    2908:	60dd      	str	r5, [r3, #12]
    290a:	e7f0      	b.n	28ee <uart_callback+0x11a>
    290c:	20000274 	.word	0x20000274
    2910:	00010b61 	.word	0x00010b61

00002914 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    2914:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    2916:	6881      	ldr	r1, [r0, #8]
{
    2918:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    291a:	3108      	adds	r1, #8
    291c:	f001 f852 	bl	39c4 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    2920:	68a1      	ldr	r1, [r4, #8]
    2922:	4a03      	ldr	r2, [pc, #12]	; (2930 <shell_internal_help_print+0x1c>)
    2924:	4620      	mov	r0, r4
    2926:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    2928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    292c:	f000 bff2 	b.w	3914 <z_shell_help_subcmd_print>
    2930:	00010ba6 	.word	0x00010ba6

00002934 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    2934:	4901      	ldr	r1, [pc, #4]	; (293c <z_cursor_next_line_move.isra.0+0x8>)
    2936:	f00a b9b4 	b.w	cca2 <z_shell_raw_fprintf>
    293a:	bf00      	nop
    293c:	0001082a 	.word	0x0001082a

00002940 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    2940:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2942:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    2944:	6880      	ldr	r0, [r0, #8]
    2946:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    294a:	075a      	lsls	r2, r3, #29
{
    294c:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    294e:	d505      	bpl.n	295c <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    2950:	2100      	movs	r1, #0
    2952:	f00a f9e7 	bl	cd24 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    2956:	68e0      	ldr	r0, [r4, #12]
    2958:	f00b f8b0 	bl	dabc <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    295c:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    295e:	68db      	ldr	r3, [r3, #12]
    2960:	b96b      	cbnz	r3, 297e <history_handle+0x3e>
		if (up) {
    2962:	2d00      	cmp	r5, #0
    2964:	d037      	beq.n	29d6 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    2966:	68a0      	ldr	r0, [r4, #8]
    2968:	3042      	adds	r0, #66	; 0x42
    296a:	f00a f994 	bl	cc96 <z_shell_strlen>

			if (cmd_len) {
    296e:	68a3      	ldr	r3, [r4, #8]
    2970:	b398      	cbz	r0, 29da <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    2972:	f103 0142 	add.w	r1, r3, #66	; 0x42
    2976:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    297a:	f00b fbb9 	bl	e0f0 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    297e:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    2980:	68e0      	ldr	r0, [r4, #12]
    2982:	f10d 0306 	add.w	r3, sp, #6
    2986:	3242      	adds	r2, #66	; 0x42
    2988:	4629      	mov	r1, r5
    298a:	f00b f89a 	bl	dac2 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    298e:	b958      	cbnz	r0, 29a8 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    2990:	68a0      	ldr	r0, [r4, #8]
    2992:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    2996:	3042      	adds	r0, #66	; 0x42
    2998:	f00b fbaa 	bl	e0f0 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    299c:	68a0      	ldr	r0, [r4, #8]
    299e:	3042      	adds	r0, #66	; 0x42
    29a0:	f00a f979 	bl	cc96 <z_shell_strlen>
    29a4:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    29a8:	4620      	mov	r0, r4
    29aa:	f00a fd15 	bl	d3d8 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    29ae:	68a3      	ldr	r3, [r4, #8]
    29b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    29b4:	069b      	lsls	r3, r3, #26
    29b6:	d503      	bpl.n	29c0 <history_handle+0x80>
    29b8:	4909      	ldr	r1, [pc, #36]	; (29e0 <history_handle+0xa0>)
    29ba:	6960      	ldr	r0, [r4, #20]
    29bc:	f00a f971 	bl	cca2 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    29c0:	4620      	mov	r0, r4
    29c2:	f000 fe77 	bl	36b4 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    29c6:	68a3      	ldr	r3, [r4, #8]
    29c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    29cc:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    29ce:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    29d0:	4620      	mov	r0, r4
    29d2:	f00a fc6e 	bl	d2b2 <z_shell_op_cond_next_line>
}
    29d6:	b003      	add	sp, #12
    29d8:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    29da:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    29de:	e7ce      	b.n	297e <history_handle+0x3e>
    29e0:	0000f950 	.word	0x0000f950

000029e4 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    29e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    29e8:	2300      	movs	r3, #0
{
    29ea:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    29ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    29f0:	6883      	ldr	r3, [r0, #8]
{
    29f2:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    29f4:	3342      	adds	r3, #66	; 0x42
    29f6:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    29f8:	f00a fcf4 	bl	d3e4 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    29fc:	4620      	mov	r0, r4
    29fe:	f00a fc44 	bl	d28a <z_shell_cursor_in_empty_line>
    2a02:	b910      	cbnz	r0, 2a0a <execute+0x26>
		z_cursor_next_line_move(shell);
    2a04:	6960      	ldr	r0, [r4, #20]
    2a06:	f7ff ff95 	bl	2934 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    2a0a:	68a0      	ldr	r0, [r4, #8]
    2a0c:	2214      	movs	r2, #20
    2a0e:	2100      	movs	r1, #0
    2a10:	3008      	adds	r0, #8
    2a12:	f00b fbf8 	bl	e206 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    2a16:	4620      	mov	r0, r4
    2a18:	f00a fbe4 	bl	d1e4 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    2a1c:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    2a1e:	68e0      	ldr	r0, [r4, #12]
    2a20:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    2a22:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    2a24:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    2a26:	f00b f883 	bl	db30 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    2a2a:	4620      	mov	r0, r4
    2a2c:	f00b f906 	bl	dc3c <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    2a30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    2a34:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    2a36:	46b2      	mov	sl, r6
    2a38:	af11      	add	r7, sp, #68	; 0x44
    2a3a:	9602      	str	r6, [sp, #8]
    2a3c:	4635      	mov	r5, r6
    2a3e:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    2a40:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2a44:	2a01      	cmp	r2, #1
    2a46:	f000 80d6 	beq.w	2bf6 <execute+0x212>
    2a4a:	2b0b      	cmp	r3, #11
    2a4c:	f240 80ae 	bls.w	2bac <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2a50:	9b06      	ldr	r3, [sp, #24]
    2a52:	2b02      	cmp	r3, #2
    2a54:	f040 80ae 	bne.w	2bb4 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    2a58:	4b89      	ldr	r3, [pc, #548]	; (2c80 <execute+0x29c>)
    2a5a:	4a8a      	ldr	r2, [pc, #552]	; (2c84 <execute+0x2a0>)
    2a5c:	2101      	movs	r1, #1
    2a5e:	e014      	b.n	2a8a <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2a60:	9a03      	ldr	r2, [sp, #12]
    2a62:	2302      	movs	r3, #2
    2a64:	4639      	mov	r1, r7
    2a66:	a806      	add	r0, sp, #24
    2a68:	f00a fa50 	bl	cf0c <z_shell_make_argv>
		if (argc == 0) {
    2a6c:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    2a6e:	687a      	ldr	r2, [r7, #4]
    2a70:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2a72:	4603      	mov	r3, r0
		if (argc == 0) {
    2a74:	b929      	cbnz	r1, 2a82 <execute+0x9e>
			return -ENOEXEC;
    2a76:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    2a7a:	4628      	mov	r0, r5
    2a7c:	b01f      	add	sp, #124	; 0x7c
    2a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    2a82:	2901      	cmp	r1, #1
    2a84:	d105      	bne.n	2a92 <execute+0xae>
    2a86:	b120      	cbz	r0, 2a92 <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    2a88:	4a7f      	ldr	r2, [pc, #508]	; (2c88 <execute+0x2a4>)
    2a8a:	4620      	mov	r0, r4
    2a8c:	f00a fd56 	bl	d53c <z_shell_fprintf>
    2a90:	e7f1      	b.n	2a76 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2a92:	9b05      	ldr	r3, [sp, #20]
    2a94:	b34b      	cbz	r3, 2aea <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    2a96:	6838      	ldr	r0, [r7, #0]
    2a98:	f000 ffb8 	bl	3a0c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2a9c:	b198      	cbz	r0, 2ac6 <execute+0xe2>
			if (help_entry.help) {
    2a9e:	b166      	cbz	r6, 2aba <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    2aa0:	68a5      	ldr	r5, [r4, #8]
    2aa2:	960d      	str	r6, [sp, #52]	; 0x34
    2aa4:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    2aa6:	ae0c      	add	r6, sp, #48	; 0x30
    2aa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2aac:	6833      	ldr	r3, [r6, #0]
    2aae:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    2ab0:	4620      	mov	r0, r4
    2ab2:	f7ff ff2f 	bl	2914 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    2ab6:	2501      	movs	r5, #1
    2ab8:	e7df      	b.n	2a7a <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    2aba:	4a74      	ldr	r2, [pc, #464]	; (2c8c <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    2abc:	2101      	movs	r1, #1
    2abe:	4620      	mov	r0, r4
    2ac0:	f00a fd3c 	bl	d53c <z_shell_fprintf>
		return false;
    2ac4:	e7d7      	b.n	2a76 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    2ac6:	9b05      	ldr	r3, [sp, #20]
    2ac8:	b17b      	cbz	r3, 2aea <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    2aca:	683a      	ldr	r2, [r7, #0]
    2acc:	4629      	mov	r1, r5
    2ace:	4620      	mov	r0, r4
    2ad0:	f001 f900 	bl	3cd4 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    2ad4:	2802      	cmp	r0, #2
    2ad6:	f000 808e 	beq.w	2bf6 <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    2ada:	2803      	cmp	r0, #3
    2adc:	d005      	beq.n	2aea <execute+0x106>
				++cmd_lvl;
    2ade:	9b05      	ldr	r3, [sp, #20]
    2ae0:	3301      	adds	r3, #1
    2ae2:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    2ae4:	2301      	movs	r3, #1
    2ae6:	9302      	str	r3, [sp, #8]
				continue;
    2ae8:	e7aa      	b.n	2a40 <execute+0x5c>
		if (has_last_handler == false) {
    2aea:	f1ba 0f00 	cmp.w	sl, #0
    2aee:	d105      	bne.n	2afc <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    2af0:	6839      	ldr	r1, [r7, #0]
    2af2:	aa07      	add	r2, sp, #28
    2af4:	4658      	mov	r0, fp
    2af6:	f00a faf4 	bl	d0e2 <z_shell_find_cmd>
    2afa:	4605      	mov	r5, r0
		argvp++;
    2afc:	3704      	adds	r7, #4
		args_left--;
    2afe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    2b02:	2d00      	cmp	r5, #0
    2b04:	d040      	beq.n	2b88 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    2b06:	9a02      	ldr	r2, [sp, #8]
    2b08:	68eb      	ldr	r3, [r5, #12]
    2b0a:	b142      	cbz	r2, 2b1e <execute+0x13a>
    2b0c:	b313      	cbz	r3, 2b54 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    2b0e:	4620      	mov	r0, r4
    2b10:	f00a fc68 	bl	d3e4 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    2b14:	4620      	mov	r0, r4
    2b16:	f00a fbcc 	bl	d2b2 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    2b1a:	4a5d      	ldr	r2, [pc, #372]	; (2c90 <execute+0x2ac>)
    2b1c:	e7ce      	b.n	2abc <execute+0xd8>
	if (entry->handler) {
    2b1e:	b1cb      	cbz	r3, 2b54 <execute+0x170>
		*active_cmd = *entry;
    2b20:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    2b22:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    2b26:	46ae      	mov	lr, r5
    2b28:	f103 0c08 	add.w	ip, r3, #8
    2b2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2b30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2b34:	f8de 3000 	ldr.w	r3, [lr]
    2b38:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    2b3c:	68ab      	ldr	r3, [r5, #8]
    2b3e:	b94b      	cbnz	r3, 2b54 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    2b40:	7c6b      	ldrb	r3, [r5, #17]
    2b42:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    2b44:	bf01      	itttt	eq
    2b46:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    2b4a:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    2b4e:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    2b52:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    2b54:	f8d5 c004 	ldr.w	ip, [r5, #4]
    2b58:	f1bc 0f00 	cmp.w	ip, #0
    2b5c:	d008      	beq.n	2b70 <execute+0x18c>
		*help_entry = *entry;
    2b5e:	46ae      	mov	lr, r5
    2b60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2b64:	ae0c      	add	r6, sp, #48	; 0x30
    2b66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2b68:	f8de 3000 	ldr.w	r3, [lr]
    2b6c:	6033      	str	r3, [r6, #0]
    2b6e:	4666      	mov	r6, ip
    2b70:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    2b72:	f1b8 0f00 	cmp.w	r8, #0
    2b76:	d103      	bne.n	2b80 <execute+0x19c>
    2b78:	9b06      	ldr	r3, [sp, #24]
    2b7a:	2b02      	cmp	r3, #2
    2b7c:	f47f af60 	bne.w	2a40 <execute+0x5c>
			cmd_lvl++;
    2b80:	9b05      	ldr	r3, [sp, #20]
    2b82:	3301      	adds	r3, #1
    2b84:	9305      	str	r3, [sp, #20]
    2b86:	e75b      	b.n	2a40 <execute+0x5c>
			if (cmd_lvl == 0 &&
    2b88:	9b05      	ldr	r3, [sp, #20]
    2b8a:	b963      	cbnz	r3, 2ba6 <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    2b8c:	68a3      	ldr	r3, [r4, #8]
    2b8e:	69db      	ldr	r3, [r3, #28]
    2b90:	b10b      	cbz	r3, 2b96 <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    2b92:	68db      	ldr	r3, [r3, #12]
    2b94:	b93b      	cbnz	r3, 2ba6 <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    2b96:	4b3f      	ldr	r3, [pc, #252]	; (2c94 <execute+0x2b0>)
    2b98:	9300      	str	r3, [sp, #0]
    2b9a:	4a3f      	ldr	r2, [pc, #252]	; (2c98 <execute+0x2b4>)
    2b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2b9e:	2101      	movs	r1, #1
    2ba0:	4620      	mov	r0, r4
    2ba2:	f00a fccb 	bl	d53c <z_shell_fprintf>
			has_last_handler = true;
    2ba6:	f04f 0a01 	mov.w	sl, #1
    2baa:	e7e2      	b.n	2b72 <execute+0x18e>
		&& args_left > 0) {
    2bac:	f1b8 0f00 	cmp.w	r8, #0
    2bb0:	f47f af56 	bne.w	2a60 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    2bb4:	9b02      	ldr	r3, [sp, #8]
    2bb6:	b14b      	cbz	r3, 2bcc <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    2bb8:	4620      	mov	r0, r4
    2bba:	f00b f860 	bl	dc7e <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    2bbe:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    2bc0:	230c      	movs	r3, #12
    2bc2:	3242      	adds	r2, #66	; 0x42
    2bc4:	a911      	add	r1, sp, #68	; 0x44
    2bc6:	a805      	add	r0, sp, #20
    2bc8:	f00a f9a0 	bl	cf0c <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    2bcc:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    2bce:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    2bd0:	ab1e      	add	r3, sp, #120	; 0x78
    2bd2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2bd6:	2200      	movs	r2, #0
    2bd8:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    2bdc:	6943      	ldr	r3, [r0, #20]
    2bde:	b973      	cbnz	r3, 2bfe <execute+0x21a>
			if (help_entry->help == NULL) {
    2be0:	2e00      	cmp	r6, #0
    2be2:	f43f af48 	beq.w	2a76 <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    2be6:	68c3      	ldr	r3, [r0, #12]
    2be8:	42b3      	cmp	r3, r6
    2bea:	f43f af61 	beq.w	2ab0 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    2bee:	960d      	str	r6, [sp, #52]	; 0x34
    2bf0:	f100 0508 	add.w	r5, r0, #8
    2bf4:	e757      	b.n	2aa6 <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2bf6:	9b05      	ldr	r3, [sp, #20]
    2bf8:	2b0b      	cmp	r3, #11
    2bfa:	d9db      	bls.n	2bb4 <execute+0x1d0>
    2bfc:	e728      	b.n	2a50 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    2bfe:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    2c00:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    2c04:	b1b3      	cbz	r3, 2c34 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    2c06:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    2c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2c0c:	29ff      	cmp	r1, #255	; 0xff
    2c0e:	bf18      	it	ne
    2c10:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    2c12:	429d      	cmp	r5, r3
    2c14:	d302      	bcc.n	2c1c <execute+0x238>
    2c16:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    2c18:	429d      	cmp	r5, r3
    2c1a:	d90b      	bls.n	2c34 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    2c1c:	6883      	ldr	r3, [r0, #8]
    2c1e:	4a1f      	ldr	r2, [pc, #124]	; (2c9c <execute+0x2b8>)
    2c20:	2101      	movs	r1, #1
    2c22:	4620      	mov	r0, r4
    2c24:	f00a fc8a 	bl	d53c <z_shell_fprintf>
			shell_internal_help_print(shell);
    2c28:	4620      	mov	r0, r4
    2c2a:	f7ff fe73 	bl	2914 <shell_internal_help_print>
		return -EINVAL;
    2c2e:	f06f 0515 	mvn.w	r5, #21
    2c32:	e722      	b.n	2a7a <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    2c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2c38:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2c3c:	f009 fff7 	bl	cc2e <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    2c40:	68a0      	ldr	r0, [r4, #8]
    2c42:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2c46:	f00a f886 	bl	cd56 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    2c4a:	68a3      	ldr	r3, [r4, #8]
    2c4c:	aa11      	add	r2, sp, #68	; 0x44
    2c4e:	4629      	mov	r1, r5
    2c50:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    2c54:	695b      	ldr	r3, [r3, #20]
    2c56:	4620      	mov	r0, r4
    2c58:	4798      	blx	r3
    2c5a:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2c5c:	68a0      	ldr	r0, [r4, #8]
    2c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c66:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2c6a:	f00a f827 	bl	ccbc <k_mutex_lock.constprop.0.isra.0>
    2c6e:	68a0      	ldr	r0, [r4, #8]
    2c70:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    2c74:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2c78:	f009 ffe8 	bl	cc4c <atomic_and>
	return ret;
    2c7c:	e6fd      	b.n	2a7a <execute+0x96>
    2c7e:	bf00      	nop
    2c80:	00010c29 	.word	0x00010c29
    2c84:	00010955 	.word	0x00010955
    2c88:	00010bb4 	.word	0x00010bb4
    2c8c:	00010bc8 	.word	0x00010bc8
    2c90:	00010be6 	.word	0x00010be6
    2c94:	00010c15 	.word	0x00010c15
    2c98:	00010ed8 	.word	0x00010ed8
    2c9c:	00010c4d 	.word	0x00010c4d

00002ca0 <state_set.constprop.0>:
	shell->ctx->state = state;
    2ca0:	6883      	ldr	r3, [r0, #8]
    2ca2:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    2ca4:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    2ca6:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    2caa:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2cac:	b9ba      	cbnz	r2, 2cde <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    2cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    2cb4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    2cb8:	04db      	lsls	r3, r3, #19
    2cba:	d50b      	bpl.n	2cd4 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    2cbc:	2103      	movs	r1, #3
    2cbe:	4b08      	ldr	r3, [pc, #32]	; (2ce0 <state_set.constprop.0+0x40>)
    2cc0:	4a08      	ldr	r2, [pc, #32]	; (2ce4 <state_set.constprop.0+0x44>)
    2cc2:	f00a fc3b 	bl	d53c <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    2cc6:	68a0      	ldr	r0, [r4, #8]
    2cc8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    2ccc:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2cd0:	f009 ffbc 	bl	cc4c <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    2cd4:	4620      	mov	r0, r4
}
    2cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    2cda:	f000 bdfd 	b.w	38d8 <z_shell_print_prompt_and_cmd>
}
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	00010c68 	.word	0x00010c68
    2ce4:	00010949 	.word	0x00010949

00002ce8 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    2ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cec:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    2cee:	6880      	ldr	r0, [r0, #8]
    2cf0:	b0ab      	sub	sp, #172	; 0xac
    2cf2:	2101      	movs	r1, #1
    2cf4:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2cf8:	f009 ff99 	bl	cc2e <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    2cfc:	68a3      	ldr	r3, [r4, #8]
    2cfe:	791b      	ldrb	r3, [r3, #4]
    2d00:	2b02      	cmp	r3, #2
    2d02:	d117      	bne.n	2d34 <shell_process+0x4c>
	size_t count = 0;
    2d04:	2300      	movs	r3, #0
    2d06:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d08:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    2d0a:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d0c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    2d0e:	6803      	ldr	r3, [r0, #0]
    2d10:	691d      	ldr	r5, [r3, #16]
    2d12:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    2d14:	b1c6      	cbz	r6, 2d48 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    2d16:	2210      	movs	r2, #16
    2d18:	a91d      	add	r1, sp, #116	; 0x74
    2d1a:	47a8      	blx	r5
			if (count) {
    2d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2d1e:	b14a      	cbz	r2, 2d34 <shell_process+0x4c>
				bypass(shell, buf, count);
    2d20:	a91d      	add	r1, sp, #116	; 0x74
    2d22:	4620      	mov	r0, r4
    2d24:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    2d26:	68a3      	ldr	r3, [r4, #8]
    2d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d1ec      	bne.n	2d08 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    2d2e:	4620      	mov	r0, r4
    2d30:	f7ff ffb6 	bl	2ca0 <state_set.constprop.0>
    2d34:	68a0      	ldr	r0, [r4, #8]
    2d36:	f06f 0101 	mvn.w	r1, #1
    2d3a:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    2d3e:	b02b      	add	sp, #172	; 0xac
    2d40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d44:	f009 bf82 	b.w	cc4c <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    2d48:	2201      	movs	r2, #1
    2d4a:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    2d4e:	47a8      	blx	r5
		if (count == 0) {
    2d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2d52:	2b00      	cmp	r3, #0
    2d54:	d0ee      	beq.n	2d34 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2d56:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    2d5a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    2d5e:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2d60:	2a00      	cmp	r2, #0
    2d62:	dbd1      	blt.n	2d08 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    2d64:	7942      	ldrb	r2, [r0, #5]
    2d66:	2a03      	cmp	r2, #3
    2d68:	f200 82fd 	bhi.w	3366 <shell_process+0x67e>
    2d6c:	e8df f012 	tbh	[pc, r2, lsl #1]
    2d70:	02750004 	.word	0x02750004
    2d74:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    2d78:	2b0d      	cmp	r3, #13
    2d7a:	d01a      	beq.n	2db2 <shell_process+0xca>
    2d7c:	2b0a      	cmp	r3, #10
    2d7e:	d018      	beq.n	2db2 <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    2d80:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    2d84:	f36f 02ca 	bfc	r2, #3, #8
    2d88:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    2d8c:	2b09      	cmp	r3, #9
    2d8e:	d04c      	beq.n	2e2a <shell_process+0x142>
    2d90:	d832      	bhi.n	2df8 <shell_process+0x110>
    2d92:	2b00      	cmp	r3, #0
    2d94:	d0b8      	beq.n	2d08 <shell_process+0x20>
    2d96:	2b08      	cmp	r3, #8
    2d98:	f000 81c4 	beq.w	3124 <shell_process+0x43c>
    2d9c:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    2da0:	2a5e      	cmp	r2, #94	; 0x5e
    2da2:	f200 81cb 	bhi.w	313c <shell_process+0x454>
					z_flag_history_exit_set(shell, true);
    2da6:	2101      	movs	r1, #1
    2da8:	f009 ffbc 	bl	cd24 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    2dac:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    2db0:	e0e8      	b.n	2f84 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    2db2:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    2db6:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    2dba:	b12a      	cbz	r2, 2dc8 <shell_process+0xe0>
    2dbc:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    2dc0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    2dc4:	4293      	cmp	r3, r2
    2dc6:	d1e1      	bne.n	2d8c <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    2dc8:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    2dcc:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    2dce:	f363 02ca 	bfi	r2, r3, #3, #8
    2dd2:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    2dd6:	b959      	cbnz	r1, 2df0 <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    2dd8:	f009 ffa4 	bl	cd24 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    2ddc:	68e0      	ldr	r0, [r4, #12]
    2dde:	f00a fe6d 	bl	dabc <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    2de2:	6960      	ldr	r0, [r4, #20]
    2de4:	f7ff fda6 	bl	2934 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    2de8:	4620      	mov	r0, r4
    2dea:	f7ff ff59 	bl	2ca0 <state_set.constprop.0>
		break;
    2dee:	e78b      	b.n	2d08 <shell_process+0x20>
					(void)execute(shell);
    2df0:	4620      	mov	r0, r4
    2df2:	f7ff fdf7 	bl	29e4 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    2df6:	e7f7      	b.n	2de8 <shell_process+0x100>
    2df8:	2b1b      	cmp	r3, #27
    2dfa:	d013      	beq.n	2e24 <shell_process+0x13c>
    2dfc:	2b7f      	cmp	r3, #127	; 0x7f
    2dfe:	d1cd      	bne.n	2d9c <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    2e00:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    2e04:	079a      	lsls	r2, r3, #30
    2e06:	f57f af7f 	bpl.w	2d08 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e0a:	2101      	movs	r1, #1
    2e0c:	f009 ff8a 	bl	cd24 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    2e10:	68a3      	ldr	r3, [r4, #8]
    2e12:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    2e16:	071b      	lsls	r3, r3, #28
    2e18:	f100 818c 	bmi.w	3134 <shell_process+0x44c>
		z_shell_op_char_delete(shell);
    2e1c:	4620      	mov	r0, r4
    2e1e:	f00a fbcd 	bl	d5bc <z_shell_op_char_delete>
		break;
    2e22:	e771      	b.n	2d08 <shell_process+0x20>
	shell->ctx->receive_state = state;
    2e24:	2301      	movs	r3, #1
    2e26:	7143      	strb	r3, [r0, #5]
}
    2e28:	e76e      	b.n	2d08 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    2e2a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    2e2e:	079e      	lsls	r6, r3, #30
    2e30:	f57f af6a 	bpl.w	2d08 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e34:	2101      	movs	r1, #1
    2e36:	f009 ff75 	bl	cd24 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    2e3a:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    2e3c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    2e3e:	2bff      	cmp	r3, #255	; 0xff
    2e40:	f43f af62 	beq.w	2d08 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    2e44:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2e46:	f100 0142 	add.w	r1, r0, #66	; 0x42
    2e4a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    2e4e:	f00b f9cf 	bl	e1f0 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2e52:	68a2      	ldr	r2, [r4, #8]
    2e54:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    2e56:	4413      	add	r3, r2
    2e58:	2500      	movs	r5, #0
    2e5a:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2e5e:	a91d      	add	r1, sp, #116	; 0x74
    2e60:	230c      	movs	r3, #12
    2e62:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    2e66:	a80d      	add	r0, sp, #52	; 0x34
    2e68:	f00a f850 	bl	cf0c <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    2e6c:	990d      	ldr	r1, [sp, #52]	; 0x34
    2e6e:	290c      	cmp	r1, #12
    2e70:	f63f af4a 	bhi.w	2d08 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    2e74:	ab2a      	add	r3, sp, #168	; 0xa8
    2e76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2e7a:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    2e7e:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    2e80:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    2e82:	4413      	add	r3, r2
    2e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    2e88:	2b20      	cmp	r3, #32
    2e8a:	f000 826e 	beq.w	336a <shell_process+0x682>
    2e8e:	3b09      	subs	r3, #9
    2e90:	2b04      	cmp	r3, #4
    2e92:	f240 826a 	bls.w	336a <shell_process+0x682>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    2e96:	2901      	cmp	r1, #1
    2e98:	d84f      	bhi.n	2f3a <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    2e9a:	2500      	movs	r5, #0
    2e9c:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ea0:	aa2a      	add	r2, sp, #168	; 0xa8
    2ea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    2ea6:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2ea8:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2eac:	4650      	mov	r0, sl
    2eae:	f009 fef2 	bl	cc96 <z_shell_strlen>
	size_t first = 0;
    2eb2:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2eb4:	4681      	mov	r9, r0
	*longest = 0U;
    2eb6:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    2eb8:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    2eba:	aa18      	add	r2, sp, #96	; 0x60
    2ebc:	4639      	mov	r1, r7
    2ebe:	4628      	mov	r0, r5
    2ec0:	f000 fb94 	bl	35ec <z_shell_cmd_get>
    2ec4:	4683      	mov	fp, r0
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d144      	bne.n	2f54 <shell_process+0x26c>
	if (cnt == 1) {
    2eca:	2e01      	cmp	r6, #1
    2ecc:	d163      	bne.n	2f96 <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    2ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ed0:	aa2a      	add	r2, sp, #168	; 0xa8
    2ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    2ed6:	f853 0c34 	ldr.w	r0, [r3, #-52]
    2eda:	f009 fedc 	bl	cc96 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2ede:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    2ee0:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2ee2:	3208      	adds	r2, #8
    2ee4:	4641      	mov	r1, r8
    2ee6:	4628      	mov	r0, r5
    2ee8:	f000 fb80 	bl	35ec <z_shell_cmd_get>
    2eec:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    2eee:	6800      	ldr	r0, [r0, #0]
    2ef0:	f009 fed1 	bl	cc96 <z_shell_strlen>
	if (cmd_len != arg_len) {
    2ef4:	4286      	cmp	r6, r0
    2ef6:	d006      	beq.n	2f06 <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    2ef8:	6829      	ldr	r1, [r5, #0]
    2efa:	1b82      	subs	r2, r0, r6
    2efc:	b292      	uxth	r2, r2
    2efe:	4431      	add	r1, r6
    2f00:	4620      	mov	r0, r4
    2f02:	f00a fb59 	bl	d5b8 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    2f06:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    2f08:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    2f0a:	4403      	add	r3, r0
    2f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    2f10:	2b20      	cmp	r3, #32
    2f12:	d03b      	beq.n	2f8c <shell_process+0x2a4>
    2f14:	3b09      	subs	r3, #9
    2f16:	2b04      	cmp	r3, #4
    2f18:	d938      	bls.n	2f8c <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    2f1a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    2f1e:	07dd      	lsls	r5, r3, #31
    2f20:	d52f      	bpl.n	2f82 <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    2f22:	2100      	movs	r1, #0
    2f24:	f009 ff08 	bl	cd38 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    2f28:	2120      	movs	r1, #32
    2f2a:	4620      	mov	r0, r4
    2f2c:	f000 fca0 	bl	3870 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    2f30:	68a0      	ldr	r0, [r4, #8]
    2f32:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    2f34:	f009 ff00 	bl	cd38 <z_flag_insert_mode_set.isra.0>
				break;
    2f38:	e6e6      	b.n	2d08 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    2f3a:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    2f3c:	2000      	movs	r0, #0
    2f3e:	ab0e      	add	r3, sp, #56	; 0x38
    2f40:	9300      	str	r3, [sp, #0]
    2f42:	9001      	str	r0, [sp, #4]
    2f44:	ab0c      	add	r3, sp, #48	; 0x30
    2f46:	aa1d      	add	r2, sp, #116	; 0x74
    2f48:	f00a f8eb 	bl	d122 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    2f4c:	4605      	mov	r5, r0
    2f4e:	2800      	cmp	r0, #0
    2f50:	d1a5      	bne.n	2e9e <shell_process+0x1b6>
    2f52:	e6d9      	b.n	2d08 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2f54:	f8db 0000 	ldr.w	r0, [fp]
    2f58:	464a      	mov	r2, r9
    2f5a:	4651      	mov	r1, sl
    2f5c:	f00b f90e 	bl	e17c <strncmp>
		if (is_candidate) {
    2f60:	b968      	cbnz	r0, 2f7e <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2f62:	f8db 0000 	ldr.w	r0, [fp]
    2f66:	f00b f8ed 	bl	e144 <strlen>
    2f6a:	9b04      	ldr	r3, [sp, #16]
    2f6c:	4283      	cmp	r3, r0
    2f6e:	bf38      	it	cc
    2f70:	4603      	movcc	r3, r0
    2f72:	b29b      	uxth	r3, r3
				*first_idx = idx;
    2f74:	2e00      	cmp	r6, #0
    2f76:	bf08      	it	eq
    2f78:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2f7a:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    2f7c:	3601      	adds	r6, #1
		idx++;
    2f7e:	3701      	adds	r7, #1
    2f80:	e79b      	b.n	2eba <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    2f82:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    2f84:	4620      	mov	r0, r4
    2f86:	f000 fc73 	bl	3870 <z_shell_op_char_insert>
    2f8a:	e6bd      	b.n	2d08 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    2f8c:	2101      	movs	r1, #1
    2f8e:	4620      	mov	r0, r4
    2f90:	f00a f9c2 	bl	d318 <z_shell_op_cursor_move>
    2f94:	e6b8      	b.n	2d08 <shell_process+0x20>
	} else if (cnt > 1) {
    2f96:	f67f aeb7 	bls.w	2d08 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f9c:	aa2a      	add	r2, sp, #168	; 0xa8
    2f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fa2:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    2fa6:	4650      	mov	r0, sl
    2fa8:	f009 fe75 	bl	cc96 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2fac:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    2fae:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2fb0:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    2fb4:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 3288 <shell_process+0x5a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2fb8:	9605      	str	r6, [sp, #20]
    2fba:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    2fbe:	68a2      	ldr	r2, [r4, #8]
    2fc0:	9903      	ldr	r1, [sp, #12]
    2fc2:	3208      	adds	r2, #8
    2fc4:	4628      	mov	r0, r5
    2fc6:	f000 fb11 	bl	35ec <z_shell_cmd_get>
		idx++;
    2fca:	9b03      	ldr	r3, [sp, #12]
    2fcc:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    2fce:	4607      	mov	r7, r0
		idx++;
    2fd0:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    2fd2:	f1ba 0f00 	cmp.w	sl, #0
    2fd6:	d152      	bne.n	307e <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    2fd8:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    2fda:	2f00      	cmp	r7, #0
    2fdc:	d159      	bne.n	3092 <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2fde:	68a2      	ldr	r2, [r4, #8]
    2fe0:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    2fe2:	9b05      	ldr	r3, [sp, #20]
    2fe4:	3b01      	subs	r3, #1
    2fe6:	9305      	str	r3, [sp, #20]
    2fe8:	d1e9      	bne.n	2fbe <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    2fea:	6960      	ldr	r0, [r4, #20]
    2fec:	f7ff fca2 	bl	2934 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    2ff0:	4620      	mov	r0, r4
    2ff2:	f000 fc71 	bl	38d8 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    2ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ff8:	aa2a      	add	r2, sp, #168	; 0xa8
    2ffa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    2ffe:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    3002:	f853 0c34 	ldr.w	r0, [r3, #-52]
    3006:	f009 fe46 	bl	cc96 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    300a:	4641      	mov	r1, r8
    300c:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    300e:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3010:	4628      	mov	r0, r5
    3012:	f000 faeb 	bl	35ec <z_shell_cmd_get>
    3016:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    3018:	68a0      	ldr	r0, [r4, #8]
    301a:	f8d8 1000 	ldr.w	r1, [r8]
    301e:	22ff      	movs	r2, #255	; 0xff
    3020:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3024:	f00b f86e 	bl	e104 <strncpy>
	*str = match->syntax;
    3028:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    302c:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3030:	aa18      	add	r2, sp, #96	; 0x60
    3032:	4649      	mov	r1, r9
    3034:	4628      	mov	r0, r5
    3036:	f109 0b01 	add.w	fp, r9, #1
    303a:	f000 fad7 	bl	35ec <z_shell_cmd_get>
		if (match2 == NULL) {
    303e:	2800      	cmp	r0, #0
    3040:	d063      	beq.n	310a <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    3042:	68a3      	ldr	r3, [r4, #8]
    3044:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3046:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    304a:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    304c:	f813 cb01 	ldrb.w	ip, [r3], #1
    3050:	5c81      	ldrb	r1, [r0, r2]
    3052:	4561      	cmp	r1, ip
    3054:	d105      	bne.n	3062 <shell_process+0x37a>
    3056:	b121      	cbz	r1, 3062 <shell_process+0x37a>
		common++;
    3058:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    305a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    305e:	428a      	cmp	r2, r1
    3060:	d1f4      	bne.n	304c <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    3062:	b10f      	cbz	r7, 3068 <shell_process+0x380>
    3064:	42ba      	cmp	r2, r7
    3066:	db08      	blt.n	307a <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    3068:	4542      	cmp	r2, r8
			--cnt;
    306a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    306e:	bfa8      	it	ge
    3070:	4642      	movge	r2, r8
	while (cnt > 1) {
    3072:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    3074:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    3078:	d047      	beq.n	310a <shell_process+0x422>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    307a:	46d9      	mov	r9, fp
    307c:	e7d8      	b.n	3030 <shell_process+0x348>
		if (str && match->syntax &&
    307e:	6800      	ldr	r0, [r0, #0]
    3080:	2800      	cmp	r0, #0
    3082:	d0a9      	beq.n	2fd8 <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3084:	9a06      	ldr	r2, [sp, #24]
    3086:	4651      	mov	r1, sl
    3088:	f00b f878 	bl	e17c <strncmp>
		if (str && match->syntax &&
    308c:	2800      	cmp	r0, #0
    308e:	d0a3      	beq.n	2fd8 <shell_process+0x2f0>
    3090:	e795      	b.n	2fbe <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    3092:	4658      	mov	r0, fp
    3094:	f009 fdff 	bl	cc96 <z_shell_strlen>
    3098:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    309a:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    309c:	18c2      	adds	r2, r0, r3
    309e:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30a0:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    30a2:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    30a4:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30a6:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    30a8:	f009 fdf5 	bl	cc96 <z_shell_strlen>
    30ac:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    30ae:	4638      	mov	r0, r7
    30b0:	f009 fdf1 	bl	cc96 <z_shell_strlen>
    30b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    30b6:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    30ba:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    30be:	68a0      	ldr	r0, [r4, #8]
    30c0:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    30c4:	1a59      	subs	r1, r3, r1
    30c6:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    30ca:	b292      	uxth	r2, r2
    30cc:	fbbc f1f2 	udiv	r1, ip, r2
    30d0:	fb02 c211 	mls	r2, r2, r1, ip
    30d4:	f10c 0e01 	add.w	lr, ip, #1
    30d8:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    30da:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    30de:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    30e2:	b95a      	cbnz	r2, 30fc <shell_process+0x414>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    30e4:	4a69      	ldr	r2, [pc, #420]	; (328c <shell_process+0x5a4>)
    30e6:	9700      	str	r7, [sp, #0]
    30e8:	465b      	mov	r3, fp
    30ea:	2106      	movs	r1, #6
    30ec:	4620      	mov	r0, r4
    30ee:	f00a fa25 	bl	d53c <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    30f2:	4649      	mov	r1, r9
    30f4:	4620      	mov	r0, r4
    30f6:	f000 fac7 	bl	3688 <z_shell_op_cursor_horiz_move>
    30fa:	e772      	b.n	2fe2 <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    30fc:	4a64      	ldr	r2, [pc, #400]	; (3290 <shell_process+0x5a8>)
    30fe:	463b      	mov	r3, r7
    3100:	2106      	movs	r1, #6
    3102:	4620      	mov	r0, r4
    3104:	f00a fa1a 	bl	d53c <z_shell_fprintf>
    3108:	e7f3      	b.n	30f2 <shell_process+0x40a>
	if (common) {
    310a:	f1b8 0f00 	cmp.w	r8, #0
    310e:	f43f adfb 	beq.w	2d08 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    3112:	eba8 0207 	sub.w	r2, r8, r7
    3116:	b292      	uxth	r2, r2
    3118:	eb0a 0107 	add.w	r1, sl, r7
    311c:	4620      	mov	r0, r4
    311e:	f00a fa4b 	bl	d5b8 <z_shell_op_completion_insert>
    3122:	e5f1      	b.n	2d08 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    3124:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    3128:	0799      	lsls	r1, r3, #30
    312a:	f57f aded 	bpl.w	2d08 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    312e:	2101      	movs	r1, #1
    3130:	f009 fdf8 	bl	cd24 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    3134:	4620      	mov	r0, r4
    3136:	f00a fa5c 	bl	d5f2 <z_shell_op_char_backspace>
    313a:	e5e5      	b.n	2d08 <shell_process+0x20>
    313c:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    3140:	0797      	lsls	r7, r2, #30
    3142:	f57f ade1 	bpl.w	2d08 <shell_process+0x20>
	switch (data) {
    3146:	3b01      	subs	r3, #1
    3148:	2b16      	cmp	r3, #22
    314a:	f63f addd 	bhi.w	2d08 <shell_process+0x20>
    314e:	a201      	add	r2, pc, #4	; (adr r2, 3154 <shell_process+0x46c>)
    3150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3154:	0000333d 	.word	0x0000333d
    3158:	000031b1 	.word	0x000031b1
    315c:	000031b9 	.word	0x000031b9
    3160:	00002e1d 	.word	0x00002e1d
    3164:	00003331 	.word	0x00003331
    3168:	000031d7 	.word	0x000031d7
    316c:	00002d09 	.word	0x00002d09
    3170:	00002d09 	.word	0x00002d09
    3174:	00002d09 	.word	0x00002d09
    3178:	00002d09 	.word	0x00002d09
    317c:	000031df 	.word	0x000031df
    3180:	000031e7 	.word	0x000031e7
    3184:	00002d09 	.word	0x00002d09
    3188:	00003211 	.word	0x00003211
    318c:	00002d09 	.word	0x00002d09
    3190:	0000321b 	.word	0x0000321b
    3194:	00002d09 	.word	0x00002d09
    3198:	00002d09 	.word	0x00002d09
    319c:	00002d09 	.word	0x00002d09
    31a0:	00002d09 	.word	0x00002d09
    31a4:	0000321f 	.word	0x0000321f
    31a8:	00002d09 	.word	0x00002d09
    31ac:	0000324b 	.word	0x0000324b
		z_shell_op_left_arrow(shell);
    31b0:	4620      	mov	r0, r4
    31b2:	f00a f91e 	bl	d3f2 <z_shell_op_left_arrow>
		break;
    31b6:	e5a7      	b.n	2d08 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    31b8:	4620      	mov	r0, r4
    31ba:	f00a f913 	bl	d3e4 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    31be:	4620      	mov	r0, r4
    31c0:	f00a f863 	bl	d28a <z_shell_cursor_in_empty_line>
    31c4:	b910      	cbnz	r0, 31cc <shell_process+0x4e4>
			z_cursor_next_line_move(shell);
    31c6:	6960      	ldr	r0, [r4, #20]
    31c8:	f7ff fbb4 	bl	2934 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    31cc:	68a0      	ldr	r0, [r4, #8]
    31ce:	2101      	movs	r1, #1
    31d0:	f009 fda8 	bl	cd24 <z_flag_history_exit_set.isra.0>
    31d4:	e608      	b.n	2de8 <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    31d6:	4620      	mov	r0, r4
    31d8:	f00a f913 	bl	d402 <z_shell_op_right_arrow>
		break;
    31dc:	e594      	b.n	2d08 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    31de:	4620      	mov	r0, r4
    31e0:	f00a f918 	bl	d414 <z_shell_op_delete_from_cursor>
		break;
    31e4:	e590      	b.n	2d08 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    31e6:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    31ea:	069e      	lsls	r6, r3, #26
    31ec:	d503      	bpl.n	31f6 <shell_process+0x50e>
    31ee:	4929      	ldr	r1, [pc, #164]	; (3294 <shell_process+0x5ac>)
    31f0:	6960      	ldr	r0, [r4, #20]
    31f2:	f009 fd56 	bl	cca2 <z_shell_raw_fprintf>
    31f6:	68a3      	ldr	r3, [r4, #8]
    31f8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    31fc:	069d      	lsls	r5, r3, #26
    31fe:	d503      	bpl.n	3208 <shell_process+0x520>
    3200:	4925      	ldr	r1, [pc, #148]	; (3298 <shell_process+0x5b0>)
    3202:	6960      	ldr	r0, [r4, #20]
    3204:	f009 fd4d 	bl	cca2 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    3208:	4620      	mov	r0, r4
    320a:	f000 fb65 	bl	38d8 <z_shell_print_prompt_and_cmd>
		break;
    320e:	e57b      	b.n	2d08 <shell_process+0x20>
		history_handle(shell, false);
    3210:	2100      	movs	r1, #0
		history_handle(shell, true);
    3212:	4620      	mov	r0, r4
    3214:	f7ff fb94 	bl	2940 <history_handle>
		break;
    3218:	e576      	b.n	2d08 <shell_process+0x20>
		history_handle(shell, true);
    321a:	2101      	movs	r1, #1
    321c:	e7f9      	b.n	3212 <shell_process+0x52a>
		z_shell_op_cursor_home_move(shell);
    321e:	4620      	mov	r0, r4
    3220:	f00a f8da 	bl	d3d8 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    3224:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3226:	2300      	movs	r3, #0
    3228:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    322c:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    322e:	2101      	movs	r1, #1
    3230:	f009 fd78 	bl	cd24 <z_flag_history_exit_set.isra.0>
    3234:	68a3      	ldr	r3, [r4, #8]
    3236:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    323a:	0698      	lsls	r0, r3, #26
    323c:	f57f ad64 	bpl.w	2d08 <shell_process+0x20>
    3240:	4916      	ldr	r1, [pc, #88]	; (329c <shell_process+0x5b4>)
    3242:	6960      	ldr	r0, [r4, #20]
    3244:	f009 fd2d 	bl	cca2 <z_shell_raw_fprintf>
    3248:	e55e      	b.n	2d08 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    324a:	4620      	mov	r0, r4
    324c:	f000 fa78 	bl	3740 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    3250:	68a0      	ldr	r0, [r4, #8]
    3252:	2101      	movs	r1, #1
    3254:	f009 fd66 	bl	cd24 <z_flag_history_exit_set.isra.0>
		break;
    3258:	e556      	b.n	2d08 <shell_process+0x20>
			if (data == '[') {
    325a:	2b5b      	cmp	r3, #91	; 0x5b
    325c:	d101      	bne.n	3262 <shell_process+0x57a>
	shell->ctx->receive_state = state;
    325e:	2302      	movs	r3, #2
    3260:	e5e1      	b.n	2e26 <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    3262:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    3266:	0791      	lsls	r1, r2, #30
    3268:	d506      	bpl.n	3278 <shell_process+0x590>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    326a:	2b62      	cmp	r3, #98	; 0x62
    326c:	d108      	bne.n	3280 <shell_process+0x598>
		z_shell_op_cursor_word_move(shell, -1);
    326e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    3272:	4620      	mov	r0, r4
    3274:	f00a f874 	bl	d360 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    3278:	68a3      	ldr	r3, [r4, #8]
    327a:	2200      	movs	r2, #0
    327c:	715a      	strb	r2, [r3, #5]
}
    327e:	e543      	b.n	2d08 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    3280:	2b66      	cmp	r3, #102	; 0x66
    3282:	d1f9      	bne.n	3278 <shell_process+0x590>
		z_shell_op_cursor_word_move(shell, 1);
    3284:	2101      	movs	r1, #1
    3286:	e7f4      	b.n	3272 <shell_process+0x58a>
    3288:	0001030b 	.word	0x0001030b
    328c:	00010cac 	.word	0x00010cac
    3290:	00010949 	.word	0x00010949
    3294:	0000f955 	.word	0x0000f955
    3298:	0000f95a 	.word	0x0000f95a
    329c:	0000f950 	.word	0x0000f950
	shell->ctx->receive_state = state;
    32a0:	2200      	movs	r2, #0
    32a2:	7142      	strb	r2, [r0, #5]
    32a4:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    32a8:	0792      	lsls	r2, r2, #30
    32aa:	f57f ad2d 	bpl.w	2d08 <shell_process+0x20>
			switch (data) {
    32ae:	3b31      	subs	r3, #49	; 0x31
    32b0:	2b1b      	cmp	r3, #27
    32b2:	f63f ad29 	bhi.w	2d08 <shell_process+0x20>
    32b6:	a201      	add	r2, pc, #4	; (adr r2, 32bc <shell_process+0x5d4>)
    32b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    32bc:	00003339 	.word	0x00003339
    32c0:	00003345 	.word	0x00003345
    32c4:	00003357 	.word	0x00003357
    32c8:	0000332d 	.word	0x0000332d
    32cc:	00002d09 	.word	0x00002d09
    32d0:	00002d09 	.word	0x00002d09
    32d4:	00002d09 	.word	0x00002d09
    32d8:	00002d09 	.word	0x00002d09
    32dc:	00002d09 	.word	0x00002d09
    32e0:	00002d09 	.word	0x00002d09
    32e4:	00002d09 	.word	0x00002d09
    32e8:	00002d09 	.word	0x00002d09
    32ec:	00002d09 	.word	0x00002d09
    32f0:	00002d09 	.word	0x00002d09
    32f4:	00002d09 	.word	0x00002d09
    32f8:	00002d09 	.word	0x00002d09
    32fc:	0000321b 	.word	0x0000321b
    3300:	00003211 	.word	0x00003211
    3304:	000031d7 	.word	0x000031d7
    3308:	000031b1 	.word	0x000031b1
    330c:	00002d09 	.word	0x00002d09
    3310:	00003331 	.word	0x00003331
    3314:	00002d09 	.word	0x00002d09
    3318:	0000333d 	.word	0x0000333d
    331c:	00002d09 	.word	0x00002d09
    3320:	00002d09 	.word	0x00002d09
    3324:	00002d09 	.word	0x00002d09
    3328:	00003349 	.word	0x00003349
	shell->ctx->receive_state = state;
    332c:	2303      	movs	r3, #3
    332e:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    3330:	4620      	mov	r0, r4
    3332:	f00a f857 	bl	d3e4 <z_shell_op_cursor_end_move>
		break;
    3336:	e4e7      	b.n	2d08 <shell_process+0x20>
	shell->ctx->receive_state = state;
    3338:	2303      	movs	r3, #3
    333a:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    333c:	4620      	mov	r0, r4
    333e:	f00a f84b 	bl	d3d8 <z_shell_op_cursor_home_move>
		break;
    3342:	e4e1      	b.n	2d08 <shell_process+0x20>
	shell->ctx->receive_state = state;
    3344:	2303      	movs	r3, #3
    3346:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    3348:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    334c:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    3350:	f081 0101 	eor.w	r1, r1, #1
    3354:	e5ee      	b.n	2f34 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    3356:	2303      	movs	r3, #3
    3358:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    335a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    335e:	079b      	lsls	r3, r3, #30
    3360:	f57f acd2 	bpl.w	2d08 <shell_process+0x20>
    3364:	e55a      	b.n	2e1c <shell_process+0x134>
	shell->ctx->receive_state = state;
    3366:	2300      	movs	r3, #0
    3368:	e55d      	b.n	2e26 <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    336a:	2900      	cmp	r1, #0
    336c:	f43f ad95 	beq.w	2e9a <shell_process+0x1b2>
    3370:	e5e4      	b.n	2f3c <shell_process+0x254>
    3372:	bf00      	nop

00003374 <shell_init>:
{
    3374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3378:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    337a:	6880      	ldr	r0, [r0, #8]
{
    337c:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    337e:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    3382:	b089      	sub	sp, #36	; 0x24
    3384:	4615      	mov	r5, r2
    3386:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    3388:	2900      	cmp	r1, #0
    338a:	d161      	bne.n	3450 <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    338c:	f44f 7244 	mov.w	r2, #784	; 0x310
    3390:	f00a ff39 	bl	e206 <memset>
	sh->ctx->prompt = sh->default_prompt;
    3394:	68a3      	ldr	r3, [r4, #8]
    3396:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    3398:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    339a:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    339c:	f00a fc34 	bl	dc08 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    33a0:	68a0      	ldr	r0, [r4, #8]
    33a2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    33a6:	f00b fc9f 	bl	ece8 <z_impl_k_mutex_init>
    33aa:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    33ae:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    33b2:	68a0      	ldr	r0, [r4, #8]
    33b4:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    33b6:	f00c f85e 	bl	f476 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    33ba:	68a0      	ldr	r0, [r4, #8]
    33bc:	2200      	movs	r2, #0
    33be:	1983      	adds	r3, r0, r6
    33c0:	2101      	movs	r1, #1
    33c2:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    33c4:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    33c6:	f00c f839 	bl	f43c <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    33ca:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    33ce:	f109 0914 	add.w	r9, r9, #20
    33d2:	d1ee      	bne.n	33b2 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    33d4:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    33d6:	68a0      	ldr	r0, [r4, #8]
    33d8:	2600      	movs	r6, #0
    33da:	2102      	movs	r1, #2
    33dc:	601e      	str	r6, [r3, #0]
    33de:	f500 7019 	add.w	r0, r0, #612	; 0x264
    33e2:	f009 fc24 	bl	cc2e <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    33e6:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    33e8:	4a1b      	ldr	r2, [pc, #108]	; (3458 <shell_init+0xe4>)
    33ea:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    33ec:	6818      	ldr	r0, [r3, #0]
    33ee:	f009 fc52 	bl	cc96 <z_shell_strlen>
    33f2:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    33f4:	4a19      	ldr	r2, [pc, #100]	; (345c <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    33f6:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    33fa:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    33fc:	f366 0582 	bfi	r5, r6, #2, #1
    3400:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3404:	6803      	ldr	r3, [r0, #0]
    3406:	4641      	mov	r1, r8
    3408:	681d      	ldr	r5, [r3, #0]
    340a:	4623      	mov	r3, r4
    340c:	47a8      	blx	r5
	if (ret == 0) {
    340e:	4605      	mov	r5, r0
    3410:	b9d0      	cbnz	r0, 3448 <shell_init+0xd4>
	shell->ctx->state = state;
    3412:	68a3      	ldr	r3, [r4, #8]
    3414:	2201      	movs	r2, #1
    3416:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    3418:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    341c:	2200      	movs	r2, #0
    341e:	2300      	movs	r3, #0
    3420:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3424:	230e      	movs	r3, #14
    3426:	9303      	str	r3, [sp, #12]
    3428:	9b10      	ldr	r3, [sp, #64]	; 0x40
    342a:	9504      	str	r5, [sp, #16]
    342c:	e9cd 7301 	strd	r7, r3, [sp, #4]
    3430:	9400      	str	r4, [sp, #0]
    3432:	4b0b      	ldr	r3, [pc, #44]	; (3460 <shell_init+0xec>)
    3434:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3438:	f007 f8f8 	bl	a62c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    343c:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    343e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    3440:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    3444:	f007 f848 	bl	a4d8 <z_impl_k_thread_name_set>
}
    3448:	4628      	mov	r0, r5
    344a:	b009      	add	sp, #36	; 0x24
    344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    3450:	f06f 0577 	mvn.w	r5, #119	; 0x77
    3454:	e7f8      	b.n	3448 <shell_init+0xd4>
    3456:	bf00      	nop
    3458:	00500018 	.word	0x00500018
    345c:	0000ccc1 	.word	0x0000ccc1
    3460:	000034b1 	.word	0x000034b1

00003464 <shell_start>:
{
    3464:	b510      	push	{r4, lr}
    3466:	4604      	mov	r4, r0
	return shell->ctx->state;
    3468:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    346a:	7903      	ldrb	r3, [r0, #4]
    346c:	2b01      	cmp	r3, #1
    346e:	d119      	bne.n	34a4 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3478:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    347c:	f009 fc1e 	bl	ccbc <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    3480:	2108      	movs	r1, #8
    3482:	4620      	mov	r0, r4
    3484:	f000 f91e 	bl	36c4 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    3488:	4908      	ldr	r1, [pc, #32]	; (34ac <shell_start+0x48>)
    348a:	6960      	ldr	r0, [r4, #20]
    348c:	f009 fc09 	bl	cca2 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    3490:	4620      	mov	r0, r4
    3492:	f7ff fc05 	bl	2ca0 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    3496:	68a0      	ldr	r0, [r4, #8]
    3498:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    349c:	f009 fc5b 	bl	cd56 <k_mutex_unlock.isra.0>
	return 0;
    34a0:	2000      	movs	r0, #0
}
    34a2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    34a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    34a8:	e7fb      	b.n	34a2 <shell_start+0x3e>
    34aa:	bf00      	nop
    34ac:	00010829 	.word	0x00010829

000034b0 <shell_thread>:
{
    34b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34b4:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    34b6:	6840      	ldr	r0, [r0, #4]
    34b8:	6803      	ldr	r3, [r0, #0]
{
    34ba:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    34bc:	689b      	ldr	r3, [r3, #8]
    34be:	2100      	movs	r1, #0
{
    34c0:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    34c2:	4798      	blx	r3
	if (err != 0) {
    34c4:	2800      	cmp	r0, #0
    34c6:	d14c      	bne.n	3562 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    34c8:	b126      	cbz	r6, 34d4 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    34ca:	69e0      	ldr	r0, [r4, #28]
    34cc:	462a      	mov	r2, r5
    34ce:	4621      	mov	r1, r4
    34d0:	f00a f963 	bl	d79a <z_shell_log_backend_enable>
	err = shell_start(shell);
    34d4:	4620      	mov	r0, r4
    34d6:	f7ff ffc5 	bl	3464 <shell_start>
	if (err != 0) {
    34da:	2800      	cmp	r0, #0
    34dc:	d141      	bne.n	3562 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    34de:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3568 <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    34e2:	4f22      	ldr	r7, [pc, #136]	; (356c <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    34e4:	4e22      	ldr	r6, [pc, #136]	; (3570 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    34e6:	68a0      	ldr	r0, [r4, #8]
    34e8:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    34ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34f4:	2103      	movs	r1, #3
    34f6:	f008 f9a3 	bl	b840 <z_impl_k_poll>
		if (err != 0) {
    34fa:	4605      	mov	r5, r0
    34fc:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    34fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3506:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    350a:	b175      	cbz	r5, 352a <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    350c:	f009 fbd6 	bl	ccbc <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    3510:	4620      	mov	r0, r4
    3512:	462b      	mov	r3, r5
    3514:	4a17      	ldr	r2, [pc, #92]	; (3574 <shell_thread+0xc4>)
    3516:	2101      	movs	r1, #1
    3518:	f00a f810 	bl	d53c <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    351c:	68a0      	ldr	r0, [r4, #8]
}
    351e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3522:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3526:	f009 bc16 	b.w	cd56 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    352a:	f009 fbc7 	bl	ccbc <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    352e:	6860      	ldr	r0, [r4, #4]
    3530:	6803      	ldr	r3, [r0, #0]
    3532:	695b      	ldr	r3, [r3, #20]
    3534:	b103      	cbz	r3, 3538 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    3536:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3538:	4642      	mov	r2, r8
    353a:	4620      	mov	r0, r4
    353c:	2102      	movs	r1, #2
    353e:	f009 fb94 	bl	cc6a <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    3542:	463a      	mov	r2, r7
    3544:	4620      	mov	r0, r4
    3546:	2100      	movs	r1, #0
    3548:	f009 fb8f 	bl	cc6a <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    354c:	4620      	mov	r0, r4
    354e:	4632      	mov	r2, r6
    3550:	2101      	movs	r1, #1
    3552:	f009 fb8a 	bl	cc6a <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    3556:	68a0      	ldr	r0, [r4, #8]
    3558:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    355c:	f009 fbfb 	bl	cd56 <k_mutex_unlock.isra.0>
    3560:	e7c1      	b.n	34e6 <shell_thread+0x36>
}
    3562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3566:	bf00      	nop
    3568:	0000ccd5 	.word	0x0000ccd5
    356c:	00002ce9 	.word	0x00002ce9
    3570:	0000cd5b 	.word	0x0000cd5b
    3574:	00010cb2 	.word	0x00010cb2

00003578 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    3578:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    357a:	4a0d      	ldr	r2, [pc, #52]	; (35b0 <cmd_help+0x38>)
{
    357c:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    357e:	2108      	movs	r1, #8
    3580:	f009 fc4c 	bl	ce1c <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    3584:	4620      	mov	r0, r4
    3586:	4a0b      	ldr	r2, [pc, #44]	; (35b4 <cmd_help+0x3c>)
    3588:	2108      	movs	r1, #8
    358a:	f009 fc47 	bl	ce1c <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    358e:	4620      	mov	r0, r4
    3590:	4a09      	ldr	r2, [pc, #36]	; (35b8 <cmd_help+0x40>)
    3592:	2108      	movs	r1, #8
    3594:	f009 fc42 	bl	ce1c <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    3598:	4620      	mov	r0, r4
    359a:	4a08      	ldr	r2, [pc, #32]	; (35bc <cmd_help+0x44>)
    359c:	2108      	movs	r1, #8
    359e:	f009 fc3d 	bl	ce1c <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    35a2:	4620      	mov	r0, r4
    35a4:	4a06      	ldr	r2, [pc, #24]	; (35c0 <cmd_help+0x48>)
    35a6:	2100      	movs	r1, #0
    35a8:	f000 f9b4 	bl	3914 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    35ac:	2000      	movs	r0, #0
    35ae:	bd10      	pop	{r4, pc}
    35b0:	00010cc9 	.word	0x00010cc9
    35b4:	00010d07 	.word	0x00010d07
    35b8:	00010d66 	.word	0x00010d66
    35bc:	00010dba 	.word	0x00010dba
    35c0:	00010e54 	.word	0x00010e54

000035c4 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    35c4:	b510      	push	{r4, lr}
    35c6:	4604      	mov	r4, r0
    35c8:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    35ca:	460a      	mov	r2, r1
    35cc:	4601      	mov	r1, r0
    35ce:	4806      	ldr	r0, [pc, #24]	; (35e8 <z_shell_fprintf_fmt+0x24>)
    35d0:	f7fd fa90 	bl	af4 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    35d4:	6923      	ldr	r3, [r4, #16]
    35d6:	791b      	ldrb	r3, [r3, #4]
    35d8:	b123      	cbz	r3, 35e4 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    35da:	4620      	mov	r0, r4
	}
}
    35dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    35e0:	f009 bc2c 	b.w	ce3c <z_shell_fprintf_buffer_flush>
}
    35e4:	bd10      	pop	{r4, pc}
    35e6:	bf00      	nop
    35e8:	0000ce55 	.word	0x0000ce55

000035ec <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    35ec:	b510      	push	{r4, lr}
    35ee:	460b      	mov	r3, r1
    35f0:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    35f2:	b950      	cbnz	r0, 360a <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    35f4:	490e      	ldr	r1, [pc, #56]	; (3630 <z_shell_cmd_get+0x44>)
    35f6:	4a0f      	ldr	r2, [pc, #60]	; (3634 <z_shell_cmd_get+0x48>)
    35f8:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    35fa:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    35fe:	d20f      	bcs.n	3620 <z_shell_cmd_get+0x34>
    3600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    3604:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    3606:	4620      	mov	r0, r4
    3608:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    360a:	6881      	ldr	r1, [r0, #8]
    360c:	b141      	cbz	r1, 3620 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    360e:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    3610:	7809      	ldrb	r1, [r1, #0]
    3612:	b139      	cbz	r1, 3624 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    3614:	4618      	mov	r0, r3
    3616:	4621      	mov	r1, r4
    3618:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    361a:	6823      	ldr	r3, [r4, #0]
    361c:	2b00      	cmp	r3, #0
    361e:	d1f2      	bne.n	3606 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    3620:	2400      	movs	r4, #0
    3622:	e7f0      	b.n	3606 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    3624:	2014      	movs	r0, #20
    3626:	4343      	muls	r3, r0
    3628:	18d4      	adds	r4, r2, r3
    362a:	58d3      	ldr	r3, [r2, r3]
    362c:	e7f6      	b.n	361c <z_shell_cmd_get+0x30>
    362e:	bf00      	nop
    3630:	0000f8c8 	.word	0x0000f8c8
    3634:	0000f920 	.word	0x0000f920

00003638 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3638:	6883      	ldr	r3, [r0, #8]
    363a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    363e:	069b      	lsls	r3, r3, #26
    3640:	d503      	bpl.n	364a <z_clear_eos+0x12>
    3642:	4902      	ldr	r1, [pc, #8]	; (364c <z_clear_eos+0x14>)
    3644:	6940      	ldr	r0, [r0, #20]
    3646:	f009 bdff 	b.w	d248 <z_shell_raw_fprintf>
}
    364a:	4770      	bx	lr
    364c:	0000f960 	.word	0x0000f960

00003650 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3650:	4901      	ldr	r1, [pc, #4]	; (3658 <z_cursor_next_line_move.isra.0+0x8>)
    3652:	f009 bdf9 	b.w	d248 <z_shell_raw_fprintf>
    3656:	bf00      	nop
    3658:	0001082a 	.word	0x0001082a

0000365c <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    365c:	1e0a      	subs	r2, r1, #0
    365e:	dc0d      	bgt.n	367c <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    3660:	d00e      	beq.n	3680 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    3662:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3664:	6881      	ldr	r1, [r0, #8]
    3666:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    366a:	0689      	lsls	r1, r1, #26
    366c:	d508      	bpl.n	3680 <z_shell_op_cursor_vert_move+0x24>
    366e:	2a00      	cmp	r2, #0
    3670:	4904      	ldr	r1, [pc, #16]	; (3684 <z_shell_op_cursor_vert_move+0x28>)
    3672:	6940      	ldr	r0, [r0, #20]
    3674:	bfb8      	it	lt
    3676:	4252      	neglt	r2, r2
    3678:	f009 bde6 	b.w	d248 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    367c:	2341      	movs	r3, #65	; 0x41
    367e:	e7f1      	b.n	3664 <z_shell_op_cursor_vert_move+0x8>
}
    3680:	4770      	bx	lr
    3682:	bf00      	nop
    3684:	00010e83 	.word	0x00010e83

00003688 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    3688:	1e0a      	subs	r2, r1, #0
    368a:	dc0d      	bgt.n	36a8 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    368c:	d00e      	beq.n	36ac <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    368e:	2344      	movs	r3, #68	; 0x44
    3690:	6881      	ldr	r1, [r0, #8]
    3692:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    3696:	0689      	lsls	r1, r1, #26
    3698:	d508      	bpl.n	36ac <z_shell_op_cursor_horiz_move+0x24>
    369a:	2a00      	cmp	r2, #0
    369c:	4904      	ldr	r1, [pc, #16]	; (36b0 <z_shell_op_cursor_horiz_move+0x28>)
    369e:	6940      	ldr	r0, [r0, #20]
    36a0:	bfb8      	it	lt
    36a2:	4252      	neglt	r2, r2
    36a4:	f009 bdd0 	b.w	d248 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    36a8:	2343      	movs	r3, #67	; 0x43
    36aa:	e7f1      	b.n	3690 <z_shell_op_cursor_horiz_move+0x8>
}
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop
    36b0:	00010e83 	.word	0x00010e83

000036b4 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    36b4:	6882      	ldr	r2, [r0, #8]
    36b6:	4902      	ldr	r1, [pc, #8]	; (36c0 <z_shell_print_cmd+0xc>)
    36b8:	6940      	ldr	r0, [r0, #20]
    36ba:	3242      	adds	r2, #66	; 0x42
    36bc:	f009 bdc4 	b.w	d248 <z_shell_raw_fprintf>
    36c0:	00010949 	.word	0x00010949

000036c4 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    36c4:	2908      	cmp	r1, #8
{
    36c6:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    36c8:	d816      	bhi.n	36f8 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    36ca:	6883      	ldr	r3, [r0, #8]
    36cc:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    36d0:	4291      	cmp	r1, r2
    36d2:	d011      	beq.n	36f8 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    36d4:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    36d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    36da:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    36de:	d005      	beq.n	36ec <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    36e0:	0699      	lsls	r1, r3, #26
    36e2:	d509      	bpl.n	36f8 <z_shell_vt100_color_set+0x34>
    36e4:	4905      	ldr	r1, [pc, #20]	; (36fc <z_shell_vt100_color_set+0x38>)
    36e6:	6940      	ldr	r0, [r0, #20]
    36e8:	f009 bdae 	b.w	d248 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    36ec:	069b      	lsls	r3, r3, #26
    36ee:	d503      	bpl.n	36f8 <z_shell_vt100_color_set+0x34>
    36f0:	4903      	ldr	r1, [pc, #12]	; (3700 <z_shell_vt100_color_set+0x3c>)
    36f2:	6940      	ldr	r0, [r0, #20]
    36f4:	f009 bda8 	b.w	d248 <z_shell_raw_fprintf>
	}
}
    36f8:	4770      	bx	lr
    36fa:	bf00      	nop
    36fc:	00010e8a 	.word	0x00010e8a
    3700:	0000f965 	.word	0x0000f965

00003704 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    3704:	b538      	push	{r3, r4, r5, lr}
    3706:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    3708:	7809      	ldrb	r1, [r1, #0]
{
    370a:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    370c:	f7ff ffda 	bl	36c4 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    3710:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    3712:	2a07      	cmp	r2, #7
    3714:	d810      	bhi.n	3738 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    3716:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    3718:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    371c:	4291      	cmp	r1, r2
    371e:	d00b      	beq.n	3738 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    3720:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    3724:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    3728:	069b      	lsls	r3, r3, #26
    372a:	d505      	bpl.n	3738 <z_shell_vt100_colors_restore+0x34>
    372c:	6960      	ldr	r0, [r4, #20]
    372e:	4903      	ldr	r1, [pc, #12]	; (373c <z_shell_vt100_colors_restore+0x38>)
}
    3730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    3734:	f009 bd88 	b.w	d248 <z_shell_raw_fprintf>
}
    3738:	bd38      	pop	{r3, r4, r5, pc}
    373a:	bf00      	nop
    373c:	00010e93 	.word	0x00010e93

00003740 <z_shell_op_word_remove>:
{
    3740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3742:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    3744:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    3746:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    3748:	2a00      	cmp	r2, #0
    374a:	d04e      	beq.n	37ea <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    374c:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    374e:	2800      	cmp	r0, #0
    3750:	d04b      	beq.n	37ea <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3752:	3041      	adds	r0, #65	; 0x41
    3754:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    3756:	f103 0642 	add.w	r6, r3, #66	; 0x42
    375a:	4603      	mov	r3, r0
    375c:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    375e:	42b3      	cmp	r3, r6
    3760:	b2a4      	uxth	r4, r4
    3762:	4619      	mov	r1, r3
    3764:	d30d      	bcc.n	3782 <z_shell_op_word_remove+0x42>
    3766:	f811 7901 	ldrb.w	r7, [r1], #-1
    376a:	2f20      	cmp	r7, #32
    376c:	d03b      	beq.n	37e6 <z_shell_op_word_remove+0xa6>
    376e:	4619      	mov	r1, r3
    3770:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    3772:	7808      	ldrb	r0, [r1, #0]
    3774:	2820      	cmp	r0, #32
    3776:	d004      	beq.n	3782 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    3778:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    377a:	429e      	cmp	r6, r3
		++chars_to_delete;
    377c:	b2a4      	uxth	r4, r4
		--str;
    377e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    3780:	d9f5      	bls.n	376e <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    3782:	1c63      	adds	r3, r4, #1
    3784:	1c4e      	adds	r6, r1, #1
    3786:	1b12      	subs	r2, r2, r4
    3788:	4419      	add	r1, r3
    378a:	4630      	mov	r0, r6
    378c:	f00a fd18 	bl	e1c0 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    3790:	68a9      	ldr	r1, [r5, #8]
    3792:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    3794:	1b12      	subs	r2, r2, r4
    3796:	b292      	uxth	r2, r2
    3798:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    379a:	440a      	add	r2, r1
    379c:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    379e:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    37a0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    37a4:	b209      	sxth	r1, r1
    37a6:	4628      	mov	r0, r5
    37a8:	f009 fdb6 	bl	d318 <z_shell_op_cursor_move>
    37ac:	68ab      	ldr	r3, [r5, #8]
    37ae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    37b2:	069a      	lsls	r2, r3, #26
    37b4:	d503      	bpl.n	37be <z_shell_op_word_remove+0x7e>
    37b6:	490d      	ldr	r1, [pc, #52]	; (37ec <z_shell_op_word_remove+0xac>)
    37b8:	6968      	ldr	r0, [r5, #20]
    37ba:	f009 fd45 	bl	d248 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    37be:	4633      	mov	r3, r6
    37c0:	4a0b      	ldr	r2, [pc, #44]	; (37f0 <z_shell_op_word_remove+0xb0>)
    37c2:	2108      	movs	r1, #8
    37c4:	4628      	mov	r0, r5
    37c6:	f009 feb9 	bl	d53c <z_shell_fprintf>
	z_clear_eos(shell);
    37ca:	4628      	mov	r0, r5
    37cc:	f7ff ff34 	bl	3638 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    37d0:	68ab      	ldr	r3, [r5, #8]
    37d2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    37d6:	069b      	lsls	r3, r3, #26
    37d8:	d507      	bpl.n	37ea <z_shell_op_word_remove+0xaa>
    37da:	6968      	ldr	r0, [r5, #20]
    37dc:	4905      	ldr	r1, [pc, #20]	; (37f4 <z_shell_op_word_remove+0xb4>)
}
    37de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    37e2:	f009 bd31 	b.w	d248 <z_shell_raw_fprintf>
    37e6:	460b      	mov	r3, r1
    37e8:	e7b8      	b.n	375c <z_shell_op_word_remove+0x1c>
    37ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37ec:	0000f96a 	.word	0x0000f96a
    37f0:	00010949 	.word	0x00010949
    37f4:	0000f96e 	.word	0x0000f96e

000037f8 <reprint_from_cursor>:
{
    37f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37fc:	4604      	mov	r4, r0
    37fe:	460d      	mov	r5, r1
	if (data_removed) {
    3800:	4617      	mov	r7, r2
    3802:	b10a      	cbz	r2, 3808 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    3804:	f7ff ff18 	bl	3638 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    3808:	68a3      	ldr	r3, [r4, #8]
    380a:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    380e:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    3810:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3812:	f100 0042 	add.w	r0, r0, #66	; 0x42
    3816:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    3818:	d51f      	bpl.n	385a <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    381a:	4618      	mov	r0, r3
    381c:	f00a fc92 	bl	e144 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3820:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3868 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3824:	4606      	mov	r6, r0
		while (len--) {
    3826:	b996      	cbnz	r6, 384e <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    3828:	68a3      	ldr	r3, [r4, #8]
    382a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    382c:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    382e:	4620      	mov	r0, r4
    3830:	f009 fd17 	bl	d262 <full_line_cmd>
    3834:	b120      	cbz	r0, 3840 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    3836:	b107      	cbz	r7, 383a <reprint_from_cursor+0x42>
    3838:	b115      	cbz	r5, 3840 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    383a:	6960      	ldr	r0, [r4, #20]
    383c:	f7ff ff08 	bl	3650 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    3840:	4269      	negs	r1, r5
    3842:	4620      	mov	r0, r4
    3844:	b209      	sxth	r1, r1
}
    3846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    384a:	f009 bd65 	b.w	d318 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    384e:	6960      	ldr	r0, [r4, #20]
    3850:	4641      	mov	r1, r8
    3852:	f009 fcf9 	bl	d248 <z_shell_raw_fprintf>
    3856:	3e01      	subs	r6, #1
    3858:	e7e5      	b.n	3826 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    385a:	4a04      	ldr	r2, [pc, #16]	; (386c <reprint_from_cursor+0x74>)
    385c:	2108      	movs	r1, #8
    385e:	4620      	mov	r0, r4
    3860:	f009 fe6c 	bl	d53c <z_shell_fprintf>
    3864:	e7e0      	b.n	3828 <reprint_from_cursor+0x30>
    3866:	bf00      	nop
    3868:	00011aeb 	.word	0x00011aeb
    386c:	00010949 	.word	0x00010949

00003870 <z_shell_op_char_insert>:
{
    3870:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    3872:	6883      	ldr	r3, [r0, #8]
    3874:	f88d 1007 	strb.w	r1, [sp, #7]
    3878:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    387c:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    387e:	07d0      	lsls	r0, r2, #31
    3880:	d521      	bpl.n	38c6 <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    3882:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    3884:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    3886:	428a      	cmp	r2, r1
    3888:	d01d      	beq.n	38c6 <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    388a:	1c48      	adds	r0, r1, #1
    388c:	4419      	add	r1, r3
		char_replace(shell, data);
    388e:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    3892:	87d8      	strh	r0, [r3, #62]	; 0x3e
    3894:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    3898:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    389c:	0789      	lsls	r1, r1, #30
    389e:	d510      	bpl.n	38c2 <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    38a0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    38a4:	6960      	ldr	r0, [r4, #20]
    38a6:	490b      	ldr	r1, [pc, #44]	; (38d4 <z_shell_op_char_insert+0x64>)
		data = '*';
    38a8:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    38ac:	bf18      	it	ne
    38ae:	222a      	movne	r2, #42	; 0x2a
    38b0:	f009 fcca 	bl	d248 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    38b4:	4620      	mov	r0, r4
    38b6:	f009 fce8 	bl	d28a <z_shell_cursor_in_empty_line>
    38ba:	b110      	cbz	r0, 38c2 <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    38bc:	6960      	ldr	r0, [r4, #20]
    38be:	f7ff fec7 	bl	3650 <z_cursor_next_line_move.isra.0>
}
    38c2:	b002      	add	sp, #8
    38c4:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    38c6:	2201      	movs	r2, #1
    38c8:	f10d 0107 	add.w	r1, sp, #7
    38cc:	4620      	mov	r0, r4
    38ce:	f009 fe42 	bl	d556 <data_insert>
}
    38d2:	e7f6      	b.n	38c2 <z_shell_op_char_insert+0x52>
    38d4:	00010e87 	.word	0x00010e87

000038d8 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    38d8:	6883      	ldr	r3, [r0, #8]
    38da:	4a0a      	ldr	r2, [pc, #40]	; (3904 <z_shell_print_prompt_and_cmd+0x2c>)
    38dc:	681b      	ldr	r3, [r3, #0]
{
    38de:	b510      	push	{r4, lr}
    38e0:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    38e2:	2102      	movs	r1, #2
    38e4:	f009 fe2a 	bl	d53c <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    38e8:	68a3      	ldr	r3, [r4, #8]
    38ea:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    38ee:	079b      	lsls	r3, r3, #30
    38f0:	d507      	bpl.n	3902 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    38f2:	4620      	mov	r0, r4
    38f4:	f7ff fede 	bl	36b4 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    38f8:	4620      	mov	r0, r4
}
    38fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    38fe:	f009 bce8 	b.w	d2d2 <z_shell_op_cursor_position_synchronize>
}
    3902:	bd10      	pop	{r4, pc}
    3904:	00010949 	.word	0x00010949

00003908 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3908:	4901      	ldr	r1, [pc, #4]	; (3910 <z_cursor_next_line_move.isra.0+0x8>)
    390a:	f009 bfce 	b.w	d8aa <z_shell_raw_fprintf>
    390e:	bf00      	nop
    3910:	0001082a 	.word	0x0001082a

00003914 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    3914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3918:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    391a:	2100      	movs	r1, #0
{
    391c:	b08d      	sub	sp, #52	; 0x34
    391e:	4604      	mov	r4, r0
    3920:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    3922:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3924:	aa07      	add	r2, sp, #28
    3926:	4630      	mov	r0, r6
    3928:	f101 0801 	add.w	r8, r1, #1
    392c:	f7ff fe5e 	bl	35ec <z_shell_cmd_get>
    3930:	b9a0      	cbnz	r0, 395c <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    3932:	b185      	cbz	r5, 3956 <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    3934:	b127      	cbz	r7, 3940 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    3936:	463a      	mov	r2, r7
    3938:	2108      	movs	r1, #8
    393a:	4620      	mov	r0, r4
    393c:	f009 fdfe 	bl	d53c <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3940:	4f1e      	ldr	r7, [pc, #120]	; (39bc <z_shell_help_subcmd_print+0xa8>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3942:	f8df 907c 	ldr.w	r9, [pc, #124]	; 39c0 <z_shell_help_subcmd_print+0xac>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3946:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3948:	aa07      	add	r2, sp, #28
    394a:	4630      	mov	r0, r6
    394c:	f101 0801 	add.w	r8, r1, #1
    3950:	f7ff fe4c 	bl	35ec <z_shell_cmd_get>
    3954:	b960      	cbnz	r0, 3970 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    3956:	b00d      	add	sp, #52	; 0x34
    3958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    395c:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    395e:	b110      	cbz	r0, 3966 <z_shell_help_subcmd_print+0x52>
    3960:	f00a fbf0 	bl	e144 <strlen>
    3964:	b280      	uxth	r0, r0
    3966:	4285      	cmp	r5, r0
    3968:	bf38      	it	cc
    396a:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    396c:	4641      	mov	r1, r8
    396e:	e7d9      	b.n	3924 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    3970:	6803      	ldr	r3, [r0, #0]
    3972:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3976:	4811      	ldr	r0, [pc, #68]	; (39bc <z_shell_help_subcmd_print+0xa8>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    3978:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    397a:	f00a fbe3 	bl	e144 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    397e:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3980:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    3982:	b183      	cbz	r3, 39a6 <z_shell_help_subcmd_print+0x92>
    3984:	781a      	ldrb	r2, [r3, #0]
    3986:	b172      	cbz	r2, 39a6 <z_shell_help_subcmd_print+0x92>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3988:	e9cd 3701 	strd	r3, r7, [sp, #4]
    398c:	9500      	str	r5, [sp, #0]
    398e:	463b      	mov	r3, r7
    3990:	464a      	mov	r2, r9
    3992:	2108      	movs	r1, #8
    3994:	4620      	mov	r0, r4
    3996:	f009 fdd1 	bl	d53c <z_shell_fprintf>
	if (item_help == NULL) {
    399a:	f1ba 0f00 	cmp.w	sl, #0
    399e:	d104      	bne.n	39aa <z_shell_help_subcmd_print+0x96>
		z_cursor_next_line_move(shell);
    39a0:	6960      	ldr	r0, [r4, #20]
    39a2:	f7ff ffb1 	bl	3908 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    39a6:	4641      	mov	r1, r8
    39a8:	e7ce      	b.n	3948 <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    39aa:	1c6a      	adds	r2, r5, #1
    39ac:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    39b0:	b292      	uxth	r2, r2
    39b2:	4651      	mov	r1, sl
    39b4:	4620      	mov	r0, r4
    39b6:	f009 ff85 	bl	d8c4 <formatted_text_print.constprop.0>
    39ba:	e7f4      	b.n	39a6 <z_shell_help_subcmd_print+0x92>
    39bc:	00010eb4 	.word	0x00010eb4
    39c0:	00010e9c 	.word	0x00010e9c

000039c4 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    39c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39c6:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    39c8:	6808      	ldr	r0, [r1, #0]
{
    39ca:	460d      	mov	r5, r1
    39cc:	b1b8      	cbz	r0, 39fe <z_shell_help_cmd_print+0x3a>
    39ce:	f00a fbb9 	bl	e144 <strlen>
    39d2:	b284      	uxth	r4, r0
    39d4:	4f0b      	ldr	r7, [pc, #44]	; (3a04 <z_shell_help_cmd_print+0x40>)
    39d6:	4638      	mov	r0, r7
    39d8:	f00a fbb4 	bl	e144 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    39dc:	682b      	ldr	r3, [r5, #0]
    39de:	4a0a      	ldr	r2, [pc, #40]	; (3a08 <z_shell_help_cmd_print+0x44>)
    39e0:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    39e2:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    39e4:	2108      	movs	r1, #8
    39e6:	4630      	mov	r0, r6
    39e8:	f009 fda8 	bl	d53c <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    39ec:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    39ee:	6869      	ldr	r1, [r5, #4]
    39f0:	4622      	mov	r2, r4
    39f2:	4630      	mov	r0, r6
}
    39f4:	b003      	add	sp, #12
    39f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    39fa:	f009 bf63 	b.w	d8c4 <formatted_text_print.constprop.0>
    39fe:	4604      	mov	r4, r0
    3a00:	e7e8      	b.n	39d4 <z_shell_help_cmd_print+0x10>
    3a02:	bf00      	nop
    3a04:	00010eb0 	.word	0x00010eb0
    3a08:	00010cad 	.word	0x00010cad

00003a0c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    3a0c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3a0e:	4907      	ldr	r1, [pc, #28]	; (3a2c <z_shell_help_request+0x20>)
{
    3a10:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3a12:	f00a fba7 	bl	e164 <strcmp>
    3a16:	b138      	cbz	r0, 3a28 <z_shell_help_request+0x1c>
    3a18:	4905      	ldr	r1, [pc, #20]	; (3a30 <z_shell_help_request+0x24>)
    3a1a:	4620      	mov	r0, r4
    3a1c:	f00a fba2 	bl	e164 <strcmp>
    3a20:	fab0 f080 	clz	r0, r0
    3a24:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    3a26:	bd10      	pop	{r4, pc}
		return true;
    3a28:	2001      	movs	r0, #1
    3a2a:	e7fc      	b.n	3a26 <z_shell_help_request+0x1a>
    3a2c:	00010ea6 	.word	0x00010ea6
    3a30:	00010ea9 	.word	0x00010ea9

00003a34 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    3a34:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3a36:	6883      	ldr	r3, [r0, #8]
    3a38:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3a3c:	069b      	lsls	r3, r3, #26
{
    3a3e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3a40:	d503      	bpl.n	3a4a <cmd_resize_default+0x16>
    3a42:	4904      	ldr	r1, [pc, #16]	; (3a54 <cmd_resize_default+0x20>)
    3a44:	6940      	ldr	r0, [r0, #20]
    3a46:	f009 ffb4 	bl	d9b2 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    3a4a:	68a3      	ldr	r3, [r4, #8]
    3a4c:	4a02      	ldr	r2, [pc, #8]	; (3a58 <cmd_resize_default+0x24>)
    3a4e:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    3a50:	2000      	movs	r0, #0
    3a52:	bd10      	pop	{r4, pc}
    3a54:	0000f972 	.word	0x0000f972
    3a58:	00500018 	.word	0x00500018

00003a5c <cmd_shell_stats_show>:
{
    3a5c:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    3a5e:	6983      	ldr	r3, [r0, #24]
    3a60:	4a03      	ldr	r2, [pc, #12]	; (3a70 <cmd_shell_stats_show+0x14>)
    3a62:	681b      	ldr	r3, [r3, #0]
    3a64:	2108      	movs	r1, #8
    3a66:	f009 f9d9 	bl	ce1c <shell_fprintf>
}
    3a6a:	2000      	movs	r0, #0
    3a6c:	bd08      	pop	{r3, pc}
    3a6e:	bf00      	nop
    3a70:	00010eb7 	.word	0x00010eb7

00003a74 <cmd_history>:
{
    3a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    3a76:	4e0f      	ldr	r6, [pc, #60]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
{
    3a78:	4604      	mov	r4, r0
    3a7a:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    3a7c:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    3a7e:	68e0      	ldr	r0, [r4, #12]
    3a80:	f10d 030e 	add.w	r3, sp, #14
    3a84:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    3a88:	2101      	movs	r1, #1
    3a8a:	f00a f81a 	bl	dac2 <z_shell_history_get>
		if (len) {
    3a8e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3a92:	68a3      	ldr	r3, [r4, #8]
    3a94:	b150      	cbz	r0, 3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
			shell_print(shell, "[%3d] %s",
    3a96:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    3a9a:	9300      	str	r3, [sp, #0]
    3a9c:	4632      	mov	r2, r6
    3a9e:	462b      	mov	r3, r5
    3aa0:	2108      	movs	r1, #8
    3aa2:	4620      	mov	r0, r4
    3aa4:	f009 f9ba 	bl	ce1c <shell_fprintf>
	while (1) {
    3aa8:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    3aaa:	e7e7      	b.n	3a7c <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    3aac:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    3ab0:	b004      	add	sp, #16
    3ab2:	bd70      	pop	{r4, r5, r6, pc}
    3ab4:	00010ec7 	.word	0x00010ec7

00003ab8 <cmd_echo>:
	if (argc == 2) {
    3ab8:	2902      	cmp	r1, #2
{
    3aba:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    3abc:	d10d      	bne.n	3ada <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    3abe:	6853      	ldr	r3, [r2, #4]
    3ac0:	9301      	str	r3, [sp, #4]
    3ac2:	4b0e      	ldr	r3, [pc, #56]	; (3afc <cmd_echo+0x44>)
    3ac4:	9300      	str	r3, [sp, #0]
    3ac6:	6813      	ldr	r3, [r2, #0]
    3ac8:	4a0d      	ldr	r2, [pc, #52]	; (3b00 <cmd_echo+0x48>)
    3aca:	2101      	movs	r1, #1
    3acc:	f009 f9a6 	bl	ce1c <shell_fprintf>
    3ad0:	f06f 0015 	mvn.w	r0, #21
}
    3ad4:	b003      	add	sp, #12
    3ad6:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    3ada:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    3adc:	4a09      	ldr	r2, [pc, #36]	; (3b04 <cmd_echo+0x4c>)
    3ade:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    3ae2:	f013 0f02 	tst.w	r3, #2
    3ae6:	f04f 0108 	mov.w	r1, #8
    3aea:	4b07      	ldr	r3, [pc, #28]	; (3b08 <cmd_echo+0x50>)
    3aec:	bf18      	it	ne
    3aee:	4613      	movne	r3, r2
    3af0:	4a06      	ldr	r2, [pc, #24]	; (3b0c <cmd_echo+0x54>)
    3af2:	f009 f993 	bl	ce1c <shell_fprintf>
	return 0;
    3af6:	2000      	movs	r0, #0
    3af8:	e7ec      	b.n	3ad4 <cmd_echo+0x1c>
    3afa:	bf00      	nop
    3afc:	00010ede 	.word	0x00010ede
    3b00:	00010ed5 	.word	0x00010ed5
    3b04:	00010906 	.word	0x00010906
    3b08:	00010ed1 	.word	0x00010ed1
    3b0c:	00010ef3 	.word	0x00010ef3

00003b10 <cmd_clear>:
{
    3b10:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3b12:	6883      	ldr	r3, [r0, #8]
    3b14:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3b18:	069a      	lsls	r2, r3, #26
{
    3b1a:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3b1c:	d503      	bpl.n	3b26 <cmd_clear+0x16>
    3b1e:	4907      	ldr	r1, [pc, #28]	; (3b3c <cmd_clear+0x2c>)
    3b20:	6940      	ldr	r0, [r0, #20]
    3b22:	f009 ff46 	bl	d9b2 <z_shell_raw_fprintf>
    3b26:	68a3      	ldr	r3, [r4, #8]
    3b28:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3b2c:	069b      	lsls	r3, r3, #26
    3b2e:	d503      	bpl.n	3b38 <cmd_clear+0x28>
    3b30:	4903      	ldr	r1, [pc, #12]	; (3b40 <cmd_clear+0x30>)
    3b32:	6960      	ldr	r0, [r4, #20]
    3b34:	f009 ff3d 	bl	d9b2 <z_shell_raw_fprintf>
}
    3b38:	2000      	movs	r0, #0
    3b3a:	bd10      	pop	{r4, pc}
    3b3c:	0000f979 	.word	0x0000f979
    3b40:	0000f97e 	.word	0x0000f97e

00003b44 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    3b44:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    3b46:	2901      	cmp	r1, #1
{
    3b48:	b085      	sub	sp, #20
    3b4a:	4604      	mov	r4, r0
	if (argc != 1) {
    3b4c:	d00d      	beq.n	3b6a <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    3b4e:	6853      	ldr	r3, [r2, #4]
    3b50:	9301      	str	r3, [sp, #4]
    3b52:	4b59      	ldr	r3, [pc, #356]	; (3cb8 <cmd_resize+0x174>)
    3b54:	9300      	str	r3, [sp, #0]
    3b56:	6813      	ldr	r3, [r2, #0]
    3b58:	4a58      	ldr	r2, [pc, #352]	; (3cbc <cmd_resize+0x178>)
    3b5a:	2101      	movs	r1, #1
    3b5c:	f009 f95e 	bl	ce1c <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    3b60:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    3b64:	4628      	mov	r0, r5
    3b66:	b005      	add	sp, #20
    3b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6a:	6883      	ldr	r3, [r0, #8]
    3b6c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    3b70:	069a      	lsls	r2, r3, #26
    3b72:	d503      	bpl.n	3b7c <cmd_resize+0x38>
    3b74:	4952      	ldr	r1, [pc, #328]	; (3cc0 <cmd_resize+0x17c>)
    3b76:	6940      	ldr	r0, [r0, #20]
    3b78:	f009 ff1b 	bl	d9b2 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    3b7c:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    3b80:	4620      	mov	r0, r4
    3b82:	f7ff fd6b 	bl	365c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    3b86:	21fa      	movs	r1, #250	; 0xfa
    3b88:	4620      	mov	r0, r4
    3b8a:	f7ff fd7d 	bl	3688 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3b8e:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    3b90:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3b92:	f44f 7280 	mov.w	r2, #256	; 0x100
    3b96:	4629      	mov	r1, r5
    3b98:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    3b9c:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3ba0:	f00a fb31 	bl	e206 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    3ba4:	4947      	ldr	r1, [pc, #284]	; (3cc4 <cmd_resize+0x180>)
    3ba6:	6960      	ldr	r0, [r4, #20]
    3ba8:	f009 ff03 	bl	d9b2 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3bac:	6960      	ldr	r0, [r4, #20]
    3bae:	f009 f945 	bl	ce3c <z_shell_fprintf_buffer_flush>
    3bb2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    3bb6:	6860      	ldr	r0, [r4, #4]
    3bb8:	6803      	ldr	r3, [r0, #0]
    3bba:	2201      	movs	r2, #1
    3bbc:	691f      	ldr	r7, [r3, #16]
    3bbe:	f10d 010b 	add.w	r1, sp, #11
    3bc2:	ab03      	add	r3, sp, #12
    3bc4:	47b8      	blx	r7
			if (cnt == 0) {
    3bc6:	9b03      	ldr	r3, [sp, #12]
    3bc8:	b953      	cbnz	r3, 3be0 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    3bca:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    3bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3bd0:	b2b6      	uxth	r6, r6
    3bd2:	f00b faac 	bl	f12e <z_impl_k_busy_wait>
    3bd6:	2e00      	cmp	r6, #0
    3bd8:	d1ed      	bne.n	3bb6 <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    3bda:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3bde:	e034      	b.n	3c4a <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3be0:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    3be4:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3be6:	2b1b      	cmp	r3, #27
    3be8:	d05a      	beq.n	3ca0 <cmd_resize+0x15c>
    3bea:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    3bee:	2a1b      	cmp	r2, #27
    3bf0:	d1e1      	bne.n	3bb6 <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    3bf2:	2b52      	cmp	r3, #82	; 0x52
    3bf4:	d154      	bne.n	3ca0 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    3bf6:	440d      	add	r5, r1
    3bf8:	2300      	movs	r3, #0
    3bfa:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    3bfe:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    3c02:	2a5b      	cmp	r2, #91	; 0x5b
    3c04:	d154      	bne.n	3cb0 <cmd_resize+0x16c>
    3c06:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    3c0a:	461f      	mov	r7, r3
				buff_idx = 2U;
    3c0c:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3c0e:	f815 0b01 	ldrb.w	r0, [r5], #1
    3c12:	4632      	mov	r2, r6
    3c14:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    3c16:	f106 0601 	add.w	r6, r6, #1
    3c1a:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3c1c:	d12b      	bne.n	3c76 <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    3c1e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    3c22:	d0da      	beq.n	3bda <cmd_resize+0x96>
    3c24:	f202 1243 	addw	r2, r2, #323	; 0x143
    3c28:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    3c2c:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    3c2e:	f812 5b01 	ldrb.w	r5, [r2], #1
    3c32:	bb55      	cbnz	r5, 3c8a <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3c34:	2bfa      	cmp	r3, #250	; 0xfa
    3c36:	bf28      	it	cs
    3c38:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3c3a:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3c3c:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3c3e:	463b      	mov	r3, r7
    3c40:	bf28      	it	cs
    3c42:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    3c44:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3c48:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3c4a:	68a3      	ldr	r3, [r4, #8]
    3c4c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    3c50:	069b      	lsls	r3, r3, #26
    3c52:	d503      	bpl.n	3c5c <cmd_resize+0x118>
    3c54:	491c      	ldr	r1, [pc, #112]	; (3cc8 <cmd_resize+0x184>)
    3c56:	6960      	ldr	r0, [r4, #20]
    3c58:	f009 feab 	bl	d9b2 <z_shell_raw_fprintf>
	if (err != 0) {
    3c5c:	2d00      	cmp	r5, #0
    3c5e:	d081      	beq.n	3b64 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    3c60:	68a3      	ldr	r3, [r4, #8]
    3c62:	4a1a      	ldr	r2, [pc, #104]	; (3ccc <cmd_resize+0x188>)
    3c64:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3c66:	2103      	movs	r1, #3
    3c68:	4a19      	ldr	r2, [pc, #100]	; (3cd0 <cmd_resize+0x18c>)
    3c6a:	4620      	mov	r0, r4
    3c6c:	f009 f8d6 	bl	ce1c <shell_fprintf>
    3c70:	f06f 0507 	mvn.w	r5, #7
    3c74:	e776      	b.n	3b64 <cmd_resize+0x20>
					*y = *y * 10U +
    3c76:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    3c7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    3c7e:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    3c80:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    3c84:	b29f      	uxth	r7, r3
					if (buff_idx >=
    3c86:	d1c2      	bne.n	3c0e <cmd_resize+0xca>
    3c88:	e7a7      	b.n	3bda <cmd_resize+0x96>
					*x = *x * 10U +
    3c8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    3c8e:	3601      	adds	r6, #1
					*x = *x * 10U +
    3c90:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    3c94:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    3c96:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    3c98:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    3c9a:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    3c9c:	d9c7      	bls.n	3c2e <cmd_resize+0xea>
    3c9e:	e79c      	b.n	3bda <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    3ca0:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3ca2:	3501      	adds	r5, #1
    3ca4:	b2ad      	uxth	r5, r5
    3ca6:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    3ca8:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3cac:	d983      	bls.n	3bb6 <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    3cae:	2300      	movs	r3, #0
    3cb0:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    3cb4:	e791      	b.n	3bda <cmd_resize+0x96>
    3cb6:	bf00      	nop
    3cb8:	00010ede 	.word	0x00010ede
    3cbc:	00010ed5 	.word	0x00010ed5
    3cc0:	0000f984 	.word	0x0000f984
    3cc4:	000112fc 	.word	0x000112fc
    3cc8:	0000f988 	.word	0x0000f988
    3ccc:	00500018 	.word	0x00500018
    3cd0:	00010f04 	.word	0x00010f04

00003cd4 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    3cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd8:	4607      	mov	r7, r0
    3cda:	b089      	sub	sp, #36	; 0x24
    3cdc:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    3cde:	4689      	mov	r9, r1
    3ce0:	b921      	cbnz	r1, 3cec <z_shell_wildcard_process+0x18>
		return ret_val;
    3ce2:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    3ce4:	4620      	mov	r0, r4
    3ce6:	b009      	add	sp, #36	; 0x24
    3ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    3cec:	4610      	mov	r0, r2
    3cee:	f009 ff91 	bl	dc14 <z_shell_has_wildcard>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d0f5      	beq.n	3ce2 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    3cf6:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    3cfa:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3cfc:	2402      	movs	r4, #2
    3cfe:	e024      	b.n	3d4a <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3d00:	465c      	mov	r4, fp
    3d02:	e03c      	b.n	3d7e <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    3d04:	4629      	mov	r1, r5
    3d06:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    3d0a:	f00a f9d1 	bl	e0b0 <strstr>
	if (!completion_addr) {
    3d0e:	4606      	mov	r6, r0
    3d10:	2800      	cmp	r0, #0
    3d12:	d04c      	beq.n	3dae <z_shell_wildcard_process+0xda>
    3d14:	f00a fa16 	bl	e144 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    3d18:	b282      	uxth	r2, r0
    3d1a:	1c60      	adds	r0, r4, #1
    3d1c:	3201      	adds	r2, #1
    3d1e:	4631      	mov	r1, r6
    3d20:	4430      	add	r0, r6
    3d22:	f00a fa4d 	bl	e1c0 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    3d26:	4622      	mov	r2, r4
    3d28:	4659      	mov	r1, fp
    3d2a:	4630      	mov	r0, r6
    3d2c:	f00a fa60 	bl	e1f0 <memcpy>
	completion_addr[cmd_len] = ' ';
    3d30:	f04f 0320 	mov.w	r3, #32
    3d34:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    3d36:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    3d3a:	3001      	adds	r0, #1
    3d3c:	4404      	add	r4, r0
    3d3e:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    3d42:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    3d46:	2400      	movs	r4, #0
    3d48:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    3d4a:	1c4b      	adds	r3, r1, #1
    3d4c:	aa03      	add	r2, sp, #12
    3d4e:	4648      	mov	r0, r9
    3d50:	9301      	str	r3, [sp, #4]
    3d52:	f7ff fc4b 	bl	35ec <z_shell_cmd_get>
    3d56:	4606      	mov	r6, r0
    3d58:	b1e8      	cbz	r0, 3d96 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    3d5a:	6831      	ldr	r1, [r6, #0]
    3d5c:	2200      	movs	r2, #0
    3d5e:	4628      	mov	r0, r5
    3d60:	f008 fdea 	bl	c938 <fnmatch>
    3d64:	2800      	cmp	r0, #0
    3d66:	d1ef      	bne.n	3d48 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    3d68:	f8d6 b000 	ldr.w	fp, [r6]
    3d6c:	f8d7 a008 	ldr.w	sl, [r7, #8]
    3d70:	f1bb 0f00 	cmp.w	fp, #0
    3d74:	d0c4      	beq.n	3d00 <z_shell_wildcard_process+0x2c>
    3d76:	4658      	mov	r0, fp
    3d78:	f00a f9e4 	bl	e144 <strlen>
    3d7c:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    3d7e:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    3d82:	4422      	add	r2, r4
    3d84:	2aff      	cmp	r2, #255	; 0xff
    3d86:	ddbd      	ble.n	3d04 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    3d88:	4a0a      	ldr	r2, [pc, #40]	; (3db4 <z_shell_wildcard_process+0xe0>)
    3d8a:	462b      	mov	r3, r5
    3d8c:	2103      	movs	r1, #3
    3d8e:	4638      	mov	r0, r7
    3d90:	f009 fbd4 	bl	d53c <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    3d94:	2401      	movs	r4, #1
	if (cnt > 0) {
    3d96:	f1b8 0f00 	cmp.w	r8, #0
    3d9a:	d0a3      	beq.n	3ce4 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    3d9c:	68b8      	ldr	r0, [r7, #8]
    3d9e:	462a      	mov	r2, r5
    3da0:	f100 0140 	add.w	r1, r0, #64	; 0x40
    3da4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3da8:	f009 f974 	bl	d094 <z_shell_pattern_remove>
	return ret_val;
    3dac:	e79a      	b.n	3ce4 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3dae:	2402      	movs	r4, #2
    3db0:	e7f1      	b.n	3d96 <z_shell_wildcard_process+0xc2>
    3db2:	bf00      	nop
    3db4:	00011301 	.word	0x00011301

00003db8 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3db8:	4b0c      	ldr	r3, [pc, #48]	; (3dec <class_handler+0x34>)
{
    3dba:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3dbc:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3dbe:	4e0c      	ldr	r6, [pc, #48]	; (3df0 <class_handler+0x38>)
    3dc0:	4b0c      	ldr	r3, [pc, #48]	; (3df4 <class_handler+0x3c>)
    3dc2:	42b3      	cmp	r3, r6
    3dc4:	d303      	bcc.n	3dce <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    3dc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3dca:	bcf0      	pop	{r4, r5, r6, r7}
    3dcc:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3dce:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3dd0:	42bd      	cmp	r5, r7
    3dd2:	d309      	bcc.n	3de8 <class_handler+0x30>
		if (iface->class_handler &&
    3dd4:	691c      	ldr	r4, [r3, #16]
    3dd6:	b13c      	cbz	r4, 3de8 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3dd8:	f895 c002 	ldrb.w	ip, [r5, #2]
    3ddc:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3dde:	45ac      	cmp	ip, r5
    3de0:	d102      	bne.n	3de8 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    3de2:	4623      	mov	r3, r4
}
    3de4:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    3de6:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3de8:	3324      	adds	r3, #36	; 0x24
    3dea:	e7ea      	b.n	3dc2 <class_handler+0xa>
    3dec:	200014f8 	.word	0x200014f8
    3df0:	20000468 	.word	0x20000468
    3df4:	20000444 	.word	0x20000444

00003df8 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3dfc:	4c13      	ldr	r4, [pc, #76]	; (3e4c <custom_handler+0x54>)
    3dfe:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3e50 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e02:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3e54 <custom_handler+0x5c>
{
    3e06:	4605      	mov	r5, r0
    3e08:	460e      	mov	r6, r1
    3e0a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e0c:	4544      	cmp	r4, r8
    3e0e:	d303      	bcc.n	3e18 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    3e10:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    3e18:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e1a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    3e1e:	429a      	cmp	r2, r3
    3e20:	d312      	bcc.n	3e48 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    3e22:	69a3      	ldr	r3, [r4, #24]
    3e24:	b183      	cbz	r3, 3e48 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3e26:	7890      	ldrb	r0, [r2, #2]
    3e28:	7929      	ldrb	r1, [r5, #4]
    3e2a:	4288      	cmp	r0, r1
    3e2c:	d105      	bne.n	3e3a <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    3e2e:	463a      	mov	r2, r7
    3e30:	4631      	mov	r1, r6
    3e32:	4628      	mov	r0, r5
}
    3e34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    3e38:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    3e3a:	7952      	ldrb	r2, [r2, #5]
    3e3c:	2a01      	cmp	r2, #1
    3e3e:	d103      	bne.n	3e48 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    3e40:	463a      	mov	r2, r7
    3e42:	4631      	mov	r1, r6
    3e44:	4628      	mov	r0, r5
    3e46:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e48:	3424      	adds	r4, #36	; 0x24
    3e4a:	e7df      	b.n	3e0c <custom_handler+0x14>
    3e4c:	20000444 	.word	0x20000444
    3e50:	20000468 	.word	0x20000468
    3e54:	200014f8 	.word	0x200014f8

00003e58 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e5c:	4c0b      	ldr	r4, [pc, #44]	; (3e8c <vendor_handler+0x34>)
    3e5e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3e90 <vendor_handler+0x38>
{
    3e62:	4605      	mov	r5, r0
    3e64:	460e      	mov	r6, r1
    3e66:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e68:	4544      	cmp	r4, r8
    3e6a:	d302      	bcc.n	3e72 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3e6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e70:	e009      	b.n	3e86 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    3e72:	6963      	ldr	r3, [r4, #20]
    3e74:	b90b      	cbnz	r3, 3e7a <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e76:	3424      	adds	r4, #36	; 0x24
    3e78:	e7f6      	b.n	3e68 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    3e7a:	463a      	mov	r2, r7
    3e7c:	4631      	mov	r1, r6
    3e7e:	4628      	mov	r0, r5
    3e80:	4798      	blx	r3
    3e82:	2800      	cmp	r0, #0
    3e84:	d1f7      	bne.n	3e76 <vendor_handler+0x1e>
}
    3e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e8a:	bf00      	nop
    3e8c:	20000444 	.word	0x20000444
    3e90:	20000468 	.word	0x20000468

00003e94 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    3e94:	4802      	ldr	r0, [pc, #8]	; (3ea0 <usb_reset_alt_setting+0xc>)
    3e96:	2208      	movs	r2, #8
    3e98:	2100      	movs	r1, #0
    3e9a:	f00a b9b4 	b.w	e206 <memset>
    3e9e:	bf00      	nop
    3ea0:	200015b3 	.word	0x200015b3

00003ea4 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    3ea4:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3ea6:	4b0b      	ldr	r3, [pc, #44]	; (3ed4 <is_ep_valid.part.0+0x30>)
    3ea8:	4c0b      	ldr	r4, [pc, #44]	; (3ed8 <is_ep_valid.part.0+0x34>)
    3eaa:	42a3      	cmp	r3, r4
    3eac:	d301      	bcc.n	3eb2 <is_ep_valid.part.0+0xe>
	return false;
    3eae:	2000      	movs	r0, #0
}
    3eb0:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    3eb2:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3eb4:	7f1e      	ldrb	r6, [r3, #28]
    3eb6:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    3eb8:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3eba:	b2d5      	uxtb	r5, r2
    3ebc:	42ae      	cmp	r6, r5
    3ebe:	d801      	bhi.n	3ec4 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3ec0:	3324      	adds	r3, #36	; 0x24
    3ec2:	e7f2      	b.n	3eaa <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    3ec4:	3201      	adds	r2, #1
    3ec6:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    3eca:	4285      	cmp	r5, r0
    3ecc:	d1f5      	bne.n	3eba <is_ep_valid.part.0+0x16>
				return true;
    3ece:	2001      	movs	r0, #1
    3ed0:	e7ee      	b.n	3eb0 <is_ep_valid.part.0+0xc>
    3ed2:	bf00      	nop
    3ed4:	20000444 	.word	0x20000444
    3ed8:	20000468 	.word	0x20000468

00003edc <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    3edc:	4809      	ldr	r0, [pc, #36]	; (3f04 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    3ede:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    3ee0:	7803      	ldrb	r3, [r0, #0]
    3ee2:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    3ee6:	330a      	adds	r3, #10
    3ee8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3eec:	b13b      	cbz	r3, 3efe <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3eee:	f100 0208 	add.w	r2, r0, #8
    3ef2:	f100 0110 	add.w	r1, r0, #16
    3ef6:	4798      	blx	r3
    3ef8:	43c0      	mvns	r0, r0
    3efa:	0fc0      	lsrs	r0, r0, #31
}
    3efc:	bd08      	pop	{r3, pc}
		return false;
    3efe:	4618      	mov	r0, r3
    3f00:	e7fc      	b.n	3efc <usb_handle_request.constprop.0+0x20>
    3f02:	bf00      	nop
    3f04:	200014f8 	.word	0x200014f8

00003f08 <set_endpoint>:
{
    3f08:	b500      	push	{lr}
    3f0a:	b08b      	sub	sp, #44	; 0x2c
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3f0c:	7883      	ldrb	r3, [r0, #2]
    3f0e:	f88d 3008 	strb.w	r3, [sp, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3f12:	7903      	ldrb	r3, [r0, #4]
    3f14:	7942      	ldrb	r2, [r0, #5]
    3f16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3f1a:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3f1e:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    3f20:	a802      	add	r0, sp, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3f22:	f003 0303 	and.w	r3, r3, #3
    3f26:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    3f2a:	f002 ff7d 	bl	6e28 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    3f2e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3f32:	d12f      	bne.n	3f94 <set_endpoint+0x8c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    3f34:	4828      	ldr	r0, [pc, #160]	; (3fd8 <set_endpoint+0xd0>)
    3f36:	6803      	ldr	r3, [r0, #0]
    3f38:	f013 0f06 	tst.w	r3, #6
    3f3c:	d00c      	beq.n	3f58 <set_endpoint+0x50>
    3f3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3f42:	4a26      	ldr	r2, [pc, #152]	; (3fdc <set_endpoint+0xd4>)
    3f44:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3f48:	e9cd 2308 	strd	r2, r3, [sp, #32]
    3f4c:	2303      	movs	r3, #3
    3f4e:	aa07      	add	r2, sp, #28
    3f50:	9301      	str	r3, [sp, #4]
    3f52:	9307      	str	r3, [sp, #28]
    3f54:	f009 fea2 	bl	dc9c <z_log_msg2_static_create.constprop.0>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    3f58:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3f5c:	f003 f814 	bl	6f88 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    3f60:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3f64:	d12e      	bne.n	3fc4 <set_endpoint+0xbc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    3f66:	481c      	ldr	r0, [pc, #112]	; (3fd8 <set_endpoint+0xd0>)
    3f68:	6803      	ldr	r3, [r0, #0]
    3f6a:	f013 0f06 	tst.w	r3, #6
    3f6e:	d00c      	beq.n	3f8a <set_endpoint+0x82>
    3f70:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3f74:	4a1a      	ldr	r2, [pc, #104]	; (3fe0 <set_endpoint+0xd8>)
    3f76:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3f7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    3f7e:	2303      	movs	r3, #3
    3f80:	aa07      	add	r2, sp, #28
    3f82:	9301      	str	r3, [sp, #4]
    3f84:	9307      	str	r3, [sp, #28]
    3f86:	f009 fe89 	bl	dc9c <z_log_msg2_static_create.constprop.0>
	usb_dev.configured = true;
    3f8a:	4b16      	ldr	r3, [pc, #88]	; (3fe4 <set_endpoint+0xdc>)
    3f8c:	2001      	movs	r0, #1
    3f8e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    3f92:	e006      	b.n	3fa2 <set_endpoint+0x9a>
	} else if (ret) {
    3f94:	2800      	cmp	r0, #0
    3f96:	d0df      	beq.n	3f58 <set_endpoint+0x50>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3f98:	480f      	ldr	r0, [pc, #60]	; (3fd8 <set_endpoint+0xd0>)
    3f9a:	6803      	ldr	r3, [r0, #0]
    3f9c:	075a      	lsls	r2, r3, #29
    3f9e:	d103      	bne.n	3fa8 <set_endpoint+0xa0>
		return false;
    3fa0:	2000      	movs	r0, #0
}
    3fa2:	b00b      	add	sp, #44	; 0x2c
    3fa4:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3fa8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3fac:	4a0e      	ldr	r2, [pc, #56]	; (3fe8 <set_endpoint+0xe0>)
    3fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    3fb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3fb6:	2303      	movs	r3, #3
    3fb8:	aa07      	add	r2, sp, #28
    3fba:	9301      	str	r3, [sp, #4]
    3fbc:	9307      	str	r3, [sp, #28]
    3fbe:	f009 fe6d 	bl	dc9c <z_log_msg2_static_create.constprop.0>
    3fc2:	e7ed      	b.n	3fa0 <set_endpoint+0x98>
	} else if (ret) {
    3fc4:	2800      	cmp	r0, #0
    3fc6:	d0e0      	beq.n	3f8a <set_endpoint+0x82>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    3fc8:	4803      	ldr	r0, [pc, #12]	; (3fd8 <set_endpoint+0xd0>)
    3fca:	6803      	ldr	r3, [r0, #0]
    3fcc:	075b      	lsls	r3, r3, #29
    3fce:	d0e7      	beq.n	3fa0 <set_endpoint+0x98>
    3fd0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3fd4:	4a05      	ldr	r2, [pc, #20]	; (3fec <set_endpoint+0xe4>)
    3fd6:	e7ea      	b.n	3fae <set_endpoint+0xa6>
    3fd8:	20000288 	.word	0x20000288
    3fdc:	00011353 	.word	0x00011353
    3fe0:	0001139a 	.word	0x0001139a
    3fe4:	200014f8 	.word	0x200014f8
    3fe8:	00011376 	.word	0x00011376
    3fec:	000113ba 	.word	0x000113ba

00003ff0 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    3ff0:	2804      	cmp	r0, #4
{
    3ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ff6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4080 <CONFIG_USB_DEVICE_PID+0x6f>
    3ffa:	4604      	mov	r4, r0
    3ffc:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    3ffe:	d10e      	bne.n	401e <CONFIG_USB_DEVICE_PID+0xd>
		usb_reset_alt_setting();
    4000:	f7ff ff48 	bl	3e94 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    4004:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4084 <CONFIG_USB_DEVICE_PID+0x73>
    4008:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    400c:	b15b      	cbz	r3, 4026 <CONFIG_USB_DEVICE_PID+0x15>
			usb_cancel_transfers();
    400e:	f000 ff4d 	bl	4eac <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    4012:	2c04      	cmp	r4, #4
    4014:	d001      	beq.n	401a <CONFIG_USB_DEVICE_PID+0x9>
    4016:	2c01      	cmp	r4, #1
    4018:	d105      	bne.n	4026 <CONFIG_USB_DEVICE_PID+0x15>
    401a:	4d1b      	ldr	r5, [pc, #108]	; (4088 <CONFIG_USB_DEVICE_PID+0x77>)
    401c:	e016      	b.n	404c <CONFIG_USB_DEVICE_PID+0x3b>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    401e:	2805      	cmp	r0, #5
    4020:	d0f0      	beq.n	4004 <forward_status_cb+0x14>
    4022:	2801      	cmp	r0, #1
    4024:	d0ee      	beq.n	4004 <forward_status_cb+0x14>
    4026:	4d18      	ldr	r5, [pc, #96]	; (4088 <CONFIG_USB_DEVICE_PID+0x77>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4028:	4545      	cmp	r5, r8
    402a:	d31e      	bcc.n	406a <CONFIG_USB_DEVICE_PID+0x59>
	if (usb_dev.user_status_callback) {
    402c:	4b15      	ldr	r3, [pc, #84]	; (4084 <CONFIG_USB_DEVICE_PID+0x73>)
    402e:	6a1b      	ldr	r3, [r3, #32]
    4030:	b31b      	cbz	r3, 407a <CONFIG_USB_DEVICE_PID+0x69>
		usb_dev.user_status_callback(status, param);
    4032:	4631      	mov	r1, r6
    4034:	4620      	mov	r0, r4
}
    4036:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    403a:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    403c:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4040:	2700      	movs	r7, #0
    4042:	7f2a      	ldrb	r2, [r5, #28]
    4044:	b2fb      	uxtb	r3, r7
    4046:	429a      	cmp	r2, r3
    4048:	d803      	bhi.n	4052 <CONFIG_USB_DEVICE_PID+0x41>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    404a:	3524      	adds	r5, #36	; 0x24
    404c:	4545      	cmp	r5, r8
    404e:	d3f5      	bcc.n	403c <CONFIG_USB_DEVICE_PID+0x2b>
    4050:	e007      	b.n	4062 <CONFIG_USB_DEVICE_PID+0x51>
	return usb_dc_ep_disable(ep_data->ep_addr);
    4052:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    4056:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    4058:	7918      	ldrb	r0, [r3, #4]
    405a:	f002 ffbf 	bl	6fdc <usb_dc_ep_disable>
			if (ret < 0) {
    405e:	2800      	cmp	r0, #0
    4060:	daef      	bge.n	4042 <CONFIG_USB_DEVICE_PID+0x31>
				usb_dev.configured = false;
    4062:	2300      	movs	r3, #0
    4064:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    4068:	e7dd      	b.n	4026 <CONFIG_USB_DEVICE_PID+0x15>
		if (cfg_data->cb_usb_status) {
    406a:	68eb      	ldr	r3, [r5, #12]
    406c:	b11b      	cbz	r3, 4076 <CONFIG_USB_DEVICE_PID+0x65>
			cfg_data->cb_usb_status(cfg_data, status, param);
    406e:	4632      	mov	r2, r6
    4070:	4621      	mov	r1, r4
    4072:	4628      	mov	r0, r5
    4074:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4076:	3524      	adds	r5, #36	; 0x24
    4078:	e7d6      	b.n	4028 <CONFIG_USB_DEVICE_PID+0x17>
}
    407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    407e:	bf00      	nop
    4080:	20000468 	.word	0x20000468
    4084:	200014f8 	.word	0x200014f8
    4088:	20000444 	.word	0x20000444

0000408c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    408c:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    408e:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4090:	b088      	sub	sp, #32
	if (USB_EP_GET_IDX(ep) == 0) {
    4092:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4094:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    4096:	f88d 4003 	strb.w	r4, [sp, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    409a:	d007      	beq.n	40ac <usb_halt_endpoint_req.isra.0+0x20>
    409c:	4620      	mov	r0, r4
    409e:	f7ff ff01 	bl	3ea4 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    40a2:	b318      	cbz	r0, 40ec <usb_halt_endpoint_req.isra.0+0x60>
	return (usb_dev.configuration != 0);
    40a4:	4b1f      	ldr	r3, [pc, #124]	; (4124 <usb_halt_endpoint_req.isra.0+0x98>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    40a6:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    40aa:	b1f8      	cbz	r0, 40ec <usb_halt_endpoint_req.isra.0+0x60>
			LOG_INF("Set halt ep 0x%02x", ep);
    40ac:	481e      	ldr	r0, [pc, #120]	; (4128 <usb_halt_endpoint_req.isra.0+0x9c>)
    40ae:	4e1d      	ldr	r6, [pc, #116]	; (4124 <usb_halt_endpoint_req.isra.0+0x98>)
    40b0:	6803      	ldr	r3, [r0, #0]
    40b2:	f003 0307 	and.w	r3, r3, #7
		if (halt) {
    40b6:	b1dd      	cbz	r5, 40f0 <usb_halt_endpoint_req.isra.0+0x64>
			LOG_INF("Set halt ep 0x%02x", ep);
    40b8:	2b02      	cmp	r3, #2
    40ba:	d90a      	bls.n	40d2 <usb_halt_endpoint_req.isra.0+0x46>
    40bc:	4b1b      	ldr	r3, [pc, #108]	; (412c <usb_halt_endpoint_req.isra.0+0xa0>)
    40be:	aa05      	add	r2, sp, #20
    40c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
    40c4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    40c8:	2303      	movs	r3, #3
    40ca:	9301      	str	r3, [sp, #4]
    40cc:	9305      	str	r3, [sp, #20]
    40ce:	f009 fde5 	bl	dc9c <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_set_stall(ep);
    40d2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    40d6:	f002 fedf 	bl	6e98 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    40da:	69f3      	ldr	r3, [r6, #28]
    40dc:	b90b      	cbnz	r3, 40e2 <usb_halt_endpoint_req.isra.0+0x56>
		return true;
    40de:	2001      	movs	r0, #1
    40e0:	e004      	b.n	40ec <usb_halt_endpoint_req.isra.0+0x60>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    40e2:	2008      	movs	r0, #8
    40e4:	f10d 0103 	add.w	r1, sp, #3
    40e8:	4798      	blx	r3
		return true;
    40ea:	4628      	mov	r0, r5
}
    40ec:	b008      	add	sp, #32
    40ee:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    40f0:	2b02      	cmp	r3, #2
    40f2:	d90a      	bls.n	410a <usb_halt_endpoint_req.isra.0+0x7e>
    40f4:	4b0e      	ldr	r3, [pc, #56]	; (4130 <usb_halt_endpoint_req.isra.0+0xa4>)
    40f6:	aa05      	add	r2, sp, #20
    40f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
    40fc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4100:	2303      	movs	r3, #3
    4102:	9301      	str	r3, [sp, #4]
    4104:	9305      	str	r3, [sp, #20]
    4106:	f009 fdc9 	bl	dc9c <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_clear_stall(ep);
    410a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    410e:	f002 feff 	bl	6f10 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    4112:	69f3      	ldr	r3, [r6, #28]
    4114:	2b00      	cmp	r3, #0
    4116:	d0e2      	beq.n	40de <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    4118:	f10d 0103 	add.w	r1, sp, #3
    411c:	2009      	movs	r0, #9
    411e:	4798      	blx	r3
    4120:	e7dd      	b.n	40de <usb_halt_endpoint_req.isra.0+0x52>
    4122:	bf00      	nop
    4124:	200014f8 	.word	0x200014f8
    4128:	20000288 	.word	0x20000288
    412c:	000113db 	.word	0x000113db
    4130:	000113ee 	.word	0x000113ee

00004134 <usb_handle_standard_request>:
{
    4134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    4138:	4ea1      	ldr	r6, [pc, #644]	; (43c0 <usb_handle_standard_request+0x28c>)
    413a:	69b3      	ldr	r3, [r6, #24]
{
    413c:	b08b      	sub	sp, #44	; 0x2c
    413e:	4605      	mov	r5, r0
    4140:	460f      	mov	r7, r1
    4142:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    4144:	b963      	cbnz	r3, 4160 <usb_handle_standard_request+0x2c>
	switch (setup->RequestType.recipient) {
    4146:	7828      	ldrb	r0, [r5, #0]
    4148:	f000 001f 	and.w	r0, r0, #31
    414c:	2801      	cmp	r0, #1
    414e:	f000 80a6 	beq.w	429e <usb_handle_standard_request+0x16a>
    4152:	2802      	cmp	r0, #2
    4154:	f000 813e 	beq.w	43d4 <usb_handle_standard_request+0x2a0>
    4158:	b138      	cbz	r0, 416a <usb_handle_standard_request+0x36>
		switch (setup->bRequest) {
    415a:	f06f 0015 	mvn.w	r0, #21
    415e:	e094      	b.n	428a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    4160:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    4162:	2800      	cmp	r0, #0
    4164:	d1ef      	bne.n	4146 <usb_handle_standard_request+0x12>
	int rc = 0;
    4166:	2000      	movs	r0, #0
    4168:	e08f      	b.n	428a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    416a:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    416e:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4170:	2a00      	cmp	r2, #0
    4172:	da31      	bge.n	41d8 <usb_handle_standard_request+0xa4>
		switch (setup->bRequest) {
    4174:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    4176:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    417a:	d010      	beq.n	419e <usb_handle_standard_request+0x6a>
    417c:	2b08      	cmp	r3, #8
    417e:	d025      	beq.n	41cc <usb_handle_standard_request+0x98>
    4180:	2b00      	cmp	r3, #0
    4182:	d1ea      	bne.n	415a <usb_handle_standard_request+0x26>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    4184:	2101      	movs	r1, #1
	data[1] = 0U;
    4186:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    4188:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    418a:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    418e:	2900      	cmp	r1, #0
    4190:	bf18      	it	ne
    4192:	2302      	movne	r3, #2
    4194:	f043 0301 	orr.w	r3, r3, #1
    4198:	7013      	strb	r3, [r2, #0]
		*len = 2;
    419a:	2302      	movs	r3, #2
    419c:	e01a      	b.n	41d4 <usb_handle_standard_request+0xa0>
			return usb_get_descriptor(setup, len, data_buf);
    419e:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    41a0:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    41a2:	1f11      	subs	r1, r2, #4
    41a4:	2901      	cmp	r1, #1
    41a6:	d9d8      	bls.n	415a <usb_handle_standard_request+0x26>
    41a8:	2a07      	cmp	r2, #7
    41aa:	d8d6      	bhi.n	415a <usb_handle_standard_request+0x26>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    41ac:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    41ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    41b0:	781c      	ldrb	r4, [r3, #0]
    41b2:	2c00      	cmp	r4, #0
    41b4:	d0d1      	beq.n	415a <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    41b6:	785d      	ldrb	r5, [r3, #1]
    41b8:	4295      	cmp	r5, r2
    41ba:	d103      	bne.n	41c4 <usb_handle_standard_request+0x90>
			if (cur_index == index) {
    41bc:	4281      	cmp	r1, r0
    41be:	f000 813e 	beq.w	443e <usb_handle_standard_request+0x30a>
			cur_index++;
    41c2:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    41c4:	4423      	add	r3, r4
    41c6:	e7f3      	b.n	41b0 <usb_handle_standard_request+0x7c>
			*len = p[DESC_bLength];
    41c8:	781b      	ldrb	r3, [r3, #0]
    41ca:	e13e      	b.n	444a <usb_handle_standard_request+0x316>
			data[0] = usb_dev.configuration;
    41cc:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    41d0:	7013      	strb	r3, [r2, #0]
			*len = 1;
    41d2:	2301      	movs	r3, #1
		*len = 2;
    41d4:	603b      	str	r3, [r7, #0]
		return true;
    41d6:	e058      	b.n	428a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    41d8:	3b01      	subs	r3, #1
    41da:	2b08      	cmp	r3, #8
    41dc:	d8bd      	bhi.n	415a <usb_handle_standard_request+0x26>
    41de:	a201      	add	r2, pc, #4	; (adr r2, 41e4 <usb_handle_standard_request+0xb0>)
    41e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41e4:	0000427d 	.word	0x0000427d
    41e8:	0000415b 	.word	0x0000415b
    41ec:	00004291 	.word	0x00004291
    41f0:	0000415b 	.word	0x0000415b
    41f4:	00004209 	.word	0x00004209
    41f8:	0000415b 	.word	0x0000415b
    41fc:	0000415b 	.word	0x0000415b
    4200:	0000415b 	.word	0x0000415b
    4204:	00004215 	.word	0x00004215
			return !usb_dc_set_address(setup->wValue);
    4208:	78a8      	ldrb	r0, [r5, #2]
    420a:	f002 fdbb 	bl	6d84 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    420e:	2800      	cmp	r0, #0
    4210:	d0a9      	beq.n	4166 <usb_handle_standard_request+0x32>
    4212:	e7a2      	b.n	415a <usb_handle_standard_request+0x26>
	if (setup->wValue == 0U) {
    4214:	886c      	ldrh	r4, [r5, #2]
    4216:	b144      	cbz	r4, 422a <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    4218:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    421c:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    421e:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    4220:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    4222:	783c      	ldrb	r4, [r7, #0]
    4224:	b96c      	cbnz	r4, 4242 <usb_handle_standard_request+0x10e>
	if (found) {
    4226:	2800      	cmp	r0, #0
    4228:	d097      	beq.n	415a <usb_handle_standard_request+0x26>
		usb_reset_alt_setting();
    422a:	f7ff fe33 	bl	3e94 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    422e:	886b      	ldrh	r3, [r5, #2]
    4230:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    4234:	69f3      	ldr	r3, [r6, #28]
    4236:	2b00      	cmp	r3, #0
    4238:	d095      	beq.n	4166 <usb_handle_standard_request+0x32>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    423a:	4962      	ldr	r1, [pc, #392]	; (43c4 <usb_handle_standard_request+0x290>)
    423c:	2003      	movs	r0, #3
    423e:	4798      	blx	r3
    4240:	e791      	b.n	4166 <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    4242:	787b      	ldrb	r3, [r7, #1]
    4244:	2b04      	cmp	r3, #4
    4246:	d00c      	beq.n	4262 <usb_handle_standard_request+0x12e>
    4248:	2b05      	cmp	r3, #5
    424a:	d00d      	beq.n	4268 <usb_handle_standard_request+0x134>
    424c:	2b02      	cmp	r3, #2
    424e:	d105      	bne.n	425c <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    4250:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    4254:	886a      	ldrh	r2, [r5, #2]
				found = true;
    4256:	4542      	cmp	r2, r8
    4258:	bf08      	it	eq
    425a:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    425c:	783b      	ldrb	r3, [r7, #0]
    425e:	441f      	add	r7, r3
    4260:	e7df      	b.n	4222 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    4262:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    4266:	e7f9      	b.n	425c <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    4268:	886b      	ldrh	r3, [r5, #2]
    426a:	4543      	cmp	r3, r8
    426c:	d1f6      	bne.n	425c <usb_handle_standard_request+0x128>
    426e:	f1b9 0f00 	cmp.w	r9, #0
    4272:	d1f3      	bne.n	425c <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    4274:	4638      	mov	r0, r7
    4276:	f7ff fe47 	bl	3f08 <set_endpoint>
			break;
    427a:	e7ef      	b.n	425c <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    427c:	886b      	ldrh	r3, [r5, #2]
    427e:	2b01      	cmp	r3, #1
    4280:	f47f af6b 	bne.w	415a <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = false;
    4284:	2000      	movs	r0, #0
    4286:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    428a:	b00b      	add	sp, #44	; 0x2c
    428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    4290:	886b      	ldrh	r3, [r5, #2]
    4292:	2b01      	cmp	r3, #1
    4294:	f47f af61 	bne.w	415a <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = true;
    4298:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    429c:	e763      	b.n	4166 <usb_handle_standard_request+0x32>
	if (!is_device_configured() ||
    429e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    42a2:	2b00      	cmp	r3, #0
    42a4:	f43f af59 	beq.w	415a <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    42a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    42aa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    42ae:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    42b0:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    42b2:	781a      	ldrb	r2, [r3, #0]
    42b4:	2a00      	cmp	r2, #0
    42b6:	f43f af50 	beq.w	415a <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    42ba:	7859      	ldrb	r1, [r3, #1]
    42bc:	2902      	cmp	r1, #2
    42be:	d104      	bne.n	42ca <usb_handle_standard_request+0x196>
			if (interface < cfg_descr->bNumInterfaces) {
    42c0:	f893 e004 	ldrb.w	lr, [r3, #4]
    42c4:	4586      	cmp	lr, r0
    42c6:	f200 80c2 	bhi.w	444e <usb_handle_standard_request+0x31a>
		p += p[DESC_bLength];
    42ca:	4413      	add	r3, r2
    42cc:	e7f1      	b.n	42b2 <usb_handle_standard_request+0x17e>
			data[0] = 0U;
    42ce:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    42d0:	7050      	strb	r0, [r2, #1]
			*len = 2;
    42d2:	6039      	str	r1, [r7, #0]
			return true;
    42d4:	e7d9      	b.n	428a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    42d6:	440c      	add	r4, r1
    42d8:	e0c7      	b.n	446a <usb_handle_standard_request+0x336>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    42da:	280b      	cmp	r0, #11
    42dc:	f47f af3d 	bne.w	415a <usb_handle_standard_request+0x26>
	bool ret = false;
    42e0:	2200      	movs	r2, #0
	uint8_t cur_iface = 0xFF;
    42e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    42e6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 43c8 <usb_handle_standard_request+0x294>
	uint8_t cur_alt_setting = 0xFF;
    42ea:	464f      	mov	r7, r9
	const uint8_t *if_desc = NULL;
    42ec:	4690      	mov	r8, r2
    42ee:	e006      	b.n	42fe <usb_handle_standard_request+0x1ca>
		switch (p[DESC_bDescriptorType]) {
    42f0:	7861      	ldrb	r1, [r4, #1]
    42f2:	2904      	cmp	r1, #4
    42f4:	d011      	beq.n	431a <usb_handle_standard_request+0x1e6>
    42f6:	2905      	cmp	r1, #5
    42f8:	d023      	beq.n	4342 <usb_handle_standard_request+0x20e>
		p += p[DESC_bLength];
    42fa:	7821      	ldrb	r1, [r4, #0]
    42fc:	440c      	add	r4, r1
	while (p[DESC_bLength] != 0U) {
    42fe:	7821      	ldrb	r1, [r4, #0]
    4300:	2900      	cmp	r1, #0
    4302:	d1f5      	bne.n	42f0 <usb_handle_standard_request+0x1bc>
	if (usb_dev.status_callback) {
    4304:	69f3      	ldr	r3, [r6, #28]
    4306:	b123      	cbz	r3, 4312 <usb_handle_standard_request+0x1de>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    4308:	4641      	mov	r1, r8
    430a:	2007      	movs	r0, #7
    430c:	9201      	str	r2, [sp, #4]
    430e:	4798      	blx	r3
    4310:	9a01      	ldr	r2, [sp, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    4312:	2a00      	cmp	r2, #0
    4314:	f47f af27 	bne.w	4166 <usb_handle_standard_request+0x32>
    4318:	e71f      	b.n	415a <usb_handle_standard_request+0x26>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    431a:	f894 9002 	ldrb.w	r9, [r4, #2]
			if (cur_iface == setup->wIndex &&
    431e:	88a8      	ldrh	r0, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    4320:	78e7      	ldrb	r7, [r4, #3]
			if (cur_iface == setup->wIndex &&
    4322:	4581      	cmp	r9, r0
    4324:	4649      	mov	r1, r9
    4326:	d1e8      	bne.n	42fa <usb_handle_standard_request+0x1c6>
			    cur_alt_setting == setup->wValue) {
    4328:	f8b5 c002 	ldrh.w	ip, [r5, #2]
			if (cur_iface == setup->wIndex &&
    432c:	4567      	cmp	r7, ip
    432e:	b2b8      	uxth	r0, r7
    4330:	d1e3      	bne.n	42fa <usb_handle_standard_request+0x1c6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4332:	2907      	cmp	r1, #7
    4334:	d842      	bhi.n	43bc <usb_handle_standard_request+0x288>
		usb_dev.alt_setting[iface] = alt_setting;
    4336:	4431      	add	r1, r6
		return true;
    4338:	46a0      	mov	r8, r4
				ret = usb_set_alt_setting(setup->wIndex,
    433a:	f881 00bb 	strb.w	r0, [r1, #187]	; 0xbb
	return true;
    433e:	2201      	movs	r2, #1
    4340:	e7db      	b.n	42fa <usb_handle_standard_request+0x1c6>
			if (cur_iface == setup->wIndex) {
    4342:	88a9      	ldrh	r1, [r5, #4]
    4344:	4549      	cmp	r1, r9
    4346:	d1d8      	bne.n	42fa <usb_handle_standard_request+0x1c6>
	if (cur_alt_setting != alt_setting) {
    4348:	78aa      	ldrb	r2, [r5, #2]
    434a:	42ba      	cmp	r2, r7
    434c:	d031      	beq.n	43b2 <usb_handle_standard_request+0x27e>
		ret = reset_endpoint(ep_desc);
    434e:	f894 b002 	ldrb.w	fp, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    4352:	4658      	mov	r0, fp
    4354:	f000 fd8c 	bl	4e70 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    4358:	4658      	mov	r0, fp
    435a:	f002 fe3f 	bl	6fdc <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    435e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4362:	d111      	bne.n	4388 <usb_handle_standard_request+0x254>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    4364:	f8da 2000 	ldr.w	r2, [sl]
    4368:	f012 0f06 	tst.w	r2, #6
    436c:	d0e7      	beq.n	433e <usb_handle_standard_request+0x20a>
    436e:	2203      	movs	r2, #3
    4370:	4b16      	ldr	r3, [pc, #88]	; (43cc <usb_handle_standard_request+0x298>)
    4372:	9203      	str	r2, [sp, #12]
    4374:	9207      	str	r2, [sp, #28]
    4376:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    437a:	aa07      	add	r2, sp, #28
    437c:	4650      	mov	r0, sl
    437e:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    4382:	f009 fc8b 	bl	dc9c <z_log_msg2_static_create.constprop.0>
    4386:	e7da      	b.n	433e <usb_handle_standard_request+0x20a>
	} else if (ret) {
    4388:	2800      	cmp	r0, #0
    438a:	d0d8      	beq.n	433e <usb_handle_standard_request+0x20a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    438c:	f8da 2000 	ldr.w	r2, [sl]
    4390:	f012 0207 	ands.w	r2, r2, #7
    4394:	d0b1      	beq.n	42fa <usb_handle_standard_request+0x1c6>
    4396:	2203      	movs	r2, #3
    4398:	4b0d      	ldr	r3, [pc, #52]	; (43d0 <usb_handle_standard_request+0x29c>)
    439a:	9203      	str	r2, [sp, #12]
    439c:	9207      	str	r2, [sp, #28]
    439e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    43a2:	aa07      	add	r2, sp, #28
    43a4:	4650      	mov	r0, sl
    43a6:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    43aa:	f009 fc77 	bl	dc9c <z_log_msg2_static_create.constprop.0>
	return false;
    43ae:	2200      	movs	r2, #0
    43b0:	e7a3      	b.n	42fa <usb_handle_standard_request+0x1c6>
		ret = set_endpoint(ep_desc);
    43b2:	4620      	mov	r0, r4
    43b4:	f7ff fda8 	bl	3f08 <set_endpoint>
    43b8:	4602      	mov	r2, r0
    43ba:	e79e      	b.n	42fa <usb_handle_standard_request+0x1c6>
    43bc:	46a0      	mov	r8, r4
    43be:	e7f6      	b.n	43ae <usb_handle_standard_request+0x27a>
    43c0:	200014f8 	.word	0x200014f8
    43c4:	200015b2 	.word	0x200015b2
    43c8:	20000288 	.word	0x20000288
    43cc:	00011403 	.word	0x00011403
    43d0:	00011424 	.word	0x00011424
	if (usb_reqtype_is_to_host(setup)) {
    43d4:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    43d8:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    43da:	2a00      	cmp	r2, #0
    43dc:	da19      	bge.n	4412 <usb_handle_standard_request+0x2de>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    43de:	2b00      	cmp	r3, #0
    43e0:	f47f aebb 	bne.w	415a <usb_handle_standard_request+0x26>
	uint8_t ep = setup->wIndex;
    43e4:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    43e6:	0663      	lsls	r3, r4, #25
    43e8:	d00a      	beq.n	4400 <usb_handle_standard_request+0x2cc>
    43ea:	4620      	mov	r0, r4
    43ec:	f7ff fd5a 	bl	3ea4 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    43f0:	2800      	cmp	r0, #0
    43f2:	f43f aeb2 	beq.w	415a <usb_handle_standard_request+0x26>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    43f6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    43fa:	2b00      	cmp	r3, #0
    43fc:	f43f aead 	beq.w	415a <usb_handle_standard_request+0x26>
    4400:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    4404:	4620      	mov	r0, r4
    4406:	4629      	mov	r1, r5
    4408:	f002 fda2 	bl	6f50 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    440c:	2000      	movs	r0, #0
    440e:	7068      	strb	r0, [r5, #1]
    4410:	e6c3      	b.n	419a <usb_handle_standard_request+0x66>
		switch (setup->bRequest) {
    4412:	2b01      	cmp	r3, #1
    4414:	d008      	beq.n	4428 <usb_handle_standard_request+0x2f4>
    4416:	2b03      	cmp	r3, #3
    4418:	f47f ae9f 	bne.w	415a <usb_handle_standard_request+0x26>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    441c:	886b      	ldrh	r3, [r5, #2]
    441e:	2b00      	cmp	r3, #0
    4420:	f47f ae9b 	bne.w	415a <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    4424:	2101      	movs	r1, #1
    4426:	e003      	b.n	4430 <usb_handle_standard_request+0x2fc>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    4428:	8869      	ldrh	r1, [r5, #2]
    442a:	2900      	cmp	r1, #0
    442c:	f47f ae95 	bne.w	415a <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    4430:	88a8      	ldrh	r0, [r5, #4]
    4432:	f7ff fe2b 	bl	408c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    4436:	2800      	cmp	r0, #0
    4438:	f47f ae95 	bne.w	4166 <usb_handle_standard_request+0x32>
    443c:	e68d      	b.n	415a <usb_handle_standard_request+0x26>
		if (type == USB_DESC_CONFIGURATION) {
    443e:	2a02      	cmp	r2, #2
		*data = p;
    4440:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    4444:	f47f aec0 	bne.w	41c8 <usb_handle_standard_request+0x94>
			*len = (p[CONF_DESC_wTotalLength]) |
    4448:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    444a:	603b      	str	r3, [r7, #0]
    444c:	e68b      	b.n	4166 <usb_handle_standard_request+0x32>
	if (usb_reqtype_is_to_host(setup)) {
    444e:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    4452:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4454:	2b00      	cmp	r3, #0
    4456:	f6bf af40 	bge.w	42da <usb_handle_standard_request+0x1a6>
    445a:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    445e:	2800      	cmp	r0, #0
    4460:	f43f af35 	beq.w	42ce <usb_handle_standard_request+0x19a>
    4464:	280a      	cmp	r0, #10
    4466:	f47f ae78 	bne.w	415a <usb_handle_standard_request+0x26>
	while (p[DESC_bLength] != 0U) {
    446a:	7821      	ldrb	r1, [r4, #0]
    446c:	2900      	cmp	r1, #0
    446e:	f43f ae74 	beq.w	415a <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    4472:	7863      	ldrb	r3, [r4, #1]
    4474:	2b04      	cmp	r3, #4
    4476:	f47f af2e 	bne.w	42d6 <usb_handle_standard_request+0x1a2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    447a:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    447c:	459c      	cmp	ip, r3
    447e:	f47f af2a 	bne.w	42d6 <usb_handle_standard_request+0x1a2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4482:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    4484:	bf96      	itet	ls
    4486:	199b      	addls	r3, r3, r6
	return 0;
    4488:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    448a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    448e:	7013      	strb	r3, [r2, #0]
				*len = 1;
    4490:	2301      	movs	r3, #1
    4492:	e7da      	b.n	444a <usb_handle_standard_request+0x316>

00004494 <usb_write>:
{
    4494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    4498:	f8df a058 	ldr.w	sl, [pc, #88]	; 44f4 <usb_write+0x60>
{
    449c:	b089      	sub	sp, #36	; 0x24
    449e:	4605      	mov	r5, r0
    44a0:	460f      	mov	r7, r1
    44a2:	4690      	mov	r8, r2
    44a4:	4699      	mov	r9, r3
    44a6:	2604      	movs	r6, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    44a8:	f04f 0b03 	mov.w	fp, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    44ac:	464b      	mov	r3, r9
    44ae:	4642      	mov	r2, r8
    44b0:	4639      	mov	r1, r7
    44b2:	4628      	mov	r0, r5
    44b4:	f002 fdb8 	bl	7028 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    44b8:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    44bc:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    44be:	d115      	bne.n	44ec <usb_write+0x58>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    44c0:	f8da 3000 	ldr.w	r3, [sl]
    44c4:	f013 0f06 	tst.w	r3, #6
    44c8:	d00c      	beq.n	44e4 <usb_write+0x50>
    44ca:	4b0b      	ldr	r3, [pc, #44]	; (44f8 <usb_write+0x64>)
    44cc:	f8cd b004 	str.w	fp, [sp, #4]
    44d0:	aa05      	add	r2, sp, #20
    44d2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    44d6:	4650      	mov	r0, sl
    44d8:	e9cd 3506 	strd	r3, r5, [sp, #24]
    44dc:	f8cd b014 	str.w	fp, [sp, #20]
    44e0:	f009 fbdc 	bl	dc9c <z_log_msg2_static_create.constprop.0>
	z_impl_k_yield();
    44e4:	f006 fea0 	bl	b228 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    44e8:	3e01      	subs	r6, #1
    44ea:	d1df      	bne.n	44ac <usb_write+0x18>
}
    44ec:	4620      	mov	r0, r4
    44ee:	b009      	add	sp, #36	; 0x24
    44f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44f4:	20000288 	.word	0x20000288
    44f8:	00011446 	.word	0x00011446

000044fc <usb_data_to_host>:
{
    44fc:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    44fe:	4c13      	ldr	r4, [pc, #76]	; (454c <usb_data_to_host+0x50>)
    4500:	7d23      	ldrb	r3, [r4, #20]
    4502:	b9cb      	cbnz	r3, 4538 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    4504:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4506:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    4508:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    450a:	ab01      	add	r3, sp, #4
    450c:	2080      	movs	r0, #128	; 0x80
    450e:	f7ff ffc1 	bl	4494 <usb_write>
		usb_dev.data_buf += chunk;
    4512:	9a01      	ldr	r2, [sp, #4]
    4514:	68a3      	ldr	r3, [r4, #8]
    4516:	4413      	add	r3, r2
    4518:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    451a:	68e3      	ldr	r3, [r4, #12]
    451c:	1a9b      	subs	r3, r3, r2
    451e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    4520:	b943      	cbnz	r3, 4534 <usb_data_to_host+0x38>
    4522:	b13a      	cbz	r2, 4534 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    4524:	6923      	ldr	r3, [r4, #16]
    4526:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    4528:	429a      	cmp	r2, r3
    452a:	dd03      	ble.n	4534 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    452c:	069b      	lsls	r3, r3, #26
    452e:	d101      	bne.n	4534 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    4530:	2301      	movs	r3, #1
    4532:	7523      	strb	r3, [r4, #20]
}
    4534:	b002      	add	sp, #8
    4536:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    4538:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    453a:	461a      	mov	r2, r3
    453c:	4619      	mov	r1, r3
    453e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    4540:	7523      	strb	r3, [r4, #20]
}
    4542:	b002      	add	sp, #8
    4544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    4548:	f002 bd6e 	b.w	7028 <usb_dc_ep_write>
    454c:	200014f8 	.word	0x200014f8

00004550 <usb_handle_control_transfer>:
{
    4550:	b530      	push	{r4, r5, lr}
    4552:	b08b      	sub	sp, #44	; 0x2c
	uint32_t chunk = 0U;
    4554:	2300      	movs	r3, #0
{
    4556:	4602      	mov	r2, r0
    4558:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    455a:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    455c:	2800      	cmp	r0, #0
    455e:	d16d      	bne.n	463c <usb_handle_control_transfer+0xec>
    4560:	2900      	cmp	r1, #0
    4562:	d14a      	bne.n	45fa <usb_handle_control_transfer+0xaa>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    4564:	2208      	movs	r2, #8
    4566:	460b      	mov	r3, r1
    4568:	eb0d 0102 	add.w	r1, sp, r2
    456c:	f009 feb1 	bl	e2d2 <usb_dc_ep_read>
    4570:	2800      	cmp	r0, #0
    4572:	da04      	bge.n	457e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4574:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4576:	f002 fc8f 	bl	6e98 <usb_dc_ep_set_stall>
}
    457a:	b00b      	add	sp, #44	; 0x2c
    457c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    457e:	4c34      	ldr	r4, [pc, #208]	; (4650 <usb_handle_control_transfer+0x100>)
		setup->bRequest = setup_raw.bRequest;
    4580:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    4584:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    4588:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    458a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    458e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    4590:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    4594:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    4596:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    4598:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    459c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    45a0:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    45a2:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    45a4:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    45a8:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    45aa:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    45ac:	d418      	bmi.n	45e0 <usb_handle_control_transfer+0x90>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    45ae:	2b80      	cmp	r3, #128	; 0x80
    45b0:	d912      	bls.n	45d8 <usb_handle_control_transfer+0x88>
				LOG_ERR("Request buffer too small");
    45b2:	4828      	ldr	r0, [pc, #160]	; (4654 <usb_handle_control_transfer+0x104>)
    45b4:	6803      	ldr	r3, [r0, #0]
    45b6:	075b      	lsls	r3, r3, #29
    45b8:	d009      	beq.n	45ce <usb_handle_control_transfer+0x7e>
    45ba:	4b27      	ldr	r3, [pc, #156]	; (4658 <usb_handle_control_transfer+0x108>)
    45bc:	9308      	str	r3, [sp, #32]
    45be:	aa07      	add	r2, sp, #28
    45c0:	2302      	movs	r3, #2
    45c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    45c6:	9301      	str	r3, [sp, #4]
    45c8:	9307      	str	r3, [sp, #28]
    45ca:	f009 fb67 	bl	dc9c <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    45ce:	2080      	movs	r0, #128	; 0x80
    45d0:	f002 fc62 	bl	6e98 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    45d4:	2000      	movs	r0, #0
    45d6:	e7ce      	b.n	4576 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    45d8:	b113      	cbz	r3, 45e0 <usb_handle_control_transfer+0x90>
				usb_dev.data_buf_residue = setup->wLength;
    45da:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    45de:	e7cc      	b.n	457a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    45e0:	f7ff fc7c 	bl	3edc <usb_handle_request.constprop.0>
    45e4:	2800      	cmp	r0, #0
    45e6:	d0c5      	beq.n	4574 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    45e8:	88e2      	ldrh	r2, [r4, #6]
    45ea:	6923      	ldr	r3, [r4, #16]
    45ec:	429a      	cmp	r2, r3
    45ee:	bfd4      	ite	le
    45f0:	60e2      	strle	r2, [r4, #12]
    45f2:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    45f4:	f7ff ff82 	bl	44fc <usb_data_to_host>
    45f8:	e7bf      	b.n	457a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    45fa:	4c15      	ldr	r4, [pc, #84]	; (4650 <usb_handle_control_transfer+0x100>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    45fc:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    4600:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4602:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    4604:	dc04      	bgt.n	4610 <usb_handle_control_transfer+0xc0>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4606:	f009 fe64 	bl	e2d2 <usb_dc_ep_read>
    460a:	2800      	cmp	r0, #0
    460c:	dab5      	bge.n	457a <usb_handle_control_transfer+0x2a>
    460e:	e7b1      	b.n	4574 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4610:	462a      	mov	r2, r5
    4612:	f009 fe5e 	bl	e2d2 <usb_dc_ep_read>
    4616:	2800      	cmp	r0, #0
    4618:	dbd9      	blt.n	45ce <usb_handle_control_transfer+0x7e>
		usb_dev.data_buf += chunk;
    461a:	9900      	ldr	r1, [sp, #0]
    461c:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    461e:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    4620:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    4622:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    4624:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4626:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    4628:	2b00      	cmp	r3, #0
    462a:	d1a6      	bne.n	457a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    462c:	f104 0338 	add.w	r3, r4, #56	; 0x38
    4630:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    4632:	f7ff fc53 	bl	3edc <usb_handle_request.constprop.0>
    4636:	2800      	cmp	r0, #0
    4638:	d1dc      	bne.n	45f4 <usb_handle_control_transfer+0xa4>
    463a:	e79b      	b.n	4574 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    463c:	2880      	cmp	r0, #128	; 0x80
    463e:	d19c      	bne.n	457a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    4640:	4b03      	ldr	r3, [pc, #12]	; (4650 <usb_handle_control_transfer+0x100>)
    4642:	68da      	ldr	r2, [r3, #12]
    4644:	2a00      	cmp	r2, #0
    4646:	d1d5      	bne.n	45f4 <usb_handle_control_transfer+0xa4>
    4648:	7d1b      	ldrb	r3, [r3, #20]
    464a:	2b00      	cmp	r3, #0
    464c:	d1d2      	bne.n	45f4 <usb_handle_control_transfer+0xa4>
    464e:	e794      	b.n	457a <usb_handle_control_transfer+0x2a>
    4650:	200014f8 	.word	0x200014f8
    4654:	20000288 	.word	0x20000288
    4658:	0001146d 	.word	0x0001146d

0000465c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    465c:	4b05      	ldr	r3, [pc, #20]	; (4674 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    465e:	4a06      	ldr	r2, [pc, #24]	; (4678 <usb_set_config+0x1c>)
    4660:	629a      	str	r2, [r3, #40]	; 0x28
    4662:	4a06      	ldr	r2, [pc, #24]	; (467c <usb_set_config+0x20>)
    4664:	62da      	str	r2, [r3, #44]	; 0x2c
    4666:	4a06      	ldr	r2, [pc, #24]	; (4680 <usb_set_config+0x24>)
    4668:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    466a:	4a06      	ldr	r2, [pc, #24]	; (4684 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    466c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    466e:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    4670:	2000      	movs	r0, #0
    4672:	4770      	bx	lr
    4674:	200014f8 	.word	0x200014f8
    4678:	00004135 	.word	0x00004135
    467c:	00003db9 	.word	0x00003db9
    4680:	00003e59 	.word	0x00003e59
    4684:	00003df9 	.word	0x00003df9

00004688 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    4688:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    468a:	4b10      	ldr	r3, [pc, #64]	; (46cc <usb_device_init+0x44>)
    468c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    4690:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    4692:	b9c4      	cbnz	r4, 46c6 <usb_device_init+0x3e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    4694:	f000 fa12 	bl	4abc <usb_get_device_descriptor>
	if (!device_descriptor) {
    4698:	b980      	cbnz	r0, 46bc <usb_device_init+0x34>
		LOG_ERR("Failed to configure USB device stack");
    469a:	480d      	ldr	r0, [pc, #52]	; (46d0 <usb_device_init+0x48>)
    469c:	6803      	ldr	r3, [r0, #0]
    469e:	075b      	lsls	r3, r3, #29
    46a0:	d009      	beq.n	46b6 <usb_device_init+0x2e>
    46a2:	4b0c      	ldr	r3, [pc, #48]	; (46d4 <usb_device_init+0x4c>)
    46a4:	9306      	str	r3, [sp, #24]
    46a6:	aa05      	add	r2, sp, #20
    46a8:	2302      	movs	r3, #2
    46aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46ae:	9301      	str	r3, [sp, #4]
    46b0:	9305      	str	r3, [sp, #20]
    46b2:	f009 faf3 	bl	dc9c <z_log_msg2_static_create.constprop.0>
    46b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    46ba:	e002      	b.n	46c2 <usb_device_init+0x3a>
		return -1;
	}

	usb_set_config(device_descriptor);
    46bc:	f7ff ffce 	bl	465c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    46c0:	4620      	mov	r0, r4
}
    46c2:	b008      	add	sp, #32
    46c4:	bd10      	pop	{r4, pc}
		return -EALREADY;
    46c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    46ca:	e7fa      	b.n	46c2 <usb_device_init+0x3a>
    46cc:	200014f8 	.word	0x200014f8
    46d0:	20000288 	.word	0x20000288
    46d4:	00011486 	.word	0x00011486

000046d8 <usb_enable>:
{
    46d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46dc:	4604      	mov	r4, r0
    46de:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    46e0:	4d3c      	ldr	r5, [pc, #240]	; (47d4 <usb_enable+0xfc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    46e2:	483d      	ldr	r0, [pc, #244]	; (47d8 <usb_enable+0x100>)
    46e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46ec:	f006 f8f2 	bl	a8d4 <z_impl_k_mutex_lock>
    46f0:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    46f4:	b18e      	cbz	r6, 471a <usb_enable+0x42>
		LOG_WRN("USB device support already enabled");
    46f6:	4839      	ldr	r0, [pc, #228]	; (47dc <usb_enable+0x104>)
    46f8:	6803      	ldr	r3, [r0, #0]
    46fa:	f013 0f06 	tst.w	r3, #6
    46fe:	d009      	beq.n	4714 <usb_enable+0x3c>
    4700:	4b37      	ldr	r3, [pc, #220]	; (47e0 <usb_enable+0x108>)
    4702:	9306      	str	r3, [sp, #24]
    4704:	aa05      	add	r2, sp, #20
    4706:	2302      	movs	r3, #2
    4708:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    470c:	9301      	str	r3, [sp, #4]
    470e:	9305      	str	r3, [sp, #20]
    4710:	f009 fac4 	bl	dc9c <z_log_msg2_static_create.constprop.0>
		ret = -EALREADY;
    4714:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4718:	e03f      	b.n	479a <usb_enable+0xc2>
	usb_dev.status_callback = cb;
    471a:	4832      	ldr	r0, [pc, #200]	; (47e4 <usb_enable+0x10c>)
	usb_dev.user_status_callback = status_cb;
    471c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    471e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    4720:	f002 fdea 	bl	72f8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    4724:	f002 faf0 	bl	6d08 <usb_dc_attach>
	if (ret < 0) {
    4728:	1e04      	subs	r4, r0, #0
    472a:	db36      	blt.n	479a <usb_enable+0xc2>
	ret = usb_transfer_init();
    472c:	f000 fbe6 	bl	4efc <usb_transfer_init>
	if (ret < 0) {
    4730:	1e04      	subs	r4, r0, #0
    4732:	db32      	blt.n	479a <usb_enable+0xc2>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4734:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    4736:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4738:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    473c:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    4740:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4744:	f002 fb70 	bl	6e28 <usb_dc_ep_configure>
	if (ret < 0) {
    4748:	1e04      	subs	r4, r0, #0
    474a:	db26      	blt.n	479a <usb_enable+0xc2>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    474c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    474e:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4750:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4754:	f002 fb68 	bl	6e28 <usb_dc_ep_configure>
	if (ret < 0) {
    4758:	1e04      	subs	r4, r0, #0
    475a:	db1e      	blt.n	479a <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    475c:	4922      	ldr	r1, [pc, #136]	; (47e8 <usb_enable+0x110>)
    475e:	4630      	mov	r0, r6
    4760:	f002 fdb6 	bl	72d0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    4764:	1e04      	subs	r4, r0, #0
    4766:	db18      	blt.n	479a <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    4768:	491f      	ldr	r1, [pc, #124]	; (47e8 <usb_enable+0x110>)
    476a:	4638      	mov	r0, r7
    476c:	f002 fdb0 	bl	72d0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    4770:	1e04      	subs	r4, r0, #0
    4772:	db12      	blt.n	479a <usb_enable+0xc2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4774:	4c1d      	ldr	r4, [pc, #116]	; (47ec <usb_enable+0x114>)
    4776:	f8df 8078 	ldr.w	r8, [pc, #120]	; 47f0 <usb_enable+0x118>
    477a:	4544      	cmp	r4, r8
    477c:	d314      	bcc.n	47a8 <usb_enable+0xd0>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    477e:	2000      	movs	r0, #0
    4780:	f002 fc02 	bl	6f88 <usb_dc_ep_enable>
	if (ret < 0) {
    4784:	1e04      	subs	r4, r0, #0
    4786:	db08      	blt.n	479a <usb_enable+0xc2>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    4788:	2080      	movs	r0, #128	; 0x80
    478a:	f002 fbfd 	bl	6f88 <usb_dc_ep_enable>
	if (ret < 0) {
    478e:	1e04      	subs	r4, r0, #0
    4790:	db03      	blt.n	479a <usb_enable+0xc2>
	usb_dev.enabled = true;
    4792:	2301      	movs	r3, #1
    4794:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    4798:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    479a:	480f      	ldr	r0, [pc, #60]	; (47d8 <usb_enable+0x100>)
    479c:	f006 f912 	bl	a9c4 <z_impl_k_mutex_unlock>
}
    47a0:	4620      	mov	r0, r4
    47a2:	b008      	add	sp, #32
    47a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    47a8:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    47aa:	2600      	movs	r6, #0
    47ac:	7f22      	ldrb	r2, [r4, #28]
    47ae:	b2f3      	uxtb	r3, r6
    47b0:	429a      	cmp	r2, r3
    47b2:	d801      	bhi.n	47b8 <usb_enable+0xe0>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    47b4:	3424      	adds	r4, #36	; 0x24
    47b6:	e7e0      	b.n	477a <usb_enable+0xa2>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    47b8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    47bc:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    47c0:	7910      	ldrb	r0, [r2, #4]
    47c2:	f002 fd85 	bl	72d0 <usb_dc_ep_set_callback>
    47c6:	3601      	adds	r6, #1
    47c8:	2800      	cmp	r0, #0
    47ca:	d0ef      	beq.n	47ac <usb_enable+0xd4>
    47cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    47d0:	e7e3      	b.n	479a <usb_enable+0xc2>
    47d2:	bf00      	nop
    47d4:	200014f8 	.word	0x200014f8
    47d8:	200002e0 	.word	0x200002e0
    47dc:	20000288 	.word	0x20000288
    47e0:	000114ab 	.word	0x000114ab
    47e4:	00003ff1 	.word	0x00003ff1
    47e8:	00004551 	.word	0x00004551
    47ec:	20000444 	.word	0x20000444
    47f0:	20000468 	.word	0x20000468

000047f4 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    47f4:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    47f6:	4b1f      	ldr	r3, [pc, #124]	; (4874 <usb_update_sn_string_descriptor+0x80>)
{
    47f8:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    47fa:	aa05      	add	r2, sp, #20
    47fc:	f103 0510 	add.w	r5, r3, #16
    4800:	6818      	ldr	r0, [r3, #0]
    4802:	6859      	ldr	r1, [r3, #4]
    4804:	4614      	mov	r4, r2
    4806:	c403      	stmia	r4!, {r0, r1}
    4808:	3308      	adds	r3, #8
    480a:	42ab      	cmp	r3, r5
    480c:	4622      	mov	r2, r4
    480e:	d1f7      	bne.n	4800 <usb_update_sn_string_descriptor+0xc>
    4810:	781b      	ldrb	r3, [r3, #0]
    4812:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    4814:	2210      	movs	r2, #16
    4816:	2100      	movs	r1, #0
    4818:	a801      	add	r0, sp, #4
    481a:	f009 fcf4 	bl	e206 <memset>
	memset(sn, 0, sizeof(sn));
    481e:	2212      	movs	r2, #18
    4820:	2100      	movs	r1, #0
    4822:	4815      	ldr	r0, [pc, #84]	; (4878 <usb_update_sn_string_descriptor+0x84>)
    4824:	f009 fcef 	bl	e206 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    4828:	2110      	movs	r1, #16
    482a:	a801      	add	r0, sp, #4
    482c:	f009 fe43 	bl	e4b6 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    4830:	2800      	cmp	r0, #0
    4832:	dd1b      	ble.n	486c <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    4834:	2808      	cmp	r0, #8
    4836:	bfb8      	it	lt
    4838:	2008      	movlt	r0, #8
    483a:	3808      	subs	r0, #8
    483c:	ab01      	add	r3, sp, #4
    483e:	4a0e      	ldr	r2, [pc, #56]	; (4878 <usb_update_sn_string_descriptor+0x84>)
    4840:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    4842:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4844:	f810 3b01 	ldrb.w	r3, [r0], #1
    4848:	ac0a      	add	r4, sp, #40	; 0x28
    484a:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    484e:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4852:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    4856:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    4858:	ac0a      	add	r4, sp, #40	; 0x28
    485a:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    485c:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    485e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    4862:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    4864:	2908      	cmp	r1, #8
    4866:	f102 0202 	add.w	r2, r2, #2
    486a:	d1eb      	bne.n	4844 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    486c:	4802      	ldr	r0, [pc, #8]	; (4878 <usb_update_sn_string_descriptor+0x84>)
    486e:	b00b      	add	sp, #44	; 0x2c
    4870:	bd30      	pop	{r4, r5, pc}
    4872:	bf00      	nop
    4874:	000114d9 	.word	0x000114d9
    4878:	200022fd 	.word	0x200022fd

0000487c <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4880:	4604      	mov	r4, r0
    4882:	b08b      	sub	sp, #44	; 0x2c
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    4884:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    4886:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    488a:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    488c:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    488e:	4637      	mov	r7, r6

	while (head->bLength != 0U) {
    4890:	7820      	ldrb	r0, [r4, #0]
    4892:	b920      	cbnz	r0, 489e <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    4894:	4b7f      	ldr	r3, [pc, #508]	; (4a94 <usb_fix_descriptor+0x218>)
    4896:	3402      	adds	r4, #2
    4898:	429c      	cmp	r4, r3
    489a:	d039      	beq.n	4910 <usb_fix_descriptor+0x94>
    489c:	e7f2      	b.n	4884 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    489e:	7863      	ldrb	r3, [r4, #1]
    48a0:	2b05      	cmp	r3, #5
    48a2:	d805      	bhi.n	48b0 <usb_fix_descriptor+0x34>
    48a4:	e8df f003 	tbb	[pc, r3]
    48a8:	a30304a3 	.word	0xa30304a3
    48ac:	2c07      	.short	0x2c07
    48ae:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    48b0:	7823      	ldrb	r3, [r4, #0]
    48b2:	441c      	add	r4, r3
    48b4:	e7ec      	b.n	4890 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    48b6:	78e3      	ldrb	r3, [r4, #3]
    48b8:	2b00      	cmp	r3, #0
    48ba:	d1f9      	bne.n	48b0 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    48bc:	78a3      	ldrb	r3, [r4, #2]
    48be:	b1e3      	cbz	r3, 48fa <usb_fix_descriptor+0x7e>
			numof_ifaces++;
    48c0:	f10a 0a01 	add.w	sl, sl, #1
    48c4:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    48c8:	e7f2      	b.n	48b0 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    48ca:	686a      	ldr	r2, [r5, #4]
    48cc:	4294      	cmp	r4, r2
    48ce:	f000 80d9 	beq.w	4a84 <usb_fix_descriptor+0x208>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    48d2:	3524      	adds	r5, #36	; 0x24
    48d4:	429d      	cmp	r5, r3
    48d6:	d3f8      	bcc.n	48ca <usb_fix_descriptor+0x4e>
					LOG_ERR("There is no usb_cfg_data "
    48d8:	486f      	ldr	r0, [pc, #444]	; (4a98 <usb_fix_descriptor+0x21c>)
    48da:	6803      	ldr	r3, [r0, #0]
    48dc:	075b      	lsls	r3, r3, #29
    48de:	d015      	beq.n	490c <usb_fix_descriptor+0x90>
    48e0:	4b6e      	ldr	r3, [pc, #440]	; (4a9c <usb_fix_descriptor+0x220>)
    48e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
    48e6:	2303      	movs	r3, #3
    48e8:	9303      	str	r3, [sp, #12]
    48ea:	9307      	str	r3, [sp, #28]
    48ec:	2300      	movs	r3, #0
    48ee:	aa07      	add	r2, sp, #28
    48f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48f4:	f008 f8b1 	bl	ca5a <z_impl_z_log_msg2_static_create>
    48f8:	e008      	b.n	490c <usb_fix_descriptor+0x90>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    48fa:	4d69      	ldr	r5, [pc, #420]	; (4aa0 <usb_fix_descriptor+0x224>)
    48fc:	4b69      	ldr	r3, [pc, #420]	; (4aa4 <usb_fix_descriptor+0x228>)
    48fe:	e7e9      	b.n	48d4 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    4900:	2d00      	cmp	r5, #0
    4902:	d171      	bne.n	49e8 <usb_fix_descriptor+0x16c>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4904:	4864      	ldr	r0, [pc, #400]	; (4a98 <usb_fix_descriptor+0x21c>)
    4906:	6803      	ldr	r3, [r0, #0]
    4908:	075d      	lsls	r5, r3, #29
    490a:	d104      	bne.n	4916 <usb_fix_descriptor+0x9a>
				return -1;
    490c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    4910:	b00b      	add	sp, #44	; 0x2c
    4912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4916:	4b64      	ldr	r3, [pc, #400]	; (4aa8 <usb_fix_descriptor+0x22c>)
				LOG_ERR("Failed to validate endpoints");
    4918:	9308      	str	r3, [sp, #32]
    491a:	2302      	movs	r3, #2
    491c:	9303      	str	r3, [sp, #12]
    491e:	9307      	str	r3, [sp, #28]
    4920:	2300      	movs	r3, #0
    4922:	aa07      	add	r2, sp, #28
    4924:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4928:	e7e4      	b.n	48f4 <usb_fix_descriptor+0x78>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    492a:	6a2a      	ldr	r2, [r5, #32]
    492c:	f894 c002 	ldrb.w	ip, [r4, #2]
    4930:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4934:	7910      	ldrb	r0, [r2, #4]
    4936:	4584      	cmp	ip, r0
    4938:	d009      	beq.n	494e <usb_fix_descriptor+0xd2>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    493a:	3301      	adds	r3, #1
    493c:	7f2a      	ldrb	r2, [r5, #28]
    493e:	4293      	cmp	r3, r2
    4940:	d3f3      	bcc.n	492a <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    4942:	4855      	ldr	r0, [pc, #340]	; (4a98 <usb_fix_descriptor+0x21c>)
    4944:	6803      	ldr	r3, [r0, #0]
    4946:	075c      	lsls	r4, r3, #29
    4948:	d0e0      	beq.n	490c <usb_fix_descriptor+0x90>
    494a:	4b58      	ldr	r3, [pc, #352]	; (4aac <usb_fix_descriptor+0x230>)
    494c:	e7e4      	b.n	4918 <usb_fix_descriptor+0x9c>
    494e:	f04f 0801 	mov.w	r8, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    4952:	78e0      	ldrb	r0, [r4, #3]
    4954:	f000 0003 	and.w	r0, r0, #3
    4958:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    495c:	7920      	ldrb	r0, [r4, #4]
    495e:	f894 c005 	ldrb.w	ip, [r4, #5]
    4962:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    4966:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    496a:	f994 0002 	ldrsb.w	r0, [r4, #2]
    496e:	2800      	cmp	r0, #0
    4970:	fa5f f988 	uxtb.w	r9, r8
    4974:	da2a      	bge.n	49cc <usb_fix_descriptor+0x150>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    4976:	f108 0010 	add.w	r0, r8, #16
    497a:	fa01 f000 	lsl.w	r0, r1, r0
    497e:	ea10 0f0b 	tst.w	r0, fp
    4982:	d12b      	bne.n	49dc <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    4984:	f069 007f 	orn	r0, r9, #127	; 0x7f
    4988:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    498c:	a804      	add	r0, sp, #16
    498e:	e9cd 3200 	strd	r3, r2, [sp]
    4992:	f002 fa09 	bl	6da8 <usb_dc_ep_check_cap>
    4996:	e9dd 3200 	ldrd	r3, r2, [sp]
    499a:	2101      	movs	r1, #1
    499c:	b9f0      	cbnz	r0, 49dc <usb_fix_descriptor+0x160>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    499e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    49a2:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    49a4:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    49a8:	bf1c      	itt	ne
    49aa:	f109 0910 	addne.w	r9, r9, #16
    49ae:	fa5f f989 	uxtbne.w	r9, r9
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    49b2:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    49b4:	bf18      	it	ne
    49b6:	fa01 f909 	lslne.w	r9, r1, r9
    49ba:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    49bc:	bf0a      	itet	eq
    49be:	fa01 f308 	lsleq.w	r3, r1, r8
					*requested_ep |= (1U << (idx + 16U));
    49c2:	ea4b 0b09 	orrne.w	fp, fp, r9
					*requested_ep |= (1U << idx);
    49c6:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    49ca:	e771      	b.n	48b0 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    49cc:	fa01 f008 	lsl.w	r0, r1, r8
    49d0:	ea10 0f0b 	tst.w	r0, fp
    49d4:	d102      	bne.n	49dc <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = idx;
    49d6:	f88d 9010 	strb.w	r9, [sp, #16]
    49da:	e7d7      	b.n	498c <usb_fix_descriptor+0x110>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    49dc:	f108 0801 	add.w	r8, r8, #1
    49e0:	f1b8 0f10 	cmp.w	r8, #16
    49e4:	d1b5      	bne.n	4952 <usb_fix_descriptor+0xd6>
    49e6:	e7a8      	b.n	493a <usb_fix_descriptor+0xbe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    49e8:	2300      	movs	r3, #0
    49ea:	2101      	movs	r1, #1
    49ec:	e7a6      	b.n	493c <usb_fix_descriptor+0xc0>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    49ee:	2e03      	cmp	r6, #3
    49f0:	d12d      	bne.n	4a4e <usb_fix_descriptor+0x1d2>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    49f2:	f7ff feff 	bl	47f4 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    49f6:	4680      	mov	r8, r0
    49f8:	b1b8      	cbz	r0, 4a2a <usb_fix_descriptor+0x1ae>
	runtime_sn_len = strlen(runtime_sn);
    49fa:	f009 fba3 	bl	e144 <strlen>
	if (!runtime_sn_len) {
    49fe:	4681      	mov	r9, r0
    4a00:	b198      	cbz	r0, 4a2a <usb_fix_descriptor+0x1ae>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    4a02:	482b      	ldr	r0, [pc, #172]	; (4ab0 <usb_fix_descriptor+0x234>)
    4a04:	f009 fb9e 	bl	e144 <strlen>
	if (runtime_sn_len != default_sn_len) {
    4a08:	4581      	cmp	r9, r0
    4a0a:	d01a      	beq.n	4a42 <usb_fix_descriptor+0x1c6>
		LOG_ERR("the new SN descriptor doesn't have the same "
    4a0c:	4822      	ldr	r0, [pc, #136]	; (4a98 <usb_fix_descriptor+0x21c>)
    4a0e:	6803      	ldr	r3, [r0, #0]
    4a10:	0759      	lsls	r1, r3, #29
    4a12:	d00a      	beq.n	4a2a <usb_fix_descriptor+0x1ae>
    4a14:	4b27      	ldr	r3, [pc, #156]	; (4ab4 <usb_fix_descriptor+0x238>)
    4a16:	9308      	str	r3, [sp, #32]
    4a18:	2302      	movs	r3, #2
    4a1a:	9303      	str	r3, [sp, #12]
    4a1c:	9307      	str	r3, [sp, #28]
    4a1e:	2300      	movs	r3, #0
    4a20:	aa07      	add	r2, sp, #28
    4a22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a26:	f008 f818 	bl	ca5a <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    4a2a:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    4a2c:	f06f 0102 	mvn.w	r1, #2
    4a30:	18e2      	adds	r2, r4, r3
    4a32:	1b09      	subs	r1, r1, r4
    4a34:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    4a38:	42d1      	cmn	r1, r2
    4a3a:	d512      	bpl.n	4a62 <usb_fix_descriptor+0x1e6>
			str_descr_idx += 1U;
    4a3c:	3601      	adds	r6, #1
    4a3e:	b2f6      	uxtb	r6, r6
			break;
    4a40:	e736      	b.n	48b0 <usb_fix_descriptor+0x34>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    4a42:	464a      	mov	r2, r9
    4a44:	4641      	mov	r1, r8
    4a46:	1ca0      	adds	r0, r4, #2
    4a48:	f009 fbd2 	bl	e1f0 <memcpy>
    4a4c:	e7ed      	b.n	4a2a <usb_fix_descriptor+0x1ae>
			if (str_descr_idx) {
    4a4e:	2e00      	cmp	r6, #0
    4a50:	d1eb      	bne.n	4a2a <usb_fix_descriptor+0x1ae>
				if (!cfg_descr) {
    4a52:	b97f      	cbnz	r7, 4a74 <usb_fix_descriptor+0x1f8>
					LOG_ERR("Incomplete device descriptor");
    4a54:	4810      	ldr	r0, [pc, #64]	; (4a98 <usb_fix_descriptor+0x21c>)
    4a56:	6803      	ldr	r3, [r0, #0]
    4a58:	075a      	lsls	r2, r3, #29
    4a5a:	f43f af57 	beq.w	490c <usb_fix_descriptor+0x90>
    4a5e:	4b16      	ldr	r3, [pc, #88]	; (4ab8 <usb_fix_descriptor+0x23c>)
    4a60:	e75a      	b.n	4918 <usb_fix_descriptor+0x9c>
		buf[i] = 0U;
    4a62:	f04f 0000 	mov.w	r0, #0
    4a66:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    4a6a:	f813 0901 	ldrb.w	r0, [r3], #-1
    4a6e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    4a72:	e7e1      	b.n	4a38 <usb_fix_descriptor+0x1bc>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4a74:	1be3      	subs	r3, r4, r7
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4a76:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    4a78:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a7c:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    4a7e:	f887 a004 	strb.w	sl, [r7, #4]
    4a82:	e7db      	b.n	4a3c <usb_fix_descriptor+0x1c0>
				if (cfg_data->interface_config) {
    4a84:	68ab      	ldr	r3, [r5, #8]
    4a86:	2b00      	cmp	r3, #0
    4a88:	f43f af1a 	beq.w	48c0 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    4a8c:	4651      	mov	r1, sl
    4a8e:	4620      	mov	r0, r4
    4a90:	4798      	blx	r3
    4a92:	e715      	b.n	48c0 <usb_fix_descriptor+0x44>
    4a94:	20000443 	.word	0x20000443
    4a98:	20000284 	.word	0x20000284
    4a9c:	000114ea 	.word	0x000114ea
    4aa0:	20000444 	.word	0x20000444
    4aa4:	20000468 	.word	0x20000468
    4aa8:	0001150a 	.word	0x0001150a
    4aac:	0001154b 	.word	0x0001154b
    4ab0:	000114d9 	.word	0x000114d9
    4ab4:	00011568 	.word	0x00011568
    4ab8:	000115b3 	.word	0x000115b3

00004abc <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    4abc:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    4abe:	480e      	ldr	r0, [pc, #56]	; (4af8 <usb_get_device_descriptor+0x3c>)
{
    4ac0:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    4ac2:	f7ff fedb 	bl	487c <usb_fix_descriptor>
    4ac6:	b198      	cbz	r0, 4af0 <usb_get_device_descriptor+0x34>
		LOG_ERR("Failed to fixup USB descriptor");
    4ac8:	480c      	ldr	r0, [pc, #48]	; (4afc <usb_get_device_descriptor+0x40>)
    4aca:	6803      	ldr	r3, [r0, #0]
    4acc:	f013 0307 	ands.w	r3, r3, #7
    4ad0:	d010      	beq.n	4af4 <usb_get_device_descriptor+0x38>
    4ad2:	4b0b      	ldr	r3, [pc, #44]	; (4b00 <usb_get_device_descriptor+0x44>)
    4ad4:	9306      	str	r3, [sp, #24]
    4ad6:	2302      	movs	r3, #2
    4ad8:	9301      	str	r3, [sp, #4]
    4ada:	9305      	str	r3, [sp, #20]
    4adc:	2300      	movs	r3, #0
    4ade:	aa05      	add	r2, sp, #20
    4ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ae4:	f007 ffb9 	bl	ca5a <z_impl_z_log_msg2_static_create>
		return NULL;
    4ae8:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    4aea:	b009      	add	sp, #36	; 0x24
    4aec:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    4af0:	4801      	ldr	r0, [pc, #4]	; (4af8 <usb_get_device_descriptor+0x3c>)
    4af2:	e7fa      	b.n	4aea <usb_get_device_descriptor+0x2e>
		return NULL;
    4af4:	4618      	mov	r0, r3
    4af6:	e7f8      	b.n	4aea <usb_get_device_descriptor+0x2e>
    4af8:	20000384 	.word	0x20000384
    4afc:	20000284 	.word	0x20000284
    4b00:	000115d0 	.word	0x000115d0

00004b04 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    4b04:	b510      	push	{r4, lr}
    4b06:	4b09      	ldr	r3, [pc, #36]	; (4b2c <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4b08:	2100      	movs	r1, #0
    4b0a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    4b0c:	781c      	ldrb	r4, [r3, #0]
    4b0e:	4284      	cmp	r4, r0
    4b10:	d105      	bne.n	4b1e <usb_ep_get_transfer+0x1a>
    4b12:	685c      	ldr	r4, [r3, #4]
    4b14:	b11c      	cbz	r4, 4b1e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    4b16:	2048      	movs	r0, #72	; 0x48
    4b18:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    4b1c:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4b1e:	3101      	adds	r1, #1
    4b20:	2904      	cmp	r1, #4
    4b22:	f103 0348 	add.w	r3, r3, #72	; 0x48
    4b26:	d1f1      	bne.n	4b0c <usb_ep_get_transfer+0x8>
	return NULL;
    4b28:	2000      	movs	r0, #0
    4b2a:	e7f7      	b.n	4b1c <usb_ep_get_transfer+0x18>
    4b2c:	200015bc 	.word	0x200015bc

00004b30 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    4b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b34:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    4b36:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    4b3a:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    4b3e:	3310      	adds	r3, #16
{
    4b40:	af00      	add	r7, sp, #0
    4b42:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    4b44:	d111      	bne.n	4b6a <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    4b46:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    4b48:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    4b4c:	f013 0602 	ands.w	r6, r3, #2
    4b50:	d053      	beq.n	4bfa <usb_transfer_work+0xca>
		if (!trans->bsize) {
    4b52:	bb0a      	cbnz	r2, 4b98 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    4b54:	f013 0304 	ands.w	r3, r3, #4
    4b58:	d104      	bne.n	4b64 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    4b5a:	461a      	mov	r2, r3
    4b5c:	4619      	mov	r1, r3
    4b5e:	4628      	mov	r0, r5
    4b60:	f7ff fc98 	bl	4494 <usb_write>
			}
			trans->status = 0;
    4b64:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    4b66:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4b6a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4b6e:	3310      	adds	r3, #16
    4b70:	d00e      	beq.n	4b90 <usb_transfer_work+0x60>
    4b72:	f854 6c20 	ldr.w	r6, [r4, #-32]
    4b76:	b15e      	cbz	r6, 4b90 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4b78:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    4b7c:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    4b80:	f00a f867 	bl	ec52 <k_is_in_isr>
    4b84:	2800      	cmp	r0, #0
    4b86:	d07b      	beq.n	4c80 <usb_transfer_work+0x150>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4b88:	4845      	ldr	r0, [pc, #276]	; (4ca0 <usb_transfer_work+0x170>)
    4b8a:	4621      	mov	r1, r4
    4b8c:	f00a f95a 	bl	ee44 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    4b90:	370c      	adds	r7, #12
    4b92:	46bd      	mov	sp, r7
    4b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4b98:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    4b9c:	463b      	mov	r3, r7
    4b9e:	4628      	mov	r0, r5
    4ba0:	f7ff fc78 	bl	4494 <usb_write>
		if (ret) {
    4ba4:	4603      	mov	r3, r0
    4ba6:	b1b8      	cbz	r0, 4bd8 <usb_transfer_work+0xa8>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4ba8:	483e      	ldr	r0, [pc, #248]	; (4ca4 <usb_transfer_work+0x174>)
    4baa:	6802      	ldr	r2, [r0, #0]
    4bac:	0751      	lsls	r1, r2, #29
    4bae:	d010      	beq.n	4bd2 <usb_transfer_work+0xa2>
    4bb0:	493d      	ldr	r1, [pc, #244]	; (4ca8 <usb_transfer_work+0x178>)
    4bb2:	466e      	mov	r6, sp
    4bb4:	b088      	sub	sp, #32
    4bb6:	466a      	mov	r2, sp
    4bb8:	e9c2 1304 	strd	r1, r3, [r2, #16]
    4bbc:	2304      	movs	r3, #4
    4bbe:	6195      	str	r5, [r2, #24]
    4bc0:	607b      	str	r3, [r7, #4]
    4bc2:	f842 3f0c 	str.w	r3, [r2, #12]!
    4bc6:	2300      	movs	r3, #0
    4bc8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4bcc:	f007 ff45 	bl	ca5a <z_impl_z_log_msg2_static_create>
    4bd0:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    4bd2:	f06f 0315 	mvn.w	r3, #21
    4bd6:	e7c6      	b.n	4b66 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    4bd8:	683a      	ldr	r2, [r7, #0]
    4bda:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4bde:	4413      	add	r3, r2
    4be0:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    4be4:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4be8:	1a9b      	subs	r3, r3, r2
    4bea:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    4bee:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4bf2:	4413      	add	r3, r2
    4bf4:	f844 3c24 	str.w	r3, [r4, #-36]
    4bf8:	e7b7      	b.n	4b6a <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4bfa:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    4bfe:	463b      	mov	r3, r7
    4c00:	4628      	mov	r0, r5
    4c02:	f002 faab 	bl	715c <usb_dc_ep_read_wait>
		if (ret) {
    4c06:	4603      	mov	r3, r0
    4c08:	b1a8      	cbz	r0, 4c36 <usb_transfer_work+0x106>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4c0a:	4826      	ldr	r0, [pc, #152]	; (4ca4 <usb_transfer_work+0x174>)
    4c0c:	6802      	ldr	r2, [r0, #0]
    4c0e:	0752      	lsls	r2, r2, #29
    4c10:	d0df      	beq.n	4bd2 <usb_transfer_work+0xa2>
    4c12:	4925      	ldr	r1, [pc, #148]	; (4ca8 <usb_transfer_work+0x178>)
    4c14:	46e8      	mov	r8, sp
    4c16:	b088      	sub	sp, #32
    4c18:	466a      	mov	r2, sp
    4c1a:	e9c2 1304 	strd	r1, r3, [r2, #16]
    4c1e:	2304      	movs	r3, #4
    4c20:	6195      	str	r5, [r2, #24]
    4c22:	607b      	str	r3, [r7, #4]
    4c24:	f842 3f0c 	str.w	r3, [r2, #12]!
    4c28:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4c2c:	4633      	mov	r3, r6
    4c2e:	f007 ff14 	bl	ca5a <z_impl_z_log_msg2_static_create>
    4c32:	46c5      	mov	sp, r8
    4c34:	e7cd      	b.n	4bd2 <usb_transfer_work+0xa2>
		trans->buffer += bytes;
    4c36:	683e      	ldr	r6, [r7, #0]
    4c38:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4c3c:	4433      	add	r3, r6
    4c3e:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    4c42:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4c46:	1b9b      	subs	r3, r3, r6
    4c48:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    4c4c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4c50:	4433      	add	r3, r6
    4c52:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4c56:	2e00      	cmp	r6, #0
    4c58:	d084      	beq.n	4b64 <usb_transfer_work+0x34>
    4c5a:	4628      	mov	r0, r5
    4c5c:	f002 fb52 	bl	7304 <usb_dc_ep_mps>
    4c60:	fbb6 f3f0 	udiv	r3, r6, r0
    4c64:	fb03 6610 	mls	r6, r3, r0, r6
    4c68:	2e00      	cmp	r6, #0
    4c6a:	f47f af7b 	bne.w	4b64 <usb_transfer_work+0x34>
    4c6e:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4c72:	2b00      	cmp	r3, #0
    4c74:	f43f af76 	beq.w	4b64 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    4c78:	4628      	mov	r0, r5
    4c7a:	f002 fad1 	bl	7220 <usb_dc_ep_read_continue>
    4c7e:	e774      	b.n	4b6a <usb_transfer_work+0x3a>
		trans->cb = NULL;
    4c80:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    4c84:	f1a4 0018 	sub.w	r0, r4, #24
    4c88:	f005 ff14 	bl	aab4 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    4c8c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4c90:	338c      	adds	r3, #140	; 0x8c
    4c92:	f43f af7d 	beq.w	4b90 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    4c96:	464a      	mov	r2, r9
    4c98:	4641      	mov	r1, r8
    4c9a:	4628      	mov	r0, r5
    4c9c:	47b0      	blx	r6
    4c9e:	e777      	b.n	4b90 <usb_transfer_work+0x60>
    4ca0:	20000cc8 	.word	0x20000cc8
    4ca4:	20000290 	.word	0x20000290
    4ca8:	000115fe 	.word	0x000115fe

00004cac <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    4cac:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4cae:	1e4b      	subs	r3, r1, #1
    4cb0:	2b01      	cmp	r3, #1
{
    4cb2:	b088      	sub	sp, #32
    4cb4:	4606      	mov	r6, r0
    4cb6:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4cb8:	d81c      	bhi.n	4cf4 <usb_transfer_ep_callback+0x48>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4cba:	f7ff ff23 	bl	4b04 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    4cbe:	4604      	mov	r4, r0
    4cc0:	b9d0      	cbnz	r0, 4cf8 <usb_transfer_ep_callback+0x4c>
		if (status == USB_DC_EP_DATA_OUT) {
    4cc2:	2d01      	cmp	r5, #1
    4cc4:	d116      	bne.n	4cf4 <usb_transfer_ep_callback+0x48>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4cc6:	466b      	mov	r3, sp
    4cc8:	2201      	movs	r2, #1
    4cca:	a902      	add	r1, sp, #8
    4ccc:	4630      	mov	r0, r6
    4cce:	f002 fa45 	bl	715c <usb_dc_ep_read_wait>
			} while (bytes);
    4cd2:	9b00      	ldr	r3, [sp, #0]
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d1f6      	bne.n	4cc6 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    4cd8:	4811      	ldr	r0, [pc, #68]	; (4d20 <usb_transfer_ep_callback+0x74>)
    4cda:	6802      	ldr	r2, [r0, #0]
    4cdc:	0752      	lsls	r2, r2, #29
    4cde:	d009      	beq.n	4cf4 <usb_transfer_ep_callback+0x48>
    4ce0:	4a10      	ldr	r2, [pc, #64]	; (4d24 <usb_transfer_ep_callback+0x78>)
    4ce2:	9206      	str	r2, [sp, #24]
    4ce4:	2202      	movs	r2, #2
    4ce6:	9201      	str	r2, [sp, #4]
    4ce8:	9205      	str	r2, [sp, #20]
    4cea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cee:	aa05      	add	r2, sp, #20
    4cf0:	f007 feb3 	bl	ca5a <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4cf4:	b008      	add	sp, #32
    4cf6:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4cf8:	f009 ffab 	bl	ec52 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4cfc:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4d00:	b108      	cbz	r0, 4d06 <usb_transfer_ep_callback+0x5a>
    4d02:	2d01      	cmp	r5, #1
    4d04:	d105      	bne.n	4d12 <usb_transfer_ep_callback+0x66>
		usb_transfer_work(&trans->work);
    4d06:	4608      	mov	r0, r1
}
    4d08:	b008      	add	sp, #32
    4d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    4d0e:	f7ff bf0f 	b.w	4b30 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4d12:	4805      	ldr	r0, [pc, #20]	; (4d28 <usb_transfer_ep_callback+0x7c>)
}
    4d14:	b008      	add	sp, #32
    4d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4d1a:	f00a b893 	b.w	ee44 <k_work_submit_to_queue>
    4d1e:	bf00      	nop
    4d20:	20000290 	.word	0x20000290
    4d24:	0001161b 	.word	0x0001161b
    4d28:	20000cc8 	.word	0x20000cc8

00004d2c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    4d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d30:	b08b      	sub	sp, #44	; 0x2c
    4d32:	4605      	mov	r5, r0
    4d34:	9100      	str	r1, [sp, #0]
    4d36:	4616      	mov	r6, r2
    4d38:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    4d3a:	f008 ffe2 	bl	dd02 <usb_transfer_is_busy>
    4d3e:	4604      	mov	r4, r0
    4d40:	2800      	cmp	r0, #0
    4d42:	f040 8086 	bne.w	4e52 <usb_transfer+0x126>
	__asm__ volatile(
    4d46:	f04f 0320 	mov.w	r3, #32
    4d4a:	f3ef 8211 	mrs	r2, BASEPRI
    4d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    4d52:	f3bf 8f6f 	isb	sy
    4d56:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4e58 <usb_transfer+0x12c>
    4d5a:	9201      	str	r2, [sp, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4d5c:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    4d60:	fb0a f704 	mul.w	r7, sl, r4
	return z_impl_k_sem_take(sem, timeout);
    4d64:	2300      	movs	r3, #0
    4d66:	2200      	movs	r2, #0
    4d68:	4648      	mov	r0, r9
    4d6a:	f005 fec9 	bl	ab00 <z_impl_k_sem_take>
    4d6e:	4603      	mov	r3, r0
    4d70:	bb18      	cbnz	r0, 4dba <usb_transfer+0x8e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    4d72:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4e5c <usb_transfer+0x130>
    4d76:	eb0a 0b07 	add.w	fp, sl, r7
    4d7a:	f8db 4004 	ldr.w	r4, [fp, #4]
    4d7e:	f114 0f10 	cmn.w	r4, #16
    4d82:	d131      	bne.n	4de8 <usb_transfer+0xbc>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    4d84:	4836      	ldr	r0, [pc, #216]	; (4e60 <usb_transfer+0x134>)
    4d86:	6802      	ldr	r2, [r0, #0]
    4d88:	0752      	lsls	r2, r2, #29
    4d8a:	d00a      	beq.n	4da2 <usb_transfer+0x76>
    4d8c:	4a35      	ldr	r2, [pc, #212]	; (4e64 <usb_transfer+0x138>)
    4d8e:	e9cd 2508 	strd	r2, r5, [sp, #32]
    4d92:	2203      	movs	r2, #3
    4d94:	9203      	str	r2, [sp, #12]
    4d96:	9207      	str	r2, [sp, #28]
    4d98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4d9c:	aa07      	add	r2, sp, #28
    4d9e:	f007 fe5c 	bl	ca5a <z_impl_z_log_msg2_static_create>
	z_impl_k_sem_give(sem);
    4da2:	4648      	mov	r0, r9
    4da4:	f005 fe86 	bl	aab4 <z_impl_k_sem_give>
	__asm__ volatile(
    4da8:	9b01      	ldr	r3, [sp, #4]
    4daa:	f383 8811 	msr	BASEPRI, r3
    4dae:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    4db2:	4620      	mov	r0, r4
    4db4:	b00b      	add	sp, #44	; 0x2c
    4db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4dba:	3401      	adds	r4, #1
    4dbc:	2c04      	cmp	r4, #4
    4dbe:	f109 0948 	add.w	r9, r9, #72	; 0x48
    4dc2:	d1cd      	bne.n	4d60 <usb_transfer+0x34>
		LOG_ERR("No transfer slot available");
    4dc4:	4826      	ldr	r0, [pc, #152]	; (4e60 <usb_transfer+0x134>)
    4dc6:	6803      	ldr	r3, [r0, #0]
    4dc8:	075b      	lsls	r3, r3, #29
    4dca:	d00a      	beq.n	4de2 <usb_transfer+0xb6>
    4dcc:	4b26      	ldr	r3, [pc, #152]	; (4e68 <usb_transfer+0x13c>)
    4dce:	9308      	str	r3, [sp, #32]
    4dd0:	2302      	movs	r3, #2
    4dd2:	9303      	str	r3, [sp, #12]
    4dd4:	9307      	str	r3, [sp, #28]
    4dd6:	2300      	movs	r3, #0
    4dd8:	aa07      	add	r2, sp, #28
    4dda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4dde:	f007 fe3c 	bl	ca5a <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    4de2:	f06f 040b 	mvn.w	r4, #11
    4de6:	e7df      	b.n	4da8 <usb_transfer+0x7c>
	trans->cb = cb;
    4de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
	trans->buffer = data;
    4dea:	9a00      	ldr	r2, [sp, #0]
	trans->cb = cb;
    4dec:	f8cb 3014 	str.w	r3, [fp, #20]
	trans->priv = cb_data;
    4df0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4df2:	f8cb 3018 	str.w	r3, [fp, #24]
	trans->status = -EBUSY;
    4df6:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    4dfa:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    4dfe:	e9cb 2602 	strd	r2, r6, [fp, #8]
	trans->ep = ep;
    4e02:	f80a 5007 	strb.w	r5, [sl, r7]
	trans->flags = flags;
    4e06:	f8cb 8044 	str.w	r8, [fp, #68]	; 0x44
	trans->status = -EBUSY;
    4e0a:	f8cb 3004 	str.w	r3, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4e0e:	4628      	mov	r0, r5
    4e10:	f002 fa78 	bl	7304 <usb_dc_ep_mps>
    4e14:	b168      	cbz	r0, 4e32 <usb_transfer+0x106>
    4e16:	4628      	mov	r0, r5
    4e18:	f002 fa74 	bl	7304 <usb_dc_ep_mps>
    4e1c:	fbb6 f3f0 	udiv	r3, r6, r0
    4e20:	fb03 6610 	mls	r6, r3, r0, r6
    4e24:	b12e      	cbz	r6, 4e32 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    4e26:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    4e2a:	f043 0304 	orr.w	r3, r3, #4
    4e2e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    4e32:	f018 0f02 	tst.w	r8, #2
    4e36:	d007      	beq.n	4e48 <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4e38:	3734      	adds	r7, #52	; 0x34
    4e3a:	480c      	ldr	r0, [pc, #48]	; (4e6c <usb_transfer+0x140>)
    4e3c:	eb0a 0107 	add.w	r1, sl, r7
    4e40:	f00a f800 	bl	ee44 <k_work_submit_to_queue>
	int i, key, ret = 0;
    4e44:	2400      	movs	r4, #0
    4e46:	e7af      	b.n	4da8 <usb_transfer+0x7c>
		ret = usb_dc_ep_read_continue(ep);
    4e48:	4628      	mov	r0, r5
    4e4a:	f002 f9e9 	bl	7220 <usb_dc_ep_read_continue>
    4e4e:	4604      	mov	r4, r0
    4e50:	e7aa      	b.n	4da8 <usb_transfer+0x7c>
		return -EBUSY;
    4e52:	f06f 040f 	mvn.w	r4, #15
    4e56:	e7ac      	b.n	4db2 <usb_transfer+0x86>
    4e58:	200015d8 	.word	0x200015d8
    4e5c:	200015bc 	.word	0x200015bc
    4e60:	20000290 	.word	0x20000290
    4e64:	00011650 	.word	0x00011650
    4e68:	00011635 	.word	0x00011635
    4e6c:	20000cc8 	.word	0x20000cc8

00004e70 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    4e70:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e72:	f04f 0320 	mov.w	r3, #32
    4e76:	f3ef 8411 	mrs	r4, BASEPRI
    4e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e7e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    4e82:	f7ff fe3f 	bl	4b04 <usb_ep_get_transfer>
	if (!trans) {
    4e86:	b150      	cbz	r0, 4e9e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    4e88:	6843      	ldr	r3, [r0, #4]
    4e8a:	3310      	adds	r3, #16
    4e8c:	d107      	bne.n	4e9e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    4e8e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    4e92:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4e94:	f100 0134 	add.w	r1, r0, #52	; 0x34
    4e98:	4803      	ldr	r0, [pc, #12]	; (4ea8 <usb_cancel_transfer+0x38>)
    4e9a:	f009 ffd3 	bl	ee44 <k_work_submit_to_queue>
	__asm__ volatile(
    4e9e:	f384 8811 	msr	BASEPRI, r4
    4ea2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    4ea6:	bd10      	pop	{r4, pc}
    4ea8:	20000cc8 	.word	0x20000cc8

00004eac <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4eb0:	4c10      	ldr	r4, [pc, #64]	; (4ef4 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4eb2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4ef8 <usb_cancel_transfers+0x4c>
{
    4eb6:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    4eb8:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    4ebc:	f04f 0320 	mov.w	r3, #32
    4ec0:	f3ef 8611 	mrs	r6, BASEPRI
    4ec4:	f383 8812 	msr	BASEPRI_MAX, r3
    4ec8:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    4ecc:	6863      	ldr	r3, [r4, #4]
    4ece:	3310      	adds	r3, #16
    4ed0:	d105      	bne.n	4ede <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4ed2:	f104 0134 	add.w	r1, r4, #52	; 0x34
    4ed6:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    4ed8:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4eda:	f009 ffb3 	bl	ee44 <k_work_submit_to_queue>
	__asm__ volatile(
    4ede:	f386 8811 	msr	BASEPRI, r6
    4ee2:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4ee6:	3d01      	subs	r5, #1
    4ee8:	f104 0448 	add.w	r4, r4, #72	; 0x48
    4eec:	d1e6      	bne.n	4ebc <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    4eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ef2:	bf00      	nop
    4ef4:	200015bc 	.word	0x200015bc
    4ef8:	20000cc8 	.word	0x20000cc8

00004efc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	4c0a      	ldr	r4, [pc, #40]	; (4f28 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4f00:	4e0a      	ldr	r6, [pc, #40]	; (4f2c <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4f02:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4f04:	4631      	mov	r1, r6
    4f06:	4620      	mov	r0, r4
    4f08:	f009 ff93 	bl	ee32 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4f0c:	2201      	movs	r2, #1
    4f0e:	f1a4 0018 	sub.w	r0, r4, #24
    4f12:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4f14:	3501      	adds	r5, #1
    4f16:	f009 ff6a 	bl	edee <z_impl_k_sem_init>
    4f1a:	2d04      	cmp	r5, #4
    4f1c:	f104 0448 	add.w	r4, r4, #72	; 0x48
    4f20:	d1f0      	bne.n	4f04 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    4f22:	2000      	movs	r0, #0
    4f24:	bd70      	pop	{r4, r5, r6, pc}
    4f26:	bf00      	nop
    4f28:	200015f0 	.word	0x200015f0
    4f2c:	00004b31 	.word	0x00004b31

00004f30 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4f30:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    4f32:	2301      	movs	r3, #1
    4f34:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    4f38:	680b      	ldr	r3, [r1, #0]
    4f3a:	b133      	cbz	r3, 4f4a <cdc_acm_irq_rx_enable+0x1a>
    4f3c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    4f40:	b11b      	cbz	r3, 4f4a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4f42:	4802      	ldr	r0, [pc, #8]	; (4f4c <cdc_acm_irq_rx_enable+0x1c>)
    4f44:	3108      	adds	r1, #8
    4f46:	f009 bf7d 	b.w	ee44 <k_work_submit_to_queue>
	}
}
    4f4a:	4770      	bx	lr
    4f4c:	20000cc8 	.word	0x20000cc8

00004f50 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4f50:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    4f52:	2301      	movs	r3, #1
    4f54:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    4f58:	680b      	ldr	r3, [r1, #0]
    4f5a:	b133      	cbz	r3, 4f6a <cdc_acm_irq_tx_enable+0x1a>
    4f5c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    4f60:	b11b      	cbz	r3, 4f6a <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4f62:	4802      	ldr	r0, [pc, #8]	; (4f6c <cdc_acm_irq_tx_enable+0x1c>)
    4f64:	3108      	adds	r1, #8
    4f66:	f009 bf6d 	b.w	ee44 <k_work_submit_to_queue>
}
    4f6a:	4770      	bx	lr
    4f6c:	20000cc8 	.word	0x20000cc8

00004f70 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4f70:	4a0b      	ldr	r2, [pc, #44]	; (4fa0 <cdc_acm_reset_port+0x30>)
{
    4f72:	4603      	mov	r3, r0
	dev_data->configured = false;
    4f74:	2100      	movs	r1, #0
    4f76:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    4f7a:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4f7c:	6810      	ldr	r0, [r2, #0]
    4f7e:	6758      	str	r0, [r3, #116]	; 0x74
    4f80:	8890      	ldrh	r0, [r2, #4]
    4f82:	7992      	ldrb	r2, [r2, #6]
    4f84:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    4f88:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    4f8c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    4f90:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    4f94:	2240      	movs	r2, #64	; 0x40
    4f96:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    4f9a:	f009 b934 	b.w	e206 <memset>
    4f9e:	bf00      	nop
    4fa0:	0000f98c 	.word	0x0000f98c

00004fa4 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    4fa4:	2301      	movs	r3, #1
    4fa6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4faa:	6813      	ldr	r3, [r2, #0]
{
    4fac:	b510      	push	{r4, lr}
    4fae:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4fb0:	b13b      	cbz	r3, 4fc2 <cdc_acm_write_cb+0x1e>
    4fb2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    4fb6:	b123      	cbz	r3, 4fc2 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4fb8:	4808      	ldr	r0, [pc, #32]	; (4fdc <cdc_acm_write_cb+0x38>)
    4fba:	f102 0108 	add.w	r1, r2, #8
    4fbe:	f009 ff41 	bl	ee44 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    4fc2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4fc4:	f007 f8d5 	bl	c172 <ring_buf_is_empty>
    4fc8:	b930      	cbnz	r0, 4fd8 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4fca:	f104 0118 	add.w	r1, r4, #24
    4fce:	4803      	ldr	r0, [pc, #12]	; (4fdc <cdc_acm_write_cb+0x38>)
}
    4fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4fd4:	f009 bf36 	b.w	ee44 <k_work_submit_to_queue>
}
    4fd8:	bd10      	pop	{r4, pc}
    4fda:	bf00      	nop
    4fdc:	20000cc8 	.word	0x20000cc8

00004fe0 <tx_work_handler>:
{
    4fe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    4fe2:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    4fe4:	685b      	ldr	r3, [r3, #4]
    4fe6:	6a1b      	ldr	r3, [r3, #32]
    4fe8:	7d1e      	ldrb	r6, [r3, #20]
{
    4fea:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    4fec:	4630      	mov	r0, r6
    4fee:	f008 fe88 	bl	dd02 <usb_transfer_is_busy>
    4ff2:	b9d0      	cbnz	r0, 502a <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    4ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    4ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4ffa:	a903      	add	r1, sp, #12
    4ffc:	f007 f932 	bl	c264 <ring_buf_get_claim>
	if (!len) {
    5000:	4604      	mov	r4, r0
    5002:	b190      	cbz	r0, 502a <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    5004:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    5006:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    500a:	bf08      	it	eq
    500c:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    5010:	9301      	str	r3, [sp, #4]
    5012:	4b07      	ldr	r3, [pc, #28]	; (5030 <tx_work_handler+0x50>)
    5014:	9903      	ldr	r1, [sp, #12]
    5016:	9300      	str	r3, [sp, #0]
    5018:	4622      	mov	r2, r4
    501a:	2302      	movs	r3, #2
    501c:	4630      	mov	r0, r6
    501e:	f7ff fe85 	bl	4d2c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    5022:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5024:	4621      	mov	r1, r4
    5026:	f007 f948 	bl	c2ba <ring_buf_get_finish>
}
    502a:	b004      	add	sp, #16
    502c:	bd70      	pop	{r4, r5, r6, pc}
    502e:	bf00      	nop
    5030:	00004fa5 	.word	0x00004fa5

00005034 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    5034:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5036:	6904      	ldr	r4, [r0, #16]
{
    5038:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    503a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    503e:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    5042:	b113      	cbz	r3, 504a <cdc_acm_poll_out+0x16>
    5044:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    5048:	b18b      	cbz	r3, 506e <cdc_acm_poll_out+0x3a>
		LOG_INF("USB device not ready, drop data");
    504a:	4826      	ldr	r0, [pc, #152]	; (50e4 <cdc_acm_poll_out+0xb0>)
    504c:	6803      	ldr	r3, [r0, #0]
    504e:	f003 0307 	and.w	r3, r3, #7
    5052:	2b02      	cmp	r3, #2
    5054:	d909      	bls.n	506a <cdc_acm_poll_out+0x36>
    5056:	4b24      	ldr	r3, [pc, #144]	; (50e8 <cdc_acm_poll_out+0xb4>)
    5058:	9308      	str	r3, [sp, #32]
    505a:	2302      	movs	r3, #2
    505c:	9303      	str	r3, [sp, #12]
    505e:	9307      	str	r3, [sp, #28]
    5060:	aa07      	add	r2, sp, #28
    5062:	f44f 5186 	mov.w	r1, #4288	; 0x10c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    5066:	f008 febf 	bl	dde8 <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    506a:	b00b      	add	sp, #44	; 0x2c
    506c:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    506e:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    5070:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    5074:	2201      	movs	r2, #1
    5076:	f10d 0107 	add.w	r1, sp, #7
    507a:	f007 f8d4 	bl	c226 <ring_buf_put>
    507e:	bb58      	cbnz	r0, 50d8 <cdc_acm_poll_out+0xa4>
		LOG_INF("Ring buffer full, drain buffer");
    5080:	4d18      	ldr	r5, [pc, #96]	; (50e4 <cdc_acm_poll_out+0xb0>)
    5082:	682b      	ldr	r3, [r5, #0]
    5084:	f003 0307 	and.w	r3, r3, #7
    5088:	2b02      	cmp	r3, #2
    508a:	d90a      	bls.n	50a2 <cdc_acm_poll_out+0x6e>
    508c:	4b17      	ldr	r3, [pc, #92]	; (50ec <cdc_acm_poll_out+0xb8>)
    508e:	9308      	str	r3, [sp, #32]
    5090:	aa07      	add	r2, sp, #28
    5092:	2302      	movs	r3, #2
    5094:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5098:	4628      	mov	r0, r5
    509a:	9303      	str	r3, [sp, #12]
    509c:	9307      	str	r3, [sp, #28]
    509e:	f008 fea3 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    50a2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    50a4:	2201      	movs	r2, #1
    50a6:	2100      	movs	r1, #0
    50a8:	f007 f925 	bl	c2f6 <ring_buf_get>
    50ac:	b960      	cbnz	r0, 50c8 <cdc_acm_poll_out+0x94>
			LOG_ERR("Failed to drain buffer");
    50ae:	682b      	ldr	r3, [r5, #0]
    50b0:	075b      	lsls	r3, r3, #29
    50b2:	d0da      	beq.n	506a <cdc_acm_poll_out+0x36>
    50b4:	4b0e      	ldr	r3, [pc, #56]	; (50f0 <cdc_acm_poll_out+0xbc>)
    50b6:	9308      	str	r3, [sp, #32]
    50b8:	2302      	movs	r3, #2
    50ba:	480a      	ldr	r0, [pc, #40]	; (50e4 <cdc_acm_poll_out+0xb0>)
    50bc:	9303      	str	r3, [sp, #12]
    50be:	9307      	str	r3, [sp, #28]
    50c0:	aa07      	add	r2, sp, #28
    50c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    50c6:	e7ce      	b.n	5066 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    50c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    50ca:	2201      	movs	r2, #1
    50cc:	f10d 0107 	add.w	r1, sp, #7
    50d0:	f007 f8a9 	bl	c226 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    50d4:	2800      	cmp	r0, #0
    50d6:	d0ea      	beq.n	50ae <cdc_acm_poll_out+0x7a>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    50d8:	f104 0118 	add.w	r1, r4, #24
    50dc:	4805      	ldr	r0, [pc, #20]	; (50f4 <cdc_acm_poll_out+0xc0>)
    50de:	f009 feb1 	bl	ee44 <k_work_submit_to_queue>
    50e2:	e7c2      	b.n	506a <cdc_acm_poll_out+0x36>
    50e4:	20000280 	.word	0x20000280
    50e8:	00011686 	.word	0x00011686
    50ec:	000116a6 	.word	0x000116a6
    50f0:	000116c5 	.word	0x000116c5
    50f4:	20000cc8 	.word	0x20000cc8

000050f8 <cdc_acm_read_cb>:
{
    50f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (size <= 0) {
    50fa:	1e0d      	subs	r5, r1, #0
{
    50fc:	b08b      	sub	sp, #44	; 0x2c
    50fe:	4606      	mov	r6, r0
    5100:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5102:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    5106:	dd24      	ble.n	5152 <cdc_acm_read_cb+0x5a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5108:	462a      	mov	r2, r5
    510a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    510c:	4639      	mov	r1, r7
    510e:	f007 f88a 	bl	c226 <ring_buf_put>
	if (wrote < size) {
    5112:	4285      	cmp	r5, r0
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5114:	4602      	mov	r2, r0
	if (wrote < size) {
    5116:	d90f      	bls.n	5138 <cdc_acm_read_cb+0x40>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    5118:	4813      	ldr	r0, [pc, #76]	; (5168 <cdc_acm_read_cb+0x70>)
    511a:	6803      	ldr	r3, [r0, #0]
    511c:	075b      	lsls	r3, r3, #29
    511e:	d00b      	beq.n	5138 <cdc_acm_read_cb+0x40>
    5120:	4b12      	ldr	r3, [pc, #72]	; (516c <cdc_acm_read_cb+0x74>)
    5122:	9308      	str	r3, [sp, #32]
    5124:	1aad      	subs	r5, r5, r2
    5126:	2303      	movs	r3, #3
    5128:	aa07      	add	r2, sp, #28
    512a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    512e:	9509      	str	r5, [sp, #36]	; 0x24
    5130:	9303      	str	r3, [sp, #12]
    5132:	9307      	str	r3, [sp, #28]
    5134:	f008 fe58 	bl	dde8 <z_log_msg2_static_create.constprop.0>
	dev_data->rx_ready = true;
    5138:	2301      	movs	r3, #1
    513a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    513e:	6823      	ldr	r3, [r4, #0]
    5140:	b13b      	cbz	r3, 5152 <cdc_acm_read_cb+0x5a>
    5142:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    5146:	b123      	cbz	r3, 5152 <cdc_acm_read_cb+0x5a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5148:	4809      	ldr	r0, [pc, #36]	; (5170 <cdc_acm_read_cb+0x78>)
    514a:	f104 0108 	add.w	r1, r4, #8
    514e:	f009 fe79 	bl	ee44 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    5152:	4b08      	ldr	r3, [pc, #32]	; (5174 <cdc_acm_read_cb+0x7c>)
    5154:	9300      	str	r3, [sp, #0]
    5156:	9401      	str	r4, [sp, #4]
    5158:	2301      	movs	r3, #1
    515a:	2240      	movs	r2, #64	; 0x40
    515c:	4639      	mov	r1, r7
    515e:	4630      	mov	r0, r6
    5160:	f7ff fde4 	bl	4d2c <usb_transfer>
}
    5164:	b00b      	add	sp, #44	; 0x2c
    5166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5168:	20000280 	.word	0x20000280
    516c:	000116dc 	.word	0x000116dc
    5170:	20000cc8 	.word	0x20000cc8
    5174:	000050f9 	.word	0x000050f9

00005178 <cdc_acm_dev_status_cb>:
{
    5178:	b5f0      	push	{r4, r5, r6, r7, lr}
    517a:	4605      	mov	r5, r0
    517c:	b089      	sub	sp, #36	; 0x24
    517e:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    5180:	4601      	mov	r1, r0
    5182:	485f      	ldr	r0, [pc, #380]	; (5300 <cdc_acm_dev_status_cb+0x188>)
    5184:	f008 fd8d 	bl	dca2 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    5188:	4604      	mov	r4, r0
    518a:	b988      	cbnz	r0, 51b0 <cdc_acm_dev_status_cb+0x38>
		LOG_WRN("Device data not found for cfg %p", cfg);
    518c:	485d      	ldr	r0, [pc, #372]	; (5304 <cdc_acm_dev_status_cb+0x18c>)
    518e:	6803      	ldr	r3, [r0, #0]
    5190:	f013 0f06 	tst.w	r3, #6
    5194:	d00a      	beq.n	51ac <cdc_acm_dev_status_cb+0x34>
    5196:	4b5c      	ldr	r3, [pc, #368]	; (5308 <cdc_acm_dev_status_cb+0x190>)
    5198:	aa05      	add	r2, sp, #20
    519a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    519e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    51a2:	2303      	movs	r3, #3
    51a4:	9301      	str	r3, [sp, #4]
    51a6:	9305      	str	r3, [sp, #20]
    51a8:	f008 fe1e 	bl	dde8 <z_log_msg2_static_create.constprop.0>
}
    51ac:	b009      	add	sp, #36	; 0x24
    51ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    51b0:	4605      	mov	r5, r0
	switch (status) {
    51b2:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    51b4:	f855 3980 	ldr.w	r3, [r5], #-128
    51b8:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    51ba:	2905      	cmp	r1, #5
    51bc:	d8f6      	bhi.n	51ac <cdc_acm_dev_status_cb+0x34>
    51be:	a301      	add	r3, pc, #4	; (adr r3, 51c4 <cdc_acm_dev_status_cb+0x4c>)
    51c0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    51c4:	00005261 	.word	0x00005261
    51c8:	000051ad 	.word	0x000051ad
    51cc:	000051dd 	.word	0x000051dd
    51d0:	00005241 	.word	0x00005241
    51d4:	0000526d 	.word	0x0000526d
    51d8:	00005295 	.word	0x00005295
		LOG_INF("Device configured");
    51dc:	4849      	ldr	r0, [pc, #292]	; (5304 <cdc_acm_dev_status_cb+0x18c>)
    51de:	6803      	ldr	r3, [r0, #0]
    51e0:	f003 0307 	and.w	r3, r3, #7
    51e4:	2b02      	cmp	r3, #2
    51e6:	d909      	bls.n	51fc <cdc_acm_dev_status_cb+0x84>
    51e8:	4b48      	ldr	r3, [pc, #288]	; (530c <cdc_acm_dev_status_cb+0x194>)
    51ea:	9306      	str	r3, [sp, #24]
    51ec:	aa05      	add	r2, sp, #20
    51ee:	2302      	movs	r3, #2
    51f0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    51f4:	9301      	str	r3, [sp, #4]
    51f6:	9305      	str	r3, [sp, #20]
    51f8:	f008 fdf6 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    51fc:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    5200:	b939      	cbnz	r1, 5212 <cdc_acm_dev_status_cb+0x9a>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    5202:	6a3b      	ldr	r3, [r7, #32]
    5204:	462a      	mov	r2, r5
    5206:	7b18      	ldrb	r0, [r3, #12]
    5208:	f7ff ff76 	bl	50f8 <cdc_acm_read_cb>
			dev_data->configured = true;
    520c:	2301      	movs	r3, #1
    520e:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    5212:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    5216:	2b00      	cmp	r3, #0
    5218:	d1c8      	bne.n	51ac <cdc_acm_dev_status_cb+0x34>
			dev_data->tx_ready = true;
    521a:	2301      	movs	r3, #1
    521c:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    5220:	f854 3c80 	ldr.w	r3, [r4, #-128]
    5224:	2b00      	cmp	r3, #0
    5226:	d0c1      	beq.n	51ac <cdc_acm_dev_status_cb+0x34>
    5228:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    522c:	2b00      	cmp	r3, #0
    522e:	d0bd      	beq.n	51ac <cdc_acm_dev_status_cb+0x34>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5230:	4837      	ldr	r0, [pc, #220]	; (5310 <cdc_acm_dev_status_cb+0x198>)
    5232:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    5236:	b009      	add	sp, #36	; 0x24
    5238:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    523c:	f009 be02 	b.w	ee44 <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    5240:	4830      	ldr	r0, [pc, #192]	; (5304 <cdc_acm_dev_status_cb+0x18c>)
    5242:	6803      	ldr	r3, [r0, #0]
    5244:	f003 0307 	and.w	r3, r3, #7
    5248:	2b02      	cmp	r3, #2
    524a:	d909      	bls.n	5260 <cdc_acm_dev_status_cb+0xe8>
    524c:	4b31      	ldr	r3, [pc, #196]	; (5314 <cdc_acm_dev_status_cb+0x19c>)
    524e:	9306      	str	r3, [sp, #24]
    5250:	aa05      	add	r2, sp, #20
    5252:	2302      	movs	r3, #2
    5254:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5258:	9301      	str	r3, [sp, #4]
    525a:	9305      	str	r3, [sp, #20]
    525c:	f008 fdc4 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    5260:	4628      	mov	r0, r5
}
    5262:	b009      	add	sp, #36	; 0x24
    5264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    5268:	f7ff be82 	b.w	4f70 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    526c:	4825      	ldr	r0, [pc, #148]	; (5304 <cdc_acm_dev_status_cb+0x18c>)
    526e:	6803      	ldr	r3, [r0, #0]
    5270:	f003 0307 	and.w	r3, r3, #7
    5274:	2b02      	cmp	r3, #2
    5276:	d909      	bls.n	528c <cdc_acm_dev_status_cb+0x114>
    5278:	4b27      	ldr	r3, [pc, #156]	; (5318 <cdc_acm_dev_status_cb+0x1a0>)
    527a:	9306      	str	r3, [sp, #24]
    527c:	aa05      	add	r2, sp, #20
    527e:	2302      	movs	r3, #2
    5280:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5284:	9301      	str	r3, [sp, #4]
    5286:	9305      	str	r3, [sp, #20]
    5288:	f008 fdae 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    528c:	2301      	movs	r3, #1
    528e:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    5292:	e78b      	b.n	51ac <cdc_acm_dev_status_cb+0x34>
		LOG_INF("Device resumed");
    5294:	4e1b      	ldr	r6, [pc, #108]	; (5304 <cdc_acm_dev_status_cb+0x18c>)
    5296:	6833      	ldr	r3, [r6, #0]
    5298:	f003 0307 	and.w	r3, r3, #7
    529c:	2b02      	cmp	r3, #2
    529e:	d90a      	bls.n	52b6 <cdc_acm_dev_status_cb+0x13e>
    52a0:	4b1e      	ldr	r3, [pc, #120]	; (531c <cdc_acm_dev_status_cb+0x1a4>)
    52a2:	9306      	str	r3, [sp, #24]
    52a4:	aa05      	add	r2, sp, #20
    52a6:	2302      	movs	r3, #2
    52a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    52ac:	4630      	mov	r0, r6
    52ae:	9301      	str	r3, [sp, #4]
    52b0:	9305      	str	r3, [sp, #20]
    52b2:	f008 fd99 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    52b6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    52ba:	2b00      	cmp	r3, #0
    52bc:	f43f af76 	beq.w	51ac <cdc_acm_dev_status_cb+0x34>
			LOG_INF("from suspend");
    52c0:	6833      	ldr	r3, [r6, #0]
    52c2:	f003 0307 	and.w	r3, r3, #7
    52c6:	2b02      	cmp	r3, #2
    52c8:	d90a      	bls.n	52e0 <cdc_acm_dev_status_cb+0x168>
    52ca:	4b15      	ldr	r3, [pc, #84]	; (5320 <cdc_acm_dev_status_cb+0x1a8>)
    52cc:	9306      	str	r3, [sp, #24]
    52ce:	480d      	ldr	r0, [pc, #52]	; (5304 <cdc_acm_dev_status_cb+0x18c>)
    52d0:	2302      	movs	r3, #2
    52d2:	aa05      	add	r2, sp, #20
    52d4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    52d8:	9301      	str	r3, [sp, #4]
    52da:	9305      	str	r3, [sp, #20]
    52dc:	f008 fd84 	bl	dde8 <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    52e0:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    52e4:	2100      	movs	r1, #0
    52e6:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    52ea:	2b00      	cmp	r3, #0
    52ec:	f43f af5e 	beq.w	51ac <cdc_acm_dev_status_cb+0x34>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    52f0:	6a3b      	ldr	r3, [r7, #32]
    52f2:	7b18      	ldrb	r0, [r3, #12]
    52f4:	462a      	mov	r2, r5
}
    52f6:	b009      	add	sp, #36	; 0x24
    52f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    52fc:	f7ff befc 	b.w	50f8 <cdc_acm_read_cb>
    5300:	200016dc 	.word	0x200016dc
    5304:	20000280 	.word	0x20000280
    5308:	000116fd 	.word	0x000116fd
    530c:	0001171e 	.word	0x0001171e
    5310:	20000cc8 	.word	0x20000cc8
    5314:	00011730 	.word	0x00011730
    5318:	00011744 	.word	0x00011744
    531c:	00011755 	.word	0x00011755
    5320:	00011764 	.word	0x00011764

00005324 <cdc_acm_fifo_fill>:
{
    5324:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5326:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    5328:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    532c:	b088      	sub	sp, #32
    532e:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    5330:	b113      	cbz	r3, 5338 <cdc_acm_fifo_fill+0x14>
    5332:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    5336:	b193      	cbz	r3, 535e <cdc_acm_fifo_fill+0x3a>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    5338:	4819      	ldr	r0, [pc, #100]	; (53a0 <cdc_acm_fifo_fill+0x7c>)
    533a:	6804      	ldr	r4, [r0, #0]
    533c:	f014 0406 	ands.w	r4, r4, #6
    5340:	d02b      	beq.n	539a <cdc_acm_fifo_fill+0x76>
    5342:	4b18      	ldr	r3, [pc, #96]	; (53a4 <cdc_acm_fifo_fill+0x80>)
    5344:	aa05      	add	r2, sp, #20
    5346:	e9cd 3506 	strd	r3, r5, [sp, #24]
    534a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    534e:	2303      	movs	r3, #3
    5350:	9301      	str	r3, [sp, #4]
    5352:	9305      	str	r3, [sp, #20]
    5354:	f008 fd48 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		return 0;
    5358:	2000      	movs	r0, #0
}
    535a:	b008      	add	sp, #32
    535c:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    535e:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    5360:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    5364:	f006 ff5f 	bl	c226 <ring_buf_put>
	if (wrote < len) {
    5368:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    536a:	4604      	mov	r4, r0
	if (wrote < len) {
    536c:	d210      	bcs.n	5390 <cdc_acm_fifo_fill+0x6c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    536e:	480c      	ldr	r0, [pc, #48]	; (53a0 <cdc_acm_fifo_fill+0x7c>)
    5370:	6803      	ldr	r3, [r0, #0]
    5372:	f013 0f06 	tst.w	r3, #6
    5376:	d00b      	beq.n	5390 <cdc_acm_fifo_fill+0x6c>
    5378:	4b0b      	ldr	r3, [pc, #44]	; (53a8 <cdc_acm_fifo_fill+0x84>)
    537a:	9306      	str	r3, [sp, #24]
    537c:	1b2d      	subs	r5, r5, r4
    537e:	2303      	movs	r3, #3
    5380:	aa05      	add	r2, sp, #20
    5382:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5386:	9507      	str	r5, [sp, #28]
    5388:	9301      	str	r3, [sp, #4]
    538a:	9305      	str	r3, [sp, #20]
    538c:	f008 fd2c 	bl	dde8 <z_log_msg2_static_create.constprop.0>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5390:	4806      	ldr	r0, [pc, #24]	; (53ac <cdc_acm_fifo_fill+0x88>)
    5392:	f106 0118 	add.w	r1, r6, #24
    5396:	f009 fd55 	bl	ee44 <k_work_submit_to_queue>
		return 0;
    539a:	4620      	mov	r0, r4
    539c:	e7dd      	b.n	535a <cdc_acm_fifo_fill+0x36>
    539e:	bf00      	nop
    53a0:	20000280 	.word	0x20000280
    53a4:	00011771 	.word	0x00011771
    53a8:	000116dc 	.word	0x000116dc
    53ac:	20000cc8 	.word	0x20000cc8

000053b0 <cdc_acm_int_in>:
{
    53b0:	b510      	push	{r4, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    53b2:	4601      	mov	r1, r0
{
    53b4:	b088      	sub	sp, #32
    53b6:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    53b8:	480c      	ldr	r0, [pc, #48]	; (53ec <cdc_acm_int_in+0x3c>)
    53ba:	f008 fc8c 	bl	dcd6 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    53be:	b988      	cbnz	r0, 53e4 <cdc_acm_int_in+0x34>
		LOG_WRN("Device data not found for endpoint %u", ep);
    53c0:	480b      	ldr	r0, [pc, #44]	; (53f0 <cdc_acm_int_in+0x40>)
    53c2:	6803      	ldr	r3, [r0, #0]
    53c4:	f013 0f06 	tst.w	r3, #6
    53c8:	d00a      	beq.n	53e0 <cdc_acm_int_in+0x30>
    53ca:	4b0a      	ldr	r3, [pc, #40]	; (53f4 <cdc_acm_int_in+0x44>)
    53cc:	aa05      	add	r2, sp, #20
    53ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
    53d2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    53d6:	2303      	movs	r3, #3
    53d8:	9301      	str	r3, [sp, #4]
    53da:	9305      	str	r3, [sp, #20]
    53dc:	f008 fd04 	bl	dde8 <z_log_msg2_static_create.constprop.0>
}
    53e0:	b008      	add	sp, #32
    53e2:	bd10      	pop	{r4, pc}
	dev_data->notification_sent = 1U;
    53e4:	2301      	movs	r3, #1
    53e6:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    53ea:	e7f9      	b.n	53e0 <cdc_acm_int_in+0x30>
    53ec:	200016dc 	.word	0x200016dc
    53f0:	20000280 	.word	0x20000280
    53f4:	000117a3 	.word	0x000117a3

000053f8 <cdc_acm_class_handle_req>:
{
    53f8:	b570      	push	{r4, r5, r6, lr}
    53fa:	4604      	mov	r4, r0
    53fc:	b088      	sub	sp, #32
    53fe:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    5400:	7901      	ldrb	r1, [r0, #4]
    5402:	481c      	ldr	r0, [pc, #112]	; (5474 <cdc_acm_class_handle_req+0x7c>)
{
    5404:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    5406:	f008 fc58 	bl	dcba <usb_get_dev_data_by_iface>
	if (common == NULL) {
    540a:	b998      	cbnz	r0, 5434 <cdc_acm_class_handle_req+0x3c>
		LOG_WRN("Device data not found for interface %u",
    540c:	481a      	ldr	r0, [pc, #104]	; (5478 <cdc_acm_class_handle_req+0x80>)
    540e:	6803      	ldr	r3, [r0, #0]
    5410:	f013 0f06 	tst.w	r3, #6
    5414:	d00b      	beq.n	542e <cdc_acm_class_handle_req+0x36>
    5416:	88a3      	ldrh	r3, [r4, #4]
    5418:	4a18      	ldr	r2, [pc, #96]	; (547c <cdc_acm_class_handle_req+0x84>)
    541a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    541e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5422:	2303      	movs	r3, #3
    5424:	aa05      	add	r2, sp, #20
    5426:	9301      	str	r3, [sp, #4]
    5428:	9305      	str	r3, [sp, #20]
    542a:	f008 fcdd 	bl	dde8 <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    542e:	f06f 0012 	mvn.w	r0, #18
    5432:	e011      	b.n	5458 <cdc_acm_class_handle_req+0x60>
	if (usb_reqtype_is_to_device(setup)) {
    5434:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    5438:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    543a:	2a00      	cmp	r2, #0
    543c:	db12      	blt.n	5464 <cdc_acm_class_handle_req+0x6c>
		switch (setup->bRequest) {
    543e:	2b20      	cmp	r3, #32
    5440:	d004      	beq.n	544c <cdc_acm_class_handle_req+0x54>
    5442:	2b22      	cmp	r3, #34	; 0x22
    5444:	d00a      	beq.n	545c <cdc_acm_class_handle_req+0x64>
	return -ENOTSUP;
    5446:	f06f 0085 	mvn.w	r0, #133	; 0x85
    544a:	e005      	b.n	5458 <cdc_acm_class_handle_req+0x60>
			memcpy(&dev_data->line_coding, *data,
    544c:	6829      	ldr	r1, [r5, #0]
    544e:	2207      	movs	r2, #7
    5450:	380c      	subs	r0, #12
    5452:	f008 fecd 	bl	e1f0 <memcpy>
			return 0;
    5456:	2000      	movs	r0, #0
}
    5458:	b008      	add	sp, #32
    545a:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    545c:	8863      	ldrh	r3, [r4, #2]
    545e:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    5462:	e7f8      	b.n	5456 <cdc_acm_class_handle_req+0x5e>
		if (setup->bRequest == GET_LINE_CODING) {
    5464:	2b21      	cmp	r3, #33	; 0x21
    5466:	d1ee      	bne.n	5446 <cdc_acm_class_handle_req+0x4e>
			*data = (uint8_t *)(&dev_data->line_coding);
    5468:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    546a:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    546c:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    546e:	6033      	str	r3, [r6, #0]
    5470:	e7f1      	b.n	5456 <cdc_acm_class_handle_req+0x5e>
    5472:	bf00      	nop
    5474:	200016dc 	.word	0x200016dc
    5478:	20000280 	.word	0x20000280
    547c:	000117c9 	.word	0x000117c9

00005480 <cdc_acm_init>:
{
    5480:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5482:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    5484:	2300      	movs	r3, #0
    5486:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    548a:	4b0c      	ldr	r3, [pc, #48]	; (54bc <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    548c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    5490:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    5492:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5496:	b969      	cbnz	r1, 54b4 <cdc_acm_init+0x34>
	list->head = node;
    5498:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    549c:	f104 0008 	add.w	r0, r4, #8
    54a0:	4907      	ldr	r1, [pc, #28]	; (54c0 <cdc_acm_init+0x40>)
    54a2:	f009 fcc6 	bl	ee32 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    54a6:	f104 0018 	add.w	r0, r4, #24
    54aa:	4906      	ldr	r1, [pc, #24]	; (54c4 <cdc_acm_init+0x44>)
    54ac:	f009 fcc1 	bl	ee32 <k_work_init>
}
    54b0:	2000      	movs	r0, #0
    54b2:	bd10      	pop	{r4, pc}
	parent->next = child;
    54b4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    54b6:	605a      	str	r2, [r3, #4]
}
    54b8:	e7f0      	b.n	549c <cdc_acm_init+0x1c>
    54ba:	bf00      	nop
    54bc:	200016dc 	.word	0x200016dc
    54c0:	0000dd2d 	.word	0x0000dd2d
    54c4:	00004fe1 	.word	0x00004fe1

000054c8 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    54c8:	b530      	push	{r4, r5, lr}
    54ca:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    54cc:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    54ce:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    54d0:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    54d4:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    54d6:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    54d8:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    54dc:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    54de:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    54e2:	2002      	movs	r0, #2
    54e4:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    54e8:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    54ea:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    54ee:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    54f2:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    54f4:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    54f8:	220a      	movs	r2, #10
    54fa:	a901      	add	r1, sp, #4
    54fc:	f7fe ffca 	bl	4494 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    5500:	4c05      	ldr	r4, [pc, #20]	; (5518 <cdc_acm_send_notification.isra.0+0x50>)
    5502:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    5506:	b923      	cbnz	r3, 5512 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    5508:	2001      	movs	r0, #1
    550a:	f009 fe10 	bl	f12e <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    550e:	3c01      	subs	r4, #1
    5510:	d1f7      	bne.n	5502 <cdc_acm_send_notification.isra.0+0x3a>
}
    5512:	b005      	add	sp, #20
    5514:	bd30      	pop	{r4, r5, pc}
    5516:	bf00      	nop
    5518:	000186a1 	.word	0x000186a1

0000551c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    551c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    551e:	4d09      	ldr	r5, [pc, #36]	; (5544 <z_usb_work_q_init+0x28>)
    5520:	4909      	ldr	r1, [pc, #36]	; (5548 <z_usb_work_q_init+0x2c>)
    5522:	2400      	movs	r4, #0
    5524:	9400      	str	r4, [sp, #0]
    5526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    552a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    552e:	4628      	mov	r0, r5
    5530:	f005 fbf4 	bl	ad1c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    5534:	4905      	ldr	r1, [pc, #20]	; (554c <z_usb_work_q_init+0x30>)
    5536:	4628      	mov	r0, r5
    5538:	f004 ffce 	bl	a4d8 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    553c:	4620      	mov	r0, r4
    553e:	b003      	add	sp, #12
    5540:	bd30      	pop	{r4, r5, pc}
    5542:	bf00      	nop
    5544:	20000cc8 	.word	0x20000cc8
    5548:	20003258 	.word	0x20003258
    554c:	00011806 	.word	0x00011806

00005550 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    5550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5554:	4605      	mov	r5, r0
	__asm__ volatile(
    5556:	f04f 0320 	mov.w	r3, #32
    555a:	f3ef 8611 	mrs	r6, BASEPRI
    555e:	f383 8812 	msr	BASEPRI_MAX, r3
    5562:	f3bf 8f6f 	isb	sy
	return list->head;
    5566:	4b0e      	ldr	r3, [pc, #56]	; (55a0 <pm_state_notify+0x50>)
    5568:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    556a:	b19c      	cbz	r4, 5594 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    556c:	4f0d      	ldr	r7, [pc, #52]	; (55a4 <pm_state_notify+0x54>)
    556e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 55a8 <pm_state_notify+0x58>
    5572:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    5576:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    557a:	2d00      	cmp	r5, #0
    557c:	bf08      	it	eq
    557e:	4613      	moveq	r3, r2
		if (callback) {
    5580:	b12b      	cbz	r3, 558e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5582:	f898 2014 	ldrb.w	r2, [r8, #20]
    5586:	fb09 f202 	mul.w	r2, r9, r2
    558a:	5cb8      	ldrb	r0, [r7, r2]
    558c:	4798      	blx	r3
	return node->next;
    558e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5590:	2c00      	cmp	r4, #0
    5592:	d1f0      	bne.n	5576 <pm_state_notify+0x26>
	__asm__ volatile(
    5594:	f386 8811 	msr	BASEPRI, r6
    5598:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    559c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55a0:	200016e4 	.word	0x200016e4
    55a4:	200016ec 	.word	0x200016ec
    55a8:	20002294 	.word	0x20002294

000055ac <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    55ac:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    55ae:	2301      	movs	r3, #1
    55b0:	f000 001f 	and.w	r0, r0, #31
    55b4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    55b8:	4b07      	ldr	r3, [pc, #28]	; (55d8 <atomic_clear_bit.constprop.0+0x2c>)
    55ba:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    55be:	43c0      	mvns	r0, r0
    55c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    55c4:	e853 2f00 	ldrex	r2, [r3]
    55c8:	4002      	ands	r2, r0
    55ca:	e843 2100 	strex	r1, r2, [r3]
    55ce:	2900      	cmp	r1, #0
    55d0:	d1f8      	bne.n	55c4 <atomic_clear_bit.constprop.0+0x18>
    55d2:	f3bf 8f5b 	dmb	ish
}
    55d6:	4770      	bx	lr
    55d8:	200016f8 	.word	0x200016f8

000055dc <pm_system_resume>:

void pm_system_resume(void)
{
    55dc:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    55de:	4b1d      	ldr	r3, [pc, #116]	; (5654 <pm_system_resume+0x78>)
    55e0:	7d1c      	ldrb	r4, [r3, #20]
    55e2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    55e6:	f004 031f 	and.w	r3, r4, #31
    55ea:	2201      	movs	r2, #1
    55ec:	409a      	lsls	r2, r3
    55ee:	4b1a      	ldr	r3, [pc, #104]	; (5658 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    55f0:	0961      	lsrs	r1, r4, #5
{
    55f2:	b085      	sub	sp, #20
    55f4:	43d0      	mvns	r0, r2
    55f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    55fa:	e853 1f00 	ldrex	r1, [r3]
    55fe:	ea01 0500 	and.w	r5, r1, r0
    5602:	e843 5c00 	strex	ip, r5, [r3]
    5606:	f1bc 0f00 	cmp.w	ip, #0
    560a:	d1f6      	bne.n	55fa <pm_system_resume+0x1e>
    560c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5610:	4211      	tst	r1, r2
    5612:	d017      	beq.n	5644 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    5614:	4d11      	ldr	r5, [pc, #68]	; (565c <pm_system_resume+0x80>)
    5616:	220c      	movs	r2, #12
    5618:	fb02 5204 	mla	r2, r2, r4, r5
    561c:	ca07      	ldmia	r2, {r0, r1, r2}
    561e:	ab01      	add	r3, sp, #4
    5620:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    5624:	4a0e      	ldr	r2, [pc, #56]	; (5660 <pm_system_resume+0x84>)
    5626:	b17a      	cbz	r2, 5648 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    5628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    562c:	f008 fe17 	bl	e25e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    5630:	2000      	movs	r0, #0
    5632:	f7ff ff8d 	bl	5550 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5636:	230c      	movs	r3, #12
    5638:	435c      	muls	r4, r3
    563a:	192a      	adds	r2, r5, r4
    563c:	2300      	movs	r3, #0
    563e:	512b      	str	r3, [r5, r4]
    5640:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    5644:	b005      	add	sp, #20
    5646:	bd30      	pop	{r4, r5, pc}
    5648:	f382 8811 	msr	BASEPRI, r2
    564c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5650:	e7ee      	b.n	5630 <pm_system_resume+0x54>
    5652:	bf00      	nop
    5654:	20002294 	.word	0x20002294
    5658:	200016fc 	.word	0x200016fc
    565c:	200016ec 	.word	0x200016ec
    5660:	0000e25f 	.word	0x0000e25f

00005664 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    5664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    5668:	4b35      	ldr	r3, [pc, #212]	; (5740 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    566a:	4a36      	ldr	r2, [pc, #216]	; (5744 <pm_system_suspend+0xe0>)
    566c:	7d1c      	ldrb	r4, [r3, #20]
    566e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5672:	0963      	lsrs	r3, r4, #5
    5674:	ea4f 0983 	mov.w	r9, r3, lsl #2
    5678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    567c:	4d32      	ldr	r5, [pc, #200]	; (5748 <pm_system_suspend+0xe4>)
    567e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5682:	f004 081f 	and.w	r8, r4, #31
    5686:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    568a:	f013 0f01 	tst.w	r3, #1
{
    568e:	b085      	sub	sp, #20
    5690:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5692:	d10a      	bne.n	56aa <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    5694:	4601      	mov	r1, r0
    5696:	4620      	mov	r0, r4
    5698:	f000 f876 	bl	5788 <pm_policy_next_state>
		if (info != NULL) {
    569c:	b128      	cbz	r0, 56aa <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    569e:	c807      	ldmia	r0, {r0, r1, r2}
    56a0:	230c      	movs	r3, #12
    56a2:	fb03 5304 	mla	r3, r3, r4, r5
    56a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    56aa:	230c      	movs	r3, #12
    56ac:	4363      	muls	r3, r4
    56ae:	18ea      	adds	r2, r5, r3
    56b0:	5cee      	ldrb	r6, [r5, r3]
    56b2:	b936      	cbnz	r6, 56c2 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    56b4:	4620      	mov	r0, r4
    56b6:	f7ff ff79 	bl	55ac <atomic_clear_bit.constprop.0>
		ret = false;
    56ba:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    56bc:	b005      	add	sp, #20
    56be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    56c2:	1c7b      	adds	r3, r7, #1
    56c4:	d00f      	beq.n	56e6 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    56c6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    56ca:	4820      	ldr	r0, [pc, #128]	; (574c <pm_system_suspend+0xe8>)
    56cc:	4a20      	ldr	r2, [pc, #128]	; (5750 <pm_system_suspend+0xec>)
    56ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    56d2:	2100      	movs	r1, #0
    56d4:	2300      	movs	r3, #0
    56d6:	fbec 0106 	umlal	r0, r1, ip, r6
    56da:	f7fa fd11 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    56de:	2101      	movs	r1, #1
    56e0:	1a38      	subs	r0, r7, r0
    56e2:	f009 fd04 	bl	f0ee <z_set_timeout_expiry>
	k_sched_lock();
    56e6:	f005 fba9 	bl	ae3c <k_sched_lock>
	pm_state_notify(true);
    56ea:	2001      	movs	r0, #1
    56ec:	f7ff ff30 	bl	5550 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    56f0:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    56f4:	2301      	movs	r3, #1
    56f6:	fa03 f808 	lsl.w	r8, r3, r8
    56fa:	4b16      	ldr	r3, [pc, #88]	; (5754 <pm_system_suspend+0xf0>)
    56fc:	4499      	add	r9, r3
    56fe:	e859 3f00 	ldrex	r3, [r9]
    5702:	ea43 0308 	orr.w	r3, r3, r8
    5706:	e849 3200 	strex	r2, r3, [r9]
    570a:	2a00      	cmp	r2, #0
    570c:	d1f7      	bne.n	56fe <pm_system_suspend+0x9a>
    570e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    5712:	230c      	movs	r3, #12
    5714:	fb03 5504 	mla	r5, r3, r4, r5
    5718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    571c:	ab01      	add	r3, sp, #4
    571e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    5722:	4a0d      	ldr	r2, [pc, #52]	; (5758 <pm_system_suspend+0xf4>)
    5724:	b11a      	cbz	r2, 572e <pm_system_suspend+0xca>
		pm_power_state_set(info);
    5726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    572a:	f008 fd85 	bl	e238 <pm_power_state_set>
	pm_system_resume();
    572e:	f7ff ff55 	bl	55dc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    5732:	4620      	mov	r0, r4
    5734:	f7ff ff3a 	bl	55ac <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    5738:	f005 fd4e 	bl	b1d8 <k_sched_unlock>
	bool ret = true;
    573c:	2001      	movs	r0, #1
    573e:	e7bd      	b.n	56bc <pm_system_suspend+0x58>
    5740:	20002294 	.word	0x20002294
    5744:	200016f8 	.word	0x200016f8
    5748:	200016ec 	.word	0x200016ec
    574c:	000f423f 	.word	0x000f423f
    5750:	000f4240 	.word	0x000f4240
    5754:	200016fc 	.word	0x200016fc
    5758:	0000e239 	.word	0x0000e239

0000575c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    575c:	4b05      	ldr	r3, [pc, #20]	; (5774 <pm_constraint_get+0x18>)
    575e:	f3bf 8f5b 	dmb	ish
    5762:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5766:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    576a:	fab0 f080 	clz	r0, r0
    576e:	0940      	lsrs	r0, r0, #5
    5770:	4770      	bx	lr
    5772:	bf00      	nop
    5774:	20001700 	.word	0x20001700

00005778 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5778:	b908      	cbnz	r0, 577e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    577a:	4b02      	ldr	r3, [pc, #8]	; (5784 <pm_state_cpu_get_all+0xc>)
    577c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    577e:	2000      	movs	r0, #0
    5780:	4770      	bx	lr
    5782:	bf00      	nop
    5784:	0000ffcc 	.word	0x0000ffcc

00005788 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    5788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    578c:	b085      	sub	sp, #20
    578e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5790:	a903      	add	r1, sp, #12
    5792:	f7ff fff1 	bl	5778 <pm_state_cpu_get_all>
    5796:	f8df a074 	ldr.w	sl, [pc, #116]	; 580c <pm_policy_next_state+0x84>
    579a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5810 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    579e:	1e44      	subs	r4, r0, #1
    57a0:	b224      	sxth	r4, r4
    57a2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    57a6:	f04f 0900 	mov.w	r9, #0
    57aa:	1c63      	adds	r3, r4, #1
    57ac:	d104      	bne.n	57b8 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    57ae:	2500      	movs	r5, #0
}
    57b0:	4628      	mov	r0, r5
    57b2:	b005      	add	sp, #20
    57b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    57b8:	9a03      	ldr	r2, [sp, #12]
    57ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    57be:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    57c2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    57c6:	f7ff ffc9 	bl	575c <pm_constraint_get>
    57ca:	b1e0      	cbz	r0, 5806 <pm_policy_next_state+0x7e>
    57cc:	6868      	ldr	r0, [r5, #4]
    57ce:	f04f 0b00 	mov.w	fp, #0
    57d2:	46d4      	mov	ip, sl
    57d4:	4659      	mov	r1, fp
    57d6:	fbe0 c107 	umlal	ip, r1, r0, r7
    57da:	4642      	mov	r2, r8
    57dc:	464b      	mov	r3, r9
    57de:	4660      	mov	r0, ip
    57e0:	f7fa fc8e 	bl	100 <__aeabi_uldivmod>
    57e4:	9001      	str	r0, [sp, #4]
    57e6:	68a8      	ldr	r0, [r5, #8]
    57e8:	46d4      	mov	ip, sl
    57ea:	4659      	mov	r1, fp
    57ec:	fbe0 c107 	umlal	ip, r1, r0, r7
    57f0:	4642      	mov	r2, r8
    57f2:	464b      	mov	r3, r9
    57f4:	4660      	mov	r0, ip
    57f6:	f7fa fc83 	bl	100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    57fa:	1c72      	adds	r2, r6, #1
    57fc:	d0d8      	beq.n	57b0 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    57fe:	9b01      	ldr	r3, [sp, #4]
    5800:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    5802:	42b0      	cmp	r0, r6
    5804:	d9d4      	bls.n	57b0 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5806:	3c01      	subs	r4, #1
    5808:	b224      	sxth	r4, r4
    580a:	e7ce      	b.n	57aa <pm_policy_next_state+0x22>
    580c:	000f423f 	.word	0x000f423f
    5810:	000f4240 	.word	0x000f4240

00005814 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5814:	4901      	ldr	r1, [pc, #4]	; (581c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5816:	2210      	movs	r2, #16
	str	r2, [r1]
    5818:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    581a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    581c:	e000ed10 	.word	0xe000ed10

00005820 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5820:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5822:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5824:	f380 8811 	msr	BASEPRI, r0
	isb
    5828:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    582c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5830:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5832:	b662      	cpsie	i
	isb
    5834:	f3bf 8f6f 	isb	sy

	bx	lr
    5838:	4770      	bx	lr
    583a:	bf00      	nop

0000583c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    583c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    583e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5840:	f381 8811 	msr	BASEPRI, r1

	wfe
    5844:	bf20      	wfe

	msr	BASEPRI, r0
    5846:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    584a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    584c:	4770      	bx	lr
    584e:	bf00      	nop

00005850 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5854:	b089      	sub	sp, #36	; 0x24
    5856:	4680      	mov	r8, r0
    5858:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    585a:	460c      	mov	r4, r1
    585c:	2900      	cmp	r1, #0
    585e:	d053      	beq.n	5908 <z_arm_fatal_error+0xb8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5860:	4d2d      	ldr	r5, [pc, #180]	; (5918 <z_arm_fatal_error+0xc8>)
    5862:	682b      	ldr	r3, [r5, #0]
    5864:	0758      	lsls	r0, r3, #29
    5866:	d04f      	beq.n	5908 <z_arm_fatal_error+0xb8>
    5868:	e9d1 0100 	ldrd	r0, r1, [r1]
    586c:	4e2b      	ldr	r6, [pc, #172]	; (591c <z_arm_fatal_error+0xcc>)
    586e:	68a3      	ldr	r3, [r4, #8]
    5870:	46e9      	mov	r9, sp
    5872:	b088      	sub	sp, #32
    5874:	466a      	mov	r2, sp
    5876:	e9c2 6004 	strd	r6, r0, [r2, #16]
    587a:	2605      	movs	r6, #5
    587c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    5880:	60be      	str	r6, [r7, #8]
    5882:	f842 6f0c 	str.w	r6, [r2, #12]!
    5886:	2300      	movs	r3, #0
    5888:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    588c:	4628      	mov	r0, r5
    588e:	f007 f8e4 	bl	ca5a <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5892:	682b      	ldr	r3, [r5, #0]
    5894:	0759      	lsls	r1, r3, #29
    5896:	46cd      	mov	sp, r9
    5898:	d036      	beq.n	5908 <z_arm_fatal_error+0xb8>
    589a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    589e:	4b20      	ldr	r3, [pc, #128]	; (5920 <z_arm_fatal_error+0xd0>)
    58a0:	60be      	str	r6, [r7, #8]
    58a2:	b088      	sub	sp, #32
    58a4:	466a      	mov	r2, sp
    58a6:	e9c2 3004 	strd	r3, r0, [r2, #16]
    58aa:	6963      	ldr	r3, [r4, #20]
    58ac:	6191      	str	r1, [r2, #24]
    58ae:	61d3      	str	r3, [r2, #28]
    58b0:	f842 6f0c 	str.w	r6, [r2, #12]!
    58b4:	2300      	movs	r3, #0
    58b6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    58ba:	4628      	mov	r0, r5
    58bc:	f007 f8cd 	bl	ca5a <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    58c0:	682b      	ldr	r3, [r5, #0]
    58c2:	075a      	lsls	r2, r3, #29
    58c4:	46cd      	mov	sp, r9
    58c6:	d01f      	beq.n	5908 <z_arm_fatal_error+0xb8>
    58c8:	69e3      	ldr	r3, [r4, #28]
    58ca:	4a16      	ldr	r2, [pc, #88]	; (5924 <z_arm_fatal_error+0xd4>)
    58cc:	2603      	movs	r6, #3
    58ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    58d2:	607e      	str	r6, [r7, #4]
    58d4:	617e      	str	r6, [r7, #20]
    58d6:	2300      	movs	r3, #0
    58d8:	f107 0214 	add.w	r2, r7, #20
    58dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    58e0:	4628      	mov	r0, r5
    58e2:	f007 f8ba 	bl	ca5a <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    58e6:	682b      	ldr	r3, [r5, #0]
    58e8:	075b      	lsls	r3, r3, #29
    58ea:	d00d      	beq.n	5908 <z_arm_fatal_error+0xb8>
    58ec:	69a3      	ldr	r3, [r4, #24]
    58ee:	4a0e      	ldr	r2, [pc, #56]	; (5928 <z_arm_fatal_error+0xd8>)
    58f0:	607e      	str	r6, [r7, #4]
    58f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    58f6:	617e      	str	r6, [r7, #20]
    58f8:	2300      	movs	r3, #0
    58fa:	f107 0214 	add.w	r2, r7, #20
    58fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5902:	4628      	mov	r0, r5
    5904:	f007 f8a9 	bl	ca5a <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5908:	4621      	mov	r1, r4
    590a:	4640      	mov	r0, r8
    590c:	f004 fc1c 	bl	a148 <z_fatal_error>
}
    5910:	3724      	adds	r7, #36	; 0x24
    5912:	46bd      	mov	sp, r7
    5914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5918:	20000268 	.word	0x20000268
    591c:	00011812 	.word	0x00011812
    5920:	00011841 	.word	0x00011841
    5924:	00011870 	.word	0x00011870
    5928:	0001187f 	.word	0x0001187f

0000592c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    592c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    592e:	2b00      	cmp	r3, #0
    5930:	db08      	blt.n	5944 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5932:	2201      	movs	r2, #1
    5934:	f000 001f 	and.w	r0, r0, #31
    5938:	fa02 f000 	lsl.w	r0, r2, r0
    593c:	095b      	lsrs	r3, r3, #5
    593e:	4a02      	ldr	r2, [pc, #8]	; (5948 <arch_irq_enable+0x1c>)
    5940:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5944:	4770      	bx	lr
    5946:	bf00      	nop
    5948:	e000e100 	.word	0xe000e100

0000594c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    594c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    594e:	2b00      	cmp	r3, #0
    5950:	db0d      	blt.n	596e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5952:	2201      	movs	r2, #1
    5954:	095b      	lsrs	r3, r3, #5
    5956:	f000 001f 	and.w	r0, r0, #31
    595a:	fa02 f000 	lsl.w	r0, r2, r0
    595e:	3320      	adds	r3, #32
    5960:	4a03      	ldr	r2, [pc, #12]	; (5970 <arch_irq_disable+0x24>)
    5962:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5966:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    596a:	f3bf 8f6f 	isb	sy
}
    596e:	4770      	bx	lr
    5970:	e000e100 	.word	0xe000e100

00005974 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5974:	4b05      	ldr	r3, [pc, #20]	; (598c <arch_irq_is_enabled+0x18>)
    5976:	0942      	lsrs	r2, r0, #5
    5978:	f000 001f 	and.w	r0, r0, #31
    597c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5980:	2301      	movs	r3, #1
    5982:	fa03 f000 	lsl.w	r0, r3, r0
}
    5986:	4010      	ands	r0, r2
    5988:	4770      	bx	lr
    598a:	bf00      	nop
    598c:	e000e100 	.word	0xe000e100

00005990 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5990:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5992:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5994:	bfa8      	it	ge
    5996:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    599a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    599e:	bfb8      	it	lt
    59a0:	4b06      	ldrlt	r3, [pc, #24]	; (59bc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59a2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    59a6:	bfac      	ite	ge
    59a8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59ac:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59b0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59b2:	bfb4      	ite	lt
    59b4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59b6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    59ba:	4770      	bx	lr
    59bc:	e000ed14 	.word	0xe000ed14

000059c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    59c0:	bf30      	wfi
    b z_SysNmiOnReset
    59c2:	f7ff bffd 	b.w	59c0 <z_SysNmiOnReset>
    59c6:	bf00      	nop

000059c8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    59c8:	4a0f      	ldr	r2, [pc, #60]	; (5a08 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    59ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    59cc:	4b0f      	ldr	r3, [pc, #60]	; (5a0c <z_arm_prep_c+0x44>)
    59ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    59d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    59d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    59dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    59e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    59e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    59e8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    59ec:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    59f0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    59f4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    59f8:	f004 fc66 	bl	a2c8 <z_bss_zero>
	z_data_copy();
    59fc:	f005 fd34 	bl	b468 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5a00:	f000 fbe6 	bl	61d0 <z_arm_interrupt_init>
	z_cstart();
    5a04:	f004 fc6a 	bl	a2dc <z_cstart>
    5a08:	00000000 	.word	0x00000000
    5a0c:	e000ed00 	.word	0xe000ed00

00005a10 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5a10:	4a0a      	ldr	r2, [pc, #40]	; (5a3c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5a12:	490b      	ldr	r1, [pc, #44]	; (5a40 <arch_swap+0x30>)
	_current->arch.basepri = key;
    5a14:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5a16:	6809      	ldr	r1, [r1, #0]
    5a18:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5a1c:	4909      	ldr	r1, [pc, #36]	; (5a44 <arch_swap+0x34>)
	_current->arch.basepri = key;
    5a1e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5a22:	684b      	ldr	r3, [r1, #4]
    5a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5a28:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    5a2a:	2300      	movs	r3, #0
    5a2c:	f383 8811 	msr	BASEPRI, r3
    5a30:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5a34:	6893      	ldr	r3, [r2, #8]
}
    5a36:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    5a3a:	4770      	bx	lr
    5a3c:	20002294 	.word	0x20002294
    5a40:	0001027c 	.word	0x0001027c
    5a44:	e000ed00 	.word	0xe000ed00

00005a48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5a48:	4910      	ldr	r1, [pc, #64]	; (5a8c <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5a4a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5a4c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5a50:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5a52:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5a56:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5a5a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5a5c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5a60:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5a64:	4f0a      	ldr	r7, [pc, #40]	; (5a90 <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5a66:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5a6a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5a6c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5a6e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5a70:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    5a74:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5a76:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5a7a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5a7e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5a82:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5a86:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5a8a:	4770      	bx	lr
    ldr r1, =_kernel
    5a8c:	20002294 	.word	0x20002294
    ldr v4, =_SCS_ICSR
    5a90:	e000ed04 	.word	0xe000ed04

00005a94 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5a94:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5a98:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5a9a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5a9e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5aa2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5aa4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5aa8:	2902      	cmp	r1, #2
    beq _oops
    5aaa:	d0ff      	beq.n	5aac <_oops>

00005aac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5aac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5aae:	f008 fa00 	bl	deb2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5ab2:	bd01      	pop	{r0, pc}

00005ab4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5ab4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5ab8:	9b00      	ldr	r3, [sp, #0]
    5aba:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5abe:	490a      	ldr	r1, [pc, #40]	; (5ae8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5ac0:	9b01      	ldr	r3, [sp, #4]
    5ac2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5ac6:	9b02      	ldr	r3, [sp, #8]
    5ac8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5acc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5ad4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5ad8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5adc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5ade:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5ae0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5ae2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5ae6:	4770      	bx	lr
    5ae8:	0000bd15 	.word	0x0000bd15

00005aec <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5aec:	4b07      	ldr	r3, [pc, #28]	; (5b0c <arch_switch_to_main_thread+0x20>)
    5aee:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5af0:	4610      	mov	r0, r2
    5af2:	f381 8809 	msr	PSP, r1
    5af6:	2100      	movs	r1, #0
    5af8:	b663      	cpsie	if
    5afa:	f381 8811 	msr	BASEPRI, r1
    5afe:	f3bf 8f6f 	isb	sy
    5b02:	2200      	movs	r2, #0
    5b04:	2300      	movs	r3, #0
    5b06:	f006 f905 	bl	bd14 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5b0a:	bf00      	nop
    5b0c:	20002294 	.word	0x20002294

00005b10 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5b10:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5b12:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5b14:	4a0b      	ldr	r2, [pc, #44]	; (5b44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5b16:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5b18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5b1a:	bf1e      	ittt	ne
	movne	r1, #0
    5b1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5b1e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5b20:	f009 f8b2 	blne	ec88 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5b24:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5b26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5b2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5b2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5b32:	4905      	ldr	r1, [pc, #20]	; (5b48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5b34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5b36:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5b38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5b3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5b3e:	4903      	ldr	r1, [pc, #12]	; (5b4c <_isr_wrapper+0x3c>)
	bx r1
    5b40:	4708      	bx	r1
    5b42:	0000      	.short	0x0000
	ldr r2, =_kernel
    5b44:	20002294 	.word	0x20002294
	ldr r1, =_sw_isr_table
    5b48:	0000f698 	.word	0x0000f698
	ldr r1, =z_arm_int_exit
    5b4c:	00005b51 	.word	0x00005b51

00005b50 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5b50:	4b04      	ldr	r3, [pc, #16]	; (5b64 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5b52:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5b54:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5b56:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5b58:	d003      	beq.n	5b62 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5b5a:	4903      	ldr	r1, [pc, #12]	; (5b68 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5b60:	600a      	str	r2, [r1, #0]

00005b62 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5b62:	4770      	bx	lr
	ldr r3, =_kernel
    5b64:	20002294 	.word	0x20002294
	ldr r1, =_SCS_ICSR
    5b68:	e000ed04 	.word	0xe000ed04

00005b6c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5b6c:	b570      	push	{r4, r5, r6, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    5b6e:	4c49      	ldr	r4, [pc, #292]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5b70:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5b72:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5b74:	0759      	lsls	r1, r3, #29
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5b76:	b088      	sub	sp, #32
    5b78:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    5b7a:	d00a      	beq.n	5b92 <mem_manage_fault.constprop.0+0x26>
    5b7c:	4b46      	ldr	r3, [pc, #280]	; (5c98 <mem_manage_fault.constprop.0+0x12c>)
    5b7e:	9306      	str	r3, [sp, #24]
    5b80:	aa05      	add	r2, sp, #20
    5b82:	2302      	movs	r3, #2
    5b84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5b88:	4620      	mov	r0, r4
    5b8a:	9301      	str	r3, [sp, #4]
    5b8c:	9305      	str	r3, [sp, #20]
    5b8e:	f008 f99f 	bl	ded0 <z_log_msg2_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5b92:	4b42      	ldr	r3, [pc, #264]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b96:	06da      	lsls	r2, r3, #27
    5b98:	d50d      	bpl.n	5bb6 <mem_manage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5b9a:	6823      	ldr	r3, [r4, #0]
    5b9c:	075b      	lsls	r3, r3, #29
    5b9e:	d00a      	beq.n	5bb6 <mem_manage_fault.constprop.0+0x4a>
    5ba0:	4b3f      	ldr	r3, [pc, #252]	; (5ca0 <mem_manage_fault.constprop.0+0x134>)
    5ba2:	9306      	str	r3, [sp, #24]
    5ba4:	483b      	ldr	r0, [pc, #236]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5ba6:	2302      	movs	r3, #2
    5ba8:	aa05      	add	r2, sp, #20
    5baa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5bae:	9301      	str	r3, [sp, #4]
    5bb0:	9305      	str	r3, [sp, #20]
    5bb2:	f008 f98d 	bl	ded0 <z_log_msg2_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5bb6:	4b39      	ldr	r3, [pc, #228]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bba:	0718      	lsls	r0, r3, #28
    5bbc:	d50d      	bpl.n	5bda <mem_manage_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    5bbe:	6823      	ldr	r3, [r4, #0]
    5bc0:	0759      	lsls	r1, r3, #29
    5bc2:	d00a      	beq.n	5bda <mem_manage_fault.constprop.0+0x6e>
    5bc4:	4b37      	ldr	r3, [pc, #220]	; (5ca4 <mem_manage_fault.constprop.0+0x138>)
    5bc6:	9306      	str	r3, [sp, #24]
    5bc8:	4832      	ldr	r0, [pc, #200]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5bca:	2302      	movs	r3, #2
    5bcc:	aa05      	add	r2, sp, #20
    5bce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5bd2:	9301      	str	r3, [sp, #4]
    5bd4:	9305      	str	r3, [sp, #20]
    5bd6:	f008 f97b 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5bda:	4b30      	ldr	r3, [pc, #192]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bde:	079a      	lsls	r2, r3, #30
    5be0:	d527      	bpl.n	5c32 <mem_manage_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Data Access Violation");
    5be2:	6823      	ldr	r3, [r4, #0]
    5be4:	075b      	lsls	r3, r3, #29
    5be6:	d00a      	beq.n	5bfe <mem_manage_fault.constprop.0+0x92>
    5be8:	4b2f      	ldr	r3, [pc, #188]	; (5ca8 <mem_manage_fault.constprop.0+0x13c>)
    5bea:	9306      	str	r3, [sp, #24]
    5bec:	4829      	ldr	r0, [pc, #164]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5bee:	2302      	movs	r3, #2
    5bf0:	aa05      	add	r2, sp, #20
    5bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5bf6:	9301      	str	r3, [sp, #4]
    5bf8:	9305      	str	r3, [sp, #20]
    5bfa:	f008 f969 	bl	ded0 <z_log_msg2_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    5bfe:	4b27      	ldr	r3, [pc, #156]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c04:	0618      	lsls	r0, r3, #24
    5c06:	d514      	bpl.n	5c32 <mem_manage_fault.constprop.0+0xc6>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5c08:	6823      	ldr	r3, [r4, #0]
    5c0a:	0759      	lsls	r1, r3, #29
    5c0c:	d00b      	beq.n	5c26 <mem_manage_fault.constprop.0+0xba>
    5c0e:	4b27      	ldr	r3, [pc, #156]	; (5cac <mem_manage_fault.constprop.0+0x140>)
    5c10:	4820      	ldr	r0, [pc, #128]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5c12:	e9cd 3206 	strd	r3, r2, [sp, #24]
    5c16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5c1a:	2303      	movs	r3, #3
    5c1c:	aa05      	add	r2, sp, #20
    5c1e:	9301      	str	r3, [sp, #4]
    5c20:	9305      	str	r3, [sp, #20]
    5c22:	f008 f955 	bl	ded0 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    5c26:	b126      	cbz	r6, 5c32 <mem_manage_fault.constprop.0+0xc6>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5c28:	4a1c      	ldr	r2, [pc, #112]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5c2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5c30:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5c32:	4b1a      	ldr	r3, [pc, #104]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c36:	07db      	lsls	r3, r3, #31
    5c38:	d50d      	bpl.n	5c56 <mem_manage_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Instruction Access Violation");
    5c3a:	6823      	ldr	r3, [r4, #0]
    5c3c:	075e      	lsls	r6, r3, #29
    5c3e:	d00a      	beq.n	5c56 <mem_manage_fault.constprop.0+0xea>
    5c40:	4b1b      	ldr	r3, [pc, #108]	; (5cb0 <mem_manage_fault.constprop.0+0x144>)
    5c42:	9306      	str	r3, [sp, #24]
    5c44:	4813      	ldr	r0, [pc, #76]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5c46:	2302      	movs	r3, #2
    5c48:	aa05      	add	r2, sp, #20
    5c4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c4e:	9301      	str	r3, [sp, #4]
    5c50:	9305      	str	r3, [sp, #20]
    5c52:	f008 f93d 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5c56:	4b11      	ldr	r3, [pc, #68]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c5a:	0698      	lsls	r0, r3, #26
    5c5c:	d50d      	bpl.n	5c7a <mem_manage_fault.constprop.0+0x10e>
		PR_FAULT_INFO(
    5c5e:	6823      	ldr	r3, [r4, #0]
    5c60:	0759      	lsls	r1, r3, #29
    5c62:	d00a      	beq.n	5c7a <mem_manage_fault.constprop.0+0x10e>
    5c64:	4b13      	ldr	r3, [pc, #76]	; (5cb4 <mem_manage_fault.constprop.0+0x148>)
    5c66:	9306      	str	r3, [sp, #24]
    5c68:	480a      	ldr	r0, [pc, #40]	; (5c94 <mem_manage_fault.constprop.0+0x128>)
    5c6a:	2302      	movs	r3, #2
    5c6c:	aa05      	add	r2, sp, #20
    5c6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c72:	9301      	str	r3, [sp, #4]
    5c74:	9305      	str	r3, [sp, #20]
    5c76:	f008 f92b 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5c7a:	4b08      	ldr	r3, [pc, #32]	; (5c9c <mem_manage_fault.constprop.0+0x130>)
    5c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c7e:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5c80:	bf58      	it	pl
    5c82:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    5c86:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5c88:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5c8c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5c8e:	7028      	strb	r0, [r5, #0]

	return reason;
}
    5c90:	b008      	add	sp, #32
    5c92:	bd70      	pop	{r4, r5, r6, pc}
    5c94:	20000268 	.word	0x20000268
    5c98:	000118ad 	.word	0x000118ad
    5c9c:	e000ed00 	.word	0xe000ed00
    5ca0:	000118c3 	.word	0x000118c3
    5ca4:	000118f6 	.word	0x000118f6
    5ca8:	00011909 	.word	0x00011909
    5cac:	00011921 	.word	0x00011921
    5cb0:	00011937 	.word	0x00011937
    5cb4:	00011956 	.word	0x00011956

00005cb8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5cb8:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    5cba:	4c4b      	ldr	r4, [pc, #300]	; (5de8 <bus_fault.constprop.0+0x130>)
    5cbc:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5cbe:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    5cc0:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5cc2:	b088      	sub	sp, #32
    5cc4:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    5cc6:	d00a      	beq.n	5cde <bus_fault.constprop.0+0x26>
    5cc8:	4b48      	ldr	r3, [pc, #288]	; (5dec <bus_fault.constprop.0+0x134>)
    5cca:	9306      	str	r3, [sp, #24]
    5ccc:	aa05      	add	r2, sp, #20
    5cce:	2302      	movs	r3, #2
    5cd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5cd4:	4620      	mov	r0, r4
    5cd6:	9301      	str	r3, [sp, #4]
    5cd8:	9305      	str	r3, [sp, #20]
    5cda:	f008 f8f9 	bl	ded0 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5cde:	4b44      	ldr	r3, [pc, #272]	; (5df0 <bus_fault.constprop.0+0x138>)
    5ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ce2:	04da      	lsls	r2, r3, #19
    5ce4:	d50d      	bpl.n	5d02 <bus_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error");
    5ce6:	6823      	ldr	r3, [r4, #0]
    5ce8:	075b      	lsls	r3, r3, #29
    5cea:	d00a      	beq.n	5d02 <bus_fault.constprop.0+0x4a>
    5cec:	4b41      	ldr	r3, [pc, #260]	; (5df4 <bus_fault.constprop.0+0x13c>)
    5cee:	9306      	str	r3, [sp, #24]
    5cf0:	483d      	ldr	r0, [pc, #244]	; (5de8 <bus_fault.constprop.0+0x130>)
    5cf2:	2302      	movs	r3, #2
    5cf4:	aa05      	add	r2, sp, #20
    5cf6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5cfa:	9301      	str	r3, [sp, #4]
    5cfc:	9305      	str	r3, [sp, #20]
    5cfe:	f008 f8e7 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5d02:	4b3b      	ldr	r3, [pc, #236]	; (5df0 <bus_fault.constprop.0+0x138>)
    5d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d06:	0518      	lsls	r0, r3, #20
    5d08:	d50d      	bpl.n	5d26 <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    5d0a:	6823      	ldr	r3, [r4, #0]
    5d0c:	0759      	lsls	r1, r3, #29
    5d0e:	d00a      	beq.n	5d26 <bus_fault.constprop.0+0x6e>
    5d10:	4b39      	ldr	r3, [pc, #228]	; (5df8 <bus_fault.constprop.0+0x140>)
    5d12:	9306      	str	r3, [sp, #24]
    5d14:	4834      	ldr	r0, [pc, #208]	; (5de8 <bus_fault.constprop.0+0x130>)
    5d16:	2302      	movs	r3, #2
    5d18:	aa05      	add	r2, sp, #20
    5d1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d1e:	9301      	str	r3, [sp, #4]
    5d20:	9305      	str	r3, [sp, #20]
    5d22:	f008 f8d5 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5d26:	4b32      	ldr	r3, [pc, #200]	; (5df0 <bus_fault.constprop.0+0x138>)
    5d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d2a:	059a      	lsls	r2, r3, #22
    5d2c:	d527      	bpl.n	5d7e <bus_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Precise data bus error");
    5d2e:	6823      	ldr	r3, [r4, #0]
    5d30:	075b      	lsls	r3, r3, #29
    5d32:	d00a      	beq.n	5d4a <bus_fault.constprop.0+0x92>
    5d34:	4b31      	ldr	r3, [pc, #196]	; (5dfc <bus_fault.constprop.0+0x144>)
    5d36:	9306      	str	r3, [sp, #24]
    5d38:	482b      	ldr	r0, [pc, #172]	; (5de8 <bus_fault.constprop.0+0x130>)
    5d3a:	2302      	movs	r3, #2
    5d3c:	aa05      	add	r2, sp, #20
    5d3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d42:	9301      	str	r3, [sp, #4]
    5d44:	9305      	str	r3, [sp, #20]
    5d46:	f008 f8c3 	bl	ded0 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    5d4a:	4b29      	ldr	r3, [pc, #164]	; (5df0 <bus_fault.constprop.0+0x138>)
    5d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d50:	0418      	lsls	r0, r3, #16
    5d52:	d514      	bpl.n	5d7e <bus_fault.constprop.0+0xc6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5d54:	6823      	ldr	r3, [r4, #0]
    5d56:	0759      	lsls	r1, r3, #29
    5d58:	d00b      	beq.n	5d72 <bus_fault.constprop.0+0xba>
    5d5a:	4b29      	ldr	r3, [pc, #164]	; (5e00 <bus_fault.constprop.0+0x148>)
    5d5c:	4822      	ldr	r0, [pc, #136]	; (5de8 <bus_fault.constprop.0+0x130>)
    5d5e:	e9cd 3206 	strd	r3, r2, [sp, #24]
    5d62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5d66:	2303      	movs	r3, #3
    5d68:	aa05      	add	r2, sp, #20
    5d6a:	9301      	str	r3, [sp, #4]
    5d6c:	9305      	str	r3, [sp, #20]
    5d6e:	f008 f8af 	bl	ded0 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    5d72:	b126      	cbz	r6, 5d7e <bus_fault.constprop.0+0xc6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5d74:	4a1e      	ldr	r2, [pc, #120]	; (5df0 <bus_fault.constprop.0+0x138>)
    5d76:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5d7c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5d7e:	4b1c      	ldr	r3, [pc, #112]	; (5df0 <bus_fault.constprop.0+0x138>)
    5d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d82:	055b      	lsls	r3, r3, #21
    5d84:	d50d      	bpl.n	5da2 <bus_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Imprecise data bus error");
    5d86:	6823      	ldr	r3, [r4, #0]
    5d88:	075e      	lsls	r6, r3, #29
    5d8a:	d00a      	beq.n	5da2 <bus_fault.constprop.0+0xea>
    5d8c:	4b1d      	ldr	r3, [pc, #116]	; (5e04 <bus_fault.constprop.0+0x14c>)
    5d8e:	9306      	str	r3, [sp, #24]
    5d90:	4815      	ldr	r0, [pc, #84]	; (5de8 <bus_fault.constprop.0+0x130>)
    5d92:	2302      	movs	r3, #2
    5d94:	aa05      	add	r2, sp, #20
    5d96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d9a:	9301      	str	r3, [sp, #4]
    5d9c:	9305      	str	r3, [sp, #20]
    5d9e:	f008 f897 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5da2:	4b13      	ldr	r3, [pc, #76]	; (5df0 <bus_fault.constprop.0+0x138>)
    5da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5da6:	05d0      	lsls	r0, r2, #23
    5da8:	d516      	bpl.n	5dd8 <bus_fault.constprop.0+0x120>
		PR_FAULT_INFO("  Instruction bus error");
    5daa:	6823      	ldr	r3, [r4, #0]
    5dac:	0759      	lsls	r1, r3, #29
    5dae:	d00a      	beq.n	5dc6 <bus_fault.constprop.0+0x10e>
    5db0:	4b15      	ldr	r3, [pc, #84]	; (5e08 <bus_fault.constprop.0+0x150>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5db2:	9306      	str	r3, [sp, #24]
    5db4:	480c      	ldr	r0, [pc, #48]	; (5de8 <bus_fault.constprop.0+0x130>)
    5db6:	2302      	movs	r3, #2
    5db8:	aa05      	add	r2, sp, #20
    5dba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5dbe:	9301      	str	r3, [sp, #4]
    5dc0:	9305      	str	r3, [sp, #20]
    5dc2:	f008 f885 	bl	ded0 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5dc6:	4a0a      	ldr	r2, [pc, #40]	; (5df0 <bus_fault.constprop.0+0x138>)
    5dc8:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    5dca:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5dcc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5dd0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5dd2:	7028      	strb	r0, [r5, #0]

	return reason;
}
    5dd4:	b008      	add	sp, #32
    5dd6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dda:	049a      	lsls	r2, r3, #18
    5ddc:	d5f3      	bpl.n	5dc6 <bus_fault.constprop.0+0x10e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5dde:	6823      	ldr	r3, [r4, #0]
    5de0:	075b      	lsls	r3, r3, #29
    5de2:	d0f0      	beq.n	5dc6 <bus_fault.constprop.0+0x10e>
    5de4:	4b09      	ldr	r3, [pc, #36]	; (5e0c <bus_fault.constprop.0+0x154>)
    5de6:	e7e4      	b.n	5db2 <bus_fault.constprop.0+0xfa>
    5de8:	20000268 	.word	0x20000268
    5dec:	00011985 	.word	0x00011985
    5df0:	e000ed00 	.word	0xe000ed00
    5df4:	0001199b 	.word	0x0001199b
    5df8:	000118f6 	.word	0x000118f6
    5dfc:	000119ac 	.word	0x000119ac
    5e00:	000119c5 	.word	0x000119c5
    5e04:	000119da 	.word	0x000119da
    5e08:	000119f5 	.word	0x000119f5
    5e0c:	00011956 	.word	0x00011956

00005e10 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5e10:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    5e12:	4c43      	ldr	r4, [pc, #268]	; (5f20 <usage_fault.constprop.0+0x110>)
    5e14:	6823      	ldr	r3, [r4, #0]
    5e16:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5e18:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5e1a:	d00a      	beq.n	5e32 <usage_fault.constprop.0+0x22>
    5e1c:	4b41      	ldr	r3, [pc, #260]	; (5f24 <usage_fault.constprop.0+0x114>)
    5e1e:	9306      	str	r3, [sp, #24]
    5e20:	aa05      	add	r2, sp, #20
    5e22:	2302      	movs	r3, #2
    5e24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e28:	4620      	mov	r0, r4
    5e2a:	9301      	str	r3, [sp, #4]
    5e2c:	9305      	str	r3, [sp, #20]
    5e2e:	f008 f84f 	bl	ded0 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5e32:	4b3d      	ldr	r3, [pc, #244]	; (5f28 <usage_fault.constprop.0+0x118>)
    5e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e36:	0198      	lsls	r0, r3, #6
    5e38:	d50d      	bpl.n	5e56 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    5e3a:	6823      	ldr	r3, [r4, #0]
    5e3c:	0759      	lsls	r1, r3, #29
    5e3e:	d00a      	beq.n	5e56 <usage_fault.constprop.0+0x46>
    5e40:	4b3a      	ldr	r3, [pc, #232]	; (5f2c <usage_fault.constprop.0+0x11c>)
    5e42:	9306      	str	r3, [sp, #24]
    5e44:	4836      	ldr	r0, [pc, #216]	; (5f20 <usage_fault.constprop.0+0x110>)
    5e46:	2302      	movs	r3, #2
    5e48:	aa05      	add	r2, sp, #20
    5e4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e4e:	9301      	str	r3, [sp, #4]
    5e50:	9305      	str	r3, [sp, #20]
    5e52:	f008 f83d 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5e56:	4b34      	ldr	r3, [pc, #208]	; (5f28 <usage_fault.constprop.0+0x118>)
    5e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e5a:	01da      	lsls	r2, r3, #7
    5e5c:	d50d      	bpl.n	5e7a <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Unaligned memory access");
    5e5e:	6823      	ldr	r3, [r4, #0]
    5e60:	075b      	lsls	r3, r3, #29
    5e62:	d00a      	beq.n	5e7a <usage_fault.constprop.0+0x6a>
    5e64:	4b32      	ldr	r3, [pc, #200]	; (5f30 <usage_fault.constprop.0+0x120>)
    5e66:	9306      	str	r3, [sp, #24]
    5e68:	482d      	ldr	r0, [pc, #180]	; (5f20 <usage_fault.constprop.0+0x110>)
    5e6a:	2302      	movs	r3, #2
    5e6c:	aa05      	add	r2, sp, #20
    5e6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e72:	9301      	str	r3, [sp, #4]
    5e74:	9305      	str	r3, [sp, #20]
    5e76:	f008 f82b 	bl	ded0 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5e7a:	4b2b      	ldr	r3, [pc, #172]	; (5f28 <usage_fault.constprop.0+0x118>)
    5e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e7e:	0318      	lsls	r0, r3, #12
    5e80:	d50d      	bpl.n	5e9e <usage_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  No coprocessor instructions");
    5e82:	6823      	ldr	r3, [r4, #0]
    5e84:	0759      	lsls	r1, r3, #29
    5e86:	d00a      	beq.n	5e9e <usage_fault.constprop.0+0x8e>
    5e88:	4b2a      	ldr	r3, [pc, #168]	; (5f34 <usage_fault.constprop.0+0x124>)
    5e8a:	9306      	str	r3, [sp, #24]
    5e8c:	4824      	ldr	r0, [pc, #144]	; (5f20 <usage_fault.constprop.0+0x110>)
    5e8e:	2302      	movs	r3, #2
    5e90:	aa05      	add	r2, sp, #20
    5e92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e96:	9301      	str	r3, [sp, #4]
    5e98:	9305      	str	r3, [sp, #20]
    5e9a:	f008 f819 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5e9e:	4b22      	ldr	r3, [pc, #136]	; (5f28 <usage_fault.constprop.0+0x118>)
    5ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ea2:	035a      	lsls	r2, r3, #13
    5ea4:	d50d      	bpl.n	5ec2 <usage_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5ea6:	6823      	ldr	r3, [r4, #0]
    5ea8:	075b      	lsls	r3, r3, #29
    5eaa:	d00a      	beq.n	5ec2 <usage_fault.constprop.0+0xb2>
    5eac:	4b22      	ldr	r3, [pc, #136]	; (5f38 <usage_fault.constprop.0+0x128>)
    5eae:	9306      	str	r3, [sp, #24]
    5eb0:	481b      	ldr	r0, [pc, #108]	; (5f20 <usage_fault.constprop.0+0x110>)
    5eb2:	2302      	movs	r3, #2
    5eb4:	aa05      	add	r2, sp, #20
    5eb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5eba:	9301      	str	r3, [sp, #4]
    5ebc:	9305      	str	r3, [sp, #20]
    5ebe:	f008 f807 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5ec2:	4b19      	ldr	r3, [pc, #100]	; (5f28 <usage_fault.constprop.0+0x118>)
    5ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ec6:	0398      	lsls	r0, r3, #14
    5ec8:	d50d      	bpl.n	5ee6 <usage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5eca:	6823      	ldr	r3, [r4, #0]
    5ecc:	0759      	lsls	r1, r3, #29
    5ece:	d00a      	beq.n	5ee6 <usage_fault.constprop.0+0xd6>
    5ed0:	4b1a      	ldr	r3, [pc, #104]	; (5f3c <usage_fault.constprop.0+0x12c>)
    5ed2:	9306      	str	r3, [sp, #24]
    5ed4:	4812      	ldr	r0, [pc, #72]	; (5f20 <usage_fault.constprop.0+0x110>)
    5ed6:	2302      	movs	r3, #2
    5ed8:	aa05      	add	r2, sp, #20
    5eda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ede:	9301      	str	r3, [sp, #4]
    5ee0:	9305      	str	r3, [sp, #20]
    5ee2:	f007 fff5 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5ee6:	4b10      	ldr	r3, [pc, #64]	; (5f28 <usage_fault.constprop.0+0x118>)
    5ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5eea:	03da      	lsls	r2, r3, #15
    5eec:	d50d      	bpl.n	5f0a <usage_fault.constprop.0+0xfa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5eee:	6823      	ldr	r3, [r4, #0]
    5ef0:	075b      	lsls	r3, r3, #29
    5ef2:	d00a      	beq.n	5f0a <usage_fault.constprop.0+0xfa>
    5ef4:	4b12      	ldr	r3, [pc, #72]	; (5f40 <usage_fault.constprop.0+0x130>)
    5ef6:	9306      	str	r3, [sp, #24]
    5ef8:	4809      	ldr	r0, [pc, #36]	; (5f20 <usage_fault.constprop.0+0x110>)
    5efa:	2302      	movs	r3, #2
    5efc:	aa05      	add	r2, sp, #20
    5efe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f02:	9301      	str	r3, [sp, #4]
    5f04:	9305      	str	r3, [sp, #20]
    5f06:	f007 ffe3 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5f0a:	4a07      	ldr	r2, [pc, #28]	; (5f28 <usage_fault.constprop.0+0x118>)
    5f0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5f0e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5f12:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    5f16:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5f18:	6293      	str	r3, [r2, #40]	; 0x28
}
    5f1a:	b008      	add	sp, #32
    5f1c:	bd10      	pop	{r4, pc}
    5f1e:	bf00      	nop
    5f20:	20000268 	.word	0x20000268
    5f24:	00011a0d 	.word	0x00011a0d
    5f28:	e000ed00 	.word	0xe000ed00
    5f2c:	00011a25 	.word	0x00011a25
    5f30:	00011a38 	.word	0x00011a38
    5f34:	00011a52 	.word	0x00011a52
    5f38:	00011a70 	.word	0x00011a70
    5f3c:	00011a95 	.word	0x00011a95
    5f40:	00011aaf 	.word	0x00011aaf

00005f44 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5f46:	ab0a      	add	r3, sp, #40	; 0x28
    5f48:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    5f4a:	9302      	str	r3, [sp, #8]
    5f4c:	4b05      	ldr	r3, [pc, #20]	; (5f64 <z_log_msg2_runtime_create.constprop.0+0x20>)
    5f4e:	9301      	str	r3, [sp, #4]
    5f50:	2300      	movs	r3, #0
    5f52:	9300      	str	r3, [sp, #0]
    5f54:	2201      	movs	r2, #1
    5f56:	4618      	mov	r0, r3
    5f58:	f7fb fe44 	bl	1be4 <z_impl_z_log_msg2_runtime_vcreate>
}
    5f5c:	b007      	add	sp, #28
    5f5e:	f85d fb04 	ldr.w	pc, [sp], #4
    5f62:	bf00      	nop
    5f64:	00011ada 	.word	0x00011ada

00005f68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5f6c:	4b83      	ldr	r3, [pc, #524]	; (617c <z_arm_fault+0x214>)
    5f6e:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    5f72:	b08e      	sub	sp, #56	; 0x38
    5f74:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5f76:	f3c8 0408 	ubfx	r4, r8, #0, #9
    5f7a:	2500      	movs	r5, #0
    5f7c:	f385 8811 	msr	BASEPRI, r5
    5f80:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5f84:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    5f88:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    5f8c:	d112      	bne.n	5fb4 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5f8e:	f002 030c 	and.w	r3, r2, #12
    5f92:	2b08      	cmp	r3, #8
    5f94:	d111      	bne.n	5fba <z_arm_fault+0x52>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5f96:	487a      	ldr	r0, [pc, #488]	; (6180 <z_arm_fault+0x218>)
    5f98:	6803      	ldr	r3, [r0, #0]
    5f9a:	f013 0607 	ands.w	r6, r3, #7
    5f9e:	d00a      	beq.n	5fb6 <z_arm_fault+0x4e>
    5fa0:	4b78      	ldr	r3, [pc, #480]	; (6184 <z_arm_fault+0x21c>)
    5fa2:	930a      	str	r3, [sp, #40]	; 0x28
    5fa4:	aa09      	add	r2, sp, #36	; 0x24
    5fa6:	2302      	movs	r3, #2
    5fa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5fac:	9305      	str	r3, [sp, #20]
    5fae:	9309      	str	r3, [sp, #36]	; 0x24
    5fb0:	f007 ff8e 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    5fb4:	462e      	mov	r6, r5
		return NULL;
    5fb6:	4637      	mov	r7, r6
    5fb8:	e004      	b.n	5fc4 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5fba:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    5fbc:	bf4e      	itee	mi
    5fbe:	462e      	movmi	r6, r5
			ptr_esf = (z_arch_esf_t *)msp;
    5fc0:	4607      	movpl	r7, r0
			*nested_exc = true;
    5fc2:	2601      	movpl	r6, #1
	*recoverable = false;
    5fc4:	2300      	movs	r3, #0
    5fc6:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    5fca:	1ee3      	subs	r3, r4, #3
    5fcc:	2b09      	cmp	r3, #9
    5fce:	f200 80b7 	bhi.w	6140 <z_arm_fault+0x1d8>
    5fd2:	e8df f003 	tbb	[pc, r3]
    5fd6:	9f05      	.short	0x9f05
    5fd8:	b5b59ca3 	.word	0xb5b59ca3
    5fdc:	a7b5b5b5 	.word	0xa7b5b5b5
	PR_FAULT_INFO("***** HARD FAULT *****");
    5fe0:	4d67      	ldr	r5, [pc, #412]	; (6180 <z_arm_fault+0x218>)
    5fe2:	682b      	ldr	r3, [r5, #0]
    5fe4:	075a      	lsls	r2, r3, #29
    5fe6:	d00a      	beq.n	5ffe <z_arm_fault+0x96>
    5fe8:	4b67      	ldr	r3, [pc, #412]	; (6188 <z_arm_fault+0x220>)
    5fea:	930a      	str	r3, [sp, #40]	; 0x28
    5fec:	aa09      	add	r2, sp, #36	; 0x24
    5fee:	2302      	movs	r3, #2
    5ff0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ff4:	4628      	mov	r0, r5
    5ff6:	9305      	str	r3, [sp, #20]
    5ff8:	9309      	str	r3, [sp, #36]	; 0x24
    5ffa:	f007 ff69 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5ffe:	4a5f      	ldr	r2, [pc, #380]	; (617c <z_arm_fault+0x214>)
    6000:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    6002:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6006:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    600a:	f88d 8013 	strb.w	r8, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    600e:	d010      	beq.n	6032 <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    6010:	682b      	ldr	r3, [r5, #0]
    6012:	075b      	lsls	r3, r3, #29
    6014:	d101      	bne.n	601a <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6016:	2400      	movs	r4, #0
    6018:	e01c      	b.n	6054 <z_arm_fault+0xec>
		PR_EXC("  Bus fault on vector table read");
    601a:	4b5c      	ldr	r3, [pc, #368]	; (618c <z_arm_fault+0x224>)
    601c:	930a      	str	r3, [sp, #40]	; 0x28
    601e:	4858      	ldr	r0, [pc, #352]	; (6180 <z_arm_fault+0x218>)
    6020:	2302      	movs	r3, #2
    6022:	9305      	str	r3, [sp, #20]
    6024:	9309      	str	r3, [sp, #36]	; 0x24
    6026:	aa09      	add	r2, sp, #36	; 0x24
    6028:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    602c:	f007 ff50 	bl	ded0 <z_log_msg2_static_create.constprop.0>
    6030:	e7f1      	b.n	6016 <z_arm_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6032:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6034:	2b00      	cmp	r3, #0
    6036:	da28      	bge.n	608a <z_arm_fault+0x122>
		PR_EXC("  Debug event");
    6038:	682b      	ldr	r3, [r5, #0]
    603a:	075d      	lsls	r5, r3, #29
    603c:	d0eb      	beq.n	6016 <z_arm_fault+0xae>
    603e:	4b54      	ldr	r3, [pc, #336]	; (6190 <z_arm_fault+0x228>)
    6040:	930a      	str	r3, [sp, #40]	; 0x28
    6042:	484f      	ldr	r0, [pc, #316]	; (6180 <z_arm_fault+0x218>)
    6044:	2302      	movs	r3, #2
    6046:	aa09      	add	r2, sp, #36	; 0x24
    6048:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    604c:	9305      	str	r3, [sp, #20]
    604e:	9309      	str	r3, [sp, #36]	; 0x24
    6050:	f007 ff3e 	bl	ded0 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6054:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6058:	b9a3      	cbnz	r3, 6084 <z_arm_fault+0x11c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    605a:	2220      	movs	r2, #32
    605c:	4639      	mov	r1, r7
    605e:	a806      	add	r0, sp, #24
    6060:	f008 f8c6 	bl	e1f0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6066:	2e00      	cmp	r6, #0
    6068:	f000 8082 	beq.w	6170 <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    606c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6070:	b922      	cbnz	r2, 607c <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6072:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6076:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    607a:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    607c:	a906      	add	r1, sp, #24
    607e:	4620      	mov	r0, r4
    6080:	f7ff fbe6 	bl	5850 <z_arm_fatal_error>
}
    6084:	b00e      	add	sp, #56	; 0x38
    6086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    608a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    608c:	005c      	lsls	r4, r3, #1
    608e:	d5c2      	bpl.n	6016 <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    6090:	682b      	ldr	r3, [r5, #0]
    6092:	0758      	lsls	r0, r3, #29
    6094:	d00a      	beq.n	60ac <z_arm_fault+0x144>
    6096:	4b3f      	ldr	r3, [pc, #252]	; (6194 <z_arm_fault+0x22c>)
    6098:	930a      	str	r3, [sp, #40]	; 0x28
    609a:	4839      	ldr	r0, [pc, #228]	; (6180 <z_arm_fault+0x218>)
    609c:	2302      	movs	r3, #2
    609e:	aa09      	add	r2, sp, #36	; 0x24
    60a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    60a4:	9305      	str	r3, [sp, #20]
    60a6:	9309      	str	r3, [sp, #36]	; 0x24
    60a8:	f007 ff12 	bl	ded0 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    60ac:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    60ae:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    60b2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    60b6:	429a      	cmp	r2, r3
    60b8:	d00a      	beq.n	60d0 <z_arm_fault+0x168>
		} else if (SCB_MMFSR != 0) {
    60ba:	4b30      	ldr	r3, [pc, #192]	; (617c <z_arm_fault+0x214>)
    60bc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    60c0:	b1c2      	cbz	r2, 60f4 <z_arm_fault+0x18c>
			reason = mem_manage_fault(esf, 1, recoverable);
    60c2:	f10d 0113 	add.w	r1, sp, #19
    60c6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    60c8:	f7ff fd50 	bl	5b6c <mem_manage_fault.constprop.0>
    60cc:	4604      	mov	r4, r0
		break;
    60ce:	e7c1      	b.n	6054 <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    60d0:	682b      	ldr	r3, [r5, #0]
    60d2:	0759      	lsls	r1, r3, #29
    60d4:	d00c      	beq.n	60f0 <z_arm_fault+0x188>
    60d6:	683b      	ldr	r3, [r7, #0]
    60d8:	4a2f      	ldr	r2, [pc, #188]	; (6198 <z_arm_fault+0x230>)
    60da:	4829      	ldr	r0, [pc, #164]	; (6180 <z_arm_fault+0x218>)
    60dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    60e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    60e4:	2303      	movs	r3, #3
    60e6:	aa09      	add	r2, sp, #36	; 0x24
    60e8:	9305      	str	r3, [sp, #20]
    60ea:	9309      	str	r3, [sp, #36]	; 0x24
    60ec:	f007 fef0 	bl	ded0 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    60f0:	683c      	ldr	r4, [r7, #0]
    60f2:	e7af      	b.n	6054 <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    60f4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    60f8:	b12a      	cbz	r2, 6106 <z_arm_fault+0x19e>
			reason = bus_fault(esf, 1, recoverable);
    60fa:	f10d 0113 	add.w	r1, sp, #19
    60fe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6100:	f7ff fdda 	bl	5cb8 <bus_fault.constprop.0>
    6104:	e7e2      	b.n	60cc <z_arm_fault+0x164>
		} else if (SCB_UFSR != 0) {
    6106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    6108:	b29b      	uxth	r3, r3
    610a:	2b00      	cmp	r3, #0
    610c:	d083      	beq.n	6016 <z_arm_fault+0xae>
		reason = usage_fault(esf);
    610e:	f7ff fe7f 	bl	5e10 <usage_fault.constprop.0>
    6112:	e7db      	b.n	60cc <z_arm_fault+0x164>
		reason = mem_manage_fault(esf, 0, recoverable);
    6114:	f10d 0113 	add.w	r1, sp, #19
    6118:	2000      	movs	r0, #0
    611a:	e7d5      	b.n	60c8 <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    611c:	f10d 0113 	add.w	r1, sp, #19
    6120:	2000      	movs	r0, #0
    6122:	e7ed      	b.n	6100 <z_arm_fault+0x198>
	PR_FAULT_INFO(
    6124:	4816      	ldr	r0, [pc, #88]	; (6180 <z_arm_fault+0x218>)
    6126:	6803      	ldr	r3, [r0, #0]
    6128:	075a      	lsls	r2, r3, #29
    612a:	f43f af74 	beq.w	6016 <z_arm_fault+0xae>
    612e:	4b1b      	ldr	r3, [pc, #108]	; (619c <z_arm_fault+0x234>)
    6130:	930a      	str	r3, [sp, #40]	; 0x28
    6132:	2302      	movs	r3, #2
    6134:	9305      	str	r3, [sp, #20]
    6136:	9309      	str	r3, [sp, #36]	; 0x24
    6138:	aa09      	add	r2, sp, #36	; 0x24
    613a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    613e:	e775      	b.n	602c <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    6140:	490f      	ldr	r1, [pc, #60]	; (6180 <z_arm_fault+0x218>)
    6142:	680b      	ldr	r3, [r1, #0]
    6144:	075b      	lsls	r3, r3, #29
    6146:	f43f af66 	beq.w	6016 <z_arm_fault+0xae>
    614a:	4a15      	ldr	r2, [pc, #84]	; (61a0 <z_arm_fault+0x238>)
    614c:	4b15      	ldr	r3, [pc, #84]	; (61a4 <z_arm_fault+0x23c>)
    614e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    6152:	bf18      	it	ne
    6154:	4613      	movne	r3, r2
    6156:	3c10      	subs	r4, #16
    6158:	e9cd 3402 	strd	r3, r4, [sp, #8]
    615c:	2400      	movs	r4, #0
    615e:	4b12      	ldr	r3, [pc, #72]	; (61a8 <z_arm_fault+0x240>)
    6160:	9301      	str	r3, [sp, #4]
    6162:	9400      	str	r4, [sp, #0]
    6164:	4623      	mov	r3, r4
    6166:	2201      	movs	r2, #1
    6168:	4620      	mov	r0, r4
    616a:	f7ff feeb 	bl	5f44 <z_log_msg2_runtime_create.constprop.0>
    616e:	e771      	b.n	6054 <z_arm_fault+0xec>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6170:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6174:	f023 0301 	bic.w	r3, r3, #1
    6178:	e77f      	b.n	607a <z_arm_fault+0x112>
    617a:	bf00      	nop
    617c:	e000ed00 	.word	0xe000ed00
    6180:	20000268 	.word	0x20000268
    6184:	00011b1b 	.word	0x00011b1b
    6188:	00011b46 	.word	0x00011b46
    618c:	00011b5d 	.word	0x00011b5d
    6190:	00011b7e 	.word	0x00011b7e
    6194:	00011b8c 	.word	0x00011b8c
    6198:	00011bab 	.word	0x00011bab
    619c:	00011bc7 	.word	0x00011bc7
    61a0:	00011b02 	.word	0x00011b02
    61a4:	00011aed 	.word	0x00011aed
    61a8:	00011ada 	.word	0x00011ada

000061ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    61ac:	4a02      	ldr	r2, [pc, #8]	; (61b8 <z_arm_fault_init+0xc>)
    61ae:	6953      	ldr	r3, [r2, #20]
    61b0:	f043 0310 	orr.w	r3, r3, #16
    61b4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    61b6:	4770      	bx	lr
    61b8:	e000ed00 	.word	0xe000ed00

000061bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    61bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    61c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    61c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    61c6:	4672      	mov	r2, lr
	bl z_arm_fault
    61c8:	f7ff fece 	bl	5f68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    61cc:	bd01      	pop	{r0, pc}
    61ce:	bf00      	nop

000061d0 <z_arm_interrupt_init>:
    61d0:	4804      	ldr	r0, [pc, #16]	; (61e4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    61d2:	2300      	movs	r3, #0
    61d4:	2120      	movs	r1, #32
    61d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    61d8:	3301      	adds	r3, #1
    61da:	2b30      	cmp	r3, #48	; 0x30
    61dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    61e0:	d1f9      	bne.n	61d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    61e2:	4770      	bx	lr
    61e4:	e000e100 	.word	0xe000e100

000061e8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    61e8:	f009 f9c0 	bl	f56c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    61ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    61ee:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    61f2:	480b      	ldr	r0, [pc, #44]	; (6220 <__start+0x38>)
    ldr r1, =0xaa
    61f4:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    61f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    61fc:	f008 f803 	bl	e206 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6200:	4807      	ldr	r0, [pc, #28]	; (6220 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6202:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6206:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6208:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    620c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6210:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6212:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6214:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6218:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    621c:	f7ff fbd4 	bl	59c8 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    6220:	20003f98 	.word	0x20003f98

00006224 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6224:	4b06      	ldr	r3, [pc, #24]	; (6240 <z_impl_k_thread_abort+0x1c>)
    6226:	689b      	ldr	r3, [r3, #8]
    6228:	4283      	cmp	r3, r0
    622a:	d107      	bne.n	623c <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    622c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6230:	b123      	cbz	r3, 623c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6232:	4a04      	ldr	r2, [pc, #16]	; (6244 <z_impl_k_thread_abort+0x20>)
    6234:	6853      	ldr	r3, [r2, #4]
    6236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    623a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    623c:	f005 b8ac 	b.w	b398 <z_thread_abort>
    6240:	20002294 	.word	0x20002294
    6244:	e000ed00 	.word	0xe000ed00

00006248 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6248:	4b02      	ldr	r3, [pc, #8]	; (6254 <z_arm_configure_static_mpu_regions+0xc>)
    624a:	4a03      	ldr	r2, [pc, #12]	; (6258 <z_arm_configure_static_mpu_regions+0x10>)
    624c:	4803      	ldr	r0, [pc, #12]	; (625c <z_arm_configure_static_mpu_regions+0x14>)
    624e:	2101      	movs	r1, #1
    6250:	f000 b880 	b.w	6354 <arm_core_mpu_configure_static_mpu_regions>
    6254:	20040000 	.word	0x20040000
    6258:	20000000 	.word	0x20000000
    625c:	0000ffcc 	.word	0x0000ffcc

00006260 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6260:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6262:	4f2d      	ldr	r7, [pc, #180]	; (6318 <mpu_configure_regions+0xb8>)
    6264:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6266:	2600      	movs	r6, #0
    6268:	428e      	cmp	r6, r1
    626a:	db02      	blt.n	6272 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    626c:	4610      	mov	r0, r2
    626e:	b009      	add	sp, #36	; 0x24
    6270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    6272:	6844      	ldr	r4, [r0, #4]
    6274:	2c00      	cmp	r4, #0
    6276:	d04c      	beq.n	6312 <mpu_configure_regions+0xb2>
		if (do_sanity_check &&
    6278:	b1db      	cbz	r3, 62b2 <mpu_configure_regions+0x52>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    627a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    627e:	ea14 0f0c 	tst.w	r4, ip
    6282:	d010      	beq.n	62a6 <mpu_configure_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6284:	4825      	ldr	r0, [pc, #148]	; (631c <mpu_configure_regions+0xbc>)
    6286:	6803      	ldr	r3, [r0, #0]
    6288:	075a      	lsls	r2, r3, #29
    628a:	d029      	beq.n	62e0 <mpu_configure_regions+0x80>
    628c:	4b24      	ldr	r3, [pc, #144]	; (6320 <mpu_configure_regions+0xc0>)
    628e:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6292:	2303      	movs	r3, #3
    6294:	9301      	str	r3, [sp, #4]
    6296:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    6298:	2300      	movs	r3, #0
    629a:	aa05      	add	r2, sp, #20
    629c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    62a0:	f006 fbdb 	bl	ca5a <z_impl_z_log_msg2_static_create>
		if (reg_index == -EINVAL) {
    62a4:	e01c      	b.n	62e0 <mpu_configure_regions+0x80>
		&&
    62a6:	2c1f      	cmp	r4, #31
    62a8:	d9ec      	bls.n	6284 <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
    62aa:	6805      	ldr	r5, [r0, #0]
		&&
    62ac:	ea1c 0f05 	tst.w	ip, r5
    62b0:	d1e8      	bne.n	6284 <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    62b2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    62b4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    62b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    62ba:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    62bc:	d913      	bls.n	62e6 <mpu_configure_regions+0x86>
	if (size > (1UL << 31)) {
    62be:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    62c2:	d812      	bhi.n	62ea <mpu_configure_regions+0x8a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    62c4:	3c01      	subs	r4, #1
    62c6:	fab4 f484 	clz	r4, r4
    62ca:	f1c4 041f 	rsb	r4, r4, #31
    62ce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    62d0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    62d2:	ea4c 0404 	orr.w	r4, ip, r4
    62d6:	d90e      	bls.n	62f6 <mpu_configure_regions+0x96>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    62d8:	4810      	ldr	r0, [pc, #64]	; (631c <mpu_configure_regions+0xbc>)
    62da:	6803      	ldr	r3, [r0, #0]
    62dc:	075b      	lsls	r3, r3, #29
    62de:	d106      	bne.n	62ee <mpu_configure_regions+0x8e>
			return -EINVAL;
    62e0:	f06f 0215 	mvn.w	r2, #21
    62e4:	e7c2      	b.n	626c <mpu_configure_regions+0xc>
		return REGION_32B;
    62e6:	2408      	movs	r4, #8
    62e8:	e7f2      	b.n	62d0 <mpu_configure_regions+0x70>
		return REGION_4G;
    62ea:	243e      	movs	r4, #62	; 0x3e
    62ec:	e7f0      	b.n	62d0 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <mpu_configure_regions+0xc4>)
    62f0:	e9cd 3206 	strd	r3, r2, [sp, #24]
    62f4:	e7cd      	b.n	6292 <mpu_configure_regions+0x32>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    62f6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    62fa:	4315      	orrs	r5, r2
    62fc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6300:	f044 0401 	orr.w	r4, r4, #1
    6304:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6308:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    630c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    630e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    6312:	3601      	adds	r6, #1
    6314:	300c      	adds	r0, #12
    6316:	e7a7      	b.n	6268 <mpu_configure_regions+0x8>
    6318:	e000ed00 	.word	0xe000ed00
    631c:	20000264 	.word	0x20000264
    6320:	00011bef 	.word	0x00011bef
    6324:	00011c12 	.word	0x00011c12

00006328 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6328:	4b04      	ldr	r3, [pc, #16]	; (633c <arm_core_mpu_enable+0x14>)
    632a:	2205      	movs	r2, #5
    632c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6330:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6334:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6338:	4770      	bx	lr
    633a:	bf00      	nop
    633c:	e000ed00 	.word	0xe000ed00

00006340 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6340:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6344:	4b02      	ldr	r3, [pc, #8]	; (6350 <arm_core_mpu_disable+0x10>)
    6346:	2200      	movs	r2, #0
    6348:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    634c:	4770      	bx	lr
    634e:	bf00      	nop
    6350:	e000ed00 	.word	0xe000ed00

00006354 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6354:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6356:	4c03      	ldr	r4, [pc, #12]	; (6364 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6358:	2301      	movs	r3, #1
    635a:	7822      	ldrb	r2, [r4, #0]
    635c:	f7ff ff80 	bl	6260 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6360:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6362:	bd10      	pop	{r4, pc}
    6364:	2000230f 	.word	0x2000230f

00006368 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6368:	4914      	ldr	r1, [pc, #80]	; (63bc <z_arm_mpu_init+0x54>)
    636a:	6808      	ldr	r0, [r1, #0]
    636c:	2808      	cmp	r0, #8
{
    636e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6370:	d821      	bhi.n	63b6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6372:	f7ff ffe5 	bl	6340 <arm_core_mpu_disable>
    6376:	4c12      	ldr	r4, [pc, #72]	; (63c0 <z_arm_mpu_init+0x58>)
    6378:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    637a:	2200      	movs	r2, #0
    637c:	4290      	cmp	r0, r2
    637e:	f101 010c 	add.w	r1, r1, #12
    6382:	d105      	bne.n	6390 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6384:	4b0f      	ldr	r3, [pc, #60]	; (63c4 <z_arm_mpu_init+0x5c>)
    6386:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6388:	f7ff ffce 	bl	6328 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    638c:	2000      	movs	r0, #0
}
    638e:	bd10      	pop	{r4, pc}
    6390:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6394:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6398:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    639c:	4313      	orrs	r3, r2
    639e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    63a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    63a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    63aa:	f043 0301 	orr.w	r3, r3, #1
    63ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    63b2:	3201      	adds	r2, #1
    63b4:	e7e2      	b.n	637c <z_arm_mpu_init+0x14>
		return -1;
    63b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    63ba:	e7e8      	b.n	638e <z_arm_mpu_init+0x26>
    63bc:	0000ffd8 	.word	0x0000ffd8
    63c0:	e000ed00 	.word	0xe000ed00
    63c4:	2000230f 	.word	0x2000230f

000063c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    63c8:	4b01      	ldr	r3, [pc, #4]	; (63d0 <__stdout_hook_install+0x8>)
    63ca:	6018      	str	r0, [r3, #0]
}
    63cc:	4770      	bx	lr
    63ce:	bf00      	nop
    63d0:	20000154 	.word	0x20000154

000063d4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    63d4:	b40c      	push	{r2, r3}
    63d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    63d8:	b909      	cbnz	r1, 63de <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    63da:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    63de:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    63e2:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    63e4:	9a06      	ldr	r2, [sp, #24]
    63e6:	4806      	ldr	r0, [pc, #24]	; (6400 <snprintf+0x2c>)
	va_start(vargs, format);
    63e8:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    63ea:	a902      	add	r1, sp, #8
    63ec:	f7fa fb82 	bl	af4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    63f0:	9b02      	ldr	r3, [sp, #8]
    63f2:	2200      	movs	r2, #0
    63f4:	701a      	strb	r2, [r3, #0]
	return r;
}
    63f6:	b005      	add	sp, #20
    63f8:	f85d eb04 	ldr.w	lr, [sp], #4
    63fc:	b002      	add	sp, #8
    63fe:	4770      	bx	lr
    6400:	0000e21f 	.word	0x0000e21f

00006404 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6404:	f04f 0320 	mov.w	r3, #32
    6408:	f3ef 8211 	mrs	r2, BASEPRI
    640c:	f383 8812 	msr	BASEPRI_MAX, r3
    6410:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6414:	4906      	ldr	r1, [pc, #24]	; (6430 <nordicsemi_nrf52_init+0x2c>)
    6416:	2301      	movs	r3, #1
    6418:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    641c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6420:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6424:	f382 8811 	msr	BASEPRI, r2
    6428:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    642c:	2000      	movs	r0, #0
    642e:	4770      	bx	lr
    6430:	4001e000 	.word	0x4001e000

00006434 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6434:	b120      	cbz	r0, 6440 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6436:	4b03      	ldr	r3, [pc, #12]	; (6444 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6438:	0180      	lsls	r0, r0, #6
    643a:	f043 0301 	orr.w	r3, r3, #1
    643e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6440:	4770      	bx	lr
    6442:	bf00      	nop
    6444:	0000f9a0 	.word	0x0000f9a0

00006448 <board_particle_argon_init>:
			      ? GPIO_OUTPUT_INACTIVE
			      : GPIO_OUTPUT_ACTIVE));
}

static int board_particle_argon_init(const struct device *dev)
{
    6448:	b538      	push	{r3, r4, r5, lr}
    644a:	480c      	ldr	r0, [pc, #48]	; (647c <board_particle_argon_init+0x34>)
    644c:	f003 fe30 	bl	a0b0 <z_impl_device_get_binding>
	if (!ufl_gpio_dev) {
    6450:	4605      	mov	r5, r0
    6452:	b180      	cbz	r0, 6476 <board_particle_argon_init+0x2e>
    6454:	4809      	ldr	r0, [pc, #36]	; (647c <board_particle_argon_init+0x34>)
    6456:	f003 fe2b 	bl	a0b0 <z_impl_device_get_binding>
	if (!pcb_gpio_dev) {
    645a:	4604      	mov	r4, r0
    645c:	b158      	cbz	r0, 6476 <board_particle_argon_init+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    645e:	f241 6201 	movw	r2, #5633	; 0x1601
    6462:	2119      	movs	r1, #25
    6464:	4628      	mov	r0, r5
    6466:	f007 ff05 	bl	e274 <z_impl_gpio_pin_configure.isra.0>
    646a:	f641 2201 	movw	r2, #6657	; 0x1a01
    646e:	2102      	movs	r1, #2
    6470:	4620      	mov	r0, r4
    6472:	f007 feff 	bl	e274 <z_impl_gpio_pin_configure.isra.0>
	 * antenna.
	 */
	external_antenna(false);

	return 0;
}
    6476:	2000      	movs	r0, #0
    6478:	bd38      	pop	{r3, r4, r5, pc}
    647a:	bf00      	nop
    647c:	00011c4b 	.word	0x00011c4b

00006480 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    6480:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    6484:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6486:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    6488:	d004      	beq.n	6494 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    648a:	f010 0f78 	tst.w	r0, #120	; 0x78
    648e:	d001      	beq.n	6494 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    6490:	2000      	movs	r0, #0
    6492:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    6494:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    6496:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    649a:	f000 0008 	and.w	r0, r0, #8
    649e:	da05      	bge.n	64ac <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    64a0:	b958      	cbnz	r0, 64ba <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    64a2:	4808      	ldr	r0, [pc, #32]	; (64c4 <endpoint_ctx+0x44>)
    64a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    64a8:	304c      	adds	r0, #76	; 0x4c
    64aa:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    64ac:	b938      	cbnz	r0, 64be <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    64ae:	4805      	ldr	r0, [pc, #20]	; (64c4 <endpoint_ctx+0x44>)
    64b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    64b4:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    64b8:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    64ba:	4803      	ldr	r0, [pc, #12]	; (64c8 <endpoint_ctx+0x48>)
    64bc:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    64be:	4803      	ldr	r0, [pc, #12]	; (64cc <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    64c0:	4770      	bx	lr
    64c2:	bf00      	nop
    64c4:	20001d1c 	.word	0x20001d1c
    64c8:	20001e68 	.word	0x20001e68
    64cc:	20001f88 	.word	0x20001f88

000064d0 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    64d0:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    64d2:	4801      	ldr	r0, [pc, #4]	; (64d8 <usbd_evt_put+0x8>)
    64d4:	f008 bc80 	b.w	edd8 <k_queue_append>
    64d8:	2000036c 	.word	0x2000036c

000064dc <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    64dc:	4901      	ldr	r1, [pc, #4]	; (64e4 <usbd_work_schedule+0x8>)
    64de:	4802      	ldr	r0, [pc, #8]	; (64e8 <usbd_work_schedule+0xc>)
    64e0:	f008 bcb0 	b.w	ee44 <k_work_submit_to_queue>
    64e4:	20001d44 	.word	0x20001d44
    64e8:	20000da0 	.word	0x20000da0

000064ec <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    64ec:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    64ee:	480b      	ldr	r0, [pc, #44]	; (651c <usb_init+0x30>)
    64f0:	f002 fd5e 	bl	8fb0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    64f4:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    64f6:	480a      	ldr	r0, [pc, #40]	; (6520 <usb_init+0x34>)
    64f8:	f002 fda0 	bl	903c <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    64fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6500:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6504:	4907      	ldr	r1, [pc, #28]	; (6524 <usb_init+0x38>)
    6506:	4808      	ldr	r0, [pc, #32]	; (6528 <usb_init+0x3c>)
    6508:	9400      	str	r4, [sp, #0]
    650a:	f004 fc07 	bl	ad1c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    650e:	4907      	ldr	r1, [pc, #28]	; (652c <usb_init+0x40>)
    6510:	4807      	ldr	r0, [pc, #28]	; (6530 <usb_init+0x44>)
    6512:	f008 fc8e 	bl	ee32 <k_work_init>

	return 0;
}
    6516:	4620      	mov	r0, r4
    6518:	b002      	add	sp, #8
    651a:	bd10      	pop	{r4, pc}
    651c:	00011e63 	.word	0x00011e63
    6520:	0000fff8 	.word	0x0000fff8
    6524:	20003658 	.word	0x20003658
    6528:	20000da0 	.word	0x20000da0
    652c:	00006955 	.word	0x00006955
    6530:	20001d44 	.word	0x20001d44

00006534 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    6534:	4802      	ldr	r0, [pc, #8]	; (6540 <usbd_evt_get+0xc>)
    6536:	2200      	movs	r2, #0
    6538:	2300      	movs	r3, #0
    653a:	f004 ba87 	b.w	aa4c <z_impl_k_queue_get>
    653e:	bf00      	nop
    6540:	2000036c 	.word	0x2000036c

00006544 <usbd_evt_flush>:
{
    6544:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6546:	4c05      	ldr	r4, [pc, #20]	; (655c <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    6548:	f7ff fff4 	bl	6534 <usbd_evt_get>
		if (ev) {
    654c:	b120      	cbz	r0, 6558 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    654e:	1d01      	adds	r1, r0, #4
    6550:	4620      	mov	r0, r4
    6552:	f008 fb54 	bl	ebfe <k_mem_slab_free>
	} while (ev != NULL);
    6556:	e7f7      	b.n	6548 <usbd_evt_flush+0x4>
}
    6558:	bd10      	pop	{r4, pc}
    655a:	bf00      	nop
    655c:	200002c4 	.word	0x200002c4

00006560 <usbd_evt_alloc>:
{
    6560:	b510      	push	{r4, lr}
    6562:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6564:	481e      	ldr	r0, [pc, #120]	; (65e0 <usbd_evt_alloc+0x80>)
    6566:	2200      	movs	r2, #0
    6568:	2300      	movs	r3, #0
    656a:	4669      	mov	r1, sp
    656c:	f003 ff4e 	bl	a40c <k_mem_slab_alloc>
    6570:	2800      	cmp	r0, #0
    6572:	d030      	beq.n	65d6 <usbd_evt_alloc+0x76>
		LOG_ERR("USBD event allocation failed!");
    6574:	4c1b      	ldr	r4, [pc, #108]	; (65e4 <usbd_evt_alloc+0x84>)
    6576:	6823      	ldr	r3, [r4, #0]
    6578:	075a      	lsls	r2, r3, #29
    657a:	d00a      	beq.n	6592 <usbd_evt_alloc+0x32>
    657c:	4b1a      	ldr	r3, [pc, #104]	; (65e8 <usbd_evt_alloc+0x88>)
    657e:	9306      	str	r3, [sp, #24]
    6580:	aa05      	add	r2, sp, #20
    6582:	2302      	movs	r3, #2
    6584:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6588:	4620      	mov	r0, r4
    658a:	9301      	str	r3, [sp, #4]
    658c:	9305      	str	r3, [sp, #20]
    658e:	f007 fe99 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
    6592:	f7ff ffd7 	bl	6544 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6596:	4812      	ldr	r0, [pc, #72]	; (65e0 <usbd_evt_alloc+0x80>)
    6598:	2200      	movs	r2, #0
    659a:	2300      	movs	r3, #0
    659c:	4669      	mov	r1, sp
    659e:	f003 ff35 	bl	a40c <k_mem_slab_alloc>
    65a2:	b178      	cbz	r0, 65c4 <usbd_evt_alloc+0x64>
			LOG_ERR("USBD event memory corrupted");
    65a4:	6823      	ldr	r3, [r4, #0]
    65a6:	075b      	lsls	r3, r3, #29
    65a8:	d00a      	beq.n	65c0 <usbd_evt_alloc+0x60>
    65aa:	4b10      	ldr	r3, [pc, #64]	; (65ec <usbd_evt_alloc+0x8c>)
    65ac:	9306      	str	r3, [sp, #24]
    65ae:	480d      	ldr	r0, [pc, #52]	; (65e4 <usbd_evt_alloc+0x84>)
    65b0:	2302      	movs	r3, #2
    65b2:	aa05      	add	r2, sp, #20
    65b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65b8:	9301      	str	r3, [sp, #4]
    65ba:	9305      	str	r3, [sp, #20]
    65bc:	f007 fe82 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
			return NULL;
    65c0:	2000      	movs	r0, #0
    65c2:	e00a      	b.n	65da <usbd_evt_alloc+0x7a>
		ev = (struct usbd_event *)block.data;
    65c4:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
    65c6:	2304      	movs	r3, #4
		ev->block = block;
    65c8:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    65ca:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    65cc:	f7ff ff80 	bl	64d0 <usbd_evt_put>
		usbd_work_schedule();
    65d0:	f7ff ff84 	bl	64dc <usbd_work_schedule>
		return NULL;
    65d4:	e7f4      	b.n	65c0 <usbd_evt_alloc+0x60>
	ev = (struct usbd_event *)block.data;
    65d6:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
    65d8:	6040      	str	r0, [r0, #4]
}
    65da:	b008      	add	sp, #32
    65dc:	bd10      	pop	{r4, pc}
    65de:	bf00      	nop
    65e0:	200002c4 	.word	0x200002c4
    65e4:	2000028c 	.word	0x2000028c
    65e8:	00011c52 	.word	0x00011c52
    65ec:	00011c70 	.word	0x00011c70

000065f0 <usbd_event_transfer_data>:
{
    65f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    65f2:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
    65f4:	7881      	ldrb	r1, [r0, #2]
{
    65f6:	4606      	mov	r6, r0
    65f8:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    65fa:	4608      	mov	r0, r1
    65fc:	f7ff ff40 	bl	6480 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6600:	060a      	lsls	r2, r1, #24
		switch (p_event->data.eptransfer.status) {
    6602:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    6604:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6606:	d528      	bpl.n	665a <usbd_event_transfer_data+0x6a>
		switch (p_event->data.eptransfer.status) {
    6608:	b1b4      	cbz	r4, 6638 <usbd_event_transfer_data+0x48>
    660a:	2c03      	cmp	r4, #3
    660c:	d022      	beq.n	6654 <usbd_event_transfer_data+0x64>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    660e:	482d      	ldr	r0, [pc, #180]	; (66c4 <usbd_event_transfer_data+0xd4>)
    6610:	6803      	ldr	r3, [r0, #0]
    6612:	075b      	lsls	r3, r3, #29
    6614:	d01e      	beq.n	6654 <usbd_event_transfer_data+0x64>
    6616:	4b2c      	ldr	r3, [pc, #176]	; (66c8 <usbd_event_transfer_data+0xd8>)
    6618:	466d      	mov	r5, sp
    661a:	b088      	sub	sp, #32
    661c:	466a      	mov	r2, sp
    661e:	e9c2 3404 	strd	r3, r4, [r2, #16]
    6622:	2304      	movs	r3, #4
    6624:	6191      	str	r1, [r2, #24]
    6626:	607b      	str	r3, [r7, #4]
    6628:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    662c:	f842 3f0c 	str.w	r3, [r2, #12]!
    6630:	f007 fe48 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
    6634:	46ad      	mov	sp, r5
    6636:	e00d      	b.n	6654 <usbd_event_transfer_data+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    6638:	f7ff ff92 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    663c:	4603      	mov	r3, r0
    663e:	b148      	cbz	r0, 6654 <usbd_event_transfer_data+0x64>
			ev->evt_type = USBD_EVT_EP;
    6640:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    6642:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    6644:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    6646:	2203      	movs	r2, #3
    6648:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    664a:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    664c:	f7ff ff40 	bl	64d0 <usbd_evt_put>
			usbd_work_schedule();
    6650:	f7ff ff44 	bl	64dc <usbd_work_schedule>
}
    6654:	370c      	adds	r7, #12
    6656:	46bd      	mov	sp, r7
    6658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    665a:	b154      	cbz	r4, 6672 <usbd_event_transfer_data+0x82>
    665c:	2c01      	cmp	r4, #1
    665e:	d1d6      	bne.n	660e <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
    6660:	f7ff ff7e 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    6664:	4603      	mov	r3, r0
    6666:	2800      	cmp	r0, #0
    6668:	d0f4      	beq.n	6654 <usbd_event_transfer_data+0x64>
			ep_ctx->read_pending = true;
    666a:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    666c:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    666e:	7304      	strb	r4, [r0, #12]
    6670:	e7eb      	b.n	664a <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    6672:	f7ff ff75 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    6676:	2800      	cmp	r0, #0
    6678:	d0ec      	beq.n	6654 <usbd_event_transfer_data+0x64>
				p_event->data.eptransfer.ep);
    667a:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    667c:	4b13      	ldr	r3, [pc, #76]	; (66cc <usbd_event_transfer_data+0xdc>)
    667e:	f012 0f80 	tst.w	r2, #128	; 0x80
    6682:	f002 0108 	and.w	r1, r2, #8
    6686:	d011      	beq.n	66ac <usbd_event_transfer_data+0xbc>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    6688:	b141      	cbz	r1, 669c <usbd_event_transfer_data+0xac>
        {
            ret = p_reg->ISOIN.AMOUNT;
    668a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    668e:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    6690:	2301      	movs	r3, #1
    6692:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6694:	2302      	movs	r3, #2
    6696:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6698:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
    669a:	e7d7      	b.n	664c <usbd_event_transfer_data+0x5c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    669c:	f002 020f 	and.w	r2, r2, #15
    66a0:	2114      	movs	r1, #20
    66a2:	fb01 3302 	mla	r3, r1, r2, r3
    66a6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    66aa:	e7f0      	b.n	668e <usbd_event_transfer_data+0x9e>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    66ac:	b111      	cbz	r1, 66b4 <usbd_event_transfer_data+0xc4>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    66ae:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    66b2:	e7ec      	b.n	668e <usbd_event_transfer_data+0x9e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    66b4:	f002 020f 	and.w	r2, r2, #15
    66b8:	2114      	movs	r1, #20
    66ba:	fb01 3302 	mla	r3, r1, r2, r3
    66be:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    66c2:	e7e4      	b.n	668e <usbd_event_transfer_data+0x9e>
    66c4:	2000028c 	.word	0x2000028c
    66c8:	00011c8c 	.word	0x00011c8c
    66cc:	40027000 	.word	0x40027000

000066d0 <usb_dc_power_event_handler>:
{
    66d0:	b510      	push	{r4, lr}
    66d2:	2802      	cmp	r0, #2
    66d4:	b088      	sub	sp, #32
    66d6:	4603      	mov	r3, r0
    66d8:	d812      	bhi.n	6700 <usb_dc_power_event_handler+0x30>
    66da:	4a12      	ldr	r2, [pc, #72]	; (6724 <usb_dc_power_event_handler+0x54>)
    66dc:	5c14      	ldrb	r4, [r2, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    66de:	f7ff ff3f 	bl	6560 <usbd_evt_alloc>
	if (!ev) {
    66e2:	b1e0      	cbz	r0, 671e <usb_dc_power_event_handler+0x4e>
	ev->evt_type = USBD_EVT_POWER;
    66e4:	2200      	movs	r2, #0
    66e6:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    66e8:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    66ea:	f7ff fef1 	bl	64d0 <usbd_evt_put>
	if (usbd_ctx.attached) {
    66ee:	4b0e      	ldr	r3, [pc, #56]	; (6728 <usb_dc_power_event_handler+0x58>)
    66f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    66f4:	b19b      	cbz	r3, 671e <usb_dc_power_event_handler+0x4e>
}
    66f6:	b008      	add	sp, #32
    66f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    66fc:	f7ff beee 	b.w	64dc <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
    6700:	480a      	ldr	r0, [pc, #40]	; (672c <usb_dc_power_event_handler+0x5c>)
    6702:	6802      	ldr	r2, [r0, #0]
    6704:	0752      	lsls	r2, r2, #29
    6706:	d00a      	beq.n	671e <usb_dc_power_event_handler+0x4e>
    6708:	4a09      	ldr	r2, [pc, #36]	; (6730 <usb_dc_power_event_handler+0x60>)
    670a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (event) {
    670e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		LOG_ERR("Unknown USB power event %d", event);
    6712:	2303      	movs	r3, #3
    6714:	aa05      	add	r2, sp, #20
    6716:	9301      	str	r3, [sp, #4]
    6718:	9305      	str	r3, [sp, #20]
    671a:	f007 fdd3 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
}
    671e:	b008      	add	sp, #32
    6720:	bd10      	pop	{r4, pc}
    6722:	bf00      	nop
    6724:	00011e60 	.word	0x00011e60
    6728:	20001d1c 	.word	0x20001d1c
    672c:	2000028c 	.word	0x2000028c
    6730:	00011cb8 	.word	0x00011cb8

00006734 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    6734:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6736:	490f      	ldr	r1, [pc, #60]	; (6774 <hfxo_stop.constprop.0.isra.0+0x40>)
    6738:	f3bf 8f5b 	dmb	ish
    673c:	f101 0320 	add.w	r3, r1, #32
    6740:	2200      	movs	r2, #0
    6742:	e853 0f00 	ldrex	r0, [r3]
    6746:	2801      	cmp	r0, #1
    6748:	d103      	bne.n	6752 <hfxo_stop.constprop.0.isra.0+0x1e>
    674a:	e843 2400 	strex	r4, r2, [r3]
    674e:	2c00      	cmp	r4, #0
    6750:	d1f7      	bne.n	6742 <hfxo_stop.constprop.0.isra.0+0xe>
    6752:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    6756:	d10b      	bne.n	6770 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    6758:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    675a:	310c      	adds	r1, #12
    675c:	4620      	mov	r0, r4
    675e:	f005 fabd 	bl	bcdc <onoff_cancel>

	if (rv == -EALREADY) {
    6762:	3078      	adds	r0, #120	; 0x78
    6764:	d104      	bne.n	6770 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    6766:	4620      	mov	r0, r4
}
    6768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    676c:	f005 ba91 	b.w	bc92 <onoff_release>
    6770:	bd10      	pop	{r4, pc}
    6772:	bf00      	nop
    6774:	20001d1c 	.word	0x20001d1c

00006778 <usbd_event_handler>:
{
    6778:	b5f0      	push	{r4, r5, r6, r7, lr}
    677a:	b08d      	sub	sp, #52	; 0x34
    677c:	4606      	mov	r6, r0
    677e:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    6780:	2214      	movs	r2, #20
    6782:	2100      	movs	r1, #0
    6784:	1d38      	adds	r0, r7, #4
    6786:	f007 fd3e 	bl	e206 <memset>
	switch (p_event->type) {
    678a:	7833      	ldrb	r3, [r6, #0]
    678c:	3b01      	subs	r3, #1
    678e:	2b05      	cmp	r3, #5
    6790:	d820      	bhi.n	67d4 <usbd_event_handler+0x5c>
    6792:	e8df f003 	tbb	[pc, r3]
    6796:	039e      	.short	0x039e
    6798:	158f1313 	.word	0x158f1313
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    679c:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    679e:	733b      	strb	r3, [r7, #12]
		evt.evt_type = USBD_EVT_POWER;
    67a0:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    67a2:	f7ff fedd 	bl	6560 <usbd_evt_alloc>
		if (!ev) {
    67a6:	4603      	mov	r3, r0
    67a8:	b1a0      	cbz	r0, 67d4 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    67aa:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    67ac:	f100 0208 	add.w	r2, r0, #8
    67b0:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    67b4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    67b8:	4618      	mov	r0, r3
    67ba:	e034      	b.n	6826 <usbd_event_handler+0xae>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    67bc:	2304      	movs	r3, #4
    67be:	e7ee      	b.n	679e <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    67c0:	78b1      	ldrb	r1, [r6, #2]
    67c2:	4608      	mov	r0, r1
    67c4:	f7ff fe5c 	bl	6480 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    67c8:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    67ca:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    67cc:	b12b      	cbz	r3, 67da <usbd_event_handler+0x62>
    67ce:	3b01      	subs	r3, #1
    67d0:	2b02      	cmp	r3, #2
    67d2:	d96b      	bls.n	68ac <usbd_event_handler+0x134>
}
    67d4:	3734      	adds	r7, #52	; 0x34
    67d6:	46bd      	mov	sp, r7
    67d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    67da:	0608      	lsls	r0, r1, #24
		switch (p_event->data.eptransfer.status) {
    67dc:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    67de:	d527      	bpl.n	6830 <usbd_event_handler+0xb8>
		switch (p_event->data.eptransfer.status) {
    67e0:	b1b4      	cbz	r4, 6810 <usbd_event_handler+0x98>
    67e2:	2c03      	cmp	r4, #3
    67e4:	d0f6      	beq.n	67d4 <usbd_event_handler+0x5c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    67e6:	483c      	ldr	r0, [pc, #240]	; (68d8 <usbd_event_handler+0x160>)
    67e8:	6803      	ldr	r3, [r0, #0]
    67ea:	075b      	lsls	r3, r3, #29
    67ec:	d0f2      	beq.n	67d4 <usbd_event_handler+0x5c>
    67ee:	4b3b      	ldr	r3, [pc, #236]	; (68dc <usbd_event_handler+0x164>)
    67f0:	466d      	mov	r5, sp
    67f2:	b088      	sub	sp, #32
    67f4:	466a      	mov	r2, sp
    67f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
    67fa:	2304      	movs	r3, #4
    67fc:	6191      	str	r1, [r2, #24]
    67fe:	61bb      	str	r3, [r7, #24]
    6800:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6804:	f842 3f0c 	str.w	r3, [r2, #12]!
    6808:	f007 fd5c 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
    680c:	46ad      	mov	sp, r5
    680e:	e7e1      	b.n	67d4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    6810:	f7ff fea6 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    6814:	4603      	mov	r3, r0
    6816:	2800      	cmp	r0, #0
    6818:	d0dc      	beq.n	67d4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    681a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    681c:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    681e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    6820:	2203      	movs	r2, #3
    6822:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6824:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    6826:	f7ff fe53 	bl	64d0 <usbd_evt_put>
		usbd_work_schedule();
    682a:	f7ff fe57 	bl	64dc <usbd_work_schedule>
    682e:	e7d1      	b.n	67d4 <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
    6830:	b154      	cbz	r4, 6848 <usbd_event_handler+0xd0>
    6832:	2c01      	cmp	r4, #1
    6834:	d1d7      	bne.n	67e6 <usbd_event_handler+0x6e>
			struct usbd_event *ev = usbd_evt_alloc();
    6836:	f7ff fe93 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    683a:	4603      	mov	r3, r0
    683c:	2800      	cmp	r0, #0
    683e:	d0c9      	beq.n	67d4 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    6840:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    6842:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6844:	7304      	strb	r4, [r0, #12]
    6846:	e7ed      	b.n	6824 <usbd_event_handler+0xac>
			struct usbd_event *ev = usbd_evt_alloc();
    6848:	f7ff fe8a 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    684c:	4604      	mov	r4, r0
    684e:	2800      	cmp	r0, #0
    6850:	d0c0      	beq.n	67d4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    6852:	2301      	movs	r3, #1
    6854:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6856:	2302      	movs	r3, #2
    6858:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    685a:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    685c:	f105 010c 	add.w	r1, r5, #12
    6860:	78b0      	ldrb	r0, [r6, #2]
    6862:	f008 f963 	bl	eb2c <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    6866:	4603      	mov	r3, r0
    6868:	b178      	cbz	r0, 688a <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    686a:	481b      	ldr	r0, [pc, #108]	; (68d8 <usbd_event_handler+0x160>)
    686c:	6802      	ldr	r2, [r0, #0]
    686e:	0752      	lsls	r2, r2, #29
    6870:	d00b      	beq.n	688a <usbd_event_handler+0x112>
    6872:	4a1b      	ldr	r2, [pc, #108]	; (68e0 <usbd_event_handler+0x168>)
    6874:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6878:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    687c:	2303      	movs	r3, #3
    687e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    6882:	603b      	str	r3, [r7, #0]
    6884:	627b      	str	r3, [r7, #36]	; 0x24
    6886:	f007 fd1d 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    688a:	4a16      	ldr	r2, [pc, #88]	; (68e4 <usbd_event_handler+0x16c>)
    688c:	68e9      	ldr	r1, [r5, #12]
    688e:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    6892:	428b      	cmp	r3, r1
    6894:	d906      	bls.n	68a4 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    6896:	1a5b      	subs	r3, r3, r1
    6898:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    689c:	f003 f92e 	bl	9afc <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    68a0:	4620      	mov	r0, r4
    68a2:	e7c0      	b.n	6826 <usbd_event_handler+0xae>
				ctx->ctrl_read_len = 0U;
    68a4:	2300      	movs	r3, #0
    68a6:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    68aa:	e7f9      	b.n	68a0 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    68ac:	4630      	mov	r0, r6
    68ae:	f7ff fe9f 	bl	65f0 <usbd_event_transfer_data>
	if (put_evt) {
    68b2:	e78f      	b.n	67d4 <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
    68b4:	f107 0018 	add.w	r0, r7, #24
    68b8:	f003 f8fa 	bl	9ab0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    68bc:	7e7b      	ldrb	r3, [r7, #25]
    68be:	2b05      	cmp	r3, #5
    68c0:	d103      	bne.n	68ca <usbd_event_handler+0x152>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    68c2:	7e3b      	ldrb	r3, [r7, #24]
    68c4:	f013 0f60 	tst.w	r3, #96	; 0x60
    68c8:	d084      	beq.n	67d4 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    68ca:	4b07      	ldr	r3, [pc, #28]	; (68e8 <usbd_event_handler+0x170>)
    68cc:	60fb      	str	r3, [r7, #12]
			evt.evt_type = USBD_EVT_EP;
    68ce:	2401      	movs	r4, #1
    68d0:	e767      	b.n	67a2 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    68d2:	2402      	movs	r4, #2
    68d4:	e765      	b.n	67a2 <usbd_event_handler+0x2a>
    68d6:	bf00      	nop
    68d8:	2000028c 	.word	0x2000028c
    68dc:	00011c8c 	.word	0x00011c8c
    68e0:	00011cd3 	.word	0x00011cd3
    68e4:	20001d1c 	.word	0x20001d1c
    68e8:	20001e88 	.word	0x20001e88

000068ec <eps_ctx_init>:
{
    68ec:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    68ee:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    68f0:	f064 007f 	orn	r0, r4, #127	; 0x7f
    68f4:	b2c0      	uxtb	r0, r0
    68f6:	f7ff fdc3 	bl	6480 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    68fa:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    68fc:	f007 fccf 	bl	e29e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6900:	2c08      	cmp	r4, #8
    6902:	d1f5      	bne.n	68f0 <eps_ctx_init+0x4>
    6904:	4d0f      	ldr	r5, [pc, #60]	; (6944 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6906:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6908:	b2e0      	uxtb	r0, r4
    690a:	f7ff fdb9 	bl	6480 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    690e:	6903      	ldr	r3, [r0, #16]
    6910:	b903      	cbnz	r3, 6914 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    6912:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6914:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    6916:	f007 fcc2 	bl	e29e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    691a:	2c08      	cmp	r4, #8
    691c:	f105 0540 	add.w	r5, r5, #64	; 0x40
    6920:	d1f2      	bne.n	6908 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    6922:	4c09      	ldr	r4, [pc, #36]	; (6948 <eps_ctx_init+0x5c>)
    6924:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    6928:	f007 fcb9 	bl	e29e <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    692c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    6930:	b913      	cbnz	r3, 6938 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    6932:	4b06      	ldr	r3, [pc, #24]	; (694c <eps_ctx_init+0x60>)
    6934:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    6938:	4805      	ldr	r0, [pc, #20]	; (6950 <eps_ctx_init+0x64>)
    693a:	f007 fcb0 	bl	e29e <ep_ctx_reset>
}
    693e:	2000      	movs	r0, #0
    6940:	bd38      	pop	{r3, r4, r5, pc}
    6942:	bf00      	nop
    6944:	20001b1c 	.word	0x20001b1c
    6948:	20001d1c 	.word	0x20001d1c
    694c:	2000171c 	.word	0x2000171c
    6950:	20001f88 	.word	0x20001f88

00006954 <usbd_work_handler>:
{
    6954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    6958:	4ca3      	ldr	r4, [pc, #652]	; (6be8 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    695a:	f8df 8290 	ldr.w	r8, [pc, #656]	; 6bec <usbd_work_handler+0x298>
{
    695e:	b08b      	sub	sp, #44	; 0x2c
    6960:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    6962:	f7ff fde7 	bl	6534 <usbd_evt_get>
    6966:	4606      	mov	r6, r0
    6968:	b910      	cbnz	r0, 6970 <usbd_work_handler+0x1c>
}
    696a:	b00b      	add	sp, #44	; 0x2c
    696c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    6970:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    6974:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6976:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    697a:	b93a      	cbnz	r2, 698c <usbd_work_handler+0x38>
    697c:	2b00      	cmp	r3, #0
    697e:	f000 80ae 	beq.w	6ade <usbd_work_handler+0x18a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6982:	4649      	mov	r1, r9
    6984:	4640      	mov	r0, r8
    6986:	f008 f93a 	bl	ebfe <k_mem_slab_free>
}
    698a:	e7ea      	b.n	6962 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    698c:	2b04      	cmp	r3, #4
    698e:	f200 819d 	bhi.w	6ccc <usbd_work_handler+0x378>
    6992:	e8df f013 	tbh	[pc, r3, lsl #1]
    6996:	00a4      	.short	0x00a4
    6998:	013d0005 	.word	0x013d0005
    699c:	017d0153 	.word	0x017d0153
			if (!ctx->attached) {
    69a0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    69a4:	b983      	cbnz	r3, 69c8 <usbd_work_handler+0x74>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    69a6:	4892      	ldr	r0, [pc, #584]	; (6bf0 <usbd_work_handler+0x29c>)
    69a8:	6803      	ldr	r3, [r0, #0]
    69aa:	075b      	lsls	r3, r3, #29
    69ac:	d00c      	beq.n	69c8 <usbd_work_handler+0x74>
    69ae:	4b91      	ldr	r3, [pc, #580]	; (6bf4 <usbd_work_handler+0x2a0>)
    69b0:	9308      	str	r3, [sp, #32]
    69b2:	68b3      	ldr	r3, [r6, #8]
    69b4:	7a5b      	ldrb	r3, [r3, #9]
    69b6:	9309      	str	r3, [sp, #36]	; 0x24
    69b8:	aa07      	add	r2, sp, #28
    69ba:	2303      	movs	r3, #3
    69bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    69c0:	9301      	str	r3, [sp, #4]
    69c2:	9307      	str	r3, [sp, #28]
    69c4:	f007 fc7e 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
	switch (ep_evt->evt_type) {
    69c8:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    69ca:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    69cc:	2b03      	cmp	r3, #3
    69ce:	d8d8      	bhi.n	6982 <usbd_work_handler+0x2e>
    69d0:	e8df f003 	tbb	[pc, r3]
    69d4:	726d3d02 	.word	0x726d3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    69d8:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    69da:	2208      	movs	r2, #8
    69dc:	2100      	movs	r1, #0
    69de:	4630      	mov	r0, r6
    69e0:	f007 fc11 	bl	e206 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    69e4:	4b84      	ldr	r3, [pc, #528]	; (6bf8 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    69e6:	4885      	ldr	r0, [pc, #532]	; (6bfc <usbd_work_handler+0x2a8>)
    69e8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    69ec:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    69ee:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    69f2:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    69f4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    69f8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    69fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    6a00:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    6a02:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    6a06:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    6a0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    6a0e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    6a10:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    6a14:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    6a18:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6a1c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    6a1e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6a20:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6a22:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6a24:	f007 fbe4 	bl	e1f0 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    6a28:	682b      	ldr	r3, [r5, #0]
    6a2a:	7a68      	ldrb	r0, [r5, #9]
    6a2c:	2100      	movs	r1, #0
    6a2e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    6a30:	f996 3000 	ldrsb.w	r3, [r6]
    6a34:	2b00      	cmp	r3, #0
    6a36:	db06      	blt.n	6a46 <usbd_work_handler+0xf2>
    6a38:	88f3      	ldrh	r3, [r6, #6]
    6a3a:	b123      	cbz	r3, 6a46 <usbd_work_handler+0xf2>
		ctx->ctrl_read_len = usbd_setup->wLength;
    6a3c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    6a40:	f003 f85c 	bl	9afc <nrfx_usbd_setup_data_clear>
    6a44:	e79d      	b.n	6982 <usbd_work_handler+0x2e>
		ctx->ctrl_read_len = 0U;
    6a46:	2300      	movs	r3, #0
    6a48:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    6a4c:	e799      	b.n	6982 <usbd_work_handler+0x2e>
	if (!ep_ctx->read_pending) {
    6a4e:	7f6b      	ldrb	r3, [r5, #29]
    6a50:	2b00      	cmp	r3, #0
    6a52:	d096      	beq.n	6982 <usbd_work_handler+0x2e>
	if (!ep_ctx->read_complete) {
    6a54:	7f2b      	ldrb	r3, [r5, #28]
    6a56:	2b00      	cmp	r3, #0
    6a58:	d093      	beq.n	6982 <usbd_work_handler+0x2e>
	ep_ctx->read_pending = false;
    6a5a:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a60:	4867      	ldr	r0, [pc, #412]	; (6c00 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    6a62:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    6a68:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6a6a:	f007 fc2e 	bl	e2ca <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6a6e:	696b      	ldr	r3, [r5, #20]
    6a70:	9301      	str	r3, [sp, #4]
    6a72:	686b      	ldr	r3, [r5, #4]
    6a74:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6a78:	a901      	add	r1, sp, #4
    6a7a:	7a68      	ldrb	r0, [r5, #9]
    6a7c:	f002 fe48 	bl	9710 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6a80:	4a60      	ldr	r2, [pc, #384]	; (6c04 <usbd_work_handler+0x2b0>)
    6a82:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6a84:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
    6a86:	d00e      	beq.n	6aa6 <usbd_work_handler+0x152>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    6a88:	4859      	ldr	r0, [pc, #356]	; (6bf0 <usbd_work_handler+0x29c>)
    6a8a:	6802      	ldr	r2, [r0, #0]
    6a8c:	0756      	lsls	r6, r2, #29
    6a8e:	d00a      	beq.n	6aa6 <usbd_work_handler+0x152>
    6a90:	4a5d      	ldr	r2, [pc, #372]	; (6c08 <usbd_work_handler+0x2b4>)
    6a92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
    6a9a:	2303      	movs	r3, #3
    6a9c:	aa07      	add	r2, sp, #28
    6a9e:	9300      	str	r3, [sp, #0]
    6aa0:	9307      	str	r3, [sp, #28]
    6aa2:	f007 fc0f 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
    6aa6:	4856      	ldr	r0, [pc, #344]	; (6c00 <usbd_work_handler+0x2ac>)
    6aa8:	f007 fc11 	bl	e2ce <k_mutex_unlock.isra.0>
    6aac:	e769      	b.n	6982 <usbd_work_handler+0x2e>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6aae:	682b      	ldr	r3, [r5, #0]
    6ab0:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6ab2:	7a68      	ldrb	r0, [r5, #9]
    6ab4:	4798      	blx	r3
		break;
    6ab6:	e764      	b.n	6982 <usbd_work_handler+0x2e>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    6ab8:	7aab      	ldrb	r3, [r5, #10]
    6aba:	b96b      	cbnz	r3, 6ad8 <usbd_work_handler+0x184>
    6abc:	7feb      	ldrb	r3, [r5, #31]
    6abe:	b95b      	cbnz	r3, 6ad8 <usbd_work_handler+0x184>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6ac0:	484f      	ldr	r0, [pc, #316]	; (6c00 <usbd_work_handler+0x2ac>)
    6ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6aca:	f007 fbfe 	bl	e2ca <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    6ace:	f003 f845 	bl	9b5c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    6ad2:	484b      	ldr	r0, [pc, #300]	; (6c00 <usbd_work_handler+0x2ac>)
    6ad4:	f007 fbfb 	bl	e2ce <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6ad8:	682b      	ldr	r3, [r5, #0]
    6ada:	2102      	movs	r1, #2
    6adc:	e7e9      	b.n	6ab2 <usbd_work_handler+0x15e>
	switch (pwr_evt->state) {
    6ade:	7a33      	ldrb	r3, [r6, #8]
    6ae0:	2b04      	cmp	r3, #4
    6ae2:	f63f af4e 	bhi.w	6982 <usbd_work_handler+0x2e>
    6ae6:	e8df f003 	tbb	[pc, r3]
    6aea:	035b      	.short	0x035b
    6aec:	6925      	.short	0x6925
    6aee:	75          	.byte	0x75
    6aef:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    6af0:	f002 fdbe 	bl	9670 <nrfx_usbd_is_enabled>
    6af4:	4605      	mov	r5, r0
    6af6:	2800      	cmp	r0, #0
    6af8:	f47f af43 	bne.w	6982 <usbd_work_handler+0x2e>
			nrfx_usbd_enable();
    6afc:	f002 fcfc 	bl	94f8 <nrfx_usbd_enable>
    6b00:	f3bf 8f5b 	dmb	ish
    6b04:	4941      	ldr	r1, [pc, #260]	; (6c0c <usbd_work_handler+0x2b8>)
    6b06:	2301      	movs	r3, #1
    6b08:	e851 2f00 	ldrex	r2, [r1]
    6b0c:	2a00      	cmp	r2, #0
    6b0e:	d103      	bne.n	6b18 <usbd_work_handler+0x1c4>
    6b10:	e841 3000 	strex	r0, r3, [r1]
    6b14:	2800      	cmp	r0, #0
    6b16:	d1f7      	bne.n	6b08 <usbd_work_handler+0x1b4>
    6b18:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    6b1c:	f47f af31 	bne.w	6982 <usbd_work_handler+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6b20:	f841 5c10 	str.w	r5, [r1, #-16]
    6b24:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    6b28:	69e0      	ldr	r0, [r4, #28]
    6b2a:	6163      	str	r3, [r4, #20]
    6b2c:	3914      	subs	r1, #20
    6b2e:	f005 f867 	bl	bc00 <onoff_request>
    6b32:	e726      	b.n	6982 <usbd_work_handler+0x2e>
	switch (pwr_evt->state) {
    6b34:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    6b36:	f065 007f 	orn	r0, r5, #127	; 0x7f
    6b3a:	b2c0      	uxtb	r0, r0
    6b3c:	f7ff fca0 	bl	6480 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    6b40:	7a03      	ldrb	r3, [r0, #8]
    6b42:	b113      	cbz	r3, 6b4a <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6b44:	7a40      	ldrb	r0, [r0, #9]
    6b46:	f003 f9f5 	bl	9f34 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    6b4a:	3501      	adds	r5, #1
    6b4c:	2d08      	cmp	r5, #8
    6b4e:	d1f2      	bne.n	6b36 <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    6b50:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    6b54:	b11b      	cbz	r3, 6b5e <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6b56:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    6b5a:	f003 f9eb 	bl	9f34 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    6b5e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6b60:	b2e8      	uxtb	r0, r5
    6b62:	f7ff fc8d 	bl	6480 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    6b66:	7a03      	ldrb	r3, [r0, #8]
    6b68:	b113      	cbz	r3, 6b70 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6b6a:	7a40      	ldrb	r0, [r0, #9]
    6b6c:	f003 f9e2 	bl	9f34 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    6b70:	3501      	adds	r5, #1
    6b72:	2d08      	cmp	r5, #8
    6b74:	d1f4      	bne.n	6b60 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    6b76:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    6b7a:	b11b      	cbz	r3, 6b84 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6b7c:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    6b80:	f003 f9d8 	bl	9f34 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    6b84:	2001      	movs	r0, #1
    6b86:	f002 fd55 	bl	9634 <nrfx_usbd_start>
		ctx->ready = true;
    6b8a:	2301      	movs	r3, #1
    6b8c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    6b90:	6823      	ldr	r3, [r4, #0]
    6b92:	2b00      	cmp	r3, #0
    6b94:	f43f aef5 	beq.w	6982 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    6b98:	2100      	movs	r1, #0
    6b9a:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    6b9c:	4798      	blx	r3
    6b9e:	e6f0      	b.n	6982 <usbd_work_handler+0x2e>
		ctx->ready = false;
    6ba0:	2500      	movs	r5, #0
    6ba2:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    6ba6:	f003 f951 	bl	9e4c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    6baa:	f7ff fdc3 	bl	6734 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    6bae:	6823      	ldr	r3, [r4, #0]
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	f43f aee6 	beq.w	6982 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    6bb6:	4629      	mov	r1, r5
    6bb8:	2004      	movs	r0, #4
    6bba:	e7ef      	b.n	6b9c <usbd_work_handler+0x248>
		if (dev_ready()) {
    6bbc:	2a00      	cmp	r2, #0
    6bbe:	f43f aee0 	beq.w	6982 <usbd_work_handler+0x2e>
			nrfx_usbd_suspend();
    6bc2:	f003 f95b 	bl	9e7c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    6bc6:	6823      	ldr	r3, [r4, #0]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	f43f aeda 	beq.w	6982 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    6bce:	2100      	movs	r1, #0
    6bd0:	2005      	movs	r0, #5
    6bd2:	e7e3      	b.n	6b9c <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    6bd4:	6823      	ldr	r3, [r4, #0]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	f43f aed3 	beq.w	6982 <usbd_work_handler+0x2e>
    6bdc:	2a00      	cmp	r2, #0
    6bde:	f43f aed0 	beq.w	6982 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_RESUME, NULL);
    6be2:	2100      	movs	r1, #0
    6be4:	2006      	movs	r0, #6
    6be6:	e7d9      	b.n	6b9c <usbd_work_handler+0x248>
    6be8:	20001d1c 	.word	0x20001d1c
    6bec:	200002c4 	.word	0x200002c4
    6bf0:	2000028c 	.word	0x2000028c
    6bf4:	00011cf3 	.word	0x00011cf3
    6bf8:	40027000 	.word	0x40027000
    6bfc:	20001d20 	.word	0x20001d20
    6c00:	20001d54 	.word	0x20001d54
    6c04:	0bad0000 	.word	0x0bad0000
    6c08:	00011d19 	.word	0x00011d19
    6c0c:	20001d3c 	.word	0x20001d3c
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6c10:	f107 0510 	add.w	r5, r7, #16
    6c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c1c:	4628      	mov	r0, r5
    6c1e:	f007 fb54 	bl	e2ca <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    6c22:	f7ff fe63 	bl	68ec <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    6c26:	4628      	mov	r0, r5
    6c28:	f007 fb51 	bl	e2ce <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    6c2c:	f857 3c28 	ldr.w	r3, [r7, #-40]
    6c30:	2b00      	cmp	r3, #0
    6c32:	f43f aea6 	beq.w	6982 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_RESET, NULL);
    6c36:	2100      	movs	r1, #0
    6c38:	2001      	movs	r0, #1
    6c3a:	e7af      	b.n	6b9c <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    6c3c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    6c40:	b1ab      	cbz	r3, 6c6e <usbd_work_handler+0x31a>
		ep_ctx->read_pending = true;
    6c42:	2501      	movs	r5, #1
    6c44:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    6c48:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    6c4c:	f7ff fc88 	bl	6560 <usbd_evt_alloc>
		if (!ev) {
    6c50:	b9a8      	cbnz	r0, 6c7e <usbd_work_handler+0x32a>
			LOG_ERR("Failed to alloc evt");
    6c52:	4827      	ldr	r0, [pc, #156]	; (6cf0 <usbd_work_handler+0x39c>)
    6c54:	6803      	ldr	r3, [r0, #0]
    6c56:	075d      	lsls	r5, r3, #29
    6c58:	d009      	beq.n	6c6e <usbd_work_handler+0x31a>
    6c5a:	4b26      	ldr	r3, [pc, #152]	; (6cf4 <usbd_work_handler+0x3a0>)
    6c5c:	9308      	str	r3, [sp, #32]
    6c5e:	aa07      	add	r2, sp, #28
    6c60:	2302      	movs	r3, #2
    6c62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c66:	9301      	str	r3, [sp, #4]
    6c68:	9307      	str	r3, [sp, #28]
    6c6a:	f007 fb2b 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
    6c6e:	f857 3c28 	ldr.w	r3, [r7, #-40]
    6c72:	2b00      	cmp	r3, #0
    6c74:	f43f ae85 	beq.w	6982 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SOF, NULL);
    6c78:	2100      	movs	r1, #0
    6c7a:	200a      	movs	r0, #10
    6c7c:	e78e      	b.n	6b9c <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    6c7e:	4a1e      	ldr	r2, [pc, #120]	; (6cf8 <usbd_work_handler+0x3a4>)
		ev->evt_type = USBD_EVT_EP;
    6c80:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6c82:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    6c84:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    6c86:	f7ff fc23 	bl	64d0 <usbd_evt_put>
		usbd_work_schedule();
    6c8a:	f7ff fc27 	bl	64dc <usbd_work_schedule>
    6c8e:	e7ee      	b.n	6c6e <usbd_work_handler+0x31a>
				LOG_ERR("USBD event queue full!");
    6c90:	4817      	ldr	r0, [pc, #92]	; (6cf0 <usbd_work_handler+0x39c>)
    6c92:	6803      	ldr	r3, [r0, #0]
    6c94:	0759      	lsls	r1, r3, #29
    6c96:	d009      	beq.n	6cac <usbd_work_handler+0x358>
    6c98:	4b18      	ldr	r3, [pc, #96]	; (6cfc <usbd_work_handler+0x3a8>)
    6c9a:	9308      	str	r3, [sp, #32]
    6c9c:	aa07      	add	r2, sp, #28
    6c9e:	2302      	movs	r3, #2
    6ca0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ca4:	9301      	str	r3, [sp, #4]
    6ca6:	9307      	str	r3, [sp, #28]
    6ca8:	f007 fb0c 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    6cac:	f007 feab 	bl	ea06 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    6cb0:	f003 f8cc 	bl	9e4c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    6cb4:	f002 fc16 	bl	94e4 <nrfx_usbd_uninit>
	usbd_evt_flush();
    6cb8:	f7ff fc44 	bl	6544 <usbd_evt_flush>
	ret = eps_ctx_init();
    6cbc:	f7ff fe16 	bl	68ec <eps_ctx_init>
	nrfx_power_usbevt_enable();
    6cc0:	f007 fe9a 	bl	e9f8 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    6cc4:	480e      	ldr	r0, [pc, #56]	; (6d00 <usbd_work_handler+0x3ac>)
    6cc6:	f002 fcdd 	bl	9684 <nrfx_usbd_init>
}
    6cca:	e65a      	b.n	6982 <usbd_work_handler+0x2e>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6ccc:	4808      	ldr	r0, [pc, #32]	; (6cf0 <usbd_work_handler+0x39c>)
    6cce:	6802      	ldr	r2, [r0, #0]
    6cd0:	0752      	lsls	r2, r2, #29
    6cd2:	f43f ae56 	beq.w	6982 <usbd_work_handler+0x2e>
    6cd6:	4a0b      	ldr	r2, [pc, #44]	; (6d04 <usbd_work_handler+0x3b0>)
    6cd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		switch (ev->evt_type) {
    6cdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6ce0:	2303      	movs	r3, #3
    6ce2:	aa07      	add	r2, sp, #28
    6ce4:	9301      	str	r3, [sp, #4]
    6ce6:	9307      	str	r3, [sp, #28]
    6ce8:	f007 faec 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
    6cec:	e649      	b.n	6982 <usbd_work_handler+0x2e>
    6cee:	bf00      	nop
    6cf0:	2000028c 	.word	0x2000028c
    6cf4:	00011d3f 	.word	0x00011d3f
    6cf8:	20001f88 	.word	0x20001f88
    6cfc:	00011d53 	.word	0x00011d53
    6d00:	00006779 	.word	0x00006779
    6d04:	00011d6a 	.word	0x00011d6a

00006d08 <usb_dc_attach>:
{
    6d08:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    6d0a:	4d1a      	ldr	r5, [pc, #104]	; (6d74 <usb_dc_attach+0x6c>)
    6d0c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    6d10:	bb5c      	cbnz	r4, 6d6a <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    6d12:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6d16:	f007 ffe7 	bl	ece8 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    6d1a:	4620      	mov	r0, r4
    6d1c:	f000 fca4 	bl	7668 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6d20:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    6d22:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6d24:	2101      	movs	r1, #1
    6d26:	2027      	movs	r0, #39	; 0x27
    6d28:	f7fe fe32 	bl	5990 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    6d2c:	4812      	ldr	r0, [pc, #72]	; (6d78 <usb_dc_attach+0x70>)
    6d2e:	f002 fca9 	bl	9684 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    6d32:	4b12      	ldr	r3, [pc, #72]	; (6d7c <usb_dc_attach+0x74>)
    6d34:	4298      	cmp	r0, r3
    6d36:	d11a      	bne.n	6d6e <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    6d38:	f007 fe5e 	bl	e9f8 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6d3c:	f7ff fdd6 	bl	68ec <eps_ctx_init>
	if (ret == 0) {
    6d40:	4604      	mov	r4, r0
    6d42:	b910      	cbnz	r0, 6d4a <usb_dc_attach+0x42>
		ctx->attached = true;
    6d44:	2301      	movs	r3, #1
    6d46:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    6d4a:	4b0d      	ldr	r3, [pc, #52]	; (6d80 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	b10b      	cbz	r3, 6d54 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    6d50:	f7ff fbc4 	bl	64dc <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    6d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d58:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6d5c:	07db      	lsls	r3, r3, #31
    6d5e:	d502      	bpl.n	6d66 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6d60:	2000      	movs	r0, #0
    6d62:	f7ff fcb5 	bl	66d0 <usb_dc_power_event_handler>
}
    6d66:	4620      	mov	r0, r4
    6d68:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    6d6a:	2400      	movs	r4, #0
    6d6c:	e7fb      	b.n	6d66 <usb_dc_attach+0x5e>
		return -EIO;
    6d6e:	f06f 0404 	mvn.w	r4, #4
    6d72:	e7f8      	b.n	6d66 <usb_dc_attach+0x5e>
    6d74:	20001d1c 	.word	0x20001d1c
    6d78:	00006779 	.word	0x00006779
    6d7c:	0bad0000 	.word	0x0bad0000
    6d80:	2000036c 	.word	0x2000036c

00006d84 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    6d84:	4b07      	ldr	r3, [pc, #28]	; (6da4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    6d86:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    6d8a:	b13a      	cbz	r2, 6d9c <usb_dc_set_address+0x18>
    6d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    6d90:	2b00      	cmp	r3, #0
    6d92:	bf0c      	ite	eq
    6d94:	f06f 0012 	mvneq.w	r0, #18
    6d98:	2000      	movne	r0, #0
    6d9a:	4770      	bx	lr
		return -ENODEV;
    6d9c:	f06f 0012 	mvn.w	r0, #18
}
    6da0:	4770      	bx	lr
    6da2:	bf00      	nop
    6da4:	20001d1c 	.word	0x20001d1c

00006da8 <usb_dc_ep_check_cap>:
{
    6da8:	b500      	push	{lr}
    6daa:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6dac:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6dae:	791b      	ldrb	r3, [r3, #4]
{
    6db0:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6db2:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6db6:	b98b      	cbnz	r3, 6ddc <usb_dc_ep_check_cap+0x34>
    6db8:	b358      	cbz	r0, 6e12 <usb_dc_ep_check_cap+0x6a>
		LOG_ERR("invalid endpoint configuration");
    6dba:	4817      	ldr	r0, [pc, #92]	; (6e18 <usb_dc_ep_check_cap+0x70>)
    6dbc:	6803      	ldr	r3, [r0, #0]
    6dbe:	0759      	lsls	r1, r3, #29
    6dc0:	d009      	beq.n	6dd6 <usb_dc_ep_check_cap+0x2e>
    6dc2:	4b16      	ldr	r3, [pc, #88]	; (6e1c <usb_dc_ep_check_cap+0x74>)
		LOG_ERR("invalid endpoint index/address");
    6dc4:	9306      	str	r3, [sp, #24]
    6dc6:	2302      	movs	r3, #2
    6dc8:	9301      	str	r3, [sp, #4]
    6dca:	9305      	str	r3, [sp, #20]
    6dcc:	aa05      	add	r2, sp, #20
    6dce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6dd2:	f007 fa77 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		return -1;
    6dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6dda:	e01a      	b.n	6e12 <usb_dc_ep_check_cap+0x6a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    6ddc:	2808      	cmp	r0, #8
    6dde:	d905      	bls.n	6dec <usb_dc_ep_check_cap+0x44>
		LOG_ERR("invalid endpoint index/address");
    6de0:	480d      	ldr	r0, [pc, #52]	; (6e18 <usb_dc_ep_check_cap+0x70>)
    6de2:	6803      	ldr	r3, [r0, #0]
    6de4:	075a      	lsls	r2, r3, #29
    6de6:	d0f6      	beq.n	6dd6 <usb_dc_ep_check_cap+0x2e>
    6de8:	4b0d      	ldr	r3, [pc, #52]	; (6e20 <usb_dc_ep_check_cap+0x78>)
    6dea:	e7eb      	b.n	6dc4 <usb_dc_ep_check_cap+0x1c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6dec:	2b01      	cmp	r3, #1
    6dee:	d10f      	bne.n	6e10 <usb_dc_ep_check_cap+0x68>
    6df0:	0713      	lsls	r3, r2, #28
    6df2:	d40d      	bmi.n	6e10 <usb_dc_ep_check_cap+0x68>
		LOG_WRN("invalid endpoint type");
    6df4:	4808      	ldr	r0, [pc, #32]	; (6e18 <usb_dc_ep_check_cap+0x70>)
    6df6:	6803      	ldr	r3, [r0, #0]
    6df8:	f013 0f06 	tst.w	r3, #6
    6dfc:	d0eb      	beq.n	6dd6 <usb_dc_ep_check_cap+0x2e>
    6dfe:	4b09      	ldr	r3, [pc, #36]	; (6e24 <usb_dc_ep_check_cap+0x7c>)
    6e00:	9306      	str	r3, [sp, #24]
    6e02:	2302      	movs	r3, #2
    6e04:	9301      	str	r3, [sp, #4]
    6e06:	9305      	str	r3, [sp, #20]
    6e08:	aa05      	add	r2, sp, #20
    6e0a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    6e0e:	e7e0      	b.n	6dd2 <usb_dc_ep_check_cap+0x2a>
	return 0;
    6e10:	2000      	movs	r0, #0
}
    6e12:	b009      	add	sp, #36	; 0x24
    6e14:	f85d fb04 	ldr.w	pc, [sp], #4
    6e18:	2000028c 	.word	0x2000028c
    6e1c:	00011d81 	.word	0x00011d81
    6e20:	00011da0 	.word	0x00011da0
    6e24:	00011dbf 	.word	0x00011dbf

00006e28 <usb_dc_ep_configure>:
{
    6e28:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6e2a:	4b18      	ldr	r3, [pc, #96]	; (6e8c <usb_dc_ep_configure+0x64>)
	if (!dev_attached()) {
    6e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6e30:	b088      	sub	sp, #32
    6e32:	4601      	mov	r1, r0
	if (!dev_attached()) {
    6e34:	b333      	cbz	r3, 6e84 <usb_dc_ep_configure+0x5c>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6e36:	7804      	ldrb	r4, [r0, #0]
    6e38:	4620      	mov	r0, r4
    6e3a:	f7ff fb21 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    6e3e:	b918      	cbnz	r0, 6e48 <usb_dc_ep_configure+0x20>
			return -EINVAL;
    6e40:	f06f 0015 	mvn.w	r0, #21
}
    6e44:	b008      	add	sp, #32
    6e46:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6e48:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6e4a:	790b      	ldrb	r3, [r1, #4]
    6e4c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6e4e:	8849      	ldrh	r1, [r1, #2]
    6e50:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6e52:	0722      	lsls	r2, r4, #28
    6e54:	d411      	bmi.n	6e7a <usb_dc_ep_configure+0x52>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6e56:	1e4b      	subs	r3, r1, #1
    6e58:	420b      	tst	r3, r1
    6e5a:	d00e      	beq.n	6e7a <usb_dc_ep_configure+0x52>
			LOG_ERR("EP max packet size must be a power of 2");
    6e5c:	480c      	ldr	r0, [pc, #48]	; (6e90 <usb_dc_ep_configure+0x68>)
    6e5e:	6803      	ldr	r3, [r0, #0]
    6e60:	075b      	lsls	r3, r3, #29
    6e62:	d0ed      	beq.n	6e40 <usb_dc_ep_configure+0x18>
    6e64:	4b0b      	ldr	r3, [pc, #44]	; (6e94 <usb_dc_ep_configure+0x6c>)
    6e66:	9306      	str	r3, [sp, #24]
    6e68:	aa05      	add	r2, sp, #20
    6e6a:	2302      	movs	r3, #2
    6e6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e70:	9301      	str	r3, [sp, #4]
    6e72:	9305      	str	r3, [sp, #20]
    6e74:	f007 fa26 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
    6e78:	e7e2      	b.n	6e40 <usb_dc_ep_configure+0x18>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6e7a:	4620      	mov	r0, r4
    6e7c:	f007 fe51 	bl	eb22 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6e80:	2000      	movs	r0, #0
    6e82:	e7df      	b.n	6e44 <usb_dc_ep_configure+0x1c>
		return -ENODEV;
    6e84:	f06f 0012 	mvn.w	r0, #18
    6e88:	e7dc      	b.n	6e44 <usb_dc_ep_configure+0x1c>
    6e8a:	bf00      	nop
    6e8c:	20001d1c 	.word	0x20001d1c
    6e90:	2000028c 	.word	0x2000028c
    6e94:	00011dd5 	.word	0x00011dd5

00006e98 <usb_dc_ep_set_stall>:
{
    6e98:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6e9a:	4b1a      	ldr	r3, [pc, #104]	; (6f04 <usb_dc_ep_set_stall+0x6c>)
	if (!dev_attached() || !dev_ready()) {
    6e9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6ea0:	b088      	sub	sp, #32
    6ea2:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    6ea4:	b35a      	cbz	r2, 6efe <usb_dc_ep_set_stall+0x66>
    6ea6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6eaa:	b343      	cbz	r3, 6efe <usb_dc_ep_set_stall+0x66>
	ep_ctx = endpoint_ctx(ep);
    6eac:	f7ff fae8 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    6eb0:	4604      	mov	r4, r0
    6eb2:	b308      	cbz	r0, 6ef8 <usb_dc_ep_set_stall+0x60>
	switch (ep_ctx->cfg.type) {
    6eb4:	7a83      	ldrb	r3, [r0, #10]
    6eb6:	2b01      	cmp	r3, #1
    6eb8:	d010      	beq.n	6edc <usb_dc_ep_set_stall+0x44>
    6eba:	d908      	bls.n	6ece <usb_dc_ep_set_stall+0x36>
    6ebc:	3b02      	subs	r3, #2
    6ebe:	2b01      	cmp	r3, #1
    6ec0:	d908      	bls.n	6ed4 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6ec2:	6963      	ldr	r3, [r4, #20]
    6ec4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    6ec6:	2000      	movs	r0, #0
    6ec8:	60e0      	str	r0, [r4, #12]
}
    6eca:	b008      	add	sp, #32
    6ecc:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    6ece:	f002 fe4d 	bl	9b6c <nrfx_usbd_setup_stall>
		break;
    6ed2:	e7f6      	b.n	6ec2 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6ed4:	4608      	mov	r0, r1
    6ed6:	f002 fdbd 	bl	9a54 <nrfx_usbd_ep_stall>
		break;
    6eda:	e7f2      	b.n	6ec2 <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    6edc:	480a      	ldr	r0, [pc, #40]	; (6f08 <usb_dc_ep_set_stall+0x70>)
    6ede:	6803      	ldr	r3, [r0, #0]
    6ee0:	075b      	lsls	r3, r3, #29
    6ee2:	d009      	beq.n	6ef8 <usb_dc_ep_set_stall+0x60>
    6ee4:	4b09      	ldr	r3, [pc, #36]	; (6f0c <usb_dc_ep_set_stall+0x74>)
    6ee6:	9306      	str	r3, [sp, #24]
    6ee8:	aa05      	add	r2, sp, #20
    6eea:	2302      	movs	r3, #2
    6eec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ef0:	9301      	str	r3, [sp, #4]
    6ef2:	9305      	str	r3, [sp, #20]
    6ef4:	f007 f9e6 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    6ef8:	f06f 0015 	mvn.w	r0, #21
    6efc:	e7e5      	b.n	6eca <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    6efe:	f06f 0012 	mvn.w	r0, #18
    6f02:	e7e2      	b.n	6eca <usb_dc_ep_set_stall+0x32>
    6f04:	20001d1c 	.word	0x20001d1c
    6f08:	2000028c 	.word	0x2000028c
    6f0c:	00011dfd 	.word	0x00011dfd

00006f10 <usb_dc_ep_clear_stall>:
{
    6f10:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f12:	4b0e      	ldr	r3, [pc, #56]	; (6f4c <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    6f14:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6f18:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6f1a:	b182      	cbz	r2, 6f3e <usb_dc_ep_clear_stall+0x2e>
    6f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6f20:	b16b      	cbz	r3, 6f3e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    6f22:	f7ff faad 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    6f26:	b168      	cbz	r0, 6f44 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6f28:	f015 0408 	ands.w	r4, r5, #8
    6f2c:	d10a      	bne.n	6f44 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6f2e:	4628      	mov	r0, r5
    6f30:	f002 fdb2 	bl	9a98 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6f34:	4628      	mov	r0, r5
    6f36:	f003 f84f 	bl	9fd8 <nrfx_usbd_ep_stall_clear>
	return 0;
    6f3a:	4620      	mov	r0, r4
}
    6f3c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6f3e:	f06f 0012 	mvn.w	r0, #18
    6f42:	e7fb      	b.n	6f3c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    6f44:	f06f 0015 	mvn.w	r0, #21
    6f48:	e7f8      	b.n	6f3c <usb_dc_ep_clear_stall+0x2c>
    6f4a:	bf00      	nop
    6f4c:	20001d1c 	.word	0x20001d1c

00006f50 <usb_dc_ep_is_stalled>:
{
    6f50:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f52:	4b0c      	ldr	r3, [pc, #48]	; (6f84 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    6f54:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6f58:	4605      	mov	r5, r0
    6f5a:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    6f5c:	b162      	cbz	r2, 6f78 <usb_dc_ep_is_stalled+0x28>
    6f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6f62:	b14b      	cbz	r3, 6f78 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    6f64:	f7ff fa8c 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    6f68:	b148      	cbz	r0, 6f7e <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    6f6a:	b141      	cbz	r1, 6f7e <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6f6c:	4628      	mov	r0, r5
    6f6e:	f002 fd79 	bl	9a64 <nrfx_usbd_ep_stall_check>
    6f72:	7020      	strb	r0, [r4, #0]
	return 0;
    6f74:	2000      	movs	r0, #0
}
    6f76:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6f78:	f06f 0012 	mvn.w	r0, #18
    6f7c:	e7fb      	b.n	6f76 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    6f7e:	f06f 0015 	mvn.w	r0, #21
    6f82:	e7f8      	b.n	6f76 <usb_dc_ep_is_stalled+0x26>
    6f84:	20001d1c 	.word	0x20001d1c

00006f88 <usb_dc_ep_enable>:
{
    6f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    6f8a:	4f13      	ldr	r7, [pc, #76]	; (6fd8 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    6f8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    6f90:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6f92:	b1bb      	cbz	r3, 6fc4 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    6f94:	f7ff fa74 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    6f98:	4605      	mov	r5, r0
    6f9a:	b1b0      	cbz	r0, 6fca <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6f9c:	0723      	lsls	r3, r4, #28
    6f9e:	d405      	bmi.n	6fac <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6fa0:	4620      	mov	r0, r4
    6fa2:	f002 fd79 	bl	9a98 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6fa6:	4620      	mov	r0, r4
    6fa8:	f003 f816 	bl	9fd8 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    6fac:	7a2e      	ldrb	r6, [r5, #8]
    6fae:	b97e      	cbnz	r6, 6fd0 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    6fb0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    6fb4:	2301      	movs	r3, #1
    6fb6:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    6fb8:	b118      	cbz	r0, 6fc2 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6fba:	4620      	mov	r0, r4
    6fbc:	f002 ffba 	bl	9f34 <nrfx_usbd_ep_enable>
	return 0;
    6fc0:	4630      	mov	r0, r6
}
    6fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    6fc4:	f06f 0012 	mvn.w	r0, #18
    6fc8:	e7fb      	b.n	6fc2 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    6fca:	f06f 0015 	mvn.w	r0, #21
    6fce:	e7f8      	b.n	6fc2 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    6fd0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6fd4:	e7f5      	b.n	6fc2 <usb_dc_ep_enable+0x3a>
    6fd6:	bf00      	nop
    6fd8:	20001d1c 	.word	0x20001d1c

00006fdc <usb_dc_ep_disable>:
{
    6fdc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6fde:	4b11      	ldr	r3, [pc, #68]	; (7024 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    6fe0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6fe4:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    6fe6:	b19a      	cbz	r2, 7010 <usb_dc_ep_disable+0x34>
    6fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6fec:	b183      	cbz	r3, 7010 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    6fee:	f7ff fa47 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    6ff2:	4605      	mov	r5, r0
    6ff4:	b178      	cbz	r0, 7016 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    6ff6:	7a03      	ldrb	r3, [r0, #8]
    6ff8:	b183      	cbz	r3, 701c <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    6ffa:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    6ffc:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    6ffe:	f002 ff6d 	bl	9edc <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    7002:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    7004:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    7006:	f007 f94a 	bl	e29e <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    700a:	722c      	strb	r4, [r5, #8]
	return 0;
    700c:	4620      	mov	r0, r4
}
    700e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7010:	f06f 0012 	mvn.w	r0, #18
    7014:	e7fb      	b.n	700e <usb_dc_ep_disable+0x32>
		return -EINVAL;
    7016:	f06f 0015 	mvn.w	r0, #21
    701a:	e7f8      	b.n	700e <usb_dc_ep_disable+0x32>
		return -EALREADY;
    701c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7020:	e7f5      	b.n	700e <usb_dc_ep_disable+0x32>
    7022:	bf00      	nop
    7024:	20001d1c 	.word	0x20001d1c

00007028 <usb_dc_ep_write>:
{
    7028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    702c:	f8df 8114 	ldr.w	r8, [pc, #276]	; 7144 <usb_dc_ep_write+0x11c>
{
    7030:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    7032:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    7036:	b08b      	sub	sp, #44	; 0x2c
    7038:	4607      	mov	r7, r0
    703a:	4689      	mov	r9, r1
    703c:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    703e:	2b00      	cmp	r3, #0
    7040:	d07d      	beq.n	713e <usb_dc_ep_write+0x116>
    7042:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    7046:	2b00      	cmp	r3, #0
    7048:	d079      	beq.n	713e <usb_dc_ep_write+0x116>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    704a:	0605      	lsls	r5, r0, #24
    704c:	d514      	bpl.n	7078 <usb_dc_ep_write+0x50>
	ep_ctx = endpoint_ctx(ep);
    704e:	f7ff fa17 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    7052:	4605      	mov	r5, r0
    7054:	b180      	cbz	r0, 7078 <usb_dc_ep_write+0x50>
	if (!ep_ctx->cfg.en) {
    7056:	7a03      	ldrb	r3, [r0, #8]
    7058:	b98b      	cbnz	r3, 707e <usb_dc_ep_write+0x56>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    705a:	483b      	ldr	r0, [pc, #236]	; (7148 <usb_dc_ep_write+0x120>)
    705c:	6803      	ldr	r3, [r0, #0]
    705e:	0759      	lsls	r1, r3, #29
    7060:	d00a      	beq.n	7078 <usb_dc_ep_write+0x50>
    7062:	4b3a      	ldr	r3, [pc, #232]	; (714c <usb_dc_ep_write+0x124>)
    7064:	aa07      	add	r2, sp, #28
    7066:	e9cd 3708 	strd	r3, r7, [sp, #32]
    706a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    706e:	2303      	movs	r3, #3
    7070:	9301      	str	r3, [sp, #4]
    7072:	9307      	str	r3, [sp, #28]
    7074:	f007 f926 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    7078:	f06f 0415 	mvn.w	r4, #21
    707c:	e00f      	b.n	709e <usb_dc_ep_write+0x76>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    707e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7086:	f108 0038 	add.w	r0, r8, #56	; 0x38
    708a:	f007 f91e 	bl	e2ca <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    708e:	7fab      	ldrb	r3, [r5, #30]
    7090:	b14b      	cbz	r3, 70a6 <usb_dc_ep_write+0x7e>
		k_mutex_unlock(&ctx->drv_lock);
    7092:	f108 0038 	add.w	r0, r8, #56	; 0x38
    7096:	f007 f91a 	bl	e2ce <k_mutex_unlock.isra.0>
		return -EAGAIN;
    709a:	f06f 040a 	mvn.w	r4, #10
}
    709e:	4620      	mov	r0, r4
    70a0:	b00b      	add	sp, #44	; 0x2c
    70a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    70a6:	b916      	cbnz	r6, 70ae <usb_dc_ep_write+0x86>
    70a8:	7feb      	ldrb	r3, [r5, #31]
    70aa:	b103      	cbz	r3, 70ae <usb_dc_ep_write+0x86>
		ep_ctx->trans_zlp = false;
    70ac:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    70ae:	7aab      	ldrb	r3, [r5, #10]
    70b0:	b9bb      	cbnz	r3, 70e2 <usb_dc_ep_write+0xba>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    70b2:	b15e      	cbz	r6, 70cc <usb_dc_ep_write+0xa4>
    70b4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    70b8:	429e      	cmp	r6, r3
    70ba:	d207      	bcs.n	70cc <usb_dc_ep_write+0xa4>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    70bc:	686a      	ldr	r2, [r5, #4]
    70be:	fbb6 f3f2 	udiv	r3, r6, r2
    70c2:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    70c6:	b90b      	cbnz	r3, 70cc <usb_dc_ep_write+0xa4>
			ep_ctx->trans_zlp = true;
    70c8:	2301      	movs	r3, #1
    70ca:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    70cc:	f002 fd56 	bl	9b7c <nrfx_usbd_last_setup_dir_get>
    70d0:	4287      	cmp	r7, r0
    70d2:	d006      	beq.n	70e2 <usb_dc_ep_write+0xba>
		nrfx_usbd_setup_clear();
    70d4:	f002 fd42 	bl	9b5c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    70d8:	481d      	ldr	r0, [pc, #116]	; (7150 <usb_dc_ep_write+0x128>)
    70da:	f007 f8f8 	bl	e2ce <k_mutex_unlock.isra.0>
		return 0;
    70de:	2400      	movs	r4, #0
    70e0:	e7dd      	b.n	709e <usb_dc_ep_write+0x76>
	ep_ctx->write_in_progress = true;
    70e2:	2301      	movs	r3, #1
    70e4:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    70e6:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    70ea:	a901      	add	r1, sp, #4
    70ec:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    70ee:	e9cd 9601 	strd	r9, r6, [sp, #4]
    70f2:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    70f6:	f002 fb0b 	bl	9710 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    70fa:	4a16      	ldr	r2, [pc, #88]	; (7154 <usb_dc_ep_write+0x12c>)
    70fc:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    70fe:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
    7100:	d016      	beq.n	7130 <usb_dc_ep_write+0x108>
		ep_ctx->write_in_progress = false;
    7102:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    7106:	b10c      	cbz	r4, 710c <usb_dc_ep_write+0xe4>
			*ret_bytes = 0;
    7108:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    710c:	480e      	ldr	r0, [pc, #56]	; (7148 <usb_dc_ep_write+0x120>)
    710e:	6802      	ldr	r2, [r0, #0]
    7110:	0752      	lsls	r2, r2, #29
    7112:	d00a      	beq.n	712a <usb_dc_ep_write+0x102>
    7114:	4a10      	ldr	r2, [pc, #64]	; (7158 <usb_dc_ep_write+0x130>)
    7116:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    711a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    711e:	2303      	movs	r3, #3
    7120:	aa07      	add	r2, sp, #28
    7122:	9300      	str	r3, [sp, #0]
    7124:	9307      	str	r3, [sp, #28]
    7126:	f007 f8cd 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		result = -EIO;
    712a:	f06f 0404 	mvn.w	r4, #4
    712e:	e002      	b.n	7136 <usb_dc_ep_write+0x10e>
		if (ret_bytes) {
    7130:	b10c      	cbz	r4, 7136 <usb_dc_ep_write+0x10e>
			*ret_bytes = data_len;
    7132:	6026      	str	r6, [r4, #0]
	int result = 0;
    7134:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    7136:	4806      	ldr	r0, [pc, #24]	; (7150 <usb_dc_ep_write+0x128>)
    7138:	f007 f8c9 	bl	e2ce <k_mutex_unlock.isra.0>
	return result;
    713c:	e7af      	b.n	709e <usb_dc_ep_write+0x76>
		return -ENODEV;
    713e:	f06f 0412 	mvn.w	r4, #18
    7142:	e7ac      	b.n	709e <usb_dc_ep_write+0x76>
    7144:	20001d1c 	.word	0x20001d1c
    7148:	2000028c 	.word	0x2000028c
    714c:	00011e1f 	.word	0x00011e1f
    7150:	20001d54 	.word	0x20001d54
    7154:	0bad0000 	.word	0x0bad0000
    7158:	00011e3e 	.word	0x00011e3e

0000715c <usb_dc_ep_read_wait>:
{
    715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7160:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    7162:	4b2b      	ldr	r3, [pc, #172]	; (7210 <usb_dc_ep_read_wait+0xb4>)
{
    7164:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    7166:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    716a:	b088      	sub	sp, #32
    716c:	4680      	mov	r8, r0
    716e:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    7170:	2a00      	cmp	r2, #0
    7172:	d049      	beq.n	7208 <usb_dc_ep_read_wait+0xac>
    7174:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7178:	2b00      	cmp	r3, #0
    717a:	d045      	beq.n	7208 <usb_dc_ep_read_wait+0xac>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    717c:	f010 0f80 	tst.w	r0, #128	; 0x80
    7180:	d117      	bne.n	71b2 <usb_dc_ep_read_wait+0x56>
	if (!data && max_data_len) {
    7182:	b901      	cbnz	r1, 7186 <usb_dc_ep_read_wait+0x2a>
    7184:	b9af      	cbnz	r7, 71b2 <usb_dc_ep_read_wait+0x56>
	ep_ctx = endpoint_ctx(ep);
    7186:	4640      	mov	r0, r8
    7188:	f7ff f97a 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    718c:	4604      	mov	r4, r0
    718e:	b180      	cbz	r0, 71b2 <usb_dc_ep_read_wait+0x56>
	if (!ep_ctx->cfg.en) {
    7190:	7a03      	ldrb	r3, [r0, #8]
    7192:	b98b      	cbnz	r3, 71b8 <usb_dc_ep_read_wait+0x5c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7194:	481f      	ldr	r0, [pc, #124]	; (7214 <usb_dc_ep_read_wait+0xb8>)
    7196:	6803      	ldr	r3, [r0, #0]
    7198:	075b      	lsls	r3, r3, #29
    719a:	d00a      	beq.n	71b2 <usb_dc_ep_read_wait+0x56>
    719c:	4b1e      	ldr	r3, [pc, #120]	; (7218 <usb_dc_ep_read_wait+0xbc>)
    719e:	aa05      	add	r2, sp, #20
    71a0:	e9cd 3806 	strd	r3, r8, [sp, #24]
    71a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    71a8:	2303      	movs	r3, #3
    71aa:	9301      	str	r3, [sp, #4]
    71ac:	9305      	str	r3, [sp, #20]
    71ae:	f007 f889 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    71b2:	f06f 0015 	mvn.w	r0, #21
    71b6:	e013      	b.n	71e0 <usb_dc_ep_read_wait+0x84>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    71b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71bc:	4817      	ldr	r0, [pc, #92]	; (721c <usb_dc_ep_read_wait+0xc0>)
    71be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71c2:	f007 f882 	bl	e2ca <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    71c6:	68e3      	ldr	r3, [r4, #12]
    71c8:	42bb      	cmp	r3, r7
    71ca:	4698      	mov	r8, r3
    71cc:	bf28      	it	cs
    71ce:	46b8      	movcs	r8, r7
	if (!data && !max_data_len) {
    71d0:	b94e      	cbnz	r6, 71e6 <usb_dc_ep_read_wait+0x8a>
    71d2:	b947      	cbnz	r7, 71e6 <usb_dc_ep_read_wait+0x8a>
		if (read_bytes) {
    71d4:	b105      	cbz	r5, 71d8 <usb_dc_ep_read_wait+0x7c>
			*read_bytes = ep_ctx->buf.len;
    71d6:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    71d8:	4810      	ldr	r0, [pc, #64]	; (721c <usb_dc_ep_read_wait+0xc0>)
    71da:	f007 f878 	bl	e2ce <k_mutex_unlock.isra.0>
		return 0;
    71de:	2000      	movs	r0, #0
}
    71e0:	b008      	add	sp, #32
    71e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    71e6:	69a1      	ldr	r1, [r4, #24]
    71e8:	4642      	mov	r2, r8
    71ea:	4630      	mov	r0, r6
    71ec:	f007 f800 	bl	e1f0 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    71f0:	69a3      	ldr	r3, [r4, #24]
    71f2:	4443      	add	r3, r8
    71f4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    71f6:	68e3      	ldr	r3, [r4, #12]
    71f8:	eba3 0308 	sub.w	r3, r3, r8
    71fc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    71fe:	2d00      	cmp	r5, #0
    7200:	d0ea      	beq.n	71d8 <usb_dc_ep_read_wait+0x7c>
		*read_bytes = bytes_to_copy;
    7202:	f8c5 8000 	str.w	r8, [r5]
    7206:	e7e7      	b.n	71d8 <usb_dc_ep_read_wait+0x7c>
		return -ENODEV;
    7208:	f06f 0012 	mvn.w	r0, #18
    720c:	e7e8      	b.n	71e0 <usb_dc_ep_read_wait+0x84>
    720e:	bf00      	nop
    7210:	20001d1c 	.word	0x20001d1c
    7214:	2000028c 	.word	0x2000028c
    7218:	00011e1f 	.word	0x00011e1f
    721c:	20001d54 	.word	0x20001d54

00007220 <usb_dc_ep_read_continue>:
{
    7220:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    7222:	4d27      	ldr	r5, [pc, #156]	; (72c0 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    7224:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    7228:	b088      	sub	sp, #32
    722a:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    722c:	2b00      	cmp	r3, #0
    722e:	d044      	beq.n	72ba <usb_dc_ep_read_continue+0x9a>
    7230:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    7234:	2b00      	cmp	r3, #0
    7236:	d040      	beq.n	72ba <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    7238:	0602      	lsls	r2, r0, #24
    723a:	d414      	bmi.n	7266 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    723c:	f7ff f920 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    7240:	4604      	mov	r4, r0
    7242:	b180      	cbz	r0, 7266 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    7244:	7a03      	ldrb	r3, [r0, #8]
    7246:	b98b      	cbnz	r3, 726c <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7248:	481e      	ldr	r0, [pc, #120]	; (72c4 <usb_dc_ep_read_continue+0xa4>)
    724a:	6803      	ldr	r3, [r0, #0]
    724c:	075b      	lsls	r3, r3, #29
    724e:	d00a      	beq.n	7266 <usb_dc_ep_read_continue+0x46>
    7250:	4b1d      	ldr	r3, [pc, #116]	; (72c8 <usb_dc_ep_read_continue+0xa8>)
    7252:	aa05      	add	r2, sp, #20
    7254:	e9cd 3106 	strd	r3, r1, [sp, #24]
    7258:	2303      	movs	r3, #3
    725a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    725e:	9301      	str	r3, [sp, #4]
    7260:	9305      	str	r3, [sp, #20]
    7262:	f007 f82f 	bl	e2c4 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    7266:	f06f 0015 	mvn.w	r0, #21
    726a:	e018      	b.n	729e <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    726c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7274:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7278:	f007 f827 	bl	e2ca <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    727c:	68e3      	ldr	r3, [r4, #12]
    727e:	b9bb      	cbnz	r3, 72b0 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    7280:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    7282:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    7284:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    7286:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    7288:	7f63      	ldrb	r3, [r4, #29]
    728a:	b18b      	cbz	r3, 72b0 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    728c:	f7ff f968 	bl	6560 <usbd_evt_alloc>
			if (!ev) {
    7290:	b938      	cbnz	r0, 72a2 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    7292:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7296:	f007 f81a 	bl	e2ce <k_mutex_unlock.isra.0>
				return -ENOMEM;
    729a:	f06f 000b 	mvn.w	r0, #11
}
    729e:	b008      	add	sp, #32
    72a0:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    72a2:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    72a4:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    72a6:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    72a8:	f7ff f912 	bl	64d0 <usbd_evt_put>
			usbd_work_schedule();
    72ac:	f7ff f916 	bl	64dc <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    72b0:	4806      	ldr	r0, [pc, #24]	; (72cc <usb_dc_ep_read_continue+0xac>)
    72b2:	f007 f80c 	bl	e2ce <k_mutex_unlock.isra.0>
	return 0;
    72b6:	2000      	movs	r0, #0
    72b8:	e7f1      	b.n	729e <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
    72ba:	f06f 0012 	mvn.w	r0, #18
    72be:	e7ee      	b.n	729e <usb_dc_ep_read_continue+0x7e>
    72c0:	20001d1c 	.word	0x20001d1c
    72c4:	2000028c 	.word	0x2000028c
    72c8:	00011e1f 	.word	0x00011e1f
    72cc:	20001d54 	.word	0x20001d54

000072d0 <usb_dc_ep_set_callback>:
{
    72d0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    72d2:	4b08      	ldr	r3, [pc, #32]	; (72f4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    72d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    72d8:	b12b      	cbz	r3, 72e6 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    72da:	f7ff f8d1 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    72de:	b128      	cbz	r0, 72ec <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    72e0:	6001      	str	r1, [r0, #0]
	return 0;
    72e2:	2000      	movs	r0, #0
}
    72e4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    72e6:	f06f 0012 	mvn.w	r0, #18
    72ea:	e7fb      	b.n	72e4 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    72ec:	f06f 0015 	mvn.w	r0, #21
    72f0:	e7f8      	b.n	72e4 <usb_dc_ep_set_callback+0x14>
    72f2:	bf00      	nop
    72f4:	20001d1c 	.word	0x20001d1c

000072f8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    72f8:	4b01      	ldr	r3, [pc, #4]	; (7300 <usb_dc_set_status_callback+0x8>)
    72fa:	6018      	str	r0, [r3, #0]
}
    72fc:	4770      	bx	lr
    72fe:	bf00      	nop
    7300:	20001d1c 	.word	0x20001d1c

00007304 <usb_dc_ep_mps>:
{
    7304:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    7306:	4b07      	ldr	r3, [pc, #28]	; (7324 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    7308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    730c:	b123      	cbz	r3, 7318 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    730e:	f7ff f8b7 	bl	6480 <endpoint_ctx>
	if (!ep_ctx) {
    7312:	b120      	cbz	r0, 731e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    7314:	6840      	ldr	r0, [r0, #4]
}
    7316:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7318:	f06f 0012 	mvn.w	r0, #18
    731c:	e7fb      	b.n	7316 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    731e:	f06f 0015 	mvn.w	r0, #21
    7322:	e7f8      	b.n	7316 <usb_dc_ep_mps+0x12>
    7324:	20001d1c 	.word	0x20001d1c

00007328 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    7328:	4b08      	ldr	r3, [pc, #32]	; (734c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    732a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    732c:	1ac3      	subs	r3, r0, r3
{
    732e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7330:	4907      	ldr	r1, [pc, #28]	; (7350 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    7332:	109b      	asrs	r3, r3, #2
{
    7334:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7336:	4359      	muls	r1, r3
    7338:	4806      	ldr	r0, [pc, #24]	; (7354 <onoff_stop+0x2c>)
    733a:	2240      	movs	r2, #64	; 0x40
    733c:	f006 fff4 	bl	e328 <stop>
	notify(mgr, res);
    7340:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7342:	4601      	mov	r1, r0
	notify(mgr, res);
    7344:	4620      	mov	r0, r4
}
    7346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    734a:	4718      	bx	r3
    734c:	20001fbc 	.word	0x20001fbc
    7350:	b6db6db7 	.word	0xb6db6db7
    7354:	0000f608 	.word	0x0000f608

00007358 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7358:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    735a:	4c0c      	ldr	r4, [pc, #48]	; (738c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    735c:	4a0c      	ldr	r2, [pc, #48]	; (7390 <onoff_start+0x38>)
    735e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    7360:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7362:	9300      	str	r3, [sp, #0]
{
    7364:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7366:	460b      	mov	r3, r1
    7368:	490a      	ldr	r1, [pc, #40]	; (7394 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    736a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    736c:	4361      	muls	r1, r4
{
    736e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7370:	4809      	ldr	r0, [pc, #36]	; (7398 <onoff_start+0x40>)
    7372:	f007 f806 	bl	e382 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    7376:	1e01      	subs	r1, r0, #0
    7378:	da05      	bge.n	7386 <onoff_start+0x2e>
		notify(mgr, err);
    737a:	4630      	mov	r0, r6
    737c:	462b      	mov	r3, r5
	}
}
    737e:	b002      	add	sp, #8
    7380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    7384:	4718      	bx	r3
}
    7386:	b002      	add	sp, #8
    7388:	bd70      	pop	{r4, r5, r6, pc}
    738a:	bf00      	nop
    738c:	20001fbc 	.word	0x20001fbc
    7390:	0000e3f1 	.word	0x0000e3f1
    7394:	b6db6db7 	.word	0xb6db6db7
    7398:	0000f608 	.word	0x0000f608

0000739c <hfclk_start>:
{
    739c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    739e:	f007 fec4 	bl	f12a <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    73a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73a6:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    73aa:	4c07      	ldr	r4, [pc, #28]	; (73c8 <hfclk_start+0x2c>)
    73ac:	fb02 3101 	mla	r1, r2, r1, r3
    73b0:	0bc0      	lsrs	r0, r0, #15
    73b2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    73b6:	0bc9      	lsrs	r1, r1, #15
    73b8:	e9c4 0100 	strd	r0, r1, [r4]
}
    73bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    73c0:	2001      	movs	r0, #1
    73c2:	f007 ba8b 	b.w	e8dc <nrfx_clock_start>
    73c6:	bf00      	nop
    73c8:	20000e78 	.word	0x20000e78

000073cc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    73cc:	2200      	movs	r2, #0
{
    73ce:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    73d0:	2101      	movs	r1, #1
{
    73d2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    73d4:	4610      	mov	r0, r2
    73d6:	f7fe fadb 	bl	5990 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    73da:	2000      	movs	r0, #0
    73dc:	f7fe faa6 	bl	592c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    73e0:	480f      	ldr	r0, [pc, #60]	; (7420 <clk_init+0x54>)
    73e2:	f001 f9f7 	bl	87d4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    73e6:	4b0f      	ldr	r3, [pc, #60]	; (7424 <clk_init+0x58>)
    73e8:	4298      	cmp	r0, r3
    73ea:	d115      	bne.n	7418 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    73ec:	f001 fa02 	bl	87f4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    73f0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    73f2:	490d      	ldr	r1, [pc, #52]	; (7428 <clk_init+0x5c>)
    73f4:	4630      	mov	r0, r6
    73f6:	f004 fbf0 	bl	bbda <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    73fa:	2800      	cmp	r0, #0
    73fc:	db0b      	blt.n	7416 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    73fe:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7400:	4909      	ldr	r1, [pc, #36]	; (7428 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7402:	2501      	movs	r5, #1
    7404:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7406:	f104 001c 	add.w	r0, r4, #28
    740a:	f004 fbe6 	bl	bbda <onoff_manager_init>
		if (err < 0) {
    740e:	2800      	cmp	r0, #0
    7410:	db01      	blt.n	7416 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7412:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    7414:	2000      	movs	r0, #0
}
    7416:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    7418:	f06f 0004 	mvn.w	r0, #4
    741c:	e7fb      	b.n	7416 <clk_init+0x4a>
    741e:	bf00      	nop
    7420:	00007461 	.word	0x00007461
    7424:	0bad0000 	.word	0x0bad0000
    7428:	00010070 	.word	0x00010070

0000742c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    742c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    742e:	230c      	movs	r3, #12
    7430:	4809      	ldr	r0, [pc, #36]	; (7458 <clkstarted_handle.constprop.0+0x2c>)
    7432:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    7434:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    7436:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    7438:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    743c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    743e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    7440:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    7442:	4418      	add	r0, r3
    7444:	f006 ff5d 	bl	e302 <set_on_state>
	if (callback) {
    7448:	b12d      	cbz	r5, 7456 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    744a:	4632      	mov	r2, r6
    744c:	462b      	mov	r3, r5
    744e:	4803      	ldr	r0, [pc, #12]	; (745c <clkstarted_handle.constprop.0+0x30>)
}
    7450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    7454:	4718      	bx	r3
}
    7456:	bd70      	pop	{r4, r5, r6, pc}
    7458:	20001fbc 	.word	0x20001fbc
    745c:	0000f608 	.word	0x0000f608

00007460 <clock_event_handler>:
	switch (event) {
    7460:	b110      	cbz	r0, 7468 <clock_event_handler+0x8>
    7462:	2801      	cmp	r0, #1
    7464:	d004      	beq.n	7470 <clock_event_handler+0x10>
    7466:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    7468:	4b03      	ldr	r3, [pc, #12]	; (7478 <clock_event_handler+0x18>)
    746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    746c:	075b      	lsls	r3, r3, #29
    746e:	d101      	bne.n	7474 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7470:	f7ff bfdc 	b.w	742c <clkstarted_handle.constprop.0>
}
    7474:	4770      	bx	lr
    7476:	bf00      	nop
    7478:	20001fbc 	.word	0x20001fbc

0000747c <generic_hfclk_start>:
{
    747c:	b508      	push	{r3, lr}
	__asm__ volatile(
    747e:	f04f 0320 	mov.w	r3, #32
    7482:	f3ef 8111 	mrs	r1, BASEPRI
    7486:	f383 8812 	msr	BASEPRI_MAX, r3
    748a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    748e:	4a11      	ldr	r2, [pc, #68]	; (74d4 <generic_hfclk_start+0x58>)
    7490:	6813      	ldr	r3, [r2, #0]
    7492:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    7496:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    749a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    749c:	d00c      	beq.n	74b8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    749e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    74a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74a6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    74aa:	f013 0301 	ands.w	r3, r3, #1
    74ae:	d003      	beq.n	74b8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    74b0:	4809      	ldr	r0, [pc, #36]	; (74d8 <generic_hfclk_start+0x5c>)
    74b2:	f006 ff26 	bl	e302 <set_on_state>
			already_started = true;
    74b6:	2301      	movs	r3, #1
	__asm__ volatile(
    74b8:	f381 8811 	msr	BASEPRI, r1
    74bc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    74c0:	b123      	cbz	r3, 74cc <generic_hfclk_start+0x50>
}
    74c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    74c6:	2000      	movs	r0, #0
    74c8:	f7ff bfb0 	b.w	742c <clkstarted_handle.constprop.0>
}
    74cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    74d0:	f7ff bf64 	b.w	739c <hfclk_start>
    74d4:	2000200c 	.word	0x2000200c
    74d8:	20001ffc 	.word	0x20001ffc

000074dc <api_blocking_start>:
{
    74dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    74de:	2200      	movs	r2, #0
    74e0:	2301      	movs	r3, #1
    74e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    74e6:	ab04      	add	r3, sp, #16
    74e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    74ec:	4a09      	ldr	r2, [pc, #36]	; (7514 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    74ee:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    74f2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    74f4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    74f8:	f006 ff73 	bl	e3e2 <api_start>
	if (err < 0) {
    74fc:	2800      	cmp	r0, #0
    74fe:	db05      	blt.n	750c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    7500:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7504:	2300      	movs	r3, #0
    7506:	4668      	mov	r0, sp
    7508:	f003 fafa 	bl	ab00 <z_impl_k_sem_take>
}
    750c:	b007      	add	sp, #28
    750e:	f85d fb04 	ldr.w	pc, [sp], #4
    7512:	bf00      	nop
    7514:	0000e40f 	.word	0x0000e40f

00007518 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    7518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    751c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7520:	4605      	mov	r5, r0
    7522:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    7526:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    752a:	f04f 0320 	mov.w	r3, #32
    752e:	f3ef 8711 	mrs	r7, BASEPRI
    7532:	f383 8812 	msr	BASEPRI_MAX, r3
    7536:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    753a:	f007 fdf6 	bl	f12a <z_impl_k_uptime_ticks>
    753e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7542:	fba0 4003 	umull	r4, r0, r0, r3
    7546:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    754a:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    754e:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    7552:	4b25      	ldr	r3, [pc, #148]	; (75e8 <cmd_status+0xd0>)
    7554:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    7558:	4b24      	ldr	r3, [pc, #144]	; (75ec <cmd_status+0xd4>)
    755a:	0be4      	lsrs	r4, r4, #15
    755c:	f8d3 a000 	ldr.w	sl, [r3]
    7560:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
    7564:	f387 8811 	msr	BASEPRI, r7
    7568:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    756c:	4a20      	ldr	r2, [pc, #128]	; (75f0 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
    756e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 75f4 <cmd_status+0xdc>
    7572:	4f21      	ldr	r7, [pc, #132]	; (75f8 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    7574:	4628      	mov	r0, r5
    7576:	2108      	movs	r1, #8
    7578:	f005 fc50 	bl	ce1c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    757c:	f019 0f01 	tst.w	r9, #1
    7580:	f8df 9078 	ldr.w	r9, [pc, #120]	; 75fc <cmd_status+0xe4>
    7584:	4a1e      	ldr	r2, [pc, #120]	; (7600 <cmd_status+0xe8>)
    7586:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    758a:	9300      	str	r3, [sp, #0]
    758c:	4628      	mov	r0, r5
    758e:	bf14      	ite	ne
    7590:	4643      	movne	r3, r8
    7592:	463b      	moveq	r3, r7
    7594:	2108      	movs	r1, #8
    7596:	f005 fc41 	bl	ce1c <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    759a:	eba4 030b 	sub.w	r3, r4, fp
    759e:	9300      	str	r3, [sp, #0]
    75a0:	4628      	mov	r0, r5
    75a2:	465b      	mov	r3, fp
    75a4:	4a17      	ldr	r2, [pc, #92]	; (7604 <cmd_status+0xec>)
    75a6:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    75a8:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    75ac:	f005 fc36 	bl	ce1c <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    75b0:	4653      	mov	r3, sl
    75b2:	4628      	mov	r0, r5
    75b4:	4a14      	ldr	r2, [pc, #80]	; (7608 <cmd_status+0xf0>)
    75b6:	9400      	str	r4, [sp, #0]
    75b8:	2108      	movs	r1, #8
    75ba:	f005 fc2f 	bl	ce1c <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    75be:	4628      	mov	r0, r5
    75c0:	4a12      	ldr	r2, [pc, #72]	; (760c <cmd_status+0xf4>)
    75c2:	2108      	movs	r1, #8
    75c4:	f005 fc2a 	bl	ce1c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    75c8:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    75cc:	9300      	str	r3, [sp, #0]
    75ce:	4628      	mov	r0, r5
    75d0:	4a0b      	ldr	r2, [pc, #44]	; (7600 <cmd_status+0xe8>)
    75d2:	2e00      	cmp	r6, #0
    75d4:	bf14      	ite	ne
    75d6:	4643      	movne	r3, r8
    75d8:	463b      	moveq	r3, r7
    75da:	2108      	movs	r1, #8
    75dc:	f005 fc1e 	bl	ce1c <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    75e0:	2000      	movs	r0, #0
    75e2:	b003      	add	sp, #12
    75e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75e8:	20000e78 	.word	0x20000e78
    75ec:	20000e80 	.word	0x20000e80
    75f0:	00011e69 	.word	0x00011e69
    75f4:	0001082b 	.word	0x0001082b
    75f8:	00011e64 	.word	0x00011e64
    75fc:	20001fbc 	.word	0x20001fbc
    7600:	00011e74 	.word	0x00011e74
    7604:	00011e8e 	.word	0x00011e8e
    7608:	00011eb0 	.word	0x00011eb0
    760c:	00011ed1 	.word	0x00011ed1

00007610 <hfclk_stop>:
{
    7610:	b510      	push	{r4, lr}
    7612:	f007 fd8a 	bl	f12a <z_impl_k_uptime_ticks>
    7616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    761a:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    761e:	4c07      	ldr	r4, [pc, #28]	; (763c <hfclk_stop+0x2c>)
    7620:	fb02 3101 	mla	r1, r2, r1, r3
    7624:	0bc0      	lsrs	r0, r0, #15
    7626:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    762a:	0bc9      	lsrs	r1, r1, #15
    762c:	e9c4 0100 	strd	r0, r1, [r4]
}
    7630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7634:	2001      	movs	r0, #1
    7636:	f001 b8eb 	b.w	8810 <nrfx_clock_stop>
    763a:	bf00      	nop
    763c:	20000e80 	.word	0x20000e80

00007640 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7640:	4b08      	ldr	r3, [pc, #32]	; (7664 <generic_hfclk_stop+0x24>)
    7642:	f3bf 8f5b 	dmb	ish
    7646:	e853 2f00 	ldrex	r2, [r3]
    764a:	f022 0102 	bic.w	r1, r2, #2
    764e:	e843 1000 	strex	r0, r1, [r3]
    7652:	2800      	cmp	r0, #0
    7654:	d1f7      	bne.n	7646 <generic_hfclk_stop+0x6>
    7656:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    765a:	07d3      	lsls	r3, r2, #31
    765c:	d401      	bmi.n	7662 <generic_hfclk_stop+0x22>
	hfclk_stop();
    765e:	f7ff bfd7 	b.w	7610 <hfclk_stop>
}
    7662:	4770      	bx	lr
    7664:	2000200c 	.word	0x2000200c

00007668 <z_nrf_clock_control_get_onoff>:
}
    7668:	4a02      	ldr	r2, [pc, #8]	; (7674 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    766a:	b2c3      	uxtb	r3, r0
}
    766c:	201c      	movs	r0, #28
    766e:	fb03 2000 	mla	r0, r3, r0, r2
    7672:	4770      	bx	lr
    7674:	20001fbc 	.word	0x20001fbc

00007678 <z_nrf_clock_control_lf_on>:
{
    7678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    767c:	4939      	ldr	r1, [pc, #228]	; (7764 <z_nrf_clock_control_lf_on+0xec>)
    767e:	f3bf 8f5b 	dmb	ish
    7682:	4607      	mov	r7, r0
    7684:	2201      	movs	r2, #1
    7686:	e851 3f00 	ldrex	r3, [r1]
    768a:	e841 2000 	strex	r0, r2, [r1]
    768e:	2800      	cmp	r0, #0
    7690:	d1f9      	bne.n	7686 <z_nrf_clock_control_lf_on+0xe>
    7692:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7696:	b933      	cbnz	r3, 76a6 <z_nrf_clock_control_lf_on+0x2e>
    7698:	4933      	ldr	r1, [pc, #204]	; (7768 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    769a:	4834      	ldr	r0, [pc, #208]	; (776c <z_nrf_clock_control_lf_on+0xf4>)
    769c:	604b      	str	r3, [r1, #4]
    769e:	60cb      	str	r3, [r1, #12]
    76a0:	608a      	str	r2, [r1, #8]
    76a2:	f004 faad 	bl	bc00 <onoff_request>
	switch (start_mode) {
    76a6:	1e7b      	subs	r3, r7, #1
    76a8:	2b01      	cmp	r3, #1
    76aa:	d82f      	bhi.n	770c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    76ac:	2f01      	cmp	r7, #1
    76ae:	d107      	bne.n	76c0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    76b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76b4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    76b8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    76bc:	2b01      	cmp	r3, #1
    76be:	d025      	beq.n	770c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    76c0:	f007 fac7 	bl	ec52 <k_is_in_isr>
    76c4:	4604      	mov	r4, r0
    76c6:	b918      	cbnz	r0, 76d0 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    76c8:	4b29      	ldr	r3, [pc, #164]	; (7770 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    76ca:	781b      	ldrb	r3, [r3, #0]
    76cc:	2b00      	cmp	r3, #0
    76ce:	d141      	bne.n	7754 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    76d0:	f04f 0320 	mov.w	r3, #32
    76d4:	f3ef 8611 	mrs	r6, BASEPRI
    76d8:	f383 8812 	msr	BASEPRI_MAX, r3
    76dc:	f3bf 8f6f 	isb	sy
    76e0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76e2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7774 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    76e6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    76ea:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    76ee:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    76f2:	03d2      	lsls	r2, r2, #15
    76f4:	d50c      	bpl.n	7710 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    76f6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    76fa:	2b01      	cmp	r3, #1
    76fc:	d001      	beq.n	7702 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    76fe:	2f01      	cmp	r7, #1
    7700:	d106      	bne.n	7710 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    7702:	b30c      	cbz	r4, 7748 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    7704:	f386 8811 	msr	BASEPRI, r6
    7708:	f3bf 8f6f 	isb	sy
}
    770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    7710:	b1ac      	cbz	r4, 773e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7712:	4630      	mov	r0, r6
    7714:	f7fe f892 	bl	583c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7718:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    771c:	2b00      	cmp	r3, #0
    771e:	d1e4      	bne.n	76ea <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7720:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    7724:	2a00      	cmp	r2, #0
    7726:	d0e0      	beq.n	76ea <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7728:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    772c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    7730:	2301      	movs	r3, #1
    7732:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    7736:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    773a:	60ab      	str	r3, [r5, #8]
}
    773c:	e7d5      	b.n	76ea <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    773e:	2100      	movs	r1, #0
    7740:	2021      	movs	r0, #33	; 0x21
    7742:	f003 fdf9 	bl	b338 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7746:	e7e7      	b.n	7718 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    7748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    774c:	2202      	movs	r2, #2
    774e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7752:	e7db      	b.n	770c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    7754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7758:	2202      	movs	r2, #2
    775a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    775e:	4606      	mov	r6, r0
}
    7760:	e7bf      	b.n	76e2 <z_nrf_clock_control_lf_on+0x6a>
    7762:	bf00      	nop
    7764:	20002010 	.word	0x20002010
    7768:	20001fac 	.word	0x20001fac
    776c:	20001fd8 	.word	0x20001fd8
    7770:	20002356 	.word	0x20002356
    7774:	e000e100 	.word	0xe000e100

00007778 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    7778:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    777a:	4b08      	ldr	r3, [pc, #32]	; (779c <uart_console_init+0x24>)
    777c:	4808      	ldr	r0, [pc, #32]	; (77a0 <uart_console_init+0x28>)
    777e:	6018      	str	r0, [r3, #0]
    7780:	f007 fa03 	bl	eb8a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    7784:	b138      	cbz	r0, 7796 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    7786:	4807      	ldr	r0, [pc, #28]	; (77a4 <uart_console_init+0x2c>)
    7788:	f7fe fe1e 	bl	63c8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    778c:	4805      	ldr	r0, [pc, #20]	; (77a4 <uart_console_init+0x2c>)
    778e:	f7f9 f8b7 	bl	900 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    7792:	2000      	movs	r0, #0
}
    7794:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7796:	f06f 0012 	mvn.w	r0, #18
    779a:	e7fb      	b.n	7794 <uart_console_init+0x1c>
    779c:	20002014 	.word	0x20002014
    77a0:	0000f680 	.word	0x0000f680
    77a4:	000077a9 	.word	0x000077a9

000077a8 <console_out>:
	if ('\n' == c) {
    77a8:	280a      	cmp	r0, #10
{
    77aa:	b538      	push	{r3, r4, r5, lr}
    77ac:	4d07      	ldr	r5, [pc, #28]	; (77cc <console_out+0x24>)
    77ae:	4604      	mov	r4, r0
	if ('\n' == c) {
    77b0:	d104      	bne.n	77bc <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    77b2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    77b4:	6883      	ldr	r3, [r0, #8]
    77b6:	210d      	movs	r1, #13
    77b8:	685b      	ldr	r3, [r3, #4]
    77ba:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    77bc:	6828      	ldr	r0, [r5, #0]
    77be:	6883      	ldr	r3, [r0, #8]
    77c0:	b2e1      	uxtb	r1, r4
    77c2:	685b      	ldr	r3, [r3, #4]
    77c4:	4798      	blx	r3
}
    77c6:	4620      	mov	r0, r4
    77c8:	bd38      	pop	{r3, r4, r5, pc}
    77ca:	bf00      	nop
    77cc:	20002014 	.word	0x20002014

000077d0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    77d0:	b530      	push	{r4, r5, lr}
	return port->config;
    77d2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    77d4:	7b04      	ldrb	r4, [r0, #12]
    77d6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    77da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    77de:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    77e2:	b085      	sub	sp, #20
    77e4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    77e8:	d104      	bne.n	77f4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    77ea:	4628      	mov	r0, r5
    77ec:	f001 fabe 	bl	8d6c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    77f0:	2000      	movs	r0, #0
    77f2:	e032      	b.n	785a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    77f4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    77f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    77fc:	d12f      	bne.n	785e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    77fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    7802:	bf0c      	ite	eq
    7804:	2304      	moveq	r3, #4
    7806:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    7808:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    780c:	6883      	ldr	r3, [r0, #8]
    780e:	fa23 f101 	lsr.w	r1, r3, r1
    7812:	07c9      	lsls	r1, r1, #31
    7814:	d42f      	bmi.n	7876 <gpio_nrfx_pin_interrupt_configure+0xa6>
    7816:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    781a:	d12c      	bne.n	7876 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    781c:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    781e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    7820:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    7824:	4a1c      	ldr	r2, [pc, #112]	; (7898 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7826:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    782a:	bf18      	it	ne
    782c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7834:	07db      	lsls	r3, r3, #31
    7836:	d41e      	bmi.n	7876 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    7838:	f10d 0407 	add.w	r4, sp, #7
    783c:	4621      	mov	r1, r4
    783e:	4628      	mov	r0, r5
    7840:	f001 f9f8 	bl	8c34 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    7844:	4b15      	ldr	r3, [pc, #84]	; (789c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    7846:	4298      	cmp	r0, r3
    7848:	d114      	bne.n	7874 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    784a:	4620      	mov	r0, r4
    784c:	f001 fa40 	bl	8cd0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    7850:	4b13      	ldr	r3, [pc, #76]	; (78a0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    7852:	4298      	cmp	r0, r3
    7854:	d00e      	beq.n	7874 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    7856:	f06f 000b 	mvn.w	r0, #11
}
    785a:	b005      	add	sp, #20
    785c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    785e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    7862:	d005      	beq.n	7870 <gpio_nrfx_pin_interrupt_configure+0xa0>
    7864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    7868:	bf0c      	ite	eq
    786a:	2302      	moveq	r3, #2
    786c:	2301      	movne	r3, #1
    786e:	e7cb      	b.n	7808 <gpio_nrfx_pin_interrupt_configure+0x38>
    7870:	2303      	movs	r3, #3
    7872:	e7c9      	b.n	7808 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    7874:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7876:	2300      	movs	r3, #0
    7878:	4619      	mov	r1, r3
    787a:	aa02      	add	r2, sp, #8
    787c:	4628      	mov	r0, r5
    787e:	f001 f8b3 	bl	89e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7882:	4b07      	ldr	r3, [pc, #28]	; (78a0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    7884:	4298      	cmp	r0, r3
    7886:	d104      	bne.n	7892 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    7888:	2101      	movs	r1, #1
    788a:	4628      	mov	r0, r5
    788c:	f001 fa26 	bl	8cdc <nrfx_gpiote_trigger_enable>
    7890:	e7ae      	b.n	77f0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    7892:	f06f 0004 	mvn.w	r0, #4
    7896:	e7e0      	b.n	785a <gpio_nrfx_pin_interrupt_configure+0x8a>
    7898:	50000300 	.word	0x50000300
    789c:	0bad0004 	.word	0x0bad0004
    78a0:	0bad0000 	.word	0x0bad0000

000078a4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    78a4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    78a6:	f001 fa03 	bl	8cb0 <nrfx_gpiote_is_init>
    78aa:	4604      	mov	r4, r0
    78ac:	b968      	cbnz	r0, 78ca <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    78ae:	f001 f9d7 	bl	8c60 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    78b2:	4b08      	ldr	r3, [pc, #32]	; (78d4 <gpio_nrfx_init+0x30>)
    78b4:	4298      	cmp	r0, r3
    78b6:	d10a      	bne.n	78ce <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    78b8:	4807      	ldr	r0, [pc, #28]	; (78d8 <gpio_nrfx_init+0x34>)
    78ba:	4621      	mov	r1, r4
    78bc:	f001 f9b4 	bl	8c28 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    78c0:	4622      	mov	r2, r4
    78c2:	2105      	movs	r1, #5
    78c4:	2006      	movs	r0, #6
    78c6:	f7fe f863 	bl	5990 <z_arm_irq_priority_set>
		return 0;
    78ca:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    78cc:	bd10      	pop	{r4, pc}
		return -EIO;
    78ce:	f06f 0004 	mvn.w	r0, #4
    78d2:	e7fb      	b.n	78cc <gpio_nrfx_init+0x28>
    78d4:	0bad0000 	.word	0x0bad0000
    78d8:	000078dd 	.word	0x000078dd

000078dc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    78dc:	0942      	lsrs	r2, r0, #5
{
    78de:	b570      	push	{r4, r5, r6, lr}
    78e0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    78e2:	d002      	beq.n	78ea <nrfx_gpio_handler+0xe>
    78e4:	2a01      	cmp	r2, #1
    78e6:	d015      	beq.n	7914 <nrfx_gpio_handler+0x38>
}
    78e8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    78ea:	4e0b      	ldr	r6, [pc, #44]	; (7918 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    78ec:	6932      	ldr	r2, [r6, #16]
    78ee:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    78f0:	2900      	cmp	r1, #0
    78f2:	d0f9      	beq.n	78e8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    78f4:	f003 031f 	and.w	r3, r3, #31
    78f8:	2501      	movs	r5, #1
    78fa:	680c      	ldr	r4, [r1, #0]
    78fc:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    78fe:	688a      	ldr	r2, [r1, #8]
    7900:	402a      	ands	r2, r5
    7902:	d002      	beq.n	790a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7904:	684b      	ldr	r3, [r1, #4]
    7906:	4630      	mov	r0, r6
    7908:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    790a:	2c00      	cmp	r4, #0
    790c:	d0ec      	beq.n	78e8 <nrfx_gpio_handler+0xc>
    790e:	4621      	mov	r1, r4
    7910:	6824      	ldr	r4, [r4, #0]
    7912:	e7f4      	b.n	78fe <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7914:	4e01      	ldr	r6, [pc, #4]	; (791c <nrfx_gpio_handler+0x40>)
    7916:	e7e9      	b.n	78ec <nrfx_gpio_handler+0x10>
    7918:	0000f620 	.word	0x0000f620
    791c:	0000f638 	.word	0x0000f638

00007920 <gpio_nrfx_pin_configure>:
{
    7920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    7924:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7926:	7b3b      	ldrb	r3, [r7, #12]
    7928:	f001 051f 	and.w	r5, r1, #31
{
    792c:	b085      	sub	sp, #20
    792e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7930:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    7934:	4614      	mov	r4, r2
    7936:	b9ca      	cbnz	r2, 796c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    7938:	a902      	add	r1, sp, #8
    793a:	4628      	mov	r0, r5
    793c:	f001 f97a 	bl	8c34 <nrfx_gpiote_channel_get>
    7940:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    7942:	4628      	mov	r0, r5
    7944:	f001 fa3a 	bl	8dbc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    7948:	4b48      	ldr	r3, [pc, #288]	; (7a6c <gpio_nrfx_pin_configure+0x14c>)
    794a:	4298      	cmp	r0, r3
    794c:	d004      	beq.n	7958 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    794e:	f06f 0004 	mvn.w	r0, #4
}
    7952:	b005      	add	sp, #20
    7954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    7958:	4284      	cmp	r4, r0
    795a:	d105      	bne.n	7968 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    795c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7960:	f001 f9b0 	bl	8cc4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    7964:	42a0      	cmp	r0, r4
    7966:	d1f2      	bne.n	794e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7968:	2000      	movs	r0, #0
    796a:	e7f2      	b.n	7952 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    796c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    7970:	f10d 0103 	add.w	r1, sp, #3
    7974:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    7976:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    797a:	f001 f95b 	bl	8c34 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    797e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    7980:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7982:	aa02      	add	r2, sp, #8
    7984:	4649      	mov	r1, r9
    7986:	4628      	mov	r0, r5
    7988:	f001 f82e 	bl	89e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    798c:	4b37      	ldr	r3, [pc, #220]	; (7a6c <gpio_nrfx_pin_configure+0x14c>)
    798e:	4298      	cmp	r0, r3
    7990:	d002      	beq.n	7998 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7992:	f06f 0015 	mvn.w	r0, #21
    7996:	e7dc      	b.n	7952 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    7998:	4580      	cmp	r8, r0
    799a:	d103      	bne.n	79a4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    799c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    79a0:	f001 f990 	bl	8cc4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    79a4:	05a3      	lsls	r3, r4, #22
    79a6:	d54e      	bpl.n	7a46 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    79a8:	4b31      	ldr	r3, [pc, #196]	; (7a70 <gpio_nrfx_pin_configure+0x150>)
    79aa:	4a32      	ldr	r2, [pc, #200]	; (7a74 <gpio_nrfx_pin_configure+0x154>)
    79ac:	4023      	ands	r3, r4
    79ae:	4293      	cmp	r3, r2
    79b0:	d03a      	beq.n	7a28 <gpio_nrfx_pin_configure+0x108>
    79b2:	d80c      	bhi.n	79ce <gpio_nrfx_pin_configure+0xae>
    79b4:	2b06      	cmp	r3, #6
    79b6:	d014      	beq.n	79e2 <gpio_nrfx_pin_configure+0xc2>
    79b8:	d804      	bhi.n	79c4 <gpio_nrfx_pin_configure+0xa4>
    79ba:	b193      	cbz	r3, 79e2 <gpio_nrfx_pin_configure+0xc2>
    79bc:	2b02      	cmp	r3, #2
    79be:	d1e8      	bne.n	7992 <gpio_nrfx_pin_configure+0x72>
    79c0:	2304      	movs	r3, #4
    79c2:	e00e      	b.n	79e2 <gpio_nrfx_pin_configure+0xc2>
    79c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    79c8:	d1e3      	bne.n	7992 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    79ca:	2301      	movs	r3, #1
    79cc:	e009      	b.n	79e2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    79ce:	4a2a      	ldr	r2, [pc, #168]	; (7a78 <gpio_nrfx_pin_configure+0x158>)
    79d0:	4293      	cmp	r3, r2
    79d2:	d02b      	beq.n	7a2c <gpio_nrfx_pin_configure+0x10c>
    79d4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    79d8:	d02a      	beq.n	7a30 <gpio_nrfx_pin_configure+0x110>
    79da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    79de:	d1d8      	bne.n	7992 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    79e0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    79e2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    79e6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    79ea:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    79ee:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    79f0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    79f4:	bf54      	ite	pl
    79f6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    79fa:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    79fc:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    79fe:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7a02:	d517      	bpl.n	7a34 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	2101      	movs	r1, #1
    7a08:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    7a0c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    7a10:	2200      	movs	r2, #0
    7a12:	a901      	add	r1, sp, #4
    7a14:	4628      	mov	r0, r5
    7a16:	f001 f895 	bl	8b44 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7a1a:	4b14      	ldr	r3, [pc, #80]	; (7a6c <gpio_nrfx_pin_configure+0x14c>)
    7a1c:	4298      	cmp	r0, r3
    7a1e:	bf14      	ite	ne
    7a20:	f06f 0015 	mvnne.w	r0, #21
    7a24:	2000      	moveq	r0, #0
    7a26:	e794      	b.n	7952 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    7a28:	2307      	movs	r3, #7
    7a2a:	e7da      	b.n	79e2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    7a2c:	2305      	movs	r3, #5
    7a2e:	e7d8      	b.n	79e2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    7a30:	2303      	movs	r3, #3
    7a32:	e7d6      	b.n	79e2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7a34:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7a36:	bf41      	itttt	mi
    7a38:	687b      	ldrmi	r3, [r7, #4]
    7a3a:	2101      	movmi	r1, #1
    7a3c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    7a40:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    7a44:	e7e4      	b.n	7a10 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    7a46:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7a48:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    7a4c:	bf54      	ite	pl
    7a4e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    7a52:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7a54:	461a      	mov	r2, r3
    7a56:	a901      	add	r1, sp, #4
    7a58:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    7a5a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7a5e:	f000 ffc3 	bl	89e8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7a62:	4b02      	ldr	r3, [pc, #8]	; (7a6c <gpio_nrfx_pin_configure+0x14c>)
    7a64:	4298      	cmp	r0, r3
    7a66:	f43f af7f 	beq.w	7968 <gpio_nrfx_pin_configure+0x48>
    7a6a:	e792      	b.n	7992 <gpio_nrfx_pin_configure+0x72>
    7a6c:	0bad0000 	.word	0x0bad0000
    7a70:	00f00006 	.word	0x00f00006
    7a74:	00100006 	.word	0x00100006
    7a78:	00400002 	.word	0x00400002

00007a7c <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
    7a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
    7a80:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 7b30 <print_all_reset_causes+0xb4>
		return "security";
    7a84:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 7b34 <print_all_reset_causes+0xb8>
		return "parity error";
    7a88:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 7b38 <print_all_reset_causes+0xbc>
{
    7a8c:	4607      	mov	r7, r0
    7a8e:	460d      	mov	r5, r1
    7a90:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    7a92:	2401      	movs	r4, #1
		if (cause & cause_mask) {
    7a94:	ea15 0204 	ands.w	r2, r5, r4
    7a98:	d013      	beq.n	7ac2 <print_all_reset_causes+0x46>
	switch (cause) {
    7a9a:	2a40      	cmp	r2, #64	; 0x40
    7a9c:	d03c      	beq.n	7b18 <print_all_reset_causes+0x9c>
    7a9e:	d81e      	bhi.n	7ade <print_all_reset_causes+0x62>
    7aa0:	2a08      	cmp	r2, #8
    7aa2:	d814      	bhi.n	7ace <print_all_reset_causes+0x52>
    7aa4:	3a01      	subs	r2, #1
    7aa6:	2a07      	cmp	r2, #7
    7aa8:	d834      	bhi.n	7b14 <print_all_reset_causes+0x98>
    7aaa:	e8df f002 	tbb	[pc, r2]
    7aae:	0437      	.short	0x0437
    7ab0:	33332f33 	.word	0x33332f33
    7ab4:	3133      	.short	0x3133
    7ab6:	4b21      	ldr	r3, [pc, #132]	; (7b3c <print_all_reset_causes+0xc0>)
			shell_print(sh, "- %s",
    7ab8:	4652      	mov	r2, sl
    7aba:	2108      	movs	r1, #8
    7abc:	4638      	mov	r0, r7
    7abe:	f005 f9ad 	bl	ce1c <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    7ac2:	3e01      	subs	r6, #1
    7ac4:	ea4f 0444 	mov.w	r4, r4, lsl #1
    7ac8:	d1e4      	bne.n	7a94 <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
    7aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
    7ace:	2a10      	cmp	r2, #16
    7ad0:	d026      	beq.n	7b20 <print_all_reset_causes+0xa4>
		return "debug";
    7ad2:	4b1b      	ldr	r3, [pc, #108]	; (7b40 <print_all_reset_causes+0xc4>)
    7ad4:	491b      	ldr	r1, [pc, #108]	; (7b44 <print_all_reset_causes+0xc8>)
    7ad6:	2a20      	cmp	r2, #32
    7ad8:	bf08      	it	eq
    7ada:	460b      	moveq	r3, r1
    7adc:	e7ec      	b.n	7ab8 <print_all_reset_causes+0x3c>
	switch (cause) {
    7ade:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    7ae2:	d01f      	beq.n	7b24 <print_all_reset_causes+0xa8>
    7ae4:	d808      	bhi.n	7af8 <print_all_reset_causes+0x7c>
    7ae6:	2a80      	cmp	r2, #128	; 0x80
    7ae8:	d01e      	beq.n	7b28 <print_all_reset_causes+0xac>
		return "CPU lockup";
    7aea:	4b15      	ldr	r3, [pc, #84]	; (7b40 <print_all_reset_causes+0xc4>)
    7aec:	4916      	ldr	r1, [pc, #88]	; (7b48 <print_all_reset_causes+0xcc>)
    7aee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    7af2:	bf08      	it	eq
    7af4:	460b      	moveq	r3, r1
    7af6:	e7df      	b.n	7ab8 <print_all_reset_causes+0x3c>
	switch (cause) {
    7af8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    7afc:	d016      	beq.n	7b2c <print_all_reset_causes+0xb0>
		return "clock";
    7afe:	4b10      	ldr	r3, [pc, #64]	; (7b40 <print_all_reset_causes+0xc4>)
    7b00:	4912      	ldr	r1, [pc, #72]	; (7b4c <print_all_reset_causes+0xd0>)
    7b02:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    7b06:	bf08      	it	eq
    7b08:	460b      	moveq	r3, r1
    7b0a:	e7d5      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "brownout";
    7b0c:	4b10      	ldr	r3, [pc, #64]	; (7b50 <print_all_reset_causes+0xd4>)
    7b0e:	e7d3      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "power-on reset";
    7b10:	4b10      	ldr	r3, [pc, #64]	; (7b54 <print_all_reset_causes+0xd8>)
    7b12:	e7d1      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "unknown";
    7b14:	4b0a      	ldr	r3, [pc, #40]	; (7b40 <print_all_reset_causes+0xc4>)
    7b16:	e7cf      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "security";
    7b18:	4643      	mov	r3, r8
    7b1a:	e7cd      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "pin";
    7b1c:	4b0e      	ldr	r3, [pc, #56]	; (7b58 <print_all_reset_causes+0xdc>)
    7b1e:	e7cb      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "watchdog";
    7b20:	4b0e      	ldr	r3, [pc, #56]	; (7b5c <print_all_reset_causes+0xe0>)
    7b22:	e7c9      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "parity error";
    7b24:	464b      	mov	r3, r9
    7b26:	e7c7      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "low power wake-up";
    7b28:	4b0d      	ldr	r3, [pc, #52]	; (7b60 <print_all_reset_causes+0xe4>)
    7b2a:	e7c5      	b.n	7ab8 <print_all_reset_causes+0x3c>
		return "PLL error";
    7b2c:	4b0d      	ldr	r3, [pc, #52]	; (7b64 <print_all_reset_causes+0xe8>)
    7b2e:	e7c3      	b.n	7ab8 <print_all_reset_causes+0x3c>
    7b30:	00010953 	.word	0x00010953
    7b34:	00011f55 	.word	0x00011f55
    7b38:	00011f5e 	.word	0x00011f5e
    7b3c:	00011f43 	.word	0x00011f43
    7b40:	00011f1f 	.word	0x00011f1f
    7b44:	00011f7d 	.word	0x00011f7d
    7b48:	00011f83 	.word	0x00011f83
    7b4c:	00011f98 	.word	0x00011f98
    7b50:	00011f2b 	.word	0x00011f2b
    7b54:	00011f34 	.word	0x00011f34
    7b58:	00011f27 	.word	0x00011f27
    7b5c:	00011f4c 	.word	0x00011f4c
    7b60:	00011f6b 	.word	0x00011f6b
    7b64:	00011f8e 	.word	0x00011f8e

00007b68 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
    7b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7b6a:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&supported, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
    7b6c:	a801      	add	r0, sp, #4
    7b6e:	f006 fcfe 	bl	e56e <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
    7b72:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7b76:	4604      	mov	r4, r0
    7b78:	d111      	bne.n	7b9e <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
    7b7a:	4a11      	ldr	r2, [pc, #68]	; (7bc0 <cmd_supported_reset_cause+0x58>)
    7b7c:	2101      	movs	r1, #1
    7b7e:	4628      	mov	r0, r5
    7b80:	f005 f94c 	bl	ce1c <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
    7b84:	9c01      	ldr	r4, [sp, #4]
    7b86:	b1ac      	cbz	r4, 7bb4 <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
    7b88:	4a0e      	ldr	r2, [pc, #56]	; (7bc4 <cmd_supported_reset_cause+0x5c>)
    7b8a:	2108      	movs	r1, #8
    7b8c:	4628      	mov	r0, r5
    7b8e:	f005 f945 	bl	ce1c <shell_fprintf>
		print_all_reset_causes(sh, cause);
    7b92:	9901      	ldr	r1, [sp, #4]
    7b94:	4628      	mov	r0, r5
    7b96:	f7ff ff71 	bl	7a7c <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supporte");
	}

	return 0;
    7b9a:	2400      	movs	r4, #0
    7b9c:	e007      	b.n	7bae <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
    7b9e:	2800      	cmp	r0, #0
    7ba0:	d0f0      	beq.n	7b84 <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
    7ba2:	4603      	mov	r3, r0
    7ba4:	4a08      	ldr	r2, [pc, #32]	; (7bc8 <cmd_supported_reset_cause+0x60>)
    7ba6:	2101      	movs	r1, #1
    7ba8:	4628      	mov	r0, r5
    7baa:	f005 f937 	bl	ce1c <shell_fprintf>
}
    7bae:	4620      	mov	r0, r4
    7bb0:	b003      	add	sp, #12
    7bb2:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supporte");
    7bb4:	4a05      	ldr	r2, [pc, #20]	; (7bcc <cmd_supported_reset_cause+0x64>)
    7bb6:	2108      	movs	r1, #8
    7bb8:	4628      	mov	r0, r5
    7bba:	f005 f92f 	bl	ce1c <shell_fprintf>
    7bbe:	e7f6      	b.n	7bae <cmd_supported_reset_cause+0x46>
    7bc0:	00011f9e 	.word	0x00011f9e
    7bc4:	00011fe8 	.word	0x00011fe8
    7bc8:	00011fb9 	.word	0x00011fb9
    7bcc:	00012001 	.word	0x00012001

00007bd0 <cmd_show_reset_cause>:
{
    7bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7bd2:	4604      	mov	r4, r0
	return z_impl_hwinfo_get_reset_cause(cause);
    7bd4:	a801      	add	r0, sp, #4
    7bd6:	f006 fca5 	bl	e524 <z_impl_hwinfo_get_reset_cause>
	if (res == -ENOTSUP) {
    7bda:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7bde:	4605      	mov	r5, r0
    7be0:	d105      	bne.n	7bee <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
    7be2:	4a0f      	ldr	r2, [pc, #60]	; (7c20 <cmd_show_reset_cause+0x50>)
    7be4:	2101      	movs	r1, #1
		shell_print(sh, "No reset cause set");
    7be6:	4620      	mov	r0, r4
    7be8:	f005 f918 	bl	ce1c <shell_fprintf>
    7bec:	e006      	b.n	7bfc <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
    7bee:	b140      	cbz	r0, 7c02 <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
    7bf0:	4603      	mov	r3, r0
    7bf2:	4a0c      	ldr	r2, [pc, #48]	; (7c24 <cmd_show_reset_cause+0x54>)
    7bf4:	2101      	movs	r1, #1
    7bf6:	4620      	mov	r0, r4
    7bf8:	f005 f910 	bl	ce1c <shell_fprintf>
}
    7bfc:	4628      	mov	r0, r5
    7bfe:	b003      	add	sp, #12
    7c00:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
    7c02:	9b01      	ldr	r3, [sp, #4]
    7c04:	b14b      	cbz	r3, 7c1a <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
    7c06:	4620      	mov	r0, r4
    7c08:	4a07      	ldr	r2, [pc, #28]	; (7c28 <cmd_show_reset_cause+0x58>)
    7c0a:	2108      	movs	r1, #8
    7c0c:	f005 f906 	bl	ce1c <shell_fprintf>
		print_all_reset_causes(sh, cause);
    7c10:	9901      	ldr	r1, [sp, #4]
    7c12:	4620      	mov	r0, r4
    7c14:	f7ff ff32 	bl	7a7c <print_all_reset_causes>
    7c18:	e7f0      	b.n	7bfc <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
    7c1a:	4a04      	ldr	r2, [pc, #16]	; (7c2c <cmd_show_reset_cause+0x5c>)
    7c1c:	2108      	movs	r1, #8
    7c1e:	e7e2      	b.n	7be6 <cmd_show_reset_cause+0x16>
    7c20:	00011f9e 	.word	0x00011f9e
    7c24:	00012015 	.word	0x00012015
    7c28:	00012033 	.word	0x00012033
    7c2c:	00012045 	.word	0x00012045

00007c30 <cmd_clear_reset_cause>:
{
    7c30:	b538      	push	{r3, r4, r5, lr}
    7c32:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
    7c34:	f006 fc93 	bl	e55e <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
    7c38:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7c3c:	4604      	mov	r4, r0
    7c3e:	d107      	bne.n	7c50 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
    7c40:	4a08      	ldr	r2, [pc, #32]	; (7c64 <cmd_clear_reset_cause+0x34>)
    7c42:	2101      	movs	r1, #1
    7c44:	4628      	mov	r0, r5
    7c46:	f005 f8e9 	bl	ce1c <shell_fprintf>
    7c4a:	2400      	movs	r4, #0
}
    7c4c:	4620      	mov	r0, r4
    7c4e:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
    7c50:	2800      	cmp	r0, #0
    7c52:	d0fb      	beq.n	7c4c <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
    7c54:	4603      	mov	r3, r0
    7c56:	4a04      	ldr	r2, [pc, #16]	; (7c68 <cmd_clear_reset_cause+0x38>)
    7c58:	2101      	movs	r1, #1
    7c5a:	4628      	mov	r0, r5
    7c5c:	f005 f8de 	bl	ce1c <shell_fprintf>
		return res;
    7c60:	e7f4      	b.n	7c4c <cmd_clear_reset_cause+0x1c>
    7c62:	bf00      	nop
    7c64:	00011f9e 	.word	0x00011f9e
    7c68:	00012059 	.word	0x00012059

00007c6c <cmd_get_device_id>:
{
    7c6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7c70:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
    7c72:	2110      	movs	r1, #16
    7c74:	4668      	mov	r0, sp
    7c76:	f006 fc1e 	bl	e4b6 <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
    7c7a:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7c7e:	4604      	mov	r4, r0
    7c80:	d108      	bne.n	7c94 <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
    7c82:	4a19      	ldr	r2, [pc, #100]	; (7ce8 <cmd_get_device_id+0x7c>)
    7c84:	2101      	movs	r1, #1
    7c86:	4628      	mov	r0, r5
    7c88:	f005 f8c8 	bl	ce1c <shell_fprintf>
}
    7c8c:	4620      	mov	r0, r4
    7c8e:	b004      	add	sp, #16
    7c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
    7c94:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
    7c96:	4603      	mov	r3, r0
	} else if (length < 0) {
    7c98:	da05      	bge.n	7ca6 <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
    7c9a:	4a14      	ldr	r2, [pc, #80]	; (7cec <cmd_get_device_id+0x80>)
    7c9c:	2101      	movs	r1, #1
    7c9e:	4628      	mov	r0, r5
    7ca0:	f005 f8bc 	bl	ce1c <shell_fprintf>
		return length;
    7ca4:	e7f2      	b.n	7c8c <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    7ca6:	4a12      	ldr	r2, [pc, #72]	; (7cf0 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    7ca8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7cf4 <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    7cac:	2108      	movs	r1, #8
    7cae:	4628      	mov	r0, r5
    7cb0:	f005 f8b4 	bl	ce1c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
    7cb4:	4a10      	ldr	r2, [pc, #64]	; (7cf8 <cmd_get_device_id+0x8c>)
    7cb6:	2108      	movs	r1, #8
    7cb8:	4628      	mov	r0, r5
    7cba:	f005 f8af 	bl	ce1c <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    7cbe:	466e      	mov	r6, sp
    7cc0:	2700      	movs	r7, #0
    7cc2:	42a7      	cmp	r7, r4
    7cc4:	d106      	bne.n	7cd4 <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
    7cc6:	4a0d      	ldr	r2, [pc, #52]	; (7cfc <cmd_get_device_id+0x90>)
    7cc8:	2108      	movs	r1, #8
    7cca:	4628      	mov	r0, r5
    7ccc:	f005 f8a6 	bl	ce1c <shell_fprintf>
	return 0;
    7cd0:	2400      	movs	r4, #0
    7cd2:	e7db      	b.n	7c8c <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    7cd4:	f816 3b01 	ldrb.w	r3, [r6], #1
    7cd8:	4642      	mov	r2, r8
    7cda:	2108      	movs	r1, #8
    7cdc:	4628      	mov	r0, r5
    7cde:	f005 f89d 	bl	ce1c <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    7ce2:	3701      	adds	r7, #1
    7ce4:	e7ed      	b.n	7cc2 <cmd_get_device_id+0x56>
    7ce6:	bf00      	nop
    7ce8:	00011f9e 	.word	0x00011f9e
    7cec:	0001207f 	.word	0x0001207f
    7cf0:	0001208b 	.word	0x0001208b
    7cf4:	00011d3a 	.word	0x00011d3a
    7cf8:	00012098 	.word	0x00012098
    7cfc:	0001082a 	.word	0x0001082a

00007d00 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7d00:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7d02:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7d06:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    7d08:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    7d0a:	6002      	str	r2, [r0, #0]
}
    7d0c:	4802      	ldr	r0, [pc, #8]	; (7d18 <nrf_gpio_pin_port_decode+0x18>)
    7d0e:	bf18      	it	ne
    7d10:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7d14:	4770      	bx	lr
    7d16:	bf00      	nop
    7d18:	50000300 	.word	0x50000300

00007d1c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    7d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    7d1e:	794b      	ldrb	r3, [r1, #5]
    7d20:	2b01      	cmp	r3, #1
    7d22:	d026      	beq.n	7d72 <uarte_nrfx_configure+0x56>
    7d24:	2b03      	cmp	r3, #3
    7d26:	d121      	bne.n	7d6c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    7d28:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    7d2a:	798b      	ldrb	r3, [r1, #6]
    7d2c:	2b03      	cmp	r3, #3
    7d2e:	d11d      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    7d30:	79cc      	ldrb	r4, [r1, #7]
    7d32:	b10c      	cbz	r4, 7d38 <uarte_nrfx_configure+0x1c>
    7d34:	2c01      	cmp	r4, #1
    7d36:	d119      	bne.n	7d6c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    7d38:	790a      	ldrb	r2, [r1, #4]
    7d3a:	b112      	cbz	r2, 7d42 <uarte_nrfx_configure+0x26>
    7d3c:	2a02      	cmp	r2, #2
    7d3e:	d115      	bne.n	7d6c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    7d40:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7d42:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    7d44:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    7d46:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    7d4a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    7d4c:	d065      	beq.n	7e1a <uarte_nrfx_configure+0xfe>
    7d4e:	d82d      	bhi.n	7dac <uarte_nrfx_configure+0x90>
    7d50:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    7d54:	d064      	beq.n	7e20 <uarte_nrfx_configure+0x104>
    7d56:	d816      	bhi.n	7d86 <uarte_nrfx_configure+0x6a>
    7d58:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7d5c:	d062      	beq.n	7e24 <uarte_nrfx_configure+0x108>
    7d5e:	d80a      	bhi.n	7d76 <uarte_nrfx_configure+0x5a>
    7d60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7d64:	d061      	beq.n	7e2a <uarte_nrfx_configure+0x10e>
    7d66:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    7d6a:	d061      	beq.n	7e30 <uarte_nrfx_configure+0x114>
    7d6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7d70:	e052      	b.n	7e18 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    7d72:	2600      	movs	r6, #0
    7d74:	e7d9      	b.n	7d2a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    7d76:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    7d7a:	d05c      	beq.n	7e36 <uarte_nrfx_configure+0x11a>
    7d7c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    7d80:	d1f4      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7d82:	4b37      	ldr	r3, [pc, #220]	; (7e60 <uarte_nrfx_configure+0x144>)
    7d84:	e03c      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7d86:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    7d8a:	d057      	beq.n	7e3c <uarte_nrfx_configure+0x120>
    7d8c:	d807      	bhi.n	7d9e <uarte_nrfx_configure+0x82>
    7d8e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    7d92:	d055      	beq.n	7e40 <uarte_nrfx_configure+0x124>
    7d94:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    7d98:	d1e8      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7d9a:	4b32      	ldr	r3, [pc, #200]	; (7e64 <uarte_nrfx_configure+0x148>)
    7d9c:	e030      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7d9e:	f647 2712 	movw	r7, #31250	; 0x7a12
    7da2:	42bb      	cmp	r3, r7
    7da4:	d1e2      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7da6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7daa:	e029      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7dac:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    7db0:	d048      	beq.n	7e44 <uarte_nrfx_configure+0x128>
    7db2:	d813      	bhi.n	7ddc <uarte_nrfx_configure+0xc0>
    7db4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    7db8:	d047      	beq.n	7e4a <uarte_nrfx_configure+0x12e>
    7dba:	d809      	bhi.n	7dd0 <uarte_nrfx_configure+0xb4>
    7dbc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    7dc0:	42bb      	cmp	r3, r7
    7dc2:	d044      	beq.n	7e4e <uarte_nrfx_configure+0x132>
    7dc4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    7dc8:	d1d0      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7dca:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7dce:	e017      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7dd0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    7dd4:	d1ca      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7dd6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    7dda:	e011      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7ddc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    7de0:	d038      	beq.n	7e54 <uarte_nrfx_configure+0x138>
    7de2:	d808      	bhi.n	7df6 <uarte_nrfx_configure+0xda>
    7de4:	4f20      	ldr	r7, [pc, #128]	; (7e68 <uarte_nrfx_configure+0x14c>)
    7de6:	42bb      	cmp	r3, r7
    7de8:	d037      	beq.n	7e5a <uarte_nrfx_configure+0x13e>
    7dea:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    7dee:	d1bd      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    7df0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    7df4:	e004      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7df6:	4f1d      	ldr	r7, [pc, #116]	; (7e6c <uarte_nrfx_configure+0x150>)
    7df8:	42bb      	cmp	r3, r7
    7dfa:	d1b7      	bne.n	7d6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    7e00:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7e02:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    7e06:	1d03      	adds	r3, r0, #4
    7e08:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    7e0a:	4334      	orrs	r4, r6
    7e0c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7e0e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    7e12:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    7e16:	2000      	movs	r0, #0
}
    7e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7e1a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    7e1e:	e7ef      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    7e20:	4b13      	ldr	r3, [pc, #76]	; (7e70 <uarte_nrfx_configure+0x154>)
    7e22:	e7ed      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    7e24:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7e28:	e7ea      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    7e2a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7e2e:	e7e7      	b.n	7e00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7e30:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    7e34:	e7e4      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    7e36:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7e3a:	e7e1      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    7e3c:	4b0d      	ldr	r3, [pc, #52]	; (7e74 <uarte_nrfx_configure+0x158>)
    7e3e:	e7df      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7e40:	4b0d      	ldr	r3, [pc, #52]	; (7e78 <uarte_nrfx_configure+0x15c>)
    7e42:	e7dd      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7e44:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7e48:	e7da      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7e4a:	4b0c      	ldr	r3, [pc, #48]	; (7e7c <uarte_nrfx_configure+0x160>)
    7e4c:	e7d8      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7e4e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7e52:	e7d5      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7e54:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7e58:	e7d2      	b.n	7e00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7e5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7e5e:	e7cf      	b.n	7e00 <uarte_nrfx_configure+0xe4>
    7e60:	0013b000 	.word	0x0013b000
    7e64:	004ea000 	.word	0x004ea000
    7e68:	0003d090 	.word	0x0003d090
    7e6c:	000f4240 	.word	0x000f4240
    7e70:	00275000 	.word	0x00275000
    7e74:	0075c000 	.word	0x0075c000
    7e78:	003af000 	.word	0x003af000
    7e7c:	013a9000 	.word	0x013a9000

00007e80 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    7e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    7e82:	6906      	ldr	r6, [r0, #16]
{
    7e84:	4605      	mov	r5, r0
    7e86:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7e88:	f006 fee3 	bl	ec52 <k_is_in_isr>
    7e8c:	b910      	cbnz	r0, 7e94 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    7e8e:	4b20      	ldr	r3, [pc, #128]	; (7f10 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	b983      	cbnz	r3, 7eb6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    7e94:	f04f 0320 	mov.w	r3, #32
    7e98:	f3ef 8411 	mrs	r4, BASEPRI
    7e9c:	f383 8812 	msr	BASEPRI_MAX, r3
    7ea0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    7ea4:	6868      	ldr	r0, [r5, #4]
    7ea6:	f006 fc3d 	bl	e724 <is_tx_ready.isra.0>
    7eaa:	bb28      	cbnz	r0, 7ef8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    7eac:	f384 8811 	msr	BASEPRI, r4
    7eb0:	f3bf 8f6f 	isb	sy
}
    7eb4:	e7ee      	b.n	7e94 <uarte_nrfx_poll_out+0x14>
{
    7eb6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    7eb8:	6868      	ldr	r0, [r5, #4]
    7eba:	f006 fc33 	bl	e724 <is_tx_ready.isra.0>
    7ebe:	b970      	cbnz	r0, 7ede <uarte_nrfx_poll_out+0x5e>
    7ec0:	2001      	movs	r0, #1
    7ec2:	f006 fd09 	bl	e8d8 <nrfx_busy_wait>
    7ec6:	3c01      	subs	r4, #1
    7ec8:	d1f6      	bne.n	7eb8 <uarte_nrfx_poll_out+0x38>
    7eca:	2100      	movs	r1, #0
    7ecc:	2021      	movs	r0, #33	; 0x21
    7ece:	f003 fa33 	bl	b338 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7ed2:	e7f0      	b.n	7eb6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    7ed4:	f384 8811 	msr	BASEPRI, r4
    7ed8:	f3bf 8f6f 	isb	sy
}
    7edc:	e7f5      	b.n	7eca <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    7ede:	f04f 0320 	mov.w	r3, #32
    7ee2:	f3ef 8411 	mrs	r4, BASEPRI
    7ee6:	f383 8812 	msr	BASEPRI_MAX, r3
    7eea:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7eee:	6868      	ldr	r0, [r5, #4]
    7ef0:	f006 fc18 	bl	e724 <is_tx_ready.isra.0>
    7ef4:	2800      	cmp	r0, #0
    7ef6:	d0ed      	beq.n	7ed4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    7ef8:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    7efa:	2201      	movs	r2, #1
	data->char_out = c;
    7efc:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    7f00:	6868      	ldr	r0, [r5, #4]
    7f02:	f006 fbf4 	bl	e6ee <tx_start.isra.0>
	__asm__ volatile(
    7f06:	f384 8811 	msr	BASEPRI, r4
    7f0a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f10:	20002356 	.word	0x20002356

00007f14 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    7f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
    7f18:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    7f1c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    7f1e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7f22:	2300      	movs	r3, #0
    7f24:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7f28:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    7f2a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f2c:	68eb      	ldr	r3, [r5, #12]
    7f2e:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
    7f30:	b088      	sub	sp, #32
    7f32:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f34:	d013      	beq.n	7f5e <uarte_instance_init.constprop.0+0x4a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f36:	a802      	add	r0, sp, #8
    7f38:	9302      	str	r3, [sp, #8]
    7f3a:	f7ff fee1 	bl	7d00 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7f3e:	9a02      	ldr	r2, [sp, #8]
    7f40:	2301      	movs	r3, #1
    7f42:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7f44:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    7f48:	68eb      	ldr	r3, [r5, #12]
    7f4a:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f4c:	a802      	add	r0, sp, #8
    7f4e:	f7ff fed7 	bl	7d00 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7f52:	9b02      	ldr	r3, [sp, #8]
    7f54:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7f58:	2203      	movs	r2, #3
    7f5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f5e:	6928      	ldr	r0, [r5, #16]
    7f60:	1c43      	adds	r3, r0, #1
    7f62:	d006      	beq.n	7f72 <uarte_instance_init.constprop.0+0x5e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    7f64:	7f2b      	ldrb	r3, [r5, #28]
    7f66:	2b00      	cmp	r3, #0
    7f68:	bf14      	ite	ne
    7f6a:	2103      	movne	r1, #3
    7f6c:	2100      	moveq	r1, #0
    7f6e:	f006 fbb0 	bl	e6d2 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f72:	696b      	ldr	r3, [r5, #20]
    7f74:	1c5a      	adds	r2, r3, #1
    7f76:	d013      	beq.n	7fa0 <uarte_instance_init.constprop.0+0x8c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f78:	a802      	add	r0, sp, #8
    7f7a:	9302      	str	r3, [sp, #8]
    7f7c:	f7ff fec0 	bl	7d00 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7f80:	9a02      	ldr	r2, [sp, #8]
    7f82:	2301      	movs	r3, #1
    7f84:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7f86:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    7f8a:	696b      	ldr	r3, [r5, #20]
    7f8c:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f8e:	a802      	add	r0, sp, #8
    7f90:	f7ff feb6 	bl	7d00 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7f94:	9b02      	ldr	r3, [sp, #8]
    7f96:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7f9a:	2203      	movs	r2, #3
    7f9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7fa0:	69a8      	ldr	r0, [r5, #24]
    7fa2:	1c43      	adds	r3, r0, #1
    7fa4:	d006      	beq.n	7fb4 <uarte_instance_init.constprop.0+0xa0>
			nrf_gpio_cfg_input(cfg->cts_pin,
    7fa6:	7f6b      	ldrb	r3, [r5, #29]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	bf14      	ite	ne
    7fac:	2103      	movne	r1, #3
    7fae:	2100      	moveq	r1, #0
    7fb0:	f006 fb8f 	bl	e6d2 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    7fb4:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    7fb8:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    7fba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    7fbe:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    7fc2:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    7fc6:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
    7fc8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    7fcc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    7fd0:	1d31      	adds	r1, r6, #4
    7fd2:	f7ff fea3 	bl	7d1c <uarte_nrfx_configure>
	if (err) {
    7fd6:	4605      	mov	r5, r0
    7fd8:	2800      	cmp	r0, #0
    7fda:	d158      	bne.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    7fdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7fe0:	0798      	lsls	r0, r3, #30
    7fe2:	d52b      	bpl.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7fe4:	f106 0016 	add.w	r0, r6, #22
    7fe8:	f001 f882 	bl	90f0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7fec:	4b2a      	ldr	r3, [pc, #168]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    7fee:	4298      	cmp	r0, r3
    7ff0:	d011      	beq.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
		LOG_ERR("Failed to allocate PPI Channel");
    7ff2:	482a      	ldr	r0, [pc, #168]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    7ff4:	6803      	ldr	r3, [r0, #0]
    7ff6:	0759      	lsls	r1, r3, #29
    7ff8:	d00a      	beq.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    7ffa:	4b29      	ldr	r3, [pc, #164]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7ffc:	9306      	str	r3, [sp, #24]
    7ffe:	2302      	movs	r3, #2
    8000:	9301      	str	r3, [sp, #4]
    8002:	9305      	str	r3, [sp, #20]
    8004:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8008:	462b      	mov	r3, r5
    800a:	aa05      	add	r2, sp, #20
    800c:	f004 fd25 	bl	ca5a <z_impl_z_log_msg2_static_create>
		return -EIO;
    8010:	f06f 0504 	mvn.w	r5, #4
    8014:	e03b      	b.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    8016:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    8018:	00c3      	lsls	r3, r0, #3
    801a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    801e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    8022:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    8026:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    802a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    802e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    8032:	4a1c      	ldr	r2, [pc, #112]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    8034:	2301      	movs	r3, #1
    8036:	4083      	lsls	r3, r0
    8038:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    803c:	2308      	movs	r3, #8
    803e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8042:	f898 3008 	ldrb.w	r3, [r8, #8]
    8046:	b95b      	cbnz	r3, 8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8048:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    804c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8050:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8054:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8058:	2301      	movs	r3, #1
    805a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    805e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8060:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8064:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    8066:	bf5c      	itt	pl
    8068:	f44f 7280 	movpl.w	r2, #256	; 0x100
    806c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8070:	06db      	lsls	r3, r3, #27
    8072:	bf44      	itt	mi
    8074:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    8078:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    807c:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    807e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8080:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8084:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8088:	2301      	movs	r3, #1
    808a:	60a3      	str	r3, [r4, #8]
    808c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    808e:	4628      	mov	r0, r5
    8090:	b008      	add	sp, #32
    8092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8096:	bf00      	nop
    8098:	0bad0000 	.word	0x0bad0000
    809c:	2000027c 	.word	0x2000027c
    80a0:	0001215e 	.word	0x0001215e
    80a4:	4001f000 	.word	0x4001f000

000080a8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    80a8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    80aa:	2301      	movs	r3, #1
    80ac:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    80ae:	4a11      	ldr	r2, [pc, #68]	; (80f4 <compare_int_lock+0x4c>)
    80b0:	f3bf 8f5b 	dmb	ish
    80b4:	43dc      	mvns	r4, r3
    80b6:	e852 1f00 	ldrex	r1, [r2]
    80ba:	ea01 0c04 	and.w	ip, r1, r4
    80be:	e842 ce00 	strex	lr, ip, [r2]
    80c2:	f1be 0f00 	cmp.w	lr, #0
    80c6:	d1f6      	bne.n	80b6 <compare_int_lock+0xe>
    80c8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    80cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    80d0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    80d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    80d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    80dc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    80e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    80e4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    80e8:	420b      	tst	r3, r1
}
    80ea:	bf14      	ite	ne
    80ec:	2001      	movne	r0, #1
    80ee:	2000      	moveq	r0, #0
    80f0:	bd10      	pop	{r4, pc}
    80f2:	bf00      	nop
    80f4:	20002034 	.word	0x20002034

000080f8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    80f8:	4919      	ldr	r1, [pc, #100]	; (8160 <sys_clock_timeout_handler+0x68>)
{
    80fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80fc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    80fe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8102:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    8104:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    8108:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    810c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    810e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    8112:	d222      	bcs.n	815a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    8114:	4b13      	ldr	r3, [pc, #76]	; (8164 <sys_clock_timeout_handler+0x6c>)
    8116:	681b      	ldr	r3, [r3, #0]
    8118:	0a1a      	lsrs	r2, r3, #8
    811a:	061b      	lsls	r3, r3, #24
    811c:	195e      	adds	r6, r3, r5
    811e:	4b12      	ldr	r3, [pc, #72]	; (8168 <sys_clock_timeout_handler+0x70>)
    8120:	f142 0700 	adc.w	r7, r2, #0
    8124:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    8128:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    812a:	f003 fa7b 	bl	b624 <sys_clock_announce>
    return p_reg->CC[ch];
    812e:	00a3      	lsls	r3, r4, #2
    8130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8134:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8138:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    813c:	42aa      	cmp	r2, r5
    813e:	d10b      	bne.n	8158 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    8140:	b91e      	cbnz	r6, 814a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    8142:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    8146:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    814a:	4b08      	ldr	r3, [pc, #32]	; (816c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    814c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    8150:	fa00 f404 	lsl.w	r4, r0, r4
    8154:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    8158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    815a:	2600      	movs	r6, #0
    815c:	e7e5      	b.n	812a <sys_clock_timeout_handler+0x32>
    815e:	bf00      	nop
    8160:	20000ea0 	.word	0x20000ea0
    8164:	20002038 	.word	0x20002038
    8168:	20000e88 	.word	0x20000e88
    816c:	40011000 	.word	0x40011000

00008170 <compare_int_unlock>:
	if (key) {
    8170:	b319      	cbz	r1, 81ba <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8172:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    8176:	2301      	movs	r3, #1
    8178:	4a10      	ldr	r2, [pc, #64]	; (81bc <compare_int_unlock+0x4c>)
    817a:	4083      	lsls	r3, r0
    817c:	e852 1f00 	ldrex	r1, [r2]
    8180:	4319      	orrs	r1, r3
    8182:	e842 1c00 	strex	ip, r1, [r2]
    8186:	f1bc 0f00 	cmp.w	ip, #0
    818a:	d1f7      	bne.n	817c <compare_int_unlock+0xc>
    818c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    8190:	4a0b      	ldr	r2, [pc, #44]	; (81c0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8196:	4083      	lsls	r3, r0
    8198:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    819c:	4b09      	ldr	r3, [pc, #36]	; (81c4 <compare_int_unlock+0x54>)
    819e:	f3bf 8f5b 	dmb	ish
    81a2:	681b      	ldr	r3, [r3, #0]
    81a4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    81a8:	fa23 f000 	lsr.w	r0, r3, r0
    81ac:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81ae:	bf42      	ittt	mi
    81b0:	4b05      	ldrmi	r3, [pc, #20]	; (81c8 <compare_int_unlock+0x58>)
    81b2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    81b6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    81ba:	4770      	bx	lr
    81bc:	20002034 	.word	0x20002034
    81c0:	40011000 	.word	0x40011000
    81c4:	20002030 	.word	0x20002030
    81c8:	e000e100 	.word	0xe000e100

000081cc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    81cc:	4b0d      	ldr	r3, [pc, #52]	; (8204 <z_nrf_rtc_timer_read+0x38>)
    81ce:	6818      	ldr	r0, [r3, #0]
    81d0:	0a01      	lsrs	r1, r0, #8
    81d2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    81d4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    81d8:	4b0b      	ldr	r3, [pc, #44]	; (8208 <z_nrf_rtc_timer_read+0x3c>)
    81da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    81de:	1818      	adds	r0, r3, r0
    81e0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    81e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    81e8:	d20a      	bcs.n	8200 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    81ea:	4b08      	ldr	r3, [pc, #32]	; (820c <z_nrf_rtc_timer_read+0x40>)
    81ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    81f0:	4290      	cmp	r0, r2
    81f2:	eb71 0303 	sbcs.w	r3, r1, r3
    81f6:	d203      	bcs.n	8200 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    81f8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    81fc:	f141 0100 	adc.w	r1, r1, #0
}
    8200:	4770      	bx	lr
    8202:	bf00      	nop
    8204:	20002038 	.word	0x20002038
    8208:	40011000 	.word	0x40011000
    820c:	20000e88 	.word	0x20000e88

00008210 <compare_set>:
{
    8210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8214:	b085      	sub	sp, #20
    8216:	4616      	mov	r6, r2
    8218:	4698      	mov	r8, r3
    821a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    821c:	f7ff ff44 	bl	80a8 <compare_int_lock>
    8220:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    8222:	f7ff ffd3 	bl	81cc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    8226:	42b0      	cmp	r0, r6
    8228:	eb71 0308 	sbcs.w	r3, r1, r8
    822c:	d278      	bcs.n	8320 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    822e:	4b46      	ldr	r3, [pc, #280]	; (8348 <compare_set+0x138>)
    8230:	1a30      	subs	r0, r6, r0
    8232:	eb68 0101 	sbc.w	r1, r8, r1
    8236:	4298      	cmp	r0, r3
    8238:	f171 0300 	sbcs.w	r3, r1, #0
    823c:	f080 8081 	bcs.w	8342 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    8240:	4b42      	ldr	r3, [pc, #264]	; (834c <compare_set+0x13c>)
    8242:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    8246:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    824a:	45d8      	cmp	r8, fp
    824c:	bf08      	it	eq
    824e:	4556      	cmpeq	r6, sl
    8250:	d051      	beq.n	82f6 <compare_set+0xe6>
    8252:	ea4f 0985 	mov.w	r9, r5, lsl #2
    8256:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    825a:	f105 0750 	add.w	r7, r5, #80	; 0x50
    825e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    8262:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8264:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8268:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    826c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    826e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    8272:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8276:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    8278:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    827c:	4b34      	ldr	r3, [pc, #208]	; (8350 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    827e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    8282:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    8284:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    8288:	1a40      	subs	r0, r0, r1
    828a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    828e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    8292:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    8294:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    8298:	d107      	bne.n	82aa <compare_set+0x9a>
    829a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    829e:	2013      	movs	r0, #19
    82a0:	f006 ff45 	bl	f12e <z_impl_k_busy_wait>
    82a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    82a8:	4b29      	ldr	r3, [pc, #164]	; (8350 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    82aa:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    82ae:	eba4 000c 	sub.w	r0, r4, ip
    82b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    82b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    82ba:	bf88      	it	hi
    82bc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    82be:	2000      	movs	r0, #0
    82c0:	6038      	str	r0, [r7, #0]
    82c2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    82c4:	9801      	ldr	r0, [sp, #4]
    82c6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    82ca:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    82ce:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    82d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    82d6:	4281      	cmp	r1, r0
    82d8:	d006      	beq.n	82e8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    82da:	1a20      	subs	r0, r4, r0
    82dc:	3802      	subs	r0, #2
    82de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    82e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    82e6:	d819      	bhi.n	831c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    82e8:	1aa4      	subs	r4, r4, r2
    82ea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    82ee:	eb14 0a06 	adds.w	sl, r4, r6
    82f2:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    82f6:	4915      	ldr	r1, [pc, #84]	; (834c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    82f8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    82fa:	012b      	lsls	r3, r5, #4
    82fc:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    8300:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    8304:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    8306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8308:	6053      	str	r3, [r2, #4]
	return ret;
    830a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    830c:	4628      	mov	r0, r5
    830e:	9900      	ldr	r1, [sp, #0]
    8310:	f7ff ff2e 	bl	8170 <compare_int_unlock>
}
    8314:	4620      	mov	r0, r4
    8316:	b005      	add	sp, #20
    8318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    831c:	4620      	mov	r0, r4
    831e:	e7b1      	b.n	8284 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    8320:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8322:	4a0c      	ldr	r2, [pc, #48]	; (8354 <compare_set+0x144>)
    8324:	f3bf 8f5b 	dmb	ish
    8328:	40ab      	lsls	r3, r5
    832a:	e852 1f00 	ldrex	r1, [r2]
    832e:	4319      	orrs	r1, r3
    8330:	e842 1000 	strex	r0, r1, [r2]
    8334:	2800      	cmp	r0, #0
    8336:	d1f8      	bne.n	832a <compare_set+0x11a>
    8338:	f3bf 8f5b 	dmb	ish
    833c:	46b2      	mov	sl, r6
    833e:	46c3      	mov	fp, r8
    8340:	e7d9      	b.n	82f6 <compare_set+0xe6>
			return -EINVAL;
    8342:	f06f 0415 	mvn.w	r4, #21
    8346:	e7e1      	b.n	830c <compare_set+0xfc>
    8348:	01000001 	.word	0x01000001
    834c:	20000e90 	.word	0x20000e90
    8350:	40011000 	.word	0x40011000
    8354:	20002030 	.word	0x20002030

00008358 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    8358:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    835a:	4b19      	ldr	r3, [pc, #100]	; (83c0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    835c:	4d19      	ldr	r5, [pc, #100]	; (83c4 <sys_clock_driver_init+0x6c>)
    835e:	2400      	movs	r4, #0
    8360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8368:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    836c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    8370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8374:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8378:	4b13      	ldr	r3, [pc, #76]	; (83c8 <sys_clock_driver_init+0x70>)
    837a:	2602      	movs	r6, #2
    837c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    8380:	2101      	movs	r1, #1
    8382:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    8386:	2011      	movs	r0, #17
    8388:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    838c:	4622      	mov	r2, r4
    838e:	f7fd faff 	bl	5990 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    8392:	2011      	movs	r0, #17
    8394:	f7fd faca 	bl	592c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    8398:	4a0c      	ldr	r2, [pc, #48]	; (83cc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    839a:	2301      	movs	r3, #1
    839c:	60ab      	str	r3, [r5, #8]
    839e:	602b      	str	r3, [r5, #0]
    83a0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    83a2:	4b0b      	ldr	r3, [pc, #44]	; (83d0 <sys_clock_driver_init+0x78>)
    83a4:	4a0b      	ldr	r2, [pc, #44]	; (83d4 <sys_clock_driver_init+0x7c>)
    83a6:	9300      	str	r3, [sp, #0]
    83a8:	9401      	str	r4, [sp, #4]
    83aa:	2300      	movs	r3, #0
    83ac:	4620      	mov	r0, r4
    83ae:	f7ff ff2f 	bl	8210 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    83b2:	4630      	mov	r0, r6
    83b4:	f7ff f960 	bl	7678 <z_nrf_clock_control_lf_on>

	return 0;
}
    83b8:	4620      	mov	r0, r4
    83ba:	b002      	add	sp, #8
    83bc:	bd70      	pop	{r4, r5, r6, pc}
    83be:	bf00      	nop
    83c0:	20000e90 	.word	0x20000e90
    83c4:	40011000 	.word	0x40011000
    83c8:	e000e100 	.word	0xe000e100
    83cc:	20002034 	.word	0x20002034
    83d0:	000080f9 	.word	0x000080f9
    83d4:	007fffff 	.word	0x007fffff

000083d8 <rtc_nrf_isr>:
{
    83d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    83dc:	4c35      	ldr	r4, [pc, #212]	; (84b4 <rtc_nrf_isr+0xdc>)
    83de:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    83e2:	079a      	lsls	r2, r3, #30
    83e4:	d50b      	bpl.n	83fe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83e6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    83ea:	b143      	cbz	r3, 83fe <rtc_nrf_isr+0x26>
		overflow_cnt++;
    83ec:	4a32      	ldr	r2, [pc, #200]	; (84b8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    83ee:	2300      	movs	r3, #0
    83f0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    83f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    83f8:	6813      	ldr	r3, [r2, #0]
    83fa:	3301      	adds	r3, #1
    83fc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    83fe:	f04f 0320 	mov.w	r3, #32
    8402:	f3ef 8211 	mrs	r2, BASEPRI
    8406:	f383 8812 	msr	BASEPRI_MAX, r3
    840a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    840e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    8412:	03db      	lsls	r3, r3, #15
    8414:	d512      	bpl.n	843c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8416:	f3bf 8f5b 	dmb	ish
    841a:	4b28      	ldr	r3, [pc, #160]	; (84bc <rtc_nrf_isr+0xe4>)
    841c:	e853 1f00 	ldrex	r1, [r3]
    8420:	f021 0001 	bic.w	r0, r1, #1
    8424:	e843 0600 	strex	r6, r0, [r3]
    8428:	2e00      	cmp	r6, #0
    842a:	d1f7      	bne.n	841c <rtc_nrf_isr+0x44>
    842c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8430:	2900      	cmp	r1, #0
    8432:	d136      	bne.n	84a2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8434:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    8438:	2b00      	cmp	r3, #0
    843a:	d132      	bne.n	84a2 <rtc_nrf_isr+0xca>
{
    843c:	2300      	movs	r3, #0
	__asm__ volatile(
    843e:	f382 8811 	msr	BASEPRI, r2
    8442:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    8446:	b34b      	cbz	r3, 849c <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    8448:	f7ff fec0 	bl	81cc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    844c:	f04f 0320 	mov.w	r3, #32
    8450:	f3ef 8c11 	mrs	ip, BASEPRI
    8454:	f383 8812 	msr	BASEPRI_MAX, r3
    8458:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    845c:	4b18      	ldr	r3, [pc, #96]	; (84c0 <rtc_nrf_isr+0xe8>)
    845e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    8462:	42b0      	cmp	r0, r6
    8464:	eb71 0207 	sbcs.w	r2, r1, r7
    8468:	f04f 0200 	mov.w	r2, #0
    846c:	d320      	bcc.n	84b0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    846e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    8472:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    8476:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    847a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    847e:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    8480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8484:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    8488:	f38c 8811 	msr	BASEPRI, ip
    848c:	f3bf 8f6f 	isb	sy
		if (handler) {
    8490:	b121      	cbz	r1, 849c <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    8492:	9500      	str	r5, [sp, #0]
    8494:	4632      	mov	r2, r6
    8496:	463b      	mov	r3, r7
    8498:	2000      	movs	r0, #0
    849a:	4788      	blx	r1
}
    849c:	b003      	add	sp, #12
    849e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    84a2:	2300      	movs	r3, #0
    84a4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    84a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    84ac:	2301      	movs	r3, #1
}
    84ae:	e7c6      	b.n	843e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    84b0:	4611      	mov	r1, r2
    84b2:	e7e9      	b.n	8488 <rtc_nrf_isr+0xb0>
    84b4:	40011000 	.word	0x40011000
    84b8:	20002038 	.word	0x20002038
    84bc:	20002030 	.word	0x20002030
    84c0:	20000e90 	.word	0x20000e90

000084c4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    84c4:	1c43      	adds	r3, r0, #1
{
    84c6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    84c8:	d021      	beq.n	850e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    84ca:	2801      	cmp	r0, #1
    84cc:	dd21      	ble.n	8512 <sys_clock_set_timeout+0x4e>
    84ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    84d2:	da20      	bge.n	8516 <sys_clock_set_timeout+0x52>
    84d4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    84d6:	f7ff fe79 	bl	81cc <z_nrf_rtc_timer_read>
    84da:	4b10      	ldr	r3, [pc, #64]	; (851c <sys_clock_set_timeout+0x58>)
    84dc:	e9d3 1300 	ldrd	r1, r3, [r3]
    84e0:	1a40      	subs	r0, r0, r1
		ticks = 0;
    84e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    84e6:	bf28      	it	cs
    84e8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    84ea:	3001      	adds	r0, #1
    84ec:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    84ee:	480c      	ldr	r0, [pc, #48]	; (8520 <sys_clock_set_timeout+0x5c>)
    84f0:	4282      	cmp	r2, r0
    84f2:	bf28      	it	cs
    84f4:	4602      	movcs	r2, r0
    84f6:	1852      	adds	r2, r2, r1
    84f8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    84fc:	4909      	ldr	r1, [pc, #36]	; (8524 <sys_clock_set_timeout+0x60>)
    84fe:	9001      	str	r0, [sp, #4]
    8500:	9100      	str	r1, [sp, #0]
    8502:	f143 0300 	adc.w	r3, r3, #0
    8506:	f7ff fe83 	bl	8210 <compare_set>
}
    850a:	b002      	add	sp, #8
    850c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    850e:	4804      	ldr	r0, [pc, #16]	; (8520 <sys_clock_set_timeout+0x5c>)
    8510:	e7e0      	b.n	84d4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8512:	2400      	movs	r4, #0
    8514:	e7df      	b.n	84d6 <sys_clock_set_timeout+0x12>
    8516:	4c02      	ldr	r4, [pc, #8]	; (8520 <sys_clock_set_timeout+0x5c>)
    8518:	e7dd      	b.n	84d6 <sys_clock_set_timeout+0x12>
    851a:	bf00      	nop
    851c:	20000ea0 	.word	0x20000ea0
    8520:	007fffff 	.word	0x007fffff
    8524:	000080f9 	.word	0x000080f9

00008528 <sys_clock_elapsed>:
{
    8528:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    852a:	f7ff fe4f 	bl	81cc <z_nrf_rtc_timer_read>
    852e:	4b02      	ldr	r3, [pc, #8]	; (8538 <sys_clock_elapsed+0x10>)
    8530:	681b      	ldr	r3, [r3, #0]
}
    8532:	1ac0      	subs	r0, r0, r3
    8534:	bd08      	pop	{r3, pc}
    8536:	bf00      	nop
    8538:	20000ea0 	.word	0x20000ea0

0000853c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    853c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8540:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8544:	2a08      	cmp	r2, #8
    8546:	d106      	bne.n	8556 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8548:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    854c:	2b05      	cmp	r3, #5
    854e:	d802      	bhi.n	8556 <nrf52_errata_103+0x1a>
    8550:	4a02      	ldr	r2, [pc, #8]	; (855c <nrf52_errata_103+0x20>)
    8552:	5cd0      	ldrb	r0, [r2, r3]
    8554:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    8556:	2000      	movs	r0, #0
    #endif
}
    8558:	4770      	bx	lr
    855a:	bf00      	nop
    855c:	000121a1 	.word	0x000121a1

00008560 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8560:	4a02      	ldr	r2, [pc, #8]	; (856c <nvmc_wait+0xc>)
    8562:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8566:	2b00      	cmp	r3, #0
    8568:	d0fb      	beq.n	8562 <nvmc_wait+0x2>
}
    856a:	4770      	bx	lr
    856c:	4001e000 	.word	0x4001e000

00008570 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    8570:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    8572:	f006 f9a7 	bl	e8c4 <nrf52_errata_136>
    8576:	b140      	cbz	r0, 858a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    857c:	2200      	movs	r2, #0
    857e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8582:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8586:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    858a:	f006 f99b 	bl	e8c4 <nrf52_errata_136>
    858e:	2800      	cmp	r0, #0
    8590:	d046      	beq.n	8620 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8596:	4b60      	ldr	r3, [pc, #384]	; (8718 <SystemInit+0x1a8>)
    8598:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    859c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    85a0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    85a4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    85a8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    85ac:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    85b0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    85b4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    85b8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    85bc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    85c0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    85c4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    85c8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    85cc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    85d0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    85d4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    85d8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    85dc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    85e0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    85e4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    85e8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    85ec:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    85f0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    85f4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    85f8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    85fc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8600:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8604:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8608:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    860c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8610:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8614:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8618:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    861c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8620:	f7ff ff8c 	bl	853c <nrf52_errata_103>
    8624:	b118      	cbz	r0, 862e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8626:	4b3d      	ldr	r3, [pc, #244]	; (871c <SystemInit+0x1ac>)
    8628:	4a3d      	ldr	r2, [pc, #244]	; (8720 <SystemInit+0x1b0>)
    862a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    862e:	f7ff ff85 	bl	853c <nrf52_errata_103>
    8632:	b118      	cbz	r0, 863c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8634:	4b3b      	ldr	r3, [pc, #236]	; (8724 <SystemInit+0x1b4>)
    8636:	22fb      	movs	r2, #251	; 0xfb
    8638:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    863c:	f7ff ff7e 	bl	853c <nrf52_errata_103>
    8640:	b170      	cbz	r0, 8660 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8642:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    864a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    864e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8652:	f022 020f 	bic.w	r2, r2, #15
    8656:	f003 030f 	and.w	r3, r3, #15
    865a:	4313      	orrs	r3, r2
    865c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8660:	f7ff ff6c 	bl	853c <nrf52_errata_103>
    8664:	b120      	cbz	r0, 8670 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8666:	4b30      	ldr	r3, [pc, #192]	; (8728 <SystemInit+0x1b8>)
    8668:	f44f 7200 	mov.w	r2, #512	; 0x200
    866c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8670:	f006 f928 	bl	e8c4 <nrf52_errata_136>
    8674:	b148      	cbz	r0, 868a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    867a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    867e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8680:	bf44      	itt	mi
    8682:	f06f 0201 	mvnmi.w	r2, #1
    8686:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    868a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    868e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8692:	2a08      	cmp	r2, #8
    8694:	d10e      	bne.n	86b4 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8696:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    869a:	2b05      	cmp	r3, #5
    869c:	d802      	bhi.n	86a4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    869e:	4a23      	ldr	r2, [pc, #140]	; (872c <SystemInit+0x1bc>)
    86a0:	5cd3      	ldrb	r3, [r2, r3]
    86a2:	b13b      	cbz	r3, 86b4 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    86a4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    86a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    86ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86b0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    86b4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    86b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    86bc:	2a00      	cmp	r2, #0
    86be:	db03      	blt.n	86c8 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    86c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    86c4:	2b00      	cmp	r3, #0
    86c6:	da22      	bge.n	870e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    86c8:	4919      	ldr	r1, [pc, #100]	; (8730 <SystemInit+0x1c0>)
    86ca:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    86cc:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    86d0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    86d4:	2412      	movs	r4, #18
    nvmc_wait();
    86d6:	f7ff ff43 	bl	8560 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    86da:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    86de:	f7ff ff3f 	bl	8560 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    86e2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    86e6:	f7ff ff3b 	bl	8560 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    86ea:	2300      	movs	r3, #0
    86ec:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    86f0:	f7ff ff36 	bl	8560 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    86f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    86f8:	490e      	ldr	r1, [pc, #56]	; (8734 <SystemInit+0x1c4>)
    86fa:	4b0f      	ldr	r3, [pc, #60]	; (8738 <SystemInit+0x1c8>)
    86fc:	68ca      	ldr	r2, [r1, #12]
    86fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8702:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8704:	60cb      	str	r3, [r1, #12]
    8706:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    870a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    870c:	e7fd      	b.n	870a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    870e:	4b0b      	ldr	r3, [pc, #44]	; (873c <SystemInit+0x1cc>)
    8710:	4a0b      	ldr	r2, [pc, #44]	; (8740 <SystemInit+0x1d0>)
    8712:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    8714:	bd10      	pop	{r4, pc}
    8716:	bf00      	nop
    8718:	4000c000 	.word	0x4000c000
    871c:	40005000 	.word	0x40005000
    8720:	00038148 	.word	0x00038148
    8724:	4000f000 	.word	0x4000f000
    8728:	40029000 	.word	0x40029000
    872c:	0001219b 	.word	0x0001219b
    8730:	4001e000 	.word	0x4001e000
    8734:	e000ed00 	.word	0xe000ed00
    8738:	05fa0004 	.word	0x05fa0004
    873c:	200001b0 	.word	0x200001b0
    8740:	03d09000 	.word	0x03d09000

00008744 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8744:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8746:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    8748:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    874a:	fab2 f382 	clz	r3, r2
    874e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    8752:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    8754:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    8756:	d014      	beq.n	8782 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8758:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    875c:	fa05 f303 	lsl.w	r3, r5, r3
    8760:	ea22 0303 	bic.w	r3, r2, r3
    8764:	e850 6f00 	ldrex	r6, [r0]
    8768:	4296      	cmp	r6, r2
    876a:	d104      	bne.n	8776 <nrfx_flag32_alloc+0x32>
    876c:	e840 3c00 	strex	ip, r3, [r0]
    8770:	f1bc 0f00 	cmp.w	ip, #0
    8774:	d1f6      	bne.n	8764 <nrfx_flag32_alloc+0x20>
    8776:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    877a:	d1e5      	bne.n	8748 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    877c:	4802      	ldr	r0, [pc, #8]	; (8788 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    877e:	700c      	strb	r4, [r1, #0]
}
    8780:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    8782:	4802      	ldr	r0, [pc, #8]	; (878c <nrfx_flag32_alloc+0x48>)
    8784:	e7fc      	b.n	8780 <nrfx_flag32_alloc+0x3c>
    8786:	bf00      	nop
    8788:	0bad0000 	.word	0x0bad0000
    878c:	0bad0002 	.word	0x0bad0002

00008790 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8790:	6803      	ldr	r3, [r0, #0]
    8792:	40cb      	lsrs	r3, r1
    8794:	07db      	lsls	r3, r3, #31
{
    8796:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    8798:	d415      	bmi.n	87c6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    879a:	2301      	movs	r3, #1
    879c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    87a0:	6803      	ldr	r3, [r0, #0]
    87a2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    87a6:	ea41 0203 	orr.w	r2, r1, r3
    87aa:	e850 4f00 	ldrex	r4, [r0]
    87ae:	429c      	cmp	r4, r3
    87b0:	d104      	bne.n	87bc <nrfx_flag32_free+0x2c>
    87b2:	e840 2c00 	strex	ip, r2, [r0]
    87b6:	f1bc 0f00 	cmp.w	ip, #0
    87ba:	d1f6      	bne.n	87aa <nrfx_flag32_free+0x1a>
    87bc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    87c0:	d1ee      	bne.n	87a0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    87c2:	4802      	ldr	r0, [pc, #8]	; (87cc <nrfx_flag32_free+0x3c>)
}
    87c4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    87c6:	4802      	ldr	r0, [pc, #8]	; (87d0 <nrfx_flag32_free+0x40>)
    87c8:	e7fc      	b.n	87c4 <nrfx_flag32_free+0x34>
    87ca:	bf00      	nop
    87cc:	0bad0000 	.word	0x0bad0000
    87d0:	0bad0004 	.word	0x0bad0004

000087d4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    87d4:	4b04      	ldr	r3, [pc, #16]	; (87e8 <nrfx_clock_init+0x14>)
    87d6:	791a      	ldrb	r2, [r3, #4]
    87d8:	b922      	cbnz	r2, 87e4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    87da:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    87dc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    87de:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    87e0:	4802      	ldr	r0, [pc, #8]	; (87ec <nrfx_clock_init+0x18>)
    87e2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    87e4:	4802      	ldr	r0, [pc, #8]	; (87f0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    87e6:	4770      	bx	lr
    87e8:	2000203c 	.word	0x2000203c
    87ec:	0bad0000 	.word	0x0bad0000
    87f0:	0bad000c 	.word	0x0bad000c

000087f4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    87f4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    87f6:	2000      	movs	r0, #0
    87f8:	f7fd f8bc 	bl	5974 <arch_irq_is_enabled>
    87fc:	b908      	cbnz	r0, 8802 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    87fe:	f7fd f895 	bl	592c <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    8802:	4b02      	ldr	r3, [pc, #8]	; (880c <nrfx_clock_enable+0x18>)
    8804:	2201      	movs	r2, #1
    8806:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8808:	bd08      	pop	{r3, pc}
    880a:	bf00      	nop
    880c:	20002350 	.word	0x20002350

00008810 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8810:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    8812:	b110      	cbz	r0, 881a <nrfx_clock_stop+0xa>
    8814:	2801      	cmp	r0, #1
    8816:	d017      	beq.n	8848 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8818:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    881a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    881e:	2302      	movs	r3, #2
    8820:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8824:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    8828:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    882c:	2301      	movs	r3, #1
    882e:	60e3      	str	r3, [r4, #12]
    8830:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8834:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    8838:	03db      	lsls	r3, r3, #15
    883a:	d5ed      	bpl.n	8818 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    883c:	2001      	movs	r0, #1
    883e:	f006 f84b 	bl	e8d8 <nrfx_busy_wait>
    8842:	3d01      	subs	r5, #1
    8844:	d1f6      	bne.n	8834 <nrfx_clock_stop+0x24>
    8846:	e7e7      	b.n	8818 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    8848:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    884c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    884e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8852:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    8856:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    885a:	6060      	str	r0, [r4, #4]
    885c:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8860:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8864:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    8868:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    886a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    886e:	d505      	bpl.n	887c <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    8870:	b123      	cbz	r3, 887c <nrfx_clock_stop+0x6c>
    8872:	2001      	movs	r0, #1
    8874:	f006 f830 	bl	e8d8 <nrfx_busy_wait>
    8878:	3d01      	subs	r5, #1
    887a:	d1f1      	bne.n	8860 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    887c:	4b01      	ldr	r3, [pc, #4]	; (8884 <nrfx_clock_stop+0x74>)
    887e:	2200      	movs	r2, #0
    8880:	715a      	strb	r2, [r3, #5]
    8882:	e7c9      	b.n	8818 <nrfx_clock_stop+0x8>
    8884:	2000203c 	.word	0x2000203c

00008888 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    888c:	b510      	push	{r4, lr}
    888e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8892:	b16a      	cbz	r2, 88b0 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8894:	2200      	movs	r2, #0
    8896:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    889a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    889e:	2201      	movs	r2, #1
    88a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    88a4:	4b11      	ldr	r3, [pc, #68]	; (88ec <nrfx_clock_irq_handler+0x64>)
    88a6:	7958      	ldrb	r0, [r3, #5]
    88a8:	b910      	cbnz	r0, 88b0 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    88aa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    88ac:	681b      	ldr	r3, [r3, #0]
    88ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    88b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    88b8:	b172      	cbz	r2, 88d8 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88ba:	2200      	movs	r2, #0
    88bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    88c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    88c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    88c8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    88cc:	0792      	lsls	r2, r2, #30
    88ce:	d104      	bne.n	88da <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    88d0:	2201      	movs	r2, #1
    88d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88d6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    88d8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    88da:	2202      	movs	r2, #2
    88dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    88e0:	4b02      	ldr	r3, [pc, #8]	; (88ec <nrfx_clock_irq_handler+0x64>)
}
    88e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    88e6:	681b      	ldr	r3, [r3, #0]
    88e8:	2001      	movs	r0, #1
    88ea:	4718      	bx	r3
    88ec:	2000203c 	.word	0x2000203c

000088f0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    88f0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    88f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    88f6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    88f8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    88fa:	6002      	str	r2, [r0, #0]
}
    88fc:	4802      	ldr	r0, [pc, #8]	; (8908 <nrf_gpio_pin_port_decode+0x18>)
    88fe:	bf18      	it	ne
    8900:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    8904:	4770      	bx	lr
    8906:	bf00      	nop
    8908:	50000300 	.word	0x50000300

0000890c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    890c:	4b03      	ldr	r3, [pc, #12]	; (891c <pin_in_use_by_te+0x10>)
    890e:	3008      	adds	r0, #8
    8910:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8914:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8918:	4770      	bx	lr
    891a:	bf00      	nop
    891c:	200001b4 	.word	0x200001b4

00008920 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8920:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8922:	f100 0308 	add.w	r3, r0, #8
    8926:	4c0c      	ldr	r4, [pc, #48]	; (8958 <call_handler+0x38>)
    8928:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    892c:	05da      	lsls	r2, r3, #23
{
    892e:	4605      	mov	r5, r0
    8930:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8932:	d507      	bpl.n	8944 <call_handler+0x24>
    8934:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    8938:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    893c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    8940:	6852      	ldr	r2, [r2, #4]
    8942:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    8944:	68a3      	ldr	r3, [r4, #8]
    8946:	b12b      	cbz	r3, 8954 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8948:	68e2      	ldr	r2, [r4, #12]
    894a:	4631      	mov	r1, r6
    894c:	4628      	mov	r0, r5
    }
}
    894e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8952:	4718      	bx	r3
}
    8954:	bd70      	pop	{r4, r5, r6, pc}
    8956:	bf00      	nop
    8958:	200001b4 	.word	0x200001b4

0000895c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    895c:	4a12      	ldr	r2, [pc, #72]	; (89a8 <release_handler+0x4c>)
    895e:	3008      	adds	r0, #8
{
    8960:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8962:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    8966:	05d9      	lsls	r1, r3, #23
    8968:	d51b      	bpl.n	89a2 <release_handler+0x46>
    896a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    896e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8972:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8976:	f102 0410 	add.w	r4, r2, #16
    897a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    897c:	f834 3b02 	ldrh.w	r3, [r4], #2
    8980:	f413 7f80 	tst.w	r3, #256	; 0x100
    8984:	d003      	beq.n	898e <release_handler+0x32>
    8986:	f3c3 2343 	ubfx	r3, r3, #9, #4
    898a:	4299      	cmp	r1, r3
    898c:	d009      	beq.n	89a2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    898e:	3001      	adds	r0, #1
    8990:	2830      	cmp	r0, #48	; 0x30
    8992:	d1f3      	bne.n	897c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    8994:	2300      	movs	r3, #0
    8996:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    899a:	4804      	ldr	r0, [pc, #16]	; (89ac <release_handler+0x50>)
}
    899c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    899e:	f7ff bef7 	b.w	8790 <nrfx_flag32_free>
}
    89a2:	bc10      	pop	{r4}
    89a4:	4770      	bx	lr
    89a6:	bf00      	nop
    89a8:	200001b4 	.word	0x200001b4
    89ac:	20000228 	.word	0x20000228

000089b0 <pin_handler_trigger_uninit>:
{
    89b0:	b538      	push	{r3, r4, r5, lr}
    89b2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    89b4:	f7ff ffaa 	bl	890c <pin_in_use_by_te>
    89b8:	4c09      	ldr	r4, [pc, #36]	; (89e0 <pin_handler_trigger_uninit+0x30>)
    89ba:	f102 0508 	add.w	r5, r2, #8
    89be:	b140      	cbz	r0, 89d2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    89c0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    89c4:	4907      	ldr	r1, [pc, #28]	; (89e4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    89c6:	0b5b      	lsrs	r3, r3, #13
    89c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    89cc:	2000      	movs	r0, #0
    89ce:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    89d2:	4610      	mov	r0, r2
    89d4:	f7ff ffc2 	bl	895c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    89d8:	2300      	movs	r3, #0
    89da:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    89de:	bd38      	pop	{r3, r4, r5, pc}
    89e0:	200001b4 	.word	0x200001b4
    89e4:	40006000 	.word	0x40006000

000089e8 <nrfx_gpiote_input_configure>:
{
    89e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    89ec:	4604      	mov	r4, r0
    89ee:	4617      	mov	r7, r2
    89f0:	461d      	mov	r5, r3
    if (p_input_config)
    89f2:	b321      	cbz	r1, 8a3e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    89f4:	4e4e      	ldr	r6, [pc, #312]	; (8b30 <nrfx_gpiote_input_configure+0x148>)
    89f6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    89fa:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    89fe:	079b      	lsls	r3, r3, #30
    8a00:	d506      	bpl.n	8a10 <nrfx_gpiote_input_configure+0x28>
    8a02:	f7ff ff83 	bl	890c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    8a06:	b118      	cbz	r0, 8a10 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    8a08:	484a      	ldr	r0, [pc, #296]	; (8b34 <nrfx_gpiote_input_configure+0x14c>)
}
    8a0a:	b004      	add	sp, #16
    8a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8a10:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8a12:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8a16:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    8a1a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8a1e:	f10d 020f 	add.w	r2, sp, #15
    8a22:	460b      	mov	r3, r1
    8a24:	4620      	mov	r0, r4
    8a26:	f10d 010e 	add.w	r1, sp, #14
    8a2a:	f005 ff83 	bl	e934 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8a2e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    8a32:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8a36:	f043 0301 	orr.w	r3, r3, #1
    8a3a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    8a3e:	b197      	cbz	r7, 8a66 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8a40:	4b3b      	ldr	r3, [pc, #236]	; (8b30 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    8a42:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8a44:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8a46:	f104 0008 	add.w	r0, r4, #8
    8a4a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    8a4e:	078f      	lsls	r7, r1, #30
    8a50:	d50c      	bpl.n	8a6c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    8a52:	2a00      	cmp	r2, #0
    8a54:	d1d8      	bne.n	8a08 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8a56:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    8a5a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    8a5e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    8a62:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    8a66:	bbcd      	cbnz	r5, 8adc <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    8a68:	4833      	ldr	r0, [pc, #204]	; (8b38 <nrfx_gpiote_input_configure+0x150>)
    8a6a:	e7ce      	b.n	8a0a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8a6c:	f021 0120 	bic.w	r1, r1, #32
    8a70:	04c9      	lsls	r1, r1, #19
    8a72:	0cc9      	lsrs	r1, r1, #19
    8a74:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    8a78:	2a00      	cmp	r2, #0
    8a7a:	d0ec      	beq.n	8a56 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    8a7c:	2e03      	cmp	r6, #3
    8a7e:	d8c3      	bhi.n	8a08 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8a80:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8a82:	b92e      	cbnz	r6, 8a90 <nrfx_gpiote_input_configure+0xa8>
    8a84:	4a2d      	ldr	r2, [pc, #180]	; (8b3c <nrfx_gpiote_input_configure+0x154>)
    8a86:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    8a8a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    8a8e:	e7e2      	b.n	8a56 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8a90:	00ba      	lsls	r2, r7, #2
    8a92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8a96:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8a9a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    8a9e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    8aa2:	f02c 0c03 	bic.w	ip, ip, #3
    8aa6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8aaa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    8aae:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    8ab2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    8ab6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8aba:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    8abe:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    8ac2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    8ac6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    8aca:	ea4c 0c0e 	orr.w	ip, ip, lr
    8ace:	f041 0120 	orr.w	r1, r1, #32
    8ad2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    8ad6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    8ada:	e7bc      	b.n	8a56 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8adc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    8ae0:	4620      	mov	r0, r4
    8ae2:	f7ff ff3b 	bl	895c <release_handler>
    if (!handler)
    8ae6:	2e00      	cmp	r6, #0
    8ae8:	d0be      	beq.n	8a68 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8aea:	4d11      	ldr	r5, [pc, #68]	; (8b30 <nrfx_gpiote_input_configure+0x148>)
    8aec:	682b      	ldr	r3, [r5, #0]
    8aee:	429e      	cmp	r6, r3
    8af0:	d104      	bne.n	8afc <nrfx_gpiote_input_configure+0x114>
    8af2:	686b      	ldr	r3, [r5, #4]
    8af4:	429f      	cmp	r7, r3
    8af6:	d101      	bne.n	8afc <nrfx_gpiote_input_configure+0x114>
    8af8:	2200      	movs	r2, #0
    8afa:	e00a      	b.n	8b12 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8afc:	4810      	ldr	r0, [pc, #64]	; (8b40 <nrfx_gpiote_input_configure+0x158>)
    8afe:	f10d 010f 	add.w	r1, sp, #15
    8b02:	f7ff fe1f 	bl	8744 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8b06:	4b0c      	ldr	r3, [pc, #48]	; (8b38 <nrfx_gpiote_input_configure+0x150>)
    8b08:	4298      	cmp	r0, r3
    8b0a:	f47f af7e 	bne.w	8a0a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    8b0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    8b12:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8b16:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8b1a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    8b1c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8b1e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    8b22:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    8b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8b2a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    8b2e:	e79b      	b.n	8a68 <nrfx_gpiote_input_configure+0x80>
    8b30:	200001b4 	.word	0x200001b4
    8b34:	0bad0004 	.word	0x0bad0004
    8b38:	0bad0000 	.word	0x0bad0000
    8b3c:	40006000 	.word	0x40006000
    8b40:	20000228 	.word	0x20000228

00008b44 <nrfx_gpiote_output_configure>:
{
    8b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b46:	4604      	mov	r4, r0
    8b48:	b085      	sub	sp, #20
    8b4a:	4615      	mov	r5, r2
    if (p_config)
    8b4c:	b319      	cbz	r1, 8b96 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8b4e:	4e33      	ldr	r6, [pc, #204]	; (8c1c <nrfx_gpiote_output_configure+0xd8>)
    8b50:	f100 0708 	add.w	r7, r0, #8
    8b54:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8b58:	0793      	lsls	r3, r2, #30
    8b5a:	d403      	bmi.n	8b64 <nrfx_gpiote_output_configure+0x20>
    8b5c:	f7ff fed6 	bl	890c <pin_in_use_by_te>
    8b60:	2800      	cmp	r0, #0
    8b62:	d158      	bne.n	8c16 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8b64:	f012 0f1c 	tst.w	r2, #28
    8b68:	d002      	beq.n	8b70 <nrfx_gpiote_output_configure+0x2c>
    8b6a:	784b      	ldrb	r3, [r1, #1]
    8b6c:	2b01      	cmp	r3, #1
    8b6e:	d052      	beq.n	8c16 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    8b70:	2301      	movs	r3, #1
    8b72:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    8b76:	2300      	movs	r3, #0
    8b78:	e9cd 1300 	strd	r1, r3, [sp]
    8b7c:	1c4a      	adds	r2, r1, #1
    8b7e:	1c8b      	adds	r3, r1, #2
    8b80:	4620      	mov	r0, r4
    8b82:	f10d 010f 	add.w	r1, sp, #15
    8b86:	f005 fed5 	bl	e934 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8b8a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    8b8e:	f043 0303 	orr.w	r3, r3, #3
    8b92:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    8b96:	b915      	cbnz	r5, 8b9e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    8b98:	4821      	ldr	r0, [pc, #132]	; (8c20 <nrfx_gpiote_output_configure+0xdc>)
}
    8b9a:	b005      	add	sp, #20
    8b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8b9e:	4e1f      	ldr	r6, [pc, #124]	; (8c1c <nrfx_gpiote_output_configure+0xd8>)
    8ba0:	f104 0708 	add.w	r7, r4, #8
    8ba4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    8ba8:	0783      	lsls	r3, r0, #30
    8baa:	d534      	bpl.n	8c16 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    8bac:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    8bb0:	4661      	mov	r1, ip
    8bb2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8bb4:	f020 0020 	bic.w	r0, r0, #32
    8bb8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    8bbc:	04c0      	lsls	r0, r0, #19
    8bbe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    8bc2:	0cc0      	lsrs	r0, r0, #19
    8bc4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8bc8:	2300      	movs	r3, #0
    8bca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    8bce:	786a      	ldrb	r2, [r5, #1]
    8bd0:	2a00      	cmp	r2, #0
    8bd2:	d0e1      	beq.n	8b98 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    8bd4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    8bd8:	78ad      	ldrb	r5, [r5, #2]
    8bda:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    8bde:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8be2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8be6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    8bea:	0223      	lsls	r3, r4, #8
    8bec:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8bf0:	0412      	lsls	r2, r2, #16
    8bf2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8bf6:	ea43 030e 	orr.w	r3, r3, lr
    8bfa:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8bfc:	052a      	lsls	r2, r5, #20
    8bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8c02:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8c06:	4313      	orrs	r3, r2
    8c08:	f040 0020 	orr.w	r0, r0, #32
    8c0c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8c10:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    8c14:	e7c0      	b.n	8b98 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    8c16:	4803      	ldr	r0, [pc, #12]	; (8c24 <nrfx_gpiote_output_configure+0xe0>)
    8c18:	e7bf      	b.n	8b9a <nrfx_gpiote_output_configure+0x56>
    8c1a:	bf00      	nop
    8c1c:	200001b4 	.word	0x200001b4
    8c20:	0bad0000 	.word	0x0bad0000
    8c24:	0bad0004 	.word	0x0bad0004

00008c28 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8c28:	4b01      	ldr	r3, [pc, #4]	; (8c30 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    8c2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    8c2e:	4770      	bx	lr
    8c30:	200001b4 	.word	0x200001b4

00008c34 <nrfx_gpiote_channel_get>:
{
    8c34:	b508      	push	{r3, lr}
    8c36:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8c38:	f7ff fe68 	bl	890c <pin_in_use_by_te>
    8c3c:	b138      	cbz	r0, 8c4e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8c3e:	4b05      	ldr	r3, [pc, #20]	; (8c54 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    8c40:	4805      	ldr	r0, [pc, #20]	; (8c58 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8c42:	3208      	adds	r2, #8
    8c44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8c48:	0b5b      	lsrs	r3, r3, #13
    8c4a:	700b      	strb	r3, [r1, #0]
}
    8c4c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8c4e:	4803      	ldr	r0, [pc, #12]	; (8c5c <nrfx_gpiote_channel_get+0x28>)
    8c50:	e7fc      	b.n	8c4c <nrfx_gpiote_channel_get+0x18>
    8c52:	bf00      	nop
    8c54:	200001b4 	.word	0x200001b4
    8c58:	0bad0000 	.word	0x0bad0000
    8c5c:	0bad0004 	.word	0x0bad0004

00008c60 <nrfx_gpiote_init>:
{
    8c60:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8c62:	4c0f      	ldr	r4, [pc, #60]	; (8ca0 <nrfx_gpiote_init+0x40>)
    8c64:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    8c68:	b9bd      	cbnz	r5, 8c9a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    8c6a:	2260      	movs	r2, #96	; 0x60
    8c6c:	4629      	mov	r1, r5
    8c6e:	f104 0010 	add.w	r0, r4, #16
    8c72:	f005 fac8 	bl	e206 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8c76:	2006      	movs	r0, #6
    8c78:	f7fc fe58 	bl	592c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8c7c:	4b09      	ldr	r3, [pc, #36]	; (8ca4 <nrfx_gpiote_init+0x44>)
    return err_code;
    8c7e:	480a      	ldr	r0, [pc, #40]	; (8ca8 <nrfx_gpiote_init+0x48>)
    8c80:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    8c84:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    8c88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8c8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8c90:	2301      	movs	r3, #1
    8c92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8c96:	6763      	str	r3, [r4, #116]	; 0x74
}
    8c98:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    8c9a:	4804      	ldr	r0, [pc, #16]	; (8cac <nrfx_gpiote_init+0x4c>)
    8c9c:	e7fc      	b.n	8c98 <nrfx_gpiote_init+0x38>
    8c9e:	bf00      	nop
    8ca0:	200001b4 	.word	0x200001b4
    8ca4:	40006000 	.word	0x40006000
    8ca8:	0bad0000 	.word	0x0bad0000
    8cac:	0bad0005 	.word	0x0bad0005

00008cb0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8cb0:	4b03      	ldr	r3, [pc, #12]	; (8cc0 <nrfx_gpiote_is_init+0x10>)
    8cb2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    8cb6:	3800      	subs	r0, #0
    8cb8:	bf18      	it	ne
    8cba:	2001      	movne	r0, #1
    8cbc:	4770      	bx	lr
    8cbe:	bf00      	nop
    8cc0:	200001b4 	.word	0x200001b4

00008cc4 <nrfx_gpiote_channel_free>:
{
    8cc4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8cc6:	4801      	ldr	r0, [pc, #4]	; (8ccc <nrfx_gpiote_channel_free+0x8>)
    8cc8:	f7ff bd62 	b.w	8790 <nrfx_flag32_free>
    8ccc:	20000224 	.word	0x20000224

00008cd0 <nrfx_gpiote_channel_alloc>:
{
    8cd0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8cd2:	4801      	ldr	r0, [pc, #4]	; (8cd8 <nrfx_gpiote_channel_alloc+0x8>)
    8cd4:	f7ff bd36 	b.w	8744 <nrfx_flag32_alloc>
    8cd8:	20000224 	.word	0x20000224

00008cdc <nrfx_gpiote_trigger_enable>:
{
    8cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8cde:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8ce0:	f7ff fe14 	bl	890c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8ce4:	f104 0208 	add.w	r2, r4, #8
    8ce8:	4b1e      	ldr	r3, [pc, #120]	; (8d64 <nrfx_gpiote_trigger_enable+0x88>)
    8cea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8cee:	b1e8      	cbz	r0, 8d2c <nrfx_gpiote_trigger_enable+0x50>
    8cf0:	f013 0502 	ands.w	r5, r3, #2
    8cf4:	d11a      	bne.n	8d2c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8cf6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8cf8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    8cfa:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    8cfe:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    8d02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8d06:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8d0a:	6005      	str	r5, [r0, #0]
    8d0c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8d0e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8d12:	f040 0001 	orr.w	r0, r0, #1
    8d16:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    8d1a:	b129      	cbz	r1, 8d28 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    8d1c:	2201      	movs	r2, #1
    8d1e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    8d22:	4a11      	ldr	r2, [pc, #68]	; (8d68 <nrfx_gpiote_trigger_enable+0x8c>)
    8d24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8d28:	b003      	add	sp, #12
    8d2a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8d2c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    8d30:	2b04      	cmp	r3, #4
    8d32:	d012      	beq.n	8d5a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8d34:	2b05      	cmp	r3, #5
    8d36:	d012      	beq.n	8d5e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8d38:	a801      	add	r0, sp, #4
    8d3a:	9401      	str	r4, [sp, #4]
    8d3c:	f7ff fdd8 	bl	88f0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8d40:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    8d42:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8d46:	40d9      	lsrs	r1, r3
    8d48:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8d4c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    8d4e:	4620      	mov	r0, r4
}
    8d50:	b003      	add	sp, #12
    8d52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    8d56:	f005 be34 	b.w	e9c2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    8d5a:	2103      	movs	r1, #3
    8d5c:	e7f7      	b.n	8d4e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    8d5e:	2102      	movs	r1, #2
    8d60:	e7f5      	b.n	8d4e <nrfx_gpiote_trigger_enable+0x72>
    8d62:	bf00      	nop
    8d64:	200001b4 	.word	0x200001b4
    8d68:	40006000 	.word	0x40006000

00008d6c <nrfx_gpiote_trigger_disable>:
{
    8d6c:	b508      	push	{r3, lr}
    8d6e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d70:	f7ff fdcc 	bl	890c <pin_in_use_by_te>
    8d74:	b1c0      	cbz	r0, 8da8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8d76:	f102 0108 	add.w	r1, r2, #8
    8d7a:	4b0e      	ldr	r3, [pc, #56]	; (8db4 <nrfx_gpiote_trigger_disable+0x48>)
    8d7c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d80:	0799      	lsls	r1, r3, #30
    8d82:	d411      	bmi.n	8da8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8d84:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    8d86:	2201      	movs	r2, #1
    8d88:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    8d8a:	009b      	lsls	r3, r3, #2
    8d8c:	490a      	ldr	r1, [pc, #40]	; (8db8 <nrfx_gpiote_trigger_disable+0x4c>)
    8d8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8d92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8d96:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8d9a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8d9e:	f022 0203 	bic.w	r2, r2, #3
    8da2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    8da6:	bd08      	pop	{r3, pc}
    8da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8dac:	2100      	movs	r1, #0
    8dae:	4610      	mov	r0, r2
    8db0:	f005 be07 	b.w	e9c2 <nrf_gpio_cfg_sense_set>
    8db4:	200001b4 	.word	0x200001b4
    8db8:	40006000 	.word	0x40006000

00008dbc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8dbc:	4b0e      	ldr	r3, [pc, #56]	; (8df8 <nrfx_gpiote_pin_uninit+0x3c>)
    8dbe:	f100 0208 	add.w	r2, r0, #8
{
    8dc2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8dc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    8dc8:	07db      	lsls	r3, r3, #31
{
    8dca:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8dcc:	d511      	bpl.n	8df2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    8dce:	f7ff ffcd 	bl	8d6c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8dd2:	4620      	mov	r0, r4
    8dd4:	f7ff fdec 	bl	89b0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8dd8:	a801      	add	r0, sp, #4
    8dda:	9401      	str	r4, [sp, #4]
    8ddc:	f7ff fd88 	bl	88f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8de0:	9b01      	ldr	r3, [sp, #4]
    8de2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8de6:	2202      	movs	r2, #2
    8de8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    8dec:	4803      	ldr	r0, [pc, #12]	; (8dfc <nrfx_gpiote_pin_uninit+0x40>)
}
    8dee:	b002      	add	sp, #8
    8df0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8df2:	4803      	ldr	r0, [pc, #12]	; (8e00 <nrfx_gpiote_pin_uninit+0x44>)
    8df4:	e7fb      	b.n	8dee <nrfx_gpiote_pin_uninit+0x32>
    8df6:	bf00      	nop
    8df8:	200001b4 	.word	0x200001b4
    8dfc:	0bad0000 	.word	0x0bad0000
    8e00:	0bad0004 	.word	0x0bad0004

00008e04 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    8e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e08:	4b64      	ldr	r3, [pc, #400]	; (8f9c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    8e0a:	4865      	ldr	r0, [pc, #404]	; (8fa0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e0c:	4965      	ldr	r1, [pc, #404]	; (8fa4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    8e0e:	2600      	movs	r6, #0
{
    8e10:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8e12:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8e14:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e16:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8e18:	b135      	cbz	r5, 8e28 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    8e1a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    8e1e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8e20:	bf1e      	ittt	ne
    8e22:	601c      	strne	r4, [r3, #0]
    8e24:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    8e26:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e28:	3304      	adds	r3, #4
    8e2a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    8e2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e30:	d1f1      	bne.n	8e16 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e32:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8fa0 <nrfx_gpiote_irq_handler+0x19c>
    8e36:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8e3a:	2b00      	cmp	r3, #0
    8e3c:	f000 8091 	beq.w	8f62 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    8e40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e44:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8e48:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8e4a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8e4e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    8e52:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8e54:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8e58:	2700      	movs	r7, #0
            while (latch[i])
    8e5a:	f10d 0910 	add.w	r9, sp, #16
    8e5e:	017b      	lsls	r3, r7, #5
    8e60:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    8e62:	f04f 0a01 	mov.w	sl, #1
    8e66:	e049      	b.n	8efc <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    8e68:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8e6a:	4a4f      	ldr	r2, [pc, #316]	; (8fa8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    8e6c:	fa94 f4a4 	rbit	r4, r4
    8e70:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    8e74:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8e76:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    8e7a:	08e0      	lsrs	r0, r4, #3
    8e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    8e80:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    8e82:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8e86:	fa0a fc02 	lsl.w	ip, sl, r2
    8e8a:	f819 2000 	ldrb.w	r2, [r9, r0]
    8e8e:	ea22 020c 	bic.w	r2, r2, ip
    8e92:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8e96:	a803      	add	r0, sp, #12
    8e98:	f3c3 0582 	ubfx	r5, r3, #2, #3
    8e9c:	0899      	lsrs	r1, r3, #2
    8e9e:	f7ff fd27 	bl	88f0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8ea2:	9a03      	ldr	r2, [sp, #12]
    8ea4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    8ea8:	074b      	lsls	r3, r1, #29
    8eaa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8eae:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8eb0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    8eb4:	d529      	bpl.n	8f0a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    8eb6:	4620      	mov	r0, r4
    8eb8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8eba:	b2d5      	uxtb	r5, r2
    8ebc:	f7ff fd30 	bl	8920 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8ec0:	a803      	add	r0, sp, #12
    8ec2:	9403      	str	r4, [sp, #12]
    8ec4:	f7ff fd14 	bl	88f0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8ec8:	9b03      	ldr	r3, [sp, #12]
    8eca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8ece:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8ed2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    8ed6:	429d      	cmp	r5, r3
    8ed8:	d107      	bne.n	8eea <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8eda:	2100      	movs	r1, #0
    8edc:	4620      	mov	r0, r4
    8ede:	f005 fd70 	bl	e9c2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    8ee2:	4629      	mov	r1, r5
    8ee4:	4620      	mov	r0, r4
    8ee6:	f005 fd6c 	bl	e9c2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8eea:	a803      	add	r0, sp, #12
    8eec:	9403      	str	r4, [sp, #12]
    8eee:	f7ff fcff 	bl	88f0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    8ef2:	9b03      	ldr	r3, [sp, #12]
    8ef4:	fa0a f303 	lsl.w	r3, sl, r3
    8ef8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    8efc:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    8f00:	2c00      	cmp	r4, #0
    8f02:	d1b1      	bne.n	8e68 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8f04:	b9cf      	cbnz	r7, 8f3a <nrfx_gpiote_irq_handler+0x136>
    8f06:	2701      	movs	r7, #1
    8f08:	e7a9      	b.n	8e5e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8f0a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8f0c:	bf0c      	ite	eq
    8f0e:	2103      	moveq	r1, #3
    8f10:	2102      	movne	r1, #2
    8f12:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8f14:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8f16:	f005 fd54 	bl	e9c2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8f1a:	2d03      	cmp	r5, #3
    8f1c:	d004      	beq.n	8f28 <nrfx_gpiote_irq_handler+0x124>
    8f1e:	9a01      	ldr	r2, [sp, #4]
    8f20:	2a02      	cmp	r2, #2
    8f22:	d106      	bne.n	8f32 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8f24:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8f26:	d1e0      	bne.n	8eea <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    8f28:	4659      	mov	r1, fp
    8f2a:	4620      	mov	r0, r4
    8f2c:	f7ff fcf8 	bl	8920 <call_handler>
    8f30:	e7db      	b.n	8eea <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8f32:	2a03      	cmp	r2, #3
    8f34:	d1d9      	bne.n	8eea <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8f36:	2d02      	cmp	r5, #2
    8f38:	e7f5      	b.n	8f26 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8f3a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    8f3e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    8f42:	491a      	ldr	r1, [pc, #104]	; (8fac <nrfx_gpiote_irq_handler+0x1a8>)
    8f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f48:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8f4c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8f4e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8f52:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    8f56:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8f58:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    8f5c:	4313      	orrs	r3, r2
    8f5e:	f47f af7b 	bne.w	8e58 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    8f62:	2401      	movs	r4, #1
    while (mask)
    8f64:	b916      	cbnz	r6, 8f6c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    8f66:	b007      	add	sp, #28
    8f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    8f6c:	fa96 f3a6 	rbit	r3, r6
    8f70:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8f74:	fa04 f203 	lsl.w	r2, r4, r3
    8f78:	009b      	lsls	r3, r3, #2
    8f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8f7e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8f82:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8f86:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8f8a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8f8e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    8f92:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8f96:	f7ff fcc3 	bl	8920 <call_handler>
    8f9a:	e7e3      	b.n	8f64 <nrfx_gpiote_irq_handler+0x160>
    8f9c:	40006100 	.word	0x40006100
    8fa0:	40006000 	.word	0x40006000
    8fa4:	40006120 	.word	0x40006120
    8fa8:	200001b4 	.word	0x200001b4
    8fac:	50000300 	.word	0x50000300

00008fb0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8fb0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8fb2:	4c18      	ldr	r4, [pc, #96]	; (9014 <nrfx_power_init+0x64>)
    8fb4:	7823      	ldrb	r3, [r4, #0]
    8fb6:	bb53      	cbnz	r3, 900e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    8fb8:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    8fba:	0791      	lsls	r1, r2, #30
    8fbc:	f3c2 0340 	ubfx	r3, r2, #1, #1
    8fc0:	d511      	bpl.n	8fe6 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8fc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8fc6:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
    8fca:	2908      	cmp	r1, #8
    8fcc:	d11d      	bne.n	900a <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8fce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    8fd2:	2b05      	cmp	r3, #5
    8fd4:	d819      	bhi.n	900a <nrfx_power_init+0x5a>
    8fd6:	4910      	ldr	r1, [pc, #64]	; (9018 <nrfx_power_init+0x68>)
    8fd8:	5cc9      	ldrb	r1, [r1, r3]
    8fda:	2301      	movs	r3, #1
    8fdc:	b119      	cbz	r1, 8fe6 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    8fde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8fe2:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8fe6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8fea:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8fee:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8ff2:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8ff4:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    8ff8:	f7fc fcbc 	bl	5974 <arch_irq_is_enabled>
    8ffc:	b908      	cbnz	r0, 9002 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8ffe:	f7fc fc95 	bl	592c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    9002:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    9004:	4805      	ldr	r0, [pc, #20]	; (901c <nrfx_power_init+0x6c>)
    m_initialized = true;
    9006:	7023      	strb	r3, [r4, #0]
}
    9008:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    900a:	2301      	movs	r3, #1
    900c:	e7eb      	b.n	8fe6 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    900e:	4804      	ldr	r0, [pc, #16]	; (9020 <nrfx_power_init+0x70>)
    9010:	e7fa      	b.n	9008 <nrfx_power_init+0x58>
    9012:	bf00      	nop
    9014:	20002351 	.word	0x20002351
    9018:	000121a7 	.word	0x000121a7
    901c:	0bad0000 	.word	0x0bad0000
    9020:	0bad000c 	.word	0x0bad000c

00009024 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    9024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9028:	f44f 7260 	mov.w	r2, #896	; 0x380
    902c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    9030:	4b01      	ldr	r3, [pc, #4]	; (9038 <nrfx_power_usbevt_uninit+0x14>)
    9032:	2200      	movs	r2, #0
    9034:	601a      	str	r2, [r3, #0]
}
    9036:	4770      	bx	lr
    9038:	2000204c 	.word	0x2000204c

0000903c <nrfx_power_usbevt_init>:
{
    903c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    903e:	f7ff fff1 	bl	9024 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    9042:	6803      	ldr	r3, [r0, #0]
    9044:	b10b      	cbz	r3, 904a <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    9046:	4a01      	ldr	r2, [pc, #4]	; (904c <nrfx_power_usbevt_init+0x10>)
    9048:	6013      	str	r3, [r2, #0]
}
    904a:	bd08      	pop	{r3, pc}
    904c:	2000204c 	.word	0x2000204c

00009050 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    9050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    9054:	b510      	push	{r4, lr}
    9056:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    905a:	0762      	lsls	r2, r4, #29
    905c:	d507      	bpl.n	906e <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    905e:	f44f 7084 	mov.w	r0, #264	; 0x108
    9062:	f005 fcbd 	bl	e9e0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    9066:	b110      	cbz	r0, 906e <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    9068:	4b1e      	ldr	r3, [pc, #120]	; (90e4 <nrfx_power_irq_handler+0x94>)
    906a:	681b      	ldr	r3, [r3, #0]
    906c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    906e:	06a3      	lsls	r3, r4, #26
    9070:	d508      	bpl.n	9084 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    9072:	f44f 708a 	mov.w	r0, #276	; 0x114
    9076:	f005 fcb3 	bl	e9e0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    907a:	b118      	cbz	r0, 9084 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    907c:	4b1a      	ldr	r3, [pc, #104]	; (90e8 <nrfx_power_irq_handler+0x98>)
    907e:	2000      	movs	r0, #0
    9080:	681b      	ldr	r3, [r3, #0]
    9082:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    9084:	0660      	lsls	r0, r4, #25
    9086:	d508      	bpl.n	909a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    9088:	f44f 708c 	mov.w	r0, #280	; 0x118
    908c:	f005 fca8 	bl	e9e0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    9090:	b118      	cbz	r0, 909a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    9092:	4b15      	ldr	r3, [pc, #84]	; (90e8 <nrfx_power_irq_handler+0x98>)
    9094:	2001      	movs	r0, #1
    9096:	681b      	ldr	r3, [r3, #0]
    9098:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    909a:	0621      	lsls	r1, r4, #24
    909c:	d508      	bpl.n	90b0 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    909e:	f44f 708e 	mov.w	r0, #284	; 0x11c
    90a2:	f005 fc9d 	bl	e9e0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    90a6:	b118      	cbz	r0, 90b0 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    90a8:	4b10      	ldr	r3, [pc, #64]	; (90ec <nrfx_power_irq_handler+0x9c>)
    90aa:	2000      	movs	r0, #0
    90ac:	681b      	ldr	r3, [r3, #0]
    90ae:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    90b0:	05e2      	lsls	r2, r4, #23
    90b2:	d508      	bpl.n	90c6 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    90b4:	f44f 7090 	mov.w	r0, #288	; 0x120
    90b8:	f005 fc92 	bl	e9e0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    90bc:	b118      	cbz	r0, 90c6 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    90be:	4b0b      	ldr	r3, [pc, #44]	; (90ec <nrfx_power_irq_handler+0x9c>)
    90c0:	2001      	movs	r0, #1
    90c2:	681b      	ldr	r3, [r3, #0]
    90c4:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    90c6:	05a3      	lsls	r3, r4, #22
    90c8:	d50a      	bpl.n	90e0 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    90ca:	f44f 7092 	mov.w	r0, #292	; 0x124
    90ce:	f005 fc87 	bl	e9e0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    90d2:	b128      	cbz	r0, 90e0 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    90d4:	4b05      	ldr	r3, [pc, #20]	; (90ec <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    90d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    90da:	681b      	ldr	r3, [r3, #0]
    90dc:	2002      	movs	r0, #2
    90de:	4718      	bx	r3
}
    90e0:	bd10      	pop	{r4, pc}
    90e2:	bf00      	nop
    90e4:	20002044 	.word	0x20002044
    90e8:	20002048 	.word	0x20002048
    90ec:	2000204c 	.word	0x2000204c

000090f0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    90f0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    90f2:	4801      	ldr	r0, [pc, #4]	; (90f8 <nrfx_ppi_channel_alloc+0x8>)
    90f4:	f7ff bb26 	b.w	8744 <nrfx_flag32_alloc>
    90f8:	20000230 	.word	0x20000230

000090fc <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    90fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9100:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9104:	2a08      	cmp	r2, #8
    9106:	d106      	bne.n	9116 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9108:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    910c:	2b05      	cmp	r3, #5
    910e:	d804      	bhi.n	911a <nrf52_errata_187+0x1e>
    9110:	4a03      	ldr	r2, [pc, #12]	; (9120 <nrf52_errata_187+0x24>)
    9112:	5cd0      	ldrb	r0, [r2, r3]
    9114:	4770      	bx	lr
        return false;
    9116:	2000      	movs	r0, #0
    9118:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    911a:	2001      	movs	r0, #1
}
    911c:	4770      	bx	lr
    911e:	bf00      	nop
    9120:	000121ad 	.word	0x000121ad

00009124 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9124:	4b05      	ldr	r3, [pc, #20]	; (913c <ep_state_access+0x18>)
    9126:	f010 0f80 	tst.w	r0, #128	; 0x80
    912a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    912e:	bf08      	it	eq
    9130:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    9132:	f000 000f 	and.w	r0, r0, #15
}
    9136:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    913a:	4770      	bx	lr
    913c:	200021c0 	.word	0x200021c0

00009140 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    9140:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9142:	f005 fc6e 	bl	ea22 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    9146:	b118      	cbz	r0, 9150 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9148:	4b03      	ldr	r3, [pc, #12]	; (9158 <usbd_dma_pending_clear+0x18>)
    914a:	2200      	movs	r2, #0
    914c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
    9150:	4b02      	ldr	r3, [pc, #8]	; (915c <usbd_dma_pending_clear+0x1c>)
    9152:	2200      	movs	r2, #0
    9154:	701a      	strb	r2, [r3, #0]
}
    9156:	bd08      	pop	{r3, pc}
    9158:	40027000 	.word	0x40027000
    915c:	20002353 	.word	0x20002353

00009160 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    9160:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    9162:	4a09      	ldr	r2, [pc, #36]	; (9188 <ev_usbreset_handler+0x28>)
    9164:	2300      	movs	r3, #0
    9166:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9168:	4a08      	ldr	r2, [pc, #32]	; (918c <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    916a:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    916e:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    9170:	f88d 3007 	strb.w	r3, [sp, #7]
    9174:	2301      	movs	r3, #1
    9176:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    917a:	4b05      	ldr	r3, [pc, #20]	; (9190 <ev_usbreset_handler+0x30>)
    917c:	a801      	add	r0, sp, #4
    917e:	681b      	ldr	r3, [r3, #0]
    9180:	4798      	blx	r3
}
    9182:	b003      	add	sp, #12
    9184:	f85d fb04 	ldr.w	pc, [sp], #4
    9188:	20002352 	.word	0x20002352
    918c:	20002355 	.word	0x20002355
    9190:	20002250 	.word	0x20002250

00009194 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    9194:	4b21      	ldr	r3, [pc, #132]	; (921c <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    9196:	b513      	push	{r0, r1, r4, lr}
    9198:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    919c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    91a0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    91a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    91a6:	d50e      	bpl.n	91c6 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    91a8:	4b1d      	ldr	r3, [pc, #116]	; (9220 <ev_usbevent_handler+0x8c>)
    91aa:	2201      	movs	r2, #1
    91ac:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    91ae:	2300      	movs	r3, #0
    91b0:	f8ad 3005 	strh.w	r3, [sp, #5]
    91b4:	f88d 3007 	strb.w	r3, [sp, #7]
    91b8:	2302      	movs	r3, #2
    91ba:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    91be:	4b19      	ldr	r3, [pc, #100]	; (9224 <ev_usbevent_handler+0x90>)
    91c0:	a801      	add	r0, sp, #4
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    91c6:	05a2      	lsls	r2, r4, #22
    91c8:	d50d      	bpl.n	91e6 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    91ca:	4a15      	ldr	r2, [pc, #84]	; (9220 <ev_usbevent_handler+0x8c>)
    91cc:	2300      	movs	r3, #0
    91ce:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    91d0:	f8ad 3005 	strh.w	r3, [sp, #5]
    91d4:	f88d 3007 	strb.w	r3, [sp, #7]
    91d8:	2303      	movs	r3, #3
    91da:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    91de:	4b11      	ldr	r3, [pc, #68]	; (9224 <ev_usbevent_handler+0x90>)
    91e0:	a801      	add	r0, sp, #4
    91e2:	681b      	ldr	r3, [r3, #0]
    91e4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    91e6:	0563      	lsls	r3, r4, #21
    91e8:	d515      	bpl.n	9216 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    91ea:	4a0d      	ldr	r2, [pc, #52]	; (9220 <ev_usbevent_handler+0x8c>)
    91ec:	7813      	ldrb	r3, [r2, #0]
    91ee:	b193      	cbz	r3, 9216 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    91f0:	2300      	movs	r3, #0
    91f2:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    91f4:	4a09      	ldr	r2, [pc, #36]	; (921c <ev_usbevent_handler+0x88>)
    91f6:	2101      	movs	r1, #1
    91f8:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    91fc:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    91fe:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    9200:	f8ad 3005 	strh.w	r3, [sp, #5]
    9204:	f88d 3007 	strb.w	r3, [sp, #7]
    9208:	2304      	movs	r3, #4
    920a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    920e:	4b05      	ldr	r3, [pc, #20]	; (9224 <ev_usbevent_handler+0x90>)
    9210:	a801      	add	r0, sp, #4
    9212:	681b      	ldr	r3, [r3, #0]
    9214:	4798      	blx	r3
        }
    }
}
    9216:	b002      	add	sp, #8
    9218:	bd10      	pop	{r4, pc}
    921a:	bf00      	nop
    921c:	40027000 	.word	0x40027000
    9220:	20002352 	.word	0x20002352
    9224:	20002250 	.word	0x20002250

00009228 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    9228:	f04f 0320 	mov.w	r3, #32
    922c:	f3ef 8011 	mrs	r0, BASEPRI
    9230:	f383 8812 	msr	BASEPRI_MAX, r3
    9234:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9238:	4b0a      	ldr	r3, [pc, #40]	; (9264 <usbd_errata_187_211_begin+0x3c>)
    923a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    923e:	2203      	movs	r2, #3
    9240:	b961      	cbnz	r1, 925c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9242:	f249 3175 	movw	r1, #37749	; 0x9375
    9246:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    924a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    924e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9252:	f380 8811 	msr	BASEPRI, r0
    9256:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    925a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    925c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    9260:	e7f7      	b.n	9252 <usbd_errata_187_211_begin+0x2a>
    9262:	bf00      	nop
    9264:	4006e000 	.word	0x4006e000

00009268 <usbd_errata_187_211_end>:
	__asm__ volatile(
    9268:	f04f 0320 	mov.w	r3, #32
    926c:	f3ef 8011 	mrs	r0, BASEPRI
    9270:	f383 8812 	msr	BASEPRI_MAX, r3
    9274:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9278:	4b0a      	ldr	r3, [pc, #40]	; (92a4 <usbd_errata_187_211_end+0x3c>)
    927a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    927e:	b961      	cbnz	r1, 929a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9280:	f249 3275 	movw	r2, #37749	; 0x9375
    9284:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9288:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    928c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9290:	f380 8811 	msr	BASEPRI, r0
    9294:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9298:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    929a:	2200      	movs	r2, #0
    929c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    92a0:	e7f6      	b.n	9290 <usbd_errata_187_211_end+0x28>
    92a2:	bf00      	nop
    92a4:	4006e000 	.word	0x4006e000

000092a8 <nrfx_usbd_feeder_flash>:
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    92aa:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    92ac:	4f0b      	ldr	r7, [pc, #44]	; (92dc <nrfx_usbd_feeder_flash+0x34>)
    92ae:	4295      	cmp	r5, r2
    92b0:	bf28      	it	cs
    92b2:	4615      	movcs	r5, r2
{
    92b4:	460c      	mov	r4, r1
    92b6:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    92b8:	462a      	mov	r2, r5
    92ba:	6809      	ldr	r1, [r1, #0]
    92bc:	4638      	mov	r0, r7
    92be:	f004 ff97 	bl	e1f0 <memcpy>
    p_transfer->size -= tx_size;
    92c2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    92c4:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    92c6:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    92c8:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    92cc:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    92ce:	6060      	str	r0, [r4, #4]
}
    92d0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    92d2:	6022      	str	r2, [r4, #0]
}
    92d4:	bf18      	it	ne
    92d6:	2001      	movne	r0, #1
    92d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92da:	bf00      	nop
    92dc:	20002254 	.word	0x20002254

000092e0 <nrfx_usbd_feeder_flash_zlp>:
{
    92e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    92e2:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    92e4:	4294      	cmp	r4, r2
    92e6:	bf28      	it	cs
    92e8:	4614      	movcs	r4, r2
{
    92ea:	4606      	mov	r6, r0
    92ec:	460d      	mov	r5, r1
    if (tx_size != 0)
    92ee:	b18c      	cbz	r4, 9314 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    92f0:	4f09      	ldr	r7, [pc, #36]	; (9318 <nrfx_usbd_feeder_flash_zlp+0x38>)
    92f2:	6809      	ldr	r1, [r1, #0]
    92f4:	4622      	mov	r2, r4
    92f6:	4638      	mov	r0, r7
    92f8:	f004 ff7a 	bl	e1f0 <memcpy>
        p_next->p_data.tx = p_buffer;
    92fc:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    92fe:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    9300:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    9302:	1b1b      	subs	r3, r3, r4
    9304:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    9306:	682b      	ldr	r3, [r5, #0]
}
    9308:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    930a:	4423      	add	r3, r4
    930c:	602b      	str	r3, [r5, #0]
}
    930e:	bf18      	it	ne
    9310:	2001      	movne	r0, #1
    9312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    9314:	6004      	str	r4, [r0, #0]
    9316:	e7f2      	b.n	92fe <nrfx_usbd_feeder_flash_zlp+0x1e>
    9318:	20002254 	.word	0x20002254

0000931c <ev_sof_handler>:
{
    931c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    931e:	2300      	movs	r3, #0
    9320:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    9324:	4b0b      	ldr	r3, [pc, #44]	; (9354 <ev_sof_handler+0x38>)
    9326:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    932a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    932e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    9332:	4a09      	ldr	r2, [pc, #36]	; (9358 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    9334:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    9336:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    9338:	bf0c      	ite	eq
    933a:	f44f 7180 	moveq.w	r1, #256	; 0x100
    933e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    9342:	430b      	orrs	r3, r1
    9344:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    9346:	4b05      	ldr	r3, [pc, #20]	; (935c <ev_sof_handler+0x40>)
    9348:	a801      	add	r0, sp, #4
    934a:	681b      	ldr	r3, [r3, #0]
    934c:	4798      	blx	r3
}
    934e:	b003      	add	sp, #12
    9350:	f85d fb04 	ldr.w	pc, [sp], #4
    9354:	40027000 	.word	0x40027000
    9358:	2000212c 	.word	0x2000212c
    935c:	20002250 	.word	0x20002250

00009360 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9360:	4b06      	ldr	r3, [pc, #24]	; (937c <atomic_and.constprop.0.isra.0+0x1c>)
    9362:	f3bf 8f5b 	dmb	ish
    9366:	e853 2f00 	ldrex	r2, [r3]
    936a:	4002      	ands	r2, r0
    936c:	e843 2100 	strex	r1, r2, [r3]
    9370:	2900      	cmp	r1, #0
    9372:	d1f8      	bne.n	9366 <atomic_and.constprop.0.isra.0+0x6>
    9374:	f3bf 8f5b 	dmb	ish
}
    9378:	4770      	bx	lr
    937a:	bf00      	nop
    937c:	200020bc 	.word	0x200020bc

00009380 <nrf_usbd_ep0in_dma_handler>:
{
    9380:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    9382:	f7ff fedd 	bl	9140 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9386:	4b08      	ldr	r3, [pc, #32]	; (93a8 <nrf_usbd_ep0in_dma_handler+0x28>)
    9388:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    938c:	2a03      	cmp	r2, #3
    938e:	d105      	bne.n	939c <nrf_usbd_ep0in_dma_handler+0x1c>
}
    9390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9394:	f06f 0001 	mvn.w	r0, #1
    9398:	f7ff bfe2 	b.w	9360 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93a0:	2b00      	cmp	r3, #0
    93a2:	d0f5      	beq.n	9390 <nrf_usbd_ep0in_dma_handler+0x10>
}
    93a4:	bd08      	pop	{r3, pc}
    93a6:	bf00      	nop
    93a8:	20002130 	.word	0x20002130

000093ac <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    93ac:	2201      	movs	r2, #1
{
    93ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    93b0:	fa02 f501 	lsl.w	r5, r2, r1
    93b4:	491c      	ldr	r1, [pc, #112]	; (9428 <usbd_ep_data_handler+0x7c>)
    93b6:	4e1d      	ldr	r6, [pc, #116]	; (942c <usbd_ep_data_handler+0x80>)
    93b8:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    93ba:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    93be:	ea43 0305 	orr.w	r3, r3, r5
{
    93c2:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    93c4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    93c6:	d024      	beq.n	9412 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    93c8:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    93cc:	4b18      	ldr	r3, [pc, #96]	; (9430 <usbd_ep_data_handler+0x84>)
    93ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    93d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    93d6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    93da:	681a      	ldr	r2, [r3, #0]
    if (ret)
    93dc:	b132      	cbz	r2, 93ec <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    93de:	2200      	movs	r2, #0
    93e0:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    93e2:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    93e4:	681b      	ldr	r3, [r3, #0]
    93e6:	d011      	beq.n	940c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    93e8:	f005 fb6b 	bl	eac2 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    93ec:	6831      	ldr	r1, [r6, #0]
    93ee:	4029      	ands	r1, r5
    93f0:	d10a      	bne.n	9408 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    93f2:	2306      	movs	r3, #6
    93f4:	f88d 3004 	strb.w	r3, [sp, #4]
    93f8:	f88d 4006 	strb.w	r4, [sp, #6]
    93fc:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    9400:	4b0c      	ldr	r3, [pc, #48]	; (9434 <usbd_ep_data_handler+0x88>)
    9402:	a801      	add	r0, sp, #4
    9404:	681b      	ldr	r3, [r3, #0]
    9406:	4798      	blx	r3
}
    9408:	b002      	add	sp, #8
    940a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    940c:	f7ff ffb8 	bl	9380 <nrf_usbd_ep0in_dma_handler>
    9410:	e7ec      	b.n	93ec <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9412:	6833      	ldr	r3, [r6, #0]
    9414:	421d      	tst	r5, r3
    9416:	d1f7      	bne.n	9408 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    9418:	2306      	movs	r3, #6
    941a:	f88d 3004 	strb.w	r3, [sp, #4]
    941e:	f88d 0006 	strb.w	r0, [sp, #6]
    9422:	f88d 2007 	strb.w	r2, [sp, #7]
    9426:	e7eb      	b.n	9400 <usbd_ep_data_handler+0x54>
    9428:	2000212c 	.word	0x2000212c
    942c:	200020bc 	.word	0x200020bc
    9430:	00010294 	.word	0x00010294
    9434:	20002250 	.word	0x20002250

00009438 <ev_setup_data_handler>:
{
    9438:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    943a:	4b05      	ldr	r3, [pc, #20]	; (9450 <ev_setup_data_handler+0x18>)
    943c:	781a      	ldrb	r2, [r3, #0]
    943e:	4610      	mov	r0, r2
    9440:	f005 fb35 	bl	eaae <ep2bit>
}
    9444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    9448:	4601      	mov	r1, r0
    944a:	4610      	mov	r0, r2
    944c:	f7ff bfae 	b.w	93ac <usbd_ep_data_handler>
    9450:	20002355 	.word	0x20002355

00009454 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9454:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    9456:	f7ff fe73 	bl	9140 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    945a:	4b0c      	ldr	r3, [pc, #48]	; (948c <ev_dma_epout8_handler+0x38>)
    945c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    9460:	2a03      	cmp	r2, #3
    9462:	d010      	beq.n	9486 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    9464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    9468:	b96b      	cbnz	r3, 9486 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    946a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    946e:	f7ff ff77 	bl	9360 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9472:	2306      	movs	r3, #6
    9474:	f88d 3004 	strb.w	r3, [sp, #4]
    9478:	2308      	movs	r3, #8
    947a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    947e:	4b04      	ldr	r3, [pc, #16]	; (9490 <ev_dma_epout8_handler+0x3c>)
    9480:	a801      	add	r0, sp, #4
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9486:	b003      	add	sp, #12
    9488:	f85d fb04 	ldr.w	pc, [sp], #4
    948c:	20002130 	.word	0x20002130
    9490:	20002250 	.word	0x20002250

00009494 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9494:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    9496:	f7ff fe53 	bl	9140 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    949a:	4b10      	ldr	r3, [pc, #64]	; (94dc <ev_dma_epin8_handler+0x48>)
    949c:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    94a0:	2a03      	cmp	r2, #3
    94a2:	d106      	bne.n	94b2 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94a4:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    94a8:	b003      	add	sp, #12
    94aa:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94ae:	f7ff bf57 	b.w	9360 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    94b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    94b6:	b96b      	cbnz	r3, 94d4 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94b8:	f46f 7080 	mvn.w	r0, #256	; 0x100
    94bc:	f7ff ff50 	bl	9360 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    94c0:	2306      	movs	r3, #6
    94c2:	f88d 3004 	strb.w	r3, [sp, #4]
    94c6:	2388      	movs	r3, #136	; 0x88
    94c8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    94cc:	4b04      	ldr	r3, [pc, #16]	; (94e0 <ev_dma_epin8_handler+0x4c>)
    94ce:	a801      	add	r0, sp, #4
    94d0:	681b      	ldr	r3, [r3, #0]
    94d2:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    94d4:	b003      	add	sp, #12
    94d6:	f85d fb04 	ldr.w	pc, [sp], #4
    94da:	bf00      	nop
    94dc:	20002130 	.word	0x20002130
    94e0:	20002250 	.word	0x20002250

000094e4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    94e4:	4a02      	ldr	r2, [pc, #8]	; (94f0 <nrfx_usbd_uninit+0xc>)
    94e6:	2300      	movs	r3, #0
    94e8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    94ea:	4a02      	ldr	r2, [pc, #8]	; (94f4 <nrfx_usbd_uninit+0x10>)
    94ec:	7013      	strb	r3, [r2, #0]
    return;
}
    94ee:	4770      	bx	lr
    94f0:	20002250 	.word	0x20002250
    94f4:	20002354 	.word	0x20002354

000094f8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    94f8:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    94fa:	4b48      	ldr	r3, [pc, #288]	; (961c <nrfx_usbd_enable+0x124>)
    94fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9500:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9504:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9508:	f7ff fdf8 	bl	90fc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    950c:	b108      	cbz	r0, 9512 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    950e:	f7ff fe8b 	bl	9228 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    9512:	f005 fa86 	bl	ea22 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    9516:	b1c8      	cbz	r0, 954c <nrfx_usbd_enable+0x54>
	__asm__ volatile(
    9518:	f04f 0320 	mov.w	r3, #32
    951c:	f3ef 8011 	mrs	r0, BASEPRI
    9520:	f383 8812 	msr	BASEPRI_MAX, r3
    9524:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9528:	4b3d      	ldr	r3, [pc, #244]	; (9620 <nrfx_usbd_enable+0x128>)
    952a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    952e:	22c0      	movs	r2, #192	; 0xc0
    9530:	2900      	cmp	r1, #0
    9532:	d16a      	bne.n	960a <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9534:	f249 3175 	movw	r1, #37749	; 0x9375
    9538:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    953c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9540:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9544:	f380 8811 	msr	BASEPRI, r0
    9548:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    954c:	4b33      	ldr	r3, [pc, #204]	; (961c <nrfx_usbd_enable+0x124>)
    954e:	2201      	movs	r2, #1
    9550:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9554:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    9558:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    955c:	0512      	lsls	r2, r2, #20
    955e:	d5fb      	bpl.n	9558 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
    9560:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9564:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9568:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    956c:	f005 fa59 	bl	ea22 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    9570:	b1c0      	cbz	r0, 95a4 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
    9572:	f04f 0320 	mov.w	r3, #32
    9576:	f3ef 8011 	mrs	r0, BASEPRI
    957a:	f383 8812 	msr	BASEPRI_MAX, r3
    957e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9582:	4b27      	ldr	r3, [pc, #156]	; (9620 <nrfx_usbd_enable+0x128>)
    9584:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9588:	2900      	cmp	r1, #0
    958a:	d141      	bne.n	9610 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    958c:	f249 3275 	movw	r2, #37749	; 0x9375
    9590:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9594:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9598:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    959c:	f380 8811 	msr	BASEPRI, r0
    95a0:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    95a4:	f7ff fdaa 	bl	90fc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    95a8:	b130      	cbz	r0, 95b8 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
    95aa:	f7ff fe5d 	bl	9268 <usbd_errata_187_211_end>
    95ae:	f7ff fda5 	bl	90fc <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    95b2:	b108      	cbz	r0, 95b8 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
    95b4:	f7ff fe38 	bl	9228 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    95b8:	f005 fa33 	bl	ea22 <nrf52_errata_166>
    95bc:	4b17      	ldr	r3, [pc, #92]	; (961c <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
    95be:	b150      	cbz	r0, 95d6 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    95c0:	f240 72e3 	movw	r2, #2019	; 0x7e3
    95c4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    95c8:	2240      	movs	r2, #64	; 0x40
    95ca:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    95ce:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    95d2:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    95d6:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    95d8:	2280      	movs	r2, #128	; 0x80
    95da:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    95de:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    95e2:	4b10      	ldr	r3, [pc, #64]	; (9624 <nrfx_usbd_enable+0x12c>)
    95e4:	f240 12ff 	movw	r2, #511	; 0x1ff
    95e8:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    95ea:	4b0f      	ldr	r3, [pc, #60]	; (9628 <nrfx_usbd_enable+0x130>)
    95ec:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    95ee:	f7ff fda7 	bl	9140 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    95f2:	4b0e      	ldr	r3, [pc, #56]	; (962c <nrfx_usbd_enable+0x134>)
    95f4:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    95f6:	4b0e      	ldr	r3, [pc, #56]	; (9630 <nrfx_usbd_enable+0x138>)
    95f8:	2202      	movs	r2, #2
    95fa:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    95fc:	f7ff fd7e 	bl	90fc <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9600:	b150      	cbz	r0, 9618 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    9606:	f7ff be2f 	b.w	9268 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    960a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    960e:	e799      	b.n	9544 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9610:	2200      	movs	r2, #0
    9612:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9616:	e7c1      	b.n	959c <nrfx_usbd_enable+0xa4>
}
    9618:	bd08      	pop	{r3, pc}
    961a:	bf00      	nop
    961c:	40027000 	.word	0x40027000
    9620:	4006e000 	.word	0x4006e000
    9624:	2000212c 	.word	0x2000212c
    9628:	200020bc 	.word	0x200020bc
    962c:	20002355 	.word	0x20002355
    9630:	20002354 	.word	0x20002354

00009634 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9634:	4b0a      	ldr	r3, [pc, #40]	; (9660 <nrfx_usbd_start+0x2c>)
    9636:	2200      	movs	r2, #0
{
    9638:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    963a:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    963c:	4a09      	ldr	r2, [pc, #36]	; (9664 <nrfx_usbd_start+0x30>)
    963e:	4b0a      	ldr	r3, [pc, #40]	; (9668 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    9640:	4c0a      	ldr	r4, [pc, #40]	; (966c <nrfx_usbd_start+0x38>)
    9642:	2800      	cmp	r0, #0
    9644:	bf18      	it	ne
    9646:	4613      	movne	r3, r2
    9648:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    964c:	2027      	movs	r0, #39	; 0x27
    964e:	f7fc f96d 	bl	592c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9652:	2301      	movs	r3, #1
    9654:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9658:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    965c:	bd10      	pop	{r4, pc}
    965e:	bf00      	nop
    9660:	20002352 	.word	0x20002352
    9664:	01e01407 	.word	0x01e01407
    9668:	01c01407 	.word	0x01c01407
    966c:	40027000 	.word	0x40027000

00009670 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9670:	4b03      	ldr	r3, [pc, #12]	; (9680 <nrfx_usbd_is_enabled+0x10>)
    9672:	7818      	ldrb	r0, [r3, #0]
}
    9674:	2801      	cmp	r0, #1
    9676:	bf94      	ite	ls
    9678:	2000      	movls	r0, #0
    967a:	2001      	movhi	r0, #1
    967c:	4770      	bx	lr
    967e:	bf00      	nop
    9680:	20002354 	.word	0x20002354

00009684 <nrfx_usbd_init>:
{
    9684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    9688:	4b1d      	ldr	r3, [pc, #116]	; (9700 <nrfx_usbd_init+0x7c>)
    968a:	781c      	ldrb	r4, [r3, #0]
    968c:	2c00      	cmp	r4, #0
    968e:	d135      	bne.n	96fc <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    9690:	4a1c      	ldr	r2, [pc, #112]	; (9704 <nrfx_usbd_init+0x80>)
    9692:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9694:	2201      	movs	r2, #1
    9696:	701a      	strb	r2, [r3, #0]
    9698:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    969a:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    969e:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    96a0:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96a4:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    96a8:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96aa:	bf14      	ite	ne
    96ac:	4641      	movne	r1, r8
    96ae:	2140      	moveq	r1, #64	; 0x40
    96b0:	4630      	mov	r0, r6
    96b2:	f005 fa36 	bl	eb22 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    96b6:	4630      	mov	r0, r6
    96b8:	f7ff fd34 	bl	9124 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    96bc:	3501      	adds	r5, #1
    96be:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    96c0:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    96c2:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    96c4:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    96c6:	d1eb      	bne.n	96a0 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96c8:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    96ca:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96cc:	f240 16ff 	movw	r6, #511	; 0x1ff
    96d0:	4620      	mov	r0, r4
    96d2:	f005 fa26 	bl	eb22 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    96d6:	4620      	mov	r0, r4
    96d8:	f7ff fd24 	bl	9124 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    96dc:	3401      	adds	r4, #1
    96de:	b2e4      	uxtb	r4, r4
    96e0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    96e2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    96e4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    96e6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    96e8:	d102      	bne.n	96f0 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    96ea:	4807      	ldr	r0, [pc, #28]	; (9708 <nrfx_usbd_init+0x84>)
}
    96ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96f0:	f014 0f08 	tst.w	r4, #8
    96f4:	bf14      	ite	ne
    96f6:	4631      	movne	r1, r6
    96f8:	2140      	moveq	r1, #64	; 0x40
    96fa:	e7e9      	b.n	96d0 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    96fc:	4803      	ldr	r0, [pc, #12]	; (970c <nrfx_usbd_init+0x88>)
    96fe:	e7f5      	b.n	96ec <nrfx_usbd_init+0x68>
    9700:	20002354 	.word	0x20002354
    9704:	20002250 	.word	0x20002250
    9708:	0bad0000 	.word	0x0bad0000
    970c:	0bad0005 	.word	0x0bad0005

00009710 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9714:	4605      	mov	r5, r0
	__asm__ volatile(
    9716:	f04f 0320 	mov.w	r3, #32
    971a:	f3ef 8811 	mrs	r8, BASEPRI
    971e:	f383 8812 	msr	BASEPRI_MAX, r3
    9722:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    9726:	f010 040f 	ands.w	r4, r0, #15
    972a:	d103      	bne.n	9734 <nrfx_usbd_ep_transfer+0x24>
    972c:	4b27      	ldr	r3, [pc, #156]	; (97cc <nrfx_usbd_ep_transfer+0xbc>)
    972e:	781b      	ldrb	r3, [r3, #0]
    9730:	4283      	cmp	r3, r0
    9732:	d146      	bne.n	97c2 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9734:	4b26      	ldr	r3, [pc, #152]	; (97d0 <nrfx_usbd_ep_transfer+0xc0>)
    9736:	4f27      	ldr	r7, [pc, #156]	; (97d4 <nrfx_usbd_ep_transfer+0xc4>)
    9738:	681a      	ldr	r2, [r3, #0]
    973a:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    973c:	4628      	mov	r0, r5
    973e:	f005 f9b6 	bl	eaae <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9742:	43d2      	mvns	r2, r2
    9744:	b292      	uxth	r2, r2
    9746:	f04f 0901 	mov.w	r9, #1
    974a:	4332      	orrs	r2, r6
    974c:	fa09 f900 	lsl.w	r9, r9, r0
    9750:	ea12 0f09 	tst.w	r2, r9
    9754:	d137      	bne.n	97c6 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9756:	4628      	mov	r0, r5
    9758:	f7ff fce4 	bl	9124 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    975c:	220c      	movs	r2, #12
    975e:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    9760:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9762:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    9764:	d529      	bpl.n	97ba <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9766:	4a1c      	ldr	r2, [pc, #112]	; (97d8 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9768:	6808      	ldr	r0, [r1, #0]
    976a:	4414      	add	r4, r2
    976c:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9770:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9772:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9776:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    977a:	d119      	bne.n	97b0 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    977c:	b9b2      	cbnz	r2, 97ac <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    977e:	4a17      	ldr	r2, [pc, #92]	; (97dc <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9780:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    9782:	c907      	ldmia	r1, {r0, r1, r2}
    9784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    9788:	2200      	movs	r2, #0
    978a:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    978c:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    978e:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9790:	4b13      	ldr	r3, [pc, #76]	; (97e0 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    9792:	4814      	ldr	r0, [pc, #80]	; (97e4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9794:	ea46 0609 	orr.w	r6, r6, r9
    9798:	2280      	movs	r2, #128	; 0x80
    979a:	603e      	str	r6, [r7, #0]
    979c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    97a0:	f388 8811 	msr	BASEPRI, r8
    97a4:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    97a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    97ac:	4a0e      	ldr	r2, [pc, #56]	; (97e8 <nrfx_usbd_ep_transfer+0xd8>)
    97ae:	e7e7      	b.n	9780 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    97b0:	b90a      	cbnz	r2, 97b6 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    97b2:	4a0e      	ldr	r2, [pc, #56]	; (97ec <nrfx_usbd_ep_transfer+0xdc>)
    97b4:	e7e4      	b.n	9780 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    97b6:	4a0e      	ldr	r2, [pc, #56]	; (97f0 <nrfx_usbd_ep_transfer+0xe0>)
    97b8:	e7e2      	b.n	9780 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    97ba:	4a0e      	ldr	r2, [pc, #56]	; (97f4 <nrfx_usbd_ep_transfer+0xe4>)
    97bc:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    97be:	4a0e      	ldr	r2, [pc, #56]	; (97f8 <nrfx_usbd_ep_transfer+0xe8>)
    97c0:	e7de      	b.n	9780 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    97c2:	480e      	ldr	r0, [pc, #56]	; (97fc <nrfx_usbd_ep_transfer+0xec>)
    97c4:	e7ec      	b.n	97a0 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    97c6:	480e      	ldr	r0, [pc, #56]	; (9800 <nrfx_usbd_ep_transfer+0xf0>)
    97c8:	e7ea      	b.n	97a0 <nrfx_usbd_ep_transfer+0x90>
    97ca:	bf00      	nop
    97cc:	20002355 	.word	0x20002355
    97d0:	2000212c 	.word	0x2000212c
    97d4:	200020bc 	.word	0x200020bc
    97d8:	200020c0 	.word	0x200020c0
    97dc:	0000ea63 	.word	0x0000ea63
    97e0:	e000e100 	.word	0xe000e100
    97e4:	0bad0000 	.word	0x0bad0000
    97e8:	0000ea85 	.word	0x0000ea85
    97ec:	000092a9 	.word	0x000092a9
    97f0:	000092e1 	.word	0x000092e1
    97f4:	20002050 	.word	0x20002050
    97f8:	0000ea35 	.word	0x0000ea35
    97fc:	0bad000a 	.word	0x0bad000a
    9800:	0bad000b 	.word	0x0bad000b

00009804 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9804:	f010 0f08 	tst.w	r0, #8
    9808:	4b07      	ldr	r3, [pc, #28]	; (9828 <nrfx_usbd_epout_size_get+0x24>)
    980a:	d006      	beq.n	981a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    980c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    9810:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9814:	bf18      	it	ne
    9816:	2000      	movne	r0, #0
    9818:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    981a:	f000 000f 	and.w	r0, r0, #15
    981e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9822:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    9826:	4770      	bx	lr
    9828:	40027000 	.word	0x40027000

0000982c <usbd_dmareq_process>:
{
    982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    9830:	f8df 815c 	ldr.w	r8, [pc, #348]	; 9990 <usbd_dmareq_process+0x164>
    9834:	f898 3000 	ldrb.w	r3, [r8]
{
    9838:	b085      	sub	sp, #20
    if (!m_dma_pending)
    983a:	2b00      	cmp	r3, #0
    983c:	d16b      	bne.n	9916 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    983e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 9994 <usbd_dmareq_process+0x168>
    9842:	4e55      	ldr	r6, [pc, #340]	; (9998 <usbd_dmareq_process+0x16c>)
    9844:	f8d9 1000 	ldr.w	r1, [r9]
    9848:	6833      	ldr	r3, [r6, #0]
    984a:	4019      	ands	r1, r3
    984c:	d063      	beq.n	9916 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    984e:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    9852:	bf14      	ite	ne
    9854:	fa93 f1a3 	rbitne	r1, r3
    9858:	fa91 f1a1 	rbiteq	r1, r1
    985c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9860:	290f      	cmp	r1, #15
    9862:	bf8a      	itet	hi
    9864:	f1a1 0410 	subhi.w	r4, r1, #16
    9868:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    986c:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    986e:	4620      	mov	r0, r4
    9870:	f7ff fc58 	bl	9124 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9874:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    9878:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    987c:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    9880:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9884:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9886:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    988a:	da47      	bge.n	991c <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
    988c:	6803      	ldr	r3, [r0, #0]
    988e:	8982      	ldrh	r2, [r0, #12]
    9890:	6841      	ldr	r1, [r0, #4]
    9892:	a802      	add	r0, sp, #8
    9894:	4798      	blx	r3
                if (!continue_transfer)
    9896:	b900      	cbnz	r0, 989a <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    9898:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    989a:	f005 f8c2 	bl	ea22 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    989e:	b118      	cbz	r0, 98a8 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    98a0:	4b3e      	ldr	r3, [pc, #248]	; (999c <usbd_dmareq_process+0x170>)
    98a2:	2282      	movs	r2, #130	; 0x82
    98a4:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    98a8:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    98aa:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    98ac:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    98ae:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    98b2:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    98b4:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    98b8:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    98ba:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    98be:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    98c0:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    98c2:	f004 0008 	and.w	r0, r4, #8
    98c6:	9902      	ldr	r1, [sp, #8]
    98c8:	4b34      	ldr	r3, [pc, #208]	; (999c <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    98ca:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    98ce:	da4f      	bge.n	9970 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
    98d0:	2800      	cmp	r0, #0
    98d2:	d045      	beq.n	9960 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
    98d4:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    98d8:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    98dc:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    98de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    98e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    98e6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    98ea:	2201      	movs	r2, #1
    98ec:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    98ee:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    98f0:	4a2b      	ldr	r2, [pc, #172]	; (99a0 <usbd_dmareq_process+0x174>)
    98f2:	4b2c      	ldr	r3, [pc, #176]	; (99a4 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    98f4:	4929      	ldr	r1, [pc, #164]	; (999c <usbd_dmareq_process+0x170>)
    98f6:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    98fa:	bf38      	it	cc
    98fc:	4613      	movcc	r3, r2
    98fe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9906:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    990a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    990c:	b91a      	cbnz	r2, 9916 <usbd_dmareq_process+0xea>
    990e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9912:	2a00      	cmp	r2, #0
    9914:	d0f9      	beq.n	990a <usbd_dmareq_process+0xde>
}
    9916:	b005      	add	sp, #20
    9918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    991c:	4620      	mov	r0, r4
    991e:	f7ff ff71 	bl	9804 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9922:	89aa      	ldrh	r2, [r5, #12]
    9924:	6869      	ldr	r1, [r5, #4]
    9926:	f8d5 c000 	ldr.w	ip, [r5]
    992a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    992c:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    992e:	a802      	add	r0, sp, #8
    9930:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    9932:	9a02      	ldr	r2, [sp, #8]
    9934:	2a00      	cmp	r2, #0
    9936:	d0ae      	beq.n	9896 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    9938:	9a03      	ldr	r2, [sp, #12]
    993a:	4297      	cmp	r7, r2
    993c:	d9ab      	bls.n	9896 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    993e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9940:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9942:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9944:	f7ff fd0c 	bl	9360 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9948:	2306      	movs	r3, #6
    994a:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    994e:	4b16      	ldr	r3, [pc, #88]	; (99a8 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9950:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    9954:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9956:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    995a:	a801      	add	r0, sp, #4
    995c:	4798      	blx	r3
                    continue;
    995e:	e771      	b.n	9844 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    9960:	2014      	movs	r0, #20
    9962:	fb00 3304 	mla	r3, r0, r4, r3
    9966:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    996a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    996e:	e7b5      	b.n	98dc <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
    9970:	b128      	cbz	r0, 997e <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
    9972:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    9976:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    997a:	2328      	movs	r3, #40	; 0x28
    997c:	e7af      	b.n	98de <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
    997e:	2014      	movs	r0, #20
    9980:	fb00 3304 	mla	r3, r0, r4, r3
    9984:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    9988:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    998c:	e7f5      	b.n	997a <usbd_dmareq_process+0x14e>
    998e:	bf00      	nop
    9990:	20002353 	.word	0x20002353
    9994:	200020bc 	.word	0x200020bc
    9998:	2000212c 	.word	0x2000212c
    999c:	40027000 	.word	0x40027000
    99a0:	000102a6 	.word	0x000102a6
    99a4:	00010294 	.word	0x00010294
    99a8:	20002250 	.word	0x20002250

000099ac <ev_epdata_handler>:
{
    99ac:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    99ae:	4b0f      	ldr	r3, [pc, #60]	; (99ec <ev_epdata_handler+0x40>)
    99b0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    99b4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    99b8:	2501      	movs	r5, #1
    while (dataepstatus)
    99ba:	b91c      	cbnz	r4, 99c4 <ev_epdata_handler+0x18>
}
    99bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    99c0:	f7ff bf34 	b.w	982c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    99c4:	fa94 f3a4 	rbit	r3, r4
    99c8:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    99cc:	2b0f      	cmp	r3, #15
    99ce:	bfc8      	it	gt
    99d0:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    99d4:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    99d6:	bfd4      	ite	le
    99d8:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    99dc:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    99de:	fa05 f303 	lsl.w	r3, r5, r3
    99e2:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    99e6:	f7ff fce1 	bl	93ac <usbd_ep_data_handler>
    99ea:	e7e6      	b.n	99ba <ev_epdata_handler+0xe>
    99ec:	40027000 	.word	0x40027000

000099f0 <nrf_usbd_epout_dma_handler>:
{
    99f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    99f2:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    99f4:	f7ff fba4 	bl	9140 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    99f8:	4620      	mov	r0, r4
    99fa:	f7ff fb93 	bl	9124 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    99fe:	7b83      	ldrb	r3, [r0, #14]
    9a00:	2b03      	cmp	r3, #3
    9a02:	d10d      	bne.n	9a20 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9a04:	4620      	mov	r0, r4
    9a06:	f005 f852 	bl	eaae <ep2bit>
    9a0a:	2301      	movs	r3, #1
    9a0c:	fa03 f000 	lsl.w	r0, r3, r0
    9a10:	43c0      	mvns	r0, r0
    9a12:	f7ff fca5 	bl	9360 <atomic_and.constprop.0.isra.0>
}
    9a16:	b003      	add	sp, #12
    9a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    9a1c:	f7ff bf06 	b.w	982c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    9a20:	6805      	ldr	r5, [r0, #0]
    9a22:	2d00      	cmp	r5, #0
    9a24:	d1f7      	bne.n	9a16 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9a26:	4620      	mov	r0, r4
    9a28:	f005 f841 	bl	eaae <ep2bit>
    9a2c:	2301      	movs	r3, #1
    9a2e:	fa03 f000 	lsl.w	r0, r3, r0
    9a32:	43c0      	mvns	r0, r0
    9a34:	f7ff fc94 	bl	9360 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9a38:	2306      	movs	r3, #6
    9a3a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9a3e:	4b04      	ldr	r3, [pc, #16]	; (9a50 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9a40:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    9a44:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9a46:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    9a4a:	a801      	add	r0, sp, #4
    9a4c:	4798      	blx	r3
    9a4e:	e7e2      	b.n	9a16 <nrf_usbd_epout_dma_handler+0x26>
    9a50:	20002250 	.word	0x20002250

00009a54 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    9a54:	4b02      	ldr	r3, [pc, #8]	; (9a60 <nrfx_usbd_ep_stall+0xc>)
    9a56:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9a5a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9a5e:	4770      	bx	lr
    9a60:	40027000 	.word	0x40027000

00009a64 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9a64:	0702      	lsls	r2, r0, #28
    9a66:	d413      	bmi.n	9a90 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    9a68:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9a6c:	f010 0f80 	tst.w	r0, #128	; 0x80
    9a70:	4a08      	ldr	r2, [pc, #32]	; (9a94 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    9a72:	bf0b      	itete	eq
    9a74:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    9a78:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    9a7c:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    9a80:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    9a84:	bf08      	it	eq
    9a86:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    9a88:	1e43      	subs	r3, r0, #1
    9a8a:	4258      	negs	r0, r3
    9a8c:	4158      	adcs	r0, r3
    9a8e:	4770      	bx	lr
        return false;
    9a90:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9a92:	4770      	bx	lr
    9a94:	40027000 	.word	0x40027000

00009a98 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    9a98:	4b04      	ldr	r3, [pc, #16]	; (9aac <nrfx_usbd_ep_dtoggle_clear+0x14>)
    9a9a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9a9e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9aa2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    9aa6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    9aaa:	4770      	bx	lr
    9aac:	40027000 	.word	0x40027000

00009ab0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    9ab0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9ab2:	2208      	movs	r2, #8
    9ab4:	2100      	movs	r1, #0
{
    9ab6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9ab8:	f004 fba5 	bl	e206 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9abc:	4b0e      	ldr	r3, [pc, #56]	; (9af8 <nrfx_usbd_setup_get+0x48>)
    9abe:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    9ac2:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9ac4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    9ac8:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9aca:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    9ace:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    9ad2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9ad6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9ad8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9adc:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    9ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9ae4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9ae6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9aea:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    9aee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    9af2:	80e3      	strh	r3, [r4, #6]
}
    9af4:	bd10      	pop	{r4, pc}
    9af6:	bf00      	nop
    9af8:	40027000 	.word	0x40027000

00009afc <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9afc:	4b02      	ldr	r3, [pc, #8]	; (9b08 <nrfx_usbd_setup_data_clear+0xc>)
    9afe:	2201      	movs	r2, #1
    9b00:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9b04:	4770      	bx	lr
    9b06:	bf00      	nop
    9b08:	40027000 	.word	0x40027000

00009b0c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9b0c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    9b0e:	f7ff fb17 	bl	9140 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9b12:	4b10      	ldr	r3, [pc, #64]	; (9b54 <ev_dma_epout0_handler+0x48>)
    9b14:	7b9a      	ldrb	r2, [r3, #14]
    9b16:	2a03      	cmp	r2, #3
    9b18:	d106      	bne.n	9b28 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b1a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9b1e:	b002      	add	sp, #8
    9b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b24:	f7ff bc1c 	b.w	9360 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    9b28:	681c      	ldr	r4, [r3, #0]
    9b2a:	b974      	cbnz	r4, 9b4a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b2c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    9b30:	f7ff fc16 	bl	9360 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9b34:	2306      	movs	r3, #6
    9b36:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9b3a:	4b07      	ldr	r3, [pc, #28]	; (9b58 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9b3c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    9b40:	681b      	ldr	r3, [r3, #0]
    9b42:	a801      	add	r0, sp, #4
    9b44:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9b46:	b002      	add	sp, #8
    9b48:	bd10      	pop	{r4, pc}
    9b4a:	b002      	add	sp, #8
    9b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    9b50:	f7ff bfd4 	b.w	9afc <nrfx_usbd_setup_data_clear>
    9b54:	20002130 	.word	0x20002130
    9b58:	20002250 	.word	0x20002250

00009b5c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9b5c:	4b02      	ldr	r3, [pc, #8]	; (9b68 <nrfx_usbd_setup_clear+0xc>)
    9b5e:	2201      	movs	r2, #1
    9b60:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    9b64:	4770      	bx	lr
    9b66:	bf00      	nop
    9b68:	40027000 	.word	0x40027000

00009b6c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9b6c:	4b02      	ldr	r3, [pc, #8]	; (9b78 <nrfx_usbd_setup_stall+0xc>)
    9b6e:	2201      	movs	r2, #1
    9b70:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    9b74:	4770      	bx	lr
    9b76:	bf00      	nop
    9b78:	40027000 	.word	0x40027000

00009b7c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    9b7c:	4b01      	ldr	r3, [pc, #4]	; (9b84 <nrfx_usbd_last_setup_dir_get+0x8>)
    9b7e:	7818      	ldrb	r0, [r3, #0]
    9b80:	4770      	bx	lr
    9b82:	bf00      	nop
    9b84:	20002355 	.word	0x20002355

00009b88 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    9b88:	b510      	push	{r4, lr}
    9b8a:	4602      	mov	r2, r0
	__asm__ volatile(
    9b8c:	f04f 0320 	mov.w	r3, #32
    9b90:	f3ef 8411 	mrs	r4, BASEPRI
    9b94:	f383 8812 	msr	BASEPRI_MAX, r3
    9b98:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    9b9c:	f004 ff87 	bl	eaae <ep2bit>
    9ba0:	490d      	ldr	r1, [pc, #52]	; (9bd8 <nrfx_usbd_transfer_out_drop+0x50>)
    9ba2:	2301      	movs	r3, #1
    9ba4:	fa03 f000 	lsl.w	r0, r3, r0
    9ba8:	680b      	ldr	r3, [r1, #0]
    9baa:	ea23 0300 	bic.w	r3, r3, r0
    9bae:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    9bb0:	f012 0108 	ands.w	r1, r2, #8
    9bb4:	d10a      	bne.n	9bcc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    9bb6:	f002 030f 	and.w	r3, r2, #15
    9bba:	009b      	lsls	r3, r3, #2
    9bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9bc0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    9bc4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9bc8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    9bcc:	f384 8811 	msr	BASEPRI, r4
    9bd0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9bd4:	bd10      	pop	{r4, pc}
    9bd6:	bf00      	nop
    9bd8:	2000212c 	.word	0x2000212c

00009bdc <usbd_ep_abort>:
{
    9bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9bde:	4601      	mov	r1, r0
	__asm__ volatile(
    9be0:	f04f 0320 	mov.w	r3, #32
    9be4:	f3ef 8511 	mrs	r5, BASEPRI
    9be8:	f383 8812 	msr	BASEPRI_MAX, r3
    9bec:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9bf0:	f7ff fa98 	bl	9124 <ep_state_access>
    9bf4:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9bf6:	4608      	mov	r0, r1
    9bf8:	f004 ff59 	bl	eaae <ep2bit>
    9bfc:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    9bfe:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c02:	fa02 f200 	lsl.w	r2, r2, r0
    9c06:	482e      	ldr	r0, [pc, #184]	; (9cc0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    9c08:	d118      	bne.n	9c3c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c0a:	6803      	ldr	r3, [r0, #0]
    9c0c:	ea32 0403 	bics.w	r4, r2, r3
    9c10:	d00a      	beq.n	9c28 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    9c12:	4608      	mov	r0, r1
    9c14:	f7ff ffb8 	bl	9b88 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    9c18:	2303      	movs	r3, #3
    9c1a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    9c1c:	f385 8811 	msr	BASEPRI, r5
    9c20:	f3bf 8f6f 	isb	sy
}
    9c24:	b003      	add	sp, #12
    9c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c28:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    9c2c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c2e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9c30:	4b24      	ldr	r3, [pc, #144]	; (9cc4 <usbd_ep_abort+0xe8>)
    9c32:	6818      	ldr	r0, [r3, #0]
    9c34:	ea20 0002 	bic.w	r0, r0, r2
    9c38:	6018      	str	r0, [r3, #0]
    9c3a:	e7ed      	b.n	9c18 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9c3c:	070b      	lsls	r3, r1, #28
    9c3e:	d415      	bmi.n	9c6c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    9c40:	2980      	cmp	r1, #128	; 0x80
    9c42:	4b21      	ldr	r3, [pc, #132]	; (9cc8 <usbd_ep_abort+0xec>)
    9c44:	d02f      	beq.n	9ca6 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9c46:	f001 040f 	and.w	r4, r1, #15
    9c4a:	f204 34da 	addw	r4, r4, #986	; 0x3da
    9c4e:	0064      	lsls	r4, r4, #1
    9c50:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9c54:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9c58:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9c5c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9c5e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9c62:	433c      	orrs	r4, r7
    9c64:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9c68:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9c6c:	4f15      	ldr	r7, [pc, #84]	; (9cc4 <usbd_ep_abort+0xe8>)
    9c6e:	6804      	ldr	r4, [r0, #0]
    9c70:	683b      	ldr	r3, [r7, #0]
    9c72:	ea64 0c03 	orn	ip, r4, r3
    9c76:	ea1c 0f02 	tst.w	ip, r2
    9c7a:	d0cf      	beq.n	9c1c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9c7c:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c7e:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9c82:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    9c84:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c86:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    9c88:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9c8a:	2303      	movs	r3, #3
    9c8c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9c8e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9c92:	4b0e      	ldr	r3, [pc, #56]	; (9ccc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9c94:	f88d 1006 	strb.w	r1, [sp, #6]
    9c98:	2206      	movs	r2, #6
            m_event_handler(&evt);
    9c9a:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9c9c:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    9ca0:	a801      	add	r0, sp, #4
    9ca2:	4798      	blx	r3
    9ca4:	e7ba      	b.n	9c1c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9ca6:	f240 74b4 	movw	r4, #1972	; 0x7b4
    9caa:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9cae:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9cb2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9cb6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9cb8:	f044 0404 	orr.w	r4, r4, #4
    9cbc:	e7d1      	b.n	9c62 <usbd_ep_abort+0x86>
    9cbe:	bf00      	nop
    9cc0:	200020bc 	.word	0x200020bc
    9cc4:	2000212c 	.word	0x2000212c
    9cc8:	40027000 	.word	0x40027000
    9ccc:	20002250 	.word	0x20002250

00009cd0 <ev_setup_handler>:
{
    9cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9cd2:	4b17      	ldr	r3, [pc, #92]	; (9d30 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9cd4:	4c17      	ldr	r4, [pc, #92]	; (9d34 <ev_setup_handler+0x64>)
    9cd6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    9cda:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    9cdc:	4e16      	ldr	r6, [pc, #88]	; (9d38 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9cde:	43da      	mvns	r2, r3
    9ce0:	4b16      	ldr	r3, [pc, #88]	; (9d3c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    9ce2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9ce8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9cea:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    9cec:	f004 fedf 	bl	eaae <ep2bit>
    9cf0:	2301      	movs	r3, #1
    9cf2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9cf4:	4213      	tst	r3, r2
    9cf6:	d002      	beq.n	9cfe <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    9cf8:	4608      	mov	r0, r1
    9cfa:	f7ff ff6f 	bl	9bdc <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9cfe:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    9d02:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    9d06:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    9d08:	f7ff fb2a 	bl	9360 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9d0c:	6823      	ldr	r3, [r4, #0]
    9d0e:	f043 0301 	orr.w	r3, r3, #1
    9d12:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    9d14:	2300      	movs	r3, #0
    9d16:	f8ad 3005 	strh.w	r3, [sp, #5]
    9d1a:	f88d 3007 	strb.w	r3, [sp, #7]
    9d1e:	2305      	movs	r3, #5
    9d20:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    9d24:	4b06      	ldr	r3, [pc, #24]	; (9d40 <ev_setup_handler+0x70>)
    9d26:	a801      	add	r0, sp, #4
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	4798      	blx	r3
}
    9d2c:	b002      	add	sp, #8
    9d2e:	bd70      	pop	{r4, r5, r6, pc}
    9d30:	40027000 	.word	0x40027000
    9d34:	2000212c 	.word	0x2000212c
    9d38:	20002355 	.word	0x20002355
    9d3c:	200020bc 	.word	0x200020bc
    9d40:	20002250 	.word	0x20002250

00009d44 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    9d44:	4b1b      	ldr	r3, [pc, #108]	; (9db4 <nrfx_usbd_irq_handler+0x70>)
    9d46:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    9d4a:	2300      	movs	r3, #0
{
    9d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    9d50:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9d52:	461d      	mov	r5, r3
    while (to_process)
    9d54:	b970      	cbnz	r0, 9d74 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    9d56:	4f18      	ldr	r7, [pc, #96]	; (9db8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    9d58:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    9d5c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    9d60:	f04f 0801 	mov.w	r8, #1
    while (active)
    9d64:	b9bc      	cbnz	r4, 9d96 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    9d66:	f7ff fd61 	bl	982c <usbd_dmareq_process>
    if (setup_active)
    9d6a:	b306      	cbz	r6, 9dae <nrfx_usbd_irq_handler+0x6a>
}
    9d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    9d70:	f7ff bfae 	b.w	9cd0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    9d74:	fa90 f2a0 	rbit	r2, r0
    9d78:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9d7c:	490f      	ldr	r1, [pc, #60]	; (9dbc <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    9d7e:	0096      	lsls	r6, r2, #2
    9d80:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    9d82:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9d86:	680e      	ldr	r6, [r1, #0]
    if (ret)
    9d88:	b116      	cbz	r6, 9d90 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9d8a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9d8c:	6809      	ldr	r1, [r1, #0]
    9d8e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    9d90:	ea20 0002 	bic.w	r0, r0, r2
    9d94:	e7de      	b.n	9d54 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    9d96:	fa94 f5a4 	rbit	r5, r4
    9d9a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    9d9e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    9da2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    9da6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    9da8:	ea24 0405 	bic.w	r4, r4, r5
    9dac:	e7da      	b.n	9d64 <nrfx_usbd_irq_handler+0x20>
}
    9dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9db2:	bf00      	nop
    9db4:	40027000 	.word	0x40027000
    9db8:	00010204 	.word	0x00010204
    9dbc:	40027100 	.word	0x40027100

00009dc0 <usbd_ep_abort_all>:
{
    9dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    9dc2:	4e11      	ldr	r6, [pc, #68]	; (9e08 <usbd_ep_abort_all+0x48>)
    9dc4:	4b11      	ldr	r3, [pc, #68]	; (9e0c <usbd_ep_abort_all+0x4c>)
    9dc6:	6834      	ldr	r4, [r6, #0]
    9dc8:	681b      	ldr	r3, [r3, #0]
    9dca:	0c24      	lsrs	r4, r4, #16
    9dcc:	0424      	lsls	r4, r4, #16
    9dce:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    9dd0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    9dd2:	b91c      	cbnz	r4, 9ddc <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9dd4:	f240 13ff 	movw	r3, #511	; 0x1ff
    9dd8:	6033      	str	r3, [r6, #0]
}
    9dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9ddc:	fa94 f5a4 	rbit	r5, r4
    9de0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9de4:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9de6:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9de8:	bfc6      	itte	gt
    9dea:	f1a5 0010 	subgt.w	r0, r5, #16
    9dee:	b2c0      	uxtbgt	r0, r0
    9df0:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    9df4:	0703      	lsls	r3, r0, #28
    9df6:	d401      	bmi.n	9dfc <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    9df8:	f7ff fef0 	bl	9bdc <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    9dfc:	fa07 f505 	lsl.w	r5, r7, r5
    9e00:	ea24 0405 	bic.w	r4, r4, r5
    9e04:	e7e5      	b.n	9dd2 <usbd_ep_abort_all+0x12>
    9e06:	bf00      	nop
    9e08:	2000212c 	.word	0x2000212c
    9e0c:	200020bc 	.word	0x200020bc

00009e10 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9e10:	4b0c      	ldr	r3, [pc, #48]	; (9e44 <nrfx_usbd_stop+0x34>)
    9e12:	2280      	movs	r2, #128	; 0x80
{
    9e14:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    9e16:	2027      	movs	r0, #39	; 0x27
    9e18:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    9e1c:	f7fb fdaa 	bl	5974 <arch_irq_is_enabled>
    9e20:	b170      	cbz	r0, 9e40 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    9e22:	4c09      	ldr	r4, [pc, #36]	; (9e48 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    9e24:	f7ff ffcc 	bl	9dc0 <usbd_ep_abort_all>
    9e28:	2300      	movs	r3, #0
    9e2a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    9e2e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    9e30:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    9e34:	f7fb fd8a 	bl	594c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e3c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    9e40:	bd10      	pop	{r4, pc}
    9e42:	bf00      	nop
    9e44:	e000e100 	.word	0xe000e100
    9e48:	40027000 	.word	0x40027000

00009e4c <nrfx_usbd_disable>:
{
    9e4c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9e4e:	f7ff ffdf 	bl	9e10 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    9e52:	4b08      	ldr	r3, [pc, #32]	; (9e74 <nrfx_usbd_disable+0x28>)
    9e54:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    9e58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9e5c:	2200      	movs	r2, #0
    9e5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9e62:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    9e66:	f7ff f96b 	bl	9140 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9e6a:	4b03      	ldr	r3, [pc, #12]	; (9e78 <nrfx_usbd_disable+0x2c>)
    9e6c:	2201      	movs	r2, #1
    9e6e:	701a      	strb	r2, [r3, #0]
}
    9e70:	bd08      	pop	{r3, pc}
    9e72:	bf00      	nop
    9e74:	40027000 	.word	0x40027000
    9e78:	20002354 	.word	0x20002354

00009e7c <nrfx_usbd_suspend>:
{
    9e7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9e7e:	f04f 0320 	mov.w	r3, #32
    9e82:	f3ef 8511 	mrs	r5, BASEPRI
    9e86:	f383 8812 	msr	BASEPRI_MAX, r3
    9e8a:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    9e8e:	4b11      	ldr	r3, [pc, #68]	; (9ed4 <nrfx_usbd_suspend+0x58>)
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9e96:	b933      	cbnz	r3, 9ea6 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    9e98:	2400      	movs	r4, #0
	__asm__ volatile(
    9e9a:	f385 8811 	msr	BASEPRI, r5
    9e9e:	f3bf 8f6f 	isb	sy
}
    9ea2:	4620      	mov	r0, r4
    9ea4:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    9ea6:	f7ff ff8b 	bl	9dc0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    9eaa:	4b0b      	ldr	r3, [pc, #44]	; (9ed8 <nrfx_usbd_suspend+0x5c>)
    9eac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9eb0:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    9eb4:	d1f0      	bne.n	9e98 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9eb6:	2101      	movs	r1, #1
    9eb8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9ebc:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9ec0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9ec4:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9ec6:	bf42      	ittt	mi
    9ec8:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9ecc:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    9ed0:	4614      	movmi	r4, r2
}
    9ed2:	e7e2      	b.n	9e9a <nrfx_usbd_suspend+0x1e>
    9ed4:	20002352 	.word	0x20002352
    9ed8:	40027000 	.word	0x40027000

00009edc <nrfx_usbd_ep_disable>:
{
    9edc:	b510      	push	{r4, lr}
    9ede:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    9ee0:	f7ff fe7c 	bl	9bdc <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9ee4:	4a10      	ldr	r2, [pc, #64]	; (9f28 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    9ee6:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9eea:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    9eee:	f04f 0301 	mov.w	r3, #1
    9ef2:	bf14      	ite	ne
    9ef4:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9ef8:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    9efc:	fa03 f300 	lsl.w	r3, r3, r0
    9f00:	ea6f 0303 	mvn.w	r3, r3
    9f04:	bf15      	itete	ne
    9f06:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9f08:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    9f0a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9f0e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9f12:	bf14      	ite	ne
    9f14:	4b05      	ldrne	r3, [pc, #20]	; (9f2c <nrfx_usbd_ep_disable+0x50>)
    9f16:	4b06      	ldreq	r3, [pc, #24]	; (9f30 <nrfx_usbd_ep_disable+0x54>)
    9f18:	5c1a      	ldrb	r2, [r3, r0]
    9f1a:	2301      	movs	r3, #1
    9f1c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    9f1e:	4a02      	ldr	r2, [pc, #8]	; (9f28 <nrfx_usbd_ep_disable+0x4c>)
    9f20:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    9f24:	bd10      	pop	{r4, pc}
    9f26:	bf00      	nop
    9f28:	40027000 	.word	0x40027000
    9f2c:	000121b3 	.word	0x000121b3
    9f30:	000121bc 	.word	0x000121bc

00009f34 <nrfx_usbd_ep_enable>:
{
    9f34:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9f36:	b243      	sxtb	r3, r0
    9f38:	2b00      	cmp	r3, #0
    9f3a:	4b23      	ldr	r3, [pc, #140]	; (9fc8 <nrfx_usbd_ep_enable+0x94>)
    9f3c:	4a23      	ldr	r2, [pc, #140]	; (9fcc <nrfx_usbd_ep_enable+0x98>)
    9f3e:	bfa8      	it	ge
    9f40:	461a      	movge	r2, r3
    9f42:	f000 030f 	and.w	r3, r0, #15
    9f46:	f04f 0401 	mov.w	r4, #1
    9f4a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    9f4c:	4a20      	ldr	r2, [pc, #128]	; (9fd0 <nrfx_usbd_ep_enable+0x9c>)
    9f4e:	fa04 f101 	lsl.w	r1, r4, r1
{
    9f52:	4605      	mov	r5, r0
    9f54:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    9f58:	da0c      	bge.n	9f74 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    9f5a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    9f5e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9f60:	07c8      	lsls	r0, r1, #31
    9f62:	d406      	bmi.n	9f72 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    9f64:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    9f68:	fa04 f303 	lsl.w	r3, r4, r3
    9f6c:	4303      	orrs	r3, r0
    9f6e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    9f72:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    9f74:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    9f78:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9f7a:	07c9      	lsls	r1, r1, #31
    9f7c:	d4f9      	bmi.n	9f72 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    9f7e:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    9f82:	fa04 f103 	lsl.w	r1, r4, r3
    9f86:	4331      	orrs	r1, r6
    9f88:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9f8c:	2b00      	cmp	r3, #0
    9f8e:	d0f0      	beq.n	9f72 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    9f90:	0703      	lsls	r3, r0, #28
    9f92:	d4ee      	bmi.n	9f72 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    9f94:	f04f 0320 	mov.w	r3, #32
    9f98:	f3ef 8611 	mrs	r6, BASEPRI
    9f9c:	f383 8812 	msr	BASEPRI_MAX, r3
    9fa0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    9fa4:	f7ff fdf0 	bl	9b88 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9fa8:	4628      	mov	r0, r5
    9faa:	f004 fd80 	bl	eaae <ep2bit>
    9fae:	4a09      	ldr	r2, [pc, #36]	; (9fd4 <nrfx_usbd_ep_enable+0xa0>)
    9fb0:	6813      	ldr	r3, [r2, #0]
    9fb2:	fa04 f000 	lsl.w	r0, r4, r0
    9fb6:	ea23 0000 	bic.w	r0, r3, r0
    9fba:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    9fbc:	f386 8811 	msr	BASEPRI, r6
    9fc0:	f3bf 8f6f 	isb	sy
}
    9fc4:	e7d5      	b.n	9f72 <nrfx_usbd_ep_enable+0x3e>
    9fc6:	bf00      	nop
    9fc8:	000121bc 	.word	0x000121bc
    9fcc:	000121b3 	.word	0x000121b3
    9fd0:	40027000 	.word	0x40027000
    9fd4:	200020bc 	.word	0x200020bc

00009fd8 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    9fd8:	0603      	lsls	r3, r0, #24
{
    9fda:	b510      	push	{r4, lr}
    9fdc:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    9fde:	d405      	bmi.n	9fec <nrfx_usbd_ep_stall_clear+0x14>
    9fe0:	f7ff fd40 	bl	9a64 <nrfx_usbd_ep_stall_check>
    9fe4:	b110      	cbz	r0, 9fec <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    9fe6:	4620      	mov	r0, r4
    9fe8:	f7ff fdce 	bl	9b88 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    9fec:	4b01      	ldr	r3, [pc, #4]	; (9ff4 <nrfx_usbd_ep_stall_clear+0x1c>)
    9fee:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    9ff2:	bd10      	pop	{r4, pc}
    9ff4:	40027000 	.word	0x40027000

00009ff8 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    9ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    9ffc:	f8df a048 	ldr.w	sl, [pc, #72]	; a048 <device_visitor+0x50>
    a000:	4d12      	ldr	r5, [pc, #72]	; (a04c <device_visitor+0x54>)
    a002:	469b      	mov	fp, r3
    a004:	eba5 050a 	sub.w	r5, r5, sl
    a008:	4b11      	ldr	r3, [pc, #68]	; (a050 <device_visitor+0x58>)
    a00a:	10ed      	asrs	r5, r5, #3
    a00c:	4680      	mov	r8, r0
    a00e:	460f      	mov	r7, r1
    a010:	4691      	mov	r9, r2
    a012:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    a014:	2600      	movs	r6, #0
    a016:	42be      	cmp	r6, r7
    a018:	d102      	bne.n	a020 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    a01a:	4630      	mov	r0, r6
}
    a01c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    a020:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    a024:	2c00      	cmp	r4, #0
    a026:	dd0d      	ble.n	a044 <device_visitor+0x4c>
    a028:	42a5      	cmp	r5, r4
    a02a:	d30b      	bcc.n	a044 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    a02c:	3c01      	subs	r4, #1
    a02e:	b224      	sxth	r4, r4
    a030:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a034:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
    a038:	4659      	mov	r1, fp
    a03a:	47c8      	blx	r9
		if (rc < 0) {
    a03c:	2800      	cmp	r0, #0
    a03e:	dbed      	blt.n	a01c <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    a040:	3601      	adds	r6, #1
    a042:	e7e8      	b.n	a016 <device_visitor+0x1e>
	const struct device *dev = NULL;
    a044:	2000      	movs	r0, #0
    a046:	e7f7      	b.n	a038 <device_visitor+0x40>
    a048:	0000f608 	.word	0x0000f608
    a04c:	0000f698 	.word	0x0000f698
    a050:	aaaaaaab 	.word	0xaaaaaaab

0000a054 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a054:	4b0e      	ldr	r3, [pc, #56]	; (a090 <z_sys_init_run_level+0x3c>)
{
    a056:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a058:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a05c:	3001      	adds	r0, #1
    a05e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a062:	42a6      	cmp	r6, r4
    a064:	d800      	bhi.n	a068 <z_sys_init_run_level+0x14>
}
    a066:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    a068:	e9d4 3500 	ldrd	r3, r5, [r4]
    a06c:	4628      	mov	r0, r5
    a06e:	4798      	blx	r3
		if (dev != NULL) {
    a070:	b165      	cbz	r5, a08c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    a072:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    a074:	b130      	cbz	r0, a084 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    a076:	2800      	cmp	r0, #0
    a078:	bfb8      	it	lt
    a07a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    a07c:	28ff      	cmp	r0, #255	; 0xff
    a07e:	bfa8      	it	ge
    a080:	20ff      	movge	r0, #255	; 0xff
    a082:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a084:	785a      	ldrb	r2, [r3, #1]
    a086:	f042 0201 	orr.w	r2, r2, #1
    a08a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a08c:	3408      	adds	r4, #8
    a08e:	e7e8      	b.n	a062 <z_sys_init_run_level+0xe>
    a090:	00010268 	.word	0x00010268

0000a094 <z_device_get_all_static>:
	*devices = __device_start;
    a094:	4a03      	ldr	r2, [pc, #12]	; (a0a4 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    a096:	4b04      	ldr	r3, [pc, #16]	; (a0a8 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    a098:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    a09a:	1a9b      	subs	r3, r3, r2
}
    a09c:	4803      	ldr	r0, [pc, #12]	; (a0ac <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    a09e:	10db      	asrs	r3, r3, #3
}
    a0a0:	4358      	muls	r0, r3
    a0a2:	4770      	bx	lr
    a0a4:	0000f608 	.word	0x0000f608
    a0a8:	0000f698 	.word	0x0000f698
    a0ac:	aaaaaaab 	.word	0xaaaaaaab

0000a0b0 <z_impl_device_get_binding>:
{
    a0b0:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    a0b2:	4605      	mov	r5, r0
    a0b4:	b910      	cbnz	r0, a0bc <z_impl_device_get_binding+0xc>
		return NULL;
    a0b6:	2400      	movs	r4, #0
}
    a0b8:	4620      	mov	r0, r4
    a0ba:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    a0bc:	7803      	ldrb	r3, [r0, #0]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d0f9      	beq.n	a0b6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    a0c2:	4c0e      	ldr	r4, [pc, #56]	; (a0fc <z_impl_device_get_binding+0x4c>)
    a0c4:	4e0e      	ldr	r6, [pc, #56]	; (a100 <z_impl_device_get_binding+0x50>)
    a0c6:	42b4      	cmp	r4, r6
    a0c8:	d108      	bne.n	a0dc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    a0ca:	4c0c      	ldr	r4, [pc, #48]	; (a0fc <z_impl_device_get_binding+0x4c>)
    a0cc:	42b4      	cmp	r4, r6
    a0ce:	d0f2      	beq.n	a0b6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a0d0:	4620      	mov	r0, r4
    a0d2:	f004 fd5a 	bl	eb8a <z_device_is_ready>
    a0d6:	b950      	cbnz	r0, a0ee <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    a0d8:	3418      	adds	r4, #24
    a0da:	e7f7      	b.n	a0cc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a0dc:	4620      	mov	r0, r4
    a0de:	f004 fd54 	bl	eb8a <z_device_is_ready>
    a0e2:	b110      	cbz	r0, a0ea <z_impl_device_get_binding+0x3a>
    a0e4:	6823      	ldr	r3, [r4, #0]
    a0e6:	42ab      	cmp	r3, r5
    a0e8:	d0e6      	beq.n	a0b8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    a0ea:	3418      	adds	r4, #24
    a0ec:	e7eb      	b.n	a0c6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a0ee:	6821      	ldr	r1, [r4, #0]
    a0f0:	4628      	mov	r0, r5
    a0f2:	f004 f837 	bl	e164 <strcmp>
    a0f6:	2800      	cmp	r0, #0
    a0f8:	d1ee      	bne.n	a0d8 <z_impl_device_get_binding+0x28>
    a0fa:	e7dd      	b.n	a0b8 <z_impl_device_get_binding+0x8>
    a0fc:	0000f608 	.word	0x0000f608
    a100:	0000f698 	.word	0x0000f698

0000a104 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a104:	4b01      	ldr	r3, [pc, #4]	; (a10c <z_impl_z_errno+0x8>)
    a106:	6898      	ldr	r0, [r3, #8]
}
    a108:	3098      	adds	r0, #152	; 0x98
    a10a:	4770      	bx	lr
    a10c:	20002294 	.word	0x20002294

0000a110 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    a110:	b510      	push	{r4, lr}
    a112:	4604      	mov	r4, r0
    a114:	b088      	sub	sp, #32
	z_impl_log_panic();
    a116:	f7f7 fa83 	bl	1620 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    a11a:	4809      	ldr	r0, [pc, #36]	; (a140 <k_sys_fatal_error_handler+0x30>)
    a11c:	6803      	ldr	r3, [r0, #0]
    a11e:	075b      	lsls	r3, r3, #29
    a120:	d00a      	beq.n	a138 <k_sys_fatal_error_handler+0x28>
    a122:	4b08      	ldr	r3, [pc, #32]	; (a144 <k_sys_fatal_error_handler+0x34>)
    a124:	9306      	str	r3, [sp, #24]
    a126:	2302      	movs	r3, #2
    a128:	9301      	str	r3, [sp, #4]
    a12a:	9305      	str	r3, [sp, #20]
    a12c:	2300      	movs	r3, #0
    a12e:	aa05      	add	r2, sp, #20
    a130:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a134:	f002 fc91 	bl	ca5a <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
    a138:	4620      	mov	r0, r4
    a13a:	f004 fd57 	bl	ebec <arch_system_halt>
    a13e:	bf00      	nop
    a140:	20000268 	.word	0x20000268
    a144:	000121c5 	.word	0x000121c5

0000a148 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a14c:	4605      	mov	r5, r0
    a14e:	b08e      	sub	sp, #56	; 0x38
    a150:	460e      	mov	r6, r1
	__asm__ volatile(
    a152:	f04f 0320 	mov.w	r3, #32
    a156:	f3ef 8811 	mrs	r8, BASEPRI
    a15a:	f383 8812 	msr	BASEPRI_MAX, r3
    a15e:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a162:	4f2b      	ldr	r7, [pc, #172]	; (a210 <z_fatal_error+0xc8>)
	return z_impl_z_current_get();
    a164:	f001 f902 	bl	b36c <z_impl_z_current_get>
    a168:	683b      	ldr	r3, [r7, #0]
    a16a:	0759      	lsls	r1, r3, #29
    a16c:	4604      	mov	r4, r0
    a16e:	d04c      	beq.n	a20a <z_fatal_error+0xc2>
	switch (reason) {
    a170:	2d04      	cmp	r5, #4
    a172:	bf96      	itet	ls
    a174:	4b27      	ldrls	r3, [pc, #156]	; (a214 <z_fatal_error+0xcc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a176:	4a28      	ldrhi	r2, [pc, #160]	; (a218 <z_fatal_error+0xd0>)
	return 0;
    a178:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a17c:	4924      	ldr	r1, [pc, #144]	; (a210 <z_fatal_error+0xc8>)
    a17e:	9502      	str	r5, [sp, #8]
    a180:	2300      	movs	r3, #0
    a182:	e9cd 2303 	strd	r2, r3, [sp, #12]
    a186:	4a25      	ldr	r2, [pc, #148]	; (a21c <z_fatal_error+0xd4>)
    a188:	4618      	mov	r0, r3
    a18a:	e9cd 3200 	strd	r3, r2, [sp]
    a18e:	2201      	movs	r2, #1
    a190:	f004 fd1d 	bl	ebce <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a194:	b196      	cbz	r6, a1bc <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a196:	69f3      	ldr	r3, [r6, #28]
    a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a19c:	b173      	cbz	r3, a1bc <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
    a19e:	683b      	ldr	r3, [r7, #0]
    a1a0:	075a      	lsls	r2, r3, #29
    a1a2:	d01b      	beq.n	a1dc <z_fatal_error+0x94>
    a1a4:	4b1e      	ldr	r3, [pc, #120]	; (a220 <z_fatal_error+0xd8>)
    a1a6:	930c      	str	r3, [sp, #48]	; 0x30
    a1a8:	2302      	movs	r3, #2
    a1aa:	9307      	str	r3, [sp, #28]
    a1ac:	930b      	str	r3, [sp, #44]	; 0x2c
    a1ae:	4818      	ldr	r0, [pc, #96]	; (a210 <z_fatal_error+0xc8>)
    a1b0:	2300      	movs	r3, #0
    a1b2:	aa0b      	add	r2, sp, #44	; 0x2c
    a1b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a1b8:	f002 fc4f 	bl	ca5a <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a1bc:	683b      	ldr	r3, [r7, #0]
    a1be:	075b      	lsls	r3, r3, #29
    a1c0:	d00c      	beq.n	a1dc <z_fatal_error+0x94>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a1c2:	b9cc      	cbnz	r4, a1f8 <z_fatal_error+0xb0>
		thread_name = "unknown";
    a1c4:	4817      	ldr	r0, [pc, #92]	; (a224 <z_fatal_error+0xdc>)
	LOG_ERR("Current thread: %p (%s)", thread,
    a1c6:	4b18      	ldr	r3, [pc, #96]	; (a228 <z_fatal_error+0xe0>)
    a1c8:	9301      	str	r3, [sp, #4]
    a1ca:	2300      	movs	r3, #0
    a1cc:	e9cd 4002 	strd	r4, r0, [sp, #8]
    a1d0:	490f      	ldr	r1, [pc, #60]	; (a210 <z_fatal_error+0xc8>)
    a1d2:	9300      	str	r3, [sp, #0]
    a1d4:	2201      	movs	r2, #1
    a1d6:	4618      	mov	r0, r3
    a1d8:	f004 fcf9 	bl	ebce <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a1dc:	4631      	mov	r1, r6
    a1de:	4628      	mov	r0, r5
    a1e0:	f7ff ff96 	bl	a110 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a1e4:	f388 8811 	msr	BASEPRI, r8
    a1e8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a1ec:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a1ee:	b00e      	add	sp, #56	; 0x38
    a1f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a1f4:	f7fc b816 	b.w	6224 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a1f8:	4620      	mov	r0, r4
    a1fa:	f004 fd30 	bl	ec5e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a1fe:	2800      	cmp	r0, #0
    a200:	d0e0      	beq.n	a1c4 <z_fatal_error+0x7c>
    a202:	7803      	ldrb	r3, [r0, #0]
    a204:	2b00      	cmp	r3, #0
    a206:	d0dd      	beq.n	a1c4 <z_fatal_error+0x7c>
    a208:	e7dd      	b.n	a1c6 <z_fatal_error+0x7e>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a20a:	2e00      	cmp	r6, #0
    a20c:	d1c3      	bne.n	a196 <z_fatal_error+0x4e>
    a20e:	e7e5      	b.n	a1dc <z_fatal_error+0x94>
    a210:	20000268 	.word	0x20000268
    a214:	00010280 	.word	0x00010280
    a218:	000121d4 	.word	0x000121d4
    a21c:	000121e2 	.word	0x000121e2
    a220:	0001220a 	.word	0x0001220a
    a224:	00011f1f 	.word	0x00011f1f
    a228:	0001222b 	.word	0x0001222b

0000a22c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a22c:	b570      	push	{r4, r5, r6, lr}
    a22e:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    a230:	ae06      	add	r6, sp, #24
{
    a232:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
    a234:	4603      	mov	r3, r0
    a236:	4a12      	ldr	r2, [pc, #72]	; (a280 <init_idle_thread+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    a238:	4d12      	ldr	r5, [pc, #72]	; (a284 <init_idle_thread+0x58>)
	snprintk(tname, 8, "idle %02d", i);
    a23a:	2108      	movs	r1, #8
    a23c:	4630      	mov	r0, r6
    a23e:	f001 fc56 	bl	baee <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
    a242:	23b8      	movs	r3, #184	; 0xb8
    a244:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    a248:	2201      	movs	r2, #1
    a24a:	230f      	movs	r3, #15
    a24c:	e9cd 3203 	strd	r3, r2, [sp, #12]
    a250:	2300      	movs	r3, #0
    a252:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a256:	4b0c      	ldr	r3, [pc, #48]	; (a288 <init_idle_thread+0x5c>)
	z_setup_new_thread(thread, stack,
    a258:	490c      	ldr	r1, [pc, #48]	; (a28c <init_idle_thread+0x60>)
    a25a:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a25c:	2218      	movs	r2, #24
    a25e:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
    a262:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a266:	9300      	str	r3, [sp, #0]
    a268:	fb02 1104 	mla	r1, r2, r4, r1
    a26c:	4b08      	ldr	r3, [pc, #32]	; (a290 <init_idle_thread+0x64>)
    a26e:	4628      	mov	r0, r5
    a270:	f000 f97c 	bl	a56c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a274:	7b6b      	ldrb	r3, [r5, #13]
    a276:	f023 0304 	bic.w	r3, r3, #4
    a27a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a27c:	b008      	add	sp, #32
    a27e:	bd70      	pop	{r4, r5, r6, pc}
    a280:	0001228d 	.word	0x0001228d
    a284:	20000ea8 	.word	0x20000ea8
    a288:	20002294 	.word	0x20002294
    a28c:	20003e58 	.word	0x20003e58
    a290:	0000a73d 	.word	0x0000a73d

0000a294 <bg_thread_main>:
{
    a294:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a296:	4b0a      	ldr	r3, [pc, #40]	; (a2c0 <bg_thread_main+0x2c>)
    a298:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a29a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    a29c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a29e:	f7ff fed9 	bl	a054 <z_sys_init_run_level>
	boot_banner();
    a2a2:	f001 fb71 	bl	b988 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a2a6:	2003      	movs	r0, #3
    a2a8:	f7ff fed4 	bl	a054 <z_sys_init_run_level>
	z_init_static_threads();
    a2ac:	f000 f9ea 	bl	a684 <z_init_static_threads>
	main();
    a2b0:	f7f6 f8b6 	bl	420 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a2b4:	4a03      	ldr	r2, [pc, #12]	; (a2c4 <bg_thread_main+0x30>)
    a2b6:	7b13      	ldrb	r3, [r2, #12]
    a2b8:	f023 0301 	bic.w	r3, r3, #1
    a2bc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a2be:	bd08      	pop	{r3, pc}
    a2c0:	20002356 	.word	0x20002356
    a2c4:	20000f60 	.word	0x20000f60

0000a2c8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a2c8:	4802      	ldr	r0, [pc, #8]	; (a2d4 <z_bss_zero+0xc>)
    a2ca:	4a03      	ldr	r2, [pc, #12]	; (a2d8 <z_bss_zero+0x10>)
    a2cc:	2100      	movs	r1, #0
    a2ce:	1a12      	subs	r2, r2, r0
    a2d0:	f003 bf99 	b.w	e206 <memset>
    a2d4:	20000468 	.word	0x20000468
    a2d8:	20002358 	.word	0x20002358

0000a2dc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a2dc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a2de:	f8df 80c8 	ldr.w	r8, [pc, #200]	; a3a8 <z_cstart+0xcc>
    a2e2:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a2e4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a2e8:	4d30      	ldr	r5, [pc, #192]	; (a3ac <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    a2ea:	4e31      	ldr	r6, [pc, #196]	; (a3b0 <z_cstart+0xd4>)
    a2ec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a2ee:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a3b4 <z_cstart+0xd8>
    a2f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a2f6:	2400      	movs	r4, #0
    a2f8:	616b      	str	r3, [r5, #20]
    a2fa:	23e0      	movs	r3, #224	; 0xe0
    a2fc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a300:	77ec      	strb	r4, [r5, #31]
    a302:	762c      	strb	r4, [r5, #24]
    a304:	766c      	strb	r4, [r5, #25]
    a306:	76ac      	strb	r4, [r5, #26]
    a308:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a30c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a30e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a312:	626b      	str	r3, [r5, #36]	; 0x24
    a314:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a318:	f7fb ff48 	bl	61ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a31c:	f7fb fa7a 	bl	5814 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a324:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a326:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a328:	f7fc f81e 	bl	6368 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a32c:	f7fb ff8c 	bl	6248 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a330:	f7f7 f862 	bl	13f8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a334:	f240 1301 	movw	r3, #257	; 0x101
    a338:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a33c:	ab06      	add	r3, sp, #24
    a33e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    a340:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
    a344:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a346:	f004 fc1f 	bl	eb88 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a34a:	4620      	mov	r0, r4
    a34c:	f7ff fe82 	bl	a054 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a350:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    a352:	4d19      	ldr	r5, [pc, #100]	; (a3b8 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a354:	f7ff fe7e 	bl	a054 <z_sys_init_run_level>
	z_sched_init();
    a358:	f000 ff5a 	bl	b210 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a35c:	4b17      	ldr	r3, [pc, #92]	; (a3bc <z_cstart+0xe0>)
    a35e:	9305      	str	r3, [sp, #20]
    a360:	2301      	movs	r3, #1
    a362:	4917      	ldr	r1, [pc, #92]	; (a3c0 <z_cstart+0xe4>)
    a364:	9400      	str	r4, [sp, #0]
    a366:	e9cd 4303 	strd	r4, r3, [sp, #12]
    a36a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a36e:	464b      	mov	r3, r9
    a370:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a374:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    a376:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a378:	f000 f8f8 	bl	a56c <z_setup_new_thread>
    a37c:	7b6a      	ldrb	r2, [r5, #13]
    a37e:	4607      	mov	r7, r0
    a380:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    a384:	4628      	mov	r0, r5
    a386:	736a      	strb	r2, [r5, #13]
    a388:	f004 fdd4 	bl	ef34 <z_ready_thread>
		init_idle_thread(i);
    a38c:	4620      	mov	r0, r4
    a38e:	f7ff ff4d 	bl	a22c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a392:	4b0c      	ldr	r3, [pc, #48]	; (a3c4 <z_cstart+0xe8>)
    a394:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a396:	464a      	mov	r2, r9
    a398:	4639      	mov	r1, r7
    a39a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    a39c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    a39e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a3a2:	f7fb fba3 	bl	5aec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a3a6:	bf00      	nop
    a3a8:	20004798 	.word	0x20004798
    a3ac:	e000ed00 	.word	0xe000ed00
    a3b0:	20002294 	.word	0x20002294
    a3b4:	0000a295 	.word	0x0000a295
    a3b8:	20000f60 	.word	0x20000f60
    a3bc:	00012297 	.word	0x00012297
    a3c0:	20003a58 	.word	0x20003a58
    a3c4:	20000ea8 	.word	0x20000ea8

0000a3c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    a3c8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a3ca:	4b0e      	ldr	r3, [pc, #56]	; (a404 <init_mem_slab_module+0x3c>)
    a3cc:	4c0e      	ldr	r4, [pc, #56]	; (a408 <init_mem_slab_module+0x40>)
    a3ce:	42a3      	cmp	r3, r4
    a3d0:	d301      	bcc.n	a3d6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    a3d2:	2000      	movs	r0, #0
	return rc;
}
    a3d4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a3d6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    a3da:	ea41 0200 	orr.w	r2, r1, r0
    a3de:	f012 0203 	ands.w	r2, r2, #3
    a3e2:	d10b      	bne.n	a3fc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    a3e4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    a3e6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a3e8:	42aa      	cmp	r2, r5
    a3ea:	d101      	bne.n	a3f0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a3ec:	331c      	adds	r3, #28
    a3ee:	e7ee      	b.n	a3ce <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    a3f0:	695e      	ldr	r6, [r3, #20]
    a3f2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    a3f4:	3201      	adds	r2, #1
		slab->free_list = p;
    a3f6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    a3f8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    a3fa:	e7f5      	b.n	a3e8 <init_mem_slab_module+0x20>
	return rc;
    a3fc:	f06f 0015 	mvn.w	r0, #21
    a400:	e7e8      	b.n	a3d4 <init_mem_slab_module+0xc>
    a402:	bf00      	nop
    a404:	200002c4 	.word	0x200002c4
    a408:	200002e0 	.word	0x200002e0

0000a40c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a40e:	460c      	mov	r4, r1
	__asm__ volatile(
    a410:	f04f 0520 	mov.w	r5, #32
    a414:	f3ef 8111 	mrs	r1, BASEPRI
    a418:	f385 8812 	msr	BASEPRI_MAX, r5
    a41c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a420:	6945      	ldr	r5, [r0, #20]
    a422:	b15d      	cbz	r5, a43c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    a424:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a426:	682b      	ldr	r3, [r5, #0]
    a428:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a42a:	6983      	ldr	r3, [r0, #24]
    a42c:	3301      	adds	r3, #1
    a42e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a430:	2000      	movs	r0, #0
	__asm__ volatile(
    a432:	f381 8811 	msr	BASEPRI, r1
    a436:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a43a:	e011      	b.n	a460 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a43c:	ea52 0c03 	orrs.w	ip, r2, r3
    a440:	d103      	bne.n	a44a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    a442:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    a444:	f06f 000b 	mvn.w	r0, #11
    a448:	e7f3      	b.n	a432 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a44a:	e9cd 2300 	strd	r2, r3, [sp]
    a44e:	4602      	mov	r2, r0
    a450:	3008      	adds	r0, #8
    a452:	f000 fe33 	bl	b0bc <z_pend_curr>
		if (result == 0) {
    a456:	b918      	cbnz	r0, a460 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a458:	4b02      	ldr	r3, [pc, #8]	; (a464 <k_mem_slab_alloc+0x58>)
    a45a:	689b      	ldr	r3, [r3, #8]
    a45c:	695b      	ldr	r3, [r3, #20]
    a45e:	6023      	str	r3, [r4, #0]
}
    a460:	b003      	add	sp, #12
    a462:	bd30      	pop	{r4, r5, pc}
    a464:	20002294 	.word	0x20002294

0000a468 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a46a:	4605      	mov	r5, r0
    a46c:	460e      	mov	r6, r1
	__asm__ volatile(
    a46e:	f04f 0320 	mov.w	r3, #32
    a472:	f3ef 8711 	mrs	r7, BASEPRI
    a476:	f383 8812 	msr	BASEPRI_MAX, r3
    a47a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    a47e:	4b06      	ldr	r3, [pc, #24]	; (a498 <k_thread_foreach+0x30>)
    a480:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a482:	b924      	cbnz	r4, a48e <k_thread_foreach+0x26>
	__asm__ volatile(
    a484:	f387 8811 	msr	BASEPRI, r7
    a488:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    a48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    a48e:	4620      	mov	r0, r4
    a490:	4631      	mov	r1, r6
    a492:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    a494:	6f64      	ldr	r4, [r4, #116]	; 0x74
    a496:	e7f4      	b.n	a482 <k_thread_foreach+0x1a>
    a498:	20002294 	.word	0x20002294

0000a49c <z_thread_monitor_exit>:
	__asm__ volatile(
    a49c:	f04f 0320 	mov.w	r3, #32
    a4a0:	f3ef 8111 	mrs	r1, BASEPRI
    a4a4:	f383 8812 	msr	BASEPRI_MAX, r3
    a4a8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    a4ac:	4a09      	ldr	r2, [pc, #36]	; (a4d4 <z_thread_monitor_exit+0x38>)
    a4ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a4b0:	4283      	cmp	r3, r0
    a4b2:	d107      	bne.n	a4c4 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    a4b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    a4b6:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    a4b8:	f381 8811 	msr	BASEPRI, r1
    a4bc:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    a4c0:	4770      	bx	lr
    a4c2:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a4c4:	2b00      	cmp	r3, #0
    a4c6:	d0f7      	beq.n	a4b8 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    a4c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    a4ca:	4282      	cmp	r2, r0
    a4cc:	d1f9      	bne.n	a4c2 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    a4ce:	6f42      	ldr	r2, [r0, #116]	; 0x74
    a4d0:	675a      	str	r2, [r3, #116]	; 0x74
    a4d2:	e7f1      	b.n	a4b8 <z_thread_monitor_exit+0x1c>
    a4d4:	20002294 	.word	0x20002294

0000a4d8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    a4d8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    a4da:	4604      	mov	r4, r0
    a4dc:	b908      	cbnz	r0, a4e2 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    a4de:	4b05      	ldr	r3, [pc, #20]	; (a4f4 <z_impl_k_thread_name_set+0x1c>)
    a4e0:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    a4e2:	2220      	movs	r2, #32
    a4e4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a4e8:	f003 fe0c 	bl	e104 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a4ec:	2000      	movs	r0, #0
    a4ee:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    a4f2:	bd10      	pop	{r4, pc}
    a4f4:	20002294 	.word	0x20002294

0000a4f8 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    a4f8:	7b43      	ldrb	r3, [r0, #13]
    a4fa:	2b10      	cmp	r3, #16
    a4fc:	d80e      	bhi.n	a51c <k_thread_state_str+0x24>
    a4fe:	2b10      	cmp	r3, #16
    a500:	d81c      	bhi.n	a53c <k_thread_state_str+0x44>
    a502:	e8df f003 	tbb	[pc, r3]
    a506:	091d      	.short	0x091d
    a508:	1b151b13 	.word	0x1b151b13
    a50c:	1b171b1b 	.word	0x1b171b1b
    a510:	1b1b1b1b 	.word	0x1b1b1b1b
    a514:	1b1b      	.short	0x1b1b
    a516:	19          	.byte	0x19
    a517:	00          	.byte	0x00
    a518:	480b      	ldr	r0, [pc, #44]	; (a548 <k_thread_state_str+0x50>)
    a51a:	4770      	bx	lr
    a51c:	2b20      	cmp	r3, #32
    a51e:	d011      	beq.n	a544 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
    a520:	4a0a      	ldr	r2, [pc, #40]	; (a54c <k_thread_state_str+0x54>)
    a522:	480b      	ldr	r0, [pc, #44]	; (a550 <k_thread_state_str+0x58>)
    a524:	2b80      	cmp	r3, #128	; 0x80
    a526:	bf08      	it	eq
    a528:	4610      	moveq	r0, r2
    a52a:	4770      	bx	lr
		return "pending";
    a52c:	4809      	ldr	r0, [pc, #36]	; (a554 <k_thread_state_str+0x5c>)
    a52e:	4770      	bx	lr
		return "prestart";
    a530:	4809      	ldr	r0, [pc, #36]	; (a558 <k_thread_state_str+0x60>)
    a532:	4770      	bx	lr
		return "dead";
    a534:	4809      	ldr	r0, [pc, #36]	; (a55c <k_thread_state_str+0x64>)
    a536:	4770      	bx	lr
		return "suspended";
    a538:	4809      	ldr	r0, [pc, #36]	; (a560 <k_thread_state_str+0x68>)
    a53a:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
    a53c:	4804      	ldr	r0, [pc, #16]	; (a550 <k_thread_state_str+0x58>)
    a53e:	4770      	bx	lr
		return "";
    a540:	4808      	ldr	r0, [pc, #32]	; (a564 <k_thread_state_str+0x6c>)
    a542:	4770      	bx	lr
		return "aborting";
    a544:	4808      	ldr	r0, [pc, #32]	; (a568 <k_thread_state_str+0x70>)
}
    a546:	4770      	bx	lr
    a548:	000122b5 	.word	0x000122b5
    a54c:	000122c4 	.word	0x000122c4
    a550:	00011f1f 	.word	0x00011f1f
    a554:	0001229f 	.word	0x0001229f
    a558:	000122a7 	.word	0x000122a7
    a55c:	000122b0 	.word	0x000122b0
    a560:	0001174b 	.word	0x0001174b
    a564:	0001082b 	.word	0x0001082b
    a568:	000122bb 	.word	0x000122bb

0000a56c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a570:	b085      	sub	sp, #20
    a572:	460e      	mov	r6, r1
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a574:	f100 0158 	add.w	r1, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    a578:	e9c0 1116 	strd	r1, r1, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    a57c:	9912      	ldr	r1, [sp, #72]	; 0x48
    a57e:	7301      	strb	r1, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a580:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    a582:	2104      	movs	r1, #4
	thread_base->pended_on = NULL;
    a584:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a586:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    a58a:	7341      	strb	r1, [r0, #13]

	thread_base->prio = priority;
    a58c:	9911      	ldr	r1, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    a58e:	6085      	str	r5, [r0, #8]
{
    a590:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    a592:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    a596:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    a598:	73c5      	strb	r5, [r0, #15]
	memset(stack_buf_start, 0xaa, stack_buf_size);
    a59a:	4652      	mov	r2, sl
    a59c:	21aa      	movs	r1, #170	; 0xaa
    a59e:	4630      	mov	r0, r6
{
    a5a0:	4699      	mov	r9, r3
    a5a2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a5a6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
    a5a8:	f003 fe2d 	bl	e206 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5ae:	9302      	str	r3, [sp, #8]
    a5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
    a5b2:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	stack_ptr = (char *)stack + stack_obj_size;
    a5b6:	eb06 080a 	add.w	r8, r6, sl
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5ba:	e9cd b300 	strd	fp, r3, [sp]
	new_thread->stack_info.size = stack_buf_size;
    a5be:	e9c4 6a27 	strd	r6, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5c2:	464b      	mov	r3, r9
    a5c4:	4642      	mov	r2, r8
    a5c6:	4631      	mov	r1, r6
    a5c8:	4620      	mov	r0, r4
    a5ca:	f7fb fa73 	bl	5ab4 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    a5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a5d0:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    a5d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    a5d4:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
    a5d6:	e9c4 9b19 	strd	r9, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    a5da:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    a5dc:	f04f 0220 	mov.w	r2, #32
    a5e0:	f3ef 8311 	mrs	r3, BASEPRI
    a5e4:	f382 8812 	msr	BASEPRI_MAX, r2
    a5e8:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    a5ec:	4e0e      	ldr	r6, [pc, #56]	; (a628 <z_setup_new_thread+0xbc>)
    a5ee:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    a5f0:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    a5f2:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    a5f4:	f383 8811 	msr	BASEPRI, r3
    a5f8:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    a5fc:	b18f      	cbz	r7, a622 <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
    a5fe:	221f      	movs	r2, #31
    a600:	4639      	mov	r1, r7
    a602:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a606:	f003 fd7d 	bl	e104 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a60a:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    a60e:	68b3      	ldr	r3, [r6, #8]
    a610:	b10b      	cbz	r3, a616 <z_setup_new_thread+0xaa>
	new_thread->resource_pool = _current->resource_pool;
    a612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    a616:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    a61a:	4640      	mov	r0, r8
    a61c:	b005      	add	sp, #20
    a61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    a622:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    a626:	e7f2      	b.n	a60e <z_setup_new_thread+0xa2>
    a628:	20002294 	.word	0x20002294

0000a62c <z_impl_k_thread_create>:
{
    a62c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a62e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a630:	2700      	movs	r7, #0
    a632:	9705      	str	r7, [sp, #20]
    a634:	9f10      	ldr	r7, [sp, #64]	; 0x40
    a636:	9704      	str	r7, [sp, #16]
    a638:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    a63a:	9703      	str	r7, [sp, #12]
    a63c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    a63e:	9702      	str	r7, [sp, #8]
{
    a640:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a644:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    a646:	9701      	str	r7, [sp, #4]
    a648:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a64a:	9700      	str	r7, [sp, #0]
{
    a64c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a64e:	f7ff ff8d 	bl	a56c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a652:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    a656:	bf08      	it	eq
    a658:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    a65c:	d005      	beq.n	a66a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a65e:	ea55 0306 	orrs.w	r3, r5, r6
    a662:	d105      	bne.n	a670 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    a664:	4620      	mov	r0, r4
    a666:	f000 fccd 	bl	b004 <z_sched_start>
}
    a66a:	4620      	mov	r0, r4
    a66c:	b007      	add	sp, #28
    a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a670:	4903      	ldr	r1, [pc, #12]	; (a680 <z_impl_k_thread_create+0x54>)
    a672:	4632      	mov	r2, r6
    a674:	462b      	mov	r3, r5
    a676:	f104 0018 	add.w	r0, r4, #24
    a67a:	f000 ff59 	bl	b530 <z_add_timeout>
    a67e:	e7f4      	b.n	a66a <z_impl_k_thread_create+0x3e>
    a680:	0000ef55 	.word	0x0000ef55

0000a684 <z_init_static_threads>:
{
    a684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a688:	4c29      	ldr	r4, [pc, #164]	; (a730 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    a68a:	4d2a      	ldr	r5, [pc, #168]	; (a734 <z_init_static_threads+0xb0>)
{
    a68c:	b087      	sub	sp, #28
    a68e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    a690:	42ae      	cmp	r6, r5
    a692:	f104 0430 	add.w	r4, r4, #48	; 0x30
    a696:	d30f      	bcc.n	a6b8 <z_init_static_threads+0x34>
	k_sched_lock();
    a698:	f000 fbd0 	bl	ae3c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a69c:	4c24      	ldr	r4, [pc, #144]	; (a730 <z_init_static_threads+0xac>)
    a69e:	f8df 9098 	ldr.w	r9, [pc, #152]	; a738 <z_init_static_threads+0xb4>
    a6a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a6a6:	f240 37e7 	movw	r7, #999	; 0x3e7
    a6aa:	42ac      	cmp	r4, r5
    a6ac:	d320      	bcc.n	a6f0 <z_init_static_threads+0x6c>
}
    a6ae:	b007      	add	sp, #28
    a6b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    a6b4:	f000 bd90 	b.w	b1d8 <k_sched_unlock>
		z_setup_new_thread(
    a6b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a6bc:	9305      	str	r3, [sp, #20]
    a6be:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a6c2:	9304      	str	r3, [sp, #16]
    a6c4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a6c8:	9303      	str	r3, [sp, #12]
    a6ca:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a6ce:	9302      	str	r3, [sp, #8]
    a6d0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a6d4:	9301      	str	r3, [sp, #4]
    a6d6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    a6da:	9300      	str	r3, [sp, #0]
    a6dc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    a6e0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    a6e4:	f7ff ff42 	bl	a56c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a6e8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a6ec:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a6ee:	e7ce      	b.n	a68e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a6f2:	1c5a      	adds	r2, r3, #1
    a6f4:	d00d      	beq.n	a712 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    a6f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a6fa:	2100      	movs	r1, #0
    a6fc:	4638      	mov	r0, r7
    a6fe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a702:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    a706:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a70a:	d104      	bne.n	a716 <z_init_static_threads+0x92>
	z_sched_start(thread);
    a70c:	4640      	mov	r0, r8
    a70e:	f000 fc79 	bl	b004 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a712:	3430      	adds	r4, #48	; 0x30
    a714:	e7c9      	b.n	a6aa <z_init_static_threads+0x26>
    a716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a71a:	2300      	movs	r3, #0
    a71c:	f7f5 fcf0 	bl	100 <__aeabi_uldivmod>
    a720:	4602      	mov	r2, r0
    a722:	460b      	mov	r3, r1
    a724:	f108 0018 	add.w	r0, r8, #24
    a728:	4649      	mov	r1, r9
    a72a:	f000 ff01 	bl	b530 <z_add_timeout>
    a72e:	e7f0      	b.n	a712 <z_init_static_threads+0x8e>
    a730:	20000294 	.word	0x20000294
    a734:	200002c4 	.word	0x200002c4
    a738:	0000ef55 	.word	0x0000ef55

0000a73c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a73c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a73e:	4c0b      	ldr	r4, [pc, #44]	; (a76c <idle+0x30>)
	return !z_sys_post_kernel;
    a740:	4d0b      	ldr	r5, [pc, #44]	; (a770 <idle+0x34>)
	__asm__ volatile(
    a742:	f04f 0220 	mov.w	r2, #32
    a746:	f3ef 8311 	mrs	r3, BASEPRI
    a74a:	f382 8812 	msr	BASEPRI_MAX, r2
    a74e:	f3bf 8f6f 	isb	sy
    a752:	f004 fcbc 	bl	f0ce <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a756:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    a758:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a75a:	b913      	cbnz	r3, a762 <idle+0x26>
	arch_cpu_idle();
    a75c:	f7fb f860 	bl	5820 <arch_cpu_idle>
}
    a760:	e7ef      	b.n	a742 <idle+0x6>
    a762:	f7fa ff7f 	bl	5664 <pm_system_suspend>
    a766:	2800      	cmp	r0, #0
    a768:	d1eb      	bne.n	a742 <idle+0x6>
    a76a:	e7f7      	b.n	a75c <idle+0x20>
    a76c:	20002294 	.word	0x20002294
    a770:	20002356 	.word	0x20002356

0000a774 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    a774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a778:	4604      	mov	r4, r0
    a77a:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    a77c:	f100 0808 	add.w	r8, r0, #8
    a780:	f04f 0120 	mov.w	r1, #32
    a784:	f3ef 8711 	mrs	r7, BASEPRI
    a788:	f381 8812 	msr	BASEPRI_MAX, r1
    a78c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    a790:	6a05      	ldr	r5, [r0, #32]
    a792:	68c1      	ldr	r1, [r0, #12]
    a794:	428d      	cmp	r5, r1
    a796:	d230      	bcs.n	a7fa <z_impl_k_msgq_put+0x86>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    a798:	f004 fc3d 	bl	f016 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
    a79c:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
    a79e:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
    a7a0:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
    a7a2:	b180      	cbz	r0, a7c6 <z_impl_k_msgq_put+0x52>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a7a4:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
    a7a6:	6940      	ldr	r0, [r0, #20]
    a7a8:	f003 fd22 	bl	e1f0 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    a7ac:	4628      	mov	r0, r5
    a7ae:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
    a7b2:	f004 fbbf 	bl	ef34 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    a7b6:	4640      	mov	r0, r8
    a7b8:	4639      	mov	r1, r7
    a7ba:	f000 fb2d 	bl	ae18 <z_reschedule>
			return 0;
    a7be:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    a7c0:	b002      	add	sp, #8
    a7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    a7c6:	69e0      	ldr	r0, [r4, #28]
    a7c8:	f003 fd12 	bl	e1f0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    a7cc:	69e3      	ldr	r3, [r4, #28]
    a7ce:	68a2      	ldr	r2, [r4, #8]
    a7d0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    a7d2:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    a7d4:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    a7d6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    a7d8:	bf04      	itt	eq
    a7da:	6923      	ldreq	r3, [r4, #16]
    a7dc:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    a7de:	6a23      	ldr	r3, [r4, #32]
    a7e0:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
    a7e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
    a7e6:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
    a7e8:	2110      	movs	r1, #16
    a7ea:	f004 fe36 	bl	f45a <z_handle_obj_poll_events>
		result = 0;
    a7ee:	2000      	movs	r0, #0
	__asm__ volatile(
    a7f0:	f387 8811 	msr	BASEPRI, r7
    a7f4:	f3bf 8f6f 	isb	sy
	return result;
    a7f8:	e7e2      	b.n	a7c0 <z_impl_k_msgq_put+0x4c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a7fa:	ea52 0103 	orrs.w	r1, r2, r3
    a7fe:	d00a      	beq.n	a816 <z_impl_k_msgq_put+0xa2>
		_current->base.swap_data = (void *) data;
    a800:	4906      	ldr	r1, [pc, #24]	; (a81c <z_impl_k_msgq_put+0xa8>)
    a802:	6889      	ldr	r1, [r1, #8]
    a804:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    a806:	e9cd 2300 	strd	r2, r3, [sp]
    a80a:	4639      	mov	r1, r7
    a80c:	4602      	mov	r2, r0
    a80e:	4640      	mov	r0, r8
    a810:	f000 fc54 	bl	b0bc <z_pend_curr>
		return result;
    a814:	e7d4      	b.n	a7c0 <z_impl_k_msgq_put+0x4c>
		result = -ENOMSG;
    a816:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a81a:	e7e9      	b.n	a7f0 <z_impl_k_msgq_put+0x7c>
    a81c:	20002294 	.word	0x20002294

0000a820 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    a820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a822:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    a824:	f104 0708 	add.w	r7, r4, #8
{
    a828:	4608      	mov	r0, r1
	__asm__ volatile(
    a82a:	f04f 0120 	mov.w	r1, #32
    a82e:	f3ef 8611 	mrs	r6, BASEPRI
    a832:	f381 8812 	msr	BASEPRI_MAX, r1
    a836:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    a83a:	6a21      	ldr	r1, [r4, #32]
    a83c:	2900      	cmp	r1, #0
    a83e:	d032      	beq.n	a8a6 <z_impl_k_msgq_get+0x86>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    a840:	68a2      	ldr	r2, [r4, #8]
    a842:	69a1      	ldr	r1, [r4, #24]
    a844:	f003 fcd4 	bl	e1f0 <memcpy>
		msgq->read_ptr += msgq->msg_size;
    a848:	69a3      	ldr	r3, [r4, #24]
    a84a:	68a2      	ldr	r2, [r4, #8]
    a84c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
    a84e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
    a850:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    a852:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
    a854:	bf04      	itt	eq
    a856:	6923      	ldreq	r3, [r4, #16]
    a858:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
    a85a:	6a23      	ldr	r3, [r4, #32]
    a85c:	3b01      	subs	r3, #1
    a85e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    a860:	4620      	mov	r0, r4
    a862:	f004 fbd8 	bl	f016 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    a866:	4605      	mov	r5, r0
    a868:	b368      	cbz	r0, a8c6 <z_impl_k_msgq_get+0xa6>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    a86a:	6941      	ldr	r1, [r0, #20]
    a86c:	68a2      	ldr	r2, [r4, #8]
    a86e:	69e0      	ldr	r0, [r4, #28]
    a870:	f003 fcbe 	bl	e1f0 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    a874:	69e3      	ldr	r3, [r4, #28]
    a876:	68a2      	ldr	r2, [r4, #8]
    a878:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    a87a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    a87c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    a87e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    a880:	bf04      	itt	eq
    a882:	6923      	ldreq	r3, [r4, #16]
    a884:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
    a886:	6a23      	ldr	r3, [r4, #32]
    a888:	3301      	adds	r3, #1
    a88a:	6223      	str	r3, [r4, #32]
    a88c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    a88e:	4628      	mov	r0, r5
    a890:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
    a894:	f004 fb4e 	bl	ef34 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    a898:	4638      	mov	r0, r7
    a89a:	4631      	mov	r1, r6
    a89c:	f000 fabc 	bl	ae18 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
    a8a0:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    a8a2:	b003      	add	sp, #12
    a8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a8a6:	ea52 0103 	orrs.w	r1, r2, r3
    a8aa:	d00a      	beq.n	a8c2 <z_impl_k_msgq_get+0xa2>
		_current->base.swap_data = data;
    a8ac:	4908      	ldr	r1, [pc, #32]	; (a8d0 <z_impl_k_msgq_get+0xb0>)
    a8ae:	6889      	ldr	r1, [r1, #8]
    a8b0:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    a8b2:	e9cd 2300 	strd	r2, r3, [sp]
    a8b6:	4631      	mov	r1, r6
    a8b8:	4622      	mov	r2, r4
    a8ba:	4638      	mov	r0, r7
    a8bc:	f000 fbfe 	bl	b0bc <z_pend_curr>
		return result;
    a8c0:	e7ef      	b.n	a8a2 <z_impl_k_msgq_get+0x82>
		result = -ENOMSG;
    a8c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    a8c6:	f386 8811 	msr	BASEPRI, r6
    a8ca:	f3bf 8f6f 	isb	sy
	return result;
    a8ce:	e7e8      	b.n	a8a2 <z_impl_k_msgq_get+0x82>
    a8d0:	20002294 	.word	0x20002294

0000a8d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a8d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a8d8:	4604      	mov	r4, r0
    a8da:	4617      	mov	r7, r2
    a8dc:	461e      	mov	r6, r3
	__asm__ volatile(
    a8de:	f04f 0320 	mov.w	r3, #32
    a8e2:	f3ef 8811 	mrs	r8, BASEPRI
    a8e6:	f383 8812 	msr	BASEPRI_MAX, r3
    a8ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a8ee:	68c3      	ldr	r3, [r0, #12]
    a8f0:	4a32      	ldr	r2, [pc, #200]	; (a9bc <z_impl_k_mutex_lock+0xe8>)
    a8f2:	b16b      	cbz	r3, a910 <z_impl_k_mutex_lock+0x3c>
    a8f4:	6880      	ldr	r0, [r0, #8]
    a8f6:	6891      	ldr	r1, [r2, #8]
    a8f8:	4288      	cmp	r0, r1
    a8fa:	d019      	beq.n	a930 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a8fc:	ea57 0306 	orrs.w	r3, r7, r6
    a900:	d118      	bne.n	a934 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a902:	f388 8811 	msr	BASEPRI, r8
    a906:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    a90a:	f06f 000f 	mvn.w	r0, #15
    a90e:	e00c      	b.n	a92a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    a910:	6891      	ldr	r1, [r2, #8]
    a912:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a916:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    a918:	3301      	adds	r3, #1
    a91a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a91c:	6893      	ldr	r3, [r2, #8]
    a91e:	60a3      	str	r3, [r4, #8]
    a920:	f388 8811 	msr	BASEPRI, r8
    a924:	f3bf 8f6f 	isb	sy
		return 0;
    a928:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a92a:	b002      	add	sp, #8
    a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a930:	6921      	ldr	r1, [r4, #16]
    a932:	e7f0      	b.n	a916 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a934:	f991 100e 	ldrsb.w	r1, [r1, #14]
    a938:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    a93c:	4299      	cmp	r1, r3
    a93e:	bfa8      	it	ge
    a940:	4619      	movge	r1, r3
    a942:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    a946:	4291      	cmp	r1, r2
    a948:	bfb8      	it	lt
    a94a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a94c:	428b      	cmp	r3, r1
    a94e:	dd2e      	ble.n	a9ae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    a950:	f004 f9c2 	bl	ecd8 <adjust_owner_prio.isra.0>
    a954:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a956:	e9cd 7600 	strd	r7, r6, [sp]
    a95a:	4819      	ldr	r0, [pc, #100]	; (a9c0 <z_impl_k_mutex_lock+0xec>)
    a95c:	4622      	mov	r2, r4
    a95e:	4641      	mov	r1, r8
    a960:	f000 fbac 	bl	b0bc <z_pend_curr>
	if (got_mutex == 0) {
    a964:	2800      	cmp	r0, #0
    a966:	d0e0      	beq.n	a92a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    a968:	f04f 0320 	mov.w	r3, #32
    a96c:	f3ef 8611 	mrs	r6, BASEPRI
    a970:	f383 8812 	msr	BASEPRI_MAX, r3
    a974:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a978:	6823      	ldr	r3, [r4, #0]
    a97a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a97c:	429c      	cmp	r4, r3
    a97e:	d00a      	beq.n	a996 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a980:	b14b      	cbz	r3, a996 <z_impl_k_mutex_lock+0xc2>
    a982:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a986:	4299      	cmp	r1, r3
    a988:	bfa8      	it	ge
    a98a:	4619      	movge	r1, r3
    a98c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    a990:	4299      	cmp	r1, r3
    a992:	bfb8      	it	lt
    a994:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a996:	68a0      	ldr	r0, [r4, #8]
    a998:	f004 f99e 	bl	ecd8 <adjust_owner_prio.isra.0>
    a99c:	b900      	cbnz	r0, a9a0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    a99e:	b145      	cbz	r5, a9b2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    a9a0:	4807      	ldr	r0, [pc, #28]	; (a9c0 <z_impl_k_mutex_lock+0xec>)
    a9a2:	4631      	mov	r1, r6
    a9a4:	f000 fa38 	bl	ae18 <z_reschedule>
	return -EAGAIN;
    a9a8:	f06f 000a 	mvn.w	r0, #10
    a9ac:	e7bd      	b.n	a92a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    a9ae:	2500      	movs	r5, #0
    a9b0:	e7d1      	b.n	a956 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    a9b2:	f386 8811 	msr	BASEPRI, r6
    a9b6:	f3bf 8f6f 	isb	sy
    a9ba:	e7f5      	b.n	a9a8 <z_impl_k_mutex_lock+0xd4>
    a9bc:	20002294 	.word	0x20002294
    a9c0:	20002357 	.word	0x20002357

0000a9c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a9c4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a9c6:	6883      	ldr	r3, [r0, #8]
{
    a9c8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d033      	beq.n	aa36 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a9ce:	4a1d      	ldr	r2, [pc, #116]	; (aa44 <z_impl_k_mutex_unlock+0x80>)
    a9d0:	6892      	ldr	r2, [r2, #8]
    a9d2:	4293      	cmp	r3, r2
    a9d4:	d132      	bne.n	aa3c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a9d6:	7bda      	ldrb	r2, [r3, #15]
    a9d8:	3a01      	subs	r2, #1
    a9da:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a9dc:	68c3      	ldr	r3, [r0, #12]
    a9de:	2b01      	cmp	r3, #1
    a9e0:	d905      	bls.n	a9ee <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a9e2:	3b01      	subs	r3, #1
    a9e4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a9e6:	f000 fbf7 	bl	b1d8 <k_sched_unlock>

	return 0;
    a9ea:	2000      	movs	r0, #0
}
    a9ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a9ee:	f04f 0320 	mov.w	r3, #32
    a9f2:	f3ef 8511 	mrs	r5, BASEPRI
    a9f6:	f383 8812 	msr	BASEPRI_MAX, r3
    a9fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a9fe:	6901      	ldr	r1, [r0, #16]
    aa00:	6880      	ldr	r0, [r0, #8]
    aa02:	f004 f969 	bl	ecd8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    aa06:	4620      	mov	r0, r4
    aa08:	f004 fb05 	bl	f016 <z_unpend_first_thread>
	mutex->owner = new_owner;
    aa0c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    aa0e:	b160      	cbz	r0, aa2a <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    aa10:	f990 200e 	ldrsb.w	r2, [r0, #14]
    aa14:	6122      	str	r2, [r4, #16]
    aa16:	2200      	movs	r2, #0
    aa18:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    aa1c:	f004 fa8a 	bl	ef34 <z_ready_thread>
		z_reschedule(&lock, key);
    aa20:	4809      	ldr	r0, [pc, #36]	; (aa48 <z_impl_k_mutex_unlock+0x84>)
    aa22:	4629      	mov	r1, r5
    aa24:	f000 f9f8 	bl	ae18 <z_reschedule>
    aa28:	e7dd      	b.n	a9e6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    aa2a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    aa2c:	f385 8811 	msr	BASEPRI, r5
    aa30:	f3bf 8f6f 	isb	sy
    aa34:	e7d7      	b.n	a9e6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    aa36:	f06f 0015 	mvn.w	r0, #21
    aa3a:	e7d7      	b.n	a9ec <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    aa3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa40:	e7d4      	b.n	a9ec <z_impl_k_mutex_unlock+0x28>
    aa42:	bf00      	nop
    aa44:	20002294 	.word	0x20002294
    aa48:	20002357 	.word	0x20002357

0000aa4c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    aa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    aa4e:	4611      	mov	r1, r2
	__asm__ volatile(
    aa50:	f04f 0220 	mov.w	r2, #32
    aa54:	f3ef 8511 	mrs	r5, BASEPRI
    aa58:	f382 8812 	msr	BASEPRI_MAX, r2
    aa5c:	f3bf 8f6f 	isb	sy
    aa60:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    aa62:	b19c      	cbz	r4, aa8c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    aa64:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    aa66:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    aa68:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    aa6c:	4294      	cmp	r4, r2
	list->head = node;
    aa6e:	6003      	str	r3, [r0, #0]
	list->tail = node;
    aa70:	bf08      	it	eq
    aa72:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    aa74:	2101      	movs	r1, #1
    aa76:	4620      	mov	r0, r4
    aa78:	f004 f9a2 	bl	edc0 <z_queue_node_peek>
    aa7c:	4604      	mov	r4, r0
	__asm__ volatile(
    aa7e:	f385 8811 	msr	BASEPRI, r5
    aa82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    aa86:	4620      	mov	r0, r4
    aa88:	b003      	add	sp, #12
    aa8a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    aa8c:	ea51 0203 	orrs.w	r2, r1, r3
    aa90:	d0f5      	beq.n	aa7e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    aa92:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    aa96:	e9cd 1300 	strd	r1, r3, [sp]
    aa9a:	4610      	mov	r0, r2
    aa9c:	4629      	mov	r1, r5
    aa9e:	f000 fb0d 	bl	b0bc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    aaa2:	2800      	cmp	r0, #0
    aaa4:	d1ef      	bne.n	aa86 <z_impl_k_queue_get+0x3a>
    aaa6:	4b02      	ldr	r3, [pc, #8]	; (aab0 <z_impl_k_queue_get+0x64>)
    aaa8:	689b      	ldr	r3, [r3, #8]
    aaaa:	695c      	ldr	r4, [r3, #20]
    aaac:	e7eb      	b.n	aa86 <z_impl_k_queue_get+0x3a>
    aaae:	bf00      	nop
    aab0:	20002294 	.word	0x20002294

0000aab4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    aab4:	b538      	push	{r3, r4, r5, lr}
    aab6:	4604      	mov	r4, r0
	__asm__ volatile(
    aab8:	f04f 0320 	mov.w	r3, #32
    aabc:	f3ef 8511 	mrs	r5, BASEPRI
    aac0:	f383 8812 	msr	BASEPRI_MAX, r3
    aac4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    aac8:	f004 faa5 	bl	f016 <z_unpend_first_thread>

	if (thread != NULL) {
    aacc:	b150      	cbz	r0, aae4 <z_impl_k_sem_give+0x30>
    aace:	2200      	movs	r2, #0
    aad0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    aad4:	f004 fa2e 	bl	ef34 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    aad8:	4629      	mov	r1, r5
    aada:	4808      	ldr	r0, [pc, #32]	; (aafc <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    aadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    aae0:	f000 b99a 	b.w	ae18 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    aae4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    aae8:	429a      	cmp	r2, r3
    aaea:	bf18      	it	ne
    aaec:	3301      	addne	r3, #1
    aaee:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    aaf0:	2102      	movs	r1, #2
    aaf2:	f104 0010 	add.w	r0, r4, #16
    aaf6:	f004 fcb0 	bl	f45a <z_handle_obj_poll_events>
}
    aafa:	e7ed      	b.n	aad8 <z_impl_k_sem_give+0x24>
    aafc:	20002357 	.word	0x20002357

0000ab00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    ab00:	b513      	push	{r0, r1, r4, lr}
    ab02:	f04f 0420 	mov.w	r4, #32
    ab06:	f3ef 8111 	mrs	r1, BASEPRI
    ab0a:	f384 8812 	msr	BASEPRI_MAX, r4
    ab0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    ab12:	6884      	ldr	r4, [r0, #8]
    ab14:	b144      	cbz	r4, ab28 <z_impl_k_sem_take+0x28>
		sem->count--;
    ab16:	3c01      	subs	r4, #1
    ab18:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    ab1a:	f381 8811 	msr	BASEPRI, r1
    ab1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ab22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ab24:	b002      	add	sp, #8
    ab26:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ab28:	ea52 0403 	orrs.w	r4, r2, r3
    ab2c:	d106      	bne.n	ab3c <z_impl_k_sem_take+0x3c>
    ab2e:	f381 8811 	msr	BASEPRI, r1
    ab32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ab36:	f06f 000f 	mvn.w	r0, #15
    ab3a:	e7f3      	b.n	ab24 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ab3c:	e9cd 2300 	strd	r2, r3, [sp]
    ab40:	4602      	mov	r2, r0
    ab42:	4802      	ldr	r0, [pc, #8]	; (ab4c <z_impl_k_sem_take+0x4c>)
    ab44:	f000 faba 	bl	b0bc <z_pend_curr>
	return ret;
    ab48:	e7ec      	b.n	ab24 <z_impl_k_sem_take+0x24>
    ab4a:	bf00      	nop
    ab4c:	20002357 	.word	0x20002357

0000ab50 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    ab54:	4e47      	ldr	r6, [pc, #284]	; (ac74 <work_queue_main+0x124>)
    ab56:	b085      	sub	sp, #20
    ab58:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    ab5a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ab5e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    ab62:	f04f 0320 	mov.w	r3, #32
    ab66:	f3ef 8711 	mrs	r7, BASEPRI
    ab6a:	f383 8812 	msr	BASEPRI_MAX, r3
    ab6e:	f3bf 8f6f 	isb	sy
    ab72:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ab76:	b98d      	cbnz	r5, ab9c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    ab78:	2102      	movs	r1, #2
    ab7a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    ab7e:	f004 f946 	bl	ee0e <flag_test_and_clear>
    ab82:	2800      	cmp	r0, #0
    ab84:	d135      	bne.n	abf2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    ab86:	2300      	movs	r3, #0
    ab88:	e9cd 8900 	strd	r8, r9, [sp]
    ab8c:	9302      	str	r3, [sp, #8]
    ab8e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    ab92:	4639      	mov	r1, r7
    ab94:	4838      	ldr	r0, [pc, #224]	; (ac78 <work_queue_main+0x128>)
    ab96:	f000 fc55 	bl	b444 <z_sched_wait>
			continue;
    ab9a:	e7e2      	b.n	ab62 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ab9c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    aba0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    aba2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aba6:	4295      	cmp	r5, r2
    aba8:	d101      	bne.n	abae <work_queue_main+0x5e>
	list->tail = node;
    abaa:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    abae:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    abb2:	f043 0302 	orr.w	r3, r3, #2
    abb6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    abba:	68eb      	ldr	r3, [r5, #12]
    abbc:	f023 0304 	bic.w	r3, r3, #4
    abc0:	f043 0301 	orr.w	r3, r3, #1
    abc4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    abc6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    abc8:	f387 8811 	msr	BASEPRI, r7
    abcc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    abd0:	4628      	mov	r0, r5
    abd2:	4798      	blx	r3
	__asm__ volatile(
    abd4:	f04f 0320 	mov.w	r3, #32
    abd8:	f3ef 8b11 	mrs	fp, BASEPRI
    abdc:	f383 8812 	msr	BASEPRI_MAX, r3
    abe0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    abe4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    abe6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    abe8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    abec:	d40b      	bmi.n	ac06 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    abee:	60ea      	str	r2, [r5, #12]
    abf0:	e00e      	b.n	ac10 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    abf2:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    abf6:	2200      	movs	r2, #0
    abf8:	2101      	movs	r1, #1
    abfa:	4628      	mov	r0, r5
    abfc:	f004 fa33 	bl	f066 <z_sched_wake>
    ac00:	2800      	cmp	r0, #0
    ac02:	d1f8      	bne.n	abf6 <work_queue_main+0xa6>
    ac04:	e7bf      	b.n	ab86 <work_queue_main+0x36>
	return list->head;
    ac06:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    ac08:	f023 0303 	bic.w	r3, r3, #3
    ac0c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ac0e:	b970      	cbnz	r0, ac2e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    ac10:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    ac14:	f023 0302 	bic.w	r3, r3, #2
    ac18:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    ac1c:	f38b 8811 	msr	BASEPRI, fp
    ac20:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    ac24:	05d8      	lsls	r0, r3, #23
    ac26:	d49c      	bmi.n	ab62 <work_queue_main+0x12>
	z_impl_k_yield();
    ac28:	f000 fafe 	bl	b228 <z_impl_k_yield>
}
    ac2c:	e799      	b.n	ab62 <work_queue_main+0x12>
	return node->next;
    ac2e:	2700      	movs	r7, #0
    ac30:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    ac34:	463b      	mov	r3, r7
		if (wc->work == work) {
    ac36:	6842      	ldr	r2, [r0, #4]
    ac38:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    ac3a:	4601      	mov	r1, r0
		if (wc->work == work) {
    ac3c:	d10c      	bne.n	ac58 <work_queue_main+0x108>
	return node->next;
    ac3e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    ac40:	b997      	cbnz	r7, ac68 <work_queue_main+0x118>
    ac42:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    ac44:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    ac46:	4282      	cmp	r2, r0
    ac48:	d100      	bne.n	ac4c <work_queue_main+0xfc>
	list->tail = node;
    ac4a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    ac4c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    ac50:	f7ff ff30 	bl	aab4 <z_impl_k_sem_give>
}
    ac54:	4639      	mov	r1, r7
    ac56:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ac58:	f1ba 0f00 	cmp.w	sl, #0
    ac5c:	d0d8      	beq.n	ac10 <work_queue_main+0xc0>
	return node->next;
    ac5e:	4650      	mov	r0, sl
    ac60:	460f      	mov	r7, r1
    ac62:	f8da a000 	ldr.w	sl, [sl]
    ac66:	e7e6      	b.n	ac36 <work_queue_main+0xe6>
	return list->tail;
    ac68:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    ac6a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    ac6c:	4290      	cmp	r0, r2
	list->tail = node;
    ac6e:	bf08      	it	eq
    ac70:	6077      	streq	r7, [r6, #4]
}
    ac72:	e7eb      	b.n	ac4c <work_queue_main+0xfc>
    ac74:	200022c0 	.word	0x200022c0
    ac78:	20002357 	.word	0x20002357

0000ac7c <submit_to_queue_locked>:
{
    ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    ac7e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ac80:	079a      	lsls	r2, r3, #30
{
    ac82:	4604      	mov	r4, r0
    ac84:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ac86:	f3c3 0540 	ubfx	r5, r3, #1, #1
    ac8a:	d41f      	bmi.n	accc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    ac8c:	075f      	lsls	r7, r3, #29
    ac8e:	d41f      	bmi.n	acd0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    ac90:	680a      	ldr	r2, [r1, #0]
    ac92:	b90a      	cbnz	r2, ac98 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    ac94:	6882      	ldr	r2, [r0, #8]
    ac96:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    ac98:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    ac9a:	bf44      	itt	mi
    ac9c:	68a3      	ldrmi	r3, [r4, #8]
    ac9e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    aca0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    aca2:	bf4c      	ite	mi
    aca4:	2502      	movmi	r5, #2
		ret = 1;
    aca6:	2501      	movpl	r5, #1
	if (queue == NULL) {
    aca8:	b37f      	cbz	r7, ad0a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    acaa:	4b1b      	ldr	r3, [pc, #108]	; (ad18 <submit_to_queue_locked+0x9c>)
    acac:	689b      	ldr	r3, [r3, #8]
    acae:	42bb      	cmp	r3, r7
    acb0:	d111      	bne.n	acd6 <submit_to_queue_locked+0x5a>
    acb2:	f003 ffce 	bl	ec52 <k_is_in_isr>
    acb6:	f080 0001 	eor.w	r0, r0, #1
    acba:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    acbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    acc0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    acc2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    acc6:	d523      	bpl.n	ad10 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    acc8:	b13a      	cbz	r2, acda <submit_to_queue_locked+0x5e>
    acca:	b940      	cbnz	r0, acde <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    accc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    acd0:	2300      	movs	r3, #0
    acd2:	6033      	str	r3, [r6, #0]
	return ret;
    acd4:	e013      	b.n	acfe <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    acd6:	2000      	movs	r0, #0
    acd8:	e7f0      	b.n	acbc <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    acda:	071b      	lsls	r3, r3, #28
    acdc:	d4f6      	bmi.n	accc <submit_to_queue_locked+0x50>
	parent->next = child;
    acde:	2300      	movs	r3, #0
    ace0:	6023      	str	r3, [r4, #0]
	return list->tail;
    ace2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    ace6:	b963      	cbnz	r3, ad02 <submit_to_queue_locked+0x86>
	list->head = node;
    ace8:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    acec:	4638      	mov	r0, r7
    acee:	f004 f899 	bl	ee24 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    acf2:	68e3      	ldr	r3, [r4, #12]
    acf4:	f043 0304 	orr.w	r3, r3, #4
    acf8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    acfa:	6833      	ldr	r3, [r6, #0]
    acfc:	60a3      	str	r3, [r4, #8]
}
    acfe:	4628      	mov	r0, r5
    ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    ad02:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ad04:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
    ad08:	e7f0      	b.n	acec <submit_to_queue_locked+0x70>
		return -EINVAL;
    ad0a:	f06f 0515 	mvn.w	r5, #21
    ad0e:	e7df      	b.n	acd0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    ad10:	f06f 0512 	mvn.w	r5, #18
    ad14:	e7dc      	b.n	acd0 <submit_to_queue_locked+0x54>
    ad16:	bf00      	nop
    ad18:	20002294 	.word	0x20002294

0000ad1c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ad1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad1e:	b089      	sub	sp, #36	; 0x24
    ad20:	4604      	mov	r4, r0
	list->head = NULL;
    ad22:	2000      	movs	r0, #0
	list->tail = NULL;
    ad24:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    ad28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ad2a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    ad2e:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    ad32:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    ad36:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    ad3a:	b31d      	cbz	r5, ad84 <k_work_queue_start+0x68>
    ad3c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    ad3e:	2800      	cmp	r0, #0
    ad40:	f240 1001 	movw	r0, #257	; 0x101
    ad44:	bf08      	it	eq
    ad46:	2001      	moveq	r0, #1
	*flagp = flags;
    ad48:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ad4c:	2000      	movs	r0, #0
    ad4e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ad52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    ad56:	e9cd 3003 	strd	r3, r0, [sp, #12]
    ad5a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    ad5e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ad62:	4b09      	ldr	r3, [pc, #36]	; (ad88 <k_work_queue_start+0x6c>)
    ad64:	9400      	str	r4, [sp, #0]
    ad66:	4620      	mov	r0, r4
    ad68:	f7ff fc60 	bl	a62c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ad6c:	b125      	cbz	r5, ad78 <k_work_queue_start+0x5c>
    ad6e:	6829      	ldr	r1, [r5, #0]
    ad70:	b111      	cbz	r1, ad78 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    ad72:	4620      	mov	r0, r4
    ad74:	f7ff fbb0 	bl	a4d8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ad78:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ad7a:	b009      	add	sp, #36	; 0x24
    ad7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ad80:	f003 bf6f 	b.w	ec62 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ad84:	2001      	movs	r0, #1
    ad86:	e7df      	b.n	ad48 <k_work_queue_start+0x2c>
    ad88:	0000ab51 	.word	0x0000ab51

0000ad8c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    ad8c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    ad8e:	4c08      	ldr	r4, [pc, #32]	; (adb0 <z_reset_time_slice+0x24>)
    ad90:	6823      	ldr	r3, [r4, #0]
    ad92:	b15b      	cbz	r3, adac <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ad94:	f7fd fbc8 	bl	8528 <sys_clock_elapsed>
    ad98:	4603      	mov	r3, r0
    ad9a:	6820      	ldr	r0, [r4, #0]
    ad9c:	4a05      	ldr	r2, [pc, #20]	; (adb4 <z_reset_time_slice+0x28>)
    ad9e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    ada0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ada4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ada6:	2100      	movs	r1, #0
    ada8:	f004 b9a1 	b.w	f0ee <z_set_timeout_expiry>
}
    adac:	bd10      	pop	{r4, pc}
    adae:	bf00      	nop
    adb0:	200022d0 	.word	0x200022d0
    adb4:	20002294 	.word	0x20002294

0000adb8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adba:	4604      	mov	r4, r0
    adbc:	460d      	mov	r5, r1
	__asm__ volatile(
    adbe:	f04f 0320 	mov.w	r3, #32
    adc2:	f3ef 8611 	mrs	r6, BASEPRI
    adc6:	f383 8812 	msr	BASEPRI_MAX, r3
    adca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    adce:	4b0f      	ldr	r3, [pc, #60]	; (ae0c <k_sched_time_slice_set+0x54>)
    add0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    add2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    add6:	f240 30e7 	movw	r0, #999	; 0x3e7
    adda:	6119      	str	r1, [r3, #16]
    addc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ade0:	2300      	movs	r3, #0
    ade2:	fbe4 0107 	umlal	r0, r1, r4, r7
    ade6:	f7f5 f98b 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    adea:	2c00      	cmp	r4, #0
    adec:	4b08      	ldr	r3, [pc, #32]	; (ae10 <k_sched_time_slice_set+0x58>)
    adee:	dc09      	bgt.n	ae04 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    adf0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    adf2:	4b08      	ldr	r3, [pc, #32]	; (ae14 <k_sched_time_slice_set+0x5c>)
    adf4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    adf6:	f7ff ffc9 	bl	ad8c <z_reset_time_slice>
	__asm__ volatile(
    adfa:	f386 8811 	msr	BASEPRI, r6
    adfe:	f3bf 8f6f 	isb	sy
	}
}
    ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    ae04:	2802      	cmp	r0, #2
    ae06:	bfb8      	it	lt
    ae08:	2002      	movlt	r0, #2
    ae0a:	e7f1      	b.n	adf0 <k_sched_time_slice_set+0x38>
    ae0c:	20002294 	.word	0x20002294
    ae10:	200022d0 	.word	0x200022d0
    ae14:	200022cc 	.word	0x200022cc

0000ae18 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ae18:	b949      	cbnz	r1, ae2e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ae1a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    ae1e:	b930      	cbnz	r0, ae2e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    ae20:	4b05      	ldr	r3, [pc, #20]	; (ae38 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    ae22:	69da      	ldr	r2, [r3, #28]
    ae24:	689b      	ldr	r3, [r3, #8]
    ae26:	429a      	cmp	r2, r3
    ae28:	d001      	beq.n	ae2e <z_reschedule+0x16>
	ret = arch_swap(key);
    ae2a:	f7fa bdf1 	b.w	5a10 <arch_swap>
    ae2e:	f381 8811 	msr	BASEPRI, r1
    ae32:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    ae36:	4770      	bx	lr
    ae38:	20002294 	.word	0x20002294

0000ae3c <k_sched_lock>:
	__asm__ volatile(
    ae3c:	f04f 0320 	mov.w	r3, #32
    ae40:	f3ef 8111 	mrs	r1, BASEPRI
    ae44:	f383 8812 	msr	BASEPRI_MAX, r3
    ae48:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    ae4c:	4b04      	ldr	r3, [pc, #16]	; (ae60 <k_sched_lock+0x24>)
    ae4e:	689a      	ldr	r2, [r3, #8]
    ae50:	7bd3      	ldrb	r3, [r2, #15]
    ae52:	3b01      	subs	r3, #1
    ae54:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    ae56:	f381 8811 	msr	BASEPRI, r1
    ae5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    ae5e:	4770      	bx	lr
    ae60:	20002294 	.word	0x20002294

0000ae64 <update_cache>:
{
    ae64:	b538      	push	{r3, r4, r5, lr}
    ae66:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    ae68:	480c      	ldr	r0, [pc, #48]	; (ae9c <update_cache+0x38>)
    ae6a:	4d0d      	ldr	r5, [pc, #52]	; (aea0 <update_cache+0x3c>)
    ae6c:	f004 f85c 	bl	ef28 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ae70:	4604      	mov	r4, r0
    ae72:	b900      	cbnz	r0, ae76 <update_cache+0x12>
    ae74:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    ae76:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    ae78:	b94a      	cbnz	r2, ae8e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    ae7a:	7b5a      	ldrb	r2, [r3, #13]
    ae7c:	06d2      	lsls	r2, r2, #27
    ae7e:	d106      	bne.n	ae8e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ae80:	69a2      	ldr	r2, [r4, #24]
    ae82:	b922      	cbnz	r2, ae8e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    ae84:	89da      	ldrh	r2, [r3, #14]
    ae86:	2a7f      	cmp	r2, #127	; 0x7f
    ae88:	d901      	bls.n	ae8e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    ae8a:	61eb      	str	r3, [r5, #28]
}
    ae8c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    ae8e:	429c      	cmp	r4, r3
    ae90:	d001      	beq.n	ae96 <update_cache+0x32>
			z_reset_time_slice();
    ae92:	f7ff ff7b 	bl	ad8c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ae96:	61ec      	str	r4, [r5, #28]
}
    ae98:	e7f8      	b.n	ae8c <update_cache+0x28>
    ae9a:	bf00      	nop
    ae9c:	200022b4 	.word	0x200022b4
    aea0:	20002294 	.word	0x20002294

0000aea4 <move_thread_to_end_of_prio_q>:
{
    aea4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    aea6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    aeaa:	7b43      	ldrb	r3, [r0, #13]
    aeac:	2a00      	cmp	r2, #0
{
    aeae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    aeb0:	da04      	bge.n	aebc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aeb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aeb6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    aeb8:	f003 ffe1 	bl	ee7e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    aebc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    aebe:	4a15      	ldr	r2, [pc, #84]	; (af14 <move_thread_to_end_of_prio_q+0x70>)
    aec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aec4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    aec6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aeca:	f102 0520 	add.w	r5, r2, #32
    aece:	42ab      	cmp	r3, r5
    aed0:	d01b      	beq.n	af0a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aed2:	b1d3      	cbz	r3, af0a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    aed4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    aed8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    aedc:	4286      	cmp	r6, r0
    aede:	d00f      	beq.n	af00 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    aee0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    aee2:	2800      	cmp	r0, #0
    aee4:	dd0c      	ble.n	af00 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    aee6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    aee8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    aeec:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    aeee:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    aef0:	6890      	ldr	r0, [r2, #8]
    aef2:	1a43      	subs	r3, r0, r1
    aef4:	4258      	negs	r0, r3
}
    aef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    aefa:	4158      	adcs	r0, r3
    aefc:	f7ff bfb2 	b.w	ae64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    af00:	42a3      	cmp	r3, r4
    af02:	d002      	beq.n	af0a <move_thread_to_end_of_prio_q+0x66>
    af04:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af06:	2b00      	cmp	r3, #0
    af08:	d1e6      	bne.n	aed8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    af0a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    af0e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    af10:	6251      	str	r1, [r2, #36]	; 0x24
}
    af12:	e7ed      	b.n	aef0 <move_thread_to_end_of_prio_q+0x4c>
    af14:	20002294 	.word	0x20002294

0000af18 <z_time_slice>:
{
    af18:	b538      	push	{r3, r4, r5, lr}
    af1a:	4601      	mov	r1, r0
	__asm__ volatile(
    af1c:	f04f 0320 	mov.w	r3, #32
    af20:	f3ef 8411 	mrs	r4, BASEPRI
    af24:	f383 8812 	msr	BASEPRI_MAX, r3
    af28:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    af2c:	4b15      	ldr	r3, [pc, #84]	; (af84 <z_time_slice+0x6c>)
    af2e:	4a16      	ldr	r2, [pc, #88]	; (af88 <z_time_slice+0x70>)
    af30:	6898      	ldr	r0, [r3, #8]
    af32:	6815      	ldr	r5, [r2, #0]
    af34:	42a8      	cmp	r0, r5
    af36:	d106      	bne.n	af46 <z_time_slice+0x2e>
			z_reset_time_slice();
    af38:	f7ff ff28 	bl	ad8c <z_reset_time_slice>
	__asm__ volatile(
    af3c:	f384 8811 	msr	BASEPRI, r4
    af40:	f3bf 8f6f 	isb	sy
}
    af44:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    af46:	2500      	movs	r5, #0
    af48:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    af4a:	4a10      	ldr	r2, [pc, #64]	; (af8c <z_time_slice+0x74>)
    af4c:	6812      	ldr	r2, [r2, #0]
    af4e:	b1ba      	cbz	r2, af80 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    af50:	89c2      	ldrh	r2, [r0, #14]
    af52:	2a7f      	cmp	r2, #127	; 0x7f
    af54:	d814      	bhi.n	af80 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    af56:	7b42      	ldrb	r2, [r0, #13]
    af58:	06d2      	lsls	r2, r2, #27
    af5a:	d111      	bne.n	af80 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    af5c:	4a0c      	ldr	r2, [pc, #48]	; (af90 <z_time_slice+0x78>)
    af5e:	f990 500e 	ldrsb.w	r5, [r0, #14]
    af62:	6812      	ldr	r2, [r2, #0]
    af64:	4295      	cmp	r5, r2
    af66:	db0b      	blt.n	af80 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    af68:	4a0a      	ldr	r2, [pc, #40]	; (af94 <z_time_slice+0x7c>)
    af6a:	4290      	cmp	r0, r2
    af6c:	d008      	beq.n	af80 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    af6e:	691a      	ldr	r2, [r3, #16]
    af70:	428a      	cmp	r2, r1
    af72:	dc02      	bgt.n	af7a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    af74:	f7ff ff96 	bl	aea4 <move_thread_to_end_of_prio_q>
    af78:	e7de      	b.n	af38 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    af7a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    af7c:	611a      	str	r2, [r3, #16]
    af7e:	e7dd      	b.n	af3c <z_time_slice+0x24>
    af80:	2200      	movs	r2, #0
    af82:	e7fb      	b.n	af7c <z_time_slice+0x64>
    af84:	20002294 	.word	0x20002294
    af88:	200022c8 	.word	0x200022c8
    af8c:	200022d0 	.word	0x200022d0
    af90:	200022cc 	.word	0x200022cc
    af94:	20000ea8 	.word	0x20000ea8

0000af98 <ready_thread>:
{
    af98:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    af9a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    af9e:	7b43      	ldrb	r3, [r0, #13]
    afa0:	2a00      	cmp	r2, #0
    afa2:	db2a      	blt.n	affa <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    afa4:	06da      	lsls	r2, r3, #27
    afa6:	d128      	bne.n	affa <ready_thread+0x62>
    afa8:	6982      	ldr	r2, [r0, #24]
    afaa:	bb32      	cbnz	r2, affa <ready_thread+0x62>
	return list->head == list;
    afac:	4a14      	ldr	r2, [pc, #80]	; (b000 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    afae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    afb2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    afb4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    afb8:	f102 0520 	add.w	r5, r2, #32
    afbc:	42ab      	cmp	r3, r5
    afbe:	d017      	beq.n	aff0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    afc0:	b1b3      	cbz	r3, aff0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    afc2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    afc6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    afca:	428e      	cmp	r6, r1
    afcc:	d00b      	beq.n	afe6 <ready_thread+0x4e>
		return b2 - b1;
    afce:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    afd0:	2900      	cmp	r1, #0
    afd2:	dd08      	ble.n	afe6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    afd4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    afd6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    afda:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    afdc:	6058      	str	r0, [r3, #4]
}
    afde:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    afe0:	2000      	movs	r0, #0
    afe2:	f7ff bf3f 	b.w	ae64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    afe6:	42a3      	cmp	r3, r4
    afe8:	d002      	beq.n	aff0 <ready_thread+0x58>
    afea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    afec:	2b00      	cmp	r3, #0
    afee:	d1ea      	bne.n	afc6 <ready_thread+0x2e>
	node->prev = tail;
    aff0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    aff4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    aff6:	6250      	str	r0, [r2, #36]	; 0x24
}
    aff8:	e7f1      	b.n	afde <ready_thread+0x46>
}
    affa:	bc70      	pop	{r4, r5, r6}
    affc:	4770      	bx	lr
    affe:	bf00      	nop
    b000:	20002294 	.word	0x20002294

0000b004 <z_sched_start>:
{
    b004:	b510      	push	{r4, lr}
	__asm__ volatile(
    b006:	f04f 0220 	mov.w	r2, #32
    b00a:	f3ef 8411 	mrs	r4, BASEPRI
    b00e:	f382 8812 	msr	BASEPRI_MAX, r2
    b012:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b016:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    b018:	0751      	lsls	r1, r2, #29
    b01a:	d404      	bmi.n	b026 <z_sched_start+0x22>
	__asm__ volatile(
    b01c:	f384 8811 	msr	BASEPRI, r4
    b020:	f3bf 8f6f 	isb	sy
}
    b024:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b026:	f022 0204 	bic.w	r2, r2, #4
    b02a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    b02c:	f7ff ffb4 	bl	af98 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b030:	4621      	mov	r1, r4
    b032:	4802      	ldr	r0, [pc, #8]	; (b03c <z_sched_start+0x38>)
}
    b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    b038:	f7ff beee 	b.w	ae18 <z_reschedule>
    b03c:	20002357 	.word	0x20002357

0000b040 <unready_thread>:
{
    b040:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    b042:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b046:	7b43      	ldrb	r3, [r0, #13]
    b048:	2a00      	cmp	r2, #0
{
    b04a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b04c:	da04      	bge.n	b058 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b052:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b054:	f003 ff13 	bl	ee7e <sys_dlist_remove>
	update_cache(thread == _current);
    b058:	4b04      	ldr	r3, [pc, #16]	; (b06c <unready_thread+0x2c>)
    b05a:	6898      	ldr	r0, [r3, #8]
    b05c:	1a43      	subs	r3, r0, r1
    b05e:	4258      	negs	r0, r3
    b060:	4158      	adcs	r0, r3
}
    b062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    b066:	f7ff befd 	b.w	ae64 <update_cache>
    b06a:	bf00      	nop
    b06c:	20002294 	.word	0x20002294

0000b070 <pend>:
{
    b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b074:	4606      	mov	r6, r0
    b076:	4615      	mov	r5, r2
    b078:	461c      	mov	r4, r3
	__asm__ volatile(
    b07a:	f04f 0320 	mov.w	r3, #32
    b07e:	f3ef 8711 	mrs	r7, BASEPRI
    b082:	f383 8812 	msr	BASEPRI_MAX, r3
    b086:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    b08a:	f003 ff85 	bl	ef98 <add_to_waitq_locked>
	__asm__ volatile(
    b08e:	f387 8811 	msr	BASEPRI, r7
    b092:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b096:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    b09a:	bf08      	it	eq
    b09c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    b0a0:	d008      	beq.n	b0b4 <pend+0x44>
    b0a2:	462a      	mov	r2, r5
    b0a4:	4623      	mov	r3, r4
    b0a6:	f106 0018 	add.w	r0, r6, #24
    b0aa:	4903      	ldr	r1, [pc, #12]	; (b0b8 <pend+0x48>)
}
    b0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b0b0:	f000 ba3e 	b.w	b530 <z_add_timeout>
    b0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b0b8:	0000ef55 	.word	0x0000ef55

0000b0bc <z_pend_curr>:
{
    b0bc:	b510      	push	{r4, lr}
	pending_current = _current;
    b0be:	4b07      	ldr	r3, [pc, #28]	; (b0dc <z_pend_curr+0x20>)
    b0c0:	6898      	ldr	r0, [r3, #8]
    b0c2:	4b07      	ldr	r3, [pc, #28]	; (b0e0 <z_pend_curr+0x24>)
{
    b0c4:	460c      	mov	r4, r1
	pending_current = _current;
    b0c6:	6018      	str	r0, [r3, #0]
{
    b0c8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    b0ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b0ce:	f7ff ffcf 	bl	b070 <pend>
    b0d2:	4620      	mov	r0, r4
}
    b0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0d8:	f7fa bc9a 	b.w	5a10 <arch_swap>
    b0dc:	20002294 	.word	0x20002294
    b0e0:	200022c8 	.word	0x200022c8

0000b0e4 <z_set_prio>:
{
    b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0e6:	4604      	mov	r4, r0
	__asm__ volatile(
    b0e8:	f04f 0320 	mov.w	r3, #32
    b0ec:	f3ef 8611 	mrs	r6, BASEPRI
    b0f0:	f383 8812 	msr	BASEPRI_MAX, r3
    b0f4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    b0f8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b0fa:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    b0fc:	b249      	sxtb	r1, r1
    b0fe:	d133      	bne.n	b168 <z_set_prio+0x84>
		if (need_sched) {
    b100:	6982      	ldr	r2, [r0, #24]
    b102:	bb8a      	cbnz	r2, b168 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b108:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b10a:	f003 feb8 	bl	ee7e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b10e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    b110:	4a17      	ldr	r2, [pc, #92]	; (b170 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    b112:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b114:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b118:	7343      	strb	r3, [r0, #13]
    b11a:	4610      	mov	r0, r2
    b11c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b120:	4283      	cmp	r3, r0
    b122:	d01b      	beq.n	b15c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b124:	b1d3      	cbz	r3, b15c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    b126:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    b128:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    b12c:	42a9      	cmp	r1, r5
    b12e:	d010      	beq.n	b152 <z_set_prio+0x6e>
		return b2 - b1;
    b130:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    b132:	2d00      	cmp	r5, #0
    b134:	dd0d      	ble.n	b152 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    b136:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b138:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b13c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b13e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    b140:	2001      	movs	r0, #1
    b142:	f7ff fe8f 	bl	ae64 <update_cache>
    b146:	2001      	movs	r0, #1
	__asm__ volatile(
    b148:	f386 8811 	msr	BASEPRI, r6
    b14c:	f3bf 8f6f 	isb	sy
}
    b150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    b152:	42bb      	cmp	r3, r7
    b154:	d002      	beq.n	b15c <z_set_prio+0x78>
    b156:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b158:	2b00      	cmp	r3, #0
    b15a:	d1e5      	bne.n	b128 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    b15c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    b15e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    b162:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b164:	6254      	str	r4, [r2, #36]	; 0x24
}
    b166:	e7eb      	b.n	b140 <z_set_prio+0x5c>
			thread->base.prio = prio;
    b168:	73a1      	strb	r1, [r4, #14]
    b16a:	2000      	movs	r0, #0
    b16c:	e7ec      	b.n	b148 <z_set_prio+0x64>
    b16e:	bf00      	nop
    b170:	20002294 	.word	0x20002294

0000b174 <z_impl_k_thread_suspend>:
{
    b174:	b570      	push	{r4, r5, r6, lr}
    b176:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b178:	3018      	adds	r0, #24
    b17a:	f003 ff92 	bl	f0a2 <z_abort_timeout>
	__asm__ volatile(
    b17e:	f04f 0320 	mov.w	r3, #32
    b182:	f3ef 8611 	mrs	r6, BASEPRI
    b186:	f383 8812 	msr	BASEPRI_MAX, r3
    b18a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    b18e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    b192:	7b63      	ldrb	r3, [r4, #13]
    b194:	2a00      	cmp	r2, #0
    b196:	da05      	bge.n	b1a4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b19c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b19e:	4620      	mov	r0, r4
    b1a0:	f003 fe6d 	bl	ee7e <sys_dlist_remove>
		update_cache(thread == _current);
    b1a4:	4d0b      	ldr	r5, [pc, #44]	; (b1d4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b1a6:	7b63      	ldrb	r3, [r4, #13]
    b1a8:	68a8      	ldr	r0, [r5, #8]
    b1aa:	f043 0310 	orr.w	r3, r3, #16
    b1ae:	7363      	strb	r3, [r4, #13]
    b1b0:	1b03      	subs	r3, r0, r4
    b1b2:	4258      	negs	r0, r3
    b1b4:	4158      	adcs	r0, r3
    b1b6:	f7ff fe55 	bl	ae64 <update_cache>
	__asm__ volatile(
    b1ba:	f386 8811 	msr	BASEPRI, r6
    b1be:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    b1c2:	68ab      	ldr	r3, [r5, #8]
    b1c4:	42a3      	cmp	r3, r4
    b1c6:	d103      	bne.n	b1d0 <z_impl_k_thread_suspend+0x5c>
}
    b1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    b1cc:	f003 bea2 	b.w	ef14 <z_reschedule_unlocked>
}
    b1d0:	bd70      	pop	{r4, r5, r6, pc}
    b1d2:	bf00      	nop
    b1d4:	20002294 	.word	0x20002294

0000b1d8 <k_sched_unlock>:
{
    b1d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    b1da:	f04f 0320 	mov.w	r3, #32
    b1de:	f3ef 8411 	mrs	r4, BASEPRI
    b1e2:	f383 8812 	msr	BASEPRI_MAX, r3
    b1e6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    b1ea:	4b08      	ldr	r3, [pc, #32]	; (b20c <k_sched_unlock+0x34>)
    b1ec:	689a      	ldr	r2, [r3, #8]
    b1ee:	7bd3      	ldrb	r3, [r2, #15]
    b1f0:	3301      	adds	r3, #1
    b1f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b1f4:	2000      	movs	r0, #0
    b1f6:	f7ff fe35 	bl	ae64 <update_cache>
	__asm__ volatile(
    b1fa:	f384 8811 	msr	BASEPRI, r4
    b1fe:	f3bf 8f6f 	isb	sy
}
    b202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    b206:	f003 be85 	b.w	ef14 <z_reschedule_unlocked>
    b20a:	bf00      	nop
    b20c:	20002294 	.word	0x20002294

0000b210 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b210:	4b04      	ldr	r3, [pc, #16]	; (b224 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    b212:	2100      	movs	r1, #0
    b214:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    b218:	e9c3 2208 	strd	r2, r2, [r3, #32]
    b21c:	4608      	mov	r0, r1
    b21e:	f7ff bdcb 	b.w	adb8 <k_sched_time_slice_set>
    b222:	bf00      	nop
    b224:	20002294 	.word	0x20002294

0000b228 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b22a:	f04f 0320 	mov.w	r3, #32
    b22e:	f3ef 8511 	mrs	r5, BASEPRI
    b232:	f383 8812 	msr	BASEPRI_MAX, r3
    b236:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    b23a:	491a      	ldr	r1, [pc, #104]	; (b2a4 <z_impl_k_yield+0x7c>)
    b23c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b23e:	7b43      	ldrb	r3, [r0, #13]
    b240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b244:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b246:	f003 fe1a 	bl	ee7e <sys_dlist_remove>
	}
	queue_thread(_current);
    b24a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b24c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    b24e:	4608      	mov	r0, r1
    b250:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b254:	735a      	strb	r2, [r3, #13]
    b256:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b25a:	4282      	cmp	r2, r0
    b25c:	d01c      	beq.n	b298 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b25e:	b1da      	cbz	r2, b298 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    b260:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    b262:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    b266:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    b26a:	42a6      	cmp	r6, r4
    b26c:	d00f      	beq.n	b28e <z_impl_k_yield+0x66>
		return b2 - b1;
    b26e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    b270:	2c00      	cmp	r4, #0
    b272:	dd0c      	ble.n	b28e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    b274:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b276:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    b27a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    b27c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    b27e:	2001      	movs	r0, #1
    b280:	f7ff fdf0 	bl	ae64 <update_cache>
    b284:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    b286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b28a:	f7fa bbc1 	b.w	5a10 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b28e:	42ba      	cmp	r2, r7
    b290:	d002      	beq.n	b298 <z_impl_k_yield+0x70>
    b292:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b294:	2a00      	cmp	r2, #0
    b296:	d1e6      	bne.n	b266 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    b298:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    b29a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    b29e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b2a0:	624b      	str	r3, [r1, #36]	; 0x24
}
    b2a2:	e7ec      	b.n	b27e <z_impl_k_yield+0x56>
    b2a4:	20002294 	.word	0x20002294

0000b2a8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b2a8:	ea50 0301 	orrs.w	r3, r0, r1
{
    b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2b0:	4605      	mov	r5, r0
    b2b2:	460e      	mov	r6, r1
	if (ticks == 0) {
    b2b4:	d103      	bne.n	b2be <z_tick_sleep+0x16>
	z_impl_k_yield();
    b2b6:	f7ff ffb7 	bl	b228 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    b2ba:	2000      	movs	r0, #0
    b2bc:	e033      	b.n	b326 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    b2be:	f06f 0401 	mvn.w	r4, #1
    b2c2:	1a24      	subs	r4, r4, r0
    b2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b2c8:	eb63 0301 	sbc.w	r3, r3, r1
    b2cc:	2c01      	cmp	r4, #1
    b2ce:	f173 0300 	sbcs.w	r3, r3, #0
    b2d2:	da02      	bge.n	b2da <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b2d4:	f003 ff25 	bl	f122 <sys_clock_tick_get_32>
    b2d8:	1944      	adds	r4, r0, r5
    b2da:	f04f 0320 	mov.w	r3, #32
    b2de:	f3ef 8811 	mrs	r8, BASEPRI
    b2e2:	f383 8812 	msr	BASEPRI_MAX, r3
    b2e6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    b2ea:	4f10      	ldr	r7, [pc, #64]	; (b32c <z_tick_sleep+0x84>)
    b2ec:	4b10      	ldr	r3, [pc, #64]	; (b330 <z_tick_sleep+0x88>)
    b2ee:	68b8      	ldr	r0, [r7, #8]
    b2f0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    b2f2:	f7ff fea5 	bl	b040 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b2f6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b2f8:	490e      	ldr	r1, [pc, #56]	; (b334 <z_tick_sleep+0x8c>)
    b2fa:	462a      	mov	r2, r5
    b2fc:	4633      	mov	r3, r6
    b2fe:	3018      	adds	r0, #24
    b300:	f000 f916 	bl	b530 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b304:	68ba      	ldr	r2, [r7, #8]
    b306:	7b53      	ldrb	r3, [r2, #13]
    b308:	f043 0310 	orr.w	r3, r3, #16
    b30c:	7353      	strb	r3, [r2, #13]
    b30e:	4640      	mov	r0, r8
    b310:	f7fa fb7e 	bl	5a10 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b314:	f003 ff05 	bl	f122 <sys_clock_tick_get_32>
    b318:	1a20      	subs	r0, r4, r0
    b31a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b31e:	2801      	cmp	r0, #1
    b320:	f173 0300 	sbcs.w	r3, r3, #0
    b324:	dbc9      	blt.n	b2ba <z_tick_sleep+0x12>
}
    b326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b32a:	bf00      	nop
    b32c:	20002294 	.word	0x20002294
    b330:	200022c8 	.word	0x200022c8
    b334:	0000ef55 	.word	0x0000ef55

0000b338 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b338:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    b33c:	bf08      	it	eq
    b33e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    b342:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b344:	d106      	bne.n	b354 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b346:	4b08      	ldr	r3, [pc, #32]	; (b368 <z_impl_k_sleep+0x30>)
    b348:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b34a:	f7ff ff13 	bl	b174 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b352:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b354:	f7ff ffa8 	bl	b2a8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    b358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b35c:	fb80 0303 	smull	r0, r3, r0, r3
    b360:	0bc0      	lsrs	r0, r0, #15
    b362:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b366:	e7f4      	b.n	b352 <z_impl_k_sleep+0x1a>
    b368:	20002294 	.word	0x20002294

0000b36c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b36c:	4b01      	ldr	r3, [pc, #4]	; (b374 <z_impl_z_current_get+0x8>)
    b36e:	6898      	ldr	r0, [r3, #8]
    b370:	4770      	bx	lr
    b372:	bf00      	nop
    b374:	20002294 	.word	0x20002294

0000b378 <z_impl_k_is_preempt_thread>:
    b378:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    b37c:	b93b      	cbnz	r3, b38e <z_impl_k_is_preempt_thread+0x16>
    b37e:	4b05      	ldr	r3, [pc, #20]	; (b394 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b380:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    b382:	89d8      	ldrh	r0, [r3, #14]
    b384:	287f      	cmp	r0, #127	; 0x7f
    b386:	bf8c      	ite	hi
    b388:	2000      	movhi	r0, #0
    b38a:	2001      	movls	r0, #1
    b38c:	4770      	bx	lr
    b38e:	2000      	movs	r0, #0
}
    b390:	4770      	bx	lr
    b392:	bf00      	nop
    b394:	20002294 	.word	0x20002294

0000b398 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b39c:	4604      	mov	r4, r0
    b39e:	f04f 0320 	mov.w	r3, #32
    b3a2:	f3ef 8611 	mrs	r6, BASEPRI
    b3a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b3aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b3ae:	7b43      	ldrb	r3, [r0, #13]
    b3b0:	071a      	lsls	r2, r3, #28
    b3b2:	d505      	bpl.n	b3c0 <z_thread_abort+0x28>
	__asm__ volatile(
    b3b4:	f386 8811 	msr	BASEPRI, r6
    b3b8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b3c0:	f023 0220 	bic.w	r2, r3, #32
    b3c4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b3c8:	09d2      	lsrs	r2, r2, #7
    b3ca:	d123      	bne.n	b414 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b3cc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b3ce:	68a3      	ldr	r3, [r4, #8]
    b3d0:	b113      	cbz	r3, b3d8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    b3d2:	4620      	mov	r0, r4
    b3d4:	f003 fd5b 	bl	ee8e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b3d8:	f104 0018 	add.w	r0, r4, #24
    b3dc:	f003 fe61 	bl	f0a2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b3e0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b3e4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b3e8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3ea:	42bd      	cmp	r5, r7
    b3ec:	d000      	beq.n	b3f0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b3ee:	b9cd      	cbnz	r5, b424 <z_thread_abort+0x8c>
		update_cache(1);
    b3f0:	2001      	movs	r0, #1
    b3f2:	f7ff fd37 	bl	ae64 <update_cache>
		z_thread_monitor_exit(thread);
    b3f6:	4620      	mov	r0, r4
    b3f8:	f7ff f850 	bl	a49c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    b3fc:	4b10      	ldr	r3, [pc, #64]	; (b440 <z_thread_abort+0xa8>)
    b3fe:	689b      	ldr	r3, [r3, #8]
    b400:	42a3      	cmp	r3, r4
    b402:	d1d7      	bne.n	b3b4 <z_thread_abort+0x1c>
    b404:	f3ef 8305 	mrs	r3, IPSR
    b408:	2b00      	cmp	r3, #0
    b40a:	d1d3      	bne.n	b3b4 <z_thread_abort+0x1c>
    b40c:	4630      	mov	r0, r6
    b40e:	f7fa faff 	bl	5a10 <arch_swap>
	return ret;
    b412:	e7cf      	b.n	b3b4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b414:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b418:	f043 0308 	orr.w	r3, r3, #8
    b41c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b41e:	f003 fd2e 	bl	ee7e <sys_dlist_remove>
}
    b422:	e7d4      	b.n	b3ce <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    b424:	4628      	mov	r0, r5
    b426:	f003 fd32 	bl	ee8e <unpend_thread_no_timeout>
    b42a:	f105 0018 	add.w	r0, r5, #24
    b42e:	f003 fe38 	bl	f0a2 <z_abort_timeout>
    b432:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    b436:	4628      	mov	r0, r5
    b438:	f7ff fdae 	bl	af98 <ready_thread>
    b43c:	e7d4      	b.n	b3e8 <z_thread_abort+0x50>
    b43e:	bf00      	nop
    b440:	20002294 	.word	0x20002294

0000b444 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b444:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b446:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b44a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b44c:	e9cd 6700 	strd	r6, r7, [sp]
    b450:	f7ff fe34 	bl	b0bc <z_pend_curr>

	if (data != NULL) {
    b454:	b11c      	cbz	r4, b45e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b456:	4b03      	ldr	r3, [pc, #12]	; (b464 <z_sched_wait+0x20>)
    b458:	689b      	ldr	r3, [r3, #8]
    b45a:	695b      	ldr	r3, [r3, #20]
    b45c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b45e:	b002      	add	sp, #8
    b460:	bdd0      	pop	{r4, r6, r7, pc}
    b462:	bf00      	nop
    b464:	20002294 	.word	0x20002294

0000b468 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b468:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    b46a:	4806      	ldr	r0, [pc, #24]	; (b484 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    b46c:	4a06      	ldr	r2, [pc, #24]	; (b488 <z_data_copy+0x20>)
    b46e:	4907      	ldr	r1, [pc, #28]	; (b48c <z_data_copy+0x24>)
    b470:	1a12      	subs	r2, r2, r0
    b472:	f002 febd 	bl	e1f0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b47a:	4a05      	ldr	r2, [pc, #20]	; (b490 <z_data_copy+0x28>)
    b47c:	4905      	ldr	r1, [pc, #20]	; (b494 <z_data_copy+0x2c>)
    b47e:	4806      	ldr	r0, [pc, #24]	; (b498 <z_data_copy+0x30>)
    b480:	f002 beb6 	b.w	e1f0 <memcpy>
    b484:	20000000 	.word	0x20000000
    b488:	20000468 	.word	0x20000468
    b48c:	0001230c 	.word	0x0001230c
    b490:	00000000 	.word	0x00000000
    b494:	0001230c 	.word	0x0001230c
    b498:	20000000 	.word	0x20000000

0000b49c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b49c:	4b03      	ldr	r3, [pc, #12]	; (b4ac <elapsed+0x10>)
    b49e:	681b      	ldr	r3, [r3, #0]
    b4a0:	b90b      	cbnz	r3, b4a6 <elapsed+0xa>
    b4a2:	f7fd b841 	b.w	8528 <sys_clock_elapsed>
}
    b4a6:	2000      	movs	r0, #0
    b4a8:	4770      	bx	lr
    b4aa:	bf00      	nop
    b4ac:	200022d4 	.word	0x200022d4

0000b4b0 <next_timeout>:
	return list->head == list;
    b4b0:	4b10      	ldr	r3, [pc, #64]	; (b4f4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    b4b2:	b510      	push	{r4, lr}
    b4b4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4b6:	429c      	cmp	r4, r3
    b4b8:	bf08      	it	eq
    b4ba:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b4bc:	f7ff ffee 	bl	b49c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    b4c0:	b1a4      	cbz	r4, b4ec <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b4c2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    b4c6:	1a1b      	subs	r3, r3, r0
    b4c8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    b4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b4d0:	f170 0200 	sbcs.w	r2, r0, #0
    b4d4:	da0a      	bge.n	b4ec <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    b4d6:	2800      	cmp	r0, #0
    b4d8:	bfac      	ite	ge
    b4da:	4618      	movge	r0, r3
    b4dc:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b4de:	4b06      	ldr	r3, [pc, #24]	; (b4f8 <next_timeout+0x48>)
    b4e0:	691b      	ldr	r3, [r3, #16]
    b4e2:	b113      	cbz	r3, b4ea <next_timeout+0x3a>
    b4e4:	4298      	cmp	r0, r3
    b4e6:	bfa8      	it	ge
    b4e8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    b4ea:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    b4ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b4f0:	e7f5      	b.n	b4de <next_timeout+0x2e>
    b4f2:	bf00      	nop
    b4f4:	20000234 	.word	0x20000234
    b4f8:	20002294 	.word	0x20002294

0000b4fc <remove_timeout>:
{
    b4fc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    b4fe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b500:	b168      	cbz	r0, b51e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    b502:	4a0a      	ldr	r2, [pc, #40]	; (b52c <remove_timeout+0x30>)
    b504:	6852      	ldr	r2, [r2, #4]
    b506:	4290      	cmp	r0, r2
    b508:	d009      	beq.n	b51e <remove_timeout+0x22>
	if (next(t) != NULL) {
    b50a:	b143      	cbz	r3, b51e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b50c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b510:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b514:	1912      	adds	r2, r2, r4
    b516:	eb41 0105 	adc.w	r1, r1, r5
    b51a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    b51e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    b520:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b522:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b524:	2300      	movs	r3, #0
	node->prev = NULL;
    b526:	e9c0 3300 	strd	r3, r3, [r0]
}
    b52a:	bd30      	pop	{r4, r5, pc}
    b52c:	20000234 	.word	0x20000234

0000b530 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b534:	bf08      	it	eq
    b536:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    b53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b53c:	4604      	mov	r4, r0
    b53e:	461f      	mov	r7, r3
    b540:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b542:	d067      	beq.n	b614 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b544:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b546:	f04f 0320 	mov.w	r3, #32
    b54a:	f3ef 8611 	mrs	r6, BASEPRI
    b54e:	f383 8812 	msr	BASEPRI_MAX, r3
    b552:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b556:	f06f 0201 	mvn.w	r2, #1
    b55a:	1b53      	subs	r3, r2, r5
    b55c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b560:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b564:	2b00      	cmp	r3, #0
    b566:	db1b      	blt.n	b5a0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b568:	4b2b      	ldr	r3, [pc, #172]	; (b618 <z_add_timeout+0xe8>)
    b56a:	e9d3 1300 	ldrd	r1, r3, [r3]
    b56e:	1a52      	subs	r2, r2, r1
    b570:	eb6c 0303 	sbc.w	r3, ip, r3
    b574:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    b576:	eb63 0307 	sbc.w	r3, r3, r7
    b57a:	2d01      	cmp	r5, #1
    b57c:	f173 0200 	sbcs.w	r2, r3, #0
    b580:	bfbc      	itt	lt
    b582:	2501      	movlt	r5, #1
    b584:	2300      	movlt	r3, #0
    b586:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    b58a:	4824      	ldr	r0, [pc, #144]	; (b61c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    b58c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b590:	4283      	cmp	r3, r0
    b592:	d118      	bne.n	b5c6 <z_add_timeout+0x96>
	node->prev = tail;
    b594:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    b598:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    b59c:	6044      	str	r4, [r0, #4]
}
    b59e:	e026      	b.n	b5ee <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b5a0:	f7ff ff7c 	bl	b49c <elapsed>
    b5a4:	3501      	adds	r5, #1
    b5a6:	f147 0700 	adc.w	r7, r7, #0
    b5aa:	182d      	adds	r5, r5, r0
    b5ac:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    b5b0:	e9c4 5704 	strd	r5, r7, [r4, #16]
    b5b4:	e7e9      	b.n	b58a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    b5b6:	1a52      	subs	r2, r2, r1
    b5b8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    b5bc:	459c      	cmp	ip, r3
    b5be:	e9c4 2504 	strd	r2, r5, [r4, #16]
    b5c2:	d0e7      	beq.n	b594 <z_add_timeout+0x64>
    b5c4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	d0e4      	beq.n	b594 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    b5ca:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    b5ce:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    b5d2:	428a      	cmp	r2, r1
    b5d4:	eb75 0e07 	sbcs.w	lr, r5, r7
    b5d8:	daed      	bge.n	b5b6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    b5da:	1a8a      	subs	r2, r1, r2
    b5dc:	eb67 0505 	sbc.w	r5, r7, r5
    b5e0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    b5e4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b5e6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b5ea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b5ec:	605c      	str	r4, [r3, #4]
	return list->head == list;
    b5ee:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b5f0:	4283      	cmp	r3, r0
    b5f2:	d00b      	beq.n	b60c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b5f4:	429c      	cmp	r4, r3
    b5f6:	d109      	bne.n	b60c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b5f8:	f7ff ff5a 	bl	b4b0 <next_timeout>

			if (next_time == 0 ||
    b5fc:	b118      	cbz	r0, b606 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    b5fe:	4b08      	ldr	r3, [pc, #32]	; (b620 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    b600:	691b      	ldr	r3, [r3, #16]
    b602:	4283      	cmp	r3, r0
    b604:	d002      	beq.n	b60c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    b606:	2100      	movs	r1, #0
    b608:	f7fc ff5c 	bl	84c4 <sys_clock_set_timeout>
	__asm__ volatile(
    b60c:	f386 8811 	msr	BASEPRI, r6
    b610:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b616:	bf00      	nop
    b618:	20001018 	.word	0x20001018
    b61c:	20000234 	.word	0x20000234
    b620:	20002294 	.word	0x20002294

0000b624 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    b624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b628:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b62a:	f7ff fc75 	bl	af18 <z_time_slice>
	__asm__ volatile(
    b62e:	f04f 0320 	mov.w	r3, #32
    b632:	f3ef 8411 	mrs	r4, BASEPRI
    b636:	f383 8812 	msr	BASEPRI_MAX, r3
    b63a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b63e:	4e24      	ldr	r6, [pc, #144]	; (b6d0 <sys_clock_announce+0xac>)
	return list->head == list;
    b640:	f8df 8090 	ldr.w	r8, [pc, #144]	; b6d4 <sys_clock_announce+0xb0>
    b644:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b646:	4d24      	ldr	r5, [pc, #144]	; (b6d8 <sys_clock_announce+0xb4>)
    b648:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    b64c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b64e:	4540      	cmp	r0, r8
		curr_tick += dt;
    b650:	e9d5 1e00 	ldrd	r1, lr, [r5]
    b654:	ea4f 77e2 	mov.w	r7, r2, asr #31
    b658:	d00b      	beq.n	b672 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    b65a:	b150      	cbz	r0, b672 <sys_clock_announce+0x4e>
    b65c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    b660:	429a      	cmp	r2, r3
    b662:	eb77 090c 	sbcs.w	r9, r7, ip
    b666:	da16      	bge.n	b696 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    b668:	1a9b      	subs	r3, r3, r2
    b66a:	eb6c 0c07 	sbc.w	ip, ip, r7
    b66e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    b672:	1852      	adds	r2, r2, r1
    b674:	eb4e 0707 	adc.w	r7, lr, r7
    b678:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    b67c:	2500      	movs	r5, #0
    b67e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b680:	f7ff ff16 	bl	b4b0 <next_timeout>
    b684:	4629      	mov	r1, r5
    b686:	f7fc ff1d 	bl	84c4 <sys_clock_set_timeout>
	__asm__ volatile(
    b68a:	f384 8811 	msr	BASEPRI, r4
    b68e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    b696:	1859      	adds	r1, r3, r1
    b698:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    b69c:	1ad3      	subs	r3, r2, r3
    b69e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    b6a0:	2200      	movs	r2, #0
    b6a2:	2300      	movs	r3, #0
    b6a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    b6a8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    b6ac:	f7ff ff26 	bl	b4fc <remove_timeout>
    b6b0:	f384 8811 	msr	BASEPRI, r4
    b6b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b6b8:	6883      	ldr	r3, [r0, #8]
    b6ba:	4798      	blx	r3
	__asm__ volatile(
    b6bc:	f04f 0320 	mov.w	r3, #32
    b6c0:	f3ef 8411 	mrs	r4, BASEPRI
    b6c4:	f383 8812 	msr	BASEPRI_MAX, r3
    b6c8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b6cc:	e7bc      	b.n	b648 <sys_clock_announce+0x24>
    b6ce:	bf00      	nop
    b6d0:	200022d4 	.word	0x200022d4
    b6d4:	20000234 	.word	0x20000234
    b6d8:	20001018 	.word	0x20001018

0000b6dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b6dc:	b510      	push	{r4, lr}
    b6de:	f04f 0320 	mov.w	r3, #32
    b6e2:	f3ef 8411 	mrs	r4, BASEPRI
    b6e6:	f383 8812 	msr	BASEPRI_MAX, r3
    b6ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    b6ee:	f7fc ff1b 	bl	8528 <sys_clock_elapsed>
    b6f2:	4a05      	ldr	r2, [pc, #20]	; (b708 <sys_clock_tick_get+0x2c>)
    b6f4:	e9d2 3100 	ldrd	r3, r1, [r2]
    b6f8:	18c0      	adds	r0, r0, r3
    b6fa:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    b6fe:	f384 8811 	msr	BASEPRI, r4
    b702:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b706:	bd10      	pop	{r4, pc}
    b708:	20001018 	.word	0x20001018

0000b70c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b70c:	b570      	push	{r4, r5, r6, lr}
    b70e:	4604      	mov	r4, r0
	__asm__ volatile(
    b710:	f04f 0320 	mov.w	r3, #32
    b714:	f3ef 8511 	mrs	r5, BASEPRI
    b718:	f383 8812 	msr	BASEPRI_MAX, r3
    b71c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b720:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    b724:	3301      	adds	r3, #1
    b726:	f142 0200 	adc.w	r2, r2, #0
    b72a:	2b02      	cmp	r3, #2
    b72c:	f172 0300 	sbcs.w	r3, r2, #0
    b730:	d304      	bcc.n	b73c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b732:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    b736:	4918      	ldr	r1, [pc, #96]	; (b798 <z_timer_expiration_handler+0x8c>)
    b738:	f7ff fefa 	bl	b530 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b73c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b73e:	3301      	adds	r3, #1
    b740:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b742:	6a23      	ldr	r3, [r4, #32]
    b744:	b173      	cbz	r3, b764 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    b746:	f385 8811 	msr	BASEPRI, r5
    b74a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b74e:	6a23      	ldr	r3, [r4, #32]
    b750:	4620      	mov	r0, r4
    b752:	4798      	blx	r3
	__asm__ volatile(
    b754:	f04f 0320 	mov.w	r3, #32
    b758:	f3ef 8511 	mrs	r5, BASEPRI
    b75c:	f383 8812 	msr	BASEPRI_MAX, r3
    b760:	f3bf 8f6f 	isb	sy
	return list->head == list;
    b764:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b768:	42a6      	cmp	r6, r4
    b76a:	d000      	beq.n	b76e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b76c:	b926      	cbnz	r6, b778 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    b76e:	f385 8811 	msr	BASEPRI, r5
    b772:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    b776:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    b778:	4630      	mov	r0, r6
    b77a:	f003 fb9b 	bl	eeb4 <z_unpend_thread_no_timeout>
    b77e:	2300      	movs	r3, #0
    b780:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
    b784:	f385 8811 	msr	BASEPRI, r5
    b788:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    b78c:	4630      	mov	r0, r6
}
    b78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    b792:	f003 bbcf 	b.w	ef34 <z_ready_thread>
    b796:	bf00      	nop
    b798:	0000b70d 	.word	0x0000b70d

0000b79c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7a0:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b7a6:	bf08      	it	eq
    b7a8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    b7ac:	4606      	mov	r6, r0
    b7ae:	461c      	mov	r4, r3
    b7b0:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    b7b4:	4689      	mov	r9, r1
    b7b6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b7b8:	d03e      	beq.n	b838 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b7ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b7be:	bf08      	it	eq
    b7c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b7c4:	4615      	mov	r5, r2
    b7c6:	4607      	mov	r7, r0
    b7c8:	d014      	beq.n	b7f4 <z_impl_k_timer_start+0x58>
    b7ca:	ea50 0302 	orrs.w	r3, r0, r2
    b7ce:	d011      	beq.n	b7f4 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    b7d0:	f06f 0301 	mvn.w	r3, #1
    b7d4:	1a9b      	subs	r3, r3, r2
    b7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b7da:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b7de:	2b00      	cmp	r3, #0
    b7e0:	da08      	bge.n	b7f4 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    b7e2:	2a02      	cmp	r2, #2
    b7e4:	f170 0300 	sbcs.w	r3, r0, #0
    b7e8:	bfbc      	itt	lt
    b7ea:	2502      	movlt	r5, #2
    b7ec:	2700      	movlt	r7, #0
    b7ee:	3d01      	subs	r5, #1
    b7f0:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b7f4:	f06f 0301 	mvn.w	r3, #1
    b7f8:	1a5b      	subs	r3, r3, r1
    b7fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b7fe:	eb63 0304 	sbc.w	r3, r3, r4
    b802:	2b00      	cmp	r3, #0
    b804:	da09      	bge.n	b81a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b806:	2901      	cmp	r1, #1
    b808:	f174 0300 	sbcs.w	r3, r4, #0
    b80c:	bfbc      	itt	lt
    b80e:	2101      	movlt	r1, #1
    b810:	2400      	movlt	r4, #0
    b812:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    b816:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    b81a:	4630      	mov	r0, r6
    b81c:	f003 fc41 	bl	f0a2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    b820:	2300      	movs	r3, #0
    b822:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    b824:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b828:	464a      	mov	r2, r9
    b82a:	4643      	mov	r3, r8
    b82c:	4630      	mov	r0, r6
    b82e:	4903      	ldr	r1, [pc, #12]	; (b83c <z_impl_k_timer_start+0xa0>)
		     duration);
}
    b830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b834:	f7ff be7c 	b.w	b530 <z_add_timeout>
}
    b838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b83c:	0000b70d 	.word	0x0000b70d

0000b840 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    b840:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b844:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    b846:	4b29      	ldr	r3, [pc, #164]	; (b8ec <z_impl_k_poll+0xac>)
    b848:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    b84a:	2301      	movs	r3, #1
    b84c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    b850:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    b854:	ea52 0305 	orrs.w	r3, r2, r5
{
    b858:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    b85a:	bf0c      	ite	eq
    b85c:	2301      	moveq	r3, #1
    b85e:	2300      	movne	r3, #0
    b860:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    b864:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    b866:	f003 fce9 	bl	f23c <register_events>
    b86a:	4681      	mov	r9, r0
	__asm__ volatile(
    b86c:	f04f 0320 	mov.w	r3, #32
    b870:	f3ef 8a11 	mrs	sl, BASEPRI
    b874:	f383 8812 	msr	BASEPRI_MAX, r3
    b878:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    b87c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    b880:	b964      	cbnz	r4, b89c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    b882:	4601      	mov	r1, r0
    b884:	4652      	mov	r2, sl
    b886:	4640      	mov	r0, r8
    b888:	f003 fda9 	bl	f3de <clear_event_registrations>
	__asm__ volatile(
    b88c:	f38a 8811 	msr	BASEPRI, sl
    b890:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    b894:	4620      	mov	r0, r4
    b896:	b002      	add	sp, #8
    b898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    b89c:	2300      	movs	r3, #0
    b89e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b8a2:	ea56 0305 	orrs.w	r3, r6, r5
    b8a6:	d106      	bne.n	b8b6 <z_impl_k_poll+0x76>
    b8a8:	f38a 8811 	msr	BASEPRI, sl
    b8ac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    b8b0:	f06f 040a 	mvn.w	r4, #10
    b8b4:	e7ee      	b.n	b894 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    b8b6:	e9cd 6500 	strd	r6, r5, [sp]
    b8ba:	4a0d      	ldr	r2, [pc, #52]	; (b8f0 <z_impl_k_poll+0xb0>)
    b8bc:	480d      	ldr	r0, [pc, #52]	; (b8f4 <z_impl_k_poll+0xb4>)
    b8be:	4651      	mov	r1, sl
    b8c0:	f7ff fbfc 	bl	b0bc <z_pend_curr>
    b8c4:	4604      	mov	r4, r0
	__asm__ volatile(
    b8c6:	f04f 0320 	mov.w	r3, #32
    b8ca:	f3ef 8511 	mrs	r5, BASEPRI
    b8ce:	f383 8812 	msr	BASEPRI_MAX, r3
    b8d2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    b8d6:	462a      	mov	r2, r5
    b8d8:	4649      	mov	r1, r9
    b8da:	4640      	mov	r0, r8
    b8dc:	f003 fd7f 	bl	f3de <clear_event_registrations>
	__asm__ volatile(
    b8e0:	f385 8811 	msr	BASEPRI, r5
    b8e4:	f3bf 8f6f 	isb	sy
	return swap_rc;
    b8e8:	e7d4      	b.n	b894 <z_impl_k_poll+0x54>
    b8ea:	bf00      	nop
    b8ec:	20002294 	.word	0x20002294
    b8f0:	2000023c 	.word	0x2000023c
    b8f4:	20002357 	.word	0x20002357

0000b8f8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    b8f8:	b538      	push	{r3, r4, r5, lr}
    b8fa:	4603      	mov	r3, r0
	__asm__ volatile(
    b8fc:	f04f 0220 	mov.w	r2, #32
    b900:	f3ef 8511 	mrs	r5, BASEPRI
    b904:	f382 8812 	msr	BASEPRI_MAX, r2
    b908:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    b90c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    b90e:	2101      	movs	r1, #1
    b910:	6081      	str	r1, [r0, #8]
	return list->head == list;
    b912:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    b914:	4283      	cmp	r3, r0
    b916:	d106      	bne.n	b926 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    b918:	f385 8811 	msr	BASEPRI, r5
    b91c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    b920:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    b922:	4620      	mov	r0, r4
    b924:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    b926:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b92a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b92c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b92e:	2300      	movs	r3, #0
	node->prev = NULL;
    b930:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    b934:	f003 fcf9 	bl	f32a <signal_poll_event>
	z_reschedule(&lock, key);
    b938:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    b93a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    b93c:	4801      	ldr	r0, [pc, #4]	; (b944 <z_impl_k_poll_signal_raise+0x4c>)
    b93e:	f7ff fa6b 	bl	ae18 <z_reschedule>
	return rc;
    b942:	e7ee      	b.n	b922 <z_impl_k_poll_signal_raise+0x2a>
    b944:	20002357 	.word	0x20002357

0000b948 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b948:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b94a:	4606      	mov	r6, r0
    b94c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b94e:	f003 f980 	bl	ec52 <k_is_in_isr>
    b952:	b980      	cbnz	r0, b976 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b954:	4b0b      	ldr	r3, [pc, #44]	; (b984 <z_thread_aligned_alloc+0x3c>)
    b956:	689b      	ldr	r3, [r3, #8]
    b958:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
    b95c:	b17c      	cbz	r4, b97e <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    b95e:	1d2a      	adds	r2, r5, #4
    b960:	d209      	bcs.n	b976 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    b962:	2000      	movs	r0, #0
    b964:	2100      	movs	r1, #0
    b966:	e9cd 0100 	strd	r0, r1, [sp]
    b96a:	f046 0104 	orr.w	r1, r6, #4
    b96e:	4620      	mov	r0, r4
    b970:	f003 fd9d 	bl	f4ae <k_heap_aligned_alloc>
	if (mem == NULL) {
    b974:	b908      	cbnz	r0, b97a <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    b976:	2400      	movs	r4, #0
	}

	return ret;
    b978:	e001      	b.n	b97e <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
    b97a:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    b97c:	1d04      	adds	r4, r0, #4
}
    b97e:	4620      	mov	r0, r4
    b980:	b002      	add	sp, #8
    b982:	bd70      	pop	{r4, r5, r6, pc}
    b984:	20002294 	.word	0x20002294

0000b988 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b988:	4a02      	ldr	r2, [pc, #8]	; (b994 <boot_banner+0xc>)
    b98a:	4903      	ldr	r1, [pc, #12]	; (b998 <boot_banner+0x10>)
    b98c:	4803      	ldr	r0, [pc, #12]	; (b99c <boot_banner+0x14>)
    b98e:	f000 b8a1 	b.w	bad4 <printk>
    b992:	bf00      	nop
    b994:	0001082b 	.word	0x0001082b
    b998:	000122cb 	.word	0x000122cb
    b99c:	000122d9 	.word	0x000122d9

0000b9a0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b9a0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b9a2:	4c06      	ldr	r4, [pc, #24]	; (b9bc <statics_init+0x1c>)
    b9a4:	4d06      	ldr	r5, [pc, #24]	; (b9c0 <statics_init+0x20>)
    b9a6:	42ac      	cmp	r4, r5
    b9a8:	d301      	bcc.n	b9ae <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    b9aa:	2000      	movs	r0, #0
    b9ac:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b9ae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b9b2:	4620      	mov	r0, r4
    b9b4:	f003 fd73 	bl	f49e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b9b8:	3414      	adds	r4, #20
    b9ba:	e7f4      	b.n	b9a6 <statics_init+0x6>
    b9bc:	200002e0 	.word	0x200002e0
    b9c0:	200002e0 	.word	0x200002e0

0000b9c4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b9c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    b9c6:	4b09      	ldr	r3, [pc, #36]	; (b9ec <k_sys_work_q_init+0x28>)
    b9c8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b9ca:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b9cc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b9ce:	9300      	str	r3, [sp, #0]
    b9d0:	4907      	ldr	r1, [pc, #28]	; (b9f0 <k_sys_work_q_init+0x2c>)
    b9d2:	4808      	ldr	r0, [pc, #32]	; (b9f4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b9d4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b9d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b9dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b9e0:	f7ff f99c 	bl	ad1c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b9e4:	4620      	mov	r0, r4
    b9e6:	b004      	add	sp, #16
    b9e8:	bd10      	pop	{r4, pc}
    b9ea:	bf00      	nop
    b9ec:	00012300 	.word	0x00012300
    b9f0:	20004798 	.word	0x20004798
    b9f4:	20001020 	.word	0x20001020

0000b9f8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    b9f8:	4770      	bx	lr

0000b9fa <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    b9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9fe:	4607      	mov	r7, r0
    ba00:	460e      	mov	r6, r1
    ba02:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
    ba04:	461d      	mov	r5, r3
    ba06:	b1fb      	cbz	r3, ba48 <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
    ba08:	7818      	ldrb	r0, [r3, #0]
    ba0a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    ba0c:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
    ba10:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    ba14:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    ba16:	f04f 0900 	mov.w	r9, #0
    ba1a:	45d1      	cmp	r9, sl
    ba1c:	d308      	bcc.n	ba30 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
    ba1e:	686a      	ldr	r2, [r5, #4]
    ba20:	f105 0308 	add.w	r3, r5, #8
    ba24:	4641      	mov	r1, r8
    ba26:	4638      	mov	r0, r7
    ba28:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    ba2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    ba2e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    ba30:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    ba34:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    ba38:	4620      	mov	r0, r4
    ba3a:	f002 fb83 	bl	e144 <strlen>
    ba3e:	3001      	adds	r0, #1
    ba40:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    ba42:	f109 0901 	add.w	r9, r9, #1
    ba46:	e7e8      	b.n	ba1a <cbpprintf_external+0x20>
}
    ba48:	f06f 0015 	mvn.w	r0, #21
    ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ba50 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    ba50:	4603      	mov	r3, r0
    ba52:	b140      	cbz	r0, ba66 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ba54:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ba56:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    ba5a:	2a02      	cmp	r2, #2
    ba5c:	d006      	beq.n	ba6c <sys_notify_validate+0x1c>
    ba5e:	2a03      	cmp	r2, #3
    ba60:	d004      	beq.n	ba6c <sys_notify_validate+0x1c>
    ba62:	2a01      	cmp	r2, #1
    ba64:	d005      	beq.n	ba72 <sys_notify_validate+0x22>
		return -EINVAL;
    ba66:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    ba6a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    ba6c:	681a      	ldr	r2, [r3, #0]
    ba6e:	2a00      	cmp	r2, #0
    ba70:	d0f9      	beq.n	ba66 <sys_notify_validate+0x16>
		notify->result = 0;
    ba72:	2000      	movs	r0, #0
    ba74:	6098      	str	r0, [r3, #8]
    ba76:	4770      	bx	lr

0000ba78 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ba78:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ba7a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    ba7e:	2a02      	cmp	r2, #2
{
    ba80:	b510      	push	{r4, lr}
    ba82:	4603      	mov	r3, r0
	notify->result = res;
    ba84:	6081      	str	r1, [r0, #8]
	switch (method) {
    ba86:	d00a      	beq.n	ba9e <sys_notify_finalize+0x26>
    ba88:	2a03      	cmp	r2, #3
    ba8a:	d10b      	bne.n	baa4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    ba8c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    ba8e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ba90:	2200      	movs	r2, #0
    ba92:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    ba94:	b108      	cbz	r0, ba9a <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    ba96:	f7ff ff2f 	bl	b8f8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    ba9a:	4620      	mov	r0, r4
    ba9c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    ba9e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    baa0:	2400      	movs	r4, #0
		break;
    baa2:	e7f5      	b.n	ba90 <sys_notify_finalize+0x18>
	switch (method) {
    baa4:	2400      	movs	r4, #0
    baa6:	4620      	mov	r0, r4
    baa8:	e7f2      	b.n	ba90 <sys_notify_finalize+0x18>

0000baaa <arch_printk_char_out>:
}
    baaa:	2000      	movs	r0, #0
    baac:	4770      	bx	lr

0000baae <str_out>:
{
    baae:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bab0:	688a      	ldr	r2, [r1, #8]
    bab2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    bab4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bab6:	b114      	cbz	r4, babe <str_out+0x10>
    bab8:	684b      	ldr	r3, [r1, #4]
    baba:	4293      	cmp	r3, r2
    babc:	dc01      	bgt.n	bac2 <str_out+0x14>
		ctx->count++;
    babe:	608d      	str	r5, [r1, #8]
}
    bac0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    bac2:	3b01      	subs	r3, #1
    bac4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    bac6:	bf08      	it	eq
    bac8:	2200      	moveq	r2, #0
    baca:	608d      	str	r5, [r1, #8]
    bacc:	bf0c      	ite	eq
    bace:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    bad0:	54a0      	strbne	r0, [r4, r2]
    bad2:	e7f5      	b.n	bac0 <str_out+0x12>

0000bad4 <printk>:
{
    bad4:	b40f      	push	{r0, r1, r2, r3}
    bad6:	b507      	push	{r0, r1, r2, lr}
    bad8:	a904      	add	r1, sp, #16
    bada:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    bade:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    bae0:	f000 ff43 	bl	c96a <z_log_vprintk>
}
    bae4:	b003      	add	sp, #12
    bae6:	f85d eb04 	ldr.w	lr, [sp], #4
    baea:	b004      	add	sp, #16
    baec:	4770      	bx	lr

0000baee <snprintk>:
{
    baee:	b40c      	push	{r2, r3}
    baf0:	b507      	push	{r0, r1, r2, lr}
    baf2:	ab04      	add	r3, sp, #16
    baf4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    baf8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    bafa:	f7f4 ff07 	bl	90c <vsnprintk>
}
    bafe:	b003      	add	sp, #12
    bb00:	f85d eb04 	ldr.w	lr, [sp], #4
    bb04:	b002      	add	sp, #8
    bb06:	4770      	bx	lr

0000bb08 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb08:	b510      	push	{r4, lr}
    bb0a:	4603      	mov	r3, r0
	return list->head;
    bb0c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb0e:	2200      	movs	r2, #0
    bb10:	b158      	cbz	r0, bb2a <sys_slist_find_and_remove+0x22>
    bb12:	4288      	cmp	r0, r1
    bb14:	d10f      	bne.n	bb36 <sys_slist_find_and_remove+0x2e>
	return node->next;
    bb16:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    bb18:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    bb1a:	b93a      	cbnz	r2, bb2c <sys_slist_find_and_remove+0x24>
    bb1c:	42a1      	cmp	r1, r4
	list->head = node;
    bb1e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    bb20:	d100      	bne.n	bb24 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    bb22:	6058      	str	r0, [r3, #4]
	parent->next = child;
    bb24:	2300      	movs	r3, #0
    bb26:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb28:	2001      	movs	r0, #1
    bb2a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    bb2c:	42a1      	cmp	r1, r4
	parent->next = child;
    bb2e:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bb30:	bf08      	it	eq
    bb32:	605a      	streq	r2, [r3, #4]
}
    bb34:	e7f6      	b.n	bb24 <sys_slist_find_and_remove+0x1c>
	return node->next;
    bb36:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb38:	6800      	ldr	r0, [r0, #0]
    bb3a:	e7e9      	b.n	bb10 <sys_slist_find_and_remove+0x8>

0000bb3c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bb3c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    bb3e:	f013 0307 	ands.w	r3, r3, #7
    bb42:	d105      	bne.n	bb50 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    bb44:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    bb46:	2b00      	cmp	r3, #0
    bb48:	bf0c      	ite	eq
    bb4a:	2000      	moveq	r0, #0
    bb4c:	2003      	movne	r0, #3
    bb4e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    bb50:	2b02      	cmp	r3, #2
    bb52:	d105      	bne.n	bb60 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    bb54:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    bb56:	2b00      	cmp	r3, #0
    bb58:	bf14      	ite	ne
    bb5a:	2000      	movne	r0, #0
    bb5c:	2004      	moveq	r0, #4
    bb5e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    bb60:	2b01      	cmp	r3, #1
    bb62:	d105      	bne.n	bb70 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    bb64:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    bb66:	2b00      	cmp	r3, #0
    bb68:	bf0c      	ite	eq
    bb6a:	2000      	moveq	r0, #0
    bb6c:	2005      	movne	r0, #5
    bb6e:	4770      	bx	lr
	int evt = EVT_NOP;
    bb70:	2000      	movs	r0, #0
}
    bb72:	4770      	bx	lr

0000bb74 <notify_one>:
{
    bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb78:	460d      	mov	r5, r1
    bb7a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bb7c:	4619      	mov	r1, r3
    bb7e:	1d28      	adds	r0, r5, #4
{
    bb80:	4690      	mov	r8, r2
    bb82:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bb84:	f7ff ff78 	bl	ba78 <sys_notify_finalize>
	if (cb) {
    bb88:	4604      	mov	r4, r0
    bb8a:	b138      	cbz	r0, bb9c <notify_one+0x28>
		cb(mgr, cli, state, res);
    bb8c:	4633      	mov	r3, r6
    bb8e:	4642      	mov	r2, r8
    bb90:	4629      	mov	r1, r5
    bb92:	4638      	mov	r0, r7
    bb94:	46a4      	mov	ip, r4
}
    bb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    bb9a:	4760      	bx	ip
}
    bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bba0 <transition_complete>:
{
    bba0:	b410      	push	{r4}
	__asm__ volatile(
    bba2:	f04f 0420 	mov.w	r4, #32
    bba6:	f3ef 8211 	mrs	r2, BASEPRI
    bbaa:	f384 8812 	msr	BASEPRI_MAX, r4
    bbae:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    bbb2:	6141      	str	r1, [r0, #20]
}
    bbb4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    bbb6:	2101      	movs	r1, #1
    bbb8:	f7f4 bebc 	b.w	934 <process_event>

0000bbbc <validate_args>:
{
    bbbc:	b510      	push	{r4, lr}
    bbbe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bbc0:	b140      	cbz	r0, bbd4 <validate_args+0x18>
    bbc2:	b139      	cbz	r1, bbd4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    bbc4:	1d08      	adds	r0, r1, #4
    bbc6:	f7ff ff43 	bl	ba50 <sys_notify_validate>
	if ((rv == 0)
    bbca:	b928      	cbnz	r0, bbd8 <validate_args+0x1c>
	    && ((cli->notify.flags
    bbcc:	68a3      	ldr	r3, [r4, #8]
    bbce:	f033 0303 	bics.w	r3, r3, #3
    bbd2:	d001      	beq.n	bbd8 <validate_args+0x1c>
		rv = -EINVAL;
    bbd4:	f06f 0015 	mvn.w	r0, #21
}
    bbd8:	bd10      	pop	{r4, pc}

0000bbda <onoff_manager_init>:
{
    bbda:	b538      	push	{r3, r4, r5, lr}
    bbdc:	460c      	mov	r4, r1
	if ((mgr == NULL)
    bbde:	4605      	mov	r5, r0
    bbe0:	b158      	cbz	r0, bbfa <onoff_manager_init+0x20>
	    || (transitions == NULL)
    bbe2:	b151      	cbz	r1, bbfa <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    bbe4:	680b      	ldr	r3, [r1, #0]
    bbe6:	b143      	cbz	r3, bbfa <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    bbe8:	684b      	ldr	r3, [r1, #4]
    bbea:	b133      	cbz	r3, bbfa <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bbec:	221c      	movs	r2, #28
    bbee:	2100      	movs	r1, #0
    bbf0:	f002 fb09 	bl	e206 <memset>
    bbf4:	612c      	str	r4, [r5, #16]
	return 0;
    bbf6:	2000      	movs	r0, #0
}
    bbf8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bbfa:	f06f 0015 	mvn.w	r0, #21
    bbfe:	e7fb      	b.n	bbf8 <onoff_manager_init+0x1e>

0000bc00 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    bc00:	b570      	push	{r4, r5, r6, lr}
    bc02:	4604      	mov	r4, r0
    bc04:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    bc06:	f7ff ffd9 	bl	bbbc <validate_args>

	if (rv < 0) {
    bc0a:	1e05      	subs	r5, r0, #0
    bc0c:	db31      	blt.n	bc72 <onoff_request+0x72>
    bc0e:	f04f 0320 	mov.w	r3, #32
    bc12:	f3ef 8111 	mrs	r1, BASEPRI
    bc16:	f383 8812 	msr	BASEPRI_MAX, r3
    bc1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    bc1e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bc20:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    bc22:	f64f 75ff 	movw	r5, #65535	; 0xffff
    bc26:	42ab      	cmp	r3, r5
    bc28:	f000 0207 	and.w	r2, r0, #7
    bc2c:	d02e      	beq.n	bc8c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    bc2e:	2a02      	cmp	r2, #2
    bc30:	d10e      	bne.n	bc50 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    bc32:	3301      	adds	r3, #1
    bc34:	8363      	strh	r3, [r4, #26]
	rv = state;
    bc36:	4615      	mov	r5, r2
		notify = true;
    bc38:	2301      	movs	r3, #1
	__asm__ volatile(
    bc3a:	f381 8811 	msr	BASEPRI, r1
    bc3e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    bc42:	b1b3      	cbz	r3, bc72 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    bc44:	2300      	movs	r3, #0
    bc46:	4631      	mov	r1, r6
    bc48:	4620      	mov	r0, r4
    bc4a:	f7ff ff93 	bl	bb74 <notify_one>
    bc4e:	e010      	b.n	bc72 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    bc50:	0783      	lsls	r3, r0, #30
    bc52:	d001      	beq.n	bc58 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    bc54:	2a06      	cmp	r2, #6
    bc56:	d10e      	bne.n	bc76 <onoff_request+0x76>
	parent->next = child;
    bc58:	2300      	movs	r3, #0
    bc5a:	6033      	str	r3, [r6, #0]
	return list->tail;
    bc5c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    bc5e:	b993      	cbnz	r3, bc86 <onoff_request+0x86>
	list->head = node;
    bc60:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    bc64:	4615      	mov	r5, r2
    bc66:	b962      	cbnz	r2, bc82 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    bc68:	460a      	mov	r2, r1
    bc6a:	4620      	mov	r0, r4
    bc6c:	2102      	movs	r1, #2
    bc6e:	f7f4 fe61 	bl	934 <process_event>
		}
	}

	return rv;
}
    bc72:	4628      	mov	r0, r5
    bc74:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    bc76:	2a05      	cmp	r2, #5
    bc78:	bf0c      	ite	eq
    bc7a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    bc7e:	f06f 0504 	mvnne.w	r5, #4
    bc82:	2300      	movs	r3, #0
    bc84:	e7d9      	b.n	bc3a <onoff_request+0x3a>
	parent->next = child;
    bc86:	601e      	str	r6, [r3, #0]
	list->tail = node;
    bc88:	6066      	str	r6, [r4, #4]
}
    bc8a:	e7eb      	b.n	bc64 <onoff_request+0x64>
		rv = -EAGAIN;
    bc8c:	f06f 050a 	mvn.w	r5, #10
    bc90:	e7f7      	b.n	bc82 <onoff_request+0x82>

0000bc92 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    bc92:	b510      	push	{r4, lr}
	__asm__ volatile(
    bc94:	f04f 0320 	mov.w	r3, #32
    bc98:	f3ef 8211 	mrs	r2, BASEPRI
    bc9c:	f383 8812 	msr	BASEPRI_MAX, r3
    bca0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bca4:	8b04      	ldrh	r4, [r0, #24]
    bca6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    bcaa:	2c02      	cmp	r4, #2
    bcac:	d00a      	beq.n	bcc4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    bcae:	2c01      	cmp	r4, #1
    bcb0:	bf0c      	ite	eq
    bcb2:	f06f 0004 	mvneq.w	r0, #4
    bcb6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    bcba:	f382 8811 	msr	BASEPRI, r2
    bcbe:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    bcc2:	e008      	b.n	bcd6 <onoff_release+0x44>
	mgr->refs -= 1U;
    bcc4:	8b43      	ldrh	r3, [r0, #26]
    bcc6:	3b01      	subs	r3, #1
    bcc8:	b29b      	uxth	r3, r3
    bcca:	8343      	strh	r3, [r0, #26]
	if (stop) {
    bccc:	b923      	cbnz	r3, bcd8 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    bcce:	4621      	mov	r1, r4
    bcd0:	f7f4 fe30 	bl	934 <process_event>
	int rv = state;
    bcd4:	4620      	mov	r0, r4
}
    bcd6:	bd10      	pop	{r4, pc}
	int rv = state;
    bcd8:	4620      	mov	r0, r4
    bcda:	e7ee      	b.n	bcba <onoff_release+0x28>

0000bcdc <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    bcdc:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    bcde:	b1b0      	cbz	r0, bd0e <onoff_cancel+0x32>
    bce0:	b1a9      	cbz	r1, bd0e <onoff_cancel+0x32>
	__asm__ volatile(
    bce2:	f04f 0220 	mov.w	r2, #32
    bce6:	f3ef 8511 	mrs	r5, BASEPRI
    bcea:	f382 8812 	msr	BASEPRI_MAX, r2
    bcee:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bcf2:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    bcf4:	f7ff ff08 	bl	bb08 <sys_slist_find_and_remove>
    bcf8:	b130      	cbz	r0, bd08 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    bcfa:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    bcfe:	f385 8811 	msr	BASEPRI, r5
    bd02:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    bd06:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    bd08:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bd0c:	e7f7      	b.n	bcfe <onoff_cancel+0x22>
		return -EINVAL;
    bd0e:	f06f 0015 	mvn.w	r0, #21
    bd12:	e7f8      	b.n	bd06 <onoff_cancel+0x2a>

0000bd14 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bd14:	4604      	mov	r4, r0
    bd16:	b508      	push	{r3, lr}
    bd18:	4608      	mov	r0, r1
    bd1a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bd1c:	461a      	mov	r2, r3
    bd1e:	47a0      	blx	r4
	return z_impl_z_current_get();
    bd20:	f7ff fb24 	bl	b36c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bd24:	f7fa fa7e 	bl	6224 <z_impl_k_thread_abort>

0000bd28 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    bd28:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    bd2c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    bd2e:	0840      	lsrs	r0, r0, #1
    bd30:	4770      	bx	lr

0000bd32 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    bd32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd34:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    bd36:	f7ff fff7 	bl	bd28 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    bd3a:	fab0 f080 	clz	r0, r0
    bd3e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    bd42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    bd46:	00ca      	lsls	r2, r1, #3
    bd48:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    bd4c:	1d17      	adds	r7, r2, #4
{
    bd4e:	460c      	mov	r4, r1
    bd50:	3206      	adds	r2, #6
    bd52:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    bd54:	b956      	cbnz	r6, bd6c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    bd56:	2101      	movs	r1, #1
    bd58:	fa01 f000 	lsl.w	r0, r1, r0
    bd5c:	68d9      	ldr	r1, [r3, #12]
    bd5e:	4301      	orrs	r1, r0
    bd60:	60d9      	str	r1, [r3, #12]
		b->next = c;
    bd62:	f8cc 4010 	str.w	r4, [ip, #16]
    bd66:	53dd      	strh	r5, [r3, r7]
    bd68:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    bd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    bd6c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    bd6e:	3104      	adds	r1, #4
    bd70:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    bd72:	53d8      	strh	r0, [r3, r7]
    bd74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    bd78:	529e      	strh	r6, [r3, r2]
    bd7a:	80c5      	strh	r5, [r0, #6]
    bd7c:	525d      	strh	r5, [r3, r1]
    bd7e:	e7f4      	b.n	bd6a <free_list_add+0x38>

0000bd80 <free_list_remove_bidx>:
{
    bd80:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    bd82:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    bd86:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    bd88:	4299      	cmp	r1, r3
    bd8a:	f102 0104 	add.w	r1, r2, #4
    bd8e:	d10a      	bne.n	bda6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    bd90:	2301      	movs	r3, #1
    bd92:	fa03 f202 	lsl.w	r2, r3, r2
    bd96:	68c3      	ldr	r3, [r0, #12]
    bd98:	ea23 0302 	bic.w	r3, r3, r2
    bd9c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    bd9e:	2300      	movs	r3, #0
    bda0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    bda4:	bd10      	pop	{r4, pc}
    bda6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    bda8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    bdac:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    bdb0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    bdb4:	80cb      	strh	r3, [r1, #6]
    bdb6:	8082      	strh	r2, [r0, #4]
}
    bdb8:	e7f4      	b.n	bda4 <free_list_remove_bidx+0x24>

0000bdba <free_list_remove>:
{
    bdba:	b508      	push	{r3, lr}
    bdbc:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    bdbe:	f7ff ffb3 	bl	bd28 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    bdc2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    bdc6:	f1c2 021f 	rsb	r2, r2, #31
    bdca:	4618      	mov	r0, r3
}
    bdcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    bdd0:	f7ff bfd6 	b.w	bd80 <free_list_remove_bidx>

0000bdd4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    bdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdd8:	fab1 f581 	clz	r5, r1
    bddc:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    bde0:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    bde4:	4603      	mov	r3, r0
	if (b->next) {
    bde6:	693a      	ldr	r2, [r7, #16]
{
    bde8:	460e      	mov	r6, r1
	if (b->next) {
    bdea:	b1c2      	cbz	r2, be1e <alloc_chunk+0x4a>
    bdec:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    bdf0:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    bdf2:	4618      	mov	r0, r3
    bdf4:	4621      	mov	r1, r4
    bdf6:	f7ff ff97 	bl	bd28 <chunk_size>
    bdfa:	42b0      	cmp	r0, r6
    bdfc:	d306      	bcc.n	be0c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    bdfe:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    be00:	4618      	mov	r0, r3
    be02:	f7ff ffbd 	bl	bd80 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    be06:	4620      	mov	r0, r4
    be08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    be0c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    be10:	f1b8 0801 	subs.w	r8, r8, #1
    be14:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    be16:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    be18:	d001      	beq.n	be1e <alloc_chunk+0x4a>
    be1a:	4282      	cmp	r2, r0
    be1c:	d1e8      	bne.n	bdf0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    be1e:	f1c5 0220 	rsb	r2, r5, #32
    be22:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    be26:	4094      	lsls	r4, r2
    be28:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    be2a:	4014      	ands	r4, r2
    be2c:	d0eb      	beq.n	be06 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    be2e:	fa94 f2a4 	rbit	r2, r4
    be32:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    be36:	1d11      	adds	r1, r2, #4
    be38:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    be3c:	4621      	mov	r1, r4
    be3e:	e7df      	b.n	be00 <alloc_chunk+0x2c>

0000be40 <merge_chunks>:
{
    be40:	b538      	push	{r3, r4, r5, lr}
    be42:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    be44:	f7ff ff70 	bl	bd28 <chunk_size>
{
    be48:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    be4a:	4604      	mov	r4, r0
    be4c:	4611      	mov	r1, r2
    be4e:	4618      	mov	r0, r3
    be50:	f7ff ff6a 	bl	bd28 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    be54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    be58:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    be5a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    be5c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    be5e:	4618      	mov	r0, r3
    be60:	f7ff ff62 	bl	bd28 <chunk_size>
	void *cmem = &buf[c];
    be64:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    be66:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    be6a:	bd38      	pop	{r3, r4, r5, pc}

0000be6c <split_chunks>:
{
    be6c:	b538      	push	{r3, r4, r5, lr}
    be6e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    be70:	f7ff ff5a 	bl	bd28 <chunk_size>
{
    be74:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    be76:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    be78:	1a51      	subs	r1, r2, r1
    be7a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    be7e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    be80:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    be82:	8060      	strh	r0, [r4, #2]
    be84:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    be88:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    be8a:	8044      	strh	r4, [r0, #2]
    be8c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    be90:	4618      	mov	r0, r3
    be92:	4611      	mov	r1, r2
    be94:	f7ff ff48 	bl	bd28 <chunk_size>
	void *cmem = &buf[c];
    be98:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    be9a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    be9e:	bd38      	pop	{r3, r4, r5, pc}

0000bea0 <free_chunk>:
{
    bea0:	b538      	push	{r3, r4, r5, lr}
    bea2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    bea4:	f7ff ff40 	bl	bd28 <chunk_size>
    bea8:	460c      	mov	r4, r1
    beaa:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    beac:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    beb0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    beb2:	07da      	lsls	r2, r3, #31
    beb4:	d40a      	bmi.n	becc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    beb6:	4628      	mov	r0, r5
    beb8:	f7ff ff7f 	bl	bdba <free_list_remove>
	return c + chunk_size(h, c);
    bebc:	4621      	mov	r1, r4
    bebe:	4628      	mov	r0, r5
    bec0:	f7ff ff32 	bl	bd28 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    bec4:	1822      	adds	r2, r4, r0
    bec6:	4628      	mov	r0, r5
    bec8:	f7ff ffba 	bl	be40 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    becc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bed0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    bed2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    bed6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    bed8:	07db      	lsls	r3, r3, #31
    beda:	d40c      	bmi.n	bef6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    bedc:	4628      	mov	r0, r5
    bede:	f7ff ff6c 	bl	bdba <free_list_remove>
		return ((uint16_t *)cmem)[f];
    bee2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    bee6:	4622      	mov	r2, r4
    bee8:	1a61      	subs	r1, r4, r1
    beea:	4628      	mov	r0, r5
    beec:	f7ff ffa8 	bl	be40 <merge_chunks>
    bef0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bef4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    bef6:	4621      	mov	r1, r4
    bef8:	4628      	mov	r0, r5
}
    befa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    befe:	f7ff bf18 	b.w	bd32 <free_list_add>

0000bf02 <sys_heap_free>:
	if (mem == NULL) {
    bf02:	b161      	cbz	r1, bf1e <sys_heap_free+0x1c>
    bf04:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bf06:	3904      	subs	r1, #4
    bf08:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    bf0a:	f021 0307 	bic.w	r3, r1, #7
    bf0e:	4403      	add	r3, r0
	free_chunk(h, c);
    bf10:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bf12:	885a      	ldrh	r2, [r3, #2]
    bf14:	f022 0201 	bic.w	r2, r2, #1
    bf18:	805a      	strh	r2, [r3, #2]
    bf1a:	f7ff bfc1 	b.w	bea0 <free_chunk>
}
    bf1e:	4770      	bx	lr

0000bf20 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    bf20:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    bf22:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    bf24:	b909      	cbnz	r1, bf2a <sys_heap_alloc+0xa>
		return NULL;
    bf26:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    bf28:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    bf2a:	68ab      	ldr	r3, [r5, #8]
    bf2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    bf30:	d9f9      	bls.n	bf26 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bf32:	310b      	adds	r1, #11
    bf34:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    bf36:	4621      	mov	r1, r4
    bf38:	4628      	mov	r0, r5
    bf3a:	f7ff ff4b 	bl	bdd4 <alloc_chunk>
	if (c == 0U) {
    bf3e:	4606      	mov	r6, r0
    bf40:	2800      	cmp	r0, #0
    bf42:	d0f0      	beq.n	bf26 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    bf44:	4601      	mov	r1, r0
    bf46:	4628      	mov	r0, r5
    bf48:	f7ff feee 	bl	bd28 <chunk_size>
    bf4c:	42a0      	cmp	r0, r4
    bf4e:	d907      	bls.n	bf60 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    bf50:	1932      	adds	r2, r6, r4
    bf52:	4628      	mov	r0, r5
    bf54:	f7ff ff8a 	bl	be6c <split_chunks>
		free_list_add(h, c + chunk_sz);
    bf58:	4611      	mov	r1, r2
    bf5a:	4628      	mov	r0, r5
    bf5c:	f7ff fee9 	bl	bd32 <free_list_add>
	void *cmem = &buf[c];
    bf60:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    bf64:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf66:	8853      	ldrh	r3, [r2, #2]
    bf68:	f043 0301 	orr.w	r3, r3, #1
    bf6c:	8053      	strh	r3, [r2, #2]
    bf6e:	3004      	adds	r0, #4
	return mem;
    bf70:	e7da      	b.n	bf28 <sys_heap_alloc+0x8>

0000bf72 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    bf72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf76:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    bf78:	424a      	negs	r2, r1
    bf7a:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    bf7e:	ea31 0202 	bics.w	r2, r1, r2
{
    bf82:	4603      	mov	r3, r0
	if (align != rew) {
    bf84:	d00a      	beq.n	bf9c <sys_heap_aligned_alloc+0x2a>
		return false;
    bf86:	2f04      	cmp	r7, #4
    bf88:	463a      	mov	r2, r7
    bf8a:	46b9      	mov	r9, r7
    bf8c:	bf28      	it	cs
    bf8e:	2204      	movcs	r2, #4
		align -= rew;
    bf90:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    bf92:	b974      	cbnz	r4, bfb2 <sys_heap_aligned_alloc+0x40>
		return NULL;
    bf94:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    bf96:	4628      	mov	r0, r5
    bf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    bf9c:	2904      	cmp	r1, #4
    bf9e:	d804      	bhi.n	bfaa <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    bfa0:	4621      	mov	r1, r4
}
    bfa2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    bfa6:	f7ff bfbb 	b.w	bf20 <sys_heap_alloc>
		rew = 0;
    bfaa:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    bfae:	2204      	movs	r2, #4
    bfb0:	e7ef      	b.n	bf92 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    bfb2:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    bfb4:	68b3      	ldr	r3, [r6, #8]
    bfb6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    bfba:	d9eb      	bls.n	bf94 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bfbc:	f104 010b 	add.w	r1, r4, #11
    bfc0:	4439      	add	r1, r7
    bfc2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    bfc4:	08c9      	lsrs	r1, r1, #3
    bfc6:	4630      	mov	r0, r6
    bfc8:	f7ff ff04 	bl	bdd4 <alloc_chunk>
	if (c0 == 0) {
    bfcc:	4680      	mov	r8, r0
    bfce:	2800      	cmp	r0, #0
    bfd0:	d0e0      	beq.n	bf94 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    bfd2:	f109 0504 	add.w	r5, r9, #4
    bfd6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    bfda:	1e7b      	subs	r3, r7, #1
    bfdc:	4435      	add	r5, r6
    bfde:	441d      	add	r5, r3
    bfe0:	427f      	negs	r7, r7
    bfe2:	403d      	ands	r5, r7
    bfe4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bfe8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bfea:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bfec:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bfee:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bff0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    bff4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    bff6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bffa:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    bffe:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    c002:	d208      	bcs.n	c016 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    c004:	4601      	mov	r1, r0
    c006:	463a      	mov	r2, r7
    c008:	4630      	mov	r0, r6
    c00a:	f7ff ff2f 	bl	be6c <split_chunks>
		free_list_add(h, c0);
    c00e:	4641      	mov	r1, r8
    c010:	4630      	mov	r0, r6
    c012:	f7ff fe8e 	bl	bd32 <free_list_add>
	return c + chunk_size(h, c);
    c016:	4639      	mov	r1, r7
    c018:	4630      	mov	r0, r6
    c01a:	f7ff fe85 	bl	bd28 <chunk_size>
    c01e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    c020:	4284      	cmp	r4, r0
    c022:	d207      	bcs.n	c034 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    c024:	4630      	mov	r0, r6
    c026:	4622      	mov	r2, r4
    c028:	f7ff ff20 	bl	be6c <split_chunks>
		free_list_add(h, c_end);
    c02c:	4621      	mov	r1, r4
    c02e:	4630      	mov	r0, r6
    c030:	f7ff fe7f 	bl	bd32 <free_list_add>
	void *cmem = &buf[c];
    c034:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c038:	8873      	ldrh	r3, [r6, #2]
    c03a:	f043 0301 	orr.w	r3, r3, #1
    c03e:	8073      	strh	r3, [r6, #2]
    c040:	e7a9      	b.n	bf96 <sys_heap_aligned_alloc+0x24>

0000c042 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    c042:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c044:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c046:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c048:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c04c:	f021 0107 	bic.w	r1, r1, #7
{
    c050:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c052:	1acd      	subs	r5, r1, r3
    c054:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    c056:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    c058:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c05c:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    c060:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c062:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    c064:	2600      	movs	r6, #0
    c066:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c068:	f1c0 0020 	rsb	r0, r0, #32
    c06c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    c070:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    c072:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    c074:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    c078:	4284      	cmp	r4, r0
    c07a:	d118      	bne.n	c0ae <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c07c:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c07e:	f040 0001 	orr.w	r0, r0, #1
    c082:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    c084:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c088:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c08a:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    c08c:	801e      	strh	r6, [r3, #0]
    c08e:	8067      	strh	r7, [r4, #2]
    c090:	195c      	adds	r4, r3, r5
    c092:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    c096:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    c09a:	8066      	strh	r6, [r4, #2]
    c09c:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c09e:	8850      	ldrh	r0, [r2, #2]
    c0a0:	f040 0001 	orr.w	r0, r0, #1
    c0a4:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    c0a6:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    c0a8:	4618      	mov	r0, r3
    c0aa:	f7ff be42 	b.w	bd32 <free_list_add>
		h->buckets[i].next = 0;
    c0ae:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    c0b2:	e7e1      	b.n	c078 <sys_heap_init+0x36>

0000c0b4 <encode_uint>:
{
    c0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0b8:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    c0ba:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    c0bc:	2b6f      	cmp	r3, #111	; 0x6f
{
    c0be:	4680      	mov	r8, r0
    c0c0:	460f      	mov	r7, r1
    c0c2:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c0c4:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c0c8:	d029      	beq.n	c11e <encode_uint+0x6a>
    c0ca:	d824      	bhi.n	c116 <encode_uint+0x62>
		return 16;
    c0cc:	2b58      	cmp	r3, #88	; 0x58
    c0ce:	bf14      	ite	ne
    c0d0:	260a      	movne	r6, #10
    c0d2:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    c0d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    c0d8:	4632      	mov	r2, r6
    c0da:	2300      	movs	r3, #0
    c0dc:	4640      	mov	r0, r8
    c0de:	4639      	mov	r1, r7
    c0e0:	f7f4 f80e 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0e4:	2a09      	cmp	r2, #9
    c0e6:	b2d4      	uxtb	r4, r2
    c0e8:	d81e      	bhi.n	c128 <encode_uint+0x74>
    c0ea:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c0ec:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0ee:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    c0f0:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0f4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    c0f8:	d301      	bcc.n	c0fe <encode_uint+0x4a>
    c0fa:	45d1      	cmp	r9, sl
    c0fc:	d811      	bhi.n	c122 <encode_uint+0x6e>
	if (conv->flag_hash) {
    c0fe:	782b      	ldrb	r3, [r5, #0]
    c100:	069b      	lsls	r3, r3, #26
    c102:	d505      	bpl.n	c110 <encode_uint+0x5c>
		if (radix == 8) {
    c104:	2e08      	cmp	r6, #8
    c106:	d115      	bne.n	c134 <encode_uint+0x80>
			conv->altform_0 = true;
    c108:	78ab      	ldrb	r3, [r5, #2]
    c10a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c10e:	70ab      	strb	r3, [r5, #2]
}
    c110:	4648      	mov	r0, r9
    c112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c116:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    c11a:	2b70      	cmp	r3, #112	; 0x70
    c11c:	e7d7      	b.n	c0ce <encode_uint+0x1a>
	switch (specifier) {
    c11e:	2608      	movs	r6, #8
    c120:	e7d8      	b.n	c0d4 <encode_uint+0x20>
		value /= radix;
    c122:	4680      	mov	r8, r0
    c124:	460f      	mov	r7, r1
    c126:	e7d7      	b.n	c0d8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c128:	f1bb 0f19 	cmp.w	fp, #25
    c12c:	bf94      	ite	ls
    c12e:	3437      	addls	r4, #55	; 0x37
    c130:	3457      	addhi	r4, #87	; 0x57
    c132:	e7db      	b.n	c0ec <encode_uint+0x38>
		} else if (radix == 16) {
    c134:	2e10      	cmp	r6, #16
    c136:	d1eb      	bne.n	c110 <encode_uint+0x5c>
			conv->altform_0c = true;
    c138:	78ab      	ldrb	r3, [r5, #2]
    c13a:	f043 0310 	orr.w	r3, r3, #16
    c13e:	e7e6      	b.n	c10e <encode_uint+0x5a>

0000c140 <outs>:
{
    c140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c144:	4607      	mov	r7, r0
    c146:	4688      	mov	r8, r1
    c148:	4615      	mov	r5, r2
    c14a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c14c:	4614      	mov	r4, r2
    c14e:	42b4      	cmp	r4, r6
    c150:	eba4 0005 	sub.w	r0, r4, r5
    c154:	d302      	bcc.n	c15c <outs+0x1c>
    c156:	b93e      	cbnz	r6, c168 <outs+0x28>
    c158:	7823      	ldrb	r3, [r4, #0]
    c15a:	b12b      	cbz	r3, c168 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    c15c:	f814 0b01 	ldrb.w	r0, [r4], #1
    c160:	4641      	mov	r1, r8
    c162:	47b8      	blx	r7
		if (rc < 0) {
    c164:	2800      	cmp	r0, #0
    c166:	daf2      	bge.n	c14e <outs+0xe>
}
    c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c16c <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    c16c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    c170:	4770      	bx	lr

0000c172 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    c172:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    c174:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    c178:	42ac      	cmp	r4, r5
    c17a:	d207      	bcs.n	c18c <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
    c17c:	6906      	ldr	r6, [r0, #16]
    c17e:	f7ff fff5 	bl	c16c <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c182:	fbb0 f0f6 	udiv	r0, r0, r6
    c186:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
    c188:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    c18c:	1b63      	subs	r3, r4, r5
    c18e:	4258      	negs	r0, r3
    c190:	4158      	adcs	r0, r3
    c192:	bd70      	pop	{r4, r5, r6, pc}

0000c194 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
    c198:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
    c19a:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
    c19e:	454c      	cmp	r4, r9
{
    c1a0:	4605      	mov	r5, r0
    c1a2:	460e      	mov	r6, r1
    c1a4:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
    c1a6:	d907      	bls.n	c1b8 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    c1a8:	6907      	ldr	r7, [r0, #16]
    c1aa:	f7ff ffdf 	bl	c16c <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c1ae:	fbb0 f0f7 	udiv	r0, r0, r7
    c1b2:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    c1b4:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c1b8:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    c1ba:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c1bc:	692f      	ldr	r7, [r5, #16]
    c1be:	b18b      	cbz	r3, c1e4 <ring_buf_put_claim+0x50>
    c1c0:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
    c1c2:	443c      	add	r4, r7
    c1c4:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    c1c8:	4540      	cmp	r0, r8
    c1ca:	bf28      	it	cs
    c1cc:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
    c1ce:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    c1d0:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
    c1d2:	42b8      	cmp	r0, r7
    c1d4:	bf28      	it	cs
    c1d6:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    c1d8:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    c1da:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    c1dc:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
    c1de:	60a9      	str	r1, [r5, #8]

	return allocated;
}
    c1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c1e4:	fbb1 f3f7 	udiv	r3, r1, r7
    c1e8:	fb07 1313 	mls	r3, r7, r3, r1
    c1ec:	e7e9      	b.n	c1c2 <ring_buf_put_claim+0x2e>

0000c1ee <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    c1ee:	b570      	push	{r4, r5, r6, lr}
    c1f0:	4605      	mov	r5, r0
    c1f2:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    c1f4:	f7ff ffba 	bl	c16c <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    c1f8:	686e      	ldr	r6, [r5, #4]
    c1fa:	692a      	ldr	r2, [r5, #16]
    c1fc:	682b      	ldr	r3, [r5, #0]
    c1fe:	1931      	adds	r1, r6, r4
    c200:	4413      	add	r3, r2
    c202:	4299      	cmp	r1, r3
    c204:	d80c      	bhi.n	c220 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    c206:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
    c208:	bf83      	ittte	hi
    c20a:	fbb0 f3f2 	udivhi	r3, r0, r2
    c20e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    c212:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    c214:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
    c216:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    c218:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
    c21c:	2000      	movs	r0, #0
}
    c21e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c220:	f06f 0015 	mvn.w	r0, #21
    c224:	e7fb      	b.n	c21e <ring_buf_put_finish+0x30>

0000c226 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c226:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c22a:	4680      	mov	r8, r0
    c22c:	460e      	mov	r6, r1
    c22e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c230:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c232:	462a      	mov	r2, r5
    c234:	a901      	add	r1, sp, #4
    c236:	4640      	mov	r0, r8
    c238:	f7ff ffac 	bl	c194 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    c23c:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c23e:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c240:	4602      	mov	r2, r0
    c242:	9801      	ldr	r0, [sp, #4]
    c244:	f001 ffd4 	bl	e1f0 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    c248:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    c24a:	4427      	add	r7, r4
		data += partial_size;
    c24c:	4426      	add	r6, r4
	} while (size && partial_size);
    c24e:	d001      	beq.n	c254 <ring_buf_put+0x2e>
    c250:	2c00      	cmp	r4, #0
    c252:	d1ee      	bne.n	c232 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    c254:	4639      	mov	r1, r7
    c256:	4640      	mov	r0, r8
    c258:	f7ff ffc9 	bl	c1ee <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c25c:	4638      	mov	r0, r7
    c25e:	b002      	add	sp, #8
    c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c264 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c268:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    c26a:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    c26c:	42b3      	cmp	r3, r6
{
    c26e:	4604      	mov	r4, r0
    c270:	460f      	mov	r7, r1
    c272:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    c274:	d907      	bls.n	c286 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    c276:	6905      	ldr	r5, [r0, #16]
    c278:	f7ff ff78 	bl	c16c <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c27c:	fbb0 f1f5 	udiv	r1, r0, r5
    c280:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
    c282:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c286:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    c288:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c28a:	6923      	ldr	r3, [r4, #16]
    c28c:	b185      	cbz	r5, c2b0 <ring_buf_get_claim+0x4c>
    c28e:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    c290:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    c292:	4540      	cmp	r0, r8
    c294:	bf28      	it	cs
    c296:	4640      	movcs	r0, r8
    c298:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    c29a:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    c29c:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    c29e:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    c2a0:	bf28      	it	cs
    c2a2:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    c2a4:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    c2a6:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    c2a8:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    c2aa:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    c2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c2b0:	fbb1 f5f3 	udiv	r5, r1, r3
    c2b4:	fb03 1515 	mls	r5, r3, r5, r1
    c2b8:	e7ea      	b.n	c290 <ring_buf_get_claim+0x2c>

0000c2ba <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    c2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    c2bc:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c2be:	68c3      	ldr	r3, [r0, #12]
    c2c0:	42b3      	cmp	r3, r6
{
    c2c2:	4605      	mov	r5, r0
    c2c4:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    c2c6:	d914      	bls.n	c2f2 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    c2c8:	6907      	ldr	r7, [r0, #16]
    c2ca:	f7ff ff4f 	bl	c16c <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c2ce:	fbb0 f1f7 	udiv	r1, r0, r7
    c2d2:	3901      	subs	r1, #1
    c2d4:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
    c2d8:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    c2da:	6829      	ldr	r1, [r5, #0]
    c2dc:	4421      	add	r1, r4
    c2de:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    c2e0:	bf9f      	itttt	ls
    c2e2:	1ac9      	subls	r1, r1, r3
    c2e4:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    c2e6:	60e9      	strls	r1, [r5, #12]

	return 0;
    c2e8:	2000      	movls	r0, #0
		return -EINVAL;
    c2ea:	bf88      	it	hi
    c2ec:	f06f 0015 	mvnhi.w	r0, #21
}
    c2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    c2f2:	2300      	movs	r3, #0
    c2f4:	e7f1      	b.n	c2da <ring_buf_get_finish+0x20>

0000c2f6 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c2f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c2fa:	4680      	mov	r8, r0
    c2fc:	460d      	mov	r5, r1
    c2fe:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c300:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    c302:	4632      	mov	r2, r6
    c304:	a901      	add	r1, sp, #4
    c306:	4640      	mov	r0, r8
    c308:	f7ff ffac 	bl	c264 <ring_buf_get_claim>
    c30c:	4604      	mov	r4, r0
		if (data) {
    c30e:	b12d      	cbz	r5, c31c <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    c310:	4602      	mov	r2, r0
    c312:	9901      	ldr	r1, [sp, #4]
    c314:	4628      	mov	r0, r5
    c316:	f001 ff6b 	bl	e1f0 <memcpy>
			data += partial_size;
    c31a:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    c31c:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    c31e:	4427      	add	r7, r4
	} while (size && partial_size);
    c320:	d001      	beq.n	c326 <ring_buf_get+0x30>
    c322:	2c00      	cmp	r4, #0
    c324:	d1ed      	bne.n	c302 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    c326:	4639      	mov	r1, r7
    c328:	4640      	mov	r0, r8
    c32a:	f7ff ffc6 	bl	c2ba <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c32e:	4638      	mov	r0, r7
    c330:	b002      	add	sp, #8
    c332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c336 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    c336:	4602      	mov	r2, r0
    c338:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    c33a:	68c0      	ldr	r0, [r0, #12]
    c33c:	6814      	ldr	r4, [r2, #0]
    c33e:	42a0      	cmp	r0, r4
    c340:	d904      	bls.n	c34c <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    c342:	3801      	subs	r0, #1
    c344:	1b00      	subs	r0, r0, r4
    c346:	6008      	str	r0, [r1, #0]

		return false;
    c348:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    c34a:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    c34c:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    c34e:	b918      	cbnz	r0, c358 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    c350:	3b01      	subs	r3, #1
    c352:	1b1b      	subs	r3, r3, r4
    c354:	600b      	str	r3, [r1, #0]
		return false;
    c356:	e7f8      	b.n	c34a <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    c358:	1b1b      	subs	r3, r3, r4
    c35a:	600b      	str	r3, [r1, #0]
	return true;
    c35c:	2001      	movs	r0, #1
    c35e:	e7f4      	b.n	c34a <free_space+0x14>

0000c360 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    c360:	b510      	push	{r4, lr}
    c362:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    c364:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    c366:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    c368:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    c36a:	07d2      	lsls	r2, r2, #31
    c36c:	d502      	bpl.n	c374 <idx_inc+0x14>
		return i & (buffer->size - 1);
    c36e:	3b01      	subs	r3, #1
    c370:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    c372:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    c374:	4298      	cmp	r0, r3
    c376:	bf28      	it	cs
    c378:	1ac0      	subcs	r0, r0, r3
    c37a:	e7fa      	b.n	c372 <idx_inc+0x12>

0000c37c <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    c37c:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c37e:	69c2      	ldr	r2, [r0, #28]
{
    c380:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    c382:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c384:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    c386:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c38a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c38e:	462a      	mov	r2, r5
    c390:	6801      	ldr	r1, [r0, #0]
{
    c392:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c394:	f7ff ffe4 	bl	c360 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c398:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c39a:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c39c:	462a      	mov	r2, r5
    c39e:	4620      	mov	r0, r4
    c3a0:	f7ff ffde 	bl	c360 <idx_inc>
    c3a4:	6060      	str	r0, [r4, #4]
}
    c3a6:	bd38      	pop	{r3, r4, r5, pc}

0000c3a8 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    c3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    c3ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    c3b0:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    c3b4:	461f      	mov	r7, r3
	*user_packet = false;
    c3b6:	2300      	movs	r3, #0
    c3b8:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    c3ba:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    c3be:	f003 0303 	and.w	r3, r3, #3
    c3c2:	2b02      	cmp	r3, #2
{
    c3c4:	4604      	mov	r4, r0
    c3c6:	468b      	mov	fp, r1
    c3c8:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    c3ca:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    c3ce:	d103      	bne.n	c3d8 <drop_item_locked+0x30>
		return item->skip.len;
    c3d0:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    c3d4:	08ad      	lsrs	r5, r5, #2
    c3d6:	d12e      	bne.n	c436 <drop_item_locked+0x8e>
    c3d8:	69a3      	ldr	r3, [r4, #24]
    c3da:	4630      	mov	r0, r6
    c3dc:	4798      	blx	r3
    c3de:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    c3e0:	f1b8 0f00 	cmp.w	r8, #0
    c3e4:	d036      	beq.n	c454 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    c3e6:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    c3ea:	079b      	lsls	r3, r3, #30
    c3ec:	d52f      	bpl.n	c44e <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    c3ee:	f10b 0101 	add.w	r1, fp, #1
    c3f2:	4620      	mov	r0, r4
    c3f4:	f7ff ffc2 	bl	c37c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    c3f8:	6861      	ldr	r1, [r4, #4]
    c3fa:	462a      	mov	r2, r5
    c3fc:	4620      	mov	r0, r4
    c3fe:	f7ff ffaf 	bl	c360 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    c402:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    c404:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    c406:	462a      	mov	r2, r5
    c408:	4620      	mov	r0, r4
    c40a:	f7ff ffa9 	bl	c360 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    c40e:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    c410:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    c412:	68e1      	ldr	r1, [r4, #12]
    c414:	4620      	mov	r0, r4
    c416:	f7ff ffa3 	bl	c360 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    c41a:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    c41c:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    c420:	f002 0203 	and.w	r2, r2, #3
    c424:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    c426:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    c42a:	d10c      	bne.n	c446 <drop_item_locked+0x9e>
		return item->skip.len;
    c42c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    c430:	089b      	lsrs	r3, r3, #2
    c432:	d008      	beq.n	c446 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    c434:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    c436:	68e1      	ldr	r1, [r4, #12]
    c438:	462a      	mov	r2, r5
    c43a:	4620      	mov	r0, r4
    c43c:	f7ff ff90 	bl	c360 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    c440:	e9c4 0002 	strd	r0, r0, [r4, #8]
    c444:	e007      	b.n	c456 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    c446:	69a3      	ldr	r3, [r4, #24]
    c448:	4630      	mov	r0, r6
    c44a:	4798      	blx	r3
    c44c:	4405      	add	r5, r0
			*user_packet = true;
    c44e:	2301      	movs	r3, #1
    c450:	703b      	strb	r3, [r7, #0]
    c452:	e7f0      	b.n	c436 <drop_item_locked+0x8e>
		item = NULL;
    c454:	4646      	mov	r6, r8
	}

	return item;
}
    c456:	4630      	mov	r0, r6
    c458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c45c <mpsc_pbuf_init>:
{
    c45c:	b538      	push	{r3, r4, r5, lr}
    c45e:	460d      	mov	r5, r1
    c460:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    c462:	221c      	movs	r2, #28
    c464:	2100      	movs	r1, #0
    c466:	f001 fece 	bl	e206 <memset>
	buffer->get_wlen = cfg->get_wlen;
    c46a:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
    c46c:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
    c46e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    c470:	68ab      	ldr	r3, [r5, #8]
    c472:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    c474:	682b      	ldr	r3, [r5, #0]
    c476:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    c478:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    c47a:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    c47c:	b122      	cbz	r2, c488 <mpsc_pbuf_init+0x2c>
    c47e:	1e51      	subs	r1, r2, #1
    c480:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    c482:	bf08      	it	eq
    c484:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    c488:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c48a:	2201      	movs	r2, #1
    c48c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c490:	2100      	movs	r1, #0
}
    c492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c496:	f002 bcaa 	b.w	edee <z_impl_k_sem_init>

0000c49a <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    c49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c49e:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    c4a0:	6a03      	ldr	r3, [r0, #32]
    c4a2:	3b01      	subs	r3, #1
    c4a4:	428b      	cmp	r3, r1
{
    c4a6:	b085      	sub	sp, #20
    c4a8:	4604      	mov	r4, r0
    c4aa:	460f      	mov	r7, r1
    c4ac:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    c4ae:	d364      	bcc.n	c57a <CONFIG_USB_DEVICE_VID+0x27>
	union mpsc_pbuf_generic *dropped_item = NULL;
    c4b0:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    c4b2:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    c4b4:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
    c4b8:	f04f 0320 	mov.w	r3, #32
    c4bc:	f3ef 8611 	mrs	r6, BASEPRI
    c4c0:	f383 8812 	msr	BASEPRI_MAX, r3
    c4c4:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    c4c8:	a903      	add	r1, sp, #12
    c4ca:	4620      	mov	r0, r4
    c4cc:	f7ff ff33 	bl	c336 <free_space>
		if (free_wlen >= wlen) {
    c4d0:	9903      	ldr	r1, [sp, #12]
    c4d2:	42b9      	cmp	r1, r7
    c4d4:	d321      	bcc.n	c51a <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    c4d6:	6821      	ldr	r1, [r4, #0]
			item =
    c4d8:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    c4da:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    c4de:	f022 0203 	bic.w	r2, r2, #3
    c4e2:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    c4e6:	4620      	mov	r0, r4
    c4e8:	463a      	mov	r2, r7
			item =
    c4ea:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    c4ee:	f7ff ff37 	bl	c360 <idx_inc>
		cont = false;
    c4f2:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    c4f4:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    c4f6:	f386 8811 	msr	BASEPRI, r6
    c4fa:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    c4fe:	2b00      	cmp	r3, #0
    c500:	d03d      	beq.n	c57e <CONFIG_USB_DEVICE_VID+0x2b>
    c502:	2d00      	cmp	r5, #0
    c504:	d0d8      	beq.n	c4b8 <mpsc_pbuf_alloc+0x1e>
    c506:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c50a:	2b00      	cmp	r3, #0
    c50c:	d0d4      	beq.n	c4b8 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    c50e:	4629      	mov	r1, r5
    c510:	6963      	ldr	r3, [r4, #20]
    c512:	4620      	mov	r0, r4
    c514:	4798      	blx	r3
			dropped_item = NULL;
    c516:	2500      	movs	r5, #0
    c518:	e7ce      	b.n	c4b8 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    c51a:	b128      	cbz	r0, c528 <mpsc_pbuf_alloc+0x8e>
    c51c:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    c51e:	4620      	mov	r0, r4
    c520:	f7ff ff2c 	bl	c37c <add_skip_item>
			cont = true;
    c524:	9b01      	ldr	r3, [sp, #4]
    c526:	e7e6      	b.n	c4f6 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    c528:	ea58 0309 	orrs.w	r3, r8, r9
    c52c:	d017      	beq.n	c55e <CONFIG_USB_DEVICE_VID+0xb>
			   !k_is_in_isr()) {
    c52e:	f002 fb90 	bl	ec52 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    c532:	b9a0      	cbnz	r0, c55e <CONFIG_USB_DEVICE_VID+0xb>
    c534:	f386 8811 	msr	BASEPRI, r6
    c538:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    c53c:	4642      	mov	r2, r8
    c53e:	464b      	mov	r3, r9
    c540:	4658      	mov	r0, fp
    c542:	f7fe fadd 	bl	ab00 <z_impl_k_sem_take>
	__asm__ volatile(
    c546:	f04f 0320 	mov.w	r3, #32
    c54a:	f3ef 8611 	mrs	r6, BASEPRI
    c54e:	f383 8812 	msr	BASEPRI_MAX, r3
    c552:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    c556:	fab0 f380 	clz	r3, r0
    c55a:	095b      	lsrs	r3, r3, #5
    c55c:	e7cb      	b.n	c4f6 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    c55e:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    c560:	9903      	ldr	r1, [sp, #12]
    c562:	f10d 030b 	add.w	r3, sp, #11
    c566:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c56a:	4620      	mov	r0, r4
    c56c:	f7ff ff1c 	bl	c3a8 <drop_item_locked>
			cont = dropped_item != NULL;
    c570:	1e03      	subs	r3, r0, #0
    c572:	4605      	mov	r5, r0
    c574:	bf18      	it	ne
    c576:	2301      	movne	r3, #1
    c578:	e7bd      	b.n	c4f6 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    c57a:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    c57e:	4650      	mov	r0, sl
    c580:	b005      	add	sp, #20
    c582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c586 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    c586:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    c588:	6983      	ldr	r3, [r0, #24]
{
    c58a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c58c:	4608      	mov	r0, r1
{
    c58e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c590:	4798      	blx	r3
    c592:	4602      	mov	r2, r0
    c594:	f04f 0320 	mov.w	r3, #32
    c598:	f3ef 8611 	mrs	r6, BASEPRI
    c59c:	f383 8812 	msr	BASEPRI_MAX, r3
    c5a0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    c5a4:	782b      	ldrb	r3, [r5, #0]
    c5a6:	f043 0301 	orr.w	r3, r3, #1
    c5aa:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c5ac:	6861      	ldr	r1, [r4, #4]
    c5ae:	4620      	mov	r0, r4
    c5b0:	f7ff fed6 	bl	c360 <idx_inc>
    c5b4:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
    c5b6:	f386 8811 	msr	BASEPRI, r6
    c5ba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    c5be:	bd70      	pop	{r4, r5, r6, pc}

0000c5c0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    c5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5c4:	4604      	mov	r4, r0
	__asm__ volatile(
    c5c6:	f04f 0320 	mov.w	r3, #32
    c5ca:	f3ef 8611 	mrs	r6, BASEPRI
    c5ce:	f383 8812 	msr	BASEPRI_MAX, r3
    c5d2:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    c5d6:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    c5da:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    c5dc:	bf88      	it	hi
    c5de:	6a23      	ldrhi	r3, [r4, #32]
    c5e0:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    c5e2:	b1f3      	cbz	r3, c622 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    c5e4:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    c5e6:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    c5ea:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    c5ee:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    c5f2:	d016      	beq.n	c622 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    c5f4:	2b02      	cmp	r3, #2
    c5f6:	d103      	bne.n	c600 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    c5f8:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    c5fc:	08ad      	lsrs	r5, r5, #2
    c5fe:	d115      	bne.n	c62c <mpsc_pbuf_claim+0x6c>
    c600:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    c602:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    c604:	d50f      	bpl.n	c626 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    c606:	f042 0202 	orr.w	r2, r2, #2
    c60a:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    c60e:	4640      	mov	r0, r8
    c610:	4798      	blx	r3
    c612:	4639      	mov	r1, r7
    c614:	4602      	mov	r2, r0
    c616:	4620      	mov	r0, r4
    c618:	f7ff fea2 	bl	c360 <idx_inc>
		cont = false;
    c61c:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    c61e:	60a0      	str	r0, [r4, #8]
    c620:	e011      	b.n	c646 <mpsc_pbuf_claim+0x86>
			item = NULL;
    c622:	4698      	mov	r8, r3
    c624:	e00f      	b.n	c646 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    c626:	4640      	mov	r0, r8
    c628:	4798      	blx	r3
    c62a:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    c62c:	68a1      	ldr	r1, [r4, #8]
    c62e:	462a      	mov	r2, r5
    c630:	4620      	mov	r0, r4
    c632:	f7ff fe95 	bl	c360 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    c636:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    c638:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    c63a:	462a      	mov	r2, r5
    c63c:	4620      	mov	r0, r4
    c63e:	f7ff fe8f 	bl	c360 <idx_inc>
				cont = true;
    c642:	2301      	movs	r3, #1
				buffer->rd_idx =
    c644:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    c646:	f386 8811 	msr	BASEPRI, r6
    c64a:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    c64e:	2b00      	cmp	r3, #0
    c650:	d1b9      	bne.n	c5c6 <mpsc_pbuf_claim+0x6>

	return item;
}
    c652:	4640      	mov	r0, r8
    c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c658 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    c658:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    c65a:	6983      	ldr	r3, [r0, #24]
{
    c65c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c65e:	4608      	mov	r0, r1
{
    c660:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c662:	4798      	blx	r3
    c664:	4602      	mov	r2, r0
	__asm__ volatile(
    c666:	f04f 0320 	mov.w	r3, #32
    c66a:	f3ef 8611 	mrs	r6, BASEPRI
    c66e:	f383 8812 	msr	BASEPRI_MAX, r3
    c672:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    c676:	782b      	ldrb	r3, [r5, #0]
    c678:	f36f 0300 	bfc	r3, #0, #1
    c67c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c67e:	6923      	ldr	r3, [r4, #16]
    c680:	079b      	lsls	r3, r3, #30
    c682:	d505      	bpl.n	c690 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    c684:	68e1      	ldr	r1, [r4, #12]
    c686:	69e3      	ldr	r3, [r4, #28]
    c688:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c68c:	429d      	cmp	r5, r3
    c68e:	d112      	bne.n	c6b6 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    c690:	782b      	ldrb	r3, [r5, #0]
    c692:	f36f 0341 	bfc	r3, #1, #1
    c696:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    c698:	68e1      	ldr	r1, [r4, #12]
    c69a:	4620      	mov	r0, r4
    c69c:	f7ff fe60 	bl	c360 <idx_inc>
    c6a0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    c6a2:	f386 8811 	msr	BASEPRI, r6
    c6a6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    c6aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    c6ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c6b2:	f7fe b9ff 	b.w	aab4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    c6b6:	682b      	ldr	r3, [r5, #0]
    c6b8:	f360 039f 	bfi	r3, r0, #2, #30
    c6bc:	602b      	str	r3, [r5, #0]
    c6be:	e7f0      	b.n	c6a2 <mpsc_pbuf_free+0x4a>

0000c6c0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    c6c0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c6c4:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    c6c6:	bf8a      	itet	hi
    c6c8:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    c6ca:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    c6cc:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    c6ce:	1e18      	subs	r0, r3, #0
    c6d0:	bf18      	it	ne
    c6d2:	2001      	movne	r0, #1
    c6d4:	4770      	bx	lr

0000c6d6 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    c6d6:	070b      	lsls	r3, r1, #28
    c6d8:	d504      	bpl.n	c6e4 <foldcase+0xe>
    c6da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    c6de:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    c6e0:	bf98      	it	ls
    c6e2:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    c6e4:	4770      	bx	lr

0000c6e6 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    c6e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6ea:	b087      	sub	sp, #28
    c6ec:	468a      	mov	sl, r1
    c6ee:	4614      	mov	r4, r2
    c6f0:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    c6f2:	4605      	mov	r5, r0
    c6f4:	b918      	cbnz	r0, c6fe <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    c6f6:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    c6f8:	b007      	add	sp, #28
    c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    c6fe:	2900      	cmp	r1, #0
    c700:	d0f9      	beq.n	c6f6 <fnmatchx+0x10>
    if (recursion-- == 0)
    c702:	9b02      	ldr	r3, [sp, #8]
    c704:	2b00      	cmp	r3, #0
    c706:	f000 8113 	beq.w	c930 <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    c70a:	f004 0304 	and.w	r3, r4, #4
    c70e:	460a      	mov	r2, r1
    c710:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    c712:	46a9      	mov	r9, r5
    c714:	4621      	mov	r1, r4
    c716:	f819 0b01 	ldrb.w	r0, [r9], #1
    c71a:	f7ff ffdc 	bl	c6d6 <foldcase>
    c71e:	4603      	mov	r3, r0
    c720:	b2c0      	uxtb	r0, r0
    c722:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    c724:	7817      	ldrb	r7, [r2, #0]
    c726:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
    c728:	d025      	beq.n	c776 <fnmatchx+0x90>
    c72a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c72e:	d10b      	bne.n	c748 <fnmatchx+0x62>
    c730:	b1c8      	cbz	r0, c766 <fnmatchx+0x80>
    c732:	282a      	cmp	r0, #42	; 0x2a
    c734:	d036      	beq.n	c7a4 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
    c736:	4621      	mov	r1, r4
    c738:	4638      	mov	r0, r7
    c73a:	f7ff ffcc 	bl	c6d6 <foldcase>
    c73e:	4286      	cmp	r6, r0
    c740:	f102 0201 	add.w	r2, r2, #1
    c744:	d01e      	beq.n	c784 <fnmatchx+0x9e>
    c746:	e7d6      	b.n	c6f6 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    c748:	285b      	cmp	r0, #91	; 0x5b
    c74a:	d07b      	beq.n	c844 <fnmatchx+0x15e>
    c74c:	285c      	cmp	r0, #92	; 0x5c
    c74e:	d1f2      	bne.n	c736 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    c750:	07e0      	lsls	r0, r4, #31
    c752:	d4f0      	bmi.n	c736 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    c754:	7868      	ldrb	r0, [r5, #1]
    c756:	f7ff ffbe 	bl	c6d6 <foldcase>
    c75a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c75e:	bf18      	it	ne
    c760:	f105 0902 	addne.w	r9, r5, #2
    c764:	e7e7      	b.n	c736 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    c766:	06e3      	lsls	r3, r4, #27
    c768:	d501      	bpl.n	c76e <fnmatchx+0x88>
    c76a:	2f2f      	cmp	r7, #47	; 0x2f
    c76c:	d0c4      	beq.n	c6f8 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    c76e:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    c770:	bf18      	it	ne
    c772:	2001      	movne	r0, #1
    c774:	e7c0      	b.n	c6f8 <fnmatchx+0x12>
            if (*string == EOS)
    c776:	2f00      	cmp	r7, #0
    c778:	d0bd      	beq.n	c6f6 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    c77a:	2f2f      	cmp	r7, #47	; 0x2f
    c77c:	d104      	bne.n	c788 <fnmatchx+0xa2>
    c77e:	07a6      	lsls	r6, r4, #30
    c780:	d4b9      	bmi.n	c6f6 <fnmatchx+0x10>
            ++string;
    c782:	3201      	adds	r2, #1
            break;
    c784:	464d      	mov	r5, r9
    c786:	e7c4      	b.n	c712 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    c788:	2f2e      	cmp	r7, #46	; 0x2e
    c78a:	d1fa      	bne.n	c782 <fnmatchx+0x9c>
    c78c:	9b04      	ldr	r3, [sp, #16]
    c78e:	2b00      	cmp	r3, #0
    c790:	d0f7      	beq.n	c782 <fnmatchx+0x9c>
    c792:	4552      	cmp	r2, sl
    c794:	d0af      	beq.n	c6f6 <fnmatchx+0x10>
                (string == stringstart ||
    c796:	07a5      	lsls	r5, r4, #30
    c798:	d5f3      	bpl.n	c782 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    c79a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c79e:	2b2f      	cmp	r3, #47	; 0x2f
    c7a0:	d1ef      	bne.n	c782 <fnmatchx+0x9c>
    c7a2:	e7a8      	b.n	c6f6 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    c7a4:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    c7a6:	f7ff ff96 	bl	c6d6 <foldcase>
    c7aa:	b2c1      	uxtb	r1, r0
            while (c == '*')
    c7ac:	292a      	cmp	r1, #42	; 0x2a
    c7ae:	d018      	beq.n	c7e2 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    c7b0:	2f2e      	cmp	r7, #46	; 0x2e
    c7b2:	d109      	bne.n	c7c8 <fnmatchx+0xe2>
    c7b4:	9b04      	ldr	r3, [sp, #16]
    c7b6:	b13b      	cbz	r3, c7c8 <fnmatchx+0xe2>
    c7b8:	4552      	cmp	r2, sl
    c7ba:	d09c      	beq.n	c6f6 <fnmatchx+0x10>
                (string == stringstart ||
    c7bc:	07a0      	lsls	r0, r4, #30
    c7be:	d503      	bpl.n	c7c8 <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    c7c0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c7c4:	2b2f      	cmp	r3, #47	; 0x2f
    c7c6:	d096      	beq.n	c6f6 <fnmatchx+0x10>
            if (c == EOS) {
    c7c8:	b979      	cbnz	r1, c7ea <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
    c7ca:	f014 0002 	ands.w	r0, r4, #2
    c7ce:	d093      	beq.n	c6f8 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    c7d0:	06e3      	lsls	r3, r4, #27
    c7d2:	f100 80af 	bmi.w	c934 <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
    c7d6:	212f      	movs	r1, #47	; 0x2f
    c7d8:	4610      	mov	r0, r2
    c7da:	f001 fca5 	bl	e128 <strchr>
                        0 : FNM_NOMATCH;
    c7de:	3800      	subs	r0, #0
    c7e0:	e7c6      	b.n	c770 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
    c7e2:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    c7e6:	4621      	mov	r1, r4
    c7e8:	e7dd      	b.n	c7a6 <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    c7ea:	292f      	cmp	r1, #47	; 0x2f
    c7ec:	d021      	beq.n	c832 <fnmatchx+0x14c>
    if (recursion-- == 0)
    c7ee:	9b02      	ldr	r3, [sp, #8]
    c7f0:	4616      	mov	r6, r2
    c7f2:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    c7f4:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    c7f8:	f004 0a02 	and.w	sl, r4, #2
    c7fc:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    c7fe:	4621      	mov	r1, r4
    c800:	f89b 0000 	ldrb.w	r0, [fp]
    c804:	f7ff ff67 	bl	c6d6 <foldcase>
    c808:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    c80c:	f106 0601 	add.w	r6, r6, #1
    c810:	f43f af71 	beq.w	c6f6 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    c814:	463b      	mov	r3, r7
    c816:	4642      	mov	r2, r8
    c818:	4659      	mov	r1, fp
    c81a:	4648      	mov	r0, r9
    c81c:	f7ff ff63 	bl	c6e6 <fnmatchx>
    c820:	2801      	cmp	r0, #1
    c822:	f47f af69 	bne.w	c6f8 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    c826:	2d2f      	cmp	r5, #47	; 0x2f
    c828:	d1e8      	bne.n	c7fc <fnmatchx+0x116>
    c82a:	f1ba 0f00 	cmp.w	sl, #0
    c82e:	d0e5      	beq.n	c7fc <fnmatchx+0x116>
    c830:	e761      	b.n	c6f6 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    c832:	07a7      	lsls	r7, r4, #30
    c834:	d5db      	bpl.n	c7ee <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
    c836:	4610      	mov	r0, r2
    c838:	f001 fc76 	bl	e128 <strchr>
    c83c:	4602      	mov	r2, r0
    c83e:	2800      	cmp	r0, #0
    c840:	d1a0      	bne.n	c784 <fnmatchx+0x9e>
    c842:	e758      	b.n	c6f6 <fnmatchx+0x10>
            if (*string == EOS)
    c844:	2f00      	cmp	r7, #0
    c846:	f43f af56 	beq.w	c6f6 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    c84a:	2f2f      	cmp	r7, #47	; 0x2f
    c84c:	d102      	bne.n	c854 <fnmatchx+0x16e>
    c84e:	07a6      	lsls	r6, r4, #30
    c850:	f53f af51 	bmi.w	c6f6 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    c854:	4621      	mov	r1, r4
    c856:	4638      	mov	r0, r7
    c858:	f7ff ff3d 	bl	c6d6 <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c85c:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
    c85e:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c860:	2b21      	cmp	r3, #33	; 0x21
    c862:	d001      	beq.n	c868 <fnmatchx+0x182>
    c864:	2b5e      	cmp	r3, #94	; 0x5e
    c866:	d123      	bne.n	c8b0 <fnmatchx+0x1ca>
        ++pattern;
    c868:	3502      	adds	r5, #2
    c86a:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c86c:	9301      	str	r3, [sp, #4]
    need = 1;
    c86e:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    c870:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    c874:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    c878:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    c87a:	462e      	mov	r6, r5
    c87c:	4621      	mov	r1, r4
    c87e:	f816 0b01 	ldrb.w	r0, [r6], #1
    c882:	9305      	str	r3, [sp, #20]
    c884:	f7ff ff27 	bl	c6d6 <foldcase>
    c888:	fa5f f880 	uxtb.w	r8, r0
    c88c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    c890:	9b05      	ldr	r3, [sp, #20]
    c892:	d110      	bne.n	c8b6 <fnmatchx+0x1d0>
    c894:	bb0b      	cbnz	r3, c8da <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
    c896:	9b01      	ldr	r3, [sp, #4]
    c898:	455b      	cmp	r3, fp
    c89a:	f43f af2c 	beq.w	c6f6 <fnmatchx+0x10>
            if (r == (void *)-1) {
    c89e:	1c73      	adds	r3, r6, #1
    c8a0:	d103      	bne.n	c8aa <fnmatchx+0x1c4>
                if (*string != '[')
    c8a2:	2f5b      	cmp	r7, #91	; 0x5b
    c8a4:	f47f af27 	bne.w	c6f6 <fnmatchx+0x10>
    c8a8:	464e      	mov	r6, r9
            ++string;
    c8aa:	3201      	adds	r2, #1
            break;
    c8ac:	46b1      	mov	r9, r6
    c8ae:	e769      	b.n	c784 <fnmatchx+0x9e>
    c8b0:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c8b2:	2300      	movs	r3, #0
    c8b4:	e7da      	b.n	c86c <fnmatchx+0x186>
        if (c == '/')
    c8b6:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
    c8ba:	d0f2      	beq.n	c8a2 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    c8bc:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
    c8c0:	d107      	bne.n	c8d2 <fnmatchx+0x1ec>
    c8c2:	9b03      	ldr	r3, [sp, #12]
    c8c4:	b94b      	cbnz	r3, c8da <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
    c8c6:	7868      	ldrb	r0, [r5, #1]
    c8c8:	f7ff ff05 	bl	c6d6 <foldcase>
    c8cc:	1cae      	adds	r6, r5, #2
    c8ce:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
    c8d2:	f1b8 0f00 	cmp.w	r8, #0
    c8d6:	f43f af0e 	beq.w	c6f6 <fnmatchx+0x10>
        if (*pattern == '-' 
    c8da:	7833      	ldrb	r3, [r6, #0]
    c8dc:	2b2d      	cmp	r3, #45	; 0x2d
    c8de:	d120      	bne.n	c922 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    c8e0:	7870      	ldrb	r0, [r6, #1]
    c8e2:	4621      	mov	r1, r4
    c8e4:	f7ff fef7 	bl	c6d6 <foldcase>
    c8e8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    c8ec:	d019      	beq.n	c922 <fnmatchx+0x23c>
    c8ee:	285d      	cmp	r0, #93	; 0x5d
    c8f0:	d017      	beq.n	c922 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    c8f2:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    c8f4:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    c8f8:	d10a      	bne.n	c910 <fnmatchx+0x22a>
    c8fa:	9b03      	ldr	r3, [sp, #12]
    c8fc:	b943      	cbnz	r3, c910 <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
    c8fe:	78b0      	ldrb	r0, [r6, #2]
    c900:	f7ff fee9 	bl	c6d6 <foldcase>
            if (c2 == EOS)
    c904:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    c908:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    c90c:	f43f aef3 	beq.w	c6f6 <fnmatchx+0x10>
            if (c <= test && test <= c2)
    c910:	9b00      	ldr	r3, [sp, #0]
    c912:	4543      	cmp	r3, r8
    c914:	db03      	blt.n	c91e <fnmatchx+0x238>
                ok = 1;
    c916:	4283      	cmp	r3, r0
    c918:	bfd8      	it	le
    c91a:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    c91e:	2300      	movs	r3, #0
    c920:	e7ab      	b.n	c87a <fnmatchx+0x194>
        } else if (c == test)
    c922:	9b00      	ldr	r3, [sp, #0]
    c924:	4635      	mov	r5, r6
    c926:	4543      	cmp	r3, r8
    c928:	bf08      	it	eq
    c92a:	f04f 0b01 	moveq.w	fp, #1
    c92e:	e7f6      	b.n	c91e <fnmatchx+0x238>
        return FNM_NORES;
    c930:	2003      	movs	r0, #3
    c932:	e6e1      	b.n	c6f8 <fnmatchx+0x12>
                return 0;
    c934:	4608      	mov	r0, r1
    c936:	e6df      	b.n	c6f8 <fnmatchx+0x12>

0000c938 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    c938:	2340      	movs	r3, #64	; 0x40
    c93a:	f7ff bed4 	b.w	c6e6 <fnmatchx>

0000c93e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c93e:	4770      	bx	lr

0000c940 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    c940:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    c942:	075b      	lsls	r3, r3, #29
    c944:	d40b      	bmi.n	c95e <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c946:	6803      	ldr	r3, [r0, #0]
    c948:	8840      	ldrh	r0, [r0, #2]
    c94a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    c94e:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    c952:	4418      	add	r0, r3
    c954:	3013      	adds	r0, #19
    c956:	f020 0007 	bic.w	r0, r0, #7
    c95a:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    c95c:	4770      	bx	lr
	return 0;
    c95e:	2000      	movs	r0, #0
}
    c960:	4770      	bx	lr

0000c962 <default_get_timestamp>:
    c962:	f001 bfab 	b.w	e8bc <sys_clock_cycle_get_32>

0000c966 <dummy_timestamp>:
    c966:	2000      	movs	r0, #0
    c968:	4770      	bx	lr

0000c96a <z_log_vprintk>:
{
    c96a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    c96c:	2300      	movs	r3, #0
    c96e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    c972:	9300      	str	r3, [sp, #0]
    c974:	461a      	mov	r2, r3
    c976:	4619      	mov	r1, r3
    c978:	4618      	mov	r0, r3
    c97a:	f7f5 f933 	bl	1be4 <z_impl_z_log_msg2_runtime_vcreate>
}
    c97e:	b005      	add	sp, #20
    c980:	f85d fb04 	ldr.w	pc, [sp], #4

0000c984 <notify_drop>:
	z_log_dropped(true);
    c984:	2001      	movs	r0, #1
    c986:	f7f4 bce5 	b.w	1354 <z_log_dropped>

0000c98a <get_msg>:
{
    c98a:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    c98c:	f7f4 fd58 	bl	1440 <z_log_msg2_claim>
}
    c990:	bd08      	pop	{r3, pc}

0000c992 <z_log_get_tag>:
}
    c992:	2000      	movs	r0, #0
    c994:	4770      	bx	lr

0000c996 <log_backend_disable>:
	backend->cb->active = false;
    c996:	6843      	ldr	r3, [r0, #4]
    c998:	2100      	movs	r1, #0
    c99a:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
    c99c:	f7f4 bee2 	b.w	1764 <backend_filter_set>

0000c9a0 <buffer_write>:
{
    c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9a2:	4606      	mov	r6, r0
    c9a4:	460d      	mov	r5, r1
    c9a6:	4614      	mov	r4, r2
    c9a8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    c9aa:	4621      	mov	r1, r4
    c9ac:	4628      	mov	r0, r5
    c9ae:	463a      	mov	r2, r7
    c9b0:	47b0      	blx	r6
	} while (len != 0);
    c9b2:	1a24      	subs	r4, r4, r0
		buf += processed;
    c9b4:	4405      	add	r5, r0
	} while (len != 0);
    c9b6:	d1f8      	bne.n	c9aa <buffer_write+0xa>
}
    c9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c9ba <log_output_flush>:
		     output->control_block->offset,
    c9ba:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c9bc:	6881      	ldr	r1, [r0, #8]
{
    c9be:	b510      	push	{r4, lr}
    c9c0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    c9c2:	e9d2 2300 	ldrd	r2, r3, [r2]
    c9c6:	6800      	ldr	r0, [r0, #0]
    c9c8:	f7ff ffea 	bl	c9a0 <buffer_write>
	output->control_block->offset = 0;
    c9cc:	6863      	ldr	r3, [r4, #4]
    c9ce:	2200      	movs	r2, #0
    c9d0:	601a      	str	r2, [r3, #0]
}
    c9d2:	bd10      	pop	{r4, pc}

0000c9d4 <out_func>:
{
    c9d4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    c9d6:	684b      	ldr	r3, [r1, #4]
    c9d8:	681a      	ldr	r2, [r3, #0]
    c9da:	68cb      	ldr	r3, [r1, #12]
    c9dc:	429a      	cmp	r2, r3
{
    c9de:	4605      	mov	r5, r0
    c9e0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    c9e2:	d102      	bne.n	c9ea <out_func+0x16>
		log_output_flush(out_ctx);
    c9e4:	4608      	mov	r0, r1
    c9e6:	f7ff ffe8 	bl	c9ba <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c9ea:	6863      	ldr	r3, [r4, #4]
    c9ec:	f3bf 8f5b 	dmb	ish
    c9f0:	e853 2f00 	ldrex	r2, [r3]
    c9f4:	1c51      	adds	r1, r2, #1
    c9f6:	e843 1000 	strex	r0, r1, [r3]
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d1f8      	bne.n	c9f0 <out_func+0x1c>
    c9fe:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    ca02:	68a3      	ldr	r3, [r4, #8]
    ca04:	549d      	strb	r5, [r3, r2]
}
    ca06:	2000      	movs	r0, #0
    ca08:	bd38      	pop	{r3, r4, r5, pc}

0000ca0a <cr_out_func>:
{
    ca0a:	b538      	push	{r3, r4, r5, lr}
    ca0c:	4605      	mov	r5, r0
    ca0e:	460c      	mov	r4, r1
	out_func(c, ctx);
    ca10:	f7ff ffe0 	bl	c9d4 <out_func>
	if (c == '\n') {
    ca14:	2d0a      	cmp	r5, #10
    ca16:	d103      	bne.n	ca20 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    ca18:	4621      	mov	r1, r4
    ca1a:	200d      	movs	r0, #13
    ca1c:	f7ff ffda 	bl	c9d4 <out_func>
}
    ca20:	2000      	movs	r0, #0
    ca22:	bd38      	pop	{r3, r4, r5, pc}

0000ca24 <z_log_msg2_finalize>:
{
    ca24:	b570      	push	{r4, r5, r6, lr}
    ca26:	460e      	mov	r6, r1
    ca28:	4615      	mov	r5, r2
    ca2a:	4619      	mov	r1, r3
	if (!msg) {
    ca2c:	4604      	mov	r4, r0
    ca2e:	b918      	cbnz	r0, ca38 <z_log_msg2_finalize+0x14>
}
    ca30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    ca34:	f7f4 bc8e 	b.w	1354 <z_log_dropped>
	if (data) {
    ca38:	b143      	cbz	r3, ca4c <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    ca3a:	f100 030c 	add.w	r3, r0, #12
    ca3e:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    ca42:	4418      	add	r0, r3
    ca44:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    ca48:	f001 fbd2 	bl	e1f0 <memcpy>
	msg->hdr.source = source;
    ca4c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    ca50:	4620      	mov	r0, r4
}
    ca52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    ca56:	f7f4 bdd1 	b.w	15fc <z_log_msg2_commit>

0000ca5a <z_impl_z_log_msg2_static_create>:
{
    ca5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    ca5e:	f3c1 2949 	ubfx	r9, r1, #9, #10
    ca62:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    ca66:	444c      	add	r4, r9
    ca68:	3413      	adds	r4, #19
    ca6a:	f024 0407 	bic.w	r4, r4, #7
    ca6e:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    ca70:	08a0      	lsrs	r0, r4, #2
{
    ca72:	460d      	mov	r5, r1
    ca74:	4690      	mov	r8, r2
    ca76:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    ca78:	f7f4 fcda 	bl	1430 <z_log_msg2_alloc>
	if (msg) {
    ca7c:	4604      	mov	r4, r0
    ca7e:	b120      	cbz	r0, ca8a <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
    ca80:	464a      	mov	r2, r9
    ca82:	4641      	mov	r1, r8
    ca84:	300c      	adds	r0, #12
    ca86:	f001 fbb3 	bl	e1f0 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
    ca8a:	463b      	mov	r3, r7
    ca8c:	462a      	mov	r2, r5
    ca8e:	4631      	mov	r1, r6
    ca90:	4620      	mov	r0, r4
}
    ca92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    ca96:	f7ff bfc5 	b.w	ca24 <z_log_msg2_finalize>

0000ca9a <log_halt>:
    ca9a:	684b      	ldr	r3, [r1, #4]
    ca9c:	2000      	movs	r0, #0
    ca9e:	7158      	strb	r0, [r3, #5]
}
    caa0:	4770      	bx	lr

0000caa2 <log_go>:
	backend->cb->active = true;
    caa2:	684b      	ldr	r3, [r1, #4]
    caa4:	2201      	movs	r2, #1
    caa6:	715a      	strb	r2, [r3, #5]
}
    caa8:	2000      	movs	r0, #0
    caaa:	4770      	bx	lr

0000caac <cmd_log_self_status>:
{
    caac:	b570      	push	{r4, r5, r6, lr}
    caae:	4604      	mov	r4, r0
    cab0:	460d      	mov	r5, r1
    cab2:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    cab4:	f7f5 fa24 	bl	1f00 <shell_state_precheck>
    cab8:	b130      	cbz	r0, cac8 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    caba:	69e1      	ldr	r1, [r4, #28]
    cabc:	4633      	mov	r3, r6
    cabe:	6809      	ldr	r1, [r1, #0]
    cac0:	462a      	mov	r2, r5
    cac2:	4620      	mov	r0, r4
    cac4:	f7f5 f954 	bl	1d70 <log_status>
}
    cac8:	2000      	movs	r0, #0
    caca:	bd70      	pop	{r4, r5, r6, pc}

0000cacc <cmd_log_self_enable>:
{
    cacc:	b570      	push	{r4, r5, r6, lr}
    cace:	4604      	mov	r4, r0
    cad0:	460d      	mov	r5, r1
    cad2:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    cad4:	f7f5 fa14 	bl	1f00 <shell_state_precheck>
    cad8:	b140      	cbz	r0, caec <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    cada:	69e1      	ldr	r1, [r4, #28]
    cadc:	4633      	mov	r3, r6
    cade:	462a      	mov	r2, r5
    cae0:	4620      	mov	r0, r4
    cae2:	6809      	ldr	r1, [r1, #0]
}
    cae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    cae8:	f7f5 ba82 	b.w	1ff0 <log_enable>
}
    caec:	bd70      	pop	{r4, r5, r6, pc}

0000caee <log_disable>:
{
    caee:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    caf0:	2400      	movs	r4, #0
    caf2:	9400      	str	r4, [sp, #0]
    caf4:	3304      	adds	r3, #4
    caf6:	3a01      	subs	r2, #1
    caf8:	f7f5 fa12 	bl	1f20 <filters_set>
}
    cafc:	4620      	mov	r0, r4
    cafe:	b002      	add	sp, #8
    cb00:	bd10      	pop	{r4, pc}

0000cb02 <cmd_log_self_disable>:
{
    cb02:	b570      	push	{r4, r5, r6, lr}
    cb04:	4604      	mov	r4, r0
    cb06:	460d      	mov	r5, r1
    cb08:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    cb0a:	f7f5 f9f9 	bl	1f00 <shell_state_precheck>
    cb0e:	b140      	cbz	r0, cb22 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    cb10:	69e1      	ldr	r1, [r4, #28]
    cb12:	4633      	mov	r3, r6
    cb14:	462a      	mov	r2, r5
    cb16:	4620      	mov	r0, r4
    cb18:	6809      	ldr	r1, [r1, #0]
}
    cb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    cb1e:	f7ff bfe6 	b.w	caee <log_disable>
}
    cb22:	bd70      	pop	{r4, r5, r6, pc}

0000cb24 <cmd_log_self_go>:
{
    cb24:	b510      	push	{r4, lr}
    cb26:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    cb28:	f7f5 f9ea 	bl	1f00 <shell_state_precheck>
    cb2c:	b120      	cbz	r0, cb38 <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
    cb2e:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    cb30:	681b      	ldr	r3, [r3, #0]
    cb32:	685b      	ldr	r3, [r3, #4]
    cb34:	2201      	movs	r2, #1
    cb36:	715a      	strb	r2, [r3, #5]
}
    cb38:	2000      	movs	r0, #0
    cb3a:	bd10      	pop	{r4, pc}

0000cb3c <cmd_log_self_halt>:
{
    cb3c:	b510      	push	{r4, lr}
    cb3e:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    cb40:	f7f5 f9de 	bl	1f00 <shell_state_precheck>
    cb44:	b120      	cbz	r0, cb50 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    cb46:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
    cb48:	681b      	ldr	r3, [r3, #0]
    cb4a:	685b      	ldr	r3, [r3, #4]
    cb4c:	2200      	movs	r2, #0
    cb4e:	715a      	strb	r2, [r3, #5]
}
    cb50:	2000      	movs	r0, #0
    cb52:	bd10      	pop	{r4, pc}

0000cb54 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    cb54:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    cb56:	075b      	lsls	r3, r3, #29
    cb58:	d40b      	bmi.n	cb72 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    cb5a:	6803      	ldr	r3, [r0, #0]
    cb5c:	8840      	ldrh	r0, [r0, #2]
    cb5e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    cb62:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    cb66:	4418      	add	r0, r3
    cb68:	3013      	adds	r0, #19
    cb6a:	f020 0007 	bic.w	r0, r0, #7
    cb6e:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    cb70:	4770      	bx	lr
	return 0;
    cb72:	2000      	movs	r0, #0
}
    cb74:	4770      	bx	lr

0000cb76 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    cb76:	6883      	ldr	r3, [r0, #8]
    cb78:	6a1b      	ldr	r3, [r3, #32]
    cb7a:	b103      	cbz	r3, cb7e <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    cb7c:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    cb7e:	4770      	bx	lr

0000cb80 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
    cb80:	6843      	ldr	r3, [r0, #4]
    cb82:	681b      	ldr	r3, [r3, #0]
{
    cb84:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    cb86:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
    cb88:	4620      	mov	r0, r4
    cb8a:	f7ff fff4 	bl	cb76 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    cb8e:	68a3      	ldr	r3, [r4, #8]
    cb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cb92:	b10b      	cbz	r3, cb98 <uninit+0x18>
		api->irq_rx_disable(dev);
    cb94:	4620      	mov	r0, r4
    cb96:	4798      	blx	r3
}
    cb98:	2000      	movs	r0, #0
    cb9a:	bd10      	pop	{r4, pc}

0000cb9c <enable>:
{
    cb9c:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    cb9e:	6843      	ldr	r3, [r0, #4]
    cba0:	681b      	ldr	r3, [r3, #0]
    cba2:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    cba4:	b111      	cbz	r1, cbac <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    cba6:	6818      	ldr	r0, [r3, #0]
    cba8:	f7ff ffe5 	bl	cb76 <uart_irq_tx_disable>
}
    cbac:	2000      	movs	r0, #0
    cbae:	bd08      	pop	{r3, pc}

0000cbb0 <read>:
{
    cbb0:	b510      	push	{r4, lr}
    cbb2:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    cbb4:	6843      	ldr	r3, [r0, #4]
    cbb6:	68d8      	ldr	r0, [r3, #12]
    cbb8:	f7ff fb9d 	bl	c2f6 <ring_buf_get>
    cbbc:	6020      	str	r0, [r4, #0]
}
    cbbe:	2000      	movs	r0, #0
    cbc0:	bd10      	pop	{r4, pc}

0000cbc2 <write>:
{
    cbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    cbc6:	6845      	ldr	r5, [r0, #4]
{
    cbc8:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    cbca:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    cbcc:	7c1b      	ldrb	r3, [r3, #16]
{
    cbce:	460c      	mov	r4, r1
    cbd0:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    cbd2:	b153      	cbz	r3, cbea <write+0x28>
    cbd4:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    cbd8:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    cbda:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
    cbdc:	d120      	bne.n	cc20 <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    cbde:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
    cbe2:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    cbe4:	2001      	movs	r0, #1
    cbe6:	4790      	blx	r2
    cbe8:	e017      	b.n	cc1a <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    cbea:	68a8      	ldr	r0, [r5, #8]
    cbec:	f7ff fb1b 	bl	c226 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cbf0:	682b      	ldr	r3, [r5, #0]
    cbf2:	6030      	str	r0, [r6, #0]
    cbf4:	330c      	adds	r3, #12
    cbf6:	2101      	movs	r1, #1
    cbf8:	f3bf 8f5b 	dmb	ish
    cbfc:	e853 2f00 	ldrex	r2, [r3]
    cc00:	e843 1000 	strex	r0, r1, [r3]
    cc04:	2800      	cmp	r0, #0
    cc06:	d1f9      	bne.n	cbfc <write+0x3a>
    cc08:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    cc0c:	b92a      	cbnz	r2, cc1a <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    cc0e:	682b      	ldr	r3, [r5, #0]
    cc10:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    cc12:	6883      	ldr	r3, [r0, #8]
    cc14:	69db      	ldr	r3, [r3, #28]
    cc16:	b103      	cbz	r3, cc1a <write+0x58>
		api->irq_tx_enable(dev);
    cc18:	4798      	blx	r3
}
    cc1a:	2000      	movs	r0, #0
    cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    cc20:	6818      	ldr	r0, [r3, #0]
    cc22:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    cc26:	6883      	ldr	r3, [r0, #8]
    cc28:	685b      	ldr	r3, [r3, #4]
    cc2a:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    cc2c:	e7d4      	b.n	cbd8 <write+0x16>

0000cc2e <atomic_or>:
{
    cc2e:	4603      	mov	r3, r0
}
    cc30:	f3bf 8f5b 	dmb	ish
    cc34:	e853 0f00 	ldrex	r0, [r3]
    cc38:	ea40 0201 	orr.w	r2, r0, r1
    cc3c:	e843 2c00 	strex	ip, r2, [r3]
    cc40:	f1bc 0f00 	cmp.w	ip, #0
    cc44:	d1f6      	bne.n	cc34 <atomic_or+0x6>
    cc46:	f3bf 8f5b 	dmb	ish
    cc4a:	4770      	bx	lr

0000cc4c <atomic_and>:
{
    cc4c:	4603      	mov	r3, r0
}
    cc4e:	f3bf 8f5b 	dmb	ish
    cc52:	e853 0f00 	ldrex	r0, [r3]
    cc56:	ea00 0201 	and.w	r2, r0, r1
    cc5a:	e843 2c00 	strex	ip, r2, [r3]
    cc5e:	f1bc 0f00 	cmp.w	ip, #0
    cc62:	d1f6      	bne.n	cc52 <atomic_and+0x6>
    cc64:	f3bf 8f5b 	dmb	ish
    cc68:	4770      	bx	lr

0000cc6a <shell_signal_handle>:
{
    cc6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    cc6c:	6885      	ldr	r5, [r0, #8]
    cc6e:	0109      	lsls	r1, r1, #4
    cc70:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    cc74:	4604      	mov	r4, r0
    cc76:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    cc78:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    cc7a:	aa01      	add	r2, sp, #4
    cc7c:	4669      	mov	r1, sp
    cc7e:	4628      	mov	r0, r5
    cc80:	f002 fc01 	bl	f486 <z_impl_k_poll_signal_check>
	if (set) {
    cc84:	9b00      	ldr	r3, [sp, #0]
    cc86:	b123      	cbz	r3, cc92 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    cc88:	4628      	mov	r0, r5
    cc8a:	f002 fbf9 	bl	f480 <z_impl_k_poll_signal_reset>
		handler(shell);
    cc8e:	4620      	mov	r0, r4
    cc90:	47b0      	blx	r6
}
    cc92:	b002      	add	sp, #8
    cc94:	bd70      	pop	{r4, r5, r6, pc}

0000cc96 <z_shell_strlen>:
{
    cc96:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    cc98:	b110      	cbz	r0, cca0 <z_shell_strlen+0xa>
    cc9a:	f001 fa53 	bl	e144 <strlen>
    cc9e:	b280      	uxth	r0, r0
}
    cca0:	bd08      	pop	{r3, pc}

0000cca2 <z_shell_raw_fprintf>:
{
    cca2:	b40e      	push	{r1, r2, r3}
    cca4:	b503      	push	{r0, r1, lr}
    cca6:	aa03      	add	r2, sp, #12
    cca8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    ccac:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    ccae:	f7f6 fc89 	bl	35c4 <z_shell_fprintf_fmt>
}
    ccb2:	b002      	add	sp, #8
    ccb4:	f85d eb04 	ldr.w	lr, [sp], #4
    ccb8:	b003      	add	sp, #12
    ccba:	4770      	bx	lr

0000ccbc <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    ccbc:	f7fd be0a 	b.w	a8d4 <z_impl_k_mutex_lock>

0000ccc0 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    ccc0:	688b      	ldr	r3, [r1, #8]
    ccc2:	b920      	cbnz	r0, ccce <transport_evt_handler+0xe>
    ccc4:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    ccc8:	2100      	movs	r1, #0
    ccca:	f7fe be15 	b.w	b8f8 <z_impl_k_poll_signal_raise>
    ccce:	f503 7026 	add.w	r0, r3, #664	; 0x298
    ccd2:	e7f9      	b.n	ccc8 <transport_evt_handler+0x8>

0000ccd4 <kill_handler>:
{
    ccd4:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    ccd6:	6883      	ldr	r3, [r0, #8]
    ccd8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
    ccdc:	07db      	lsls	r3, r3, #31
{
    ccde:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    cce0:	d41d      	bmi.n	cd1e <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
    cce2:	69c0      	ldr	r0, [r0, #28]
    cce4:	f000 fd6f 	bl	d7c6 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    cce8:	6860      	ldr	r0, [r4, #4]
    ccea:	6803      	ldr	r3, [r0, #0]
    ccec:	685b      	ldr	r3, [r3, #4]
    ccee:	4798      	blx	r3
	if (err != 0) {
    ccf0:	4605      	mov	r5, r0
    ccf2:	b920      	cbnz	r0, ccfe <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
    ccf4:	68e0      	ldr	r0, [r4, #12]
    ccf6:	f000 ff0f 	bl	db18 <z_shell_history_purge>
	shell->ctx->state = state;
    ccfa:	68a3      	ldr	r3, [r4, #8]
    ccfc:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    ccfe:	68a3      	ldr	r3, [r4, #8]
    cd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    cd02:	b113      	cbz	r3, cd0a <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
    cd04:	4629      	mov	r1, r5
    cd06:	4620      	mov	r0, r4
    cd08:	4798      	blx	r3
	shell->ctx->tid = NULL;
    cd0a:	68a3      	ldr	r3, [r4, #8]
    cd0c:	2200      	movs	r2, #0
    cd0e:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    cd12:	f7fe fb2b 	bl	b36c <z_impl_z_current_get>
}
    cd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    cd1a:	f7f9 ba83 	b.w	6224 <z_impl_k_thread_abort>
		return -EBUSY;
    cd1e:	f06f 050f 	mvn.w	r5, #15
    cd22:	e7ec      	b.n	ccfe <kill_handler+0x2a>

0000cd24 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    cd24:	f500 7019 	add.w	r0, r0, #612	; 0x264
    cd28:	b111      	cbz	r1, cd30 <z_flag_history_exit_set.isra.0+0xc>
    cd2a:	2104      	movs	r1, #4
    cd2c:	f7ff bf7f 	b.w	cc2e <atomic_or>
    cd30:	f06f 0104 	mvn.w	r1, #4
    cd34:	f7ff bf8a 	b.w	cc4c <atomic_and>

0000cd38 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    cd38:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    cd3a:	f500 7018 	add.w	r0, r0, #608	; 0x260
    cd3e:	b129      	cbz	r1, cd4c <z_flag_insert_mode_set.isra.0+0x14>
    cd40:	2101      	movs	r1, #1
    cd42:	f7ff ff74 	bl	cc2e <atomic_or>
}
    cd46:	f000 0001 	and.w	r0, r0, #1
    cd4a:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    cd4c:	f06f 0101 	mvn.w	r1, #1
    cd50:	f7ff ff7c 	bl	cc4c <atomic_and>
    cd54:	e7f7      	b.n	cd46 <z_flag_insert_mode_set.isra.0+0xe>

0000cd56 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    cd56:	f7fd be35 	b.w	a9c4 <z_impl_k_mutex_unlock>

0000cd5a <shell_log_process>:
{
    cd5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
    cd5c:	2300      	movs	r3, #0
{
    cd5e:	4604      	mov	r4, r0
	int signaled = 0;
    cd60:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
    cd62:	4620      	mov	r0, r4
    cd64:	f000 fb5f 	bl	d426 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
    cd68:	69e0      	ldr	r0, [r4, #28]
    cd6a:	f000 fd6d 	bl	d848 <z_shell_log_backend_process>
    cd6e:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
    cd70:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
    cd72:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
    cd74:	f7f6 fdb0 	bl	38d8 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
    cd78:	68a3      	ldr	r3, [r4, #8]
    cd7a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
    cd7c:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
    cd80:	b123      	cbz	r3, cd8c <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
    cd82:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    cd86:	2100      	movs	r1, #0
    cd88:	f7fe fad6 	bl	b338 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
    cd8c:	aa01      	add	r2, sp, #4
    cd8e:	4669      	mov	r1, sp
    cd90:	4630      	mov	r0, r6
    cd92:	f002 fb78 	bl	f486 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
    cd96:	b115      	cbz	r5, cd9e <shell_log_process+0x44>
    cd98:	9b00      	ldr	r3, [sp, #0]
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	d0e1      	beq.n	cd62 <shell_log_process+0x8>
}
    cd9e:	b002      	add	sp, #8
    cda0:	bd70      	pop	{r4, r5, r6, pc}

0000cda2 <shell_vfprintf>:
{
    cda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cda4:	4604      	mov	r4, r0
	return shell->ctx->state;
    cda6:	6880      	ldr	r0, [r0, #8]
{
    cda8:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    cdaa:	7903      	ldrb	r3, [r0, #4]
    cdac:	2b02      	cmp	r3, #2
{
    cdae:	460d      	mov	r5, r1
    cdb0:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    cdb2:	d007      	beq.n	cdc4 <shell_vfprintf+0x22>
}
    cdb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    cdb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    cdbc:	f500 7019 	add.w	r0, r0, #612	; 0x264
    cdc0:	f7ff bf35 	b.w	cc2e <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    cdc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cdc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdcc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    cdd0:	f7ff ff74 	bl	ccbc <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    cdd4:	68a3      	ldr	r3, [r4, #8]
    cdd6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    cdda:	0511      	lsls	r1, r2, #20
    cddc:	d404      	bmi.n	cde8 <shell_vfprintf+0x46>
    cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cde0:	b913      	cbnz	r3, cde8 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    cde2:	4620      	mov	r0, r4
    cde4:	f000 fb1f 	bl	d426 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    cde8:	463b      	mov	r3, r7
    cdea:	4632      	mov	r2, r6
    cdec:	4629      	mov	r1, r5
    cdee:	4620      	mov	r0, r4
    cdf0:	f000 fb7a 	bl	d4e8 <z_shell_vfprintf>
    cdf4:	68a3      	ldr	r3, [r4, #8]
    cdf6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    cdfa:	0512      	lsls	r2, r2, #20
    cdfc:	d404      	bmi.n	ce08 <shell_vfprintf+0x66>
    cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ce00:	b913      	cbnz	r3, ce08 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    ce02:	4620      	mov	r0, r4
    ce04:	f7f6 fd68 	bl	38d8 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    ce08:	6960      	ldr	r0, [r4, #20]
    ce0a:	f000 f817 	bl	ce3c <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    ce0e:	68a0      	ldr	r0, [r4, #8]
}
    ce10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    ce14:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    ce18:	f7ff bf9d 	b.w	cd56 <k_mutex_unlock.isra.0>

0000ce1c <shell_fprintf>:
{
    ce1c:	b40c      	push	{r2, r3}
    ce1e:	b507      	push	{r0, r1, r2, lr}
    ce20:	ab04      	add	r3, sp, #16
    ce22:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    ce26:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    ce28:	f7ff ffbb 	bl	cda2 <shell_vfprintf>
}
    ce2c:	b003      	add	sp, #12
    ce2e:	f85d eb04 	ldr.w	lr, [sp], #4
    ce32:	b002      	add	sp, #8
    ce34:	4770      	bx	lr

0000ce36 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    ce36:	6883      	ldr	r3, [r0, #8]
    ce38:	6399      	str	r1, [r3, #56]	; 0x38
}
    ce3a:	4770      	bx	lr

0000ce3c <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    ce3c:	6902      	ldr	r2, [r0, #16]
    ce3e:	6883      	ldr	r3, [r0, #8]
    ce40:	6812      	ldr	r2, [r2, #0]
    ce42:	6801      	ldr	r1, [r0, #0]
{
    ce44:	b510      	push	{r4, lr}
    ce46:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    ce48:	68c0      	ldr	r0, [r0, #12]
    ce4a:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    ce4c:	6923      	ldr	r3, [r4, #16]
    ce4e:	2200      	movs	r2, #0
    ce50:	601a      	str	r2, [r3, #0]
}
    ce52:	bd10      	pop	{r4, pc}

0000ce54 <out_func>:
{
    ce54:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    ce56:	68cb      	ldr	r3, [r1, #12]
    ce58:	7c1b      	ldrb	r3, [r3, #16]
    ce5a:	2b02      	cmp	r3, #2
{
    ce5c:	4605      	mov	r5, r0
    ce5e:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    ce60:	d104      	bne.n	ce6c <out_func+0x18>
    ce62:	280a      	cmp	r0, #10
    ce64:	d102      	bne.n	ce6c <out_func+0x18>
		(void)out_func('\r', ctx);
    ce66:	200d      	movs	r0, #13
    ce68:	f7ff fff4 	bl	ce54 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    ce6c:	6923      	ldr	r3, [r4, #16]
    ce6e:	6822      	ldr	r2, [r4, #0]
    ce70:	681b      	ldr	r3, [r3, #0]
    ce72:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    ce74:	6922      	ldr	r2, [r4, #16]
    ce76:	6813      	ldr	r3, [r2, #0]
    ce78:	3301      	adds	r3, #1
    ce7a:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    ce7c:	6862      	ldr	r2, [r4, #4]
    ce7e:	4293      	cmp	r3, r2
    ce80:	d102      	bne.n	ce88 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    ce82:	4620      	mov	r0, r4
    ce84:	f7ff ffda 	bl	ce3c <z_shell_fprintf_buffer_flush>
}
    ce88:	2000      	movs	r0, #0
    ce8a:	bd38      	pop	{r3, r4, r5, pc}

0000ce8c <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    ce8c:	2820      	cmp	r0, #32
    ce8e:	d005      	beq.n	ce9c <isspace+0x10>
    ce90:	3809      	subs	r0, #9
    ce92:	2804      	cmp	r0, #4
    ce94:	bf8c      	ite	hi
    ce96:	2000      	movhi	r0, #0
    ce98:	2001      	movls	r0, #1
    ce9a:	4770      	bx	lr
    ce9c:	2001      	movs	r0, #1
}
    ce9e:	4770      	bx	lr

0000cea0 <z_shell_strlen>:
{
    cea0:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    cea2:	b110      	cbz	r0, ceaa <z_shell_strlen+0xa>
    cea4:	f001 f94e 	bl	e144 <strlen>
    cea8:	b280      	uxth	r0, r0
}
    ceaa:	bd08      	pop	{r3, pc}

0000ceac <z_column_span_with_buffer_offsets_get>:
{
    ceac:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    ceae:	7b03      	ldrb	r3, [r0, #12]
    ceb0:	8940      	ldrh	r0, [r0, #10]
    ceb2:	441a      	add	r2, r3
    ceb4:	4419      	add	r1, r3
    ceb6:	fbb2 f4f0 	udiv	r4, r2, r0
    ceba:	fbb1 f3f0 	udiv	r3, r1, r0
    cebe:	fb00 2214 	mls	r2, r0, r4, r2
    cec2:	fb00 1013 	mls	r0, r0, r3, r1
}
    cec6:	1a10      	subs	r0, r2, r0
    cec8:	bd10      	pop	{r4, pc}

0000ceca <z_row_span_with_buffer_offsets_get>:
{
    ceca:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    cecc:	7b04      	ldrb	r4, [r0, #12]
    cece:	8943      	ldrh	r3, [r0, #10]
    ced0:	4421      	add	r1, r4
    ced2:	1910      	adds	r0, r2, r4
    ced4:	fbb1 f1f3 	udiv	r1, r1, r3
    ced8:	fbb0 f0f3 	udiv	r0, r0, r3
}
    cedc:	1a40      	subs	r0, r0, r1
    cede:	bd10      	pop	{r4, pc}

0000cee0 <z_shell_multiline_data_calc>:
{
    cee0:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    cee2:	7b05      	ldrb	r5, [r0, #12]
    cee4:	8943      	ldrh	r3, [r0, #10]
    cee6:	4429      	add	r1, r5
    cee8:	fbb1 f4f3 	udiv	r4, r1, r3
    ceec:	fb03 1114 	mls	r1, r3, r4, r1
    cef0:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    cef2:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    cef4:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    cef6:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    cef8:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    cefc:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    cf00:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    cf02:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    cf04:	1c4c      	adds	r4, r1, #1
    cf06:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    cf08:	8042      	strh	r2, [r0, #2]
}
    cf0a:	bd30      	pop	{r4, r5, pc}

0000cf0c <z_shell_make_argv>:
{
    cf0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    cf10:	2500      	movs	r5, #0
{
    cf12:	4606      	mov	r6, r0
    cf14:	460f      	mov	r7, r1
    cf16:	4614      	mov	r4, r2
    cf18:	4698      	mov	r8, r3
	*argc = 0;
    cf1a:	6005      	str	r5, [r0, #0]
		c = *cmd;
    cf1c:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    cf1e:	2800      	cmp	r0, #0
    cf20:	f000 80b5 	beq.w	d08e <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
    cf24:	f7ff ffb2 	bl	ce8c <isspace>
    cf28:	b118      	cbz	r0, cf32 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
    cf2a:	2300      	movs	r3, #0
    cf2c:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
    cf30:	e7f4      	b.n	cf1c <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
    cf32:	6832      	ldr	r2, [r6, #0]
    cf34:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
    cf36:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
    cf38:	6033      	str	r3, [r6, #0]
    cf3a:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
    cf3e:	f000 80a6 	beq.w	d08e <z_shell_make_argv+0x182>
	char quote = 0;
    cf42:	4605      	mov	r5, r0
		c = *cmd;
    cf44:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    cf48:	f1b9 0f00 	cmp.w	r9, #0
    cf4c:	d0e6      	beq.n	cf1c <z_shell_make_argv+0x10>
		if (!quote) {
    cf4e:	2d00      	cmp	r5, #0
    cf50:	f040 8089 	bne.w	d066 <z_shell_make_argv+0x15a>
			switch (c) {
    cf54:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    cf58:	d006      	beq.n	cf68 <z_shell_make_argv+0x5c>
    cf5a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    cf5e:	f000 808a 	beq.w	d076 <z_shell_make_argv+0x16a>
    cf62:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    cf66:	d176      	bne.n	d056 <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
    cf68:	4620      	mov	r0, r4
    cf6a:	f7ff ff99 	bl	cea0 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    cf6e:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
    cf70:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    cf72:	4620      	mov	r0, r4
    cf74:	f001 f924 	bl	e1c0 <memmove>
				continue;
    cf78:	464d      	mov	r5, r9
    cf7a:	e7e3      	b.n	cf44 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    cf7c:	4620      	mov	r0, r4
    cf7e:	f7ff ff8f 	bl	cea0 <z_shell_strlen>
    cf82:	1c61      	adds	r1, r4, #1
    cf84:	4602      	mov	r2, r0
    cf86:	4620      	mov	r0, r4
    cf88:	f001 f91a 	bl	e1c0 <memmove>
			quote = 0;
    cf8c:	2500      	movs	r5, #0
			continue;
    cf8e:	e7d9      	b.n	cf44 <z_shell_make_argv+0x38>
			if (t == '0') {
    cf90:	2930      	cmp	r1, #48	; 0x30
    cf92:	d126      	bne.n	cfe2 <z_shell_make_argv+0xd6>
    cf94:	2302      	movs	r3, #2
				uint8_t v = 0U;
    cf96:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    cf9a:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    cf9c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    cfa0:	b2d2      	uxtb	r2, r2
    cfa2:	2a07      	cmp	r2, #7
    cfa4:	fa5f f983 	uxtb.w	r9, r3
    cfa8:	d818      	bhi.n	cfdc <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
    cfaa:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    cfac:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    cfb0:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    cfb2:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    cfb6:	d1f0      	bne.n	cf9a <z_shell_make_argv+0x8e>
    cfb8:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
    cfba:	4620      	mov	r0, r4
    cfbc:	f7ff ff70 	bl	cea0 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    cfc0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    cfc4:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    cfc6:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
    cfca:	eba0 0209 	sub.w	r2, r0, r9
    cfce:	4659      	mov	r1, fp
    cfd0:	4620      	mov	r0, r4
    cfd2:	f001 f8f5 	bl	e1c0 <memmove>
					*cmd++ = v;
    cfd6:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    cfda:	e7b3      	b.n	cf44 <z_shell_make_argv+0x38>
				if (i > 2) {
    cfdc:	f1b9 0f02 	cmp.w	r9, #2
    cfe0:	d1eb      	bne.n	cfba <z_shell_make_argv+0xae>
			if (t == 'x') {
    cfe2:	2978      	cmp	r1, #120	; 0x78
    cfe4:	d13d      	bne.n	d062 <z_shell_make_argv+0x156>
    cfe6:	2102      	movs	r1, #2
				uint8_t v = 0U;
    cfe8:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    cfec:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
    cfee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cff2:	b2db      	uxtb	r3, r3
    cff4:	2b09      	cmp	r3, #9
    cff6:	b2c8      	uxtb	r0, r1
    cff8:	d81a      	bhi.n	d030 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
    cffa:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    cffe:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
    d000:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
    d004:	d112      	bne.n	d02c <z_shell_make_argv+0x120>
    d006:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
    d00a:	4620      	mov	r0, r4
    d00c:	f7ff ff48 	bl	cea0 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    d010:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    d014:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    d016:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
    d01a:	eba0 020a 	sub.w	r2, r0, sl
    d01e:	4659      	mov	r1, fp
    d020:	4620      	mov	r0, r4
    d022:	f001 f8cd 	bl	e1c0 <memmove>
					*cmd++ = v;
    d026:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    d02a:	e78b      	b.n	cf44 <z_shell_make_argv+0x38>
    d02c:	2103      	movs	r1, #3
    d02e:	e7dd      	b.n	cfec <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
    d030:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    d034:	2b05      	cmp	r3, #5
    d036:	d803      	bhi.n	d040 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
    d038:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    d03a:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
    d03e:	e7de      	b.n	cffe <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
    d040:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    d044:	2b05      	cmp	r3, #5
    d046:	d801      	bhi.n	d04c <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
    d048:	3a37      	subs	r2, #55	; 0x37
    d04a:	e7f6      	b.n	d03a <z_shell_make_argv+0x12e>
				if (i > 2) {
    d04c:	2802      	cmp	r0, #2
    d04e:	d008      	beq.n	d062 <z_shell_make_argv+0x156>
    d050:	f04f 0a03 	mov.w	sl, #3
    d054:	e7d9      	b.n	d00a <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
    d056:	4648      	mov	r0, r9
    d058:	f7ff ff18 	bl	ce8c <isspace>
    d05c:	2800      	cmp	r0, #0
    d05e:	f47f af5d 	bne.w	cf1c <z_shell_make_argv+0x10>
		cmd += 1;
    d062:	3401      	adds	r4, #1
    d064:	e76e      	b.n	cf44 <z_shell_make_argv+0x38>
		if (quote == c) {
    d066:	45a9      	cmp	r9, r5
    d068:	d088      	beq.n	cf7c <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
    d06a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    d06e:	d1f8      	bne.n	d062 <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
    d070:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    d072:	428d      	cmp	r5, r1
    d074:	d18c      	bne.n	cf90 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
    d076:	4620      	mov	r0, r4
    d078:	f7ff ff12 	bl	cea0 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    d07c:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
    d080:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    d082:	4649      	mov	r1, r9
    d084:	4620      	mov	r0, r4
    d086:	f001 f89b 	bl	e1c0 <memmove>
				cmd += 1;
    d08a:	464c      	mov	r4, r9
				continue;
    d08c:	e75a      	b.n	cf44 <z_shell_make_argv+0x38>
}
    d08e:	4628      	mov	r0, r5
    d090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d094 <z_shell_pattern_remove>:
{
    d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d096:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    d098:	4611      	mov	r1, r2
{
    d09a:	4615      	mov	r5, r2
    d09c:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    d09e:	f001 f807 	bl	e0b0 <strstr>
    d0a2:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    d0a4:	4628      	mov	r0, r5
    d0a6:	f7ff fefb 	bl	cea0 <z_shell_strlen>
    d0aa:	4605      	mov	r5, r0
	if (!pattern_addr) {
    d0ac:	b1c4      	cbz	r4, d0e0 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    d0ae:	42a7      	cmp	r7, r4
    d0b0:	d207      	bcs.n	d0c2 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    d0b2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    d0b6:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    d0b8:	bf02      	ittt	eq
    d0ba:	3501      	addeq	r5, #1
    d0bc:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    d0be:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    d0c2:	4620      	mov	r0, r4
    d0c4:	f7ff feec 	bl	cea0 <z_shell_strlen>
	*buff_len -= pattern_len;
    d0c8:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    d0ca:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
    d0cc:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    d0ce:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
    d0d0:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    d0d2:	1961      	adds	r1, r4, r5
    d0d4:	4620      	mov	r0, r4
    d0d6:	b292      	uxth	r2, r2
}
    d0d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    d0dc:	f001 b870 	b.w	e1c0 <memmove>
}
    d0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d0e2 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    d0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0e6:	4688      	mov	r8, r1
    d0e8:	b086      	sub	sp, #24
    d0ea:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
    d0ec:	4604      	mov	r4, r0
    d0ee:	b128      	cbz	r0, d0fc <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    d0f0:	4601      	mov	r1, r0
    d0f2:	2214      	movs	r2, #20
    d0f4:	a801      	add	r0, sp, #4
    d0f6:	f001 f87b 	bl	e1f0 <memcpy>
		parent = &parent_cpy;
    d0fa:	ac01      	add	r4, sp, #4
    d0fc:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    d0fe:	4631      	mov	r1, r6
    d100:	463a      	mov	r2, r7
    d102:	4620      	mov	r0, r4
    d104:	f7f6 fa72 	bl	35ec <z_shell_cmd_get>
    d108:	3601      	adds	r6, #1
    d10a:	4605      	mov	r5, r0
    d10c:	b128      	cbz	r0, d11a <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    d10e:	6829      	ldr	r1, [r5, #0]
    d110:	4640      	mov	r0, r8
    d112:	f001 f827 	bl	e164 <strcmp>
    d116:	2800      	cmp	r0, #0
    d118:	d1f1      	bne.n	d0fe <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
    d11a:	4628      	mov	r0, r5
    d11c:	b006      	add	sp, #24
    d11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d122 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    d122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d126:	461c      	mov	r4, r3
    d128:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d12c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    d130:	2300      	movs	r3, #0
{
    d132:	460f      	mov	r7, r1
    d134:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    d136:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    d138:	6823      	ldr	r3, [r4, #0]
    d13a:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    d13c:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    d13e:	d21b      	bcs.n	d178 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    d140:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    d144:	f000 fd66 	bl	dc14 <z_shell_has_wildcard>
    d148:	6823      	ldr	r3, [r4, #0]
    d14a:	4682      	mov	sl, r0
    d14c:	b118      	cbz	r0, d156 <z_shell_get_last_command+0x34>
				(*match_arg)++;
    d14e:	3301      	adds	r3, #1
    d150:	6023      	str	r3, [r4, #0]
				continue;
    d152:	4628      	mov	r0, r5
    d154:	e7f0      	b.n	d138 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    d156:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    d15a:	4642      	mov	r2, r8
    d15c:	4628      	mov	r0, r5
    d15e:	f7ff ffc0 	bl	d0e2 <z_shell_find_cmd>
		if (entry) {
    d162:	b148      	cbz	r0, d178 <z_shell_get_last_command+0x56>
			(*match_arg)++;
    d164:	6823      	ldr	r3, [r4, #0]
    d166:	1c5a      	adds	r2, r3, #1
    d168:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    d16a:	f1b9 0f00 	cmp.w	r9, #0
    d16e:	d0e3      	beq.n	d138 <z_shell_get_last_command+0x16>
    d170:	4580      	cmp	r8, r0
    d172:	d1e1      	bne.n	d138 <z_shell_get_last_command+0x16>
			(*match_arg)--;
    d174:	6023      	str	r3, [r4, #0]
			return NULL;
    d176:	4655      	mov	r5, sl
		}
	}

	return entry;
}
    d178:	4628      	mov	r0, r5
    d17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d17e <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    d17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d182:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
    d184:	f7ff fe8c 	bl	cea0 <z_shell_strlen>
    d188:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
    d18a:	bb47      	cbnz	r7, d1de <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
    d18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
    d190:	b14c      	cbz	r4, d1a6 <z_shell_spaces_trim+0x28>
						len - j + 1);
    d192:	b292      	uxth	r2, r2
    d194:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
    d196:	1c58      	adds	r0, r3, #1
    d198:	3201      	adds	r2, #1
    d19a:	4438      	add	r0, r7
    d19c:	f001 f810 	bl	e1c0 <memmove>
					len -= shift;
    d1a0:	1b36      	subs	r6, r6, r4
    d1a2:	b2b6      	uxth	r6, r6
					shift = 0U;
    d1a4:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
    d1a6:	1e73      	subs	r3, r6, #1
    d1a8:	429d      	cmp	r5, r3
    d1aa:	daef      	bge.n	d18c <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    d1ac:	5d78      	ldrb	r0, [r7, r5]
    d1ae:	f7ff fe6d 	bl	ce8c <isspace>
    d1b2:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
    d1b4:	3501      	adds	r5, #1
    d1b6:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
    d1b8:	2800      	cmp	r0, #0
    d1ba:	d0f4      	beq.n	d1a6 <z_shell_spaces_trim+0x28>
    d1bc:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
    d1be:	b291      	uxth	r1, r2
    d1c0:	428e      	cmp	r6, r1
    d1c2:	d9f0      	bls.n	d1a6 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    d1c4:	5cb8      	ldrb	r0, [r7, r2]
    d1c6:	f7ff fe61 	bl	ce8c <isspace>
    d1ca:	18b9      	adds	r1, r7, r2
    d1cc:	f102 0c01 	add.w	ip, r2, #1
    d1d0:	4680      	mov	r8, r0
    d1d2:	2800      	cmp	r0, #0
    d1d4:	d0dc      	beq.n	d190 <z_shell_spaces_trim+0x12>
					shift++;
    d1d6:	3401      	adds	r4, #1
    d1d8:	b2a4      	uxth	r4, r4
    d1da:	4662      	mov	r2, ip
    d1dc:	e7ef      	b.n	d1be <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
    d1de:	2500      	movs	r5, #0
	uint16_t shift = 0U;
    d1e0:	462c      	mov	r4, r5
    d1e2:	e7e0      	b.n	d1a6 <z_shell_spaces_trim+0x28>

0000d1e4 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    d1e6:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    d1e8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    d1ec:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    d1ee:	b953      	cbnz	r3, d206 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    d1f0:	68ab      	ldr	r3, [r5, #8]
    d1f2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    d1f4:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    d1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    d1f8:	3a01      	subs	r2, #1
    d1fa:	b292      	uxth	r2, r2
    d1fc:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    d1fe:	b922      	cbnz	r2, d20a <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
    d200:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    d204:	e7f4      	b.n	d1f0 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    d206:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    d20a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d20c:	18b3      	adds	r3, r6, r2
    d20e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    d212:	f7ff fe3b 	bl	ce8c <isspace>
    d216:	4603      	mov	r3, r0
    d218:	2800      	cmp	r0, #0
    d21a:	d1ed      	bne.n	d1f8 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    d21c:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
    d21e:	b29f      	uxth	r7, r3
    d220:	fa16 f183 	uxtah	r1, r6, r3
    d224:	5df0      	ldrb	r0, [r6, r7]
    d226:	f7ff fe31 	bl	ce8c <isspace>
    d22a:	3301      	adds	r3, #1
    d22c:	2800      	cmp	r0, #0
    d22e:	d1f6      	bne.n	d21e <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
    d230:	2f00      	cmp	r7, #0
    d232:	d0dd      	beq.n	d1f0 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    d234:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    d236:	3301      	adds	r3, #1
    d238:	1bda      	subs	r2, r3, r7
    d23a:	4630      	mov	r0, r6
    d23c:	f000 ffc0 	bl	e1c0 <memmove>
		*buff_len = *buff_len - i;
    d240:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    d242:	1bdb      	subs	r3, r3, r7
    d244:	87a3      	strh	r3, [r4, #60]	; 0x3c
    d246:	e7d3      	b.n	d1f0 <z_shell_cmd_trim+0xc>

0000d248 <z_shell_raw_fprintf>:
{
    d248:	b40e      	push	{r1, r2, r3}
    d24a:	b503      	push	{r0, r1, lr}
    d24c:	aa03      	add	r2, sp, #12
    d24e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d252:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d254:	f7f6 f9b6 	bl	35c4 <z_shell_fprintf_fmt>
}
    d258:	b002      	add	sp, #8
    d25a:	f85d eb04 	ldr.w	lr, [sp], #4
    d25e:	b003      	add	sp, #12
    d260:	4770      	bx	lr

0000d262 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    d262:	6882      	ldr	r2, [r0, #8]
{
    d264:	b538      	push	{r3, r4, r5, lr}
    d266:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    d268:	6810      	ldr	r0, [r2, #0]
    d26a:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    d26c:	b110      	cbz	r0, d274 <full_line_cmd+0x12>
    d26e:	f000 ff69 	bl	e144 <strlen>
    d272:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d274:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    d276:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d278:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    d27a:	fbb3 f2f0 	udiv	r2, r3, r0
    d27e:	fb00 3012 	mls	r0, r0, r2, r3
}
    d282:	fab0 f080 	clz	r0, r0
    d286:	0940      	lsrs	r0, r0, #5
    d288:	bd38      	pop	{r3, r4, r5, pc}

0000d28a <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    d28a:	6882      	ldr	r2, [r0, #8]
{
    d28c:	b538      	push	{r3, r4, r5, lr}
    d28e:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    d290:	6810      	ldr	r0, [r2, #0]
    d292:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    d294:	b110      	cbz	r0, d29c <z_shell_cursor_in_empty_line+0x12>
    d296:	f000 ff55 	bl	e144 <strlen>
    d29a:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d29c:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    d29e:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d2a0:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    d2a2:	fbb3 f2f0 	udiv	r2, r3, r0
    d2a6:	fb00 3012 	mls	r0, r0, r2, r3
}
    d2aa:	fab0 f080 	clz	r0, r0
    d2ae:	0940      	lsrs	r0, r0, #5
    d2b0:	bd38      	pop	{r3, r4, r5, pc}

0000d2b2 <z_shell_op_cond_next_line>:
{
    d2b2:	b510      	push	{r4, lr}
    d2b4:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    d2b6:	f7ff ffe8 	bl	d28a <z_shell_cursor_in_empty_line>
    d2ba:	b120      	cbz	r0, d2c6 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
    d2bc:	6960      	ldr	r0, [r4, #20]
}
    d2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
    d2c2:	f7f6 b9c5 	b.w	3650 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    d2c6:	4620      	mov	r0, r4
    d2c8:	f7ff ffcb 	bl	d262 <full_line_cmd>
    d2cc:	2800      	cmp	r0, #0
    d2ce:	d1f5      	bne.n	d2bc <z_shell_op_cond_next_line+0xa>
}
    d2d0:	bd10      	pop	{r4, pc}

0000d2d2 <z_shell_op_cursor_position_synchronize>:
{
    d2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    d2d4:	6884      	ldr	r4, [r0, #8]
{
    d2d6:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    d2d8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d2da:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    d2dc:	f104 0020 	add.w	r0, r4, #32
    d2e0:	f7ff fdfe 	bl	cee0 <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
    d2e4:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    d2e6:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    d2e8:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    d2ea:	f7ff ffba 	bl	d262 <full_line_cmd>
    d2ee:	b110      	cbz	r0, d2f6 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
    d2f0:	6968      	ldr	r0, [r5, #20]
    d2f2:	f7f6 f9ad 	bl	3650 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    d2f6:	42b7      	cmp	r7, r6
    d2f8:	d107      	bne.n	d30a <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    d2fa:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    d2fc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    d2fe:	4628      	mov	r0, r5
    d300:	1ac9      	subs	r1, r1, r3
}
    d302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    d306:	f7f6 b9bf 	b.w	3688 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    d30a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    d30c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    d30e:	4628      	mov	r0, r5
    d310:	1ac9      	subs	r1, r1, r3
    d312:	f7f6 f9a3 	bl	365c <z_shell_op_cursor_vert_move>
    d316:	e7f0      	b.n	d2fa <z_shell_op_cursor_position_synchronize+0x28>

0000d318 <z_shell_op_cursor_move>:
{
    d318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d31a:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    d31c:	6880      	ldr	r0, [r0, #8]
{
    d31e:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    d320:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    d322:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    d324:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    d326:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    d328:	f7ff fdda 	bl	cee0 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    d32c:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    d32e:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    d330:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d332:	462a      	mov	r2, r5
    d334:	3020      	adds	r0, #32
    d336:	f7ff fdc8 	bl	ceca <z_row_span_with_buffer_offsets_get>
    d33a:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    d33c:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    d33e:	462a      	mov	r2, r5
    d340:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d342:	3020      	adds	r0, #32
    d344:	f7ff fdb2 	bl	ceac <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    d348:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    d34a:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    d34c:	4620      	mov	r0, r4
    d34e:	f7f6 f985 	bl	365c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    d352:	4631      	mov	r1, r6
    d354:	4620      	mov	r0, r4
    d356:	f7f6 f997 	bl	3688 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    d35a:	68a3      	ldr	r3, [r4, #8]
    d35c:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    d35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d360 <z_shell_op_cursor_word_move>:
{
    d360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    d364:	1e0c      	subs	r4, r1, #0
{
    d366:	4606      	mov	r6, r0
	if (val < 0) {
    d368:	da34      	bge.n	d3d4 <z_shell_op_cursor_word_move+0x74>
		val = -val;
    d36a:	4264      	negs	r4, r4
    d36c:	b224      	sxth	r4, r4
		sign = -1;
    d36e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    d372:	b2a4      	uxth	r4, r4
    d374:	b2af      	uxth	r7, r5
    d376:	e025      	b.n	d3c4 <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
    d378:	68b3      	ldr	r3, [r6, #8]
    d37a:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
    d37e:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
    d382:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
    d386:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    d388:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    d38a:	eba3 010e 	sub.w	r1, r3, lr
    d38e:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    d390:	b90b      	cbnz	r3, d396 <z_shell_op_cursor_word_move+0x36>
    d392:	1c6a      	adds	r2, r5, #1
    d394:	d010      	beq.n	d3b8 <z_shell_op_cursor_word_move+0x58>
    d396:	4599      	cmp	r9, r3
    d398:	d101      	bne.n	d39e <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
    d39a:	2d01      	cmp	r5, #1
    d39c:	d00c      	beq.n	d3b8 <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
    d39e:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    d3a2:	f042 0c20 	orr.w	ip, r2, #32
    d3a6:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    d3aa:	f1bc 0f19 	cmp.w	ip, #25
    d3ae:	d90d      	bls.n	d3cc <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    d3b0:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    d3b2:	2a09      	cmp	r2, #9
    d3b4:	d90a      	bls.n	d3cc <z_shell_op_cursor_word_move+0x6c>
			if (found) {
    d3b6:	b150      	cbz	r0, d3ce <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
    d3b8:	b209      	sxth	r1, r1
    d3ba:	4630      	mov	r0, r6
    d3bc:	f7ff ffac 	bl	d318 <z_shell_op_cursor_move>
    d3c0:	3c01      	subs	r4, #1
    d3c2:	b2a4      	uxth	r4, r4
	while (val--) {
    d3c4:	2c00      	cmp	r4, #0
    d3c6:	d1d7      	bne.n	d378 <z_shell_op_cursor_word_move+0x18>
}
    d3c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    d3cc:	2001      	movs	r0, #1
	while (1) {
    d3ce:	443b      	add	r3, r7
    d3d0:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    d3d2:	e7da      	b.n	d38a <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
    d3d4:	2501      	movs	r5, #1
    d3d6:	e7cc      	b.n	d372 <z_shell_op_cursor_word_move+0x12>

0000d3d8 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    d3d8:	6883      	ldr	r3, [r0, #8]
    d3da:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    d3dc:	4249      	negs	r1, r1
    d3de:	b209      	sxth	r1, r1
    d3e0:	f7ff bf9a 	b.w	d318 <z_shell_op_cursor_move>

0000d3e4 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    d3e4:	6883      	ldr	r3, [r0, #8]
    d3e6:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    d3e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    d3ea:	1ac9      	subs	r1, r1, r3
    d3ec:	b209      	sxth	r1, r1
    d3ee:	f7ff bf93 	b.w	d318 <z_shell_op_cursor_move>

0000d3f2 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    d3f2:	6883      	ldr	r3, [r0, #8]
    d3f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    d3f6:	b11b      	cbz	r3, d400 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    d3f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d3fc:	f7ff bf8c 	b.w	d318 <z_shell_op_cursor_move>
}
    d400:	4770      	bx	lr

0000d402 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    d402:	6883      	ldr	r3, [r0, #8]
    d404:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    d406:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    d408:	429a      	cmp	r2, r3
    d40a:	d202      	bcs.n	d412 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    d40c:	2101      	movs	r1, #1
    d40e:	f7ff bf83 	b.w	d318 <z_shell_op_cursor_move>
}
    d412:	4770      	bx	lr

0000d414 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    d414:	6883      	ldr	r3, [r0, #8]
    d416:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    d418:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    d41a:	4413      	add	r3, r2
    d41c:	2200      	movs	r2, #0
    d41e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    d422:	f7f6 b909 	b.w	3638 <z_clear_eos>

0000d426 <z_shell_cmd_line_erase>:
{
    d426:	b510      	push	{r4, lr}
    d428:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    d42a:	6880      	ldr	r0, [r0, #8]
    d42c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    d42e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d430:	3020      	adds	r0, #32
    d432:	f7ff fd55 	bl	cee0 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    d436:	68a3      	ldr	r3, [r4, #8]
    d438:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    d43a:	4620      	mov	r0, r4
    d43c:	f1c1 0101 	rsb	r1, r1, #1
    d440:	f7f6 f922 	bl	3688 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    d444:	68a3      	ldr	r3, [r4, #8]
    d446:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    d448:	4620      	mov	r0, r4
    d44a:	3901      	subs	r1, #1
    d44c:	f7f6 f906 	bl	365c <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    d450:	4620      	mov	r0, r4
}
    d452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    d456:	f7f6 b8ef 	b.w	3638 <z_clear_eos>

0000d45a <z_shell_write>:
{
    d45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d45e:	4605      	mov	r5, r0
    d460:	b086      	sub	sp, #24
    d462:	460f      	mov	r7, r1
    d464:	4614      	mov	r4, r2
	size_t offset = 0;
    d466:	2600      	movs	r6, #0
	while (length) {
    d468:	b914      	cbnz	r4, d470 <z_shell_write+0x16>
}
    d46a:	b006      	add	sp, #24
    d46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    d470:	6868      	ldr	r0, [r5, #4]
    d472:	6803      	ldr	r3, [r0, #0]
    d474:	4622      	mov	r2, r4
    d476:	f8d3 800c 	ldr.w	r8, [r3, #12]
    d47a:	19b9      	adds	r1, r7, r6
    d47c:	466b      	mov	r3, sp
    d47e:	47c0      	blx	r8
		offset += tmp_cnt;
    d480:	9a00      	ldr	r2, [sp, #0]
    d482:	4416      	add	r6, r2
		length -= tmp_cnt;
    d484:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    d486:	2a00      	cmp	r2, #0
    d488:	d1ee      	bne.n	d468 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    d48a:	68ab      	ldr	r3, [r5, #8]
    d48c:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    d48e:	2903      	cmp	r1, #3
    d490:	d0ea      	beq.n	d468 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    d492:	2902      	cmp	r1, #2
    d494:	d813      	bhi.n	d4be <z_shell_write+0x64>
		k_poll_event_init(&event,
    d496:	f503 7326 	add.w	r3, r3, #664	; 0x298
    d49a:	2101      	movs	r1, #1
    d49c:	a801      	add	r0, sp, #4
    d49e:	f001 ffcd 	bl	f43c <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    d4a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4aa:	2101      	movs	r1, #1
    d4ac:	a801      	add	r0, sp, #4
    d4ae:	f7fe f9c7 	bl	b840 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    d4b2:	68a8      	ldr	r0, [r5, #8]
    d4b4:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    d4b8:	f001 ffe2 	bl	f480 <z_impl_k_poll_signal_reset>
    d4bc:	e7d4      	b.n	d468 <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
    d4be:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
    d4c2:	0792      	lsls	r2, r2, #30
    d4c4:	d5fb      	bpl.n	d4be <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d4c6:	f3bf 8f5b 	dmb	ish
    d4ca:	f503 7319 	add.w	r3, r3, #612	; 0x264
    d4ce:	e853 2f00 	ldrex	r2, [r3]
    d4d2:	f022 0202 	bic.w	r2, r2, #2
    d4d6:	e843 2100 	strex	r1, r2, [r3]
    d4da:	2900      	cmp	r1, #0
    d4dc:	d1f7      	bne.n	d4ce <z_shell_write+0x74>
    d4de:	f3bf 8f5b 	dmb	ish
	return ret;
    d4e2:	e7c1      	b.n	d468 <z_shell_write+0xe>

0000d4e4 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    d4e4:	f7ff bfb9 	b.w	d45a <z_shell_write>

0000d4e8 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    d4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d4ea:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
    d4ec:	6881      	ldr	r1, [r0, #8]
    d4ee:	461e      	mov	r6, r3
    d4f0:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    d4f4:	06db      	lsls	r3, r3, #27
{
    d4f6:	4604      	mov	r4, r0
    d4f8:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    d4fa:	d517      	bpl.n	d52c <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
    d4fc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    d500:	42bb      	cmp	r3, r7
    d502:	d013      	beq.n	d52c <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    d504:	2202      	movs	r2, #2
    d506:	312e      	adds	r1, #46	; 0x2e
    d508:	a801      	add	r0, sp, #4
    d50a:	f000 fe71 	bl	e1f0 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    d50e:	4639      	mov	r1, r7
    d510:	4620      	mov	r0, r4
    d512:	f7f6 f8d7 	bl	36c4 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    d516:	6960      	ldr	r0, [r4, #20]
    d518:	4632      	mov	r2, r6
    d51a:	4629      	mov	r1, r5
    d51c:	f7f6 f852 	bl	35c4 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    d520:	a901      	add	r1, sp, #4
    d522:	4620      	mov	r0, r4
    d524:	f7f6 f8ee 	bl	3704 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    d528:	b003      	add	sp, #12
    d52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    d52c:	6960      	ldr	r0, [r4, #20]
    d52e:	4632      	mov	r2, r6
    d530:	4629      	mov	r1, r5
}
    d532:	b003      	add	sp, #12
    d534:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    d538:	f7f6 b844 	b.w	35c4 <z_shell_fprintf_fmt>

0000d53c <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    d53c:	b40c      	push	{r2, r3}
    d53e:	b507      	push	{r0, r1, r2, lr}
    d540:	ab04      	add	r3, sp, #16
    d542:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    d546:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    d548:	f7ff ffce 	bl	d4e8 <z_shell_vfprintf>
	va_end(args);
}
    d54c:	b003      	add	sp, #12
    d54e:	f85d eb04 	ldr.w	lr, [sp], #4
    d552:	b002      	add	sp, #8
    d554:	4770      	bx	lr

0000d556 <data_insert>:
{
    d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d55a:	6886      	ldr	r6, [r0, #8]
    d55c:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    d55e:	18ab      	adds	r3, r5, r2
    d560:	2bff      	cmp	r3, #255	; 0xff
{
    d562:	4607      	mov	r7, r0
    d564:	4688      	mov	r8, r1
    d566:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    d568:	dc1e      	bgt.n	d5a8 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d56a:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
    d56c:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    d56e:	3342      	adds	r3, #66	; 0x42
    d570:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d572:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
    d574:	462a      	mov	r2, r5
    d576:	4631      	mov	r1, r6
    d578:	1930      	adds	r0, r6, r4
    d57a:	f000 fe21 	bl	e1c0 <memmove>
	memcpy(curr_pos, data, len);
    d57e:	4622      	mov	r2, r4
    d580:	4641      	mov	r1, r8
    d582:	4630      	mov	r0, r6
    d584:	f000 fe34 	bl	e1f0 <memcpy>
	shell->ctx->cmd_buff_len += len;
    d588:	68b9      	ldr	r1, [r7, #8]
    d58a:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
    d58c:	4423      	add	r3, r4
    d58e:	b29b      	uxth	r3, r3
    d590:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    d592:	440b      	add	r3, r1
    d594:	2200      	movs	r2, #0
    d596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    d59a:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    d59e:	079b      	lsls	r3, r3, #30
    d5a0:	d404      	bmi.n	d5ac <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
    d5a2:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
    d5a4:	4414      	add	r4, r2
    d5a6:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
    d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    d5ac:	4629      	mov	r1, r5
    d5ae:	4638      	mov	r0, r7
}
    d5b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    d5b4:	f7f6 b920 	b.w	37f8 <reprint_from_cursor>

0000d5b8 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    d5b8:	f7ff bfcd 	b.w	d556 <data_insert>

0000d5bc <z_shell_op_char_delete>:
{
    d5bc:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d5be:	6883      	ldr	r3, [r0, #8]
{
    d5c0:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d5c2:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
    d5c4:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    d5c6:	1a24      	subs	r4, r4, r0
    d5c8:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    d5ca:	b18c      	cbz	r4, d5f0 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    d5cc:	3042      	adds	r0, #66	; 0x42
    d5ce:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    d5d0:	4622      	mov	r2, r4
    d5d2:	1c41      	adds	r1, r0, #1
    d5d4:	f000 fdf4 	bl	e1c0 <memmove>
	--shell->ctx->cmd_buff_len;
    d5d8:	68aa      	ldr	r2, [r5, #8]
    d5da:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    d5dc:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    d5de:	3b01      	subs	r3, #1
    d5e0:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    d5e2:	4628      	mov	r0, r5
    d5e4:	2201      	movs	r2, #1
}
    d5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    d5ea:	b289      	uxth	r1, r1
    d5ec:	f7f6 b904 	b.w	37f8 <reprint_from_cursor>
}
    d5f0:	bd38      	pop	{r3, r4, r5, pc}

0000d5f2 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    d5f2:	6883      	ldr	r3, [r0, #8]
    d5f4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    d5f6:	b510      	push	{r4, lr}
    d5f8:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    d5fa:	b152      	cbz	r2, d612 <z_shell_op_char_backspace+0x20>
    d5fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    d5fe:	b143      	cbz	r3, d612 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    d600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d604:	f7ff fe88 	bl	d318 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    d608:	4620      	mov	r0, r4
}
    d60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    d60e:	f7ff bfd5 	b.w	d5bc <z_shell_op_char_delete>
}
    d612:	bd10      	pop	{r4, pc}

0000d614 <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
    d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
    d616:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    d618:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
    d61a:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
    d61c:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
    d61e:	4630      	mov	r0, r6
    d620:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
    d624:	f7fe ffcc 	bl	c5c0 <mpsc_pbuf_claim>
    d628:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
    d62c:	4604      	mov	r4, r0
    d62e:	b160      	cbz	r0, d64a <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    d630:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
    d632:	4601      	mov	r1, r0
    d634:	bf0c      	ite	eq
    d636:	220e      	moveq	r2, #14
    d638:	220f      	movne	r2, #15
    d63a:	4638      	mov	r0, r7
    d63c:	f7f4 fa2a 	bl	1a94 <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
    d640:	4630      	mov	r0, r6
    d642:	4621      	mov	r1, r4
    d644:	f7ff f808 	bl	c658 <mpsc_pbuf_free>

	return true;
    d648:	2001      	movs	r0, #1
}
    d64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d64c <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d64c:	6843      	ldr	r3, [r0, #4]
{
    d64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d652:	681e      	ldr	r6, [r3, #0]
    d654:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
    d656:	69f3      	ldr	r3, [r6, #28]
    d658:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
    d65c:	68da      	ldr	r2, [r3, #12]
    d65e:	7912      	ldrb	r2, [r2, #4]
    d660:	2a01      	cmp	r2, #1
{
    d662:	460d      	mov	r5, r1
    d664:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
    d668:	d003      	beq.n	d672 <log2_process+0x26>
    d66a:	2a03      	cmp	r2, #3
    d66c:	d042      	beq.n	d6f4 <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
    d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    d672:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
    d674:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
    d676:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d678:	0759      	lsls	r1, r3, #29
    d67a:	d439      	bmi.n	d6f0 <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d67c:	682b      	ldr	r3, [r5, #0]
    d67e:	f3c3 2449 	ubfx	r4, r3, #9, #10
    d682:	886b      	ldrh	r3, [r5, #2]
    d684:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    d688:	441c      	add	r4, r3
    d68a:	3413      	adds	r4, #19
    d68c:	f024 0407 	bic.w	r4, r4, #7
    d690:	08a4      	lsrs	r4, r4, #2
    d692:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    d696:	f240 3ce7 	movw	ip, #999	; 0x3e7
    d69a:	2100      	movs	r1, #0
    d69c:	fbe0 c10e 	umlal	ip, r1, r0, lr
    d6a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6a4:	2300      	movs	r3, #0
    d6a6:	4660      	mov	r0, ip
    d6a8:	f7f2 fd2a 	bl	100 <__aeabi_uldivmod>
    d6ac:	4602      	mov	r2, r0
    d6ae:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
    d6b0:	4638      	mov	r0, r7
    d6b2:	4621      	mov	r1, r4
    d6b4:	f7fe fef1 	bl	c49a <mpsc_pbuf_alloc>
	if (!dst) {
    d6b8:	4680      	mov	r8, r0
    d6ba:	b188      	cbz	r0, d6e0 <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
    d6bc:	4629      	mov	r1, r5
    d6be:	6802      	ldr	r2, [r0, #0]
    d6c0:	f851 3b04 	ldr.w	r3, [r1], #4
    d6c4:	f3c3 039d 	ubfx	r3, r3, #2, #30
    d6c8:	f363 029f 	bfi	r2, r3, #2, #30
    d6cc:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
    d6d0:	1e62      	subs	r2, r4, #1
    d6d2:	0092      	lsls	r2, r2, #2
    d6d4:	f000 fd8c 	bl	e1f0 <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
    d6d8:	4641      	mov	r1, r8
    d6da:	4638      	mov	r0, r7
    d6dc:	f7fe ff53 	bl	c586 <mpsc_pbuf_commit>
				signal =
    d6e0:	68b0      	ldr	r0, [r6, #8]
    d6e2:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
    d6e6:	2100      	movs	r1, #0
}
    d6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d6ec:	f7fe b904 	b.w	b8f8 <z_impl_k_poll_signal_raise>
	return 0;
    d6f0:	2400      	movs	r4, #0
    d6f2:	e7ce      	b.n	d692 <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
    d6f4:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
    d6f6:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
    d6f8:	f7ff fe95 	bl	d426 <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    d6fc:	2c00      	cmp	r4, #0
    d6fe:	bf0c      	ite	eq
    d700:	f04f 080e 	moveq.w	r8, #14
    d704:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
    d708:	f04f 0320 	mov.w	r3, #32
    d70c:	f3ef 8411 	mrs	r4, BASEPRI
    d710:	f383 8812 	msr	BASEPRI_MAX, r3
    d714:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    d718:	68b3      	ldr	r3, [r6, #8]
    d71a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    d71e:	051a      	lsls	r2, r3, #20
    d720:	d402      	bmi.n	d728 <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
    d722:	4630      	mov	r0, r6
    d724:	f7ff fe7f 	bl	d426 <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
    d728:	4642      	mov	r2, r8
    d72a:	4629      	mov	r1, r5
    d72c:	4638      	mov	r0, r7
    d72e:	f7f4 f9b1 	bl	1a94 <log_output_msg2_process>
    d732:	68b3      	ldr	r3, [r6, #8]
    d734:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    d738:	051b      	lsls	r3, r3, #20
    d73a:	d402      	bmi.n	d742 <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
    d73c:	4630      	mov	r0, r6
    d73e:	f7f6 f8cb 	bl	38d8 <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
    d742:	f384 8811 	msr	BASEPRI, r4
    d746:	f3bf 8f6f 	isb	sy
}
    d74a:	e790      	b.n	d66e <log2_process+0x22>

0000d74c <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d74c:	6843      	ldr	r3, [r0, #4]
    d74e:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d750:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
    d754:	f3bf 8f5b 	dmb	ish
    d758:	e853 0f00 	ldrex	r0, [r3]
    d75c:	4408      	add	r0, r1
    d75e:	e843 0c00 	strex	ip, r0, [r3]
    d762:	f1bc 0f00 	cmp.w	ip, #0
    d766:	d1f7      	bne.n	d758 <dropped+0xc>
    d768:	f3bf 8f5b 	dmb	ish
    d76c:	68d3      	ldr	r3, [r2, #12]
    d76e:	f3bf 8f5b 	dmb	ish
    d772:	e853 2f00 	ldrex	r2, [r3]
    d776:	440a      	add	r2, r1
    d778:	e843 2000 	strex	r0, r2, [r3]
    d77c:	2800      	cmp	r0, #0
    d77e:	d1f8      	bne.n	d772 <dropped+0x26>
    d780:	f3bf 8f5b 	dmb	ish
}
    d784:	4770      	bx	lr

0000d786 <z_shell_log_backend_output_func>:
{
    d786:	b510      	push	{r4, lr}
    d788:	4613      	mov	r3, r2
    d78a:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
    d78c:	460a      	mov	r2, r1
    d78e:	4601      	mov	r1, r0
    d790:	4618      	mov	r0, r3
    d792:	f7ff fea7 	bl	d4e4 <z_shell_print_stream>
}
    d796:	4620      	mov	r0, r4
    d798:	bd10      	pop	{r4, pc}

0000d79a <z_shell_log_backend_enable>:
{
    d79a:	b570      	push	{r4, r5, r6, lr}
    d79c:	4604      	mov	r4, r0
    d79e:	460d      	mov	r5, r1
    d7a0:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
    d7a2:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
    d7a6:	f7fe fe59 	bl	c45c <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
    d7aa:	4632      	mov	r2, r6
    d7ac:	6820      	ldr	r0, [r4, #0]
    d7ae:	4629      	mov	r1, r5
    d7b0:	f7f3 fff0 	bl	1794 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
    d7b4:	68a3      	ldr	r3, [r4, #8]
    d7b6:	685b      	ldr	r3, [r3, #4]
    d7b8:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
    d7ba:	68e3      	ldr	r3, [r4, #12]
    d7bc:	2200      	movs	r2, #0
    d7be:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    d7c0:	2201      	movs	r2, #1
    d7c2:	711a      	strb	r2, [r3, #4]
}
    d7c4:	bd70      	pop	{r4, r5, r6, pc}

0000d7c6 <z_shell_log_backend_disable>:
{
    d7c6:	b510      	push	{r4, lr}
    d7c8:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
    d7ca:	6800      	ldr	r0, [r0, #0]
    d7cc:	f7ff f8e3 	bl	c996 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    d7d0:	68e3      	ldr	r3, [r4, #12]
    d7d2:	2202      	movs	r2, #2
    d7d4:	711a      	strb	r2, [r3, #4]
}
    d7d6:	bd10      	pop	{r4, pc}

0000d7d8 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d7d8:	6843      	ldr	r3, [r0, #4]
{
    d7da:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d7dc:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
    d7de:	6860      	ldr	r0, [r4, #4]
    d7e0:	6803      	ldr	r3, [r0, #0]
    d7e2:	2101      	movs	r1, #1
    d7e4:	689b      	ldr	r3, [r3, #8]
    d7e6:	4798      	blx	r3
	if (err == 0) {
    d7e8:	bb48      	cbnz	r0, d83e <panic+0x66>
		shell->log_backend->control_block->state =
    d7ea:	69e3      	ldr	r3, [r4, #28]
    d7ec:	68db      	ldr	r3, [r3, #12]
    d7ee:	2203      	movs	r2, #3
    d7f0:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d7f2:	68a3      	ldr	r3, [r4, #8]
    d7f4:	f3bf 8f5b 	dmb	ish
    d7f8:	f503 7319 	add.w	r3, r3, #612	; 0x264
    d7fc:	e853 2f00 	ldrex	r2, [r3]
    d800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d804:	e843 2100 	strex	r1, r2, [r3]
    d808:	2900      	cmp	r1, #0
    d80a:	d1f7      	bne.n	d7fc <panic+0x24>
    d80c:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    d810:	68a0      	ldr	r0, [r4, #8]
    d812:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    d814:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d816:	3020      	adds	r0, #32
    d818:	f7ff fb62 	bl	cee0 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
    d81c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d820:	4620      	mov	r0, r4
    d822:	f7f5 ff1b 	bl	365c <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
    d826:	68a3      	ldr	r3, [r4, #8]
    d828:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
    d82a:	4620      	mov	r0, r4
    d82c:	4249      	negs	r1, r1
    d82e:	f7f5 ff2b 	bl	3688 <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
    d832:	4620      	mov	r0, r4
    d834:	f7ff feee 	bl	d614 <process_msg2_from_buffer>
    d838:	2800      	cmp	r0, #0
    d83a:	d1fa      	bne.n	d832 <panic+0x5a>
}
    d83c:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
    d83e:	69e0      	ldr	r0, [r4, #28]
}
    d840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
    d844:	f7ff bfbf 	b.w	d7c6 <z_shell_log_backend_disable>

0000d848 <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
    d848:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
    d84a:	685b      	ldr	r3, [r3, #4]
{
    d84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
    d84e:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
    d850:	68a3      	ldr	r3, [r4, #8]
    d852:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d856:	68c3      	ldr	r3, [r0, #12]
    d858:	f3bf 8f5b 	dmb	ish
{
    d85c:	4605      	mov	r5, r0
    d85e:	f3c6 1600 	ubfx	r6, r6, #4, #1
    d862:	2200      	movs	r2, #0
    d864:	e853 7f00 	ldrex	r7, [r3]
    d868:	e843 2100 	strex	r1, r2, [r3]
    d86c:	2900      	cmp	r1, #0
    d86e:	d1f9      	bne.n	d864 <z_shell_log_backend_process+0x1c>
    d870:	f3bf 8f5b 	dmb	ish
	if (dropped) {
    d874:	b19f      	cbz	r7, d89e <z_shell_log_backend_process+0x56>
		if (colors) {
    d876:	b14e      	cbz	r6, d88c <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    d878:	68a1      	ldr	r1, [r4, #8]
    d87a:	2202      	movs	r2, #2
    d87c:	312e      	adds	r1, #46	; 0x2e
    d87e:	a801      	add	r0, sp, #4
    d880:	f000 fcb6 	bl	e1f0 <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
    d884:	2101      	movs	r1, #1
    d886:	4620      	mov	r0, r4
    d888:	f7f5 ff1c 	bl	36c4 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
    d88c:	68a8      	ldr	r0, [r5, #8]
    d88e:	4639      	mov	r1, r7
    d890:	f7f4 f964 	bl	1b5c <log_output_dropped_process>
		if (colors) {
    d894:	b11e      	cbz	r6, d89e <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
    d896:	a901      	add	r1, sp, #4
    d898:	4620      	mov	r0, r4
    d89a:	f7f5 ff33 	bl	3704 <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
    d89e:	4620      	mov	r0, r4
}
    d8a0:	b003      	add	sp, #12
    d8a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
    d8a6:	f7ff beb5 	b.w	d614 <process_msg2_from_buffer>

0000d8aa <z_shell_raw_fprintf>:
{
    d8aa:	b40e      	push	{r1, r2, r3}
    d8ac:	b503      	push	{r0, r1, lr}
    d8ae:	aa03      	add	r2, sp, #12
    d8b0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d8b4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d8b6:	f7f5 fe85 	bl	35c4 <z_shell_fprintf_fmt>
}
    d8ba:	b002      	add	sp, #8
    d8bc:	f85d eb04 	ldr.w	lr, [sp], #4
    d8c0:	b003      	add	sp, #12
    d8c2:	4770      	bx	lr

0000d8c4 <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
    d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8c8:	4604      	mov	r4, r0
    d8ca:	4690      	mov	r8, r2
	if (str == NULL) {
    d8cc:	460e      	mov	r6, r1
    d8ce:	2900      	cmp	r1, #0
    d8d0:	d069      	beq.n	d9a6 <formatted_text_print.constprop.0+0xe2>
    d8d2:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
    d8d4:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    d8d6:	2b20      	cmp	r3, #32
    d8d8:	d023      	beq.n	d922 <formatted_text_print.constprop.0+0x5e>
    d8da:	3b09      	subs	r3, #9
    d8dc:	2b04      	cmp	r3, #4
    d8de:	d920      	bls.n	d922 <formatted_text_print.constprop.0+0x5e>
    d8e0:	4630      	mov	r0, r6
    d8e2:	f000 fc2f 	bl	e144 <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    d8e6:	68a3      	ldr	r3, [r4, #8]
    d8e8:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    d8ea:	b280      	uxth	r0, r0
    d8ec:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    d8ee:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    d8f2:	4298      	cmp	r0, r3
    d8f4:	eb06 0905 	add.w	r9, r6, r5
    d8f8:	d915      	bls.n	d926 <formatted_text_print.constprop.0+0x62>
    d8fa:	4648      	mov	r0, r9
		size_t idx = 0;
    d8fc:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
    d8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
    d902:	2a20      	cmp	r2, #32
    d904:	d006      	beq.n	d914 <formatted_text_print.constprop.0+0x50>
    d906:	f1a2 0c09 	sub.w	ip, r2, #9
    d90a:	f1bc 0f04 	cmp.w	ip, #4
    d90e:	d802      	bhi.n	d916 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
    d910:	2a0a      	cmp	r2, #10
    d912:	d02f      	beq.n	d974 <formatted_text_print.constprop.0+0xb0>
    d914:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
    d916:	eb08 0207 	add.w	r2, r8, r7
    d91a:	4291      	cmp	r1, r2
    d91c:	d929      	bls.n	d972 <formatted_text_print.constprop.0+0xae>
			++idx;
    d91e:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    d920:	e7ed      	b.n	d8fe <formatted_text_print.constprop.0+0x3a>
		++offset;
    d922:	3501      	adds	r5, #1
    d924:	e7d6      	b.n	d8d4 <formatted_text_print.constprop.0+0x10>
    d926:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
    d928:	2700      	movs	r7, #0
    d92a:	42b8      	cmp	r0, r7
    d92c:	d016      	beq.n	d95c <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
    d92e:	f813 2b01 	ldrb.w	r2, [r3], #1
    d932:	2a0a      	cmp	r2, #10
    d934:	eb05 0a07 	add.w	sl, r5, r7
    d938:	d119      	bne.n	d96e <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    d93a:	6960      	ldr	r0, [r4, #20]
    d93c:	f7ff fa7e 	bl	ce3c <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    d940:	4649      	mov	r1, r9
    d942:	463a      	mov	r2, r7
    d944:	4620      	mov	r0, r4
    d946:	f7ff fd88 	bl	d45a <z_shell_write>
					z_cursor_next_line_move(shell);
    d94a:	6960      	ldr	r0, [r4, #20]
    d94c:	f7f5 ffdc 	bl	3908 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
    d950:	4641      	mov	r1, r8
    d952:	4620      	mov	r0, r4
					offset += idx + 1;
    d954:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
    d958:	f7f5 fe96 	bl	3688 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    d95c:	6960      	ldr	r0, [r4, #20]
    d95e:	1971      	adds	r1, r6, r5
    d960:	f7ff ffa3 	bl	d8aa <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
    d964:	6960      	ldr	r0, [r4, #20]
}
    d966:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
    d96a:	f7f5 bfcd 	b.w	3908 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    d96e:	3701      	adds	r7, #1
    d970:	e7db      	b.n	d92a <formatted_text_print.constprop.0+0x66>
    d972:	461f      	mov	r7, r3
    d974:	6960      	ldr	r0, [r4, #20]
    d976:	f7ff fa61 	bl	ce3c <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    d97a:	463a      	mov	r2, r7
    d97c:	4649      	mov	r1, r9
    d97e:	4620      	mov	r0, r4
    d980:	f7ff fd6b 	bl	d45a <z_shell_write>
		offset += length;
    d984:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    d986:	5d73      	ldrb	r3, [r6, r5]
    d988:	2b20      	cmp	r3, #32
    d98a:	d00a      	beq.n	d9a2 <formatted_text_print.constprop.0+0xde>
    d98c:	3b09      	subs	r3, #9
    d98e:	2b04      	cmp	r3, #4
    d990:	d907      	bls.n	d9a2 <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
    d992:	6960      	ldr	r0, [r4, #20]
    d994:	f7f5 ffb8 	bl	3908 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    d998:	4641      	mov	r1, r8
    d99a:	4620      	mov	r0, r4
    d99c:	f7f5 fe74 	bl	3688 <z_shell_op_cursor_horiz_move>
	while (true) {
    d9a0:	e79e      	b.n	d8e0 <formatted_text_print.constprop.0+0x1c>
			++offset;
    d9a2:	3501      	adds	r5, #1
    d9a4:	e7ef      	b.n	d986 <formatted_text_print.constprop.0+0xc2>
}
    d9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d9aa <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    d9aa:	6983      	ldr	r3, [r0, #24]
    d9ac:	2000      	movs	r0, #0
    d9ae:	6018      	str	r0, [r3, #0]
}
    d9b0:	4770      	bx	lr

0000d9b2 <z_shell_raw_fprintf>:
{
    d9b2:	b40e      	push	{r1, r2, r3}
    d9b4:	b503      	push	{r0, r1, lr}
    d9b6:	aa03      	add	r2, sp, #12
    d9b8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d9bc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d9be:	f7f5 fe01 	bl	35c4 <z_shell_fprintf_fmt>
}
    d9c2:	b002      	add	sp, #8
    d9c4:	f85d eb04 	ldr.w	lr, [sp], #4
    d9c8:	b003      	add	sp, #12
    d9ca:	4770      	bx	lr

0000d9cc <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d9cc:	6883      	ldr	r3, [r0, #8]
    d9ce:	f3bf 8f5b 	dmb	ish
    d9d2:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d9d6:	e853 2f00 	ldrex	r2, [r3]
    d9da:	f022 0208 	bic.w	r2, r2, #8
    d9de:	e843 2100 	strex	r1, r2, [r3]
    d9e2:	2900      	cmp	r1, #0
    d9e4:	d1f7      	bne.n	d9d6 <cmd_bacskpace_mode_backspace+0xa>
    d9e6:	f3bf 8f5b 	dmb	ish
}
    d9ea:	2000      	movs	r0, #0
    d9ec:	4770      	bx	lr

0000d9ee <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d9ee:	6883      	ldr	r3, [r0, #8]
    d9f0:	f3bf 8f5b 	dmb	ish
    d9f4:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d9f8:	e853 2f00 	ldrex	r2, [r3]
    d9fc:	f042 0208 	orr.w	r2, r2, #8
    da00:	e843 2100 	strex	r1, r2, [r3]
    da04:	2900      	cmp	r1, #0
    da06:	d1f7      	bne.n	d9f8 <cmd_bacskpace_mode_delete+0xa>
    da08:	f3bf 8f5b 	dmb	ish
}
    da0c:	2000      	movs	r0, #0
    da0e:	4770      	bx	lr

0000da10 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da10:	6883      	ldr	r3, [r0, #8]
    da12:	f3bf 8f5b 	dmb	ish
    da16:	f503 7318 	add.w	r3, r3, #608	; 0x260
    da1a:	e853 2f00 	ldrex	r2, [r3]
    da1e:	f022 0202 	bic.w	r2, r2, #2
    da22:	e843 2100 	strex	r1, r2, [r3]
    da26:	2900      	cmp	r1, #0
    da28:	d1f7      	bne.n	da1a <cmd_echo_off+0xa>
    da2a:	f3bf 8f5b 	dmb	ish
}
    da2e:	2000      	movs	r0, #0
    da30:	4770      	bx	lr

0000da32 <cmd_colors_off>:
    da32:	6883      	ldr	r3, [r0, #8]
    da34:	f3bf 8f5b 	dmb	ish
    da38:	f503 7318 	add.w	r3, r3, #608	; 0x260
    da3c:	e853 2f00 	ldrex	r2, [r3]
    da40:	f022 0210 	bic.w	r2, r2, #16
    da44:	e843 2100 	strex	r1, r2, [r3]
    da48:	2900      	cmp	r1, #0
    da4a:	d1f7      	bne.n	da3c <cmd_colors_off+0xa>
    da4c:	f3bf 8f5b 	dmb	ish
}
    da50:	2000      	movs	r0, #0
    da52:	4770      	bx	lr

0000da54 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    da54:	6883      	ldr	r3, [r0, #8]
    da56:	f3bf 8f5b 	dmb	ish
    da5a:	f503 7318 	add.w	r3, r3, #608	; 0x260
    da5e:	e853 2f00 	ldrex	r2, [r3]
    da62:	f042 0210 	orr.w	r2, r2, #16
    da66:	e843 2100 	strex	r1, r2, [r3]
    da6a:	2900      	cmp	r1, #0
    da6c:	d1f7      	bne.n	da5e <cmd_colors_on+0xa>
    da6e:	f3bf 8f5b 	dmb	ish
}
    da72:	2000      	movs	r0, #0
    da74:	4770      	bx	lr

0000da76 <cmd_echo_on>:
    da76:	6883      	ldr	r3, [r0, #8]
    da78:	f3bf 8f5b 	dmb	ish
    da7c:	f503 7318 	add.w	r3, r3, #608	; 0x260
    da80:	e853 2f00 	ldrex	r2, [r3]
    da84:	f042 0202 	orr.w	r2, r2, #2
    da88:	e843 2100 	strex	r1, r2, [r3]
    da8c:	2900      	cmp	r1, #0
    da8e:	d1f7      	bne.n	da80 <cmd_echo_on+0xa>
    da90:	f3bf 8f5b 	dmb	ish
}
    da94:	2000      	movs	r0, #0
    da96:	4770      	bx	lr

0000da98 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    da98:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    da9a:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    da9c:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
    da9e:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    daa2:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    daa4:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    daa6:	2200      	movs	r2, #0
	node->prev = NULL;
    daa8:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    daac:	8919      	ldrh	r1, [r3, #8]
    daae:	895b      	ldrh	r3, [r3, #10]
    dab0:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    dab2:	310c      	adds	r1, #12
    dab4:	f7fe fc01 	bl	c2ba <ring_buf_get_finish>

	return true;
}
    dab8:	2001      	movs	r0, #1
    daba:	bd08      	pop	{r3, pc}

0000dabc <z_shell_history_mode_exit>:
	history->current = NULL;
    dabc:	2300      	movs	r3, #0
    dabe:	60c3      	str	r3, [r0, #12]
}
    dac0:	4770      	bx	lr

0000dac2 <z_shell_history_get>:
{
    dac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dac4:	461f      	mov	r7, r3
	return list->head == list;
    dac6:	4603      	mov	r3, r0
    dac8:	4616      	mov	r6, r2
    daca:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    dace:	429c      	cmp	r4, r3
    dad0:	d102      	bne.n	dad8 <z_shell_history_get+0x16>
		*len = 0U;
    dad2:	2000      	movs	r0, #0
    dad4:	8038      	strh	r0, [r7, #0]
}
    dad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    dad8:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    dada:	b9b1      	cbnz	r1, db0a <z_shell_history_get+0x48>
		if (history->current == NULL) {
    dadc:	2d00      	cmp	r5, #0
    dade:	d0f8      	beq.n	dad2 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    dae0:	42ac      	cmp	r4, r5
    dae2:	d102      	bne.n	daea <z_shell_history_get+0x28>
	history->current = l_item;
    dae4:	2300      	movs	r3, #0
    dae6:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    dae8:	e7f3      	b.n	dad2 <z_shell_history_get+0x10>
    daea:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    daec:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    daee:	2c00      	cmp	r4, #0
    daf0:	d0ef      	beq.n	dad2 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    daf2:	8922      	ldrh	r2, [r4, #8]
    daf4:	f104 010c 	add.w	r1, r4, #12
    daf8:	4630      	mov	r0, r6
    dafa:	f000 fb79 	bl	e1f0 <memcpy>
		*len = h_item->len;
    dafe:	8923      	ldrh	r3, [r4, #8]
    db00:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    db02:	2200      	movs	r2, #0
    db04:	54f2      	strb	r2, [r6, r3]
		return true;
    db06:	2001      	movs	r0, #1
    db08:	e7e5      	b.n	dad6 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    db0a:	2d00      	cmp	r5, #0
    db0c:	d0ee      	beq.n	daec <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    db0e:	6883      	ldr	r3, [r0, #8]
    db10:	42ab      	cmp	r3, r5
    db12:	d0e7      	beq.n	dae4 <z_shell_history_get+0x22>
    db14:	682c      	ldr	r4, [r5, #0]
    db16:	e7e9      	b.n	daec <z_shell_history_get+0x2a>

0000db18 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    db18:	b538      	push	{r3, r4, r5, lr}
    db1a:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    db1c:	1d05      	adds	r5, r0, #4
    db1e:	6863      	ldr	r3, [r4, #4]
    db20:	42ab      	cmp	r3, r5
    db22:	d004      	beq.n	db2e <z_shell_history_purge+0x16>
    db24:	4620      	mov	r0, r4
    db26:	f7ff ffb7 	bl	da98 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    db2a:	2800      	cmp	r0, #0
    db2c:	d1f7      	bne.n	db1e <z_shell_history_purge+0x6>
	}
}
    db2e:	bd38      	pop	{r3, r4, r5, pc}

0000db30 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    db30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
    db34:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    db36:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    db3a:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    db3e:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    db40:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    db44:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    db46:	429d      	cmp	r5, r3
{
    db48:	4604      	mov	r4, r0
    db4a:	468a      	mov	sl, r1
    db4c:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    db4e:	d841      	bhi.n	dbd4 <z_shell_history_put+0xa4>
	history->current = NULL;
    db50:	2300      	movs	r3, #0
    db52:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    db54:	2a00      	cmp	r2, #0
    db56:	d03d      	beq.n	dbd4 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    db58:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    db5c:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    db5e:	4581      	cmp	r9, r0
    db60:	d12d      	bne.n	dbbe <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    db62:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    db64:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    db68:	6820      	ldr	r0, [r4, #0]
    db6a:	462a      	mov	r2, r5
    db6c:	a901      	add	r1, sp, #4
    db6e:	f7fe fb11 	bl	c194 <ring_buf_put_claim>
		if (claim_len < total_len) {
    db72:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    db74:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    db76:	d930      	bls.n	dbda <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
    db78:	6820      	ldr	r0, [r4, #0]
    db7a:	462a      	mov	r2, r5
    db7c:	a901      	add	r1, sp, #4
    db7e:	f7fe fb09 	bl	c194 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    db82:	4285      	cmp	r5, r0
    db84:	d12a      	bne.n	dbdc <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
    db86:	4631      	mov	r1, r6
    db88:	6820      	ldr	r0, [r4, #0]
    db8a:	f7fe fb30 	bl	c1ee <ring_buf_put_finish>
				padding += claim_len;
    db8e:	44b0      	add	r8, r6
    db90:	fa1f f888 	uxth.w	r8, r8
    db94:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    db96:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    db98:	4651      	mov	r1, sl
	item->len = len;
    db9a:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    db9c:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
    dba0:	463a      	mov	r2, r7
    dba2:	f105 000c 	add.w	r0, r5, #12
    dba6:	f000 fb23 	bl	e1f0 <memcpy>
	sys_dnode_t *const head = list->head;
    dbaa:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    dbac:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    dbae:	e9c5 3900 	strd	r3, r9, [r5]
    dbb2:	4631      	mov	r1, r6
	head->prev = node;
    dbb4:	605d      	str	r5, [r3, #4]
	list->head = node;
    dbb6:	6065      	str	r5, [r4, #4]
    dbb8:	f7fe fb19 	bl	c1ee <ring_buf_put_finish>
			break;
    dbbc:	e00a      	b.n	dbd4 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    dbbe:	9001      	str	r0, [sp, #4]
	if (l_item &&
    dbc0:	2800      	cmp	r0, #0
    dbc2:	d0cf      	beq.n	db64 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
    dbc4:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    dbc6:	4293      	cmp	r3, r2
    dbc8:	d1cc      	bne.n	db64 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    dbca:	300c      	adds	r0, #12
    dbcc:	f000 fae7 	bl	e19e <memcmp>
	   (h_item->len == len) &&
    dbd0:	2800      	cmp	r0, #0
    dbd2:	d1c7      	bne.n	db64 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    dbd4:	b003      	add	sp, #12
    dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    dbda:	d0dc      	beq.n	db96 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
    dbdc:	6820      	ldr	r0, [r4, #0]
    dbde:	2100      	movs	r1, #0
    dbe0:	f7fe fb05 	bl	c1ee <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    dbe4:	6863      	ldr	r3, [r4, #4]
    dbe6:	4599      	cmp	r9, r3
    dbe8:	d108      	bne.n	dbfc <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
    dbea:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    dbec:	2208      	movs	r2, #8
	buf->tail = 0;
    dbee:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    dbf2:	2100      	movs	r1, #0
    dbf4:	4410      	add	r0, r2
    dbf6:	f000 fb06 	bl	e206 <memset>
}
    dbfa:	e7b5      	b.n	db68 <z_shell_history_put+0x38>
    dbfc:	4620      	mov	r0, r4
    dbfe:	f7ff ff4b 	bl	da98 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    dc02:	2800      	cmp	r0, #0
    dc04:	d1b0      	bne.n	db68 <z_shell_history_put+0x38>
    dc06:	e7f0      	b.n	dbea <z_shell_history_put+0xba>

0000dc08 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    dc08:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    dc0a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    dc0e:	2300      	movs	r3, #0
    dc10:	60c3      	str	r3, [r0, #12]
}
    dc12:	4770      	bx	lr

0000dc14 <z_shell_has_wildcard>:
{
    dc14:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    dc16:	4604      	mov	r4, r0
    dc18:	b908      	cbnz	r0, dc1e <z_shell_has_wildcard+0xa>
	return false;
    dc1a:	2000      	movs	r0, #0
}
    dc1c:	bd10      	pop	{r4, pc}
    dc1e:	f000 fa91 	bl	e144 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    dc22:	2300      	movs	r3, #0
    dc24:	b280      	uxth	r0, r0
    dc26:	4283      	cmp	r3, r0
    dc28:	d2f7      	bcs.n	dc1a <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    dc2a:	5ce2      	ldrb	r2, [r4, r3]
    dc2c:	2a3f      	cmp	r2, #63	; 0x3f
    dc2e:	d003      	beq.n	dc38 <z_shell_has_wildcard+0x24>
    dc30:	2a2a      	cmp	r2, #42	; 0x2a
    dc32:	d001      	beq.n	dc38 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    dc34:	3301      	adds	r3, #1
    dc36:	e7f6      	b.n	dc26 <z_shell_has_wildcard+0x12>
			return true;
    dc38:	2001      	movs	r0, #1
    dc3a:	e7ef      	b.n	dc1c <z_shell_has_wildcard+0x8>

0000dc3c <z_shell_wildcard_prepare>:
{
    dc3c:	b510      	push	{r4, lr}
    dc3e:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    dc40:	6880      	ldr	r0, [r0, #8]
    dc42:	f44f 7280 	mov.w	r2, #256	; 0x100
    dc46:	2100      	movs	r1, #0
    dc48:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    dc4c:	f000 fadb 	bl	e206 <memset>
	memcpy(shell->ctx->temp_buff,
    dc50:	68a0      	ldr	r0, [r4, #8]
    dc52:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    dc54:	f100 0142 	add.w	r1, r0, #66	; 0x42
    dc58:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    dc5c:	f000 fac8 	bl	e1f0 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    dc60:	68a0      	ldr	r0, [r4, #8]
    dc62:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    dc66:	f7ff fa8a 	bl	d17e <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    dc6a:	68a0      	ldr	r0, [r4, #8]
    dc6c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    dc70:	f000 fa68 	bl	e144 <strlen>
    dc74:	68a3      	ldr	r3, [r4, #8]
    dc76:	3001      	adds	r0, #1
    dc78:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
    dc7c:	bd10      	pop	{r4, pc}

0000dc7e <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    dc7e:	b510      	push	{r4, lr}
    dc80:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    dc82:	6880      	ldr	r0, [r0, #8]
    dc84:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    dc88:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    dc8c:	3042      	adds	r0, #66	; 0x42
    dc8e:	f000 faaf 	bl	e1f0 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    dc92:	68a3      	ldr	r3, [r4, #8]
    dc94:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    dc98:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    dc9a:	bd10      	pop	{r4, pc}

0000dc9c <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    dc9c:	2300      	movs	r3, #0
    dc9e:	f7fe bedc 	b.w	ca5a <z_impl_z_log_msg2_static_create>

0000dca2 <usb_get_dev_data_by_cfg>:
	return list->head;
    dca2:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dca4:	b140      	cbz	r0, dcb8 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    dca6:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    dcaa:	685b      	ldr	r3, [r3, #4]
    dcac:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dcae:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    dcb2:	d001      	beq.n	dcb8 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    dcb4:	6840      	ldr	r0, [r0, #4]
    dcb6:	e7f5      	b.n	dca4 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    dcb8:	4770      	bx	lr

0000dcba <usb_get_dev_data_by_iface>:
	return list->head;
    dcba:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dcbc:	b150      	cbz	r0, dcd4 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    dcbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    dcc2:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    dcc4:	685b      	ldr	r3, [r3, #4]
    dcc6:	789b      	ldrb	r3, [r3, #2]
    dcc8:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dcca:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    dcce:	d001      	beq.n	dcd4 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    dcd0:	6840      	ldr	r0, [r0, #4]
    dcd2:	e7f3      	b.n	dcbc <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    dcd4:	4770      	bx	lr

0000dcd6 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    dcd6:	b530      	push	{r4, r5, lr}
	return list->head;
    dcd8:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dcda:	b188      	cbz	r0, dd00 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    dcdc:	f850 3c04 	ldr.w	r3, [r0, #-4]
    dce0:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    dce2:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    dce4:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dce6:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    dce8:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    dcea:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    dcec:	b2dc      	uxtb	r4, r3
    dcee:	42a5      	cmp	r5, r4
    dcf0:	d801      	bhi.n	dcf6 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    dcf2:	6840      	ldr	r0, [r0, #4]
    dcf4:	e7f1      	b.n	dcda <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    dcf6:	3301      	adds	r3, #1
    dcf8:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    dcfc:	428c      	cmp	r4, r1
    dcfe:	d1f5      	bne.n	dcec <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    dd00:	bd30      	pop	{r4, r5, pc}

0000dd02 <usb_transfer_is_busy>:
{
    dd02:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    dd04:	f7f6 fefe 	bl	4b04 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    dd08:	b128      	cbz	r0, dd16 <usb_transfer_is_busy+0x14>
    dd0a:	6840      	ldr	r0, [r0, #4]
    dd0c:	f110 0f10 	cmn.w	r0, #16
    dd10:	bf14      	ite	ne
    dd12:	2000      	movne	r0, #0
    dd14:	2001      	moveq	r0, #1
}
    dd16:	bd08      	pop	{r3, pc}

0000dd18 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    dd18:	1c4b      	adds	r3, r1, #1
    dd1a:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    dd1c:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    dd1e:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    dd20:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    dd24:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    dd26:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    dd2a:	4770      	bx	lr

0000dd2c <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    dd2c:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    dd30:	6f80      	ldr	r0, [r0, #120]	; 0x78
    dd32:	4718      	bx	r3

0000dd34 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    dd34:	6903      	ldr	r3, [r0, #16]
    dd36:	2200      	movs	r2, #0
    dd38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    dd3c:	4770      	bx	lr

0000dd3e <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dd3e:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    dd40:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    dd44:	b108      	cbz	r0, dd4a <cdc_acm_irq_tx_ready+0xc>
		return 1;
    dd46:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    dd4a:	4770      	bx	lr

0000dd4c <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    dd4c:	6903      	ldr	r3, [r0, #16]
    dd4e:	2200      	movs	r2, #0
    dd50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    dd54:	4770      	bx	lr

0000dd56 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    dd56:	6903      	ldr	r3, [r0, #16]
}
    dd58:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    dd5c:	4770      	bx	lr

0000dd5e <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dd5e:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    dd60:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    dd64:	b112      	cbz	r2, dd6c <cdc_acm_irq_is_pending+0xe>
    dd66:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    dd6a:	b92a      	cbnz	r2, dd78 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    dd6c:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    dd70:	b118      	cbz	r0, dd7a <cdc_acm_irq_is_pending+0x1c>
		return 0;
    dd72:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    dd76:	4770      	bx	lr
		return 1;
    dd78:	2001      	movs	r0, #1
}
    dd7a:	4770      	bx	lr

0000dd7c <cdc_acm_irq_update>:
}
    dd7c:	2001      	movs	r0, #1
    dd7e:	4770      	bx	lr

0000dd80 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dd80:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    dd82:	e9c3 1200 	strd	r1, r2, [r3]
}
    dd86:	4770      	bx	lr

0000dd88 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    dd88:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dd8a:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    dd8c:	d007      	beq.n	dd9e <cdc_acm_line_ctrl_get+0x16>
    dd8e:	2904      	cmp	r1, #4
    dd90:	d00a      	beq.n	dda8 <cdc_acm_line_ctrl_get+0x20>
    dd92:	2901      	cmp	r1, #1
    dd94:	d10d      	bne.n	ddb2 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    dd96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
    dd98:	6013      	str	r3, [r2, #0]
		return 0;
    dd9a:	2000      	movs	r0, #0
    dd9c:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    dd9e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    dda2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dda6:	e7f7      	b.n	dd98 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    dda8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    ddac:	f003 0301 	and.w	r3, r3, #1
    ddb0:	e7f2      	b.n	dd98 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    ddb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ddb6:	4770      	bx	lr

0000ddb8 <cdc_acm_fifo_read>:
{
    ddb8:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ddba:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    ddbc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    ddbe:	f7fe fa9a 	bl	c2f6 <ring_buf_get>
    ddc2:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    ddc4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    ddc6:	f7fe f9d4 	bl	c172 <ring_buf_is_empty>
    ddca:	b110      	cbz	r0, ddd2 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    ddcc:	2300      	movs	r3, #0
    ddce:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    ddd2:	4620      	mov	r0, r4
    ddd4:	bd38      	pop	{r3, r4, r5, pc}

0000ddd6 <cdc_acm_poll_in>:
{
    ddd6:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    ddd8:	2201      	movs	r2, #1
    ddda:	f7ff ffed 	bl	ddb8 <cdc_acm_fifo_read>
}
    ddde:	3801      	subs	r0, #1
    dde0:	bf18      	it	ne
    dde2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    dde6:	bd08      	pop	{r3, pc}

0000dde8 <z_log_msg2_static_create.constprop.0>:
    dde8:	2300      	movs	r3, #0
    ddea:	f7fe be36 	b.w	ca5a <z_impl_z_log_msg2_static_create>

0000ddee <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    ddee:	2940      	cmp	r1, #64	; 0x40
{
    ddf0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ddf2:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    ddf4:	d042      	beq.n	de7c <cdc_acm_line_ctrl_set+0x8e>
    ddf6:	d813      	bhi.n	de20 <cdc_acm_line_ctrl_set+0x32>
    ddf8:	2910      	cmp	r1, #16
    ddfa:	d032      	beq.n	de62 <cdc_acm_line_ctrl_set+0x74>
    ddfc:	d806      	bhi.n	de0c <cdc_acm_line_ctrl_set+0x1e>
    ddfe:	2901      	cmp	r1, #1
    de00:	d01e      	beq.n	de40 <cdc_acm_line_ctrl_set+0x52>
    de02:	2908      	cmp	r1, #8
    de04:	d01f      	beq.n	de46 <cdc_acm_line_ctrl_set+0x58>
    de06:	f06f 0012 	mvn.w	r0, #18
}
    de0a:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    de0c:	2920      	cmp	r1, #32
    de0e:	d1fa      	bne.n	de06 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    de10:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de14:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    de18:	b342      	cbz	r2, de6c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    de1a:	f041 0104 	orr.w	r1, r1, #4
    de1e:	e025      	b.n	de6c <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
    de20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    de24:	d033      	beq.n	de8e <cdc_acm_line_ctrl_set+0xa0>
    de26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    de2a:	d039      	beq.n	dea0 <cdc_acm_line_ctrl_set+0xb2>
    de2c:	2980      	cmp	r1, #128	; 0x80
    de2e:	d1ea      	bne.n	de06 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    de30:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de34:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    de38:	b1c2      	cbz	r2, de6c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    de3a:	f041 0110 	orr.w	r1, r1, #16
    de3e:	e015      	b.n	de6c <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    de40:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    de42:	2000      	movs	r0, #0
    de44:	e7e1      	b.n	de0a <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    de46:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de4a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    de4e:	b92a      	cbnz	r2, de5c <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    de50:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    de54:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    de56:	f7f7 fb37 	bl	54c8 <cdc_acm_send_notification.isra.0>
    de5a:	e7f2      	b.n	de42 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    de5c:	f041 0101 	orr.w	r1, r1, #1
    de60:	e7f6      	b.n	de50 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    de62:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de66:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    de6a:	b922      	cbnz	r2, de76 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    de6c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    de70:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de74:	e7ef      	b.n	de56 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    de76:	f041 0102 	orr.w	r1, r1, #2
    de7a:	e7f7      	b.n	de6c <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    de7c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de80:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    de84:	2a00      	cmp	r2, #0
    de86:	d0f1      	beq.n	de6c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    de88:	f041 0108 	orr.w	r1, r1, #8
    de8c:	e7ee      	b.n	de6c <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    de8e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    de92:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    de96:	2a00      	cmp	r2, #0
    de98:	d0e8      	beq.n	de6c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    de9a:	f041 0120 	orr.w	r1, r1, #32
    de9e:	e7e5      	b.n	de6c <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    dea0:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dea4:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    dea8:	2a00      	cmp	r2, #0
    deaa:	d0df      	beq.n	de6c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    deac:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    deb0:	e7dc      	b.n	de6c <cdc_acm_line_ctrl_set+0x7e>

0000deb2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    deb2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    deb4:	6800      	ldr	r0, [r0, #0]
    deb6:	f7f7 bccb 	b.w	5850 <z_arm_fatal_error>

0000deba <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    deba:	2100      	movs	r1, #0
    debc:	2001      	movs	r0, #1
    debe:	f7f7 bcc7 	b.w	5850 <z_arm_fatal_error>

0000dec2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    dec2:	b508      	push	{r3, lr}
	handler();
    dec4:	f7f7 fd7c 	bl	59c0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    dec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    decc:	f7f7 be40 	b.w	5b50 <z_arm_exc_exit>

0000ded0 <z_log_msg2_static_create.constprop.0>:
    ded0:	2300      	movs	r3, #0
    ded2:	f7fe bdc2 	b.w	ca5a <z_impl_z_log_msg2_static_create>

0000ded6 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    ded6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    deda:	4684      	mov	ip, r0
    dedc:	4688      	mov	r8, r1
	register const char *s = nptr;
    dede:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    dee0:	4621      	mov	r1, r4
    dee2:	f814 3b01 	ldrb.w	r3, [r4], #1
    dee6:	2b20      	cmp	r3, #32
    dee8:	d0fa      	beq.n	dee0 <strtol+0xa>
    deea:	f1a3 0009 	sub.w	r0, r3, #9
    deee:	2804      	cmp	r0, #4
    def0:	d9f6      	bls.n	dee0 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
    def2:	2b2d      	cmp	r3, #45	; 0x2d
    def4:	d12d      	bne.n	df52 <strtol+0x7c>
		neg = 1;
		c = *s++;
    def6:	784b      	ldrb	r3, [r1, #1]
    def8:	1c8c      	adds	r4, r1, #2
		neg = 1;
    defa:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    defc:	2a00      	cmp	r2, #0
    defe:	d05a      	beq.n	dfb6 <strtol+0xe0>
    df00:	2a10      	cmp	r2, #16
    df02:	d109      	bne.n	df18 <strtol+0x42>
    df04:	2b30      	cmp	r3, #48	; 0x30
    df06:	d107      	bne.n	df18 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    df08:	7823      	ldrb	r3, [r4, #0]
    df0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    df0e:	2b58      	cmp	r3, #88	; 0x58
    df10:	d14c      	bne.n	dfac <strtol+0xd6>
		c = s[1];
    df12:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    df14:	2210      	movs	r2, #16
		s += 2;
    df16:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    df18:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    df1c:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    df1e:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    df20:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    df24:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    df26:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    df2a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    df2e:	2d09      	cmp	r5, #9
    df30:	d815      	bhi.n	df5e <strtol+0x88>
			c -= '0';
    df32:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    df34:	429a      	cmp	r2, r3
    df36:	dd22      	ble.n	df7e <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    df38:	1c75      	adds	r5, r6, #1
    df3a:	d007      	beq.n	df4c <strtol+0x76>
    df3c:	4570      	cmp	r0, lr
    df3e:	d81b      	bhi.n	df78 <strtol+0xa2>
    df40:	d101      	bne.n	df46 <strtol+0x70>
    df42:	454b      	cmp	r3, r9
    df44:	dc18      	bgt.n	df78 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    df46:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    df4a:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    df4c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    df50:	e7eb      	b.n	df2a <strtol+0x54>
	} else if (c == '+') {
    df52:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    df54:	bf04      	itt	eq
    df56:	784b      	ldrbeq	r3, [r1, #1]
    df58:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    df5a:	2100      	movs	r1, #0
    df5c:	e7ce      	b.n	defc <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    df5e:	f043 0520 	orr.w	r5, r3, #32
    df62:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    df64:	2d19      	cmp	r5, #25
    df66:	d80a      	bhi.n	df7e <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    df68:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    df6c:	2d1a      	cmp	r5, #26
    df6e:	bf34      	ite	cc
    df70:	2537      	movcc	r5, #55	; 0x37
    df72:	2557      	movcs	r5, #87	; 0x57
    df74:	1b5b      	subs	r3, r3, r5
    df76:	e7dd      	b.n	df34 <strtol+0x5e>
			any = -1;
    df78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    df7c:	e7e6      	b.n	df4c <strtol+0x76>
		}
	}

	if (any < 0) {
    df7e:	1c73      	adds	r3, r6, #1
    df80:	d109      	bne.n	df96 <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    df82:	f7fc f8bf 	bl	a104 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    df86:	2322      	movs	r3, #34	; 0x22
    df88:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    df8a:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    df8c:	f1b8 0f00 	cmp.w	r8, #0
    df90:	d107      	bne.n	dfa2 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    df92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    df96:	b101      	cbz	r1, df9a <strtol+0xc4>
		acc = -acc;
    df98:	4240      	negs	r0, r0
	if (endptr != NULL) {
    df9a:	f1b8 0f00 	cmp.w	r8, #0
    df9e:	d0f8      	beq.n	df92 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
    dfa0:	b10e      	cbz	r6, dfa6 <strtol+0xd0>
    dfa2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    dfa6:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    dfaa:	e7f2      	b.n	df92 <strtol+0xbc>
	if (base == 0) {
    dfac:	2330      	movs	r3, #48	; 0x30
    dfae:	2a00      	cmp	r2, #0
    dfb0:	d1b2      	bne.n	df18 <strtol+0x42>
		base = c == '0' ? 8 : 10;
    dfb2:	2208      	movs	r2, #8
    dfb4:	e7b0      	b.n	df18 <strtol+0x42>
	if ((base == 0 || base == 16) &&
    dfb6:	2b30      	cmp	r3, #48	; 0x30
    dfb8:	d0a6      	beq.n	df08 <strtol+0x32>
		base = c == '0' ? 8 : 10;
    dfba:	220a      	movs	r2, #10
    dfbc:	e7ac      	b.n	df18 <strtol+0x42>

0000dfbe <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    dfbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfc2:	4607      	mov	r7, r0
    dfc4:	4688      	mov	r8, r1
	register const char *s = nptr;
    dfc6:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    dfc8:	4621      	mov	r1, r4
    dfca:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    dfce:	2b20      	cmp	r3, #32
    dfd0:	d0fa      	beq.n	dfc8 <strtoul+0xa>
    dfd2:	f1a3 0009 	sub.w	r0, r3, #9
    dfd6:	2804      	cmp	r0, #4
    dfd8:	d9f6      	bls.n	dfc8 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
    dfda:	2b2d      	cmp	r3, #45	; 0x2d
    dfdc:	d12f      	bne.n	e03e <strtoul+0x80>
		neg = 1;
		c = *s++;
    dfde:	784b      	ldrb	r3, [r1, #1]
    dfe0:	1c8c      	adds	r4, r1, #2
		neg = 1;
    dfe2:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    dfe6:	2a00      	cmp	r2, #0
    dfe8:	d05e      	beq.n	e0a8 <strtoul+0xea>
    dfea:	2a10      	cmp	r2, #16
    dfec:	d109      	bne.n	e002 <strtoul+0x44>
    dfee:	2b30      	cmp	r3, #48	; 0x30
    dff0:	d107      	bne.n	e002 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    dff2:	7823      	ldrb	r3, [r4, #0]
    dff4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    dff8:	2b58      	cmp	r3, #88	; 0x58
    dffa:	d150      	bne.n	e09e <strtoul+0xe0>
		c = s[1];
    dffc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    dffe:	2210      	movs	r2, #16
		s += 2;
    e000:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    e002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    e006:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    e008:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    e00c:	fb02 fe01 	mul.w	lr, r2, r1
    e010:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
    e014:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e016:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    e01a:	2d09      	cmp	r5, #9
    e01c:	d816      	bhi.n	e04c <strtoul+0x8e>
			c -= '0';
    e01e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    e020:	429a      	cmp	r2, r3
    e022:	dd23      	ble.n	e06c <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    e024:	2e00      	cmp	r6, #0
    e026:	db1e      	blt.n	e066 <strtoul+0xa8>
    e028:	4288      	cmp	r0, r1
    e02a:	d81c      	bhi.n	e066 <strtoul+0xa8>
    e02c:	d101      	bne.n	e032 <strtoul+0x74>
    e02e:	4573      	cmp	r3, lr
    e030:	dc19      	bgt.n	e066 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    e032:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    e036:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    e038:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    e03c:	e7eb      	b.n	e016 <strtoul+0x58>
	} else if (c == '+') {
    e03e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    e040:	bf04      	itt	eq
    e042:	784b      	ldrbeq	r3, [r1, #1]
    e044:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    e046:	f04f 0c00 	mov.w	ip, #0
    e04a:	e7cc      	b.n	dfe6 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    e04c:	f043 0520 	orr.w	r5, r3, #32
    e050:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    e052:	2d19      	cmp	r5, #25
    e054:	d80a      	bhi.n	e06c <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    e056:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    e05a:	2d1a      	cmp	r5, #26
    e05c:	bf34      	ite	cc
    e05e:	2537      	movcc	r5, #55	; 0x37
    e060:	2557      	movcs	r5, #87	; 0x57
    e062:	1b5b      	subs	r3, r3, r5
    e064:	e7dc      	b.n	e020 <strtoul+0x62>
			any = -1;
    e066:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    e06a:	e7e5      	b.n	e038 <strtoul+0x7a>
		}
	}
	if (any < 0) {
    e06c:	2e00      	cmp	r6, #0
    e06e:	da0a      	bge.n	e086 <strtoul+0xc8>
    e070:	f7fc f848 	bl	a104 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    e074:	2322      	movs	r3, #34	; 0x22
    e076:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    e078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
    e07c:	f1b8 0f00 	cmp.w	r8, #0
    e080:	d109      	bne.n	e096 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
    e086:	f1bc 0f00 	cmp.w	ip, #0
    e08a:	d000      	beq.n	e08e <strtoul+0xd0>
		acc = -acc;
    e08c:	4240      	negs	r0, r0
	if (endptr != NULL) {
    e08e:	f1b8 0f00 	cmp.w	r8, #0
    e092:	d0f6      	beq.n	e082 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
    e094:	b106      	cbz	r6, e098 <strtoul+0xda>
    e096:	1e67      	subs	r7, r4, #1
    e098:	f8c8 7000 	str.w	r7, [r8]
	return acc;
    e09c:	e7f1      	b.n	e082 <strtoul+0xc4>
	if (base == 0) {
    e09e:	2330      	movs	r3, #48	; 0x30
    e0a0:	2a00      	cmp	r2, #0
    e0a2:	d1ae      	bne.n	e002 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
    e0a4:	2208      	movs	r2, #8
    e0a6:	e7ac      	b.n	e002 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
    e0a8:	2b30      	cmp	r3, #48	; 0x30
    e0aa:	d0a2      	beq.n	dff2 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
    e0ac:	220a      	movs	r2, #10
    e0ae:	e7a8      	b.n	e002 <strtoul+0x44>

0000e0b0 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    e0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    e0b4:	f891 8000 	ldrb.w	r8, [r1]
{
    e0b8:	4605      	mov	r5, r0
	if (c != 0) {
    e0ba:	f1b8 0f00 	cmp.w	r8, #0
    e0be:	d010      	beq.n	e0e2 <strstr+0x32>
	c = *find++;
    e0c0:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    e0c2:	4620      	mov	r0, r4
    e0c4:	f000 f83e 	bl	e144 <strlen>
    e0c8:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    e0ca:	462e      	mov	r6, r5
    e0cc:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    e0d0:	b163      	cbz	r3, e0ec <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    e0d2:	4598      	cmp	r8, r3
    e0d4:	d108      	bne.n	e0e8 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    e0d6:	463a      	mov	r2, r7
    e0d8:	4621      	mov	r1, r4
    e0da:	4630      	mov	r0, r6
    e0dc:	f000 f84e 	bl	e17c <strncmp>
    e0e0:	b910      	cbnz	r0, e0e8 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
    e0e2:	4628      	mov	r0, r5
    e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    e0e8:	4635      	mov	r5, r6
    e0ea:	e7ee      	b.n	e0ca <strstr+0x1a>
					return NULL;
    e0ec:	461d      	mov	r5, r3
    e0ee:	e7f8      	b.n	e0e2 <strstr+0x32>

0000e0f0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    e0f0:	3901      	subs	r1, #1
    e0f2:	4603      	mov	r3, r0
    e0f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    e0f8:	b90a      	cbnz	r2, e0fe <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    e0fa:	701a      	strb	r2, [r3, #0]

	return dest;
}
    e0fc:	4770      	bx	lr
		*d = *s;
    e0fe:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    e102:	e7f7      	b.n	e0f4 <strcpy+0x4>

0000e104 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    e104:	b570      	push	{r4, r5, r6, lr}
    e106:	4605      	mov	r5, r0
    e108:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    e10a:	b142      	cbz	r2, e11e <strncpy+0x1a>
    e10c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    e110:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    e112:	b92c      	cbnz	r4, e120 <strncpy+0x1c>
    e114:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    e116:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    e11a:	429a      	cmp	r2, r3
    e11c:	d1fb      	bne.n	e116 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    e11e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    e120:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    e124:	4632      	mov	r2, r6
    e126:	e7ef      	b.n	e108 <strncpy+0x4>

0000e128 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    e128:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    e12a:	4603      	mov	r3, r0
    e12c:	781a      	ldrb	r2, [r3, #0]
    e12e:	428a      	cmp	r2, r1
    e130:	4618      	mov	r0, r3
    e132:	f103 0301 	add.w	r3, r3, #1
    e136:	d004      	beq.n	e142 <strchr+0x1a>
    e138:	2a00      	cmp	r2, #0
    e13a:	d1f7      	bne.n	e12c <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    e13c:	2900      	cmp	r1, #0
    e13e:	bf18      	it	ne
    e140:	2000      	movne	r0, #0
}
    e142:	4770      	bx	lr

0000e144 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    e144:	4603      	mov	r3, r0
	size_t n = 0;
    e146:	2000      	movs	r0, #0

	while (*s != '\0') {
    e148:	5c1a      	ldrb	r2, [r3, r0]
    e14a:	b902      	cbnz	r2, e14e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    e14c:	4770      	bx	lr
		n++;
    e14e:	3001      	adds	r0, #1
    e150:	e7fa      	b.n	e148 <strlen+0x4>

0000e152 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    e152:	4603      	mov	r3, r0
	size_t n = 0;
    e154:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    e156:	5c1a      	ldrb	r2, [r3, r0]
    e158:	b10a      	cbz	r2, e15e <strnlen+0xc>
    e15a:	4288      	cmp	r0, r1
    e15c:	d100      	bne.n	e160 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    e15e:	4770      	bx	lr
		n++;
    e160:	3001      	adds	r0, #1
    e162:	e7f8      	b.n	e156 <strnlen+0x4>

0000e164 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    e164:	1e43      	subs	r3, r0, #1
    e166:	3901      	subs	r1, #1
    e168:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e16c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e170:	4282      	cmp	r2, r0
    e172:	d101      	bne.n	e178 <strcmp+0x14>
    e174:	2a00      	cmp	r2, #0
    e176:	d1f7      	bne.n	e168 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    e178:	1a10      	subs	r0, r2, r0
    e17a:	4770      	bx	lr

0000e17c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    e17c:	b510      	push	{r4, lr}
    e17e:	3901      	subs	r1, #1
    e180:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    e182:	4282      	cmp	r2, r0
    e184:	d009      	beq.n	e19a <strncmp+0x1e>
    e186:	7803      	ldrb	r3, [r0, #0]
    e188:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e18c:	42a3      	cmp	r3, r4
    e18e:	d100      	bne.n	e192 <strncmp+0x16>
    e190:	b90b      	cbnz	r3, e196 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    e192:	1b18      	subs	r0, r3, r4
    e194:	e002      	b.n	e19c <strncmp+0x20>
		s1++;
    e196:	3001      	adds	r0, #1
		n--;
    e198:	e7f3      	b.n	e182 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
    e19a:	2000      	movs	r0, #0
}
    e19c:	bd10      	pop	{r4, pc}

0000e19e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    e19e:	b510      	push	{r4, lr}
    e1a0:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    e1a2:	b15a      	cbz	r2, e1bc <memcmp+0x1e>
    e1a4:	3901      	subs	r1, #1
    e1a6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    e1a8:	f813 0b01 	ldrb.w	r0, [r3], #1
    e1ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    e1b0:	42a3      	cmp	r3, r4
    e1b2:	d001      	beq.n	e1b8 <memcmp+0x1a>
    e1b4:	4290      	cmp	r0, r2
    e1b6:	d0f7      	beq.n	e1a8 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    e1b8:	1a80      	subs	r0, r0, r2
}
    e1ba:	bd10      	pop	{r4, pc}
		return 0;
    e1bc:	4610      	mov	r0, r2
    e1be:	e7fc      	b.n	e1ba <memcmp+0x1c>

0000e1c0 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    e1c0:	1a43      	subs	r3, r0, r1
    e1c2:	4293      	cmp	r3, r2
{
    e1c4:	b510      	push	{r4, lr}
    e1c6:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    e1ca:	d308      	bcc.n	e1de <memmove+0x1e>
    e1cc:	3901      	subs	r1, #1
	char *dest = d;
    e1ce:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    e1d0:	429a      	cmp	r2, r3
    e1d2:	d007      	beq.n	e1e4 <memmove+0x24>
			*dest = *src;
    e1d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e1d8:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    e1dc:	e7f8      	b.n	e1d0 <memmove+0x10>
    e1de:	440a      	add	r2, r1
		while (n > 0) {
    e1e0:	428a      	cmp	r2, r1
    e1e2:	d100      	bne.n	e1e6 <memmove+0x26>
		}
	}

	return d;
}
    e1e4:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    e1e6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    e1ea:	f803 4d01 	strb.w	r4, [r3, #-1]!
    e1ee:	e7f7      	b.n	e1e0 <memmove+0x20>

0000e1f0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    e1f0:	b510      	push	{r4, lr}
    e1f2:	1e43      	subs	r3, r0, #1
    e1f4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    e1f6:	4291      	cmp	r1, r2
    e1f8:	d100      	bne.n	e1fc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    e1fa:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    e1fc:	f811 4b01 	ldrb.w	r4, [r1], #1
    e200:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    e204:	e7f7      	b.n	e1f6 <memcpy+0x6>

0000e206 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    e206:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    e208:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    e20a:	4603      	mov	r3, r0
	while (n > 0) {
    e20c:	4293      	cmp	r3, r2
    e20e:	d100      	bne.n	e212 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    e210:	4770      	bx	lr
		*(d_byte++) = c_byte;
    e212:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    e216:	e7f9      	b.n	e20c <memset+0x6>

0000e218 <_stdout_hook_default>:
}
    e218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e21c:	4770      	bx	lr

0000e21e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    e21e:	684b      	ldr	r3, [r1, #4]
    e220:	2b01      	cmp	r3, #1
    e222:	dd07      	ble.n	e234 <sprintf_out+0x16>
		*(p->ptr) = c;
    e224:	680b      	ldr	r3, [r1, #0]
    e226:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    e228:	680b      	ldr	r3, [r1, #0]
    e22a:	3301      	adds	r3, #1
    e22c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    e22e:	684b      	ldr	r3, [r1, #4]
    e230:	3b01      	subs	r3, #1
    e232:	604b      	str	r3, [r1, #4]
}
    e234:	2000      	movs	r0, #0
    e236:	4770      	bx	lr

0000e238 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    e238:	b084      	sub	sp, #16
    e23a:	ab04      	add	r3, sp, #16
    e23c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    e240:	f89d 3004 	ldrb.w	r3, [sp, #4]
    e244:	2b06      	cmp	r3, #6
    e246:	d108      	bne.n	e25a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    e248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e24c:	2201      	movs	r2, #1
    e24e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    e252:	f3bf 8f4f 	dsb	sy
        __WFE();
    e256:	bf20      	wfe
    while (true)
    e258:	e7fd      	b.n	e256 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    e25a:	b004      	add	sp, #16
    e25c:	4770      	bx	lr

0000e25e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    e25e:	b084      	sub	sp, #16
    e260:	ab04      	add	r3, sp, #16
    e262:	e903 0007 	stmdb	r3, {r0, r1, r2}
    e266:	2300      	movs	r3, #0
    e268:	f383 8811 	msr	BASEPRI, r3
    e26c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e270:	b004      	add	sp, #16
    e272:	4770      	bx	lr

0000e274 <z_impl_gpio_pin_configure.isra.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
    e274:	b4f0      	push	{r4, r5, r6, r7}
    e276:	4613      	mov	r3, r2
	struct gpio_driver_data *data =
    e278:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    e27a:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e27c:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    e27e:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    e280:	bf48      	it	mi
    e282:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e286:	2501      	movs	r5, #1
    e288:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    e28a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    e28e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e290:	bf4c      	ite	mi
    e292:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    e294:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    e296:	683b      	ldr	r3, [r7, #0]
    e298:	6034      	str	r4, [r6, #0]
}
    e29a:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    e29c:	4718      	bx	r3

0000e29e <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    e29e:	6903      	ldr	r3, [r0, #16]
{
    e2a0:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    e2a2:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    e2a6:	2300      	movs	r3, #0
    e2a8:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    e2aa:	7f83      	ldrb	r3, [r0, #30]
{
    e2ac:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    e2ae:	b113      	cbz	r3, e2b6 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    e2b0:	7a40      	ldrb	r0, [r0, #9]
    e2b2:	f000 fc67 	bl	eb84 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    e2b6:	2301      	movs	r3, #1
    e2b8:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    e2ba:	2300      	movs	r3, #0
    e2bc:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    e2be:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    e2c0:	77a3      	strb	r3, [r4, #30]
}
    e2c2:	bd10      	pop	{r4, pc}

0000e2c4 <z_log_msg2_static_create.constprop.0>:
    e2c4:	2300      	movs	r3, #0
    e2c6:	f7fe bbc8 	b.w	ca5a <z_impl_z_log_msg2_static_create>

0000e2ca <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    e2ca:	f7fc bb03 	b.w	a8d4 <z_impl_k_mutex_lock>

0000e2ce <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    e2ce:	f7fc bb79 	b.w	a9c4 <z_impl_k_mutex_unlock>

0000e2d2 <usb_dc_ep_read>:
{
    e2d2:	b570      	push	{r4, r5, r6, lr}
    e2d4:	4604      	mov	r4, r0
    e2d6:	460e      	mov	r6, r1
    e2d8:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    e2da:	f7f8 ff3f 	bl	715c <usb_dc_ep_read_wait>
	if (ret) {
    e2de:	b930      	cbnz	r0, e2ee <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    e2e0:	b906      	cbnz	r6, e2e4 <usb_dc_ep_read+0x12>
    e2e2:	b125      	cbz	r5, e2ee <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    e2e4:	4620      	mov	r0, r4
}
    e2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    e2ea:	f7f8 bf99 	b.w	7220 <usb_dc_ep_read_continue>
}
    e2ee:	bd70      	pop	{r4, r5, r6, pc}

0000e2f0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e2f0:	6903      	ldr	r3, [r0, #16]
    e2f2:	b2c9      	uxtb	r1, r1
    e2f4:	220c      	movs	r2, #12
    e2f6:	fb01 3302 	mla	r3, r1, r2, r3
    e2fa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    e2fc:	f000 0007 	and.w	r0, r0, #7
    e300:	4770      	bx	lr

0000e302 <set_on_state>:
	__asm__ volatile(
    e302:	f04f 0320 	mov.w	r3, #32
    e306:	f3ef 8211 	mrs	r2, BASEPRI
    e30a:	f383 8812 	msr	BASEPRI_MAX, r3
    e30e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e312:	6803      	ldr	r3, [r0, #0]
    e314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e318:	f043 0302 	orr.w	r3, r3, #2
    e31c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e31e:	f382 8811 	msr	BASEPRI, r2
    e322:	f3bf 8f6f 	isb	sy
}
    e326:	4770      	bx	lr

0000e328 <stop>:
{
    e328:	4603      	mov	r3, r0
    e32a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    e32c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    e32e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    e330:	f04f 0420 	mov.w	r4, #32
    e334:	f3ef 8611 	mrs	r6, BASEPRI
    e338:	f384 8812 	msr	BASEPRI_MAX, r4
    e33c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e340:	250c      	movs	r5, #12
    e342:	fb05 0401 	mla	r4, r5, r1, r0
    e346:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e348:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    e34c:	d001      	beq.n	e352 <stop+0x2a>
    e34e:	42a2      	cmp	r2, r4
    e350:	d111      	bne.n	e376 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e352:	fb05 0001 	mla	r0, r5, r1, r0
    e356:	2201      	movs	r2, #1
    e358:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    e35a:	2000      	movs	r0, #0
	__asm__ volatile(
    e35c:	f386 8811 	msr	BASEPRI, r6
    e360:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e364:	b930      	cbnz	r0, e374 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    e366:	685b      	ldr	r3, [r3, #4]
    e368:	220c      	movs	r2, #12
    e36a:	fb02 3101 	mla	r1, r2, r1, r3
    e36e:	684b      	ldr	r3, [r1, #4]
    e370:	4798      	blx	r3
	return 0;
    e372:	2000      	movs	r0, #0
}
    e374:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    e376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e37a:	e7ef      	b.n	e35c <stop+0x34>

0000e37c <api_stop>:
	return stop(dev, subsys, CTX_API);
    e37c:	2280      	movs	r2, #128	; 0x80
    e37e:	f7ff bfd3 	b.w	e328 <stop>

0000e382 <async_start>:
{
    e382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e384:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    e386:	6904      	ldr	r4, [r0, #16]
{
    e388:	4605      	mov	r5, r0
    e38a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    e38c:	f04f 0020 	mov.w	r0, #32
    e390:	f3ef 8c11 	mrs	ip, BASEPRI
    e394:	f380 8812 	msr	BASEPRI_MAX, r0
    e398:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e39c:	260c      	movs	r6, #12
    e39e:	fb06 4601 	mla	r6, r6, r1, r4
    e3a2:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e3a4:	f000 0e07 	and.w	lr, r0, #7
    e3a8:	f1be 0f01 	cmp.w	lr, #1
    e3ac:	d110      	bne.n	e3d0 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e3ae:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    e3b0:	2600      	movs	r6, #0
	__asm__ volatile(
    e3b2:	f38c 8811 	msr	BASEPRI, ip
    e3b6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e3ba:	b93e      	cbnz	r6, e3cc <async_start+0x4a>
	subdata->cb = cb;
    e3bc:	200c      	movs	r0, #12
    e3be:	4341      	muls	r1, r0
    e3c0:	440c      	add	r4, r1
	subdata->user_data = user_data;
    e3c2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    e3c6:	686b      	ldr	r3, [r5, #4]
    e3c8:	585b      	ldr	r3, [r3, r1]
    e3ca:	4798      	blx	r3
}
    e3cc:	4630      	mov	r0, r6
    e3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    e3d0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    e3d4:	4287      	cmp	r7, r0
    e3d6:	bf14      	ite	ne
    e3d8:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    e3dc:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    e3e0:	e7e7      	b.n	e3b2 <async_start+0x30>

0000e3e2 <api_start>:
{
    e3e2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e3e4:	2480      	movs	r4, #128	; 0x80
    e3e6:	9400      	str	r4, [sp, #0]
    e3e8:	f7ff ffcb 	bl	e382 <async_start>
}
    e3ec:	b002      	add	sp, #8
    e3ee:	bd10      	pop	{r4, pc}

0000e3f0 <onoff_started_callback>:
	return &data->mgr[type];
    e3f0:	6900      	ldr	r0, [r0, #16]
{
    e3f2:	b410      	push	{r4}
	return &data->mgr[type];
    e3f4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    e3f6:	241c      	movs	r4, #28
    e3f8:	fb03 0004 	mla	r0, r3, r4, r0
    e3fc:	2100      	movs	r1, #0
}
    e3fe:	bc10      	pop	{r4}
	notify(mgr, 0);
    e400:	4710      	bx	r2

0000e402 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e402:	2000      	movs	r0, #0
    e404:	f000 ba6a 	b.w	e8dc <nrfx_clock_start>

0000e408 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e408:	2000      	movs	r0, #0
    e40a:	f7fa ba01 	b.w	8810 <nrfx_clock_stop>

0000e40e <blocking_start_callback>:
{
    e40e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e410:	f7fc bb50 	b.w	aab4 <z_impl_k_sem_give>

0000e414 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e414:	6843      	ldr	r3, [r0, #4]
    e416:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e418:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    e41c:	600b      	str	r3, [r1, #0]
}
    e41e:	2000      	movs	r0, #0
    e420:	4770      	bx	lr

0000e422 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e422:	6843      	ldr	r3, [r0, #4]
    e424:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    e426:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    e42a:	4042      	eors	r2, r0
    e42c:	400a      	ands	r2, r1
    e42e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    e430:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    e434:	2000      	movs	r0, #0
    e436:	4770      	bx	lr

0000e438 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e438:	6843      	ldr	r3, [r0, #4]
    e43a:	685b      	ldr	r3, [r3, #4]
}
    e43c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    e43e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    e442:	4770      	bx	lr

0000e444 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e444:	6843      	ldr	r3, [r0, #4]
    e446:	685b      	ldr	r3, [r3, #4]
}
    e448:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    e44a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    e44e:	4770      	bx	lr

0000e450 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e450:	6843      	ldr	r3, [r0, #4]
    e452:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e454:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    e458:	404b      	eors	r3, r1
    p_reg->OUT = value;
    e45a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    e45e:	2000      	movs	r0, #0
    e460:	4770      	bx	lr

0000e462 <gpio_nrfx_manage_callback>:
	return port->data;
    e462:	6903      	ldr	r3, [r0, #16]
	return list->head;
    e464:	6858      	ldr	r0, [r3, #4]
{
    e466:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    e468:	b158      	cbz	r0, e482 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e46a:	2400      	movs	r4, #0
    e46c:	4281      	cmp	r1, r0
    e46e:	d112      	bne.n	e496 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    e470:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    e472:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    e474:	b954      	cbnz	r4, e48c <gpio_nrfx_manage_callback+0x2a>
    e476:	428d      	cmp	r5, r1
	list->head = node;
    e478:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e47a:	d100      	bne.n	e47e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    e47c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    e47e:	2000      	movs	r0, #0
    e480:	6008      	str	r0, [r1, #0]
	if (set) {
    e482:	b96a      	cbnz	r2, e4a0 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    e484:	2000      	movs	r0, #0
}
    e486:	bd30      	pop	{r4, r5, pc}
    e488:	4628      	mov	r0, r5
    e48a:	e7ef      	b.n	e46c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    e48c:	428d      	cmp	r5, r1
	parent->next = child;
    e48e:	6020      	str	r0, [r4, #0]
	list->tail = node;
    e490:	bf08      	it	eq
    e492:	609c      	streq	r4, [r3, #8]
}
    e494:	e7f3      	b.n	e47e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    e496:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e498:	4604      	mov	r4, r0
    e49a:	2d00      	cmp	r5, #0
    e49c:	d1f4      	bne.n	e488 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    e49e:	b13a      	cbz	r2, e4b0 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    e4a0:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    e4a2:	685a      	ldr	r2, [r3, #4]
    e4a4:	600a      	str	r2, [r1, #0]
	list->head = node;
    e4a6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d1eb      	bne.n	e484 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    e4ac:	6099      	str	r1, [r3, #8]
}
    e4ae:	e7ea      	b.n	e486 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    e4b0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e4b4:	e7e7      	b.n	e486 <gpio_nrfx_manage_callback+0x24>

0000e4b6 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    e4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    e4b8:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e4bc:	2908      	cmp	r1, #8
    e4be:	6e66      	ldr	r6, [r4, #100]	; 0x64
    e4c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
    e4c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e4c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    e4c6:	ea4f 2515 	mov.w	r5, r5, lsr #8
    e4ca:	ea4f 6303 	mov.w	r3, r3, lsl #24
    e4ce:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    e4d2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    e4d6:	ea4f 2202 	mov.w	r2, r2, lsl #8
    e4da:	ea43 0305 	orr.w	r3, r3, r5
    e4de:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    e4e2:	ea43 0302 	orr.w	r3, r3, r2
    e4e6:	9300      	str	r3, [sp, #0]
    e4e8:	6e26      	ldr	r6, [r4, #96]	; 0x60
    e4ea:	6e25      	ldr	r5, [r4, #96]	; 0x60
    e4ec:	6e22      	ldr	r2, [r4, #96]	; 0x60
    e4ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    e4f0:	ea4f 2415 	mov.w	r4, r5, lsr #8
    e4f4:	ea4f 6303 	mov.w	r3, r3, lsl #24
    e4f8:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    e4fc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    e500:	ea43 0304 	orr.w	r3, r3, r4
    e504:	ea4f 2402 	mov.w	r4, r2, lsl #8
    e508:	bf28      	it	cs
    e50a:	2108      	movcs	r1, #8
    e50c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    e510:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    e512:	460a      	mov	r2, r1
    e514:	460c      	mov	r4, r1
    e516:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    e518:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    e51a:	f7ff fe69 	bl	e1f0 <memcpy>

	return length;
}
    e51e:	4620      	mov	r0, r4
    e520:	b002      	add	sp, #8
    e522:	bd70      	pop	{r4, r5, r6, pc}

0000e524 <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
    e524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e528:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
    e52c:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
    e530:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
    e532:	bf48      	it	mi
    e534:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
    e538:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
    e53a:	bf48      	it	mi
    e53c:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
    e540:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
    e542:	bf48      	it	mi
    e544:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
    e548:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
    e54a:	bf48      	it	mi
    e54c:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
    e550:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
    e552:	bf48      	it	mi
    e554:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
    e558:	6003      	str	r3, [r0, #0]

	return 0;
}
    e55a:	2000      	movs	r0, #0
    e55c:	4770      	bx	lr

0000e55e <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
    e55e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e566:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
    e56a:	2000      	movs	r0, #0
    e56c:	4770      	bx	lr

0000e56e <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
    e56e:	f240 13b3 	movw	r3, #435	; 0x1b3
    e572:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
    e574:	2000      	movs	r0, #0
    e576:	4770      	bx	lr

0000e578 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    e578:	6902      	ldr	r2, [r0, #16]
{
    e57a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    e57c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    e580:	e883 0003 	stmia.w	r3, {r0, r1}
}
    e584:	2000      	movs	r0, #0
    e586:	4770      	bx	lr

0000e588 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    e588:	6843      	ldr	r3, [r0, #4]
    e58a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    e58c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    e590:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    e594:	4770      	bx	lr

0000e596 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    e596:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    e598:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    e59a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e59c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e5a0:	b148      	cbz	r0, e5b6 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    e5a2:	7d52      	ldrb	r2, [r2, #21]
    e5a4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5a6:	2000      	movs	r0, #0
    e5a8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    e5ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5b0:	2201      	movs	r2, #1
    e5b2:	601a      	str	r2, [r3, #0]
	return 0;
    e5b4:	4770      	bx	lr
		return -1;
    e5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e5ba:	4770      	bx	lr

0000e5bc <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e5bc:	2a00      	cmp	r2, #0
{
    e5be:	b510      	push	{r4, lr}
    e5c0:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e5c2:	dd0f      	ble.n	e5e4 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    e5c4:	6843      	ldr	r3, [r0, #4]
    e5c6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e5c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e5cc:	b148      	cbz	r0, e5e2 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    e5ce:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5d0:	2000      	movs	r0, #0
    e5d2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    e5d6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    e5da:	7d52      	ldrb	r2, [r2, #21]
    e5dc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5de:	2001      	movs	r0, #1
    e5e0:	6018      	str	r0, [r3, #0]
}
    e5e2:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    e5e4:	2000      	movs	r0, #0
    e5e6:	e7fc      	b.n	e5e2 <uarte_nrfx_fifo_read+0x26>

0000e5e8 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    e5e8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    e5ea:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    e5ec:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    e5ee:	f04f 0020 	mov.w	r0, #32
    e5f2:	f3ef 8311 	mrs	r3, BASEPRI
    e5f6:	f380 8812 	msr	BASEPRI_MAX, r0
    e5fa:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    e5fe:	68c9      	ldr	r1, [r1, #12]
    e600:	2000      	movs	r0, #0
    e602:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    e604:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e608:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    e60c:	f383 8811 	msr	BASEPRI, r3
    e610:	f3bf 8f6f 	isb	sy
}
    e614:	4770      	bx	lr

0000e616 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    e616:	6903      	ldr	r3, [r0, #16]
    e618:	68db      	ldr	r3, [r3, #12]
    e61a:	2201      	movs	r2, #1
    e61c:	739a      	strb	r2, [r3, #14]
}
    e61e:	4770      	bx	lr

0000e620 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    e620:	6903      	ldr	r3, [r0, #16]
    e622:	68db      	ldr	r3, [r3, #12]
    e624:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e626:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    e62a:	b962      	cbnz	r2, e646 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    e62c:	6842      	ldr	r2, [r0, #4]
    e62e:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e630:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    e634:	b140      	cbz	r0, e648 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    e636:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    e63a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    e63e:	d003      	beq.n	e648 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    e640:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e642:	2001      	movs	r0, #1
    e644:	4770      	bx	lr
    e646:	2000      	movs	r0, #0
}
    e648:	4770      	bx	lr

0000e64a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    e64a:	6843      	ldr	r3, [r0, #4]
    e64c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e64e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    e652:	3800      	subs	r0, #0
    e654:	bf18      	it	ne
    e656:	2001      	movne	r0, #1
    e658:	4770      	bx	lr

0000e65a <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    e65a:	6843      	ldr	r3, [r0, #4]
    e65c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e65e:	2210      	movs	r2, #16
    e660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e664:	4770      	bx	lr

0000e666 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    e666:	6843      	ldr	r3, [r0, #4]
    e668:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e66a:	2210      	movs	r2, #16
    e66c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e670:	4770      	bx	lr

0000e672 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    e672:	6843      	ldr	r3, [r0, #4]
    e674:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e676:	f44f 7200 	mov.w	r2, #512	; 0x200
    e67a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e67e:	4770      	bx	lr

0000e680 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    e680:	6843      	ldr	r3, [r0, #4]
    e682:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e684:	f44f 7200 	mov.w	r2, #512	; 0x200
    e688:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e68c:	4770      	bx	lr

0000e68e <uarte_nrfx_irq_update>:
}
    e68e:	2001      	movs	r0, #1
    e690:	4770      	bx	lr

0000e692 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    e692:	6903      	ldr	r3, [r0, #16]
    e694:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    e696:	e9c3 1200 	strd	r1, r2, [r3]
}
    e69a:	4770      	bx	lr

0000e69c <uarte_nrfx_irq_is_pending>:
{
    e69c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    e69e:	6843      	ldr	r3, [r0, #4]
    e6a0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    e6a2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    e6a6:	025b      	lsls	r3, r3, #9
{
    e6a8:	4604      	mov	r4, r0
		||
    e6aa:	d405      	bmi.n	e6b8 <uarte_nrfx_irq_is_pending+0x1c>
    e6ac:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    e6b0:	f010 0010 	ands.w	r0, r0, #16
    e6b4:	d106      	bne.n	e6c4 <uarte_nrfx_irq_is_pending+0x28>
}
    e6b6:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    e6b8:	f7ff ffb2 	bl	e620 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    e6bc:	2800      	cmp	r0, #0
    e6be:	d0f5      	beq.n	e6ac <uarte_nrfx_irq_is_pending+0x10>
		||
    e6c0:	2001      	movs	r0, #1
    e6c2:	e7f8      	b.n	e6b6 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    e6c4:	4620      	mov	r0, r4
    e6c6:	f7ff ffc0 	bl	e64a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    e6ca:	3800      	subs	r0, #0
    e6cc:	bf18      	it	ne
    e6ce:	2001      	movne	r0, #1
    e6d0:	e7f1      	b.n	e6b6 <uarte_nrfx_irq_is_pending+0x1a>

0000e6d2 <nrf_gpio_cfg_input>:
{
    e6d2:	b507      	push	{r0, r1, r2, lr}
    e6d4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e6d6:	a801      	add	r0, sp, #4
    e6d8:	f7f9 fb12 	bl	7d00 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e6e2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    e6e4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    e6e8:	b003      	add	sp, #12
    e6ea:	f85d fb04 	ldr.w	pc, [sp], #4

0000e6ee <tx_start.isra.0>:
	return config->uarte_regs;
    e6ee:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e6f0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e6f4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e6f8:	2200      	movs	r2, #0
    e6fa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e6fe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    e702:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    e706:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e70a:	6842      	ldr	r2, [r0, #4]
    e70c:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e70e:	bf41      	itttt	mi
    e710:	2208      	movmi	r2, #8
    e712:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    e716:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    e71a:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e71e:	2201      	movs	r2, #1
    e720:	609a      	str	r2, [r3, #8]
}
    e722:	4770      	bx	lr

0000e724 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    e724:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    e726:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e728:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e72c:	b940      	cbnz	r0, e740 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    e72e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e730:	079b      	lsls	r3, r3, #30
    e732:	d406      	bmi.n	e742 <is_tx_ready.isra.0+0x1e>
    e734:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    e738:	3800      	subs	r0, #0
    e73a:	bf18      	it	ne
    e73c:	2001      	movne	r0, #1
    e73e:	4770      	bx	lr
    e740:	2001      	movs	r0, #1
}
    e742:	4770      	bx	lr

0000e744 <uarte_nrfx_fifo_fill>:
{
    e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    e746:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    e748:	68f3      	ldr	r3, [r6, #12]
    e74a:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e74c:	f3bf 8f5b 	dmb	ish
    e750:	4294      	cmp	r4, r2
    e752:	bfa8      	it	ge
    e754:	4614      	movge	r4, r2
{
    e756:	4605      	mov	r5, r0
    e758:	3310      	adds	r3, #16
    e75a:	2201      	movs	r2, #1
    e75c:	e853 0f00 	ldrex	r0, [r3]
    e760:	2800      	cmp	r0, #0
    e762:	d103      	bne.n	e76c <uarte_nrfx_fifo_fill+0x28>
    e764:	e843 2700 	strex	r7, r2, [r3]
    e768:	2f00      	cmp	r7, #0
    e76a:	d1f7      	bne.n	e75c <uarte_nrfx_fifo_fill+0x18>
    e76c:	f3bf 8f5b 	dmb	ish
    e770:	bf0c      	ite	eq
    e772:	4613      	moveq	r3, r2
    e774:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    e776:	d01d      	beq.n	e7b4 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    e778:	461c      	mov	r4, r3
}
    e77a:	4620      	mov	r0, r4
    e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    e77e:	68f2      	ldr	r2, [r6, #12]
    e780:	5cc8      	ldrb	r0, [r1, r3]
    e782:	6892      	ldr	r2, [r2, #8]
    e784:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    e786:	3301      	adds	r3, #1
    e788:	42a3      	cmp	r3, r4
    e78a:	dbf8      	blt.n	e77e <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    e78c:	f04f 0320 	mov.w	r3, #32
    e790:	f3ef 8711 	mrs	r7, BASEPRI
    e794:	f383 8812 	msr	BASEPRI_MAX, r3
    e798:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    e79c:	6868      	ldr	r0, [r5, #4]
    e79e:	f7ff ffc1 	bl	e724 <is_tx_ready.isra.0>
    e7a2:	68f3      	ldr	r3, [r6, #12]
    e7a4:	b940      	cbnz	r0, e7b8 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    e7a6:	6118      	str	r0, [r3, #16]
		len = 0;
    e7a8:	4604      	mov	r4, r0
	__asm__ volatile(
    e7aa:	f387 8811 	msr	BASEPRI, r7
    e7ae:	f3bf 8f6f 	isb	sy
	return len;
    e7b2:	e7e2      	b.n	e77a <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    e7b4:	2300      	movs	r3, #0
    e7b6:	e7e7      	b.n	e788 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    e7b8:	6899      	ldr	r1, [r3, #8]
    e7ba:	6868      	ldr	r0, [r5, #4]
    e7bc:	4622      	mov	r2, r4
    e7be:	f7ff ff96 	bl	e6ee <tx_start.isra.0>
    e7c2:	e7f2      	b.n	e7aa <uarte_nrfx_fifo_fill+0x66>

0000e7c4 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    e7c4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    e7c6:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    e7c8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e7cc:	05c9      	lsls	r1, r1, #23
{
    e7ce:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e7d0:	d518      	bpl.n	e804 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e7d2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    e7d6:	b1a9      	cbz	r1, e804 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    e7d8:	f04f 0420 	mov.w	r4, #32
    e7dc:	f3ef 8111 	mrs	r1, BASEPRI
    e7e0:	f384 8812 	msr	BASEPRI_MAX, r4
    e7e4:	f3bf 8f6f 	isb	sy
    e7e8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    e7ec:	b134      	cbz	r4, e7fc <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e7ee:	2400      	movs	r4, #0
    e7f0:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    e7f4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e7f8:	2401      	movs	r4, #1
    e7fa:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    e7fc:	f381 8811 	msr	BASEPRI, r1
    e800:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e804:	6852      	ldr	r2, [r2, #4]
    e806:	06d2      	lsls	r2, r2, #27
    e808:	d51a      	bpl.n	e840 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    e80a:	f04f 0220 	mov.w	r2, #32
    e80e:	f3ef 8111 	mrs	r1, BASEPRI
    e812:	f382 8812 	msr	BASEPRI_MAX, r2
    e816:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e81a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e81e:	b112      	cbz	r2, e826 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e820:	2200      	movs	r2, #0
    e822:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    e826:	6902      	ldr	r2, [r0, #16]
    e828:	68d2      	ldr	r2, [r2, #12]
    e82a:	b10a      	cbz	r2, e830 <uarte_nrfx_isr_int+0x6c>
    e82c:	6912      	ldr	r2, [r2, #16]
    e82e:	b91a      	cbnz	r2, e838 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    e830:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e834:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    e838:	f381 8811 	msr	BASEPRI, r1
    e83c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    e840:	6902      	ldr	r2, [r0, #16]
    e842:	68d2      	ldr	r2, [r2, #12]
    e844:	b15a      	cbz	r2, e85e <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e846:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e84a:	b151      	cbz	r1, e862 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
    e84c:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    e84e:	2100      	movs	r1, #0
    e850:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    e852:	b134      	cbz	r4, e862 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    e854:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    e858:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    e85c:	7391      	strb	r1, [r2, #14]
}
    e85e:	bc10      	pop	{r4}
    e860:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e862:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    e866:	b121      	cbz	r1, e872 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e868:	2100      	movs	r1, #0
    e86a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    e86e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    e872:	6813      	ldr	r3, [r2, #0]
    e874:	2b00      	cmp	r3, #0
    e876:	d0f2      	beq.n	e85e <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e878:	6851      	ldr	r1, [r2, #4]
}
    e87a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e87c:	4718      	bx	r3

0000e87e <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    e87e:	b510      	push	{r4, lr}
    e880:	2200      	movs	r2, #0
    e882:	4604      	mov	r4, r0
    e884:	2101      	movs	r1, #1
    e886:	2028      	movs	r0, #40	; 0x28
    e888:	f7f7 f882 	bl	5990 <z_arm_irq_priority_set>
    e88c:	2028      	movs	r0, #40	; 0x28
    e88e:	f7f7 f84d 	bl	592c <arch_irq_enable>
    e892:	4620      	mov	r0, r4
    e894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e898:	f7f9 bb3c 	b.w	7f14 <uarte_instance_init.constprop.0>

0000e89c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    e89c:	b510      	push	{r4, lr}
    e89e:	2200      	movs	r2, #0
    e8a0:	4604      	mov	r4, r0
    e8a2:	2101      	movs	r1, #1
    e8a4:	2002      	movs	r0, #2
    e8a6:	f7f7 f873 	bl	5990 <z_arm_irq_priority_set>
    e8aa:	2002      	movs	r0, #2
    e8ac:	f7f7 f83e 	bl	592c <arch_irq_enable>
    e8b0:	4620      	mov	r0, r4
    e8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8b6:	f7f9 bb2d 	b.w	7f14 <uarte_instance_init.constprop.0>

0000e8ba <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    e8ba:	4770      	bx	lr

0000e8bc <sys_clock_cycle_get_32>:
{
    e8bc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    e8be:	f7f9 fc85 	bl	81cc <z_nrf_rtc_timer_read>
}
    e8c2:	bd08      	pop	{r3, pc}

0000e8c4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    e8c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    e8c8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    e8cc:	f1a0 0308 	sub.w	r3, r0, #8
    e8d0:	4258      	negs	r0, r3
    e8d2:	4158      	adcs	r0, r3
    e8d4:	4770      	bx	lr

0000e8d6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    e8d6:	4700      	bx	r0

0000e8d8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    e8d8:	f000 bc29 	b.w	f12e <z_impl_k_busy_wait>

0000e8dc <nrfx_clock_start>:
    switch (domain)
    e8dc:	b110      	cbz	r0, e8e4 <nrfx_clock_start+0x8>
    e8de:	2801      	cmp	r0, #1
    e8e0:	d01d      	beq.n	e91e <nrfx_clock_start+0x42>
    e8e2:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e8e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e8e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e8ec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    e8f0:	03c9      	lsls	r1, r1, #15
    e8f2:	d512      	bpl.n	e91a <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    e8f4:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    e8f8:	2a01      	cmp	r2, #1
    e8fa:	d10e      	bne.n	e91a <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e8fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e904:	2200      	movs	r2, #0
    e906:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e90a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    e90e:	2202      	movs	r2, #2
    e910:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e914:	2201      	movs	r2, #1
    e916:	609a      	str	r2, [r3, #8]
}
    e918:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    e91a:	2200      	movs	r2, #0
    e91c:	e7ee      	b.n	e8fc <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e91e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e922:	2200      	movs	r2, #0
    e924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e928:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e92c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e930:	6018      	str	r0, [r3, #0]
}
    e932:	4770      	bx	lr

0000e934 <nrf_gpio_reconfigure>:
{
    e934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e936:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e938:	a801      	add	r0, sp, #4
{
    e93a:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    e93e:	4617      	mov	r7, r2
    e940:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e942:	f7f9 ffd5 	bl	88f0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e946:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    e948:	2f00      	cmp	r7, #0
    e94a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e94e:	bf14      	ite	ne
    e950:	2302      	movne	r3, #2
    e952:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    e954:	2900      	cmp	r1, #0
    e956:	bf18      	it	ne
    e958:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    e95c:	2d00      	cmp	r5, #0
    e95e:	bf14      	ite	ne
    e960:	f04f 0c0c 	movne.w	ip, #12
    e964:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    e968:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    e96a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    e96e:	bf14      	ite	ne
    e970:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    e974:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    e978:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    e97a:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e97e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    e982:	bf14      	ite	ne
    e984:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    e988:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    e98c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    e990:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e994:	b101      	cbz	r1, e998 <nrf_gpio_reconfigure+0x64>
    e996:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    e998:	b10f      	cbz	r7, e99e <nrf_gpio_reconfigure+0x6a>
    e99a:	783f      	ldrb	r7, [r7, #0]
    e99c:	007f      	lsls	r7, r7, #1
    e99e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    e9a0:	b10d      	cbz	r5, e9a6 <nrf_gpio_reconfigure+0x72>
    e9a2:	782d      	ldrb	r5, [r5, #0]
    e9a4:	00ad      	lsls	r5, r5, #2
    e9a6:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    e9a8:	b10c      	cbz	r4, e9ae <nrf_gpio_reconfigure+0x7a>
    e9aa:	7822      	ldrb	r2, [r4, #0]
    e9ac:	0214      	lsls	r4, r2, #8
    e9ae:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    e9b0:	b10e      	cbz	r6, e9b6 <nrf_gpio_reconfigure+0x82>
    e9b2:	7836      	ldrb	r6, [r6, #0]
    e9b4:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e9b6:	432c      	orrs	r4, r5
    e9b8:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    e9ba:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    e9be:	b003      	add	sp, #12
    e9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e9c2 <nrf_gpio_cfg_sense_set>:
{
    e9c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    e9c4:	f10d 030f 	add.w	r3, sp, #15
    e9c8:	9301      	str	r3, [sp, #4]
    e9ca:	2300      	movs	r3, #0
{
    e9cc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    e9d0:	9300      	str	r3, [sp, #0]
    e9d2:	461a      	mov	r2, r3
    e9d4:	4619      	mov	r1, r3
    e9d6:	f7ff ffad 	bl	e934 <nrf_gpio_reconfigure>
}
    e9da:	b005      	add	sp, #20
    e9dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000e9e0 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e9e0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    e9e4:	681a      	ldr	r2, [r3, #0]
    e9e6:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e9e8:	bf1f      	itttt	ne
    e9ea:	2200      	movne	r2, #0
    e9ec:	601a      	strne	r2, [r3, #0]
    e9ee:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e9f0:	2001      	movne	r0, #1
    e9f2:	bf08      	it	eq
    e9f4:	2000      	moveq	r0, #0
}
    e9f6:	4770      	bx	lr

0000e9f8 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    e9f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e9fc:	f44f 7260 	mov.w	r2, #896	; 0x380
    ea00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ea04:	4770      	bx	lr

0000ea06 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    ea06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ea0a:	f44f 7260 	mov.w	r2, #896	; 0x380
    ea0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    ea12:	4770      	bx	lr

0000ea14 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    ea14:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    ea16:	f7fa fb1b 	bl	9050 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    ea1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    ea1e:	f7f9 bf33 	b.w	8888 <nrfx_clock_irq_handler>

0000ea22 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ea22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    ea26:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    ea2a:	f1a0 0308 	sub.w	r3, r0, #8
    ea2e:	4258      	negs	r0, r3
    ea30:	4158      	adcs	r0, r3
    ea32:	4770      	bx	lr

0000ea34 <nrfx_usbd_consumer>:
{
    ea34:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    ea36:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    ea38:	680d      	ldr	r5, [r1, #0]
    ea3a:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    ea3c:	bf97      	itett	ls
    ea3e:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    ea42:	2100      	movhi	r1, #0
        size -= data_size;
    ea44:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    ea46:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    ea48:	bf8e      	itee	hi
    ea4a:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    ea4e:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    ea50:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    ea52:	429a      	cmp	r2, r3
    ea54:	d103      	bne.n	ea5e <nrfx_usbd_consumer+0x2a>
    ea56:	1e20      	subs	r0, r4, #0
    ea58:	bf18      	it	ne
    ea5a:	2001      	movne	r0, #1
}
    ea5c:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    ea5e:	2000      	movs	r0, #0
    ea60:	e7fc      	b.n	ea5c <nrfx_usbd_consumer+0x28>

0000ea62 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    ea62:	684b      	ldr	r3, [r1, #4]
{
    ea64:	b510      	push	{r4, lr}
    ea66:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    ea68:	680c      	ldr	r4, [r1, #0]
    ea6a:	bf28      	it	cs
    ea6c:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    ea6e:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    ea72:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    ea74:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    ea76:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ea78:	441a      	add	r2, r3
}
    ea7a:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    ea7c:	600a      	str	r2, [r1, #0]
}
    ea7e:	bf18      	it	ne
    ea80:	2001      	movne	r0, #1
    ea82:	bd10      	pop	{r4, pc}

0000ea84 <nrfx_usbd_feeder_ram_zlp>:
{
    ea84:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    ea86:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    ea88:	680b      	ldr	r3, [r1, #0]
    ea8a:	42a2      	cmp	r2, r4
    ea8c:	bf28      	it	cs
    ea8e:	4622      	movcs	r2, r4
    ea90:	2a00      	cmp	r2, #0
    ea92:	bf14      	ite	ne
    ea94:	461d      	movne	r5, r3
    ea96:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    ea98:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    ea9c:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    eaa0:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    eaa2:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    eaa4:	600a      	str	r2, [r1, #0]
}
    eaa6:	bf14      	ite	ne
    eaa8:	2001      	movne	r0, #1
    eaaa:	2000      	moveq	r0, #0
    eaac:	bd30      	pop	{r4, r5, pc}

0000eaae <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    eaae:	f010 0f80 	tst.w	r0, #128	; 0x80
    eab2:	bf14      	ite	ne
    eab4:	2300      	movne	r3, #0
    eab6:	2310      	moveq	r3, #16
    eab8:	f000 000f 	and.w	r0, r0, #15
}
    eabc:	4418      	add	r0, r3
    eabe:	4770      	bx	lr

0000eac0 <ev_started_handler>:
}
    eac0:	4770      	bx	lr

0000eac2 <nrf_usbd_epin_dma_handler>:
{
    eac2:	b508      	push	{r3, lr}
    eac4:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    eac6:	f7fa fb3b 	bl	9140 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    eaca:	4608      	mov	r0, r1
    eacc:	f7fa fb2a 	bl	9124 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ead0:	7b83      	ldrb	r3, [r0, #14]
    ead2:	2b03      	cmp	r3, #3
    ead4:	d10a      	bne.n	eaec <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ead6:	4608      	mov	r0, r1
    ead8:	f7ff ffe9 	bl	eaae <ep2bit>
    eadc:	2301      	movs	r3, #1
    eade:	fa03 f000 	lsl.w	r0, r3, r0
    eae2:	43c0      	mvns	r0, r0
}
    eae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    eae8:	f7fa bc3a 	b.w	9360 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    eaec:	6803      	ldr	r3, [r0, #0]
    eaee:	2b00      	cmp	r3, #0
    eaf0:	d0f1      	beq.n	ead6 <nrf_usbd_epin_dma_handler+0x14>
}
    eaf2:	bd08      	pop	{r3, pc}

0000eaf4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    eaf4:	2087      	movs	r0, #135	; 0x87
    eaf6:	f7ff bfe4 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eafa <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    eafa:	2086      	movs	r0, #134	; 0x86
    eafc:	f7ff bfe1 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eb00 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    eb00:	2085      	movs	r0, #133	; 0x85
    eb02:	f7ff bfde 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eb06 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    eb06:	2084      	movs	r0, #132	; 0x84
    eb08:	f7ff bfdb 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eb0c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    eb0c:	2083      	movs	r0, #131	; 0x83
    eb0e:	f7ff bfd8 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eb12 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    eb12:	2082      	movs	r0, #130	; 0x82
    eb14:	f7ff bfd5 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eb18 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    eb18:	2081      	movs	r0, #129	; 0x81
    eb1a:	f7ff bfd2 	b.w	eac2 <nrf_usbd_epin_dma_handler>

0000eb1e <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    eb1e:	f7fa bc2f 	b.w	9380 <nrf_usbd_ep0in_dma_handler>

0000eb22 <nrfx_usbd_ep_max_packet_size_set>:
{
    eb22:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    eb24:	f7fa fafe 	bl	9124 <ep_state_access>
    p_state->max_packet_size = size;
    eb28:	8181      	strh	r1, [r0, #12]
}
    eb2a:	bd08      	pop	{r3, pc}

0000eb2c <nrfx_usbd_ep_status_get>:
{
    eb2c:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    eb2e:	f7fa faf9 	bl	9124 <ep_state_access>
	__asm__ volatile(
    eb32:	f04f 0220 	mov.w	r2, #32
    eb36:	f3ef 8311 	mrs	r3, BASEPRI
    eb3a:	f382 8812 	msr	BASEPRI_MAX, r2
    eb3e:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    eb42:	6882      	ldr	r2, [r0, #8]
    eb44:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    eb46:	6802      	ldr	r2, [r0, #0]
    eb48:	b92a      	cbnz	r2, eb56 <nrfx_usbd_ep_status_get+0x2a>
    eb4a:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    eb4c:	f383 8811 	msr	BASEPRI, r3
    eb50:	f3bf 8f6f 	isb	sy
}
    eb54:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    eb56:	2004      	movs	r0, #4
    eb58:	e7f8      	b.n	eb4c <nrfx_usbd_ep_status_get+0x20>

0000eb5a <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    eb5a:	2007      	movs	r0, #7
    eb5c:	f7fa bf48 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb60 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    eb60:	2006      	movs	r0, #6
    eb62:	f7fa bf45 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb66 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    eb66:	2005      	movs	r0, #5
    eb68:	f7fa bf42 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb6c <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    eb6c:	2004      	movs	r0, #4
    eb6e:	f7fa bf3f 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb72 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    eb72:	2003      	movs	r0, #3
    eb74:	f7fa bf3c 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb78 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    eb78:	2002      	movs	r0, #2
    eb7a:	f7fa bf39 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb7e <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    eb7e:	2001      	movs	r0, #1
    eb80:	f7fa bf36 	b.w	99f0 <nrf_usbd_epout_dma_handler>

0000eb84 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    eb84:	f7fb b82a 	b.w	9bdc <usbd_ep_abort>

0000eb88 <z_device_state_init>:
}
    eb88:	4770      	bx	lr

0000eb8a <z_device_is_ready>:
	if (dev == NULL) {
    eb8a:	b138      	cbz	r0, eb9c <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
    eb8c:	68c3      	ldr	r3, [r0, #12]
    eb8e:	8818      	ldrh	r0, [r3, #0]
    eb90:	f3c0 0008 	ubfx	r0, r0, #0, #9
    eb94:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    eb98:	4258      	negs	r0, r3
    eb9a:	4158      	adcs	r0, r3
}
    eb9c:	4770      	bx	lr

0000eb9e <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
    eb9e:	6940      	ldr	r0, [r0, #20]
{
    eba0:	b470      	push	{r4, r5, r6}
    eba2:	4613      	mov	r3, r2
    eba4:	460d      	mov	r5, r1
	if (rv != NULL) {
    eba6:	b960      	cbnz	r0, ebc2 <device_required_foreach+0x24>
	size_t handle_count = 0;
    eba8:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
    ebaa:	462a      	mov	r2, r5
}
    ebac:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    ebae:	f7fb ba23 	b.w	9ff8 <device_visitor>
			++i;
    ebb2:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    ebb4:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    ebb8:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    ebba:	b2a4      	uxth	r4, r4
    ebbc:	4294      	cmp	r4, r2
    ebbe:	d9f8      	bls.n	ebb2 <device_required_foreach+0x14>
    ebc0:	e7f3      	b.n	ebaa <device_required_foreach+0xc>
		size_t i = 0;
    ebc2:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    ebc4:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    ebc8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    ebcc:	e7f2      	b.n	ebb4 <device_required_foreach+0x16>

0000ebce <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    ebce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ebd0:	ab0a      	add	r3, sp, #40	; 0x28
    ebd2:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    ebd4:	9302      	str	r3, [sp, #8]
    ebd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebd8:	9301      	str	r3, [sp, #4]
    ebda:	2300      	movs	r3, #0
    ebdc:	9300      	str	r3, [sp, #0]
    ebde:	2201      	movs	r2, #1
    ebe0:	4618      	mov	r0, r3
    ebe2:	f7f2 ffff 	bl	1be4 <z_impl_z_log_msg2_runtime_vcreate>
}
    ebe6:	b007      	add	sp, #28
    ebe8:	f85d fb04 	ldr.w	pc, [sp], #4

0000ebec <arch_system_halt>:
	__asm__ volatile(
    ebec:	f04f 0220 	mov.w	r2, #32
    ebf0:	f3ef 8311 	mrs	r3, BASEPRI
    ebf4:	f382 8812 	msr	BASEPRI_MAX, r2
    ebf8:	f3bf 8f6f 	isb	sy
	for (;;) {
    ebfc:	e7fe      	b.n	ebfc <arch_system_halt+0x10>

0000ebfe <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    ebfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec00:	4604      	mov	r4, r0
    ec02:	460d      	mov	r5, r1
    ec04:	f04f 0320 	mov.w	r3, #32
    ec08:	f3ef 8611 	mrs	r6, BASEPRI
    ec0c:	f383 8812 	msr	BASEPRI_MAX, r3
    ec10:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    ec14:	6947      	ldr	r7, [r0, #20]
    ec16:	b97f      	cbnz	r7, ec38 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    ec18:	f000 f9fd 	bl	f016 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    ec1c:	b160      	cbz	r0, ec38 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    ec1e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    ec20:	6142      	str	r2, [r0, #20]
    ec22:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
    ec26:	f000 f985 	bl	ef34 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    ec2a:	4631      	mov	r1, r6
    ec2c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    ec30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    ec34:	f7fc b8f0 	b.w	ae18 <z_reschedule>
	**(char ***) mem = slab->free_list;
    ec38:	682b      	ldr	r3, [r5, #0]
    ec3a:	6962      	ldr	r2, [r4, #20]
    ec3c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    ec3e:	682b      	ldr	r3, [r5, #0]
    ec40:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    ec42:	69a3      	ldr	r3, [r4, #24]
    ec44:	3b01      	subs	r3, #1
    ec46:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    ec48:	f386 8811 	msr	BASEPRI, r6
    ec4c:	f3bf 8f6f 	isb	sy
}
    ec50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ec52 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ec52:	f3ef 8005 	mrs	r0, IPSR
}
    ec56:	3800      	subs	r0, #0
    ec58:	bf18      	it	ne
    ec5a:	2001      	movne	r0, #1
    ec5c:	4770      	bx	lr

0000ec5e <k_thread_name_get>:
}
    ec5e:	3078      	adds	r0, #120	; 0x78
    ec60:	4770      	bx	lr

0000ec62 <z_impl_k_thread_start>:
	z_sched_start(thread);
    ec62:	f7fc b9cf 	b.w	b004 <z_sched_start>

0000ec66 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    ec66:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
    ec68:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
    ec6c:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    ec6e:	4293      	cmp	r3, r2
    ec70:	d102      	bne.n	ec78 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    ec72:	600b      	str	r3, [r1, #0]

	return 0;
}
    ec74:	2000      	movs	r0, #0
    ec76:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    ec78:	5ce0      	ldrb	r0, [r4, r3]
    ec7a:	28aa      	cmp	r0, #170	; 0xaa
    ec7c:	d1f9      	bne.n	ec72 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    ec7e:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    ec80:	e7f5      	b.n	ec6e <z_impl_k_thread_stack_space_get+0x8>

0000ec82 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    ec82:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
    ec86:	4770      	bx	lr

0000ec88 <z_pm_save_idle_exit>:
{
    ec88:	b508      	push	{r3, lr}
	pm_system_resume();
    ec8a:	f7f6 fca7 	bl	55dc <pm_system_resume>
}
    ec8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    ec92:	f7ff be12 	b.w	e8ba <sys_clock_idle_exit>

0000ec96 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
    ec96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec98:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
    ec9a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    ec9e:	f04f 0320 	mov.w	r3, #32
    eca2:	f3ef 8611 	mrs	r6, BASEPRI
    eca6:	f383 8812 	msr	BASEPRI_MAX, r3
    ecaa:	f3bf 8f6f 	isb	sy
    ecae:	f06f 0722 	mvn.w	r7, #34	; 0x22

	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
    ecb2:	4620      	mov	r0, r4
    ecb4:	f000 f9af 	bl	f016 <z_unpend_first_thread>
    ecb8:	4603      	mov	r3, r0
    ecba:	b940      	cbnz	r0, ecce <z_impl_k_msgq_purge+0x38>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
    ecbc:	69e3      	ldr	r3, [r4, #28]
	msgq->used_msgs = 0;
    ecbe:	6220      	str	r0, [r4, #32]
	msgq->read_ptr = msgq->write_ptr;
    ecc0:	61a3      	str	r3, [r4, #24]

	z_reschedule(&msgq->lock, key);
    ecc2:	4631      	mov	r1, r6
    ecc4:	4628      	mov	r0, r5
}
    ecc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
    ecca:	f7fc b8a5 	b.w	ae18 <z_reschedule>
    ecce:	f8c3 70b0 	str.w	r7, [r3, #176]	; 0xb0
		z_ready_thread(pending_thread);
    ecd2:	f000 f92f 	bl	ef34 <z_ready_thread>
    ecd6:	e7ec      	b.n	ecb2 <z_impl_k_msgq_purge+0x1c>

0000ecd8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    ecd8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ecdc:	428b      	cmp	r3, r1
    ecde:	d001      	beq.n	ece4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    ece0:	f7fc ba00 	b.w	b0e4 <z_set_prio>
}
    ece4:	2000      	movs	r0, #0
    ece6:	4770      	bx	lr

0000ece8 <z_impl_k_mutex_init>:
{
    ece8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ecea:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    ecec:	e9c3 0002 	strd	r0, r0, [r3, #8]
    ecf0:	e9c3 3300 	strd	r3, r3, [r3]
}
    ecf4:	4770      	bx	lr

0000ecf6 <queue_insert>:
{
    ecf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ecfa:	4699      	mov	r9, r3
    ecfc:	4604      	mov	r4, r0
    ecfe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ed02:	460d      	mov	r5, r1
    ed04:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    ed06:	f100 0608 	add.w	r6, r0, #8
    ed0a:	f04f 0220 	mov.w	r2, #32
    ed0e:	f3ef 8711 	mrs	r7, BASEPRI
    ed12:	f382 8812 	msr	BASEPRI_MAX, r2
    ed16:	f3bf 8f6f 	isb	sy
	if (is_append) {
    ed1a:	b103      	cbz	r3, ed1e <queue_insert+0x28>
	return list->tail;
    ed1c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    ed1e:	4630      	mov	r0, r6
    ed20:	f000 f979 	bl	f016 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    ed24:	b160      	cbz	r0, ed40 <queue_insert+0x4a>
    ed26:	2400      	movs	r4, #0
    ed28:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    ed2c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    ed30:	f000 f900 	bl	ef34 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    ed34:	4630      	mov	r0, r6
    ed36:	4639      	mov	r1, r7
    ed38:	f7fc f86e 	bl	ae18 <z_reschedule>
	return 0;
    ed3c:	2000      	movs	r0, #0
    ed3e:	e00c      	b.n	ed5a <queue_insert+0x64>
	if (alloc) {
    ed40:	f1b9 0f00 	cmp.w	r9, #0
    ed44:	d01b      	beq.n	ed7e <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    ed46:	2108      	movs	r1, #8
    ed48:	f7fc fdfe 	bl	b948 <z_thread_aligned_alloc>
		if (anode == NULL) {
    ed4c:	b938      	cbnz	r0, ed5e <queue_insert+0x68>
	__asm__ volatile(
    ed4e:	f387 8811 	msr	BASEPRI, r7
    ed52:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    ed56:	f06f 000b 	mvn.w	r0, #11
}
    ed5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    ed5e:	2301      	movs	r3, #1
		anode->data = data;
    ed60:	f8c0 8004 	str.w	r8, [r0, #4]
    ed64:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ed66:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    ed68:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    ed6c:	b95d      	cbnz	r5, ed86 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    ed6e:	6823      	ldr	r3, [r4, #0]
    ed70:	4313      	orrs	r3, r2
    ed72:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    ed74:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    ed76:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    ed78:	b973      	cbnz	r3, ed98 <queue_insert+0xa2>
	list->tail = node;
    ed7a:	6060      	str	r0, [r4, #4]
}
    ed7c:	e00c      	b.n	ed98 <queue_insert+0xa2>
	node->next_and_flags = flags;
    ed7e:	f8c8 9000 	str.w	r9, [r8]
}
    ed82:	4640      	mov	r0, r8
    ed84:	e7ef      	b.n	ed66 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ed86:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    ed88:	f033 0303 	bics.w	r3, r3, #3
    ed8c:	d110      	bne.n	edb0 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
    ed8e:	6002      	str	r2, [r0, #0]
	return list->tail;
    ed90:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    ed92:	b93a      	cbnz	r2, eda4 <queue_insert+0xae>
	list->head = node;
    ed94:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    ed98:	2104      	movs	r1, #4
    ed9a:	f104 0010 	add.w	r0, r4, #16
    ed9e:	f000 fb5c 	bl	f45a <z_handle_obj_poll_events>
    eda2:	e7c7      	b.n	ed34 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    eda4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    eda6:	f003 0303 	and.w	r3, r3, #3
    edaa:	4303      	orrs	r3, r0
    edac:	6013      	str	r3, [r2, #0]
    edae:	e7e4      	b.n	ed7a <queue_insert+0x84>
    edb0:	4313      	orrs	r3, r2
    edb2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    edb4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    edb6:	f003 0303 	and.w	r3, r3, #3
    edba:	4303      	orrs	r3, r0
    edbc:	602b      	str	r3, [r5, #0]
}
    edbe:	e7eb      	b.n	ed98 <queue_insert+0xa2>

0000edc0 <z_queue_node_peek>:
{
    edc0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    edc2:	4604      	mov	r4, r0
    edc4:	b130      	cbz	r0, edd4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    edc6:	6802      	ldr	r2, [r0, #0]
    edc8:	0793      	lsls	r3, r2, #30
    edca:	d003      	beq.n	edd4 <z_queue_node_peek+0x14>
		ret = anode->data;
    edcc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    edce:	b109      	cbz	r1, edd4 <z_queue_node_peek+0x14>
			k_free(anode);
    edd0:	f000 fb5e 	bl	f490 <k_free>
}
    edd4:	4620      	mov	r0, r4
    edd6:	bd10      	pop	{r4, pc}

0000edd8 <k_queue_append>:
{
    edd8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    edda:	2301      	movs	r3, #1
    eddc:	9300      	str	r3, [sp, #0]
    edde:	2300      	movs	r3, #0
{
    ede0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    ede2:	4619      	mov	r1, r3
    ede4:	f7ff ff87 	bl	ecf6 <queue_insert>
}
    ede8:	b003      	add	sp, #12
    edea:	f85d fb04 	ldr.w	pc, [sp], #4

0000edee <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    edee:	b15a      	cbz	r2, ee08 <z_impl_k_sem_init+0x1a>
    edf0:	428a      	cmp	r2, r1
    edf2:	d309      	bcc.n	ee08 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    edf4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    edf8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    edfc:	e9c0 0000 	strd	r0, r0, [r0]
    ee00:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    ee04:	2000      	movs	r0, #0
    ee06:	4770      	bx	lr
		return -EINVAL;
    ee08:	f06f 0015 	mvn.w	r0, #21
}
    ee0c:	4770      	bx	lr

0000ee0e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    ee0e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    ee10:	2301      	movs	r3, #1
    ee12:	408b      	lsls	r3, r1
    ee14:	ea22 0303 	bic.w	r3, r2, r3
    ee18:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    ee1a:	fa22 f001 	lsr.w	r0, r2, r1
}
    ee1e:	f000 0001 	and.w	r0, r0, #1
    ee22:	4770      	bx	lr

0000ee24 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    ee24:	b120      	cbz	r0, ee30 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ee26:	2200      	movs	r2, #0
    ee28:	4611      	mov	r1, r2
    ee2a:	30c0      	adds	r0, #192	; 0xc0
    ee2c:	f000 b91b 	b.w	f066 <z_sched_wake>
}
    ee30:	4770      	bx	lr

0000ee32 <k_work_init>:
{
    ee32:	b538      	push	{r3, r4, r5, lr}
    ee34:	4604      	mov	r4, r0
    ee36:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ee38:	2210      	movs	r2, #16
    ee3a:	2100      	movs	r1, #0
    ee3c:	f7ff f9e3 	bl	e206 <memset>
    ee40:	6065      	str	r5, [r4, #4]
}
    ee42:	bd38      	pop	{r3, r4, r5, pc}

0000ee44 <k_work_submit_to_queue>:
{
    ee44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ee46:	9001      	str	r0, [sp, #4]
    ee48:	4608      	mov	r0, r1
	__asm__ volatile(
    ee4a:	f04f 0320 	mov.w	r3, #32
    ee4e:	f3ef 8511 	mrs	r5, BASEPRI
    ee52:	f383 8812 	msr	BASEPRI_MAX, r3
    ee56:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    ee5a:	a901      	add	r1, sp, #4
    ee5c:	f7fb ff0e 	bl	ac7c <submit_to_queue_locked>
    ee60:	4604      	mov	r4, r0
	__asm__ volatile(
    ee62:	f385 8811 	msr	BASEPRI, r5
    ee66:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    ee6a:	2800      	cmp	r0, #0
    ee6c:	dd04      	ble.n	ee78 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    ee6e:	f7fc fa83 	bl	b378 <z_impl_k_is_preempt_thread>
    ee72:	b108      	cbz	r0, ee78 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    ee74:	f7fc f9d8 	bl	b228 <z_impl_k_yield>
}
    ee78:	4620      	mov	r0, r4
    ee7a:	b003      	add	sp, #12
    ee7c:	bd30      	pop	{r4, r5, pc}

0000ee7e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    ee7e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ee82:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ee84:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ee86:	2300      	movs	r3, #0
	node->prev = NULL;
    ee88:	e9c0 3300 	strd	r3, r3, [r0]
}
    ee8c:	4770      	bx	lr

0000ee8e <unpend_thread_no_timeout>:
{
    ee8e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    ee90:	f7ff fff5 	bl	ee7e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ee94:	7b43      	ldrb	r3, [r0, #13]
    ee96:	f023 0302 	bic.w	r3, r3, #2
    ee9a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    ee9c:	2300      	movs	r3, #0
    ee9e:	6083      	str	r3, [r0, #8]
}
    eea0:	bd08      	pop	{r3, pc}

0000eea2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    eea2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    eea6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    eeaa:	4283      	cmp	r3, r0
		return b2 - b1;
    eeac:	bf14      	ite	ne
    eeae:	1ac0      	subne	r0, r0, r3
	return 0;
    eeb0:	2000      	moveq	r0, #0
}
    eeb2:	4770      	bx	lr

0000eeb4 <z_unpend_thread_no_timeout>:
{
    eeb4:	b508      	push	{r3, lr}
	__asm__ volatile(
    eeb6:	f04f 0320 	mov.w	r3, #32
    eeba:	f3ef 8111 	mrs	r1, BASEPRI
    eebe:	f383 8812 	msr	BASEPRI_MAX, r3
    eec2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    eec6:	f7ff ffe2 	bl	ee8e <unpend_thread_no_timeout>
	__asm__ volatile(
    eeca:	f381 8811 	msr	BASEPRI, r1
    eece:	f3bf 8f6f 	isb	sy
}
    eed2:	bd08      	pop	{r3, pc}

0000eed4 <z_unpend_thread>:
{
    eed4:	b510      	push	{r4, lr}
	__asm__ volatile(
    eed6:	f04f 0320 	mov.w	r3, #32
    eeda:	f3ef 8411 	mrs	r4, BASEPRI
    eede:	f383 8812 	msr	BASEPRI_MAX, r3
    eee2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    eee6:	f7ff ffd2 	bl	ee8e <unpend_thread_no_timeout>
	__asm__ volatile(
    eeea:	f384 8811 	msr	BASEPRI, r4
    eeee:	f3bf 8f6f 	isb	sy
}
    eef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eef6:	3018      	adds	r0, #24
    eef8:	f000 b8d3 	b.w	f0a2 <z_abort_timeout>

0000eefc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    eefc:	4603      	mov	r3, r0
    eefe:	b920      	cbnz	r0, ef0a <z_reschedule_irqlock+0xe>
    ef00:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    ef04:	b90a      	cbnz	r2, ef0a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    ef06:	f7f6 bd83 	b.w	5a10 <arch_swap>
    ef0a:	f383 8811 	msr	BASEPRI, r3
    ef0e:	f3bf 8f6f 	isb	sy
}
    ef12:	4770      	bx	lr

0000ef14 <z_reschedule_unlocked>:
	__asm__ volatile(
    ef14:	f04f 0320 	mov.w	r3, #32
    ef18:	f3ef 8011 	mrs	r0, BASEPRI
    ef1c:	f383 8812 	msr	BASEPRI_MAX, r3
    ef20:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ef24:	f7ff bfea 	b.w	eefc <z_reschedule_irqlock>

0000ef28 <z_priq_dumb_best>:
{
    ef28:	4603      	mov	r3, r0
	return list->head == list;
    ef2a:	6800      	ldr	r0, [r0, #0]
}
    ef2c:	4283      	cmp	r3, r0
    ef2e:	bf08      	it	eq
    ef30:	2000      	moveq	r0, #0
    ef32:	4770      	bx	lr

0000ef34 <z_ready_thread>:
{
    ef34:	b510      	push	{r4, lr}
    ef36:	f04f 0320 	mov.w	r3, #32
    ef3a:	f3ef 8411 	mrs	r4, BASEPRI
    ef3e:	f383 8812 	msr	BASEPRI_MAX, r3
    ef42:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    ef46:	f7fc f827 	bl	af98 <ready_thread>
	__asm__ volatile(
    ef4a:	f384 8811 	msr	BASEPRI, r4
    ef4e:	f3bf 8f6f 	isb	sy
}
    ef52:	bd10      	pop	{r4, pc}

0000ef54 <z_thread_timeout>:
{
    ef54:	b510      	push	{r4, lr}
    ef56:	4601      	mov	r1, r0
	__asm__ volatile(
    ef58:	f04f 0320 	mov.w	r3, #32
    ef5c:	f3ef 8411 	mrs	r4, BASEPRI
    ef60:	f383 8812 	msr	BASEPRI_MAX, r3
    ef64:	f3bf 8f6f 	isb	sy
		if (!killed) {
    ef68:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    ef6c:	f013 0f28 	tst.w	r3, #40	; 0x28
    ef70:	d10d      	bne.n	ef8e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    ef72:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    ef76:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    ef78:	b10b      	cbz	r3, ef7e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    ef7a:	f7ff ff88 	bl	ee8e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ef7e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    ef82:	f023 0314 	bic.w	r3, r3, #20
    ef86:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    ef8a:	f7fc f805 	bl	af98 <ready_thread>
	__asm__ volatile(
    ef8e:	f384 8811 	msr	BASEPRI, r4
    ef92:	f3bf 8f6f 	isb	sy
}
    ef96:	bd10      	pop	{r4, pc}

0000ef98 <add_to_waitq_locked>:
{
    ef98:	b538      	push	{r3, r4, r5, lr}
    ef9a:	4604      	mov	r4, r0
    ef9c:	460d      	mov	r5, r1
	unready_thread(thread);
    ef9e:	f7fc f84f 	bl	b040 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    efa2:	7b63      	ldrb	r3, [r4, #13]
    efa4:	f043 0302 	orr.w	r3, r3, #2
    efa8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    efaa:	b195      	cbz	r5, efd2 <add_to_waitq_locked+0x3a>
    efac:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    efae:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    efb0:	429d      	cmp	r5, r3
    efb2:	d015      	beq.n	efe0 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    efb4:	b1a3      	cbz	r3, efe0 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    efb6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    efba:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    efbe:	4291      	cmp	r1, r2
    efc0:	d008      	beq.n	efd4 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    efc2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    efc4:	2a00      	cmp	r2, #0
    efc6:	dd05      	ble.n	efd4 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    efc8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    efca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    efce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    efd0:	605c      	str	r4, [r3, #4]
}
    efd2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    efd4:	686a      	ldr	r2, [r5, #4]
    efd6:	4293      	cmp	r3, r2
    efd8:	d002      	beq.n	efe0 <add_to_waitq_locked+0x48>
    efda:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    efdc:	2b00      	cmp	r3, #0
    efde:	d1ec      	bne.n	efba <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    efe0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    efe2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    efe6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    efe8:	606c      	str	r4, [r5, #4]
}
    efea:	e7f2      	b.n	efd2 <add_to_waitq_locked+0x3a>

0000efec <z_unpend1_no_timeout>:
{
    efec:	b510      	push	{r4, lr}
	__asm__ volatile(
    efee:	f04f 0320 	mov.w	r3, #32
    eff2:	f3ef 8411 	mrs	r4, BASEPRI
    eff6:	f383 8812 	msr	BASEPRI_MAX, r3
    effa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    effe:	f7ff ff93 	bl	ef28 <z_priq_dumb_best>
		if (thread != NULL) {
    f002:	4601      	mov	r1, r0
    f004:	b108      	cbz	r0, f00a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    f006:	f7ff ff42 	bl	ee8e <unpend_thread_no_timeout>
	__asm__ volatile(
    f00a:	f384 8811 	msr	BASEPRI, r4
    f00e:	f3bf 8f6f 	isb	sy
}
    f012:	4608      	mov	r0, r1
    f014:	bd10      	pop	{r4, pc}

0000f016 <z_unpend_first_thread>:
{
    f016:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f018:	f04f 0320 	mov.w	r3, #32
    f01c:	f3ef 8511 	mrs	r5, BASEPRI
    f020:	f383 8812 	msr	BASEPRI_MAX, r3
    f024:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    f028:	f7ff ff7e 	bl	ef28 <z_priq_dumb_best>
		if (thread != NULL) {
    f02c:	4604      	mov	r4, r0
    f02e:	b120      	cbz	r0, f03a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    f030:	f7ff ff2d 	bl	ee8e <unpend_thread_no_timeout>
    f034:	3018      	adds	r0, #24
    f036:	f000 f834 	bl	f0a2 <z_abort_timeout>
	__asm__ volatile(
    f03a:	f385 8811 	msr	BASEPRI, r5
    f03e:	f3bf 8f6f 	isb	sy
}
    f042:	4620      	mov	r0, r4
    f044:	bd38      	pop	{r3, r4, r5, pc}

0000f046 <z_unpend_all>:
{
    f046:	b538      	push	{r3, r4, r5, lr}
    f048:	4605      	mov	r5, r0
	int need_sched = 0;
    f04a:	2000      	movs	r0, #0
	return list->head == list;
    f04c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f04e:	42a5      	cmp	r5, r4
    f050:	d000      	beq.n	f054 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f052:	b904      	cbnz	r4, f056 <z_unpend_all+0x10>
}
    f054:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    f056:	4620      	mov	r0, r4
    f058:	f7ff ff3c 	bl	eed4 <z_unpend_thread>
		z_ready_thread(thread);
    f05c:	4620      	mov	r0, r4
    f05e:	f7ff ff69 	bl	ef34 <z_ready_thread>
		need_sched = 1;
    f062:	2001      	movs	r0, #1
    f064:	e7f2      	b.n	f04c <z_unpend_all+0x6>

0000f066 <z_sched_wake>:
{
    f066:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f068:	f04f 0320 	mov.w	r3, #32
    f06c:	f3ef 8511 	mrs	r5, BASEPRI
    f070:	f383 8812 	msr	BASEPRI_MAX, r3
    f074:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    f078:	f7ff ff56 	bl	ef28 <z_priq_dumb_best>
		if (thread != NULL) {
    f07c:	4604      	mov	r4, r0
    f07e:	b158      	cbz	r0, f098 <z_sched_wake+0x32>
    f080:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
    f084:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    f086:	f7ff ff02 	bl	ee8e <unpend_thread_no_timeout>
    f08a:	3018      	adds	r0, #24
    f08c:	f000 f809 	bl	f0a2 <z_abort_timeout>
			ready_thread(thread);
    f090:	4620      	mov	r0, r4
    f092:	f7fb ff81 	bl	af98 <ready_thread>
			ret = true;
    f096:	2001      	movs	r0, #1
	__asm__ volatile(
    f098:	f385 8811 	msr	BASEPRI, r5
    f09c:	f3bf 8f6f 	isb	sy
}
    f0a0:	bd38      	pop	{r3, r4, r5, pc}

0000f0a2 <z_abort_timeout>:
{
    f0a2:	b510      	push	{r4, lr}
	__asm__ volatile(
    f0a4:	f04f 0220 	mov.w	r2, #32
    f0a8:	f3ef 8411 	mrs	r4, BASEPRI
    f0ac:	f382 8812 	msr	BASEPRI_MAX, r2
    f0b0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    f0b4:	6803      	ldr	r3, [r0, #0]
    f0b6:	b13b      	cbz	r3, f0c8 <z_abort_timeout+0x26>
			remove_timeout(to);
    f0b8:	f7fc fa20 	bl	b4fc <remove_timeout>
			ret = 0;
    f0bc:	2000      	movs	r0, #0
	__asm__ volatile(
    f0be:	f384 8811 	msr	BASEPRI, r4
    f0c2:	f3bf 8f6f 	isb	sy
}
    f0c6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    f0c8:	f06f 0015 	mvn.w	r0, #21
    f0cc:	e7f7      	b.n	f0be <z_abort_timeout+0x1c>

0000f0ce <z_get_next_timeout_expiry>:
{
    f0ce:	b510      	push	{r4, lr}
	__asm__ volatile(
    f0d0:	f04f 0320 	mov.w	r3, #32
    f0d4:	f3ef 8411 	mrs	r4, BASEPRI
    f0d8:	f383 8812 	msr	BASEPRI_MAX, r3
    f0dc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    f0e0:	f7fc f9e6 	bl	b4b0 <next_timeout>
	__asm__ volatile(
    f0e4:	f384 8811 	msr	BASEPRI, r4
    f0e8:	f3bf 8f6f 	isb	sy
}
    f0ec:	bd10      	pop	{r4, pc}

0000f0ee <z_set_timeout_expiry>:
{
    f0ee:	b570      	push	{r4, r5, r6, lr}
    f0f0:	4604      	mov	r4, r0
    f0f2:	460d      	mov	r5, r1
	__asm__ volatile(
    f0f4:	f04f 0320 	mov.w	r3, #32
    f0f8:	f3ef 8611 	mrs	r6, BASEPRI
    f0fc:	f383 8812 	msr	BASEPRI_MAX, r3
    f100:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    f104:	f7fc f9d4 	bl	b4b0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    f108:	2801      	cmp	r0, #1
    f10a:	dd05      	ble.n	f118 <z_set_timeout_expiry+0x2a>
    f10c:	42a0      	cmp	r0, r4
    f10e:	db03      	blt.n	f118 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    f110:	4629      	mov	r1, r5
    f112:	4620      	mov	r0, r4
    f114:	f7f9 f9d6 	bl	84c4 <sys_clock_set_timeout>
	__asm__ volatile(
    f118:	f386 8811 	msr	BASEPRI, r6
    f11c:	f3bf 8f6f 	isb	sy
}
    f120:	bd70      	pop	{r4, r5, r6, pc}

0000f122 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    f122:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    f124:	f7fc fada 	bl	b6dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    f128:	bd08      	pop	{r3, pc}

0000f12a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    f12a:	f7fc bad7 	b.w	b6dc <sys_clock_tick_get>

0000f12e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    f12e:	b108      	cbz	r0, f134 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    f130:	f7f7 b980 	b.w	6434 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    f134:	4770      	bx	lr

0000f136 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f136:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f13a:	bf08      	it	eq
    f13c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    f140:	b538      	push	{r3, r4, r5, lr}
    f142:	4605      	mov	r5, r0
    f144:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f146:	d01d      	beq.n	f184 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f148:	ea51 0300 	orrs.w	r3, r1, r0
    f14c:	d103      	bne.n	f156 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    f14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    f152:	f7fc bac3 	b.w	b6dc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    f156:	f06f 0301 	mvn.w	r3, #1
    f15a:	1a18      	subs	r0, r3, r0
    f15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f160:	eb63 0101 	sbc.w	r1, r3, r1
    f164:	2900      	cmp	r1, #0
    f166:	da0c      	bge.n	f182 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    f168:	f7fc fab8 	bl	b6dc <sys_clock_tick_get>
    f16c:	2d01      	cmp	r5, #1
    f16e:	4622      	mov	r2, r4
    f170:	f174 0400 	sbcs.w	r4, r4, #0
    f174:	462b      	mov	r3, r5
    f176:	bfbc      	itt	lt
    f178:	2301      	movlt	r3, #1
    f17a:	2200      	movlt	r2, #0
    f17c:	1818      	adds	r0, r3, r0
    f17e:	eb41 0102 	adc.w	r1, r1, r2
}
    f182:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    f184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f188:	4601      	mov	r1, r0
    f18a:	e7fa      	b.n	f182 <sys_clock_timeout_end_calc+0x4c>

0000f18c <k_timer_init>:
	timer->status = 0U;
    f18c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    f18e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    f192:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    f196:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    f19a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    f19e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    f1a0:	6343      	str	r3, [r0, #52]	; 0x34
}
    f1a2:	4770      	bx	lr

0000f1a4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    f1a4:	b510      	push	{r4, lr}
    f1a6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    f1a8:	f7ff ff7b 	bl	f0a2 <z_abort_timeout>

	if (inactive) {
    f1ac:	b9b0      	cbnz	r0, f1dc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    f1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f1b0:	b10b      	cbz	r3, f1b6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    f1b2:	4620      	mov	r0, r4
    f1b4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    f1b6:	f104 0018 	add.w	r0, r4, #24
    f1ba:	f7ff ff17 	bl	efec <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    f1be:	b168      	cbz	r0, f1dc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    f1c0:	f7ff feb8 	bl	ef34 <z_ready_thread>
	__asm__ volatile(
    f1c4:	f04f 0320 	mov.w	r3, #32
    f1c8:	f3ef 8011 	mrs	r0, BASEPRI
    f1cc:	f383 8812 	msr	BASEPRI_MAX, r3
    f1d0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    f1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    f1d8:	f7ff be90 	b.w	eefc <z_reschedule_irqlock>
    f1dc:	bd10      	pop	{r4, pc}

0000f1de <add_event>:
{
    f1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1e0:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    f1e2:	e9d0 1300 	ldrd	r1, r3, [r0]
    f1e6:	4288      	cmp	r0, r1
    f1e8:	4604      	mov	r4, r0
    f1ea:	d00d      	beq.n	f208 <add_event+0x2a>
	if ((pending == NULL) ||
    f1ec:	b163      	cbz	r3, f208 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    f1ee:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    f1f0:	b100      	cbz	r0, f1f4 <add_event+0x16>
    f1f2:	3860      	subs	r0, #96	; 0x60
    f1f4:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    f1f8:	4639      	mov	r1, r7
    f1fa:	f7ff fe52 	bl	eea2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    f1fe:	2800      	cmp	r0, #0
    f200:	dc02      	bgt.n	f208 <add_event+0x2a>
	return list->head == list;
    f202:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f204:	42b4      	cmp	r4, r6
    f206:	d109      	bne.n	f21c <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
    f208:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    f20a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    f20e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f210:	6065      	str	r5, [r4, #4]
}
    f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    f214:	6863      	ldr	r3, [r4, #4]
    f216:	42b3      	cmp	r3, r6
    f218:	d0f6      	beq.n	f208 <add_event+0x2a>
    f21a:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    f21c:	2e00      	cmp	r6, #0
    f21e:	d0f3      	beq.n	f208 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
    f220:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    f222:	b101      	cbz	r1, f226 <add_event+0x48>
    f224:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    f226:	4638      	mov	r0, r7
    f228:	f7ff fe3b 	bl	eea2 <z_sched_prio_cmp>
    f22c:	2800      	cmp	r0, #0
    f22e:	ddf1      	ble.n	f214 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
    f230:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    f232:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    f236:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f238:	6075      	str	r5, [r6, #4]
			return;
    f23a:	e7ea      	b.n	f212 <add_event+0x34>

0000f23c <register_events>:
{
    f23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    f240:	2500      	movs	r5, #0
{
    f242:	468b      	mov	fp, r1
    f244:	4614      	mov	r4, r2
    f246:	461f      	mov	r7, r3
    f248:	4682      	mov	sl, r0
	int events_registered = 0;
    f24a:	462e      	mov	r6, r5
	event->poller = NULL;
    f24c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    f24e:	455d      	cmp	r5, fp
    f250:	db02      	blt.n	f258 <register_events+0x1c>
}
    f252:	4630      	mov	r0, r6
    f254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f258:	f04f 0320 	mov.w	r3, #32
    f25c:	f3ef 8911 	mrs	r9, BASEPRI
    f260:	f383 8812 	msr	BASEPRI_MAX, r3
    f264:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    f268:	f89a 300d 	ldrb.w	r3, [sl, #13]
    f26c:	f003 031f 	and.w	r3, r3, #31
    f270:	3b01      	subs	r3, #1
    f272:	2b07      	cmp	r3, #7
    f274:	d80f      	bhi.n	f296 <register_events+0x5a>
    f276:	e8df f003 	tbb	[pc, r3]
    f27a:	041e      	.short	0x041e
    f27c:	0e0e0a0e 	.word	0x0e0e0a0e
    f280:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
    f282:	f8da 3010 	ldr.w	r3, [sl, #16]
    f286:	689b      	ldr	r3, [r3, #8]
    f288:	b12b      	cbz	r3, f296 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    f28a:	2302      	movs	r3, #2
    f28c:	e020      	b.n	f2d0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    f28e:	f8da 3010 	ldr.w	r3, [sl, #16]
    f292:	681b      	ldr	r3, [r3, #0]
    f294:	bb8b      	cbnz	r3, f2fa <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    f296:	bb47      	cbnz	r7, f2ea <register_events+0xae>
    f298:	7823      	ldrb	r3, [r4, #0]
    f29a:	b333      	cbz	r3, f2ea <register_events+0xae>
	switch (event->type) {
    f29c:	f89a 300d 	ldrb.w	r3, [sl, #13]
    f2a0:	f003 031f 	and.w	r3, r3, #31
    f2a4:	3b01      	subs	r3, #1
    f2a6:	2b07      	cmp	r3, #7
    f2a8:	d830      	bhi.n	f30c <register_events+0xd0>
    f2aa:	e8df f003 	tbb	[pc, r3]
    f2ae:	2833      	.short	0x2833
    f2b0:	2f2f282f 	.word	0x2f2f282f
    f2b4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
    f2b6:	f8da 3010 	ldr.w	r3, [sl, #16]
    f2ba:	689b      	ldr	r3, [r3, #8]
    f2bc:	2b00      	cmp	r3, #0
    f2be:	d0ea      	beq.n	f296 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    f2c0:	2301      	movs	r3, #1
    f2c2:	e005      	b.n	f2d0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    f2c4:	f8da 3010 	ldr.w	r3, [sl, #16]
    f2c8:	6a1b      	ldr	r3, [r3, #32]
    f2ca:	2b00      	cmp	r3, #0
    f2cc:	d0e3      	beq.n	f296 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    f2ce:	2310      	movs	r3, #16
	event->state |= state;
    f2d0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    f2d4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    f2d8:	f3c2 3145 	ubfx	r1, r2, #13, #6
    f2dc:	430b      	orrs	r3, r1
    f2de:	f363 3252 	bfi	r2, r3, #13, #6
    f2e2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    f2e6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    f2ea:	f389 8811 	msr	BASEPRI, r9
    f2ee:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    f2f2:	3501      	adds	r5, #1
    f2f4:	f10a 0a14 	add.w	sl, sl, #20
    f2f8:	e7a9      	b.n	f24e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    f2fa:	2304      	movs	r3, #4
    f2fc:	e7e8      	b.n	f2d0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    f2fe:	f8da 0010 	ldr.w	r0, [sl, #16]
    f302:	4622      	mov	r2, r4
    f304:	4651      	mov	r1, sl
    f306:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    f308:	f7ff ff69 	bl	f1de <add_event>
	event->poller = poller;
    f30c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    f310:	3601      	adds	r6, #1
    f312:	e7ea      	b.n	f2ea <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    f314:	f8da 0010 	ldr.w	r0, [sl, #16]
    f318:	4622      	mov	r2, r4
    f31a:	4651      	mov	r1, sl
    f31c:	e7f4      	b.n	f308 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    f31e:	f8da 0010 	ldr.w	r0, [sl, #16]
    f322:	4622      	mov	r2, r4
    f324:	4651      	mov	r1, sl
    f326:	3024      	adds	r0, #36	; 0x24
    f328:	e7ee      	b.n	f308 <register_events+0xcc>

0000f32a <signal_poll_event>:
{
    f32a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    f32e:	6884      	ldr	r4, [r0, #8]
{
    f330:	4605      	mov	r5, r0
    f332:	460e      	mov	r6, r1
	if (poller != NULL) {
    f334:	b144      	cbz	r4, f348 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    f336:	7863      	ldrb	r3, [r4, #1]
    f338:	2b01      	cmp	r3, #1
    f33a:	d136      	bne.n	f3aa <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
    f33c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    f340:	f013 0302 	ands.w	r3, r3, #2
    f344:	d10a      	bne.n	f35c <signal_poll_event+0x32>
		poller->is_polling = false;
    f346:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    f348:	68eb      	ldr	r3, [r5, #12]
    f34a:	f3c3 3145 	ubfx	r1, r3, #13, #6
    f34e:	430e      	orrs	r6, r1
	event->poller = NULL;
    f350:	2000      	movs	r0, #0
	event->state |= state;
    f352:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    f356:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    f358:	60eb      	str	r3, [r5, #12]
	return retcode;
    f35a:	e00b      	b.n	f374 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
    f35c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    f360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f364:	bf08      	it	eq
    f366:	f112 0f02 	cmneq.w	r2, #2
    f36a:	d105      	bne.n	f378 <signal_poll_event+0x4e>
		poller->is_polling = false;
    f36c:	2300      	movs	r3, #0
    f36e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    f370:	f06f 000a 	mvn.w	r0, #10
}
    f374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    f378:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    f37c:	4640      	mov	r0, r8
    f37e:	f7ff fda9 	bl	eed4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    f382:	2e08      	cmp	r6, #8
    f384:	bf0c      	ite	eq
    f386:	f06f 0303 	mvneq.w	r3, #3
    f38a:	2300      	movne	r3, #0
    f38c:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f38e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    f392:	06db      	lsls	r3, r3, #27
    f394:	d102      	bne.n	f39c <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
    f396:	f854 7c48 	ldr.w	r7, [r4, #-72]
    f39a:	b10f      	cbz	r7, f3a0 <signal_poll_event+0x76>
		poller->is_polling = false;
    f39c:	2300      	movs	r3, #0
    f39e:	e7d2      	b.n	f346 <signal_poll_event+0x1c>
	z_ready_thread(thread);
    f3a0:	4640      	mov	r0, r8
    f3a2:	f7ff fdc7 	bl	ef34 <z_ready_thread>
		poller->is_polling = false;
    f3a6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    f3a8:	e7ce      	b.n	f348 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    f3aa:	2b02      	cmp	r3, #2
    f3ac:	d1f6      	bne.n	f39c <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    f3ae:	7823      	ldrb	r3, [r4, #0]
    f3b0:	2b00      	cmp	r3, #0
    f3b2:	d0c9      	beq.n	f348 <signal_poll_event+0x1e>
    f3b4:	f854 7c04 	ldr.w	r7, [r4, #-4]
    f3b8:	2f00      	cmp	r7, #0
    f3ba:	d0f4      	beq.n	f3a6 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    f3bc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    f3c0:	f1a4 0914 	sub.w	r9, r4, #20
    f3c4:	f104 0014 	add.w	r0, r4, #20
    f3c8:	f7ff fe6b 	bl	f0a2 <z_abort_timeout>
		twork->poll_result = 0;
    f3cc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    f3d0:	4649      	mov	r1, r9
    f3d2:	4638      	mov	r0, r7
    f3d4:	f7ff fd36 	bl	ee44 <k_work_submit_to_queue>
		poller->is_polling = false;
    f3d8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    f3dc:	e7b4      	b.n	f348 <signal_poll_event+0x1e>

0000f3de <clear_event_registrations>:
	while (num_events--) {
    f3de:	2314      	movs	r3, #20
{
    f3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3e2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    f3e6:	2400      	movs	r4, #0
    f3e8:	2601      	movs	r6, #1
	while (num_events--) {
    f3ea:	b901      	cbnz	r1, f3ee <clear_event_registrations+0x10>
}
    f3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    f3ee:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    f3f2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    f3f6:	f003 031f 	and.w	r3, r3, #31
    f3fa:	2b08      	cmp	r3, #8
    f3fc:	f1a0 0714 	sub.w	r7, r0, #20
    f400:	d80d      	bhi.n	f41e <clear_event_registrations+0x40>
    f402:	fa06 f303 	lsl.w	r3, r6, r3
    f406:	f413 7f8b 	tst.w	r3, #278	; 0x116
    f40a:	d008      	beq.n	f41e <clear_event_registrations+0x40>
	return node->next != NULL;
    f40c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    f410:	b12b      	cbz	r3, f41e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    f412:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    f416:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    f418:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    f41a:	e940 4405 	strd	r4, r4, [r0, #-20]
    f41e:	f382 8811 	msr	BASEPRI, r2
    f422:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f426:	f04f 0320 	mov.w	r3, #32
    f42a:	f3ef 8211 	mrs	r2, BASEPRI
    f42e:	f383 8812 	msr	BASEPRI_MAX, r3
    f432:	f3bf 8f6f 	isb	sy
    f436:	3901      	subs	r1, #1
    f438:	4638      	mov	r0, r7
    f43a:	e7d6      	b.n	f3ea <clear_event_registrations+0xc>

0000f43c <k_poll_event_init>:
{
    f43c:	b510      	push	{r4, lr}
	event->type = type;
    f43e:	04d2      	lsls	r2, r2, #19
    f440:	0209      	lsls	r1, r1, #8
    f442:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
    f446:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    f44a:	430a      	orrs	r2, r1
    f44c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    f44e:	2400      	movs	r4, #0
	event->type = type;
    f450:	430a      	orrs	r2, r1
	event->obj = obj;
    f452:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    f456:	6084      	str	r4, [r0, #8]
}
    f458:	bd10      	pop	{r4, pc}

0000f45a <z_handle_obj_poll_events>:
{
    f45a:	4603      	mov	r3, r0
	return list->head == list;
    f45c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    f45e:	4283      	cmp	r3, r0
    f460:	d008      	beq.n	f474 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    f462:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    f466:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f468:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f46a:	2300      	movs	r3, #0
	node->prev = NULL;
    f46c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    f470:	f7ff bf5b 	b.w	f32a <signal_poll_event>
}
    f474:	4770      	bx	lr

0000f476 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    f476:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    f478:	e9c0 0000 	strd	r0, r0, [r0]
    f47c:	6083      	str	r3, [r0, #8]
}
    f47e:	4770      	bx	lr

0000f480 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    f480:	2300      	movs	r3, #0
    f482:	6083      	str	r3, [r0, #8]
}
    f484:	4770      	bx	lr

0000f486 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    f486:	6883      	ldr	r3, [r0, #8]
    f488:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    f48a:	68c3      	ldr	r3, [r0, #12]
    f48c:	6013      	str	r3, [r2, #0]
}
    f48e:	4770      	bx	lr

0000f490 <k_free>:
	if (ptr != NULL) {
    f490:	b120      	cbz	r0, f49c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    f492:	1f01      	subs	r1, r0, #4
    f494:	f850 0c04 	ldr.w	r0, [r0, #-4]
    f498:	f000 b84a 	b.w	f530 <k_heap_free>
}
    f49c:	4770      	bx	lr

0000f49e <k_heap_init>:
{
    f49e:	b410      	push	{r4}
    f4a0:	f100 040c 	add.w	r4, r0, #12
    f4a4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    f4a8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    f4aa:	f7fc bdca 	b.w	c042 <sys_heap_init>

0000f4ae <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f4ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4b2:	b085      	sub	sp, #20
    f4b4:	4606      	mov	r6, r0
    f4b6:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f4b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    f4bc:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f4be:	f7ff fe3a 	bl	f136 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f4c2:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f4c6:	4605      	mov	r5, r0
    f4c8:	460f      	mov	r7, r1
    f4ca:	f04f 0320 	mov.w	r3, #32
    f4ce:	f3ef 8411 	mrs	r4, BASEPRI
    f4d2:	f383 8812 	msr	BASEPRI_MAX, r3
    f4d6:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f4da:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f4de:	464a      	mov	r2, r9
    f4e0:	4641      	mov	r1, r8
    f4e2:	4630      	mov	r0, r6
    f4e4:	f7fc fd45 	bl	bf72 <sys_heap_aligned_alloc>
    f4e8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    f4ea:	f7fc f8f7 	bl	b6dc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f4ee:	9b03      	ldr	r3, [sp, #12]
    f4f0:	b13b      	cbz	r3, f502 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    f4f2:	f384 8811 	msr	BASEPRI, r4
    f4f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f4fa:	4618      	mov	r0, r3
    f4fc:	b005      	add	sp, #20
    f4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    f502:	1a28      	subs	r0, r5, r0
    f504:	eb67 0101 	sbc.w	r1, r7, r1
    f508:	2801      	cmp	r0, #1
    f50a:	f171 0200 	sbcs.w	r2, r1, #0
    f50e:	dbf0      	blt.n	f4f2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f510:	e9cd 0100 	strd	r0, r1, [sp]
    f514:	465a      	mov	r2, fp
    f516:	4621      	mov	r1, r4
    f518:	4650      	mov	r0, sl
    f51a:	f7fb fdcf 	bl	b0bc <z_pend_curr>
	__asm__ volatile(
    f51e:	f04f 0320 	mov.w	r3, #32
    f522:	f3ef 8411 	mrs	r4, BASEPRI
    f526:	f383 8812 	msr	BASEPRI_MAX, r3
    f52a:	f3bf 8f6f 	isb	sy
    f52e:	e7d6      	b.n	f4de <k_heap_aligned_alloc+0x30>

0000f530 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    f530:	b538      	push	{r3, r4, r5, lr}
    f532:	4604      	mov	r4, r0
    f534:	f04f 0320 	mov.w	r3, #32
    f538:	f3ef 8511 	mrs	r5, BASEPRI
    f53c:	f383 8812 	msr	BASEPRI_MAX, r3
    f540:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    f544:	f7fc fcdd 	bl	bf02 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    f548:	f104 000c 	add.w	r0, r4, #12
    f54c:	f7ff fd7b 	bl	f046 <z_unpend_all>
    f550:	b130      	cbz	r0, f560 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    f552:	4629      	mov	r1, r5
    f554:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    f55c:	f7fb bc5c 	b.w	ae18 <z_reschedule>
	__asm__ volatile(
    f560:	f385 8811 	msr	BASEPRI, r5
    f564:	f3bf 8f6f 	isb	sy
}
    f568:	bd38      	pop	{r3, r4, r5, pc}
	...

0000f56c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f56c:	f7f9 b800 	b.w	8570 <SystemInit>
